(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _pi = 3.141592653589793
let seed = ref (123456789)
let rec rand () =
  let __ret = ref 0 in
  (try
  seed := ((((!seed * 1103515245) + 12345) mod 2147483648 + 2147483648) mod 2147483648);
  __ret := (Obj.magic (!seed) : int); raise Return
  with Return -> !__ret)

and random_int a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let r = ((rand () mod ((b - a) + 1) + ((b - a) + 1)) mod ((b - a) + 1)) in
  __ret := (Obj.magic ((a + r)) : int); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x <= 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref (x) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and arcsin_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let term = ref (x) in
  let sum = ref (x) in
  let n = ref (1) in
  (try while (!n < 10) do
    try
  let num = ((((((2.0 *. float_of_int (!n)) -. 1.0) *. ((2.0 *. float_of_int (!n)) -. 1.0)) *. x) *. x) *. !term) in
  let den = ((2.0 *. float_of_int (!n)) *. ((2.0 *. float_of_int (!n)) +. 1.0)) in
  term := (num /. den);
  sum := (!sum +. !term);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and acos_taylor x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic (((_pi /. 2.0) -. arcsin_taylor (Obj.repr (x)))) : float); raise Return
  with Return -> !__ret)

and vector_len v =
  let __ret = ref 0 in
  (try
  let v = (Obj.magic v : (string * Obj.t) list) in
  __ret := (Obj.magic (List.length ((Obj.obj (List.assoc (__str ("components")) (v) : Obj.t) : float list))) : int); raise Return
  with Return -> !__ret)

and vector_to_string v =
  let __ret = ref "" in
  (try
  let v = (Obj.magic v : (string * Obj.t) list) in
  let s = ref ("(") in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("components")) (v) : Obj.t) : float list))) do
    try
  s := (!s ^ (Printf.sprintf "%.16g" ((let __l = (Obj.obj (List.assoc (__str ("components")) (v) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  if (!i < (List.length ((Obj.obj (List.assoc (__str ("components")) (v) : Obj.t) : float list)) - 1)) then (
  s := (!s ^ ",");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ ")");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and vector_add a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  let size = vector_len ((Obj.magic a : (string * Obj.t) list)) in
  if (size <> vector_len ((Obj.magic b : (string * Obj.t) list))) then (
  __ret := (Obj.magic ([(__str ("components"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  );
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (((let __l = (Obj.obj (List.assoc (__str ("components")) (a) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. (let __l = (Obj.obj (List.assoc (__str ("components")) (b) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("components"), Obj.repr (!res))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and vector_sub a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  let size = vector_len ((Obj.magic a : (string * Obj.t) list)) in
  if (size <> vector_len ((Obj.magic b : (string * Obj.t) list))) then (
  __ret := (Obj.magic ([(__str ("components"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  );
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (((let __l = (Obj.obj (List.assoc (__str ("components")) (a) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. (let __l = (Obj.obj (List.assoc (__str ("components")) (b) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("components"), Obj.repr (!res))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and vector_eq a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  if (vector_len ((Obj.magic a : (string * Obj.t) list)) <> vector_len ((Obj.magic b : (string * Obj.t) list))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < vector_len ((Obj.magic a : (string * Obj.t) list))) do
    try
  if ((let __l = (Obj.obj (List.assoc (__str ("components")) (a) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> (let __l = (Obj.obj (List.assoc (__str ("components")) (b) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and vector_mul_scalar v s =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let v = (Obj.magic v : (string * Obj.t) list) in
  let s = (Obj.magic s : float) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < vector_len ((Obj.magic v : (string * Obj.t) list))) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (((let __l = (Obj.obj (List.assoc (__str ("components")) (v) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. s)) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("components"), Obj.repr (!res))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and vector_dot a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  let size = vector_len ((Obj.magic a : (string * Obj.t) list)) in
  if (size <> vector_len ((Obj.magic b : (string * Obj.t) list))) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < size) do
    try
  sum := (!sum +. ((let __l = (Obj.obj (List.assoc (__str ("components")) (a) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (Obj.obj (List.assoc (__str ("components")) (b) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and vector_copy v =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let v = (Obj.magic v : (string * Obj.t) list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < vector_len ((Obj.magic v : (string * Obj.t) list))) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic ((let __l = (Obj.obj (List.assoc (__str ("components")) (v) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("components"), Obj.repr (!res))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and vector_component v idx =
  let __ret = ref 0.0 in
  (try
  let v = (Obj.magic v : (string * Obj.t) list) in
  let idx = (Obj.magic idx : int) in
  __ret := (Obj.magic ((let __l = (Obj.obj (List.assoc (__str ("components")) (v) : Obj.t) : float list) in let __i = idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float); raise Return
  with Return -> !__ret)

and vector_change_component v pos value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let v = (Obj.magic v : (string * Obj.t) list) in
  let pos = (Obj.magic pos : int) in
  let value = (Obj.magic value : float) in
  let comps = ref ((Obj.obj (List.assoc (__str ("components")) (v) : Obj.t) : float list)) in
  comps := (List.mapi (fun __i __x -> if __i = pos then value else __x) (!comps));
  __ret := (Obj.magic ([(__str ("components"), Obj.repr (!comps))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and vector_euclidean_length v =
  let __ret = ref 0.0 in
  (try
  let v = (Obj.magic v : (string * Obj.t) list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length ((Obj.obj (List.assoc (__str ("components")) (v) : Obj.t) : float list))) do
    try
  sum := (!sum +. ((let __l = (Obj.obj (List.assoc (__str ("components")) (v) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (Obj.obj (List.assoc (__str ("components")) (v) : Obj.t) : float list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref (sqrtApprox (Obj.repr (!sum))) in
  __ret := (Obj.magic (!result) : float); raise Return
  with Return -> !__ret)

and vector_angle a b deg =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  let num = vector_dot ((Obj.magic a : (string * Obj.t) list)) ((Obj.magic b : (string * Obj.t) list)) in
  let den = (vector_euclidean_length ((Obj.magic a : (string * Obj.t) list)) *. vector_euclidean_length ((Obj.magic b : (string * Obj.t) list))) in
  let ang = ref (acos_taylor (Obj.repr ((num /. den)))) in
  if deg then (
  ang := ((!ang *. 180.0) /. _pi);
  );
  __ret := (Obj.magic (!ang) : float); raise Return
  with Return -> !__ret)

and zero_vector d =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let d = (Obj.magic d : int) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < d) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (0.0) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("components"), Obj.repr (!res))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and unit_basis_vector d pos =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let d = (Obj.magic d : int) in
  let pos = (Obj.magic pos : int) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < d) do
    try
  if (!i = pos) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (1.0) : float)]) : float list);
  ) else (
  res := (Obj.magic (List.append (!res) [(Obj.magic (0.0) : float)]) : float list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("components"), Obj.repr (!res))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and axpy s x y =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let s = (Obj.magic s : float) in
  let x = (Obj.magic x : (string * Obj.t) list) in
  let y = (Obj.magic y : (string * Obj.t) list) in
  __ret := (Obj.magic (vector_add (vector_mul_scalar ((Obj.magic x : (string * Obj.t) list)) (Obj.repr (s))) ((Obj.magic y : (string * Obj.t) list))) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and random_vector n a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let n = (Obj.magic n : int) in
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (float_of_int (random_int (Obj.repr (a)) (Obj.repr (b)))) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("components"), Obj.repr (!res))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and matrix_to_string m =
  let __ret = ref "" in
  (try
  let m = (Obj.magic m : (string * Obj.t) list) in
  let ans = ref ("") in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("height")) (m) : Obj.t) : int)) do
    try
  ans := (!ans ^ "|");
  let j = ref (0) in
  (try while (!j < (Obj.obj (List.assoc (__str ("width")) (m) : Obj.t) : int)) do
    try
  ans := (!ans ^ (Printf.sprintf "%.16g" ((let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (m) : Obj.t) : float list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  if (!j < ((Obj.obj (List.assoc (__str ("width")) (m) : Obj.t) : int) - 1)) then (
  ans := (!ans ^ ",");
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  ans := (!ans ^ "|\n");
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!ans) : string); raise Return
  with Return -> !__ret)

and matrix_add a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  if (((Obj.obj (List.assoc (__str ("width")) (a) : Obj.t) : int) <> (Obj.obj (List.assoc (__str ("width")) (b) : Obj.t) : int)) || ((Obj.obj (List.assoc (__str ("height")) (a) : Obj.t) : int) <> (Obj.obj (List.assoc (__str ("height")) (b) : Obj.t) : int))) then (
  __ret := (Obj.magic ([(__str ("data"), Obj.repr ([])); (__str ("width"), Obj.repr (0)); (__str ("height"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  );
  let mat = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("height")) (a) : Obj.t) : int)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < (Obj.obj (List.assoc (__str ("width")) (a) : Obj.t) : int)) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (((let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (a) : Obj.t) : float list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. (let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (b) : Obj.t) : float list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  mat := (Obj.magic (List.append (!mat) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!mat)); (__str ("width"), Obj.repr ((Obj.obj (List.assoc (__str ("width")) (a) : Obj.t) : int))); (__str ("height"), Obj.repr ((Obj.obj (List.assoc (__str ("height")) (a) : Obj.t) : int)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and matrix_sub a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  if (((Obj.obj (List.assoc (__str ("width")) (a) : Obj.t) : int) <> (Obj.obj (List.assoc (__str ("width")) (b) : Obj.t) : int)) || ((Obj.obj (List.assoc (__str ("height")) (a) : Obj.t) : int) <> (Obj.obj (List.assoc (__str ("height")) (b) : Obj.t) : int))) then (
  __ret := (Obj.magic ([(__str ("data"), Obj.repr ([])); (__str ("width"), Obj.repr (0)); (__str ("height"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  );
  let mat = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("height")) (a) : Obj.t) : int)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < (Obj.obj (List.assoc (__str ("width")) (a) : Obj.t) : int)) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (((let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (a) : Obj.t) : float list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. (let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (b) : Obj.t) : float list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  mat := (Obj.magic (List.append (!mat) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!mat)); (__str ("width"), Obj.repr ((Obj.obj (List.assoc (__str ("width")) (a) : Obj.t) : int))); (__str ("height"), Obj.repr ((Obj.obj (List.assoc (__str ("height")) (a) : Obj.t) : int)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and matrix_mul_vector m v =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let m = (Obj.magic m : (string * Obj.t) list) in
  let v = (Obj.magic v : (string * Obj.t) list) in
  if (List.length ((Obj.obj (List.assoc (__str ("components")) (v) : Obj.t) : float list)) <> (Obj.obj (List.assoc (__str ("width")) (m) : Obj.t) : int)) then (
  __ret := (Obj.magic ([(__str ("components"), Obj.repr ([]))]) : (string * Obj.t) list); raise Return
  );
  let res = ref (zero_vector (Obj.repr ((Obj.obj (List.assoc (__str ("height")) (m) : Obj.t) : int)))) in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("height")) (m) : Obj.t) : int)) do
    try
  let sum = ref (0.0) in
  let j = ref (0) in
  (try while (!j < (Obj.obj (List.assoc (__str ("width")) (m) : Obj.t) : int)) do
    try
  sum := (!sum +. ((let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (m) : Obj.t) : float list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (Obj.obj (List.assoc (__str ("components")) (v) : Obj.t) : float list) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := vector_change_component (!res) (Obj.repr (!i)) (Obj.repr (!sum));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and matrix_mul_scalar m s =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let m = (Obj.magic m : (string * Obj.t) list) in
  let s = (Obj.magic s : float) in
  let mat = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("height")) (m) : Obj.t) : int)) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < (Obj.obj (List.assoc (__str ("width")) (m) : Obj.t) : int)) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (((let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (m) : Obj.t) : float list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. s)) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  mat := (Obj.magic (List.append (!mat) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!mat)); (__str ("width"), Obj.repr ((Obj.obj (List.assoc (__str ("width")) (m) : Obj.t) : int))); (__str ("height"), Obj.repr ((Obj.obj (List.assoc (__str ("height")) (m) : Obj.t) : int)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and matrix_component m x y =
  let __ret = ref 0.0 in
  (try
  let m = (Obj.magic m : (string * Obj.t) list) in
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  __ret := (Obj.magic ((let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (m) : Obj.t) : float list list) in let __i = x in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = y in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float); raise Return
  with Return -> !__ret)

and matrix_change_component m x y value =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let m = (Obj.magic m : (string * Obj.t) list) in
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  let value = (Obj.magic value : float) in
  let data = ref ((Obj.obj (List.assoc (__str ("data")) (m) : Obj.t) : float list list)) in
  data := (List.mapi (fun __i __x -> if __i = x then (List.mapi (fun __i __x -> if __i = y then value else __x) ((let __l = !data in let __i = x in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!data));
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!data)); (__str ("width"), Obj.repr ((Obj.obj (List.assoc (__str ("width")) (m) : Obj.t) : int))); (__str ("height"), Obj.repr ((Obj.obj (List.assoc (__str ("height")) (m) : Obj.t) : int)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and matrix_minor m x y =
  let __ret = ref 0.0 in
  (try
  let m = (Obj.magic m : (string * Obj.t) list) in
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  if ((Obj.obj (List.assoc (__str ("height")) (m) : Obj.t) : int) <> (Obj.obj (List.assoc (__str ("width")) (m) : Obj.t) : int)) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let minor = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("height")) (m) : Obj.t) : int)) do
    try
  if (!i <> x) then (
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < (Obj.obj (List.assoc (__str ("width")) (m) : Obj.t) : int)) do
    try
  if (!j <> y) then (
  row := (Obj.magic (List.append (!row) [(Obj.magic ((let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (m) : Obj.t) : float list list) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  minor := (Obj.magic (List.append (!minor) [(Obj.magic (!row) : float list)]) : float list list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let sub = [(__str ("data"), Obj.repr (!minor)); (__str ("width"), Obj.repr (((Obj.obj (List.assoc (__str ("width")) (m) : Obj.t) : int) - 1))); (__str ("height"), Obj.repr (((Obj.obj (List.assoc (__str ("height")) (m) : Obj.t) : int) - 1)))] in
  __ret := (Obj.magic (matrix_determinant (sub)) : float); raise Return
  with Return -> !__ret)

and matrix_cofactor m x y =
  let __ret = ref 0.0 in
  (try
  let m = (Obj.magic m : (string * Obj.t) list) in
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  let sign = if ((((x + y) mod 2 + 2) mod 2) = 0) then 1.0 else (-.(1.0)) in
  __ret := (Obj.magic ((sign *. matrix_minor ((Obj.magic m : (string * Obj.t) list)) (Obj.repr (x)) (Obj.repr (y)))) : float); raise Return
  with Return -> !__ret)

and matrix_determinant m =
  let __ret = ref 0.0 in
  (try
  let m = (Obj.magic m : (string * Obj.t) list) in
  if ((Obj.obj (List.assoc (__str ("height")) (m) : Obj.t) : int) <> (Obj.obj (List.assoc (__str ("width")) (m) : Obj.t) : int)) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  if ((Obj.obj (List.assoc (__str ("height")) (m) : Obj.t) : int) = 0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  if ((Obj.obj (List.assoc (__str ("height")) (m) : Obj.t) : int) = 1) then (
  __ret := (Obj.magic ((let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (m) : Obj.t) : float list list) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float); raise Return
  );
  if ((Obj.obj (List.assoc (__str ("height")) (m) : Obj.t) : int) = 2) then (
  __ret := (Obj.magic ((((let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (m) : Obj.t) : float list list) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (m) : Obj.t) : float list list) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) -. ((let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (m) : Obj.t) : float list list) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (m) : Obj.t) : float list list) in let __i = 1 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))))) : float); raise Return
  );
  let sum = ref (0.0) in
  let y = ref (0) in
  (try while (!y < (Obj.obj (List.assoc (__str ("width")) (m) : Obj.t) : int)) do
    try
  sum := (!sum +. ((let __l = (let __l = (Obj.obj (List.assoc (__str ("data")) (m) : Obj.t) : float list list) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !y in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. matrix_cofactor ((Obj.magic m : (string * Obj.t) list)) (Obj.repr (0)) (Obj.repr (!y))));
  y := (!y + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and square_zero_matrix n =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let n = (Obj.magic n : int) in
  let mat = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (0.0) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  mat := (Obj.magic (List.append (!mat) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!mat)); (__str ("width"), Obj.repr (n)); (__str ("height"), Obj.repr (n))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and random_matrix w h a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let w = (Obj.magic w : int) in
  let h = (Obj.magic h : int) in
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let mat = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < h) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < w) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (float_of_int (random_int (Obj.repr (a)) (Obj.repr (b)))) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  mat := (Obj.magic (List.append (!mat) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!mat)); (__str ("width"), Obj.repr (w)); (__str ("height"), Obj.repr (h))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let v1 = [(__str ("components"), Obj.repr ([1.0; 2.0; 3.0]))] in
  let v2 = [(__str ("components"), Obj.repr ([4.0; 5.0; 6.0]))] in
  print_endline ((vector_to_string (vector_add (v1) (v2))));
  print_endline ((Printf.sprintf "%.16g" (vector_dot (v1) (v2))));
  print_endline ((Printf.sprintf "%.16g" (vector_euclidean_length (v1))));
  let m = [(__str ("data"), Obj.repr ([[1.0; 2.0]; [3.0; 4.0]])); (__str ("width"), Obj.repr (2)); (__str ("height"), Obj.repr (2))] in
  print_endline ((Printf.sprintf "%.16g" (matrix_determinant (m))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
