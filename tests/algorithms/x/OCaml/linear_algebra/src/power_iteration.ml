(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec abs x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x < 0.0) then (
  __ret := (Obj.magic ((-.(x))) : float); raise Return
  );
  __ret := (Obj.magic (x) : float); raise Return
  with Return -> !__ret)

and sqrtApprox x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  if (x = 0.0) then (
  __ret := (Obj.magic (0.0) : float); raise Return
  );
  let guess = ref ((x /. 2.0)) in
  let i = ref (0) in
  (try while (!i < 20) do
    try
  guess := ((!guess +. (x /. !guess)) /. 2.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!guess) : float); raise Return
  with Return -> !__ret)

and dot a b =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : float list) in
  let b = (Obj.magic b : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  sum := (!sum +. ((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and mat_vec_mult mat vec =
  let __ret = ref ([] : (float) list) in
  (try
  let mat = (Obj.magic mat : float list list) in
  let vec = (Obj.magic vec : float list) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (mat)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (dot ((let __l = mat in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) (vec)) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and norm vec =
  let __ret = ref 0.0 in
  (try
  let vec = (Obj.magic vec : float list) in
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (vec)) do
    try
  sum := (!sum +. ((let __l = vec in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = vec in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let root = ref (sqrtApprox (Obj.repr (!sum))) in
  __ret := (Obj.magic (!root) : float); raise Return
  with Return -> !__ret)

and normalize vec =
  let __ret = ref ([] : (float) list) in
  (try
  let vec = (Obj.magic vec : float list) in
  let n = norm (vec) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < List.length (vec)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (((let __l = vec in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) /. n)) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and power_iteration matrix vector error_tol max_iterations =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let matrix = (Obj.magic matrix : float list list) in
  let vector = (Obj.magic vector : float list) in
  let error_tol = (Obj.magic error_tol : float) in
  let max_iterations = (Obj.magic max_iterations : int) in
  let v = ref (normalize (vector)) in
  let lambda_prev = ref (0.0) in
  let lambda = ref (0.0) in
  let err = ref (1000000000000.0) in
  let iterations = ref (0) in
  (try while ((!err > error_tol) && (!iterations < max_iterations)) do
    try
  let w = ref (mat_vec_mult (matrix) (!v)) in
  v := (Obj.magic normalize (!w) : float list);
  let mv = ref (mat_vec_mult (matrix) (!v)) in
  lambda := dot (!v) (!mv);
  let denom = if (!lambda <> 0.0) then abs_float !lambda else 1.0 in
  err := (abs_float (!lambda -. !lambda_prev) /. denom);
  lambda_prev := !lambda;
  iterations := (!iterations + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("eigenvalue"), Obj.repr (!lambda)); (__str ("eigenvector"), Obj.repr (!v))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let input_matrix = ref ([[41.0; 4.0; 20.0]; [4.0; 26.0; 30.0]; [20.0; 30.0; 50.0]])
let vector = ref ([41.0; 4.0; 20.0])
let result = power_iteration (!input_matrix) (!vector) (Obj.repr (0.000000000001)) (Obj.repr (100))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((Printf.sprintf "%.16g" ((Obj.obj (List.assoc (__str ("eigenvalue")) (result) : Obj.t) : float))));
  print_endline ((__str (Obj.magic ((Obj.obj (List.assoc (__str ("eigenvector")) (result) : Obj.t) : float list)) : Obj.t)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
