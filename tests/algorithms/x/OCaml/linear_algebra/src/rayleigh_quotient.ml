(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec complex_conj z =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let z = (Obj.magic z : (string * Obj.t) list) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr ((Obj.obj (List.assoc (__str ("re")) (z) : Obj.t) : float))); (__str ("im"), Obj.repr ((-.((Obj.obj (List.assoc (__str ("im")) (z) : Obj.t) : float)))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and complex_eq a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  __ret := (Obj.magic ((((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) = (Obj.obj (List.assoc (__str ("re")) (b) : Obj.t) : float)) && ((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) = (Obj.obj (List.assoc (__str ("im")) (b) : Obj.t) : float)))) : bool); raise Return
  with Return -> !__ret)

and complex_add a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("re")) (b) : Obj.t) : float)))); (__str ("im"), Obj.repr (((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) +. (Obj.obj (List.assoc (__str ("im")) (b) : Obj.t) : float))))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and complex_mul a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list) in
  let b = (Obj.magic b : (string * Obj.t) list) in
  let real = (((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("re")) (b) : Obj.t) : float)) -. ((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("im")) (b) : Obj.t) : float))) in
  let imag = (((Obj.obj (List.assoc (__str ("re")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("im")) (b) : Obj.t) : float)) +. ((Obj.obj (List.assoc (__str ("im")) (a) : Obj.t) : float) *. (Obj.obj (List.assoc (__str ("re")) (b) : Obj.t) : float))) in
  __ret := (Obj.magic ([(__str ("re"), Obj.repr (real)); (__str ("im"), Obj.repr (imag))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and conj_vector v =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let v = (Obj.magic v : (string * Obj.t) list list) in
  let res = ref (([] : ((string * Obj.t) list) list)) in
  let i = ref (0) in
  (try while (!i < List.length (v)) do
    try
  res := (Obj.magic (List.append (!res) [(Obj.magic (complex_conj ((Obj.magic (let __l = v in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) : (string * Obj.t) list))) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and vec_mat_mul v m =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let v = (Obj.magic v : (string * Obj.t) list list) in
  let m = (Obj.magic m : (string * Obj.t) list list list) in
  let result = ref (([] : ((string * Obj.t) list) list)) in
  let col = ref (0) in
  (try while (!col < List.length ((let __l = m in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  let sum = ref ([(__str ("re"), Obj.repr (0.0)); (__str ("im"), Obj.repr (0.0))]) in
  let row = ref (0) in
  (try while (!row < List.length (v)) do
    try
  sum := complex_add (!sum) (complex_mul ((Obj.magic (let __l = v in let __i = !row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) : (string * Obj.t) list)) ((Obj.magic (let __l = (let __l = m in let __i = !row in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) : (string * Obj.t) list)));
  row := (!row + 1);
    with Continue -> ()
  done with Break -> ());
  result := (Obj.magic (List.append (!result) [(Obj.magic (!sum) : (string * Obj.t) list)]) : (string * Obj.t) list list);
  col := (!col + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and dot a b =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let a = (Obj.magic a : (string * Obj.t) list list) in
  let b = (Obj.magic b : (string * Obj.t) list list) in
  let sum = ref ([(__str ("re"), Obj.repr (0.0)); (__str ("im"), Obj.repr (0.0))]) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  sum := complex_add (!sum) (complex_mul ((Obj.magic (let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) : (string * Obj.t) list)) ((Obj.magic (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) : (string * Obj.t) list)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and is_hermitian m =
  let __ret = ref false in
  (try
  let m = (Obj.magic m : (string * Obj.t) list list list) in
  let i = ref (0) in
  (try while (!i < List.length (m)) do
    try
  let j = ref (0) in
  (try while (!j < List.length (m)) do
    try
  if not (complex_eq ((Obj.magic (let __l = (let __l = m in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) : (string * Obj.t) list)) (complex_conj ((Obj.magic (let __l = (let __l = m in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) : (string * Obj.t) list)))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and rayleigh_quotient a v =
  let __ret = ref 0.0 in
  (try
  let a = (Obj.magic a : (string * Obj.t) list list list) in
  let v = (Obj.magic v : (string * Obj.t) list list) in
  let v_star = ref (conj_vector (v)) in
  let v_star_dot = ref (vec_mat_mul ((Obj.magic !v_star : (string * Obj.t) list list)) (a)) in
  let num = dot ((Obj.magic !v_star_dot : (string * Obj.t) list list)) (v) in
  let den = dot ((Obj.magic !v_star : (string * Obj.t) list list)) (v) in
  __ret := (Obj.magic (((Obj.obj (List.assoc (__str ("re")) (num) : Obj.t) : float) /. (Obj.obj (List.assoc (__str ("re")) (den) : Obj.t) : float))) : float); raise Return
  with Return -> !__ret)


let a = ref ([[[(__str ("re"), Obj.repr (2.0)); (__str ("im"), Obj.repr (0.0))]; [(__str ("re"), Obj.repr (2.0)); (__str ("im"), Obj.repr (1.0))]; [(__str ("re"), Obj.repr (4.0)); (__str ("im"), Obj.repr (0.0))]]; [[(__str ("re"), Obj.repr (2.0)); (__str ("im"), Obj.repr ((-.(1.0))))]; [(__str ("re"), Obj.repr (3.0)); (__str ("im"), Obj.repr (0.0))]; [(__str ("re"), Obj.repr (0.0)); (__str ("im"), Obj.repr (1.0))]]; [[(__str ("re"), Obj.repr (4.0)); (__str ("im"), Obj.repr (0.0))]; [(__str ("re"), Obj.repr (0.0)); (__str ("im"), Obj.repr ((-.(1.0))))]; [(__str ("re"), Obj.repr (1.0)); (__str ("im"), Obj.repr (0.0))]]])
let v = ref ([[(__str ("re"), Obj.repr (1.0)); (__str ("im"), Obj.repr (0.0))]; [(__str ("re"), Obj.repr (2.0)); (__str ("im"), Obj.repr (0.0))]; [(__str ("re"), Obj.repr (3.0)); (__str ("im"), Obj.repr (0.0))]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  if is_hermitian ((Obj.magic !a : (string * Obj.t) list list list)) then (
  let r1 = rayleigh_quotient ((Obj.magic !a : (string * Obj.t) list list list)) ((Obj.magic !v : (string * Obj.t) list list)) in
  print_endline (Printf.sprintf "%.15f" (r1));
  print_string "\n";
  );
  let b = ref ([[[(__str ("re"), Obj.repr (1.0)); (__str ("im"), Obj.repr (0.0))]; [(__str ("re"), Obj.repr (2.0)); (__str ("im"), Obj.repr (0.0))]; [(__str ("re"), Obj.repr (4.0)); (__str ("im"), Obj.repr (0.0))]]; [[(__str ("re"), Obj.repr (2.0)); (__str ("im"), Obj.repr (0.0))]; [(__str ("re"), Obj.repr (3.0)); (__str ("im"), Obj.repr (0.0))]; [(__str ("re"), Obj.repr ((-.(1.0)))); (__str ("im"), Obj.repr (0.0))]]; [[(__str ("re"), Obj.repr (4.0)); (__str ("im"), Obj.repr (0.0))]; [(__str ("re"), Obj.repr ((-.(1.0)))); (__str ("im"), Obj.repr (0.0))]; [(__str ("re"), Obj.repr (1.0)); (__str ("im"), Obj.repr (0.0))]]]) in
  if is_hermitian ((Obj.magic !b : (string * Obj.t) list list list)) then (
  let r2 = rayleigh_quotient ((Obj.magic !b : (string * Obj.t) list list list)) ((Obj.magic !v : (string * Obj.t) list list)) in
  print_endline (Printf.sprintf "%.15f" (r2));
  );
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
