(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec absf x =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  __ret := (Obj.magic (if (x < 0.0) then (-.(x)) else x) : float); raise Return
  with Return -> !__ret)

and strictly_diagonally_dominant matrix =
  let __ret = ref false in
  (try
  let matrix = (Obj.magic matrix : float list list) in
  let n = ref (List.length (matrix)) in
  let i = ref (0) in
  (try while (!i < !n) do
    try
  let sum = ref (0.0) in
  let j = ref (0) in
  (try while (!j < !n) do
    try
  if (!i <> !j) then (
  sum := (!sum +. absf (Obj.repr ((let __l = (let __l = matrix in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  if (absf (Obj.repr ((let __l = (let __l = matrix in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) <= !sum) then (
  (failwith ("Coefficient matrix is not strictly diagonally dominant"));
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and jacobi_iteration_method coefficient constant init_val iterations =
  let __ret = ref ([] : (float) list) in
  (try
  let coefficient = (Obj.magic coefficient : float list list) in
  let constant = (Obj.magic constant : float list) in
  let init_val = (Obj.magic init_val : float list) in
  let iterations = (Obj.magic iterations : int) in
  let n = List.length (coefficient) in
  if (n = 0) then (
  (failwith ("Coefficient matrix cannot be empty"));
  );
  if (List.length (constant) <> n) then (
  (failwith ("Constant vector length must equal number of rows in coefficient matrix"));
  );
  if (List.length (init_val) <> n) then (
  (failwith ("Initial values count must match matrix size"));
  );
  let r = ref (0) in
  (try while (!r < n) do
    try
  if (List.length ((let __l = coefficient in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) <> n) then (
  (failwith ("Coefficient matrix must be square"));
  );
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  if (iterations <= 0) then (
  (failwith ("Iterations must be at least 1"));
  );
  ignore (strictly_diagonally_dominant (coefficient));
  let x = ref (init_val) in
  let k = ref (0) in
  (try while (!k < iterations) do
    try
  let new_x = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let sum = ref (0.0) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  if (!i <> !j) then (
  sum := (!sum +. ((let __l = (let __l = coefficient in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = !x in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let value = ref ((((let __l = constant in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. !sum) /. (let __l = (let __l = coefficient in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  new_x := (Obj.magic (List.append (!new_x) [(Obj.magic (!value) : float)]) : float list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  x := (Obj.magic !new_x : float list);
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : float list); raise Return
  with Return -> !__ret)


let coefficient = ref ([[4.0; 1.0; 1.0]; [1.0; 5.0; 2.0]; [1.0; 2.0; 4.0]])
let constant = ref ([2.0; (-.(6.0)); (-.(4.0))])
let init_val = ref ([0.5; (-.(0.5)); (-.(0.5))])
let iterations = 3
let result = ref (jacobi_iteration_method (!coefficient) (!constant) (!init_val) (Obj.repr (iterations)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show_list !result);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
