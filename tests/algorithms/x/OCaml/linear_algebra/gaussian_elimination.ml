(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec retroactive_resolution coefficients vector =
  let __ret = ref ([] : (float list) list) in
  (try
  let coefficients = (Obj.magic coefficients : float list list) in
  let vector = (Obj.magic vector : float list list) in
  let rows = List.length (coefficients) in
  let x = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let inner = ref (([] : (float) list)) in
  inner := (Obj.magic (List.append (!inner) [(Obj.magic (0.0) : float)]) : float list);
  x := (Obj.magic (List.append (!x) [(Obj.magic (!inner) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let r = ref ((rows - 1)) in
  (try while (!r >= 0) do
    try
  let total = ref (0.0) in
  let c = ref ((!r + 1)) in
  (try while (!c < rows) do
    try
  total := (!total +. ((let __l = (let __l = coefficients in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !c in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. (let __l = (let __l = !x in let __i = !c in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  x := (List.mapi (fun __i __x -> if __i = !r then (List.mapi (fun __i __x -> if __i = 0 then (((let __l = (let __l = vector in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. !total) /. (let __l = (let __l = coefficients in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) else __x) ((let __l = !x in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!x));
  r := (!r - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!x) : float list list); raise Return
  with Return -> !__ret)

and gaussian_elimination coefficients vector =
  let __ret = ref ([] : (float list) list) in
  (try
  let coefficients = (Obj.magic coefficients : float list list) in
  let vector = (Obj.magic vector : float list list) in
  let rows = List.length (coefficients) in
  let columns = List.length ((let __l = coefficients in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  if (rows <> columns) then (
  __ret := (Obj.magic ([]) : float list list); raise Return
  );
  let augmented = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < rows) do
    try
  let row = ref (([] : (float) list)) in
  let j = ref (0) in
  (try while (!j < columns) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic ((let __l = (let __l = coefficients in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  row := (Obj.magic (List.append (!row) [(Obj.magic ((let __l = (let __l = vector in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  augmented := (Obj.magic (List.append (!augmented) [(Obj.magic (!row) : float list)]) : float list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let row_idx = ref (0) in
  (try while (!row_idx < (rows - 1)) do
    try
  let pivot = (let __l = (let __l = !augmented in let __i = !row_idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !row_idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let col = ref ((!row_idx + 1)) in
  (try while (!col < rows) do
    try
  let factor = ((let __l = (let __l = !augmented in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !row_idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) /. pivot) in
  let k = ref (!row_idx) in
  (try while (!k < (columns + 1)) do
    try
  augmented := (List.mapi (fun __i __x -> if __i = !col then (List.mapi (fun __i __x -> if __i = !k then ((let __l = (let __l = !augmented in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) -. (factor *. (let __l = (let __l = !augmented in let __i = !row_idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !k in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) ((let __l = !augmented in let __i = !col in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!augmented));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  col := (!col + 1);
    with Continue -> ()
  done with Break -> ());
  row_idx := (!row_idx + 1);
    with Continue -> ()
  done with Break -> ());
  let coeffs = ref (([] : (float list) list)) in
  let vec = ref (([] : (float list) list)) in
  let r = ref (0) in
  (try while (!r < rows) do
    try
  let row = ref (([] : (float) list)) in
  let c = ref (0) in
  (try while (!c < columns) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic ((let __l = (let __l = !augmented in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !c in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : float)]) : float list);
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  coeffs := (Obj.magic (List.append (!coeffs) [(Obj.magic (!row) : float list)]) : float list list);
  vec := (Obj.magic (List.append (!vec) [(Obj.magic ([(let __l = (let __l = !augmented in let __i = !r in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = columns in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))]) : float list)]) : float list list);
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  let x = ref (retroactive_resolution (!coeffs) (!vec)) in
  __ret := (Obj.magic (!x) : float list list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (__show_list (gaussian_elimination ([[1.0; (-.(4.0)); (-.(2.0))]; [5.0; 2.0; (-.(2.0))]; [1.0; (-.(1.0)); 0.0]]) ([[(-.(2.0))]; [(-.(3.0))]; [4.0]])));
  print_endline (__show_list (gaussian_elimination ([[1.0; 2.0]; [5.0; 2.0]]) ([[5.0]; [5.0]])));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
