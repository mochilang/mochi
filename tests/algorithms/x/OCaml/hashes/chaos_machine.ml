(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _k = ref ([0.33; 0.44; 0.55; 0.44; 0.33])
let t = 3
let size = 5
let rec round_dec x n =
  let __ret = ref 0.0 in
  (try
  let x = (Obj.magic x : float) in
  let n = (Obj.magic n : int) in
  let m10 = ref (1.0) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  m10 := (!m10 *. 10.0);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let y = ((x *. !m10) +. 0.5) in
  __ret := (Obj.magic (((1.0 *. float_of_int (int_of_float (y))) /. !m10)) : float); raise Return
  with Return -> !__ret)

and reset () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("buffer"), Obj.repr (!_k)); (__str ("params"), Obj.repr ([0.0; 0.0; 0.0; 0.0; 0.0])); (__str ("time"), Obj.repr (0))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and push m seed =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let m = (Obj.magic m : (string * Obj.t) list) in
  let seed = (Obj.magic seed : int) in
  let buf = ref ((Obj.obj (List.assoc (__str ("buffer")) (m) : Obj.t) : float list)) in
  let par = ref ((Obj.obj (List.assoc (__str ("params")) (m) : Obj.t) : float list)) in
  let i = ref (0) in
  (try while (!i < List.length (!buf)) do
    try
  let value = (let __l = !buf in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let e = ((1.0 *. float_of_int (seed)) /. value) in
  let next_value = ref (((let __l = !buf in let __i = (((!i + 1) mod size + size) mod size) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. e)) in
  next_value := (!next_value -. (1.0 *. float_of_int (int_of_float (!next_value))));
  let r = ref (((let __l = !par in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) +. e)) in
  r := (!r -. (1.0 *. float_of_int (int_of_float (!r))));
  r := (!r +. 3.0);
  buf := (List.mapi (fun __i __x -> if __i = !i then round_dec (Obj.repr (((!r *. !next_value) *. (1.0 -. !next_value)))) (Obj.repr (10)) else __x) (!buf));
  par := (List.mapi (fun __i __x -> if __i = !i then !r else __x) (!par));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("buffer"), Obj.repr (!buf)); (__str ("params"), Obj.repr (!par)); (__str ("time"), Obj.repr (((Obj.obj (List.assoc (__str ("time")) (m) : Obj.t) : int) + 1)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and xor a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let aa = ref (a) in
  let bb = ref (b) in
  let res = ref (0) in
  let bit = ref (1) in
  (try while ((!aa > 0) || (!bb > 0)) do
    try
  let abit = ((!aa mod 2 + 2) mod 2) in
  let bbit = ((!bb mod 2 + 2) mod 2) in
  if (abit <> bbit) then (
  res := (!res + !bit);
  );
  aa := (!aa / 2);
  bb := (!bb / 2);
  bit := (!bit * 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and xorshift x y =
  let __ret = ref 0 in
  (try
  let x = (Obj.magic x : int) in
  let y = (Obj.magic y : int) in
  let xv = ref (x) in
  let yv = ref (y) in
  xv := xor (Obj.repr (!xv)) (Obj.repr ((!yv / 8192)));
  yv := xor (Obj.repr (!yv)) (Obj.repr ((!xv * 131072)));
  xv := xor (Obj.repr (!xv)) (Obj.repr ((!yv / 32)));
  __ret := (Obj.magic (!xv) : int); raise Return
  with Return -> !__ret)

and pull m =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let m = (Obj.magic m : (string * Obj.t) list) in
  let buf = ref ((Obj.obj (List.assoc (__str ("buffer")) (m) : Obj.t) : float list)) in
  let par = ref ((Obj.obj (List.assoc (__str ("params")) (m) : Obj.t) : float list)) in
  let key = (((Obj.obj (List.assoc (__str ("time")) (m) : Obj.t) : int) mod size + size) mod size) in
  let i = ref (0) in
  (try while (!i < t) do
    try
  let r = (let __l = !par in let __i = key in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let value = (let __l = !buf in let __i = key in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  buf := (List.mapi (fun __i __x -> if __i = key then round_dec (Obj.repr (((r *. value) *. (1.0 -. value)))) (Obj.repr (10)) else __x) (!buf));
  let new_r = ref ((((1.0 *. float_of_int ((Obj.obj (List.assoc (__str ("time")) (m) : Obj.t) : int))) *. 0.01) +. (r *. 1.01))) in
  new_r := (!new_r -. (1.0 *. float_of_int (int_of_float (!new_r))));
  par := (List.mapi (fun __i __x -> if __i = key then (!new_r +. 3.0) else __x) (!par));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let x = int_of_float (((let __l = !buf in let __i = (((key + 2) mod size + size) mod size) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. 10000000000.0)) in
  let y = int_of_float (((let __l = !buf in let __i = ((((key + size) - 2) mod size + size) mod size) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) *. 10000000000.0)) in
  let new_machine = [(__str ("buffer"), Obj.repr (!buf)); (__str ("params"), Obj.repr (!par)); (__str ("time"), Obj.repr (((Obj.obj (List.assoc (__str ("time")) (m) : Obj.t) : int) + 1)))] in
  let value = ((xorshift (Obj.repr (x)) (Obj.repr (y)) mod 4294967295 + 4294967295) mod 4294967295) in
  __ret := (Obj.magic ([(__str ("value"), Obj.repr (value)); (__str ("machine"), Obj.repr (new_machine))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)


let machine = ref (reset ())
let i = ref (0)
let () =
  let mem_start = _mem () in
  let start = _now () in
  (try while (!i < 100) do
    try
  machine := push (!machine) (Obj.repr (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let res = pull (!machine) in
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("value")) (res) : Obj.t) : int));
  print_endline (__show (Obj.obj (List.assoc (__str ("buffer")) ((Obj.obj (List.assoc (__str ("machine")) (res) : Obj.t) : ( string * Obj.t ) list)) : Obj.t) : float list));
  print_endline (__show (Obj.obj (List.assoc (__str ("params")) ((Obj.obj (List.assoc (__str ("machine")) (res) : Obj.t) : ( string * Obj.t ) list)) : Obj.t) : float list));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
