(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec index_of s ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if ((let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and ord ch =
  let __ret = ref 0 in
  (try
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let lower = "abcdefghijklmnopqrstuvwxyz" in
  let idx = ref (index_of (upper) (ch)) in
  if (!idx >= 0) then (
  __ret := (Obj.magic ((65 + !idx)) : int); raise Return
  );
  idx := index_of (lower) (ch);
  if (!idx >= 0) then (
  __ret := (Obj.magic ((97 + !idx)) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and chr n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" in
  let lower = "abcdefghijklmnopqrstuvwxyz" in
  if ((n >= 65) && (n < 91)) then (
  __ret := (Obj.magic ((let __s = upper in let __st = (n - 65) in let __len = ((n - 64) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) : string); raise Return
  );
  if ((n >= 97) && (n < 123)) then (
  __ret := (Obj.magic ((let __s = lower in let __st = (n - 97) in let __len = ((n - 96) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) : string); raise Return
  );
  __ret := (Obj.magic ("?") : string); raise Return
  with Return -> !__ret)

and text_to_bits text =
  let __ret = ref "" in
  (try
  let bits = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (text)) do
    try
  let code = ord ((let __s = text in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) in
  let j = ref (7) in
  (try while (!j >= 0) do
    try
  let p = pow2 (Obj.repr (!j)) in
  if ((((code / p) mod 2 + 2) mod 2) = 1) then (
  bits := (!bits ^ "1");
  ) else (
  bits := (!bits ^ "0");
  );
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!bits) : string); raise Return
  with Return -> !__ret)

and text_from_bits bits =
  let __ret = ref "" in
  (try
  let text = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (bits)) do
    try
  let code = ref (0) in
  let j = ref (0) in
  (try while ((!j < 8) && ((!i + !j) < String.length (bits))) do
    try
  code := (!code * 2);
  if ((let __s = bits in let __i = (!i + !j) in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = "1") then (
  code := (!code + 1);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  text := (!text ^ chr (Obj.repr (!code)));
  i := (!i + 8);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!text) : string); raise Return
  with Return -> !__ret)

and bool_to_string b =
  let __ret = ref "" in
  (try
  if b then (
  __ret := (Obj.magic ("True") : string); raise Return
  );
  __ret := (Obj.magic ("False") : string); raise Return
  with Return -> !__ret)

and string_to_bitlist s =
  let __ret = ref ([] : (int) list) in
  (try
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < String.length (s)) do
    try
  if ((let __s = s in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i))) = "1") then (
  res := (Obj.magic (List.append (!res) [(Obj.magic (1) : int)]) : int list);
  ) else (
  res := (Obj.magic (List.append (!res) [(Obj.magic (0) : int)]) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and bitlist_to_string bits =
  let __ret = ref "" in
  (try
  let bits = (Obj.magic bits : int list) in
  let s = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (bits)) do
    try
  if ((let __l = bits in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = 1) then (
  s := (!s ^ "1");
  ) else (
  s := (!s ^ "0");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and is_power_of_two x =
  let __ret = ref false in
  (try
  let x = (Obj.magic x : int) in
  if (x < 1) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let p = ref (1) in
  (try while (!p < x) do
    try
  p := (!p * 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!p = x)) : bool); raise Return
  with Return -> !__ret)

and list_eq a b =
  let __ret = ref false in
  (try
  let a = (Obj.magic a : int list) in
  let b = (Obj.magic b : int list) in
  if (List.length (a) <> List.length (b)) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  if ((let __l = a in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) <> (let __l = b in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and pow2 e =
  let __ret = ref 0 in
  (try
  let e = (Obj.magic e : int) in
  let res = ref (1) in
  let i = ref (0) in
  (try while (!i < e) do
    try
  res := (!res * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and has_bit n b =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  let b = (Obj.magic b : int) in
  let p = pow2 (Obj.repr (b)) in
  if ((((n / p) mod 2 + 2) mod 2) = 1) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and hamming_encode r data_bits =
  let __ret = ref ([] : (int) list) in
  (try
  let r = (Obj.magic r : int) in
  let data_bits = (Obj.magic data_bits : int list) in
  let total = (r + List.length (data_bits)) in
  let data_ord = ref (([] : (int) list)) in
  let cont_data = ref (0) in
  let x = ref (1) in
  (try while (!x <= total) do
    try
  if is_power_of_two (Obj.repr (!x)) then (
  data_ord := (Obj.magic (List.append (!data_ord) [(Obj.magic (-(1)) : int)]) : int list);
  ) else (
  data_ord := (Obj.magic (List.append (!data_ord) [(Obj.magic ((let __l = data_bits in let __i = !cont_data in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  cont_data := (!cont_data + 1);
  );
  x := (!x + 1);
    with Continue -> ()
  done with Break -> ());
  let parity = ref (([] : (int) list)) in
  let bp = ref (0) in
  (try while (!bp < r) do
    try
  let cont_bo = ref (0) in
  let j = ref (0) in
  (try while (!j < List.length (!data_ord)) do
    try
  let bit = (let __l = !data_ord in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (bit >= 0) then (
  let pos = (!j + 1) in
  if (has_bit (Obj.repr (pos)) (Obj.repr (!bp)) && (bit = 1)) then (
  cont_bo := (!cont_bo + 1);
  );
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  parity := (Obj.magic (List.append (!parity) [(Obj.magic (((!cont_bo mod 2 + 2) mod 2)) : int)]) : int list);
  bp := (!bp + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref (([] : (int) list)) in
  let cont_bp = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (!data_ord)) do
    try
  if ((let __l = !data_ord in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) < 0) then (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = !parity in let __i = !cont_bp in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  cont_bp := (!cont_bp + 1);
  ) else (
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = !data_ord in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and hamming_decode r code =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let r = (Obj.magic r : int) in
  let code = (Obj.magic code : int list) in
  let data_output = ref (([] : (int) list)) in
  let parity_received = ref (([] : (int) list)) in
  let i = ref (1) in
  let idx = ref (0) in
  (try while (!i <= List.length (code)) do
    try
  if is_power_of_two (Obj.repr (!i)) then (
  parity_received := (Obj.magic (List.append (!parity_received) [(Obj.magic ((let __l = code in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  ) else (
  data_output := (Obj.magic (List.append (!data_output) [(Obj.magic ((let __l = code in let __i = !idx in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  );
  idx := (!idx + 1);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let recomputed = ref (hamming_encode (Obj.repr (r)) (!data_output)) in
  let parity_calc = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < List.length (!recomputed)) do
    try
  if is_power_of_two (Obj.repr ((!j + 1))) then (
  parity_calc := (Obj.magic (List.append (!parity_calc) [(Obj.magic ((let __l = !recomputed in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let ack = list_eq (!parity_received) (!parity_calc) in
  __ret := (Obj.magic ([(__str ("data"), Obj.repr (!data_output)); (__str ("ack"), Obj.repr (ack))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let sizePari = 4 in
  let be = 2 in
  let text = "Message01" in
  let binary = text_to_bits (text) in
  print_endline ((("Text input in binary is '" ^ binary) ^ "'"));
  let data_bits = ref (string_to_bitlist (binary)) in
  let encoded = ref (hamming_encode (Obj.repr (sizePari)) (!data_bits)) in
  print_endline (("Data converted ----------> " ^ bitlist_to_string (!encoded)));
  let decoded = hamming_decode (Obj.repr (sizePari)) (!encoded) in
  print_endline (((("Data receive ------------> " ^ bitlist_to_string ((Obj.obj (List.assoc (__str ("data")) (decoded) : Obj.t) : int list))) ^ " -- Data integrity: ") ^ bool_to_string ((Obj.obj (List.assoc (__str ("ack")) (decoded) : Obj.t) : bool))));
  let corrupted = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!encoded)) do
    try
  corrupted := (Obj.magic (List.append (!corrupted) [(Obj.magic ((let __l = !encoded in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let pos = (be - 1) in
  if ((let __l = !corrupted in let __i = pos in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = 0) then (
  corrupted := (List.mapi (fun __i __x -> if __i = pos then 1 else __x) (!corrupted));
  ) else (
  corrupted := (List.mapi (fun __i __x -> if __i = pos then 0 else __x) (!corrupted));
  );
  let decoded_err = hamming_decode (Obj.repr (sizePari)) (!corrupted) in
  print_endline (((("Data receive (error) ----> " ^ bitlist_to_string ((Obj.obj (List.assoc (__str ("data")) (decoded_err) : Obj.t) : int list))) ^ " -- Data integrity: ") ^ bool_to_string ((Obj.obj (List.assoc (__str ("ack")) (decoded_err) : Obj.t) : bool))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
