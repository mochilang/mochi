(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}"
let rec build_alphabet () =
  let __ret = ref ([] : (string) list) in
  (try
  let result = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < String.length (_ascii)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __s = _ascii in let __i = !i in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))) : string)]) : string list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string list); raise Return
  with Return -> !__ret)

and range_list n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  let lst = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  lst := (Obj.magic (List.append (!lst) [(Obj.magic (!i) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!lst) : int list); raise Return
  with Return -> !__ret)

and reversed_range_list n =
  let __ret = ref ([] : (int) list) in
  (try
  let n = (Obj.magic n : int) in
  let lst = ref (([] : (int) list)) in
  let i = ref ((n - 1)) in
  (try while (!i >= 0) do
    try
  lst := (Obj.magic (List.append (!lst) [(Obj.magic (!i) : int)]) : int list);
  i := (!i - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!lst) : int list); raise Return
  with Return -> !__ret)

and index_of_char lst ch =
  let __ret = ref 0 in
  (try
  let lst = (Obj.magic lst : string list) in
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  if ((let __l = lst in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = ch) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and index_of_int lst value =
  let __ret = ref 0 in
  (try
  let lst = (Obj.magic lst : int list) in
  let value = (Obj.magic value : int) in
  let i = ref (0) in
  (try while (!i < List.length (lst)) do
    try
  if ((let __l = lst in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = value) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and enigma_encrypt message token =
  let __ret = ref "" in
  (try
  let token = (Obj.magic token : int) in
  let alphabets = ref (build_alphabet ()) in
  let n = List.length (!alphabets) in
  let gear_one = ref (range_list (Obj.repr (n))) in
  let gear_two = ref (range_list (Obj.repr (n))) in
  let gear_three = ref (range_list (Obj.repr (n))) in
  let reflector = ref (reversed_range_list (Obj.repr (n))) in
  let gear_one_pos = ref (0) in
  let gear_two_pos = ref (0) in
  let gear_three_pos = ref (0) in
let rec rotator () =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref ((let __l = !gear_one in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  gear_one := (Obj.magic List.of_seq (Seq.take (List.length (!gear_one) - 1) (Seq.drop 1 (List.to_seq (!gear_one)))) : int list);
  gear_one := (Obj.magic (List.append (!gear_one) [(Obj.magic (!i) : int)]) : int list);
  gear_one_pos := (!gear_one_pos + 1);
  if (((!gear_one_pos mod n + n) mod n) = 0) then (
  i := (let __l = !gear_two in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  gear_two := (Obj.magic List.of_seq (Seq.take (List.length (!gear_two) - 1) (Seq.drop 1 (List.to_seq (!gear_two)))) : int list);
  gear_two := (Obj.magic (List.append (!gear_two) [(Obj.magic (!i) : int)]) : int list);
  gear_two_pos := (!gear_two_pos + 1);
  if (((!gear_two_pos mod n + n) mod n) = 0) then (
  i := (let __l = !gear_three in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  gear_three := (Obj.magic List.of_seq (Seq.take (List.length (!gear_three) - 1) (Seq.drop 1 (List.to_seq (!gear_three)))) : int list);
  gear_three := (Obj.magic (List.append (!gear_three) [(Obj.magic (!i) : int)]) : int list);
  gear_three_pos := (!gear_three_pos + 1);
  );
  );
    !__ret
  with Return -> !__ret) in
let rec engine ch =
  let __ret = ref "" in
  (try
  let target = ref (index_of_char (!alphabets) (ch)) in
  target := (let __l = !gear_one in let __i = !target in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  target := (let __l = !gear_two in let __i = !target in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  target := (let __l = !gear_three in let __i = !target in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  target := (let __l = !reflector in let __i = !target in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i));
  target := index_of_int (!gear_three) (Obj.repr (!target));
  target := index_of_int (!gear_two) (Obj.repr (!target));
  target := index_of_int (!gear_one) (Obj.repr (!target));
  ignore (rotator ());
  __ret := (Obj.magic ((let __l = !alphabets in let __i = !target in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : string); raise Return
  with Return -> !__ret) in
  let t = ref (0) in
  (try while (!t < token) do
    try
  ignore (rotator ());
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref ("") in
  let idx = ref (0) in
  (try while (!idx < String.length (message)) do
    try
  result := (!result ^ engine ((let __s = message in let __i = !idx in let __len = String.length __s in String.make 1 (String.get __s (if __i >= 0 then __i else __len + __i)))));
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)


let message = "HELLO WORLD"
let token = 123
let encoded = enigma_encrypt (message) (Obj.repr (token))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (encoded);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
