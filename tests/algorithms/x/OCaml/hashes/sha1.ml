(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _mod = 4294967296
let _ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
let rec ord ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_ascii)) do
    try
  if ((let __s = _ascii in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = ch) then (
  __ret := (Obj.magic ((32 + !i)) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and pow2 n =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let res = ref (1) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  res := (!res * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and bit_and a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  let res = ref (0) in
  let bit = ref (1) in
  let i = ref (0) in
  (try while (!i < 32) do
    try
  if ((((!x mod 2 + 2) mod 2) = 1) && (((!y mod 2 + 2) mod 2) = 1)) then (
  res := (!res + !bit);
  );
  x := (!x / 2);
  y := (!y / 2);
  bit := (!bit * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and bit_or a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  let res = ref (0) in
  let bit = ref (1) in
  let i = ref (0) in
  (try while (!i < 32) do
    try
  let abit = ((!x mod 2 + 2) mod 2) in
  let bbit = ((!y mod 2 + 2) mod 2) in
  if ((abit = 1) || (bbit = 1)) then (
  res := (!res + !bit);
  );
  x := (!x / 2);
  y := (!y / 2);
  bit := (!bit * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and bit_xor a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  let res = ref (0) in
  let bit = ref (1) in
  let i = ref (0) in
  (try while (!i < 32) do
    try
  let abit = ((!x mod 2 + 2) mod 2) in
  let bbit = ((!y mod 2 + 2) mod 2) in
  if (((abit = 1) && (bbit = 0)) || ((abit = 0) && (bbit = 1))) then (
  res := (!res + !bit);
  );
  x := (!x / 2);
  y := (!y / 2);
  bit := (!bit * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and bit_not a =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  __ret := (Obj.magic (((_mod - 1) - a)) : int); raise Return
  with Return -> !__ret)

and rotate_left n b =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let b = (Obj.magic b : int) in
  let left = (((n * pow2 (Obj.repr (b))) mod _mod + _mod) mod _mod) in
  let right = (n / pow2 (Obj.repr ((32 - b)))) in
  __ret := (Obj.magic ((((left + right) mod _mod + _mod) mod _mod)) : int); raise Return
  with Return -> !__ret)

and to_hex32 n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let digits = "0123456789abcdef" in
  let num = ref (n) in
  let s = ref ("") in
  if (!num = 0) then (
  s := "0";
  );
  (try while (!num > 0) do
    try
  let d = ((!num mod 16 + 16) mod 16) in
  s := ((let __s = digits in let __st = d in let __len = ((d + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") ^ !s);
  num := (!num / 16);
    with Continue -> ()
  done with Break -> ());
  (try while (String.length (!s) < 8) do
    try
  s := ("0" ^ !s);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!s) > 8) then (
  s := (let __s = !s in let __st = (String.length (!s) - 8) in let __len = (String.length (!s) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "");
  );
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and sha1 message =
  let __ret = ref "" in
  (try
  let bytes = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < String.length (message)) do
    try
  bytes := (Obj.magic (List.append (!bytes) [(Obj.magic (ord ((let __s = message in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  bytes := (Obj.magic (List.append (!bytes) [(Obj.magic (128) : int)]) : int list);
  (try while ((((List.length (!bytes) + 8) mod 64 + 64) mod 64) <> 0) do
    try
  bytes := (Obj.magic (List.append (!bytes) [(Obj.magic (0) : int)]) : int list);
    with Continue -> ()
  done with Break -> ());
  let bit_len = (String.length (message) * 8) in
  let len_bytes = ref ([0; 0; 0; 0; 0; 0; 0; 0]) in
  let bl = ref (bit_len) in
  let k = ref (7) in
  (try while (!k >= 0) do
    try
  len_bytes := (List.mapi (fun __i __x -> if __i = !k then ((!bl mod 256 + 256) mod 256) else __x) (!len_bytes));
  bl := (!bl / 256);
  k := (!k - 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < 8) do
    try
  bytes := (Obj.magic (List.append (!bytes) [(Obj.magic ((let __l = !len_bytes in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let blocks = ref (([] : (int list) list)) in
  let pos = ref (0) in
  (try while (!pos < List.length (!bytes)) do
    try
  let block = ref (([] : (int) list)) in
  let j2 = ref (0) in
  (try while (!j2 < 64) do
    try
  block := (Obj.magic (List.append (!block) [(Obj.magic ((let __l = !bytes in let __i = (!pos + !j2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  j2 := (!j2 + 1);
    with Continue -> ()
  done with Break -> ());
  blocks := (Obj.magic (List.append (!blocks) [(Obj.magic (!block) : int list)]) : int list list);
  pos := (!pos + 64);
    with Continue -> ()
  done with Break -> ());
  let h0 = ref (1732584193) in
  let h1 = ref (4023233417) in
  let h2 = ref (2562383102) in
  let h3 = ref (271733878) in
  let h4 = ref (3285377520) in
  let bindex = ref (0) in
  (try while (!bindex < List.length (!blocks)) do
    try
  let block = ref ((let __l = !blocks in let __i = !bindex in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let w = ref (([] : (int) list)) in
  let t = ref (0) in
  (try while (!t < 16) do
    try
  let j3 = (!t * 4) in
  let word = (((((((let __l = !block in let __i = j3 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) * 256) + (let __l = !block in let __i = (j3 + 1) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) * 256) + (let __l = !block in let __i = (j3 + 2) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) * 256) + (let __l = !block in let __i = (j3 + 3) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  w := (Obj.magic (List.append (!w) [(Obj.magic (word) : int)]) : int list);
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  (try while (!t < 80) do
    try
  let tmp = bit_xor (Obj.repr (bit_xor (Obj.repr (bit_xor (Obj.repr ((let __l = !w in let __i = (!t - 3) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) (Obj.repr ((let __l = !w in let __i = (!t - 8) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) (Obj.repr ((let __l = !w in let __i = (!t - 14) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))))) (Obj.repr ((let __l = !w in let __i = (!t - 16) in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  w := (Obj.magic (List.append (!w) [(Obj.magic (rotate_left (Obj.repr (tmp)) (Obj.repr (1))) : int)]) : int list);
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  let a = ref (!h0) in
  let b = ref (!h1) in
  let c = ref (!h2) in
  let d = ref (!h3) in
  let e = ref (!h4) in
  let i2 = ref (0) in
  (try while (!i2 < 80) do
    try
  let f = ref (0) in
  let kconst = ref (0) in
  if (!i2 < 20) then (
  f := bit_or (Obj.repr (bit_and (Obj.repr (!b)) (Obj.repr (!c)))) (Obj.repr (bit_and (Obj.repr (bit_not (Obj.repr (!b)))) (Obj.repr (!d))));
  kconst := 1518500249;
  ) else (
  if (!i2 < 40) then (
  f := bit_xor (Obj.repr (bit_xor (Obj.repr (!b)) (Obj.repr (!c)))) (Obj.repr (!d));
  kconst := 1859775393;
  ) else (
  if (!i2 < 60) then (
  f := bit_or (Obj.repr (bit_or (Obj.repr (bit_and (Obj.repr (!b)) (Obj.repr (!c)))) (Obj.repr (bit_and (Obj.repr (!b)) (Obj.repr (!d)))))) (Obj.repr (bit_and (Obj.repr (!c)) (Obj.repr (!d))));
  kconst := 2400959708;
  ) else (
  f := bit_xor (Obj.repr (bit_xor (Obj.repr (!b)) (Obj.repr (!c)))) (Obj.repr (!d));
  kconst := 3395469782;
  );
  );
  );
  let temp = ((((((rotate_left (Obj.repr (!a)) (Obj.repr (5)) + !f) + !e) + !kconst) + (let __l = !w in let __i = !i2 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) mod _mod + _mod) mod _mod) in
  e := !d;
  d := !c;
  c := rotate_left (Obj.repr (!b)) (Obj.repr (30));
  b := !a;
  a := temp;
  i2 := (!i2 + 1);
    with Continue -> ()
  done with Break -> ());
  h0 := (((!h0 + !a) mod _mod + _mod) mod _mod);
  h1 := (((!h1 + !b) mod _mod + _mod) mod _mod);
  h2 := (((!h2 + !c) mod _mod + _mod) mod _mod);
  h3 := (((!h3 + !d) mod _mod + _mod) mod _mod);
  h4 := (((!h4 + !e) mod _mod + _mod) mod _mod);
  bindex := (!bindex + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (((((to_hex32 (Obj.repr (!h0)) ^ to_hex32 (Obj.repr (!h1))) ^ to_hex32 (Obj.repr (!h2))) ^ to_hex32 (Obj.repr (!h3))) ^ to_hex32 (Obj.repr (!h4)))) : string); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((sha1 ("Test String")));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
