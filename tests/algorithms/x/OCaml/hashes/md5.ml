(* Generated by Mochi transpiler v0.10.63 on 2025-08-12 08:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _mod = 4294967296
let _ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
let rec ord ch =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < String.length (_ascii)) do
    try
  if ((let __s = _ascii in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = ch) then (
  __ret := (Obj.magic ((32 + !i)) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and to_little_endian s =
  let __ret = ref "" in
  (try
  if (String.length (s) <> 32) then (
  (failwith ("Input must be of length 32"));
  );
  __ret := (Obj.magic (((((let __s = s in let __st = 24 in let __len = (32 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") ^ (let __s = s in let __st = 16 in let __len = (24 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) ^ (let __s = s in let __st = 8 in let __len = (16 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")) ^ (let __s = s in let __st = 0 in let __len = (8 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))) : string); raise Return
  with Return -> !__ret)

and int_to_bits n width =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let width = (Obj.magic width : int) in
  let bits = ref ("") in
  let num = ref (n) in
  (try while (!num > 0) do
    try
  bits := ((string_of_int (((!num mod 2 + 2) mod 2))) ^ !bits);
  num := (!num / 2);
    with Continue -> ()
  done with Break -> ());
  (try while (String.length (!bits) < width) do
    try
  bits := ("0" ^ !bits);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!bits) > width) then (
  bits := (let __s = !bits in let __st = (String.length (!bits) - width) in let __len = (String.length (!bits) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "");
  );
  __ret := (Obj.magic (!bits) : string); raise Return
  with Return -> !__ret)

and bits_to_int bits =
  let __ret = ref 0 in
  (try
  let num = ref (0) in
  let i = ref (0) in
  (try while (!i < String.length (bits)) do
    try
  if ((let __s = bits in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") = "1") then (
  num := ((!num * 2) + 1);
  ) else (
  num := (!num * 2);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!num) : int); raise Return
  with Return -> !__ret)

and to_hex n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  let digits = "0123456789abcdef" in
  if (n = 0) then (
  __ret := (Obj.magic ("0") : string); raise Return
  );
  let num = ref (n) in
  let s = ref ("") in
  (try while (!num > 0) do
    try
  let d = ((!num mod 16 + 16) mod 16) in
  s := ((let __s = digits in let __st = d in let __len = ((d + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") ^ !s);
  num := (!num / 16);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and reformat_hex i =
  let __ret = ref "" in
  (try
  let i = (Obj.magic i : int) in
  if (i < 0) then (
  (failwith ("Input must be non-negative"));
  );
  let hex = ref (to_hex (Obj.repr (i))) in
  (try while (String.length (!hex) < 8) do
    try
  hex := ("0" ^ !hex);
    with Continue -> ()
  done with Break -> ());
  if (String.length (!hex) > 8) then (
  hex := (let __s = !hex in let __st = (String.length (!hex) - 8) in let __len = (String.length (!hex) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "");
  );
  let le = ref ("") in
  let j = ref ((String.length (!hex) - 2)) in
  (try while (!j >= 0) do
    try
  le := (!le ^ (let __s = !hex in let __st = !j in let __len = ((!j + 2) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""));
  j := (!j - 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!le) : string); raise Return
  with Return -> !__ret)

and preprocess message =
  let __ret = ref "" in
  (try
  let bit_string = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (message)) do
    try
  let ch = (let __s = message in let __st = !i in let __len = ((!i + 1) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  bit_string := (!bit_string ^ int_to_bits (Obj.repr (ord (ch))) (Obj.repr (8)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let start_len = int_to_bits (Obj.repr (String.length (!bit_string))) (Obj.repr (64)) in
  bit_string := (!bit_string ^ "1");
  (try while (((String.length (!bit_string) mod 512 + 512) mod 512) <> 448) do
    try
  bit_string := (!bit_string ^ "0");
    with Continue -> ()
  done with Break -> ());
  bit_string := ((!bit_string ^ to_little_endian ((let __s = start_len in let __st = 32 in let __len = (64 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else ""))) ^ to_little_endian ((let __s = start_len in let __st = 0 in let __len = (32 - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "")));
  __ret := (Obj.magic (!bit_string) : string); raise Return
  with Return -> !__ret)

and get_block_words bit_string =
  let __ret = ref ([] : (int list) list) in
  (try
  if (((String.length (bit_string) mod 512 + 512) mod 512) <> 0) then (
  (failwith ("Input must have length that's a multiple of 512"));
  );
  let blocks = ref (([] : (int list) list)) in
  let pos = ref (0) in
  (try while (!pos < String.length (bit_string)) do
    try
  let block = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < 512) do
    try
  let part = (let __s = bit_string in let __st = (!pos + !i) in let __len = (((!pos + !i) + 32) - __st) in if __st + __len <= String.length __s then String.sub __s __st __len else "") in
  let word = bits_to_int (to_little_endian (part)) in
  block := (Obj.magic (List.append (!block) [(Obj.magic (word) : int)]) : int list);
  i := (!i + 32);
    with Continue -> ()
  done with Break -> ());
  blocks := (Obj.magic (List.append (!blocks) [(Obj.magic (!block) : int list)]) : int list list);
  pos := (!pos + 512);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!blocks) : int list list); raise Return
  with Return -> !__ret)

and bit_and a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  let res = ref (0) in
  let bit = ref (1) in
  let i = ref (0) in
  (try while (!i < 32) do
    try
  if ((((!x mod 2 + 2) mod 2) = 1) && (((!y mod 2 + 2) mod 2) = 1)) then (
  res := (!res + !bit);
  );
  x := (!x / 2);
  y := (!y / 2);
  bit := (!bit * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and bit_or a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  let res = ref (0) in
  let bit = ref (1) in
  let i = ref (0) in
  (try while (!i < 32) do
    try
  let abit = ((!x mod 2 + 2) mod 2) in
  let bbit = ((!y mod 2 + 2) mod 2) in
  if ((abit = 1) || (bbit = 1)) then (
  res := (!res + !bit);
  );
  x := (!x / 2);
  y := (!y / 2);
  bit := (!bit * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and bit_xor a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let x = ref (a) in
  let y = ref (b) in
  let res = ref (0) in
  let bit = ref (1) in
  let i = ref (0) in
  (try while (!i < 32) do
    try
  let abit = ((!x mod 2 + 2) mod 2) in
  let bbit = ((!y mod 2 + 2) mod 2) in
  if ((((abit + bbit) mod 2 + 2) mod 2) = 1) then (
  res := (!res + !bit);
  );
  x := (!x / 2);
  y := (!y / 2);
  bit := (!bit * 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int); raise Return
  with Return -> !__ret)

and not_32 i =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  if (i < 0) then (
  (failwith ("Input must be non-negative"));
  );
  __ret := (Obj.magic ((4294967295 - i)) : int); raise Return
  with Return -> !__ret)

and sum_32 a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  __ret := (Obj.magic ((((a + b) mod _mod + _mod) mod _mod)) : int); raise Return
  with Return -> !__ret)

and lshift num k =
  let __ret = ref 0 in
  (try
  let num = (Obj.magic num : int) in
  let k = (Obj.magic k : int) in
  let result = ref (((num mod _mod + _mod) mod _mod)) in
  let i = ref (0) in
  (try while (!i < k) do
    try
  result := (((!result * 2) mod _mod + _mod) mod _mod);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and rshift num k =
  let __ret = ref 0 in
  (try
  let num = (Obj.magic num : int) in
  let k = (Obj.magic k : int) in
  let result = ref (num) in
  let i = ref (0) in
  (try while (!i < k) do
    try
  result := (!result / 2);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int); raise Return
  with Return -> !__ret)

and left_rotate_32 i shift =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  let shift = (Obj.magic shift : int) in
  if (i < 0) then (
  (failwith ("Input must be non-negative"));
  );
  if (shift < 0) then (
  (failwith ("Shift must be non-negative"));
  );
  let left = lshift (Obj.repr (i)) (Obj.repr (shift)) in
  let right = rshift (Obj.repr (i)) (Obj.repr ((32 - shift))) in
  __ret := (Obj.magic ((((left + right) mod _mod + _mod) mod _mod)) : int); raise Return
  with Return -> !__ret)

and md5_me message =
  let __ret = ref "" in
  (try
  let bit_string = preprocess (message) in
  let added_consts = ref ([3614090360; 3905402710; 606105819; 3250441966; 4118548399; 1200080426; 2821735955; 4249261313; 1770035416; 2336552879; 4294925233; 2304563134; 1804603682; 4254626195; 2792965006; 1236535329; 4129170786; 3225465664; 643717713; 3921069994; 3593408605; 38016083; 3634488961; 3889429448; 568446438; 3275163606; 4107603335; 1163531501; 2850285829; 4243563512; 1735328473; 2368359562; 4294588738; 2272392833; 1839030562; 4259657740; 2763975236; 1272893353; 4139469664; 3200236656; 681279174; 3936430074; 3572445317; 76029189; 3654602809; 3873151461; 530742520; 3299628645; 4096336452; 1126891415; 2878612391; 4237533241; 1700485571; 2399980690; 4293915773; 2240044497; 1873313359; 4264355552; 2734768916; 1309151649; 4149444226; 3174756917; 718787259; 3951481745]) in
  let shift_amounts = ref ([7; 12; 17; 22; 7; 12; 17; 22; 7; 12; 17; 22; 7; 12; 17; 22; 5; 9; 14; 20; 5; 9; 14; 20; 5; 9; 14; 20; 5; 9; 14; 20; 4; 11; 16; 23; 4; 11; 16; 23; 4; 11; 16; 23; 4; 11; 16; 23; 6; 10; 15; 21; 6; 10; 15; 21; 6; 10; 15; 21; 6; 10; 15; 21]) in
  let a0 = ref (1732584193) in
  let b0 = ref (4023233417) in
  let c0 = ref (2562383102) in
  let d0 = ref (271733878) in
  let blocks = ref (get_block_words (bit_string)) in
  let bi = ref (0) in
  (try while (!bi < List.length (!blocks)) do
    try
  let block = ref ((let __l = !blocks in let __i = !bi in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) in
  let a = ref (!a0) in
  let b = ref (!b0) in
  let c = ref (!c0) in
  let d = ref (!d0) in
  let i = ref (0) in
  (try while (!i < 64) do
    try
  let f = ref (0) in
  let g = ref (0) in
  if (!i <= 15) then (
  f := bit_xor (Obj.repr (!d)) (Obj.repr (bit_and (Obj.repr (!b)) (Obj.repr (bit_xor (Obj.repr (!c)) (Obj.repr (!d))))));
  g := !i;
  ) else (
  if (!i <= 31) then (
  f := bit_xor (Obj.repr (!c)) (Obj.repr (bit_and (Obj.repr (!d)) (Obj.repr (bit_xor (Obj.repr (!b)) (Obj.repr (!c))))));
  g := ((((5 * !i) + 1) mod 16 + 16) mod 16);
  ) else (
  if (!i <= 47) then (
  f := bit_xor (Obj.repr (bit_xor (Obj.repr (!b)) (Obj.repr (!c)))) (Obj.repr (!d));
  g := ((((3 * !i) + 5) mod 16 + 16) mod 16);
  ) else (
  f := bit_xor (Obj.repr (!c)) (Obj.repr (bit_or (Obj.repr (!b)) (Obj.repr (not_32 (Obj.repr (!d))))));
  g := (((7 * !i) mod 16 + 16) mod 16);
  );
  );
  );
  f := sum_32 (Obj.repr (!f)) (Obj.repr (!a));
  f := sum_32 (Obj.repr (!f)) (Obj.repr ((let __l = !added_consts in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  f := sum_32 (Obj.repr (!f)) (Obj.repr ((let __l = !block in let __i = !g in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))));
  let rotated = left_rotate_32 (Obj.repr (!f)) (Obj.repr ((let __l = !shift_amounts in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) in
  let new_b = sum_32 (Obj.repr (!b)) (Obj.repr (rotated)) in
  a := !d;
  d := !c;
  c := !b;
  b := new_b;
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  a0 := sum_32 (Obj.repr (!a0)) (Obj.repr (!a));
  b0 := sum_32 (Obj.repr (!b0)) (Obj.repr (!b));
  c0 := sum_32 (Obj.repr (!c0)) (Obj.repr (!c));
  d0 := sum_32 (Obj.repr (!d0)) (Obj.repr (!d));
  bi := (!bi + 1);
    with Continue -> ()
  done with Break -> ());
  let digest = (((reformat_hex (Obj.repr (!a0)) ^ reformat_hex (Obj.repr (!b0))) ^ reformat_hex (Obj.repr (!c0))) ^ reformat_hex (Obj.repr (!d0))) in
  __ret := (Obj.magic (digest) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
