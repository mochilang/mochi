(* Generated by Mochi transpiler v0.10.64 on 2025-08-12 09:13 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec bfs graph s t parent =
  let __ret = ref false in
  (try
  let graph = (Obj.magic graph : int list list) in
  let s = (Obj.magic s : int) in
  let t = (Obj.magic t : int) in
  parent := (Obj.magic !parent : int list);
  let visited = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i < List.length (graph)) do
    try
  visited := (Obj.magic (List.append (!visited) [(Obj.magic (false) : bool)]) : bool list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let queue = ref ([s]) in
  let head = ref (0) in
  visited := (List.mapi (fun __i __x -> if __i = s then true else __x) (!visited));
  (try while (!head < List.length (!queue)) do
    try
  let u = (let __l = !queue in let __i = !head in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  head := (!head + 1);
  let ind = ref (0) in
  (try while (!ind < List.length ((let __l = graph in let __i = u in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  if (((let __l = !visited in let __i = !ind in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = false) && ((let __l = (let __l = graph in let __i = u in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !ind in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > 0)) then (
  queue := (Obj.magic (List.append (!queue) [(Obj.magic (!ind) : int)]) : int list);
  visited := (List.mapi (fun __i __x -> if __i = !ind then true else __x) (!visited));
  parent := (List.mapi (fun __i __x -> if __i = !ind then u else __x) (!parent));
  );
  ind := (!ind + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((let __l = !visited in let __i = t in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : bool); raise Return
  with Return -> !__ret)

and mincut graph source sink =
  let __ret = ref ([] : (int list) list) in
  (try
  let graph = (Obj.magic graph : int list list) in
  let source = (Obj.magic source : int) in
  let sink = (Obj.magic sink : int) in
  let g = ref (graph) in
  let parent = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!g)) do
    try
  parent := (Obj.magic (List.append (!parent) [(Obj.magic (-(1)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let temp = ref (([] : (int list) list)) in
  i := 0;
  (try while (!i < List.length (!g)) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < List.length ((let __l = !g in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic ((let __l = (let __l = !g in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i))) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  temp := (Obj.magic (List.append (!temp) [(Obj.magic (!row) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  (try while bfs (!g) (Obj.repr (source)) (Obj.repr (sink)) (parent) do
    try
  let path_flow = ref (1000000000) in
  let s = ref (sink) in
  (try while (!s <> source) do
    try
  let p = (let __l = !parent in let __i = !s in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  let cap = (let __l = (let __l = !g in let __i = p in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !s in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  if (cap < !path_flow) then (
  path_flow := cap;
  );
  s := p;
    with Continue -> ()
  done with Break -> ());
  let v = ref (sink) in
  (try while (!v <> source) do
    try
  let u = (let __l = !parent in let __i = !v in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in
  g := (List.mapi (fun __i __x -> if __i = u then (List.mapi (fun __i __x -> if __i = !v then ((let __l = (let __l = !g in let __i = u in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !v in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) - !path_flow) else __x) ((let __l = !g in let __i = u in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!g));
  g := (List.mapi (fun __i __x -> if __i = !v then (List.mapi (fun __i __x -> if __i = u then ((let __l = (let __l = !g in let __i = !v in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = u in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) + !path_flow) else __x) ((let __l = !g in let __i = !v in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) else __x) (!g));
  v := u;
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  let res = ref (([] : (int list) list)) in
  i := 0;
  (try while (!i < List.length (!g)) do
    try
  let j = ref (0) in
  (try while (!j < List.length ((let __l = !g in let __i = 0 in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)))) do
    try
  if (((let __l = (let __l = !g in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) = 0) && ((let __l = (let __l = !temp in let __i = !i in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) in let __i = !j in let __len = List.length __l in List.nth __l (if __i >= 0 then __i else __len + __i)) > 0)) then (
  res := (Obj.magic (List.append (!res) [(Obj.magic ([!i; !j]) : int list)]) : int list list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)


let test_graph = ref ([[0; 16; 13; 0; 0; 0]; [0; 0; 10; 12; 0; 0]; [0; 4; 0; 0; 14; 0]; [0; 0; 9; 0; 0; 20]; [0; 0; 0; 7; 0; 4]; [0; 0; 0; 0; 0; 0]])
let result = ref (mincut (!test_graph) (Obj.repr (0)) (Obj.repr (5)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (Obj.magic (!result) : Obj.t)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
