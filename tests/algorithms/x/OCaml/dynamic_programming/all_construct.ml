(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec allConstruct target wordBank =
  let __ret = ref ([] : (string list) list) in
  (try
  let tableSize = (String.length (target) + 1) in
  let table = ref (([] : (string list list) list)) in
  let idx = ref (0) in
  (try while (!idx < tableSize) do
    try
  let empty = ref (([] : (string list) list)) in
  table := (List.append (!table) [(Obj.magic (!empty) : string list list)]);
  idx := (!idx + 1);
    with Continue -> ()
  done with Break -> ());
  let base = ref (([] : (string) list)) in
  table := (List.mapi (fun __i __x -> if __i = 0 then [!base] else __x) (!table));
  let i = ref (0) in
  (try while (!i < tableSize) do
    try
  if (List.length (List.nth (!table) (!i)) <> 0) then (
  let w = ref (0) in
  (try while (!w < List.length (wordBank)) do
    try
  let word = List.nth (wordBank) (!w) in
  let wordLen = String.length (word) in
  if (String.sub (target) !i ((!i + wordLen) - !i) = word) then (
  let k = ref (0) in
  (try while (!k < List.length (List.nth (!table) (!i))) do
    try
  let way = ref (List.nth (List.nth (!table) (!i)) (!k)) in
  let combination = ref (([] : (string) list)) in
  let m = ref (0) in
  (try while (!m < List.length (!way)) do
    try
  combination := (List.append (!combination) [(Obj.magic (List.nth (!way) (!m)) : string)]);
  m := (!m + 1);
    with Continue -> ()
  done with Break -> ());
  combination := (List.append (!combination) [(Obj.magic (word) : string)]);
  let nextIndex = (!i + wordLen) in
  table := (List.mapi (fun __i __x -> if __i = nextIndex then (List.append (List.nth (!table) (nextIndex)) [(Obj.magic (!combination) : string list)]) else __x) (!table));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  );
  w := (!w + 1);
    with Continue -> ()
  done with Break -> ());
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (!table) (String.length (target))) : string list list); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((__str (allConstruct ("jwajalapa") (["jwa"; "j"; "w"; "a"; "la"; "lapa"]))));
  print_endline ((__str (allConstruct ("rajamati") (["s"; "raj"; "amat"; "raja"; "ma"; "i"; "t"]))));
  print_endline ((__str (allConstruct ("hexagonosaurus") (["h"; "ex"; "hex"; "ag"; "ago"; "ru"; "auru"; "rus"; "go"; "no"; "o"; "s"]))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()