(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec key state obs =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic (((state ^ "|") ^ obs)) : string); raise Return
  with Return -> !__ret)

and viterbi observations states start_p trans_p emit_p =
  let __ret = ref ([] : (string) list) in
  (try
  if ((List.length (observations) = 0) || (List.length (states) = 0)) then (
  (failwith ("empty parameters"));
  );
  let probs = ref ([] : (string * float) list) in
  let ptrs = ref ([] : (string * string) list) in
  let first_obs = List.nth (observations) (0) in
  let i = ref (0) in
  (try while (!i < List.length (states)) do
    try
  let state = List.nth (states) (!i) in
  probs := ((__str (key (state) (first_obs)), (List.assoc (__str (state)) (start_p) *. List.assoc (__str (first_obs)) (List.assoc (__str (state)) (emit_p)))) :: List.remove_assoc (__str (key (state) (first_obs))) (!probs));
  ptrs := ((__str (key (state) (first_obs)), "") :: List.remove_assoc (__str (key (state) (first_obs))) (!ptrs));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let t = ref (1) in
  (try while (!t < List.length (observations)) do
    try
  let obs = List.nth (observations) (!t) in
  let j = ref (0) in
  (try while (!j < List.length (states)) do
    try
  let state = List.nth (states) (!j) in
  let max_prob = ref ((-.(1.0))) in
  let prev_state = ref ("") in
  let k = ref (0) in
  (try while (!k < List.length (states)) do
    try
  let state0 = List.nth (states) (!k) in
  let obs0 = List.nth (observations) ((!t - 1)) in
  let prob_prev = List.assoc (__str (key (state0) (obs0))) (!probs) in
  let prob = ((prob_prev *. List.assoc (__str (state)) (List.assoc (__str (state0)) (trans_p))) *. List.assoc (__str (obs)) (List.assoc (__str (state)) (emit_p))) in
  if (prob > !max_prob) then (
  max_prob := prob;
  prev_state := state0;
  );
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  probs := ((__str (key (state) (obs)), !max_prob) :: List.remove_assoc (__str (key (state) (obs))) (!probs));
  ptrs := ((__str (key (state) (obs)), !prev_state) :: List.remove_assoc (__str (key (state) (obs))) (!ptrs));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  t := (!t + 1);
    with Continue -> ()
  done with Break -> ());
  let path = ref (([] : (string) list)) in
  let n = ref (0) in
  (try while (!n < List.length (observations)) do
    try
  path := (List.append (!path) [(Obj.magic ("") : string)]);
  n := (!n + 1);
    with Continue -> ()
  done with Break -> ());
  let last_obs = List.nth (observations) ((List.length (observations) - 1)) in
  let max_final = ref ((-.(1.0))) in
  let last_state = ref ("") in
  let m = ref (0) in
  (try while (!m < List.length (states)) do
    try
  let state = List.nth (states) (!m) in
  let prob = List.assoc (__str (key (state) (last_obs))) (!probs) in
  if (prob > !max_final) then (
  max_final := prob;
  last_state := state;
  );
  m := (!m + 1);
    with Continue -> ()
  done with Break -> ());
  let last_index = (List.length (observations) - 1) in
  path := (List.mapi (fun __i __x -> if __i = last_index then !last_state else __x) (!path));
  let idx = ref (last_index) in
  (try while (!idx > 0) do
    try
  let obs = List.nth (observations) (!idx) in
  let prev = List.assoc (__str (key (List.nth (!path) (!idx)) (obs))) (!ptrs) in
  path := (List.mapi (fun __i __x -> if __i = (!idx - 1) then prev else __x) (!path));
  idx := (!idx - 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!path) : string list); raise Return
  with Return -> !__ret)

and join_words words =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (words)) do
    try
  if (!i > 0) then (
  res := (!res ^ " ");
  );
  res := (!res ^ List.nth (words) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let observations = ref (["normal"; "cold"; "dizzy"])
let states = ref (["Healthy"; "Fever"])
let start_p = ref ([(__str ("Healthy"), 0.6); (__str ("Fever"), 0.4)])
let trans_p = ref ([(__str ("Healthy"), [(__str ("Healthy"), 0.7); (__str ("Fever"), 0.3)]); (__str ("Fever"), [(__str ("Healthy"), 0.4); (__str ("Fever"), 0.6)])])
let emit_p = ref ([(__str ("Healthy"), [(__str ("normal"), 0.5); (__str ("cold"), 0.4); (__str ("dizzy"), 0.1)]); (__str ("Fever"), [(__str ("normal"), 0.1); (__str ("cold"), 0.3); (__str ("dizzy"), 0.6)])])
let result = ref (viterbi (!observations) (!states) ((Obj.magic !start_p : (string * float) list)) ((Obj.magic !trans_p : (string * (string * float) list) list)) ((Obj.magic !emit_p : (string * (string * float) list) list)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((join_words (!result)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
