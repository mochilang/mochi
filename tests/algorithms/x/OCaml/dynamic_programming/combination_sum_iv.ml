(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_list len value =
  let __ret = ref ([] : (int) list) in
  (try
  let len = (Obj.magic len : int) in
  let value = (Obj.magic value : int) in
  let arr = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < len) do
    try
  arr := (List.append (!arr) [(Obj.magic (value) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and count_recursive array target =
  let __ret = ref 0 in
  (try
  let target = (Obj.magic target : int) in
  if (target < 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if (target = 0) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  let total = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (array)) do
    try
  total := (!total + count_recursive (array) (Obj.repr ((target - List.nth (array) (!i)))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!total) : int); raise Return
  with Return -> !__ret)

and combination_sum_iv array target =
  let __ret = ref 0 in
  (try
  let target = (Obj.magic target : int) in
  __ret := (Obj.magic (count_recursive (array) (Obj.repr (target))) : int); raise Return
  with Return -> !__ret)

and count_dp array target dp =
  let __ret = ref 0 in
  (try
  let target = (Obj.magic target : int) in
  if (target < 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  if (target = 0) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  if (List.nth (!dp) (target) > (0 - 1)) then (
  __ret := (Obj.magic (List.nth (!dp) (target)) : int); raise Return
  );
  let total = ref (0) in
  let i = ref (0) in
  (try while (!i < List.length (array)) do
    try
  total := (!total + count_dp (array) (Obj.repr ((target - List.nth (array) (!i)))) (dp));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  dp := (List.mapi (fun __i __x -> if __i = target then !total else __x) (!dp));
  __ret := (Obj.magic (!total) : int); raise Return
  with Return -> !__ret)

and combination_sum_iv_dp_array array target =
  let __ret = ref 0 in
  (try
  let target = (Obj.magic target : int) in
  let dp = ref (make_list (Obj.repr ((target + 1))) (Obj.repr (-(1)))) in
  __ret := (Obj.magic (count_dp (array) (Obj.repr (target)) (dp)) : int); raise Return
  with Return -> !__ret)

and combination_sum_iv_bottom_up n array target =
  let __ret = ref 0 in
  (try
  let n = (Obj.magic n : int) in
  let target = (Obj.magic target : int) in
  let dp = ref (make_list (Obj.repr ((target + 1))) (Obj.repr (0))) in
  dp := (List.mapi (fun __i __x -> if __i = 0 then 1 else __x) (!dp));
  let i = ref (1) in
  (try while (!i <= target) do
    try
  let j = ref (0) in
  (try while (!j < n) do
    try
  if ((!i - List.nth (array) (!j)) >= 0) then (
  dp := (List.mapi (fun __i __x -> if __i = !i then (List.nth (!dp) (!i) + List.nth (!dp) ((!i - List.nth (array) (!j)))) else __x) (!dp));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (!dp) (target)) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (combination_sum_iv ([1; 2; 5]) (Obj.repr (5)))));
  print_endline ((string_of_int (combination_sum_iv_dp_array ([1; 2; 5]) (Obj.repr (5)))));
  print_endline ((string_of_int (combination_sum_iv_bottom_up (Obj.repr (3)) ([1; 2; 5]) (Obj.repr (5)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()