(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 16:40 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec create_fibonacci () =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  __ret := (Obj.magic ([(__str ("sequence"), Obj.repr ([0; 1]))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and fib_get f index =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let index = (Obj.magic index : int) in
  let seq = ref ((Obj.obj (List.assoc (__str ("sequence")) (!f) : Obj.t) : int list)) in
  (try while (List.length (!seq) < index) do
    try
  let next = (List.nth (!seq) ((List.length (!seq) - 1)) + List.nth (!seq) ((List.length (!seq) - 2))) in
  seq := (List.append (!seq) [(Obj.magic (next) : int)]);
    with Continue -> ()
  done with Break -> ());
  f := ((__str ("sequence"), Obj.repr (!seq)) :: List.remove_assoc (__str ("sequence")) (Obj.magic (!f) : (string * Obj.t) list));
  let result = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < index) do
    try
  result := (List.append (!result) [(Obj.magic (List.nth (!seq) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("fib"), Obj.repr (!f)); (__str ("values"), Obj.repr (!result))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let fib = ref (create_fibonacci ()) in
  let res = ref (fib_get (fib) (Obj.repr (10))) in
  fib := (Obj.obj (List.assoc (__str ("fib")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline ((__str ((Obj.obj (List.assoc (__str ("values")) (!res) : Obj.t) : int list))));
  res := fib_get (fib) (Obj.repr (5));
  fib := (Obj.obj (List.assoc (__str ("fib")) (!res) : Obj.t) : ( string * Obj.t ) list);
  print_endline ((__str ((Obj.obj (List.assoc (__str ("values")) (!res) : Obj.t) : int list))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()