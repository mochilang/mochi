(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sort_list nums =
  let __ret = ref ([] : (int) list) in
  (try
  let arr = ref (nums) in
  let i = ref (1) in
  (try while (!i < List.length (!arr)) do
    try
  let key = List.nth (!arr) (!i) in
  let j = ref ((!i - 1)) in
  (try while ((!j >= 0) && (List.nth (!arr) (!j) > key)) do
    try
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then List.nth (!arr) (!j) else __x) (!arr));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then key else __x) (!arr));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and largest_divisible_subset items =
  let __ret = ref ([] : (int) list) in
  (try
  if (List.length (items) = 0) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let nums = ref (sort_list (items)) in
  let n = List.length (!nums) in
  let memo = ref (([] : (int) list)) in
  let prev = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  memo := (List.append (!memo) [(Obj.magic (1) : int)]);
  prev := (List.append (!prev) [(Obj.magic (!i) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 0;
  (try while (!i < n) do
    try
  let j = ref (0) in
  (try while (!j < !i) do
    try
  if (((List.nth (!nums) (!j) = 0) || (((List.nth (!nums) (!i) mod List.nth (!nums) (!j) + List.nth (!nums) (!j)) mod List.nth (!nums) (!j)) = 0)) && ((List.nth (!memo) (!j) + 1) > List.nth (!memo) (!i))) then (
  memo := (List.mapi (fun __i __x -> if __i = !i then (List.nth (!memo) (!j) + 1) else __x) (!memo));
  prev := (List.mapi (fun __i __x -> if __i = !i then !j else __x) (!prev));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let ans = ref ((0 - 1)) in
  let last_index = ref ((0 - 1)) in
  i := 0;
  (try while (!i < n) do
    try
  if (List.nth (!memo) (!i) > !ans) then (
  ans := List.nth (!memo) (!i);
  last_index := !i;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!last_index = (0 - 1)) then (
  __ret := (Obj.magic ([]) : int list); raise Return
  );
  let result = ref ([List.nth (!nums) (!last_index)]) in
  (try while (List.nth (!prev) (!last_index) <> !last_index) do
    try
  last_index := List.nth (!prev) (!last_index);
  result := (List.append (!result) [(Obj.magic (List.nth (!nums) (!last_index)) : int)]);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let items = ref ([1; 16; 7; 8; 4]) in
  let subset = ref (largest_divisible_subset (!items)) in
  print_endline ((((("The longest divisible subset of " ^ (__str (!items))) ^ " is ") ^ (__str (!subset))) ^ "."));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
