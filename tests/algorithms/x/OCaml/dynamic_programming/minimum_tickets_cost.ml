(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_list len value =
  let __ret = ref ([] : (int) list) in
  (try
  let len = (Obj.magic len : int) in
  let value = (Obj.magic value : int) in
  let arr = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < len) do
    try
  arr := (List.append (!arr) [(Obj.magic (value) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : int list); raise Return
  with Return -> !__ret)

and max_int a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (a > b) then (
  __ret := (Obj.magic (a) : int); raise Return
  ) else (
  __ret := (Obj.magic (b) : int); raise Return
  );
    !__ret
  with Return -> !__ret)

and min_int a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (a < b) then (
  __ret := (Obj.magic (a) : int); raise Return
  ) else (
  __ret := (Obj.magic (b) : int); raise Return
  );
    !__ret
  with Return -> !__ret)

and min3 a b c =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let c = (Obj.magic c : int) in
  __ret := (Obj.magic (min_int (Obj.repr (min_int (Obj.repr (a)) (Obj.repr (b)))) (Obj.repr (c))) : int); raise Return
  with Return -> !__ret)

and minimum_tickets_cost days costs =
  let __ret = ref 0 in
  (try
  if (List.length (days) = 0) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let last_day = ref (List.nth (days) ((List.length (days) - 1))) in
  let dp = ref (make_list (Obj.repr ((!last_day + 1))) (Obj.repr (0))) in
  let day_index = ref (0) in
  let d = ref (1) in
  (try while (!d <= !last_day) do
    try
  if ((!day_index < List.length (days)) && (!d = List.nth (days) (!day_index))) then (
  let cost1 = (List.nth (!dp) ((!d - 1)) + List.nth (costs) (0)) in
  let cost7 = (List.nth (!dp) (max_int (Obj.repr (0)) (Obj.repr ((!d - 7)))) + List.nth (costs) (1)) in
  let cost30 = (List.nth (!dp) (max_int (Obj.repr (0)) (Obj.repr ((!d - 30)))) + List.nth (costs) (2)) in
  dp := (List.mapi (fun __i __x -> if __i = !d then min3 (Obj.repr (cost1)) (Obj.repr (cost7)) (Obj.repr (cost30)) else __x) (!dp));
  day_index := (!day_index + 1);
  ) else (
  dp := (List.mapi (fun __i __x -> if __i = !d then List.nth (!dp) ((!d - 1)) else __x) (!dp));
  );
  d := (!d + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (!dp) (!last_day)) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (minimum_tickets_cost ([1; 4; 6; 7; 8; 20]) ([2; 7; 15]))));
  print_endline ((string_of_int (minimum_tickets_cost ([1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 30; 31]) ([2; 7; 15]))));
  print_endline ((string_of_int (minimum_tickets_cost ([1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 30; 31]) ([2; 90; 150]))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
