(* Generated by Mochi transpiler v0.10.64 on 2025-08-13 12:32 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec copy_list src =
  let __ret = ref ([] : (int) list) in
  (try
  let src = (Obj.magic src : int list) in
  let result = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (src)) do
    try
  result := (Obj.magic (List.append (!result) [(Obj.magic ((let __l = src in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)]) : int list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and subset_combinations elements n =
  let __ret = ref ([] : (int list) list) in
  (try
  let elements = (Obj.magic elements : int list) in
  let n = (Obj.magic n : int) in
  let r = List.length (elements) in
  if (n > r) then (
  __ret := (Obj.magic ([]) : int list list); raise Return
  );
  let dp = ref (([] : (int list list) list)) in
  let i = ref (0) in
  (try while (!i <= r) do
    try
  dp := (Obj.magic (List.append (!dp) [(Obj.magic ([]) : int list list)]) : int list list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  dp := (List.mapi (fun __i __x -> if __i = 0 then (List.append ((let __l = !dp in let __i = 0 in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) [(Obj.magic ([]) : int list)]) else __x) (!dp));
  i := 1;
  (try while (!i <= r) do
    try
  let j = ref (!i) in
  (try while (!j > 0) do
    try
  let prevs = ref ((let __l = !dp in let __i = (!j - 1) in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let k = ref (0) in
  (try while (!k < List.length (!prevs)) do
    try
  let prev = ref ((let __l = !prevs in let __i = !k in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) in
  let comb = ref (copy_list (!prev)) in
  comb := (Obj.magic (List.append (!comb) [(Obj.magic ((let __l = elements in let __i = (!i - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)]) : int list);
  dp := (List.mapi (fun __i __x -> if __i = !j then (List.append ((let __l = !dp in let __i = !j in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) [(Obj.magic (!comb) : int list)]) else __x) (!dp));
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((let __l = !dp in let __i = n in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> [])) : int list list); raise Return
  with Return -> !__ret)


let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  print_endline ((__str (Obj.magic (subset_combinations ([10; 20; 30; 40]) (Obj.repr (2))) : Obj.t)));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
