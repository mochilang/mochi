(* Generated by Mochi transpiler v0.10.60 on 2025-08-08 10:08 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat ", " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec min3 a b c =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let c = (Obj.magic c : int) in
  let m = ref (a) in
  if (b < !m) then (
  m := b;
  );
  if (c < !m) then (
  m := c;
  );
  __ret := (Obj.magic (!m) : int); raise Return
  with Return -> !__ret)

and helper_top_down word1 word2 dp i j =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  if (i < 0) then (
  __ret := (Obj.magic ((j + 1)) : int); raise Return
  );
  if (j < 0) then (
  __ret := (Obj.magic ((i + 1)) : int); raise Return
  );
  if (List.nth (List.nth (!dp) (i)) (j) <> (0 - 1)) then (
  __ret := (Obj.magic (List.nth (List.nth (!dp) (i)) (j)) : int); raise Return
  );
  if (String.sub (word1) (i) ((i + 1) - i) = String.sub (word2) (j) ((j + 1) - j)) then (
  dp := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then helper_top_down (word1) (word2) (dp) (Obj.repr ((i - 1))) (Obj.repr ((j - 1))) else __x) (List.nth (!dp) (i))) else __x) (!dp));
  ) else (
  let insert = helper_top_down (word1) (word2) (dp) (Obj.repr (i)) (Obj.repr ((j - 1))) in
  let delete = helper_top_down (word1) (word2) (dp) (Obj.repr ((i - 1))) (Obj.repr (j)) in
  let replace = helper_top_down (word1) (word2) (dp) (Obj.repr ((i - 1))) (Obj.repr ((j - 1))) in
  dp := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then (1 + min3 (Obj.repr (insert)) (Obj.repr (delete)) (Obj.repr (replace))) else __x) (List.nth (!dp) (i))) else __x) (!dp));
  );
  __ret := (Obj.magic (List.nth (List.nth (!dp) (i)) (j)) : int); raise Return
  with Return -> !__ret)

and min_dist_top_down word1 word2 =
  let __ret = ref 0 in
  (try
  let m = String.length (word1) in
  let n = String.length (word2) in
  let dp = ref (([] : (int list) list)) in
  (try for _ = 0 to (m - 1) do
    try
  let row = ref (([] : (int) list)) in
  (try for _2 = 0 to (n - 1) do
    try
  row := (List.append (!row) [(Obj.magic ((0 - 1)) : int)]);
    with Continue -> ()
  done with Break -> ());
  dp := (List.append (!dp) [(Obj.magic (!row) : int list)]);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (helper_top_down (word1) (word2) (dp) (Obj.repr ((m - 1))) (Obj.repr ((n - 1)))) : int); raise Return
  with Return -> !__ret)

and min_dist_bottom_up word1 word2 =
  let __ret = ref 0 in
  (try
  let m = String.length (word1) in
  let n = String.length (word2) in
  let dp = ref (([] : (int list) list)) in
  (try for _ = 0 to ((m + 1) - 1) do
    try
  let row = ref (([] : (int) list)) in
  (try for _2 = 0 to ((n + 1) - 1) do
    try
  row := (List.append (!row) [(Obj.magic (0) : int)]);
    with Continue -> ()
  done with Break -> ());
  dp := (List.append (!dp) [(Obj.magic (!row) : int list)]);
    with Continue -> ()
  done with Break -> ());
  (try for i = 0 to ((m + 1) - 1) do
    try
  (try for j = 0 to ((n + 1) - 1) do
    try
  if (i = 0) then (
  dp := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then j else __x) (List.nth (!dp) (i))) else __x) (!dp));
  ) else (
  if (j = 0) then (
  dp := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then i else __x) (List.nth (!dp) (i))) else __x) (!dp));
  ) else (
  if (String.sub (word1) ((i - 1)) (i - (i - 1)) = String.sub (word2) ((j - 1)) (j - (j - 1))) then (
  dp := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then List.nth (List.nth (!dp) ((i - 1))) ((j - 1)) else __x) (List.nth (!dp) (i))) else __x) (!dp));
  ) else (
  let insert = List.nth (List.nth (!dp) (i)) ((j - 1)) in
  let delete = List.nth (List.nth (!dp) ((i - 1))) (j) in
  let replace = List.nth (List.nth (!dp) ((i - 1))) ((j - 1)) in
  dp := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then (1 + min3 (Obj.repr (insert)) (Obj.repr (delete)) (Obj.repr (replace))) else __x) (List.nth (!dp) (i))) else __x) (!dp));
  );
  );
  );
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (List.nth (!dp) (m)) (n)) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (min_dist_top_down ("intention") ("execution"))));
  print_endline ((string_of_int (min_dist_top_down ("intention") (""))));
  print_endline ((string_of_int (min_dist_top_down ("") (""))));
  print_endline ((string_of_int (min_dist_bottom_up ("intention") ("execution"))));
  print_endline ((string_of_int (min_dist_bottom_up ("intention") (""))));
  print_endline ((string_of_int (min_dist_bottom_up ("") (""))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()