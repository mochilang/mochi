(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec score_function source_char target_char match_score mismatch_score gap_score =
  let __ret = ref 0 in
  (try
  let match_score = (Obj.magic match_score : int) in
  let mismatch_score = (Obj.magic mismatch_score : int) in
  let gap_score = (Obj.magic gap_score : int) in
  if ((source_char = "-") || (target_char = "-")) then (
  __ret := (Obj.magic (gap_score) : int); raise Return
  );
  if (source_char = target_char) then (
  __ret := (Obj.magic (match_score) : int); raise Return
  );
  __ret := (Obj.magic (mismatch_score) : int); raise Return
  with Return -> !__ret)

and smith_waterman query subject match_score mismatch_score gap_score =
  let __ret = ref ([] : (int list) list) in
  (try
  let match_score = (Obj.magic match_score : int) in
  let mismatch_score = (Obj.magic mismatch_score : int) in
  let gap_score = (Obj.magic gap_score : int) in
  let q = String.uppercase_ascii (query) in
  let s = String.uppercase_ascii (subject) in
  let m = String.length (q) in
  let n = String.length (s) in
  let score = ref (([] : (int list) list)) in
  (try for _ = 0 to ((m + 1) - 1) do
    try
  let row = ref (([] : (int) list)) in
  (try for _2 = 0 to ((n + 1) - 1) do
    try
  row := (List.append (!row) [(Obj.magic (0) : int)]);
    with Continue -> ()
  done with Break -> ());
  score := (List.append (!score) [(Obj.magic (!row) : int list)]);
    with Continue -> ()
  done with Break -> ());
  (try for i = 1 to ((m + 1) - 1) do
    try
  (try for j = 1 to ((n + 1) - 1) do
    try
  let qc = String.sub (q) ((i - 1)) (i - (i - 1)) in
  let sc = String.sub (s) ((j - 1)) (j - (j - 1)) in
  let diag = (List.nth (List.nth (!score) ((i - 1))) ((j - 1)) + score_function (qc) (sc) (Obj.repr (match_score)) (Obj.repr (mismatch_score)) (Obj.repr (gap_score))) in
  let delete = (List.nth (List.nth (!score) ((i - 1))) (j) + gap_score) in
  let insert = (List.nth (List.nth (!score) (i)) ((j - 1)) + gap_score) in
  let max_val = ref (0) in
  if (diag > !max_val) then (
  max_val := diag;
  );
  if (delete > !max_val) then (
  max_val := delete;
  );
  if (insert > !max_val) then (
  max_val := insert;
  );
  score := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then !max_val else __x) (List.nth (!score) (i))) else __x) (!score));
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!score) : int list list); raise Return
  with Return -> !__ret)

and traceback score query subject match_score mismatch_score gap_score =
  let __ret = ref "" in
  (try
  let match_score = (Obj.magic match_score : int) in
  let mismatch_score = (Obj.magic mismatch_score : int) in
  let gap_score = (Obj.magic gap_score : int) in
  let q = String.uppercase_ascii (query) in
  let s = String.uppercase_ascii (subject) in
  let max_value = ref (0) in
  let i_max = ref (0) in
  let j_max = ref (0) in
  (try for i = 0 to (List.length (score) - 1) do
    try
  (try for j = 0 to (List.length (List.nth (score) (i)) - 1) do
    try
  if (List.nth (List.nth (score) (i)) (j) > !max_value) then (
  max_value := List.nth (List.nth (score) (i)) (j);
  i_max := i;
  j_max := j;
  );
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  let i = ref (!i_max) in
  let j = ref (!j_max) in
  let align1 = ref ("") in
  let align2 = ref ("") in
  let gap_penalty = score_function ("-") ("-") (Obj.repr (match_score)) (Obj.repr (mismatch_score)) (Obj.repr (gap_score)) in
  if ((!i = 0) || (!j = 0)) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  (try while ((!i > 0) && (!j > 0)) do
    try
  let qc = String.sub (q) ((!i - 1)) (!i - (!i - 1)) in
  let sc = String.sub (s) ((!j - 1)) (!j - (!j - 1)) in
  if (List.nth (List.nth (score) (!i)) (!j) = (List.nth (List.nth (score) ((!i - 1))) ((!j - 1)) + score_function (qc) (sc) (Obj.repr (match_score)) (Obj.repr (mismatch_score)) (Obj.repr (gap_score)))) then (
  align1 := (qc ^ !align1);
  align2 := (sc ^ !align2);
  i := (!i - 1);
  j := (!j - 1);
  ) else (
  if (List.nth (List.nth (score) (!i)) (!j) = (List.nth (List.nth (score) ((!i - 1))) (!j) + gap_penalty)) then (
  align1 := (qc ^ !align1);
  align2 := ("-" ^ !align2);
  i := (!i - 1);
  ) else (
  align1 := ("-" ^ !align1);
  align2 := (sc ^ !align2);
  j := (!j - 1);
  );
  );
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (((!align1 ^ "\n") ^ !align2)) : string); raise Return
  with Return -> !__ret)


let query = "HEAGAWGHEE"
let subject = "PAWHEAE"
let score = ref (smith_waterman (query) (subject) (Obj.repr (1)) (Obj.repr (-(1))) (Obj.repr (-(2))))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((traceback (!score) (query) (subject) (Obj.repr (1)) (Obj.repr (-(1))) (Obj.repr (-(2)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
