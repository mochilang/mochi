(* Generated by Mochi transpiler v0.10.64 on 2025-08-13 07:12 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then (magic v : int) = 0
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __show_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if __is_list v then
    __str_list (Obj.magic v)
  else if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let f = ref (([] : (int list) list))
let rec max_int a b =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  if (a > b) then (
  __ret := (Obj.magic (a) : int); raise Return
  ) else (
  __ret := (Obj.magic (b) : int); raise Return
  );
    !__ret
  with Return -> !__ret)

and init_f n w =
  let __ret = ref ([] : (int list) list) in
  (try
  let n = (Obj.magic n : int) in
  let w = (Obj.magic w : int) in
  let table = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i <= n) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j <= w) do
    try
  if ((!i = 0) || (!j = 0)) then (
  row := (Obj.magic (List.append (!row) [(Obj.magic (0) : int)]) : int list);
  ) else (
  row := (Obj.magic (List.append (!row) [(Obj.magic (-(1)) : int)]) : int list);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  table := (Obj.magic (List.append (!table) [(Obj.magic (!row) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!table) : int list list); raise Return
  with Return -> !__ret)

and mf_knapsack i wt val_ j =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  let wt = (Obj.magic wt : int list) in
  let val_ = (Obj.magic val_ : int list) in
  let j = (Obj.magic j : int) in
  if ((let __l = (let __l = !f in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) < 0) then (
  if (j < (let __l = wt in let __i = (i - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  f := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then mf_knapsack (Obj.repr ((i - 1))) (wt) (val_) (Obj.repr (j)) else __x) ((let __l = !f in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!f));
  ) else (
  let without_item = mf_knapsack (Obj.repr ((i - 1))) (wt) (val_) (Obj.repr (j)) in
  let with_item = (mf_knapsack (Obj.repr ((i - 1))) (wt) (val_) (Obj.repr ((j - (let __l = wt in let __i = (i - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)))) + (let __l = val_ in let __i = (i - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) in
  f := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then max_int (Obj.repr (without_item)) (Obj.repr (with_item)) else __x) ((let __l = !f in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!f));
  );
  );
  __ret := (Obj.magic ((let __l = (let __l = !f in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int); raise Return
  with Return -> !__ret)

and create_matrix rows cols =
  let __ret = ref ([] : (int list) list) in
  (try
  let rows = (Obj.magic rows : int) in
  let cols = (Obj.magic cols : int) in
  let matrix = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i <= rows) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j <= cols) do
    try
  row := (Obj.magic (List.append (!row) [(Obj.magic (0) : int)]) : int list);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  matrix := (Obj.magic (List.append (!matrix) [(Obj.magic (!row) : int list)]) : int list list);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!matrix) : int list list); raise Return
  with Return -> !__ret)

and knapsack w wt val_ n =
  let __ret = ref ([] : (int list) list) in
  (try
  let w = (Obj.magic w : int) in
  let wt = (Obj.magic wt : int list) in
  let val_ = (Obj.magic val_ : int list) in
  let n = (Obj.magic n : int) in
  let dp = ref (create_matrix (Obj.repr (n)) (Obj.repr (w))) in
  let i = ref (1) in
  (try while (!i <= n) do
    try
  let w_ = ref (1) in
  (try while (!w_ <= w) do
    try
  if ((let __l = wt in let __i = (!i - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) <= !w_) then (
  let include_ = ((let __l = val_ in let __i = (!i - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) + (let __l = (let __l = !dp in let __i = (!i - 1) in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = (!w_ - (let __l = wt in let __i = (!i - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) in
  let exclude = (let __l = (let __l = !dp in let __i = (!i - 1) in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !w_ in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  dp := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !w_ then max_int (Obj.repr (include_)) (Obj.repr (exclude)) else __x) ((let __l = !dp in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!dp));
  ) else (
  dp := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = !w_ then (let __l = (let __l = !dp in let __i = (!i - 1) in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = !w_ in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) else __x) ((let __l = !dp in let __i = !i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []))) else __x) (!dp));
  );
  w_ := (!w_ + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!dp) : int list list); raise Return
  with Return -> !__ret)

and construct_solution dp wt i j optimal_set =
  let __ret = ref ([] : (int) list) in
  (try
  let dp = (Obj.magic dp : int list list) in
  let wt = (Obj.magic wt : int list) in
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let optimal_set = (Obj.magic optimal_set : int list) in
  if ((i > 0) && (j > 0)) then (
  if ((let __l = (let __l = dp in let __i = (i - 1) in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) = (let __l = (let __l = dp in let __i = i in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = j in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) then (
  __ret := (Obj.magic (construct_solution (dp) (wt) (Obj.repr ((i - 1))) (Obj.repr (j)) (optimal_set)) : int list); raise Return
  ) else (
  let with_prev = ref (construct_solution (dp) (wt) (Obj.repr ((i - 1))) (Obj.repr ((j - (let __l = wt in let __i = (i - 1) in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)))) (optimal_set)) in
  __ret := (Obj.magic ((List.append (!with_prev) [(Obj.magic (i) : int)])) : int list); raise Return
  );
  );
  __ret := (Obj.magic (optimal_set) : int list); raise Return
  with Return -> !__ret)

and knapsack_with_example_solution w wt val_ =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let w = (Obj.magic w : int) in
  let wt = (Obj.magic wt : int list) in
  let val_ = (Obj.magic val_ : int list) in
  let num_items = List.length (wt) in
  let dp_table = ref (knapsack (Obj.repr (w)) (wt) (val_) (Obj.repr (num_items))) in
  let optimal_val = (let __l = (let __l = !dp_table in let __i = num_items in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = w in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  let subset = ref (construct_solution (!dp_table) (wt) (Obj.repr (num_items)) (Obj.repr (w)) ((Obj.magic [] : int list))) in
  __ret := (Obj.magic ([(__str ("value"), Obj.repr (optimal_val)); (__str ("subset"), Obj.repr (!subset))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and format_set xs =
  let __ret = ref "" in
  (try
  let xs = (Obj.magic xs : int list) in
  let res = ref ("{") in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  res := (!res ^ (string_of_int (Obj.magic ((let __l = xs in let __i = !i in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0)) : int)));
  if ((!i + 1) < List.length (xs)) then (
  res := (!res ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  res := (!res ^ "}");
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let val_list = ref ([3; 2; 4; 4])
let wt_list = ref ([4; 3; 2; 3])
let n = 4
let w_cap = 6
let () =
  let bench_mem_start = _mem () in
  let bench_start = _now () in
  f := (Obj.magic init_f (Obj.repr (n)) (Obj.repr (w_cap)) : int list list);
  let dp_table = ref (knapsack (Obj.repr (w_cap)) (!wt_list) (!val_list) (Obj.repr (n))) in
  let optimal_solution = (let __l = (let __l = !dp_table in let __i = n in if __i < 0 then [] else match List.nth_opt __l __i with Some v -> v | None -> []) in let __i = w_cap in if __i < 0 then 0 else match List.nth_opt __l __i with Some v -> (Obj.magic v : int) | None -> 0) in
  print_endline (string_of_int optimal_solution);
  print_endline (string_of_int (mf_knapsack (Obj.repr (n)) (!wt_list) (!val_list) (Obj.repr (w_cap))));
  let example = knapsack_with_example_solution (Obj.repr (w_cap)) (!wt_list) (!val_list) in
  print_endline (("optimal_value = " ^ (string_of_int (Obj.magic ((match List.assoc_opt (__str ("value")) (example) with Some v -> (Obj.obj (v : Obj.t) : int) | None -> 0)) : int))));
  print_endline (("An optimal subset corresponding to the optimal value " ^ format_set ((match List.assoc_opt (__str ("subset")) (example) with Some v -> (Obj.obj (v : Obj.t) : int list) | None -> []))));
  let bench_finish = _now () in
  let bench_mem_end = _mem () in
  let bench_dur = (bench_finish - bench_start) / 1000 in
  let bench_mem_bytes = Stdlib.max 0 (bench_mem_end - bench_mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" bench_dur bench_mem_bytes "main";
  ()
