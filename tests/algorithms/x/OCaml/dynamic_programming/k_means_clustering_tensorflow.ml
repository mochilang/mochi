(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec distance_sq a b =
  let __ret = ref 0.0 in
  (try
  let sum = ref (0.0) in
  let i = ref (0) in
  (try while (!i < List.length (a)) do
    try
  let diff = ref ((List.nth (a) (!i) -. List.nth (b) (!i))) in
  sum := (!sum +. (!diff *. !diff));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!sum) : float); raise Return
  with Return -> !__ret)

and mean vectors =
  let __ret = ref ([] : (float) list) in
  (try
  let dim = ref (List.length (List.nth (vectors) (0))) in
  let res = ref (([] : (float) list)) in
  let i = ref (0) in
  (try while (!i < !dim) do
    try
  let total = ref (0.0) in
  let j = ref (0) in
  (try while (!j < List.length (vectors)) do
    try
  total := (!total +. List.nth (List.nth (vectors) (!j)) (!i));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic ((!total /. float_of_int (List.length (vectors)))) : float)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : float list); raise Return
  with Return -> !__ret)

and k_means vectors k iterations =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let k = (Obj.magic k : int) in
  let iterations = (Obj.magic iterations : int) in
  let centroids = ref (([] : (float list) list)) in
  let i = ref (0) in
  (try while (!i < k) do
    try
  centroids := (List.append (!centroids) [(Obj.magic (List.nth (vectors) (!i)) : float list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let assignments = ref (([] : (int) list)) in
  let n = ref (List.length (vectors)) in
  i := 0;
  (try while (!i < !n) do
    try
  assignments := (List.append (!assignments) [(Obj.magic (0) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let it = ref (0) in
  (try while (!it < iterations) do
    try
  let v = ref (0) in
  (try while (!v < !n) do
    try
  let best = ref (0) in
  let bestDist = ref (distance_sq (List.nth (vectors) (!v)) (List.nth (!centroids) (0))) in
  let c = ref (1) in
  (try while (!c < k) do
    try
  let d = ref (distance_sq (List.nth (vectors) (!v)) (List.nth (!centroids) (!c))) in
  if (!d < !bestDist) then (
  bestDist := !d;
  best := !c;
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  assignments := (List.mapi (fun __i __x -> if __i = !v then !best else __x) (!assignments));
  v := (!v + 1);
    with Continue -> ()
  done with Break -> ());
  let cIdx = ref (0) in
  (try while (!cIdx < k) do
    try
  let cluster = ref (([] : (float list) list)) in
  let v2 = ref (0) in
  (try while (!v2 < !n) do
    try
  if (List.nth (!assignments) (!v2) = !cIdx) then (
  cluster := (List.append (!cluster) [(Obj.magic (List.nth (vectors) (!v2)) : float list)]);
  );
  v2 := (!v2 + 1);
    with Continue -> ()
  done with Break -> ());
  if (List.length (!cluster) > 0) then (
  centroids := (List.mapi (fun __i __x -> if __i = !cIdx then mean (!cluster) else __x) (!centroids));
  );
  cIdx := (!cIdx + 1);
    with Continue -> ()
  done with Break -> ());
  it := (!it + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("centroids"), Obj.repr (!centroids)); (__str ("assignments"), Obj.repr (!assignments))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let vectors = ref ([[1.0; 2.0]; [1.5; 1.8]; [5.0; 8.0]; [8.0; 8.0]; [1.0; 0.6]; [9.0; 11.0]]) in
  let result = k_means (!vectors) (Obj.repr (2)) (Obj.repr (5)) in
  print_endline ((__str ((Obj.obj (List.assoc (__str ("centroids")) (result) : Obj.t) : float list list))));
  print_endline ((__str ((Obj.obj (List.assoc (__str ("assignments")) (result) : Obj.t) : int list))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
