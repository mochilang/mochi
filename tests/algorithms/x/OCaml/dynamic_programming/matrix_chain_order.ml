(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec make_2d n =
  let __ret = ref ([] : (int list) list) in
  (try
  let n = (Obj.magic n : int) in
  let res = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  row := (List.append (!row) [(Obj.magic (0) : int)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  res := (List.append (!res) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list list); raise Return
  with Return -> !__ret)

and matrix_chain_order arr =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let n = List.length (arr) in
  let m = ref (make_2d (Obj.repr (n))) in
  let s = ref (make_2d (Obj.repr (n))) in
  let chain_length = ref (2) in
  (try while (!chain_length < n) do
    try
  let a = ref (1) in
  (try while (!a < ((n - !chain_length) + 1)) do
    try
  let b = ((!a + !chain_length) - 1) in
  m := (List.mapi (fun __i __x -> if __i = !a then (List.mapi (fun __i __x -> if __i = b then 1000000000 else __x) (List.nth (!m) (!a))) else __x) (!m));
  let c = ref (!a) in
  (try while (!c < b) do
    try
  let cost = ((List.nth (List.nth (!m) (!a)) (!c) + List.nth (List.nth (!m) ((!c + 1))) (b)) + ((List.nth (arr) ((!a - 1)) * List.nth (arr) (!c)) * List.nth (arr) (b))) in
  if (cost < List.nth (List.nth (!m) (!a)) (b)) then (
  m := (List.mapi (fun __i __x -> if __i = !a then (List.mapi (fun __i __x -> if __i = b then cost else __x) (List.nth (!m) (!a))) else __x) (!m));
  s := (List.mapi (fun __i __x -> if __i = !a then (List.mapi (fun __i __x -> if __i = b then !c else __x) (List.nth (!s) (!a))) else __x) (!s));
  );
  c := (!c + 1);
    with Continue -> ()
  done with Break -> ());
  a := (!a + 1);
    with Continue -> ()
  done with Break -> ());
  chain_length := (!chain_length + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("matrix"), Obj.repr (!m)); (__str ("solution"), Obj.repr (!s))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and optimal_parenthesization s i j =
  let __ret = ref "" in
  (try
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  if (i = j) then (
  __ret := (Obj.magic (("A" ^ (string_of_int (i)))) : string); raise Return
  ) else (
  let left = optimal_parenthesization (s) (Obj.repr (i)) (Obj.repr (List.nth (List.nth (s) (i)) (j))) in
  let right = optimal_parenthesization (s) (Obj.repr ((List.nth (List.nth (s) (i)) (j) + 1))) (Obj.repr (j)) in
  __ret := (Obj.magic ((((("( " ^ left) ^ " ") ^ right) ^ " )")) : string); raise Return
  );
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let arr = ref ([30; 35; 15; 5; 10; 20; 25]) in
  let n = List.length (!arr) in
  let res = matrix_chain_order (!arr) in
  let m = ref ((Obj.obj (List.assoc (__str ("matrix")) (res) : Obj.t) : int list list)) in
  let s = ref ((Obj.obj (List.assoc (__str ("solution")) (res) : Obj.t) : int list list)) in
  print_endline (("No. of Operation required: " ^ (string_of_int (List.nth (List.nth (!m) (1)) ((n - 1))))));
  let seq = optimal_parenthesization (!s) (Obj.repr (1)) (Obj.repr ((n - 1))) in
  print_endline (seq);
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
