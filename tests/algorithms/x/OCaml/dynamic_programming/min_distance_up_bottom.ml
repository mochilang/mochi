(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec min3 a b c =
  let __ret = ref 0 in
  (try
  let a = (Obj.magic a : int) in
  let b = (Obj.magic b : int) in
  let c = (Obj.magic c : int) in
  let m = ref (a) in
  if (b < !m) then (
  m := b;
  );
  if (c < !m) then (
  m := c;
  );
  __ret := (Obj.magic (!m) : int); raise Return
  with Return -> !__ret)

and helper word1 word2 cache i j len1 len2 =
  let __ret = ref 0 in
  (try
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let len1 = (Obj.magic len1 : int) in
  let len2 = (Obj.magic len2 : int) in
  if (i >= len1) then (
  __ret := (Obj.magic ((len2 - j)) : int); raise Return
  );
  if (j >= len2) then (
  __ret := (Obj.magic ((len1 - i)) : int); raise Return
  );
  if (List.nth (List.nth (!cache) (i)) (j) <> (0 - 1)) then (
  __ret := (Obj.magic (List.nth (List.nth (!cache) (i)) (j)) : int); raise Return
  );
  let diff = ref (0) in
  if (String.sub (word1) (i) ((i + 1) - i) <> String.sub (word2) (j) ((j + 1) - j)) then (
  diff := 1;
  );
  let delete_cost = (1 + helper (word1) (word2) (cache) (Obj.repr ((i + 1))) (Obj.repr (j)) (Obj.repr (len1)) (Obj.repr (len2))) in
  let insert_cost = (1 + helper (word1) (word2) (cache) (Obj.repr (i)) (Obj.repr ((j + 1))) (Obj.repr (len1)) (Obj.repr (len2))) in
  let replace_cost = (!diff + helper (word1) (word2) (cache) (Obj.repr ((i + 1))) (Obj.repr ((j + 1))) (Obj.repr (len1)) (Obj.repr (len2))) in
  cache := (List.mapi (fun __i __x -> if __i = i then (List.mapi (fun __i __x -> if __i = j then min3 (Obj.repr (delete_cost)) (Obj.repr (insert_cost)) (Obj.repr (replace_cost)) else __x) (List.nth (!cache) (i))) else __x) (!cache));
  __ret := (Obj.magic (List.nth (List.nth (!cache) (i)) (j)) : int); raise Return
  with Return -> !__ret)

and min_distance_up_bottom word1 word2 =
  let __ret = ref 0 in
  (try
  let len1 = String.length (word1) in
  let len2 = String.length (word2) in
  let cache = ref (([] : (int list) list)) in
  (try for _ = 0 to (len1 - 1) do
    try
  let row = ref (([] : (int) list)) in
  (try for _2 = 0 to (len2 - 1) do
    try
  row := (List.append (!row) [(Obj.magic ((0 - 1)) : int)]);
    with Continue -> ()
  done with Break -> ());
  cache := (List.append (!cache) [(Obj.magic (!row) : int list)]);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (helper (word1) (word2) (cache) (Obj.repr (0)) (Obj.repr (0)) (Obj.repr (len1)) (Obj.repr (len2))) : int); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((string_of_int (min_distance_up_bottom ("intention") ("execution"))));
  print_endline ((string_of_int (min_distance_up_bottom ("intention") (""))));
  print_endline ((string_of_int (min_distance_up_bottom ("") (""))));
  print_endline ((string_of_int (min_distance_up_bottom ("zooicoarchaeologist") ("zoologist"))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
