(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec build_set words =
  let __ret = ref ([] : (string * bool) list) in
  (try
  let m = ref ([] : (string * bool) list) in
  (try List.iter (fun w ->
    try
  m := ((__str (w), true) :: List.remove_assoc (__str (w)) (!m));
    with Continue -> ()) (words) with Break -> ());
  __ret := (Obj.magic (!m) : (string * bool) list); raise Return
  with Return -> !__ret)

and word_break s words =
  let __ret = ref false in
  (try
  let n = String.length (s) in
  let dict = ref (build_set (words)) in
  let dp = ref (([] : (bool) list)) in
  let i = ref (0) in
  (try while (!i <= n) do
    try
  dp := (List.append (!dp) [(Obj.magic (false) : bool)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  dp := (List.mapi (fun __i __x -> if __i = 0 then true else __x) (!dp));
  i := 1;
  (try while (!i <= n) do
    try
  let j = ref (0) in
  (try while (!j < !i) do
    try
  if List.nth (!dp) (!j) then (
  let sub = String.sub (s) !j (!i - !j) in
  if (List.mem_assoc sub !dict) then (
  dp := (List.mapi (fun __i __x -> if __i = !i then true else __x) (!dp));
  j := !i;
  );
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (!dp) (n)) : bool); raise Return
  with Return -> !__ret)

and print_bool b =
  let __ret = ref (Obj.magic 0) in
  (try
  if b then (
  print_endline (string_of_bool true);
  ) else (
  print_endline (string_of_bool false);
  );
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_bool (word_break ("applepenapple") (["apple"; "pen"])));
  ignore (print_bool (word_break ("catsandog") (["cats"; "dog"; "sand"; "and"; "cat"])));
  ignore (print_bool (word_break ("cars") (["car"; "ca"; "rs"])));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
