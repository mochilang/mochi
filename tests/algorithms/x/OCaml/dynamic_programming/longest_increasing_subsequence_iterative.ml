(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec copy_list xs =
  let __ret = ref ([] : (int) list) in
  (try
  let res = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  res := (List.append (!res) [(Obj.magic (List.nth (xs) (!i)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : int list); raise Return
  with Return -> !__ret)

and longest_subsequence arr =
  let __ret = ref ([] : (int) list) in
  (try
  let n = List.length (arr) in
  let lis = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let single = ref (([] : (int) list)) in
  single := (List.append (!single) [(Obj.magic (List.nth (arr) (!i)) : int)]);
  lis := (List.append (!lis) [(Obj.magic (!single) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  i := 1;
  (try while (!i < n) do
    try
  let prev = ref (0) in
  (try while (!prev < !i) do
    try
  if ((List.nth (arr) (!prev) <= List.nth (arr) (!i)) && ((List.length (List.nth (!lis) (!prev)) + 1) > List.length (List.nth (!lis) (!i)))) then (
  let temp = ref (copy_list (List.nth (!lis) (!prev))) in
  let temp2 = ref ((List.append (!temp) [(Obj.magic (List.nth (arr) (!i)) : int)])) in
  lis := (List.mapi (fun __i __x -> if __i = !i then !temp2 else __x) (!lis));
  );
  prev := (!prev + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let result = ref (([] : (int) list)) in
  i := 0;
  (try while (!i < n) do
    try
  if (List.length (List.nth (!lis) (!i)) > List.length (!result)) then (
  result := List.nth (!lis) (!i);
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : int list); raise Return
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((__str (longest_subsequence ([10; 22; 9; 33; 21; 50; 41; 60; 80]))));
  print_endline ((__str (longest_subsequence ([4; 8; 7; 5; 1; 12; 2; 3; 9]))));
  print_endline ((__str (longest_subsequence ([9; 8; 7; 6; 5; 7]))));
  print_endline ((__str (longest_subsequence ([28; 26; 12; 23; 35; 39]))));
  print_endline ((__str (longest_subsequence ([1; 1; 1]))));
  print_endline ((__str (longest_subsequence ((Obj.magic [] : int list)))));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
