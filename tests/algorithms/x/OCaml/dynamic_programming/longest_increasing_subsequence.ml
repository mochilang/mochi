(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec longest_subsequence xs =
  let __ret = ref ([] : (int) list) in
  (try
  let n = List.length (xs) in
  if (n <= 1) then (
  __ret := (Obj.magic (xs) : int list); raise Return
  );
  let pivot = List.nth (xs) (0) in
  let is_found = ref (false) in
  let i = ref (1) in
  let longest_subseq = ref (([] : (int) list)) in
  (try while (not (!is_found) && (!i < n)) do
    try
  if (List.nth (xs) (!i) < pivot) then (
  is_found := true;
  let temp_array = ref (List.of_seq (Seq.take (n - !i) (Seq.drop !i (List.to_seq (xs))))) in
  temp_array := longest_subsequence (!temp_array);
  if (List.length (!temp_array) > List.length (!longest_subseq)) then (
  longest_subseq := !temp_array;
  );
  ) else (
  i := (!i + 1);
  );
    with Continue -> ()
  done with Break -> ());
  let filtered = ref (([] : (int) list)) in
  let j = ref (1) in
  (try while (!j < n) do
    try
  if (List.nth (xs) (!j) >= pivot) then (
  filtered := (List.append (!filtered) [(Obj.magic (List.nth (xs) (!j)) : int)]);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  let candidate = ref (([] : (int) list)) in
  candidate := (List.append (!candidate) [(Obj.magic (pivot) : int)]);
  candidate := (!candidate @ longest_subsequence (!filtered));
  if (List.length (!candidate) > List.length (!longest_subseq)) then (
  __ret := (Obj.magic (!candidate) : int list); raise Return
  ) else (
  __ret := (Obj.magic (!longest_subseq) : int list); raise Return
  );
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
