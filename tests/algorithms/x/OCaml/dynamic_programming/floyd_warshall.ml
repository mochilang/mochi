(* Generated by Mochi transpiler v0.10.61 on 2025-08-08 17:38 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let _inf = 1000000000
let rec new_graph n =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  let n = (Obj.magic n : int) in
  let dp = ref (([] : (int list) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  if (!i = !j) then (
  row := (List.append (!row) [(Obj.magic (0) : int)]);
  ) else (
  row := (List.append (!row) [(Obj.magic (_inf) : int)]);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  dp := (List.append (!dp) [(Obj.magic (!row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("n"), Obj.repr (n)); (__str ("dp"), Obj.repr (!dp))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and add_edge g u v w =
  let __ret = ref (Obj.magic 0) in
  (try
  let u = (Obj.magic u : int) in
  let v = (Obj.magic v : int) in
  let w = (Obj.magic w : int) in
  let dp = ref ((Obj.obj (List.assoc (__str ("dp")) (!g) : Obj.t) : int list list)) in
  let row = ref (List.nth (!dp) (u)) in
  row := (List.mapi (fun __i __x -> if __i = v then w else __x) (!row));
  dp := (List.mapi (fun __i __x -> if __i = u then !row else __x) (!dp));
  g := ((__str ("dp"), Obj.repr (!dp)) :: List.remove_assoc (__str ("dp")) (Obj.magic (!g) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and floyd_warshall g =
  let __ret = ref (Obj.magic 0) in
  (try
  let dp = ref ((Obj.obj (List.assoc (__str ("dp")) (!g) : Obj.t) : int list list)) in
  let k = ref (0) in
  (try while (!k < (Obj.obj (List.assoc (__str ("n")) (!g) : Obj.t) : int)) do
    try
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("n")) (!g) : Obj.t) : int)) do
    try
  let j = ref (0) in
  (try while (!j < (Obj.obj (List.assoc (__str ("n")) (!g) : Obj.t) : int)) do
    try
  let alt = (List.nth (List.nth (!dp) (!i)) (!k) + List.nth (List.nth (!dp) (!k)) (!j)) in
  let row = ref (List.nth (!dp) (!i)) in
  if (alt < List.nth (!row) (!j)) then (
  row := (List.mapi (fun __i __x -> if __i = !j then alt else __x) (!row));
  dp := (List.mapi (fun __i __x -> if __i = !i then !row else __x) (!dp));
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  k := (!k + 1);
    with Continue -> ()
  done with Break -> ());
  g := ((__str ("dp"), Obj.repr (!dp)) :: List.remove_assoc (__str ("dp")) (Obj.magic (!g) : (string * Obj.t) list));
    !__ret
  with Return -> !__ret)

and show_min g u v =
  let __ret = ref 0 in
  (try
  let u = (Obj.magic u : int) in
  let v = (Obj.magic v : int) in
  __ret := (Obj.magic (List.nth (List.nth ((Obj.obj (List.assoc (__str ("dp")) (g) : Obj.t) : int list list)) (u)) (v)) : int); raise Return
  with Return -> !__ret)


let graph = ref (new_graph (Obj.repr (5)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (add_edge (graph) (Obj.repr (0)) (Obj.repr (2)) (Obj.repr (9)));
  ignore (add_edge (graph) (Obj.repr (0)) (Obj.repr (4)) (Obj.repr (10)));
  ignore (add_edge (graph) (Obj.repr (1)) (Obj.repr (3)) (Obj.repr (5)));
  ignore (add_edge (graph) (Obj.repr (2)) (Obj.repr (3)) (Obj.repr (7)));
  ignore (add_edge (graph) (Obj.repr (3)) (Obj.repr (0)) (Obj.repr (10)));
  ignore (add_edge (graph) (Obj.repr (3)) (Obj.repr (1)) (Obj.repr (2)));
  ignore (add_edge (graph) (Obj.repr (3)) (Obj.repr (2)) (Obj.repr (1)));
  ignore (add_edge (graph) (Obj.repr (3)) (Obj.repr (4)) (Obj.repr (6)));
  ignore (add_edge (graph) (Obj.repr (4)) (Obj.repr (1)) (Obj.repr (3)));
  ignore (add_edge (graph) (Obj.repr (4)) (Obj.repr (2)) (Obj.repr (4)));
  ignore (add_edge (graph) (Obj.repr (4)) (Obj.repr (3)) (Obj.repr (9)));
  ignore (floyd_warshall (graph));
  print_endline ((string_of_int (show_min (!graph) (Obj.repr (1)) (Obj.repr (4)))));
  print_endline ((string_of_int (show_min (!graph) (Obj.repr (0)) (Obj.repr (3)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()