(* Generated by Mochi transpiler v0.10.61 on 2025-08-09 10:14 +0700 *)


let rec __is_list v =
  let open Obj in
  let r = repr v in
  if is_int r then false
  else
    match tag r with
    | 0 ->
        let t = field r 1 in
        if is_int t then (magic t : int) = 0
        else __is_list (magic t)
    | _ -> false

let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __show_list (Obj.magic v) else __show_tuple (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __show_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __show (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> if __is_list v then __str_list (Obj.magic v) else __str_tuple (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"
and __str_tuple t =
  let open Obj in
  let r = repr t in
  let rec aux i =
    if i >= size r then []
    else __str (Obj.obj (field r i)) :: aux (i + 1)
  in
  "(" ^ String.concat ", " (aux 0) ^ ")"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec sort_nodes nodes =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let arr = ref (nodes) in
  let i = ref (1) in
  (try while (!i < List.length (!arr)) do
    try
  let key_node = List.nth (!arr) (!i) in
  let j = ref ((!i - 1)) in
  (try while (!j >= 0) do
    try
  let temp = List.nth (!arr) (!j) in
  if ((Obj.obj (List.assoc (__str ("key")) (temp) : Obj.t) : int) > (Obj.obj (List.assoc (__str ("key")) (key_node) : Obj.t) : int)) then (
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then temp else __x) (!arr));
  j := (!j - 1);
  ) else (
  raise Break;
  );
    with Continue -> ()
  done with Break -> ());
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then key_node else __x) (!arr));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and print_node n =
  let __ret = ref (Obj.magic 0) in
  (try
  print_endline ((((("Node(key=" ^ (string_of_int ((Obj.obj (List.assoc (__str ("key")) (n) : Obj.t) : int)))) ^ ", freq=") ^ (string_of_int ((Obj.obj (List.assoc (__str ("freq")) (n) : Obj.t) : int)))) ^ ")"));
    !__ret
  with Return -> !__ret)

and print_binary_search_tree root keys i j parent is_left =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let parent = (Obj.magic parent : int) in
  if (((i > j) || (i < 0)) || (j > (List.length (root) - 1))) then (
  __ret := (); raise Return
  );
  let node = List.nth (List.nth (root) (i)) (j) in
  if (parent = -(1)) then (
  print_endline (((string_of_int (List.nth (keys) (node))) ^ " is the root of the binary search tree."));
  ) else (
  if is_left then (
  print_endline (((((string_of_int (List.nth (keys) (node))) ^ " is the left child of key ") ^ (string_of_int (parent))) ^ "."));
  ) else (
  print_endline (((((string_of_int (List.nth (keys) (node))) ^ " is the right child of key ") ^ (string_of_int (parent))) ^ "."));
  );
  );
  ignore (print_binary_search_tree (root) (keys) (Obj.repr (i)) (Obj.repr ((node - 1))) (Obj.repr (List.nth (keys) (node))) (true));
  ignore (print_binary_search_tree (root) (keys) (Obj.repr ((node + 1))) (Obj.repr (j)) (Obj.repr (List.nth (keys) (node))) (false));
    !__ret
  with Return -> !__ret)

and find_optimal_binary_search_tree original_nodes =
  let __ret = ref (Obj.magic 0) in
  (try
  let nodes = ref (sort_nodes (original_nodes)) in
  let n = List.length (!nodes) in
  let keys = ref (([] : (int) list)) in
  let freqs = ref (([] : (int) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let node = List.nth (!nodes) (!i) in
  keys := (List.append (!keys) [(Obj.magic ((Obj.obj (List.assoc (__str ("key")) (node) : Obj.t) : int)) : int)]);
  freqs := (List.append (!freqs) [(Obj.magic ((Obj.obj (List.assoc (__str ("freq")) (node) : Obj.t) : int)) : int)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let dp = ref (([] : (int list) list)) in
  let total = ref (([] : (int list) list)) in
  let root = ref (([] : (int list) list)) in
  i := 0;
  (try while (!i < n) do
    try
  let dp_row = ref (([] : (int) list)) in
  let total_row = ref (([] : (int) list)) in
  let root_row = ref (([] : (int) list)) in
  let j = ref (0) in
  (try while (!j < n) do
    try
  if (!i = !j) then (
  dp_row := (List.append (!dp_row) [(Obj.magic (List.nth (!freqs) (!i)) : int)]);
  total_row := (List.append (!total_row) [(Obj.magic (List.nth (!freqs) (!i)) : int)]);
  root_row := (List.append (!root_row) [(Obj.magic (!i) : int)]);
  ) else (
  dp_row := (List.append (!dp_row) [(Obj.magic (0) : int)]);
  total_row := (List.append (!total_row) [(Obj.magic (0) : int)]);
  root_row := (List.append (!root_row) [(Obj.magic (0) : int)]);
  );
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  dp := (List.append (!dp) [(Obj.magic (!dp_row) : int list)]);
  total := (List.append (!total) [(Obj.magic (!total_row) : int list)]);
  root := (List.append (!root) [(Obj.magic (!root_row) : int list)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let interval_length = ref (2) in
  let _inf = 2147483647 in
  (try while (!interval_length <= n) do
    try
  i := 0;
  (try while (!i < ((n - !interval_length) + 1)) do
    try
  let j = ((!i + !interval_length) - 1) in
  dp := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = j then _inf else __x) (List.nth (!dp) (!i))) else __x) (!dp));
  total := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = j then (List.nth (List.nth (!total) (!i)) ((j - 1)) + List.nth (!freqs) (j)) else __x) (List.nth (!total) (!i))) else __x) (!total));
  let r = ref (List.nth (List.nth (!root) (!i)) ((j - 1))) in
  (try while (!r <= List.nth (List.nth (!root) ((!i + 1))) (j)) do
    try
  let left = if (!r <> !i) then List.nth (List.nth (!dp) (!i)) ((!r - 1)) else 0 in
  let right = if (!r <> j) then List.nth (List.nth (!dp) ((!r + 1))) (j) else 0 in
  let cost = ((left + List.nth (List.nth (!total) (!i)) (j)) + right) in
  if (List.nth (List.nth (!dp) (!i)) (j) > cost) then (
  dp := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = j then cost else __x) (List.nth (!dp) (!i))) else __x) (!dp));
  root := (List.mapi (fun __i __x -> if __i = !i then (List.mapi (fun __i __x -> if __i = j then !r else __x) (List.nth (!root) (!i))) else __x) (!root));
  );
  r := (!r + 1);
    with Continue -> ()
  done with Break -> ());
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  interval_length := (!interval_length + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ("Binary search tree nodes:");
  i := 0;
  (try while (!i < n) do
    try
  ignore (print_node (List.nth (!nodes) (!i)));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  print_endline ((("\nThe cost of optimal BST for given tree nodes is " ^ (string_of_int (List.nth (List.nth (!dp) (0)) ((n - 1))))) ^ "."));
  ignore (print_binary_search_tree (!root) (!keys) (Obj.repr (0)) (Obj.repr ((n - 1))) (Obj.repr (-(1))) (false));
    !__ret
  with Return -> !__ret)

and main () =
  let __ret = ref (Obj.magic 0) in
  (try
  let nodes = ref ([[(__str ("key"), Obj.repr (12)); (__str ("freq"), Obj.repr (8))]; [(__str ("key"), Obj.repr (10)); (__str ("freq"), Obj.repr (34))]; [(__str ("key"), Obj.repr (20)); (__str ("freq"), Obj.repr (50))]; [(__str ("key"), Obj.repr (42)); (__str ("freq"), Obj.repr (3))]; [(__str ("key"), Obj.repr (25)); (__str ("freq"), Obj.repr (40))]; [(__str ("key"), Obj.repr (37)); (__str ("freq"), Obj.repr (30))]]) in
  ignore (find_optimal_binary_search_tree ((Obj.magic !nodes : (string * Obj.t) list list)));
    !__ret
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (main ());
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()
