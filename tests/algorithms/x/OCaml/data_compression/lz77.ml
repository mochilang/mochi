(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec token_to_string t =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic ((((((("(" ^ (string_of_int ((Obj.obj (List.assoc (__str ("offset")) (t) : Obj.t) : int)))) ^ ", ") ^ (string_of_int ((Obj.obj (List.assoc (__str ("length")) (t) : Obj.t) : int)))) ^ ", ") ^ (Obj.obj (List.assoc (__str ("indicator")) (t) : Obj.t) : string)) ^ ")")) : string); raise Return
  with Return -> !__ret)

and tokens_to_string ts =
  let __ret = ref "" in
  (try
  let res = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (ts)) do
    try
  res := (!res ^ token_to_string ((Obj.magic List.nth (ts) (!i) : (string * Obj.t) list)));
  if (!i < (List.length (ts) - 1)) then (
  res := (!res ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ((!res ^ "]")) : string); raise Return
  with Return -> !__ret)

and match_length_from_index text window text_index window_index =
  let __ret = ref 0 in
  (try
  let text_index = (Obj.magic text_index : int) in
  let window_index = (Obj.magic window_index : int) in
  if ((text_index >= String.length (text)) || (window_index >= String.length (window))) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  let tc = String.sub (text) (text_index) ((text_index + 1) - text_index) in
  let wc = String.sub (window) (window_index) ((window_index + 1) - window_index) in
  if (tc <> wc) then (
  __ret := (Obj.magic (0) : int); raise Return
  );
  __ret := (Obj.magic ((1 + match_length_from_index (text) ((window ^ tc)) (Obj.repr ((text_index + 1))) (Obj.repr ((window_index + 1))))) : int); raise Return
  with Return -> !__ret)

and find_encoding_token text search_buffer =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if (String.length (text) = 0) then (
  (failwith ("We need some text to work with."));
  );
  let length = ref (0) in
  let offset = ref (0) in
  if (String.length (search_buffer) = 0) then (
  __ret := (Obj.magic ([(__str ("offset"), Obj.repr (!offset)); (__str ("length"), Obj.repr (!length)); (__str ("indicator"), Obj.repr (String.sub (text) (0) (1 - 0)))]) : (string * Obj.t) list); raise Return
  );
  let i = ref (0) in
  (try while (!i < String.length (search_buffer)) do
    try
  let ch = String.sub (search_buffer) (!i) ((!i + 1) - !i) in
  let found_offset = (String.length (search_buffer) - !i) in
  if (ch = String.sub (text) (0) (1 - 0)) then (
  let found_length = match_length_from_index (text) (search_buffer) (Obj.repr (0)) (Obj.repr (!i)) in
  if (found_length >= !length) then (
  offset := found_offset;
  length := found_length;
  );
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic ([(__str ("offset"), Obj.repr (!offset)); (__str ("length"), Obj.repr (!length)); (__str ("indicator"), Obj.repr (String.sub (text) (!length) ((!length + 1) - !length)))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and lz77_compress text window_size lookahead =
  let __ret = ref ([] : ((string * Obj.t) list) list) in
  (try
  let window_size = (Obj.magic window_size : int) in
  let lookahead = (Obj.magic lookahead : int) in
  let search_buffer_size = (window_size - lookahead) in
  let output = ref (([] : ((string * Obj.t) list) list)) in
  let search_buffer = ref ("") in
  let remaining = ref (text) in
  (try while (String.length (!remaining) > 0) do
    try
  let token = find_encoding_token (!remaining) (!search_buffer) in
  let add_len = ((Obj.obj (List.assoc (__str ("length")) (token) : Obj.t) : int) + 1) in
  search_buffer := (!search_buffer ^ String.sub (!remaining) (0) (add_len - 0));
  if (String.length (!search_buffer) > search_buffer_size) then (
  search_buffer := String.sub (!search_buffer) ((String.length (!search_buffer) - search_buffer_size)) (String.length (!search_buffer) - (String.length (!search_buffer) - search_buffer_size));
  );
  remaining := String.sub (!remaining) (add_len) (String.length (!remaining) - add_len);
  output := (List.append (!output) [(Obj.magic (token) : (string * Obj.t) list)]);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!output) : (string * Obj.t) list list); raise Return
  with Return -> !__ret)

and lz77_decompress tokens =
  let __ret = ref "" in
  (try
  let output = ref ("") in
  (try List.iter (fun t ->
    try
  let i = ref (0) in
  (try while (!i < (Obj.obj (List.assoc (__str ("length")) (t) : Obj.t) : int)) do
    try
  output := (!output ^ String.sub (!output) ((String.length (!output) - (Obj.obj (List.assoc (__str ("offset")) (t) : Obj.t) : int))) (((String.length (!output) - (Obj.obj (List.assoc (__str ("offset")) (t) : Obj.t) : int)) + 1) - (String.length (!output) - (Obj.obj (List.assoc (__str ("offset")) (t) : Obj.t) : int))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  output := (!output ^ (Obj.obj (List.assoc (__str ("indicator")) (t) : Obj.t) : string));
    with Continue -> ()) (tokens) with Break -> ());
  __ret := (Obj.magic (!output) : string); raise Return
  with Return -> !__ret)


let c1 = ref (lz77_compress ("ababcbababaa") (Obj.repr (13)) (Obj.repr (6)))
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((tokens_to_string ((Obj.magic !c1 : (string * Obj.t) list list))));
  let c2 = ref (lz77_compress ("aacaacabcabaaac") (Obj.repr (13)) (Obj.repr (6))) in
  print_endline ((tokens_to_string ((Obj.magic !c2 : (string * Obj.t) list list))));
  let tokens_example = ref ([[(__str ("offset"), Obj.repr (0)); (__str ("length"), Obj.repr (0)); (__str ("indicator"), Obj.repr ("c"))]; [(__str ("offset"), Obj.repr (0)); (__str ("length"), Obj.repr (0)); (__str ("indicator"), Obj.repr ("a"))]; [(__str ("offset"), Obj.repr (0)); (__str ("length"), Obj.repr (0)); (__str ("indicator"), Obj.repr ("b"))]; [(__str ("offset"), Obj.repr (0)); (__str ("length"), Obj.repr (0)); (__str ("indicator"), Obj.repr ("r"))]; [(__str ("offset"), Obj.repr (3)); (__str ("length"), Obj.repr (1)); (__str ("indicator"), Obj.repr ("c"))]; [(__str ("offset"), Obj.repr (2)); (__str ("length"), Obj.repr (1)); (__str ("indicator"), Obj.repr ("d"))]; [(__str ("offset"), Obj.repr (7)); (__str ("length"), Obj.repr (4)); (__str ("indicator"), Obj.repr ("r"))]; [(__str ("offset"), Obj.repr (3)); (__str ("length"), Obj.repr (5)); (__str ("indicator"), Obj.repr ("d"))]]) in
  print_endline ((lz77_decompress ((Obj.magic !tokens_example : (string * Obj.t) list list))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()