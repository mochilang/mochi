(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec to_binary n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if (n = 0) then (
  __ret := (Obj.magic ("0") : string); raise Return
  );
  let num = ref (n) in
  let res = ref ("") in
  (try while (!num > 0) do
    try
  let bit = ((!num mod 2 + 2) mod 2) in
  res := ((string_of_int (bit)) ^ !res);
  num := (!num / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and contains_key_int m key =
  let __ret = ref false in
  (try
  (try List.iter (fun k ->
    try
  if (k = key) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
    with Continue -> ()) ((List.map fst m)) with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and lzw_compress bits =
  let __ret = ref "" in
  (try
  let dict = ref ([(__str ("0"), 0); (__str ("1"), 1)]) in
  let current = ref ("") in
  let result = ref ("") in
  let index = ref (2) in
  let i = ref (0) in
  (try while (!i < String.length (bits)) do
    try
  let ch = String.make 1 (String.get (bits) !i) in
  let candidate = (!current ^ ch) in
  if contains_key_int ((Obj.magic !dict : (string * int) list)) (candidate) then (
  current := candidate;
  ) else (
  result := (!result ^ to_binary (Obj.repr (List.assoc (__str (!current)) (!dict))));
  dict := ((__str (candidate), !index) :: List.remove_assoc (__str (candidate)) !dict);
  index := (!index + 1);
  current := ch;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  if (!current <> "") then (
  result := (!result ^ to_binary (Obj.repr (List.assoc (__str (!current)) (!dict))));
  );
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)


let data = "01001100100111"
let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline ((lzw_compress (data)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()