(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec run_length_encode text =
  let __ret = ref "" in
  (try
  if (String.length (text) = 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let encoded = ref ("") in
  let count = ref (1) in
  let i = ref (0) in
  (try while (!i < String.length (text)) do
    try
  if (((!i + 1) < String.length (text)) && (String.make 1 (String.get (text) !i) = String.make 1 (String.get (text) (!i + 1)))) then (
  count := (!count + 1);
  ) else (
  encoded := ((!encoded ^ String.make 1 (String.get (text) !i)) ^ (string_of_int (!count)));
  count := 1;
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!encoded) : string); raise Return
  with Return -> !__ret)

and run_length_decode encoded =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < String.length (encoded)) do
    try
  let ch = String.make 1 (String.get (encoded) !i) in
  i := (!i + 1);
  let num_str = ref ("") in
  (try while (((!i < String.length (encoded)) && (String.make 1 (String.get (encoded) !i) >= "0")) && (String.make 1 (String.get (encoded) !i) <= "9")) do
    try
  num_str := (!num_str ^ String.make 1 (String.get (encoded) !i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let count = int_of_string (!num_str) in
  let j = ref (0) in
  (try while (!j < count) do
    try
  res := (!res ^ ch);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)


let example1 = "AAAABBBCCDAA"
let () =
  let mem_start = _mem () in
  let start = _now () in
  let encoded1 = run_length_encode (example1) in
  print_endline (encoded1);
  print_endline ((run_length_decode (encoded1)));
  let example2 = "A" in
  let encoded2 = run_length_encode (example2) in
  print_endline (encoded2);
  print_endline ((run_length_decode (encoded2)));
  let example3 = "AAADDDDDDFFFCCCAAVVVV" in
  let encoded3 = run_length_encode (example3) in
  print_endline (encoded3);
  print_endline ((run_length_decode (encoded3)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()