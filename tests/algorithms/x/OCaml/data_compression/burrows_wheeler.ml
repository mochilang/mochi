(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec all_rotations s =
  let __ret = ref ([] : (string) list) in
  (try
  let n = String.length (s) in
  let rotations = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  let rotation = (String.sub (s) (!i) (n - !i) ^ String.sub (s) (0) (!i - 0)) in
  rotations := (List.append (!rotations) [(Obj.magic (rotation) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!rotations) : string list); raise Return
  with Return -> !__ret)

and sort_strings arr =
  let __ret = ref ([] : (string) list) in
  (try
  let n = List.length (!arr) in
  let i = ref (1) in
  (try while (!i < n) do
    try
  let key = ref (List.nth (!arr) (!i)) in
  let j = ref ((!i - 1)) in
  (try while ((!j >= 0) && (List.nth (!arr) (!j) > !key)) do
    try
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then List.nth (!arr) (!j) else __x) (!arr));
  j := (!j - 1);
    with Continue -> ()
  done with Break -> ());
  arr := (List.mapi (fun __i __x -> if __i = (!j + 1) then !key else __x) (!arr));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!arr) : string list); raise Return
  with Return -> !__ret)

and join_strings arr =
  let __ret = ref "" in
  (try
  let res = ref ("") in
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  res := (!res ^ List.nth (arr) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and bwt_transform s =
  let __ret = ref ([] : (string * Obj.t) list) in
  (try
  if (s = "") then (
  (failwith ("input string must not be empty"));
  );
  let rotations = ref (all_rotations (s)) in
  rotations := sort_strings (rotations);
  let last_col = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < List.length (!rotations)) do
    try
  let word = List.nth (!rotations) (!i) in
  last_col := (List.append (!last_col) [(Obj.magic (String.sub (word) ((String.length (word) - 1)) (String.length (word) - (String.length (word) - 1))) : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let bwt_string = join_strings (!last_col) in
  let idx = index_of (!rotations) (s) in
  __ret := (Obj.magic ([(__str ("bwt_string"), Obj.repr (bwt_string)); (__str ("idx_original_string"), Obj.repr (idx))]) : (string * Obj.t) list); raise Return
  with Return -> !__ret)

and index_of arr target =
  let __ret = ref 0 in
  (try
  let i = ref (0) in
  (try while (!i < List.length (arr)) do
    try
  if (List.nth (arr) (!i) = target) then (
  __ret := (Obj.magic (!i) : int); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (-(1)) : int); raise Return
  with Return -> !__ret)

and reverse_bwt bwt_string idx_original_string =
  let __ret = ref "" in
  (try
  let idx_original_string = (Obj.magic idx_original_string : int) in
  if (bwt_string = "") then (
  (failwith ("bwt string must not be empty"));
  );
  let n = String.length (bwt_string) in
  if ((idx_original_string < 0) || (idx_original_string >= n)) then (
  (failwith ("index out of range"));
  );
  let ordered_rotations = ref (([] : (string) list)) in
  let i = ref (0) in
  (try while (!i < n) do
    try
  ordered_rotations := (List.append (!ordered_rotations) [(Obj.magic ("") : string)]);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let iter = ref (0) in
  (try while (!iter < n) do
    try
  let j = ref (0) in
  (try while (!j < n) do
    try
  let ch = String.sub (bwt_string) (!j) ((!j + 1) - !j) in
  ordered_rotations := (List.mapi (fun __i __x -> if __i = !j then (ch ^ List.nth (!ordered_rotations) (!j)) else __x) (!ordered_rotations));
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  ordered_rotations := sort_strings (ordered_rotations);
  iter := (!iter + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (List.nth (!ordered_rotations) (idx_original_string)) : string); raise Return
  with Return -> !__ret)


let s = "^BANANA"
let () =
  let mem_start = _mem () in
  let start = _now () in
  let result = bwt_transform (s) in
  print_endline (__show (Obj.obj (List.assoc (__str ("bwt_string")) (result) : Obj.t) : string));
  print_endline (string_of_int (Obj.obj (List.assoc (__str ("idx_original_string")) (result) : Obj.t) : int));
  print_endline ((reverse_bwt ((Obj.obj (List.assoc (__str ("bwt_string")) (result) : Obj.t) : string)) (Obj.repr ((Obj.obj (List.assoc (__str ("idx_original_string")) (result) : Obj.t) : int)))));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()