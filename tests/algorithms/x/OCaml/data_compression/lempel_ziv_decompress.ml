(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 22:21 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec list_contains xs v =
  let __ret = ref false in
  (try
  let i = ref (0) in
  (try while (!i < List.length (xs)) do
    try
  if (List.nth (xs) (!i) = v) then (
  __ret := (Obj.magic (true) : bool); raise Return
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (false) : bool); raise Return
  with Return -> !__ret)

and is_power_of_two n =
  let __ret = ref false in
  (try
  let n = (Obj.magic n : int) in
  if (n < 1) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  let x = ref (n) in
  (try while (!x > 1) do
    try
  if (((!x mod 2 + 2) mod 2) <> 0) then (
  __ret := (Obj.magic (false) : bool); raise Return
  );
  x := (!x / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (true) : bool); raise Return
  with Return -> !__ret)

and bin_string n =
  let __ret = ref "" in
  (try
  let n = (Obj.magic n : int) in
  if (n = 0) then (
  __ret := (Obj.magic ("0") : string); raise Return
  );
  let res = ref ("") in
  let x = ref (n) in
  (try while (!x > 0) do
    try
  let bit = ((!x mod 2 + 2) mod 2) in
  res := ((string_of_int (bit)) ^ !res);
  x := (!x / 2);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and decompress_data data_bits =
  let __ret = ref "" in
  (try
  let lexicon = ref ([(__str ("0"), "0"); (__str ("1"), "1")]) in
  let keys = ref (["0"; "1"]) in
  let result = ref ("") in
  let curr_string = ref ("") in
  let index = ref (2) in
  let i = ref (0) in
  (try while (!i < String.length (data_bits)) do
    try
  curr_string := (!curr_string ^ String.sub (data_bits) (!i) ((!i + 1) - !i));
  if not (list_contains (!keys) (!curr_string)) then (
  i := (!i + 1);
  raise Continue;
  );
  let last_match_id = List.assoc (__str (!curr_string)) (!lexicon) in
  result := (!result ^ last_match_id);
  lexicon := ((__str (!curr_string), (last_match_id ^ "0")) :: List.remove_assoc (__str (!curr_string)) !lexicon);
  if is_power_of_two (Obj.repr (!index)) then (
  let new_lex = ref ([]) in
  let new_keys = ref (([] : (string) list)) in
  let j = ref (0) in
  (try while (!j < List.length (!keys)) do
    try
  let curr_key = List.nth (!keys) (!j) in
  new_lex := ((__str (("0" ^ curr_key)), List.assoc (__str (curr_key)) (!lexicon)) :: List.remove_assoc (__str (("0" ^ curr_key))) !new_lex);
  new_keys := (List.append (!new_keys) [(Obj.magic (("0" ^ curr_key)) : string)]);
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  lexicon := !new_lex;
  keys := !new_keys;
  );
  let new_key = bin_string (Obj.repr (!index)) in
  lexicon := ((__str (new_key), (last_match_id ^ "1")) :: List.remove_assoc (__str (new_key)) !lexicon);
  keys := (List.append (!keys) [(Obj.magic (new_key) : string)]);
  index := (!index + 1);
  curr_string := "";
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!result) : string); raise Return
  with Return -> !__ret)


let sample = "1011001"
let () =
  let mem_start = _mem () in
  let start = _now () in
  let decompressed = decompress_data (sample) in
  print_endline (decompressed);
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()