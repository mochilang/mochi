(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec row_string row =
  let __ret = ref "" in
  (try
  let s = ref ("[") in
  let i = ref (0) in
  (try while (!i < List.length (row)) do
    try
  s := (!s ^ (string_of_int (List.nth (row) (!i))));
  if (!i < (List.length (row) - 1)) then (
  s := (!s ^ ", ");
  );
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  s := (!s ^ "]");
  __ret := (Obj.magic (!s) : string); raise Return
  with Return -> !__ret)

and print_kmap kmap =
  let __ret = ref (Obj.magic 0) in
  (try
  let i = ref (0) in
  (try while (!i < List.length (kmap)) do
    try
  print_endline ((row_string (List.nth (kmap) (!i))));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
    !__ret
  with Return -> !__ret)

and join_terms terms =
  let __ret = ref "" in
  (try
  if (List.length (terms) = 0) then (
  __ret := (Obj.magic ("") : string); raise Return
  );
  let res = ref (List.nth (terms) (0)) in
  let i = ref (1) in
  (try while (!i < List.length (terms)) do
    try
  res := ((!res ^ " + ") ^ List.nth (terms) (!i));
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and simplify_kmap board =
  let __ret = ref "" in
  (try
  let terms = ref (([] : (string) list)) in
  let a = ref (0) in
  (try while (!a < List.length (board)) do
    try
  let row = ref (List.nth (board) (!a)) in
  let b = ref (0) in
  (try while (!b < List.length (!row)) do
    try
  let item = List.nth (!row) (!b) in
  if (item <> 0) then (
  let term = (if (!a <> 0) then "A" else "A'" ^ if (!b <> 0) then "B" else "B'") in
  terms := (List.append (!terms) [(Obj.magic (term) : string)]);
  );
  b := (!b + 1);
    with Continue -> ()
  done with Break -> ());
  a := (!a + 1);
    with Continue -> ()
  done with Break -> ());
  let expr = join_terms (!terms) in
  __ret := (Obj.magic (expr) : string); raise Return
  with Return -> !__ret)


let kmap = ref ([[0; 1]; [1; 1]])
let () =
  let mem_start = _mem () in
  let start = _now () in
  ignore (print_kmap (!kmap));
  print_endline ("Simplified Expression:");
  print_endline ((simplify_kmap (!kmap)));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()