(* Generated by Mochi transpiler v0.10.59 on 2025-08-06 21:17 +0700 *)


let rec __show v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __show_list (Obj.magic v)
    | 252 -> Printf.sprintf "'%s'" (String.escaped (magic v : string))
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __show_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __show l) ^ "]"
and __str v =
  let open Obj in
  let r = repr v in
  if is_int r then
    string_of_int (magic v : int)
  else
    match tag r with
    | 0 -> __str_list (Obj.magic v)
    | 252 -> (magic v : string)
    | 253 -> string_of_float (magic v)
    | _ -> "<value>"
and __str_list l =
  match l with
  | [] -> "[]"
  | _ -> "[" ^ String.concat " " (List.map __str l) ^ "]"


let nil = Obj.repr 0


let _now_seed = ref 0
let _now_seeded = ref false

let _now () =
  if not !_now_seeded then (
    match Sys.getenv_opt "MOCHI_NOW_SEED" with
    | Some s -> (try _now_seed := int_of_string s; _now_seeded := true with _ -> ())
    | None -> ()
  );
  if !_now_seeded then (
    _now_seed := (!(_now_seed) * 1664525 + 1013904223) mod 2147483647;
    !_now_seed
  ) else int_of_float (Sys.time () *. 1000000000.)


let _mem () =
  int_of_float (Gc.allocated_bytes ())

exception Break
exception Continue

exception Return

let rec nor_gate input_1 input_2 =
  let __ret = ref 0 in
  (try
  let input_1 = (Obj.magic input_1 : int) in
  let input_2 = (Obj.magic input_2 : int) in
  if ((input_1 = 0) && (input_2 = 0)) then (
  __ret := (Obj.magic (1) : int); raise Return
  );
  __ret := (Obj.magic (0) : int); raise Return
  with Return -> !__ret)

and center s width =
  let __ret = ref "" in
  (try
  let width = (Obj.magic width : int) in
  let total = ref ((width - String.length (s))) in
  if (!total <= 0) then (
  __ret := (Obj.magic (s) : string); raise Return
  );
  let left = ref ((!total / 2)) in
  let right = ref ((!total - !left)) in
  let res = ref (s) in
  let i = ref (0) in
  (try while (!i < !left) do
    try
  res := (" " ^ !res);
  i := (!i + 1);
    with Continue -> ()
  done with Break -> ());
  let j = ref (0) in
  (try while (!j < !right) do
    try
  res := (!res ^ " ");
  j := (!j + 1);
    with Continue -> ()
  done with Break -> ());
  __ret := (Obj.magic (!res) : string); raise Return
  with Return -> !__ret)

and make_table_row i j =
  let __ret = ref "" in
  (try
  let i = (Obj.magic i : int) in
  let j = (Obj.magic j : int) in
  let output = nor_gate (Obj.repr (i)) (Obj.repr (j)) in
  __ret := (Obj.magic ((((((("| " ^ center ((string_of_int (i))) (Obj.repr (8))) ^ " | ") ^ center ((string_of_int (j))) (Obj.repr (8))) ^ " | ") ^ center ((string_of_int (output))) (Obj.repr (8))) ^ " |")) : string); raise Return
  with Return -> !__ret)

and truth_table () =
  let __ret = ref "" in
  (try
  __ret := (Obj.magic ((((((((("Truth Table of NOR Gate:\n" ^ "| Input 1 | Input 2 | Output  |\n") ^ make_table_row (Obj.repr (0)) (Obj.repr (0))) ^ "\n") ^ make_table_row (Obj.repr (0)) (Obj.repr (1))) ^ "\n") ^ make_table_row (Obj.repr (1)) (Obj.repr (0))) ^ "\n") ^ make_table_row (Obj.repr (1)) (Obj.repr (1)))) : string); raise Return
  with Return -> !__ret)


let () =
  let mem_start = _mem () in
  let start = _now () in
  print_endline (string_of_int (nor_gate (Obj.repr (0)) (Obj.repr (0))));
  print_endline (string_of_int (nor_gate (Obj.repr (0)) (Obj.repr (1))));
  print_endline (string_of_int (nor_gate (Obj.repr (1)) (Obj.repr (0))));
  print_endline (string_of_int (nor_gate (Obj.repr (1)) (Obj.repr (1))));
  print_endline ((truth_table ()));
  let finish = _now () in
  let mem_end = _mem () in
  let dur = (finish - start) / 1000 in
  let mem_bytes = Stdlib.max 0 (mem_end - mem_start) in
  Printf.printf "{\n  \"duration_us\": %d,\n  \"memory_bytes\": %d,\n  \"name\": \"%s\"\n}\n" dur mem_bytes "main";
  ()