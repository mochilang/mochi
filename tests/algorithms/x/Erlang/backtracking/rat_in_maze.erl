#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, run_maze/6, solve_maze/5]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

run_maze(Maze, I, J, Dr, Dc, Sol) ->
    try
        Size = length(Maze),
        case (((I == Dr) andalso (J == Dc)) andalso ((case erlang:is_map((case erlang:is_map(Maze) of true -> maps:get(I, Maze, nil); _ -> lists:nth(I + 1, Maze) end)) of true -> maps:get(J, (case erlang:is_map(Maze) of true -> maps:get(I, Maze, nil); _ -> lists:nth(I + 1, Maze) end), nil); _ -> lists:nth(J + 1, (case erlang:is_map(Maze) of true -> maps:get(I, Maze, nil); _ -> lists:nth(I + 1, Maze) end)) end) == 0)) of
        true -> Tmp = (case erlang:is_map(Sol) of true -> maps:get(I, Sol, nil); _ -> lists:nth(I + 1, Sol) end),
            Tmp_2 = lists:sublist(Tmp, J) ++ [0] ++ lists:nthtail(J + 1, Tmp),
            Sol_2 = lists:sublist(Sol, I) ++ [Tmp_2] ++ lists:nthtail(I + 1, Sol),
            throw({return, true}),
            Sol_3 = Sol_2,
            Tmp_3 = Tmp_2;
        _ -> Sol_3 = Sol,
            Tmp_3 = nil
    end,
        Lower_flag = ((I >= 0) andalso (J >= 0)),
        Upper_flag = ((I < Size) andalso (J < Size)),
        case (Lower_flag andalso Upper_flag) of
        true -> Block_flag = (((case erlang:is_map((case erlang:is_map(Sol_3) of true -> maps:get(I, Sol_3, nil); _ -> lists:nth(I + 1, Sol_3) end)) of true -> maps:get(J, (case erlang:is_map(Sol_3) of true -> maps:get(I, Sol_3, nil); _ -> lists:nth(I + 1, Sol_3) end), nil); _ -> lists:nth(J + 1, (case erlang:is_map(Sol_3) of true -> maps:get(I, Sol_3, nil); _ -> lists:nth(I + 1, Sol_3) end)) end) == 1) andalso ((case erlang:is_map((case erlang:is_map(Maze) of true -> maps:get(I, Maze, nil); _ -> lists:nth(I + 1, Maze) end)) of true -> maps:get(J, (case erlang:is_map(Maze) of true -> maps:get(I, Maze, nil); _ -> lists:nth(I + 1, Maze) end), nil); _ -> lists:nth(J + 1, (case erlang:is_map(Maze) of true -> maps:get(I, Maze, nil); _ -> lists:nth(I + 1, Maze) end)) end) == 0)),
            case Block_flag of
        true -> Tmp_4 = (case erlang:is_map(Sol_3) of true -> maps:get(I, Sol_3, nil); _ -> lists:nth(I + 1, Sol_3) end),
            Tmp_5 = lists:sublist(Tmp_4, J) ++ [0] ++ lists:nthtail(J + 1, Tmp_4),
            Sol_4 = lists:sublist(Sol_3, I) ++ [Tmp_5] ++ lists:nthtail(I + 1, Sol_3),
            case (((run_maze(Maze, (I + 1), J, Dr, Dc, Sol_4) orelse run_maze(Maze, I, (J + 1), Dr, Dc, Sol_4)) orelse run_maze(Maze, (I - 1), J, Dr, Dc, Sol_4)) orelse run_maze(Maze, I, (J - 1), Dr, Dc, Sol_4)) of
        true -> throw({return, true});
        _ -> ok
    end,
            Tmp_6 = (case erlang:is_map(Sol_4) of true -> maps:get(I, Sol_4, nil); _ -> lists:nth(I + 1, Sol_4) end),
            Tmp_7 = lists:sublist(Tmp_6, J) ++ [1] ++ lists:nthtail(J + 1, Tmp_6),
            Sol_5 = lists:sublist(Sol_4, I) ++ [Tmp_7] ++ lists:nthtail(I + 1, Sol_4),
            throw({return, false}),
            Sol_6 = Sol_5,
            Tmp_8 = Tmp_7;
        _ -> Sol_6 = Sol_3,
            Tmp_8 = Tmp_3
    end,
            Block_flag_2 = Block_flag,
            Sol_7 = Sol_6,
            Tmp_9 = Tmp_8;
        _ -> Block_flag_2 = nil,
            Sol_7 = Sol_3,
            Tmp_9 = Tmp_3
    end,
        false
    catch {return, Ret} -> Ret end.

solve_maze(Maze_2, Sr, Sc, Dr_2, Dc_2) ->
    try
        Size_2 = length(Maze_2),
        case mochi_not(((((((((0 =< Sr) andalso (Sr < Size_2)) andalso (0 =< Sc)) andalso (Sc < Size_2)) andalso (0 =< Dr_2)) andalso (Dr_2 < Size_2)) andalso (0 =< Dc_2)) andalso (Dc_2 < Size_2))) of
        true -> erlang:error("Invalid source or destination coordinates");
        _ -> ok
    end,
        Sol_8 = [],
        I_2 = 0,
        Fun_2 = fun Fun_2_loop(Dc_2, Dr_2, I_2, Maze_2, Sc, Size_2, Sol_8, Sr) ->
    case (I_2 < Size_2) of
        true ->
            Row = [],
            J_2 = 0,
            Fun = fun Fun_loop(Dc_2, Dr_2, I_2, J_2, Maze_2, Row, Sc, Size_2, Sol_8, Sr) ->
    case (J_2 < Size_2) of
        true ->
            Row_2 = lists:append(Row, [1]),
            J_3 = (J_2 + 1),
            Fun_loop(Dc_2, Dr_2, I_2, J_3, Maze_2, Row_2, Sc, Size_2, Sol_8, Sr);
        _ -> {Dc_2, Dr_2, I_2, J_2, Maze_2, Row, Sc, Size_2, Sol_8, Sr}
    end
end,
{Dc_2, Dr_2, I_2, J_3, Maze_2, Row_2, Sc, Size_2, Sol_8, Sr} = Fun(Dc_2, Dr_2, I_2, J_2, Maze_2, Row, Sc, Size_2, Sol_8, Sr),
            Sol_9 = lists:append(Sol_8, [Row_2]),
            I_3 = (I_2 + 1),
            Fun_2_loop(Dc_2, Dr_2, I_3, Maze_2, Sc, Size_2, Sol_9, Sr);
        _ -> {Dc_2, Dr_2, I_2, Maze_2, Sc, Size_2, Sol_8, Sr}
    end
end,
{Dc_2, Dr_2, I_3, Maze_2, Sc, Size_2, Sol_9, Sr} = Fun_2(Dc_2, Dr_2, I_2, Maze_2, Sc, Size_2, Sol_8, Sr),
        Solved = run_maze(Maze_2, Sr, Sc, Dr_2, Dc_2, Sol_9),
        case Solved of
        true -> throw({return, Sol_9});
        _ -> erlang:error("No solution exists!")
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('maze', [[0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1], [0, 0, 1, 0, 0], [1, 0, 0, 1, 0]]),
    erlang:put('n', (length(erlang:get('maze')) - 1)),
    io:format("~ts~n", [mochi_str(solve_maze(erlang:get('maze'), 0, 0, erlang:get('n'), erlang:get('n')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
