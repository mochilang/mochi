#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, create_all_state/5, generate_all_combinations/2]).

% Generated by Mochi transpiler v0.10.59 (2401e91635) on 2025-08-06 15:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.

create_all_state(Increment, Total, Level, Current, Result) ->
    try
        case (Level == 0) of
        true -> throw({return, lists:append(Result, [Current])});
        _ -> ok
    end,
        I = Increment,
        Fun = fun Fun_loop(Current, I, Increment, Level, Result, Total) ->
    case (I =< ((Total - Level) + 1)) of
        true ->
            Next_current = lists:append(Current, [I]),
            Result_2 = create_all_state((I + 1), Total, (Level - 1), Next_current, Result),
            I_2 = (I + 1),
            Fun_loop(Current, I_2, Increment, Level, Result_2, Total);
        _ -> {Current, I, Increment, Level, Result, Total}
    end
end,
{Current, I_2, Increment, Level, Result_2, Total} = Fun(Current, I, Increment, Level, Result, Total),
        Result_2
    catch {return, Ret} -> Ret end.

generate_all_combinations(N, K) ->
    try
        case ((K < 0) orelse (N < 0)) of
        true -> throw({return, []});
        _ -> ok
    end,
        Result_3 = [],
        create_all_state(1, N, K, [], Result_3)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [generate_all_combinations(4, 2)]))]),
    io:format("~ts~n", [lists:flatten(io_lib:format("~p", [generate_all_combinations(3, 1)]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
