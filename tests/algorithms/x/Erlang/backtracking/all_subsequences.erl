#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, create_state_space_tree/3, generate_all_subsequences/1]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).

create_state_space_tree(Sequence, Current, Index) ->
    try
        case (Index == length(Sequence)) of
        true -> io:format("~ts~n", [mochi_repr(Current)]),
            throw({return, nil});
        _ -> ok
    end,
        create_state_space_tree(Sequence, Current, (Index + 1)),
        With_elem = lists:append(Current, [(case erlang:is_map(Sequence) of true -> maps:get(Index, Sequence, nil); _ -> lists:nth(Index + 1, Sequence) end)]),
        create_state_space_tree(Sequence, With_elem, (Index + 1)),
        nil
    catch {return, Ret} -> Ret end.

generate_all_subsequences(Sequence_2) ->
    try
        create_state_space_tree(Sequence_2, [], 0),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seq', [1, 2, 3]),
    generate_all_subsequences(erlang:get('seq')),
    erlang:put('seq2', ["A", "B", "C"]),
    generate_all_subsequences(erlang:get('seq2')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
