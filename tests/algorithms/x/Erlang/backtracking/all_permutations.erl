#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, repeat_bool/1, set_bool/3, create_state_space_tree/4, generate_all_permutations/1]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

repeat_bool(Times) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, Res, Times) ->
    case (I < Times) of
        true ->
            Res_2 = lists:append(Res, [false]),
            I_2 = (I + 1),
            Fun_loop(I_2, Res_2, Times);
        _ -> {I, Res, Times}
    end
end,
{I_2, Res_2, Times} = Fun(I, Res, Times),
        Res_2
    catch {return, Ret} -> Ret end.

set_bool(Xs, Idx, Value) ->
    try
        Res_3 = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Idx, Res_3, Value, Xs) ->
    case (I_3 < length(Xs)) of
        true ->
            case (I_3 == Idx) of
        true -> Res_4 = lists:append(Res_3, [Value]),
            Res_6 = Res_4;
        _ -> Res_5 = lists:append(Res_3, [(case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> lists:nth(I_3 + 1, Xs) end)]),
            Res_6 = Res_5
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Idx, Res_6, Value, Xs);
        _ -> {I_3, Idx, Res_3, Value, Xs}
    end
end,
{I_4, Idx, Res_6, Value, Xs} = Fun_2(I_3, Idx, Res_3, Value, Xs),
        Res_6
    catch {return, Ret} -> Ret end.

create_state_space_tree(Sequence, Current, Index, Used) ->
    try
        case (Index == length(Sequence)) of
        true -> io:format("~ts~n", [mochi_str(Current)]),
            throw({return, nil});
        _ -> ok
    end,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Current, I_5, Index, Sequence, Used) ->
    case (I_5 < length(Sequence)) of
        true ->
            case mochi_not((case erlang:is_map(Used) of true -> maps:get(I_5, Used, nil); _ -> lists:nth(I_5 + 1, Used) end)) of
        true -> Next_current = lists:append(Current, [(case erlang:is_map(Sequence) of true -> maps:get(I_5, Sequence, nil); _ -> lists:nth(I_5 + 1, Sequence) end)]),
            Next_used = set_bool(Used, I_5, true),
            create_state_space_tree(Sequence, Next_current, (Index + 1), Next_used),
            Next_current_2 = Next_current,
            Next_used_2 = Next_used;
        _ -> Next_current_2 = nil,
            Next_used_2 = nil
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Current, I_6, Index, Sequence, Used);
        _ -> {Current, I_5, Index, Sequence, Used}
    end
end,
{Current, I_6, Index, Sequence, Used} = Fun_3(Current, I_5, Index, Sequence, Used),
        nil
    catch {return, Ret} -> Ret end.

generate_all_permutations(Sequence_2) ->
    try
        Used_2 = repeat_bool(length(Sequence_2)),
        create_state_space_tree(Sequence_2, [], 0, Used_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('sequence', [3, 1, 2, 4]),
    generate_all_permutations(erlang:get('sequence')),
    erlang:put('sequence_2', ["A", "B", "C"]),
    generate_all_permutations(erlang:get('sequence_2')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
