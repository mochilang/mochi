#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, int_pow/2, backtrack/4, solve/2]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

int_pow(Base, Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = (Result * Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

backtrack(Target, Exp_2, Current, Current_sum) ->
    try
        case (Current_sum == Target) of
        true -> throw({return, 1});
        _ -> ok
    end,
        P = int_pow(Current, Exp_2),
        Count = 0,
        case ((Current_sum + P) =< Target) of
        true -> Count_2 = (Count + backtrack(Target, Exp_2, (Current + 1), (Current_sum + P))),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
        case (P < Target) of
        true -> Count_4 = (Count_3 + backtrack(Target, Exp_2, (Current + 1), Current_sum)),
            Count_5 = Count_4;
        _ -> Count_5 = Count_3
    end,
        Count_5
    catch {return, Ret} -> Ret end.

solve(Target_2, Exp_3) ->
    try
        case mochi_not(((((1 =< Target_2) andalso (Target_2 =< 1000)) andalso (2 =< Exp_3)) andalso (Exp_3 =< 10))) of
        true -> io:format("~ts~n", [mochi_repr("Invalid input")]),
            throw({return, 0});
        _ -> ok
    end,
        backtrack(Target_2, Exp_3, 1, 0)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(solve(13, 2))]),
    io:format("~ts~n", [mochi_repr(solve(10, 2))]),
    io:format("~ts~n", [mochi_repr(solve(10, 3))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
