#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, contains/2, remove_item/2, word_ladder/4, main/0]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

contains(Xs, X) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, X, Xs) ->
    case (I < length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> lists:nth(I + 1, Xs) end) == X) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, X, Xs);
        _ -> {I, X, Xs}
    end
end,
{I_2, X, Xs} = Fun(I, X, Xs),
        false
    catch {return, Ret} -> Ret end.

remove_item(Xs_2, X_2) ->
    try
        Res = [],
        Removed = false,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Removed, Res, X_2, Xs_2) ->
    case (I_3 < length(Xs_2)) of
        true ->
            case (mochi_not(Removed) andalso ((case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> lists:nth(I_3 + 1, Xs_2) end) == X_2)) of
        true -> Removed_2 = true,
            Removed_3 = Removed_2,
            Res_3 = Res;
        _ -> Res_2 = lists:append(Res, [(case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> lists:nth(I_3 + 1, Xs_2) end)]),
            Removed_3 = Removed,
            Res_3 = Res_2
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Removed_3, Res_3, X_2, Xs_2);
        _ -> {I_3, Removed, Res, X_2, Xs_2}
    end
end,
{I_4, Removed_3, Res_3, X_2, Xs_2} = Fun_2(I_3, Removed, Res, X_2, Xs_2),
        Res_3
    catch {return, Ret} -> Ret end.

word_ladder(Current, Path, Target, Words) ->
    try
        case (Current == Target) of
        true -> throw({return, Path});
        _ -> ok
    end,
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Current, I_5, Path, Target, Words) ->
    case (I_5 < length(Current)) of
        true ->
            J = 0,
            Fun_3 = fun Fun_3_loop(Current, I_5, J, Path, Target, Words) ->
    case (J < length("abcdefghijklmnopqrstuvwxyz")) of
        true ->
            C = string:substr("abcdefghijklmnopqrstuvwxyz", J + 1, ((J + 1) - J)),
            Transformed = ((string:substr(Current, 0 + 1, (I_5 - 0)) ++ C) ++ string:substr(Current, (I_5 + 1) + 1, (length(Current) - (I_5 + 1)))),
            case mochi_member(Transformed, Words) of
        true -> New_words = remove_item(Words, Transformed),
            New_path = lists:append(Path, [Transformed]),
            Result = word_ladder(Transformed, New_path, Target, New_words),
            case (length(Result) > 0) of
        true -> throw({return, Result});
        _ -> ok
    end,
            New_path_2 = New_path,
            New_words_2 = New_words,
            Result_2 = Result;
        _ -> New_path_2 = nil,
            New_words_2 = nil,
            Result_2 = nil
    end,
            J_2 = (J + 1),
            Fun_3_loop(Current, I_5, J_2, Path, Target, Words);
        _ -> {Current, I_5, J, Path, Target, Words}
    end
end,
{Current, I_5, J_2, Path, Target, Words} = Fun_3(Current, I_5, J, Path, Target, Words),
            I_6 = (I_5 + 1),
            Fun_4_loop(Current, I_6, Path, Target, Words);
        _ -> {Current, I_5, Path, Target, Words}
    end
end,
{Current, I_6, Path, Target, Words} = Fun_4(Current, I_5, Path, Target, Words),
        []
    catch {return, Ret} -> Ret end.

main() ->
    try
        W1 = ["hot", "dot", "dog", "lot", "log", "cog"],
        io:format("~ts~n", [mochi_str(word_ladder("hit", ["hit"], "cog", W1))]),
        W2 = ["hot", "dot", "dog", "lot", "log"],
        io:format("~ts~n", [mochi_str(word_ladder("hit", ["hit"], "cog", W2))]),
        W3 = ["load", "goad", "gold", "lead", "lord"],
        io:format("~ts~n", [mochi_str(word_ladder("lead", ["lead"], "gold", W3))]),
        W4 = ["came", "cage", "code", "cade", "gave"],
        io:format("~ts~n", [mochi_str(word_ladder("game", ["game"], "code", W4))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('alphabet', "abcdefghijklmnopqrstuvwxyz"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
