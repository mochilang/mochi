#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, get_value/3, contains_value/2, backtrack/6, match_word_pattern/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).

get_value(Keys, Values, Key) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, Key, Keys, Values) ->
    case (I < length(Keys)) of
        true ->
            case ((case erlang:is_map(Keys) of true -> maps:get(I, Keys, nil); _ -> lists:nth(I + 1, Keys) end) == Key) of
        true -> throw({return, (case erlang:is_map(Values) of true -> maps:get(I, Values, nil); _ -> lists:nth(I + 1, Values) end)});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Key, Keys, Values);
        _ -> {I, Key, Keys, Values}
    end
end,
{I_2, Key, Keys, Values} = Fun(I, Key, Keys, Values),
        nil
    catch {return, Ret} -> Ret end.

contains_value(Values_2, Value) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Value, Values_2) ->
    case (I_3 < length(Values_2)) of
        true ->
            case ((case erlang:is_map(Values_2) of true -> maps:get(I_3, Values_2, nil); _ -> lists:nth(I_3 + 1, Values_2) end) == Value) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Value, Values_2);
        _ -> {I_3, Value, Values_2}
    end
end,
{I_4, Value, Values_2} = Fun_2(I_3, Value, Values_2),
        false
    catch {return, Ret} -> Ret end.

backtrack(Pattern, Input_string, Pi, Si, Keys_2, Values_3) ->
    try
        case ((Pi == length(Pattern)) andalso (Si == length(Input_string))) of
        true -> throw({return, true});
        _ -> ok
    end,
        case ((Pi == length(Pattern)) orelse (Si == length(Input_string))) of
        true -> throw({return, false});
        _ -> ok
    end,
        Ch = string:substr(Pattern, Pi + 1, ((Pi + 1) - Pi)),
        Mapped = get_value(Keys_2, Values_3, Ch),
        case (Mapped /= nil) of
        true -> case (string:substr(Input_string, Si + 1, ((Si + length(Mapped)) - Si)) == Mapped) of
        true -> throw({return, backtrack(Pattern, Input_string, (Pi + 1), (Si + length(Mapped)), Keys_2, Values_3)});
        _ -> ok
    end,
            throw({return, false});
        _ -> ok
    end,
        End = (Si + 1),
        Fun_3 = fun Fun_3_loop(Ch, End, Input_string, Keys_2, Mapped, Pattern, Pi, Si, Values_3) ->
    case (End =< length(Input_string)) of
        true ->
            try
                Substr = string:substr(Input_string, Si + 1, (End - Si)),
                case contains_value(Values_3, Substr) of
        true -> End_2 = (End + 1),
            throw({continue, Ch, End_2, Input_string, Keys_2, Mapped, Pattern, Pi, Si, Values_3}),
            End_3 = End_2;
        _ -> End_3 = End
    end,
                New_keys = lists:append(Keys_2, [Ch]),
                New_values = lists:append(Values_3, [Substr]),
                case backtrack(Pattern, Input_string, (Pi + 1), End_3, New_keys, New_values) of
        true -> throw({return, true});
        _ -> ok
    end,
                End_4 = (End_3 + 1),
                Fun_3_loop(Ch, End_4, Input_string, Keys_2, Mapped, Pattern, Pi, Si, Values_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8);
                break -> {Ch, End, Input_string, Keys_2, Mapped, Pattern, Pi, Si, Values_3}
            end;
        _ -> {Ch, End, Input_string, Keys_2, Mapped, Pattern, Pi, Si, Values_3}
    end
end,
{Ch, End_4, Input_string, Keys_2, Mapped, Pattern, Pi, Si, Values_3} = Fun_3(Ch, End, Input_string, Keys_2, Mapped, Pattern, Pi, Si, Values_3),
        false
    catch {return, Ret} -> Ret end.

match_word_pattern(Pattern_2, Input_string_2) ->
    try
        Keys_3 = [],
        Values_4 = [],
        backtrack(Pattern_2, Input_string_2, 0, 0, Keys_3, Values_4)
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(match_word_pattern("aba", "GraphTreesGraph"))]),
        io:format("~ts~n", [mochi_repr(match_word_pattern("xyx", "PythonRubyPython"))]),
        io:format("~ts~n", [mochi_repr(match_word_pattern("GG", "PythonJavaPython"))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
