#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, contains/2, get_point_key/4, search_from/6, word_exists/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

contains(Xs, X) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, X, Xs) ->
    case (I < length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> lists:nth(I + 1, Xs) end) == X) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, X, Xs);
        _ -> {I, X, Xs}
    end
end,
{I_2, X, Xs} = Fun(I, X, Xs),
        false
    catch {return, Ret} -> Ret end.

get_point_key(Len_board, Len_board_column, Row, Column) ->
    try
        (((Len_board * Len_board_column) * Row) + Column)
    catch {return, Ret} -> Ret end.

search_from(Board, Word, Row_2, Column_2, Word_index, Visited) ->
    try
        case ((case erlang:is_map((case erlang:is_map(Board) of true -> maps:get(Row_2, Board, nil); _ -> lists:nth(Row_2 + 1, Board) end)) of true -> maps:get(Column_2, (case erlang:is_map(Board) of true -> maps:get(Row_2, Board, nil); _ -> lists:nth(Row_2 + 1, Board) end), nil); _ -> lists:nth(Column_2 + 1, (case erlang:is_map(Board) of true -> maps:get(Row_2, Board, nil); _ -> lists:nth(Row_2 + 1, Board) end)) end) /= string:substr(Word, Word_index + 1, ((Word_index + 1) - Word_index))) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (Word_index == (length(Word) - 1)) of
        true -> throw({return, true});
        _ -> ok
    end,
        Len_board_2 = length(Board),
        Len_board_column_2 = length((case erlang:is_map(Board) of true -> maps:get(0, Board, nil); _ -> lists:nth(0 + 1, Board) end)),
        Dir_i = [0, 0, -1, 1],
        Dir_j = [1, -1, 0, 0],
        K = 0,
        Fun_2 = fun Fun_2_loop(Board, Column_2, Dir_i, Dir_j, K, Len_board_2, Len_board_column_2, Row_2, Visited, Word, Word_index) ->
    case (K < 4) of
        true ->
            try
                Next_i = (Row_2 + (case erlang:is_map(Dir_i) of true -> maps:get(K, Dir_i, nil); _ -> lists:nth(K + 1, Dir_i) end)),
                Next_j = (Column_2 + (case erlang:is_map(Dir_j) of true -> maps:get(K, Dir_j, nil); _ -> lists:nth(K + 1, Dir_j) end)),
                case mochi_not(((((0 =< Next_i) andalso (Next_i < Len_board_2)) andalso (0 =< Next_j)) andalso (Next_j < Len_board_column_2))) of
        true -> K_2 = (K + 1),
            throw({continue, Board, Column_2, Dir_i, Dir_j, K_2, Len_board_2, Len_board_column_2, Row_2, Visited, Word, Word_index}),
            K_3 = K_2;
        _ -> K_3 = K
    end,
                Key = get_point_key(Len_board_2, Len_board_column_2, Next_i, Next_j),
                case mochi_member(Key, Visited) of
        true -> K_4 = (K_3 + 1),
            throw({continue, Board, Column_2, Dir_i, Dir_j, K_4, Len_board_2, Len_board_column_2, Row_2, Visited, Word, Word_index}),
            K_5 = K_4;
        _ -> K_5 = K_3
    end,
                New_visited = lists:append(Visited, [Key]),
                case search_from(Board, Word, Next_i, Next_j, (Word_index + 1), New_visited) of
        true -> throw({return, true});
        _ -> ok
    end,
                K_6 = (K_5 + 1),
                Fun_2_loop(Board, Column_2, Dir_i, Dir_j, K_6, Len_board_2, Len_board_column_2, Row_2, Visited, Word, Word_index)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10} -> Fun_2_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10);
                break -> {Board, Column_2, Dir_i, Dir_j, K, Len_board_2, Len_board_column_2, Row_2, Visited, Word, Word_index}
            end;
        _ -> {Board, Column_2, Dir_i, Dir_j, K, Len_board_2, Len_board_column_2, Row_2, Visited, Word, Word_index}
    end
end,
{Board, Column_2, Dir_i, Dir_j, K_6, Len_board_2, Len_board_column_2, Row_2, Visited, Word, Word_index} = Fun_2(Board, Column_2, Dir_i, Dir_j, K, Len_board_2, Len_board_column_2, Row_2, Visited, Word, Word_index),
        false
    catch {return, Ret} -> Ret end.

word_exists(Board_2, Word_2) ->
    try
        Len_board_3 = length(Board_2),
        Len_board_column_3 = length((case erlang:is_map(Board_2) of true -> maps:get(0, Board_2, nil); _ -> lists:nth(0 + 1, Board_2) end)),
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Board_2, I_3, Len_board_3, Len_board_column_3, Word_2) ->
    case (I_3 < Len_board_3) of
        true ->
            J = 0,
            Fun_3 = fun Fun_3_loop(Board_2, I_3, J, Len_board_3, Len_board_column_3, Word_2) ->
    case (J < Len_board_column_3) of
        true ->
            Key_2 = get_point_key(Len_board_3, Len_board_column_3, I_3, J),
            Visited_2 = lists:append([], [Key_2]),
            case search_from(Board_2, Word_2, I_3, J, 0, Visited_2) of
        true -> throw({return, true});
        _ -> ok
    end,
            J_2 = (J + 1),
            Fun_3_loop(Board_2, I_3, J_2, Len_board_3, Len_board_column_3, Word_2);
        _ -> {Board_2, I_3, J, Len_board_3, Len_board_column_3, Word_2}
    end
end,
{Board_2, I_3, J_2, Len_board_3, Len_board_column_3, Word_2} = Fun_3(Board_2, I_3, J, Len_board_3, Len_board_column_3, Word_2),
            I_4 = (I_3 + 1),
            Fun_4_loop(Board_2, I_4, Len_board_3, Len_board_column_3, Word_2);
        _ -> {Board_2, I_3, Len_board_3, Len_board_column_3, Word_2}
    end
end,
{Board_2, I_4, Len_board_3, Len_board_column_3, Word_2} = Fun_4(Board_2, I_3, Len_board_3, Len_board_column_3, Word_2),
        false
    catch {return, Ret} -> Ret end.

main() ->
    try
        Board_3 = [["A", "B", "C", "E"], ["S", "F", "C", "S"], ["A", "D", "E", "E"]],
        io:format("~ts~n", [mochi_repr(word_exists(Board_3, "ABCCED"))]),
        io:format("~ts~n", [mochi_repr(word_exists(Board_3, "SEE"))]),
        io:format("~ts~n", [mochi_repr(word_exists(Board_3, "ABCB"))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
