#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, minimax/5, tree_height/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).

minimax(Depth, Node_index, Is_max, Scores, Height) ->
    try
        case (Depth < 0) of
        true -> erlang:error("Depth cannot be less than 0");
        _ -> ok
    end,
        case (length(Scores) == 0) of
        true -> erlang:error("Scores cannot be empty");
        _ -> ok
    end,
        case (Depth == Height) of
        true -> throw({return, (case erlang:is_map(Scores) of true -> maps:get(Node_index, Scores, nil); _ -> lists:nth(Node_index + 1, Scores) end)});
        _ -> ok
    end,
        case Is_max of
        true -> Left = minimax((Depth + 1), (Node_index * 2), false, Scores, Height),
            Right = minimax((Depth + 1), ((Node_index * 2) + 1), false, Scores, Height),
            case (Left > Right) of
        true -> throw({return, Left});
        _ -> throw({return, Right})
    end,
            Left_2 = Left,
            Right_2 = Right;
        _ -> Left_2 = nil,
            Right_2 = nil
    end,
        Left_3 = minimax((Depth + 1), (Node_index * 2), true, Scores, Height),
        Right_3 = minimax((Depth + 1), ((Node_index * 2) + 1), true, Scores, Height),
        case (Left_3 < Right_3) of
        true -> throw({return, Left_3});
        _ -> throw({return, Right_3})
    end,
        nil
    catch {return, Ret} -> Ret end.

tree_height(N) ->
    try
        H = 0,
        V = N,
        Fun = fun Fun_loop(H, N, V) ->
    case (V > 1) of
        true ->
            V_2 = (V div 2),
            H_2 = (H + 1),
            Fun_loop(H_2, N, V_2);
        _ -> {H, N, V}
    end
end,
{H_2, N, V_2} = Fun(H, N, V),
        H_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Scores_2 = [90, 23, 6, 33, 21, 65, 123, 34423],
        Height_2 = tree_height(length(Scores_2)),
        io:format("~ts~n", [mochi_repr(("Optimal value : " ++ mochi_str(minimax(0, 0, true, Scores_2, Height_2))))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
