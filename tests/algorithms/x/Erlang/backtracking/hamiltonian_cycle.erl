#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, valid_connection/4, util_hamilton_cycle/3, hamilton_cycle/2]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).

valid_connection(Graph, Next_ver, Curr_ind, Path) ->
    try
        case ((case erlang:is_map((case erlang:is_map(Graph) of true -> maps:get((case erlang:is_map(Path) of true -> maps:get((Curr_ind - 1), Path, nil); _ -> lists:nth((Curr_ind - 1) + 1, Path) end), Graph, nil); _ -> lists:nth((case erlang:is_map(Path) of true -> maps:get((Curr_ind - 1), Path, nil); _ -> lists:nth((Curr_ind - 1) + 1, Path) end) + 1, Graph) end)) of true -> maps:get(Next_ver, (case erlang:is_map(Graph) of true -> maps:get((case erlang:is_map(Path) of true -> maps:get((Curr_ind - 1), Path, nil); _ -> lists:nth((Curr_ind - 1) + 1, Path) end), Graph, nil); _ -> lists:nth((case erlang:is_map(Path) of true -> maps:get((Curr_ind - 1), Path, nil); _ -> lists:nth((Curr_ind - 1) + 1, Path) end) + 1, Graph) end), nil); _ -> lists:nth(Next_ver + 1, (case erlang:is_map(Graph) of true -> maps:get((case erlang:is_map(Path) of true -> maps:get((Curr_ind - 1), Path, nil); _ -> lists:nth((Curr_ind - 1) + 1, Path) end), Graph, nil); _ -> lists:nth((case erlang:is_map(Path) of true -> maps:get((Curr_ind - 1), Path, nil); _ -> lists:nth((Curr_ind - 1) + 1, Path) end) + 1, Graph) end)) end) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        Fun = fun Fun_loop(List, Curr_ind, Graph, Next_ver, Path) ->
    case List of
        [] -> {Curr_ind, Graph, Next_ver, Path};
        [V|V_rest] ->
            case (V == Next_ver) of
        true -> throw({return, false});
        _ -> ok
    end,
            Fun_loop(V_rest, Curr_ind, Graph, Next_ver, Path);
        _ -> {Curr_ind, Graph, Next_ver, Path}
    end
end,
{Curr_ind, Graph, Next_ver, Path} = Fun(Path, Curr_ind, Graph, Next_ver, Path),
        true
    catch {return, Ret} -> Ret end.

util_hamilton_cycle(Graph_2, Path_2, Curr_ind_2) ->
    try
        case (Curr_ind_2 == length(Graph_2)) of
        true -> throw({return, ((case erlang:is_map((case erlang:is_map(Graph_2) of true -> maps:get((case erlang:is_map(Path_2) of true -> maps:get((Curr_ind_2 - 1), Path_2, nil); _ -> lists:nth((Curr_ind_2 - 1) + 1, Path_2) end), Graph_2, nil); _ -> lists:nth((case erlang:is_map(Path_2) of true -> maps:get((Curr_ind_2 - 1), Path_2, nil); _ -> lists:nth((Curr_ind_2 - 1) + 1, Path_2) end) + 1, Graph_2) end)) of true -> maps:get((case erlang:is_map(Path_2) of true -> maps:get(0, Path_2, nil); _ -> lists:nth(0 + 1, Path_2) end), (case erlang:is_map(Graph_2) of true -> maps:get((case erlang:is_map(Path_2) of true -> maps:get((Curr_ind_2 - 1), Path_2, nil); _ -> lists:nth((Curr_ind_2 - 1) + 1, Path_2) end), Graph_2, nil); _ -> lists:nth((case erlang:is_map(Path_2) of true -> maps:get((Curr_ind_2 - 1), Path_2, nil); _ -> lists:nth((Curr_ind_2 - 1) + 1, Path_2) end) + 1, Graph_2) end), nil); _ -> lists:nth((case erlang:is_map(Path_2) of true -> maps:get(0, Path_2, nil); _ -> lists:nth(0 + 1, Path_2) end) + 1, (case erlang:is_map(Graph_2) of true -> maps:get((case erlang:is_map(Path_2) of true -> maps:get((Curr_ind_2 - 1), Path_2, nil); _ -> lists:nth((Curr_ind_2 - 1) + 1, Path_2) end), Graph_2, nil); _ -> lists:nth((case erlang:is_map(Path_2) of true -> maps:get((Curr_ind_2 - 1), Path_2, nil); _ -> lists:nth((Curr_ind_2 - 1) + 1, Path_2) end) + 1, Graph_2) end)) end) == 1)});
        _ -> ok
    end,
        Next_ver_2 = 0,
        Fun_2 = fun Fun_2_loop(Curr_ind_2, Graph_2, Next_ver_2, Path_2) ->
    case (Next_ver_2 < length(Graph_2)) of
        true ->
            case valid_connection(Graph_2, Next_ver_2, Curr_ind_2, Path_2) of
        true -> Path_3 = lists:sublist(Path_2, Curr_ind_2) ++ [Next_ver_2] ++ lists:nthtail(Curr_ind_2 + 1, Path_2),
            case util_hamilton_cycle(Graph_2, Path_3, (Curr_ind_2 + 1)) of
        true -> throw({return, true});
        _ -> ok
    end,
            Path_4 = lists:sublist(Path_3, Curr_ind_2) ++ [-1] ++ lists:nthtail(Curr_ind_2 + 1, Path_3),
            Path_5 = Path_4;
        _ -> Path_5 = Path_2
    end,
            Next_ver_3 = (Next_ver_2 + 1),
            Fun_2_loop(Curr_ind_2, Graph_2, Next_ver_3, Path_5);
        _ -> {Curr_ind_2, Graph_2, Next_ver_2, Path_2}
    end
end,
{Curr_ind_2, Graph_2, Next_ver_3, Path_5} = Fun_2(Curr_ind_2, Graph_2, Next_ver_2, Path_2),
        false
    catch {return, Ret} -> Ret end.

hamilton_cycle(Graph_3, Start_index) ->
    try
        Path_6 = nil,
        I = 0,
        Fun_3 = fun Fun_3_loop(Graph_3, I, Path_6, Start_index) ->
    case (I < (length(Graph_3) + 1)) of
        true ->
            Path_7 = lists:sublist(Path_6, I) ++ [-1] ++ lists:nthtail(I + 1, Path_6),
            I_2 = (I + 1),
            Fun_3_loop(Graph_3, I_2, Path_7, Start_index);
        _ -> {Graph_3, I, Path_6, Start_index}
    end
end,
{Graph_3, I_2, Path_7, Start_index} = Fun_3(Graph_3, I, Path_6, Start_index),
        Path_8 = lists:sublist(Path_7, 0) ++ [Start_index] ++ lists:nthtail(0 + 1, Path_7),
        Last = (length(Path_8) - 1),
        Path_9 = lists:sublist(Path_8, Last) ++ [Start_index] ++ lists:nthtail(Last + 1, Path_8),
        case util_hamilton_cycle(Graph_3, Path_9, 1) of
        true -> throw({return, Path_9});
        _ -> ok
    end,
        []
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
