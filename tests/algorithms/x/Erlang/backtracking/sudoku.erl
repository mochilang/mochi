#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_safe/4, find_empty_location/1, sudoku/1, print_solution/1]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).

is_safe(Grid, Row, Column, N) ->
    try
        Fun = fun Fun_loop(List, Column, Grid, N, Row) ->
    case List of
        [] -> {Column, Grid, N, Row};
        [I|I_rest] ->
            case (((case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(Row, Grid, nil); _ -> lists:nth(Row + 1, Grid) end)) of true -> maps:get(I, (case erlang:is_map(Grid) of true -> maps:get(Row, Grid, nil); _ -> lists:nth(Row + 1, Grid) end), nil); _ -> lists:nth(I + 1, (case erlang:is_map(Grid) of true -> maps:get(Row, Grid, nil); _ -> lists:nth(Row + 1, Grid) end)) end) == N) orelse ((case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> lists:nth(I + 1, Grid) end)) of true -> maps:get(Column, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> lists:nth(I + 1, Grid) end), nil); _ -> lists:nth(Column + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> lists:nth(I + 1, Grid) end)) end) == N)) of
        true -> throw({return, false});
        _ -> ok
    end,
            Fun_loop(I_rest, Column, Grid, N, Row);
        _ -> {Column, Grid, N, Row}
    end
end,
{Column, Grid, N, Row} = Fun(lists:seq(0, (9) - 1), Column, Grid, N, Row),
        Fun_2 = fun Fun_2_loop(List, Column, Grid, N, Row) ->
    case List of
        [] -> {Column, Grid, N, Row};
        [I_2|I_2_rest] ->
            Fun_3 = fun Fun_3_loop(List, Column, Grid, I_2, N, Row) ->
    case List of
        [] -> {Column, Grid, I_2, N, Row};
        [J|J_rest] ->
            case ((case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(((Row - (Row rem 3)) + I_2), Grid, nil); _ -> lists:nth(((Row - (Row rem 3)) + I_2) + 1, Grid) end)) of true -> maps:get(((Column - (Column rem 3)) + J), (case erlang:is_map(Grid) of true -> maps:get(((Row - (Row rem 3)) + I_2), Grid, nil); _ -> lists:nth(((Row - (Row rem 3)) + I_2) + 1, Grid) end), nil); _ -> lists:nth(((Column - (Column rem 3)) + J) + 1, (case erlang:is_map(Grid) of true -> maps:get(((Row - (Row rem 3)) + I_2), Grid, nil); _ -> lists:nth(((Row - (Row rem 3)) + I_2) + 1, Grid) end)) end) == N) of
        true -> throw({return, false});
        _ -> ok
    end,
            Fun_3_loop(J_rest, Column, Grid, I_2, N, Row);
        _ -> {Column, Grid, I_2, N, Row}
    end
end,
{Column, Grid, I_2, N, Row} = Fun_3(lists:seq(0, (3) - 1), Column, Grid, I_2, N, Row),
            Fun_2_loop(I_2_rest, Column, Grid, N, Row);
        _ -> {Column, Grid, N, Row}
    end
end,
{Column, Grid, N, Row} = Fun_2(lists:seq(0, (3) - 1), Column, Grid, N, Row),
        true
    catch {return, Ret} -> Ret end.

find_empty_location(Grid_2) ->
    try
        Fun_4 = fun Fun_4_loop(List, Grid_2) ->
    case List of
        [] -> {Grid_2};
        [I_3|I_3_rest] ->
            Fun_5 = fun Fun_5_loop(List, Grid_2, I_3) ->
    case List of
        [] -> {Grid_2, I_3};
        [J_2|J_2_rest] ->
            case ((case erlang:is_map((case erlang:is_map(Grid_2) of true -> maps:get(I_3, Grid_2, nil); _ -> lists:nth(I_3 + 1, Grid_2) end)) of true -> maps:get(J_2, (case erlang:is_map(Grid_2) of true -> maps:get(I_3, Grid_2, nil); _ -> lists:nth(I_3 + 1, Grid_2) end), nil); _ -> lists:nth(J_2 + 1, (case erlang:is_map(Grid_2) of true -> maps:get(I_3, Grid_2, nil); _ -> lists:nth(I_3 + 1, Grid_2) end)) end) == 0) of
        true -> throw({return, [I_3, J_2]});
        _ -> ok
    end,
            Fun_5_loop(J_2_rest, Grid_2, I_3);
        _ -> {Grid_2, I_3}
    end
end,
{Grid_2, I_3} = Fun_5(lists:seq(0, (9) - 1), Grid_2, I_3),
            Fun_4_loop(I_3_rest, Grid_2);
        _ -> {Grid_2}
    end
end,
{Grid_2} = Fun_4(lists:seq(0, (9) - 1), Grid_2),
        []
    catch {return, Ret} -> Ret end.

sudoku(Grid_3) ->
    try
        Loc = find_empty_location(Grid_3),
        case (length(Loc) == 0) of
        true -> throw({return, true});
        _ -> ok
    end,
        Row_2 = (case erlang:is_map(Loc) of true -> maps:get(0, Loc, nil); _ -> lists:nth(0 + 1, Loc) end),
        Column_2 = (case erlang:is_map(Loc) of true -> maps:get(1, Loc, nil); _ -> lists:nth(1 + 1, Loc) end),
        Fun_6 = fun Fun_6_loop(List, Column_2, Grid_3, Loc, Row_2) ->
    case List of
        [] -> {Column_2, Grid_3, Loc, Row_2};
        [Digit|Digit_rest] ->
            case is_safe(Grid_3, Row_2, Column_2, Digit) of
        true -> Tmp = (case erlang:is_map(Grid_3) of true -> maps:get(Row_2, Grid_3, nil); _ -> lists:nth(Row_2 + 1, Grid_3) end),
            Tmp_2 = lists:sublist(Tmp, Column_2) ++ [Digit] ++ lists:nthtail(Column_2 + 1, Tmp),
            Grid_4 = lists:sublist(Grid_3, Row_2) ++ [Tmp_2] ++ lists:nthtail(Row_2 + 1, Grid_3),
            case sudoku(Grid_4) of
        true -> throw({return, true});
        _ -> ok
    end,
            Tmp_3 = (case erlang:is_map(Grid_4) of true -> maps:get(Row_2, Grid_4, nil); _ -> lists:nth(Row_2 + 1, Grid_4) end),
            Tmp_4 = lists:sublist(Tmp_3, Column_2) ++ [0] ++ lists:nthtail(Column_2 + 1, Tmp_3),
            Grid_5 = lists:sublist(Grid_4, Row_2) ++ [Tmp_4] ++ lists:nthtail(Row_2 + 1, Grid_4),
            Grid_6 = Grid_5,
            Tmp_5 = Tmp_4;
        _ -> Grid_6 = Grid_3,
            Tmp_5 = nil
    end,
            Fun_6_loop(Digit_rest, Column_2, Grid_6, Loc, Row_2);
        _ -> {Column_2, Grid_3, Loc, Row_2}
    end
end,
{Column_2, Grid_6, Loc, Row_2} = Fun_6(lists:seq(1, (10) - 1), Column_2, Grid_3, Loc, Row_2),
        false
    catch {return, Ret} -> Ret end.

print_solution(Grid_7) ->
    try
        Fun_7 = fun Fun_7_loop(List, Grid_7) ->
    case List of
        [] -> {Grid_7};
        [R|R_rest] ->
            Line = "",
            Fun_8 = fun Fun_8_loop(List, Grid_7, Line, R) ->
    case List of
        [] -> {Grid_7, Line, R};
        [C|C_rest] ->
            Line_2 = (Line ++ mochi_str((case erlang:is_map((case erlang:is_map(Grid_7) of true -> maps:get(R, Grid_7, nil); _ -> lists:nth(R + 1, Grid_7) end)) of true -> maps:get(C, (case erlang:is_map(Grid_7) of true -> maps:get(R, Grid_7, nil); _ -> lists:nth(R + 1, Grid_7) end), nil); _ -> lists:nth(C + 1, (case erlang:is_map(Grid_7) of true -> maps:get(R, Grid_7, nil); _ -> lists:nth(R + 1, Grid_7) end)) end))),
            case (C < (length((case erlang:is_map(Grid_7) of true -> maps:get(R, Grid_7, nil); _ -> lists:nth(R + 1, Grid_7) end)) - 1)) of
        true -> Line_3 = (Line_2 ++ " "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            Fun_8_loop(C_rest, Grid_7, Line_4, R);
        _ -> {Grid_7, Line, R}
    end
end,
{Grid_7, Line_4, R} = Fun_8(lists:seq(0, (length((case erlang:is_map(Grid_7) of true -> maps:get(R, Grid_7, nil); _ -> lists:nth(R + 1, Grid_7) end))) - 1), Grid_7, Line, R),
            io:format("~ts~n", [mochi_repr(Line_4)]),
            Fun_7_loop(R_rest, Grid_7);
        _ -> {Grid_7}
    end
end,
{Grid_7} = Fun_7(lists:seq(0, (length(Grid_7)) - 1), Grid_7),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('initial_grid', [[3, 0, 6, 5, 0, 8, 4, 0, 0], [5, 2, 0, 0, 0, 0, 0, 0, 0], [0, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]),
    erlang:put('no_solution', [[5, 0, 6, 5, 0, 8, 4, 0, 3], [5, 2, 0, 0, 0, 0, 0, 0, 2], [1, 8, 7, 0, 0, 0, 0, 3, 1], [0, 0, 3, 0, 1, 0, 0, 8, 0], [9, 0, 0, 8, 6, 3, 0, 0, 5], [0, 5, 0, 0, 9, 0, 6, 0, 0], [1, 3, 0, 0, 0, 0, 2, 5, 0], [0, 0, 0, 0, 0, 0, 0, 7, 4], [0, 0, 5, 2, 0, 6, 3, 0, 0]]),
    erlang:put('examples', [erlang:get('initial_grid'), erlang:get('no_solution')]),
    erlang:put('idx', 0),
    Fun_9 = fun Fun_9_loop() ->
    case (erlang:get('idx') < length(erlang:get('examples'))) of
        true ->
            io:format("~ts~n", [mochi_repr("\nExample grid:\n====================")]),
            print_solution((case erlang:is_map(erlang:get('examples')) of true -> maps:get(erlang:get('idx'), erlang:get('examples'), nil); _ -> lists:nth(erlang:get('idx') + 1, erlang:get('examples')) end)),
            io:format("~ts~n", [mochi_repr("\nExample grid solution:")]),
            case sudoku((case erlang:is_map(erlang:get('examples')) of true -> maps:get(erlang:get('idx'), erlang:get('examples'), nil); _ -> lists:nth(erlang:get('idx') + 1, erlang:get('examples')) end)) of
        true -> print_solution((case erlang:is_map(erlang:get('examples')) of true -> maps:get(erlang:get('idx'), erlang:get('examples'), nil); _ -> lists:nth(erlang:get('idx') + 1, erlang:get('examples')) end));
        _ -> io:format("~ts~n", [mochi_repr("Cannot find a solution.")])
    end,
            erlang:put('idx', (erlang:get('idx') + 1)),
            Fun_9_loop();
        _ -> {}
    end
end,
{} = Fun_9(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
