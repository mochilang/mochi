#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, create_board/1, is_safe/3, row_string/1, printboard/1, solve/2, n_queens/1]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).

create_board(N) ->
    try
        Board = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Board, I, N) ->
    case (I < N) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(Board, I, J, N, Row) ->
    case (J < N) of
        true ->
            Row_2 = lists:append(Row, [0]),
            J_2 = (J + 1),
            Fun_loop(Board, I, J_2, N, Row_2);
        _ -> {Board, I, J, N, Row}
    end
end,
{Board, I, J_2, N, Row_2} = Fun(Board, I, J, N, Row),
            Board_2 = lists:append(Board, [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Board_2, I_2, N);
        _ -> {Board, I, N}
    end
end,
{Board_2, I_2, N} = Fun_2(Board, I, N),
        Board_2
    catch {return, Ret} -> Ret end.

is_safe(Board_3, Row_3, Column) ->
    try
        N_2 = length(Board_3),
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Board_3, Column, I_3, N_2, Row_3) ->
    case (I_3 < Row_3) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(Board_3) of true -> maps:get(I_3, Board_3, nil); _ -> lists:nth(I_3 + 1, Board_3) end)) of true -> maps:get(Column, (case erlang:is_map(Board_3) of true -> maps:get(I_3, Board_3, nil); _ -> lists:nth(I_3 + 1, Board_3) end), nil); _ -> lists:nth(Column + 1, (case erlang:is_map(Board_3) of true -> maps:get(I_3, Board_3, nil); _ -> lists:nth(I_3 + 1, Board_3) end)) end) == 1) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(Board_3, Column, I_4, N_2, Row_3);
        _ -> {Board_3, Column, I_3, N_2, Row_3}
    end
end,
{Board_3, Column, I_4, N_2, Row_3} = Fun_3(Board_3, Column, I_3, N_2, Row_3),
        I_5 = (Row_3 - 1),
        J_3 = (Column - 1),
        Fun_4 = fun Fun_4_loop(Board_3, Column, I_5, J_3, N_2, Row_3) ->
    case ((I_5 >= 0) andalso (J_3 >= 0)) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(Board_3) of true -> maps:get(I_5, Board_3, nil); _ -> lists:nth(I_5 + 1, Board_3) end)) of true -> maps:get(J_3, (case erlang:is_map(Board_3) of true -> maps:get(I_5, Board_3, nil); _ -> lists:nth(I_5 + 1, Board_3) end), nil); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Board_3) of true -> maps:get(I_5, Board_3, nil); _ -> lists:nth(I_5 + 1, Board_3) end)) end) == 1) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_6 = (I_5 - 1),
            J_4 = (J_3 - 1),
            Fun_4_loop(Board_3, Column, I_6, J_4, N_2, Row_3);
        _ -> {Board_3, Column, I_5, J_3, N_2, Row_3}
    end
end,
{Board_3, Column, I_6, J_4, N_2, Row_3} = Fun_4(Board_3, Column, I_5, J_3, N_2, Row_3),
        I_7 = (Row_3 - 1),
        J_5 = (Column + 1),
        Fun_5 = fun Fun_5_loop(Board_3, Column, I_7, J_5, N_2, Row_3) ->
    case ((I_7 >= 0) andalso (J_5 < N_2)) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(Board_3) of true -> maps:get(I_7, Board_3, nil); _ -> lists:nth(I_7 + 1, Board_3) end)) of true -> maps:get(J_5, (case erlang:is_map(Board_3) of true -> maps:get(I_7, Board_3, nil); _ -> lists:nth(I_7 + 1, Board_3) end), nil); _ -> lists:nth(J_5 + 1, (case erlang:is_map(Board_3) of true -> maps:get(I_7, Board_3, nil); _ -> lists:nth(I_7 + 1, Board_3) end)) end) == 1) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_8 = (I_7 - 1),
            J_6 = (J_5 + 1),
            Fun_5_loop(Board_3, Column, I_8, J_6, N_2, Row_3);
        _ -> {Board_3, Column, I_7, J_5, N_2, Row_3}
    end
end,
{Board_3, Column, I_8, J_6, N_2, Row_3} = Fun_5(Board_3, Column, I_7, J_5, N_2, Row_3),
        true
    catch {return, Ret} -> Ret end.

row_string(Row_4) ->
    try
        S = "",
        J_7 = 0,
        Fun_6 = fun Fun_6_loop(J_7, Row_4, S) ->
    case (J_7 < length(Row_4)) of
        true ->
            case ((case erlang:is_map(Row_4) of true -> maps:get(J_7, Row_4, nil); _ -> lists:nth(J_7 + 1, Row_4) end) == 1) of
        true -> S_2 = (S ++ "Q "),
            S_4 = S_2;
        _ -> S_3 = (S ++ ". "),
            S_4 = S_3
    end,
            J_8 = (J_7 + 1),
            Fun_6_loop(J_8, Row_4, S_4);
        _ -> {J_7, Row_4, S}
    end
end,
{J_8, Row_4, S_4} = Fun_6(J_7, Row_4, S),
        S_4
    catch {return, Ret} -> Ret end.

printboard(Board_4) ->
    try
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(Board_4, I_9) ->
    case (I_9 < length(Board_4)) of
        true ->
            io:format("~ts~n", [mochi_repr(row_string((case erlang:is_map(Board_4) of true -> maps:get(I_9, Board_4, nil); _ -> lists:nth(I_9 + 1, Board_4) end)))]),
            I_10 = (I_9 + 1),
            Fun_7_loop(Board_4, I_10);
        _ -> {Board_4, I_9}
    end
end,
{Board_4, I_10} = Fun_7(Board_4, I_9),
        nil
    catch {return, Ret} -> Ret end.

solve(Board_5, Row_5) ->
    try
        case (Row_5 >= length(Board_5)) of
        true -> printboard(Board_5),
            io:format("~ts~n", [mochi_repr("")]),
            throw({return, 1});
        _ -> ok
    end,
        Count = 0,
        I_11 = 0,
        Fun_8 = fun Fun_8_loop(Board_5, Count, I_11, Row_5) ->
    case (I_11 < length(Board_5)) of
        true ->
            case is_safe(Board_5, Row_5, I_11) of
        true -> Tmp = (case erlang:is_map(Board_5) of true -> maps:get(Row_5, Board_5, nil); _ -> lists:nth(Row_5 + 1, Board_5) end),
            Tmp_2 = lists:sublist(Tmp, I_11) ++ [1] ++ lists:nthtail(I_11 + 1, Tmp),
            Board_6 = lists:sublist(Board_5, Row_5) ++ [Tmp_2] ++ lists:nthtail(Row_5 + 1, Board_5),
            Count_2 = (Count + solve(Board_6, (Row_5 + 1))),
            Tmp_3 = (case erlang:is_map(Board_6) of true -> maps:get(Row_5, Board_6, nil); _ -> lists:nth(Row_5 + 1, Board_6) end),
            Tmp_4 = lists:sublist(Tmp_3, I_11) ++ [0] ++ lists:nthtail(I_11 + 1, Tmp_3),
            Board_7 = lists:sublist(Board_6, Row_5) ++ [Tmp_4] ++ lists:nthtail(Row_5 + 1, Board_6),
            Board_8 = Board_7,
            Count_3 = Count_2,
            Tmp_5 = Tmp_4;
        _ -> Board_8 = Board_5,
            Count_3 = Count,
            Tmp_5 = nil
    end,
            I_12 = (I_11 + 1),
            Fun_8_loop(Board_8, Count_3, I_12, Row_5);
        _ -> {Board_5, Count, I_11, Row_5}
    end
end,
{Board_8, Count_3, I_12, Row_5} = Fun_8(Board_5, Count, I_11, Row_5),
        Count_3
    catch {return, Ret} -> Ret end.

n_queens(N_3) ->
    try
        Board_9 = create_board(N_3),
        Total = solve(Board_9, 0),
        io:format("~ts~n", [mochi_repr(("The total number of solutions are: " ++ mochi_str(Total)))]),
        Total
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    n_queens(4),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
