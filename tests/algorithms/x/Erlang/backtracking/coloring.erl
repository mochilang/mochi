#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, valid_coloring/3, util_color/4, color/2]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).

valid_coloring(Neighbours, Colored_vertices, Color) ->
    try
        I = 0,
        Fun = fun Fun_loop(Color, Colored_vertices, I, Neighbours) ->
    case (I < length(Neighbours)) of
        true ->
            case (((case erlang:is_map(Neighbours) of true -> maps:get(I, Neighbours, nil); _ -> lists:nth(I + 1, Neighbours) end) == 1) andalso ((case erlang:is_map(Colored_vertices) of true -> maps:get(I, Colored_vertices, nil); _ -> lists:nth(I + 1, Colored_vertices) end) == Color)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Color, Colored_vertices, I_2, Neighbours);
        _ -> {Color, Colored_vertices, I, Neighbours}
    end
end,
{Color, Colored_vertices, I_2, Neighbours} = Fun(Color, Colored_vertices, I, Neighbours),
        true
    catch {return, Ret} -> Ret end.

util_color(Graph, Max_colors, Colored_vertices_2, Index) ->
    try
        case (Index == length(Graph)) of
        true -> throw({return, true});
        _ -> ok
    end,
        C = 0,
        Fun_2 = fun Fun_2_loop(C, Colored_vertices_2, Graph, Index, Max_colors) ->
    case (C < Max_colors) of
        true ->
            case valid_coloring((case erlang:is_map(Graph) of true -> maps:get(Index, Graph, nil); _ -> lists:nth(Index + 1, Graph) end), Colored_vertices_2, C) of
        true -> Colored_vertices_3 = lists:sublist(Colored_vertices_2, Index) ++ [C] ++ lists:nthtail(Index + 1, Colored_vertices_2),
            case util_color(Graph, Max_colors, Colored_vertices_3, (Index + 1)) of
        true -> throw({return, true});
        _ -> ok
    end,
            Colored_vertices_4 = lists:sublist(Colored_vertices_3, Index) ++ [-1] ++ lists:nthtail(Index + 1, Colored_vertices_3),
            Colored_vertices_5 = Colored_vertices_4;
        _ -> Colored_vertices_5 = Colored_vertices_2
    end,
            C_2 = (C + 1),
            Fun_2_loop(C_2, Colored_vertices_5, Graph, Index, Max_colors);
        _ -> {C, Colored_vertices_2, Graph, Index, Max_colors}
    end
end,
{C_2, Colored_vertices_5, Graph, Index, Max_colors} = Fun_2(C, Colored_vertices_2, Graph, Index, Max_colors),
        false
    catch {return, Ret} -> Ret end.

color(Graph_2, Max_colors_2) ->
    try
        Colored_vertices_6 = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Colored_vertices_6, Graph_2, I_3, Max_colors_2) ->
    case (I_3 < length(Graph_2)) of
        true ->
            Colored_vertices_7 = lists:append(Colored_vertices_6, [-1]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Colored_vertices_7, Graph_2, I_4, Max_colors_2);
        _ -> {Colored_vertices_6, Graph_2, I_3, Max_colors_2}
    end
end,
{Colored_vertices_7, Graph_2, I_4, Max_colors_2} = Fun_3(Colored_vertices_6, Graph_2, I_3, Max_colors_2),
        case util_color(Graph_2, Max_colors_2, Colored_vertices_7, 0) of
        true -> throw({return, Colored_vertices_7});
        _ -> ok
    end,
        []
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('graph', [[0, 1, 0, 0, 0], [1, 0, 1, 0, 1], [0, 1, 0, 1, 0], [0, 1, 1, 0, 0], [0, 1, 0, 0, 0]]),
    io:format("~ts~n", [mochi_repr(color(erlang:get('graph'), 3))]),
    io:format("~ts~n", [mochi_repr("\n")]),
    io:format("~ts~n", [mochi_repr(length(color(erlang:get('graph'), 2)))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
