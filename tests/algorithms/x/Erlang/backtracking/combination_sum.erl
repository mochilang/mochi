#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, backtrack/5, combination_sum/2]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).

backtrack(Candidates, Start, Target, Path, Result) ->
    try
        case (Target == 0) of
        true -> throw({return, lists:append(Result, [Path])});
        _ -> ok
    end,
        I = Start,
        Fun = fun Fun_loop(Candidates, I, Path, Result, Start, Target) ->
    case (I < length(Candidates)) of
        true ->
            Value = (case erlang:is_map(Candidates) of true -> maps:get(I, Candidates, nil); _ -> lists:nth(I + 1, Candidates) end),
            case (Value =< Target) of
        true -> New_path = lists:append(Path, [Value]),
            Result_2 = backtrack(Candidates, I, (Target - Value), New_path, Result),
            New_path_2 = New_path,
            Result_3 = Result_2;
        _ -> New_path_2 = nil,
            Result_3 = Result
    end,
            I_2 = (I + 1),
            Fun_loop(Candidates, I_2, Path, Result_3, Start, Target);
        _ -> {Candidates, I, Path, Result, Start, Target}
    end
end,
{Candidates, I_2, Path, Result_3, Start, Target} = Fun(Candidates, I, Path, Result, Start, Target),
        Result_3
    catch {return, Ret} -> Ret end.

combination_sum(Candidates_2, Target_2) ->
    try
        Path_2 = [],
        Result_4 = [],
        backtrack(Candidates_2, 0, Target_2, Path_2, Result_4)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(combination_sum([2, 3, 5], 8))]),
    io:format("~ts~n", [mochi_str(combination_sum([2, 3, 6, 7], 7))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
