#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sum_list/1, create_state_space_tree/6, generate_sum_of_subsets_solutions/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).

sum_list(Nums) ->
    try
        S = 0,
        Fun = fun Fun_loop(List, Nums, S) ->
    case List of
        [] -> {Nums, S};
        [N|N_rest] ->
            S_2 = (S + N),
            Fun_loop(N_rest, Nums, S_2);
        _ -> {Nums, S}
    end
end,
{Nums, S_2} = Fun(Nums, Nums, S),
        S_2
    catch {return, Ret} -> Ret end.

create_state_space_tree(Nums_2, Max_sum, Num_index, Path, Curr_sum, Remaining_sum) ->
    try
        Result = [],
        case ((Curr_sum > Max_sum) orelse ((Curr_sum + Remaining_sum) < Max_sum)) of
        true -> throw({return, Result});
        _ -> ok
    end,
        case (Curr_sum == Max_sum) of
        true -> Result_2 = lists:append(Result, [Path]),
            throw({return, Result_2}),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
        Index = Num_index,
        Fun_3 = fun Fun_3_loop(Curr_sum, Index, Max_sum, Num_index, Nums_2, Path, Remaining_sum, Result_3) ->
    case (Index < length(Nums_2)) of
        true ->
            Value = (case erlang:is_map(Nums_2) of true -> maps:get(Index, Nums_2, nil); _ -> lists:nth(Index + 1, Nums_2) end),
            Subres = create_state_space_tree(Nums_2, Max_sum, (Index + 1), lists:append(Path, [Value]), (Curr_sum + Value), (Remaining_sum - Value)),
            J = 0,
            Fun_2 = fun Fun_2_loop(Curr_sum, Index, J, Max_sum, Num_index, Nums_2, Path, Remaining_sum, Result_3, Subres, Value) ->
    case (J < length(Subres)) of
        true ->
            Result_4 = lists:append(Result_3, [(case erlang:is_map(Subres) of true -> maps:get(J, Subres, nil); _ -> lists:nth(J + 1, Subres) end)]),
            J_2 = (J + 1),
            Fun_2_loop(Curr_sum, Index, J_2, Max_sum, Num_index, Nums_2, Path, Remaining_sum, Result_4, Subres, Value);
        _ -> {Curr_sum, Index, J, Max_sum, Num_index, Nums_2, Path, Remaining_sum, Result_3, Subres, Value}
    end
end,
{Curr_sum, Index, J_2, Max_sum, Num_index, Nums_2, Path, Remaining_sum, Result_4, Subres, Value} = Fun_2(Curr_sum, Index, J, Max_sum, Num_index, Nums_2, Path, Remaining_sum, Result_3, Subres, Value),
            Index_2 = (Index + 1),
            Fun_3_loop(Curr_sum, Index_2, Max_sum, Num_index, Nums_2, Path, Remaining_sum, Result_4);
        _ -> {Curr_sum, Index, Max_sum, Num_index, Nums_2, Path, Remaining_sum, Result_3}
    end
end,
{Curr_sum, Index_2, Max_sum, Num_index, Nums_2, Path, Remaining_sum, Result_4} = Fun_3(Curr_sum, Index, Max_sum, Num_index, Nums_2, Path, Remaining_sum, Result_3),
        Result_4
    catch {return, Ret} -> Ret end.

generate_sum_of_subsets_solutions(Nums_3, Max_sum_2) ->
    try
        Total = sum_list(Nums_3),
        create_state_space_tree(Nums_3, Max_sum_2, 0, [], 0, Total)
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~p~n", [generate_sum_of_subsets_solutions([3, 34, 4, 12, 5, 2], 9)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
