#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, get_valid_pos/2, is_complete/1, open_knight_tour_helper/3, open_knight_tour/1]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).

get_valid_pos(Position, N) ->
    try
        Y = (case erlang:is_map(Position) of true -> maps:get(0, Position, nil); _ -> lists:nth(0 + 1, Position) end),
        X = (case erlang:is_map(Position) of true -> maps:get(1, Position, nil); _ -> lists:nth(1 + 1, Position) end),
        Positions = [[(Y + 1), (X + 2)], [(Y - 1), (X + 2)], [(Y + 1), (X - 2)], [(Y - 1), (X - 2)], [(Y + 2), (X + 1)], [(Y + 2), (X - 1)], [(Y - 2), (X + 1)], [(Y - 2), (X - 1)]],
        Permissible = [],
        Fun = fun Fun_loop(List, N, Permissible, Position, Positions, X, Y) ->
    case List of
        [] -> {N, Permissible, Position, Positions, X, Y};
        [Idx|Idx_rest] ->
            Inner = (case erlang:is_map(Positions) of true -> maps:get(Idx, Positions, nil); _ -> lists:nth(Idx + 1, Positions) end),
            Y_test = (case erlang:is_map(Inner) of true -> maps:get(0, Inner, nil); _ -> lists:nth(0 + 1, Inner) end),
            X_test = (case erlang:is_map(Inner) of true -> maps:get(1, Inner, nil); _ -> lists:nth(1 + 1, Inner) end),
            case ((((Y_test >= 0) andalso (Y_test < N)) andalso (X_test >= 0)) andalso (X_test < N)) of
        true -> Permissible_2 = lists:append(Permissible, [Inner]),
            Permissible_3 = Permissible_2;
        _ -> Permissible_3 = Permissible
    end,
            Fun_loop(Idx_rest, N, Permissible_3, Position, Positions, X, Y);
        _ -> {N, Permissible, Position, Positions, X, Y}
    end
end,
{N, Permissible_3, Position, Positions, X, Y} = Fun(lists:seq(0, (length(Positions)) - 1), N, Permissible, Position, Positions, X, Y),
        Permissible_3
    catch {return, Ret} -> Ret end.

is_complete(Board) ->
    try
        Fun_2 = fun Fun_2_loop(List, Board) ->
    case List of
        [] -> {Board};
        [I|I_rest] ->
            Row = (case erlang:is_map(Board) of true -> maps:get(I, Board, nil); _ -> lists:nth(I + 1, Board) end),
            Fun_3 = fun Fun_3_loop(List, Board, I, Row) ->
    case List of
        [] -> {Board, I, Row};
        [J|J_rest] ->
            case ((case erlang:is_map(Row) of true -> maps:get(J, Row, nil); _ -> lists:nth(J + 1, Row) end) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            Fun_3_loop(J_rest, Board, I, Row);
        _ -> {Board, I, Row}
    end
end,
{Board, I, Row} = Fun_3(lists:seq(0, (length(Row)) - 1), Board, I, Row),
            Fun_2_loop(I_rest, Board);
        _ -> {Board}
    end
end,
{Board} = Fun_2(lists:seq(0, (length(Board)) - 1), Board),
        true
    catch {return, Ret} -> Ret end.

open_knight_tour_helper(Board_2, Pos, Curr) ->
    try
        case is_complete(Board_2) of
        true -> throw({return, true});
        _ -> ok
    end,
        Moves = get_valid_pos(Pos, length(Board_2)),
        Fun_4 = fun Fun_4_loop(List, Board_2, Curr, Moves, Pos) ->
    case List of
        [] -> {Board_2, Curr, Moves, Pos};
        [I_2|I_2_rest] ->
            Position_2 = (case erlang:is_map(Moves) of true -> maps:get(I_2, Moves, nil); _ -> lists:nth(I_2 + 1, Moves) end),
            Y_2 = (case erlang:is_map(Position_2) of true -> maps:get(0, Position_2, nil); _ -> lists:nth(0 + 1, Position_2) end),
            X_2 = (case erlang:is_map(Position_2) of true -> maps:get(1, Position_2, nil); _ -> lists:nth(1 + 1, Position_2) end),
            case ((case erlang:is_map((case erlang:is_map(Board_2) of true -> maps:get(Y_2, Board_2, nil); _ -> lists:nth(Y_2 + 1, Board_2) end)) of true -> maps:get(X_2, (case erlang:is_map(Board_2) of true -> maps:get(Y_2, Board_2, nil); _ -> lists:nth(Y_2 + 1, Board_2) end), nil); _ -> lists:nth(X_2 + 1, (case erlang:is_map(Board_2) of true -> maps:get(Y_2, Board_2, nil); _ -> lists:nth(Y_2 + 1, Board_2) end)) end) == 0) of
        true -> Tmp = (case erlang:is_map(Board_2) of true -> maps:get(Y_2, Board_2, nil); _ -> lists:nth(Y_2 + 1, Board_2) end),
            Tmp_2 = lists:sublist(Tmp, X_2) ++ [(Curr + 1)] ++ lists:nthtail(X_2 + 1, Tmp),
            Board_3 = lists:sublist(Board_2, Y_2) ++ [Tmp_2] ++ lists:nthtail(Y_2 + 1, Board_2),
            case open_knight_tour_helper(Board_3, Position_2, (Curr + 1)) of
        true -> throw({return, true});
        _ -> ok
    end,
            Tmp_3 = (case erlang:is_map(Board_3) of true -> maps:get(Y_2, Board_3, nil); _ -> lists:nth(Y_2 + 1, Board_3) end),
            Tmp_4 = lists:sublist(Tmp_3, X_2) ++ [0] ++ lists:nthtail(X_2 + 1, Tmp_3),
            Board_4 = lists:sublist(Board_3, Y_2) ++ [Tmp_4] ++ lists:nthtail(Y_2 + 1, Board_3),
            Board_5 = Board_4,
            Tmp_5 = Tmp_4;
        _ -> Board_5 = Board_2,
            Tmp_5 = nil
    end,
            Fun_4_loop(I_2_rest, Board_5, Curr, Moves, Pos);
        _ -> {Board_2, Curr, Moves, Pos}
    end
end,
{Board_5, Curr, Moves, Pos} = Fun_4(lists:seq(0, (length(Moves)) - 1), Board_2, Curr, Moves, Pos),
        false
    catch {return, Ret} -> Ret end.

open_knight_tour(N_2) ->
    try
        Board_6 = [],
        Fun_5 = fun Fun_5_loop(List, Board_6, N_2) ->
    case List of
        [] -> {Board_6, N_2};
        [I_3|I_3_rest] ->
            Row_2 = [],
            Fun_6 = fun Fun_6_loop(List, Board_6, I_3, N_2, Row_2) ->
    case List of
        [] -> {Board_6, I_3, N_2, Row_2};
        [J_2|J_2_rest] ->
            Row_3 = lists:append(Row_2, [0]),
            Fun_6_loop(J_2_rest, Board_6, I_3, N_2, Row_3);
        _ -> {Board_6, I_3, N_2, Row_2}
    end
end,
{Board_6, I_3, N_2, Row_3} = Fun_6(lists:seq(0, (N_2) - 1), Board_6, I_3, N_2, Row_2),
            Board_7 = lists:append(Board_6, [Row_3]),
            Fun_5_loop(I_3_rest, Board_7, N_2);
        _ -> {Board_6, N_2}
    end
end,
{Board_7, N_2} = Fun_5(lists:seq(0, (N_2) - 1), Board_6, N_2),
        Fun_7 = fun Fun_7_loop(List, Board_7, N_2) ->
    case List of
        [] -> {Board_7, N_2};
        [I_4|I_4_rest] ->
            Fun_8 = fun Fun_8_loop(List, Board_7, I_4, N_2) ->
    case List of
        [] -> {Board_7, I_4, N_2};
        [J_3|J_3_rest] ->
            Tmp_6 = (case erlang:is_map(Board_7) of true -> maps:get(I_4, Board_7, nil); _ -> lists:nth(I_4 + 1, Board_7) end),
            Tmp_7 = lists:sublist(Tmp_6, J_3) ++ [1] ++ lists:nthtail(J_3 + 1, Tmp_6),
            Board_8 = lists:sublist(Board_7, I_4) ++ [Tmp_7] ++ lists:nthtail(I_4 + 1, Board_7),
            case open_knight_tour_helper(Board_8, [I_4, J_3], 1) of
        true -> throw({return, Board_8});
        _ -> ok
    end,
            Tmp_8 = (case erlang:is_map(Board_8) of true -> maps:get(I_4, Board_8, nil); _ -> lists:nth(I_4 + 1, Board_8) end),
            Tmp_9 = lists:sublist(Tmp_8, J_3) ++ [0] ++ lists:nthtail(J_3 + 1, Tmp_8),
            Board_9 = lists:sublist(Board_8, I_4) ++ [Tmp_9] ++ lists:nthtail(I_4 + 1, Board_8),
            Fun_8_loop(J_3_rest, Board_9, I_4, N_2);
        _ -> {Board_7, I_4, N_2}
    end
end,
{Board_9, I_4, N_2} = Fun_8(lists:seq(0, (N_2) - 1), Board_7, I_4, N_2),
            Fun_7_loop(I_4_rest, Board_9, N_2);
        _ -> {Board_7, N_2}
    end
end,
{Board_9, N_2} = Fun_7(lists:seq(0, (N_2) - 1), Board_7, N_2),
        io:format("~ts~n", [mochi_repr(("Open Knight Tour cannot be performed on a board of size " ++ mochi_str(N_2)))]),
        Board_9
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('board', open_knight_tour(1)),
    io:format("~ts~n", [mochi_repr((case erlang:is_map((case erlang:is_map(erlang:get('board')) of true -> maps:get(0, erlang:get('board'), nil); _ -> lists:nth(0 + 1, erlang:get('board')) end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('board')) of true -> maps:get(0, erlang:get('board'), nil); _ -> lists:nth(0 + 1, erlang:get('board')) end), nil); _ -> lists:nth(0 + 1, (case erlang:is_map(erlang:get('board')) of true -> maps:get(0, erlang:get('board'), nil); _ -> lists:nth(0 + 1, erlang:get('board')) end)) end))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
