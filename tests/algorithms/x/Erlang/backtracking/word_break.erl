#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, contains/2, backtrack/3, word_break/2]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).

contains(Words, Target) ->
    try
        Fun = fun Fun_loop(List, Target, Words) ->
    case List of
        [] -> {Target, Words};
        [W|W_rest] ->
            case (W == Target) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_loop(W_rest, Target, Words);
        _ -> {Target, Words}
    end
end,
{Target, Words} = Fun(Words, Target, Words),
        false
    catch {return, Ret} -> Ret end.

backtrack(S, Word_dict, Start) ->
    try
        case (Start == length(S)) of
        true -> throw({return, true});
        _ -> ok
    end,
        End = (Start + 1),
        Fun_2 = fun Fun_2_loop(End, S, Start, Word_dict) ->
    case (End =< length(S)) of
        true ->
            Substr = string:substr(S, Start + 1, (End - Start)),
            case (mochi_member(Substr, Word_dict) andalso backtrack(S, Word_dict, End)) of
        true -> throw({return, true});
        _ -> ok
    end,
            End_2 = (End + 1),
            Fun_2_loop(End_2, S, Start, Word_dict);
        _ -> {End, S, Start, Word_dict}
    end
end,
{End_2, S, Start, Word_dict} = Fun_2(End, S, Start, Word_dict),
        false
    catch {return, Ret} -> Ret end.

word_break(S_2, Word_dict_2) ->
    try
        backtrack(S_2, Word_dict_2, 0)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(word_break("leetcode", ["leet", "code"]))]),
    io:format("~ts~n", [mochi_str(word_break("applepenapple", ["apple", "pen"]))]),
    io:format("~ts~n", [mochi_str(word_break("catsandog", ["cats", "dog", "sand", "and", "cat"]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
