#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, mod/2, sin/1, cos/1, rotate/2, iteration_step/1, iterate/2, vec_to_string/1, vec_list_to_string/1]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mod(X, M) ->
    try
        (X - mochi_safe_mul(float(mochi_to_int(mochi_safe_div(X, M))), M))
    catch {return, Ret} -> Ret end.

sin(X_2) ->
    try
        Y = (mod((X_2 + 3.141592653589793), 6.283185307179586) - 3.141592653589793),
        Y2 = mochi_safe_mul(Y, Y),
        Y3 = mochi_safe_mul(Y2, Y),
        Y5 = mochi_safe_mul(Y3, Y2),
        Y7 = mochi_safe_mul(Y5, Y2),
        (((Y - mochi_safe_div(Y3, 6)) + mochi_safe_div(Y5, 120)) - mochi_safe_div(Y7, 5040))
    catch {return, Ret} -> Ret end.

cos(X_3) ->
    try
        Y_2 = (mod((X_3 + 3.141592653589793), 6.283185307179586) - 3.141592653589793),
        Y2_2 = mochi_safe_mul(Y_2, Y_2),
        Y4 = mochi_safe_mul(Y2_2, Y2_2),
        Y6 = mochi_safe_mul(Y4, Y2_2),
        (((1 - mochi_safe_div(Y2_2, 2)) + mochi_safe_div(Y4, 24)) - mochi_safe_div(Y6, 720))
    catch {return, Ret} -> Ret end.

rotate(V, Angle_deg) ->
    try
        Theta = mochi_safe_div(mochi_safe_mul(Angle_deg, 3.141592653589793), 180),
        C = cos(Theta),
        S = sin(Theta),
        #{"x" => (mochi_safe_mul(maps:get("x", V, nil), C) - mochi_safe_mul(maps:get("y", V, nil), S)), "y" => (mochi_safe_mul(maps:get("x", V, nil), S) + mochi_safe_mul(maps:get("y", V, nil), C))}
    catch {return, Ret} -> Ret end.

iteration_step(Vectors) ->
    try
        New_vectors = [],
        I = 0,
        Fun = fun Fun_loop(I, New_vectors, Vectors) ->
    case (I < (erlang:length(Vectors) - 1)) of
        true ->
            Start = (case erlang:is_map(Vectors) of true -> maps:get(I, Vectors, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Vectors) + I + 1, Vectors); _ -> lists:nth(I + 1, Vectors) end end),
            End = (case erlang:is_map(Vectors) of true -> maps:get((I + 1), Vectors, nil); _ -> case (I + 1) < 0 of true -> lists:nth(erlang:length(Vectors) + (I + 1) + 1, Vectors); _ -> lists:nth((I + 1) + 1, Vectors) end end),
            New_vectors_2 = lists:append((case New_vectors of nil -> []; _ -> New_vectors end), [Start]),
            Dx = (maps:get("x", End, nil) - maps:get("x", Start, nil)),
            Dy = (maps:get("y", End, nil) - maps:get("y", Start, nil)),
            One_third = #{"x" => (maps:get("x", Start, nil) + mochi_safe_div(Dx, 3)), "y" => (maps:get("y", Start, nil) + mochi_safe_div(Dy, 3))},
            Mid = rotate(#{"x" => mochi_safe_div(Dx, 3), "y" => mochi_safe_div(Dy, 3)}, 60),
            Peak = #{"x" => (maps:get("x", One_third, nil) + maps:get("x", Mid, nil)), "y" => (maps:get("y", One_third, nil) + maps:get("y", Mid, nil))},
            Two_third = #{"x" => (maps:get("x", Start, nil) + mochi_safe_div(mochi_safe_mul(Dx, 2), 3)), "y" => (maps:get("y", Start, nil) + mochi_safe_div(mochi_safe_mul(Dy, 2), 3))},
            New_vectors_3 = lists:append((case New_vectors_2 of nil -> []; _ -> New_vectors_2 end), [One_third]),
            New_vectors_4 = lists:append((case New_vectors_3 of nil -> []; _ -> New_vectors_3 end), [Peak]),
            New_vectors_5 = lists:append((case New_vectors_4 of nil -> []; _ -> New_vectors_4 end), [Two_third]),
            I_2 = (I + 1),
            Fun_loop(I_2, New_vectors_5, Vectors);
        _ -> {I, New_vectors, Vectors}
    end
end,
{I_2, New_vectors_5, Vectors} = Fun(I, New_vectors, Vectors),
        New_vectors_6 = lists:append((case New_vectors_5 of nil -> []; _ -> New_vectors_5 end), [(case erlang:is_map(Vectors) of true -> maps:get((erlang:length(Vectors) - 1), Vectors, nil); _ -> case (erlang:length(Vectors) - 1) < 0 of true -> lists:nth(erlang:length(Vectors) + (erlang:length(Vectors) - 1) + 1, Vectors); _ -> lists:nth((erlang:length(Vectors) - 1) + 1, Vectors) end end)]),
        New_vectors_6
    catch {return, Ret} -> Ret end.

iterate(Initial, Steps) ->
    try
        Vectors_2 = Initial,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Initial, Steps, Vectors_2) ->
    case (I_3 < Steps) of
        true ->
            Vectors_3 = iteration_step(Vectors_2),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Initial, Steps, Vectors_3);
        _ -> {I_3, Initial, Steps, Vectors_2}
    end
end,
{I_4, Initial, Steps, Vectors_3} = Fun_2(I_3, Initial, Steps, Vectors_2),
        Vectors_3
    catch {return, Ret} -> Ret end.

vec_to_string(V_2) ->
    try
        (((("(" ++ mochi_str(maps:get("x", V_2, nil))) ++ ", ") ++ mochi_str(maps:get("y", V_2, nil))) ++ ")")
    catch {return, Ret} -> Ret end.

vec_list_to_string(Lst) ->
    try
        Res = "[",
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Lst, Res) ->
    case (I_5 < erlang:length(Lst)) of
        true ->
            Res_2 = (Res ++ vec_to_string((case erlang:is_map(Lst) of true -> maps:get(I_5, Lst, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Lst) + I_5 + 1, Lst); _ -> lists:nth(I_5 + 1, Lst) end end))),
            case (I_5 < (erlang:length(Lst) - 1)) of
        true -> Res_3 = (Res_2 ++ ", "),
            Res_4 = Res_3;
        _ -> Res_4 = Res_2
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Lst, Res_4);
        _ -> {I_5, Lst, Res}
    end
end,
{I_6, Lst, Res_4} = Fun_3(I_5, Lst, Res),
        Res_5 = (Res_4 ++ "]"),
        Res_5
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('TWO_PI', 6.283185307179586),
    erlang:put('VECTOR_1', #{"x" => 0, "y" => 0}),
    erlang:put('VECTOR_2', #{"x" => 0.5, "y" => 0.8660254}),
    erlang:put('VECTOR_3', #{"x" => 1, "y" => 0}),
    erlang:put('INITIAL_VECTORS', [erlang:get('VECTOR_1'), erlang:get('VECTOR_2'), erlang:get('VECTOR_3'), erlang:get('VECTOR_1')]),
    erlang:put('example', iterate([erlang:get('VECTOR_1'), erlang:get('VECTOR_3')], 1)),
    io:format("~ts~n", [mochi_repr(vec_list_to_string(erlang:get('example')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
