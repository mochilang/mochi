#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, round_int/1, hsv_to_rgb/3, get_distance/3, get_black_and_white_rgb/1, get_color_coded_rgb/1, get_image/7, rgb_to_string/1]).

% Generated by Mochi transpiler v0.10.64 (25cf3a3e28) on 2025-08-13 12:32 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

round_int(X) ->
    try
        mochi_to_int((X + 0.5))
    catch {return, RetCatch} -> RetCatch end.

hsv_to_rgb(H, S, V) ->
    try
        I = mochi_to_int(mochi_safe_mul(H, 6.0)),
        F = (mochi_safe_mul(H, 6.0) - float(I)),
        P = mochi_safe_mul(V, (1.0 - S)),
        Q = mochi_safe_mul(V, (1.0 - mochi_safe_mul(F, S))),
        T = mochi_safe_mul(V, (1.0 - mochi_safe_mul((1.0 - F), S))),
        Mod = mochi_mod(I, 6),
        R = 0.0,
        G = 0.0,
        B = 0.0,
        case (Mod == 0) of
        true -> R_2 = V,
            G_2 = T,
            B_2 = P,
            B_12 = B_2,
            G_12 = G_2,
            R_12 = R_2;
        _ -> case (Mod == 1) of
        true -> R_3 = Q,
            G_3 = V,
            B_3 = P,
            B_11 = B_3,
            G_11 = G_3,
            R_11 = R_3;
        _ -> case (Mod == 2) of
        true -> R_4 = P,
            G_4 = V,
            B_4 = T,
            B_10 = B_4,
            G_10 = G_4,
            R_10 = R_4;
        _ -> case (Mod == 3) of
        true -> R_5 = P,
            G_5 = Q,
            B_5 = V,
            B_9 = B_5,
            G_9 = G_5,
            R_9 = R_5;
        _ -> case (Mod == 4) of
        true -> R_6 = T,
            G_6 = P,
            B_6 = V,
            B_8 = B_6,
            G_8 = G_6,
            R_8 = R_6;
        _ -> R_7 = V,
            G_7 = P,
            B_7 = Q,
            B_8 = B_7,
            G_8 = G_7,
            R_8 = R_7
    end,
            B_9 = B_8,
            G_9 = G_8,
            R_9 = R_8
    end,
            B_10 = B_9,
            G_10 = G_9,
            R_10 = R_9
    end,
            B_11 = B_10,
            G_11 = G_10,
            R_11 = R_10
    end,
            B_12 = B_11,
            G_12 = G_11,
            R_12 = R_11
    end,
        #{"r" => round_int(mochi_safe_mul(R_12, 255.0)), "g" => round_int(mochi_safe_mul(G_12, 255.0)), "b" => round_int(mochi_safe_mul(B_12, 255.0))}
    catch {return, RetCatch} -> RetCatch end.

get_distance(X_2, Y, Max_step) ->
    try
        A = X_2,
        B_13 = Y,
        Step = -1,
        Fun = fun Fun_loop(A, B_13, Max_step, Step, X_2, Y) ->
    case (Step < (Max_step - 1)) of
        true ->
            try
                Step_2 = (Step + 1),
                A_new = ((mochi_safe_mul(A, A) - mochi_safe_mul(B_13, B_13)) + X_2),
                B_14 = (mochi_safe_mul(mochi_safe_mul(2.0, A), B_13) + Y),
                A_2 = A_new,
                case ((mochi_safe_mul(A_2, A_2) + mochi_safe_mul(B_14, B_14)) > 4.0) of
        true -> throw({break, A_2, B_14, Max_step, Step_2, X_2, Y});
        _ -> ok
    end,
                Fun_loop(A_2, B_14, Max_step, Step_2, X_2, Y)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_loop(C0, C1, C2, C3, C4, C5);
                {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5}
            end;
        _ -> {A, B_13, Max_step, Step, X_2, Y}
    end
end,
{A_2, B_14, Max_step, Step_2, X_2, Y} = Fun(A, B_13, Max_step, Step, X_2, Y),
        mochi_safe_div(float(Step_2), float((Max_step - 1)))
    catch {return, RetCatch} -> RetCatch end.

get_black_and_white_rgb(Distance) ->
    try
        case (Distance == 1.0) of
        true -> throw({return, #{"r" => 0, "g" => 0, "b" => 0}});
        _ -> throw({return, #{"r" => 255, "g" => 255, "b" => 255}})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

get_color_coded_rgb(Distance_2) ->
    try
        case (Distance_2 == 1.0) of
        true -> throw({return, #{"r" => 0, "g" => 0, "b" => 0}});
        _ -> throw({return, hsv_to_rgb(Distance_2, 1.0, 1.0)})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

get_image(Image_width, Image_height, Figure_center_x, Figure_center_y, Figure_width, Max_step_2, Use_distance_color_coding) ->
    try
        Img = [],
        Figure_height = mochi_safe_mul(mochi_safe_div(Figure_width, float(Image_width)), float(Image_height)),
        Image_y = 0,
        Fun_3 = fun Fun_3_loop(Figure_center_x, Figure_center_y, Figure_height, Figure_width, Image_height, Image_width, Image_y, Img, Max_step_2, Use_distance_color_coding) ->
    case (Image_y < Image_height) of
        true ->
            Row = [],
            Image_x = 0,
            Fun_2 = fun Fun_2_loop(Figure_center_x, Figure_center_y, Figure_height, Figure_width, Image_height, Image_width, Image_x, Image_y, Img, Max_step_2, Row, Use_distance_color_coding) ->
    case (Image_x < Image_width) of
        true ->
            Fx = (Figure_center_x + mochi_safe_mul((mochi_safe_div(float(Image_x), float(Image_width)) - 0.5), Figure_width)),
            Fy = (Figure_center_y + mochi_safe_mul((mochi_safe_div(float(Image_y), float(Image_height)) - 0.5), Figure_height)),
            Distance_3 = get_distance(Fx, Fy, Max_step_2),
            Rgb = nil,
            case Use_distance_color_coding of
        true -> Rgb_2 = get_color_coded_rgb(Distance_3),
            Rgb_4 = Rgb_2;
        _ -> Rgb_3 = get_black_and_white_rgb(Distance_3),
            Rgb_4 = Rgb_3
    end,
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Rgb_4]),
            Image_x_2 = (Image_x + 1),
            Fun_2_loop(Figure_center_x, Figure_center_y, Figure_height, Figure_width, Image_height, Image_width, Image_x_2, Image_y, Img, Max_step_2, Row_2, Use_distance_color_coding);
        _ -> {Figure_center_x, Figure_center_y, Figure_height, Figure_width, Image_height, Image_width, Image_x, Image_y, Img, Max_step_2, Row, Use_distance_color_coding}
    end
end,
{Figure_center_x, Figure_center_y, Figure_height, Figure_width, Image_height, Image_width, Image_x_2, Image_y, Img, Max_step_2, Row_2, Use_distance_color_coding} = Fun_2(Figure_center_x, Figure_center_y, Figure_height, Figure_width, Image_height, Image_width, Image_x, Image_y, Img, Max_step_2, Row, Use_distance_color_coding),
            Img_2 = lists:append((case Img of nil -> []; _ -> Img end), [Row_2]),
            Image_y_2 = (Image_y + 1),
            Fun_3_loop(Figure_center_x, Figure_center_y, Figure_height, Figure_width, Image_height, Image_width, Image_y_2, Img_2, Max_step_2, Use_distance_color_coding);
        _ -> {Figure_center_x, Figure_center_y, Figure_height, Figure_width, Image_height, Image_width, Image_y, Img, Max_step_2, Use_distance_color_coding}
    end
end,
{Figure_center_x, Figure_center_y, Figure_height, Figure_width, Image_height, Image_width, Image_y_2, Img_2, Max_step_2, Use_distance_color_coding} = Fun_3(Figure_center_x, Figure_center_y, Figure_height, Figure_width, Image_height, Image_width, Image_y, Img, Max_step_2, Use_distance_color_coding),
        Img_2
    catch {return, RetCatch} -> RetCatch end.

rgb_to_string(C) ->
    try
        (((((("(" ++ mochi_str(maps:get("r", C, nil))) ++ ", ") ++ mochi_str(maps:get("g", C, nil))) ++ ", ") ++ mochi_str(maps:get("b", C, nil))) ++ ")")
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('img1', get_image(10, 10, -0.6, 0.0, 3.2, 50, true)),
    io:format("~ts~n", [mochi_repr(rgb_to_string((case erlang:is_map((case erlang:is_map(erlang:get('img1')) of true -> maps:get(0, erlang:get('img1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('img1')) + 0 + 1, erlang:get('img1')); _ -> mochi_nth(0 + 1, erlang:get('img1')) end end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('img1')) of true -> maps:get(0, erlang:get('img1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('img1')) + 0 + 1, erlang:get('img1')); _ -> mochi_nth(0 + 1, erlang:get('img1')) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('img1')) of true -> maps:get(0, erlang:get('img1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('img1')) + 0 + 1, erlang:get('img1')); _ -> mochi_nth(0 + 1, erlang:get('img1')) end end)) + 0 + 1, (case erlang:is_map(erlang:get('img1')) of true -> maps:get(0, erlang:get('img1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('img1')) + 0 + 1, erlang:get('img1')); _ -> mochi_nth(0 + 1, erlang:get('img1')) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(erlang:get('img1')) of true -> maps:get(0, erlang:get('img1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('img1')) + 0 + 1, erlang:get('img1')); _ -> mochi_nth(0 + 1, erlang:get('img1')) end end)) end end)))]),
    erlang:put('img2', get_image(10, 10, -0.6, 0.0, 3.2, 50, false)),
    io:format("~ts~n", [mochi_repr(rgb_to_string((case erlang:is_map((case erlang:is_map(erlang:get('img2')) of true -> maps:get(0, erlang:get('img2'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('img2')) + 0 + 1, erlang:get('img2')); _ -> mochi_nth(0 + 1, erlang:get('img2')) end end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('img2')) of true -> maps:get(0, erlang:get('img2'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('img2')) + 0 + 1, erlang:get('img2')); _ -> mochi_nth(0 + 1, erlang:get('img2')) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('img2')) of true -> maps:get(0, erlang:get('img2'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('img2')) + 0 + 1, erlang:get('img2')); _ -> mochi_nth(0 + 1, erlang:get('img2')) end end)) + 0 + 1, (case erlang:is_map(erlang:get('img2')) of true -> maps:get(0, erlang:get('img2'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('img2')) + 0 + 1, erlang:get('img2')); _ -> mochi_nth(0 + 1, erlang:get('img2')) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(erlang:get('img2')) of true -> maps:get(0, erlang:get('img2'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('img2')) + 0 + 1, erlang:get('img2')); _ -> mochi_nth(0 + 1, erlang:get('img2')) end end)) end end)))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
