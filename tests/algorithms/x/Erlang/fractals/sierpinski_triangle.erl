#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, get_mid/2, point_to_string/1, triangle/4]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

get_mid(P1, P2) ->
    try
        #{"x" => ((maps:get("x", P1, nil) + maps:get("x", P2, nil)) div 2), "y" => ((maps:get("y", P1, nil) + maps:get("y", P2, nil)) div 2)}
    catch {return, Ret} -> Ret end.

point_to_string(P) ->
    try
        (((("(" ++ mochi_str(maps:get("x", P, nil))) ++ ",") ++ mochi_str(maps:get("y", P, nil))) ++ ")")
    catch {return, Ret} -> Ret end.

triangle(V1, V2, V3, Depth) ->
    try
        io:format("~ts~n", [mochi_repr(((((point_to_string(V1) ++ " ") ++ point_to_string(V2)) ++ " ") ++ point_to_string(V3)))]),
        case (Depth == 0) of
        true -> throw({return, nil});
        _ -> ok
    end,
        triangle(V1, get_mid(V1, V2), get_mid(V1, V3), (Depth - 1)),
        triangle(V2, get_mid(V1, V2), get_mid(V2, V3), (Depth - 1)),
        triangle(V3, get_mid(V3, V2), get_mid(V1, V3), (Depth - 1)),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    triangle(#{"x" => -175, "y" => -125}, #{"x" => 0, "y" => 175}, #{"x" => 175, "y" => -125}, 2),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
