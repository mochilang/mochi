#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, repeat_char/2, vicsek/1, print_pattern/1, main/0]).

% Generated by Mochi transpiler v0.10.64 (25cf3a3e28) on 2025-08-13 12:32 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

repeat_char(C, Count) ->
    try
        S = "",
        I = 0,
        Fun = fun Fun_loop(C, Count, I, S) ->
    case (I < Count) of
        true ->
            S_2 = (S ++ C),
            I_2 = (I + 1),
            Fun_loop(C, Count, I_2, S_2);
        _ -> {C, Count, I, S}
    end
end,
{C, Count, I_2, S_2} = Fun(C, Count, I, S),
        S_2
    catch {return, RetCatch} -> RetCatch end.

vicsek(Order) ->
    try
        case (Order == 0) of
        true -> throw({return, ["#"]});
        _ -> ok
    end,
        Prev = vicsek((Order - 1)),
        Size = erlang:length(Prev),
        Blank = repeat_char(" ", Size),
        Result = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Blank, I_3, Order, Prev, Result, Size) ->
    case (I_3 < Size) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [((Blank ++ (case erlang:is_map(Prev) of true -> maps:get(I_3, Prev, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Prev) + I_3 + 1, Prev); _ -> mochi_nth(I_3 + 1, Prev) end end)) ++ Blank)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Blank, I_4, Order, Prev, Result_2, Size);
        _ -> {Blank, I_3, Order, Prev, Result, Size}
    end
end,
{Blank, I_4, Order, Prev, Result_2, Size} = Fun_2(Blank, I_3, Order, Prev, Result, Size),
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Blank, I_5, Order, Prev, Result_2, Size) ->
    case (I_5 < Size) of
        true ->
            Result_3 = lists:append((case Result_2 of nil -> []; _ -> Result_2 end), [(((case erlang:is_map(Prev) of true -> maps:get(I_5, Prev, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Prev) + I_5 + 1, Prev); _ -> mochi_nth(I_5 + 1, Prev) end end) ++ (case erlang:is_map(Prev) of true -> maps:get(I_5, Prev, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Prev) + I_5 + 1, Prev); _ -> mochi_nth(I_5 + 1, Prev) end end)) ++ (case erlang:is_map(Prev) of true -> maps:get(I_5, Prev, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Prev) + I_5 + 1, Prev); _ -> mochi_nth(I_5 + 1, Prev) end end))]),
            I_6 = (I_5 + 1),
            Fun_3_loop(Blank, I_6, Order, Prev, Result_3, Size);
        _ -> {Blank, I_5, Order, Prev, Result_2, Size}
    end
end,
{Blank, I_6, Order, Prev, Result_3, Size} = Fun_3(Blank, I_5, Order, Prev, Result_2, Size),
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Blank, I_7, Order, Prev, Result_3, Size) ->
    case (I_7 < Size) of
        true ->
            Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [((Blank ++ (case erlang:is_map(Prev) of true -> maps:get(I_7, Prev, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Prev) + I_7 + 1, Prev); _ -> mochi_nth(I_7 + 1, Prev) end end)) ++ Blank)]),
            I_8 = (I_7 + 1),
            Fun_4_loop(Blank, I_8, Order, Prev, Result_4, Size);
        _ -> {Blank, I_7, Order, Prev, Result_3, Size}
    end
end,
{Blank, I_8, Order, Prev, Result_4, Size} = Fun_4(Blank, I_7, Order, Prev, Result_3, Size),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

print_pattern(Pattern) ->
    try
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(I_9, Pattern) ->
    case (I_9 < erlang:length(Pattern)) of
        true ->
            io:format("~ts~n", [mochi_repr((case erlang:is_map(Pattern) of true -> maps:get(I_9, Pattern, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Pattern) + I_9 + 1, Pattern); _ -> mochi_nth(I_9 + 1, Pattern) end end))]),
            I_10 = (I_9 + 1),
            Fun_5_loop(I_10, Pattern);
        _ -> {I_9, Pattern}
    end
end,
{I_10, Pattern} = Fun_5(I_9, Pattern),
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Depth = 3,
        Pattern_2 = vicsek(3),
        print_pattern(Pattern_2),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
