#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, sqrt/1, euclidean/2, similarity_search/2, cosine_similarity/2]).

% Generated by Mochi transpiler v0.10.66 (2995f902d7)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

sqrt(X) ->
    try
        case (X =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 10) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

euclidean(A, B) ->
    try
        Sum = 0.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(A, B, I_3, Sum) ->
    case (I_3 < erlang:length(A)) of
        true ->
            Diff = ((case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end) - (case erlang:is_map(B) of true -> maps:get(I_3, B, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(B) + I_3 + 1, B); _ -> mochi_nth(I_3 + 1, B) end end)),
            Sum_2 = (Sum + mochi_safe_mul(Diff, Diff)),
            I_4 = (I_3 + 1),
            Fun_2_loop(A, B, I_4, Sum_2);
        _ -> {A, B, I_3, Sum}
    end
end,
{A, B, I_4, Sum_2} = Fun_2(A, B, I_3, Sum),
        Res = sqrt(Sum_2),
        Res
    catch {return, RetCatch} -> RetCatch end.

similarity_search(Dataset, Value_array) ->
    try
        Dim = erlang:length((case erlang:is_map(Dataset) of true -> maps:get(0, Dataset, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Dataset) + 0 + 1, Dataset); _ -> mochi_nth(0 + 1, Dataset) end end)),
        case (Dim /= erlang:length((case erlang:is_map(Value_array) of true -> maps:get(0, Value_array, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Value_array) + 0 + 1, Value_array); _ -> mochi_nth(0 + 1, Value_array) end end))) of
        true -> throw({return, []});
        _ -> ok
    end,
        Result = [],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Dataset, Dim, I_5, Result, Value_array) ->
    case (I_5 < erlang:length(Value_array)) of
        true ->
            Value = (case erlang:is_map(Value_array) of true -> maps:get(I_5, Value_array, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Value_array) + I_5 + 1, Value_array); _ -> mochi_nth(I_5 + 1, Value_array) end end),
            Dist = euclidean(Value, (case erlang:is_map(Dataset) of true -> maps:get(0, Dataset, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Dataset) + 0 + 1, Dataset); _ -> mochi_nth(0 + 1, Dataset) end end)),
            Vec = (case erlang:is_map(Dataset) of true -> maps:get(0, Dataset, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Dataset) + 0 + 1, Dataset); _ -> mochi_nth(0 + 1, Dataset) end end),
            J = 1,
            Fun_3 = fun Fun_3_loop(Dataset, Dim, Dist, I_5, J, Result, Value, Value_array, Vec) ->
    case (J < erlang:length(Dataset)) of
        true ->
            D = euclidean(Value, (case erlang:is_map(Dataset) of true -> maps:get(J, Dataset, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Dataset) + J + 1, Dataset); _ -> mochi_nth(J + 1, Dataset) end end)),
            Vec_3 = (case (D < Dist) of
        true -> Dist_2 = D,
            Vec_2 = (case erlang:is_map(Dataset) of true -> maps:get(J, Dataset, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Dataset) + J + 1, Dataset); _ -> mochi_nth(J + 1, Dataset) end end),
            Dist_3 = Dist_2,
            Vec_2;
        _ -> Dist_3 = Dist,
            Vec
    end),
            J_2 = (J + 1),
            Fun_3_loop(Dataset, Dim, Dist_3, I_5, J_2, Result, Value, Value_array, Vec_3);
        _ -> {Dataset, Dim, Dist, I_5, J, Result, Value, Value_array, Vec}
    end
end,
{Dataset, Dim, Dist_3, I_5, J_2, Result, Value, Value_array, Vec_3} = Fun_3(Dataset, Dim, Dist, I_5, J, Result, Value, Value_array, Vec),
            Nb = #{"vector" => Vec_3, "distance" => Dist_3},
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Nb]),
            I_6 = (I_5 + 1),
            Fun_4_loop(Dataset, Dim, I_6, Result_2, Value_array);
        _ -> {Dataset, Dim, I_5, Result, Value_array}
    end
end,
{Dataset, Dim, I_6, Result_2, Value_array} = Fun_4(Dataset, Dim, I_5, Result, Value_array),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

cosine_similarity(A_2, B_2) ->
    try
        Dot = 0.0,
        Norm_a = 0.0,
        Norm_b = 0.0,
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(A_2, B_2, Dot, I_7, Norm_a, Norm_b) ->
    case (I_7 < erlang:length(A_2)) of
        true ->
            Dot_2 = (Dot + mochi_safe_mul((case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end), (case erlang:is_map(B_2) of true -> maps:get(I_7, B_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B_2) + I_7 + 1, B_2); _ -> mochi_nth(I_7 + 1, B_2) end end))),
            Norm_a_2 = (Norm_a + mochi_safe_mul((case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end), (case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end))),
            Norm_b_2 = (Norm_b + mochi_safe_mul((case erlang:is_map(B_2) of true -> maps:get(I_7, B_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B_2) + I_7 + 1, B_2); _ -> mochi_nth(I_7 + 1, B_2) end end), (case erlang:is_map(B_2) of true -> maps:get(I_7, B_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B_2) + I_7 + 1, B_2); _ -> mochi_nth(I_7 + 1, B_2) end end))),
            I_8 = (I_7 + 1),
            Fun_5_loop(A_2, B_2, Dot_2, I_8, Norm_a_2, Norm_b_2);
        _ -> {A_2, B_2, Dot, I_7, Norm_a, Norm_b}
    end
end,
{A_2, B_2, Dot_2, I_8, Norm_a_2, Norm_b_2} = Fun_5(A_2, B_2, Dot, I_7, Norm_a, Norm_b),
        case ((Norm_a_2 == 0.0) orelse (Norm_b_2 == 0.0)) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_div(Dot_2, mochi_safe_mul(sqrt(Norm_a_2), sqrt(Norm_b_2)))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('dataset', [[0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [2.0, 2.0, 2.0]]),
    erlang:put('value_array', [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0]]),
    erlang:put('neighbors', similarity_search(erlang:get('dataset'), erlang:get('value_array'))),
    erlang:put('k', 0),
    Fun_6 = fun Fun_6_loop() ->
    case (erlang:get('k') < erlang:length(erlang:get('neighbors'))) of
        true ->
            N = (case erlang:is_map(erlang:get('neighbors')) of true -> maps:get(erlang:get('k'), erlang:get('neighbors'), nil); _ -> case erlang:get('k') < 0 of true -> mochi_nth(erlang:length(erlang:get('neighbors')) + erlang:get('k') + 1, erlang:get('neighbors')); _ -> mochi_nth(erlang:get('k') + 1, erlang:get('neighbors')) end end),
            io:format("~ts~n", [mochi_repr((((("[" ++ mochi_str(maps:get("vector", N, nil))) ++ ", ") ++ mochi_str(maps:get("distance", N, nil))) ++ "]"))]),
            erlang:put('k', (erlang:get('k') + 1)),
            Fun_6_loop();
        _ -> {}
    end
end,
{} = Fun_6(),
    io:format("~ts~n", [mochi_str(cosine_similarity([1.0, 2.0], [6.0, 32.0]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
