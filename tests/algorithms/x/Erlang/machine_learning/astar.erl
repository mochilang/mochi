#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, get_neighbours/3, contains/2, get_node/2, astar/4, create_world/2, mark_path/2, print_world/1]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

get_neighbours(P, X_limit, Y_limit) ->
    try
        Deltas = [#{"x" => (0 - 1), "y" => (0 - 1)}, #{"x" => (0 - 1), "y" => 0}, #{"x" => (0 - 1), "y" => 1}, #{"x" => 0, "y" => (0 - 1)}, #{"x" => 0, "y" => 1}, #{"x" => 1, "y" => (0 - 1)}, #{"x" => 1, "y" => 0}, #{"x" => 1, "y" => 1}],
        Neighbours = [],
        Fun = fun Fun_loop(List, Deltas, Neighbours, P, X_limit, Y_limit) ->
    case List of
        [] -> {Deltas, Neighbours, P, X_limit, Y_limit};
        [D|D_rest] ->
            Nx = (maps:get("x", P, nil) + maps:get("x", D, nil)),
            Ny = (maps:get("y", P, nil) + maps:get("y", D, nil)),
            case ((((0 =< Nx) andalso (Nx < X_limit)) andalso (0 =< Ny)) andalso (Ny < Y_limit)) of
        true -> Neighbours_2 = lists:append((case Neighbours of nil -> []; _ -> Neighbours end), [#{"x" => Nx, "y" => Ny}]),
            Neighbours_3 = Neighbours_2;
        _ -> Neighbours_3 = Neighbours
    end,
            Fun_loop(D_rest, Deltas, Neighbours_3, P, X_limit, Y_limit);
        _ -> {Deltas, Neighbours, P, X_limit, Y_limit}
    end
end,
{Deltas, Neighbours_3, P, X_limit, Y_limit} = Fun(Deltas, Deltas, Neighbours, P, X_limit, Y_limit),
        Neighbours_3
    catch {return, RetCatch} -> RetCatch end.

contains(Nodes, P_2) ->
    try
        Fun_2 = fun Fun_2_loop(List, Nodes, P_2) ->
    case List of
        [] -> {Nodes, P_2};
        [N|N_rest] ->
            case ((maps:get("x", maps:get("pos", N, nil), nil) == maps:get("x", P_2, nil)) andalso (maps:get("y", maps:get("pos", N, nil), nil) == maps:get("y", P_2, nil))) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_2_loop(N_rest, Nodes, P_2);
        _ -> {Nodes, P_2}
    end
end,
{Nodes, P_2} = Fun_2(Nodes, Nodes, P_2),
        false
    catch {return, RetCatch} -> RetCatch end.

get_node(Nodes_2, P_3) ->
    try
        Fun_3 = fun Fun_3_loop(List, Nodes_2, P_3) ->
    case List of
        [] -> {Nodes_2, P_3};
        [N_2|N_2_rest] ->
            case ((maps:get("x", maps:get("pos", N_2, nil), nil) == maps:get("x", P_3, nil)) andalso (maps:get("y", maps:get("pos", N_2, nil), nil) == maps:get("y", P_3, nil))) of
        true -> throw({return, N_2});
        _ -> ok
    end,
            Fun_3_loop(N_2_rest, Nodes_2, P_3);
        _ -> {Nodes_2, P_3}
    end
end,
{Nodes_2, P_3} = Fun_3(Nodes_2, Nodes_2, P_3),
        #{"pos" => P_3, "parent" => #{"x" => (0 - 1), "y" => (0 - 1)}, "g" => 0, "h" => 0, "f" => 0}
    catch {return, RetCatch} -> RetCatch end.

astar(X_limit_2, Y_limit_2, Start, Goal) ->
    try
        Open = [],
        Closed = [],
        Open_2 = lists:append((case Open of nil -> []; _ -> Open end), [#{"pos" => Start, "parent" => #{"x" => (0 - 1), "y" => (0 - 1)}, "g" => 0, "h" => 0, "f" => 0}]),
        Current = (case erlang:is_map(Open_2) of true -> maps:get(0, Open_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Open_2) + 0 + 1, Open_2); _ -> mochi_nth(0 + 1, Open_2) end end),
        Fun_8 = fun Fun_8_loop(Closed, Current, Goal, Open_2, Start, X_limit_2, Y_limit_2) ->
    case (erlang:length(Open_2) > 0) of
        true ->
            try
                Min_index = 0,
                I = 1,
                Fun_4 = fun Fun_4_loop(Closed, Current, Goal, I, Min_index, Open_2, Start, X_limit_2, Y_limit_2) ->
    case (I < erlang:length(Open_2)) of
        true ->
            case (maps:get("f", (case erlang:is_map(Open_2) of true -> maps:get(I, Open_2, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Open_2) + I + 1, Open_2); _ -> mochi_nth(I + 1, Open_2) end end), nil) < maps:get("f", (case erlang:is_map(Open_2) of true -> maps:get(Min_index, Open_2, nil); _ -> case Min_index < 0 of true -> mochi_nth(erlang:length(Open_2) + Min_index + 1, Open_2); _ -> mochi_nth(Min_index + 1, Open_2) end end), nil)) of
        true -> Min_index_2 = I,
            Min_index_3 = Min_index_2;
        _ -> Min_index_3 = Min_index
    end,
            I_2 = (I + 1),
            Fun_4_loop(Closed, Current, Goal, I_2, Min_index_3, Open_2, Start, X_limit_2, Y_limit_2);
        _ -> {Closed, Current, Goal, I, Min_index, Open_2, Start, X_limit_2, Y_limit_2}
    end
end,
{Closed, Current, Goal, I_2, Min_index_3, Open_2, Start, X_limit_2, Y_limit_2} = Fun_4(Closed, Current, Goal, I, Min_index, Open_2, Start, X_limit_2, Y_limit_2),
                Current_2 = (case erlang:is_map(Open_2) of true -> maps:get(Min_index_3, Open_2, nil); _ -> case Min_index_3 < 0 of true -> mochi_nth(erlang:length(Open_2) + Min_index_3 + 1, Open_2); _ -> mochi_nth(Min_index_3 + 1, Open_2) end end),
                New_open = [],
                J = 0,
                Fun_5 = fun Fun_5_loop(Closed, Current_2, Goal, I_2, J, Min_index_3, New_open, Open_2, Start, X_limit_2, Y_limit_2) ->
    case (J < erlang:length(Open_2)) of
        true ->
            case (J /= Min_index_3) of
        true -> New_open_2 = lists:append((case New_open of nil -> []; _ -> New_open end), [(case erlang:is_map(Open_2) of true -> maps:get(J, Open_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Open_2) + J + 1, Open_2); _ -> mochi_nth(J + 1, Open_2) end end)]),
            New_open_3 = New_open_2;
        _ -> New_open_3 = New_open
    end,
            J_2 = (J + 1),
            Fun_5_loop(Closed, Current_2, Goal, I_2, J_2, Min_index_3, New_open_3, Open_2, Start, X_limit_2, Y_limit_2);
        _ -> {Closed, Current_2, Goal, I_2, J, Min_index_3, New_open, Open_2, Start, X_limit_2, Y_limit_2}
    end
end,
{Closed, Current_2, Goal, I_2, J_2, Min_index_3, New_open_3, Open_2, Start, X_limit_2, Y_limit_2} = Fun_5(Closed, Current_2, Goal, I_2, J, Min_index_3, New_open, Open_2, Start, X_limit_2, Y_limit_2),
                Open_3 = New_open_3,
                Closed_2 = lists:append((case Closed of nil -> []; _ -> Closed end), [Current_2]),
                case ((maps:get("x", maps:get("pos", Current_2, nil), nil) == maps:get("x", Goal, nil)) andalso (maps:get("y", maps:get("pos", Current_2, nil), nil) == maps:get("y", Goal, nil))) of
        true -> throw({break, Closed_2, Current_2, Goal, Open_3, Start, X_limit_2, Y_limit_2});
        _ -> ok
    end,
                Neighbours_4 = get_neighbours(maps:get("pos", Current_2, nil), X_limit_2, Y_limit_2),
                Fun_6 = fun Fun_6_loop(List, Closed_2, Current_2, Goal, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Open_3, Start, X_limit_2, Y_limit_2) ->
    case List of
        [] -> {Closed_2, Current_2, Goal, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Open_3, Start, X_limit_2, Y_limit_2};
        [Np|Np_rest] ->
        try
            case mochi_member(Np, Closed_2) of
        true -> throw({continue, Closed_2, Current_2, Goal, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Open_3, Start, X_limit_2, Y_limit_2});
        _ -> ok
    end,
            G = (maps:get("g", Current_2, nil) + 1),
            Dx = (maps:get("x", Goal, nil) - maps:get("x", Np, nil)),
            Dy = (maps:get("y", Goal, nil) - maps:get("y", Np, nil)),
            H = ((Dx * Dx) + (Dy * Dy)),
            F = (G + H),
            Skip = false,
            Fun_7 = fun Fun_7_loop(List, Closed_2, Current_2, Dx, Dy, F, G, Goal, H, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Np, Open_3, Skip, Start, X_limit_2, Y_limit_2) ->
    case List of
        [] -> {Closed_2, Current_2, Dx, Dy, F, G, Goal, H, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Np, Open_3, Skip, Start, X_limit_2, Y_limit_2};
        [Node|Node_rest] ->
            case (((maps:get("x", maps:get("pos", Node, nil), nil) == maps:get("x", Np, nil)) andalso (maps:get("y", maps:get("pos", Node, nil), nil) == maps:get("y", Np, nil))) andalso (maps:get("f", Node, nil) < F)) of
        true -> Skip_2 = true,
            Skip_3 = Skip_2;
        _ -> Skip_3 = Skip
    end,
            Fun_7_loop(Node_rest, Closed_2, Current_2, Dx, Dy, F, G, Goal, H, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Np, Open_3, Skip_3, Start, X_limit_2, Y_limit_2);
        _ -> {Closed_2, Current_2, Dx, Dy, F, G, Goal, H, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Np, Open_3, Skip, Start, X_limit_2, Y_limit_2}
    end
end,
{Closed_2, Current_2, Dx, Dy, F, G, Goal, H, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Np, Open_3, Skip_3, Start, X_limit_2, Y_limit_2} = Fun_7(Open_3, Closed_2, Current_2, Dx, Dy, F, G, Goal, H, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Np, Open_3, Skip, Start, X_limit_2, Y_limit_2),
            case Skip_3 of
        true -> throw({continue, Closed_2, Current_2, Goal, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Open_3, Start, X_limit_2, Y_limit_2});
        _ -> ok
    end,
            Open_4 = lists:append((case Open_3 of nil -> []; _ -> Open_3 end), [#{"pos" => Np, "parent" => maps:get("pos", Current_2, nil), "g" => G, "h" => H, "f" => F}]),
            Fun_6_loop(Np_rest, Closed_2, Current_2, Goal, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Open_4, Start, X_limit_2, Y_limit_2)
        catch
            {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11} -> Fun_6_loop(Np_rest, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11);
            {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11};
            break -> {Closed_2, Current_2, Goal, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Open_3, Start, X_limit_2, Y_limit_2}
        end;
        _ -> {Closed_2, Current_2, Goal, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Open_3, Start, X_limit_2, Y_limit_2}
    end
end,
{Closed_2, Current_2, Goal, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Open_4, Start, X_limit_2, Y_limit_2} = Fun_6(Neighbours_4, Closed_2, Current_2, Goal, I_2, J_2, Min_index_3, Neighbours_4, New_open_3, Open_3, Start, X_limit_2, Y_limit_2),
                Fun_8_loop(Closed_2, Current_2, Goal, Open_4, Start, X_limit_2, Y_limit_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_8_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {Closed, Current, Goal, Open_2, Start, X_limit_2, Y_limit_2}
    end
end,
{Closed_2, Current_2, Goal, Open_4, Start, X_limit_2, Y_limit_2} = Fun_8(Closed, Current, Goal, Open_2, Start, X_limit_2, Y_limit_2),
        Path = [],
        Path_2 = lists:append((case Path of nil -> []; _ -> Path end), [maps:get("pos", Current_2, nil)]),
        Fun_9 = fun Fun_9_loop(Closed_2, Current_2, Goal, Open_4, Path_2, Start, X_limit_2, Y_limit_2) ->
    case mochi_not(((maps:get("x", maps:get("parent", Current_2, nil), nil) == (0 - 1)) andalso (maps:get("y", maps:get("parent", Current_2, nil), nil) == (0 - 1)))) of
        true ->
            Current_3 = get_node(Closed_2, maps:get("parent", Current_2, nil)),
            Path_3 = lists:append((case Path_2 of nil -> []; _ -> Path_2 end), [maps:get("pos", Current_3, nil)]),
            Fun_9_loop(Closed_2, Current_3, Goal, Open_4, Path_3, Start, X_limit_2, Y_limit_2);
        _ -> {Closed_2, Current_2, Goal, Open_4, Path_2, Start, X_limit_2, Y_limit_2}
    end
end,
{Closed_2, Current_3, Goal, Open_4, Path_3, Start, X_limit_2, Y_limit_2} = Fun_9(Closed_2, Current_2, Goal, Open_4, Path_2, Start, X_limit_2, Y_limit_2),
        Rev = [],
        K = (erlang:length(Path_3) - 1),
        Fun_10 = fun Fun_10_loop(Closed_2, Current_3, Goal, K, Open_4, Path_3, Rev, Start, X_limit_2, Y_limit_2) ->
    case (K >= 0) of
        true ->
            Rev_2 = lists:append((case Rev of nil -> []; _ -> Rev end), [(case erlang:is_map(Path_3) of true -> maps:get(K, Path_3, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Path_3) + K + 1, Path_3); _ -> mochi_nth(K + 1, Path_3) end end)]),
            K_2 = (K - 1),
            Fun_10_loop(Closed_2, Current_3, Goal, K_2, Open_4, Path_3, Rev_2, Start, X_limit_2, Y_limit_2);
        _ -> {Closed_2, Current_3, Goal, K, Open_4, Path_3, Rev, Start, X_limit_2, Y_limit_2}
    end
end,
{Closed_2, Current_3, Goal, K_2, Open_4, Path_3, Rev_2, Start, X_limit_2, Y_limit_2} = Fun_10(Closed_2, Current_3, Goal, K, Open_4, Path_3, Rev, Start, X_limit_2, Y_limit_2),
        Rev_2
    catch {return, RetCatch} -> RetCatch end.

create_world(X_limit_3, Y_limit_3) ->
    try
        World = [],
        I_3 = 0,
        Fun_12 = fun Fun_12_loop(I_3, World, X_limit_3, Y_limit_3) ->
    case (I_3 < X_limit_3) of
        true ->
            Row = [],
            J_3 = 0,
            Fun_11 = fun Fun_11_loop(I_3, J_3, Row, World, X_limit_3, Y_limit_3) ->
    case (J_3 < Y_limit_3) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            J_4 = (J_3 + 1),
            Fun_11_loop(I_3, J_4, Row_2, World, X_limit_3, Y_limit_3);
        _ -> {I_3, J_3, Row, World, X_limit_3, Y_limit_3}
    end
end,
{I_3, J_4, Row_2, World, X_limit_3, Y_limit_3} = Fun_11(I_3, J_3, Row, World, X_limit_3, Y_limit_3),
            World_2 = lists:append((case World of nil -> []; _ -> World end), [Row_2]),
            I_4 = (I_3 + 1),
            Fun_12_loop(I_4, World_2, X_limit_3, Y_limit_3);
        _ -> {I_3, World, X_limit_3, Y_limit_3}
    end
end,
{I_4, World_2, X_limit_3, Y_limit_3} = Fun_12(I_3, World, X_limit_3, Y_limit_3),
        World_2
    catch {return, RetCatch} -> RetCatch end.

mark_path(World_3, Path_4) ->
    try
        Fun_13 = fun Fun_13_loop(List, Path_4, World_3) ->
    case List of
        [] -> {Path_4, World_3};
        [P_4|P_4_rest] ->
            World_4 = lists:sublist(World_3, maps:get("x", P_4, nil)) ++ [lists:sublist(lists:nth(maps:get("x", P_4, nil) + 1, World_3), maps:get("y", P_4, nil)) ++ [1] ++ lists:nthtail(maps:get("y", P_4, nil) + 1, lists:nth(maps:get("x", P_4, nil) + 1, World_3))] ++ lists:nthtail(maps:get("x", P_4, nil) + 1, World_3),
            Fun_13_loop(P_4_rest, Path_4, World_4);
        _ -> {Path_4, World_3}
    end
end,
{Path_4, World_4} = Fun_13(Path_4, Path_4, World_3),
        {nil, World_4}
    catch {return, RetCatch} -> RetCatch end.

print_world(World_5) ->
    try
        Fun_14 = fun Fun_14_loop(List, World_5) ->
    case List of
        [] -> {World_5};
        [Row_3|Row_3_rest] ->
            io:format("~ts~n", [mochi_str(Row_3)]),
            Fun_14_loop(Row_3_rest, World_5);
        _ -> {World_5}
    end
end,
{World_5} = Fun_14(World_5, World_5),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('world_x', 5),
    erlang:put('world_y', 5),
    erlang:put('start', #{"x" => 0, "y" => 0}),
    erlang:put('goal', #{"x" => 4, "y" => 4}),
    erlang:put('path', astar(5, 5, erlang:get('start'), erlang:get('goal'))),
    io:format("~ts~n", [mochi_repr((((((((("path from (" ++ mochi_str(maps:get("x", erlang:get('start'), nil))) ++ ", ") ++ mochi_str(maps:get("y", erlang:get('start'), nil))) ++ ") to (") ++ mochi_str(maps:get("x", erlang:get('goal'), nil))) ++ ", ") ++ mochi_str(maps:get("y", erlang:get('goal'), nil))) ++ ")"))]),
    erlang:put('world', create_world(5, 5)),
    {_, World_6} = mark_path(erlang:get('world'), erlang:get('path')),
    erlang:put('world', World_6),
    print_world(erlang:get('world')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
