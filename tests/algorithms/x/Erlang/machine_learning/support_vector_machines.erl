#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, dot/2, new_svc/3, fit/3, predict/2]).

% Generated by Mochi transpiler v0.10.59 (589dcb03e5) on 2025-08-07 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

dot(A, B) ->
    try
        S = 0.0,
        I = 0,
        Fun = fun Fun_loop(A, B, I, S) ->
    case (I < erlang:length(A)) of
        true ->
            S_2 = (S + mochi_safe_mul((case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(A) + I + 1, A); _ -> mochi_nth(I + 1, A) end end), (case erlang:is_map(B) of true -> maps:get(I, B, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(B) + I + 1, B); _ -> mochi_nth(I + 1, B) end end))),
            I_2 = (I + 1),
            Fun_loop(A, B, I_2, S_2);
        _ -> {A, B, I, S}
    end
end,
{A, B, I_2, S_2} = Fun(A, B, I, S),
        S_2
    catch {return, Ret} -> Ret end.

new_svc(Lr, Lambda, Epochs) ->
    try
        #{"weights" => [], "bias" => 0.0, "lr" => Lr, "lambda" => Lambda, "epochs" => Epochs}
    catch {return, Ret} -> Ret end.

fit(Model, Xs, Ys) ->
    try
        N_features = erlang:length((case erlang:is_map(Xs) of true -> maps:get(0, Xs, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Xs) + 0 + 1, Xs); _ -> mochi_nth(0 + 1, Xs) end end)),
        W = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Model, N_features, W, Xs, Ys) ->
    case (I_3 < N_features) of
        true ->
            W_2 = lists:append((case W of nil -> []; _ -> W end), [0.0]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Model, N_features, W_2, Xs, Ys);
        _ -> {I_3, Model, N_features, W, Xs, Ys}
    end
end,
{I_4, Model, N_features, W_2, Xs, Ys} = Fun_2(I_3, Model, N_features, W, Xs, Ys),
        B_2 = 0.0,
        Epoch = 0,
        Fun_7 = fun Fun_7_loop(B_2, Epoch, I_4, Model, N_features, W_2, Xs, Ys) ->
    case (Epoch < maps:get("epochs", Model, nil)) of
        true ->
            J = 0,
            Fun_6 = fun Fun_6_loop(B_2, Epoch, I_4, J, Model, N_features, W_2, Xs, Ys) ->
    case (J < erlang:length(Xs)) of
        true ->
            X = (case erlang:is_map(Xs) of true -> maps:get(J, Xs, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Xs) + J + 1, Xs); _ -> mochi_nth(J + 1, Xs) end end),
            Y = float((case erlang:is_map(Ys) of true -> maps:get(J, Ys, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Ys) + J + 1, Ys); _ -> mochi_nth(J + 1, Ys) end end)),
            Prod = (dot(W_2, X) + B_2),
            case (mochi_safe_mul(Y, Prod) < 1.0) of
        true -> K = 0,
            Fun_3 = fun Fun_3_loop(B_2, Epoch, I_4, J, K, Model, N_features, Prod, W_2, X, Xs, Y, Ys) ->
    case (K < erlang:length(W_2)) of
        true ->
            W_3 = lists:sublist(W_2, K) ++ [((case erlang:is_map(W_2) of true -> maps:get(K, W_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(W_2) + K + 1, W_2); _ -> mochi_nth(K + 1, W_2) end end) + mochi_safe_mul(maps:get("lr", Model, nil), (mochi_safe_mul(Y, (case erlang:is_map(X) of true -> maps:get(K, X, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(X) + K + 1, X); _ -> mochi_nth(K + 1, X) end end)) - mochi_safe_mul(mochi_safe_mul(2.0, maps:get("lambda", Model, nil)), (case erlang:is_map(W_2) of true -> maps:get(K, W_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(W_2) + K + 1, W_2); _ -> mochi_nth(K + 1, W_2) end end)))))] ++ lists:nthtail(K + 1, W_2),
            K_2 = (K + 1),
            Fun_3_loop(B_2, Epoch, I_4, J, K_2, Model, N_features, Prod, W_3, X, Xs, Y, Ys);
        _ -> {B_2, Epoch, I_4, J, K, Model, N_features, Prod, W_2, X, Xs, Y, Ys}
    end
end,
{B_2, Epoch, I_4, J, K_2, Model, N_features, Prod, W_3, X, Xs, Y, Ys} = Fun_3(B_2, Epoch, I_4, J, K, Model, N_features, Prod, W_2, X, Xs, Y, Ys),
            B_3 = (B_2 + mochi_safe_mul(maps:get("lr", Model, nil), Y)),
            B_4 = B_3,
            Fun_5 = Fun_3,
            K_5 = K_2,
            W_5 = W_3;
        _ -> K_3 = 0,
            Fun_4 = fun Fun_4_loop(B_2, Epoch, I_4, J, K_3, Model, N_features, Prod, W_2, X, Xs, Y, Ys) ->
    case (K_3 < erlang:length(W_2)) of
        true ->
            W_4 = lists:sublist(W_2, K_3) ++ [((case erlang:is_map(W_2) of true -> maps:get(K_3, W_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(W_2) + K_3 + 1, W_2); _ -> mochi_nth(K_3 + 1, W_2) end end) - mochi_safe_mul(maps:get("lr", Model, nil), mochi_safe_mul(mochi_safe_mul(2.0, maps:get("lambda", Model, nil)), (case erlang:is_map(W_2) of true -> maps:get(K_3, W_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(W_2) + K_3 + 1, W_2); _ -> mochi_nth(K_3 + 1, W_2) end end))))] ++ lists:nthtail(K_3 + 1, W_2),
            K_4 = (K_3 + 1),
            Fun_4_loop(B_2, Epoch, I_4, J, K_4, Model, N_features, Prod, W_4, X, Xs, Y, Ys);
        _ -> {B_2, Epoch, I_4, J, K_3, Model, N_features, Prod, W_2, X, Xs, Y, Ys}
    end
end,
{B_2, Epoch, I_4, J, K_4, Model, N_features, Prod, W_4, X, Xs, Y, Ys} = Fun_4(B_2, Epoch, I_4, J, K_3, Model, N_features, Prod, W_2, X, Xs, Y, Ys),
            B_4 = B_2,
            Fun_5 = Fun_4,
            K_5 = K_4,
            W_5 = W_4
    end,
            J_2 = (J + 1),
            Fun_6_loop(B_4, Epoch, I_4, J_2, Model, N_features, W_5, Xs, Ys);
        _ -> {B_2, Epoch, I_4, J, Model, N_features, W_2, Xs, Ys}
    end
end,
{B_4, Epoch, I_4, J_2, Model, N_features, W_5, Xs, Ys} = Fun_6(B_2, Epoch, I_4, J, Model, N_features, W_2, Xs, Ys),
            Epoch_2 = (Epoch + 1),
            Fun_7_loop(B_4, Epoch_2, I_4, Model, N_features, W_5, Xs, Ys);
        _ -> {B_2, Epoch, I_4, Model, N_features, W_2, Xs, Ys}
    end
end,
{B_4, Epoch_2, I_4, Model, N_features, W_5, Xs, Ys} = Fun_7(B_2, Epoch, I_4, Model, N_features, W_2, Xs, Ys),
        #{"weights" => W_5, "bias" => B_4, "lr" => maps:get("lr", Model, nil), "lambda" => maps:get("lambda", Model, nil), "epochs" => maps:get("epochs", Model, nil)}
    catch {return, Ret} -> Ret end.

predict(Model_2, X_2) ->
    try
        S_3 = (dot(maps:get("weights", Model_2, nil), X_2) + maps:get("bias", Model_2, nil)),
        case (S_3 >= 0.0) of
        true -> throw({return, 1});
        _ -> throw({return, -1})
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('xs', [[0.0, 1.0], [0.0, 2.0], [1.0, 1.0], [1.0, 2.0]]),
    erlang:put('ys', [1, 1, -1, -1]),
    erlang:put('base', new_svc(0.01, 0.01, 1000)),
    erlang:put('model', fit(erlang:get('base'), erlang:get('xs'), erlang:get('ys'))),
    io:format("~ts~n", [mochi_repr(predict(erlang:get('model'), [0.0, 1.0]))]),
    io:format("~ts~n", [mochi_repr(predict(erlang:get('model'), [1.0, 1.0]))]),
    io:format("~ts~n", [mochi_repr(predict(erlang:get('model'), [2.0, 2.0]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
