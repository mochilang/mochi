#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, to_lowercase/1, is_punct/1, clean_text/2, split/2, contains/2, floor/1, round3/1, ln/1, log10/1, term_frequency/2, document_frequency/2, inverse_document_frequency/3, tf_idf/2]).

% Generated by Mochi transpiler v0.10.59 (589dcb03e5) on 2025-08-07 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

to_lowercase(S) ->
    try
        Res = "",
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Res, S) ->
    case (I < erlang:length(S)) of
        true ->
            try
                C = string:substr(S, I + 1, 1),
                J = 0,
                Found = false,
                Fun = fun Fun_loop(C, Found, I, J, Res, S) ->
    case (J < erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ")) of
        true ->
            try
                case (C == string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", J + 1, 1)) of
        true -> Res_2 = (Res ++ string:substr("abcdefghijklmnopqrstuvwxyz", J + 1, 1)),
            Found_2 = true,
            throw({break, C, Found_2, I, J, Res_2, S}),
            Found_3 = Found_2,
            Res_3 = Res_2;
        _ -> Found_3 = Found,
            Res_3 = Res
    end,
                J_2 = (J + 1),
                Fun_loop(C, Found_3, I, J_2, Res_3, S)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_loop(C0, C1, C2, C3, C4, C5);
                {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5}
            end;
        _ -> {C, Found, I, J, Res, S}
    end
end,
{C, Found_3, I, J_2, Res_3, S} = Fun(C, Found, I, J, Res, S),
                case mochi_not(Found_3) of
        true -> Res_4 = (Res_3 ++ C),
            Res_5 = Res_4;
        _ -> Res_5 = Res_3
    end,
                I_2 = (I + 1),
                Fun_2_loop(I_2, Res_5, S)
            catch
                {continue, C0, C1, C2} -> Fun_2_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {I, Res, S}
    end
end,
{I_2, Res_5, S} = Fun_2(I, Res, S),
        Res_5
    catch {return, Ret} -> Ret end.

is_punct(C_2) ->
    try
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(C_2, I_3) ->
    case (I_3 < erlang:length("!\"#$%&'()*+,-./:;<=>?@[\\]^_{|}~")) of
        true ->
            case (C_2 == string:substr("!\"#$%&'()*+,-./:;<=>?@[\\]^_{|}~", I_3 + 1, 1)) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(C_2, I_4);
        _ -> {C_2, I_3}
    end
end,
{C_2, I_4} = Fun_3(C_2, I_3),
        false
    catch {return, Ret} -> Ret end.

clean_text(Text, Keep_newlines) ->
    try
        Lower = to_lowercase(Text),
        Res_6 = "",
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, Keep_newlines, Lower, Res_6, Text) ->
    case (I_5 < erlang:length(Lower)) of
        true ->
            Ch = string:substr(Lower, I_5 + 1, 1),
            case is_punct(Ch) of
        true -> Res_11 = Res_6;
        _ -> case (Ch == "\n") of
        true -> case Keep_newlines of
        true -> Res_7 = (Res_6 ++ "\n"),
            Res_8 = Res_7;
        _ -> Res_8 = Res_6
    end,
            Res_10 = Res_8;
        _ -> Res_9 = (Res_6 ++ Ch),
            Res_10 = Res_9
    end,
            Res_11 = Res_10
    end,
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Keep_newlines, Lower, Res_11, Text);
        _ -> {I_5, Keep_newlines, Lower, Res_6, Text}
    end
end,
{I_6, Keep_newlines, Lower, Res_11, Text} = Fun_4(I_5, Keep_newlines, Lower, Res_6, Text),
        Res_11
    catch {return, Ret} -> Ret end.

split(S_2, Sep) ->
    try
        Res_12 = [],
        Current = "",
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(Current, I_7, Res_12, S_2, Sep) ->
    case (I_7 < erlang:length(S_2)) of
        true ->
            Ch_2 = string:substr(S_2, I_7 + 1, 1),
            case (Ch_2 == Sep) of
        true -> Res_13 = lists:append((case Res_12 of nil -> []; _ -> Res_12 end), [Current]),
            Current_2 = "",
            Current_4 = Current_2,
            Res_14 = Res_13;
        _ -> Current_3 = (Current ++ Ch_2),
            Current_4 = Current_3,
            Res_14 = Res_12
    end,
            I_8 = (I_7 + 1),
            Fun_5_loop(Current_4, I_8, Res_14, S_2, Sep);
        _ -> {Current, I_7, Res_12, S_2, Sep}
    end
end,
{Current_4, I_8, Res_14, S_2, Sep} = Fun_5(Current, I_7, Res_12, S_2, Sep),
        Res_15 = lists:append((case Res_14 of nil -> []; _ -> Res_14 end), [Current_4]),
        Res_15
    catch {return, Ret} -> Ret end.

contains(S_3, Sub) ->
    try
        N = erlang:length(S_3),
        M = erlang:length(Sub),
        case (M == 0) of
        true -> throw({return, true});
        _ -> ok
    end,
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(I_9, M, N, S_3, Sub) ->
    case (I_9 =< (N - M)) of
        true ->
            try
                J_3 = 0,
                Is_match = true,
                Fun_6 = fun Fun_6_loop(I_9, Is_match, J_3, M, N, S_3, Sub) ->
    case (J_3 < M) of
        true ->
            try
                case (string:substr(S_3, (I_9 + J_3) + 1, 1) /= string:substr(Sub, J_3 + 1, 1)) of
        true -> Is_match_2 = false,
            throw({break, I_9, Is_match_2, J_3, M, N, S_3, Sub}),
            Is_match_3 = Is_match_2;
        _ -> Is_match_3 = Is_match
    end,
                J_4 = (J_3 + 1),
                Fun_6_loop(I_9, Is_match_3, J_4, M, N, S_3, Sub)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_6_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {I_9, Is_match, J_3, M, N, S_3, Sub}
    end
end,
{I_9, Is_match_3, J_4, M, N, S_3, Sub} = Fun_6(I_9, Is_match, J_3, M, N, S_3, Sub),
                case (Is_match_3 /= nil) of
        true -> throw({return, true});
        _ -> ok
    end,
                I_10 = (I_9 + 1),
                Fun_7_loop(I_10, M, N, S_3, Sub)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_7_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {I_9, M, N, S_3, Sub}
    end
end,
{I_10, M, N, S_3, Sub} = Fun_7(I_9, M, N, S_3, Sub),
        false
    catch {return, Ret} -> Ret end.

floor(X) ->
    try
        I_11 = mochi_to_int(X),
        case (float(I_11) > X) of
        true -> I_12 = (I_11 - 1),
            I_13 = I_12;
        _ -> I_13 = I_11
    end,
        float(I_13)
    catch {return, Ret} -> Ret end.

round3(X_2) ->
    try
        mochi_safe_div(floor((mochi_safe_mul(X_2, 1000.0) + 0.5)), 1000.0)
    catch {return, Ret} -> Ret end.

ln(X_3) ->
    try
        T = mochi_safe_div((X_3 - 1.0), (X_3 + 1.0)),
        Term = T,
        Sum = 0.0,
        K = 1,
        Fun_8 = fun Fun_8_loop(K, Sum, T, Term, X_3) ->
    case (K =< 99) of
        true ->
            Sum_2 = (Sum + mochi_safe_div(Term, float(K))),
            Term_2 = mochi_safe_mul(mochi_safe_mul(Term, T), T),
            K_2 = (K + 2),
            Fun_8_loop(K_2, Sum_2, T, Term_2, X_3);
        _ -> {K, Sum, T, Term, X_3}
    end
end,
{K_2, Sum_2, T, Term_2, X_3} = Fun_8(K, Sum, T, Term, X_3),
        mochi_safe_mul(2.0, Sum_2)
    catch {return, Ret} -> Ret end.

log10(X_4) ->
    try
        mochi_safe_div(ln(X_4), ln(10.0))
    catch {return, Ret} -> Ret end.

term_frequency(Term_3, Document) ->
    try
        Clean = clean_text(Document, false),
        Tokens = string:tokens(Clean, " "),
        T_2 = to_lowercase(Term_3),
        Count = 0,
        I_14 = 0,
        Fun_9 = fun Fun_9_loop(Clean, Count, Document, I_14, T_2, Term_3, Tokens) ->
    case (I_14 < erlang:length(Tokens)) of
        true ->
            case ((string:substr(Tokens, I_14 + 1, 1) /= "") andalso (string:substr(Tokens, I_14 + 1, 1) == T_2)) of
        true -> Count_2 = (Count + 1),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            I_15 = (I_14 + 1),
            Fun_9_loop(Clean, Count_3, Document, I_15, T_2, Term_3, Tokens);
        _ -> {Clean, Count, Document, I_14, T_2, Term_3, Tokens}
    end
end,
{Clean, Count_3, Document, I_15, T_2, Term_3, Tokens} = Fun_9(Clean, Count, Document, I_14, T_2, Term_3, Tokens),
        Count_3
    catch {return, Ret} -> Ret end.

document_frequency(Term_4, Corpus) ->
    try
        Clean_2 = clean_text(Corpus, true),
        Docs = string:tokens(Clean_2, "\n"),
        T_3 = to_lowercase(Term_4),
        Matches = 0,
        I_16 = 0,
        Fun_10 = fun Fun_10_loop(Clean_2, Corpus, Docs, I_16, Matches, T_3, Term_4) ->
    case (I_16 < erlang:length(Docs)) of
        true ->
            case ((string:str(string:substr(Docs, I_16 + 1, 1), T_3) =/= 0) /= nil) of
        true -> Matches_2 = (Matches + 1),
            Matches_3 = Matches_2;
        _ -> Matches_3 = Matches
    end,
            I_17 = (I_16 + 1),
            Fun_10_loop(Clean_2, Corpus, Docs, I_17, Matches_3, T_3, Term_4);
        _ -> {Clean_2, Corpus, Docs, I_16, Matches, T_3, Term_4}
    end
end,
{Clean_2, Corpus, Docs, I_17, Matches_3, T_3, Term_4} = Fun_10(Clean_2, Corpus, Docs, I_16, Matches, T_3, Term_4),
        [Matches_3, erlang:length(Docs)]
    catch {return, Ret} -> Ret end.

inverse_document_frequency(Df, N_2, Smoothing) ->
    try
        case Smoothing of
        true -> case (N_2 == 0) of
        true -> erlang:error("log10(0) is undefined.");
        _ -> ok
    end,
            Ratio = mochi_safe_div(float(N_2), (1.0 + float(Df))),
            L = log10(Ratio),
            Result = round3((1.0 + L)),
            io:format("~ts~n", [mochi_repr(Result)]),
            throw({return, Result}),
            L_2 = L,
            Ratio_2 = Ratio,
            Result_2 = Result;
        _ -> L_2 = nil,
            Ratio_2 = nil,
            Result_2 = nil
    end,
        case (Df == 0) of
        true -> erlang:error("df must be > 0");
        _ -> ok
    end,
        case (N_2 == 0) of
        true -> erlang:error("log10(0) is undefined.");
        _ -> ok
    end,
        Ratio_3 = mochi_safe_div(float(N_2), float(Df)),
        L_3 = log10(Ratio_3),
        Result_3 = round3(L_3),
        io:format("~ts~n", [mochi_repr(Result_3)]),
        Result_3
    catch {return, Ret} -> Ret end.

tf_idf(Tf, Idf) ->
    try
        Prod = mochi_safe_mul(float(Tf), Idf),
        Result_4 = round3(Prod),
        io:format("~ts~n", [mochi_repr(Result_4)]),
        Result_4
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('LOWER', "abcdefghijklmnopqrstuvwxyz"),
    erlang:put('UPPER', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    erlang:put('PUNCT', "!\"#$%&'()*+,-./:;<=>?@[\\]^_{|}~"),
    io:format("~ts~n", [mochi_repr(term_frequency("to", "To be, or not to be"))]),
    erlang:put('corpus', "This is the first document in the corpus.\nThIs is the second document in the corpus.\nTHIS is the third document in the corpus."),
    io:format("~ts~n", [mochi_str(document_frequency("first", "This is the first document in the corpus.\nThIs is the second document in the corpus.\nTHIS is the third document in the corpus."))]),
    erlang:put('idf_val', inverse_document_frequency(1, 3, false)),
    tf_idf(2, erlang:get('idf_val')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
