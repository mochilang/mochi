#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, mean/1, stump_predict/2, train_stump/2, boost/3, predict/2, main/0]).

% Generated by Mochi transpiler v0.10.66 (f6dfa6fffe)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

mean(Xs) ->
    try
        Sum = 0.0,
        I = 0,
        Fun = fun Fun_loop(I, Sum, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            Sum_2 = (Sum + (case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, Xs);
        _ -> {I, Sum, Xs}
    end
end,
{I_2, Sum_2, Xs} = Fun(I, Sum, Xs),
        mochi_safe_div(Sum_2, mochi_safe_mul(erlang:length(Xs), 1.0))
    catch {return, RetCatch} -> RetCatch end.

stump_predict(S, X) ->
    try
        (case ((case erlang:is_map(X) of true -> maps:get(maps:get("feature", S, nil), X, nil); _ -> case maps:get("feature", S, nil) < 0 of true -> mochi_nth(erlang:length(X) + maps:get("feature", S, nil) + 1, X); _ -> mochi_nth(maps:get("feature", S, nil) + 1, X) end end) < maps:get("threshold", S, nil)) of
    true -> maps:get("left", S, nil);
    _ -> maps:get("right", S, nil)
end)
    catch {return, RetCatch} -> RetCatch end.

train_stump(Features, Residuals) ->
    try
        Best_feature = 0,
        Best_threshold = 0.0,
        Best_error = 1000000000.0,
        Best_left = 0.0,
        Best_right = 0.0,
        Num_features = erlang:length((case erlang:is_map(Features) of true -> maps:get(0, Features, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Features) + 0 + 1, Features); _ -> mochi_nth(0 + 1, Features) end end)),
        F = 0,
        Fun_6 = fun Fun_6_loop(Best_error, Best_feature, Best_left, Best_right, Best_threshold, F, Features, Num_features, Residuals) ->
    case (F < Num_features) of
        true ->
            I_3 = 0,
            Fun_5 = fun Fun_5_loop(Best_error, Best_feature, Best_left, Best_right, Best_threshold, F, Features, I_3, Num_features, Residuals) ->
    case (I_3 < erlang:length(Features)) of
        true ->
            Threshold = (case erlang:is_map((case erlang:is_map(Features) of true -> maps:get(I_3, Features, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Features) + I_3 + 1, Features); _ -> mochi_nth(I_3 + 1, Features) end end)) of true -> maps:get(F, (case erlang:is_map(Features) of true -> maps:get(I_3, Features, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Features) + I_3 + 1, Features); _ -> mochi_nth(I_3 + 1, Features) end end), nil); _ -> case F < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Features) of true -> maps:get(I_3, Features, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Features) + I_3 + 1, Features); _ -> mochi_nth(I_3 + 1, Features) end end)) + F + 1, (case erlang:is_map(Features) of true -> maps:get(I_3, Features, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Features) + I_3 + 1, Features); _ -> mochi_nth(I_3 + 1, Features) end end)); _ -> mochi_nth(F + 1, (case erlang:is_map(Features) of true -> maps:get(I_3, Features, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Features) + I_3 + 1, Features); _ -> mochi_nth(I_3 + 1, Features) end end)) end end),
            Left = [],
            Right = [],
            J = 0,
            Fun_2 = fun Fun_2_loop(Best_error, Best_feature, Best_left, Best_right, Best_threshold, F, Features, I_3, J, Left, Num_features, Residuals, Right, Threshold) ->
    case (J < erlang:length(Features)) of
        true ->
            Right_3 = (case ((case erlang:is_map((case erlang:is_map(Features) of true -> maps:get(J, Features, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Features) + J + 1, Features); _ -> mochi_nth(J + 1, Features) end end)) of true -> maps:get(F, (case erlang:is_map(Features) of true -> maps:get(J, Features, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Features) + J + 1, Features); _ -> mochi_nth(J + 1, Features) end end), nil); _ -> case F < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Features) of true -> maps:get(J, Features, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Features) + J + 1, Features); _ -> mochi_nth(J + 1, Features) end end)) + F + 1, (case erlang:is_map(Features) of true -> maps:get(J, Features, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Features) + J + 1, Features); _ -> mochi_nth(J + 1, Features) end end)); _ -> mochi_nth(F + 1, (case erlang:is_map(Features) of true -> maps:get(J, Features, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Features) + J + 1, Features); _ -> mochi_nth(J + 1, Features) end end)) end end) < Threshold) of
        true -> Left_2 = lists:append(Left, [(case erlang:is_map(Residuals) of true -> maps:get(J, Residuals, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Residuals) + J + 1, Residuals); _ -> mochi_nth(J + 1, Residuals) end end)]),
            Left_3 = Left_2,
            Right;
        _ -> Right_2 = lists:append(Right, [(case erlang:is_map(Residuals) of true -> maps:get(J, Residuals, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Residuals) + J + 1, Residuals); _ -> mochi_nth(J + 1, Residuals) end end)]),
            Left_3 = Left,
            Right_2
    end),
            J_2 = (J + 1),
            Fun_2_loop(Best_error, Best_feature, Best_left, Best_right, Best_threshold, F, Features, I_3, J_2, Left_3, Num_features, Residuals, Right_3, Threshold);
        _ -> {Best_error, Best_feature, Best_left, Best_right, Best_threshold, F, Features, I_3, J, Left, Num_features, Residuals, Right, Threshold}
    end
end,
{Best_error, Best_feature, Best_left, Best_right, Best_threshold, F, Features, I_3, J_2, Left_3, Num_features, Residuals, Right_3, Threshold} = Fun_2(Best_error, Best_feature, Best_left, Best_right, Best_threshold, F, Features, I_3, J, Left, Num_features, Residuals, Right, Threshold),
            Right_mean_2 = (case ((erlang:length(Left_3) /= 0) andalso (erlang:length(Right_3) /= 0)) of
        true -> Left_mean = mean(Left_3),
            Right_mean = mean(Right_3),
            Err = 0.0,
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(Best_error, Best_feature, Best_left, Best_right, Best_threshold, Err, F, Features, I_3, J_3, Left_3, Left_mean, Num_features, Residuals, Right_3, Right_mean, Threshold) ->
    case (J_3 < erlang:length(Features)) of
        true ->
            Pred = (case ((case erlang:is_map((case erlang:is_map(Features) of true -> maps:get(J_3, Features, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Features) + J_3 + 1, Features); _ -> mochi_nth(J_3 + 1, Features) end end)) of true -> maps:get(F, (case erlang:is_map(Features) of true -> maps:get(J_3, Features, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Features) + J_3 + 1, Features); _ -> mochi_nth(J_3 + 1, Features) end end), nil); _ -> case F < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Features) of true -> maps:get(J_3, Features, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Features) + J_3 + 1, Features); _ -> mochi_nth(J_3 + 1, Features) end end)) + F + 1, (case erlang:is_map(Features) of true -> maps:get(J_3, Features, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Features) + J_3 + 1, Features); _ -> mochi_nth(J_3 + 1, Features) end end)); _ -> mochi_nth(F + 1, (case erlang:is_map(Features) of true -> maps:get(J_3, Features, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Features) + J_3 + 1, Features); _ -> mochi_nth(J_3 + 1, Features) end end)) end end) < Threshold) of
    true -> Left_mean;
    _ -> Right_mean
end),
            Diff = ((case erlang:is_map(Residuals) of true -> maps:get(J_3, Residuals, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Residuals) + J_3 + 1, Residuals); _ -> mochi_nth(J_3 + 1, Residuals) end end) - Pred),
            Err_2 = (Err + mochi_safe_mul(Diff, Diff)),
            J_4 = (J_3 + 1),
            Fun_3_loop(Best_error, Best_feature, Best_left, Best_right, Best_threshold, Err_2, F, Features, I_3, J_4, Left_3, Left_mean, Num_features, Residuals, Right_3, Right_mean, Threshold);
        _ -> {Best_error, Best_feature, Best_left, Best_right, Best_threshold, Err, F, Features, I_3, J_3, Left_3, Left_mean, Num_features, Residuals, Right_3, Right_mean, Threshold}
    end
end,
{Best_error, Best_feature, Best_left, Best_right, Best_threshold, Err_2, F, Features, I_3, J_4, Left_3, Left_mean, Num_features, Residuals, Right_3, Right_mean, Threshold} = Fun_3(Best_error, Best_feature, Best_left, Best_right, Best_threshold, Err, F, Features, I_3, J_3, Left_3, Left_mean, Num_features, Residuals, Right_3, Right_mean, Threshold),
            Best_threshold_3 = (case (Err_2 < Best_error) of
        true -> Best_error_2 = Err_2,
            Best_feature_2 = F,
            Best_threshold_2 = Threshold,
            Best_left_2 = Left_mean,
            Best_right_2 = Right_mean,
            Best_error_3 = Best_error_2,
            Best_feature_3 = Best_feature_2,
            Best_left_3 = Best_left_2,
            Best_right_3 = Best_right_2,
            Best_threshold_2;
        _ -> Best_error_3 = Best_error,
            Best_feature_3 = Best_feature,
            Best_left_3 = Best_left,
            Best_right_3 = Best_right,
            Best_threshold
    end),
            Best_error_4 = Best_error_3,
            Best_feature_4 = Best_feature_3,
            Best_left_4 = Best_left_3,
            Best_right_4 = Best_right_3,
            Best_threshold_4 = Best_threshold_3,
            Err_3 = Err_2,
            Fun_4 = Fun_3,
            J_5 = J_4,
            Left_mean_2 = Left_mean,
            Right_mean;
        _ -> Best_error_4 = Best_error,
            Best_feature_4 = Best_feature,
            Best_left_4 = Best_left,
            Best_right_4 = Best_right,
            Best_threshold_4 = Best_threshold,
            Err_3 = nil,
            Fun_4 = Fun_2,
            J_5 = J_2,
            Left_mean_2 = nil,
            nil
    end),
            I_4 = (I_3 + 1),
            Fun_5_loop(Best_error_4, Best_feature_4, Best_left_4, Best_right_4, Best_threshold_4, F, Features, I_4, Num_features, Residuals);
        _ -> {Best_error, Best_feature, Best_left, Best_right, Best_threshold, F, Features, I_3, Num_features, Residuals}
    end
end,
{Best_error_4, Best_feature_4, Best_left_4, Best_right_4, Best_threshold_4, F, Features, I_4, Num_features, Residuals} = Fun_5(Best_error, Best_feature, Best_left, Best_right, Best_threshold, F, Features, I_3, Num_features, Residuals),
            F_2 = (F + 1),
            Fun_6_loop(Best_error_4, Best_feature_4, Best_left_4, Best_right_4, Best_threshold_4, F_2, Features, Num_features, Residuals);
        _ -> {Best_error, Best_feature, Best_left, Best_right, Best_threshold, F, Features, Num_features, Residuals}
    end
end,
{Best_error_4, Best_feature_4, Best_left_4, Best_right_4, Best_threshold_4, F_2, Features, Num_features, Residuals} = Fun_6(Best_error, Best_feature, Best_left, Best_right, Best_threshold, F, Features, Num_features, Residuals),
        #{"feature" => Best_feature_4, "threshold" => Best_threshold_4, "left" => Best_left_4, "right" => Best_right_4}
    catch {return, RetCatch} -> RetCatch end.

boost(Features_2, Targets, Rounds) ->
    try
        Model = [],
        Preds = [],
        I_5 = 0,
        Fun_7 = fun Fun_7_loop(Features_2, I_5, Model, Preds, Rounds, Targets) ->
    case (I_5 < erlang:length(Targets)) of
        true ->
            Preds_2 = lists:append(Preds, [0.0]),
            I_6 = (I_5 + 1),
            Fun_7_loop(Features_2, I_6, Model, Preds_2, Rounds, Targets);
        _ -> {Features_2, I_5, Model, Preds, Rounds, Targets}
    end
end,
{Features_2, I_6, Model, Preds_2, Rounds, Targets} = Fun_7(Features_2, I_5, Model, Preds, Rounds, Targets),
        R = 0,
        Fun_10 = fun Fun_10_loop(Features_2, I_6, Model, Preds_2, R, Rounds, Targets) ->
    case (R < Rounds) of
        true ->
            Residuals_2 = [],
            J_6 = 0,
            Fun_8 = fun Fun_8_loop(Features_2, I_6, J_6, Model, Preds_2, R, Residuals_2, Rounds, Targets) ->
    case (J_6 < erlang:length(Targets)) of
        true ->
            Residuals_3 = lists:append(Residuals_2, [((case erlang:is_map(Targets) of true -> maps:get(J_6, Targets, nil); _ -> case J_6 < 0 of true -> mochi_nth(erlang:length(Targets) + J_6 + 1, Targets); _ -> mochi_nth(J_6 + 1, Targets) end end) - (case erlang:is_map(Preds_2) of true -> maps:get(J_6, Preds_2, nil); _ -> case J_6 < 0 of true -> mochi_nth(erlang:length(Preds_2) + J_6 + 1, Preds_2); _ -> mochi_nth(J_6 + 1, Preds_2) end end))]),
            J_7 = (J_6 + 1),
            Fun_8_loop(Features_2, I_6, J_7, Model, Preds_2, R, Residuals_3, Rounds, Targets);
        _ -> {Features_2, I_6, J_6, Model, Preds_2, R, Residuals_2, Rounds, Targets}
    end
end,
{Features_2, I_6, J_7, Model, Preds_2, R, Residuals_3, Rounds, Targets} = Fun_8(Features_2, I_6, J_6, Model, Preds_2, R, Residuals_2, Rounds, Targets),
            Stump = train_stump(Features_2, Residuals_3),
            Model_2 = lists:append(Model, [Stump]),
            J_8 = 0,
            Fun_9 = fun Fun_9_loop(Features_2, I_6, J_8, Model_2, Preds_2, R, Residuals_3, Rounds, Stump, Targets) ->
    case (J_8 < erlang:length(Preds_2)) of
        true ->
            Preds_3 = lists:sublist(Preds_2, J_8) ++ [((case erlang:is_map(Preds_2) of true -> maps:get(J_8, Preds_2, nil); _ -> case J_8 < 0 of true -> mochi_nth(erlang:length(Preds_2) + J_8 + 1, Preds_2); _ -> mochi_nth(J_8 + 1, Preds_2) end end) + stump_predict(Stump, (case erlang:is_map(Features_2) of true -> maps:get(J_8, Features_2, nil); _ -> case J_8 < 0 of true -> mochi_nth(erlang:length(Features_2) + J_8 + 1, Features_2); _ -> mochi_nth(J_8 + 1, Features_2) end end)))] ++ lists:nthtail(J_8 + 1, Preds_2),
            J_9 = (J_8 + 1),
            Fun_9_loop(Features_2, I_6, J_9, Model_2, Preds_3, R, Residuals_3, Rounds, Stump, Targets);
        _ -> {Features_2, I_6, J_8, Model_2, Preds_2, R, Residuals_3, Rounds, Stump, Targets}
    end
end,
{Features_2, I_6, J_9, Model_2, Preds_3, R, Residuals_3, Rounds, Stump, Targets} = Fun_9(Features_2, I_6, J_8, Model_2, Preds_2, R, Residuals_3, Rounds, Stump, Targets),
            R_2 = (R + 1),
            Fun_10_loop(Features_2, I_6, Model_2, Preds_3, R_2, Rounds, Targets);
        _ -> {Features_2, I_6, Model, Preds_2, R, Rounds, Targets}
    end
end,
{Features_2, I_6, Model_2, Preds_3, R_2, Rounds, Targets} = Fun_10(Features_2, I_6, Model, Preds_2, R, Rounds, Targets),
        Model_2
    catch {return, RetCatch} -> RetCatch end.

predict(Model_3, X_2) ->
    try
        Score = 0.0,
        I_7 = 0,
        Fun_11 = fun Fun_11_loop(I_7, Model_3, Score, X_2) ->
    case (I_7 < erlang:length(Model_3)) of
        true ->
            S_2 = (case erlang:is_map(Model_3) of true -> maps:get(I_7, Model_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Model_3) + I_7 + 1, Model_3); _ -> mochi_nth(I_7 + 1, Model_3) end end),
            Score_4 = (case ((case erlang:is_map(X_2) of true -> maps:get(maps:get("feature", S_2, nil), X_2, nil); _ -> case maps:get("feature", S_2, nil) < 0 of true -> mochi_nth(erlang:length(X_2) + maps:get("feature", S_2, nil) + 1, X_2); _ -> mochi_nth(maps:get("feature", S_2, nil) + 1, X_2) end end) < maps:get("threshold", S_2, nil)) of
        true -> Score_2 = (Score + maps:get("left", S_2, nil)),
            Score_2;
        _ -> Score_3 = (Score + maps:get("right", S_2, nil)),
            Score_3
    end),
            I_8 = (I_7 + 1),
            Fun_11_loop(I_8, Model_3, Score_4, X_2);
        _ -> {I_7, Model_3, Score, X_2}
    end
end,
{I_8, Model_3, Score_4, X_2} = Fun_11(I_7, Model_3, Score, X_2),
        Score_4
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Features_3 = [[5.1, 3.5], [4.9, 3.0], [6.2, 3.4], [5.9, 3.0]],
        Targets_2 = [0, 0, 1, 1],
        Model_4 = boost(Features_3, Targets_2, 3),
        Out = "",
        I_9 = 0,
        Fun_12 = fun Fun_12_loop(Features_3, I_9, Model_4, Out, Targets_2) ->
    case (I_9 < erlang:length(Features_3)) of
        true ->
            S_3 = predict(Model_4, (case erlang:is_map(Features_3) of true -> maps:get(I_9, Features_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Features_3) + I_9 + 1, Features_3); _ -> mochi_nth(I_9 + 1, Features_3) end end)),
            Label = (case (S_3 >= 0.5) of
    true -> 1;
    _ -> 0
end),
            Out_4 = (case (I_9 == 0) of
        true -> Out_2 = mochi_str(Label),
            Out_2;
        _ -> Out_3 = ((Out ++ " ") ++ mochi_str(Label)),
            Out_3
    end),
            I_10 = (I_9 + 1),
            Fun_12_loop(Features_3, I_10, Model_4, Out_4, Targets_2);
        _ -> {Features_3, I_9, Model_4, Out, Targets_2}
    end
end,
{Features_3, I_10, Model_4, Out_4, Targets_2} = Fun_12(Features_3, I_9, Model_4, Out, Targets_2),
        io:format("~ts~n", [mochi_repr(Out_4)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
