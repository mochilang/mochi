#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, sinapprox/1, cosapprox/1, expapprox/1, ln/1, log10/1, sqrtapprox/1, absf/1, normalize/1, dft/2, triangular_filters/2, dot/2, discrete_cosine_transform/2, mfcc/3]).

% Generated by Mochi transpiler v0.10.67 (24b0b70a80)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.

sinapprox(X) ->
    try
        Term = X,
        Sum = X,
        N = 1,
        Fun = fun Fun_loop(N, Sum, Term, X) ->
    case (N =< 10) of
        true ->
            Denom = float(((2 * N) * ((2 * N) + 1))),
            Term_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term, X), X), Denom),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(N_2, Sum_2, Term_2, X);
        _ -> {N, Sum, Term, X}
    end
end,
{N_2, Sum_2, Term_2, X} = Fun(N, Sum, Term, X),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

cosapprox(X_2) ->
    try
        Term_3 = 1.0,
        Sum_3 = 1.0,
        N_3 = 1,
        Fun_2 = fun Fun_2_loop(N_3, Sum_3, Term_3, X_2) ->
    case (N_3 =< 10) of
        true ->
            Denom_2 = float((((2 * N_3) - 1) * (2 * N_3))),
            Term_4 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term_3, X_2), X_2), Denom_2),
            Sum_4 = (Sum_3 + Term_4),
            N_4 = (N_3 + 1),
            Fun_2_loop(N_4, Sum_4, Term_4, X_2);
        _ -> {N_3, Sum_3, Term_3, X_2}
    end
end,
{N_4, Sum_4, Term_4, X_2} = Fun_2(N_3, Sum_3, Term_3, X_2),
        Sum_4
    catch {return, RetCatch} -> RetCatch end.

expapprox(X_3) ->
    try
        Sum_5 = 1.0,
        Term_5 = 1.0,
        N_5 = 1,
        Fun_3 = fun Fun_3_loop(N_5, Sum_5, Term_5, X_3) ->
    case (N_5 < 10) of
        true ->
            Term_6 = mochi_safe_div(mochi_safe_mul(Term_5, X_3), float(N_5)),
            Sum_6 = (Sum_5 + Term_6),
            N_6 = (N_5 + 1),
            Fun_3_loop(N_6, Sum_6, Term_6, X_3);
        _ -> {N_5, Sum_5, Term_5, X_3}
    end
end,
{N_6, Sum_6, Term_6, X_3} = Fun_3(N_5, Sum_5, Term_5, X_3),
        Sum_6
    catch {return, RetCatch} -> RetCatch end.

ln(X_4) ->
    try
        T = mochi_safe_div((X_4 - 1.0), (X_4 + 1.0)),
        Term_7 = T,
        Sum_7 = 0.0,
        N_7 = 1,
        Fun_4 = fun Fun_4_loop(N_7, Sum_7, T, Term_7, X_4) ->
    case (N_7 =< 19) of
        true ->
            Sum_8 = (Sum_7 + mochi_safe_div(Term_7, float(N_7))),
            Term_8 = mochi_safe_mul(mochi_safe_mul(Term_7, T), T),
            N_8 = (N_7 + 2),
            Fun_4_loop(N_8, Sum_8, T, Term_8, X_4);
        _ -> {N_7, Sum_7, T, Term_7, X_4}
    end
end,
{N_8, Sum_8, T, Term_8, X_4} = Fun_4(N_7, Sum_7, T, Term_7, X_4),
        mochi_safe_mul(2.0, Sum_8)
    catch {return, RetCatch} -> RetCatch end.

log10(X_5) ->
    try
        mochi_safe_div(ln(X_5), ln(10.0))
    catch {return, RetCatch} -> RetCatch end.

sqrtapprox(X_6) ->
    try
        case (X_6 =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X_6,
        I = 0,
        Fun_5 = fun Fun_5_loop(Guess, I, X_6) ->
    case (I < 10) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_6, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_5_loop(Guess_2, I_2, X_6);
        _ -> {Guess, I, X_6}
    end
end,
{Guess_2, I_2, X_6} = Fun_5(Guess, I, X_6),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

absf(X_7) ->
    try
        (case (X_7 < 0.0) of
    true -> -X_7;
    _ -> X_7
end)
    catch {return, RetCatch} -> RetCatch end.

normalize(Audio) ->
    try
        Max_val = 0.0,
        I_3 = 0,
        Fun_6 = fun Fun_6_loop(Audio, I_3, Max_val) ->
    case (I_3 < erlang:length(Audio)) of
        true ->
            V = absf((case erlang:is_map(Audio) of true -> maps:get(I_3, Audio, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Audio) + I_3 + 1, Audio); _ -> mochi_nth(I_3 + 1, Audio) end end)),
            Max_val_3 = (case (V > Max_val) of
        true -> Max_val_2 = V,
            Max_val_2;
        _ -> Max_val
    end),
            I_4 = (I_3 + 1),
            Fun_6_loop(Audio, I_4, Max_val_3);
        _ -> {Audio, I_3, Max_val}
    end
end,
{Audio, I_4, Max_val_3} = Fun_6(Audio, I_3, Max_val),
        Res = [],
        I_5 = 0,
        Fun_7 = fun Fun_7_loop(Audio, I_5, Max_val_3, Res) ->
    case (I_5 < erlang:length(Audio)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [mochi_safe_div((case erlang:is_map(Audio) of true -> maps:get(I_5, Audio, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Audio) + I_5 + 1, Audio); _ -> mochi_nth(I_5 + 1, Audio) end end), Max_val_3)]),
            I_6 = (I_5 + 1),
            Fun_7_loop(Audio, I_6, Max_val_3, Res_2);
        _ -> {Audio, I_5, Max_val_3, Res}
    end
end,
{Audio, I_6, Max_val_3, Res_2} = Fun_7(Audio, I_5, Max_val_3, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

dft(Frame, Bins) ->
    try
        N = erlang:length(Frame),
        Spec = [],
        K = 0,
        Fun_9 = fun Fun_9_loop(N, Bins, Frame, K, Spec) ->
    case (K < Bins) of
        true ->
            Real = 0.0,
            Imag = 0.0,
            N_9 = 0,
            Fun_8 = fun Fun_8_loop(N, Bins, Frame, Imag, K, N_9, Real, Spec) ->
    case (N_9 < N) of
        true ->
            Angle = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(-2.0, 3.141592653589793), float(K)), float(N_9)), float(N)),
            Real_2 = (Real + mochi_safe_mul((case erlang:is_map(Frame) of true -> maps:get(N_9, Frame, nil); _ -> case N_9 < 0 of true -> mochi_nth(erlang:length(Frame) + N_9 + 1, Frame); _ -> mochi_nth(N_9 + 1, Frame) end end), cosapprox(Angle))),
            Imag_2 = (Imag + mochi_safe_mul((case erlang:is_map(Frame) of true -> maps:get(N_9, Frame, nil); _ -> case N_9 < 0 of true -> mochi_nth(erlang:length(Frame) + N_9 + 1, Frame); _ -> mochi_nth(N_9 + 1, Frame) end end), sinapprox(Angle))),
            N_10 = (N_9 + 1),
            Fun_8_loop(N, Bins, Frame, Imag_2, K, N_10, Real_2, Spec);
        _ -> {N, Bins, Frame, Imag, K, N_9, Real, Spec}
    end
end,
{N, Bins, Frame, Imag_2, K, N_10, Real_2, Spec} = Fun_8(N, Bins, Frame, Imag, K, N_9, Real, Spec),
            Spec_2 = lists:append((case Spec of nil -> []; _ -> Spec end), [(mochi_safe_mul(Real_2, Real_2) + mochi_safe_mul(Imag_2, Imag_2))]),
            K_2 = (K + 1),
            Fun_9_loop(N, Bins, Frame, K_2, Spec_2);
        _ -> {N, Bins, Frame, K, Spec}
    end
end,
{N, Bins, Frame, K_2, Spec_2} = Fun_9(N, Bins, Frame, K, Spec),
        Spec_2
    catch {return, RetCatch} -> RetCatch end.

triangular_filters(Bins_2, Spectrum_size) ->
    try
        Filters = [],
        B = 0,
        Fun_11 = fun Fun_11_loop(B, Bins_2, Filters, Spectrum_size) ->
    case (B < Bins_2) of
        true ->
            Center = mochi_idiv(((B + 1) * Spectrum_size), (Bins_2 + 1)),
            Filt = [],
            I_7 = 0,
            Fun_10 = fun Fun_10_loop(B, Bins_2, Center, Filt, Filters, I_7, Spectrum_size) ->
    case (I_7 < Spectrum_size) of
        true ->
            V_2 = 0.0,
            V_5 = (case (I_7 =< Center) of
        true -> V_3 = mochi_safe_div(float(I_7), float(Center)),
            V_3;
        _ -> V_4 = mochi_safe_div(float((Spectrum_size - I_7)), float((Spectrum_size - Center))),
            V_4
    end),
            Filt_2 = lists:append((case Filt of nil -> []; _ -> Filt end), [V_5]),
            I_8 = (I_7 + 1),
            Fun_10_loop(B, Bins_2, Center, Filt_2, Filters, I_8, Spectrum_size);
        _ -> {B, Bins_2, Center, Filt, Filters, I_7, Spectrum_size}
    end
end,
{B, Bins_2, Center, Filt_2, Filters, I_8, Spectrum_size} = Fun_10(B, Bins_2, Center, Filt, Filters, I_7, Spectrum_size),
            Filters_2 = lists:append((case Filters of nil -> []; _ -> Filters end), [Filt_2]),
            B_2 = (B + 1),
            Fun_11_loop(B_2, Bins_2, Filters_2, Spectrum_size);
        _ -> {B, Bins_2, Filters, Spectrum_size}
    end
end,
{B_2, Bins_2, Filters_2, Spectrum_size} = Fun_11(B, Bins_2, Filters, Spectrum_size),
        Filters_2
    catch {return, RetCatch} -> RetCatch end.

dot(Mat, Vec) ->
    try
        Res_3 = [],
        I_9 = 0,
        Fun_13 = fun Fun_13_loop(I_9, Mat, Res_3, Vec) ->
    case (I_9 < erlang:length(Mat)) of
        true ->
            Sum_9 = 0.0,
            J = 0,
            Fun_12 = fun Fun_12_loop(I_9, J, Mat, Res_3, Sum_9, Vec) ->
    case (J < erlang:length(Vec)) of
        true ->
            Sum_10 = (Sum_9 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(Mat) of true -> maps:get(I_9, Mat, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Mat) + I_9 + 1, Mat); _ -> mochi_nth(I_9 + 1, Mat) end end)) of true -> maps:get(J, (case erlang:is_map(Mat) of true -> maps:get(I_9, Mat, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Mat) + I_9 + 1, Mat); _ -> mochi_nth(I_9 + 1, Mat) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat) of true -> maps:get(I_9, Mat, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Mat) + I_9 + 1, Mat); _ -> mochi_nth(I_9 + 1, Mat) end end)) + J + 1, (case erlang:is_map(Mat) of true -> maps:get(I_9, Mat, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Mat) + I_9 + 1, Mat); _ -> mochi_nth(I_9 + 1, Mat) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Mat) of true -> maps:get(I_9, Mat, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Mat) + I_9 + 1, Mat); _ -> mochi_nth(I_9 + 1, Mat) end end)) end end), (case erlang:is_map(Vec) of true -> maps:get(J, Vec, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Vec) + J + 1, Vec); _ -> mochi_nth(J + 1, Vec) end end))),
            J_2 = (J + 1),
            Fun_12_loop(I_9, J_2, Mat, Res_3, Sum_10, Vec);
        _ -> {I_9, J, Mat, Res_3, Sum_9, Vec}
    end
end,
{I_9, J_2, Mat, Res_3, Sum_10, Vec} = Fun_12(I_9, J, Mat, Res_3, Sum_9, Vec),
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Sum_10]),
            I_10 = (I_9 + 1),
            Fun_13_loop(I_10, Mat, Res_4, Vec);
        _ -> {I_9, Mat, Res_3, Vec}
    end
end,
{I_10, Mat, Res_4, Vec} = Fun_13(I_9, Mat, Res_3, Vec),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

discrete_cosine_transform(Dct_filter_num, Filter_num) ->
    try
        Basis = [],
        I_11 = 0,
        Fun_15 = fun Fun_15_loop(Basis, Dct_filter_num, Filter_num, I_11) ->
    case (I_11 < Dct_filter_num) of
        true ->
            Row = [],
            J_3 = 0,
            Fun_14 = fun Fun_14_loop(Basis, Dct_filter_num, Filter_num, I_11, J_3, Row) ->
    case (J_3 < Filter_num) of
        true ->
            Row_4 = (case (I_11 == 0) of
        true -> Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [mochi_safe_div(1.0, sqrtapprox(float(Filter_num)))]),
            Angle_3 = nil,
            Row_2;
        _ -> Angle_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(float(((2 * J_3) + 1)), float(I_11)), 3.141592653589793), mochi_safe_mul(2.0, float(Filter_num))),
            Row_3 = lists:append((case Row of nil -> []; _ -> Row end), [mochi_safe_mul(cosapprox(Angle_2), sqrtapprox(mochi_safe_div(2.0, float(Filter_num))))]),
            Angle_3 = Angle_2,
            Row_3
    end),
            J_4 = (J_3 + 1),
            Fun_14_loop(Basis, Dct_filter_num, Filter_num, I_11, J_4, Row_4);
        _ -> {Basis, Dct_filter_num, Filter_num, I_11, J_3, Row}
    end
end,
{Basis, Dct_filter_num, Filter_num, I_11, J_4, Row_4} = Fun_14(Basis, Dct_filter_num, Filter_num, I_11, J_3, Row),
            Basis_2 = lists:append((case Basis of nil -> []; _ -> Basis end), [Row_4]),
            I_12 = (I_11 + 1),
            Fun_15_loop(Basis_2, Dct_filter_num, Filter_num, I_12);
        _ -> {Basis, Dct_filter_num, Filter_num, I_11}
    end
end,
{Basis_2, Dct_filter_num, Filter_num, I_12} = Fun_15(Basis, Dct_filter_num, Filter_num, I_11),
        Basis_2
    catch {return, RetCatch} -> RetCatch end.

mfcc(Audio_2, Bins_3, Dct_num) ->
    try
        Norm = normalize(Audio_2),
        Spec_3 = dft(Norm, (Bins_3 + 2)),
        Filters_3 = triangular_filters(Bins_3, erlang:length(Spec_3)),
        Energies = dot(Filters_3, Spec_3),
        Logfb = [],
        I_13 = 0,
        Fun_16 = fun Fun_16_loop(Audio_2, Bins_3, Dct_num, Energies, Filters_3, I_13, Logfb, Norm, Spec_3) ->
    case (I_13 < erlang:length(Energies)) of
        true ->
            Logfb_2 = lists:append((case Logfb of nil -> []; _ -> Logfb end), [mochi_safe_mul(10.0, log10(((case erlang:is_map(Energies) of true -> maps:get(I_13, Energies, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Energies) + I_13 + 1, Energies); _ -> mochi_nth(I_13 + 1, Energies) end end) + 0.0000000001)))]),
            I_14 = (I_13 + 1),
            Fun_16_loop(Audio_2, Bins_3, Dct_num, Energies, Filters_3, I_14, Logfb_2, Norm, Spec_3);
        _ -> {Audio_2, Bins_3, Dct_num, Energies, Filters_3, I_13, Logfb, Norm, Spec_3}
    end
end,
{Audio_2, Bins_3, Dct_num, Energies, Filters_3, I_14, Logfb_2, Norm, Spec_3} = Fun_16(Audio_2, Bins_3, Dct_num, Energies, Filters_3, I_13, Logfb, Norm, Spec_3),
        Dct_basis = discrete_cosine_transform(Dct_num, Bins_3),
        Res_5 = dot(Dct_basis, Logfb_2),
        Res_7 = (case (erlang:length(Res_5) == 0) of
        true -> Res_6 = [0.0, 0.0, 0.0],
            Res_6;
        _ -> Res_5
    end),
        Res_7
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('sample_rate', 8000),
    erlang:put('size', 16),
    erlang:put('audio', []),
    erlang:put('n', 0),
    Fun_17 = fun Fun_17_loop() ->
    case (erlang:get('n') < 16) of
        true ->
            T_2 = mochi_safe_div(float(erlang:get('n')), float(8000)),
            erlang:put('audio', lists:append((case erlang:get('audio') of nil -> []; _ -> erlang:get('audio') end), [sinapprox(mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(2.0, 3.141592653589793), 440.0), T_2))])),
            erlang:put('n', (erlang:get('n') + 1)),
            Fun_17_loop();
        _ -> {}
    end
end,
{} = Fun_17(),
    erlang:put('coeffs', mfcc(erlang:get('audio'), 5, 3)),
    Fun_18 = fun Fun_18_loop(List) ->
    case List of
        [] -> {};
        [C|C_rest] ->
            io:format("~ts~n", [mochi_repr(C)]),
            Fun_18_loop(C_rest);
        _ -> {}
    end
end,
{} = Fun_18(erlang:get('coeffs')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
