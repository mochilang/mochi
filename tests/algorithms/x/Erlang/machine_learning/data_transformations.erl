#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, floor/1, pow10/1, round/2, sqrtapprox/1, mean/1, stdev/1, normalization/2, standardization/2]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

floor(X) ->
    try
        I = mochi_to_int(X),
        case (float(I) > X) of
        true -> I_2 = (I - 1),
            I_3 = I_2;
        _ -> I_3 = I
    end,
        float(I_3)
    catch {return, Ret} -> Ret end.

pow10(N) ->
    try
        Result = 1.0,
        I_4 = 0,
        Fun = fun Fun_loop(I_4, N, Result) ->
    case (I_4 < N) of
        true ->
            Result_2 = mochi_safe_mul(Result, 10.0),
            I_5 = (I_4 + 1),
            Fun_loop(I_5, N, Result_2);
        _ -> {I_4, N, Result}
    end
end,
{I_5, N, Result_2} = Fun(I_4, N, Result),
        Result_2
    catch {return, Ret} -> Ret end.

round(X_2, N_2) ->
    try
        M = pow10(N_2),
        Y = float(floor((mochi_safe_mul(X_2, M) + 0.5))),
        mochi_safe_div(Y, M)
    catch {return, Ret} -> Ret end.

sqrtapprox(X_3) ->
    try
        Guess = X_3,
        I_6 = 0,
        Fun_2 = fun Fun_2_loop(Guess, I_6, X_3) ->
    case (I_6 < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_3, Guess)), 2.0),
            I_7 = (I_6 + 1),
            Fun_2_loop(Guess_2, I_7, X_3);
        _ -> {Guess, I_6, X_3}
    end
end,
{Guess_2, I_7, X_3} = Fun_2(Guess, I_6, X_3),
        Guess_2
    catch {return, Ret} -> Ret end.

mean(Data) ->
    try
        Total = 0.0,
        I_8 = 0,
        N_3 = erlang:length(Data),
        Fun_3 = fun Fun_3_loop(Data, I_8, N_3, Total) ->
    case (I_8 < N_3) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Data) of true -> maps:get(I_8, Data, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Data) + I_8 + 1, Data); _ -> mochi_nth(I_8 + 1, Data) end end)),
            I_9 = (I_8 + 1),
            Fun_3_loop(Data, I_9, N_3, Total_2);
        _ -> {Data, I_8, N_3, Total}
    end
end,
{Data, I_9, N_3, Total_2} = Fun_3(Data, I_8, N_3, Total),
        mochi_safe_div(Total_2, float(N_3))
    catch {return, Ret} -> Ret end.

stdev(Data_2) ->
    try
        N_4 = erlang:length(Data_2),
        case (N_4 =< 1) of
        true -> erlang:error("data length must be > 1");
        _ -> ok
    end,
        M_2 = mean(Data_2),
        Sum_sq = 0.0,
        I_10 = 0,
        Fun_4 = fun Fun_4_loop(Data_2, I_10, M_2, N_4, Sum_sq) ->
    case (I_10 < N_4) of
        true ->
            Diff = ((case erlang:is_map(Data_2) of true -> maps:get(I_10, Data_2, nil); _ -> case I_10 < 0 of true -> mochi_nth(erlang:length(Data_2) + I_10 + 1, Data_2); _ -> mochi_nth(I_10 + 1, Data_2) end end) - M_2),
            Sum_sq_2 = (Sum_sq + mochi_safe_mul(Diff, Diff)),
            I_11 = (I_10 + 1),
            Fun_4_loop(Data_2, I_11, M_2, N_4, Sum_sq_2);
        _ -> {Data_2, I_10, M_2, N_4, Sum_sq}
    end
end,
{Data_2, I_11, M_2, N_4, Sum_sq_2} = Fun_4(Data_2, I_10, M_2, N_4, Sum_sq),
        sqrtapprox(mochi_safe_div(Sum_sq_2, float((N_4 - 1))))
    catch {return, Ret} -> Ret end.

normalization(Data_3, Ndigits) ->
    try
        X_min = float(lists:min(Data_3)),
        X_max = float(lists:max(Data_3)),
        Denom = (X_max - X_min),
        Result_3 = [],
        I_12 = 0,
        N_5 = erlang:length(Data_3),
        Fun_5 = fun Fun_5_loop(Data_3, Denom, I_12, N_5, Ndigits, Result_3, X_max, X_min) ->
    case (I_12 < N_5) of
        true ->
            Norm = mochi_safe_div(((case erlang:is_map(Data_3) of true -> maps:get(I_12, Data_3, nil); _ -> case I_12 < 0 of true -> mochi_nth(erlang:length(Data_3) + I_12 + 1, Data_3); _ -> mochi_nth(I_12 + 1, Data_3) end end) - X_min), Denom),
            Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [round(Norm, Ndigits)]),
            I_13 = (I_12 + 1),
            Fun_5_loop(Data_3, Denom, I_13, N_5, Ndigits, Result_4, X_max, X_min);
        _ -> {Data_3, Denom, I_12, N_5, Ndigits, Result_3, X_max, X_min}
    end
end,
{Data_3, Denom, I_13, N_5, Ndigits, Result_4, X_max, X_min} = Fun_5(Data_3, Denom, I_12, N_5, Ndigits, Result_3, X_max, X_min),
        Result_4
    catch {return, Ret} -> Ret end.

standardization(Data_4, Ndigits_2) ->
    try
        Mu = mean(Data_4),
        Sigma = stdev(Data_4),
        Result_5 = [],
        I_14 = 0,
        N_6 = erlang:length(Data_4),
        Fun_6 = fun Fun_6_loop(Data_4, I_14, Mu, N_6, Ndigits_2, Result_5, Sigma) ->
    case (I_14 < N_6) of
        true ->
            Z = mochi_safe_div(((case erlang:is_map(Data_4) of true -> maps:get(I_14, Data_4, nil); _ -> case I_14 < 0 of true -> mochi_nth(erlang:length(Data_4) + I_14 + 1, Data_4); _ -> mochi_nth(I_14 + 1, Data_4) end end) - Mu), Sigma),
            Result_6 = lists:append((case Result_5 of nil -> []; _ -> Result_5 end), [round(Z, Ndigits_2)]),
            I_15 = (I_14 + 1),
            Fun_6_loop(Data_4, I_15, Mu, N_6, Ndigits_2, Result_6, Sigma);
        _ -> {Data_4, I_14, Mu, N_6, Ndigits_2, Result_5, Sigma}
    end
end,
{Data_4, I_15, Mu, N_6, Ndigits_2, Result_6, Sigma} = Fun_6(Data_4, I_14, Mu, N_6, Ndigits_2, Result_5, Sigma),
        Result_6
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(normalization([2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3))]),
    io:format("~ts~n", [mochi_str(normalization([5.0, 10.0, 15.0, 20.0, 25.0], 3))]),
    io:format("~ts~n", [mochi_str(standardization([2.0, 7.0, 10.0, 20.0, 30.0, 50.0], 3))]),
    io:format("~ts~n", [mochi_str(standardization([5.0, 10.0, 15.0, 20.0, 25.0], 3))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
