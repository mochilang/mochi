#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, rand/0, random/0, mod/2, cos/1, sqrtapprox/1, ln/1, gaussian_distribution/3, y_generator/2, calculate_mean/2, calculate_probabilities/2, calculate_variance/3, predict_y_values/4, accuracy/2, main/0]).

% Generated by Mochi transpiler v0.10.67 (24b0b70a80)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

rand() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        erlang:get('seed')
    catch {return, RetCatch} -> RetCatch end.

random() ->
    try
        mochi_safe_div(float(rand()), 2147483648.0)
    catch {return, RetCatch} -> RetCatch end.

mod(X, M) ->
    try
        (X - mochi_safe_mul(float(mochi_to_int(mochi_safe_div(X, M))), M))
    catch {return, RetCatch} -> RetCatch end.

cos(X_2) ->
    try
        Y = (mod((X_2 + 3.141592653589793), 6.283185307179586) - 3.141592653589793),
        Y2 = mochi_safe_mul(Y, Y),
        Y4 = mochi_safe_mul(Y2, Y2),
        Y6 = mochi_safe_mul(Y4, Y2),
        (((1.0 - mochi_safe_div(Y2, 2.0)) + mochi_safe_div(Y4, 24.0)) - mochi_safe_div(Y6, 720.0))
    catch {return, RetCatch} -> RetCatch end.

sqrtapprox(X_3) ->
    try
        case (X_3 =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X_3,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_3) ->
    case (I < 10) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_3, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_3);
        _ -> {Guess, I, X_3}
    end
end,
{Guess_2, I_2, X_3} = Fun(Guess, I, X_3),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

ln(X_4) ->
    try
        T = mochi_safe_div((X_4 - 1.0), (X_4 + 1.0)),
        Term = T,
        Sum = 0.0,
        N = 1,
        Fun_2 = fun Fun_2_loop(N, Sum, T, Term, X_4) ->
    case (N =< 19) of
        true ->
            Sum_2 = (Sum + mochi_safe_div(Term, float(N))),
            Term_2 = mochi_safe_mul(mochi_safe_mul(Term, T), T),
            N_2 = (N + 2),
            Fun_2_loop(N_2, Sum_2, T, Term_2, X_4);
        _ -> {N, Sum, T, Term, X_4}
    end
end,
{N_2, Sum_2, T, Term_2, X_4} = Fun_2(N, Sum, T, Term, X_4),
        mochi_safe_mul(2.0, Sum_2)
    catch {return, RetCatch} -> RetCatch end.

gaussian_distribution(Mean, Std_dev, Instance_count) ->
    try
        Res = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, Instance_count, Mean, Res, Std_dev) ->
    case (I_3 < Instance_count) of
        true ->
            U1 = random(),
            U2 = random(),
            R = sqrtapprox(mochi_safe_mul(-2.0, ln(U1))),
            Theta = mochi_safe_mul(6.283185307179586, U2),
            Z = mochi_safe_mul(R, cos(Theta)),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(Mean + mochi_safe_mul(Z, Std_dev))]),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Instance_count, Mean, Res_2, Std_dev);
        _ -> {I_3, Instance_count, Mean, Res, Std_dev}
    end
end,
{I_4, Instance_count, Mean, Res_2, Std_dev} = Fun_3(I_3, Instance_count, Mean, Res, Std_dev),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

y_generator(Class_count, Instance_count_2) ->
    try
        Res_3 = [],
        K = 0,
        Fun_5 = fun Fun_5_loop(Class_count, Instance_count_2, K, Res_3) ->
    case (K < Class_count) of
        true ->
            I_5 = 0,
            Fun_4 = fun Fun_4_loop(Class_count, I_5, Instance_count_2, K, Res_3) ->
    case (I_5 < (case erlang:is_map(Instance_count_2) of true -> maps:get(K, Instance_count_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Instance_count_2) + K + 1, Instance_count_2); _ -> mochi_nth(K + 1, Instance_count_2) end end)) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [K]),
            I_6 = (I_5 + 1),
            Fun_4_loop(Class_count, I_6, Instance_count_2, K, Res_4);
        _ -> {Class_count, I_5, Instance_count_2, K, Res_3}
    end
end,
{Class_count, I_6, Instance_count_2, K, Res_4} = Fun_4(Class_count, I_5, Instance_count_2, K, Res_3),
            K_2 = (K + 1),
            Fun_5_loop(Class_count, Instance_count_2, K_2, Res_4);
        _ -> {Class_count, Instance_count_2, K, Res_3}
    end
end,
{Class_count, Instance_count_2, K_2, Res_4} = Fun_5(Class_count, Instance_count_2, K, Res_3),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

calculate_mean(Instance_count_3, Items) ->
    try
        Total = 0.0,
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(I_7, Instance_count_3, Items, Total) ->
    case (I_7 < Instance_count_3) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Items) of true -> maps:get(I_7, Items, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Items) + I_7 + 1, Items); _ -> mochi_nth(I_7 + 1, Items) end end)),
            I_8 = (I_7 + 1),
            Fun_6_loop(I_8, Instance_count_3, Items, Total_2);
        _ -> {I_7, Instance_count_3, Items, Total}
    end
end,
{I_8, Instance_count_3, Items, Total_2} = Fun_6(I_7, Instance_count_3, Items, Total),
        mochi_safe_div(Total_2, float(Instance_count_3))
    catch {return, RetCatch} -> RetCatch end.

calculate_probabilities(Instance_count_4, Total_count) ->
    try
        mochi_safe_div(float(Instance_count_4), float(Total_count))
    catch {return, RetCatch} -> RetCatch end.

calculate_variance(Items_2, Means, Total_count_2) ->
    try
        Squared_diff = [],
        I_9 = 0,
        Fun_8 = fun Fun_8_loop(I_9, Items_2, Means, Squared_diff, Total_count_2) ->
    case (I_9 < erlang:length(Items_2)) of
        true ->
            J = 0,
            Fun_7 = fun Fun_7_loop(I_9, Items_2, J, Means, Squared_diff, Total_count_2) ->
    case (J < erlang:length((case erlang:is_map(Items_2) of true -> maps:get(I_9, Items_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Items_2) + I_9 + 1, Items_2); _ -> mochi_nth(I_9 + 1, Items_2) end end))) of
        true ->
            Diff = ((case erlang:is_map((case erlang:is_map(Items_2) of true -> maps:get(I_9, Items_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Items_2) + I_9 + 1, Items_2); _ -> mochi_nth(I_9 + 1, Items_2) end end)) of true -> maps:get(J, (case erlang:is_map(Items_2) of true -> maps:get(I_9, Items_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Items_2) + I_9 + 1, Items_2); _ -> mochi_nth(I_9 + 1, Items_2) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Items_2) of true -> maps:get(I_9, Items_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Items_2) + I_9 + 1, Items_2); _ -> mochi_nth(I_9 + 1, Items_2) end end)) + J + 1, (case erlang:is_map(Items_2) of true -> maps:get(I_9, Items_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Items_2) + I_9 + 1, Items_2); _ -> mochi_nth(I_9 + 1, Items_2) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Items_2) of true -> maps:get(I_9, Items_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Items_2) + I_9 + 1, Items_2); _ -> mochi_nth(I_9 + 1, Items_2) end end)) end end) - (case erlang:is_map(Means) of true -> maps:get(I_9, Means, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Means) + I_9 + 1, Means); _ -> mochi_nth(I_9 + 1, Means) end end)),
            Squared_diff_2 = lists:append((case Squared_diff of nil -> []; _ -> Squared_diff end), [mochi_safe_mul(Diff, Diff)]),
            J_2 = (J + 1),
            Fun_7_loop(I_9, Items_2, J_2, Means, Squared_diff_2, Total_count_2);
        _ -> {I_9, Items_2, J, Means, Squared_diff, Total_count_2}
    end
end,
{I_9, Items_2, J_2, Means, Squared_diff_2, Total_count_2} = Fun_7(I_9, Items_2, J, Means, Squared_diff, Total_count_2),
            I_10 = (I_9 + 1),
            Fun_8_loop(I_10, Items_2, Means, Squared_diff_2, Total_count_2);
        _ -> {I_9, Items_2, Means, Squared_diff, Total_count_2}
    end
end,
{I_10, Items_2, Means, Squared_diff_2, Total_count_2} = Fun_8(I_9, Items_2, Means, Squared_diff, Total_count_2),
        Sum_sq = 0.0,
        K_3 = 0,
        Fun_9 = fun Fun_9_loop(I_10, Items_2, K_3, Means, Squared_diff_2, Sum_sq, Total_count_2) ->
    case (K_3 < erlang:length(Squared_diff_2)) of
        true ->
            Sum_sq_2 = (Sum_sq + (case erlang:is_map(Squared_diff_2) of true -> maps:get(K_3, Squared_diff_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Squared_diff_2) + K_3 + 1, Squared_diff_2); _ -> mochi_nth(K_3 + 1, Squared_diff_2) end end)),
            K_4 = (K_3 + 1),
            Fun_9_loop(I_10, Items_2, K_4, Means, Squared_diff_2, Sum_sq_2, Total_count_2);
        _ -> {I_10, Items_2, K_3, Means, Squared_diff_2, Sum_sq, Total_count_2}
    end
end,
{I_10, Items_2, K_4, Means, Squared_diff_2, Sum_sq_2, Total_count_2} = Fun_9(I_10, Items_2, K_3, Means, Squared_diff_2, Sum_sq, Total_count_2),
        N_classes = erlang:length(Means),
        mochi_safe_mul(mochi_safe_div(1.0, float((Total_count_2 - N_classes))), Sum_sq_2)
    catch {return, RetCatch} -> RetCatch end.

predict_y_values(X_items, Means_2, Variance, Probabilities) ->
    try
        Results = [],
        I_11 = 0,
        Fun_13 = fun Fun_13_loop(I_11, Means_2, Probabilities, Results, Variance, X_items) ->
    case (I_11 < erlang:length(X_items)) of
        true ->
            J_3 = 0,
            Fun_12 = fun Fun_12_loop(I_11, J_3, Means_2, Probabilities, Results, Variance, X_items) ->
    case (J_3 < erlang:length((case erlang:is_map(X_items) of true -> maps:get(I_11, X_items, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(X_items) + I_11 + 1, X_items); _ -> mochi_nth(I_11 + 1, X_items) end end))) of
        true ->
            Temp = [],
            K_5 = 0,
            Fun_10 = fun Fun_10_loop(I_11, J_3, K_5, Means_2, Probabilities, Results, Temp, Variance, X_items) ->
    case (K_5 < erlang:length(X_items)) of
        true ->
            Discr = ((mochi_safe_mul((case erlang:is_map((case erlang:is_map(X_items) of true -> maps:get(I_11, X_items, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(X_items) + I_11 + 1, X_items); _ -> mochi_nth(I_11 + 1, X_items) end end)) of true -> maps:get(J_3, (case erlang:is_map(X_items) of true -> maps:get(I_11, X_items, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(X_items) + I_11 + 1, X_items); _ -> mochi_nth(I_11 + 1, X_items) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(X_items) of true -> maps:get(I_11, X_items, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(X_items) + I_11 + 1, X_items); _ -> mochi_nth(I_11 + 1, X_items) end end)) + J_3 + 1, (case erlang:is_map(X_items) of true -> maps:get(I_11, X_items, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(X_items) + I_11 + 1, X_items); _ -> mochi_nth(I_11 + 1, X_items) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(X_items) of true -> maps:get(I_11, X_items, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(X_items) + I_11 + 1, X_items); _ -> mochi_nth(I_11 + 1, X_items) end end)) end end), mochi_safe_div((case erlang:is_map(Means_2) of true -> maps:get(K_5, Means_2, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(Means_2) + K_5 + 1, Means_2); _ -> mochi_nth(K_5 + 1, Means_2) end end), Variance)) - mochi_safe_div(mochi_safe_mul((case erlang:is_map(Means_2) of true -> maps:get(K_5, Means_2, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(Means_2) + K_5 + 1, Means_2); _ -> mochi_nth(K_5 + 1, Means_2) end end), (case erlang:is_map(Means_2) of true -> maps:get(K_5, Means_2, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(Means_2) + K_5 + 1, Means_2); _ -> mochi_nth(K_5 + 1, Means_2) end end)), mochi_safe_mul(2.0, Variance))) + ln((case erlang:is_map(Probabilities) of true -> maps:get(K_5, Probabilities, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(Probabilities) + K_5 + 1, Probabilities); _ -> mochi_nth(K_5 + 1, Probabilities) end end))),
            Temp_2 = lists:append((case Temp of nil -> []; _ -> Temp end), [Discr]),
            K_6 = (K_5 + 1),
            Fun_10_loop(I_11, J_3, K_6, Means_2, Probabilities, Results, Temp_2, Variance, X_items);
        _ -> {I_11, J_3, K_5, Means_2, Probabilities, Results, Temp, Variance, X_items}
    end
end,
{I_11, J_3, K_6, Means_2, Probabilities, Results, Temp_2, Variance, X_items} = Fun_10(I_11, J_3, K_5, Means_2, Probabilities, Results, Temp, Variance, X_items),
            Max_idx = 0,
            Max_val = (case erlang:is_map(Temp_2) of true -> maps:get(0, Temp_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Temp_2) + 0 + 1, Temp_2); _ -> mochi_nth(0 + 1, Temp_2) end end),
            T_2 = 1,
            Fun_11 = fun Fun_11_loop(I_11, J_3, K_6, Max_idx, Max_val, Means_2, Probabilities, Results, T_2, Temp_2, Variance, X_items) ->
    case (T_2 < erlang:length(Temp_2)) of
        true ->
            Max_val_3 = (case ((case erlang:is_map(Temp_2) of true -> maps:get(T_2, Temp_2, nil); _ -> case T_2 < 0 of true -> mochi_nth(erlang:length(Temp_2) + T_2 + 1, Temp_2); _ -> mochi_nth(T_2 + 1, Temp_2) end end) > Max_val) of
        true -> Max_val_2 = (case erlang:is_map(Temp_2) of true -> maps:get(T_2, Temp_2, nil); _ -> case T_2 < 0 of true -> mochi_nth(erlang:length(Temp_2) + T_2 + 1, Temp_2); _ -> mochi_nth(T_2 + 1, Temp_2) end end),
            Max_idx_2 = T_2,
            Max_idx_3 = Max_idx_2,
            Max_val_2;
        _ -> Max_idx_3 = Max_idx,
            Max_val
    end),
            T_3 = (T_2 + 1),
            Fun_11_loop(I_11, J_3, K_6, Max_idx_3, Max_val_3, Means_2, Probabilities, Results, T_3, Temp_2, Variance, X_items);
        _ -> {I_11, J_3, K_6, Max_idx, Max_val, Means_2, Probabilities, Results, T_2, Temp_2, Variance, X_items}
    end
end,
{I_11, J_3, K_6, Max_idx_3, Max_val_3, Means_2, Probabilities, Results, T_3, Temp_2, Variance, X_items} = Fun_11(I_11, J_3, K_6, Max_idx, Max_val, Means_2, Probabilities, Results, T_2, Temp_2, Variance, X_items),
            Results_2 = lists:append((case Results of nil -> []; _ -> Results end), [Max_idx_3]),
            J_4 = (J_3 + 1),
            Fun_12_loop(I_11, J_4, Means_2, Probabilities, Results_2, Variance, X_items);
        _ -> {I_11, J_3, Means_2, Probabilities, Results, Variance, X_items}
    end
end,
{I_11, J_4, Means_2, Probabilities, Results_2, Variance, X_items} = Fun_12(I_11, J_3, Means_2, Probabilities, Results, Variance, X_items),
            I_12 = (I_11 + 1),
            Fun_13_loop(I_12, Means_2, Probabilities, Results_2, Variance, X_items);
        _ -> {I_11, Means_2, Probabilities, Results, Variance, X_items}
    end
end,
{I_12, Means_2, Probabilities, Results_2, Variance, X_items} = Fun_13(I_11, Means_2, Probabilities, Results, Variance, X_items),
        Results_2
    catch {return, RetCatch} -> RetCatch end.

accuracy(Actual_y, Predicted_y) ->
    try
        Correct = 0,
        I_13 = 0,
        Fun_14 = fun Fun_14_loop(Actual_y, Correct, I_13, Predicted_y) ->
    case (I_13 < erlang:length(Actual_y)) of
        true ->
            Correct_3 = (case ((case erlang:is_map(Actual_y) of true -> maps:get(I_13, Actual_y, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Actual_y) + I_13 + 1, Actual_y); _ -> mochi_nth(I_13 + 1, Actual_y) end end) == (case erlang:is_map(Predicted_y) of true -> maps:get(I_13, Predicted_y, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Predicted_y) + I_13 + 1, Predicted_y); _ -> mochi_nth(I_13 + 1, Predicted_y) end end)) of
        true -> Correct_2 = (Correct + 1),
            Correct_2;
        _ -> Correct
    end),
            I_14 = (I_13 + 1),
            Fun_14_loop(Actual_y, Correct_3, I_14, Predicted_y);
        _ -> {Actual_y, Correct, I_13, Predicted_y}
    end
end,
{Actual_y, Correct_3, I_14, Predicted_y} = Fun_14(Actual_y, Correct, I_13, Predicted_y),
        mochi_safe_mul(mochi_safe_div(float(Correct_3), float(erlang:length(Actual_y))), 100.0)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        erlang:put('seed', 1),
        Counts = [20, 20, 20],
        Means_3 = [5.0, 10.0, 15.0],
        Std_dev_2 = 1.0,
        X_5 = [],
        I_15 = 0,
        Fun_15 = fun Fun_15_loop(Counts, I_15, Means_3, Std_dev_2, X_5) ->
    case (I_15 < erlang:length(Counts)) of
        true ->
            X_6 = lists:append((case X_5 of nil -> []; _ -> X_5 end), [gaussian_distribution((case erlang:is_map(Means_3) of true -> maps:get(I_15, Means_3, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Means_3) + I_15 + 1, Means_3); _ -> mochi_nth(I_15 + 1, Means_3) end end), Std_dev_2, (case erlang:is_map(Counts) of true -> maps:get(I_15, Counts, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Counts) + I_15 + 1, Counts); _ -> mochi_nth(I_15 + 1, Counts) end end))]),
            I_16 = (I_15 + 1),
            Fun_15_loop(Counts, I_16, Means_3, Std_dev_2, X_6);
        _ -> {Counts, I_15, Means_3, Std_dev_2, X_5}
    end
end,
{Counts, I_16, Means_3, Std_dev_2, X_6} = Fun_15(Counts, I_15, Means_3, Std_dev_2, X_5),
        Y_2 = y_generator(erlang:length(Counts), Counts),
        Actual_means = [],
        I_17 = 0,
        Fun_16 = fun Fun_16_loop(Actual_means, Counts, I_17, Means_3, Std_dev_2, X_6, Y_2) ->
    case (I_17 < erlang:length(Counts)) of
        true ->
            Actual_means_2 = lists:append((case Actual_means of nil -> []; _ -> Actual_means end), [calculate_mean((case erlang:is_map(Counts) of true -> maps:get(I_17, Counts, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(Counts) + I_17 + 1, Counts); _ -> mochi_nth(I_17 + 1, Counts) end end), (case erlang:is_map(X_6) of true -> maps:get(I_17, X_6, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(X_6) + I_17 + 1, X_6); _ -> mochi_nth(I_17 + 1, X_6) end end))]),
            I_18 = (I_17 + 1),
            Fun_16_loop(Actual_means_2, Counts, I_18, Means_3, Std_dev_2, X_6, Y_2);
        _ -> {Actual_means, Counts, I_17, Means_3, Std_dev_2, X_6, Y_2}
    end
end,
{Actual_means_2, Counts, I_18, Means_3, Std_dev_2, X_6, Y_2} = Fun_16(Actual_means, Counts, I_17, Means_3, Std_dev_2, X_6, Y_2),
        Total_count_3 = 0,
        I_19 = 0,
        Fun_17 = fun Fun_17_loop(Actual_means_2, Counts, I_19, Means_3, Std_dev_2, Total_count_3, X_6, Y_2) ->
    case (I_19 < erlang:length(Counts)) of
        true ->
            Total_count_4 = (Total_count_3 + (case erlang:is_map(Counts) of true -> maps:get(I_19, Counts, nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(Counts) + I_19 + 1, Counts); _ -> mochi_nth(I_19 + 1, Counts) end end)),
            I_20 = (I_19 + 1),
            Fun_17_loop(Actual_means_2, Counts, I_20, Means_3, Std_dev_2, Total_count_4, X_6, Y_2);
        _ -> {Actual_means_2, Counts, I_19, Means_3, Std_dev_2, Total_count_3, X_6, Y_2}
    end
end,
{Actual_means_2, Counts, I_20, Means_3, Std_dev_2, Total_count_4, X_6, Y_2} = Fun_17(Actual_means_2, Counts, I_19, Means_3, Std_dev_2, Total_count_3, X_6, Y_2),
        Probabilities_2 = [],
        I_21 = 0,
        Fun_18 = fun Fun_18_loop(Actual_means_2, Counts, I_21, Means_3, Probabilities_2, Std_dev_2, Total_count_4, X_6, Y_2) ->
    case (I_21 < erlang:length(Counts)) of
        true ->
            Probabilities_3 = lists:append((case Probabilities_2 of nil -> []; _ -> Probabilities_2 end), [calculate_probabilities((case erlang:is_map(Counts) of true -> maps:get(I_21, Counts, nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(Counts) + I_21 + 1, Counts); _ -> mochi_nth(I_21 + 1, Counts) end end), Total_count_4)]),
            I_22 = (I_21 + 1),
            Fun_18_loop(Actual_means_2, Counts, I_22, Means_3, Probabilities_3, Std_dev_2, Total_count_4, X_6, Y_2);
        _ -> {Actual_means_2, Counts, I_21, Means_3, Probabilities_2, Std_dev_2, Total_count_4, X_6, Y_2}
    end
end,
{Actual_means_2, Counts, I_22, Means_3, Probabilities_3, Std_dev_2, Total_count_4, X_6, Y_2} = Fun_18(Actual_means_2, Counts, I_21, Means_3, Probabilities_2, Std_dev_2, Total_count_4, X_6, Y_2),
        Variance_2 = calculate_variance(X_6, Actual_means_2, Total_count_4),
        Predicted = predict_y_values(X_6, Actual_means_2, Variance_2, Probabilities_3),
        io:format("~ts~n", [mochi_repr(Predicted)]),
        io:format("~ts~n", [mochi_repr(accuracy(Y_2, Predicted))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('TWO_PI', 6.283185307179586),
    erlang:put('seed', 1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
