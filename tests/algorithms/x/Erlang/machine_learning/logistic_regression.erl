#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, expapprox/1, sigmoid/1, dot/2, zeros/1, logistic_reg/4]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

expapprox(X) ->
    try
        Y = X,
        Is_neg = false,
        case (X < 0.0) of
        true -> Is_neg_2 = true,
            Y_2 = -X,
            Is_neg_3 = Is_neg_2,
            Y_3 = Y_2;
        _ -> Is_neg_3 = Is_neg,
            Y_3 = Y
    end,
        Term = 1.0,
        Sum = 1.0,
        N = 1,
        Fun = fun Fun_loop(Is_neg_3, N, Sum, Term, X, Y_3) ->
    case (N < 30) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, Y_3), float(N)),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(Is_neg_3, N_2, Sum_2, Term_2, X, Y_3);
        _ -> {Is_neg_3, N, Sum, Term, X, Y_3}
    end
end,
{Is_neg_3, N_2, Sum_2, Term_2, X, Y_3} = Fun(Is_neg_3, N, Sum, Term, X, Y_3),
        case Is_neg_3 of
        true -> throw({return, mochi_safe_div(1.0, Sum_2)});
        _ -> ok
    end,
        Sum_2
    catch {return, Ret} -> Ret end.

sigmoid(Z) ->
    try
        mochi_safe_div(1.0, (1.0 + expapprox(-Z)))
    catch {return, Ret} -> Ret end.

dot(A, B) ->
    try
        S = 0.0,
        I = 0,
        Fun_2 = fun Fun_2_loop(A, B, I, S) ->
    case (I < erlang:length(A)) of
        true ->
            S_2 = (S + mochi_safe_mul((case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(A) + I + 1, A); _ -> mochi_nth(I + 1, A) end end), (case erlang:is_map(B) of true -> maps:get(I, B, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(B) + I + 1, B); _ -> mochi_nth(I + 1, B) end end))),
            I_2 = (I + 1),
            Fun_2_loop(A, B, I_2, S_2);
        _ -> {A, B, I, S}
    end
end,
{A, B, I_2, S_2} = Fun_2(A, B, I, S),
        S_2
    catch {return, Ret} -> Ret end.

zeros(N_3) ->
    try
        Res = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, N_3, Res) ->
    case (I_3 < N_3) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [0.0]),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, N_3, Res_2);
        _ -> {I_3, N_3, Res}
    end
end,
{I_4, N_3, Res_2} = Fun_3(I_3, N_3, Res),
        Res_2
    catch {return, Ret} -> Ret end.

logistic_reg(Alpha, X_2, Y_4, Iterations) ->
    try
        M = erlang:length(X_2),
        N_4 = erlang:length((case erlang:is_map(X_2) of true -> maps:get(0, X_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(X_2) + 0 + 1, X_2); _ -> mochi_nth(0 + 1, X_2) end end)),
        Theta = zeros(N_4),
        Iter = 0,
        Fun_7 = fun Fun_7_loop(Alpha, Iter, Iterations, M, N_4, Theta, X_2, Y_4) ->
    case (Iter < Iterations) of
        true ->
            Grad = zeros(N_4),
            I_5 = 0,
            Fun_5 = fun Fun_5_loop(Alpha, Grad, I_5, Iter, Iterations, M, N_4, Theta, X_2, Y_4) ->
    case (I_5 < M) of
        true ->
            Z_2 = dot((case erlang:is_map(X_2) of true -> maps:get(I_5, X_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(X_2) + I_5 + 1, X_2); _ -> mochi_nth(I_5 + 1, X_2) end end), Theta),
            H = sigmoid(Z_2),
            K = 0,
            Fun_4 = fun Fun_4_loop(Alpha, Grad, H, I_5, Iter, Iterations, K, M, N_4, Theta, X_2, Y_4, Z_2) ->
    case (K < N_4) of
        true ->
            Grad_2 = lists:sublist(Grad, K) ++ [((case erlang:is_map(Grad) of true -> maps:get(K, Grad, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Grad) + K + 1, Grad); _ -> mochi_nth(K + 1, Grad) end end) + mochi_safe_mul((H - (case erlang:is_map(Y_4) of true -> maps:get(I_5, Y_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Y_4) + I_5 + 1, Y_4); _ -> mochi_nth(I_5 + 1, Y_4) end end)), (case erlang:is_map((case erlang:is_map(X_2) of true -> maps:get(I_5, X_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(X_2) + I_5 + 1, X_2); _ -> mochi_nth(I_5 + 1, X_2) end end)) of true -> maps:get(K, (case erlang:is_map(X_2) of true -> maps:get(I_5, X_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(X_2) + I_5 + 1, X_2); _ -> mochi_nth(I_5 + 1, X_2) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(X_2) of true -> maps:get(I_5, X_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(X_2) + I_5 + 1, X_2); _ -> mochi_nth(I_5 + 1, X_2) end end)) + K + 1, (case erlang:is_map(X_2) of true -> maps:get(I_5, X_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(X_2) + I_5 + 1, X_2); _ -> mochi_nth(I_5 + 1, X_2) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(X_2) of true -> maps:get(I_5, X_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(X_2) + I_5 + 1, X_2); _ -> mochi_nth(I_5 + 1, X_2) end end)) end end)))] ++ lists:nthtail(K + 1, Grad),
            K_2 = (K + 1),
            Fun_4_loop(Alpha, Grad_2, H, I_5, Iter, Iterations, K_2, M, N_4, Theta, X_2, Y_4, Z_2);
        _ -> {Alpha, Grad, H, I_5, Iter, Iterations, K, M, N_4, Theta, X_2, Y_4, Z_2}
    end
end,
{Alpha, Grad_2, H, I_5, Iter, Iterations, K_2, M, N_4, Theta, X_2, Y_4, Z_2} = Fun_4(Alpha, Grad, H, I_5, Iter, Iterations, K, M, N_4, Theta, X_2, Y_4, Z_2),
            I_6 = (I_5 + 1),
            Fun_5_loop(Alpha, Grad_2, I_6, Iter, Iterations, M, N_4, Theta, X_2, Y_4);
        _ -> {Alpha, Grad, I_5, Iter, Iterations, M, N_4, Theta, X_2, Y_4}
    end
end,
{Alpha, Grad_2, I_6, Iter, Iterations, M, N_4, Theta, X_2, Y_4} = Fun_5(Alpha, Grad, I_5, Iter, Iterations, M, N_4, Theta, X_2, Y_4),
            K2 = 0,
            Fun_6 = fun Fun_6_loop(Alpha, Grad_2, I_6, Iter, Iterations, K2, M, N_4, Theta, X_2, Y_4) ->
    case (K2 < N_4) of
        true ->
            Theta_2 = lists:sublist(Theta, K2) ++ [((case erlang:is_map(Theta) of true -> maps:get(K2, Theta, nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length(Theta) + K2 + 1, Theta); _ -> mochi_nth(K2 + 1, Theta) end end) - mochi_safe_div(mochi_safe_mul(Alpha, (case erlang:is_map(Grad_2) of true -> maps:get(K2, Grad_2, nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length(Grad_2) + K2 + 1, Grad_2); _ -> mochi_nth(K2 + 1, Grad_2) end end)), float(M)))] ++ lists:nthtail(K2 + 1, Theta),
            K2_2 = (K2 + 1),
            Fun_6_loop(Alpha, Grad_2, I_6, Iter, Iterations, K2_2, M, N_4, Theta_2, X_2, Y_4);
        _ -> {Alpha, Grad_2, I_6, Iter, Iterations, K2, M, N_4, Theta, X_2, Y_4}
    end
end,
{Alpha, Grad_2, I_6, Iter, Iterations, K2_2, M, N_4, Theta_2, X_2, Y_4} = Fun_6(Alpha, Grad_2, I_6, Iter, Iterations, K2, M, N_4, Theta, X_2, Y_4),
            Iter_2 = (Iter + 1),
            Fun_7_loop(Alpha, Iter_2, Iterations, M, N_4, Theta_2, X_2, Y_4);
        _ -> {Alpha, Iter, Iterations, M, N_4, Theta, X_2, Y_4}
    end
end,
{Alpha, Iter_2, Iterations, M, N_4, Theta_2, X_2, Y_4} = Fun_7(Alpha, Iter, Iterations, M, N_4, Theta, X_2, Y_4),
        Theta_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('x', [[0.5, 1.5], [1.0, 1.0], [1.5, 0.5], [3.0, 3.5], [3.5, 3.0], [4.0, 4.0]]),
    erlang:put('y', [0.0, 0.0, 0.0, 1.0, 1.0, 1.0]),
    erlang:put('alpha', 0.1),
    erlang:put('iterations', 1000),
    erlang:put('theta', logistic_reg(0.1, erlang:get('x'), erlang:get('y'), 1000)),
    Fun_8 = fun Fun_8_loop(List) ->
    case List of
        [] -> {};
        [I_7|I_7_rest] ->
            io:format("~ts~n", [mochi_repr((case erlang:is_map(erlang:get('theta')) of true -> maps:get(I_7, erlang:get('theta'), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(erlang:get('theta')) + I_7 + 1, erlang:get('theta')); _ -> mochi_nth(I_7 + 1, erlang:get('theta')) end end))]),
            Fun_8_loop(I_7_rest);
        _ -> {}
    end
end,
{} = Fun_8(lists:seq(0, (erlang:length(erlang:get('theta'))) - 1)),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
