#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, data_handling/1, xgboost/3, mean_absolute_error/2, mean_squared_error/2, main/0]).

% Generated by Mochi transpiler v0.10.66 (2995f902d7)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

data_handling(Dataset) ->
    try
        Dataset
    catch {return, RetCatch} -> RetCatch end.

xgboost(Features, Target, Test_features) ->
    try
        Learning_rate = 0.5,
        N_estimators = 3,
        Trees = [],
        Predictions = [],
        I = 0,
        Fun = fun Fun_loop(Features, I, Learning_rate, N_estimators, Predictions, Target, Test_features, Trees) ->
    case (I < erlang:length(Target)) of
        true ->
            Predictions_2 = lists:append((case Predictions of nil -> []; _ -> Predictions end), [0.0]),
            I_2 = (I + 1),
            Fun_loop(Features, I_2, Learning_rate, N_estimators, Predictions_2, Target, Test_features, Trees);
        _ -> {Features, I, Learning_rate, N_estimators, Predictions, Target, Test_features, Trees}
    end
end,
{Features, I_2, Learning_rate, N_estimators, Predictions_2, Target, Test_features, Trees} = Fun(Features, I, Learning_rate, N_estimators, Predictions, Target, Test_features, Trees),
        Est = 0,
        Fun_6 = fun Fun_6_loop(Est, Features, I_2, Learning_rate, N_estimators, Predictions_2, Target, Test_features, Trees) ->
    case (Est < N_estimators) of
        true ->
            Residuals = [],
            J = 0,
            Fun_2 = fun Fun_2_loop(Est, Features, I_2, J, Learning_rate, N_estimators, Predictions_2, Residuals, Target, Test_features, Trees) ->
    case (J < erlang:length(Target)) of
        true ->
            Residuals_2 = lists:append((case Residuals of nil -> []; _ -> Residuals end), [((case erlang:is_map(Target) of true -> maps:get(J, Target, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Target) + J + 1, Target); _ -> mochi_nth(J + 1, Target) end end) - (case erlang:is_map(Predictions_2) of true -> maps:get(J, Predictions_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Predictions_2) + J + 1, Predictions_2); _ -> mochi_nth(J + 1, Predictions_2) end end))]),
            J_2 = (J + 1),
            Fun_2_loop(Est, Features, I_2, J_2, Learning_rate, N_estimators, Predictions_2, Residuals_2, Target, Test_features, Trees);
        _ -> {Est, Features, I_2, J, Learning_rate, N_estimators, Predictions_2, Residuals, Target, Test_features, Trees}
    end
end,
{Est, Features, I_2, J_2, Learning_rate, N_estimators, Predictions_2, Residuals_2, Target, Test_features, Trees} = Fun_2(Est, Features, I_2, J, Learning_rate, N_estimators, Predictions_2, Residuals, Target, Test_features, Trees),
            Sum_feat = 0.0,
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(Est, Features, I_2, J_3, Learning_rate, N_estimators, Predictions_2, Residuals_2, Sum_feat, Target, Test_features, Trees) ->
    case (J_3 < erlang:length(Features)) of
        true ->
            Sum_feat_2 = (Sum_feat + (case erlang:is_map((case erlang:is_map(Features) of true -> maps:get(J_3, Features, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Features) + J_3 + 1, Features); _ -> mochi_nth(J_3 + 1, Features) end end)) of true -> maps:get(0, (case erlang:is_map(Features) of true -> maps:get(J_3, Features, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Features) + J_3 + 1, Features); _ -> mochi_nth(J_3 + 1, Features) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Features) of true -> maps:get(J_3, Features, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Features) + J_3 + 1, Features); _ -> mochi_nth(J_3 + 1, Features) end end)) + 0 + 1, (case erlang:is_map(Features) of true -> maps:get(J_3, Features, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Features) + J_3 + 1, Features); _ -> mochi_nth(J_3 + 1, Features) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Features) of true -> maps:get(J_3, Features, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Features) + J_3 + 1, Features); _ -> mochi_nth(J_3 + 1, Features) end end)) end end)),
            J_4 = (J_3 + 1),
            Fun_3_loop(Est, Features, I_2, J_4, Learning_rate, N_estimators, Predictions_2, Residuals_2, Sum_feat_2, Target, Test_features, Trees);
        _ -> {Est, Features, I_2, J_3, Learning_rate, N_estimators, Predictions_2, Residuals_2, Sum_feat, Target, Test_features, Trees}
    end
end,
{Est, Features, I_2, J_4, Learning_rate, N_estimators, Predictions_2, Residuals_2, Sum_feat_2, Target, Test_features, Trees} = Fun_3(Est, Features, I_2, J_3, Learning_rate, N_estimators, Predictions_2, Residuals_2, Sum_feat, Target, Test_features, Trees),
            Threshold = mochi_safe_div(Sum_feat_2, float(erlang:length(Features))),
            Left_sum = 0.0,
            Left_count = 0,
            Right_sum = 0.0,
            Right_count = 0,
            J_5 = 0,
            Fun_4 = fun Fun_4_loop(Est, Features, I_2, J_5, Learning_rate, Left_count, Left_sum, N_estimators, Predictions_2, Residuals_2, Right_count, Right_sum, Sum_feat_2, Target, Test_features, Threshold, Trees) ->
    case (J_5 < erlang:length(Features)) of
        true ->
            Right_sum_3 = (case ((case erlang:is_map((case erlang:is_map(Features) of true -> maps:get(J_5, Features, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Features) + J_5 + 1, Features); _ -> mochi_nth(J_5 + 1, Features) end end)) of true -> maps:get(0, (case erlang:is_map(Features) of true -> maps:get(J_5, Features, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Features) + J_5 + 1, Features); _ -> mochi_nth(J_5 + 1, Features) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Features) of true -> maps:get(J_5, Features, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Features) + J_5 + 1, Features); _ -> mochi_nth(J_5 + 1, Features) end end)) + 0 + 1, (case erlang:is_map(Features) of true -> maps:get(J_5, Features, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Features) + J_5 + 1, Features); _ -> mochi_nth(J_5 + 1, Features) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Features) of true -> maps:get(J_5, Features, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Features) + J_5 + 1, Features); _ -> mochi_nth(J_5 + 1, Features) end end)) end end) =< Threshold) of
        true -> Left_sum_2 = (Left_sum + (case erlang:is_map(Residuals_2) of true -> maps:get(J_5, Residuals_2, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Residuals_2) + J_5 + 1, Residuals_2); _ -> mochi_nth(J_5 + 1, Residuals_2) end end)),
            Left_count_2 = (Left_count + 1),
            Left_count_3 = Left_count_2,
            Left_sum_3 = Left_sum_2,
            Right_count_3 = Right_count,
            Right_sum;
        _ -> Right_sum_2 = (Right_sum + (case erlang:is_map(Residuals_2) of true -> maps:get(J_5, Residuals_2, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Residuals_2) + J_5 + 1, Residuals_2); _ -> mochi_nth(J_5 + 1, Residuals_2) end end)),
            Right_count_2 = (Right_count + 1),
            Left_count_3 = Left_count,
            Left_sum_3 = Left_sum,
            Right_count_3 = Right_count_2,
            Right_sum_2
    end),
            J_6 = (J_5 + 1),
            Fun_4_loop(Est, Features, I_2, J_6, Learning_rate, Left_count_3, Left_sum_3, N_estimators, Predictions_2, Residuals_2, Right_count_3, Right_sum_3, Sum_feat_2, Target, Test_features, Threshold, Trees);
        _ -> {Est, Features, I_2, J_5, Learning_rate, Left_count, Left_sum, N_estimators, Predictions_2, Residuals_2, Right_count, Right_sum, Sum_feat_2, Target, Test_features, Threshold, Trees}
    end
end,
{Est, Features, I_2, J_6, Learning_rate, Left_count_3, Left_sum_3, N_estimators, Predictions_2, Residuals_2, Right_count_3, Right_sum_3, Sum_feat_2, Target, Test_features, Threshold, Trees} = Fun_4(Est, Features, I_2, J_5, Learning_rate, Left_count, Left_sum, N_estimators, Predictions_2, Residuals_2, Right_count, Right_sum, Sum_feat_2, Target, Test_features, Threshold, Trees),
            Left_value = 0.0,
            Left_value_3 = (case (Left_count_3 > 0) of
        true -> Left_value_2 = mochi_safe_div(Left_sum_3, float(Left_count_3)),
            Left_value_2;
        _ -> Left_value
    end),
            Right_value = 0.0,
            Right_value_3 = (case (Right_count_3 > 0) of
        true -> Right_value_2 = mochi_safe_div(Right_sum_3, float(Right_count_3)),
            Right_value_2;
        _ -> Right_value
    end),
            J_7 = 0,
            Fun_5 = fun Fun_5_loop(Est, Features, I_2, J_7, Learning_rate, Left_count_3, Left_sum_3, Left_value_3, N_estimators, Predictions_2, Residuals_2, Right_count_3, Right_sum_3, Right_value_3, Sum_feat_2, Target, Test_features, Threshold, Trees) ->
    case (J_7 < erlang:length(Features)) of
        true ->
            Predictions_5 = (case ((case erlang:is_map((case erlang:is_map(Features) of true -> maps:get(J_7, Features, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Features) + J_7 + 1, Features); _ -> mochi_nth(J_7 + 1, Features) end end)) of true -> maps:get(0, (case erlang:is_map(Features) of true -> maps:get(J_7, Features, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Features) + J_7 + 1, Features); _ -> mochi_nth(J_7 + 1, Features) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Features) of true -> maps:get(J_7, Features, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Features) + J_7 + 1, Features); _ -> mochi_nth(J_7 + 1, Features) end end)) + 0 + 1, (case erlang:is_map(Features) of true -> maps:get(J_7, Features, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Features) + J_7 + 1, Features); _ -> mochi_nth(J_7 + 1, Features) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Features) of true -> maps:get(J_7, Features, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Features) + J_7 + 1, Features); _ -> mochi_nth(J_7 + 1, Features) end end)) end end) =< Threshold) of
        true -> Predictions_3 = lists:sublist(Predictions_2, J_7) ++ [((case erlang:is_map(Predictions_2) of true -> maps:get(J_7, Predictions_2, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Predictions_2) + J_7 + 1, Predictions_2); _ -> mochi_nth(J_7 + 1, Predictions_2) end end) + mochi_safe_mul(Learning_rate, Left_value_3))] ++ lists:nthtail(J_7 + 1, Predictions_2),
            Predictions_3;
        _ -> Predictions_4 = lists:sublist(Predictions_2, J_7) ++ [((case erlang:is_map(Predictions_2) of true -> maps:get(J_7, Predictions_2, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Predictions_2) + J_7 + 1, Predictions_2); _ -> mochi_nth(J_7 + 1, Predictions_2) end end) + mochi_safe_mul(Learning_rate, Right_value_3))] ++ lists:nthtail(J_7 + 1, Predictions_2),
            Predictions_4
    end),
            J_8 = (J_7 + 1),
            Fun_5_loop(Est, Features, I_2, J_8, Learning_rate, Left_count_3, Left_sum_3, Left_value_3, N_estimators, Predictions_5, Residuals_2, Right_count_3, Right_sum_3, Right_value_3, Sum_feat_2, Target, Test_features, Threshold, Trees);
        _ -> {Est, Features, I_2, J_7, Learning_rate, Left_count_3, Left_sum_3, Left_value_3, N_estimators, Predictions_2, Residuals_2, Right_count_3, Right_sum_3, Right_value_3, Sum_feat_2, Target, Test_features, Threshold, Trees}
    end
end,
{Est, Features, I_2, J_8, Learning_rate, Left_count_3, Left_sum_3, Left_value_3, N_estimators, Predictions_5, Residuals_2, Right_count_3, Right_sum_3, Right_value_3, Sum_feat_2, Target, Test_features, Threshold, Trees} = Fun_5(Est, Features, I_2, J_7, Learning_rate, Left_count_3, Left_sum_3, Left_value_3, N_estimators, Predictions_2, Residuals_2, Right_count_3, Right_sum_3, Right_value_3, Sum_feat_2, Target, Test_features, Threshold, Trees),
            Trees_2 = lists:append((case Trees of nil -> []; _ -> Trees end), [#{"threshold" => Threshold, "left_value" => Left_value_3, "right_value" => Right_value_3}]),
            Est_2 = (Est + 1),
            Fun_6_loop(Est_2, Features, I_2, Learning_rate, N_estimators, Predictions_5, Target, Test_features, Trees_2);
        _ -> {Est, Features, I_2, Learning_rate, N_estimators, Predictions_2, Target, Test_features, Trees}
    end
end,
{Est_2, Features, I_2, Learning_rate, N_estimators, Predictions_5, Target, Test_features, Trees_2} = Fun_6(Est, Features, I_2, Learning_rate, N_estimators, Predictions_2, Target, Test_features, Trees),
        Preds = [],
        T = 0,
        Fun_8 = fun Fun_8_loop(Est_2, Features, I_2, Learning_rate, N_estimators, Predictions_5, Preds, T, Target, Test_features, Trees_2) ->
    case (T < erlang:length(Test_features)) of
        true ->
            Pred = 0.0,
            K = 0,
            Fun_7 = fun Fun_7_loop(Est_2, Features, I_2, K, Learning_rate, N_estimators, Pred, Predictions_5, Preds, T, Target, Test_features, Trees_2) ->
    case (K < erlang:length(Trees_2)) of
        true ->
            Pred_4 = (case ((case erlang:is_map((case erlang:is_map(Test_features) of true -> maps:get(T, Test_features, nil); _ -> case T < 0 of true -> mochi_nth(erlang:length(Test_features) + T + 1, Test_features); _ -> mochi_nth(T + 1, Test_features) end end)) of true -> maps:get(0, (case erlang:is_map(Test_features) of true -> maps:get(T, Test_features, nil); _ -> case T < 0 of true -> mochi_nth(erlang:length(Test_features) + T + 1, Test_features); _ -> mochi_nth(T + 1, Test_features) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Test_features) of true -> maps:get(T, Test_features, nil); _ -> case T < 0 of true -> mochi_nth(erlang:length(Test_features) + T + 1, Test_features); _ -> mochi_nth(T + 1, Test_features) end end)) + 0 + 1, (case erlang:is_map(Test_features) of true -> maps:get(T, Test_features, nil); _ -> case T < 0 of true -> mochi_nth(erlang:length(Test_features) + T + 1, Test_features); _ -> mochi_nth(T + 1, Test_features) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Test_features) of true -> maps:get(T, Test_features, nil); _ -> case T < 0 of true -> mochi_nth(erlang:length(Test_features) + T + 1, Test_features); _ -> mochi_nth(T + 1, Test_features) end end)) end end) =< maps:get("threshold", (case erlang:is_map(Trees_2) of true -> maps:get(K, Trees_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Trees_2) + K + 1, Trees_2); _ -> mochi_nth(K + 1, Trees_2) end end), nil)) of
        true -> Pred_2 = (Pred + mochi_safe_mul(Learning_rate, maps:get("left_value", (case erlang:is_map(Trees_2) of true -> maps:get(K, Trees_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Trees_2) + K + 1, Trees_2); _ -> mochi_nth(K + 1, Trees_2) end end), nil))),
            Pred_2;
        _ -> Pred_3 = (Pred + mochi_safe_mul(Learning_rate, maps:get("right_value", (case erlang:is_map(Trees_2) of true -> maps:get(K, Trees_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Trees_2) + K + 1, Trees_2); _ -> mochi_nth(K + 1, Trees_2) end end), nil))),
            Pred_3
    end),
            K_2 = (K + 1),
            Fun_7_loop(Est_2, Features, I_2, K_2, Learning_rate, N_estimators, Pred_4, Predictions_5, Preds, T, Target, Test_features, Trees_2);
        _ -> {Est_2, Features, I_2, K, Learning_rate, N_estimators, Pred, Predictions_5, Preds, T, Target, Test_features, Trees_2}
    end
end,
{Est_2, Features, I_2, K_2, Learning_rate, N_estimators, Pred_4, Predictions_5, Preds, T, Target, Test_features, Trees_2} = Fun_7(Est_2, Features, I_2, K, Learning_rate, N_estimators, Pred, Predictions_5, Preds, T, Target, Test_features, Trees_2),
            Preds_2 = lists:append((case Preds of nil -> []; _ -> Preds end), [Pred_4]),
            T_2 = (T + 1),
            Fun_8_loop(Est_2, Features, I_2, Learning_rate, N_estimators, Predictions_5, Preds_2, T_2, Target, Test_features, Trees_2);
        _ -> {Est_2, Features, I_2, Learning_rate, N_estimators, Predictions_5, Preds, T, Target, Test_features, Trees_2}
    end
end,
{Est_2, Features, I_2, Learning_rate, N_estimators, Predictions_5, Preds_2, T_2, Target, Test_features, Trees_2} = Fun_8(Est_2, Features, I_2, Learning_rate, N_estimators, Predictions_5, Preds, T, Target, Test_features, Trees_2),
        Preds_2
    catch {return, RetCatch} -> RetCatch end.

mean_absolute_error(Y_true, Y_pred) ->
    try
        Sum = 0.0,
        I_3 = 0,
        Fun_9 = fun Fun_9_loop(I_3, Sum, Y_pred, Y_true) ->
    case (I_3 < erlang:length(Y_true)) of
        true ->
            Diff = ((case erlang:is_map(Y_true) of true -> maps:get(I_3, Y_true, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Y_true) + I_3 + 1, Y_true); _ -> mochi_nth(I_3 + 1, Y_true) end end) - (case erlang:is_map(Y_pred) of true -> maps:get(I_3, Y_pred, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Y_pred) + I_3 + 1, Y_pred); _ -> mochi_nth(I_3 + 1, Y_pred) end end)),
            Diff_3 = (case (Diff < 0.0) of
        true -> Diff_2 = -Diff,
            Diff_2;
        _ -> Diff
    end),
            Sum_2 = (Sum + Diff_3),
            I_4 = (I_3 + 1),
            Fun_9_loop(I_4, Sum_2, Y_pred, Y_true);
        _ -> {I_3, Sum, Y_pred, Y_true}
    end
end,
{I_4, Sum_2, Y_pred, Y_true} = Fun_9(I_3, Sum, Y_pred, Y_true),
        mochi_safe_div(Sum_2, float(erlang:length(Y_true)))
    catch {return, RetCatch} -> RetCatch end.

mean_squared_error(Y_true_2, Y_pred_2) ->
    try
        Sum_3 = 0.0,
        I_5 = 0,
        Fun_10 = fun Fun_10_loop(I_5, Sum_3, Y_pred_2, Y_true_2) ->
    case (I_5 < erlang:length(Y_true_2)) of
        true ->
            Diff_4 = ((case erlang:is_map(Y_true_2) of true -> maps:get(I_5, Y_true_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Y_true_2) + I_5 + 1, Y_true_2); _ -> mochi_nth(I_5 + 1, Y_true_2) end end) - (case erlang:is_map(Y_pred_2) of true -> maps:get(I_5, Y_pred_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Y_pred_2) + I_5 + 1, Y_pred_2); _ -> mochi_nth(I_5 + 1, Y_pred_2) end end)),
            Sum_4 = (Sum_3 + mochi_safe_mul(Diff_4, Diff_4)),
            I_6 = (I_5 + 1),
            Fun_10_loop(I_6, Sum_4, Y_pred_2, Y_true_2);
        _ -> {I_5, Sum_3, Y_pred_2, Y_true_2}
    end
end,
{I_6, Sum_4, Y_pred_2, Y_true_2} = Fun_10(I_5, Sum_3, Y_pred_2, Y_true_2),
        mochi_safe_div(Sum_4, float(erlang:length(Y_true_2)))
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        California = #{"data" => [[1.0], [2.0], [3.0], [4.0]], "target" => [2.0, 3.0, 4.0, 5.0]},
        Ds = data_handling(California),
        X_train = maps:get("data", Ds, nil),
        Y_train = maps:get("target", Ds, nil),
        X_test = [[1.5], [3.5]],
        Y_test = [2.5, 4.5],
        Predictions_6 = xgboost(X_train, Y_train, X_test),
        io:format("~ts~n", [mochi_repr("Predictions:")]),
        io:format("~ts~n", [mochi_repr(Predictions_6)]),
        io:format("~ts~n", [mochi_repr("Mean Absolute Error:")]),
        io:format("~ts~n", [mochi_repr(mean_absolute_error(Y_test, Predictions_6))]),
        io:format("~ts~n", [mochi_repr("Mean Square Error:")]),
        io:format("~ts~n", [mochi_repr(mean_squared_error(Y_test, Predictions_6))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
