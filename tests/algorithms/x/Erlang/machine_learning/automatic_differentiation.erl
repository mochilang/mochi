#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, dual/2, pow_float/2, add/2, sub/2, mul/2, div_fn/2, power/2, main/0]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

dual(V, D) ->
    try
        #{"value" => V, "deriv" => D}
    catch {return, RetCatch} -> RetCatch end.

pow_float(Base, Exp) ->
    try
        Res = 1.0,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Res) ->
    case (I < Exp) of
        true ->
            Res_2 = mochi_safe_mul(Res, Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Res_2);
        _ -> {Base, Exp, I, Res}
    end
end,
{Base, Exp, I_2, Res_2} = Fun(Base, Exp, I, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

add(A, B) ->
    try
        #{"value" => (maps:get("value", A, nil) + maps:get("value", B, nil)), "deriv" => (maps:get("deriv", A, nil) + maps:get("deriv", B, nil))}
    catch {return, RetCatch} -> RetCatch end.

sub(A_2, B_2) ->
    try
        #{"value" => (maps:get("value", A_2, nil) - maps:get("value", B_2, nil)), "deriv" => (maps:get("deriv", A_2, nil) - maps:get("deriv", B_2, nil))}
    catch {return, RetCatch} -> RetCatch end.

mul(A_3, B_3) ->
    try
        #{"value" => mochi_safe_mul(maps:get("value", A_3, nil), maps:get("value", B_3, nil)), "deriv" => (mochi_safe_mul(maps:get("deriv", A_3, nil), maps:get("value", B_3, nil)) + mochi_safe_mul(maps:get("deriv", B_3, nil), maps:get("value", A_3, nil)))}
    catch {return, RetCatch} -> RetCatch end.

div_fn(A_4, B_4) ->
    try
        #{"value" => mochi_safe_div(maps:get("value", A_4, nil), maps:get("value", B_4, nil)), "deriv" => mochi_safe_div((mochi_safe_mul(maps:get("deriv", A_4, nil), maps:get("value", B_4, nil)) - mochi_safe_mul(maps:get("deriv", B_4, nil), maps:get("value", A_4, nil))), mochi_safe_mul(maps:get("value", B_4, nil), maps:get("value", B_4, nil)))}
    catch {return, RetCatch} -> RetCatch end.

power(A_5, P) ->
    try
        #{"value" => pow_float(maps:get("value", A_5, nil), P), "deriv" => mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(1.0, P), pow_float(maps:get("value", A_5, nil), (P - 1))), maps:get("deriv", A_5, nil))}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        A_6 = dual(2.0, 1.0),
        B_5 = dual(1.0, 0.0),
        C = add(A_6, B_5),
        D_2 = mul(A_6, B_5),
        E = div_fn(C, D_2),
        io:format("~ts~n", [mochi_str(maps:get("deriv", E, nil))]),
        X = dual(2.0, 1.0),
        Y = power(X, 3),
        io:format("~ts~n", [mochi_str(maps:get("deriv", Y, nil))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
