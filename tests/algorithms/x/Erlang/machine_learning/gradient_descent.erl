#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, absf/1, hypothesis_value/2, calc_error/2, summation_of_cost_derivative/3, get_cost_derivative/3, allclose/4, run_gradient_descent/2, test_gradient_descent/2]).

% Generated by Mochi transpiler v0.10.66 (2995f902d7)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

absf(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

hypothesis_value(Input, Params) ->
    try
        Value = (case erlang:is_map(Params) of true -> maps:get(0, Params, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Params) + 0 + 1, Params); _ -> mochi_nth(0 + 1, Params) end end),
        I = 0,
        Fun = fun Fun_loop(I, Input, Params, Value) ->
    case (I < erlang:length(Input)) of
        true ->
            Value_2 = (Value + mochi_safe_mul((case erlang:is_map(Input) of true -> maps:get(I, Input, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Input) + I + 1, Input); _ -> mochi_nth(I + 1, Input) end end), (case erlang:is_map(Params) of true -> maps:get((I + 1), Params, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Params) + (I + 1) + 1, Params); _ -> mochi_nth((I + 1) + 1, Params) end end))),
            I_2 = (I + 1),
            Fun_loop(I_2, Input, Params, Value_2);
        _ -> {I, Input, Params, Value}
    end
end,
{I_2, Input, Params, Value_2} = Fun(I, Input, Params, Value),
        Value_2
    catch {return, RetCatch} -> RetCatch end.

calc_error(Dp, Params_2) ->
    try
        (hypothesis_value(maps:get("x", Dp, nil), Params_2) - maps:get("y", Dp, nil))
    catch {return, RetCatch} -> RetCatch end.

summation_of_cost_derivative(Index, Params_3, Data) ->
    try
        Sum = 0.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Data, I_3, Index, Params_3, Sum) ->
    case (I_3 < erlang:length(Data)) of
        true ->
            Dp_2 = (case erlang:is_map(Data) of true -> maps:get(I_3, Data, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Data) + I_3 + 1, Data); _ -> mochi_nth(I_3 + 1, Data) end end),
            E = calc_error(Dp_2, Params_3),
            Sum_4 = (case (Index == -1) of
        true -> Sum_2 = (Sum + E),
            Sum_2;
        _ -> Sum_3 = (Sum + mochi_safe_mul(E, (case erlang:is_map(maps:get("x", Dp_2, nil)) of true -> maps:get(Index, maps:get("x", Dp_2, nil), nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(maps:get("x", Dp_2, nil)) + Index + 1, maps:get("x", Dp_2, nil)); _ -> mochi_nth(Index + 1, maps:get("x", Dp_2, nil)) end end))),
            Sum_3
    end),
            I_4 = (I_3 + 1),
            Fun_2_loop(Data, I_4, Index, Params_3, Sum_4);
        _ -> {Data, I_3, Index, Params_3, Sum}
    end
end,
{Data, I_4, Index, Params_3, Sum_4} = Fun_2(Data, I_3, Index, Params_3, Sum),
        Sum_4
    catch {return, RetCatch} -> RetCatch end.

get_cost_derivative(Index_2, Params_4, Data_2) ->
    try
        mochi_safe_div(summation_of_cost_derivative(Index_2, Params_4, Data_2), float(erlang:length(Data_2)))
    catch {return, RetCatch} -> RetCatch end.

allclose(A, B, Atol, Rtol) ->
    try
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(A, Atol, B, I_5, Rtol) ->
    case (I_5 < erlang:length(A)) of
        true ->
            Diff = absf(((case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end) - (case erlang:is_map(B) of true -> maps:get(I_5, B, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(B) + I_5 + 1, B); _ -> mochi_nth(I_5 + 1, B) end end))),
            Limit = (Atol + mochi_safe_mul(Rtol, absf((case erlang:is_map(B) of true -> maps:get(I_5, B, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(B) + I_5 + 1, B); _ -> mochi_nth(I_5 + 1, B) end end)))),
            case (Diff > Limit) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(A, Atol, B, I_6, Rtol);
        _ -> {A, Atol, B, I_5, Rtol}
    end
end,
{A, Atol, B, I_6, Rtol} = Fun_3(A, Atol, B, I_5, Rtol),
        true
    catch {return, RetCatch} -> RetCatch end.

run_gradient_descent(Train_data, Initial_params) ->
    try
        Learning_rate = 0.009,
        Absolute_error_limit = 0.000002,
        Relative_error_limit = 0.0,
        J = 0,
        Params_5 = Initial_params,
        Fun_5 = fun Fun_5_loop(Absolute_error_limit, Initial_params, J, Learning_rate, Params_5, Relative_error_limit, Train_data) ->
    case true of
        true ->
            try
                J_2 = (J + 1),
                Temp = [],
                I_7 = 0,
                Fun_4 = fun Fun_4_loop(Absolute_error_limit, I_7, Initial_params, J_2, Learning_rate, Params_5, Relative_error_limit, Temp, Train_data) ->
    case (I_7 < erlang:length(Params_5)) of
        true ->
            Deriv = get_cost_derivative((I_7 - 1), Params_5, Train_data),
            Temp_2 = lists:append((case Temp of nil -> []; _ -> Temp end), [((case erlang:is_map(Params_5) of true -> maps:get(I_7, Params_5, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Params_5) + I_7 + 1, Params_5); _ -> mochi_nth(I_7 + 1, Params_5) end end) - mochi_safe_mul(Learning_rate, Deriv))]),
            I_8 = (I_7 + 1),
            Fun_4_loop(Absolute_error_limit, I_8, Initial_params, J_2, Learning_rate, Params_5, Relative_error_limit, Temp_2, Train_data);
        _ -> {Absolute_error_limit, I_7, Initial_params, J_2, Learning_rate, Params_5, Relative_error_limit, Temp, Train_data}
    end
end,
{Absolute_error_limit, I_8, Initial_params, J_2, Learning_rate, Params_5, Relative_error_limit, Temp_2, Train_data} = Fun_4(Absolute_error_limit, I_7, Initial_params, J_2, Learning_rate, Params_5, Relative_error_limit, Temp, Train_data),
                case allclose(Params_5, Temp_2, Absolute_error_limit, Relative_error_limit) of
        true -> io:format("~ts~n", [mochi_repr(("Number of iterations:" ++ mochi_str(J_2)))]),
            throw({break, {Absolute_error_limit, Initial_params, J_2, Learning_rate, Params_5, Relative_error_limit, Train_data}});
        _ -> ok
    end,
                Params_6 = Temp_2,
                Fun_5_loop(Absolute_error_limit, Initial_params, J_2, Learning_rate, Params_6, Relative_error_limit, Train_data)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_5_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, Bs} -> Bs
            end;
        _ -> {Absolute_error_limit, Initial_params, J, Learning_rate, Params_5, Relative_error_limit, Train_data}
    end
end,
{Absolute_error_limit, Initial_params, J_2, Learning_rate, Params_6, Relative_error_limit, Train_data} = Fun_5(Absolute_error_limit, Initial_params, J, Learning_rate, Params_5, Relative_error_limit, Train_data),
        Params_6
    catch {return, RetCatch} -> RetCatch end.

test_gradient_descent(Test_data, Params_7) ->
    try
        I_9 = 0,
        Fun_6 = fun Fun_6_loop(I_9, Params_7, Test_data) ->
    case (I_9 < erlang:length(Test_data)) of
        true ->
            Dp_3 = (case erlang:is_map(Test_data) of true -> maps:get(I_9, Test_data, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Test_data) + I_9 + 1, Test_data); _ -> mochi_nth(I_9 + 1, Test_data) end end),
            io:format("~ts~n", [mochi_repr(("Actual output value:" ++ mochi_str(maps:get("y", Dp_3, nil))))]),
            io:format("~ts~n", [mochi_repr(("Hypothesis output:" ++ mochi_str(hypothesis_value(maps:get("x", Dp_3, nil), Params_7))))]),
            I_10 = (I_9 + 1),
            Fun_6_loop(I_10, Params_7, Test_data);
        _ -> {I_9, Params_7, Test_data}
    end
end,
{I_10, Params_7, Test_data} = Fun_6(I_9, Params_7, Test_data),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('train_data', [#{"x" => [5.0, 2.0, 3.0], "y" => 15.0}, #{"x" => [6.0, 5.0, 9.0], "y" => 25.0}, #{"x" => [11.0, 12.0, 13.0], "y" => 41.0}, #{"x" => [1.0, 1.0, 1.0], "y" => 8.0}, #{"x" => [11.0, 12.0, 13.0], "y" => 41.0}]),
    erlang:put('test_data', [#{"x" => [515.0, 22.0, 13.0], "y" => 555.0}, #{"x" => [61.0, 35.0, 49.0], "y" => 150.0}]),
    erlang:put('parameter_vector', [2.0, 4.0, 1.0, 5.0]),
    erlang:put('parameter_vector', run_gradient_descent(erlang:get('train_data'), erlang:get('parameter_vector'))),
    io:format("~ts~n", [mochi_repr("\nTesting gradient descent for a linear hypothesis function.\n")]),
    test_gradient_descent(erlang:get('test_data'), erlang:get('parameter_vector')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
