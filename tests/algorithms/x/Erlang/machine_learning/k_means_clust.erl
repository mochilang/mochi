#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, distance_sq/2, assign_clusters/2, revise_centroids/3, compute_heterogeneity/3, lists_equal/2, kmeans/4]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

distance_sq(A, B) ->
    try
        Sum = 0.0,
        Fun = fun Fun_loop(List, A, B, Sum) ->
    case List of
        [] -> {A, B, Sum};
        [I|I_rest] ->
            Diff = ((case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(A) + I + 1, A); _ -> mochi_nth(I + 1, A) end end) - (case erlang:is_map(B) of true -> maps:get(I, B, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(B) + I + 1, B); _ -> mochi_nth(I + 1, B) end end)),
            Sum_2 = (Sum + mochi_safe_mul(Diff, Diff)),
            Fun_loop(I_rest, A, B, Sum_2);
        _ -> {A, B, Sum}
    end
end,
{A, B, Sum_2} = Fun(lists:seq(0, (erlang:length(A)) - 1), A, B, Sum),
        Sum_2
    catch {return, Ret} -> Ret end.

assign_clusters(Data, Centroids) ->
    try
        Assignments = [],
        Fun_2 = fun Fun_2_loop(List, Assignments, Centroids, Data) ->
    case List of
        [] -> {Assignments, Centroids, Data};
        [I_2|I_2_rest] ->
            Best_idx = 0,
            Best = distance_sq((case erlang:is_map(Data) of true -> maps:get(I_2, Data, nil); _ -> case I_2 < 0 of true -> mochi_nth(erlang:length(Data) + I_2 + 1, Data); _ -> mochi_nth(I_2 + 1, Data) end end), (case erlang:is_map(Centroids) of true -> maps:get(0, Centroids, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Centroids) + 0 + 1, Centroids); _ -> mochi_nth(0 + 1, Centroids) end end)),
            Fun_3 = fun Fun_3_loop(List, Assignments, Best, Best_idx, Centroids, Data, I_2) ->
    case List of
        [] -> {Assignments, Best, Best_idx, Centroids, Data, I_2};
        [J|J_rest] ->
            Dist = distance_sq((case erlang:is_map(Data) of true -> maps:get(I_2, Data, nil); _ -> case I_2 < 0 of true -> mochi_nth(erlang:length(Data) + I_2 + 1, Data); _ -> mochi_nth(I_2 + 1, Data) end end), (case erlang:is_map(Centroids) of true -> maps:get(J, Centroids, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Centroids) + J + 1, Centroids); _ -> mochi_nth(J + 1, Centroids) end end)),
            case (Dist < Best) of
        true -> Best_2 = Dist,
            Best_idx_2 = J,
            Best_3 = Best_2,
            Best_idx_3 = Best_idx_2;
        _ -> Best_3 = Best,
            Best_idx_3 = Best_idx
    end,
            Fun_3_loop(J_rest, Assignments, Best_3, Best_idx_3, Centroids, Data, I_2);
        _ -> {Assignments, Best, Best_idx, Centroids, Data, I_2}
    end
end,
{Assignments, Best_3, Best_idx_3, Centroids, Data, I_2} = Fun_3(lists:seq(1, (erlang:length(Centroids)) - 1), Assignments, Best, Best_idx, Centroids, Data, I_2),
            Assignments_2 = lists:append((case Assignments of nil -> []; _ -> Assignments end), [Best_idx_3]),
            Fun_2_loop(I_2_rest, Assignments_2, Centroids, Data);
        _ -> {Assignments, Centroids, Data}
    end
end,
{Assignments_2, Centroids, Data} = Fun_2(lists:seq(0, (erlang:length(Data)) - 1), Assignments, Centroids, Data),
        Assignments_2
    catch {return, Ret} -> Ret end.

revise_centroids(Data_2, K, Assignment) ->
    try
        Dim = erlang:length((case erlang:is_map(Data_2) of true -> maps:get(0, Data_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Data_2) + 0 + 1, Data_2); _ -> mochi_nth(0 + 1, Data_2) end end)),
        Sums = [],
        Counts = [],
        Fun_4 = fun Fun_4_loop(List, Assignment, Counts, Data_2, Dim, K, Sums) ->
    case List of
        [] -> {Assignment, Counts, Data_2, Dim, K, Sums};
        [I_3|I_3_rest] ->
            Row = [],
            Fun_5 = fun Fun_5_loop(List, Assignment, Counts, Data_2, Dim, I_3, K, Row, Sums) ->
    case List of
        [] -> {Assignment, Counts, Data_2, Dim, I_3, K, Row, Sums};
        [J_2|J_2_rest] ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0.0]),
            Fun_5_loop(J_2_rest, Assignment, Counts, Data_2, Dim, I_3, K, Row_2, Sums);
        _ -> {Assignment, Counts, Data_2, Dim, I_3, K, Row, Sums}
    end
end,
{Assignment, Counts, Data_2, Dim, I_3, K, Row_2, Sums} = Fun_5(lists:seq(0, (Dim) - 1), Assignment, Counts, Data_2, Dim, I_3, K, Row, Sums),
            Sums_2 = lists:append((case Sums of nil -> []; _ -> Sums end), [Row_2]),
            Counts_2 = lists:append((case Counts of nil -> []; _ -> Counts end), [0]),
            Fun_4_loop(I_3_rest, Assignment, Counts_2, Data_2, Dim, K, Sums_2);
        _ -> {Assignment, Counts, Data_2, Dim, K, Sums}
    end
end,
{Assignment, Counts_2, Data_2, Dim, K, Sums_2} = Fun_4(lists:seq(0, (K) - 1), Assignment, Counts, Data_2, Dim, K, Sums),
        Fun_6 = fun Fun_6_loop(List, Assignment, Counts_2, Data_2, Dim, K, Sums_2) ->
    case List of
        [] -> {Assignment, Counts_2, Data_2, Dim, K, Sums_2};
        [I_4|I_4_rest] ->
            C = (case erlang:is_map(Assignment) of true -> maps:get(I_4, Assignment, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Assignment) + I_4 + 1, Assignment); _ -> mochi_nth(I_4 + 1, Assignment) end end),
            Counts_3 = lists:sublist(Counts_2, C) ++ [((case erlang:is_map(Counts_2) of true -> maps:get(C, Counts_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(Counts_2) + C + 1, Counts_2); _ -> mochi_nth(C + 1, Counts_2) end end) + 1)] ++ lists:nthtail(C + 1, Counts_2),
            Fun_7 = fun Fun_7_loop(List, Assignment, C, Counts_3, Data_2, Dim, I_4, K, Sums_2) ->
    case List of
        [] -> {Assignment, C, Counts_3, Data_2, Dim, I_4, K, Sums_2};
        [J_3|J_3_rest] ->
            Sums_3 = lists:sublist(Sums_2, C) ++ [lists:sublist(lists:nth(C + 1, Sums_2), J_3) ++ [((case erlang:is_map((case erlang:is_map(Sums_2) of true -> maps:get(C, Sums_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(Sums_2) + C + 1, Sums_2); _ -> mochi_nth(C + 1, Sums_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Sums_2) of true -> maps:get(C, Sums_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(Sums_2) + C + 1, Sums_2); _ -> mochi_nth(C + 1, Sums_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Sums_2) of true -> maps:get(C, Sums_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(Sums_2) + C + 1, Sums_2); _ -> mochi_nth(C + 1, Sums_2) end end)) + J_3 + 1, (case erlang:is_map(Sums_2) of true -> maps:get(C, Sums_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(Sums_2) + C + 1, Sums_2); _ -> mochi_nth(C + 1, Sums_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Sums_2) of true -> maps:get(C, Sums_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(Sums_2) + C + 1, Sums_2); _ -> mochi_nth(C + 1, Sums_2) end end)) end end) + (case erlang:is_map((case erlang:is_map(Data_2) of true -> maps:get(I_4, Data_2, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Data_2) + I_4 + 1, Data_2); _ -> mochi_nth(I_4 + 1, Data_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Data_2) of true -> maps:get(I_4, Data_2, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Data_2) + I_4 + 1, Data_2); _ -> mochi_nth(I_4 + 1, Data_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Data_2) of true -> maps:get(I_4, Data_2, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Data_2) + I_4 + 1, Data_2); _ -> mochi_nth(I_4 + 1, Data_2) end end)) + J_3 + 1, (case erlang:is_map(Data_2) of true -> maps:get(I_4, Data_2, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Data_2) + I_4 + 1, Data_2); _ -> mochi_nth(I_4 + 1, Data_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Data_2) of true -> maps:get(I_4, Data_2, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Data_2) + I_4 + 1, Data_2); _ -> mochi_nth(I_4 + 1, Data_2) end end)) end end))] ++ lists:nthtail(J_3 + 1, lists:nth(C + 1, Sums_2))] ++ lists:nthtail(C + 1, Sums_2),
            Fun_7_loop(J_3_rest, Assignment, C, Counts_3, Data_2, Dim, I_4, K, Sums_3);
        _ -> {Assignment, C, Counts_3, Data_2, Dim, I_4, K, Sums_2}
    end
end,
{Assignment, C, Counts_3, Data_2, Dim, I_4, K, Sums_3} = Fun_7(lists:seq(0, (Dim) - 1), Assignment, C, Counts_3, Data_2, Dim, I_4, K, Sums_2),
            Fun_6_loop(I_4_rest, Assignment, Counts_3, Data_2, Dim, K, Sums_3);
        _ -> {Assignment, Counts_2, Data_2, Dim, K, Sums_2}
    end
end,
{Assignment, Counts_3, Data_2, Dim, K, Sums_3} = Fun_6(lists:seq(0, (erlang:length(Data_2)) - 1), Assignment, Counts_2, Data_2, Dim, K, Sums_2),
        Centroids_2 = [],
        Fun_8 = fun Fun_8_loop(List, Assignment, Centroids_2, Counts_3, Data_2, Dim, K, Sums_3) ->
    case List of
        [] -> {Assignment, Centroids_2, Counts_3, Data_2, Dim, K, Sums_3};
        [I_5|I_5_rest] ->
            Row_3 = [],
            case ((case erlang:is_map(Counts_3) of true -> maps:get(I_5, Counts_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Counts_3) + I_5 + 1, Counts_3); _ -> mochi_nth(I_5 + 1, Counts_3) end end) > 0) of
        true -> Fun_9 = fun Fun_9_loop(List, Assignment, Centroids_2, Counts_3, Data_2, Dim, I_5, K, Row_3, Sums_3) ->
    case List of
        [] -> {Assignment, Centroids_2, Counts_3, Data_2, Dim, I_5, K, Row_3, Sums_3};
        [J_4|J_4_rest] ->
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [mochi_safe_div((case erlang:is_map((case erlang:is_map(Sums_3) of true -> maps:get(I_5, Sums_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Sums_3) + I_5 + 1, Sums_3); _ -> mochi_nth(I_5 + 1, Sums_3) end end)) of true -> maps:get(J_4, (case erlang:is_map(Sums_3) of true -> maps:get(I_5, Sums_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Sums_3) + I_5 + 1, Sums_3); _ -> mochi_nth(I_5 + 1, Sums_3) end end), nil); _ -> case J_4 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Sums_3) of true -> maps:get(I_5, Sums_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Sums_3) + I_5 + 1, Sums_3); _ -> mochi_nth(I_5 + 1, Sums_3) end end)) + J_4 + 1, (case erlang:is_map(Sums_3) of true -> maps:get(I_5, Sums_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Sums_3) + I_5 + 1, Sums_3); _ -> mochi_nth(I_5 + 1, Sums_3) end end)); _ -> mochi_nth(J_4 + 1, (case erlang:is_map(Sums_3) of true -> maps:get(I_5, Sums_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Sums_3) + I_5 + 1, Sums_3); _ -> mochi_nth(I_5 + 1, Sums_3) end end)) end end), float((case erlang:is_map(Counts_3) of true -> maps:get(I_5, Counts_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Counts_3) + I_5 + 1, Counts_3); _ -> mochi_nth(I_5 + 1, Counts_3) end end)))]),
            Fun_9_loop(J_4_rest, Assignment, Centroids_2, Counts_3, Data_2, Dim, I_5, K, Row_4, Sums_3);
        _ -> {Assignment, Centroids_2, Counts_3, Data_2, Dim, I_5, K, Row_3, Sums_3}
    end
end,
{Assignment, Centroids_2, Counts_3, Data_2, Dim, I_5, K, Row_4, Sums_3} = Fun_9(lists:seq(0, (Dim) - 1), Assignment, Centroids_2, Counts_3, Data_2, Dim, I_5, K, Row_3, Sums_3),
            Fun_11 = Fun_9,
            Row_6 = Row_4;
        _ -> Fun_10 = fun Fun_10_loop(List, Assignment, Centroids_2, Counts_3, Data_2, Dim, I_5, K, Row_3, Sums_3) ->
    case List of
        [] -> {Assignment, Centroids_2, Counts_3, Data_2, Dim, I_5, K, Row_3, Sums_3};
        [J_5|J_5_rest] ->
            Row_5 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [0.0]),
            Fun_10_loop(J_5_rest, Assignment, Centroids_2, Counts_3, Data_2, Dim, I_5, K, Row_5, Sums_3);
        _ -> {Assignment, Centroids_2, Counts_3, Data_2, Dim, I_5, K, Row_3, Sums_3}
    end
end,
{Assignment, Centroids_2, Counts_3, Data_2, Dim, I_5, K, Row_5, Sums_3} = Fun_10(lists:seq(0, (Dim) - 1), Assignment, Centroids_2, Counts_3, Data_2, Dim, I_5, K, Row_3, Sums_3),
            Fun_11 = Fun_10,
            Row_6 = Row_5
    end,
            Centroids_3 = lists:append((case Centroids_2 of nil -> []; _ -> Centroids_2 end), [Row_6]),
            Fun_8_loop(I_5_rest, Assignment, Centroids_3, Counts_3, Data_2, Dim, K, Sums_3);
        _ -> {Assignment, Centroids_2, Counts_3, Data_2, Dim, K, Sums_3}
    end
end,
{Assignment, Centroids_3, Counts_3, Data_2, Dim, K, Sums_3} = Fun_8(lists:seq(0, (K) - 1), Assignment, Centroids_2, Counts_3, Data_2, Dim, K, Sums_3),
        Centroids_3
    catch {return, Ret} -> Ret end.

compute_heterogeneity(Data_3, Centroids_4, Assignment_2) ->
    try
        Total = 0.0,
        Fun_12 = fun Fun_12_loop(List, Assignment_2, Centroids_4, Data_3, Total) ->
    case List of
        [] -> {Assignment_2, Centroids_4, Data_3, Total};
        [I_6|I_6_rest] ->
            C_2 = (case erlang:is_map(Assignment_2) of true -> maps:get(I_6, Assignment_2, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Assignment_2) + I_6 + 1, Assignment_2); _ -> mochi_nth(I_6 + 1, Assignment_2) end end),
            Total_2 = (Total + distance_sq((case erlang:is_map(Data_3) of true -> maps:get(I_6, Data_3, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Data_3) + I_6 + 1, Data_3); _ -> mochi_nth(I_6 + 1, Data_3) end end), (case erlang:is_map(Centroids_4) of true -> maps:get(C_2, Centroids_4, nil); _ -> case C_2 < 0 of true -> mochi_nth(erlang:length(Centroids_4) + C_2 + 1, Centroids_4); _ -> mochi_nth(C_2 + 1, Centroids_4) end end))),
            Fun_12_loop(I_6_rest, Assignment_2, Centroids_4, Data_3, Total_2);
        _ -> {Assignment_2, Centroids_4, Data_3, Total}
    end
end,
{Assignment_2, Centroids_4, Data_3, Total_2} = Fun_12(lists:seq(0, (erlang:length(Data_3)) - 1), Assignment_2, Centroids_4, Data_3, Total),
        Total_2
    catch {return, Ret} -> Ret end.

lists_equal(A_2, B_2) ->
    try
        case (erlang:length(A_2) /= erlang:length(B_2)) of
        true -> throw({return, false});
        _ -> ok
    end,
        Fun_13 = fun Fun_13_loop(List, A_2, B_2) ->
    case List of
        [] -> {A_2, B_2};
        [I_7|I_7_rest] ->
            case ((case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end) /= (case erlang:is_map(B_2) of true -> maps:get(I_7, B_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B_2) + I_7 + 1, B_2); _ -> mochi_nth(I_7 + 1, B_2) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            Fun_13_loop(I_7_rest, A_2, B_2);
        _ -> {A_2, B_2}
    end
end,
{A_2, B_2} = Fun_13(lists:seq(0, (erlang:length(A_2)) - 1), A_2, B_2),
        true
    catch {return, Ret} -> Ret end.

kmeans(Data_4, K_2, Initial_centroids, Max_iter) ->
    try
        Centroids_5 = Initial_centroids,
        Assignment_3 = [],
        Prev = [],
        Heterogeneity = [],
        Iter = 0,
        Fun_14 = fun Fun_14_loop(Assignment_3, Centroids_5, Data_4, Heterogeneity, Initial_centroids, Iter, K_2, Max_iter, Prev) ->
    case (Iter < Max_iter) of
        true ->
            try
                Assignment_4 = assign_clusters(Data_4, Centroids_5),
                Centroids_6 = revise_centroids(Data_4, K_2, Assignment_4),
                H = compute_heterogeneity(Data_4, Centroids_6, Assignment_4),
                Heterogeneity_2 = lists:append((case Heterogeneity of nil -> []; _ -> Heterogeneity end), [H]),
                case ((Iter > 0) andalso lists_equal(Prev, Assignment_4)) of
        true -> throw({break, Assignment_4, Centroids_6, Data_4, Heterogeneity_2, Initial_centroids, Iter, K_2, Max_iter, Prev});
        _ -> ok
    end,
                Prev_2 = Assignment_4,
                Iter_2 = (Iter + 1),
                Fun_14_loop(Assignment_4, Centroids_6, Data_4, Heterogeneity_2, Initial_centroids, Iter_2, K_2, Max_iter, Prev_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8} -> Fun_14_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8}
            end;
        _ -> {Assignment_3, Centroids_5, Data_4, Heterogeneity, Initial_centroids, Iter, K_2, Max_iter, Prev}
    end
end,
{Assignment_4, Centroids_6, Data_4, Heterogeneity_2, Initial_centroids, Iter_2, K_2, Max_iter, Prev_2} = Fun_14(Assignment_3, Centroids_5, Data_4, Heterogeneity, Initial_centroids, Iter, K_2, Max_iter, Prev),
        #{"centroids" => Centroids_6, "assignments" => Assignment_4, "heterogeneity" => Heterogeneity_2}
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('data', [[1.0, 2.0], [1.5, 1.8], [5.0, 8.0], [8.0, 8.0], [1.0, 0.6], [9.0, 11.0]]),
    erlang:put('k', 3),
    erlang:put('initial_centroids', [(case erlang:is_map(erlang:get('data')) of true -> maps:get(0, erlang:get('data'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('data')) + 0 + 1, erlang:get('data')); _ -> mochi_nth(0 + 1, erlang:get('data')) end end), (case erlang:is_map(erlang:get('data')) of true -> maps:get(2, erlang:get('data'), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(erlang:get('data')) + 2 + 1, erlang:get('data')); _ -> mochi_nth(2 + 1, erlang:get('data')) end end), (case erlang:is_map(erlang:get('data')) of true -> maps:get(5, erlang:get('data'), nil); _ -> case 5 < 0 of true -> mochi_nth(erlang:length(erlang:get('data')) + 5 + 1, erlang:get('data')); _ -> mochi_nth(5 + 1, erlang:get('data')) end end)]),
    erlang:put('result', kmeans(erlang:get('data'), 3, erlang:get('initial_centroids'), 10)),
    io:format("~ts~n", [mochi_str(maps:get("centroids", erlang:get('result'), nil))]),
    io:format("~ts~n", [mochi_str(maps:get("assignments", erlang:get('result'), nil))]),
    io:format("~ts~n", [mochi_str(maps:get("heterogeneity", erlang:get('result'), nil))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
