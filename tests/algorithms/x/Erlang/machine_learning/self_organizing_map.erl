#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, get_winner/2, update/4, list_to_string/1, matrix_to_string/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (589dcb03e5) on 2025-08-07 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

get_winner(Weights, Sample) ->
    try
        D0 = 0.0,
        D1 = 0.0,
        Fun = fun Fun_loop(List, D0, D1, Sample, Weights) ->
    case List of
        [] -> {D0, D1, Sample, Weights};
        [I|I_rest] ->
            Diff0 = ((case erlang:is_map(Sample) of true -> maps:get(I, Sample, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sample) + I + 1, Sample); _ -> mochi_nth(I + 1, Sample) end end) - (case erlang:is_map((case erlang:is_map(Weights) of true -> maps:get(0, Weights, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Weights) + 0 + 1, Weights); _ -> mochi_nth(0 + 1, Weights) end end)) of true -> maps:get(I, (case erlang:is_map(Weights) of true -> maps:get(0, Weights, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Weights) + 0 + 1, Weights); _ -> mochi_nth(0 + 1, Weights) end end), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Weights) of true -> maps:get(0, Weights, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Weights) + 0 + 1, Weights); _ -> mochi_nth(0 + 1, Weights) end end)) + I + 1, (case erlang:is_map(Weights) of true -> maps:get(0, Weights, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Weights) + 0 + 1, Weights); _ -> mochi_nth(0 + 1, Weights) end end)); _ -> mochi_nth(I + 1, (case erlang:is_map(Weights) of true -> maps:get(0, Weights, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Weights) + 0 + 1, Weights); _ -> mochi_nth(0 + 1, Weights) end end)) end end)),
            Diff1 = ((case erlang:is_map(Sample) of true -> maps:get(I, Sample, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sample) + I + 1, Sample); _ -> mochi_nth(I + 1, Sample) end end) - (case erlang:is_map((case erlang:is_map(Weights) of true -> maps:get(1, Weights, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Weights) + 1 + 1, Weights); _ -> mochi_nth(1 + 1, Weights) end end)) of true -> maps:get(I, (case erlang:is_map(Weights) of true -> maps:get(1, Weights, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Weights) + 1 + 1, Weights); _ -> mochi_nth(1 + 1, Weights) end end), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Weights) of true -> maps:get(1, Weights, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Weights) + 1 + 1, Weights); _ -> mochi_nth(1 + 1, Weights) end end)) + I + 1, (case erlang:is_map(Weights) of true -> maps:get(1, Weights, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Weights) + 1 + 1, Weights); _ -> mochi_nth(1 + 1, Weights) end end)); _ -> mochi_nth(I + 1, (case erlang:is_map(Weights) of true -> maps:get(1, Weights, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Weights) + 1 + 1, Weights); _ -> mochi_nth(1 + 1, Weights) end end)) end end)),
            D0_2 = (D0 + mochi_safe_mul(Diff0, Diff0)),
            D1_2 = (D1 + mochi_safe_mul(Diff1, Diff1)),
            throw({return, (case (D0_2 > D1_2) of
    true -> 0;
    _ -> 1
end)}),
            Fun_loop(I_rest, D0_2, D1_2, Sample, Weights);
        _ -> {D0, D1, Sample, Weights}
    end
end,
{D0_2, D1_2, Sample, Weights} = Fun(lists:seq(0, (erlang:length(Sample)) - 1), D0, D1, Sample, Weights),
        0
    catch {return, Ret} -> Ret end.

update(Weights_2, Sample_2, J, Alpha) ->
    try
        Fun_2 = fun Fun_2_loop(List, Alpha, J, Sample_2, Weights_2) ->
    case List of
        [] -> {Alpha, J, Sample_2, Weights_2};
        [I_2|I_2_rest] ->
            Weights_3 = lists:sublist(Weights_2, J) ++ [lists:sublist(lists:nth(J + 1, Weights_2), I_2) ++ [((case erlang:is_map((case erlang:is_map(Weights_2) of true -> maps:get(J, Weights_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Weights_2) + J + 1, Weights_2); _ -> mochi_nth(J + 1, Weights_2) end end)) of true -> maps:get(I_2, (case erlang:is_map(Weights_2) of true -> maps:get(J, Weights_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Weights_2) + J + 1, Weights_2); _ -> mochi_nth(J + 1, Weights_2) end end), nil); _ -> case I_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Weights_2) of true -> maps:get(J, Weights_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Weights_2) + J + 1, Weights_2); _ -> mochi_nth(J + 1, Weights_2) end end)) + I_2 + 1, (case erlang:is_map(Weights_2) of true -> maps:get(J, Weights_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Weights_2) + J + 1, Weights_2); _ -> mochi_nth(J + 1, Weights_2) end end)); _ -> mochi_nth(I_2 + 1, (case erlang:is_map(Weights_2) of true -> maps:get(J, Weights_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Weights_2) + J + 1, Weights_2); _ -> mochi_nth(J + 1, Weights_2) end end)) end end) + mochi_safe_mul(Alpha, ((case erlang:is_map(Sample_2) of true -> maps:get(I_2, Sample_2, nil); _ -> case I_2 < 0 of true -> mochi_nth(erlang:length(Sample_2) + I_2 + 1, Sample_2); _ -> mochi_nth(I_2 + 1, Sample_2) end end) - (case erlang:is_map((case erlang:is_map(Weights_2) of true -> maps:get(J, Weights_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Weights_2) + J + 1, Weights_2); _ -> mochi_nth(J + 1, Weights_2) end end)) of true -> maps:get(I_2, (case erlang:is_map(Weights_2) of true -> maps:get(J, Weights_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Weights_2) + J + 1, Weights_2); _ -> mochi_nth(J + 1, Weights_2) end end), nil); _ -> case I_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Weights_2) of true -> maps:get(J, Weights_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Weights_2) + J + 1, Weights_2); _ -> mochi_nth(J + 1, Weights_2) end end)) + I_2 + 1, (case erlang:is_map(Weights_2) of true -> maps:get(J, Weights_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Weights_2) + J + 1, Weights_2); _ -> mochi_nth(J + 1, Weights_2) end end)); _ -> mochi_nth(I_2 + 1, (case erlang:is_map(Weights_2) of true -> maps:get(J, Weights_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Weights_2) + J + 1, Weights_2); _ -> mochi_nth(J + 1, Weights_2) end end)) end end))))] ++ lists:nthtail(I_2 + 1, lists:nth(J + 1, Weights_2))] ++ lists:nthtail(J + 1, Weights_2),
            Fun_2_loop(I_2_rest, Alpha, J, Sample_2, Weights_3);
        _ -> {Alpha, J, Sample_2, Weights_2}
    end
end,
{Alpha, J, Sample_2, Weights_3} = Fun_2(lists:seq(0, (erlang:length(Weights_2)) - 1), Alpha, J, Sample_2, Weights_2),
        Weights_3
    catch {return, Ret} -> Ret end.

list_to_string(Xs) ->
    try
        S = "[",
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, S, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            S_2 = (S ++ mochi_str((case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end))),
            case (I_3 < (erlang:length(Xs) - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, S_4, Xs);
        _ -> {I_3, S, Xs}
    end
end,
{I_4, S_4, Xs} = Fun_3(I_3, S, Xs),
        S_5 = (S_4 ++ "]"),
        S_5
    catch {return, Ret} -> Ret end.

matrix_to_string(M) ->
    try
        S_6 = "[",
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, M, S_6) ->
    case (I_5 < erlang:length(M)) of
        true ->
            S_7 = (S_6 ++ list_to_string((case erlang:is_map(M) of true -> maps:get(I_5, M, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(M) + I_5 + 1, M); _ -> mochi_nth(I_5 + 1, M) end end))),
            case (I_5 < (erlang:length(M) - 1)) of
        true -> S_8 = (S_7 ++ ", "),
            S_9 = S_8;
        _ -> S_9 = S_7
    end,
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, M, S_9);
        _ -> {I_5, M, S_6}
    end
end,
{I_6, M, S_9} = Fun_4(I_5, M, S_6),
        S_10 = (S_9 ++ "]"),
        S_10
    catch {return, Ret} -> Ret end.

main() ->
    try
        Training_samples = [[1, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 1]],
        Weights_4 = [[0.2, 0.6, 0.5, 0.9], [0.8, 0.4, 0.7, 0.3]],
        Epochs = 3,
        Alpha_2 = 0.5,
        Fun_5 = fun Fun_5_loop(List, Alpha_2, Epochs, Training_samples, Weights_4) ->
    case List of
        [] -> {Alpha_2, Epochs, Training_samples, Weights_4};
        [_|__rest] ->
            Fun_6 = fun Fun_6_loop(List, Alpha_2, Epochs, Training_samples, Weights_4) ->
    case List of
        [] -> {Alpha_2, Epochs, Training_samples, Weights_4};
        [J_2|J_2_rest] ->
            Sample_3 = (case erlang:is_map(Training_samples) of true -> maps:get(J_2, Training_samples, nil); _ -> case J_2 < 0 of true -> mochi_nth(erlang:length(Training_samples) + J_2 + 1, Training_samples); _ -> mochi_nth(J_2 + 1, Training_samples) end end),
            Winner = get_winner(Weights_4, Sample_3),
            Weights_5 = update(Weights_4, Sample_3, Winner, 0.5),
            Fun_6_loop(J_2_rest, Alpha_2, Epochs, Training_samples, Weights_5);
        _ -> {Alpha_2, Epochs, Training_samples, Weights_4}
    end
end,
{Alpha_2, Epochs, Training_samples, Weights_5} = Fun_6(lists:seq(0, (erlang:length(Training_samples)) - 1), Alpha_2, Epochs, Training_samples, Weights_4),
            Fun_5_loop(__rest, Alpha_2, Epochs, Training_samples, Weights_5);
        _ -> {Alpha_2, Epochs, Training_samples, Weights_4}
    end
end,
{Alpha_2, Epochs, Training_samples, Weights_5} = Fun_5(lists:seq(0, (3) - 1), Alpha_2, Epochs, Training_samples, Weights_4),
        Sample_4 = [0, 0, 0, 1],
        Winner_2 = get_winner(Weights_5, Sample_4),
        io:format("~ts~n", [mochi_repr(("Clusters that the test sample belongs to : " ++ mochi_str(Winner_2)))]),
        io:format("~ts~n", [mochi_repr(("Weights that have been trained : " ++ matrix_to_string(Weights_5)))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
