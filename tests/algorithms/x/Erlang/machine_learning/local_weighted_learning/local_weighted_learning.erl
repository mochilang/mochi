#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, expapprox/1, transpose/1, matmul/2, matinv/1, weight_matrix/3, local_weight/4, local_weight_regression/3]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

expapprox(X) ->
    try
        case (X < 0.0) of
        true -> throw({return, mochi_safe_div(1.0, expapprox(-X))});
        _ -> ok
    end,
        case (X > 1.0) of
        true -> Half = expapprox(mochi_safe_div(X, 2.0)),
            throw({return, mochi_safe_mul(Half, Half)}),
            Half_2 = Half;
        _ -> Half_2 = nil
    end,
        Sum = 1.0,
        Term = 1.0,
        N = 1,
        Fun = fun Fun_loop(Half_2, N, Sum, Term, X) ->
    case (N < 20) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X), float(N)),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(Half_2, N_2, Sum_2, Term_2, X);
        _ -> {Half_2, N, Sum, Term, X}
    end
end,
{Half_2, N_2, Sum_2, Term_2, X} = Fun(Half_2, N, Sum, Term, X),
        Sum_2
    catch {return, Ret} -> Ret end.

transpose(Mat) ->
    try
        Rows = erlang:length(Mat),
        Cols = erlang:length((case erlang:is_map(Mat) of true -> maps:get(0, Mat, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Mat) + 0 + 1, Mat); _ -> mochi_nth(0 + 1, Mat) end end)),
        Res = [],
        I = 0,
        Fun_3 = fun Fun_3_loop(Cols, I, Mat, Res, Rows) ->
    case (I < Cols) of
        true ->
            Row = [],
            J = 0,
            Fun_2 = fun Fun_2_loop(Cols, I, J, Mat, Res, Row, Rows) ->
    case (J < Rows) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [(case erlang:is_map((case erlang:is_map(Mat) of true -> maps:get(J, Mat, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Mat) + J + 1, Mat); _ -> mochi_nth(J + 1, Mat) end end)) of true -> maps:get(I, (case erlang:is_map(Mat) of true -> maps:get(J, Mat, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Mat) + J + 1, Mat); _ -> mochi_nth(J + 1, Mat) end end), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat) of true -> maps:get(J, Mat, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Mat) + J + 1, Mat); _ -> mochi_nth(J + 1, Mat) end end)) + I + 1, (case erlang:is_map(Mat) of true -> maps:get(J, Mat, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Mat) + J + 1, Mat); _ -> mochi_nth(J + 1, Mat) end end)); _ -> mochi_nth(I + 1, (case erlang:is_map(Mat) of true -> maps:get(J, Mat, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Mat) + J + 1, Mat); _ -> mochi_nth(J + 1, Mat) end end)) end end)]),
            J_2 = (J + 1),
            Fun_2_loop(Cols, I, J_2, Mat, Res, Row_2, Rows);
        _ -> {Cols, I, J, Mat, Res, Row, Rows}
    end
end,
{Cols, I, J_2, Mat, Res, Row_2, Rows} = Fun_2(Cols, I, J, Mat, Res, Row, Rows),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Row_2]),
            I_2 = (I + 1),
            Fun_3_loop(Cols, I_2, Mat, Res_2, Rows);
        _ -> {Cols, I, Mat, Res, Rows}
    end
end,
{Cols, I_2, Mat, Res_2, Rows} = Fun_3(Cols, I, Mat, Res, Rows),
        Res_2
    catch {return, Ret} -> Ret end.

matmul(A, B) ->
    try
        A_rows = erlang:length(A),
        A_cols = erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)),
        B_cols = erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)),
        Res_3 = [],
        I_3 = 0,
        Fun_6 = fun Fun_6_loop(A, A_cols, A_rows, B, B_cols, I_3, Res_3) ->
    case (I_3 < A_rows) of
        true ->
            Row_3 = [],
            J_3 = 0,
            Fun_5 = fun Fun_5_loop(A, A_cols, A_rows, B, B_cols, I_3, J_3, Res_3, Row_3) ->
    case (J_3 < B_cols) of
        true ->
            Sum_3 = 0.0,
            K = 0,
            Fun_4 = fun Fun_4_loop(A, A_cols, A_rows, B, B_cols, I_3, J_3, K, Res_3, Row_3, Sum_3) ->
    case (K < A_cols) of
        true ->
            Sum_4 = (Sum_3 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end)) of true -> maps:get(K, (case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end)) + K + 1, (case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end)) end end), (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) of true -> maps:get(J_3, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) + J_3 + 1, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) end end))),
            K_2 = (K + 1),
            Fun_4_loop(A, A_cols, A_rows, B, B_cols, I_3, J_3, K_2, Res_3, Row_3, Sum_4);
        _ -> {A, A_cols, A_rows, B, B_cols, I_3, J_3, K, Res_3, Row_3, Sum_3}
    end
end,
{A, A_cols, A_rows, B, B_cols, I_3, J_3, K_2, Res_3, Row_3, Sum_4} = Fun_4(A, A_cols, A_rows, B, B_cols, I_3, J_3, K, Res_3, Row_3, Sum_3),
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [Sum_4]),
            J_4 = (J_3 + 1),
            Fun_5_loop(A, A_cols, A_rows, B, B_cols, I_3, J_4, Res_3, Row_4);
        _ -> {A, A_cols, A_rows, B, B_cols, I_3, J_3, Res_3, Row_3}
    end
end,
{A, A_cols, A_rows, B, B_cols, I_3, J_4, Res_3, Row_4} = Fun_5(A, A_cols, A_rows, B, B_cols, I_3, J_3, Res_3, Row_3),
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Row_4]),
            I_4 = (I_3 + 1),
            Fun_6_loop(A, A_cols, A_rows, B, B_cols, I_4, Res_4);
        _ -> {A, A_cols, A_rows, B, B_cols, I_3, Res_3}
    end
end,
{A, A_cols, A_rows, B, B_cols, I_4, Res_4} = Fun_6(A, A_cols, A_rows, B, B_cols, I_3, Res_3),
        Res_4
    catch {return, Ret} -> Ret end.

matinv(Mat_2) ->
    try
        N_3 = erlang:length(Mat_2),
        Aug = [],
        I_5 = 0,
        Fun_9 = fun Fun_9_loop(Aug, I_5, Mat_2, N_3) ->
    case (I_5 < N_3) of
        true ->
            Row_5 = [],
            J_5 = 0,
            Fun_7 = fun Fun_7_loop(Aug, I_5, J_5, Mat_2, N_3, Row_5) ->
    case (J_5 < N_3) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [(case erlang:is_map((case erlang:is_map(Mat_2) of true -> maps:get(I_5, Mat_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_2) + I_5 + 1, Mat_2); _ -> mochi_nth(I_5 + 1, Mat_2) end end)) of true -> maps:get(J_5, (case erlang:is_map(Mat_2) of true -> maps:get(I_5, Mat_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_2) + I_5 + 1, Mat_2); _ -> mochi_nth(I_5 + 1, Mat_2) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat_2) of true -> maps:get(I_5, Mat_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_2) + I_5 + 1, Mat_2); _ -> mochi_nth(I_5 + 1, Mat_2) end end)) + J_5 + 1, (case erlang:is_map(Mat_2) of true -> maps:get(I_5, Mat_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_2) + I_5 + 1, Mat_2); _ -> mochi_nth(I_5 + 1, Mat_2) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(Mat_2) of true -> maps:get(I_5, Mat_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_2) + I_5 + 1, Mat_2); _ -> mochi_nth(I_5 + 1, Mat_2) end end)) end end)]),
            J_6 = (J_5 + 1),
            Fun_7_loop(Aug, I_5, J_6, Mat_2, N_3, Row_6);
        _ -> {Aug, I_5, J_5, Mat_2, N_3, Row_5}
    end
end,
{Aug, I_5, J_6, Mat_2, N_3, Row_6} = Fun_7(Aug, I_5, J_5, Mat_2, N_3, Row_5),
            J_7 = 0,
            Fun_8 = fun Fun_8_loop(Aug, I_5, J_7, Mat_2, N_3, Row_6) ->
    case (J_7 < N_3) of
        true ->
            case (I_5 == J_7) of
        true -> Row_7 = lists:append((case Row_6 of nil -> []; _ -> Row_6 end), [1.0]),
            Row_9 = Row_7;
        _ -> Row_8 = lists:append((case Row_6 of nil -> []; _ -> Row_6 end), [0.0]),
            Row_9 = Row_8
    end,
            J_8 = (J_7 + 1),
            Fun_8_loop(Aug, I_5, J_8, Mat_2, N_3, Row_9);
        _ -> {Aug, I_5, J_7, Mat_2, N_3, Row_6}
    end
end,
{Aug, I_5, J_8, Mat_2, N_3, Row_9} = Fun_8(Aug, I_5, J_7, Mat_2, N_3, Row_6),
            Aug_2 = lists:append((case Aug of nil -> []; _ -> Aug end), [Row_9]),
            I_6 = (I_5 + 1),
            Fun_9_loop(Aug_2, I_6, Mat_2, N_3);
        _ -> {Aug, I_5, Mat_2, N_3}
    end
end,
{Aug_2, I_6, Mat_2, N_3} = Fun_9(Aug, I_5, Mat_2, N_3),
        Col = 0,
        Fun_14 = fun Fun_14_loop(Aug_2, Col, I_6, Mat_2, N_3) ->
    case (Col < N_3) of
        true ->
            Pivot = (case erlang:is_map((case erlang:is_map(Aug_2) of true -> maps:get(Col, Aug_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_2) + Col + 1, Aug_2); _ -> mochi_nth(Col + 1, Aug_2) end end)) of true -> maps:get(Col, (case erlang:is_map(Aug_2) of true -> maps:get(Col, Aug_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_2) + Col + 1, Aug_2); _ -> mochi_nth(Col + 1, Aug_2) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_2) of true -> maps:get(Col, Aug_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_2) + Col + 1, Aug_2); _ -> mochi_nth(Col + 1, Aug_2) end end)) + Col + 1, (case erlang:is_map(Aug_2) of true -> maps:get(Col, Aug_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_2) + Col + 1, Aug_2); _ -> mochi_nth(Col + 1, Aug_2) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(Aug_2) of true -> maps:get(Col, Aug_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_2) + Col + 1, Aug_2); _ -> mochi_nth(Col + 1, Aug_2) end end)) end end),
            case (Pivot == 0.0) of
        true -> erlang:error("Matrix is singular");
        _ -> ok
    end,
            J_9 = 0,
            Fun_10 = fun Fun_10_loop(Aug_2, Col, I_6, J_9, Mat_2, N_3, Pivot) ->
    case (J_9 < (2 * N_3)) of
        true ->
            Aug_3 = lists:sublist(Aug_2, Col) ++ [lists:sublist(lists:nth(Col + 1, Aug_2), J_9) ++ [mochi_safe_div((case erlang:is_map((case erlang:is_map(Aug_2) of true -> maps:get(Col, Aug_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_2) + Col + 1, Aug_2); _ -> mochi_nth(Col + 1, Aug_2) end end)) of true -> maps:get(J_9, (case erlang:is_map(Aug_2) of true -> maps:get(Col, Aug_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_2) + Col + 1, Aug_2); _ -> mochi_nth(Col + 1, Aug_2) end end), nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_2) of true -> maps:get(Col, Aug_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_2) + Col + 1, Aug_2); _ -> mochi_nth(Col + 1, Aug_2) end end)) + J_9 + 1, (case erlang:is_map(Aug_2) of true -> maps:get(Col, Aug_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_2) + Col + 1, Aug_2); _ -> mochi_nth(Col + 1, Aug_2) end end)); _ -> mochi_nth(J_9 + 1, (case erlang:is_map(Aug_2) of true -> maps:get(Col, Aug_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_2) + Col + 1, Aug_2); _ -> mochi_nth(Col + 1, Aug_2) end end)) end end), Pivot)] ++ lists:nthtail(J_9 + 1, lists:nth(Col + 1, Aug_2))] ++ lists:nthtail(Col + 1, Aug_2),
            J_10 = (J_9 + 1),
            Fun_10_loop(Aug_3, Col, I_6, J_10, Mat_2, N_3, Pivot);
        _ -> {Aug_2, Col, I_6, J_9, Mat_2, N_3, Pivot}
    end
end,
{Aug_3, Col, I_6, J_10, Mat_2, N_3, Pivot} = Fun_10(Aug_2, Col, I_6, J_9, Mat_2, N_3, Pivot),
            R = 0,
            Fun_13 = fun Fun_13_loop(Aug_3, Col, I_6, J_10, Mat_2, N_3, Pivot, R) ->
    case (R < N_3) of
        true ->
            case (R /= Col) of
        true -> Factor = (case erlang:is_map((case erlang:is_map(Aug_3) of true -> maps:get(R, Aug_3, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_3) + R + 1, Aug_3); _ -> mochi_nth(R + 1, Aug_3) end end)) of true -> maps:get(Col, (case erlang:is_map(Aug_3) of true -> maps:get(R, Aug_3, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_3) + R + 1, Aug_3); _ -> mochi_nth(R + 1, Aug_3) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_3) of true -> maps:get(R, Aug_3, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_3) + R + 1, Aug_3); _ -> mochi_nth(R + 1, Aug_3) end end)) + Col + 1, (case erlang:is_map(Aug_3) of true -> maps:get(R, Aug_3, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_3) + R + 1, Aug_3); _ -> mochi_nth(R + 1, Aug_3) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(Aug_3) of true -> maps:get(R, Aug_3, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_3) + R + 1, Aug_3); _ -> mochi_nth(R + 1, Aug_3) end end)) end end),
            J_11 = 0,
            Fun_11 = fun Fun_11_loop(Aug_3, Col, Factor, I_6, J_11, Mat_2, N_3, Pivot, R) ->
    case (J_11 < (2 * N_3)) of
        true ->
            Aug_4 = lists:sublist(Aug_3, R) ++ [lists:sublist(lists:nth(R + 1, Aug_3), J_11) ++ [((case erlang:is_map((case erlang:is_map(Aug_3) of true -> maps:get(R, Aug_3, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_3) + R + 1, Aug_3); _ -> mochi_nth(R + 1, Aug_3) end end)) of true -> maps:get(J_11, (case erlang:is_map(Aug_3) of true -> maps:get(R, Aug_3, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_3) + R + 1, Aug_3); _ -> mochi_nth(R + 1, Aug_3) end end), nil); _ -> case J_11 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_3) of true -> maps:get(R, Aug_3, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_3) + R + 1, Aug_3); _ -> mochi_nth(R + 1, Aug_3) end end)) + J_11 + 1, (case erlang:is_map(Aug_3) of true -> maps:get(R, Aug_3, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_3) + R + 1, Aug_3); _ -> mochi_nth(R + 1, Aug_3) end end)); _ -> mochi_nth(J_11 + 1, (case erlang:is_map(Aug_3) of true -> maps:get(R, Aug_3, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_3) + R + 1, Aug_3); _ -> mochi_nth(R + 1, Aug_3) end end)) end end) - mochi_safe_mul(Factor, (case erlang:is_map((case erlang:is_map(Aug_3) of true -> maps:get(Col, Aug_3, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_3) + Col + 1, Aug_3); _ -> mochi_nth(Col + 1, Aug_3) end end)) of true -> maps:get(J_11, (case erlang:is_map(Aug_3) of true -> maps:get(Col, Aug_3, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_3) + Col + 1, Aug_3); _ -> mochi_nth(Col + 1, Aug_3) end end), nil); _ -> case J_11 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_3) of true -> maps:get(Col, Aug_3, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_3) + Col + 1, Aug_3); _ -> mochi_nth(Col + 1, Aug_3) end end)) + J_11 + 1, (case erlang:is_map(Aug_3) of true -> maps:get(Col, Aug_3, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_3) + Col + 1, Aug_3); _ -> mochi_nth(Col + 1, Aug_3) end end)); _ -> mochi_nth(J_11 + 1, (case erlang:is_map(Aug_3) of true -> maps:get(Col, Aug_3, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_3) + Col + 1, Aug_3); _ -> mochi_nth(Col + 1, Aug_3) end end)) end end)))] ++ lists:nthtail(J_11 + 1, lists:nth(R + 1, Aug_3))] ++ lists:nthtail(R + 1, Aug_3),
            J_12 = (J_11 + 1),
            Fun_11_loop(Aug_4, Col, Factor, I_6, J_12, Mat_2, N_3, Pivot, R);
        _ -> {Aug_3, Col, Factor, I_6, J_11, Mat_2, N_3, Pivot, R}
    end
end,
{Aug_4, Col, Factor, I_6, J_12, Mat_2, N_3, Pivot, R} = Fun_11(Aug_3, Col, Factor, I_6, J_11, Mat_2, N_3, Pivot, R),
            Aug_5 = Aug_4,
            Factor_2 = Factor,
            Fun_12 = Fun_11,
            J_13 = J_12;
        _ -> Aug_5 = Aug_3,
            Factor_2 = nil,
            Fun_12 = Fun_10,
            J_13 = J_10
    end,
            R_2 = (R + 1),
            Fun_13_loop(Aug_5, Col, I_6, J_13, Mat_2, N_3, Pivot, R_2);
        _ -> {Aug_3, Col, I_6, J_10, Mat_2, N_3, Pivot, R}
    end
end,
{Aug_5, Col, I_6, J_13, Mat_2, N_3, Pivot, R_2} = Fun_13(Aug_3, Col, I_6, J_10, Mat_2, N_3, Pivot, R),
            Col_2 = (Col + 1),
            Fun_14_loop(Aug_5, Col_2, I_6, Mat_2, N_3);
        _ -> {Aug_2, Col, I_6, Mat_2, N_3}
    end
end,
{Aug_5, Col_2, I_6, Mat_2, N_3} = Fun_14(Aug_2, Col, I_6, Mat_2, N_3),
        Inv = [],
        I_7 = 0,
        Fun_16 = fun Fun_16_loop(Aug_5, Col_2, I_7, Inv, Mat_2, N_3) ->
    case (I_7 < N_3) of
        true ->
            Row_10 = [],
            J_14 = 0,
            Fun_15 = fun Fun_15_loop(Aug_5, Col_2, I_7, Inv, J_14, Mat_2, N_3, Row_10) ->
    case (J_14 < N_3) of
        true ->
            Row_11 = lists:append((case Row_10 of nil -> []; _ -> Row_10 end), [(case erlang:is_map((case erlang:is_map(Aug_5) of true -> maps:get(I_7, Aug_5, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Aug_5) + I_7 + 1, Aug_5); _ -> mochi_nth(I_7 + 1, Aug_5) end end)) of true -> maps:get((J_14 + N_3), (case erlang:is_map(Aug_5) of true -> maps:get(I_7, Aug_5, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Aug_5) + I_7 + 1, Aug_5); _ -> mochi_nth(I_7 + 1, Aug_5) end end), nil); _ -> case (J_14 + N_3) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_5) of true -> maps:get(I_7, Aug_5, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Aug_5) + I_7 + 1, Aug_5); _ -> mochi_nth(I_7 + 1, Aug_5) end end)) + (J_14 + N_3) + 1, (case erlang:is_map(Aug_5) of true -> maps:get(I_7, Aug_5, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Aug_5) + I_7 + 1, Aug_5); _ -> mochi_nth(I_7 + 1, Aug_5) end end)); _ -> mochi_nth((J_14 + N_3) + 1, (case erlang:is_map(Aug_5) of true -> maps:get(I_7, Aug_5, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Aug_5) + I_7 + 1, Aug_5); _ -> mochi_nth(I_7 + 1, Aug_5) end end)) end end)]),
            J_15 = (J_14 + 1),
            Fun_15_loop(Aug_5, Col_2, I_7, Inv, J_15, Mat_2, N_3, Row_11);
        _ -> {Aug_5, Col_2, I_7, Inv, J_14, Mat_2, N_3, Row_10}
    end
end,
{Aug_5, Col_2, I_7, Inv, J_15, Mat_2, N_3, Row_11} = Fun_15(Aug_5, Col_2, I_7, Inv, J_14, Mat_2, N_3, Row_10),
            Inv_2 = lists:append((case Inv of nil -> []; _ -> Inv end), [Row_11]),
            I_8 = (I_7 + 1),
            Fun_16_loop(Aug_5, Col_2, I_8, Inv_2, Mat_2, N_3);
        _ -> {Aug_5, Col_2, I_7, Inv, Mat_2, N_3}
    end
end,
{Aug_5, Col_2, I_8, Inv_2, Mat_2, N_3} = Fun_16(Aug_5, Col_2, I_7, Inv, Mat_2, N_3),
        Inv_2
    catch {return, Ret} -> Ret end.

weight_matrix(Point, X_train, Tau) ->
    try
        M = erlang:length(X_train),
        Weights = [],
        I_9 = 0,
        Fun_18 = fun Fun_18_loop(I_9, M, Point, Tau, Weights, X_train) ->
    case (I_9 < M) of
        true ->
            Row_12 = [],
            J_16 = 0,
            Fun_17 = fun Fun_17_loop(I_9, J_16, M, Point, Row_12, Tau, Weights, X_train) ->
    case (J_16 < M) of
        true ->
            case (I_9 == J_16) of
        true -> Row_13 = lists:append((case Row_12 of nil -> []; _ -> Row_12 end), [1.0]),
            Row_15 = Row_13;
        _ -> Row_14 = lists:append((case Row_12 of nil -> []; _ -> Row_12 end), [0.0]),
            Row_15 = Row_14
    end,
            J_17 = (J_16 + 1),
            Fun_17_loop(I_9, J_17, M, Point, Row_15, Tau, Weights, X_train);
        _ -> {I_9, J_16, M, Point, Row_12, Tau, Weights, X_train}
    end
end,
{I_9, J_17, M, Point, Row_15, Tau, Weights, X_train} = Fun_17(I_9, J_16, M, Point, Row_12, Tau, Weights, X_train),
            Weights_2 = lists:append((case Weights of nil -> []; _ -> Weights end), [Row_15]),
            I_10 = (I_9 + 1),
            Fun_18_loop(I_10, M, Point, Tau, Weights_2, X_train);
        _ -> {I_9, M, Point, Tau, Weights, X_train}
    end
end,
{I_10, M, Point, Tau, Weights_2, X_train} = Fun_18(I_9, M, Point, Tau, Weights, X_train),
        J_18 = 0,
        Fun_20 = fun Fun_20_loop(I_10, J_18, M, Point, Tau, Weights_2, X_train) ->
    case (J_18 < M) of
        true ->
            Diff_sq = 0.0,
            K_3 = 0,
            Fun_19 = fun Fun_19_loop(Diff_sq, I_10, J_18, K_3, M, Point, Tau, Weights_2, X_train) ->
    case (K_3 < erlang:length(Point)) of
        true ->
            Diff = ((case erlang:is_map(Point) of true -> maps:get(K_3, Point, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Point) + K_3 + 1, Point); _ -> mochi_nth(K_3 + 1, Point) end end) - (case erlang:is_map((case erlang:is_map(X_train) of true -> maps:get(J_18, X_train, nil); _ -> case J_18 < 0 of true -> mochi_nth(erlang:length(X_train) + J_18 + 1, X_train); _ -> mochi_nth(J_18 + 1, X_train) end end)) of true -> maps:get(K_3, (case erlang:is_map(X_train) of true -> maps:get(J_18, X_train, nil); _ -> case J_18 < 0 of true -> mochi_nth(erlang:length(X_train) + J_18 + 1, X_train); _ -> mochi_nth(J_18 + 1, X_train) end end), nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(X_train) of true -> maps:get(J_18, X_train, nil); _ -> case J_18 < 0 of true -> mochi_nth(erlang:length(X_train) + J_18 + 1, X_train); _ -> mochi_nth(J_18 + 1, X_train) end end)) + K_3 + 1, (case erlang:is_map(X_train) of true -> maps:get(J_18, X_train, nil); _ -> case J_18 < 0 of true -> mochi_nth(erlang:length(X_train) + J_18 + 1, X_train); _ -> mochi_nth(J_18 + 1, X_train) end end)); _ -> mochi_nth(K_3 + 1, (case erlang:is_map(X_train) of true -> maps:get(J_18, X_train, nil); _ -> case J_18 < 0 of true -> mochi_nth(erlang:length(X_train) + J_18 + 1, X_train); _ -> mochi_nth(J_18 + 1, X_train) end end)) end end)),
            Diff_sq_2 = (Diff_sq + mochi_safe_mul(Diff, Diff)),
            K_4 = (K_3 + 1),
            Fun_19_loop(Diff_sq_2, I_10, J_18, K_4, M, Point, Tau, Weights_2, X_train);
        _ -> {Diff_sq, I_10, J_18, K_3, M, Point, Tau, Weights_2, X_train}
    end
end,
{Diff_sq_2, I_10, J_18, K_4, M, Point, Tau, Weights_2, X_train} = Fun_19(Diff_sq, I_10, J_18, K_3, M, Point, Tau, Weights_2, X_train),
            Weights_3 = lists:sublist(Weights_2, J_18) ++ [lists:sublist(lists:nth(J_18 + 1, Weights_2), J_18) ++ [expapprox(mochi_safe_div(-Diff_sq_2, mochi_safe_mul(mochi_safe_mul(2.0, Tau), Tau)))] ++ lists:nthtail(J_18 + 1, lists:nth(J_18 + 1, Weights_2))] ++ lists:nthtail(J_18 + 1, Weights_2),
            J_19 = (J_18 + 1),
            Fun_20_loop(I_10, J_19, M, Point, Tau, Weights_3, X_train);
        _ -> {I_10, J_18, M, Point, Tau, Weights_2, X_train}
    end
end,
{I_10, J_19, M, Point, Tau, Weights_3, X_train} = Fun_20(I_10, J_18, M, Point, Tau, Weights_2, X_train),
        Weights_3
    catch {return, Ret} -> Ret end.

local_weight(Point_2, X_train_2, Y_train, Tau_2) ->
    try
        W = weight_matrix(Point_2, X_train_2, Tau_2),
        X_t = transpose(X_train_2),
        X_t_w = matmul(X_t, W),
        X_t_w_x = matmul(X_t_w, X_train_2),
        Inv_part = matinv(X_t_w_x),
        Y_col = [],
        I_11 = 0,
        Fun_21 = fun Fun_21_loop(I_11, Inv_part, Point_2, Tau_2, W, X_t, X_t_w, X_t_w_x, X_train_2, Y_col, Y_train) ->
    case (I_11 < erlang:length(Y_train)) of
        true ->
            Y_col_2 = lists:append((case Y_col of nil -> []; _ -> Y_col end), [[(case erlang:is_map(Y_train) of true -> maps:get(I_11, Y_train, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Y_train) + I_11 + 1, Y_train); _ -> mochi_nth(I_11 + 1, Y_train) end end)]]),
            I_12 = (I_11 + 1),
            Fun_21_loop(I_12, Inv_part, Point_2, Tau_2, W, X_t, X_t_w, X_t_w_x, X_train_2, Y_col_2, Y_train);
        _ -> {I_11, Inv_part, Point_2, Tau_2, W, X_t, X_t_w, X_t_w_x, X_train_2, Y_col, Y_train}
    end
end,
{I_12, Inv_part, Point_2, Tau_2, W, X_t, X_t_w, X_t_w_x, X_train_2, Y_col_2, Y_train} = Fun_21(I_11, Inv_part, Point_2, Tau_2, W, X_t, X_t_w, X_t_w_x, X_train_2, Y_col, Y_train),
        X_t_w_y = matmul(X_t_w, Y_col_2),
        matmul(Inv_part, X_t_w_y)
    catch {return, Ret} -> Ret end.

local_weight_regression(X_train_3, Y_train_2, Tau_3) ->
    try
        M_2 = erlang:length(X_train_3),
        Preds = [],
        I_13 = 0,
        Fun_24 = fun Fun_24_loop(I_13, M_2, Preds, Tau_3, X_train_3, Y_train_2) ->
    case (I_13 < M_2) of
        true ->
            Theta = local_weight((case erlang:is_map(X_train_3) of true -> maps:get(I_13, X_train_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(X_train_3) + I_13 + 1, X_train_3); _ -> mochi_nth(I_13 + 1, X_train_3) end end), X_train_3, Y_train_2, Tau_3),
            Weights_vec = [],
            K_5 = 0,
            Fun_22 = fun Fun_22_loop(I_13, K_5, M_2, Preds, Tau_3, Theta, Weights_vec, X_train_3, Y_train_2) ->
    case (K_5 < erlang:length(Theta)) of
        true ->
            Weights_vec_2 = lists:append((case Weights_vec of nil -> []; _ -> Weights_vec end), [(case erlang:is_map((case erlang:is_map(Theta) of true -> maps:get(K_5, Theta, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(Theta) + K_5 + 1, Theta); _ -> mochi_nth(K_5 + 1, Theta) end end)) of true -> maps:get(0, (case erlang:is_map(Theta) of true -> maps:get(K_5, Theta, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(Theta) + K_5 + 1, Theta); _ -> mochi_nth(K_5 + 1, Theta) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Theta) of true -> maps:get(K_5, Theta, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(Theta) + K_5 + 1, Theta); _ -> mochi_nth(K_5 + 1, Theta) end end)) + 0 + 1, (case erlang:is_map(Theta) of true -> maps:get(K_5, Theta, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(Theta) + K_5 + 1, Theta); _ -> mochi_nth(K_5 + 1, Theta) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Theta) of true -> maps:get(K_5, Theta, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(Theta) + K_5 + 1, Theta); _ -> mochi_nth(K_5 + 1, Theta) end end)) end end)]),
            K_6 = (K_5 + 1),
            Fun_22_loop(I_13, K_6, M_2, Preds, Tau_3, Theta, Weights_vec_2, X_train_3, Y_train_2);
        _ -> {I_13, K_5, M_2, Preds, Tau_3, Theta, Weights_vec, X_train_3, Y_train_2}
    end
end,
{I_13, K_6, M_2, Preds, Tau_3, Theta, Weights_vec_2, X_train_3, Y_train_2} = Fun_22(I_13, K_5, M_2, Preds, Tau_3, Theta, Weights_vec, X_train_3, Y_train_2),
            Pred = 0.0,
            J_20 = 0,
            Fun_23 = fun Fun_23_loop(I_13, J_20, K_6, M_2, Pred, Preds, Tau_3, Theta, Weights_vec_2, X_train_3, Y_train_2) ->
    case (J_20 < erlang:length((case erlang:is_map(X_train_3) of true -> maps:get(I_13, X_train_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(X_train_3) + I_13 + 1, X_train_3); _ -> mochi_nth(I_13 + 1, X_train_3) end end))) of
        true ->
            Pred_2 = (Pred + mochi_safe_mul((case erlang:is_map((case erlang:is_map(X_train_3) of true -> maps:get(I_13, X_train_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(X_train_3) + I_13 + 1, X_train_3); _ -> mochi_nth(I_13 + 1, X_train_3) end end)) of true -> maps:get(J_20, (case erlang:is_map(X_train_3) of true -> maps:get(I_13, X_train_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(X_train_3) + I_13 + 1, X_train_3); _ -> mochi_nth(I_13 + 1, X_train_3) end end), nil); _ -> case J_20 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(X_train_3) of true -> maps:get(I_13, X_train_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(X_train_3) + I_13 + 1, X_train_3); _ -> mochi_nth(I_13 + 1, X_train_3) end end)) + J_20 + 1, (case erlang:is_map(X_train_3) of true -> maps:get(I_13, X_train_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(X_train_3) + I_13 + 1, X_train_3); _ -> mochi_nth(I_13 + 1, X_train_3) end end)); _ -> mochi_nth(J_20 + 1, (case erlang:is_map(X_train_3) of true -> maps:get(I_13, X_train_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(X_train_3) + I_13 + 1, X_train_3); _ -> mochi_nth(I_13 + 1, X_train_3) end end)) end end), (case erlang:is_map(Weights_vec_2) of true -> maps:get(J_20, Weights_vec_2, nil); _ -> case J_20 < 0 of true -> mochi_nth(erlang:length(Weights_vec_2) + J_20 + 1, Weights_vec_2); _ -> mochi_nth(J_20 + 1, Weights_vec_2) end end))),
            J_21 = (J_20 + 1),
            Fun_23_loop(I_13, J_21, K_6, M_2, Pred_2, Preds, Tau_3, Theta, Weights_vec_2, X_train_3, Y_train_2);
        _ -> {I_13, J_20, K_6, M_2, Pred, Preds, Tau_3, Theta, Weights_vec_2, X_train_3, Y_train_2}
    end
end,
{I_13, J_21, K_6, M_2, Pred_2, Preds, Tau_3, Theta, Weights_vec_2, X_train_3, Y_train_2} = Fun_23(I_13, J_20, K_6, M_2, Pred, Preds, Tau_3, Theta, Weights_vec_2, X_train_3, Y_train_2),
            Preds_2 = lists:append((case Preds of nil -> []; _ -> Preds end), [Pred_2]),
            I_14 = (I_13 + 1),
            Fun_24_loop(I_14, M_2, Preds_2, Tau_3, X_train_3, Y_train_2);
        _ -> {I_13, M_2, Preds, Tau_3, X_train_3, Y_train_2}
    end
end,
{I_14, M_2, Preds_2, Tau_3, X_train_3, Y_train_2} = Fun_24(I_13, M_2, Preds, Tau_3, X_train_3, Y_train_2),
        Preds_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('x_train', [[16.99, 10.34], [21.01, 23.68], [24.59, 25.69]]),
    erlang:put('y_train', [1.01, 1.66, 3.5]),
    erlang:put('preds', local_weight_regression(erlang:get('x_train'), erlang:get('y_train'), 0.6)),
    io:format("~p~n", [erlang:get('preds')]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
