#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, exp_taylor/1, sigmoid/1, train/2, predict/1, wrapper/1]).

% Generated by Mochi transpiler v0.10.66 (fa2dc5e881)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

exp_taylor(X) ->
    try
        Term = 1.0,
        Sum = 1.0,
        I = 1.0,
        Fun = fun Fun_loop(I, Sum, Term, X) ->
    case (I < 20.0) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X), I),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1.0),
            Fun_loop(I_2, Sum_2, Term_2, X);
        _ -> {I, Sum, Term, X}
    end
end,
{I_2, Sum_2, Term_2, X} = Fun(I, Sum, Term, X),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

sigmoid(X_2) ->
    try
        mochi_safe_div(1.0, (1.0 + exp_taylor(-X_2)))
    catch {return, RetCatch} -> RetCatch end.

train(Epochs, Lr) ->
    try
        E = 0,
        Fun_3 = fun Fun_3_loop(E, Epochs, Lr) ->
    case (E < Epochs) of
        true ->
            I_3 = 0,
            Fun_2 = fun Fun_2_loop(E, Epochs, I_3, Lr) ->
    case (I_3 < erlang:length(erlang:get('X'))) of
        true ->
            X0 = (case erlang:is_map((case erlang:is_map(erlang:get('X')) of true -> maps:get(I_3, erlang:get('X'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('X')) + I_3 + 1, erlang:get('X')); _ -> mochi_nth(I_3 + 1, erlang:get('X')) end end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('X')) of true -> maps:get(I_3, erlang:get('X'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('X')) + I_3 + 1, erlang:get('X')); _ -> mochi_nth(I_3 + 1, erlang:get('X')) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('X')) of true -> maps:get(I_3, erlang:get('X'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('X')) + I_3 + 1, erlang:get('X')); _ -> mochi_nth(I_3 + 1, erlang:get('X')) end end)) + 0 + 1, (case erlang:is_map(erlang:get('X')) of true -> maps:get(I_3, erlang:get('X'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('X')) + I_3 + 1, erlang:get('X')); _ -> mochi_nth(I_3 + 1, erlang:get('X')) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(erlang:get('X')) of true -> maps:get(I_3, erlang:get('X'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('X')) + I_3 + 1, erlang:get('X')); _ -> mochi_nth(I_3 + 1, erlang:get('X')) end end)) end end),
            X1 = (case erlang:is_map((case erlang:is_map(erlang:get('X')) of true -> maps:get(I_3, erlang:get('X'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('X')) + I_3 + 1, erlang:get('X')); _ -> mochi_nth(I_3 + 1, erlang:get('X')) end end)) of true -> maps:get(1, (case erlang:is_map(erlang:get('X')) of true -> maps:get(I_3, erlang:get('X'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('X')) + I_3 + 1, erlang:get('X')); _ -> mochi_nth(I_3 + 1, erlang:get('X')) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('X')) of true -> maps:get(I_3, erlang:get('X'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('X')) + I_3 + 1, erlang:get('X')); _ -> mochi_nth(I_3 + 1, erlang:get('X')) end end)) + 1 + 1, (case erlang:is_map(erlang:get('X')) of true -> maps:get(I_3, erlang:get('X'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('X')) + I_3 + 1, erlang:get('X')); _ -> mochi_nth(I_3 + 1, erlang:get('X')) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(erlang:get('X')) of true -> maps:get(I_3, erlang:get('X'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('X')) + I_3 + 1, erlang:get('X')); _ -> mochi_nth(I_3 + 1, erlang:get('X')) end end)) end end),
            Target = (case erlang:is_map(erlang:get('Y')) of true -> maps:get(I_3, erlang:get('Y'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('Y')) + I_3 + 1, erlang:get('Y')); _ -> mochi_nth(I_3 + 1, erlang:get('Y')) end end),
            Z1 = ((mochi_safe_mul((case erlang:is_map((case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) + 0 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) end end), X0) + mochi_safe_mul((case erlang:is_map((case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) + 0 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) end end), X1)) + (case erlang:is_map(erlang:get('b1')) of true -> maps:get(0, erlang:get('b1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('b1')) + 0 + 1, erlang:get('b1')); _ -> mochi_nth(0 + 1, erlang:get('b1')) end end)),
            Z2 = ((mochi_safe_mul((case erlang:is_map((case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) of true -> maps:get(1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) + 1 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) end end), X0) + mochi_safe_mul((case erlang:is_map((case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) of true -> maps:get(1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) + 1 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) end end), X1)) + (case erlang:is_map(erlang:get('b1')) of true -> maps:get(1, erlang:get('b1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('b1')) + 1 + 1, erlang:get('b1')); _ -> mochi_nth(1 + 1, erlang:get('b1')) end end)),
            H1 = sigmoid(Z1),
            H2 = sigmoid(Z2),
            Z3 = ((mochi_safe_mul((case erlang:is_map(erlang:get('w2')) of true -> maps:get(0, erlang:get('w2'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w2')) + 0 + 1, erlang:get('w2')); _ -> mochi_nth(0 + 1, erlang:get('w2')) end end), H1) + mochi_safe_mul((case erlang:is_map(erlang:get('w2')) of true -> maps:get(1, erlang:get('w2'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w2')) + 1 + 1, erlang:get('w2')); _ -> mochi_nth(1 + 1, erlang:get('w2')) end end), H2)) + erlang:get('b2')),
            Out = sigmoid(Z3),
            Error = (Out - Target),
            D1 = mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(H1, (1.0 - H1)), (case erlang:is_map(erlang:get('w2')) of true -> maps:get(0, erlang:get('w2'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w2')) + 0 + 1, erlang:get('w2')); _ -> mochi_nth(0 + 1, erlang:get('w2')) end end)), Error),
            D2 = mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(H2, (1.0 - H2)), (case erlang:is_map(erlang:get('w2')) of true -> maps:get(1, erlang:get('w2'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w2')) + 1 + 1, erlang:get('w2')); _ -> mochi_nth(1 + 1, erlang:get('w2')) end end)), Error),
            W2_tmp = lists:sublist(erlang:get('w2'), 0) ++ [((case erlang:is_map(erlang:get('w2')) of true -> maps:get(0, erlang:get('w2'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w2')) + 0 + 1, erlang:get('w2')); _ -> mochi_nth(0 + 1, erlang:get('w2')) end end) - mochi_safe_mul(mochi_safe_mul(Lr, Error), H1))] ++ lists:nthtail(0 + 1, erlang:get('w2')),
            erlang:put('w2', W2_tmp),
            W2_tmp_2 = lists:sublist(erlang:get('w2'), 1) ++ [((case erlang:is_map(erlang:get('w2')) of true -> maps:get(1, erlang:get('w2'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w2')) + 1 + 1, erlang:get('w2')); _ -> mochi_nth(1 + 1, erlang:get('w2')) end end) - mochi_safe_mul(mochi_safe_mul(Lr, Error), H2))] ++ lists:nthtail(1 + 1, erlang:get('w2')),
            erlang:put('w2', W2_tmp_2),
            erlang:put('b2', (erlang:get('b2') - mochi_safe_mul(Lr, Error))),
            W1_tmp = lists:sublist(erlang:get('w1'), 0) ++ [lists:sublist(lists:nth(0 + 1, erlang:get('w1')), 0) ++ [((case erlang:is_map((case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) + 0 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) end end) - mochi_safe_mul(mochi_safe_mul(Lr, D1), X0))] ++ lists:nthtail(0 + 1, lists:nth(0 + 1, erlang:get('w1')))] ++ lists:nthtail(0 + 1, erlang:get('w1')),
            erlang:put('w1', W1_tmp),
            W1_tmp_2 = lists:sublist(erlang:get('w1'), 1) ++ [lists:sublist(lists:nth(1 + 1, erlang:get('w1')), 0) ++ [((case erlang:is_map((case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) + 0 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) end end) - mochi_safe_mul(mochi_safe_mul(Lr, D1), X1))] ++ lists:nthtail(0 + 1, lists:nth(1 + 1, erlang:get('w1')))] ++ lists:nthtail(1 + 1, erlang:get('w1')),
            erlang:put('w1', W1_tmp_2),
            B1_tmp = lists:sublist(erlang:get('b1'), 0) ++ [((case erlang:is_map(erlang:get('b1')) of true -> maps:get(0, erlang:get('b1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('b1')) + 0 + 1, erlang:get('b1')); _ -> mochi_nth(0 + 1, erlang:get('b1')) end end) - mochi_safe_mul(Lr, D1))] ++ lists:nthtail(0 + 1, erlang:get('b1')),
            erlang:put('b1', B1_tmp),
            W1_tmp_3 = lists:sublist(erlang:get('w1'), 0) ++ [lists:sublist(lists:nth(0 + 1, erlang:get('w1')), 1) ++ [((case erlang:is_map((case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) of true -> maps:get(1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) + 1 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) end end) - mochi_safe_mul(mochi_safe_mul(Lr, D2), X0))] ++ lists:nthtail(1 + 1, lists:nth(0 + 1, erlang:get('w1')))] ++ lists:nthtail(0 + 1, erlang:get('w1')),
            erlang:put('w1', W1_tmp_3),
            W1_tmp_4 = lists:sublist(erlang:get('w1'), 1) ++ [lists:sublist(lists:nth(1 + 1, erlang:get('w1')), 1) ++ [((case erlang:is_map((case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) of true -> maps:get(1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) + 1 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) end end) - mochi_safe_mul(mochi_safe_mul(Lr, D2), X1))] ++ lists:nthtail(1 + 1, lists:nth(1 + 1, erlang:get('w1')))] ++ lists:nthtail(1 + 1, erlang:get('w1')),
            erlang:put('w1', W1_tmp_4),
            B1_tmp_2 = lists:sublist(erlang:get('b1'), 1) ++ [((case erlang:is_map(erlang:get('b1')) of true -> maps:get(1, erlang:get('b1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('b1')) + 1 + 1, erlang:get('b1')); _ -> mochi_nth(1 + 1, erlang:get('b1')) end end) - mochi_safe_mul(Lr, D2))] ++ lists:nthtail(1 + 1, erlang:get('b1')),
            erlang:put('b1', B1_tmp_2),
            I_4 = (I_3 + 1),
            Fun_2_loop(E, Epochs, I_4, Lr);
        _ -> {E, Epochs, I_3, Lr}
    end
end,
{E, Epochs, I_4, Lr} = Fun_2(E, Epochs, I_3, Lr),
            E_2 = (E + 1),
            Fun_3_loop(E_2, Epochs, Lr);
        _ -> {E, Epochs, Lr}
    end
end,
{E_2, Epochs, Lr} = Fun_3(E, Epochs, Lr),
        nil
    catch {return, RetCatch} -> RetCatch end.

predict(Samples) ->
    try
        Preds = [],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, Preds, Samples) ->
    case (I_5 < erlang:length(Samples)) of
        true ->
            X0_2 = (case erlang:is_map((case erlang:is_map(Samples) of true -> maps:get(I_5, Samples, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Samples) + I_5 + 1, Samples); _ -> mochi_nth(I_5 + 1, Samples) end end)) of true -> maps:get(0, (case erlang:is_map(Samples) of true -> maps:get(I_5, Samples, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Samples) + I_5 + 1, Samples); _ -> mochi_nth(I_5 + 1, Samples) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Samples) of true -> maps:get(I_5, Samples, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Samples) + I_5 + 1, Samples); _ -> mochi_nth(I_5 + 1, Samples) end end)) + 0 + 1, (case erlang:is_map(Samples) of true -> maps:get(I_5, Samples, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Samples) + I_5 + 1, Samples); _ -> mochi_nth(I_5 + 1, Samples) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Samples) of true -> maps:get(I_5, Samples, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Samples) + I_5 + 1, Samples); _ -> mochi_nth(I_5 + 1, Samples) end end)) end end),
            X1_2 = (case erlang:is_map((case erlang:is_map(Samples) of true -> maps:get(I_5, Samples, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Samples) + I_5 + 1, Samples); _ -> mochi_nth(I_5 + 1, Samples) end end)) of true -> maps:get(1, (case erlang:is_map(Samples) of true -> maps:get(I_5, Samples, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Samples) + I_5 + 1, Samples); _ -> mochi_nth(I_5 + 1, Samples) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Samples) of true -> maps:get(I_5, Samples, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Samples) + I_5 + 1, Samples); _ -> mochi_nth(I_5 + 1, Samples) end end)) + 1 + 1, (case erlang:is_map(Samples) of true -> maps:get(I_5, Samples, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Samples) + I_5 + 1, Samples); _ -> mochi_nth(I_5 + 1, Samples) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Samples) of true -> maps:get(I_5, Samples, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Samples) + I_5 + 1, Samples); _ -> mochi_nth(I_5 + 1, Samples) end end)) end end),
            Z1_2 = ((mochi_safe_mul((case erlang:is_map((case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) + 0 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) end end), X0_2) + mochi_safe_mul((case erlang:is_map((case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) + 0 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) end end), X1_2)) + (case erlang:is_map(erlang:get('b1')) of true -> maps:get(0, erlang:get('b1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('b1')) + 0 + 1, erlang:get('b1')); _ -> mochi_nth(0 + 1, erlang:get('b1')) end end)),
            Z2_2 = ((mochi_safe_mul((case erlang:is_map((case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) of true -> maps:get(1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) + 1 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(0, erlang:get('w1'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 0 + 1, erlang:get('w1')); _ -> mochi_nth(0 + 1, erlang:get('w1')) end end)) end end), X0_2) + mochi_safe_mul((case erlang:is_map((case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) of true -> maps:get(1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) + 1 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(erlang:get('w1')) of true -> maps:get(1, erlang:get('w1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w1')) + 1 + 1, erlang:get('w1')); _ -> mochi_nth(1 + 1, erlang:get('w1')) end end)) end end), X1_2)) + (case erlang:is_map(erlang:get('b1')) of true -> maps:get(1, erlang:get('b1'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('b1')) + 1 + 1, erlang:get('b1')); _ -> mochi_nth(1 + 1, erlang:get('b1')) end end)),
            H1_2 = sigmoid(Z1_2),
            H2_2 = sigmoid(Z2_2),
            Z3_2 = ((mochi_safe_mul((case erlang:is_map(erlang:get('w2')) of true -> maps:get(0, erlang:get('w2'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('w2')) + 0 + 1, erlang:get('w2')); _ -> mochi_nth(0 + 1, erlang:get('w2')) end end), H1_2) + mochi_safe_mul((case erlang:is_map(erlang:get('w2')) of true -> maps:get(1, erlang:get('w2'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('w2')) + 1 + 1, erlang:get('w2')); _ -> mochi_nth(1 + 1, erlang:get('w2')) end end), H2_2)) + erlang:get('b2')),
            Out_2 = sigmoid(Z3_2),
            Label = 0,
            case (Out_2 >= 0.5) of
        true -> Label_2 = 1,
            Label_3 = Label_2;
        _ -> Label_3 = Label
    end,
            Preds_2 = lists:append((case Preds of nil -> []; _ -> Preds end), [Label_3]),
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Preds_2, Samples);
        _ -> {I_5, Preds, Samples}
    end
end,
{I_6, Preds_2, Samples} = Fun_4(I_5, Preds, Samples),
        Preds_2
    catch {return, RetCatch} -> RetCatch end.

wrapper(Y) ->
    try
        Y
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('X', [[0.0, 0.0], [1.0, 1.0], [1.0, 0.0], [0.0, 1.0]]),
    erlang:put('Y', [0.0, 1.0, 0.0, 0.0]),
    erlang:put('test_data', [[0.0, 0.0], [0.0, 1.0], [1.0, 1.0]]),
    erlang:put('w1', [[0.5, -0.5], [0.5, 0.5]]),
    erlang:put('b1', [0.0, 0.0]),
    erlang:put('w2', [0.5, -0.5]),
    erlang:put('b2', 0.0),
    train(4000, 0.5),
    erlang:put('preds', wrapper(predict(erlang:get('test_data')))),
    io:format("~ts~n", [mochi_str(erlang:get('preds'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
