#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, design_matrix/2, transpose/1, matmul/2, matvec_mul/2, gaussian_elimination/2, predict/2]).

% Generated by Mochi transpiler v0.10.66 (2995f902d7)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

design_matrix(Xs, Degree) ->
    try
        I = 0,
        Matrix = [],
        Fun_2 = fun Fun_2_loop(Degree, I, Matrix, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            Row = [],
            J = 0,
            Pow = 1.0,
            Fun = fun Fun_loop(Degree, I, J, Matrix, Pow, Row, Xs) ->
    case (J =< Degree) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Pow]),
            Pow_2 = mochi_safe_mul(Pow, (case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)),
            J_2 = (J + 1),
            Fun_loop(Degree, I, J_2, Matrix, Pow_2, Row_2, Xs);
        _ -> {Degree, I, J, Matrix, Pow, Row, Xs}
    end
end,
{Degree, I, J_2, Matrix, Pow_2, Row_2, Xs} = Fun(Degree, I, J, Matrix, Pow, Row, Xs),
            Matrix_2 = lists:append((case Matrix of nil -> []; _ -> Matrix end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Degree, I_2, Matrix_2, Xs);
        _ -> {Degree, I, Matrix, Xs}
    end
end,
{Degree, I_2, Matrix_2, Xs} = Fun_2(Degree, I, Matrix, Xs),
        Matrix_2
    catch {return, RetCatch} -> RetCatch end.

transpose(Matrix_3) ->
    try
        Rows = erlang:length(Matrix_3),
        Cols = erlang:length((case erlang:is_map(Matrix_3) of true -> maps:get(0, Matrix_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_3) + 0 + 1, Matrix_3); _ -> mochi_nth(0 + 1, Matrix_3) end end)),
        J_3 = 0,
        Result = [],
        Fun_4 = fun Fun_4_loop(Cols, J_3, Matrix_3, Result, Rows) ->
    case (J_3 < Cols) of
        true ->
            Row_3 = [],
            I_3 = 0,
            Fun_3 = fun Fun_3_loop(Cols, I_3, J_3, Matrix_3, Result, Row_3, Rows) ->
    case (I_3 < Rows) of
        true ->
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [(case erlang:is_map((case erlang:is_map(Matrix_3) of true -> maps:get(I_3, Matrix_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix_3) + I_3 + 1, Matrix_3); _ -> mochi_nth(I_3 + 1, Matrix_3) end end)) of true -> maps:get(J_3, (case erlang:is_map(Matrix_3) of true -> maps:get(I_3, Matrix_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix_3) + I_3 + 1, Matrix_3); _ -> mochi_nth(I_3 + 1, Matrix_3) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_3) of true -> maps:get(I_3, Matrix_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix_3) + I_3 + 1, Matrix_3); _ -> mochi_nth(I_3 + 1, Matrix_3) end end)) + J_3 + 1, (case erlang:is_map(Matrix_3) of true -> maps:get(I_3, Matrix_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix_3) + I_3 + 1, Matrix_3); _ -> mochi_nth(I_3 + 1, Matrix_3) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Matrix_3) of true -> maps:get(I_3, Matrix_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix_3) + I_3 + 1, Matrix_3); _ -> mochi_nth(I_3 + 1, Matrix_3) end end)) end end)]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Cols, I_4, J_3, Matrix_3, Result, Row_4, Rows);
        _ -> {Cols, I_3, J_3, Matrix_3, Result, Row_3, Rows}
    end
end,
{Cols, I_4, J_3, Matrix_3, Result, Row_4, Rows} = Fun_3(Cols, I_3, J_3, Matrix_3, Result, Row_3, Rows),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_4]),
            J_4 = (J_3 + 1),
            Fun_4_loop(Cols, J_4, Matrix_3, Result_2, Rows);
        _ -> {Cols, J_3, Matrix_3, Result, Rows}
    end
end,
{Cols, J_4, Matrix_3, Result_2, Rows} = Fun_4(Cols, J_3, Matrix_3, Result, Rows),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

matmul(A, B) ->
    try
        N = erlang:length(A),
        M = erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)),
        P = erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)),
        I_5 = 0,
        Result_3 = [],
        Fun_7 = fun Fun_7_loop(A, B, I_5, M, N, P, Result_3) ->
    case (I_5 < N) of
        true ->
            Row_5 = [],
            K = 0,
            Fun_6 = fun Fun_6_loop(A, B, I_5, K, M, N, P, Result_3, Row_5) ->
    case (K < P) of
        true ->
            Sum = 0.0,
            J_5 = 0,
            Fun_5 = fun Fun_5_loop(A, B, I_5, J_5, K, M, N, P, Result_3, Row_5, Sum) ->
    case (J_5 < M) of
        true ->
            Sum_2 = (Sum + mochi_safe_mul((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end)) of true -> maps:get(J_5, (case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end)) + J_5 + 1, (case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end)) end end), (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(J_5, B, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(B) + J_5 + 1, B); _ -> mochi_nth(J_5 + 1, B) end end)) of true -> maps:get(K, (case erlang:is_map(B) of true -> maps:get(J_5, B, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(B) + J_5 + 1, B); _ -> mochi_nth(J_5 + 1, B) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(J_5, B, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(B) + J_5 + 1, B); _ -> mochi_nth(J_5 + 1, B) end end)) + K + 1, (case erlang:is_map(B) of true -> maps:get(J_5, B, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(B) + J_5 + 1, B); _ -> mochi_nth(J_5 + 1, B) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(B) of true -> maps:get(J_5, B, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(B) + J_5 + 1, B); _ -> mochi_nth(J_5 + 1, B) end end)) end end))),
            J_6 = (J_5 + 1),
            Fun_5_loop(A, B, I_5, J_6, K, M, N, P, Result_3, Row_5, Sum_2);
        _ -> {A, B, I_5, J_5, K, M, N, P, Result_3, Row_5, Sum}
    end
end,
{A, B, I_5, J_6, K, M, N, P, Result_3, Row_5, Sum_2} = Fun_5(A, B, I_5, J_5, K, M, N, P, Result_3, Row_5, Sum),
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [Sum_2]),
            K_2 = (K + 1),
            Fun_6_loop(A, B, I_5, K_2, M, N, P, Result_3, Row_6);
        _ -> {A, B, I_5, K, M, N, P, Result_3, Row_5}
    end
end,
{A, B, I_5, K_2, M, N, P, Result_3, Row_6} = Fun_6(A, B, I_5, K, M, N, P, Result_3, Row_5),
            Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [Row_6]),
            I_6 = (I_5 + 1),
            Fun_7_loop(A, B, I_6, M, N, P, Result_4);
        _ -> {A, B, I_5, M, N, P, Result_3}
    end
end,
{A, B, I_6, M, N, P, Result_4} = Fun_7(A, B, I_5, M, N, P, Result_3),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

matvec_mul(A_2, V) ->
    try
        N_2 = erlang:length(A_2),
        M_2 = erlang:length((case erlang:is_map(A_2) of true -> maps:get(0, A_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_2) + 0 + 1, A_2); _ -> mochi_nth(0 + 1, A_2) end end)),
        I_7 = 0,
        Result_5 = [],
        Fun_9 = fun Fun_9_loop(A_2, I_7, M_2, N_2, Result_5, V) ->
    case (I_7 < N_2) of
        true ->
            Sum_3 = 0.0,
            J_7 = 0,
            Fun_8 = fun Fun_8_loop(A_2, I_7, J_7, M_2, N_2, Result_5, Sum_3, V) ->
    case (J_7 < M_2) of
        true ->
            Sum_4 = (Sum_3 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end)) of true -> maps:get(J_7, (case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end), nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end)) + J_7 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end)); _ -> mochi_nth(J_7 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end)) end end), (case erlang:is_map(V) of true -> maps:get(J_7, V, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(V) + J_7 + 1, V); _ -> mochi_nth(J_7 + 1, V) end end))),
            J_8 = (J_7 + 1),
            Fun_8_loop(A_2, I_7, J_8, M_2, N_2, Result_5, Sum_4, V);
        _ -> {A_2, I_7, J_7, M_2, N_2, Result_5, Sum_3, V}
    end
end,
{A_2, I_7, J_8, M_2, N_2, Result_5, Sum_4, V} = Fun_8(A_2, I_7, J_7, M_2, N_2, Result_5, Sum_3, V),
            Result_6 = lists:append((case Result_5 of nil -> []; _ -> Result_5 end), [Sum_4]),
            I_8 = (I_7 + 1),
            Fun_9_loop(A_2, I_8, M_2, N_2, Result_6, V);
        _ -> {A_2, I_7, M_2, N_2, Result_5, V}
    end
end,
{A_2, I_8, M_2, N_2, Result_6, V} = Fun_9(A_2, I_7, M_2, N_2, Result_5, V),
        Result_6
    catch {return, RetCatch} -> RetCatch end.

gaussian_elimination(A_3, B) ->
    try
        N_3 = erlang:length(A_3),
        M = [],
        I_9 = 0,
        Fun_10 = fun Fun_10_loop(A_3, M, B, I_9, N_3) ->
    case (I_9 < N_3) of
        true ->
            M_2 = lists:append((case M of nil -> []; _ -> M end), [lists:append((case (case erlang:is_map(A_3) of true -> maps:get(I_9, A_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_3) + I_9 + 1, A_3); _ -> mochi_nth(I_9 + 1, A_3) end end) of nil -> []; _ -> (case erlang:is_map(A_3) of true -> maps:get(I_9, A_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_3) + I_9 + 1, A_3); _ -> mochi_nth(I_9 + 1, A_3) end end) end), [(case erlang:is_map(B) of true -> maps:get(I_9, B, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(B) + I_9 + 1, B); _ -> mochi_nth(I_9 + 1, B) end end)])]),
            I_10 = (I_9 + 1),
            Fun_10_loop(A_3, M_2, B, I_10, N_3);
        _ -> {A_3, M, B, I_9, N_3}
    end
end,
{A_3, M_2, B, I_10, N_3} = Fun_10(A_3, M, B, I_9, N_3),
        K_3 = 0,
        Fun_13 = fun Fun_13_loop(A_3, M_2, B, I_10, K_3, N_3) ->
    case (K_3 < N_3) of
        true ->
            J_9 = (K_3 + 1),
            Fun_12 = fun Fun_12_loop(A_3, M_2, B, I_10, J_9, K_3, N_3) ->
    case (J_9 < N_3) of
        true ->
            Factor = mochi_safe_div((case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(J_9, M_2, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(M_2) + J_9 + 1, M_2); _ -> mochi_nth(J_9 + 1, M_2) end end)) of true -> maps:get(K_3, (case erlang:is_map(M_2) of true -> maps:get(J_9, M_2, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(M_2) + J_9 + 1, M_2); _ -> mochi_nth(J_9 + 1, M_2) end end), nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(J_9, M_2, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(M_2) + J_9 + 1, M_2); _ -> mochi_nth(J_9 + 1, M_2) end end)) + K_3 + 1, (case erlang:is_map(M_2) of true -> maps:get(J_9, M_2, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(M_2) + J_9 + 1, M_2); _ -> mochi_nth(J_9 + 1, M_2) end end)); _ -> mochi_nth(K_3 + 1, (case erlang:is_map(M_2) of true -> maps:get(J_9, M_2, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(M_2) + J_9 + 1, M_2); _ -> mochi_nth(J_9 + 1, M_2) end end)) end end), (case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(K_3, M_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(M_2) + K_3 + 1, M_2); _ -> mochi_nth(K_3 + 1, M_2) end end)) of true -> maps:get(K_3, (case erlang:is_map(M_2) of true -> maps:get(K_3, M_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(M_2) + K_3 + 1, M_2); _ -> mochi_nth(K_3 + 1, M_2) end end), nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(K_3, M_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(M_2) + K_3 + 1, M_2); _ -> mochi_nth(K_3 + 1, M_2) end end)) + K_3 + 1, (case erlang:is_map(M_2) of true -> maps:get(K_3, M_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(M_2) + K_3 + 1, M_2); _ -> mochi_nth(K_3 + 1, M_2) end end)); _ -> mochi_nth(K_3 + 1, (case erlang:is_map(M_2) of true -> maps:get(K_3, M_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(M_2) + K_3 + 1, M_2); _ -> mochi_nth(K_3 + 1, M_2) end end)) end end)),
            Rowj = (case erlang:is_map(M_2) of true -> maps:get(J_9, M_2, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(M_2) + J_9 + 1, M_2); _ -> mochi_nth(J_9 + 1, M_2) end end),
            Rowk = (case erlang:is_map(M_2) of true -> maps:get(K_3, M_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(M_2) + K_3 + 1, M_2); _ -> mochi_nth(K_3 + 1, M_2) end end),
            L = K_3,
            Fun_11 = fun Fun_11_loop(A_3, M_2, B, Factor, I_10, J_9, K_3, L, N_3, Rowj, Rowk) ->
    case (L =< N_3) of
        true ->
            Rowj_2 = lists:sublist(Rowj, L) ++ [((case erlang:is_map(Rowj) of true -> maps:get(L, Rowj, nil); _ -> case L < 0 of true -> mochi_nth(erlang:length(Rowj) + L + 1, Rowj); _ -> mochi_nth(L + 1, Rowj) end end) - mochi_safe_mul(Factor, (case erlang:is_map(Rowk) of true -> maps:get(L, Rowk, nil); _ -> case L < 0 of true -> mochi_nth(erlang:length(Rowk) + L + 1, Rowk); _ -> mochi_nth(L + 1, Rowk) end end)))] ++ lists:nthtail(L + 1, Rowj),
            L_2 = (L + 1),
            Fun_11_loop(A_3, M_2, B, Factor, I_10, J_9, K_3, L_2, N_3, Rowj_2, Rowk);
        _ -> {A_3, M_2, B, Factor, I_10, J_9, K_3, L, N_3, Rowj, Rowk}
    end
end,
{A_3, M_2, B, Factor, I_10, J_9, K_3, L_2, N_3, Rowj_2, Rowk} = Fun_11(A_3, M_2, B, Factor, I_10, J_9, K_3, L, N_3, Rowj, Rowk),
            M_3 = lists:sublist(M_2, J_9) ++ [Rowj_2] ++ lists:nthtail(J_9 + 1, M_2),
            J_10 = (J_9 + 1),
            Fun_12_loop(A_3, M_3, B, I_10, J_10, K_3, N_3);
        _ -> {A_3, M_2, B, I_10, J_9, K_3, N_3}
    end
end,
{A_3, M_3, B, I_10, J_10, K_3, N_3} = Fun_12(A_3, M_2, B, I_10, J_9, K_3, N_3),
            K_4 = (K_3 + 1),
            Fun_13_loop(A_3, M_3, B, I_10, K_4, N_3);
        _ -> {A_3, M_2, B, I_10, K_3, N_3}
    end
end,
{A_3, M_3, B, I_10, K_4, N_3} = Fun_13(A_3, M_2, B, I_10, K_3, N_3),
        X = [],
        T = 0,
        Fun_14 = fun Fun_14_loop(A_3, M_3, B, I_10, K_4, N_3, T, X) ->
    case (T < N_3) of
        true ->
            X_2 = lists:append((case X of nil -> []; _ -> X end), [0.0]),
            T_2 = (T + 1),
            Fun_14_loop(A_3, M_3, B, I_10, K_4, N_3, T_2, X_2);
        _ -> {A_3, M_3, B, I_10, K_4, N_3, T, X}
    end
end,
{A_3, M_3, B, I_10, K_4, N_3, T_2, X_2} = Fun_14(A_3, M_3, B, I_10, K_4, N_3, T, X),
        I2 = (N_3 - 1),
        Fun_16 = fun Fun_16_loop(A_3, M_3, B, I_10, I2, K_4, N_3, T_2, X_2) ->
    case (I2 >= 0) of
        true ->
            Sum_5 = (case erlang:is_map((case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end)) of true -> maps:get(N_3, (case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end), nil); _ -> case N_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end)) + N_3 + 1, (case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end)); _ -> mochi_nth(N_3 + 1, (case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end)) end end),
            J2 = (I2 + 1),
            Fun_15 = fun Fun_15_loop(A_3, M_3, B, I_10, I2, J2, K_4, N_3, Sum_5, T_2, X_2) ->
    case (J2 < N_3) of
        true ->
            Sum_6 = (Sum_5 - mochi_safe_mul((case erlang:is_map((case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end)) of true -> maps:get(J2, (case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end), nil); _ -> case J2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end)) + J2 + 1, (case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end)); _ -> mochi_nth(J2 + 1, (case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end)) end end), (case erlang:is_map(X_2) of true -> maps:get(J2, X_2, nil); _ -> case J2 < 0 of true -> mochi_nth(erlang:length(X_2) + J2 + 1, X_2); _ -> mochi_nth(J2 + 1, X_2) end end))),
            J2_2 = (J2 + 1),
            Fun_15_loop(A_3, M_3, B, I_10, I2, J2_2, K_4, N_3, Sum_6, T_2, X_2);
        _ -> {A_3, M_3, B, I_10, I2, J2, K_4, N_3, Sum_5, T_2, X_2}
    end
end,
{A_3, M_3, B, I_10, I2, J2_2, K_4, N_3, Sum_6, T_2, X_2} = Fun_15(A_3, M_3, B, I_10, I2, J2, K_4, N_3, Sum_5, T_2, X_2),
            X_3 = lists:sublist(X_2, I2) ++ [mochi_safe_div(Sum_6, (case erlang:is_map((case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end)) of true -> maps:get(I2, (case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end), nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end)) + I2 + 1, (case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end)); _ -> mochi_nth(I2 + 1, (case erlang:is_map(M_3) of true -> maps:get(I2, M_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(M_3) + I2 + 1, M_3); _ -> mochi_nth(I2 + 1, M_3) end end)) end end))] ++ lists:nthtail(I2 + 1, X_2),
            I2_2 = (I2 - 1),
            Fun_16_loop(A_3, M_3, B, I_10, I2_2, K_4, N_3, T_2, X_3);
        _ -> {A_3, M_3, B, I_10, I2, K_4, N_3, T_2, X_2}
    end
end,
{A_3, M_3, B, I_10, I2_2, K_4, N_3, T_2, X_3} = Fun_16(A_3, M_3, B, I_10, I2, K_4, N_3, T_2, X_2),
        X_3
    catch {return, RetCatch} -> RetCatch end.

predict(Xs_2, Coeffs) ->
    try
        I_11 = 0,
        Result_7 = [],
        Fun_18 = fun Fun_18_loop(Coeffs, I_11, Result_7, Xs_2) ->
    case (I_11 < erlang:length(Xs_2)) of
        true ->
            X_4 = (case erlang:is_map(Xs_2) of true -> maps:get(I_11, Xs_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_11 + 1, Xs_2); _ -> mochi_nth(I_11 + 1, Xs_2) end end),
            J_11 = 0,
            Pow_3 = 1.0,
            Sum_7 = 0.0,
            Fun_17 = fun Fun_17_loop(Coeffs, I_11, J_11, Pow_3, Result_7, Sum_7, X_4, Xs_2) ->
    case (J_11 < erlang:length(Coeffs)) of
        true ->
            Sum_8 = (Sum_7 + mochi_safe_mul((case erlang:is_map(Coeffs) of true -> maps:get(J_11, Coeffs, nil); _ -> case J_11 < 0 of true -> mochi_nth(erlang:length(Coeffs) + J_11 + 1, Coeffs); _ -> mochi_nth(J_11 + 1, Coeffs) end end), Pow_3)),
            Pow_4 = mochi_safe_mul(Pow_3, X_4),
            J_12 = (J_11 + 1),
            Fun_17_loop(Coeffs, I_11, J_12, Pow_4, Result_7, Sum_8, X_4, Xs_2);
        _ -> {Coeffs, I_11, J_11, Pow_3, Result_7, Sum_7, X_4, Xs_2}
    end
end,
{Coeffs, I_11, J_12, Pow_4, Result_7, Sum_8, X_4, Xs_2} = Fun_17(Coeffs, I_11, J_11, Pow_3, Result_7, Sum_7, X_4, Xs_2),
            Result_8 = lists:append((case Result_7 of nil -> []; _ -> Result_7 end), [Sum_8]),
            I_12 = (I_11 + 1),
            Fun_18_loop(Coeffs, I_12, Result_8, Xs_2);
        _ -> {Coeffs, I_11, Result_7, Xs_2}
    end
end,
{Coeffs, I_12, Result_8, Xs_2} = Fun_18(Coeffs, I_11, Result_7, Xs_2),
        Result_8
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('xs', [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0]),
    erlang:put('ys', []),
    erlang:put('i', 0),
    Fun_19 = fun Fun_19_loop() ->
    case (erlang:get('i') < erlang:length(erlang:get('xs'))) of
        true ->
            X_5 = (case erlang:is_map(erlang:get('xs')) of true -> maps:get(erlang:get('i'), erlang:get('xs'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('xs')) + erlang:get('i') + 1, erlang:get('xs')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('xs')) end end),
            erlang:put('ys', lists:append((case erlang:get('ys') of nil -> []; _ -> erlang:get('ys') end), [(((mochi_safe_mul(mochi_safe_mul(X_5, X_5), X_5) - mochi_safe_mul(mochi_safe_mul(2.0, X_5), X_5)) + mochi_safe_mul(3.0, X_5)) - 5.0)])),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_19_loop();
        _ -> {}
    end
end,
{} = Fun_19(),
    erlang:put('X', design_matrix(erlang:get('xs'), 3)),
    erlang:put('Xt', transpose(erlang:get('X'))),
    erlang:put('XtX', matmul(erlang:get('Xt'), erlang:get('X'))),
    erlang:put('Xty', matvec_mul(erlang:get('Xt'), erlang:get('ys'))),
    erlang:put('coeffs', gaussian_elimination(erlang:get('XtX'), erlang:get('Xty'))),
    io:format("~ts~n", [mochi_str(erlang:get('coeffs'))]),
    io:format("~ts~n", [mochi_str(predict([-1.0], erlang:get('coeffs')))]),
    io:format("~ts~n", [mochi_str(predict([-2.0], erlang:get('coeffs')))]),
    io:format("~ts~n", [mochi_str(predict([6.0], erlang:get('coeffs')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
