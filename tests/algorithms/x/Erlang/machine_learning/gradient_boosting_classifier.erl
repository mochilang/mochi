#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, exp_approx/1, signf/1, gradient/2, predict_raw/3, predict/3, train_stump/2, fit/4, accuracy/2]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

exp_approx(X) ->
    try
        Term = 1.0,
        Sum = 1.0,
        I = 1,
        Fun = fun Fun_loop(I, Sum, Term, X) ->
    case (I < 10) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X), float(I)),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, Term_2, X);
        _ -> {I, Sum, Term, X}
    end
end,
{I_2, Sum_2, Term_2, X} = Fun(I, Sum, Term, X),
        Sum_2
    catch {return, Ret} -> Ret end.

signf(X_2) ->
    try
        (case (X_2 >= 0.0) of
    true -> 1.0;
    _ -> -1.0
end)
    catch {return, Ret} -> Ret end.

gradient(Target, Preds) ->
    try
        N = erlang:length(Target),
        Residuals = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, N, Preds, Residuals, Target) ->
    case (I_3 < N) of
        true ->
            T = (case erlang:is_map(Target) of true -> maps:get(I_3, Target, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Target) + I_3 + 1, Target); _ -> mochi_nth(I_3 + 1, Target) end end),
            Y = (case erlang:is_map(Preds) of true -> maps:get(I_3, Preds, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Preds) + I_3 + 1, Preds); _ -> mochi_nth(I_3 + 1, Preds) end end),
            Exp_val = exp_approx(mochi_safe_mul(T, Y)),
            Res = mochi_safe_div(-T, (1.0 + Exp_val)),
            Residuals_2 = lists:append((case Residuals of nil -> []; _ -> Residuals end), [Res]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, N, Preds, Residuals_2, Target);
        _ -> {I_3, N, Preds, Residuals, Target}
    end
end,
{I_4, N, Preds, Residuals_2, Target} = Fun_2(I_3, N, Preds, Residuals, Target),
        Residuals_2
    catch {return, Ret} -> Ret end.

predict_raw(Models, Features, Learning_rate) ->
    try
        N_2 = erlang:length(Features),
        Preds_2 = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Features, I_5, Learning_rate, Models, N_2, Preds_2) ->
    case (I_5 < N_2) of
        true ->
            Preds_3 = lists:append((case Preds_2 of nil -> []; _ -> Preds_2 end), [0.0]),
            I_6 = (I_5 + 1),
            Fun_3_loop(Features, I_6, Learning_rate, Models, N_2, Preds_3);
        _ -> {Features, I_5, Learning_rate, Models, N_2, Preds_2}
    end
end,
{Features, I_6, Learning_rate, Models, N_2, Preds_3} = Fun_3(Features, I_5, Learning_rate, Models, N_2, Preds_2),
        M = 0,
        Fun_5 = fun Fun_5_loop(Features, I_6, Learning_rate, M, Models, N_2, Preds_3) ->
    case (M < erlang:length(Models)) of
        true ->
            Stump = (case erlang:is_map(Models) of true -> maps:get(M, Models, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Models) + M + 1, Models); _ -> mochi_nth(M + 1, Models) end end),
            I_7 = 0,
            Fun_4 = fun Fun_4_loop(Features, I_7, Learning_rate, M, Models, N_2, Preds_3, Stump) ->
    case (I_7 < N_2) of
        true ->
            Value = (case erlang:is_map((case erlang:is_map(Features) of true -> maps:get(I_7, Features, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Features) + I_7 + 1, Features); _ -> mochi_nth(I_7 + 1, Features) end end)) of true -> maps:get(maps:get("feature", Stump, nil), (case erlang:is_map(Features) of true -> maps:get(I_7, Features, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Features) + I_7 + 1, Features); _ -> mochi_nth(I_7 + 1, Features) end end), nil); _ -> case maps:get("feature", Stump, nil) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Features) of true -> maps:get(I_7, Features, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Features) + I_7 + 1, Features); _ -> mochi_nth(I_7 + 1, Features) end end)) + maps:get("feature", Stump, nil) + 1, (case erlang:is_map(Features) of true -> maps:get(I_7, Features, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Features) + I_7 + 1, Features); _ -> mochi_nth(I_7 + 1, Features) end end)); _ -> mochi_nth(maps:get("feature", Stump, nil) + 1, (case erlang:is_map(Features) of true -> maps:get(I_7, Features, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Features) + I_7 + 1, Features); _ -> mochi_nth(I_7 + 1, Features) end end)) end end),
            case (Value =< maps:get("threshold", Stump, nil)) of
        true -> Preds_4 = lists:sublist(Preds_3, I_7) ++ [((case erlang:is_map(Preds_3) of true -> maps:get(I_7, Preds_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Preds_3) + I_7 + 1, Preds_3); _ -> mochi_nth(I_7 + 1, Preds_3) end end) + mochi_safe_mul(Learning_rate, maps:get("left", Stump, nil)))] ++ lists:nthtail(I_7 + 1, Preds_3),
            Preds_6 = Preds_4;
        _ -> Preds_5 = lists:sublist(Preds_3, I_7) ++ [((case erlang:is_map(Preds_3) of true -> maps:get(I_7, Preds_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Preds_3) + I_7 + 1, Preds_3); _ -> mochi_nth(I_7 + 1, Preds_3) end end) + mochi_safe_mul(Learning_rate, maps:get("right", Stump, nil)))] ++ lists:nthtail(I_7 + 1, Preds_3),
            Preds_6 = Preds_5
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(Features, I_8, Learning_rate, M, Models, N_2, Preds_6, Stump);
        _ -> {Features, I_7, Learning_rate, M, Models, N_2, Preds_3, Stump}
    end
end,
{Features, I_8, Learning_rate, M, Models, N_2, Preds_6, Stump} = Fun_4(Features, I_7, Learning_rate, M, Models, N_2, Preds_3, Stump),
            M_2 = (M + 1),
            Fun_5_loop(Features, I_8, Learning_rate, M_2, Models, N_2, Preds_6);
        _ -> {Features, I_6, Learning_rate, M, Models, N_2, Preds_3}
    end
end,
{Features, I_8, Learning_rate, M_2, Models, N_2, Preds_6} = Fun_5(Features, I_6, Learning_rate, M, Models, N_2, Preds_3),
        Preds_6
    catch {return, Ret} -> Ret end.

predict(Models_2, Features_2, Learning_rate_2) ->
    try
        Raw = predict_raw(Models_2, Features_2, Learning_rate_2),
        Result = [],
        I_9 = 0,
        Fun_6 = fun Fun_6_loop(Features_2, I_9, Learning_rate_2, Models_2, Raw, Result) ->
    case (I_9 < erlang:length(Raw)) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [signf((case erlang:is_map(Raw) of true -> maps:get(I_9, Raw, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Raw) + I_9 + 1, Raw); _ -> mochi_nth(I_9 + 1, Raw) end end))]),
            I_10 = (I_9 + 1),
            Fun_6_loop(Features_2, I_10, Learning_rate_2, Models_2, Raw, Result_2);
        _ -> {Features_2, I_9, Learning_rate_2, Models_2, Raw, Result}
    end
end,
{Features_2, I_10, Learning_rate_2, Models_2, Raw, Result_2} = Fun_6(Features_2, I_9, Learning_rate_2, Models_2, Raw, Result),
        Result_2
    catch {return, Ret} -> Ret end.

train_stump(Features_3, Residuals_3) ->
    try
        N_samples = erlang:length(Features_3),
        N_features = erlang:length((case erlang:is_map(Features_3) of true -> maps:get(0, Features_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Features_3) + 0 + 1, Features_3); _ -> mochi_nth(0 + 1, Features_3) end end)),
        Best_feature = 0,
        Best_threshold = 0.0,
        Best_error = 1000000000.0,
        Best_left = 0.0,
        Best_right = 0.0,
        J = 0,
        Fun_10 = fun Fun_10_loop(Best_error, Best_feature, Best_left, Best_right, Best_threshold, Features_3, J, N_features, N_samples, Residuals_3) ->
    case (J < N_features) of
        true ->
            T_index = 0,
            Fun_9 = fun Fun_9_loop(Best_error, Best_feature, Best_left, Best_right, Best_threshold, Features_3, J, N_features, N_samples, Residuals_3, T_index) ->
    case (T_index < N_samples) of
        true ->
            T_2 = (case erlang:is_map((case erlang:is_map(Features_3) of true -> maps:get(T_index, Features_3, nil); _ -> case T_index < 0 of true -> mochi_nth(erlang:length(Features_3) + T_index + 1, Features_3); _ -> mochi_nth(T_index + 1, Features_3) end end)) of true -> maps:get(J, (case erlang:is_map(Features_3) of true -> maps:get(T_index, Features_3, nil); _ -> case T_index < 0 of true -> mochi_nth(erlang:length(Features_3) + T_index + 1, Features_3); _ -> mochi_nth(T_index + 1, Features_3) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Features_3) of true -> maps:get(T_index, Features_3, nil); _ -> case T_index < 0 of true -> mochi_nth(erlang:length(Features_3) + T_index + 1, Features_3); _ -> mochi_nth(T_index + 1, Features_3) end end)) + J + 1, (case erlang:is_map(Features_3) of true -> maps:get(T_index, Features_3, nil); _ -> case T_index < 0 of true -> mochi_nth(erlang:length(Features_3) + T_index + 1, Features_3); _ -> mochi_nth(T_index + 1, Features_3) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Features_3) of true -> maps:get(T_index, Features_3, nil); _ -> case T_index < 0 of true -> mochi_nth(erlang:length(Features_3) + T_index + 1, Features_3); _ -> mochi_nth(T_index + 1, Features_3) end end)) end end),
            Sum_left = 0.0,
            Count_left = 0,
            Sum_right = 0.0,
            Count_right = 0,
            I_11 = 0,
            Fun_7 = fun Fun_7_loop(Best_error, Best_feature, Best_left, Best_right, Best_threshold, Count_left, Count_right, Features_3, I_11, J, N_features, N_samples, Residuals_3, Sum_left, Sum_right, T_2, T_index) ->
    case (I_11 < N_samples) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(Features_3) of true -> maps:get(I_11, Features_3, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Features_3) + I_11 + 1, Features_3); _ -> mochi_nth(I_11 + 1, Features_3) end end)) of true -> maps:get(J, (case erlang:is_map(Features_3) of true -> maps:get(I_11, Features_3, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Features_3) + I_11 + 1, Features_3); _ -> mochi_nth(I_11 + 1, Features_3) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Features_3) of true -> maps:get(I_11, Features_3, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Features_3) + I_11 + 1, Features_3); _ -> mochi_nth(I_11 + 1, Features_3) end end)) + J + 1, (case erlang:is_map(Features_3) of true -> maps:get(I_11, Features_3, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Features_3) + I_11 + 1, Features_3); _ -> mochi_nth(I_11 + 1, Features_3) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Features_3) of true -> maps:get(I_11, Features_3, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Features_3) + I_11 + 1, Features_3); _ -> mochi_nth(I_11 + 1, Features_3) end end)) end end) =< T_2) of
        true -> Sum_left_2 = (Sum_left + (case erlang:is_map(Residuals_3) of true -> maps:get(I_11, Residuals_3, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Residuals_3) + I_11 + 1, Residuals_3); _ -> mochi_nth(I_11 + 1, Residuals_3) end end)),
            Count_left_2 = (Count_left + 1),
            Count_left_3 = Count_left_2,
            Count_right_3 = Count_right,
            Sum_left_3 = Sum_left_2,
            Sum_right_3 = Sum_right;
        _ -> Sum_right_2 = (Sum_right + (case erlang:is_map(Residuals_3) of true -> maps:get(I_11, Residuals_3, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Residuals_3) + I_11 + 1, Residuals_3); _ -> mochi_nth(I_11 + 1, Residuals_3) end end)),
            Count_right_2 = (Count_right + 1),
            Count_left_3 = Count_left,
            Count_right_3 = Count_right_2,
            Sum_left_3 = Sum_left,
            Sum_right_3 = Sum_right_2
    end,
            I_12 = (I_11 + 1),
            Fun_7_loop(Best_error, Best_feature, Best_left, Best_right, Best_threshold, Count_left_3, Count_right_3, Features_3, I_12, J, N_features, N_samples, Residuals_3, Sum_left_3, Sum_right_3, T_2, T_index);
        _ -> {Best_error, Best_feature, Best_left, Best_right, Best_threshold, Count_left, Count_right, Features_3, I_11, J, N_features, N_samples, Residuals_3, Sum_left, Sum_right, T_2, T_index}
    end
end,
{Best_error, Best_feature, Best_left, Best_right, Best_threshold, Count_left_3, Count_right_3, Features_3, I_12, J, N_features, N_samples, Residuals_3, Sum_left_3, Sum_right_3, T_2, T_index} = Fun_7(Best_error, Best_feature, Best_left, Best_right, Best_threshold, Count_left, Count_right, Features_3, I_11, J, N_features, N_samples, Residuals_3, Sum_left, Sum_right, T_2, T_index),
            Left_val = 0.0,
            case (Count_left_3 /= 0) of
        true -> Left_val_2 = mochi_safe_div(Sum_left_3, float(Count_left_3)),
            Left_val_3 = Left_val_2;
        _ -> Left_val_3 = Left_val
    end,
            Right_val = 0.0,
            case (Count_right_3 /= 0) of
        true -> Right_val_2 = mochi_safe_div(Sum_right_3, float(Count_right_3)),
            Right_val_3 = Right_val_2;
        _ -> Right_val_3 = Right_val
    end,
            Error = 0.0,
            I_13 = 0,
            Fun_8 = fun Fun_8_loop(Best_error, Best_feature, Best_left, Best_right, Best_threshold, Count_left_3, Count_right_3, Error, Features_3, I_13, J, Left_val_3, N_features, N_samples, Residuals_3, Right_val_3, Sum_left_3, Sum_right_3, T_2, T_index) ->
    case (I_13 < N_samples) of
        true ->
            Pred = (case ((case erlang:is_map((case erlang:is_map(Features_3) of true -> maps:get(I_13, Features_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Features_3) + I_13 + 1, Features_3); _ -> mochi_nth(I_13 + 1, Features_3) end end)) of true -> maps:get(J, (case erlang:is_map(Features_3) of true -> maps:get(I_13, Features_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Features_3) + I_13 + 1, Features_3); _ -> mochi_nth(I_13 + 1, Features_3) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Features_3) of true -> maps:get(I_13, Features_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Features_3) + I_13 + 1, Features_3); _ -> mochi_nth(I_13 + 1, Features_3) end end)) + J + 1, (case erlang:is_map(Features_3) of true -> maps:get(I_13, Features_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Features_3) + I_13 + 1, Features_3); _ -> mochi_nth(I_13 + 1, Features_3) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Features_3) of true -> maps:get(I_13, Features_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Features_3) + I_13 + 1, Features_3); _ -> mochi_nth(I_13 + 1, Features_3) end end)) end end) =< T_2) of
    true -> Left_val_3;
    _ -> Right_val_3
end),
            Diff = ((case erlang:is_map(Residuals_3) of true -> maps:get(I_13, Residuals_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Residuals_3) + I_13 + 1, Residuals_3); _ -> mochi_nth(I_13 + 1, Residuals_3) end end) - Pred),
            Error_2 = (Error + mochi_safe_mul(Diff, Diff)),
            I_14 = (I_13 + 1),
            Fun_8_loop(Best_error, Best_feature, Best_left, Best_right, Best_threshold, Count_left_3, Count_right_3, Error_2, Features_3, I_14, J, Left_val_3, N_features, N_samples, Residuals_3, Right_val_3, Sum_left_3, Sum_right_3, T_2, T_index);
        _ -> {Best_error, Best_feature, Best_left, Best_right, Best_threshold, Count_left_3, Count_right_3, Error, Features_3, I_13, J, Left_val_3, N_features, N_samples, Residuals_3, Right_val_3, Sum_left_3, Sum_right_3, T_2, T_index}
    end
end,
{Best_error, Best_feature, Best_left, Best_right, Best_threshold, Count_left_3, Count_right_3, Error_2, Features_3, I_14, J, Left_val_3, N_features, N_samples, Residuals_3, Right_val_3, Sum_left_3, Sum_right_3, T_2, T_index} = Fun_8(Best_error, Best_feature, Best_left, Best_right, Best_threshold, Count_left_3, Count_right_3, Error, Features_3, I_13, J, Left_val_3, N_features, N_samples, Residuals_3, Right_val_3, Sum_left_3, Sum_right_3, T_2, T_index),
            case (Error_2 < Best_error) of
        true -> Best_error_2 = Error_2,
            Best_feature_2 = J,
            Best_threshold_2 = T_2,
            Best_left_2 = Left_val_3,
            Best_right_2 = Right_val_3,
            Best_error_3 = Best_error_2,
            Best_feature_3 = Best_feature_2,
            Best_left_3 = Best_left_2,
            Best_right_3 = Best_right_2,
            Best_threshold_3 = Best_threshold_2;
        _ -> Best_error_3 = Best_error,
            Best_feature_3 = Best_feature,
            Best_left_3 = Best_left,
            Best_right_3 = Best_right,
            Best_threshold_3 = Best_threshold
    end,
            T_index_2 = (T_index + 1),
            Fun_9_loop(Best_error_3, Best_feature_3, Best_left_3, Best_right_3, Best_threshold_3, Features_3, J, N_features, N_samples, Residuals_3, T_index_2);
        _ -> {Best_error, Best_feature, Best_left, Best_right, Best_threshold, Features_3, J, N_features, N_samples, Residuals_3, T_index}
    end
end,
{Best_error_3, Best_feature_3, Best_left_3, Best_right_3, Best_threshold_3, Features_3, J, N_features, N_samples, Residuals_3, T_index_2} = Fun_9(Best_error, Best_feature, Best_left, Best_right, Best_threshold, Features_3, J, N_features, N_samples, Residuals_3, T_index),
            J_2 = (J + 1),
            Fun_10_loop(Best_error_3, Best_feature_3, Best_left_3, Best_right_3, Best_threshold_3, Features_3, J_2, N_features, N_samples, Residuals_3);
        _ -> {Best_error, Best_feature, Best_left, Best_right, Best_threshold, Features_3, J, N_features, N_samples, Residuals_3}
    end
end,
{Best_error_3, Best_feature_3, Best_left_3, Best_right_3, Best_threshold_3, Features_3, J_2, N_features, N_samples, Residuals_3} = Fun_10(Best_error, Best_feature, Best_left, Best_right, Best_threshold, Features_3, J, N_features, N_samples, Residuals_3),
        #{"feature" => Best_feature_3, "threshold" => Best_threshold_3, "left" => Best_left_3, "right" => Best_right_3}
    catch {return, Ret} -> Ret end.

fit(N_estimators, Learning_rate_3, Features_4, Target_2) ->
    try
        Models_3 = [],
        M_3 = 0,
        Fun_12 = fun Fun_12_loop(Features_4, Learning_rate_3, M_3, Models_3, N_estimators, Target_2) ->
    case (M_3 < N_estimators) of
        true ->
            Preds_7 = predict_raw(Models_3, Features_4, Learning_rate_3),
            Grad = gradient(Target_2, Preds_7),
            Residuals_4 = [],
            I_15 = 0,
            Fun_11 = fun Fun_11_loop(Features_4, Grad, I_15, Learning_rate_3, M_3, Models_3, N_estimators, Preds_7, Residuals_4, Target_2) ->
    case (I_15 < erlang:length(Grad)) of
        true ->
            Residuals_5 = lists:append((case Residuals_4 of nil -> []; _ -> Residuals_4 end), [-(case erlang:is_map(Grad) of true -> maps:get(I_15, Grad, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Grad) + I_15 + 1, Grad); _ -> mochi_nth(I_15 + 1, Grad) end end)]),
            I_16 = (I_15 + 1),
            Fun_11_loop(Features_4, Grad, I_16, Learning_rate_3, M_3, Models_3, N_estimators, Preds_7, Residuals_5, Target_2);
        _ -> {Features_4, Grad, I_15, Learning_rate_3, M_3, Models_3, N_estimators, Preds_7, Residuals_4, Target_2}
    end
end,
{Features_4, Grad, I_16, Learning_rate_3, M_3, Models_3, N_estimators, Preds_7, Residuals_5, Target_2} = Fun_11(Features_4, Grad, I_15, Learning_rate_3, M_3, Models_3, N_estimators, Preds_7, Residuals_4, Target_2),
            Stump_2 = train_stump(Features_4, Residuals_5),
            Models_4 = lists:append((case Models_3 of nil -> []; _ -> Models_3 end), [Stump_2]),
            M_4 = (M_3 + 1),
            Fun_12_loop(Features_4, Learning_rate_3, M_4, Models_4, N_estimators, Target_2);
        _ -> {Features_4, Learning_rate_3, M_3, Models_3, N_estimators, Target_2}
    end
end,
{Features_4, Learning_rate_3, M_4, Models_4, N_estimators, Target_2} = Fun_12(Features_4, Learning_rate_3, M_3, Models_3, N_estimators, Target_2),
        Models_4
    catch {return, Ret} -> Ret end.

accuracy(Preds_8, Target_3) ->
    try
        N_3 = erlang:length(Target_3),
        Correct = 0,
        I_17 = 0,
        Fun_13 = fun Fun_13_loop(Correct, I_17, N_3, Preds_8, Target_3) ->
    case (I_17 < N_3) of
        true ->
            case ((case erlang:is_map(Preds_8) of true -> maps:get(I_17, Preds_8, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(Preds_8) + I_17 + 1, Preds_8); _ -> mochi_nth(I_17 + 1, Preds_8) end end) == (case erlang:is_map(Target_3) of true -> maps:get(I_17, Target_3, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(Target_3) + I_17 + 1, Target_3); _ -> mochi_nth(I_17 + 1, Target_3) end end)) of
        true -> Correct_2 = (Correct + 1),
            Correct_3 = Correct_2;
        _ -> Correct_3 = Correct
    end,
            I_18 = (I_17 + 1),
            Fun_13_loop(Correct_3, I_18, N_3, Preds_8, Target_3);
        _ -> {Correct, I_17, N_3, Preds_8, Target_3}
    end
end,
{Correct_3, I_18, N_3, Preds_8, Target_3} = Fun_13(Correct, I_17, N_3, Preds_8, Target_3),
        mochi_safe_div(float(Correct_3), float(N_3))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('features', [[1.0], [2.0], [3.0], [4.0]]),
    erlang:put('target', [-1.0, -1.0, 1.0, 1.0]),
    erlang:put('models', fit(5, 0.5, erlang:get('features'), erlang:get('target'))),
    erlang:put('predictions', predict(erlang:get('models'), erlang:get('features'), 0.5)),
    erlang:put('acc', accuracy(erlang:get('predictions'), erlang:get('target'))),
    io:format("~ts~n", [mochi_repr(("Accuracy: " ++ mochi_str(erlang:get('acc'))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
