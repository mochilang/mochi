#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrtapprox/1, make_knn/3, euclidean_distance/2, classify/3]).

% Generated by Mochi transpiler v0.10.59 (589dcb03e5) on 2025-08-07 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

sqrtapprox(X) ->
    try
        case (X =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, Ret} -> Ret end.

make_knn(Train_data, Train_target, Class_labels) ->
    try
        Items = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Class_labels, I_3, Items, Train_data, Train_target) ->
    case (I_3 < erlang:length(Train_data)) of
        true ->
            Pl = #{"point" => (case erlang:is_map(Train_data) of true -> maps:get(I_3, Train_data, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Train_data) + I_3 + 1, Train_data); _ -> mochi_nth(I_3 + 1, Train_data) end end), "label" => (case erlang:is_map(Train_target) of true -> maps:get(I_3, Train_target, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Train_target) + I_3 + 1, Train_target); _ -> mochi_nth(I_3 + 1, Train_target) end end)},
            Items_2 = lists:append((case Items of nil -> []; _ -> Items end), [Pl]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Class_labels, I_4, Items_2, Train_data, Train_target);
        _ -> {Class_labels, I_3, Items, Train_data, Train_target}
    end
end,
{Class_labels, I_4, Items_2, Train_data, Train_target} = Fun_2(Class_labels, I_3, Items, Train_data, Train_target),
        #{"data" => Items_2, "labels" => Class_labels}
    catch {return, Ret} -> Ret end.

euclidean_distance(A, B) ->
    try
        Sum = 0.0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(A, B, I_5, Sum) ->
    case (I_5 < erlang:length(A)) of
        true ->
            Diff = ((case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end) - (case erlang:is_map(B) of true -> maps:get(I_5, B, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(B) + I_5 + 1, B); _ -> mochi_nth(I_5 + 1, B) end end)),
            Sum_2 = (Sum + mochi_safe_mul(Diff, Diff)),
            I_6 = (I_5 + 1),
            Fun_3_loop(A, B, I_6, Sum_2);
        _ -> {A, B, I_5, Sum}
    end
end,
{A, B, I_6, Sum_2} = Fun_3(A, B, I_5, Sum),
        sqrtapprox(Sum_2)
    catch {return, Ret} -> Ret end.

classify(Knn, Pred_point, K) ->
    try
        Distances = [],
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Distances, I_7, K, Knn, Pred_point) ->
    case (I_7 < erlang:length(maps:get("data", Knn, nil))) of
        true ->
            D = euclidean_distance(maps:get("point", (case erlang:is_map(maps:get("data", Knn, nil)) of true -> maps:get(I_7, maps:get("data", Knn, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Knn, nil)) + I_7 + 1, maps:get("data", Knn, nil)); _ -> mochi_nth(I_7 + 1, maps:get("data", Knn, nil)) end end), nil), Pred_point),
            Distances_2 = lists:append((case Distances of nil -> []; _ -> Distances end), [#{"dist" => D, "label" => maps:get("label", (case erlang:is_map(maps:get("data", Knn, nil)) of true -> maps:get(I_7, maps:get("data", Knn, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Knn, nil)) + I_7 + 1, maps:get("data", Knn, nil)); _ -> mochi_nth(I_7 + 1, maps:get("data", Knn, nil)) end end), nil)}]),
            I_8 = (I_7 + 1),
            Fun_4_loop(Distances_2, I_8, K, Knn, Pred_point);
        _ -> {Distances, I_7, K, Knn, Pred_point}
    end
end,
{Distances_2, I_8, K, Knn, Pred_point} = Fun_4(Distances, I_7, K, Knn, Pred_point),
        Votes = [],
        Count = 0,
        Fun_6 = fun Fun_6_loop(Count, Distances_2, I_8, K, Knn, Pred_point, Votes) ->
    case (Count < K) of
        true ->
            Min_index = 0,
            J = 1,
            Fun_5 = fun Fun_5_loop(Count, Distances_2, I_8, J, K, Knn, Min_index, Pred_point, Votes) ->
    case (J < erlang:length(Distances_2)) of
        true ->
            case (maps:get("dist", (case erlang:is_map(Distances_2) of true -> maps:get(J, Distances_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Distances_2) + J + 1, Distances_2); _ -> mochi_nth(J + 1, Distances_2) end end), nil) < maps:get("dist", (case erlang:is_map(Distances_2) of true -> maps:get(Min_index, Distances_2, nil); _ -> case Min_index < 0 of true -> mochi_nth(erlang:length(Distances_2) + Min_index + 1, Distances_2); _ -> mochi_nth(Min_index + 1, Distances_2) end end), nil)) of
        true -> Min_index_2 = J,
            Min_index_3 = Min_index_2;
        _ -> Min_index_3 = Min_index
    end,
            J_2 = (J + 1),
            Fun_5_loop(Count, Distances_2, I_8, J_2, K, Knn, Min_index_3, Pred_point, Votes);
        _ -> {Count, Distances_2, I_8, J, K, Knn, Min_index, Pred_point, Votes}
    end
end,
{Count, Distances_2, I_8, J_2, K, Knn, Min_index_3, Pred_point, Votes} = Fun_5(Count, Distances_2, I_8, J, K, Knn, Min_index, Pred_point, Votes),
            Votes_2 = lists:append((case Votes of nil -> []; _ -> Votes end), [maps:get("label", (case erlang:is_map(Distances_2) of true -> maps:get(Min_index_3, Distances_2, nil); _ -> case Min_index_3 < 0 of true -> mochi_nth(erlang:length(Distances_2) + Min_index_3 + 1, Distances_2); _ -> mochi_nth(Min_index_3 + 1, Distances_2) end end), nil)]),
            Distances_3 = lists:sublist(Distances_2, Min_index_3) ++ [maps:put("dist", 1, lists:nth(Min_index_3 + 1, Distances_2) )] ++ lists:nthtail(Min_index_3 + 1, Distances_2),
            _ = E18,
            Count_2 = (Count + 1),
            Fun_6_loop(Count_2, Distances_3, I_8, K, Knn, Pred_point, Votes_2);
        _ -> {Count, Distances_2, I_8, K, Knn, Pred_point, Votes}
    end
end,
{Count_2, Distances_3, I_8, K, Knn, Pred_point, Votes_2} = Fun_6(Count, Distances_2, I_8, K, Knn, Pred_point, Votes),
        Tally = [],
        T = 0,
        Fun_7 = fun Fun_7_loop(Count_2, Distances_3, I_8, K, Knn, Pred_point, T, Tally, Votes_2) ->
    case (T < erlang:length(maps:get("labels", Knn, nil))) of
        true ->
            Tally_2 = lists:append((case Tally of nil -> []; _ -> Tally end), [0]),
            T_2 = (T + 1),
            Fun_7_loop(Count_2, Distances_3, I_8, K, Knn, Pred_point, T_2, Tally_2, Votes_2);
        _ -> {Count_2, Distances_3, I_8, K, Knn, Pred_point, T, Tally, Votes_2}
    end
end,
{Count_2, Distances_3, I_8, K, Knn, Pred_point, T_2, Tally_2, Votes_2} = Fun_7(Count_2, Distances_3, I_8, K, Knn, Pred_point, T, Tally, Votes_2),
        V = 0,
        Fun_8 = fun Fun_8_loop(Count_2, Distances_3, I_8, K, Knn, Pred_point, T_2, Tally_2, V, Votes_2) ->
    case (V < erlang:length(Votes_2)) of
        true ->
            Lbl = (case erlang:is_map(Votes_2) of true -> maps:get(V, Votes_2, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Votes_2) + V + 1, Votes_2); _ -> mochi_nth(V + 1, Votes_2) end end),
            Tally_3 = lists:sublist(Tally_2, Lbl) ++ [((case erlang:is_map(Tally_2) of true -> maps:get(Lbl, Tally_2, nil); _ -> case Lbl < 0 of true -> mochi_nth(erlang:length(Tally_2) + Lbl + 1, Tally_2); _ -> mochi_nth(Lbl + 1, Tally_2) end end) + 1)] ++ lists:nthtail(Lbl + 1, Tally_2),
            V_2 = (V + 1),
            Fun_8_loop(Count_2, Distances_3, I_8, K, Knn, Pred_point, T_2, Tally_3, V_2, Votes_2);
        _ -> {Count_2, Distances_3, I_8, K, Knn, Pred_point, T_2, Tally_2, V, Votes_2}
    end
end,
{Count_2, Distances_3, I_8, K, Knn, Pred_point, T_2, Tally_3, V_2, Votes_2} = Fun_8(Count_2, Distances_3, I_8, K, Knn, Pred_point, T_2, Tally_2, V, Votes_2),
        Max_idx = 0,
        M = 1,
        Fun_9 = fun Fun_9_loop(Count_2, Distances_3, I_8, K, Knn, M, Max_idx, Pred_point, T_2, Tally_3, V_2, Votes_2) ->
    case (M < erlang:length(Tally_3)) of
        true ->
            case ((case erlang:is_map(Tally_3) of true -> maps:get(M, Tally_3, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Tally_3) + M + 1, Tally_3); _ -> mochi_nth(M + 1, Tally_3) end end) > (case erlang:is_map(Tally_3) of true -> maps:get(Max_idx, Tally_3, nil); _ -> case Max_idx < 0 of true -> mochi_nth(erlang:length(Tally_3) + Max_idx + 1, Tally_3); _ -> mochi_nth(Max_idx + 1, Tally_3) end end)) of
        true -> Max_idx_2 = M,
            Max_idx_3 = Max_idx_2;
        _ -> Max_idx_3 = Max_idx
    end,
            M_2 = (M + 1),
            Fun_9_loop(Count_2, Distances_3, I_8, K, Knn, M_2, Max_idx_3, Pred_point, T_2, Tally_3, V_2, Votes_2);
        _ -> {Count_2, Distances_3, I_8, K, Knn, M, Max_idx, Pred_point, T_2, Tally_3, V_2, Votes_2}
    end
end,
{Count_2, Distances_3, I_8, K, Knn, M_2, Max_idx_3, Pred_point, T_2, Tally_3, V_2, Votes_2} = Fun_9(Count_2, Distances_3, I_8, K, Knn, M, Max_idx, Pred_point, T_2, Tally_3, V_2, Votes_2),
        (case erlang:is_map(maps:get("labels", Knn, nil)) of true -> maps:get(Max_idx_3, maps:get("labels", Knn, nil), nil); _ -> case Max_idx_3 < 0 of true -> mochi_nth(erlang:length(maps:get("labels", Knn, nil)) + Max_idx_3 + 1, maps:get("labels", Knn, nil)); _ -> mochi_nth(Max_idx_3 + 1, maps:get("labels", Knn, nil)) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('train_X', [[0.0, 0.0], [1.0, 0.0], [0.0, 1.0], [0.5, 0.5], [3.0, 3.0], [2.0, 3.0], [3.0, 2.0]]),
    erlang:put('train_y', [0, 0, 0, 0, 1, 1, 1]),
    erlang:put('classes', ["A", "B"]),
    erlang:put('knn', make_knn(erlang:get('train_X'), erlang:get('train_y'), erlang:get('classes'))),
    erlang:put('point', [1.2, 1.2]),
    io:format("~ts~n", [mochi_repr(classify(erlang:get('knn'), erlang:get('point'), 5))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
