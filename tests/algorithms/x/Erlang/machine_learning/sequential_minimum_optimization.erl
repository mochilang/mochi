#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, dot/2, maxf/2, minf/2, absf/1, predict_raw/5, smo_train/5, predict/4]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

dot(A, B) ->
    try
        Sum = 0.0,
        I = 0,
        Fun = fun Fun_loop(A, B, I, Sum) ->
    case (I < erlang:length(A)) of
        true ->
            Sum_2 = (Sum + mochi_safe_mul((case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(A) + I + 1, A); _ -> mochi_nth(I + 1, A) end end), (case erlang:is_map(B) of true -> maps:get(I, B, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(B) + I + 1, B); _ -> mochi_nth(I + 1, B) end end))),
            I_2 = (I + 1),
            Fun_loop(A, B, I_2, Sum_2);
        _ -> {A, B, I, Sum}
    end
end,
{A, B, I_2, Sum_2} = Fun(A, B, I, Sum),
        Sum_2
    catch {return, Ret} -> Ret end.

maxf(A_2, B_2) ->
    try
        (case (A_2 > B_2) of
    true -> A_2;
    _ -> B_2
end)
    catch {return, Ret} -> Ret end.

minf(A_3, B_3) ->
    try
        (case (A_3 < B_3) of
    true -> A_3;
    _ -> B_3
end)
    catch {return, Ret} -> Ret end.

absf(X) ->
    try
        (case (X >= 0.0) of
    true -> X;
    _ -> (0.0 - X)
end)
    catch {return, Ret} -> Ret end.

predict_raw(Samples, Labels, Alphas, B_4, X_2) ->
    try
        Res = 0.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Alphas, B_4, I_3, Labels, Res, Samples, X_2) ->
    case (I_3 < erlang:length(Samples)) of
        true ->
            Res_2 = (Res + mochi_safe_mul(mochi_safe_mul((case erlang:is_map(Alphas) of true -> maps:get(I_3, Alphas, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Alphas) + I_3 + 1, Alphas); _ -> mochi_nth(I_3 + 1, Alphas) end end), (case erlang:is_map(Labels) of true -> maps:get(I_3, Labels, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Labels) + I_3 + 1, Labels); _ -> mochi_nth(I_3 + 1, Labels) end end)), dot((case erlang:is_map(Samples) of true -> maps:get(I_3, Samples, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Samples) + I_3 + 1, Samples); _ -> mochi_nth(I_3 + 1, Samples) end end), X_2))),
            I_4 = (I_3 + 1),
            Fun_2_loop(Alphas, B_4, I_4, Labels, Res_2, Samples, X_2);
        _ -> {Alphas, B_4, I_3, Labels, Res, Samples, X_2}
    end
end,
{Alphas, B_4, I_4, Labels, Res_2, Samples, X_2} = Fun_2(Alphas, B_4, I_3, Labels, Res, Samples, X_2),
        (Res_2 + B_4)
    catch {return, Ret} -> Ret end.

smo_train(Samples_2, Labels_2, C, Tol, Max_passes) ->
    try
        M = erlang:length(Samples_2),
        Alphas_2 = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Alphas_2, C, I_5, Labels_2, M, Max_passes, Samples_2, Tol) ->
    case (I_5 < M) of
        true ->
            Alphas_3 = lists:append((case Alphas_2 of nil -> []; _ -> Alphas_2 end), [0.0]),
            I_6 = (I_5 + 1),
            Fun_3_loop(Alphas_3, C, I_6, Labels_2, M, Max_passes, Samples_2, Tol);
        _ -> {Alphas_2, C, I_5, Labels_2, M, Max_passes, Samples_2, Tol}
    end
end,
{Alphas_3, C, I_6, Labels_2, M, Max_passes, Samples_2, Tol} = Fun_3(Alphas_2, C, I_5, Labels_2, M, Max_passes, Samples_2, Tol),
        B_5 = 0.0,
        Passes = 0,
        Fun_5 = fun Fun_5_loop(Alphas_3, B_5, C, I_6, Labels_2, M, Max_passes, Passes, Samples_2, Tol) ->
    case (Passes < Max_passes) of
        true ->
            try
                Num_changed = 0,
                I1 = 0,
                Fun_4 = fun Fun_4_loop(Alphas_3, B_5, C, I_6, I1, Labels_2, M, Max_passes, Num_changed, Passes, Samples_2, Tol) ->
    case (I1 < M) of
        true ->
            try
                Ei = (predict_raw(Samples_2, Labels_2, Alphas_3, B_5, (case erlang:is_map(Samples_2) of true -> maps:get(I1, Samples_2, nil); _ -> case I1 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I1 + 1, Samples_2); _ -> mochi_nth(I1 + 1, Samples_2) end end)) - (case erlang:is_map(Labels_2) of true -> maps:get(I1, Labels_2, nil); _ -> case I1 < 0 of true -> mochi_nth(erlang:length(Labels_2) + I1 + 1, Labels_2); _ -> mochi_nth(I1 + 1, Labels_2) end end)),
                case (((mochi_safe_mul((case erlang:is_map(Labels_2) of true -> maps:get(I1, Labels_2, nil); _ -> case I1 < 0 of true -> mochi_nth(erlang:length(Labels_2) + I1 + 1, Labels_2); _ -> mochi_nth(I1 + 1, Labels_2) end end), Ei) < (0.0 - Tol)) andalso ((case erlang:is_map(Alphas_3) of true -> maps:get(I1, Alphas_3, nil); _ -> case I1 < 0 of true -> mochi_nth(erlang:length(Alphas_3) + I1 + 1, Alphas_3); _ -> mochi_nth(I1 + 1, Alphas_3) end end) < C)) orelse ((mochi_safe_mul((case erlang:is_map(Labels_2) of true -> maps:get(I1, Labels_2, nil); _ -> case I1 < 0 of true -> mochi_nth(erlang:length(Labels_2) + I1 + 1, Labels_2); _ -> mochi_nth(I1 + 1, Labels_2) end end), Ei) > Tol) andalso ((case erlang:is_map(Alphas_3) of true -> maps:get(I1, Alphas_3, nil); _ -> case I1 < 0 of true -> mochi_nth(erlang:length(Alphas_3) + I1 + 1, Alphas_3); _ -> mochi_nth(I1 + 1, Alphas_3) end end) > 0.0))) of
        true -> I2 = mochi_mod((I1 + 1), M),
            Ej = (predict_raw(Samples_2, Labels_2, Alphas_3, B_5, (case erlang:is_map(Samples_2) of true -> maps:get(I2, Samples_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I2 + 1, Samples_2); _ -> mochi_nth(I2 + 1, Samples_2) end end)) - (case erlang:is_map(Labels_2) of true -> maps:get(I2, Labels_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Labels_2) + I2 + 1, Labels_2); _ -> mochi_nth(I2 + 1, Labels_2) end end)),
            Alpha1_old = (case erlang:is_map(Alphas_3) of true -> maps:get(I1, Alphas_3, nil); _ -> case I1 < 0 of true -> mochi_nth(erlang:length(Alphas_3) + I1 + 1, Alphas_3); _ -> mochi_nth(I1 + 1, Alphas_3) end end),
            Alpha2_old = (case erlang:is_map(Alphas_3) of true -> maps:get(I2, Alphas_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Alphas_3) + I2 + 1, Alphas_3); _ -> mochi_nth(I2 + 1, Alphas_3) end end),
            L = 0.0,
            H = 0.0,
            case ((case erlang:is_map(Labels_2) of true -> maps:get(I1, Labels_2, nil); _ -> case I1 < 0 of true -> mochi_nth(erlang:length(Labels_2) + I1 + 1, Labels_2); _ -> mochi_nth(I1 + 1, Labels_2) end end) /= (case erlang:is_map(Labels_2) of true -> maps:get(I2, Labels_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Labels_2) + I2 + 1, Labels_2); _ -> mochi_nth(I2 + 1, Labels_2) end end)) of
        true -> L_2 = maxf(0.0, (Alpha2_old - Alpha1_old)),
            H_2 = minf(C, ((C + Alpha2_old) - Alpha1_old)),
            H_4 = H_2,
            L_4 = L_2;
        _ -> L_3 = maxf(0.0, ((Alpha2_old + Alpha1_old) - C)),
            H_3 = minf(C, (Alpha2_old + Alpha1_old)),
            H_4 = H_3,
            L_4 = L_3
    end,
            case (L_4 == H_4) of
        true -> I1_2 = (I1 + 1),
            throw({continue, Alphas_3, B_5, C, I_6, I1_2, Labels_2, M, Max_passes, Num_changed, Passes, Samples_2, Tol}),
            I1_3 = I1_2;
        _ -> I1_3 = I1
    end,
            Eta = ((mochi_safe_mul(2.0, dot((case erlang:is_map(Samples_2) of true -> maps:get(I1_3, Samples_2, nil); _ -> case I1_3 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I1_3 + 1, Samples_2); _ -> mochi_nth(I1_3 + 1, Samples_2) end end), (case erlang:is_map(Samples_2) of true -> maps:get(I2, Samples_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I2 + 1, Samples_2); _ -> mochi_nth(I2 + 1, Samples_2) end end))) - dot((case erlang:is_map(Samples_2) of true -> maps:get(I1_3, Samples_2, nil); _ -> case I1_3 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I1_3 + 1, Samples_2); _ -> mochi_nth(I1_3 + 1, Samples_2) end end), (case erlang:is_map(Samples_2) of true -> maps:get(I1_3, Samples_2, nil); _ -> case I1_3 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I1_3 + 1, Samples_2); _ -> mochi_nth(I1_3 + 1, Samples_2) end end))) - dot((case erlang:is_map(Samples_2) of true -> maps:get(I2, Samples_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I2 + 1, Samples_2); _ -> mochi_nth(I2 + 1, Samples_2) end end), (case erlang:is_map(Samples_2) of true -> maps:get(I2, Samples_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I2 + 1, Samples_2); _ -> mochi_nth(I2 + 1, Samples_2) end end))),
            case (Eta >= 0.0) of
        true -> I1_4 = (I1_3 + 1),
            throw({continue, Alphas_3, B_5, C, I_6, I1_4, Labels_2, M, Max_passes, Num_changed, Passes, Samples_2, Tol}),
            I1_5 = I1_4;
        _ -> I1_5 = I1_3
    end,
            Alphas_4 = lists:sublist(Alphas_3, I2) ++ [(Alpha2_old - mochi_safe_div(mochi_safe_mul((case erlang:is_map(Labels_2) of true -> maps:get(I2, Labels_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Labels_2) + I2 + 1, Labels_2); _ -> mochi_nth(I2 + 1, Labels_2) end end), (Ei - Ej)), Eta))] ++ lists:nthtail(I2 + 1, Alphas_3),
            case ((case erlang:is_map(Alphas_4) of true -> maps:get(I2, Alphas_4, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Alphas_4) + I2 + 1, Alphas_4); _ -> mochi_nth(I2 + 1, Alphas_4) end end) > H_4) of
        true -> Alphas_5 = lists:sublist(Alphas_4, I2) ++ [H_4] ++ lists:nthtail(I2 + 1, Alphas_4),
            Alphas_6 = Alphas_5;
        _ -> Alphas_6 = Alphas_4
    end,
            case ((case erlang:is_map(Alphas_6) of true -> maps:get(I2, Alphas_6, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Alphas_6) + I2 + 1, Alphas_6); _ -> mochi_nth(I2 + 1, Alphas_6) end end) < L_4) of
        true -> Alphas_7 = lists:sublist(Alphas_6, I2) ++ [L_4] ++ lists:nthtail(I2 + 1, Alphas_6),
            Alphas_8 = Alphas_7;
        _ -> Alphas_8 = Alphas_6
    end,
            case (absf(((case erlang:is_map(Alphas_8) of true -> maps:get(I2, Alphas_8, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Alphas_8) + I2 + 1, Alphas_8); _ -> mochi_nth(I2 + 1, Alphas_8) end end) - Alpha2_old)) < 0.00001) of
        true -> I1_6 = (I1_5 + 1),
            throw({continue, Alphas_8, B_5, C, I_6, I1_6, Labels_2, M, Max_passes, Num_changed, Passes, Samples_2, Tol}),
            I1_7 = I1_6;
        _ -> I1_7 = I1_5
    end,
            Alphas_9 = lists:sublist(Alphas_8, I1_7) ++ [(Alpha1_old + mochi_safe_mul(mochi_safe_mul((case erlang:is_map(Labels_2) of true -> maps:get(I1_7, Labels_2, nil); _ -> case I1_7 < 0 of true -> mochi_nth(erlang:length(Labels_2) + I1_7 + 1, Labels_2); _ -> mochi_nth(I1_7 + 1, Labels_2) end end), (case erlang:is_map(Labels_2) of true -> maps:get(I2, Labels_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Labels_2) + I2 + 1, Labels_2); _ -> mochi_nth(I2 + 1, Labels_2) end end)), (Alpha2_old - (case erlang:is_map(Alphas_8) of true -> maps:get(I2, Alphas_8, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Alphas_8) + I2 + 1, Alphas_8); _ -> mochi_nth(I2 + 1, Alphas_8) end end))))] ++ lists:nthtail(I1_7 + 1, Alphas_8),
            B1 = (((B_5 - Ei) - mochi_safe_mul(mochi_safe_mul((case erlang:is_map(Labels_2) of true -> maps:get(I1_7, Labels_2, nil); _ -> case I1_7 < 0 of true -> mochi_nth(erlang:length(Labels_2) + I1_7 + 1, Labels_2); _ -> mochi_nth(I1_7 + 1, Labels_2) end end), ((case erlang:is_map(Alphas_9) of true -> maps:get(I1_7, Alphas_9, nil); _ -> case I1_7 < 0 of true -> mochi_nth(erlang:length(Alphas_9) + I1_7 + 1, Alphas_9); _ -> mochi_nth(I1_7 + 1, Alphas_9) end end) - Alpha1_old)), dot((case erlang:is_map(Samples_2) of true -> maps:get(I1_7, Samples_2, nil); _ -> case I1_7 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I1_7 + 1, Samples_2); _ -> mochi_nth(I1_7 + 1, Samples_2) end end), (case erlang:is_map(Samples_2) of true -> maps:get(I1_7, Samples_2, nil); _ -> case I1_7 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I1_7 + 1, Samples_2); _ -> mochi_nth(I1_7 + 1, Samples_2) end end)))) - mochi_safe_mul(mochi_safe_mul((case erlang:is_map(Labels_2) of true -> maps:get(I2, Labels_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Labels_2) + I2 + 1, Labels_2); _ -> mochi_nth(I2 + 1, Labels_2) end end), ((case erlang:is_map(Alphas_9) of true -> maps:get(I2, Alphas_9, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Alphas_9) + I2 + 1, Alphas_9); _ -> mochi_nth(I2 + 1, Alphas_9) end end) - Alpha2_old)), dot((case erlang:is_map(Samples_2) of true -> maps:get(I1_7, Samples_2, nil); _ -> case I1_7 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I1_7 + 1, Samples_2); _ -> mochi_nth(I1_7 + 1, Samples_2) end end), (case erlang:is_map(Samples_2) of true -> maps:get(I2, Samples_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I2 + 1, Samples_2); _ -> mochi_nth(I2 + 1, Samples_2) end end)))),
            B2 = (((B_5 - Ej) - mochi_safe_mul(mochi_safe_mul((case erlang:is_map(Labels_2) of true -> maps:get(I1_7, Labels_2, nil); _ -> case I1_7 < 0 of true -> mochi_nth(erlang:length(Labels_2) + I1_7 + 1, Labels_2); _ -> mochi_nth(I1_7 + 1, Labels_2) end end), ((case erlang:is_map(Alphas_9) of true -> maps:get(I1_7, Alphas_9, nil); _ -> case I1_7 < 0 of true -> mochi_nth(erlang:length(Alphas_9) + I1_7 + 1, Alphas_9); _ -> mochi_nth(I1_7 + 1, Alphas_9) end end) - Alpha1_old)), dot((case erlang:is_map(Samples_2) of true -> maps:get(I1_7, Samples_2, nil); _ -> case I1_7 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I1_7 + 1, Samples_2); _ -> mochi_nth(I1_7 + 1, Samples_2) end end), (case erlang:is_map(Samples_2) of true -> maps:get(I2, Samples_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I2 + 1, Samples_2); _ -> mochi_nth(I2 + 1, Samples_2) end end)))) - mochi_safe_mul(mochi_safe_mul((case erlang:is_map(Labels_2) of true -> maps:get(I2, Labels_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Labels_2) + I2 + 1, Labels_2); _ -> mochi_nth(I2 + 1, Labels_2) end end), ((case erlang:is_map(Alphas_9) of true -> maps:get(I2, Alphas_9, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Alphas_9) + I2 + 1, Alphas_9); _ -> mochi_nth(I2 + 1, Alphas_9) end end) - Alpha2_old)), dot((case erlang:is_map(Samples_2) of true -> maps:get(I2, Samples_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I2 + 1, Samples_2); _ -> mochi_nth(I2 + 1, Samples_2) end end), (case erlang:is_map(Samples_2) of true -> maps:get(I2, Samples_2, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Samples_2) + I2 + 1, Samples_2); _ -> mochi_nth(I2 + 1, Samples_2) end end)))),
            case (((case erlang:is_map(Alphas_9) of true -> maps:get(I1_7, Alphas_9, nil); _ -> case I1_7 < 0 of true -> mochi_nth(erlang:length(Alphas_9) + I1_7 + 1, Alphas_9); _ -> mochi_nth(I1_7 + 1, Alphas_9) end end) > 0.0) andalso ((case erlang:is_map(Alphas_9) of true -> maps:get(I1_7, Alphas_9, nil); _ -> case I1_7 < 0 of true -> mochi_nth(erlang:length(Alphas_9) + I1_7 + 1, Alphas_9); _ -> mochi_nth(I1_7 + 1, Alphas_9) end end) < C)) of
        true -> B_6 = B1,
            B_10 = B_6;
        _ -> case (((case erlang:is_map(Alphas_9) of true -> maps:get(I2, Alphas_9, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Alphas_9) + I2 + 1, Alphas_9); _ -> mochi_nth(I2 + 1, Alphas_9) end end) > 0.0) andalso ((case erlang:is_map(Alphas_9) of true -> maps:get(I2, Alphas_9, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Alphas_9) + I2 + 1, Alphas_9); _ -> mochi_nth(I2 + 1, Alphas_9) end end) < C)) of
        true -> B_7 = B2,
            B_9 = B_7;
        _ -> B_8 = mochi_safe_div((B1 + B2), 2.0),
            B_9 = B_8
    end,
            B_10 = B_9
    end,
            Num_changed_2 = (Num_changed + 1),
            Ej_2 = Ej,
            H_5 = H_4,
            L_5 = L_4,
            Alpha1_old_2 = Alpha1_old,
            Alpha2_old_2 = Alpha2_old,
            Alphas_10 = Alphas_9,
            B_11 = B_10,
            B1_2 = B1,
            B2_2 = B2,
            Eta_2 = Eta,
            I1_8 = I1_7,
            I2_2 = I2,
            Num_changed_3 = Num_changed_2;
        _ -> Ej_2 = nil,
            H_5 = nil,
            L_5 = nil,
            Alpha1_old_2 = nil,
            Alpha2_old_2 = nil,
            Alphas_10 = Alphas_3,
            B_11 = B_5,
            B1_2 = nil,
            B2_2 = nil,
            Eta_2 = nil,
            I1_8 = I1,
            I2_2 = nil,
            Num_changed_3 = Num_changed
    end,
                I1_9 = (I1_8 + 1),
                Fun_4_loop(Alphas_10, B_11, C, I_6, I1_9, Labels_2, M, Max_passes, Num_changed_3, Passes, Samples_2, Tol)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11} -> Fun_4_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11}
            end;
        _ -> {Alphas_3, B_5, C, I_6, I1, Labels_2, M, Max_passes, Num_changed, Passes, Samples_2, Tol}
    end
end,
{Alphas_10, B_11, C, I_6, I1_9, Labels_2, M, Max_passes, Num_changed_3, Passes, Samples_2, Tol} = Fun_4(Alphas_3, B_5, C, I_6, I1, Labels_2, M, Max_passes, Num_changed, Passes, Samples_2, Tol),
                case (Num_changed_3 == 0) of
        true -> Passes_2 = (Passes + 1),
            Passes_4 = Passes_2;
        _ -> Passes_3 = 0,
            Passes_4 = Passes_3
    end,
                Fun_5_loop(Alphas_10, B_11, C, I_6, Labels_2, M, Max_passes, Passes_4, Samples_2, Tol)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9} -> Fun_5_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9}
            end;
        _ -> {Alphas_3, B_5, C, I_6, Labels_2, M, Max_passes, Passes, Samples_2, Tol}
    end
end,
{Alphas_10, B_11, C, I_6, Labels_2, M, Max_passes, Passes_4, Samples_2, Tol} = Fun_5(Alphas_3, B_5, C, I_6, Labels_2, M, Max_passes, Passes, Samples_2, Tol),
        [Alphas_10, [B_11]]
    catch {return, Ret} -> Ret end.

predict(Samples_3, Labels_3, Model, X_3) ->
    try
        Alphas_11 = (case erlang:is_map(Model) of true -> maps:get(0, Model, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Model) + 0 + 1, Model); _ -> mochi_nth(0 + 1, Model) end end),
        B_12 = (case erlang:is_map((case erlang:is_map(Model) of true -> maps:get(1, Model, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Model) + 1 + 1, Model); _ -> mochi_nth(1 + 1, Model) end end)) of true -> maps:get(0, (case erlang:is_map(Model) of true -> maps:get(1, Model, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Model) + 1 + 1, Model); _ -> mochi_nth(1 + 1, Model) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Model) of true -> maps:get(1, Model, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Model) + 1 + 1, Model); _ -> mochi_nth(1 + 1, Model) end end)) + 0 + 1, (case erlang:is_map(Model) of true -> maps:get(1, Model, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Model) + 1 + 1, Model); _ -> mochi_nth(1 + 1, Model) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Model) of true -> maps:get(1, Model, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Model) + 1 + 1, Model); _ -> mochi_nth(1 + 1, Model) end end)) end end),
        Val = predict_raw(Samples_3, Labels_3, Alphas_11, B_12, X_3),
        case (Val >= 0.0) of
        true -> throw({return, 1.0});
        _ -> ok
    end,
        -1.0
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('samples', [[2.0, 2.0], [1.5, 1.5], [0.0, 0.0], [0.5, 0.0]]),
    erlang:put('labels', [1.0, 1.0, -1.0, -1.0]),
    erlang:put('model', smo_train(erlang:get('samples'), erlang:get('labels'), 1.0, 0.001, 10)),
    io:format("~ts~n", [mochi_repr(predict(erlang:get('samples'), erlang:get('labels'), erlang:get('model'), [1.5, 1.0]))]),
    io:format("~ts~n", [mochi_repr(predict(erlang:get('samples'), erlang:get('labels'), erlang:get('model'), [0.2, 0.1]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
