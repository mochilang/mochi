#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, dot/2, run_steep_gradient_descent/5, sum_of_square_error/4, run_linear_regression/2, absf/1, mean_absolute_error/2]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

dot(X, Y) ->
    try
        Sum = 0.0,
        I = 0,
        Fun = fun Fun_loop(I, Sum, X, Y) ->
    case (I < erlang:length(X)) of
        true ->
            Sum_2 = (Sum + mochi_safe_mul((case erlang:is_map(X) of true -> maps:get(I, X, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(X) + I + 1, X); _ -> mochi_nth(I + 1, X) end end), (case erlang:is_map(Y) of true -> maps:get(I, Y, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Y) + I + 1, Y); _ -> mochi_nth(I + 1, Y) end end))),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, X, Y);
        _ -> {I, Sum, X, Y}
    end
end,
{I_2, Sum_2, X, Y} = Fun(I, Sum, X, Y),
        Sum_2
    catch {return, Ret} -> Ret end.

run_steep_gradient_descent(Data_x, Data_y, Len_data, Alpha, Theta) ->
    try
        Gradients = [],
        J = 0,
        Fun_2 = fun Fun_2_loop(Alpha, Data_x, Data_y, Gradients, J, Len_data, Theta) ->
    case (J < erlang:length(Theta)) of
        true ->
            Gradients_2 = lists:append((case Gradients of nil -> []; _ -> Gradients end), [0.0]),
            J_2 = (J + 1),
            Fun_2_loop(Alpha, Data_x, Data_y, Gradients_2, J_2, Len_data, Theta);
        _ -> {Alpha, Data_x, Data_y, Gradients, J, Len_data, Theta}
    end
end,
{Alpha, Data_x, Data_y, Gradients_2, J_2, Len_data, Theta} = Fun_2(Alpha, Data_x, Data_y, Gradients, J, Len_data, Theta),
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Alpha, Data_x, Data_y, Gradients_2, I_3, J_2, Len_data, Theta) ->
    case (I_3 < Len_data) of
        true ->
            Prediction = dot(Theta, (case erlang:is_map(Data_x) of true -> maps:get(I_3, Data_x, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Data_x) + I_3 + 1, Data_x); _ -> mochi_nth(I_3 + 1, Data_x) end end)),
            Error = (Prediction - (case erlang:is_map(Data_y) of true -> maps:get(I_3, Data_y, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Data_y) + I_3 + 1, Data_y); _ -> mochi_nth(I_3 + 1, Data_y) end end)),
            K = 0,
            Fun_3 = fun Fun_3_loop(Alpha, Data_x, Data_y, Error, Gradients_2, I_3, J_2, K, Len_data, Prediction, Theta) ->
    case (K < erlang:length(Theta)) of
        true ->
            Gradients_3 = lists:sublist(Gradients_2, K) ++ [((case erlang:is_map(Gradients_2) of true -> maps:get(K, Gradients_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Gradients_2) + K + 1, Gradients_2); _ -> mochi_nth(K + 1, Gradients_2) end end) + mochi_safe_mul(Error, (case erlang:is_map((case erlang:is_map(Data_x) of true -> maps:get(I_3, Data_x, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Data_x) + I_3 + 1, Data_x); _ -> mochi_nth(I_3 + 1, Data_x) end end)) of true -> maps:get(K, (case erlang:is_map(Data_x) of true -> maps:get(I_3, Data_x, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Data_x) + I_3 + 1, Data_x); _ -> mochi_nth(I_3 + 1, Data_x) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Data_x) of true -> maps:get(I_3, Data_x, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Data_x) + I_3 + 1, Data_x); _ -> mochi_nth(I_3 + 1, Data_x) end end)) + K + 1, (case erlang:is_map(Data_x) of true -> maps:get(I_3, Data_x, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Data_x) + I_3 + 1, Data_x); _ -> mochi_nth(I_3 + 1, Data_x) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(Data_x) of true -> maps:get(I_3, Data_x, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Data_x) + I_3 + 1, Data_x); _ -> mochi_nth(I_3 + 1, Data_x) end end)) end end)))] ++ lists:nthtail(K + 1, Gradients_2),
            K_2 = (K + 1),
            Fun_3_loop(Alpha, Data_x, Data_y, Error, Gradients_3, I_3, J_2, K_2, Len_data, Prediction, Theta);
        _ -> {Alpha, Data_x, Data_y, Error, Gradients_2, I_3, J_2, K, Len_data, Prediction, Theta}
    end
end,
{Alpha, Data_x, Data_y, Error, Gradients_3, I_3, J_2, K_2, Len_data, Prediction, Theta} = Fun_3(Alpha, Data_x, Data_y, Error, Gradients_2, I_3, J_2, K, Len_data, Prediction, Theta),
            I_4 = (I_3 + 1),
            Fun_4_loop(Alpha, Data_x, Data_y, Gradients_3, I_4, J_2, Len_data, Theta);
        _ -> {Alpha, Data_x, Data_y, Gradients_2, I_3, J_2, Len_data, Theta}
    end
end,
{Alpha, Data_x, Data_y, Gradients_3, I_4, J_2, Len_data, Theta} = Fun_4(Alpha, Data_x, Data_y, Gradients_2, I_3, J_2, Len_data, Theta),
        T = [],
        G = 0,
        Fun_5 = fun Fun_5_loop(Alpha, Data_x, Data_y, G, Gradients_3, I_4, J_2, Len_data, T, Theta) ->
    case (G < erlang:length(Theta)) of
        true ->
            T_2 = lists:append((case T of nil -> []; _ -> T end), [((case erlang:is_map(Theta) of true -> maps:get(G, Theta, nil); _ -> case G < 0 of true -> mochi_nth(erlang:length(Theta) + G + 1, Theta); _ -> mochi_nth(G + 1, Theta) end end) - mochi_safe_mul(mochi_safe_div(Alpha, Len_data), (case erlang:is_map(Gradients_3) of true -> maps:get(G, Gradients_3, nil); _ -> case G < 0 of true -> mochi_nth(erlang:length(Gradients_3) + G + 1, Gradients_3); _ -> mochi_nth(G + 1, Gradients_3) end end)))]),
            G_2 = (G + 1),
            Fun_5_loop(Alpha, Data_x, Data_y, G_2, Gradients_3, I_4, J_2, Len_data, T_2, Theta);
        _ -> {Alpha, Data_x, Data_y, G, Gradients_3, I_4, J_2, Len_data, T, Theta}
    end
end,
{Alpha, Data_x, Data_y, G_2, Gradients_3, I_4, J_2, Len_data, T_2, Theta} = Fun_5(Alpha, Data_x, Data_y, G, Gradients_3, I_4, J_2, Len_data, T, Theta),
        T_2
    catch {return, Ret} -> Ret end.

sum_of_square_error(Data_x_2, Data_y_2, Len_data_2, Theta_2) ->
    try
        Total = 0.0,
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(Data_x_2, Data_y_2, I_5, Len_data_2, Theta_2, Total) ->
    case (I_5 < Len_data_2) of
        true ->
            Prediction_2 = dot(Theta_2, (case erlang:is_map(Data_x_2) of true -> maps:get(I_5, Data_x_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Data_x_2) + I_5 + 1, Data_x_2); _ -> mochi_nth(I_5 + 1, Data_x_2) end end)),
            Diff = (Prediction_2 - (case erlang:is_map(Data_y_2) of true -> maps:get(I_5, Data_y_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Data_y_2) + I_5 + 1, Data_y_2); _ -> mochi_nth(I_5 + 1, Data_y_2) end end)),
            Total_2 = (Total + mochi_safe_mul(Diff, Diff)),
            I_6 = (I_5 + 1),
            Fun_6_loop(Data_x_2, Data_y_2, I_6, Len_data_2, Theta_2, Total_2);
        _ -> {Data_x_2, Data_y_2, I_5, Len_data_2, Theta_2, Total}
    end
end,
{Data_x_2, Data_y_2, I_6, Len_data_2, Theta_2, Total_2} = Fun_6(Data_x_2, Data_y_2, I_5, Len_data_2, Theta_2, Total),
        mochi_safe_div(Total_2, mochi_safe_mul(2.0, Len_data_2))
    catch {return, Ret} -> Ret end.

run_linear_regression(Data_x_3, Data_y_3) ->
    try
        Iterations = 10,
        Alpha_2 = 0.01,
        No_features = erlang:length((case erlang:is_map(Data_x_3) of true -> maps:get(0, Data_x_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Data_x_3) + 0 + 1, Data_x_3); _ -> mochi_nth(0 + 1, Data_x_3) end end)),
        Len_data_3 = erlang:length(Data_x_3),
        Theta_3 = [],
        I_7 = 0,
        Fun_7 = fun Fun_7_loop(Alpha_2, Data_x_3, Data_y_3, I_7, Iterations, Len_data_3, No_features, Theta_3) ->
    case (I_7 < No_features) of
        true ->
            Theta_4 = lists:append((case Theta_3 of nil -> []; _ -> Theta_3 end), [0.0]),
            I_8 = (I_7 + 1),
            Fun_7_loop(Alpha_2, Data_x_3, Data_y_3, I_8, Iterations, Len_data_3, No_features, Theta_4);
        _ -> {Alpha_2, Data_x_3, Data_y_3, I_7, Iterations, Len_data_3, No_features, Theta_3}
    end
end,
{Alpha_2, Data_x_3, Data_y_3, I_8, Iterations, Len_data_3, No_features, Theta_4} = Fun_7(Alpha_2, Data_x_3, Data_y_3, I_7, Iterations, Len_data_3, No_features, Theta_3),
        Iter = 0,
        Fun_8 = fun Fun_8_loop(Alpha_2, Data_x_3, Data_y_3, I_8, Iter, Iterations, Len_data_3, No_features, Theta_4) ->
    case (Iter < Iterations) of
        true ->
            Theta_5 = run_steep_gradient_descent(Data_x_3, Data_y_3, Len_data_3, Alpha_2, Theta_4),
            Error_2 = sum_of_square_error(Data_x_3, Data_y_3, Len_data_3, Theta_5),
            io:format("~ts~n", [mochi_repr(((("At Iteration " ++ mochi_str((Iter + 1))) ++ " - Error is ") ++ mochi_str(Error_2)))]),
            Iter_2 = (Iter + 1),
            Fun_8_loop(Alpha_2, Data_x_3, Data_y_3, I_8, Iter_2, Iterations, Len_data_3, No_features, Theta_5);
        _ -> {Alpha_2, Data_x_3, Data_y_3, I_8, Iter, Iterations, Len_data_3, No_features, Theta_4}
    end
end,
{Alpha_2, Data_x_3, Data_y_3, I_8, Iter_2, Iterations, Len_data_3, No_features, Theta_5} = Fun_8(Alpha_2, Data_x_3, Data_y_3, I_8, Iter, Iterations, Len_data_3, No_features, Theta_4),
        Theta_5
    catch {return, Ret} -> Ret end.

absf(X_2) ->
    try
        case (X_2 < 0.0) of
        true -> throw({return, -X_2});
        _ -> throw({return, X_2})
    end,
        nil
    catch {return, Ret} -> Ret end.

mean_absolute_error(Predicted_y, Original_y) ->
    try
        Total_3 = 0.0,
        I_9 = 0,
        Fun_9 = fun Fun_9_loop(I_9, Original_y, Predicted_y, Total_3) ->
    case (I_9 < erlang:length(Predicted_y)) of
        true ->
            Diff_2 = absf(((case erlang:is_map(Predicted_y) of true -> maps:get(I_9, Predicted_y, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Predicted_y) + I_9 + 1, Predicted_y); _ -> mochi_nth(I_9 + 1, Predicted_y) end end) - (case erlang:is_map(Original_y) of true -> maps:get(I_9, Original_y, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Original_y) + I_9 + 1, Original_y); _ -> mochi_nth(I_9 + 1, Original_y) end end))),
            Total_4 = (Total_3 + Diff_2),
            I_10 = (I_9 + 1),
            Fun_9_loop(I_10, Original_y, Predicted_y, Total_4);
        _ -> {I_9, Original_y, Predicted_y, Total_3}
    end
end,
{I_10, Original_y, Predicted_y, Total_4} = Fun_9(I_9, Original_y, Predicted_y, Total_3),
        mochi_safe_div(Total_4, erlang:length(Predicted_y))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('data_x', [[1.0, 1.0], [1.0, 2.0], [1.0, 3.0]]),
    erlang:put('data_y', [1.0, 2.0, 3.0]),
    erlang:put('theta', run_linear_regression(erlang:get('data_x'), erlang:get('data_y'))),
    io:format("~ts~n", [mochi_repr("Resultant Feature vector :")]),
    erlang:put('i', 0),
    Fun_10 = fun Fun_10_loop() ->
    case (erlang:get('i') < erlang:length(erlang:get('theta'))) of
        true ->
            io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('theta')) of true -> maps:get(erlang:get('i'), erlang:get('theta'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('theta')) + erlang:get('i') + 1, erlang:get('theta')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('theta')) end end))]),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_10_loop();
        _ -> {}
    end
end,
{} = Fun_10(),
    erlang:put('predicted_y', [3.0, -0.5, 2.0, 7.0]),
    erlang:put('original_y', [2.5, 0.0, 2.0, 8.0]),
    erlang:put('mae', mean_absolute_error(erlang:get('predicted_y'), erlang:get('original_y'))),
    io:format("~ts~n", [mochi_repr(("Mean Absolute Error : " ++ mochi_str(erlang:get('mae'))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
