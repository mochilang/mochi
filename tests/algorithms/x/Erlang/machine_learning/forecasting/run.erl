#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, int_to_float/1, abs_float/1, exp_approx/1, floor_int/1, dot/2, transpose/1, matmul/2, matvec/2, identity/1, invert/1, normal_equation/2, linear_regression_prediction/5, sarimax_predictor/3, rbf_kernel/3, support_vector_regressor/3, set_at_float/3, sort_float/1, percentile/2, interquartile_range_checker/1, data_safety_checker/2, main/0]).

% Generated by Mochi transpiler v0.10.66 (fa2dc5e881)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

int_to_float(X) ->
    try
        mochi_safe_mul(X, 1.0)
    catch {return, RetCatch} -> RetCatch end.

abs_float(X_2) ->
    try
        (case (X_2 < 0.0) of
    true -> (0.0 - X_2);
    _ -> X_2
end)
    catch {return, RetCatch} -> RetCatch end.

exp_approx(X_3) ->
    try
        Term = 1.0,
        Sum = 1.0,
        I = 1,
        Fun = fun Fun_loop(I, Sum, Term, X_3) ->
    case (I < 10) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X_3), int_to_float(I)),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, Term_2, X_3);
        _ -> {I, Sum, Term, X_3}
    end
end,
{I_2, Sum_2, Term_2, X_3} = Fun(I, Sum, Term, X_3),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

floor_int(X_4) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, X_4) ->
    case (int_to_float((I_3 + 1)) =< X_4) of
        true ->
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, X_4);
        _ -> {I_3, X_4}
    end
end,
{I_4, X_4} = Fun_2(I_3, X_4),
        I_4
    catch {return, RetCatch} -> RetCatch end.

dot(A, B) ->
    try
        S = 0.0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(A, B, I_5, S) ->
    case (I_5 < erlang:length(A)) of
        true ->
            S_2 = (S + mochi_safe_mul((case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end), (case erlang:is_map(B) of true -> maps:get(I_5, B, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(B) + I_5 + 1, B); _ -> mochi_nth(I_5 + 1, B) end end))),
            I_6 = (I_5 + 1),
            Fun_3_loop(A, B, I_6, S_2);
        _ -> {A, B, I_5, S}
    end
end,
{A, B, I_6, S_2} = Fun_3(A, B, I_5, S),
        S_2
    catch {return, RetCatch} -> RetCatch end.

transpose(M) ->
    try
        Rows = erlang:length(M),
        Cols = erlang:length((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end)),
        Res = [],
        J = 0,
        Fun_5 = fun Fun_5_loop(Cols, J, M, Res, Rows) ->
    case (J < Cols) of
        true ->
            Row = [],
            I_7 = 0,
            Fun_4 = fun Fun_4_loop(Cols, I_7, J, M, Res, Row, Rows) ->
    case (I_7 < Rows) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [(case erlang:is_map((case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end)) of true -> maps:get(J, (case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end)) + J + 1, (case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end)) end end)]),
            I_8 = (I_7 + 1),
            Fun_4_loop(Cols, I_8, J, M, Res, Row_2, Rows);
        _ -> {Cols, I_7, J, M, Res, Row, Rows}
    end
end,
{Cols, I_8, J, M, Res, Row_2, Rows} = Fun_4(Cols, I_7, J, M, Res, Row, Rows),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Row_2]),
            J_2 = (J + 1),
            Fun_5_loop(Cols, J_2, M, Res_2, Rows);
        _ -> {Cols, J, M, Res, Rows}
    end
end,
{Cols, J_2, M, Res_2, Rows} = Fun_5(Cols, J, M, Res, Rows),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

matmul(A_2, B_2) ->
    try
        N = erlang:length(A_2),
        M_2 = erlang:length((case erlang:is_map(B_2) of true -> maps:get(0, B_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B_2) + 0 + 1, B_2); _ -> mochi_nth(0 + 1, B_2) end end)),
        P = erlang:length(B_2),
        Res_3 = [],
        I_9 = 0,
        Fun_8 = fun Fun_8_loop(A_2, B_2, I_9, M_2, N, P, Res_3) ->
    case (I_9 < N) of
        true ->
            Row_3 = [],
            J_3 = 0,
            Fun_7 = fun Fun_7_loop(A_2, B_2, I_9, J_3, M_2, N, P, Res_3, Row_3) ->
    case (J_3 < M_2) of
        true ->
            S_3 = 0.0,
            K = 0,
            Fun_6 = fun Fun_6_loop(A_2, B_2, I_9, J_3, K, M_2, N, P, Res_3, Row_3, S_3) ->
    case (K < P) of
        true ->
            S_4 = (S_3 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(A_2) of true -> maps:get(I_9, A_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_2) + I_9 + 1, A_2); _ -> mochi_nth(I_9 + 1, A_2) end end)) of true -> maps:get(K, (case erlang:is_map(A_2) of true -> maps:get(I_9, A_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_2) + I_9 + 1, A_2); _ -> mochi_nth(I_9 + 1, A_2) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_2) of true -> maps:get(I_9, A_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_2) + I_9 + 1, A_2); _ -> mochi_nth(I_9 + 1, A_2) end end)) + K + 1, (case erlang:is_map(A_2) of true -> maps:get(I_9, A_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_2) + I_9 + 1, A_2); _ -> mochi_nth(I_9 + 1, A_2) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(A_2) of true -> maps:get(I_9, A_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_2) + I_9 + 1, A_2); _ -> mochi_nth(I_9 + 1, A_2) end end)) end end), (case erlang:is_map((case erlang:is_map(B_2) of true -> maps:get(K, B_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_2) + K + 1, B_2); _ -> mochi_nth(K + 1, B_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(B_2) of true -> maps:get(K, B_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_2) + K + 1, B_2); _ -> mochi_nth(K + 1, B_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B_2) of true -> maps:get(K, B_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_2) + K + 1, B_2); _ -> mochi_nth(K + 1, B_2) end end)) + J_3 + 1, (case erlang:is_map(B_2) of true -> maps:get(K, B_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_2) + K + 1, B_2); _ -> mochi_nth(K + 1, B_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(B_2) of true -> maps:get(K, B_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_2) + K + 1, B_2); _ -> mochi_nth(K + 1, B_2) end end)) end end))),
            K_2 = (K + 1),
            Fun_6_loop(A_2, B_2, I_9, J_3, K_2, M_2, N, P, Res_3, Row_3, S_4);
        _ -> {A_2, B_2, I_9, J_3, K, M_2, N, P, Res_3, Row_3, S_3}
    end
end,
{A_2, B_2, I_9, J_3, K_2, M_2, N, P, Res_3, Row_3, S_4} = Fun_6(A_2, B_2, I_9, J_3, K, M_2, N, P, Res_3, Row_3, S_3),
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [S_4]),
            J_4 = (J_3 + 1),
            Fun_7_loop(A_2, B_2, I_9, J_4, M_2, N, P, Res_3, Row_4);
        _ -> {A_2, B_2, I_9, J_3, M_2, N, P, Res_3, Row_3}
    end
end,
{A_2, B_2, I_9, J_4, M_2, N, P, Res_3, Row_4} = Fun_7(A_2, B_2, I_9, J_3, M_2, N, P, Res_3, Row_3),
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Row_4]),
            I_10 = (I_9 + 1),
            Fun_8_loop(A_2, B_2, I_10, M_2, N, P, Res_4);
        _ -> {A_2, B_2, I_9, M_2, N, P, Res_3}
    end
end,
{A_2, B_2, I_10, M_2, N, P, Res_4} = Fun_8(A_2, B_2, I_9, M_2, N, P, Res_3),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

matvec(A_3, B_3) ->
    try
        Res_5 = [],
        I_11 = 0,
        Fun_9 = fun Fun_9_loop(A_3, B_3, I_11, Res_5) ->
    case (I_11 < erlang:length(A_3)) of
        true ->
            Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [dot((case erlang:is_map(A_3) of true -> maps:get(I_11, A_3, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(A_3) + I_11 + 1, A_3); _ -> mochi_nth(I_11 + 1, A_3) end end), B_3)]),
            I_12 = (I_11 + 1),
            Fun_9_loop(A_3, B_3, I_12, Res_6);
        _ -> {A_3, B_3, I_11, Res_5}
    end
end,
{A_3, B_3, I_12, Res_6} = Fun_9(A_3, B_3, I_11, Res_5),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

identity(N_2) ->
    try
        Res_7 = [],
        I_13 = 0,
        Fun_11 = fun Fun_11_loop(I_13, N_2, Res_7) ->
    case (I_13 < N_2) of
        true ->
            Row_5 = [],
            J_5 = 0,
            Fun_10 = fun Fun_10_loop(I_13, J_5, N_2, Res_7, Row_5) ->
    case (J_5 < N_2) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [(case (I_13 == J_5) of
    true -> 1.0;
    _ -> 0.0
end)]),
            J_6 = (J_5 + 1),
            Fun_10_loop(I_13, J_6, N_2, Res_7, Row_6);
        _ -> {I_13, J_5, N_2, Res_7, Row_5}
    end
end,
{I_13, J_6, N_2, Res_7, Row_6} = Fun_10(I_13, J_5, N_2, Res_7, Row_5),
            Res_8 = lists:append((case Res_7 of nil -> []; _ -> Res_7 end), [Row_6]),
            I_14 = (I_13 + 1),
            Fun_11_loop(I_14, N_2, Res_8);
        _ -> {I_13, N_2, Res_7}
    end
end,
{I_14, N_2, Res_8} = Fun_11(I_13, N_2, Res_7),
        Res_8
    catch {return, RetCatch} -> RetCatch end.

invert(Mat) ->
    try
        N_3 = erlang:length(Mat),
        A_4 = Mat,
        Inv = identity(N_3),
        I_15 = 0,
        Fun_16 = fun Fun_16_loop(A_4, I_15, Inv, Mat, N_3) ->
    case (I_15 < N_3) of
        true ->
            Pivot = (case erlang:is_map((case erlang:is_map(A_4) of true -> maps:get(I_15, A_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_4) + I_15 + 1, A_4); _ -> mochi_nth(I_15 + 1, A_4) end end)) of true -> maps:get(I_15, (case erlang:is_map(A_4) of true -> maps:get(I_15, A_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_4) + I_15 + 1, A_4); _ -> mochi_nth(I_15 + 1, A_4) end end), nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_4) of true -> maps:get(I_15, A_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_4) + I_15 + 1, A_4); _ -> mochi_nth(I_15 + 1, A_4) end end)) + I_15 + 1, (case erlang:is_map(A_4) of true -> maps:get(I_15, A_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_4) + I_15 + 1, A_4); _ -> mochi_nth(I_15 + 1, A_4) end end)); _ -> mochi_nth(I_15 + 1, (case erlang:is_map(A_4) of true -> maps:get(I_15, A_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_4) + I_15 + 1, A_4); _ -> mochi_nth(I_15 + 1, A_4) end end)) end end),
            J_7 = 0,
            Fun_12 = fun Fun_12_loop(A_4, I_15, Inv, J_7, Mat, N_3, Pivot) ->
    case (J_7 < N_3) of
        true ->
            A_5 = lists:sublist(A_4, I_15) ++ [lists:sublist(lists:nth(I_15 + 1, A_4), J_7) ++ [mochi_safe_div((case erlang:is_map((case erlang:is_map(A_4) of true -> maps:get(I_15, A_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_4) + I_15 + 1, A_4); _ -> mochi_nth(I_15 + 1, A_4) end end)) of true -> maps:get(J_7, (case erlang:is_map(A_4) of true -> maps:get(I_15, A_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_4) + I_15 + 1, A_4); _ -> mochi_nth(I_15 + 1, A_4) end end), nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_4) of true -> maps:get(I_15, A_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_4) + I_15 + 1, A_4); _ -> mochi_nth(I_15 + 1, A_4) end end)) + J_7 + 1, (case erlang:is_map(A_4) of true -> maps:get(I_15, A_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_4) + I_15 + 1, A_4); _ -> mochi_nth(I_15 + 1, A_4) end end)); _ -> mochi_nth(J_7 + 1, (case erlang:is_map(A_4) of true -> maps:get(I_15, A_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_4) + I_15 + 1, A_4); _ -> mochi_nth(I_15 + 1, A_4) end end)) end end), Pivot)] ++ lists:nthtail(J_7 + 1, lists:nth(I_15 + 1, A_4))] ++ lists:nthtail(I_15 + 1, A_4),
            Inv_2 = lists:sublist(Inv, I_15) ++ [lists:sublist(lists:nth(I_15 + 1, Inv), J_7) ++ [mochi_safe_div((case erlang:is_map((case erlang:is_map(Inv) of true -> maps:get(I_15, Inv, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Inv) + I_15 + 1, Inv); _ -> mochi_nth(I_15 + 1, Inv) end end)) of true -> maps:get(J_7, (case erlang:is_map(Inv) of true -> maps:get(I_15, Inv, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Inv) + I_15 + 1, Inv); _ -> mochi_nth(I_15 + 1, Inv) end end), nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Inv) of true -> maps:get(I_15, Inv, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Inv) + I_15 + 1, Inv); _ -> mochi_nth(I_15 + 1, Inv) end end)) + J_7 + 1, (case erlang:is_map(Inv) of true -> maps:get(I_15, Inv, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Inv) + I_15 + 1, Inv); _ -> mochi_nth(I_15 + 1, Inv) end end)); _ -> mochi_nth(J_7 + 1, (case erlang:is_map(Inv) of true -> maps:get(I_15, Inv, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Inv) + I_15 + 1, Inv); _ -> mochi_nth(I_15 + 1, Inv) end end)) end end), Pivot)] ++ lists:nthtail(J_7 + 1, lists:nth(I_15 + 1, Inv))] ++ lists:nthtail(I_15 + 1, Inv),
            J_8 = (J_7 + 1),
            Fun_12_loop(A_5, I_15, Inv_2, J_8, Mat, N_3, Pivot);
        _ -> {A_4, I_15, Inv, J_7, Mat, N_3, Pivot}
    end
end,
{A_5, I_15, Inv_2, J_8, Mat, N_3, Pivot} = Fun_12(A_4, I_15, Inv, J_7, Mat, N_3, Pivot),
            K_3 = 0,
            Fun_15 = fun Fun_15_loop(A_5, I_15, Inv_2, J_8, K_3, Mat, N_3, Pivot) ->
    case (K_3 < N_3) of
        true ->
            case (K_3 /= I_15) of
        true -> Factor = (case erlang:is_map((case erlang:is_map(A_5) of true -> maps:get(K_3, A_5, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(A_5) + K_3 + 1, A_5); _ -> mochi_nth(K_3 + 1, A_5) end end)) of true -> maps:get(I_15, (case erlang:is_map(A_5) of true -> maps:get(K_3, A_5, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(A_5) + K_3 + 1, A_5); _ -> mochi_nth(K_3 + 1, A_5) end end), nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_5) of true -> maps:get(K_3, A_5, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(A_5) + K_3 + 1, A_5); _ -> mochi_nth(K_3 + 1, A_5) end end)) + I_15 + 1, (case erlang:is_map(A_5) of true -> maps:get(K_3, A_5, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(A_5) + K_3 + 1, A_5); _ -> mochi_nth(K_3 + 1, A_5) end end)); _ -> mochi_nth(I_15 + 1, (case erlang:is_map(A_5) of true -> maps:get(K_3, A_5, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(A_5) + K_3 + 1, A_5); _ -> mochi_nth(K_3 + 1, A_5) end end)) end end),
            J_9 = 0,
            Fun_13 = fun Fun_13_loop(A_5, Factor, I_15, Inv_2, J_9, K_3, Mat, N_3, Pivot) ->
    case (J_9 < N_3) of
        true ->
            A_6 = lists:sublist(A_5, K_3) ++ [lists:sublist(lists:nth(K_3 + 1, A_5), J_9) ++ [((case erlang:is_map((case erlang:is_map(A_5) of true -> maps:get(K_3, A_5, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(A_5) + K_3 + 1, A_5); _ -> mochi_nth(K_3 + 1, A_5) end end)) of true -> maps:get(J_9, (case erlang:is_map(A_5) of true -> maps:get(K_3, A_5, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(A_5) + K_3 + 1, A_5); _ -> mochi_nth(K_3 + 1, A_5) end end), nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_5) of true -> maps:get(K_3, A_5, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(A_5) + K_3 + 1, A_5); _ -> mochi_nth(K_3 + 1, A_5) end end)) + J_9 + 1, (case erlang:is_map(A_5) of true -> maps:get(K_3, A_5, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(A_5) + K_3 + 1, A_5); _ -> mochi_nth(K_3 + 1, A_5) end end)); _ -> mochi_nth(J_9 + 1, (case erlang:is_map(A_5) of true -> maps:get(K_3, A_5, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(A_5) + K_3 + 1, A_5); _ -> mochi_nth(K_3 + 1, A_5) end end)) end end) - mochi_safe_mul(Factor, (case erlang:is_map((case erlang:is_map(A_5) of true -> maps:get(I_15, A_5, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_5) + I_15 + 1, A_5); _ -> mochi_nth(I_15 + 1, A_5) end end)) of true -> maps:get(J_9, (case erlang:is_map(A_5) of true -> maps:get(I_15, A_5, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_5) + I_15 + 1, A_5); _ -> mochi_nth(I_15 + 1, A_5) end end), nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_5) of true -> maps:get(I_15, A_5, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_5) + I_15 + 1, A_5); _ -> mochi_nth(I_15 + 1, A_5) end end)) + J_9 + 1, (case erlang:is_map(A_5) of true -> maps:get(I_15, A_5, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_5) + I_15 + 1, A_5); _ -> mochi_nth(I_15 + 1, A_5) end end)); _ -> mochi_nth(J_9 + 1, (case erlang:is_map(A_5) of true -> maps:get(I_15, A_5, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_5) + I_15 + 1, A_5); _ -> mochi_nth(I_15 + 1, A_5) end end)) end end)))] ++ lists:nthtail(J_9 + 1, lists:nth(K_3 + 1, A_5))] ++ lists:nthtail(K_3 + 1, A_5),
            Inv_3 = lists:sublist(Inv_2, K_3) ++ [lists:sublist(lists:nth(K_3 + 1, Inv_2), J_9) ++ [((case erlang:is_map((case erlang:is_map(Inv_2) of true -> maps:get(K_3, Inv_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Inv_2) + K_3 + 1, Inv_2); _ -> mochi_nth(K_3 + 1, Inv_2) end end)) of true -> maps:get(J_9, (case erlang:is_map(Inv_2) of true -> maps:get(K_3, Inv_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Inv_2) + K_3 + 1, Inv_2); _ -> mochi_nth(K_3 + 1, Inv_2) end end), nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Inv_2) of true -> maps:get(K_3, Inv_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Inv_2) + K_3 + 1, Inv_2); _ -> mochi_nth(K_3 + 1, Inv_2) end end)) + J_9 + 1, (case erlang:is_map(Inv_2) of true -> maps:get(K_3, Inv_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Inv_2) + K_3 + 1, Inv_2); _ -> mochi_nth(K_3 + 1, Inv_2) end end)); _ -> mochi_nth(J_9 + 1, (case erlang:is_map(Inv_2) of true -> maps:get(K_3, Inv_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Inv_2) + K_3 + 1, Inv_2); _ -> mochi_nth(K_3 + 1, Inv_2) end end)) end end) - mochi_safe_mul(Factor, (case erlang:is_map((case erlang:is_map(Inv_2) of true -> maps:get(I_15, Inv_2, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Inv_2) + I_15 + 1, Inv_2); _ -> mochi_nth(I_15 + 1, Inv_2) end end)) of true -> maps:get(J_9, (case erlang:is_map(Inv_2) of true -> maps:get(I_15, Inv_2, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Inv_2) + I_15 + 1, Inv_2); _ -> mochi_nth(I_15 + 1, Inv_2) end end), nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Inv_2) of true -> maps:get(I_15, Inv_2, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Inv_2) + I_15 + 1, Inv_2); _ -> mochi_nth(I_15 + 1, Inv_2) end end)) + J_9 + 1, (case erlang:is_map(Inv_2) of true -> maps:get(I_15, Inv_2, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Inv_2) + I_15 + 1, Inv_2); _ -> mochi_nth(I_15 + 1, Inv_2) end end)); _ -> mochi_nth(J_9 + 1, (case erlang:is_map(Inv_2) of true -> maps:get(I_15, Inv_2, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Inv_2) + I_15 + 1, Inv_2); _ -> mochi_nth(I_15 + 1, Inv_2) end end)) end end)))] ++ lists:nthtail(J_9 + 1, lists:nth(K_3 + 1, Inv_2))] ++ lists:nthtail(K_3 + 1, Inv_2),
            J_10 = (J_9 + 1),
            Fun_13_loop(A_6, Factor, I_15, Inv_3, J_10, K_3, Mat, N_3, Pivot);
        _ -> {A_5, Factor, I_15, Inv_2, J_9, K_3, Mat, N_3, Pivot}
    end
end,
{A_6, Factor, I_15, Inv_3, J_10, K_3, Mat, N_3, Pivot} = Fun_13(A_5, Factor, I_15, Inv_2, J_9, K_3, Mat, N_3, Pivot),
            A_7 = A_6,
            Factor_2 = Factor,
            Fun_14 = Fun_13,
            Inv_4 = Inv_3,
            J_11 = J_10;
        _ -> A_7 = A_5,
            Factor_2 = nil,
            Fun_14 = Fun_12,
            Inv_4 = Inv_2,
            J_11 = J_8
    end,
            K_4 = (K_3 + 1),
            Fun_15_loop(A_7, I_15, Inv_4, J_11, K_4, Mat, N_3, Pivot);
        _ -> {A_5, I_15, Inv_2, J_8, K_3, Mat, N_3, Pivot}
    end
end,
{A_7, I_15, Inv_4, J_11, K_4, Mat, N_3, Pivot} = Fun_15(A_5, I_15, Inv_2, J_8, K_3, Mat, N_3, Pivot),
            I_16 = (I_15 + 1),
            Fun_16_loop(A_7, I_16, Inv_4, Mat, N_3);
        _ -> {A_4, I_15, Inv, Mat, N_3}
    end
end,
{A_7, I_16, Inv_4, Mat, N_3} = Fun_16(A_4, I_15, Inv, Mat, N_3),
        Inv_4
    catch {return, RetCatch} -> RetCatch end.

normal_equation(X, Y) ->
    try
        Xt = transpose(X),
        XtX = matmul(Xt, X),
        XtX_inv = invert(XtX),
        Xty = matvec(Xt, Y),
        matvec(XtX_inv, Xty)
    catch {return, RetCatch} -> RetCatch end.

linear_regression_prediction(Train_dt, Train_usr, Train_mtch, Test_dt, Test_mtch) ->
    try
        X_2 = [],
        I_17 = 0,
        Fun_17 = fun Fun_17_loop(X_2, I_17, Test_dt, Test_mtch, Train_dt, Train_mtch, Train_usr) ->
    case (I_17 < erlang:length(Train_dt)) of
        true ->
            X_3 = lists:append((case X_2 of nil -> []; _ -> X_2 end), [[1.0, (case erlang:is_map(Train_dt) of true -> maps:get(I_17, Train_dt, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(Train_dt) + I_17 + 1, Train_dt); _ -> mochi_nth(I_17 + 1, Train_dt) end end), (case erlang:is_map(Train_mtch) of true -> maps:get(I_17, Train_mtch, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(Train_mtch) + I_17 + 1, Train_mtch); _ -> mochi_nth(I_17 + 1, Train_mtch) end end)]]),
            I_18 = (I_17 + 1),
            Fun_17_loop(X_3, I_18, Test_dt, Test_mtch, Train_dt, Train_mtch, Train_usr);
        _ -> {X_2, I_17, Test_dt, Test_mtch, Train_dt, Train_mtch, Train_usr}
    end
end,
{X_3, I_18, Test_dt, Test_mtch, Train_dt, Train_mtch, Train_usr} = Fun_17(X_2, I_17, Test_dt, Test_mtch, Train_dt, Train_mtch, Train_usr),
        Beta = normal_equation(X_3, Train_usr),
        abs_float((((case erlang:is_map(Beta) of true -> maps:get(0, Beta, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Beta) + 0 + 1, Beta); _ -> mochi_nth(0 + 1, Beta) end end) + mochi_safe_mul((case erlang:is_map(Test_dt) of true -> maps:get(0, Test_dt, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Test_dt) + 0 + 1, Test_dt); _ -> mochi_nth(0 + 1, Test_dt) end end), (case erlang:is_map(Beta) of true -> maps:get(1, Beta, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Beta) + 1 + 1, Beta); _ -> mochi_nth(1 + 1, Beta) end end))) + mochi_safe_mul((case erlang:is_map(Test_mtch) of true -> maps:get(0, Test_mtch, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Test_mtch) + 0 + 1, Test_mtch); _ -> mochi_nth(0 + 1, Test_mtch) end end), (case erlang:is_map(Beta) of true -> maps:get(2, Beta, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Beta) + 2 + 1, Beta); _ -> mochi_nth(2 + 1, Beta) end end))))
    catch {return, RetCatch} -> RetCatch end.

sarimax_predictor(Train_user, Train_match, Test_match) ->
    try
        N_4 = erlang:length(Train_user),
        X_4 = [],
        Y_2 = [],
        I_19 = 1,
        Fun_18 = fun Fun_18_loop(X_4, I_19, N_4, Test_match, Train_match, Train_user, Y_2) ->
    case (I_19 < N_4) of
        true ->
            X_5 = lists:append((case X_4 of nil -> []; _ -> X_4 end), [[1.0, (case erlang:is_map(Train_user) of true -> maps:get((I_19 - 1), Train_user, nil); _ -> case (I_19 - 1) < 0 of true -> mochi_nth(erlang:length(Train_user) + (I_19 - 1) + 1, Train_user); _ -> mochi_nth((I_19 - 1) + 1, Train_user) end end), (case erlang:is_map(Train_match) of true -> maps:get(I_19, Train_match, nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(Train_match) + I_19 + 1, Train_match); _ -> mochi_nth(I_19 + 1, Train_match) end end)]]),
            Y_3 = lists:append((case Y_2 of nil -> []; _ -> Y_2 end), [(case erlang:is_map(Train_user) of true -> maps:get(I_19, Train_user, nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(Train_user) + I_19 + 1, Train_user); _ -> mochi_nth(I_19 + 1, Train_user) end end)]),
            I_20 = (I_19 + 1),
            Fun_18_loop(X_5, I_20, N_4, Test_match, Train_match, Train_user, Y_3);
        _ -> {X_4, I_19, N_4, Test_match, Train_match, Train_user, Y_2}
    end
end,
{X_5, I_20, N_4, Test_match, Train_match, Train_user, Y_3} = Fun_18(X_4, I_19, N_4, Test_match, Train_match, Train_user, Y_2),
        Beta_2 = normal_equation(X_5, Y_3),
        (((case erlang:is_map(Beta_2) of true -> maps:get(0, Beta_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Beta_2) + 0 + 1, Beta_2); _ -> mochi_nth(0 + 1, Beta_2) end end) + mochi_safe_mul((case erlang:is_map(Beta_2) of true -> maps:get(1, Beta_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Beta_2) + 1 + 1, Beta_2); _ -> mochi_nth(1 + 1, Beta_2) end end), (case erlang:is_map(Train_user) of true -> maps:get((N_4 - 1), Train_user, nil); _ -> case (N_4 - 1) < 0 of true -> mochi_nth(erlang:length(Train_user) + (N_4 - 1) + 1, Train_user); _ -> mochi_nth((N_4 - 1) + 1, Train_user) end end))) + mochi_safe_mul((case erlang:is_map(Beta_2) of true -> maps:get(2, Beta_2, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Beta_2) + 2 + 1, Beta_2); _ -> mochi_nth(2 + 1, Beta_2) end end), (case erlang:is_map(Test_match) of true -> maps:get(0, Test_match, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Test_match) + 0 + 1, Test_match); _ -> mochi_nth(0 + 1, Test_match) end end)))
    catch {return, RetCatch} -> RetCatch end.

rbf_kernel(A_8, B_4, Gamma) ->
    try
        Sum_3 = 0.0,
        I_21 = 0,
        Fun_19 = fun Fun_19_loop(A_8, B_4, Gamma, I_21, Sum_3) ->
    case (I_21 < erlang:length(A_8)) of
        true ->
            Diff = ((case erlang:is_map(A_8) of true -> maps:get(I_21, A_8, nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(A_8) + I_21 + 1, A_8); _ -> mochi_nth(I_21 + 1, A_8) end end) - (case erlang:is_map(B_4) of true -> maps:get(I_21, B_4, nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(B_4) + I_21 + 1, B_4); _ -> mochi_nth(I_21 + 1, B_4) end end)),
            Sum_4 = (Sum_3 + mochi_safe_mul(Diff, Diff)),
            I_22 = (I_21 + 1),
            Fun_19_loop(A_8, B_4, Gamma, I_22, Sum_4);
        _ -> {A_8, B_4, Gamma, I_21, Sum_3}
    end
end,
{A_8, B_4, Gamma, I_22, Sum_4} = Fun_19(A_8, B_4, Gamma, I_21, Sum_3),
        exp_approx(mochi_safe_mul(-Gamma, Sum_4))
    catch {return, RetCatch} -> RetCatch end.

support_vector_regressor(X_train, X_test, Train_user_2) ->
    try
        Gamma_2 = 0.1,
        Weights = [],
        I_23 = 0,
        Fun_20 = fun Fun_20_loop(Gamma_2, I_23, Train_user_2, Weights, X_test, X_train) ->
    case (I_23 < erlang:length(X_train)) of
        true ->
            Weights_2 = lists:append((case Weights of nil -> []; _ -> Weights end), [rbf_kernel((case erlang:is_map(X_train) of true -> maps:get(I_23, X_train, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(X_train) + I_23 + 1, X_train); _ -> mochi_nth(I_23 + 1, X_train) end end), (case erlang:is_map(X_test) of true -> maps:get(0, X_test, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(X_test) + 0 + 1, X_test); _ -> mochi_nth(0 + 1, X_test) end end), Gamma_2)]),
            I_24 = (I_23 + 1),
            Fun_20_loop(Gamma_2, I_24, Train_user_2, Weights_2, X_test, X_train);
        _ -> {Gamma_2, I_23, Train_user_2, Weights, X_test, X_train}
    end
end,
{Gamma_2, I_24, Train_user_2, Weights_2, X_test, X_train} = Fun_20(Gamma_2, I_23, Train_user_2, Weights, X_test, X_train),
        Num = 0.0,
        Den = 0.0,
        I_25 = 0,
        Fun_21 = fun Fun_21_loop(Den, Gamma_2, I_25, Num, Train_user_2, Weights_2, X_test, X_train) ->
    case (I_25 < erlang:length(Train_user_2)) of
        true ->
            Num_2 = (Num + mochi_safe_mul((case erlang:is_map(Weights_2) of true -> maps:get(I_25, Weights_2, nil); _ -> case I_25 < 0 of true -> mochi_nth(erlang:length(Weights_2) + I_25 + 1, Weights_2); _ -> mochi_nth(I_25 + 1, Weights_2) end end), (case erlang:is_map(Train_user_2) of true -> maps:get(I_25, Train_user_2, nil); _ -> case I_25 < 0 of true -> mochi_nth(erlang:length(Train_user_2) + I_25 + 1, Train_user_2); _ -> mochi_nth(I_25 + 1, Train_user_2) end end))),
            Den_2 = (Den + (case erlang:is_map(Weights_2) of true -> maps:get(I_25, Weights_2, nil); _ -> case I_25 < 0 of true -> mochi_nth(erlang:length(Weights_2) + I_25 + 1, Weights_2); _ -> mochi_nth(I_25 + 1, Weights_2) end end)),
            I_26 = (I_25 + 1),
            Fun_21_loop(Den_2, Gamma_2, I_26, Num_2, Train_user_2, Weights_2, X_test, X_train);
        _ -> {Den, Gamma_2, I_25, Num, Train_user_2, Weights_2, X_test, X_train}
    end
end,
{Den_2, Gamma_2, I_26, Num_2, Train_user_2, Weights_2, X_test, X_train} = Fun_21(Den, Gamma_2, I_25, Num, Train_user_2, Weights_2, X_test, X_train),
        mochi_safe_div(Num_2, Den_2)
    catch {return, RetCatch} -> RetCatch end.

set_at_float(Xs, Idx, Value) ->
    try
        I_27 = 0,
        Res_9 = [],
        Fun_22 = fun Fun_22_loop(I_27, Idx, Res_9, Value, Xs) ->
    case (I_27 < erlang:length(Xs)) of
        true ->
            case (I_27 == Idx) of
        true -> Res_10 = lists:append((case Res_9 of nil -> []; _ -> Res_9 end), [Value]),
            Res_12 = Res_10;
        _ -> Res_11 = lists:append((case Res_9 of nil -> []; _ -> Res_9 end), [(case erlang:is_map(Xs) of true -> maps:get(I_27, Xs, nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(Xs) + I_27 + 1, Xs); _ -> mochi_nth(I_27 + 1, Xs) end end)]),
            Res_12 = Res_11
    end,
            I_28 = (I_27 + 1),
            Fun_22_loop(I_28, Idx, Res_12, Value, Xs);
        _ -> {I_27, Idx, Res_9, Value, Xs}
    end
end,
{I_28, Idx, Res_12, Value, Xs} = Fun_22(I_27, Idx, Res_9, Value, Xs),
        Res_12
    catch {return, RetCatch} -> RetCatch end.

sort_float(Xs_2) ->
    try
        Res_13 = Xs_2,
        I_29 = 1,
        Fun_24 = fun Fun_24_loop(I_29, Res_13, Xs_2) ->
    case (I_29 < erlang:length(Res_13)) of
        true ->
            Key = (case erlang:is_map(Res_13) of true -> maps:get(I_29, Res_13, nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(Res_13) + I_29 + 1, Res_13); _ -> mochi_nth(I_29 + 1, Res_13) end end),
            J_12 = (I_29 - 1),
            Fun_23 = fun Fun_23_loop(I_29, J_12, Key, Res_13, Xs_2) ->
    case ((J_12 >= 0) andalso ((case erlang:is_map(Res_13) of true -> maps:get(J_12, Res_13, nil); _ -> case J_12 < 0 of true -> mochi_nth(erlang:length(Res_13) + J_12 + 1, Res_13); _ -> mochi_nth(J_12 + 1, Res_13) end end) > Key)) of
        true ->
            Res_14 = set_at_float(Res_13, (J_12 + 1), (case erlang:is_map(Res_13) of true -> maps:get(J_12, Res_13, nil); _ -> case J_12 < 0 of true -> mochi_nth(erlang:length(Res_13) + J_12 + 1, Res_13); _ -> mochi_nth(J_12 + 1, Res_13) end end)),
            J_13 = (J_12 - 1),
            Fun_23_loop(I_29, J_13, Key, Res_14, Xs_2);
        _ -> {I_29, J_12, Key, Res_13, Xs_2}
    end
end,
{I_29, J_13, Key, Res_14, Xs_2} = Fun_23(I_29, J_12, Key, Res_13, Xs_2),
            Res_15 = set_at_float(Res_14, (J_13 + 1), Key),
            I_30 = (I_29 + 1),
            Fun_24_loop(I_30, Res_15, Xs_2);
        _ -> {I_29, Res_13, Xs_2}
    end
end,
{I_30, Res_15, Xs_2} = Fun_24(I_29, Res_13, Xs_2),
        Res_15
    catch {return, RetCatch} -> RetCatch end.

percentile(Data, Q) ->
    try
        Sorted = sort_float(Data),
        N_5 = erlang:length(Sorted),
        Pos = mochi_safe_mul(mochi_safe_div(Q, 100.0), int_to_float((N_5 - 1))),
        Idx_2 = floor_int(Pos),
        Frac = (Pos - int_to_float(Idx_2)),
        case ((Idx_2 + 1) < N_5) of
        true -> throw({return, (mochi_safe_mul((case erlang:is_map(Sorted) of true -> maps:get(Idx_2, Sorted, nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(Sorted) + Idx_2 + 1, Sorted); _ -> mochi_nth(Idx_2 + 1, Sorted) end end), (1.0 - Frac)) + mochi_safe_mul((case erlang:is_map(Sorted) of true -> maps:get((Idx_2 + 1), Sorted, nil); _ -> case (Idx_2 + 1) < 0 of true -> mochi_nth(erlang:length(Sorted) + (Idx_2 + 1) + 1, Sorted); _ -> mochi_nth((Idx_2 + 1) + 1, Sorted) end end), Frac))});
        _ -> ok
    end,
        (case erlang:is_map(Sorted) of true -> maps:get(Idx_2, Sorted, nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(Sorted) + Idx_2 + 1, Sorted); _ -> mochi_nth(Idx_2 + 1, Sorted) end end)
    catch {return, RetCatch} -> RetCatch end.

interquartile_range_checker(Train_user_3) ->
    try
        Q1 = percentile(Train_user_3, 25.0),
        Q3 = percentile(Train_user_3, 75.0),
        Iqr = (Q3 - Q1),
        (Q1 - mochi_safe_mul(Iqr, 0.1))
    catch {return, RetCatch} -> RetCatch end.

data_safety_checker(List_vote, Actual_result) ->
    try
        Safe = 0,
        Not_safe = 0,
        I_31 = 0,
        Fun_25 = fun Fun_25_loop(Actual_result, I_31, List_vote, Not_safe, Safe) ->
    case (I_31 < erlang:length(List_vote)) of
        true ->
            V = (case erlang:is_map(List_vote) of true -> maps:get(I_31, List_vote, nil); _ -> case I_31 < 0 of true -> mochi_nth(erlang:length(List_vote) + I_31 + 1, List_vote); _ -> mochi_nth(I_31 + 1, List_vote) end end),
            case (V > Actual_result) of
        true -> Safe_2 = (Not_safe + 1),
            Not_safe_4 = Not_safe,
            Safe_5 = Safe_2;
        _ -> case (abs_float((abs_float(V) - abs_float(Actual_result))) =< 0.1) of
        true -> Safe_3 = (Safe + 1),
            Not_safe_3 = Not_safe,
            Safe_4 = Safe_3;
        _ -> Not_safe_2 = (Not_safe + 1),
            Not_safe_3 = Not_safe_2,
            Safe_4 = Safe
    end,
            Not_safe_4 = Not_safe_3,
            Safe_5 = Safe_4
    end,
            I_32 = (I_31 + 1),
            Fun_25_loop(Actual_result, I_32, List_vote, Not_safe_4, Safe_5);
        _ -> {Actual_result, I_31, List_vote, Not_safe, Safe}
    end
end,
{Actual_result, I_32, List_vote, Not_safe_4, Safe_5} = Fun_25(Actual_result, I_31, List_vote, Not_safe, Safe),
        (Safe_5 > Not_safe_4)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Vote = [linear_regression_prediction([2.0, 3.0, 4.0, 5.0], [5.0, 3.0, 4.0, 6.0], [3.0, 1.0, 2.0, 4.0], [2.0], [2.0]), sarimax_predictor([4.0, 2.0, 6.0, 8.0], [3.0, 1.0, 2.0, 4.0], [2.0]), support_vector_regressor([[5.0, 2.0], [1.0, 5.0], [6.0, 2.0]], [[3.0, 2.0]], [2.0, 1.0, 4.0])],
        io:format("~ts~n", [mochi_repr((case erlang:is_map(Vote) of true -> maps:get(0, Vote, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Vote) + 0 + 1, Vote); _ -> mochi_nth(0 + 1, Vote) end end))]),
        io:format("~ts~n", [mochi_repr((case erlang:is_map(Vote) of true -> maps:get(1, Vote, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Vote) + 1 + 1, Vote); _ -> mochi_nth(1 + 1, Vote) end end))]),
        io:format("~ts~n", [mochi_repr((case erlang:is_map(Vote) of true -> maps:get(2, Vote, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Vote) + 2 + 1, Vote); _ -> mochi_nth(2 + 1, Vote) end end))]),
        io:format("~ts~n", [mochi_repr(data_safety_checker(Vote, 5.0))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
