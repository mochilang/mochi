#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, absf/1, sqrtapprox/1, ln_series/1, ln/1, mae/2, mse/2, rmse/2, rmsle/2, mbd/2, manual_accuracy/2, main/0]).

% Generated by Mochi transpiler v0.10.66 (fa2dc5e881)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

absf(X) ->
    try
        (case (X < 0.0) of
    true -> (0.0 - X);
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

sqrtapprox(X_2) ->
    try
        case (X_2 =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X_2,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_2, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

ln_series(X_3) ->
    try
        T = mochi_safe_div((X_3 - 1.0), (X_3 + 1.0)),
        Term = T,
        Sum = 0.0,
        N = 1,
        Fun_2 = fun Fun_2_loop(N, Sum, T, Term, X_3) ->
    case (N =< 19) of
        true ->
            Sum_2 = (Sum + mochi_safe_div(Term, float(N))),
            Term_2 = mochi_safe_mul(mochi_safe_mul(Term, T), T),
            N_2 = (N + 2),
            Fun_2_loop(N_2, Sum_2, T, Term_2, X_3);
        _ -> {N, Sum, T, Term, X_3}
    end
end,
{N_2, Sum_2, T, Term_2, X_3} = Fun_2(N, Sum, T, Term, X_3),
        mochi_safe_mul(2.0, Sum_2)
    catch {return, RetCatch} -> RetCatch end.

ln(X_4) ->
    try
        Y = X_4,
        K = 0,
        Fun_3 = fun Fun_3_loop(K, X_4, Y) ->
    case (Y >= 10.0) of
        true ->
            Y_2 = mochi_safe_div(Y, 10.0),
            K_2 = (K + 1),
            Fun_3_loop(K_2, X_4, Y_2);
        _ -> {K, X_4, Y}
    end
end,
{K_2, X_4, Y_2} = Fun_3(K, X_4, Y),
        Fun_4 = fun Fun_4_loop(K_2, X_4, Y_2) ->
    case (Y_2 < 1.0) of
        true ->
            Y_3 = mochi_safe_mul(Y_2, 10.0),
            K_3 = (K_2 - 1),
            Fun_4_loop(K_3, X_4, Y_3);
        _ -> {K_2, X_4, Y_2}
    end
end,
{K_3, X_4, Y_3} = Fun_4(K_2, X_4, Y_2),
        (ln_series(Y_3) + mochi_safe_mul(float(K_3), ln_series(10.0)))
    catch {return, RetCatch} -> RetCatch end.

mae(Predict, Actual) ->
    try
        Sum_3 = 0.0,
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(Actual, I_3, Predict, Sum_3) ->
    case (I_3 < erlang:length(Predict)) of
        true ->
            Diff = ((case erlang:is_map(Predict) of true -> maps:get(I_3, Predict, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Predict) + I_3 + 1, Predict); _ -> mochi_nth(I_3 + 1, Predict) end end) - (case erlang:is_map(Actual) of true -> maps:get(I_3, Actual, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Actual) + I_3 + 1, Actual); _ -> mochi_nth(I_3 + 1, Actual) end end)),
            Sum_4 = (Sum_3 + absf(Diff)),
            I_4 = (I_3 + 1),
            Fun_5_loop(Actual, I_4, Predict, Sum_4);
        _ -> {Actual, I_3, Predict, Sum_3}
    end
end,
{Actual, I_4, Predict, Sum_4} = Fun_5(Actual, I_3, Predict, Sum_3),
        mochi_safe_div(Sum_4, float(erlang:length(Predict)))
    catch {return, RetCatch} -> RetCatch end.

mse(Predict_2, Actual_2) ->
    try
        Sum_5 = 0.0,
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(Actual_2, I_5, Predict_2, Sum_5) ->
    case (I_5 < erlang:length(Predict_2)) of
        true ->
            Diff_2 = ((case erlang:is_map(Predict_2) of true -> maps:get(I_5, Predict_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Predict_2) + I_5 + 1, Predict_2); _ -> mochi_nth(I_5 + 1, Predict_2) end end) - (case erlang:is_map(Actual_2) of true -> maps:get(I_5, Actual_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Actual_2) + I_5 + 1, Actual_2); _ -> mochi_nth(I_5 + 1, Actual_2) end end)),
            Sum_6 = (Sum_5 + mochi_safe_mul(Diff_2, Diff_2)),
            I_6 = (I_5 + 1),
            Fun_6_loop(Actual_2, I_6, Predict_2, Sum_6);
        _ -> {Actual_2, I_5, Predict_2, Sum_5}
    end
end,
{Actual_2, I_6, Predict_2, Sum_6} = Fun_6(Actual_2, I_5, Predict_2, Sum_5),
        mochi_safe_div(Sum_6, float(erlang:length(Predict_2)))
    catch {return, RetCatch} -> RetCatch end.

rmse(Predict_3, Actual_3) ->
    try
        sqrtapprox(mse(Predict_3, Actual_3))
    catch {return, RetCatch} -> RetCatch end.

rmsle(Predict_4, Actual_4) ->
    try
        Sum_7 = 0.0,
        I_7 = 0,
        Fun_7 = fun Fun_7_loop(Actual_4, I_7, Predict_4, Sum_7) ->
    case (I_7 < erlang:length(Predict_4)) of
        true ->
            Lp = ln(((case erlang:is_map(Predict_4) of true -> maps:get(I_7, Predict_4, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Predict_4) + I_7 + 1, Predict_4); _ -> mochi_nth(I_7 + 1, Predict_4) end end) + 1.0)),
            La = ln(((case erlang:is_map(Actual_4) of true -> maps:get(I_7, Actual_4, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Actual_4) + I_7 + 1, Actual_4); _ -> mochi_nth(I_7 + 1, Actual_4) end end) + 1.0)),
            Diff_3 = (Lp - La),
            Sum_8 = (Sum_7 + mochi_safe_mul(Diff_3, Diff_3)),
            I_8 = (I_7 + 1),
            Fun_7_loop(Actual_4, I_8, Predict_4, Sum_8);
        _ -> {Actual_4, I_7, Predict_4, Sum_7}
    end
end,
{Actual_4, I_8, Predict_4, Sum_8} = Fun_7(Actual_4, I_7, Predict_4, Sum_7),
        sqrtapprox(mochi_safe_div(Sum_8, float(erlang:length(Predict_4))))
    catch {return, RetCatch} -> RetCatch end.

mbd(Predict_5, Actual_5) ->
    try
        Diff_sum = 0.0,
        Actual_sum = 0.0,
        I_9 = 0,
        Fun_8 = fun Fun_8_loop(Actual_5, Actual_sum, Diff_sum, I_9, Predict_5) ->
    case (I_9 < erlang:length(Predict_5)) of
        true ->
            Diff_sum_2 = (Diff_sum + ((case erlang:is_map(Predict_5) of true -> maps:get(I_9, Predict_5, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Predict_5) + I_9 + 1, Predict_5); _ -> mochi_nth(I_9 + 1, Predict_5) end end) - (case erlang:is_map(Actual_5) of true -> maps:get(I_9, Actual_5, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Actual_5) + I_9 + 1, Actual_5); _ -> mochi_nth(I_9 + 1, Actual_5) end end))),
            Actual_sum_2 = (Actual_sum + (case erlang:is_map(Actual_5) of true -> maps:get(I_9, Actual_5, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Actual_5) + I_9 + 1, Actual_5); _ -> mochi_nth(I_9 + 1, Actual_5) end end)),
            I_10 = (I_9 + 1),
            Fun_8_loop(Actual_5, Actual_sum_2, Diff_sum_2, I_10, Predict_5);
        _ -> {Actual_5, Actual_sum, Diff_sum, I_9, Predict_5}
    end
end,
{Actual_5, Actual_sum_2, Diff_sum_2, I_10, Predict_5} = Fun_8(Actual_5, Actual_sum, Diff_sum, I_9, Predict_5),
        N_3 = float(erlang:length(Predict_5)),
        Numerator = mochi_safe_div(Diff_sum_2, N_3),
        Denominator = mochi_safe_div(Actual_sum_2, N_3),
        mochi_safe_mul(mochi_safe_div(Numerator, Denominator), 100.0)
    catch {return, RetCatch} -> RetCatch end.

manual_accuracy(Predict_6, Actual_6) ->
    try
        Correct = 0,
        I_11 = 0,
        Fun_9 = fun Fun_9_loop(Actual_6, Correct, I_11, Predict_6) ->
    case (I_11 < erlang:length(Predict_6)) of
        true ->
            case ((case erlang:is_map(Predict_6) of true -> maps:get(I_11, Predict_6, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Predict_6) + I_11 + 1, Predict_6); _ -> mochi_nth(I_11 + 1, Predict_6) end end) == (case erlang:is_map(Actual_6) of true -> maps:get(I_11, Actual_6, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Actual_6) + I_11 + 1, Actual_6); _ -> mochi_nth(I_11 + 1, Actual_6) end end)) of
        true -> Correct_2 = (Correct + 1),
            Correct_3 = Correct_2;
        _ -> Correct_3 = Correct
    end,
            I_12 = (I_11 + 1),
            Fun_9_loop(Actual_6, Correct_3, I_12, Predict_6);
        _ -> {Actual_6, Correct, I_11, Predict_6}
    end
end,
{Actual_6, Correct_3, I_12, Predict_6} = Fun_9(Actual_6, Correct, I_11, Predict_6),
        mochi_safe_div(float(Correct_3), float(erlang:length(Predict_6)))
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Actual_7 = [1.0, 2.0, 3.0],
        Predict_7 = [1.0, 4.0, 3.0],
        io:format("~ts~n", [mochi_str(mae(Predict_7, Actual_7))]),
        io:format("~ts~n", [mochi_str(mse(Predict_7, Actual_7))]),
        io:format("~ts~n", [mochi_str(rmse(Predict_7, Actual_7))]),
        io:format("~ts~n", [mochi_str(rmsle([10.0, 2.0, 30.0], [10.0, 10.0, 30.0]))]),
        io:format("~ts~n", [mochi_str(mbd([2.0, 3.0, 4.0], [1.0, 2.0, 3.0]))]),
        io:format("~ts~n", [mochi_str(mbd([0.0, 1.0, 1.0], [1.0, 2.0, 3.0]))]),
        io:format("~ts~n", [mochi_str(manual_accuracy(Predict_7, Actual_7))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
