#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrt/1, mean/1, standardize/1, covariance_matrix/1, normalize/1, eigen_decomposition_2x2/1, transpose/1, matrix_multiply/2, apply_pca/2]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

sqrt(X) ->
    try
        Guess = (case (X > 1.0) of
    true -> mochi_safe_div(X, 2.0);
    _ -> 1.0
end),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_mul(0.5, (Guess + mochi_safe_div(X, Guess))),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, Ret} -> Ret end.

mean(Xs) ->
    try
        Sum = 0.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Sum, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            Sum_2 = (Sum + (case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Sum_2, Xs);
        _ -> {I_3, Sum, Xs}
    end
end,
{I_4, Sum_2, Xs} = Fun_2(I_3, Sum, Xs),
        mochi_safe_div(Sum_2, erlang:length(Xs))
    catch {return, Ret} -> Ret end.

standardize(Data) ->
    try
        N_samples = erlang:length(Data),
        N_features = erlang:length((case erlang:is_map(Data) of true -> maps:get(0, Data, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Data) + 0 + 1, Data); _ -> mochi_nth(0 + 1, Data) end end)),
        Means = [],
        Stds = [],
        J = 0,
        Fun_5 = fun Fun_5_loop(Data, J, Means, N_features, N_samples, Stds) ->
    case (J < N_features) of
        true ->
            Column = [],
            I_5 = 0,
            Fun_3 = fun Fun_3_loop(Column, Data, I_5, J, Means, N_features, N_samples, Stds) ->
    case (I_5 < N_samples) of
        true ->
            Column_2 = lists:append((case Column of nil -> []; _ -> Column end), [(case erlang:is_map((case erlang:is_map(Data) of true -> maps:get(I_5, Data, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Data) + I_5 + 1, Data); _ -> mochi_nth(I_5 + 1, Data) end end)) of true -> maps:get(J, (case erlang:is_map(Data) of true -> maps:get(I_5, Data, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Data) + I_5 + 1, Data); _ -> mochi_nth(I_5 + 1, Data) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Data) of true -> maps:get(I_5, Data, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Data) + I_5 + 1, Data); _ -> mochi_nth(I_5 + 1, Data) end end)) + J + 1, (case erlang:is_map(Data) of true -> maps:get(I_5, Data, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Data) + I_5 + 1, Data); _ -> mochi_nth(I_5 + 1, Data) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Data) of true -> maps:get(I_5, Data, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Data) + I_5 + 1, Data); _ -> mochi_nth(I_5 + 1, Data) end end)) end end)]),
            I_6 = (I_5 + 1),
            Fun_3_loop(Column_2, Data, I_6, J, Means, N_features, N_samples, Stds);
        _ -> {Column, Data, I_5, J, Means, N_features, N_samples, Stds}
    end
end,
{Column_2, Data, I_6, J, Means, N_features, N_samples, Stds} = Fun_3(Column, Data, I_5, J, Means, N_features, N_samples, Stds),
            M = mean(Column_2),
            Means_2 = lists:append((case Means of nil -> []; _ -> Means end), [M]),
            Variance = 0.0,
            K = 0,
            Fun_4 = fun Fun_4_loop(Column_2, Data, I_6, J, K, M, Means_2, N_features, N_samples, Stds, Variance) ->
    case (K < N_samples) of
        true ->
            Diff = ((case erlang:is_map(Column_2) of true -> maps:get(K, Column_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Column_2) + K + 1, Column_2); _ -> mochi_nth(K + 1, Column_2) end end) - M),
            Variance_2 = (Variance + mochi_safe_mul(Diff, Diff)),
            K_2 = (K + 1),
            Fun_4_loop(Column_2, Data, I_6, J, K_2, M, Means_2, N_features, N_samples, Stds, Variance_2);
        _ -> {Column_2, Data, I_6, J, K, M, Means_2, N_features, N_samples, Stds, Variance}
    end
end,
{Column_2, Data, I_6, J, K_2, M, Means_2, N_features, N_samples, Stds, Variance_2} = Fun_4(Column_2, Data, I_6, J, K, M, Means_2, N_features, N_samples, Stds, Variance),
            Stds_2 = lists:append((case Stds of nil -> []; _ -> Stds end), [sqrt(mochi_safe_div(Variance_2, (N_samples - 1)))]),
            J_2 = (J + 1),
            Fun_5_loop(Data, J_2, Means_2, N_features, N_samples, Stds_2);
        _ -> {Data, J, Means, N_features, N_samples, Stds}
    end
end,
{Data, J_2, Means_2, N_features, N_samples, Stds_2} = Fun_5(Data, J, Means, N_features, N_samples, Stds),
        Standardized = [],
        R = 0,
        Fun_7 = fun Fun_7_loop(Data, J_2, Means_2, N_features, N_samples, R, Standardized, Stds_2) ->
    case (R < N_samples) of
        true ->
            Row = [],
            C = 0,
            Fun_6 = fun Fun_6_loop(C, Data, J_2, Means_2, N_features, N_samples, R, Row, Standardized, Stds_2) ->
    case (C < N_features) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [mochi_safe_div(((case erlang:is_map((case erlang:is_map(Data) of true -> maps:get(R, Data, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Data) + R + 1, Data); _ -> mochi_nth(R + 1, Data) end end)) of true -> maps:get(C, (case erlang:is_map(Data) of true -> maps:get(R, Data, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Data) + R + 1, Data); _ -> mochi_nth(R + 1, Data) end end), nil); _ -> case C < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Data) of true -> maps:get(R, Data, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Data) + R + 1, Data); _ -> mochi_nth(R + 1, Data) end end)) + C + 1, (case erlang:is_map(Data) of true -> maps:get(R, Data, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Data) + R + 1, Data); _ -> mochi_nth(R + 1, Data) end end)); _ -> mochi_nth(C + 1, (case erlang:is_map(Data) of true -> maps:get(R, Data, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Data) + R + 1, Data); _ -> mochi_nth(R + 1, Data) end end)) end end) - (case erlang:is_map(Means_2) of true -> maps:get(C, Means_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(Means_2) + C + 1, Means_2); _ -> mochi_nth(C + 1, Means_2) end end)), (case erlang:is_map(Stds_2) of true -> maps:get(C, Stds_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(Stds_2) + C + 1, Stds_2); _ -> mochi_nth(C + 1, Stds_2) end end))]),
            C_2 = (C + 1),
            Fun_6_loop(C_2, Data, J_2, Means_2, N_features, N_samples, R, Row_2, Standardized, Stds_2);
        _ -> {C, Data, J_2, Means_2, N_features, N_samples, R, Row, Standardized, Stds_2}
    end
end,
{C_2, Data, J_2, Means_2, N_features, N_samples, R, Row_2, Standardized, Stds_2} = Fun_6(C, Data, J_2, Means_2, N_features, N_samples, R, Row, Standardized, Stds_2),
            Standardized_2 = lists:append((case Standardized of nil -> []; _ -> Standardized end), [Row_2]),
            R_2 = (R + 1),
            Fun_7_loop(Data, J_2, Means_2, N_features, N_samples, R_2, Standardized_2, Stds_2);
        _ -> {Data, J_2, Means_2, N_features, N_samples, R, Standardized, Stds_2}
    end
end,
{Data, J_2, Means_2, N_features, N_samples, R_2, Standardized_2, Stds_2} = Fun_7(Data, J_2, Means_2, N_features, N_samples, R, Standardized, Stds_2),
        Standardized_2
    catch {return, Ret} -> Ret end.

covariance_matrix(Data_2) ->
    try
        N_samples_2 = erlang:length(Data_2),
        N_features_2 = erlang:length((case erlang:is_map(Data_2) of true -> maps:get(0, Data_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Data_2) + 0 + 1, Data_2); _ -> mochi_nth(0 + 1, Data_2) end end)),
        Cov = [],
        I_7 = 0,
        Fun_10 = fun Fun_10_loop(Cov, Data_2, I_7, N_features_2, N_samples_2) ->
    case (I_7 < N_features_2) of
        true ->
            Row_3 = [],
            J_3 = 0,
            Fun_9 = fun Fun_9_loop(Cov, Data_2, I_7, J_3, N_features_2, N_samples_2, Row_3) ->
    case (J_3 < N_features_2) of
        true ->
            Sum_3 = 0.0,
            K_3 = 0,
            Fun_8 = fun Fun_8_loop(Cov, Data_2, I_7, J_3, K_3, N_features_2, N_samples_2, Row_3, Sum_3) ->
    case (K_3 < N_samples_2) of
        true ->
            Sum_4 = (Sum_3 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(Data_2) of true -> maps:get(K_3, Data_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Data_2) + K_3 + 1, Data_2); _ -> mochi_nth(K_3 + 1, Data_2) end end)) of true -> maps:get(I_7, (case erlang:is_map(Data_2) of true -> maps:get(K_3, Data_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Data_2) + K_3 + 1, Data_2); _ -> mochi_nth(K_3 + 1, Data_2) end end), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Data_2) of true -> maps:get(K_3, Data_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Data_2) + K_3 + 1, Data_2); _ -> mochi_nth(K_3 + 1, Data_2) end end)) + I_7 + 1, (case erlang:is_map(Data_2) of true -> maps:get(K_3, Data_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Data_2) + K_3 + 1, Data_2); _ -> mochi_nth(K_3 + 1, Data_2) end end)); _ -> mochi_nth(I_7 + 1, (case erlang:is_map(Data_2) of true -> maps:get(K_3, Data_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Data_2) + K_3 + 1, Data_2); _ -> mochi_nth(K_3 + 1, Data_2) end end)) end end), (case erlang:is_map((case erlang:is_map(Data_2) of true -> maps:get(K_3, Data_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Data_2) + K_3 + 1, Data_2); _ -> mochi_nth(K_3 + 1, Data_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Data_2) of true -> maps:get(K_3, Data_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Data_2) + K_3 + 1, Data_2); _ -> mochi_nth(K_3 + 1, Data_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Data_2) of true -> maps:get(K_3, Data_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Data_2) + K_3 + 1, Data_2); _ -> mochi_nth(K_3 + 1, Data_2) end end)) + J_3 + 1, (case erlang:is_map(Data_2) of true -> maps:get(K_3, Data_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Data_2) + K_3 + 1, Data_2); _ -> mochi_nth(K_3 + 1, Data_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Data_2) of true -> maps:get(K_3, Data_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Data_2) + K_3 + 1, Data_2); _ -> mochi_nth(K_3 + 1, Data_2) end end)) end end))),
            K_4 = (K_3 + 1),
            Fun_8_loop(Cov, Data_2, I_7, J_3, K_4, N_features_2, N_samples_2, Row_3, Sum_4);
        _ -> {Cov, Data_2, I_7, J_3, K_3, N_features_2, N_samples_2, Row_3, Sum_3}
    end
end,
{Cov, Data_2, I_7, J_3, K_4, N_features_2, N_samples_2, Row_3, Sum_4} = Fun_8(Cov, Data_2, I_7, J_3, K_3, N_features_2, N_samples_2, Row_3, Sum_3),
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [mochi_safe_div(Sum_4, (N_samples_2 - 1))]),
            J_4 = (J_3 + 1),
            Fun_9_loop(Cov, Data_2, I_7, J_4, N_features_2, N_samples_2, Row_4);
        _ -> {Cov, Data_2, I_7, J_3, N_features_2, N_samples_2, Row_3}
    end
end,
{Cov, Data_2, I_7, J_4, N_features_2, N_samples_2, Row_4} = Fun_9(Cov, Data_2, I_7, J_3, N_features_2, N_samples_2, Row_3),
            Cov_2 = lists:append((case Cov of nil -> []; _ -> Cov end), [Row_4]),
            I_8 = (I_7 + 1),
            Fun_10_loop(Cov_2, Data_2, I_8, N_features_2, N_samples_2);
        _ -> {Cov, Data_2, I_7, N_features_2, N_samples_2}
    end
end,
{Cov_2, Data_2, I_8, N_features_2, N_samples_2} = Fun_10(Cov, Data_2, I_7, N_features_2, N_samples_2),
        Cov_2
    catch {return, Ret} -> Ret end.

normalize(Vec) ->
    try
        Sum_5 = 0.0,
        I_9 = 0,
        Fun_11 = fun Fun_11_loop(I_9, Sum_5, Vec) ->
    case (I_9 < erlang:length(Vec)) of
        true ->
            Sum_6 = (Sum_5 + mochi_safe_mul((case erlang:is_map(Vec) of true -> maps:get(I_9, Vec, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Vec) + I_9 + 1, Vec); _ -> mochi_nth(I_9 + 1, Vec) end end), (case erlang:is_map(Vec) of true -> maps:get(I_9, Vec, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Vec) + I_9 + 1, Vec); _ -> mochi_nth(I_9 + 1, Vec) end end))),
            I_10 = (I_9 + 1),
            Fun_11_loop(I_10, Sum_6, Vec);
        _ -> {I_9, Sum_5, Vec}
    end
end,
{I_10, Sum_6, Vec} = Fun_11(I_9, Sum_5, Vec),
        N = sqrt(Sum_6),
        Res = [],
        J_5 = 0,
        Fun_12 = fun Fun_12_loop(I_10, J_5, N, Res, Sum_6, Vec) ->
    case (J_5 < erlang:length(Vec)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [mochi_safe_div((case erlang:is_map(Vec) of true -> maps:get(J_5, Vec, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Vec) + J_5 + 1, Vec); _ -> mochi_nth(J_5 + 1, Vec) end end), N)]),
            J_6 = (J_5 + 1),
            Fun_12_loop(I_10, J_6, N, Res_2, Sum_6, Vec);
        _ -> {I_10, J_5, N, Res, Sum_6, Vec}
    end
end,
{I_10, J_6, N, Res_2, Sum_6, Vec} = Fun_12(I_10, J_5, N, Res, Sum_6, Vec),
        Res_2
    catch {return, Ret} -> Ret end.

eigen_decomposition_2x2(Matrix) ->
    try
        A = (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end),
        B = (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end),
        C_3 = (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end),
        Diff_2 = (A - C_3),
        Discriminant = sqrt((mochi_safe_mul(Diff_2, Diff_2) + mochi_safe_mul(mochi_safe_mul(4.0, B), B))),
        Lambda1 = mochi_safe_div(((A + C_3) + Discriminant), 2.0),
        Lambda2 = mochi_safe_div(((A + C_3) - Discriminant), 2.0),
        V1 = nil,
        V2 = nil,
        case (B /= 0.0) of
        true -> V1_2 = normalize([(Lambda1 - C_3), B]),
            V2_2 = normalize([(Lambda2 - C_3), B]),
            V1_4 = V1_2,
            V2_4 = V2_2;
        _ -> V1_3 = [1.0, 0.0],
            V2_3 = [0.0, 1.0],
            V1_4 = V1_3,
            V2_4 = V2_3
    end,
        Eigenvalues = [Lambda1, Lambda2],
        Eigenvectors = [V1_4, V2_4],
        case ((case erlang:is_map(Eigenvalues) of true -> maps:get(0, Eigenvalues, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Eigenvalues) + 0 + 1, Eigenvalues); _ -> mochi_nth(0 + 1, Eigenvalues) end end) < (case erlang:is_map(Eigenvalues) of true -> maps:get(1, Eigenvalues, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Eigenvalues) + 1 + 1, Eigenvalues); _ -> mochi_nth(1 + 1, Eigenvalues) end end)) of
        true -> Tmp_val = (case erlang:is_map(Eigenvalues) of true -> maps:get(0, Eigenvalues, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Eigenvalues) + 0 + 1, Eigenvalues); _ -> mochi_nth(0 + 1, Eigenvalues) end end),
            Eigenvalues_2 = lists:sublist(Eigenvalues, 0) ++ [(case erlang:is_map(Eigenvalues) of true -> maps:get(1, Eigenvalues, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Eigenvalues) + 1 + 1, Eigenvalues); _ -> mochi_nth(1 + 1, Eigenvalues) end end)] ++ lists:nthtail(0 + 1, Eigenvalues),
            Eigenvalues_3 = lists:sublist(Eigenvalues_2, 1) ++ [Tmp_val] ++ lists:nthtail(1 + 1, Eigenvalues_2),
            Tmp_vec = (case erlang:is_map(Eigenvectors) of true -> maps:get(0, Eigenvectors, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Eigenvectors) + 0 + 1, Eigenvectors); _ -> mochi_nth(0 + 1, Eigenvectors) end end),
            Eigenvectors_2 = lists:sublist(Eigenvectors, 0) ++ [(case erlang:is_map(Eigenvectors) of true -> maps:get(1, Eigenvectors, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Eigenvectors) + 1 + 1, Eigenvectors); _ -> mochi_nth(1 + 1, Eigenvectors) end end)] ++ lists:nthtail(0 + 1, Eigenvectors),
            Eigenvectors_3 = lists:sublist(Eigenvectors_2, 1) ++ [Tmp_vec] ++ lists:nthtail(1 + 1, Eigenvectors_2),
            Eigenvalues_4 = Eigenvalues_3,
            Eigenvectors_4 = Eigenvectors_3,
            Tmp_val_2 = Tmp_val,
            Tmp_vec_2 = Tmp_vec;
        _ -> Eigenvalues_4 = Eigenvalues,
            Eigenvectors_4 = Eigenvectors,
            Tmp_val_2 = nil,
            Tmp_vec_2 = nil
    end,
        #{"values" => Eigenvalues_4, "vectors" => Eigenvectors_4}
    catch {return, Ret} -> Ret end.

transpose(Matrix_2) ->
    try
        Rows = erlang:length(Matrix_2),
        Cols = erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get(0, Matrix_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + 0 + 1, Matrix_2); _ -> mochi_nth(0 + 1, Matrix_2) end end)),
        Trans = [],
        I_11 = 0,
        Fun_14 = fun Fun_14_loop(Cols, I_11, Matrix_2, Rows, Trans) ->
    case (I_11 < Cols) of
        true ->
            Row_5 = [],
            J_7 = 0,
            Fun_13 = fun Fun_13_loop(Cols, I_11, J_7, Matrix_2, Row_5, Rows, Trans) ->
    case (J_7 < Rows) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [(case erlang:is_map((case erlang:is_map(Matrix_2) of true -> maps:get(J_7, Matrix_2, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + J_7 + 1, Matrix_2); _ -> mochi_nth(J_7 + 1, Matrix_2) end end)) of true -> maps:get(I_11, (case erlang:is_map(Matrix_2) of true -> maps:get(J_7, Matrix_2, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + J_7 + 1, Matrix_2); _ -> mochi_nth(J_7 + 1, Matrix_2) end end), nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get(J_7, Matrix_2, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + J_7 + 1, Matrix_2); _ -> mochi_nth(J_7 + 1, Matrix_2) end end)) + I_11 + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(J_7, Matrix_2, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + J_7 + 1, Matrix_2); _ -> mochi_nth(J_7 + 1, Matrix_2) end end)); _ -> mochi_nth(I_11 + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(J_7, Matrix_2, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + J_7 + 1, Matrix_2); _ -> mochi_nth(J_7 + 1, Matrix_2) end end)) end end)]),
            J_8 = (J_7 + 1),
            Fun_13_loop(Cols, I_11, J_8, Matrix_2, Row_6, Rows, Trans);
        _ -> {Cols, I_11, J_7, Matrix_2, Row_5, Rows, Trans}
    end
end,
{Cols, I_11, J_8, Matrix_2, Row_6, Rows, Trans} = Fun_13(Cols, I_11, J_7, Matrix_2, Row_5, Rows, Trans),
            Trans_2 = lists:append((case Trans of nil -> []; _ -> Trans end), [Row_6]),
            I_12 = (I_11 + 1),
            Fun_14_loop(Cols, I_12, Matrix_2, Rows, Trans_2);
        _ -> {Cols, I_11, Matrix_2, Rows, Trans}
    end
end,
{Cols, I_12, Matrix_2, Rows, Trans_2} = Fun_14(Cols, I_11, Matrix_2, Rows, Trans),
        Trans_2
    catch {return, Ret} -> Ret end.

matrix_multiply(A_2, B_2) ->
    try
        Rows_a = erlang:length(A_2),
        Cols_a = erlang:length((case erlang:is_map(A_2) of true -> maps:get(0, A_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_2) + 0 + 1, A_2); _ -> mochi_nth(0 + 1, A_2) end end)),
        Rows_b = erlang:length(B_2),
        Cols_b = erlang:length((case erlang:is_map(B_2) of true -> maps:get(0, B_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B_2) + 0 + 1, B_2); _ -> mochi_nth(0 + 1, B_2) end end)),
        case (Cols_a /= Rows_b) of
        true -> erlang:error("Incompatible matrices");
        _ -> ok
    end,
        Result = [],
        I_13 = 0,
        Fun_17 = fun Fun_17_loop(A_2, B_2, Cols_a, Cols_b, I_13, Result, Rows_a, Rows_b) ->
    case (I_13 < Rows_a) of
        true ->
            Row_7 = [],
            J_9 = 0,
            Fun_16 = fun Fun_16_loop(A_2, B_2, Cols_a, Cols_b, I_13, J_9, Result, Row_7, Rows_a, Rows_b) ->
    case (J_9 < Cols_b) of
        true ->
            Sum_7 = 0.0,
            K_5 = 0,
            Fun_15 = fun Fun_15_loop(A_2, B_2, Cols_a, Cols_b, I_13, J_9, K_5, Result, Row_7, Rows_a, Rows_b, Sum_7) ->
    case (K_5 < Cols_a) of
        true ->
            Sum_8 = (Sum_7 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(A_2) of true -> maps:get(I_13, A_2, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(A_2) + I_13 + 1, A_2); _ -> mochi_nth(I_13 + 1, A_2) end end)) of true -> maps:get(K_5, (case erlang:is_map(A_2) of true -> maps:get(I_13, A_2, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(A_2) + I_13 + 1, A_2); _ -> mochi_nth(I_13 + 1, A_2) end end), nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_2) of true -> maps:get(I_13, A_2, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(A_2) + I_13 + 1, A_2); _ -> mochi_nth(I_13 + 1, A_2) end end)) + K_5 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_13, A_2, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(A_2) + I_13 + 1, A_2); _ -> mochi_nth(I_13 + 1, A_2) end end)); _ -> mochi_nth(K_5 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_13, A_2, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(A_2) + I_13 + 1, A_2); _ -> mochi_nth(I_13 + 1, A_2) end end)) end end), (case erlang:is_map((case erlang:is_map(B_2) of true -> maps:get(K_5, B_2, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(B_2) + K_5 + 1, B_2); _ -> mochi_nth(K_5 + 1, B_2) end end)) of true -> maps:get(J_9, (case erlang:is_map(B_2) of true -> maps:get(K_5, B_2, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(B_2) + K_5 + 1, B_2); _ -> mochi_nth(K_5 + 1, B_2) end end), nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B_2) of true -> maps:get(K_5, B_2, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(B_2) + K_5 + 1, B_2); _ -> mochi_nth(K_5 + 1, B_2) end end)) + J_9 + 1, (case erlang:is_map(B_2) of true -> maps:get(K_5, B_2, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(B_2) + K_5 + 1, B_2); _ -> mochi_nth(K_5 + 1, B_2) end end)); _ -> mochi_nth(J_9 + 1, (case erlang:is_map(B_2) of true -> maps:get(K_5, B_2, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(B_2) + K_5 + 1, B_2); _ -> mochi_nth(K_5 + 1, B_2) end end)) end end))),
            K_6 = (K_5 + 1),
            Fun_15_loop(A_2, B_2, Cols_a, Cols_b, I_13, J_9, K_6, Result, Row_7, Rows_a, Rows_b, Sum_8);
        _ -> {A_2, B_2, Cols_a, Cols_b, I_13, J_9, K_5, Result, Row_7, Rows_a, Rows_b, Sum_7}
    end
end,
{A_2, B_2, Cols_a, Cols_b, I_13, J_9, K_6, Result, Row_7, Rows_a, Rows_b, Sum_8} = Fun_15(A_2, B_2, Cols_a, Cols_b, I_13, J_9, K_5, Result, Row_7, Rows_a, Rows_b, Sum_7),
            Row_8 = lists:append((case Row_7 of nil -> []; _ -> Row_7 end), [Sum_8]),
            J_10 = (J_9 + 1),
            Fun_16_loop(A_2, B_2, Cols_a, Cols_b, I_13, J_10, Result, Row_8, Rows_a, Rows_b);
        _ -> {A_2, B_2, Cols_a, Cols_b, I_13, J_9, Result, Row_7, Rows_a, Rows_b}
    end
end,
{A_2, B_2, Cols_a, Cols_b, I_13, J_10, Result, Row_8, Rows_a, Rows_b} = Fun_16(A_2, B_2, Cols_a, Cols_b, I_13, J_9, Result, Row_7, Rows_a, Rows_b),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_8]),
            I_14 = (I_13 + 1),
            Fun_17_loop(A_2, B_2, Cols_a, Cols_b, I_14, Result_2, Rows_a, Rows_b);
        _ -> {A_2, B_2, Cols_a, Cols_b, I_13, Result, Rows_a, Rows_b}
    end
end,
{A_2, B_2, Cols_a, Cols_b, I_14, Result_2, Rows_a, Rows_b} = Fun_17(A_2, B_2, Cols_a, Cols_b, I_13, Result, Rows_a, Rows_b),
        Result_2
    catch {return, Ret} -> Ret end.

apply_pca(Data_3, N_components) ->
    try
        Standardized_3 = standardize(Data_3),
        Cov_3 = covariance_matrix(Standardized_3),
        Eig = eigen_decomposition_2x2(Cov_3),
        Eigenvalues_5 = maps:get("values", Eig, nil),
        Eigenvectors_5 = maps:get("vectors", Eig, nil),
        Components = transpose(Eigenvectors_5),
        Transformed = matrix_multiply(Standardized_3, Components),
        Total = ((case erlang:is_map(Eigenvalues_5) of true -> maps:get(0, Eigenvalues_5, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Eigenvalues_5) + 0 + 1, Eigenvalues_5); _ -> mochi_nth(0 + 1, Eigenvalues_5) end end) + (case erlang:is_map(Eigenvalues_5) of true -> maps:get(1, Eigenvalues_5, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Eigenvalues_5) + 1 + 1, Eigenvalues_5); _ -> mochi_nth(1 + 1, Eigenvalues_5) end end)),
        Ratios = [],
        I_15 = 0,
        Fun_18 = fun Fun_18_loop(Components, Cov_3, Data_3, Eig, Eigenvalues_5, Eigenvectors_5, I_15, N_components, Ratios, Standardized_3, Total, Transformed) ->
    case (I_15 < N_components) of
        true ->
            Ratios_2 = lists:append((case Ratios of nil -> []; _ -> Ratios end), [mochi_safe_div((case erlang:is_map(Eigenvalues_5) of true -> maps:get(I_15, Eigenvalues_5, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Eigenvalues_5) + I_15 + 1, Eigenvalues_5); _ -> mochi_nth(I_15 + 1, Eigenvalues_5) end end), Total)]),
            I_16 = (I_15 + 1),
            Fun_18_loop(Components, Cov_3, Data_3, Eig, Eigenvalues_5, Eigenvectors_5, I_16, N_components, Ratios_2, Standardized_3, Total, Transformed);
        _ -> {Components, Cov_3, Data_3, Eig, Eigenvalues_5, Eigenvectors_5, I_15, N_components, Ratios, Standardized_3, Total, Transformed}
    end
end,
{Components, Cov_3, Data_3, Eig, Eigenvalues_5, Eigenvectors_5, I_16, N_components, Ratios_2, Standardized_3, Total, Transformed} = Fun_18(Components, Cov_3, Data_3, Eig, Eigenvalues_5, Eigenvectors_5, I_15, N_components, Ratios, Standardized_3, Total, Transformed),
        #{"transformed" => Transformed, "variance_ratio" => Ratios_2}
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('data', [[2.5, 2.4], [0.5, 0.7], [2.2, 2.9], [1.9, 2.2], [3.1, 3.0], [2.3, 2.7], [2.0, 1.6], [1.0, 1.1], [1.5, 1.6], [1.1, 0.9]]),
    erlang:put('result', apply_pca(erlang:get('data'), 2)),
    io:format("~ts~n", [mochi_repr("Transformed Data (first 5 rows):")]),
    erlang:put('idx', 0),
    Fun_19 = fun Fun_19_loop() ->
    case (erlang:get('idx') < 5) of
        true ->
            io:format("~ts~n", [mochi_repr((case erlang:is_map(maps:get("transformed", erlang:get('result'), nil)) of true -> maps:get(erlang:get('idx'), maps:get("transformed", erlang:get('result'), nil), nil); _ -> case erlang:get('idx') < 0 of true -> mochi_nth(erlang:length(maps:get("transformed", erlang:get('result'), nil)) + erlang:get('idx') + 1, maps:get("transformed", erlang:get('result'), nil)); _ -> mochi_nth(erlang:get('idx') + 1, maps:get("transformed", erlang:get('result'), nil)) end end))]),
            erlang:put('idx', (erlang:get('idx') + 1)),
            Fun_19_loop();
        _ -> {}
    end
end,
{} = Fun_19(),
    io:format("~ts~n", [mochi_repr("Explained Variance Ratio:")]),
    io:format("~ts~n", [mochi_repr(maps:get("variance_ratio", erlang:get('result'), nil))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
