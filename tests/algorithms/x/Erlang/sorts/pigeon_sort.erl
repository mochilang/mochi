#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_list/2, min_value/1, max_value/1, pigeon_sort/1]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_list(N, Value) ->
    try
        Result = [],
        I = 0,
        Fun = fun Fun_loop(I, N, Result, Value) ->
    case (I < N) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Value]),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Result_2, Value);
        _ -> {I, N, Result, Value}
    end
end,
{I_2, N, Result_2, Value} = Fun(I, N, Result, Value),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

min_value(Arr) ->
    try
        M = (case erlang:is_map(Arr) of true -> maps:get(0, Arr, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr) + 0 + 1, Arr); _ -> mochi_nth(0 + 1, Arr) end end),
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(Arr, I_3, M) ->
    case (I_3 < erlang:length(Arr)) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr) + I_3 + 1, Arr); _ -> mochi_nth(I_3 + 1, Arr) end end) < M) of
        true -> M_2 = (case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr) + I_3 + 1, Arr); _ -> mochi_nth(I_3 + 1, Arr) end end),
            M_3 = M_2;
        _ -> M_3 = M
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr, I_4, M_3);
        _ -> {Arr, I_3, M}
    end
end,
{Arr, I_4, M_3} = Fun_2(Arr, I_3, M),
        M_3
    catch {return, RetCatch} -> RetCatch end.

max_value(Arr_2) ->
    try
        M_4 = (case erlang:is_map(Arr_2) of true -> maps:get(0, Arr_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr_2) + 0 + 1, Arr_2); _ -> mochi_nth(0 + 1, Arr_2) end end),
        I_5 = 1,
        Fun_3 = fun Fun_3_loop(Arr_2, I_5, M_4) ->
    case (I_5 < erlang:length(Arr_2)) of
        true ->
            case ((case erlang:is_map(Arr_2) of true -> maps:get(I_5, Arr_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Arr_2) + I_5 + 1, Arr_2); _ -> mochi_nth(I_5 + 1, Arr_2) end end) > M_4) of
        true -> M_5 = (case erlang:is_map(Arr_2) of true -> maps:get(I_5, Arr_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Arr_2) + I_5 + 1, Arr_2); _ -> mochi_nth(I_5 + 1, Arr_2) end end),
            M_6 = M_5;
        _ -> M_6 = M_4
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Arr_2, I_6, M_6);
        _ -> {Arr_2, I_5, M_4}
    end
end,
{Arr_2, I_6, M_6} = Fun_3(Arr_2, I_5, M_4),
        M_6
    catch {return, RetCatch} -> RetCatch end.

pigeon_sort(Array) ->
    try
        case (erlang:length(Array) == 0) of
        true -> throw({return, Array});
        _ -> ok
    end,
        Mn = min_value(Array),
        Mx = max_value(Array),
        Holes_range = ((Mx - Mn) + 1),
        Holes = make_list(Holes_range, 0),
        Holes_repeat = make_list(Holes_range, 0),
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Array, Holes, Holes_range, Holes_repeat, I_7, Mn, Mx) ->
    case (I_7 < erlang:length(Array)) of
        true ->
            Index = ((case erlang:is_map(Array) of true -> maps:get(I_7, Array, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Array) + I_7 + 1, Array); _ -> mochi_nth(I_7 + 1, Array) end end) - Mn),
            Holes_2 = lists:sublist(Holes, Index) ++ [(case erlang:is_map(Array) of true -> maps:get(I_7, Array, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Array) + I_7 + 1, Array); _ -> mochi_nth(I_7 + 1, Array) end end)] ++ lists:nthtail(Index + 1, Holes),
            Holes_repeat_2 = lists:sublist(Holes_repeat, Index) ++ [((case erlang:is_map(Holes_repeat) of true -> maps:get(Index, Holes_repeat, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Holes_repeat) + Index + 1, Holes_repeat); _ -> mochi_nth(Index + 1, Holes_repeat) end end) + 1)] ++ lists:nthtail(Index + 1, Holes_repeat),
            I_8 = (I_7 + 1),
            Fun_4_loop(Array, Holes_2, Holes_range, Holes_repeat_2, I_8, Mn, Mx);
        _ -> {Array, Holes, Holes_range, Holes_repeat, I_7, Mn, Mx}
    end
end,
{Array, Holes_2, Holes_range, Holes_repeat_2, I_8, Mn, Mx} = Fun_4(Array, Holes, Holes_range, Holes_repeat, I_7, Mn, Mx),
        Array_index = 0,
        H = 0,
        Fun_6 = fun Fun_6_loop(Array, Array_index, H, Holes_2, Holes_range, Holes_repeat_2, I_8, Mn, Mx) ->
    case (H < Holes_range) of
        true ->
            Fun_5 = fun Fun_5_loop(Array, Array_index, H, Holes_2, Holes_range, Holes_repeat_2, I_8, Mn, Mx) ->
    case ((case erlang:is_map(Holes_repeat_2) of true -> maps:get(H, Holes_repeat_2, nil); _ -> case H < 0 of true -> mochi_nth(erlang:length(Holes_repeat_2) + H + 1, Holes_repeat_2); _ -> mochi_nth(H + 1, Holes_repeat_2) end end) > 0) of
        true ->
            Array_2 = lists:sublist(Array, Array_index) ++ [(case erlang:is_map(Holes_2) of true -> maps:get(H, Holes_2, nil); _ -> case H < 0 of true -> mochi_nth(erlang:length(Holes_2) + H + 1, Holes_2); _ -> mochi_nth(H + 1, Holes_2) end end)] ++ lists:nthtail(Array_index + 1, Array),
            Array_index_2 = (Array_index + 1),
            Holes_repeat_3 = lists:sublist(Holes_repeat_2, H) ++ [((case erlang:is_map(Holes_repeat_2) of true -> maps:get(H, Holes_repeat_2, nil); _ -> case H < 0 of true -> mochi_nth(erlang:length(Holes_repeat_2) + H + 1, Holes_repeat_2); _ -> mochi_nth(H + 1, Holes_repeat_2) end end) - 1)] ++ lists:nthtail(H + 1, Holes_repeat_2),
            Fun_5_loop(Array_2, Array_index_2, H, Holes_2, Holes_range, Holes_repeat_3, I_8, Mn, Mx);
        _ -> {Array, Array_index, H, Holes_2, Holes_range, Holes_repeat_2, I_8, Mn, Mx}
    end
end,
{Array_2, Array_index_2, H, Holes_2, Holes_range, Holes_repeat_3, I_8, Mn, Mx} = Fun_5(Array, Array_index, H, Holes_2, Holes_range, Holes_repeat_2, I_8, Mn, Mx),
            H_2 = (H + 1),
            Fun_6_loop(Array_2, Array_index_2, H_2, Holes_2, Holes_range, Holes_repeat_3, I_8, Mn, Mx);
        _ -> {Array, Array_index, H, Holes_2, Holes_range, Holes_repeat_2, I_8, Mn, Mx}
    end
end,
{Array_2, Array_index_2, H_2, Holes_2, Holes_range, Holes_repeat_3, I_8, Mn, Mx} = Fun_6(Array, Array_index, H, Holes_2, Holes_range, Holes_repeat_2, I_8, Mn, Mx),
        Array_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(pigeon_sort([0, 5, 3, 2, 2]))]),
    io:format("~ts~n", [mochi_str(pigeon_sort([]))]),
    io:format("~ts~n", [mochi_str(pigeon_sort([-2, -5, -45]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
