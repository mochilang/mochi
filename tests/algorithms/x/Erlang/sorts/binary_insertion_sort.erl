#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, binary_insertion_sort/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

binary_insertion_sort(Arr) ->
    try
        I = 1,
        Fun_3 = fun Fun_3_loop(Arr, I) ->
    case (I < erlang:length(Arr)) of
        true ->
            Value = (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end),
            Low = 0,
            High = (I - 1),
            Fun = fun Fun_loop(Arr, High, I, Low, Value) ->
    case (Low =< High) of
        true ->
            Mid = ((Low + High) div 2),
            case (Value < (case erlang:is_map(Arr) of true -> maps:get(Mid, Arr, nil); _ -> case Mid < 0 of true -> mochi_nth(erlang:length(Arr) + Mid + 1, Arr); _ -> mochi_nth(Mid + 1, Arr) end end)) of
        true -> High_2 = (Mid - 1),
            High_3 = High_2,
            Low_3 = Low;
        _ -> Low_2 = (Mid + 1),
            High_3 = High,
            Low_3 = Low_2
    end,
            Fun_loop(Arr, High_3, I, Low_3, Value);
        _ -> {Arr, High, I, Low, Value}
    end
end,
{Arr, High_3, I, Low_3, Value} = Fun(Arr, High, I, Low, Value),
            J = I,
            Fun_2 = fun Fun_2_loop(Arr, High_3, I, J, Low_3, Value) ->
    case (J > Low_3) of
        true ->
            Arr_2 = lists:sublist(Arr, J) ++ [(case erlang:is_map(Arr) of true -> maps:get((J - 1), Arr, nil); _ -> case (J - 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J - 1) + 1, Arr); _ -> mochi_nth((J - 1) + 1, Arr) end end)] ++ lists:nthtail(J + 1, Arr),
            J_2 = (J - 1),
            Fun_2_loop(Arr_2, High_3, I, J_2, Low_3, Value);
        _ -> {Arr, High_3, I, J, Low_3, Value}
    end
end,
{Arr_2, High_3, I, J_2, Low_3, Value} = Fun_2(Arr, High_3, I, J, Low_3, Value),
            Arr_3 = lists:sublist(Arr_2, Low_3) ++ [Value] ++ lists:nthtail(Low_3 + 1, Arr_2),
            I_2 = (I + 1),
            Fun_3_loop(Arr_3, I_2);
        _ -> {Arr, I}
    end
end,
{Arr_3, I_2} = Fun_3(Arr, I),
        Arr_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        Example1 = [5, 2, 4, 6, 1, 3],
        io:format("~ts~n", [mochi_str(binary_insertion_sort(Example1))]),
        Example2 = [],
        io:format("~ts~n", [mochi_str(binary_insertion_sort(Example2))]),
        Example3 = [4, 2, 4, 1, 3],
        io:format("~ts~n", [mochi_str(binary_insertion_sort(Example3))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
