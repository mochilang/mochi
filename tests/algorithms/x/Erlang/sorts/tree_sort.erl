#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, new_node/2, insert/2, inorder/2, tree_sort/1]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

new_node(State, Value) ->
    try
        State_2 = maps:put("nodes", lists:append((case maps:get("nodes", State, nil) of nil -> []; _ -> maps:get("nodes", State, nil) end), [#{"value" => Value, "left" => -1, "right" => -1}]), State),
        (erlang:length(maps:get("nodes", State_2, nil)) - 1)
    catch {return, RetCatch} -> RetCatch end.

insert(State_3, Value_2) ->
    try
        case (maps:get("root", State_3, nil) == -1) of
        true -> State_4 = maps:put("root", new_node(State_3, Value_2), State_3),
            throw({return, State_4}),
            State_5 = State_4;
        _ -> State_5 = State_3
    end,
        Current = maps:get("root", State_5, nil),
        Nodes = maps:get("nodes", State_5, nil),
        Fun = fun Fun_loop(Current, Nodes, State_5, Value_2) ->
    case true of
        true ->
            Node = (case erlang:is_map(Nodes) of true -> maps:get(Current, Nodes, nil); _ -> case Current < 0 of true -> mochi_nth(erlang:length(Nodes) + Current + 1, Nodes); _ -> mochi_nth(Current + 1, Nodes) end end),
            case (Value_2 < maps:get("value", Node, nil)) of
        true -> case (maps:get("left", Node, nil) == -1) of
        true -> Idx = new_node(State_5, Value_2),
            Nodes_2 = maps:get("nodes", State_5, nil),
            Node_2 = maps:put("left", Idx, Node),
            Nodes_3 = lists:sublist(Nodes_2, Current) ++ [Node_2] ++ lists:nthtail(Current + 1, Nodes_2),
            State_6 = maps:put("nodes", Nodes_3, State_5),
            throw({return, State_6}),
            Idx_2 = Idx,
            Node_3 = Node_2,
            Nodes_4 = Nodes_3,
            State_7 = State_6;
        _ -> Idx_2 = nil,
            Node_3 = Node,
            Nodes_4 = Nodes,
            State_7 = State_5
    end,
            Current_2 = maps:get("left", Node_3, nil),
            Current_5 = Current_2,
            Idx_6 = Idx_2,
            Node_7 = Node_3,
            Nodes_9 = Nodes_4,
            State_11 = State_7;
        _ -> case (Value_2 > maps:get("value", Node, nil)) of
        true -> case (maps:get("right", Node, nil) == -1) of
        true -> Idx_3 = new_node(State_5, Value_2),
            Nodes_5 = maps:get("nodes", State_5, nil),
            Node_4 = maps:put("right", Idx_3, Node),
            Nodes_6 = lists:sublist(Nodes_5, Current) ++ [Node_4] ++ lists:nthtail(Current + 1, Nodes_5),
            State_8 = maps:put("nodes", Nodes_6, State_5),
            throw({return, State_8}),
            Idx_4 = Idx_3,
            Node_5 = Node_4,
            Nodes_7 = Nodes_6,
            State_9 = State_8;
        _ -> Idx_4 = nil,
            Node_5 = Node,
            Nodes_7 = Nodes,
            State_9 = State_5
    end,
            Current_3 = maps:get("right", Node_5, nil),
            Current_4 = Current_3,
            Idx_5 = Idx_4,
            Node_6 = Node_5,
            Nodes_8 = Nodes_7,
            State_10 = State_9;
        _ -> throw({return, nil}),
            Current_4 = Current,
            Idx_5 = nil,
            Node_6 = Node,
            Nodes_8 = Nodes,
            State_10 = State_5
    end,
            Current_5 = Current_4,
            Idx_6 = Idx_5,
            Node_7 = Node_6,
            Nodes_9 = Nodes_8,
            State_11 = State_10
    end,
            Fun_loop(Current_5, Nodes_9, State_11, Value_2);
        _ -> {Current, Nodes, State_5, Value_2}
    end
end,
{Current_5, Nodes_9, State_11, Value_2} = Fun(Current, Nodes, State_5, Value_2),
        nil
    catch {return, RetCatch} -> RetCatch end.

inorder(State_12, Idx_7) ->
    try
        case (Idx_7 == -1) of
        true -> throw({return, []});
        _ -> ok
    end,
        Node_8 = (case erlang:is_map(maps:get("nodes", State_12, nil)) of true -> maps:get(Idx_7, maps:get("nodes", State_12, nil), nil); _ -> case Idx_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", State_12, nil)) + Idx_7 + 1, maps:get("nodes", State_12, nil)); _ -> mochi_nth(Idx_7 + 1, maps:get("nodes", State_12, nil)) end end),
        Result = inorder(State_12, maps:get("left", Node_8, nil)),
        Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [maps:get("value", Node_8, nil)]),
        Right_part = inorder(State_12, maps:get("right", Node_8, nil)),
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Idx_7, Node_8, Result_2, Right_part, State_12) ->
    case (I < erlang:length(Right_part)) of
        true ->
            Result_3 = lists:append((case Result_2 of nil -> []; _ -> Result_2 end), [(case erlang:is_map(Right_part) of true -> maps:get(I, Right_part, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Right_part) + I + 1, Right_part); _ -> mochi_nth(I + 1, Right_part) end end)]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Idx_7, Node_8, Result_3, Right_part, State_12);
        _ -> {I, Idx_7, Node_8, Result_2, Right_part, State_12}
    end
end,
{I_2, Idx_7, Node_8, Result_3, Right_part, State_12} = Fun_2(I, Idx_7, Node_8, Result_2, Right_part, State_12),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

tree_sort(Arr) ->
    try
        State_13 = #{"nodes" => [], "root" => -1},
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Arr, I_3, State_13) ->
    case (I_3 < erlang:length(Arr)) of
        true ->
            insert(State_13, (case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr) + I_3 + 1, Arr); _ -> mochi_nth(I_3 + 1, Arr) end end)),
            I_4 = (I_3 + 1),
            Fun_3_loop(Arr, I_4, State_13);
        _ -> {Arr, I_3, State_13}
    end
end,
{Arr, I_4, State_13} = Fun_3(Arr, I_3, State_13),
        case (maps:get("root", State_13, nil) == -1) of
        true -> throw({return, []});
        _ -> ok
    end,
        inorder(State_13, maps:get("root", State_13, nil))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(tree_sort([]))]),
    io:format("~ts~n", [mochi_str(tree_sort([1]))]),
    io:format("~ts~n", [mochi_str(tree_sort([1, 2]))]),
    io:format("~ts~n", [mochi_str(tree_sort([5, 2, 7]))]),
    io:format("~ts~n", [mochi_str(tree_sort([5, -4, 9, 2, 7]))]),
    io:format("~ts~n", [mochi_str(tree_sort([5, 6, 1, -1, 4, 37, 2, 7]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
