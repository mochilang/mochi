#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, heapify/3, heap_sort/1]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

heapify(Arr, Index, Heap_size) ->
    try
        Largest = Index,
        Left_index = ((2 * Index) + 1),
        Right_index = ((2 * Index) + 2),
        case ((Left_index < Heap_size) andalso ((case erlang:is_map(Arr) of true -> maps:get(Left_index, Arr, nil); _ -> case Left_index < 0 of true -> mochi_nth(erlang:length(Arr) + Left_index + 1, Arr); _ -> mochi_nth(Left_index + 1, Arr) end end) > (case erlang:is_map(Arr) of true -> maps:get(Largest, Arr, nil); _ -> case Largest < 0 of true -> mochi_nth(erlang:length(Arr) + Largest + 1, Arr); _ -> mochi_nth(Largest + 1, Arr) end end))) of
        true -> Largest_2 = Left_index,
            Largest_3 = Largest_2;
        _ -> Largest_3 = Largest
    end,
        case ((Right_index < Heap_size) andalso ((case erlang:is_map(Arr) of true -> maps:get(Right_index, Arr, nil); _ -> case Right_index < 0 of true -> mochi_nth(erlang:length(Arr) + Right_index + 1, Arr); _ -> mochi_nth(Right_index + 1, Arr) end end) > (case erlang:is_map(Arr) of true -> maps:get(Largest_3, Arr, nil); _ -> case Largest_3 < 0 of true -> mochi_nth(erlang:length(Arr) + Largest_3 + 1, Arr); _ -> mochi_nth(Largest_3 + 1, Arr) end end))) of
        true -> Largest_4 = Right_index,
            Largest_5 = Largest_4;
        _ -> Largest_5 = Largest_3
    end,
        case (Largest_5 /= Index) of
        true -> Temp = (case erlang:is_map(Arr) of true -> maps:get(Largest_5, Arr, nil); _ -> case Largest_5 < 0 of true -> mochi_nth(erlang:length(Arr) + Largest_5 + 1, Arr); _ -> mochi_nth(Largest_5 + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, Largest_5) ++ [(case erlang:is_map(Arr) of true -> maps:get(Index, Arr, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Arr) + Index + 1, Arr); _ -> mochi_nth(Index + 1, Arr) end end)] ++ lists:nthtail(Largest_5 + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, Index) ++ [Temp] ++ lists:nthtail(Index + 1, Arr_2),
            heapify(Arr_3, Largest_5, Heap_size),
            Arr_4 = Arr_3,
            Temp_2 = Temp;
        _ -> Arr_4 = Arr,
            Temp_2 = nil
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

heap_sort(Arr_5) ->
    try
        N = erlang:length(Arr_5),
        I = ((N div 2) - 1),
        Fun = fun Fun_loop(Arr_5, I, N) ->
    case (I >= 0) of
        true ->
            heapify(Arr_5, I, N),
            I_2 = (I - 1),
            Fun_loop(Arr_5, I_2, N);
        _ -> {Arr_5, I, N}
    end
end,
{Arr_5, I_2, N} = Fun(Arr_5, I, N),
        I_3 = (N - 1),
        Fun_2 = fun Fun_2_loop(Arr_5, I_3, N) ->
    case (I_3 > 0) of
        true ->
            Temp_3 = (case erlang:is_map(Arr_5) of true -> maps:get(0, Arr_5, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr_5) + 0 + 1, Arr_5); _ -> mochi_nth(0 + 1, Arr_5) end end),
            Arr_6 = lists:sublist(Arr_5, 0) ++ [(case erlang:is_map(Arr_5) of true -> maps:get(I_3, Arr_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr_5) + I_3 + 1, Arr_5); _ -> mochi_nth(I_3 + 1, Arr_5) end end)] ++ lists:nthtail(0 + 1, Arr_5),
            Arr_7 = lists:sublist(Arr_6, I_3) ++ [Temp_3] ++ lists:nthtail(I_3 + 1, Arr_6),
            heapify(Arr_7, 0, I_3),
            I_4 = (I_3 - 1),
            Fun_2_loop(Arr_7, I_4, N);
        _ -> {Arr_5, I_3, N}
    end
end,
{Arr_7, I_4, N} = Fun_2(Arr_5, I_3, N),
        Arr_7
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('data', [3, 7, 9, 28, 123, -5, 8, -30, -200, 0, 4]),
    erlang:put('result', heap_sort(erlang:get('data'))),
    io:format("~ts~n", [mochi_repr(erlang:get('result'))]),
    case (mochi_str(erlang:get('result')) /= mochi_str([-200, -30, -5, 0, 3, 4, 7, 8, 9, 28, 123])) of
        true -> erlang:error({panic, "Assertion error"});
        _ -> ok
    end,
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
