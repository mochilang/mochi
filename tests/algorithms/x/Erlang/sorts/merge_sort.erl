#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, subarray/3, merge/2, merge_sort/1]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

subarray(Xs, Start, End) ->
    try
        Result = [],
        I = Start,
        Fun = fun Fun_loop(End, I, Result, Start, Xs) ->
    case (I < End) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            I_2 = (I + 1),
            Fun_loop(End, I_2, Result_2, Start, Xs);
        _ -> {End, I, Result, Start, Xs}
    end
end,
{End, I_2, Result_2, Start, Xs} = Fun(End, I, Result, Start, Xs),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

merge(Left, Right) ->
    try
        Result_3 = [],
        I_3 = 0,
        J = 0,
        Fun_2 = fun Fun_2_loop(I_3, J, Left, Result_3, Right) ->
    case ((I_3 < erlang:length(Left)) andalso (J < erlang:length(Right))) of
        true ->
            case ((case erlang:is_map(Left) of true -> maps:get(I_3, Left, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Left) + I_3 + 1, Left); _ -> mochi_nth(I_3 + 1, Left) end end) =< (case erlang:is_map(Right) of true -> maps:get(J, Right, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Right) + J + 1, Right); _ -> mochi_nth(J + 1, Right) end end)) of
        true -> Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [(case erlang:is_map(Left) of true -> maps:get(I_3, Left, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Left) + I_3 + 1, Left); _ -> mochi_nth(I_3 + 1, Left) end end)]),
            I_4 = (I_3 + 1),
            I_5 = I_4,
            J_3 = J,
            Result_6 = Result_4;
        _ -> Result_5 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [(case erlang:is_map(Right) of true -> maps:get(J, Right, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Right) + J + 1, Right); _ -> mochi_nth(J + 1, Right) end end)]),
            J_2 = (J + 1),
            I_5 = I_3,
            J_3 = J_2,
            Result_6 = Result_5
    end,
            Fun_2_loop(I_5, J_3, Left, Result_6, Right);
        _ -> {I_3, J, Left, Result_3, Right}
    end
end,
{I_5, J_3, Left, Result_6, Right} = Fun_2(I_3, J, Left, Result_3, Right),
        Fun_3 = fun Fun_3_loop(I_5, J_3, Left, Result_6, Right) ->
    case (I_5 < erlang:length(Left)) of
        true ->
            Result_7 = lists:append((case Result_6 of nil -> []; _ -> Result_6 end), [(case erlang:is_map(Left) of true -> maps:get(I_5, Left, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Left) + I_5 + 1, Left); _ -> mochi_nth(I_5 + 1, Left) end end)]),
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, J_3, Left, Result_7, Right);
        _ -> {I_5, J_3, Left, Result_6, Right}
    end
end,
{I_6, J_3, Left, Result_7, Right} = Fun_3(I_5, J_3, Left, Result_6, Right),
        Fun_4 = fun Fun_4_loop(I_6, J_3, Left, Result_7, Right) ->
    case (J_3 < erlang:length(Right)) of
        true ->
            Result_8 = lists:append((case Result_7 of nil -> []; _ -> Result_7 end), [(case erlang:is_map(Right) of true -> maps:get(J_3, Right, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Right) + J_3 + 1, Right); _ -> mochi_nth(J_3 + 1, Right) end end)]),
            J_4 = (J_3 + 1),
            Fun_4_loop(I_6, J_4, Left, Result_8, Right);
        _ -> {I_6, J_3, Left, Result_7, Right}
    end
end,
{I_6, J_4, Left, Result_8, Right} = Fun_4(I_6, J_3, Left, Result_7, Right),
        Result_8
    catch {return, RetCatch} -> RetCatch end.

merge_sort(Collection) ->
    try
        case (erlang:length(Collection) =< 1) of
        true -> throw({return, Collection});
        _ -> ok
    end,
        Mid_index = mochi_safe_div(erlang:length(Collection), 2),
        Left_2 = subarray(Collection, 0, Mid_index),
        Right_2 = subarray(Collection, Mid_index, erlang:length(Collection)),
        Sorted_left = merge_sort(Left_2),
        Sorted_right = merge_sort(Right_2),
        merge(Sorted_left, Sorted_right)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(merge_sort([0, 5, 3, 2, 2]))]),
    io:format("~ts~n", [mochi_str(merge_sort([]))]),
    io:format("~ts~n", [mochi_str(merge_sort([-2, -5, -45]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
