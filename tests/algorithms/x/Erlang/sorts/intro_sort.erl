#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, insertion_sort/3, heapify/3, heap_sort/1, median_of_3/4, partition/4, int_log2/1, intro_sort/5, intro_sort_main/1]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

insertion_sort(A, Start, End_) ->
    try
        Arr = A,
        I = Start,
        Fun_2 = fun Fun_2_loop(A, Arr, End_, I, Start) ->
    case (I < End_) of
        true ->
            Key = (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end),
            J = I,
            Fun = fun Fun_loop(A, Arr, End_, I, J, Key, Start) ->
    case ((J > Start) andalso ((case erlang:is_map(Arr) of true -> maps:get((J - 1), Arr, nil); _ -> case (J - 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J - 1) + 1, Arr); _ -> mochi_nth((J - 1) + 1, Arr) end end) > Key)) of
        true ->
            Arr_2 = lists:sublist(Arr, J) ++ [(case erlang:is_map(Arr) of true -> maps:get((J - 1), Arr, nil); _ -> case (J - 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J - 1) + 1, Arr); _ -> mochi_nth((J - 1) + 1, Arr) end end)] ++ lists:nthtail(J + 1, Arr),
            J_2 = (J - 1),
            Fun_loop(A, Arr_2, End_, I, J_2, Key, Start);
        _ -> {A, Arr, End_, I, J, Key, Start}
    end
end,
{A, Arr_2, End_, I, J_2, Key, Start} = Fun(A, Arr, End_, I, J, Key, Start),
            Arr_3 = lists:sublist(Arr_2, J_2) ++ [Key] ++ lists:nthtail(J_2 + 1, Arr_2),
            I_2 = (I + 1),
            Fun_2_loop(A, Arr_3, End_, I_2, Start);
        _ -> {A, Arr, End_, I, Start}
    end
end,
{A, Arr_3, End_, I_2, Start} = Fun_2(A, Arr, End_, I, Start),
        Arr_3
    catch {return, RetCatch} -> RetCatch end.

heapify(A_2, Index, Heap_size) ->
    try
        Arr_4 = A_2,
        Largest = Index,
        Left = ((2 * Index) + 1),
        Right = ((2 * Index) + 2),
        case ((Left < Heap_size) andalso ((case erlang:is_map(Arr_4) of true -> maps:get(Left, Arr_4, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Arr_4) + Left + 1, Arr_4); _ -> mochi_nth(Left + 1, Arr_4) end end) > (case erlang:is_map(Arr_4) of true -> maps:get(Largest, Arr_4, nil); _ -> case Largest < 0 of true -> mochi_nth(erlang:length(Arr_4) + Largest + 1, Arr_4); _ -> mochi_nth(Largest + 1, Arr_4) end end))) of
        true -> Largest_2 = Left,
            Largest_3 = Largest_2;
        _ -> Largest_3 = Largest
    end,
        case ((Right < Heap_size) andalso ((case erlang:is_map(Arr_4) of true -> maps:get(Right, Arr_4, nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(Arr_4) + Right + 1, Arr_4); _ -> mochi_nth(Right + 1, Arr_4) end end) > (case erlang:is_map(Arr_4) of true -> maps:get(Largest_3, Arr_4, nil); _ -> case Largest_3 < 0 of true -> mochi_nth(erlang:length(Arr_4) + Largest_3 + 1, Arr_4); _ -> mochi_nth(Largest_3 + 1, Arr_4) end end))) of
        true -> Largest_4 = Right,
            Largest_5 = Largest_4;
        _ -> Largest_5 = Largest_3
    end,
        case (Largest_5 /= Index) of
        true -> Temp = (case erlang:is_map(Arr_4) of true -> maps:get(Index, Arr_4, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Arr_4) + Index + 1, Arr_4); _ -> mochi_nth(Index + 1, Arr_4) end end),
            Arr_5 = lists:sublist(Arr_4, Index) ++ [(case erlang:is_map(Arr_4) of true -> maps:get(Largest_5, Arr_4, nil); _ -> case Largest_5 < 0 of true -> mochi_nth(erlang:length(Arr_4) + Largest_5 + 1, Arr_4); _ -> mochi_nth(Largest_5 + 1, Arr_4) end end)] ++ lists:nthtail(Index + 1, Arr_4),
            Arr_6 = lists:sublist(Arr_5, Largest_5) ++ [Temp] ++ lists:nthtail(Largest_5 + 1, Arr_5),
            Arr_7 = heapify(Arr_6, Largest_5, Heap_size),
            Arr_8 = Arr_7,
            Temp_2 = Temp;
        _ -> Arr_8 = Arr_4,
            Temp_2 = nil
    end,
        Arr_8
    catch {return, RetCatch} -> RetCatch end.

heap_sort(A_3) ->
    try
        Arr_9 = A_3,
        N = erlang:length(Arr_9),
        case (N =< 1) of
        true -> throw({return, Arr_9});
        _ -> ok
    end,
        I_3 = (N div 2),
        Fun_3 = fun Fun_3_loop(A_3, Arr_9, I_3, N) ->
    case true of
        true ->
            try
                Arr_10 = heapify(Arr_9, I_3, N),
                case (I_3 == 0) of
        true -> throw({break, A_3, Arr_10, I_3, N});
        _ -> ok
    end,
                I_4 = (I_3 - 1),
                Fun_3_loop(A_3, Arr_10, I_4, N)
            catch
                {continue, C0, C1, C2, C3} -> Fun_3_loop(C0, C1, C2, C3);
                {break, B0, B1, B2, B3} -> {B0, B1, B2, B3}
            end;
        _ -> {A_3, Arr_9, I_3, N}
    end
end,
{A_3, Arr_10, I_4, N} = Fun_3(A_3, Arr_9, I_3, N),
        I_5 = (N - 1),
        Fun_4 = fun Fun_4_loop(A_3, Arr_10, I_5, N) ->
    case (I_5 > 0) of
        true ->
            Temp_3 = (case erlang:is_map(Arr_10) of true -> maps:get(0, Arr_10, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr_10) + 0 + 1, Arr_10); _ -> mochi_nth(0 + 1, Arr_10) end end),
            Arr_11 = lists:sublist(Arr_10, 0) ++ [(case erlang:is_map(Arr_10) of true -> maps:get(I_5, Arr_10, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Arr_10) + I_5 + 1, Arr_10); _ -> mochi_nth(I_5 + 1, Arr_10) end end)] ++ lists:nthtail(0 + 1, Arr_10),
            Arr_12 = lists:sublist(Arr_11, I_5) ++ [Temp_3] ++ lists:nthtail(I_5 + 1, Arr_11),
            Arr_13 = heapify(Arr_12, 0, I_5),
            I_6 = (I_5 - 1),
            Fun_4_loop(A_3, Arr_13, I_6, N);
        _ -> {A_3, Arr_10, I_5, N}
    end
end,
{A_3, Arr_13, I_6, N} = Fun_4(A_3, Arr_10, I_5, N),
        Arr_13
    catch {return, RetCatch} -> RetCatch end.

median_of_3(Arr_14, First, Middle, Last) ->
    try
        A_4 = (case erlang:is_map(Arr_14) of true -> maps:get(First, Arr_14, nil); _ -> case First < 0 of true -> mochi_nth(erlang:length(Arr_14) + First + 1, Arr_14); _ -> mochi_nth(First + 1, Arr_14) end end),
        B = (case erlang:is_map(Arr_14) of true -> maps:get(Middle, Arr_14, nil); _ -> case Middle < 0 of true -> mochi_nth(erlang:length(Arr_14) + Middle + 1, Arr_14); _ -> mochi_nth(Middle + 1, Arr_14) end end),
        C = (case erlang:is_map(Arr_14) of true -> maps:get(Last, Arr_14, nil); _ -> case Last < 0 of true -> mochi_nth(erlang:length(Arr_14) + Last + 1, Arr_14); _ -> mochi_nth(Last + 1, Arr_14) end end),
        case (((A_4 > B) andalso (A_4 < C)) orelse ((A_4 < B) andalso (A_4 > C))) of
        true -> throw({return, A_4});
        _ -> case (((B > A_4) andalso (B < C)) orelse ((B < A_4) andalso (B > C))) of
        true -> throw({return, B});
        _ -> throw({return, C})
    end
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

partition(Arr_15, Low, High, Pivot) ->
    try
        I_7 = Low,
        J_3 = High,
        Fun_7 = fun Fun_7_loop(Arr_15, High, I_7, J_3, Low, Pivot) ->
    case true of
        true ->
            Fun_5 = fun Fun_5_loop(Arr_15, High, I_7, J_3, Low, Pivot) ->
    case ((case erlang:is_map(Arr_15) of true -> maps:get(I_7, Arr_15, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Arr_15) + I_7 + 1, Arr_15); _ -> mochi_nth(I_7 + 1, Arr_15) end end) < Pivot) of
        true ->
            I_8 = (I_7 + 1),
            Fun_5_loop(Arr_15, High, I_8, J_3, Low, Pivot);
        _ -> {Arr_15, High, I_7, J_3, Low, Pivot}
    end
end,
{Arr_15, High, I_8, J_3, Low, Pivot} = Fun_5(Arr_15, High, I_7, J_3, Low, Pivot),
            J_4 = (J_3 - 1),
            Fun_6 = fun Fun_6_loop(Arr_15, High, I_8, J_4, Low, Pivot) ->
    case (Pivot < (case erlang:is_map(Arr_15) of true -> maps:get(J_4, Arr_15, nil); _ -> case J_4 < 0 of true -> mochi_nth(erlang:length(Arr_15) + J_4 + 1, Arr_15); _ -> mochi_nth(J_4 + 1, Arr_15) end end)) of
        true ->
            J_5 = (J_4 - 1),
            Fun_6_loop(Arr_15, High, I_8, J_5, Low, Pivot);
        _ -> {Arr_15, High, I_8, J_4, Low, Pivot}
    end
end,
{Arr_15, High, I_8, J_5, Low, Pivot} = Fun_6(Arr_15, High, I_8, J_4, Low, Pivot),
            case (I_8 >= J_5) of
        true -> throw({return, I_8});
        _ -> ok
    end,
            Temp_4 = (case erlang:is_map(Arr_15) of true -> maps:get(I_8, Arr_15, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Arr_15) + I_8 + 1, Arr_15); _ -> mochi_nth(I_8 + 1, Arr_15) end end),
            Arr_16 = lists:sublist(Arr_15, I_8) ++ [(case erlang:is_map(Arr_15) of true -> maps:get(J_5, Arr_15, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Arr_15) + J_5 + 1, Arr_15); _ -> mochi_nth(J_5 + 1, Arr_15) end end)] ++ lists:nthtail(I_8 + 1, Arr_15),
            Arr_17 = lists:sublist(Arr_16, J_5) ++ [Temp_4] ++ lists:nthtail(J_5 + 1, Arr_16),
            I_9 = (I_8 + 1),
            Fun_7_loop(Arr_17, High, I_9, J_5, Low, Pivot);
        _ -> {Arr_15, High, I_7, J_3, Low, Pivot}
    end
end,
{Arr_17, High, I_9, J_5, Low, Pivot} = Fun_7(Arr_15, High, I_7, J_3, Low, Pivot),
        {nil, Arr_17}
    catch {return, RetCatch} -> RetCatch end.

int_log2(N_2) ->
    try
        V = N_2,
        R = 0,
        Fun_8 = fun Fun_8_loop(N_2, R, V) ->
    case (V > 1) of
        true ->
            V_2 = (V div 2),
            R_2 = (R + 1),
            Fun_8_loop(N_2, R_2, V_2);
        _ -> {N_2, R, V}
    end
end,
{N_2, R_2, V_2} = Fun_8(N_2, R, V),
        R_2
    catch {return, RetCatch} -> RetCatch end.

intro_sort(Arr_18, Start_2, End__2, Size_threshold, Max_depth) ->
    try
        Array = Arr_18,
        S = Start_2,
        E = End__2,
        Depth = Max_depth,
        Fun_9 = fun Fun_9_loop(Arr_18, Array, Depth, E, End__2, Max_depth, S, Size_threshold, Start_2) ->
    case ((E - S) > Size_threshold) of
        true ->
            case (Depth == 0) of
        true -> throw({return, heap_sort(Array)});
        _ -> ok
    end,
            Depth_2 = (Depth - 1),
            Pivot_2 = median_of_3(Array, S, ((S + ((E - S) div 2)) + 1), (E - 1)),
            P = partition(Array, S, E, Pivot_2),
            Array_2 = intro_sort(Array, P, E, Size_threshold, Depth_2),
            E_2 = P,
            Fun_9_loop(Arr_18, Array_2, Depth_2, E_2, End__2, Max_depth, S, Size_threshold, Start_2);
        _ -> {Arr_18, Array, Depth, E, End__2, Max_depth, S, Size_threshold, Start_2}
    end
end,
{Arr_18, Array_2, Depth_2, E_2, End__2, Max_depth, S, Size_threshold, Start_2} = Fun_9(Arr_18, Array, Depth, E, End__2, Max_depth, S, Size_threshold, Start_2),
        Res = insertion_sort(Array_2, S, E_2),
        _ = erlang:length(Res),
        Res
    catch {return, RetCatch} -> RetCatch end.

intro_sort_main(Arr_19) ->
    try
        case (erlang:length(Arr_19) == 0) of
        true -> io:format("~ts~n", [mochi_repr(Arr_19)]),
            throw({return, nil});
        _ -> ok
    end,
        Max_depth_2 = (2 * int_log2(erlang:length(Arr_19))),
        Sorted = intro_sort(Arr_19, 0, erlang:length(Arr_19), 16, Max_depth_2),
        io:format("~ts~n", [mochi_repr(Sorted)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('example1', [4, 2, 6, 8, 1, 7, 8, 22, 14, 56, 27, 79, 23, 45, 14, 12]),
    intro_sort_main(erlang:get('example1')),
    erlang:put('example2', [21, 15, 11, 45, -2, -11, 46]),
    intro_sort_main(erlang:get('example2')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
