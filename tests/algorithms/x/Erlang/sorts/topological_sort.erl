#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, topological_sort/3, main/0]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

topological_sort(Start, Visited, Sort) ->
    try
        Visited_2 = maps:put(Start, true, Visited),
        Neighbors = maps:get(Start, erlang:get('edges'), nil),
        I = 0,
        Fun = fun Fun_loop(I, Neighbors, Sort, Start, Visited_2) ->
    case (I < erlang:length(Neighbors)) of
        true ->
            Neighbor = (case erlang:is_map(Neighbors) of true -> maps:get(I, Neighbors, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Neighbors) + I + 1, Neighbors); _ -> mochi_nth(I + 1, Neighbors) end end),
            case mochi_not(maps:is_key(Neighbor, Visited_2)) of
        true -> Sort_2 = topological_sort(Neighbor, Visited_2, Sort),
            Sort_3 = Sort_2;
        _ -> Sort_3 = Sort
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Neighbors, Sort_3, Start, Visited_2);
        _ -> {I, Neighbors, Sort, Start, Visited_2}
    end
end,
{I_2, Neighbors, Sort_3, Start, Visited_2} = Fun(I, Neighbors, Sort, Start, Visited_2),
        Sort_4 = lists:append((case Sort_3 of nil -> []; _ -> Sort_3 end), [Start]),
        case (maps:size(Visited_2) /= erlang:length(erlang:get('vertices'))) of
        true -> J = 0,
            Fun_2 = fun Fun_2_loop(I_2, J, Neighbors, Sort_4, Start, Visited_2) ->
    case (J < erlang:length(erlang:get('vertices'))) of
        true ->
            V = (case erlang:is_map(erlang:get('vertices')) of true -> maps:get(J, erlang:get('vertices'), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(erlang:get('vertices')) + J + 1, erlang:get('vertices')); _ -> mochi_nth(J + 1, erlang:get('vertices')) end end),
            case mochi_not(maps:is_key(V, Visited_2)) of
        true -> Sort_5 = topological_sort(V, Visited_2, Sort_4),
            Sort_6 = Sort_5;
        _ -> Sort_6 = Sort_4
    end,
            J_2 = (J + 1),
            Fun_2_loop(I_2, J_2, Neighbors, Sort_6, Start, Visited_2);
        _ -> {I_2, J, Neighbors, Sort_4, Start, Visited_2}
    end
end,
{I_2, J_2, Neighbors, Sort_6, Start, Visited_2} = Fun_2(I_2, J, Neighbors, Sort_4, Start, Visited_2),
            Fun_3 = Fun_2,
            J_3 = J_2,
            Sort_7 = Sort_6;
        _ -> Fun_3 = Fun,
            J_3 = nil,
            Sort_7 = Sort_4
    end,
        Sort_7
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Result = topological_sort("a", #{}, []),
        io:format("~ts~n", [mochi_str(Result)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('edges', #{"a" => ["c", "b"], "b" => ["d", "e"], "c" => [], "d" => [], "e" => []}),
    erlang:put('vertices', ["a", "b", "c", "d", "e"]),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
