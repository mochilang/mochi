#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, copy_list/1, insertion_sort/1, merge/2, tim_sort/1, list_to_string/1]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

copy_list(Xs) ->
    try
        Res = [],
        K = 0,
        Fun = fun Fun_loop(K, Res, Xs) ->
    case (K < erlang:length(Xs)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(K, Xs, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Xs) + K + 1, Xs); _ -> mochi_nth(K + 1, Xs) end end)]),
            K_2 = (K + 1),
            Fun_loop(K_2, Res_2, Xs);
        _ -> {K, Res, Xs}
    end
end,
{K_2, Res_2, Xs} = Fun(K, Res, Xs),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

insertion_sort(Xs_2) ->
    try
        Arr = copy_list(Xs_2),
        Idx = 1,
        Fun_3 = fun Fun_3_loop(Arr, Idx, Xs_2) ->
    case (Idx < erlang:length(Arr)) of
        true ->
            Value = (case erlang:is_map(Arr) of true -> maps:get(Idx, Arr, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Arr) + Idx + 1, Arr); _ -> mochi_nth(Idx + 1, Arr) end end),
            Jdx = (Idx - 1),
            Fun_2 = fun Fun_2_loop(Arr, Idx, Jdx, Value, Xs_2) ->
    case ((Jdx >= 0) andalso ((case erlang:is_map(Arr) of true -> maps:get(Jdx, Arr, nil); _ -> case Jdx < 0 of true -> mochi_nth(erlang:length(Arr) + Jdx + 1, Arr); _ -> mochi_nth(Jdx + 1, Arr) end end) > Value)) of
        true ->
            Arr_2 = lists:sublist(Arr, (Jdx + 1)) ++ [(case erlang:is_map(Arr) of true -> maps:get(Jdx, Arr, nil); _ -> case Jdx < 0 of true -> mochi_nth(erlang:length(Arr) + Jdx + 1, Arr); _ -> mochi_nth(Jdx + 1, Arr) end end)] ++ lists:nthtail((Jdx + 1) + 1, Arr),
            Jdx_2 = (Jdx - 1),
            Fun_2_loop(Arr_2, Idx, Jdx_2, Value, Xs_2);
        _ -> {Arr, Idx, Jdx, Value, Xs_2}
    end
end,
{Arr_2, Idx, Jdx_2, Value, Xs_2} = Fun_2(Arr, Idx, Jdx, Value, Xs_2),
            Arr_3 = lists:sublist(Arr_2, (Jdx_2 + 1)) ++ [Value] ++ lists:nthtail((Jdx_2 + 1) + 1, Arr_2),
            Idx_2 = (Idx + 1),
            Fun_3_loop(Arr_3, Idx_2, Xs_2);
        _ -> {Arr, Idx, Xs_2}
    end
end,
{Arr_3, Idx_2, Xs_2} = Fun_3(Arr, Idx, Xs_2),
        Arr_3
    catch {return, RetCatch} -> RetCatch end.

merge(Left, Right) ->
    try
        Result = [],
        I = 0,
        J = 0,
        Fun_4 = fun Fun_4_loop(I, J, Left, Result, Right) ->
    case ((I < erlang:length(Left)) andalso (J < erlang:length(Right))) of
        true ->
            case ((case erlang:is_map(Left) of true -> maps:get(I, Left, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Left) + I + 1, Left); _ -> mochi_nth(I + 1, Left) end end) < (case erlang:is_map(Right) of true -> maps:get(J, Right, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Right) + J + 1, Right); _ -> mochi_nth(J + 1, Right) end end)) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Left) of true -> maps:get(I, Left, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Left) + I + 1, Left); _ -> mochi_nth(I + 1, Left) end end)]),
            I_2 = (I + 1),
            I_3 = I_2,
            J_3 = J,
            Result_4 = Result_2;
        _ -> Result_3 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Right) of true -> maps:get(J, Right, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Right) + J + 1, Right); _ -> mochi_nth(J + 1, Right) end end)]),
            J_2 = (J + 1),
            I_3 = I,
            J_3 = J_2,
            Result_4 = Result_3
    end,
            Fun_4_loop(I_3, J_3, Left, Result_4, Right);
        _ -> {I, J, Left, Result, Right}
    end
end,
{I_3, J_3, Left, Result_4, Right} = Fun_4(I, J, Left, Result, Right),
        Fun_5 = fun Fun_5_loop(I_3, J_3, Left, Result_4, Right) ->
    case (I_3 < erlang:length(Left)) of
        true ->
            Result_5 = lists:append((case Result_4 of nil -> []; _ -> Result_4 end), [(case erlang:is_map(Left) of true -> maps:get(I_3, Left, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Left) + I_3 + 1, Left); _ -> mochi_nth(I_3 + 1, Left) end end)]),
            I_4 = (I_3 + 1),
            Fun_5_loop(I_4, J_3, Left, Result_5, Right);
        _ -> {I_3, J_3, Left, Result_4, Right}
    end
end,
{I_4, J_3, Left, Result_5, Right} = Fun_5(I_3, J_3, Left, Result_4, Right),
        Fun_6 = fun Fun_6_loop(I_4, J_3, Left, Result_5, Right) ->
    case (J_3 < erlang:length(Right)) of
        true ->
            Result_6 = lists:append((case Result_5 of nil -> []; _ -> Result_5 end), [(case erlang:is_map(Right) of true -> maps:get(J_3, Right, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Right) + J_3 + 1, Right); _ -> mochi_nth(J_3 + 1, Right) end end)]),
            J_4 = (J_3 + 1),
            Fun_6_loop(I_4, J_4, Left, Result_6, Right);
        _ -> {I_4, J_3, Left, Result_5, Right}
    end
end,
{I_4, J_4, Left, Result_6, Right} = Fun_6(I_4, J_3, Left, Result_5, Right),
        Result_6
    catch {return, RetCatch} -> RetCatch end.

tim_sort(Xs_3) ->
    try
        N = erlang:length(Xs_3),
        Runs = [],
        Sorted_runs = [],
        Current = [],
        Current_2 = lists:append((case Current of nil -> []; _ -> Current end), [(case erlang:is_map(Xs_3) of true -> maps:get(0, Xs_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Xs_3) + 0 + 1, Xs_3); _ -> mochi_nth(0 + 1, Xs_3) end end)]),
        I_5 = 1,
        Fun_7 = fun Fun_7_loop(Current_2, I_5, N, Runs, Sorted_runs, Xs_3) ->
    case (I_5 < N) of
        true ->
            case ((case erlang:is_map(Xs_3) of true -> maps:get(I_5, Xs_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Xs_3) + I_5 + 1, Xs_3); _ -> mochi_nth(I_5 + 1, Xs_3) end end) < (case erlang:is_map(Xs_3) of true -> maps:get((I_5 - 1), Xs_3, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Xs_3) + (I_5 - 1) + 1, Xs_3); _ -> mochi_nth((I_5 - 1) + 1, Xs_3) end end)) of
        true -> Runs_2 = lists:append((case Runs of nil -> []; _ -> Runs end), [copy_list(Current_2)]),
            Current_3 = [],
            Current_4 = lists:append((case Current_3 of nil -> []; _ -> Current_3 end), [(case erlang:is_map(Xs_3) of true -> maps:get(I_5, Xs_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Xs_3) + I_5 + 1, Xs_3); _ -> mochi_nth(I_5 + 1, Xs_3) end end)]),
            Current_6 = Current_4,
            Runs_3 = Runs_2;
        _ -> Current_5 = lists:append((case Current_2 of nil -> []; _ -> Current_2 end), [(case erlang:is_map(Xs_3) of true -> maps:get(I_5, Xs_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Xs_3) + I_5 + 1, Xs_3); _ -> mochi_nth(I_5 + 1, Xs_3) end end)]),
            Current_6 = Current_5,
            Runs_3 = Runs
    end,
            I_6 = (I_5 + 1),
            Fun_7_loop(Current_6, I_6, N, Runs_3, Sorted_runs, Xs_3);
        _ -> {Current_2, I_5, N, Runs, Sorted_runs, Xs_3}
    end
end,
{Current_6, I_6, N, Runs_3, Sorted_runs, Xs_3} = Fun_7(Current_2, I_5, N, Runs, Sorted_runs, Xs_3),
        Runs_4 = lists:append((case Runs_3 of nil -> []; _ -> Runs_3 end), [copy_list(Current_6)]),
        R = 0,
        Fun_8 = fun Fun_8_loop(Current_6, I_6, N, R, Runs_4, Sorted_runs, Xs_3) ->
    case (R < erlang:length(Runs_4)) of
        true ->
            Sorted_runs_2 = lists:append((case Sorted_runs of nil -> []; _ -> Sorted_runs end), [insertion_sort((case erlang:is_map(Runs_4) of true -> maps:get(R, Runs_4, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Runs_4) + R + 1, Runs_4); _ -> mochi_nth(R + 1, Runs_4) end end))]),
            R_2 = (R + 1),
            Fun_8_loop(Current_6, I_6, N, R_2, Runs_4, Sorted_runs_2, Xs_3);
        _ -> {Current_6, I_6, N, R, Runs_4, Sorted_runs, Xs_3}
    end
end,
{Current_6, I_6, N, R_2, Runs_4, Sorted_runs_2, Xs_3} = Fun_8(Current_6, I_6, N, R, Runs_4, Sorted_runs, Xs_3),
        Result_7 = [],
        R_3 = 0,
        Fun_9 = fun Fun_9_loop(Current_6, I_6, N, R_3, Result_7, Runs_4, Sorted_runs_2, Xs_3) ->
    case (R_3 < erlang:length(Sorted_runs_2)) of
        true ->
            Result_8 = merge(Result_7, (case erlang:is_map(Sorted_runs_2) of true -> maps:get(R_3, Sorted_runs_2, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Sorted_runs_2) + R_3 + 1, Sorted_runs_2); _ -> mochi_nth(R_3 + 1, Sorted_runs_2) end end)),
            R_4 = (R_3 + 1),
            Fun_9_loop(Current_6, I_6, N, R_4, Result_8, Runs_4, Sorted_runs_2, Xs_3);
        _ -> {Current_6, I_6, N, R_3, Result_7, Runs_4, Sorted_runs_2, Xs_3}
    end
end,
{Current_6, I_6, N, R_4, Result_8, Runs_4, Sorted_runs_2, Xs_3} = Fun_9(Current_6, I_6, N, R_3, Result_7, Runs_4, Sorted_runs_2, Xs_3),
        Result_8
    catch {return, RetCatch} -> RetCatch end.

list_to_string(Xs_4) ->
    try
        S = "[",
        K_3 = 0,
        Fun_10 = fun Fun_10_loop(K_3, S, Xs_4) ->
    case (K_3 < erlang:length(Xs_4)) of
        true ->
            S_2 = (S ++ mochi_str((case erlang:is_map(Xs_4) of true -> maps:get(K_3, Xs_4, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Xs_4) + K_3 + 1, Xs_4); _ -> mochi_nth(K_3 + 1, Xs_4) end end))),
            case (K_3 < (erlang:length(Xs_4) - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            K_4 = (K_3 + 1),
            Fun_10_loop(K_4, S_4, Xs_4);
        _ -> {K_3, S, Xs_4}
    end
end,
{K_4, S_4, Xs_4} = Fun_10(K_3, S, Xs_4),
        (S_4 ++ "]")
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('sample', [5, 9, 10, 3, -4, 5, 178, 92, 46, -18, 0, 7]),
    erlang:put('sorted_sample', tim_sort(erlang:get('sample'))),
    io:format("~ts~n", [mochi_repr(list_to_string(erlang:get('sorted_sample')))]),
    erlang:put('sample2', [3, 2, 1]),
    erlang:put('sorted_sample2', tim_sort(erlang:get('sample2'))),
    io:format("~ts~n", [mochi_repr(list_to_string(erlang:get('sorted_sample2')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
