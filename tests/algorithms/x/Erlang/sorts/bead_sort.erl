#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bead_sort/1]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

bead_sort(Sequence) ->
    try
        N = erlang:length(Sequence),
        I = 0,
        Fun = fun Fun_loop(I, N, Sequence) ->
    case (I < N) of
        true ->
            case ((case erlang:is_map(Sequence) of true -> maps:get(I, Sequence, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sequence) + I + 1, Sequence); _ -> mochi_nth(I + 1, Sequence) end end) < 0) of
        true -> erlang:error({panic, "Sequence must be list of non-negative integers"});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, N, Sequence);
        _ -> {I, N, Sequence}
    end
end,
{I_2, N, Sequence} = Fun(I, N, Sequence),
        Pass = 0,
        Fun_3 = fun Fun_3_loop(I_2, N, Pass, Sequence) ->
    case (Pass < N) of
        true ->
            J = 0,
            Fun_2 = fun Fun_2_loop(I_2, J, N, Pass, Sequence) ->
    case (J < (N - 1)) of
        true ->
            Upper = (case erlang:is_map(Sequence) of true -> maps:get(J, Sequence, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Sequence) + J + 1, Sequence); _ -> mochi_nth(J + 1, Sequence) end end),
            Lower = (case erlang:is_map(Sequence) of true -> maps:get((J + 1), Sequence, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Sequence) + (J + 1) + 1, Sequence); _ -> mochi_nth((J + 1) + 1, Sequence) end end),
            case (Upper > Lower) of
        true -> Diff = (Upper - Lower),
            Sequence_2 = lists:sublist(Sequence, J) ++ [(Upper - Diff)] ++ lists:nthtail(J + 1, Sequence),
            Sequence_3 = lists:sublist(Sequence_2, (J + 1)) ++ [(Lower + Diff)] ++ lists:nthtail((J + 1) + 1, Sequence_2),
            Diff_2 = Diff,
            Sequence_4 = Sequence_3;
        _ -> Diff_2 = nil,
            Sequence_4 = Sequence
    end,
            J_2 = (J + 1),
            Fun_2_loop(I_2, J_2, N, Pass, Sequence_4);
        _ -> {I_2, J, N, Pass, Sequence}
    end
end,
{I_2, J_2, N, Pass, Sequence_4} = Fun_2(I_2, J, N, Pass, Sequence),
            Pass_2 = (Pass + 1),
            Fun_3_loop(I_2, N, Pass_2, Sequence_4);
        _ -> {I_2, N, Pass, Sequence}
    end
end,
{I_2, N, Pass_2, Sequence_4} = Fun_3(I_2, N, Pass, Sequence),
        Sequence_4
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(bead_sort([6, 11, 12, 4, 1, 5]))]),
    io:format("~ts~n", [mochi_str(bead_sort([9, 8, 7, 6, 5, 4, 3, 2, 1]))]),
    io:format("~ts~n", [mochi_str(bead_sort([5, 0, 4, 3]))]),
    io:format("~ts~n", [mochi_str(bead_sort([8, 2, 1]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
