#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, quick_sort/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

quick_sort(Items) ->
    try
        case (erlang:length(Items) < 2) of
        true -> throw({return, Items});
        _ -> ok
    end,
        Pivot = (case erlang:is_map(Items) of true -> maps:get(0, Items, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Items) + 0 + 1, Items); _ -> mochi_nth(0 + 1, Items) end end),
        Lesser = [],
        Greater = [],
        I = 1,
        Fun = fun Fun_loop(Greater, I, Items, Lesser, Pivot) ->
    case (I < erlang:length(Items)) of
        true ->
            Item = (case erlang:is_map(Items) of true -> maps:get(I, Items, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Items) + I + 1, Items); _ -> mochi_nth(I + 1, Items) end end),
            case (Item =< Pivot) of
        true -> Lesser_2 = lists:append((case Lesser of nil -> []; _ -> Lesser end), [Item]),
            Greater_3 = Greater,
            Lesser_3 = Lesser_2;
        _ -> Greater_2 = lists:append((case Greater of nil -> []; _ -> Greater end), [Item]),
            Greater_3 = Greater_2,
            Lesser_3 = Lesser
    end,
            I_2 = (I + 1),
            Fun_loop(Greater_3, I_2, Items, Lesser_3, Pivot);
        _ -> {Greater, I, Items, Lesser, Pivot}
    end
end,
{Greater_3, I_2, Items, Lesser_3, Pivot} = Fun(Greater, I, Items, Lesser, Pivot),
        lists:append(lists:append(quick_sort(Lesser_3), [Pivot]), quick_sort(Greater_3))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts ~ts~n", [mochi_repr("sorted1:"), mochi_repr(quick_sort([0, 5, 3, 2, 2]))]),
    io:format("~ts ~ts~n", [mochi_repr("sorted2:"), mochi_repr(quick_sort([]))]),
    io:format("~ts ~ts~n", [mochi_repr("sorted3:"), mochi_repr(quick_sort([-2, 5, 0, -45]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
