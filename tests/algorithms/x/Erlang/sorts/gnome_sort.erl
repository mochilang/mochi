#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, gnome_sort/1]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

gnome_sort(Lst) ->
    try
        case (erlang:length(Lst) =< 1) of
        true -> throw({return, Lst});
        _ -> ok
    end,
        I = 1,
        Fun = fun Fun_loop(I, Lst) ->
    case (I < erlang:length(Lst)) of
        true ->
            case ((case erlang:is_map(Lst) of true -> maps:get((I - 1), Lst, nil); _ -> case (I - 1) < 0 of true -> mochi_nth(erlang:length(Lst) + (I - 1) + 1, Lst); _ -> mochi_nth((I - 1) + 1, Lst) end end) =< (case erlang:is_map(Lst) of true -> maps:get(I, Lst, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Lst) + I + 1, Lst); _ -> mochi_nth(I + 1, Lst) end end)) of
        true -> I_2 = (I + 1),
            I_6 = I_2,
            Lst_4 = Lst,
            Tmp_2 = nil;
        _ -> Tmp = (case erlang:is_map(Lst) of true -> maps:get((I - 1), Lst, nil); _ -> case (I - 1) < 0 of true -> mochi_nth(erlang:length(Lst) + (I - 1) + 1, Lst); _ -> mochi_nth((I - 1) + 1, Lst) end end),
            Lst_2 = lists:sublist(Lst, (I - 1)) ++ [(case erlang:is_map(Lst) of true -> maps:get(I, Lst, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Lst) + I + 1, Lst); _ -> mochi_nth(I + 1, Lst) end end)] ++ lists:nthtail((I - 1) + 1, Lst),
            Lst_3 = lists:sublist(Lst_2, I) ++ [Tmp] ++ lists:nthtail(I + 1, Lst_2),
            I_3 = (I - 1),
            case (I_3 == 0) of
        true -> I_4 = 1,
            I_5 = I_4;
        _ -> I_5 = I_3
    end,
            I_6 = I_5,
            Lst_4 = Lst_3,
            Tmp_2 = Tmp
    end,
            Fun_loop(I_6, Lst_4);
        _ -> {I, Lst}
    end
end,
{I_6, Lst_4} = Fun(I, Lst),
        Lst_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(gnome_sort([0, 5, 3, 2, 2]))]),
    io:format("~ts~n", [mochi_repr(gnome_sort([]))]),
    io:format("~ts~n", [mochi_repr(gnome_sort([-2, -5, -45]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
