#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, odd_even_sort/1, print_list/1, test_odd_even_sort/0, main/0]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

odd_even_sort(Xs) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, I_2, Xs);
        _ -> {Arr, I, Xs}
    end
end,
{Arr_2, I_2, Xs} = Fun(Arr, I, Xs),
        N = erlang:length(Arr_2),
        Sorted = false,
        Fun_4 = fun Fun_4_loop(Arr_2, I_2, N, Sorted, Xs) ->
    case (Sorted == false) of
        true ->
            Sorted_2 = true,
            J = 0,
            Fun_2 = fun Fun_2_loop(Arr_2, I_2, J, N, Sorted_2, Xs) ->
    case (J < (N - 1)) of
        true ->
            case ((case erlang:is_map(Arr_2) of true -> maps:get(J, Arr_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr_2) + J + 1, Arr_2); _ -> mochi_nth(J + 1, Arr_2) end end) > (case erlang:is_map(Arr_2) of true -> maps:get((J + 1), Arr_2, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr_2) + (J + 1) + 1, Arr_2); _ -> mochi_nth((J + 1) + 1, Arr_2) end end)) of
        true -> Tmp = (case erlang:is_map(Arr_2) of true -> maps:get(J, Arr_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr_2) + J + 1, Arr_2); _ -> mochi_nth(J + 1, Arr_2) end end),
            Arr_3 = lists:sublist(Arr_2, J) ++ [(case erlang:is_map(Arr_2) of true -> maps:get((J + 1), Arr_2, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr_2) + (J + 1) + 1, Arr_2); _ -> mochi_nth((J + 1) + 1, Arr_2) end end)] ++ lists:nthtail(J + 1, Arr_2),
            Arr_4 = lists:sublist(Arr_3, (J + 1)) ++ [Tmp] ++ lists:nthtail((J + 1) + 1, Arr_3),
            Sorted_3 = false,
            Arr_5 = Arr_4,
            Sorted_4 = Sorted_3,
            Tmp_2 = Tmp;
        _ -> Arr_5 = Arr_2,
            Sorted_4 = Sorted_2,
            Tmp_2 = nil
    end,
            J_2 = (J + 2),
            Fun_2_loop(Arr_5, I_2, J_2, N, Sorted_4, Xs);
        _ -> {Arr_2, I_2, J, N, Sorted_2, Xs}
    end
end,
{Arr_5, I_2, J_2, N, Sorted_4, Xs} = Fun_2(Arr_2, I_2, J, N, Sorted_2, Xs),
            J_3 = 1,
            Fun_3 = fun Fun_3_loop(Arr_5, I_2, J_3, N, Sorted_4, Xs) ->
    case (J_3 < (N - 1)) of
        true ->
            case ((case erlang:is_map(Arr_5) of true -> maps:get(J_3, Arr_5, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Arr_5) + J_3 + 1, Arr_5); _ -> mochi_nth(J_3 + 1, Arr_5) end end) > (case erlang:is_map(Arr_5) of true -> maps:get((J_3 + 1), Arr_5, nil); _ -> case (J_3 + 1) < 0 of true -> mochi_nth(erlang:length(Arr_5) + (J_3 + 1) + 1, Arr_5); _ -> mochi_nth((J_3 + 1) + 1, Arr_5) end end)) of
        true -> Tmp_3 = (case erlang:is_map(Arr_5) of true -> maps:get(J_3, Arr_5, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Arr_5) + J_3 + 1, Arr_5); _ -> mochi_nth(J_3 + 1, Arr_5) end end),
            Arr_6 = lists:sublist(Arr_5, J_3) ++ [(case erlang:is_map(Arr_5) of true -> maps:get((J_3 + 1), Arr_5, nil); _ -> case (J_3 + 1) < 0 of true -> mochi_nth(erlang:length(Arr_5) + (J_3 + 1) + 1, Arr_5); _ -> mochi_nth((J_3 + 1) + 1, Arr_5) end end)] ++ lists:nthtail(J_3 + 1, Arr_5),
            Arr_7 = lists:sublist(Arr_6, (J_3 + 1)) ++ [Tmp_3] ++ lists:nthtail((J_3 + 1) + 1, Arr_6),
            Sorted_5 = false,
            Arr_8 = Arr_7,
            Sorted_6 = Sorted_5,
            Tmp_4 = Tmp_3;
        _ -> Arr_8 = Arr_5,
            Sorted_6 = Sorted_4,
            Tmp_4 = nil
    end,
            J_4 = (J_3 + 2),
            Fun_3_loop(Arr_8, I_2, J_4, N, Sorted_6, Xs);
        _ -> {Arr_5, I_2, J_3, N, Sorted_4, Xs}
    end
end,
{Arr_8, I_2, J_4, N, Sorted_6, Xs} = Fun_3(Arr_5, I_2, J_3, N, Sorted_4, Xs),
            Fun_4_loop(Arr_8, I_2, N, Sorted_6, Xs);
        _ -> {Arr_2, I_2, N, Sorted, Xs}
    end
end,
{Arr_8, I_2, N, Sorted_6, Xs} = Fun_4(Arr_2, I_2, N, Sorted, Xs),
        Arr_8
    catch {return, RetCatch} -> RetCatch end.

print_list(Xs_2) ->
    try
        I_3 = 0,
        Out = "",
        Fun_5 = fun Fun_5_loop(I_3, Out, Xs_2) ->
    case (I_3 < erlang:length(Xs_2)) of
        true ->
            case (I_3 > 0) of
        true -> Out_2 = (Out ++ " "),
            Out_3 = Out_2;
        _ -> Out_3 = Out
    end,
            Out_4 = (Out_3 ++ mochi_str((case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_3 + 1, Xs_2); _ -> mochi_nth(I_3 + 1, Xs_2) end end))),
            I_4 = (I_3 + 1),
            Fun_5_loop(I_4, Out_4, Xs_2);
        _ -> {I_3, Out, Xs_2}
    end
end,
{I_4, Out_4, Xs_2} = Fun_5(I_3, Out, Xs_2),
        io:format("~ts~n", [mochi_repr(Out_4)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

test_odd_even_sort() ->
    try
        A = [5, 4, 3, 2, 1],
        R1 = odd_even_sort(A),
        case ((((((case erlang:is_map(R1) of true -> maps:get(0, R1, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(R1) + 0 + 1, R1); _ -> mochi_nth(0 + 1, R1) end end) /= 1) orelse ((case erlang:is_map(R1) of true -> maps:get(1, R1, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(R1) + 1 + 1, R1); _ -> mochi_nth(1 + 1, R1) end end) /= 2)) orelse ((case erlang:is_map(R1) of true -> maps:get(2, R1, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(R1) + 2 + 1, R1); _ -> mochi_nth(2 + 1, R1) end end) /= 3)) orelse ((case erlang:is_map(R1) of true -> maps:get(3, R1, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(R1) + 3 + 1, R1); _ -> mochi_nth(3 + 1, R1) end end) /= 4)) orelse ((case erlang:is_map(R1) of true -> maps:get(4, R1, nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(R1) + 4 + 1, R1); _ -> mochi_nth(4 + 1, R1) end end) /= 5)) of
        true -> erlang:error({panic, "case1 failed"});
        _ -> ok
    end,
        B = [],
        R2 = odd_even_sort(B),
        case (erlang:length(R2) /= 0) of
        true -> erlang:error({panic, "case2 failed"});
        _ -> ok
    end,
        C = [-10, -1, 10, 2],
        R3 = odd_even_sort(C),
        case (((((case erlang:is_map(R3) of true -> maps:get(0, R3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(R3) + 0 + 1, R3); _ -> mochi_nth(0 + 1, R3) end end) /= -10) orelse ((case erlang:is_map(R3) of true -> maps:get(1, R3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(R3) + 1 + 1, R3); _ -> mochi_nth(1 + 1, R3) end end) /= -1)) orelse ((case erlang:is_map(R3) of true -> maps:get(2, R3, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(R3) + 2 + 1, R3); _ -> mochi_nth(2 + 1, R3) end end) /= 2)) orelse ((case erlang:is_map(R3) of true -> maps:get(3, R3, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(R3) + 3 + 1, R3); _ -> mochi_nth(3 + 1, R3) end end) /= 10)) of
        true -> erlang:error({panic, "case3 failed"});
        _ -> ok
    end,
        D = [1, 2, 3, 4],
        R4 = odd_even_sort(D),
        case (((((case erlang:is_map(R4) of true -> maps:get(0, R4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(R4) + 0 + 1, R4); _ -> mochi_nth(0 + 1, R4) end end) /= 1) orelse ((case erlang:is_map(R4) of true -> maps:get(1, R4, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(R4) + 1 + 1, R4); _ -> mochi_nth(1 + 1, R4) end end) /= 2)) orelse ((case erlang:is_map(R4) of true -> maps:get(2, R4, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(R4) + 2 + 1, R4); _ -> mochi_nth(2 + 1, R4) end end) /= 3)) orelse ((case erlang:is_map(R4) of true -> maps:get(3, R4, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(R4) + 3 + 1, R4); _ -> mochi_nth(3 + 1, R4) end end) /= 4)) of
        true -> erlang:error({panic, "case4 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_odd_even_sort(),
        Sample = [5, 4, 3, 2, 1],
        Sorted_7 = odd_even_sort(Sample),
        print_list(Sorted_7),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
