#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, get_bit_length/1, max_bit_length/1, get_bit/2, msd_radix_sort/2, msd_radix_sort/1, msd_radix_sort_inplace/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

get_bit_length(N) ->
    try
        case (N == 0) of
        true -> throw({return, 1});
        _ -> ok
    end,
        Length = 0,
        Num = N,
        Fun = fun Fun_loop(Length, N, Num) ->
    case (Num > 0) of
        true ->
            Length_2 = (Length + 1),
            Num_2 = (Num div 2),
            Fun_loop(Length_2, N, Num_2);
        _ -> {Length, N, Num}
    end
end,
{Length_2, N, Num_2} = Fun(Length, N, Num),
        Length_2
    catch {return, RetCatch} -> RetCatch end.

max_bit_length(Nums) ->
    try
        I = 0,
        Max_len = 0,
        Fun_2 = fun Fun_2_loop(I, Max_len, Nums) ->
    case (I < erlang:length(Nums)) of
        true ->
            L = get_bit_length((case erlang:is_map(Nums) of true -> maps:get(I, Nums, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Nums) + I + 1, Nums); _ -> mochi_nth(I + 1, Nums) end end)),
            case (L > Max_len) of
        true -> Max_len_2 = L,
            Max_len_3 = Max_len_2;
        _ -> Max_len_3 = Max_len
    end,
            I_2 = (I + 1),
            Fun_2_loop(I_2, Max_len_3, Nums);
        _ -> {I, Max_len, Nums}
    end
end,
{I_2, Max_len_3, Nums} = Fun_2(I, Max_len, Nums),
        Max_len_3
    catch {return, RetCatch} -> RetCatch end.

get_bit(Num_3, Pos) ->
    try
        N_2 = Num_3,
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, N_2, Num_3, Pos) ->
    case (I_3 < Pos) of
        true ->
            N_3 = (N_2 div 2),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, N_3, Num_3, Pos);
        _ -> {I_3, N_2, Num_3, Pos}
    end
end,
{I_4, N_3, Num_3, Pos} = Fun_3(I_3, N_2, Num_3, Pos),
        mochi_mod(N_3, 2)
    catch {return, RetCatch} -> RetCatch end.

msd_radix_sort(Nums_2, Bit_position) ->
    try
        case ((Bit_position == 0) orelse (erlang:length(Nums_2) =< 1)) of
        true -> throw({return, Nums_2});
        _ -> ok
    end,
        Zeros = [],
        Ones = [],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Bit_position, I_5, Nums_2, Ones, Zeros) ->
    case (I_5 < erlang:length(Nums_2)) of
        true ->
            Num_4 = (case erlang:is_map(Nums_2) of true -> maps:get(I_5, Nums_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Nums_2) + I_5 + 1, Nums_2); _ -> mochi_nth(I_5 + 1, Nums_2) end end),
            case (get_bit(Num_4, (Bit_position - 1)) == 1) of
        true -> Ones_2 = lists:append((case Ones of nil -> []; _ -> Ones end), [Num_4]),
            Ones_3 = Ones_2,
            Zeros_3 = Zeros;
        _ -> Zeros_2 = lists:append((case Zeros of nil -> []; _ -> Zeros end), [Num_4]),
            Ones_3 = Ones,
            Zeros_3 = Zeros_2
    end,
            I_6 = (I_5 + 1),
            Fun_4_loop(Bit_position, I_6, Nums_2, Ones_3, Zeros_3);
        _ -> {Bit_position, I_5, Nums_2, Ones, Zeros}
    end
end,
{Bit_position, I_6, Nums_2, Ones_3, Zeros_3} = Fun_4(Bit_position, I_5, Nums_2, Ones, Zeros),
        Zeros_4 = msd_radix_sort(Zeros_3, (Bit_position - 1)),
        Ones_4 = msd_radix_sort(Ones_3, (Bit_position - 1)),
        Res = Zeros_4,
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(Bit_position, I_7, Nums_2, Ones_4, Res, Zeros_4) ->
    case (I_7 < erlang:length(Ones_4)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Ones_4) of true -> maps:get(I_7, Ones_4, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Ones_4) + I_7 + 1, Ones_4); _ -> mochi_nth(I_7 + 1, Ones_4) end end)]),
            I_8 = (I_7 + 1),
            Fun_5_loop(Bit_position, I_8, Nums_2, Ones_4, Res_2, Zeros_4);
        _ -> {Bit_position, I_7, Nums_2, Ones_4, Res, Zeros_4}
    end
end,
{Bit_position, I_8, Nums_2, Ones_4, Res_2, Zeros_4} = Fun_5(Bit_position, I_7, Nums_2, Ones_4, Res, Zeros_4),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

msd_radix_sort(Nums_3) ->
    try
        case (erlang:length(Nums_3) == 0) of
        true -> throw({return, []});
        _ -> ok
    end,
        I_9 = 0,
        Fun_6 = fun Fun_6_loop(I_9, Nums_3) ->
    case (I_9 < erlang:length(Nums_3)) of
        true ->
            case ((case erlang:is_map(Nums_3) of true -> maps:get(I_9, Nums_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Nums_3) + I_9 + 1, Nums_3); _ -> mochi_nth(I_9 + 1, Nums_3) end end) < 0) of
        true -> erlang:error({panic, "All numbers must be positive"});
        _ -> ok
    end,
            I_10 = (I_9 + 1),
            Fun_6_loop(I_10, Nums_3);
        _ -> {I_9, Nums_3}
    end
end,
{I_10, Nums_3} = Fun_6(I_9, Nums_3),
        Bits = max_bit_length(Nums_3),
        Result = msd_radix_sort(Nums_3, Bits),
        Result
    catch {return, RetCatch} -> RetCatch end.

msd_radix_sort_inplace(Nums_4) ->
    try
        msd_radix_sort(Nums_4)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ex1', [40, 12, 1, 100, 4]),
    erlang:put('sorted1', msd_radix_sort(erlang:get('ex1'))),
    io:format("~ts~n", [mochi_str(erlang:get('sorted1'))]),
    erlang:put('ex2', []),
    erlang:put('sorted2', msd_radix_sort(erlang:get('ex2'))),
    io:format("~ts~n", [mochi_str(erlang:get('sorted2'))]),
    erlang:put('ex3', [123, 345, 123, 80]),
    erlang:put('sorted3', msd_radix_sort(erlang:get('ex3'))),
    io:format("~ts~n", [mochi_str(erlang:get('sorted3'))]),
    erlang:put('ex4', [1209, 834598, 1, 540402, 45]),
    erlang:put('sorted4', msd_radix_sort(erlang:get('ex4'))),
    io:format("~ts~n", [mochi_str(erlang:get('sorted4'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
