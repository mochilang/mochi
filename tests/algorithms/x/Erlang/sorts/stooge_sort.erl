#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, stooge/3, stooge_sort/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

stooge(Arr, I, H) ->
    try
        case (I >= H) of
        true -> throw({return, nil});
        _ -> ok
    end,
        case ((case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end) > (case erlang:is_map(Arr) of true -> maps:get(H, Arr, nil); _ -> case H < 0 of true -> mochi_nth(erlang:length(Arr) + H + 1, Arr); _ -> mochi_nth(H + 1, Arr) end end)) of
        true -> Tmp = (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, I) ++ [(case erlang:is_map(Arr) of true -> maps:get(H, Arr, nil); _ -> case H < 0 of true -> mochi_nth(erlang:length(Arr) + H + 1, Arr); _ -> mochi_nth(H + 1, Arr) end end)] ++ lists:nthtail(I + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, H) ++ [Tmp] ++ lists:nthtail(H + 1, Arr_2),
            Arr_4 = Arr_3,
            Tmp_2 = Tmp;
        _ -> Arr_4 = Arr,
            Tmp_2 = nil
    end,
        case (((H - I) + 1) > 2) of
        true -> T = mochi_to_int((((H - I) + 1) div 3)),
            stooge(Arr_4, I, (H - T)),
            stooge(Arr_4, (I + T), H),
            stooge(Arr_4, I, (H - T)),
            T_2 = T;
        _ -> T_2 = nil
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

stooge_sort(Arr_5) ->
    try
        stooge(Arr_5, 0, (erlang:length(Arr_5) - 1)),
        Arr_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(stooge_sort([18, 0, -7, -1, 2, 2]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
