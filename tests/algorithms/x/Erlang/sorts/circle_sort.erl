#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, circle_sort_util/3, circle_sort/1]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

circle_sort_util(Collection, Low, High) ->
    try
        Swapped = false,
        case (Low == High) of
        true -> throw({return, Swapped});
        _ -> ok
    end,
        Left = Low,
        Right = High,
        Fun = fun Fun_loop(Collection, High, Left, Low, Right, Swapped) ->
    case (Left < Right) of
        true ->
            case ((case erlang:is_map(Collection) of true -> maps:get(Left, Collection, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Collection) + Left + 1, Collection); _ -> mochi_nth(Left + 1, Collection) end end) > (case erlang:is_map(Collection) of true -> maps:get(Right, Collection, nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(Collection) + Right + 1, Collection); _ -> mochi_nth(Right + 1, Collection) end end)) of
        true -> Tmp = (case erlang:is_map(Collection) of true -> maps:get(Left, Collection, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Collection) + Left + 1, Collection); _ -> mochi_nth(Left + 1, Collection) end end),
            Collection_2 = lists:sublist(Collection, Left) ++ [(case erlang:is_map(Collection) of true -> maps:get(Right, Collection, nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(Collection) + Right + 1, Collection); _ -> mochi_nth(Right + 1, Collection) end end)] ++ lists:nthtail(Left + 1, Collection),
            Collection_3 = lists:sublist(Collection_2, Right) ++ [Tmp] ++ lists:nthtail(Right + 1, Collection_2),
            Swapped_2 = true,
            Collection_4 = Collection_3,
            Swapped_3 = Swapped_2,
            Tmp_2 = Tmp;
        _ -> Collection_4 = Collection,
            Swapped_3 = Swapped,
            Tmp_2 = nil
    end,
            Left_2 = (Left + 1),
            Right_2 = (Right - 1),
            Fun_loop(Collection_4, High, Left_2, Low, Right_2, Swapped_3);
        _ -> {Collection, High, Left, Low, Right, Swapped}
    end
end,
{Collection_4, High, Left_2, Low, Right_2, Swapped_3} = Fun(Collection, High, Left, Low, Right, Swapped),
        case ((Left_2 == Right_2) andalso ((case erlang:is_map(Collection_4) of true -> maps:get(Left_2, Collection_4, nil); _ -> case Left_2 < 0 of true -> mochi_nth(erlang:length(Collection_4) + Left_2 + 1, Collection_4); _ -> mochi_nth(Left_2 + 1, Collection_4) end end) > (case erlang:is_map(Collection_4) of true -> maps:get((Right_2 + 1), Collection_4, nil); _ -> case (Right_2 + 1) < 0 of true -> mochi_nth(erlang:length(Collection_4) + (Right_2 + 1) + 1, Collection_4); _ -> mochi_nth((Right_2 + 1) + 1, Collection_4) end end))) of
        true -> Tmp2 = (case erlang:is_map(Collection_4) of true -> maps:get(Left_2, Collection_4, nil); _ -> case Left_2 < 0 of true -> mochi_nth(erlang:length(Collection_4) + Left_2 + 1, Collection_4); _ -> mochi_nth(Left_2 + 1, Collection_4) end end),
            Collection_5 = lists:sublist(Collection_4, Left_2) ++ [(case erlang:is_map(Collection_4) of true -> maps:get((Right_2 + 1), Collection_4, nil); _ -> case (Right_2 + 1) < 0 of true -> mochi_nth(erlang:length(Collection_4) + (Right_2 + 1) + 1, Collection_4); _ -> mochi_nth((Right_2 + 1) + 1, Collection_4) end end)] ++ lists:nthtail(Left_2 + 1, Collection_4),
            Collection_6 = lists:sublist(Collection_5, (Right_2 + 1)) ++ [Tmp2] ++ lists:nthtail((Right_2 + 1) + 1, Collection_5),
            Swapped_4 = true,
            Collection_7 = Collection_6,
            Swapped_5 = Swapped_4,
            Tmp2_2 = Tmp2;
        _ -> Collection_7 = Collection_4,
            Swapped_5 = Swapped_3,
            Tmp2_2 = nil
    end,
        Mid = (Low + ((High - Low) div 2)),
        Left_swap = circle_sort_util(Collection_7, Low, Mid),
        Right_swap = circle_sort_util(Collection_7, (Mid + 1), High),
        case ((Swapped_5 orelse Left_swap) orelse Right_swap) of
        true -> throw({return, true});
        _ -> throw({return, false})
    end,
        nil
    catch {return, Ret} -> Ret end.

circle_sort(Collection_8) ->
    try
        case (erlang:length(Collection_8) < 2) of
        true -> throw({return, Collection_8});
        _ -> ok
    end,
        Is_not_sorted = true,
        Fun_2 = fun Fun_2_loop(Collection_8, Is_not_sorted) ->
    case Is_not_sorted of
        true ->
            Is_not_sorted_2 = circle_sort_util(Collection_8, 0, (erlang:length(Collection_8) - 1)),
            Fun_2_loop(Collection_8, Is_not_sorted_2);
        _ -> {Collection_8, Is_not_sorted}
    end
end,
{Collection_8, Is_not_sorted_2} = Fun_2(Collection_8, Is_not_sorted),
        Collection_8
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(circle_sort([0, 5, 3, 2, 2]))]),
    io:format("~ts~n", [mochi_str(circle_sort([]))]),
    io:format("~ts~n", [mochi_str(circle_sort([-2, 5, 0, -45]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
