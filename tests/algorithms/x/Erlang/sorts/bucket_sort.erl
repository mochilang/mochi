#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, int_to_float/1, floor_int/1, set_at_float/3, set_at_list_float/3, sort_float/1, bucket_sort_with_count/2, bucket_sort/1]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

int_to_float(X) ->
    try
        mochi_safe_mul(X, 1.0)
    catch {return, RetCatch} -> RetCatch end.

floor_int(X_2) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, X_2) ->
    case (int_to_float((I + 1)) =< X_2) of
        true ->
            I_2 = (I + 1),
            Fun_loop(I_2, X_2);
        _ -> {I, X_2}
    end
end,
{I_2, X_2} = Fun(I, X_2),
        I_2
    catch {return, RetCatch} -> RetCatch end.

set_at_float(Xs, Idx, Value) ->
    try
        I_3 = 0,
        Res = [],
        Fun_2 = fun Fun_2_loop(I_3, Idx, Res, Value, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            case (I_3 == Idx) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Value]),
            Res_4 = Res_2;
        _ -> Res_3 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end)]),
            Res_4 = Res_3
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Idx, Res_4, Value, Xs);
        _ -> {I_3, Idx, Res, Value, Xs}
    end
end,
{I_4, Idx, Res_4, Value, Xs} = Fun_2(I_3, Idx, Res, Value, Xs),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

set_at_list_float(Xs_2, Idx_2, Value_2) ->
    try
        I_5 = 0,
        Res_5 = [],
        Fun_3 = fun Fun_3_loop(I_5, Idx_2, Res_5, Value_2, Xs_2) ->
    case (I_5 < erlang:length(Xs_2)) of
        true ->
            case (I_5 == Idx_2) of
        true -> Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [Value_2]),
            Res_8 = Res_6;
        _ -> Res_7 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [(case erlang:is_map(Xs_2) of true -> maps:get(I_5, Xs_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_5 + 1, Xs_2); _ -> mochi_nth(I_5 + 1, Xs_2) end end)]),
            Res_8 = Res_7
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Idx_2, Res_8, Value_2, Xs_2);
        _ -> {I_5, Idx_2, Res_5, Value_2, Xs_2}
    end
end,
{I_6, Idx_2, Res_8, Value_2, Xs_2} = Fun_3(I_5, Idx_2, Res_5, Value_2, Xs_2),
        Res_8
    catch {return, RetCatch} -> RetCatch end.

sort_float(Xs_3) ->
    try
        Res_9 = Xs_3,
        I_7 = 1,
        Fun_5 = fun Fun_5_loop(I_7, Res_9, Xs_3) ->
    case (I_7 < erlang:length(Res_9)) of
        true ->
            Key = (case erlang:is_map(Res_9) of true -> maps:get(I_7, Res_9, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Res_9) + I_7 + 1, Res_9); _ -> mochi_nth(I_7 + 1, Res_9) end end),
            J = (I_7 - 1),
            Fun_4 = fun Fun_4_loop(I_7, J, Key, Res_9, Xs_3) ->
    case ((J >= 0) andalso ((case erlang:is_map(Res_9) of true -> maps:get(J, Res_9, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Res_9) + J + 1, Res_9); _ -> mochi_nth(J + 1, Res_9) end end) > Key)) of
        true ->
            Res_10 = set_at_float(Res_9, (J + 1), (case erlang:is_map(Res_9) of true -> maps:get(J, Res_9, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Res_9) + J + 1, Res_9); _ -> mochi_nth(J + 1, Res_9) end end)),
            J_2 = (J - 1),
            Fun_4_loop(I_7, J_2, Key, Res_10, Xs_3);
        _ -> {I_7, J, Key, Res_9, Xs_3}
    end
end,
{I_7, J_2, Key, Res_10, Xs_3} = Fun_4(I_7, J, Key, Res_9, Xs_3),
            Res_11 = set_at_float(Res_10, (J_2 + 1), Key),
            I_8 = (I_7 + 1),
            Fun_5_loop(I_8, Res_11, Xs_3);
        _ -> {I_7, Res_9, Xs_3}
    end
end,
{I_8, Res_11, Xs_3} = Fun_5(I_7, Res_9, Xs_3),
        Res_11
    catch {return, RetCatch} -> RetCatch end.

bucket_sort_with_count(Xs_4, Bucket_count) ->
    try
        case ((erlang:length(Xs_4) == 0) orelse (Bucket_count =< 0)) of
        true -> throw({return, []});
        _ -> ok
    end,
        Min_value = (case erlang:is_map(Xs_4) of true -> maps:get(0, Xs_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Xs_4) + 0 + 1, Xs_4); _ -> mochi_nth(0 + 1, Xs_4) end end),
        Max_value = (case erlang:is_map(Xs_4) of true -> maps:get(0, Xs_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Xs_4) + 0 + 1, Xs_4); _ -> mochi_nth(0 + 1, Xs_4) end end),
        I_9 = 1,
        Fun_6 = fun Fun_6_loop(Bucket_count, I_9, Max_value, Min_value, Xs_4) ->
    case (I_9 < erlang:length(Xs_4)) of
        true ->
            case ((case erlang:is_map(Xs_4) of true -> maps:get(I_9, Xs_4, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Xs_4) + I_9 + 1, Xs_4); _ -> mochi_nth(I_9 + 1, Xs_4) end end) < Min_value) of
        true -> Min_value_2 = (case erlang:is_map(Xs_4) of true -> maps:get(I_9, Xs_4, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Xs_4) + I_9 + 1, Xs_4); _ -> mochi_nth(I_9 + 1, Xs_4) end end),
            Min_value_3 = Min_value_2;
        _ -> Min_value_3 = Min_value
    end,
            case ((case erlang:is_map(Xs_4) of true -> maps:get(I_9, Xs_4, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Xs_4) + I_9 + 1, Xs_4); _ -> mochi_nth(I_9 + 1, Xs_4) end end) > Max_value) of
        true -> Max_value_2 = (case erlang:is_map(Xs_4) of true -> maps:get(I_9, Xs_4, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Xs_4) + I_9 + 1, Xs_4); _ -> mochi_nth(I_9 + 1, Xs_4) end end),
            Max_value_3 = Max_value_2;
        _ -> Max_value_3 = Max_value
    end,
            I_10 = (I_9 + 1),
            Fun_6_loop(Bucket_count, I_10, Max_value_3, Min_value_3, Xs_4);
        _ -> {Bucket_count, I_9, Max_value, Min_value, Xs_4}
    end
end,
{Bucket_count, I_10, Max_value_3, Min_value_3, Xs_4} = Fun_6(Bucket_count, I_9, Max_value, Min_value, Xs_4),
        case (Max_value_3 == Min_value_3) of
        true -> throw({return, Xs_4});
        _ -> ok
    end,
        Bucket_size = mochi_safe_div((Max_value_3 - Min_value_3), int_to_float(Bucket_count)),
        Buckets = [],
        I_11 = 0,
        Fun_7 = fun Fun_7_loop(Bucket_count, Bucket_size, Buckets, I_11, Max_value_3, Min_value_3, Xs_4) ->
    case (I_11 < Bucket_count) of
        true ->
            Buckets_2 = lists:append((case Buckets of nil -> []; _ -> Buckets end), [[]]),
            I_12 = (I_11 + 1),
            Fun_7_loop(Bucket_count, Bucket_size, Buckets_2, I_12, Max_value_3, Min_value_3, Xs_4);
        _ -> {Bucket_count, Bucket_size, Buckets, I_11, Max_value_3, Min_value_3, Xs_4}
    end
end,
{Bucket_count, Bucket_size, Buckets_2, I_12, Max_value_3, Min_value_3, Xs_4} = Fun_7(Bucket_count, Bucket_size, Buckets, I_11, Max_value_3, Min_value_3, Xs_4),
        I_13 = 0,
        Fun_8 = fun Fun_8_loop(Bucket_count, Bucket_size, Buckets_2, I_13, Max_value_3, Min_value_3, Xs_4) ->
    case (I_13 < erlang:length(Xs_4)) of
        true ->
            Val = (case erlang:is_map(Xs_4) of true -> maps:get(I_13, Xs_4, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Xs_4) + I_13 + 1, Xs_4); _ -> mochi_nth(I_13 + 1, Xs_4) end end),
            Idx_3 = floor_int(mochi_safe_div((Val - Min_value_3), Bucket_size)),
            case (Idx_3 < 0) of
        true -> Idx_4 = 0,
            Idx_5 = Idx_4;
        _ -> Idx_5 = Idx_3
    end,
            case (Idx_5 >= Bucket_count) of
        true -> Idx_6 = (Bucket_count - 1),
            Idx_7 = Idx_6;
        _ -> Idx_7 = Idx_5
    end,
            Bucket = (case erlang:is_map(Buckets_2) of true -> maps:get(Idx_7, Buckets_2, nil); _ -> case Idx_7 < 0 of true -> mochi_nth(erlang:length(Buckets_2) + Idx_7 + 1, Buckets_2); _ -> mochi_nth(Idx_7 + 1, Buckets_2) end end),
            Bucket_2 = lists:append((case Bucket of nil -> []; _ -> Bucket end), [Val]),
            Buckets_3 = set_at_list_float(Buckets_2, Idx_7, Bucket_2),
            I_14 = (I_13 + 1),
            Fun_8_loop(Bucket_count, Bucket_size, Buckets_3, I_14, Max_value_3, Min_value_3, Xs_4);
        _ -> {Bucket_count, Bucket_size, Buckets_2, I_13, Max_value_3, Min_value_3, Xs_4}
    end
end,
{Bucket_count, Bucket_size, Buckets_3, I_14, Max_value_3, Min_value_3, Xs_4} = Fun_8(Bucket_count, Bucket_size, Buckets_2, I_13, Max_value_3, Min_value_3, Xs_4),
        Result = [],
        I_15 = 0,
        Fun_10 = fun Fun_10_loop(Bucket_count, Bucket_size, Buckets_3, I_15, Max_value_3, Min_value_3, Result, Xs_4) ->
    case (I_15 < erlang:length(Buckets_3)) of
        true ->
            Sorted_bucket = sort_float((case erlang:is_map(Buckets_3) of true -> maps:get(I_15, Buckets_3, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Buckets_3) + I_15 + 1, Buckets_3); _ -> mochi_nth(I_15 + 1, Buckets_3) end end)),
            J_3 = 0,
            Fun_9 = fun Fun_9_loop(Bucket_count, Bucket_size, Buckets_3, I_15, J_3, Max_value_3, Min_value_3, Result, Sorted_bucket, Xs_4) ->
    case (J_3 < erlang:length(Sorted_bucket)) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Sorted_bucket) of true -> maps:get(J_3, Sorted_bucket, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Sorted_bucket) + J_3 + 1, Sorted_bucket); _ -> mochi_nth(J_3 + 1, Sorted_bucket) end end)]),
            J_4 = (J_3 + 1),
            Fun_9_loop(Bucket_count, Bucket_size, Buckets_3, I_15, J_4, Max_value_3, Min_value_3, Result_2, Sorted_bucket, Xs_4);
        _ -> {Bucket_count, Bucket_size, Buckets_3, I_15, J_3, Max_value_3, Min_value_3, Result, Sorted_bucket, Xs_4}
    end
end,
{Bucket_count, Bucket_size, Buckets_3, I_15, J_4, Max_value_3, Min_value_3, Result_2, Sorted_bucket, Xs_4} = Fun_9(Bucket_count, Bucket_size, Buckets_3, I_15, J_3, Max_value_3, Min_value_3, Result, Sorted_bucket, Xs_4),
            I_16 = (I_15 + 1),
            Fun_10_loop(Bucket_count, Bucket_size, Buckets_3, I_16, Max_value_3, Min_value_3, Result_2, Xs_4);
        _ -> {Bucket_count, Bucket_size, Buckets_3, I_15, Max_value_3, Min_value_3, Result, Xs_4}
    end
end,
{Bucket_count, Bucket_size, Buckets_3, I_16, Max_value_3, Min_value_3, Result_2, Xs_4} = Fun_10(Bucket_count, Bucket_size, Buckets_3, I_15, Max_value_3, Min_value_3, Result, Xs_4),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

bucket_sort(Xs_5) ->
    try
        bucket_sort_with_count(Xs_5, 10)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(bucket_sort([-1.0, 2.0, -5.0, 0.0]))]),
    io:format("~ts~n", [mochi_str(bucket_sort([9.0, 8.0, 7.0, 6.0, -12.0]))]),
    io:format("~ts~n", [mochi_str(bucket_sort([0.4, 1.2, 0.1, 0.2, -0.9]))]),
    io:format("~ts~n", [mochi_str(bucket_sort([]))]),
    io:format("~ts~n", [mochi_str(bucket_sort([-10000000000.0, 10000000000.0]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
