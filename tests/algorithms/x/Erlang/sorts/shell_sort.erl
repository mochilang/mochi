#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, shell_sort/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

shell_sort(Collection) ->
    try
        Arr = Collection,
        Gaps = [701, 301, 132, 57, 23, 10, 4, 1],
        G = 0,
        Fun_3 = fun Fun_3_loop(Arr, Collection, G, Gaps) ->
    case (G < erlang:length(Gaps)) of
        true ->
            Gap = (case erlang:is_map(Gaps) of true -> maps:get(G, Gaps, nil); _ -> case G < 0 of true -> mochi_nth(erlang:length(Gaps) + G + 1, Gaps); _ -> mochi_nth(G + 1, Gaps) end end),
            I = Gap,
            Fun_2 = fun Fun_2_loop(Arr, Collection, G, Gap, Gaps, I) ->
    case (I < erlang:length(Arr)) of
        true ->
            Insert_value = (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end),
            J = I,
            Fun = fun Fun_loop(Arr, Collection, G, Gap, Gaps, I, Insert_value, J) ->
    case ((J >= Gap) andalso ((case erlang:is_map(Arr) of true -> maps:get((J - Gap), Arr, nil); _ -> case (J - Gap) < 0 of true -> mochi_nth(erlang:length(Arr) + (J - Gap) + 1, Arr); _ -> mochi_nth((J - Gap) + 1, Arr) end end) > Insert_value)) of
        true ->
            Arr_2 = lists:sublist(Arr, J) ++ [(case erlang:is_map(Arr) of true -> maps:get((J - Gap), Arr, nil); _ -> case (J - Gap) < 0 of true -> mochi_nth(erlang:length(Arr) + (J - Gap) + 1, Arr); _ -> mochi_nth((J - Gap) + 1, Arr) end end)] ++ lists:nthtail(J + 1, Arr),
            J_2 = (J - Gap),
            Fun_loop(Arr_2, Collection, G, Gap, Gaps, I, Insert_value, J_2);
        _ -> {Arr, Collection, G, Gap, Gaps, I, Insert_value, J}
    end
end,
{Arr_2, Collection, G, Gap, Gaps, I, Insert_value, J_2} = Fun(Arr, Collection, G, Gap, Gaps, I, Insert_value, J),
            case (J_2 /= I) of
        true -> Arr_3 = lists:sublist(Arr_2, J_2) ++ [Insert_value] ++ lists:nthtail(J_2 + 1, Arr_2),
            Arr_4 = Arr_3;
        _ -> Arr_4 = Arr_2
    end,
            I_2 = (I + 1),
            Fun_2_loop(Arr_4, Collection, G, Gap, Gaps, I_2);
        _ -> {Arr, Collection, G, Gap, Gaps, I}
    end
end,
{Arr_4, Collection, G, Gap, Gaps, I_2} = Fun_2(Arr, Collection, G, Gap, Gaps, I),
            G_2 = (G + 1),
            Fun_3_loop(Arr_4, Collection, G_2, Gaps);
        _ -> {Arr, Collection, G, Gaps}
    end
end,
{Arr_4, Collection, G_2, Gaps} = Fun_3(Arr, Collection, G, Gaps),
        Arr_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(shell_sort([0, 5, 3, 2, 2]))]),
    io:format("~ts~n", [mochi_str(shell_sort([]))]),
    io:format("~ts~n", [mochi_str(shell_sort([-2, -5, -45]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
