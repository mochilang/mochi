#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, swap/3, slowsort_recursive/3, slow_sort/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

swap(Seq, I, J) ->
    try
        Temp = (case erlang:is_map(Seq) of true -> maps:get(I, Seq, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Seq) + I + 1, Seq); _ -> mochi_nth(I + 1, Seq) end end),
        Seq_2 = lists:sublist(Seq, I) ++ [(case erlang:is_map(Seq) of true -> maps:get(J, Seq, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Seq) + J + 1, Seq); _ -> mochi_nth(J + 1, Seq) end end)] ++ lists:nthtail(I + 1, Seq),
        Seq_3 = lists:sublist(Seq_2, J) ++ [Temp] ++ lists:nthtail(J + 1, Seq_2),
        {nil, Seq_3}
    catch {return, RetCatch} -> RetCatch end.

slowsort_recursive(Seq_4, Start, End_index) ->
    try
        case (Start >= End_index) of
        true -> throw({return, nil});
        _ -> ok
    end,
        Mid = ((Start + End_index) div 2),
        slowsort_recursive(Seq_4, Start, Mid),
        slowsort_recursive(Seq_4, (Mid + 1), End_index),
        case ((case erlang:is_map(Seq_4) of true -> maps:get(End_index, Seq_4, nil); _ -> case End_index < 0 of true -> mochi_nth(erlang:length(Seq_4) + End_index + 1, Seq_4); _ -> mochi_nth(End_index + 1, Seq_4) end end) < (case erlang:is_map(Seq_4) of true -> maps:get(Mid, Seq_4, nil); _ -> case Mid < 0 of true -> mochi_nth(erlang:length(Seq_4) + Mid + 1, Seq_4); _ -> mochi_nth(Mid + 1, Seq_4) end end)) of
        true -> Seq_res = swap(Seq_4, End_index, Mid),
            Seq_tmp = element(2, Seq_res),
            Seq_4 = Seq_tmp,
            Seq_res_2 = Seq_res,
            Seq_tmp_2 = Seq_tmp;
        _ -> Seq_res_2 = nil,
            Seq_tmp_2 = nil
    end,
        slowsort_recursive(Seq_4, Start, (End_index - 1)),
        nil
    catch {return, RetCatch} -> RetCatch end.

slow_sort(Seq_5) ->
    try
        case (erlang:length(Seq_5) > 0) of
        true -> slowsort_recursive(Seq_5, 0, (erlang:length(Seq_5) - 1));
        _ -> ok
    end,
        Seq_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seq1', [1, 6, 2, 5, 3, 4, 4, 5]),
    io:format("~ts~n", [mochi_str(slow_sort(erlang:get('seq1')))]),
    erlang:put('seq2', []),
    io:format("~ts~n", [mochi_str(slow_sort(erlang:get('seq2')))]),
    erlang:put('seq3', [2]),
    io:format("~ts~n", [mochi_str(slow_sort(erlang:get('seq3')))]),
    erlang:put('seq4', [1, 2, 3, 4]),
    io:format("~ts~n", [mochi_str(slow_sort(erlang:get('seq4')))]),
    erlang:put('seq5', [4, 3, 2, 1]),
    io:format("~ts~n", [mochi_str(slow_sort(erlang:get('seq5')))]),
    erlang:put('seq6', [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]),
    slowsort_recursive(erlang:get('seq6'), 2, 7),
    io:format("~ts~n", [mochi_str(erlang:get('seq6'))]),
    erlang:put('seq7', [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]),
    slowsort_recursive(erlang:get('seq7'), 0, 4),
    io:format("~ts~n", [mochi_str(erlang:get('seq7'))]),
    erlang:put('seq8', [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]),
    slowsort_recursive(erlang:get('seq8'), 5, (erlang:length(erlang:get('seq8')) - 1)),
    io:format("~ts~n", [mochi_str(erlang:get('seq8'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
