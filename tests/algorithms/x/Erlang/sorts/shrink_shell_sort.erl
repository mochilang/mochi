#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, shell_sort/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

shell_sort(Collection) ->
    try
        Gap = erlang:length(Collection),
        Ten = 10,
        Thirteen = 13,
        Fun_3 = fun Fun_3_loop(Collection, Gap, Ten, Thirteen) ->
    case (Gap > 1) of
        true ->
            Gap_2 = ((Gap * Ten) div Thirteen),
            I = Gap_2,
            Fun_2 = fun Fun_2_loop(Collection, Gap_2, I, Ten, Thirteen) ->
    case (I < erlang:length(Collection)) of
        true ->
            Temp = (case erlang:is_map(Collection) of true -> maps:get(I, Collection, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Collection) + I + 1, Collection); _ -> mochi_nth(I + 1, Collection) end end),
            J = I,
            Fun = fun Fun_loop(Collection, Gap_2, I, J, Temp, Ten, Thirteen) ->
    case ((J >= Gap_2) andalso ((case erlang:is_map(Collection) of true -> maps:get((J - Gap_2), Collection, nil); _ -> case (J - Gap_2) < 0 of true -> mochi_nth(erlang:length(Collection) + (J - Gap_2) + 1, Collection); _ -> mochi_nth((J - Gap_2) + 1, Collection) end end) > Temp)) of
        true ->
            Collection_2 = lists:sublist(Collection, J) ++ [(case erlang:is_map(Collection) of true -> maps:get((J - Gap_2), Collection, nil); _ -> case (J - Gap_2) < 0 of true -> mochi_nth(erlang:length(Collection) + (J - Gap_2) + 1, Collection); _ -> mochi_nth((J - Gap_2) + 1, Collection) end end)] ++ lists:nthtail(J + 1, Collection),
            J_2 = (J - Gap_2),
            Fun_loop(Collection_2, Gap_2, I, J_2, Temp, Ten, Thirteen);
        _ -> {Collection, Gap_2, I, J, Temp, Ten, Thirteen}
    end
end,
{Collection_2, Gap_2, I, J_2, Temp, Ten, Thirteen} = Fun(Collection, Gap_2, I, J, Temp, Ten, Thirteen),
            Collection_3 = lists:sublist(Collection_2, J_2) ++ [Temp] ++ lists:nthtail(J_2 + 1, Collection_2),
            I_2 = (I + 1),
            Fun_2_loop(Collection_3, Gap_2, I_2, Ten, Thirteen);
        _ -> {Collection, Gap_2, I, Ten, Thirteen}
    end
end,
{Collection_3, Gap_2, I_2, Ten, Thirteen} = Fun_2(Collection, Gap_2, I, Ten, Thirteen),
            Fun_3_loop(Collection_3, Gap_2, Ten, Thirteen);
        _ -> {Collection, Gap, Ten, Thirteen}
    end
end,
{Collection_3, Gap_2, Ten, Thirteen} = Fun_3(Collection, Gap, Ten, Thirteen),
        Collection_3
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_str(shell_sort([3, 2, 1]))]),
        io:format("~ts~n", [mochi_str(shell_sort([]))]),
        io:format("~ts~n", [mochi_str(shell_sort([1]))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
