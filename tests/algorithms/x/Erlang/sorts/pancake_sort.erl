#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, flip/2, find_max_index/2, pancake_sort/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

flip(Arr, K) ->
    try
        Start = 0,
        End = K,
        Fun = fun Fun_loop(Arr, End, K, Start) ->
    case (Start < End) of
        true ->
            Temp = (case erlang:is_map(Arr) of true -> maps:get(Start, Arr, nil); _ -> case Start < 0 of true -> mochi_nth(erlang:length(Arr) + Start + 1, Arr); _ -> mochi_nth(Start + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, Start) ++ [(case erlang:is_map(Arr) of true -> maps:get(End, Arr, nil); _ -> case End < 0 of true -> mochi_nth(erlang:length(Arr) + End + 1, Arr); _ -> mochi_nth(End + 1, Arr) end end)] ++ lists:nthtail(Start + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, End) ++ [Temp] ++ lists:nthtail(End + 1, Arr_2),
            Start_2 = (Start + 1),
            End_2 = (End - 1),
            Fun_loop(Arr_3, End_2, K, Start_2);
        _ -> {Arr, End, K, Start}
    end
end,
{Arr_3, End_2, K, Start_2} = Fun(Arr, End, K, Start),
        Arr_3
    catch {return, RetCatch} -> RetCatch end.

find_max_index(Arr_4, N) ->
    try
        Mi = 0,
        I = 1,
        Fun_2 = fun Fun_2_loop(Arr_4, I, Mi, N) ->
    case (I < N) of
        true ->
            case ((case erlang:is_map(Arr_4) of true -> maps:get(I, Arr_4, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr_4) + I + 1, Arr_4); _ -> mochi_nth(I + 1, Arr_4) end end) > (case erlang:is_map(Arr_4) of true -> maps:get(Mi, Arr_4, nil); _ -> case Mi < 0 of true -> mochi_nth(erlang:length(Arr_4) + Mi + 1, Arr_4); _ -> mochi_nth(Mi + 1, Arr_4) end end)) of
        true -> Mi_2 = I,
            Mi_3 = Mi_2;
        _ -> Mi_3 = Mi
    end,
            I_2 = (I + 1),
            Fun_2_loop(Arr_4, I_2, Mi_3, N);
        _ -> {Arr_4, I, Mi, N}
    end
end,
{Arr_4, I_2, Mi_3, N} = Fun_2(Arr_4, I, Mi, N),
        Mi_3
    catch {return, RetCatch} -> RetCatch end.

pancake_sort(Arr_5) ->
    try
        Cur = erlang:length(Arr_5),
        Fun_3 = fun Fun_3_loop(Arr_5, Cur) ->
    case (Cur > 1) of
        true ->
            Mi_4 = find_max_index(Arr_5, Cur),
            Arr_6 = flip(Arr_5, Mi_4),
            Arr_7 = flip(Arr_6, (Cur - 1)),
            Cur_2 = (Cur - 1),
            Fun_3_loop(Arr_7, Cur_2);
        _ -> {Arr_5, Cur}
    end
end,
{Arr_7, Cur_2} = Fun_3(Arr_5, Cur),
        Arr_7
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Data = [3, 6, 1, 10, 2],
        Sorted = pancake_sort(Data),
        io:format("~ts~n", [mochi_str(Sorted)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
