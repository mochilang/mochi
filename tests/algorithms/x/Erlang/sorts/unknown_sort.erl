#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, list_min/1, list_max/1, remove_once/2, reverse_list/1, merge_sort/1, test_merge_sort/0, main/0]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

list_min(Xs) ->
    try
        I = 1,
        M = (case erlang:is_map(Xs) of true -> maps:get(0, Xs, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Xs) + 0 + 1, Xs); _ -> mochi_nth(0 + 1, Xs) end end),
        Fun = fun Fun_loop(I, M, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) < M) of
        true -> M_2 = (case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end),
            M_3 = M_2;
        _ -> M_3 = M
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, M_3, Xs);
        _ -> {I, M, Xs}
    end
end,
{I_2, M_3, Xs} = Fun(I, M, Xs),
        M_3
    catch {return, RetCatch} -> RetCatch end.

list_max(Xs_2) ->
    try
        I_3 = 1,
        M_4 = (case erlang:is_map(Xs_2) of true -> maps:get(0, Xs_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Xs_2) + 0 + 1, Xs_2); _ -> mochi_nth(0 + 1, Xs_2) end end),
        Fun_2 = fun Fun_2_loop(I_3, M_4, Xs_2) ->
    case (I_3 < erlang:length(Xs_2)) of
        true ->
            case ((case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_3 + 1, Xs_2); _ -> mochi_nth(I_3 + 1, Xs_2) end end) > M_4) of
        true -> M_5 = (case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_3 + 1, Xs_2); _ -> mochi_nth(I_3 + 1, Xs_2) end end),
            M_6 = M_5;
        _ -> M_6 = M_4
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, M_6, Xs_2);
        _ -> {I_3, M_4, Xs_2}
    end
end,
{I_4, M_6, Xs_2} = Fun_2(I_3, M_4, Xs_2),
        M_6
    catch {return, RetCatch} -> RetCatch end.

remove_once(Xs_3, Value) ->
    try
        Res = [],
        Removed = false,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Removed, Res, Value, Xs_3) ->
    case (I_5 < erlang:length(Xs_3)) of
        true ->
            case (mochi_not(Removed) andalso ((case erlang:is_map(Xs_3) of true -> maps:get(I_5, Xs_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Xs_3) + I_5 + 1, Xs_3); _ -> mochi_nth(I_5 + 1, Xs_3) end end) == Value)) of
        true -> Removed_2 = true,
            Removed_3 = Removed_2,
            Res_3 = Res;
        _ -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs_3) of true -> maps:get(I_5, Xs_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Xs_3) + I_5 + 1, Xs_3); _ -> mochi_nth(I_5 + 1, Xs_3) end end)]),
            Removed_3 = Removed,
            Res_3 = Res_2
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Removed_3, Res_3, Value, Xs_3);
        _ -> {I_5, Removed, Res, Value, Xs_3}
    end
end,
{I_6, Removed_3, Res_3, Value, Xs_3} = Fun_3(I_5, Removed, Res, Value, Xs_3),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

reverse_list(Xs_4) ->
    try
        Res_4 = [],
        I_7 = (erlang:length(Xs_4) - 1),
        Fun_4 = fun Fun_4_loop(I_7, Res_4, Xs_4) ->
    case (I_7 >= 0) of
        true ->
            Res_5 = lists:append((case Res_4 of nil -> []; _ -> Res_4 end), [(case erlang:is_map(Xs_4) of true -> maps:get(I_7, Xs_4, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Xs_4) + I_7 + 1, Xs_4); _ -> mochi_nth(I_7 + 1, Xs_4) end end)]),
            I_8 = (I_7 - 1),
            Fun_4_loop(I_8, Res_5, Xs_4);
        _ -> {I_7, Res_4, Xs_4}
    end
end,
{I_8, Res_5, Xs_4} = Fun_4(I_7, Res_4, Xs_4),
        Res_5
    catch {return, RetCatch} -> RetCatch end.

merge_sort(Collection) ->
    try
        Start = [],
        End = [],
        Coll = Collection,
        Fun_5 = fun Fun_5_loop(Coll, Collection, End, Start) ->
    case (erlang:length(Coll) > 1) of
        true ->
            Mn = list_min(Coll),
            Mx = list_max(Coll),
            Start_2 = lists:append((case Start of nil -> []; _ -> Start end), [Mn]),
            End_2 = lists:append((case End of nil -> []; _ -> End end), [Mx]),
            Coll_2 = remove_once(Coll, Mn),
            Coll_3 = remove_once(Coll_2, Mx),
            Fun_5_loop(Coll_3, Collection, End_2, Start_2);
        _ -> {Coll, Collection, End, Start}
    end
end,
{Coll_3, Collection, End_2, Start_2} = Fun_5(Coll, Collection, End, Start),
        End_3 = reverse_list(End_2),
        lists:append(lists:append(Start_2, Coll_3), End_3)
    catch {return, RetCatch} -> RetCatch end.

test_merge_sort() ->
    try
        case (merge_sort([0, 5, 3, 2, 2]) /= [0, 2, 2, 3, 5]) of
        true -> erlang:error({panic, "case1 failed"});
        _ -> ok
    end,
        case (merge_sort([]) /= []) of
        true -> erlang:error({panic, "case2 failed"});
        _ -> ok
    end,
        case (merge_sort([-2, -5, -45]) /= [-45, -5, -2]) of
        true -> erlang:error({panic, "case3 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_merge_sort(),
        io:format("~ts~n", [mochi_str(merge_sort([0, 5, 3, 2, 2]))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
