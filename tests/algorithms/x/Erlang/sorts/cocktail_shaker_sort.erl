#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, cocktail_shaker_sort/1]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

cocktail_shaker_sort(Arr) ->
    try
        Start = 0,
        End = (erlang:length(Arr) - 1),
        Fun_3 = fun Fun_3_loop(Arr, End, Start) ->
    case (Start < End) of
        true ->
            try
                Swapped = false,
                I = Start,
                Fun = fun Fun_loop(Arr, End, I, Start, Swapped) ->
    case (I < End) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end) > (case erlang:is_map(Arr) of true -> maps:get((I + 1), Arr, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (I + 1) + 1, Arr); _ -> mochi_nth((I + 1) + 1, Arr) end end)) of
        true -> Temp = (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, I) ++ [(case erlang:is_map(Arr) of true -> maps:get((I + 1), Arr, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (I + 1) + 1, Arr); _ -> mochi_nth((I + 1) + 1, Arr) end end)] ++ lists:nthtail(I + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, (I + 1)) ++ [Temp] ++ lists:nthtail((I + 1) + 1, Arr_2),
            Swapped_2 = true,
            Arr_4 = Arr_3,
            Swapped_3 = Swapped_2,
            Temp_2 = Temp;
        _ -> Arr_4 = Arr,
            Swapped_3 = Swapped,
            Temp_2 = nil
    end,
            I_2 = (I + 1),
            Fun_loop(Arr_4, End, I_2, Start, Swapped_3);
        _ -> {Arr, End, I, Start, Swapped}
    end
end,
{Arr_4, End, I_2, Start, Swapped_3} = Fun(Arr, End, I, Start, Swapped),
                case mochi_not(Swapped_3) of
        true -> throw({break, Arr_4, End, Start});
        _ -> ok
    end,
                End_2 = (End - 1),
                I_3 = End_2,
                Fun_2 = fun Fun_2_loop(Arr_4, End_2, I_3, Start, Swapped_3) ->
    case (I_3 > Start) of
        true ->
            case ((case erlang:is_map(Arr_4) of true -> maps:get(I_3, Arr_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr_4) + I_3 + 1, Arr_4); _ -> mochi_nth(I_3 + 1, Arr_4) end end) < (case erlang:is_map(Arr_4) of true -> maps:get((I_3 - 1), Arr_4, nil); _ -> case (I_3 - 1) < 0 of true -> mochi_nth(erlang:length(Arr_4) + (I_3 - 1) + 1, Arr_4); _ -> mochi_nth((I_3 - 1) + 1, Arr_4) end end)) of
        true -> Temp2 = (case erlang:is_map(Arr_4) of true -> maps:get(I_3, Arr_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr_4) + I_3 + 1, Arr_4); _ -> mochi_nth(I_3 + 1, Arr_4) end end),
            Arr_5 = lists:sublist(Arr_4, I_3) ++ [(case erlang:is_map(Arr_4) of true -> maps:get((I_3 - 1), Arr_4, nil); _ -> case (I_3 - 1) < 0 of true -> mochi_nth(erlang:length(Arr_4) + (I_3 - 1) + 1, Arr_4); _ -> mochi_nth((I_3 - 1) + 1, Arr_4) end end)] ++ lists:nthtail(I_3 + 1, Arr_4),
            Arr_6 = lists:sublist(Arr_5, (I_3 - 1)) ++ [Temp2] ++ lists:nthtail((I_3 - 1) + 1, Arr_5),
            Swapped_4 = true,
            Arr_7 = Arr_6,
            Swapped_5 = Swapped_4,
            Temp2_2 = Temp2;
        _ -> Arr_7 = Arr_4,
            Swapped_5 = Swapped_3,
            Temp2_2 = nil
    end,
            I_4 = (I_3 - 1),
            Fun_2_loop(Arr_7, End_2, I_4, Start, Swapped_5);
        _ -> {Arr_4, End_2, I_3, Start, Swapped_3}
    end
end,
{Arr_7, End_2, I_4, Start, Swapped_5} = Fun_2(Arr_4, End_2, I_3, Start, Swapped_3),
                case mochi_not(Swapped_5) of
        true -> throw({break, Arr_7, End_2, Start});
        _ -> ok
    end,
                Start_2 = (Start + 1),
                Fun_3_loop(Arr_7, End_2, Start_2)
            catch
                {continue, C0, C1, C2} -> Fun_3_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Arr, End, Start}
    end
end,
{Arr_7, End_2, Start_2} = Fun_3(Arr, End, Start),
        Arr_7
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(cocktail_shaker_sort([4, 5, 2, 1, 2]))]),
    io:format("~ts~n", [mochi_str(cocktail_shaker_sort([-4, 5, 0, 1, 2, 11]))]),
    io:format("~ts~n", [mochi_str(cocktail_shaker_sort([1, 2, 3, 4, 5]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
