#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_buckets/0, max_value/1, radix_sort/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

make_buckets() ->
    try
        Buckets = [],
        I = 0,
        Fun = fun Fun_loop(Buckets, I) ->
    case (I < 10) of
        true ->
            Buckets_2 = lists:append((case Buckets of nil -> []; _ -> Buckets end), [[]]),
            I_2 = (I + 1),
            Fun_loop(Buckets_2, I_2);
        _ -> {Buckets, I}
    end
end,
{Buckets_2, I_2} = Fun(Buckets, I),
        Buckets_2
    catch {return, RetCatch} -> RetCatch end.

max_value(Xs) ->
    try
        Max_val = (case erlang:is_map(Xs) of true -> maps:get(0, Xs, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Xs) + 0 + 1, Xs); _ -> mochi_nth(0 + 1, Xs) end end),
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(I_3, Max_val, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end) > Max_val) of
        true -> Max_val_2 = (case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end),
            Max_val_3 = Max_val_2;
        _ -> Max_val_3 = Max_val
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Max_val_3, Xs);
        _ -> {I_3, Max_val, Xs}
    end
end,
{I_4, Max_val_3, Xs} = Fun_2(I_3, Max_val, Xs),
        Max_val_3
    catch {return, RetCatch} -> RetCatch end.

radix_sort(List_of_ints) ->
    try
        Placement = 1,
        Max_digit = max_value(List_of_ints),
        Fun_6 = fun Fun_6_loop(List_of_ints, Max_digit, Placement) ->
    case (Placement =< Max_digit) of
        true ->
            Buckets_3 = make_buckets(),
            I_5 = 0,
            Fun_3 = fun Fun_3_loop(Buckets_3, I_5, List_of_ints, Max_digit, Placement) ->
    case (I_5 < erlang:length(List_of_ints)) of
        true ->
            Value = (case erlang:is_map(List_of_ints) of true -> maps:get(I_5, List_of_ints, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(List_of_ints) + I_5 + 1, List_of_ints); _ -> mochi_nth(I_5 + 1, List_of_ints) end end),
            Tmp = mochi_mod((Value div Placement), 10),
            Buckets_4 = lists:sublist(Buckets_3, Tmp) ++ [lists:append((case (case erlang:is_map(Buckets_3) of true -> maps:get(Tmp, Buckets_3, nil); _ -> case Tmp < 0 of true -> mochi_nth(erlang:length(Buckets_3) + Tmp + 1, Buckets_3); _ -> mochi_nth(Tmp + 1, Buckets_3) end end) of nil -> []; _ -> (case erlang:is_map(Buckets_3) of true -> maps:get(Tmp, Buckets_3, nil); _ -> case Tmp < 0 of true -> mochi_nth(erlang:length(Buckets_3) + Tmp + 1, Buckets_3); _ -> mochi_nth(Tmp + 1, Buckets_3) end end) end), [Value])] ++ lists:nthtail(Tmp + 1, Buckets_3),
            I_6 = (I_5 + 1),
            Fun_3_loop(Buckets_4, I_6, List_of_ints, Max_digit, Placement);
        _ -> {Buckets_3, I_5, List_of_ints, Max_digit, Placement}
    end
end,
{Buckets_4, I_6, List_of_ints, Max_digit, Placement} = Fun_3(Buckets_3, I_5, List_of_ints, Max_digit, Placement),
            A = 0,
            B = 0,
            Fun_5 = fun Fun_5_loop(A, B, Buckets_4, I_6, List_of_ints, Max_digit, Placement) ->
    case (B < 10) of
        true ->
            Bucket = (case erlang:is_map(Buckets_4) of true -> maps:get(B, Buckets_4, nil); _ -> case B < 0 of true -> mochi_nth(erlang:length(Buckets_4) + B + 1, Buckets_4); _ -> mochi_nth(B + 1, Buckets_4) end end),
            J = 0,
            Fun_4 = fun Fun_4_loop(A, B, Bucket, Buckets_4, I_6, J, List_of_ints, Max_digit, Placement) ->
    case (J < erlang:length(Bucket)) of
        true ->
            List_of_ints_2 = lists:sublist(List_of_ints, A) ++ [(case erlang:is_map(Bucket) of true -> maps:get(J, Bucket, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Bucket) + J + 1, Bucket); _ -> mochi_nth(J + 1, Bucket) end end)] ++ lists:nthtail(A + 1, List_of_ints),
            A_2 = (A + 1),
            J_2 = (J + 1),
            Fun_4_loop(A_2, B, Bucket, Buckets_4, I_6, J_2, List_of_ints_2, Max_digit, Placement);
        _ -> {A, B, Bucket, Buckets_4, I_6, J, List_of_ints, Max_digit, Placement}
    end
end,
{A_2, B, Bucket, Buckets_4, I_6, J_2, List_of_ints_2, Max_digit, Placement} = Fun_4(A, B, Bucket, Buckets_4, I_6, J, List_of_ints, Max_digit, Placement),
            B_2 = (B + 1),
            Fun_5_loop(A_2, B_2, Buckets_4, I_6, List_of_ints_2, Max_digit, Placement);
        _ -> {A, B, Buckets_4, I_6, List_of_ints, Max_digit, Placement}
    end
end,
{A_2, B_2, Buckets_4, I_6, List_of_ints_2, Max_digit, Placement} = Fun_5(A, B, Buckets_4, I_6, List_of_ints, Max_digit, Placement),
            Placement_2 = (Placement * 10),
            Fun_6_loop(List_of_ints_2, Max_digit, Placement_2);
        _ -> {List_of_ints, Max_digit, Placement}
    end
end,
{List_of_ints_2, Max_digit, Placement_2} = Fun_6(List_of_ints, Max_digit, Placement),
        List_of_ints_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('RADIX', 10),
    io:format("~ts~n", [mochi_str(radix_sort([0, 5, 3, 2, 2]))]),
    io:format("~ts~n", [mochi_str(radix_sort([1, 100, 10, 1000]))]),
    io:format("~ts~n", [mochi_str(radix_sort([15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
