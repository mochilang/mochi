#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, insert_next/2, rec_insertion_sort/2, test_rec_insertion_sort/0, main/0]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

insert_next(Collection, Index) ->
    try
        Arr = Collection,
        case ((Index >= erlang:length(Arr)) orelse ((case erlang:is_map(Arr) of true -> maps:get((Index - 1), Arr, nil); _ -> case (Index - 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (Index - 1) + 1, Arr); _ -> mochi_nth((Index - 1) + 1, Arr) end end) =< (case erlang:is_map(Arr) of true -> maps:get(Index, Arr, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Arr) + Index + 1, Arr); _ -> mochi_nth(Index + 1, Arr) end end))) of
        true -> throw({return, Arr});
        _ -> ok
    end,
        J = (Index - 1),
        Temp = (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end),
        Arr_2 = lists:sublist(Arr, J) ++ [(case erlang:is_map(Arr) of true -> maps:get(Index, Arr, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Arr) + Index + 1, Arr); _ -> mochi_nth(Index + 1, Arr) end end)] ++ lists:nthtail(J + 1, Arr),
        Arr_3 = lists:sublist(Arr_2, Index) ++ [Temp] ++ lists:nthtail(Index + 1, Arr_2),
        insert_next(Arr_3, (Index + 1))
    catch {return, RetCatch} -> RetCatch end.

rec_insertion_sort(Collection_2, N) ->
    try
        Arr_4 = Collection_2,
        case ((erlang:length(Arr_4) =< 1) orelse (N =< 1)) of
        true -> throw({return, Arr_4});
        _ -> ok
    end,
        Arr_5 = insert_next(Arr_4, (N - 1)),
        rec_insertion_sort(Arr_5, (N - 1))
    catch {return, RetCatch} -> RetCatch end.

test_rec_insertion_sort() ->
    try
        Col1 = [1, 2, 1],
        Col1_2 = rec_insertion_sort(Col1, erlang:length(Col1)),
        case ((((case erlang:is_map(Col1_2) of true -> maps:get(0, Col1_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Col1_2) + 0 + 1, Col1_2); _ -> mochi_nth(0 + 1, Col1_2) end end) /= 1) orelse ((case erlang:is_map(Col1_2) of true -> maps:get(1, Col1_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Col1_2) + 1 + 1, Col1_2); _ -> mochi_nth(1 + 1, Col1_2) end end) /= 1)) orelse ((case erlang:is_map(Col1_2) of true -> maps:get(2, Col1_2, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Col1_2) + 2 + 1, Col1_2); _ -> mochi_nth(2 + 1, Col1_2) end end) /= 2)) of
        true -> erlang:error({panic, "test1 failed"});
        _ -> ok
    end,
        Col2 = [2, 1, 0, -1, -2],
        Col2_2 = rec_insertion_sort(Col2, erlang:length(Col2)),
        case ((case erlang:is_map(Col2_2) of true -> maps:get(0, Col2_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Col2_2) + 0 + 1, Col2_2); _ -> mochi_nth(0 + 1, Col2_2) end end) /= (0 - 2)) of
        true -> erlang:error({panic, "test2 failed"});
        _ -> ok
    end,
        case ((case erlang:is_map(Col2_2) of true -> maps:get(1, Col2_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Col2_2) + 1 + 1, Col2_2); _ -> mochi_nth(1 + 1, Col2_2) end end) /= (0 - 1)) of
        true -> erlang:error({panic, "test2 failed"});
        _ -> ok
    end,
        case ((case erlang:is_map(Col2_2) of true -> maps:get(2, Col2_2, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Col2_2) + 2 + 1, Col2_2); _ -> mochi_nth(2 + 1, Col2_2) end end) /= 0) of
        true -> erlang:error({panic, "test2 failed"});
        _ -> ok
    end,
        case ((case erlang:is_map(Col2_2) of true -> maps:get(3, Col2_2, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(Col2_2) + 3 + 1, Col2_2); _ -> mochi_nth(3 + 1, Col2_2) end end) /= 1) of
        true -> erlang:error({panic, "test2 failed"});
        _ -> ok
    end,
        case ((case erlang:is_map(Col2_2) of true -> maps:get(4, Col2_2, nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(Col2_2) + 4 + 1, Col2_2); _ -> mochi_nth(4 + 1, Col2_2) end end) /= 2) of
        true -> erlang:error({panic, "test2 failed"});
        _ -> ok
    end,
        Col3 = [1],
        Col3_2 = rec_insertion_sort(Col3, erlang:length(Col3)),
        case ((case erlang:is_map(Col3_2) of true -> maps:get(0, Col3_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Col3_2) + 0 + 1, Col3_2); _ -> mochi_nth(0 + 1, Col3_2) end end) /= 1) of
        true -> erlang:error({panic, "test3 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_rec_insertion_sort(),
        Numbers = [5, 3, 4, 1, 2],
        Numbers_2 = rec_insertion_sort(Numbers, erlang:length(Numbers)),
        io:format("~ts~n", [mochi_str(Numbers_2)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
