#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rand/0, rand_range/1, shuffle/1, is_sorted/1, bogo_sort/1]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

rand() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        erlang:get('seed')
    catch {return, RetCatch} -> RetCatch end.

rand_range(Max) ->
    try
        mochi_mod(rand(), Max)
    catch {return, RetCatch} -> RetCatch end.

shuffle(List_int) ->
    try
        I = (erlang:length(List_int) - 1),
        Fun = fun Fun_loop(I, List_int) ->
    case (I > 0) of
        true ->
            J = rand_range((I + 1)),
            Tmp = (case erlang:is_map(List_int) of true -> maps:get(I, List_int, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(List_int) + I + 1, List_int); _ -> mochi_nth(I + 1, List_int) end end),
            List_int_2 = lists:sublist(List_int, I) ++ [(case erlang:is_map(List_int) of true -> maps:get(J, List_int, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(List_int) + J + 1, List_int); _ -> mochi_nth(J + 1, List_int) end end)] ++ lists:nthtail(I + 1, List_int),
            List_int_3 = lists:sublist(List_int_2, J) ++ [Tmp] ++ lists:nthtail(J + 1, List_int_2),
            I_2 = (I - 1),
            Fun_loop(I_2, List_int_3);
        _ -> {I, List_int}
    end
end,
{I_2, List_int_3} = Fun(I, List_int),
        List_int_3
    catch {return, RetCatch} -> RetCatch end.

is_sorted(List_int_4) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, List_int_4) ->
    case (I_3 < (erlang:length(List_int_4) - 1)) of
        true ->
            case ((case erlang:is_map(List_int_4) of true -> maps:get(I_3, List_int_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(List_int_4) + I_3 + 1, List_int_4); _ -> mochi_nth(I_3 + 1, List_int_4) end end) > (case erlang:is_map(List_int_4) of true -> maps:get((I_3 + 1), List_int_4, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(List_int_4) + (I_3 + 1) + 1, List_int_4); _ -> mochi_nth((I_3 + 1) + 1, List_int_4) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, List_int_4);
        _ -> {I_3, List_int_4}
    end
end,
{I_4, List_int_4} = Fun_2(I_3, List_int_4),
        true
    catch {return, RetCatch} -> RetCatch end.

bogo_sort(List_int_5) ->
    try
        Res = List_int_5,
        Fun_3 = fun Fun_3_loop(List_int_5, Res) ->
    case mochi_not(is_sorted(Res)) of
        true ->
            Res_2 = shuffle(Res),
            Fun_3_loop(List_int_5, Res_2);
        _ -> {List_int_5, Res}
    end
end,
{List_int_5, Res_2} = Fun_3(List_int_5, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    erlang:put('data', [3, 2, 1]),
    io:format("~ts~n", [mochi_str(bogo_sort(erlang:get('data')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
