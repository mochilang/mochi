#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, cycle_sort/1]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

cycle_sort(Arr) ->
    try
        N = erlang:length(Arr),
        Cycle_start = 0,
        Fun_6 = fun Fun_6_loop(Arr, Cycle_start, N) ->
    case (Cycle_start < (N - 1)) of
        true ->
            try
                Item = (case erlang:is_map(Arr) of true -> maps:get(Cycle_start, Arr, nil); _ -> case Cycle_start < 0 of true -> mochi_nth(erlang:length(Arr) + Cycle_start + 1, Arr); _ -> mochi_nth(Cycle_start + 1, Arr) end end),
                Pos = Cycle_start,
                I = (Cycle_start + 1),
                Fun = fun Fun_loop(Arr, Cycle_start, I, Item, N, Pos) ->
    case (I < N) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end) < Item) of
        true -> Pos_2 = (Pos + 1),
            Pos_3 = Pos_2;
        _ -> Pos_3 = Pos
    end,
            I_2 = (I + 1),
            Fun_loop(Arr, Cycle_start, I_2, Item, N, Pos_3);
        _ -> {Arr, Cycle_start, I, Item, N, Pos}
    end
end,
{Arr, Cycle_start, I_2, Item, N, Pos_3} = Fun(Arr, Cycle_start, I, Item, N, Pos),
                case (Pos_3 == Cycle_start) of
        true -> Cycle_start_2 = (Cycle_start + 1),
            throw({continue, Arr, Cycle_start_2, N}),
            Cycle_start_3 = Cycle_start_2;
        _ -> Cycle_start_3 = Cycle_start
    end,
                Fun_2 = fun Fun_2_loop(Arr, Cycle_start_3, I_2, Item, N, Pos_3) ->
    case (Item == (case erlang:is_map(Arr) of true -> maps:get(Pos_3, Arr, nil); _ -> case Pos_3 < 0 of true -> mochi_nth(erlang:length(Arr) + Pos_3 + 1, Arr); _ -> mochi_nth(Pos_3 + 1, Arr) end end)) of
        true ->
            Pos_4 = (Pos_3 + 1),
            Fun_2_loop(Arr, Cycle_start_3, I_2, Item, N, Pos_4);
        _ -> {Arr, Cycle_start_3, I_2, Item, N, Pos_3}
    end
end,
{Arr, Cycle_start_3, I_2, Item, N, Pos_4} = Fun_2(Arr, Cycle_start_3, I_2, Item, N, Pos_3),
                Temp = (case erlang:is_map(Arr) of true -> maps:get(Pos_4, Arr, nil); _ -> case Pos_4 < 0 of true -> mochi_nth(erlang:length(Arr) + Pos_4 + 1, Arr); _ -> mochi_nth(Pos_4 + 1, Arr) end end),
                Arr_2 = lists:sublist(Arr, Pos_4) ++ [Item] ++ lists:nthtail(Pos_4 + 1, Arr),
                Item_2 = Temp,
                Fun_5 = fun Fun_5_loop(Arr_2, Cycle_start_3, I_2, Item_2, N, Pos_4, Temp) ->
    case (Pos_4 /= Cycle_start_3) of
        true ->
            Pos_5 = Cycle_start_3,
            I_3 = (Cycle_start_3 + 1),
            Fun_3 = fun Fun_3_loop(Arr_2, Cycle_start_3, I_3, Item_2, N, Pos_5, Temp) ->
    case (I_3 < N) of
        true ->
            case ((case erlang:is_map(Arr_2) of true -> maps:get(I_3, Arr_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr_2) + I_3 + 1, Arr_2); _ -> mochi_nth(I_3 + 1, Arr_2) end end) < Item_2) of
        true -> Pos_6 = (Pos_5 + 1),
            Pos_7 = Pos_6;
        _ -> Pos_7 = Pos_5
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(Arr_2, Cycle_start_3, I_4, Item_2, N, Pos_7, Temp);
        _ -> {Arr_2, Cycle_start_3, I_3, Item_2, N, Pos_5, Temp}
    end
end,
{Arr_2, Cycle_start_3, I_4, Item_2, N, Pos_7, Temp} = Fun_3(Arr_2, Cycle_start_3, I_3, Item_2, N, Pos_5, Temp),
            Fun_4 = fun Fun_4_loop(Arr_2, Cycle_start_3, I_4, Item_2, N, Pos_7, Temp) ->
    case (Item_2 == (case erlang:is_map(Arr_2) of true -> maps:get(Pos_7, Arr_2, nil); _ -> case Pos_7 < 0 of true -> mochi_nth(erlang:length(Arr_2) + Pos_7 + 1, Arr_2); _ -> mochi_nth(Pos_7 + 1, Arr_2) end end)) of
        true ->
            Pos_8 = (Pos_7 + 1),
            Fun_4_loop(Arr_2, Cycle_start_3, I_4, Item_2, N, Pos_8, Temp);
        _ -> {Arr_2, Cycle_start_3, I_4, Item_2, N, Pos_7, Temp}
    end
end,
{Arr_2, Cycle_start_3, I_4, Item_2, N, Pos_8, Temp} = Fun_4(Arr_2, Cycle_start_3, I_4, Item_2, N, Pos_7, Temp),
            Temp2 = (case erlang:is_map(Arr_2) of true -> maps:get(Pos_8, Arr_2, nil); _ -> case Pos_8 < 0 of true -> mochi_nth(erlang:length(Arr_2) + Pos_8 + 1, Arr_2); _ -> mochi_nth(Pos_8 + 1, Arr_2) end end),
            Arr_3 = lists:sublist(Arr_2, Pos_8) ++ [Item_2] ++ lists:nthtail(Pos_8 + 1, Arr_2),
            Item_3 = Temp2,
            Fun_5_loop(Arr_3, Cycle_start_3, I_4, Item_3, N, Pos_8, Temp);
        _ -> {Arr_2, Cycle_start_3, I_2, Item_2, N, Pos_4, Temp}
    end
end,
{Arr_3, Cycle_start_3, I_4, Item_3, N, Pos_8, Temp} = Fun_5(Arr_2, Cycle_start_3, I_2, Item_2, N, Pos_4, Temp),
                Cycle_start_4 = (Cycle_start_3 + 1),
                Fun_6_loop(Arr_3, Cycle_start_4, N)
            catch
                {continue, C0, C1, C2} -> Fun_6_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Arr, Cycle_start, N}
    end
end,
{Arr_3, Cycle_start_4, N} = Fun_6(Arr, Cycle_start, N),
        Arr_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(cycle_sort([4, 3, 2, 1]))]),
    io:format("~ts~n", [mochi_str(cycle_sort([-4, 20, 0, -50, 100, -1]))]),
    io:format("~ts~n", [mochi_str(cycle_sort([]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
