#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, selection_sort/1]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

selection_sort(Arr) ->
    try
        N = erlang:length(Arr),
        I = 0,
        Fun_2 = fun Fun_2_loop(Arr, I, N) ->
    case (I < (N - 1)) of
        true ->
            Min_index = I,
            K = (I + 1),
            Fun = fun Fun_loop(Arr, I, K, Min_index, N) ->
    case (K < N) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(K, Arr, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Arr) + K + 1, Arr); _ -> mochi_nth(K + 1, Arr) end end) < (case erlang:is_map(Arr) of true -> maps:get(Min_index, Arr, nil); _ -> case Min_index < 0 of true -> mochi_nth(erlang:length(Arr) + Min_index + 1, Arr); _ -> mochi_nth(Min_index + 1, Arr) end end)) of
        true -> Min_index_2 = K,
            Min_index_3 = Min_index_2;
        _ -> Min_index_3 = Min_index
    end,
            K_2 = (K + 1),
            Fun_loop(Arr, I, K_2, Min_index_3, N);
        _ -> {Arr, I, K, Min_index, N}
    end
end,
{Arr, I, K_2, Min_index_3, N} = Fun(Arr, I, K, Min_index, N),
            case (Min_index_3 /= I) of
        true -> Tmp = (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, I) ++ [(case erlang:is_map(Arr) of true -> maps:get(Min_index_3, Arr, nil); _ -> case Min_index_3 < 0 of true -> mochi_nth(erlang:length(Arr) + Min_index_3 + 1, Arr); _ -> mochi_nth(Min_index_3 + 1, Arr) end end)] ++ lists:nthtail(I + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, Min_index_3) ++ [Tmp] ++ lists:nthtail(Min_index_3 + 1, Arr_2),
            Arr_4 = Arr_3,
            Tmp_2 = Tmp;
        _ -> Arr_4 = Arr,
            Tmp_2 = nil
    end,
            I_2 = (I + 1),
            Fun_2_loop(Arr_4, I_2, N);
        _ -> {Arr, I, N}
    end
end,
{Arr_4, I_2, N} = Fun_2(Arr, I, N),
        Arr_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(selection_sort([0, 5, 3, 2, 2]))]),
    io:format("~ts~n", [mochi_str(selection_sort([]))]),
    io:format("~ts~n", [mochi_str(selection_sort([-2, -5, -45]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
