#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, subarray/3, merge/1]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

subarray(Xs, Start, End) ->
    try
        Result = [],
        K = Start,
        Fun = fun Fun_loop(End, K, Result, Start, Xs) ->
    case (K < End) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Xs) of true -> maps:get(K, Xs, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Xs) + K + 1, Xs); _ -> mochi_nth(K + 1, Xs) end end)]),
            K_2 = (K + 1),
            Fun_loop(End, K_2, Result_2, Start, Xs);
        _ -> {End, K, Result, Start, Xs}
    end
end,
{End, K_2, Result_2, Start, Xs} = Fun(End, K, Result, Start, Xs),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

merge(Arr) ->
    try
        case (erlang:length(Arr) > 1) of
        true -> Middle_length = mochi_safe_div(erlang:length(Arr), 2),
            Left_array = subarray(Arr, 0, Middle_length),
            Right_array = subarray(Arr, Middle_length, erlang:length(Arr)),
            Left_size = erlang:length(Left_array),
            Right_size = erlang:length(Right_array),
            merge(Left_array),
            merge(Right_array),
            Left_index = 0,
            Right_index = 0,
            Index = 0,
            Fun_2 = fun Fun_2_loop(Arr, Index, Left_array, Left_index, Left_size, Middle_length, Right_array, Right_index, Right_size) ->
    case ((Left_index < Left_size) andalso (Right_index < Right_size)) of
        true ->
            case ((case erlang:is_map(Left_array) of true -> maps:get(Left_index, Left_array, nil); _ -> case Left_index < 0 of true -> mochi_nth(erlang:length(Left_array) + Left_index + 1, Left_array); _ -> mochi_nth(Left_index + 1, Left_array) end end) < (case erlang:is_map(Right_array) of true -> maps:get(Right_index, Right_array, nil); _ -> case Right_index < 0 of true -> mochi_nth(erlang:length(Right_array) + Right_index + 1, Right_array); _ -> mochi_nth(Right_index + 1, Right_array) end end)) of
        true -> Arr_2 = lists:sublist(Arr, Index) ++ [(case erlang:is_map(Left_array) of true -> maps:get(Left_index, Left_array, nil); _ -> case Left_index < 0 of true -> mochi_nth(erlang:length(Left_array) + Left_index + 1, Left_array); _ -> mochi_nth(Left_index + 1, Left_array) end end)] ++ lists:nthtail(Index + 1, Arr),
            Left_index_2 = (Left_index + 1),
            Arr_4 = Arr_2,
            Left_index_3 = Left_index_2,
            Right_index_3 = Right_index;
        _ -> Arr_3 = lists:sublist(Arr, Index) ++ [(case erlang:is_map(Right_array) of true -> maps:get(Right_index, Right_array, nil); _ -> case Right_index < 0 of true -> mochi_nth(erlang:length(Right_array) + Right_index + 1, Right_array); _ -> mochi_nth(Right_index + 1, Right_array) end end)] ++ lists:nthtail(Index + 1, Arr),
            Right_index_2 = (Right_index + 1),
            Arr_4 = Arr_3,
            Left_index_3 = Left_index,
            Right_index_3 = Right_index_2
    end,
            Index_2 = (Index + 1),
            Fun_2_loop(Arr_4, Index_2, Left_array, Left_index_3, Left_size, Middle_length, Right_array, Right_index_3, Right_size);
        _ -> {Arr, Index, Left_array, Left_index, Left_size, Middle_length, Right_array, Right_index, Right_size}
    end
end,
{Arr_4, Index_2, Left_array, Left_index_3, Left_size, Middle_length, Right_array, Right_index_3, Right_size} = Fun_2(Arr, Index, Left_array, Left_index, Left_size, Middle_length, Right_array, Right_index, Right_size),
            Fun_3 = fun Fun_3_loop(Arr_4, Index_2, Left_array, Left_index_3, Left_size, Middle_length, Right_array, Right_index_3, Right_size) ->
    case (Left_index_3 < Left_size) of
        true ->
            Arr_5 = lists:sublist(Arr_4, Index_2) ++ [(case erlang:is_map(Left_array) of true -> maps:get(Left_index_3, Left_array, nil); _ -> case Left_index_3 < 0 of true -> mochi_nth(erlang:length(Left_array) + Left_index_3 + 1, Left_array); _ -> mochi_nth(Left_index_3 + 1, Left_array) end end)] ++ lists:nthtail(Index_2 + 1, Arr_4),
            Left_index_4 = (Left_index_3 + 1),
            Index_3 = (Index_2 + 1),
            Fun_3_loop(Arr_5, Index_3, Left_array, Left_index_4, Left_size, Middle_length, Right_array, Right_index_3, Right_size);
        _ -> {Arr_4, Index_2, Left_array, Left_index_3, Left_size, Middle_length, Right_array, Right_index_3, Right_size}
    end
end,
{Arr_5, Index_3, Left_array, Left_index_4, Left_size, Middle_length, Right_array, Right_index_3, Right_size} = Fun_3(Arr_4, Index_2, Left_array, Left_index_3, Left_size, Middle_length, Right_array, Right_index_3, Right_size),
            Fun_4 = fun Fun_4_loop(Arr_5, Index_3, Left_array, Left_index_4, Left_size, Middle_length, Right_array, Right_index_3, Right_size) ->
    case (Right_index_3 < Right_size) of
        true ->
            Arr_6 = lists:sublist(Arr_5, Index_3) ++ [(case erlang:is_map(Right_array) of true -> maps:get(Right_index_3, Right_array, nil); _ -> case Right_index_3 < 0 of true -> mochi_nth(erlang:length(Right_array) + Right_index_3 + 1, Right_array); _ -> mochi_nth(Right_index_3 + 1, Right_array) end end)] ++ lists:nthtail(Index_3 + 1, Arr_5),
            Right_index_4 = (Right_index_3 + 1),
            Index_4 = (Index_3 + 1),
            Fun_4_loop(Arr_6, Index_4, Left_array, Left_index_4, Left_size, Middle_length, Right_array, Right_index_4, Right_size);
        _ -> {Arr_5, Index_3, Left_array, Left_index_4, Left_size, Middle_length, Right_array, Right_index_3, Right_size}
    end
end,
{Arr_6, Index_4, Left_array, Left_index_4, Left_size, Middle_length, Right_array, Right_index_4, Right_size} = Fun_4(Arr_5, Index_3, Left_array, Left_index_4, Left_size, Middle_length, Right_array, Right_index_3, Right_size),
            Arr_7 = Arr_6,
            Fun_5 = Fun_4,
            Index_5 = Index_4,
            Left_array_2 = Left_array,
            Left_index_5 = Left_index_4,
            Left_size_2 = Left_size,
            Middle_length_2 = Middle_length,
            Right_array_2 = Right_array,
            Right_index_5 = Right_index_4,
            Right_size_2 = Right_size;
        _ -> Arr_7 = Arr,
            Fun_5 = nil,
            Index_5 = nil,
            Left_array_2 = nil,
            Left_index_5 = nil,
            Left_size_2 = nil,
            Middle_length_2 = nil,
            Right_array_2 = nil,
            Right_index_5 = nil,
            Right_size_2 = nil
    end,
        Arr_7
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(merge([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))]),
    io:format("~ts~n", [mochi_str(merge([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))]),
    io:format("~ts~n", [mochi_str(merge([10, 22, 1, 2, 3, 9, 15, 23]))]),
    io:format("~ts~n", [mochi_str(merge([100]))]),
    io:format("~ts~n", [mochi_str(merge([]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
