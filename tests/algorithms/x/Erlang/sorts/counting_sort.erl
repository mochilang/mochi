#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, max_val/1, min_val/1, counting_sort/1, chr/1, ord/1, counting_sort_string/1]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

max_val(Arr) ->
    try
        M = (case erlang:is_map(Arr) of true -> maps:get(0, Arr, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr) + 0 + 1, Arr); _ -> mochi_nth(0 + 1, Arr) end end),
        I = 1,
        Fun = fun Fun_loop(Arr, I, M) ->
    case (I < erlang:length(Arr)) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end) > M) of
        true -> M_2 = (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end),
            M_3 = M_2;
        _ -> M_3 = M
    end,
            I_2 = (I + 1),
            Fun_loop(Arr, I_2, M_3);
        _ -> {Arr, I, M}
    end
end,
{Arr, I_2, M_3} = Fun(Arr, I, M),
        M_3
    catch {return, Ret} -> Ret end.

min_val(Arr_2) ->
    try
        M_4 = (case erlang:is_map(Arr_2) of true -> maps:get(0, Arr_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr_2) + 0 + 1, Arr_2); _ -> mochi_nth(0 + 1, Arr_2) end end),
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(Arr_2, I_3, M_4) ->
    case (I_3 < erlang:length(Arr_2)) of
        true ->
            case ((case erlang:is_map(Arr_2) of true -> maps:get(I_3, Arr_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr_2) + I_3 + 1, Arr_2); _ -> mochi_nth(I_3 + 1, Arr_2) end end) < M_4) of
        true -> M_5 = (case erlang:is_map(Arr_2) of true -> maps:get(I_3, Arr_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr_2) + I_3 + 1, Arr_2); _ -> mochi_nth(I_3 + 1, Arr_2) end end),
            M_6 = M_5;
        _ -> M_6 = M_4
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr_2, I_4, M_6);
        _ -> {Arr_2, I_3, M_4}
    end
end,
{Arr_2, I_4, M_6} = Fun_2(Arr_2, I_3, M_4),
        M_6
    catch {return, Ret} -> Ret end.

counting_sort(Collection) ->
    try
        case (erlang:length(Collection) == 0) of
        true -> throw({return, []});
        _ -> ok
    end,
        Coll_len = erlang:length(Collection),
        Coll_max = max_val(Collection),
        Coll_min = min_val(Collection),
        Counting_arr_length = ((Coll_max + 1) - Coll_min),
        Counting_arr = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Coll_len, Coll_max, Coll_min, Collection, Counting_arr, Counting_arr_length, I_5) ->
    case (I_5 < Counting_arr_length) of
        true ->
            Counting_arr_2 = lists:append((case Counting_arr of nil -> []; _ -> Counting_arr end), [0]),
            I_6 = (I_5 + 1),
            Fun_3_loop(Coll_len, Coll_max, Coll_min, Collection, Counting_arr_2, Counting_arr_length, I_6);
        _ -> {Coll_len, Coll_max, Coll_min, Collection, Counting_arr, Counting_arr_length, I_5}
    end
end,
{Coll_len, Coll_max, Coll_min, Collection, Counting_arr_2, Counting_arr_length, I_6} = Fun_3(Coll_len, Coll_max, Coll_min, Collection, Counting_arr, Counting_arr_length, I_5),
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Coll_len, Coll_max, Coll_min, Collection, Counting_arr_2, Counting_arr_length, I_7) ->
    case (I_7 < Coll_len) of
        true ->
            Number = (case erlang:is_map(Collection) of true -> maps:get(I_7, Collection, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Collection) + I_7 + 1, Collection); _ -> mochi_nth(I_7 + 1, Collection) end end),
            Counting_arr_3 = lists:sublist(Counting_arr_2, (Number - Coll_min)) ++ [((case erlang:is_map(Counting_arr_2) of true -> maps:get((Number - Coll_min), Counting_arr_2, nil); _ -> case (Number - Coll_min) < 0 of true -> mochi_nth(erlang:length(Counting_arr_2) + (Number - Coll_min) + 1, Counting_arr_2); _ -> mochi_nth((Number - Coll_min) + 1, Counting_arr_2) end end) + 1)] ++ lists:nthtail((Number - Coll_min) + 1, Counting_arr_2),
            I_8 = (I_7 + 1),
            Fun_4_loop(Coll_len, Coll_max, Coll_min, Collection, Counting_arr_3, Counting_arr_length, I_8);
        _ -> {Coll_len, Coll_max, Coll_min, Collection, Counting_arr_2, Counting_arr_length, I_7}
    end
end,
{Coll_len, Coll_max, Coll_min, Collection, Counting_arr_3, Counting_arr_length, I_8} = Fun_4(Coll_len, Coll_max, Coll_min, Collection, Counting_arr_2, Counting_arr_length, I_7),
        I_9 = 1,
        Fun_5 = fun Fun_5_loop(Coll_len, Coll_max, Coll_min, Collection, Counting_arr_3, Counting_arr_length, I_9) ->
    case (I_9 < Counting_arr_length) of
        true ->
            Counting_arr_4 = lists:sublist(Counting_arr_3, I_9) ++ [((case erlang:is_map(Counting_arr_3) of true -> maps:get(I_9, Counting_arr_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Counting_arr_3) + I_9 + 1, Counting_arr_3); _ -> mochi_nth(I_9 + 1, Counting_arr_3) end end) + (case erlang:is_map(Counting_arr_3) of true -> maps:get((I_9 - 1), Counting_arr_3, nil); _ -> case (I_9 - 1) < 0 of true -> mochi_nth(erlang:length(Counting_arr_3) + (I_9 - 1) + 1, Counting_arr_3); _ -> mochi_nth((I_9 - 1) + 1, Counting_arr_3) end end))] ++ lists:nthtail(I_9 + 1, Counting_arr_3),
            I_10 = (I_9 + 1),
            Fun_5_loop(Coll_len, Coll_max, Coll_min, Collection, Counting_arr_4, Counting_arr_length, I_10);
        _ -> {Coll_len, Coll_max, Coll_min, Collection, Counting_arr_3, Counting_arr_length, I_9}
    end
end,
{Coll_len, Coll_max, Coll_min, Collection, Counting_arr_4, Counting_arr_length, I_10} = Fun_5(Coll_len, Coll_max, Coll_min, Collection, Counting_arr_3, Counting_arr_length, I_9),
        Ordered = [],
        I_11 = 0,
        Fun_6 = fun Fun_6_loop(Coll_len, Coll_max, Coll_min, Collection, Counting_arr_4, Counting_arr_length, I_11, Ordered) ->
    case (I_11 < Coll_len) of
        true ->
            Ordered_2 = lists:append((case Ordered of nil -> []; _ -> Ordered end), [0]),
            I_12 = (I_11 + 1),
            Fun_6_loop(Coll_len, Coll_max, Coll_min, Collection, Counting_arr_4, Counting_arr_length, I_12, Ordered_2);
        _ -> {Coll_len, Coll_max, Coll_min, Collection, Counting_arr_4, Counting_arr_length, I_11, Ordered}
    end
end,
{Coll_len, Coll_max, Coll_min, Collection, Counting_arr_4, Counting_arr_length, I_12, Ordered_2} = Fun_6(Coll_len, Coll_max, Coll_min, Collection, Counting_arr_4, Counting_arr_length, I_11, Ordered),
        Idx = (Coll_len - 1),
        Fun_7 = fun Fun_7_loop(Coll_len, Coll_max, Coll_min, Collection, Counting_arr_4, Counting_arr_length, I_12, Idx, Ordered_2) ->
    case (Idx >= 0) of
        true ->
            Number_2 = (case erlang:is_map(Collection) of true -> maps:get(Idx, Collection, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Collection) + Idx + 1, Collection); _ -> mochi_nth(Idx + 1, Collection) end end),
            Pos = ((case erlang:is_map(Counting_arr_4) of true -> maps:get((Number_2 - Coll_min), Counting_arr_4, nil); _ -> case (Number_2 - Coll_min) < 0 of true -> mochi_nth(erlang:length(Counting_arr_4) + (Number_2 - Coll_min) + 1, Counting_arr_4); _ -> mochi_nth((Number_2 - Coll_min) + 1, Counting_arr_4) end end) - 1),
            Ordered_3 = lists:sublist(Ordered_2, Pos) ++ [Number_2] ++ lists:nthtail(Pos + 1, Ordered_2),
            Counting_arr_5 = lists:sublist(Counting_arr_4, (Number_2 - Coll_min)) ++ [((case erlang:is_map(Counting_arr_4) of true -> maps:get((Number_2 - Coll_min), Counting_arr_4, nil); _ -> case (Number_2 - Coll_min) < 0 of true -> mochi_nth(erlang:length(Counting_arr_4) + (Number_2 - Coll_min) + 1, Counting_arr_4); _ -> mochi_nth((Number_2 - Coll_min) + 1, Counting_arr_4) end end) - 1)] ++ lists:nthtail((Number_2 - Coll_min) + 1, Counting_arr_4),
            Idx_2 = (Idx - 1),
            Fun_7_loop(Coll_len, Coll_max, Coll_min, Collection, Counting_arr_5, Counting_arr_length, I_12, Idx_2, Ordered_3);
        _ -> {Coll_len, Coll_max, Coll_min, Collection, Counting_arr_4, Counting_arr_length, I_12, Idx, Ordered_2}
    end
end,
{Coll_len, Coll_max, Coll_min, Collection, Counting_arr_5, Counting_arr_length, I_12, Idx_2, Ordered_3} = Fun_7(Coll_len, Coll_max, Coll_min, Collection, Counting_arr_4, Counting_arr_length, I_12, Idx, Ordered_2),
        Ordered_3
    catch {return, Ret} -> Ret end.

chr(Code) ->
    try
        case (Code == 10) of
        true -> throw({return, "\n"});
        _ -> ok
    end,
        case (Code == 13) of
        true -> throw({return, "\r"});
        _ -> ok
    end,
        case (Code == 9) of
        true -> throw({return, "\t"});
        _ -> ok
    end,
        case ((Code >= 32) andalso (Code < 127)) of
        true -> throw({return, string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", (Code - 32) + 1, ((Code - 31) - (Code - 32)))});
        _ -> ok
    end,
        ""
    catch {return, Ret} -> Ret end.

ord(Ch) ->
    try
        case (Ch == "\n") of
        true -> throw({return, 10});
        _ -> ok
    end,
        case (Ch == "\r") of
        true -> throw({return, 13});
        _ -> ok
    end,
        case (Ch == "\t") of
        true -> throw({return, 9});
        _ -> ok
    end,
        I_13 = 0,
        Fun_8 = fun Fun_8_loop(Ch, I_13) ->
    case (I_13 < erlang:length(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")) of
        true ->
            case (string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", I_13 + 1, ((I_13 + 1) - I_13)) == Ch) of
        true -> throw({return, (32 + I_13)});
        _ -> ok
    end,
            I_14 = (I_13 + 1),
            Fun_8_loop(Ch, I_14);
        _ -> {Ch, I_13}
    end
end,
{Ch, I_14} = Fun_8(Ch, I_13),
        0
    catch {return, Ret} -> Ret end.

counting_sort_string(S) ->
    try
        Codes = [],
        I_15 = 0,
        Fun_9 = fun Fun_9_loop(Codes, I_15, S) ->
    case (I_15 < erlang:length(S)) of
        true ->
            Codes_2 = lists:append((case Codes of nil -> []; _ -> Codes end), [ord(string:substr(S, I_15 + 1, ((I_15 + 1) - I_15)))]),
            I_16 = (I_15 + 1),
            Fun_9_loop(Codes_2, I_16, S);
        _ -> {Codes, I_15, S}
    end
end,
{Codes_2, I_16, S} = Fun_9(Codes, I_15, S),
        Sorted_codes = counting_sort(Codes_2),
        Res = "",
        I_17 = 0,
        Fun_10 = fun Fun_10_loop(Codes_2, I_17, Res, S, Sorted_codes) ->
    case (I_17 < erlang:length(Sorted_codes)) of
        true ->
            Res_2 = (Res ++ chr((case erlang:is_map(Sorted_codes) of true -> maps:get(I_17, Sorted_codes, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(Sorted_codes) + I_17 + 1, Sorted_codes); _ -> mochi_nth(I_17 + 1, Sorted_codes) end end))),
            I_18 = (I_17 + 1),
            Fun_10_loop(Codes_2, I_18, Res_2, S, Sorted_codes);
        _ -> {Codes_2, I_17, Res, S, Sorted_codes}
    end
end,
{Codes_2, I_18, Res_2, S, Sorted_codes} = Fun_10(Codes_2, I_17, Res, S, Sorted_codes),
        Res_2
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ascii_chars', " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"),
    erlang:put('example1', counting_sort([0, 5, 3, 2, 2])),
    io:format("~ts~n", [mochi_str(erlang:get('example1'))]),
    erlang:put('example2', counting_sort([])),
    io:format("~ts~n", [mochi_str(erlang:get('example2'))]),
    erlang:put('example3', counting_sort([-2, -5, -45])),
    io:format("~ts~n", [mochi_str(erlang:get('example3'))]),
    io:format("~ts~n", [mochi_repr(counting_sort_string("thisisthestring"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
