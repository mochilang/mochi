#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, quick_sort_3partition/3, quick_sort_lomuto_partition/3, lomuto_partition/3, three_way_radix_quicksort/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

quick_sort_3partition(Arr, Left, Right) ->
    try
        case (Right =< Left) of
        true -> throw({return, Arr});
        _ -> ok
    end,
        A = Left,
        I = Left,
        B = Right,
        Pivot = (case erlang:is_map(Arr) of true -> maps:get(Left, Arr, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Arr) + Left + 1, Arr); _ -> mochi_nth(Left + 1, Arr) end end),
        Fun = fun Fun_loop(A, Arr, B, I, Left, Pivot, Right) ->
    case (I =< B) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end) < Pivot) of
        true -> Temp = (case erlang:is_map(Arr) of true -> maps:get(A, Arr, nil); _ -> case A < 0 of true -> mochi_nth(erlang:length(Arr) + A + 1, Arr); _ -> mochi_nth(A + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, A) ++ [(case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end)] ++ lists:nthtail(A + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, I) ++ [Temp] ++ lists:nthtail(I + 1, Arr_2),
            A_2 = (A + 1),
            I_2 = (I + 1),
            A_3 = A_2,
            Arr_7 = Arr_3,
            B_4 = B,
            I_5 = I_2,
            Temp_4 = Temp;
        _ -> case ((case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end) > Pivot) of
        true -> Temp_2 = (case erlang:is_map(Arr) of true -> maps:get(B, Arr, nil); _ -> case B < 0 of true -> mochi_nth(erlang:length(Arr) + B + 1, Arr); _ -> mochi_nth(B + 1, Arr) end end),
            Arr_4 = lists:sublist(Arr, B) ++ [(case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end)] ++ lists:nthtail(B + 1, Arr),
            Arr_5 = lists:sublist(Arr_4, I) ++ [Temp_2] ++ lists:nthtail(I + 1, Arr_4),
            B_2 = (B - 1),
            Arr_6 = Arr_5,
            B_3 = B_2,
            I_4 = I,
            Temp_3 = Temp_2;
        _ -> I_3 = (I + 1),
            Arr_6 = Arr,
            B_3 = B,
            I_4 = I_3,
            Temp_3 = nil
    end,
            A_3 = A,
            Arr_7 = Arr_6,
            B_4 = B_3,
            I_5 = I_4,
            Temp_4 = Temp_3
    end,
            Fun_loop(A_3, Arr_7, B_4, I_5, Left, Pivot, Right);
        _ -> {A, Arr, B, I, Left, Pivot, Right}
    end
end,
{A_3, Arr_7, B_4, I_5, Left, Pivot, Right} = Fun(A, Arr, B, I, Left, Pivot, Right),
        Arr_8 = quick_sort_3partition(Arr_7, Left, (A_3 - 1)),
        Arr_9 = quick_sort_3partition(Arr_8, (B_4 + 1), Right),
        Arr_9
    catch {return, RetCatch} -> RetCatch end.

quick_sort_lomuto_partition(Arr_10, Left_2, Right_2) ->
    try
        case (Left_2 < Right_2) of
        true -> Pivot_index = lomuto_partition(Arr_10, Left_2, Right_2),
            Arr_11 = quick_sort_lomuto_partition(Arr_10, Left_2, (Pivot_index - 1)),
            Arr_12 = quick_sort_lomuto_partition(Arr_11, (Pivot_index + 1), Right_2),
            Arr_13 = Arr_12,
            Pivot_index_2 = Pivot_index;
        _ -> Arr_13 = Arr_10,
            Pivot_index_2 = nil
    end,
        Arr_13
    catch {return, RetCatch} -> RetCatch end.

lomuto_partition(Arr_14, Left_3, Right_3) ->
    try
        Pivot_2 = (case erlang:is_map(Arr_14) of true -> maps:get(Right_3, Arr_14, nil); _ -> case Right_3 < 0 of true -> mochi_nth(erlang:length(Arr_14) + Right_3 + 1, Arr_14); _ -> mochi_nth(Right_3 + 1, Arr_14) end end),
        Store_index = Left_3,
        I_6 = Left_3,
        Fun_2 = fun Fun_2_loop(Arr_14, I_6, Left_3, Pivot_2, Right_3, Store_index) ->
    case (I_6 < Right_3) of
        true ->
            case ((case erlang:is_map(Arr_14) of true -> maps:get(I_6, Arr_14, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Arr_14) + I_6 + 1, Arr_14); _ -> mochi_nth(I_6 + 1, Arr_14) end end) < Pivot_2) of
        true -> Temp_5 = (case erlang:is_map(Arr_14) of true -> maps:get(Store_index, Arr_14, nil); _ -> case Store_index < 0 of true -> mochi_nth(erlang:length(Arr_14) + Store_index + 1, Arr_14); _ -> mochi_nth(Store_index + 1, Arr_14) end end),
            Arr_15 = lists:sublist(Arr_14, Store_index) ++ [(case erlang:is_map(Arr_14) of true -> maps:get(I_6, Arr_14, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Arr_14) + I_6 + 1, Arr_14); _ -> mochi_nth(I_6 + 1, Arr_14) end end)] ++ lists:nthtail(Store_index + 1, Arr_14),
            Arr_16 = lists:sublist(Arr_15, I_6) ++ [Temp_5] ++ lists:nthtail(I_6 + 1, Arr_15),
            Store_index_2 = (Store_index + 1),
            Arr_17 = Arr_16,
            Store_index_3 = Store_index_2,
            Temp_6 = Temp_5;
        _ -> Arr_17 = Arr_14,
            Store_index_3 = Store_index,
            Temp_6 = nil
    end,
            I_7 = (I_6 + 1),
            Fun_2_loop(Arr_17, I_7, Left_3, Pivot_2, Right_3, Store_index_3);
        _ -> {Arr_14, I_6, Left_3, Pivot_2, Right_3, Store_index}
    end
end,
{Arr_17, I_7, Left_3, Pivot_2, Right_3, Store_index_3} = Fun_2(Arr_14, I_6, Left_3, Pivot_2, Right_3, Store_index),
        Temp_7 = (case erlang:is_map(Arr_17) of true -> maps:get(Right_3, Arr_17, nil); _ -> case Right_3 < 0 of true -> mochi_nth(erlang:length(Arr_17) + Right_3 + 1, Arr_17); _ -> mochi_nth(Right_3 + 1, Arr_17) end end),
        Arr_18 = lists:sublist(Arr_17, Right_3) ++ [(case erlang:is_map(Arr_17) of true -> maps:get(Store_index_3, Arr_17, nil); _ -> case Store_index_3 < 0 of true -> mochi_nth(erlang:length(Arr_17) + Store_index_3 + 1, Arr_17); _ -> mochi_nth(Store_index_3 + 1, Arr_17) end end)] ++ lists:nthtail(Right_3 + 1, Arr_17),
        Arr_19 = lists:sublist(Arr_18, Store_index_3) ++ [Temp_7] ++ lists:nthtail(Store_index_3 + 1, Arr_18),
        Store_index_3
    catch {return, RetCatch} -> RetCatch end.

three_way_radix_quicksort(Arr_20) ->
    try
        case (erlang:length(Arr_20) =< 1) of
        true -> throw({return, Arr_20});
        _ -> ok
    end,
        Pivot_3 = (case erlang:is_map(Arr_20) of true -> maps:get(0, Arr_20, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr_20) + 0 + 1, Arr_20); _ -> mochi_nth(0 + 1, Arr_20) end end),
        Less = [],
        Equal = [],
        Greater = [],
        I_8 = 0,
        Fun_3 = fun Fun_3_loop(Arr_20, Equal, Greater, I_8, Less, Pivot_3) ->
    case (I_8 < erlang:length(Arr_20)) of
        true ->
            Val = (case erlang:is_map(Arr_20) of true -> maps:get(I_8, Arr_20, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Arr_20) + I_8 + 1, Arr_20); _ -> mochi_nth(I_8 + 1, Arr_20) end end),
            case (Val < Pivot_3) of
        true -> Less_2 = lists:append((case Less of nil -> []; _ -> Less end), [Val]),
            Equal_4 = Equal,
            Greater_4 = Greater,
            Less_3 = Less_2;
        _ -> case (Val > Pivot_3) of
        true -> Greater_2 = lists:append((case Greater of nil -> []; _ -> Greater end), [Val]),
            Equal_3 = Equal,
            Greater_3 = Greater_2;
        _ -> Equal_2 = lists:append((case Equal of nil -> []; _ -> Equal end), [Val]),
            Equal_3 = Equal_2,
            Greater_3 = Greater
    end,
            Equal_4 = Equal_3,
            Greater_4 = Greater_3,
            Less_3 = Less
    end,
            I_9 = (I_8 + 1),
            Fun_3_loop(Arr_20, Equal_4, Greater_4, I_9, Less_3, Pivot_3);
        _ -> {Arr_20, Equal, Greater, I_8, Less, Pivot_3}
    end
end,
{Arr_20, Equal_4, Greater_4, I_9, Less_3, Pivot_3} = Fun_3(Arr_20, Equal, Greater, I_8, Less, Pivot_3),
        Sorted_less = three_way_radix_quicksort(Less_3),
        Sorted_greater = three_way_radix_quicksort(Greater_4),
        Result = lists:append(Sorted_less, Equal_4),
        Result_2 = lists:append(Result, Sorted_greater),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('array1', [5, -1, -1, 5, 5, 24, 0]),
    erlang:put('array1', quick_sort_3partition(erlang:get('array1'), 0, (erlang:length(erlang:get('array1')) - 1))),
    io:format("~ts~n", [mochi_str(erlang:get('array1'))]),
    erlang:put('array2', [9, 0, 2, 6]),
    erlang:put('array2', quick_sort_3partition(erlang:get('array2'), 0, (erlang:length(erlang:get('array2')) - 1))),
    io:format("~ts~n", [mochi_str(erlang:get('array2'))]),
    erlang:put('array3', []),
    erlang:put('array3', quick_sort_3partition(erlang:get('array3'), 0, (erlang:length(erlang:get('array3')) - 1))),
    io:format("~ts~n", [mochi_str(erlang:get('array3'))]),
    erlang:put('nums1', [0, 5, 3, 1, 2]),
    erlang:put('nums1', quick_sort_lomuto_partition(erlang:get('nums1'), 0, (erlang:length(erlang:get('nums1')) - 1))),
    io:format("~ts~n", [mochi_str(erlang:get('nums1'))]),
    erlang:put('nums2', []),
    erlang:put('nums2', quick_sort_lomuto_partition(erlang:get('nums2'), 0, (erlang:length(erlang:get('nums2')) - 1))),
    io:format("~ts~n", [mochi_str(erlang:get('nums2'))]),
    erlang:put('nums3', [-2, 5, 0, -4]),
    erlang:put('nums3', quick_sort_lomuto_partition(erlang:get('nums3'), 0, (erlang:length(erlang:get('nums3')) - 1))),
    io:format("~ts~n", [mochi_str(erlang:get('nums3'))]),
    io:format("~ts~n", [mochi_str(three_way_radix_quicksort([]))]),
    io:format("~ts~n", [mochi_str(three_way_radix_quicksort([1]))]),
    io:format("~ts~n", [mochi_str(three_way_radix_quicksort([-5, -2, 1, -2, 0, 1]))]),
    io:format("~ts~n", [mochi_str(three_way_radix_quicksort([1, 2, 5, 1, 2, 0, 0, 5, 2, -1]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
