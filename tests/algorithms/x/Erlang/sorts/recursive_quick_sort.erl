#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, concat/2, quick_sort/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

concat(A, B) ->
    try
        Result = [],
        Fun = fun Fun_loop(List, A, B, Result) ->
    case List of
        [] -> {A, B, Result};
        [X|X_rest] ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [X]),
            Fun_loop(X_rest, A, B, Result_2);
        _ -> {A, B, Result}
    end
end,
{A, B, Result_2} = Fun(A, A, B, Result),
        Fun_2 = fun Fun_2_loop(List, A, B, Result_2) ->
    case List of
        [] -> {A, B, Result_2};
        [X_2|X_2_rest] ->
            Result_3 = lists:append((case Result_2 of nil -> []; _ -> Result_2 end), [X_2]),
            Fun_2_loop(X_2_rest, A, B, Result_3);
        _ -> {A, B, Result_2}
    end
end,
{A, B, Result_3} = Fun_2(B, A, B, Result_2),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

quick_sort(Data) ->
    try
        case (erlang:length(Data) =< 1) of
        true -> throw({return, Data});
        _ -> ok
    end,
        Pivot = (case erlang:is_map(Data) of true -> maps:get(0, Data, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Data) + 0 + 1, Data); _ -> mochi_nth(0 + 1, Data) end end),
        Left = [],
        Right = [],
        I = 1,
        Fun_3 = fun Fun_3_loop(Data, I, Left, Pivot, Right) ->
    case (I < erlang:length(Data)) of
        true ->
            E = (case erlang:is_map(Data) of true -> maps:get(I, Data, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Data) + I + 1, Data); _ -> mochi_nth(I + 1, Data) end end),
            case (E =< Pivot) of
        true -> Left_2 = lists:append((case Left of nil -> []; _ -> Left end), [E]),
            Left_3 = Left_2,
            Right_3 = Right;
        _ -> Right_2 = lists:append((case Right of nil -> []; _ -> Right end), [E]),
            Left_3 = Left,
            Right_3 = Right_2
    end,
            I_2 = (I + 1),
            Fun_3_loop(Data, I_2, Left_3, Pivot, Right_3);
        _ -> {Data, I, Left, Pivot, Right}
    end
end,
{Data, I_2, Left_3, Pivot, Right_3} = Fun_3(Data, I, Left, Pivot, Right),
        Sorted_left = quick_sort(Left_3),
        Sorted_right = quick_sort(Right_3),
        Left_pivot = lists:append((case Sorted_left of nil -> []; _ -> Sorted_left end), [Pivot]),
        lists:append(Left_pivot, Sorted_right)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(quick_sort([2, 1, 0]))]),
    io:format("~ts~n", [mochi_str(quick_sort([3, 5, 2, 4, 1]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
