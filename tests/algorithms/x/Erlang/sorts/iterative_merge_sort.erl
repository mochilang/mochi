#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, merge/4, iter_merge_sort/1, list_to_string/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

merge(A, Low, Mid, High) ->
    try
        Left = lists:sublist(A, Low + 1, (Mid - Low)),
        Right = lists:sublist(A, Mid + 1, ((High + 1) - Mid)),
        Result = [],
        Fun = fun Fun_loop(A, High, Left, Low, Mid, Result, Right) ->
    case ((erlang:length(Left) > 0) andalso (erlang:length(Right) > 0)) of
        true ->
            case ((case erlang:is_map(Left) of true -> maps:get(0, Left, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Left) + 0 + 1, Left); _ -> mochi_nth(0 + 1, Left) end end) =< (case erlang:is_map(Right) of true -> maps:get(0, Right, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Right) + 0 + 1, Right); _ -> mochi_nth(0 + 1, Right) end end)) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Left) of true -> maps:get(0, Left, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Left) + 0 + 1, Left); _ -> mochi_nth(0 + 1, Left) end end)]),
            Left_2 = lists:sublist(Left, 1 + 1, length(Left) - 1),
            Left_3 = Left_2,
            Result_4 = Result_2,
            Right_3 = Right;
        _ -> Result_3 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Right) of true -> maps:get(0, Right, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Right) + 0 + 1, Right); _ -> mochi_nth(0 + 1, Right) end end)]),
            Right_2 = lists:sublist(Right, 1 + 1, length(Right) - 1),
            Left_3 = Left,
            Result_4 = Result_3,
            Right_3 = Right_2
    end,
            Fun_loop(A, High, Left_3, Low, Mid, Result_4, Right_3);
        _ -> {A, High, Left, Low, Mid, Result, Right}
    end
end,
{A, High, Left_3, Low, Mid, Result_4, Right_3} = Fun(A, High, Left, Low, Mid, Result, Right),
        I = 0,
        Fun_2 = fun Fun_2_loop(A, High, I, Left_3, Low, Mid, Result_4, Right_3) ->
    case (I < erlang:length(Left_3)) of
        true ->
            Result_5 = lists:append((case Result_4 of nil -> []; _ -> Result_4 end), [(case erlang:is_map(Left_3) of true -> maps:get(I, Left_3, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Left_3) + I + 1, Left_3); _ -> mochi_nth(I + 1, Left_3) end end)]),
            I_2 = (I + 1),
            Fun_2_loop(A, High, I_2, Left_3, Low, Mid, Result_5, Right_3);
        _ -> {A, High, I, Left_3, Low, Mid, Result_4, Right_3}
    end
end,
{A, High, I_2, Left_3, Low, Mid, Result_5, Right_3} = Fun_2(A, High, I, Left_3, Low, Mid, Result_4, Right_3),
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(A, High, I_3, Left_3, Low, Mid, Result_5, Right_3) ->
    case (I_3 < erlang:length(Right_3)) of
        true ->
            Result_6 = lists:append((case Result_5 of nil -> []; _ -> Result_5 end), [(case erlang:is_map(Right_3) of true -> maps:get(I_3, Right_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Right_3) + I_3 + 1, Right_3); _ -> mochi_nth(I_3 + 1, Right_3) end end)]),
            I_4 = (I_3 + 1),
            Fun_3_loop(A, High, I_4, Left_3, Low, Mid, Result_6, Right_3);
        _ -> {A, High, I_3, Left_3, Low, Mid, Result_5, Right_3}
    end
end,
{A, High, I_4, Left_3, Low, Mid, Result_6, Right_3} = Fun_3(A, High, I_3, Left_3, Low, Mid, Result_5, Right_3),
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(A, High, I_5, Left_3, Low, Mid, Result_6, Right_3) ->
    case (I_5 < erlang:length(Result_6)) of
        true ->
            A_2 = lists:sublist(A, (Low + I_5)) ++ [(case erlang:is_map(Result_6) of true -> maps:get(I_5, Result_6, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Result_6) + I_5 + 1, Result_6); _ -> mochi_nth(I_5 + 1, Result_6) end end)] ++ lists:nthtail((Low + I_5) + 1, A),
            I_6 = (I_5 + 1),
            Fun_4_loop(A_2, High, I_6, Left_3, Low, Mid, Result_6, Right_3);
        _ -> {A, High, I_5, Left_3, Low, Mid, Result_6, Right_3}
    end
end,
{A_2, High, I_6, Left_3, Low, Mid, Result_6, Right_3} = Fun_4(A, High, I_5, Left_3, Low, Mid, Result_6, Right_3),
        A_2
    catch {return, RetCatch} -> RetCatch end.

iter_merge_sort(Items) ->
    try
        N = erlang:length(Items),
        case (N =< 1) of
        true -> throw({return, Items});
        _ -> ok
    end,
        Arr = lists:sublist(Items, 0 + 1, length(Items) - 0),
        P = 2,
        Fun_6 = fun Fun_6_loop(Arr, Items, N, P) ->
    case (P =< N) of
        true ->
            try
                I_7 = 0,
                Fun_5 = fun Fun_5_loop(Arr, I_7, Items, N, P) ->
    case (I_7 < N) of
        true ->
            High_2 = ((I_7 + P) - 1),
            case (High_2 >= N) of
        true -> High_3 = (N - 1),
            High_4 = High_3;
        _ -> High_4 = High_2
    end,
            Low_2 = I_7,
            Mid_2 = (((Low_2 + High_4) + 1) div 2),
            Arr_2 = merge(Arr, Low_2, Mid_2, High_4),
            I_8 = (I_7 + P),
            Fun_5_loop(Arr_2, I_8, Items, N, P);
        _ -> {Arr, I_7, Items, N, P}
    end
end,
{Arr_2, I_8, Items, N, P} = Fun_5(Arr, I_7, Items, N, P),
                case ((P * 2) >= N) of
        true -> Mid2 = (I_8 - P),
            Arr_3 = merge(Arr_2, 0, Mid2, (N - 1)),
            throw({break, Arr_3, Items, N, P}),
            Arr_4 = Arr_3,
            Mid2_2 = Mid2;
        _ -> Arr_4 = Arr_2,
            Mid2_2 = nil
    end,
                P_2 = (P * 2),
                Fun_6_loop(Arr_4, Items, N, P_2)
            catch
                {continue, C0, C1, C2, C3} -> Fun_6_loop(C0, C1, C2, C3);
                {break, B0, B1, B2, B3} -> {B0, B1, B2, B3}
            end;
        _ -> {Arr, Items, N, P}
    end
end,
{Arr_4, Items, N, P_2} = Fun_6(Arr, Items, N, P),
        Arr_4
    catch {return, RetCatch} -> RetCatch end.

list_to_string(Arr_5) ->
    try
        S = "[",
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(Arr_5, I_9, S) ->
    case (I_9 < erlang:length(Arr_5)) of
        true ->
            S_2 = (S ++ mochi_str((case erlang:is_map(Arr_5) of true -> maps:get(I_9, Arr_5, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Arr_5) + I_9 + 1, Arr_5); _ -> mochi_nth(I_9 + 1, Arr_5) end end))),
            case (I_9 < (erlang:length(Arr_5) - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_10 = (I_9 + 1),
            Fun_7_loop(Arr_5, I_10, S_4);
        _ -> {Arr_5, I_9, S}
    end
end,
{Arr_5, I_10, S_4} = Fun_7(Arr_5, I_9, S),
        (S_4 ++ "]")
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(list_to_string(iter_merge_sort([5, 9, 8, 7, 1, 2, 7])))]),
    io:format("~ts~n", [mochi_repr(list_to_string(iter_merge_sort([1])))]),
    io:format("~ts~n", [mochi_repr(list_to_string(iter_merge_sort([2, 1])))]),
    io:format("~ts~n", [mochi_repr(list_to_string(iter_merge_sort([4, 3, 2, 1])))]),
    io:format("~ts~n", [mochi_repr(list_to_string(iter_merge_sort([5, 4, 3, 2, 1])))]),
    io:format("~ts~n", [mochi_repr(list_to_string(iter_merge_sort([-2, -9, -1, -4])))]),
    io:format("~ts~n", [mochi_repr(list_to_string(iter_merge_sort([])))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
