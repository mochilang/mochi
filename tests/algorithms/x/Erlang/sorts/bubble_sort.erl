#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bubble_sort_iterative/1, bubble_sort_recursive/1, copy_list/1, list_eq/2, test_bubble_sort/0, main/0]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

bubble_sort_iterative(Collection) ->
    try
        N = erlang:length(Collection),
        Fun_2 = fun Fun_2_loop(Collection, N) ->
    case (N > 0) of
        true ->
            try
                Swapped = false,
                J = 0,
                Fun = fun Fun_loop(Collection, J, N, Swapped) ->
    case (J < (N - 1)) of
        true ->
            case ((case erlang:is_map(Collection) of true -> maps:get(J, Collection, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Collection) + J + 1, Collection); _ -> mochi_nth(J + 1, Collection) end end) > (case erlang:is_map(Collection) of true -> maps:get((J + 1), Collection, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Collection) + (J + 1) + 1, Collection); _ -> mochi_nth((J + 1) + 1, Collection) end end)) of
        true -> Temp = (case erlang:is_map(Collection) of true -> maps:get(J, Collection, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Collection) + J + 1, Collection); _ -> mochi_nth(J + 1, Collection) end end),
            Collection_2 = lists:sublist(Collection, J) ++ [(case erlang:is_map(Collection) of true -> maps:get((J + 1), Collection, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Collection) + (J + 1) + 1, Collection); _ -> mochi_nth((J + 1) + 1, Collection) end end)] ++ lists:nthtail(J + 1, Collection),
            Collection_3 = lists:sublist(Collection_2, (J + 1)) ++ [Temp] ++ lists:nthtail((J + 1) + 1, Collection_2),
            Swapped_2 = true,
            Collection_4 = Collection_3,
            Swapped_3 = Swapped_2,
            Temp_2 = Temp;
        _ -> Collection_4 = Collection,
            Swapped_3 = Swapped,
            Temp_2 = nil
    end,
            J_2 = (J + 1),
            Fun_loop(Collection_4, J_2, N, Swapped_3);
        _ -> {Collection, J, N, Swapped}
    end
end,
{Collection_4, J_2, N, Swapped_3} = Fun(Collection, J, N, Swapped),
                case mochi_not(Swapped_3) of
        true -> throw({break, Collection_4, N});
        _ -> ok
    end,
                N_2 = (N - 1),
                Fun_2_loop(Collection_4, N_2)
            catch
                {continue, C0, C1} -> Fun_2_loop(C0, C1);
                {break, B0, B1} -> {B0, B1}
            end;
        _ -> {Collection, N}
    end
end,
{Collection_4, N_2} = Fun_2(Collection, N),
        Collection_4
    catch {return, Ret} -> Ret end.

bubble_sort_recursive(Collection_5) ->
    try
        N_3 = erlang:length(Collection_5),
        Swapped_4 = false,
        I = 0,
        Fun_3 = fun Fun_3_loop(Collection_5, I, N_3, Swapped_4) ->
    case (I < (N_3 - 1)) of
        true ->
            case ((case erlang:is_map(Collection_5) of true -> maps:get(I, Collection_5, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Collection_5) + I + 1, Collection_5); _ -> mochi_nth(I + 1, Collection_5) end end) > (case erlang:is_map(Collection_5) of true -> maps:get((I + 1), Collection_5, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Collection_5) + (I + 1) + 1, Collection_5); _ -> mochi_nth((I + 1) + 1, Collection_5) end end)) of
        true -> Temp_3 = (case erlang:is_map(Collection_5) of true -> maps:get(I, Collection_5, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Collection_5) + I + 1, Collection_5); _ -> mochi_nth(I + 1, Collection_5) end end),
            Collection_6 = lists:sublist(Collection_5, I) ++ [(case erlang:is_map(Collection_5) of true -> maps:get((I + 1), Collection_5, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Collection_5) + (I + 1) + 1, Collection_5); _ -> mochi_nth((I + 1) + 1, Collection_5) end end)] ++ lists:nthtail(I + 1, Collection_5),
            Collection_7 = lists:sublist(Collection_6, (I + 1)) ++ [Temp_3] ++ lists:nthtail((I + 1) + 1, Collection_6),
            Swapped_5 = true,
            Collection_8 = Collection_7,
            Swapped_6 = Swapped_5,
            Temp_4 = Temp_3;
        _ -> Collection_8 = Collection_5,
            Swapped_6 = Swapped_4,
            Temp_4 = nil
    end,
            I_2 = (I + 1),
            Fun_3_loop(Collection_8, I_2, N_3, Swapped_6);
        _ -> {Collection_5, I, N_3, Swapped_4}
    end
end,
{Collection_8, I_2, N_3, Swapped_6} = Fun_3(Collection_5, I, N_3, Swapped_4),
        case (Swapped_6 /= nil) of
        true -> throw({return, bubble_sort_recursive(Collection_8)});
        _ -> ok
    end,
        Collection_8
    catch {return, Ret} -> Ret end.

copy_list(Xs) ->
    try
        Out = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(I_3, Out, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            Out_2 = lists:append((case Out of nil -> []; _ -> Out end), [(case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end)]),
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, Out_2, Xs);
        _ -> {I_3, Out, Xs}
    end
end,
{I_4, Out_2, Xs} = Fun_4(I_3, Out, Xs),
        Out_2
    catch {return, Ret} -> Ret end.

list_eq(A, B) ->
    try
        case (erlang:length(A) /= erlang:length(B)) of
        true -> throw({return, false});
        _ -> ok
    end,
        K = 0,
        Fun_5 = fun Fun_5_loop(A, B, K) ->
    case (K < erlang:length(A)) of
        true ->
            case ((case erlang:is_map(A) of true -> maps:get(K, A, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(A) + K + 1, A); _ -> mochi_nth(K + 1, A) end end) /= (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            K_2 = (K + 1),
            Fun_5_loop(A, B, K_2);
        _ -> {A, B, K}
    end
end,
{A, B, K_2} = Fun_5(A, B, K),
        true
    catch {return, Ret} -> Ret end.

test_bubble_sort() ->
    try
        Example = [0, 5, 2, 3, 2],
        Expected = [0, 2, 2, 3, 5],
        case mochi_not(list_eq(bubble_sort_iterative(copy_list(Example)), Expected)) of
        true -> erlang:error({panic, "iterative failed"});
        _ -> ok
    end,
        case mochi_not(list_eq(bubble_sort_recursive(copy_list(Example)), Expected)) of
        true -> erlang:error({panic, "recursive failed"});
        _ -> ok
    end,
        Empty = [],
        case (erlang:length(bubble_sort_iterative(copy_list(Empty))) /= 0) of
        true -> erlang:error({panic, "empty iterative failed"});
        _ -> ok
    end,
        case (erlang:length(bubble_sort_recursive(copy_list(Empty))) /= 0) of
        true -> erlang:error({panic, "empty recursive failed"});
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_bubble_sort(),
        Arr = [5, 1, 4, 2, 8],
        io:format("~ts~n", [mochi_str(bubble_sort_iterative(copy_list(Arr)))]),
        io:format("~ts~n", [mochi_str(bubble_sort_recursive(copy_list(Arr)))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
