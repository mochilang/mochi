#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, set_at_int/3, comp_and_swap/4, bitonic_merge/4, bitonic_sort/4, main/0]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

set_at_int(Xs, Idx, Value) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, Idx, Res, Value, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case (I == Idx) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Value]),
            Res_4 = Res_2;
        _ -> Res_3 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            Res_4 = Res_3
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Idx, Res_4, Value, Xs);
        _ -> {I, Idx, Res, Value, Xs}
    end
end,
{I_2, Idx, Res_4, Value, Xs} = Fun(I, Idx, Res, Value, Xs),
        Res_4
    catch {return, Ret} -> Ret end.

comp_and_swap(Arr, I_3, J, Dir) ->
    try
        Res_5 = Arr,
        Xi = (case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr) + I_3 + 1, Arr); _ -> mochi_nth(I_3 + 1, Arr) end end),
        Xj = (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end),
        case (((Dir == 1) andalso (Xi > Xj)) orelse ((Dir == 0) andalso (Xi < Xj))) of
        true -> Res_6 = set_at_int(Res_5, I_3, Xj),
            Res_7 = set_at_int(Res_6, J, Xi),
            Res_8 = Res_7;
        _ -> Res_8 = Res_5
    end,
        Res_8
    catch {return, Ret} -> Ret end.

bitonic_merge(Arr_2, Low, Length, Dir_2) ->
    try
        Res_9 = Arr_2,
        case (Length > 1) of
        true -> Mid = (Length div 2),
            K = Low,
            Fun_2 = fun Fun_2_loop(Arr_2, Dir_2, K, Length, Low, Mid, Res_9) ->
    case (K < (Low + Mid)) of
        true ->
            Res_10 = comp_and_swap(Res_9, K, (K + Mid), Dir_2),
            K_2 = (K + 1),
            Fun_2_loop(Arr_2, Dir_2, K_2, Length, Low, Mid, Res_10);
        _ -> {Arr_2, Dir_2, K, Length, Low, Mid, Res_9}
    end
end,
{Arr_2, Dir_2, K_2, Length, Low, Mid, Res_10} = Fun_2(Arr_2, Dir_2, K, Length, Low, Mid, Res_9),
            Res_11 = bitonic_merge(Res_10, Low, Mid, Dir_2),
            Res_12 = bitonic_merge(Res_11, (Low + Mid), Mid, Dir_2),
            Fun_3 = Fun_2,
            K_3 = K_2,
            Mid_2 = Mid,
            Res_13 = Res_12;
        _ -> Fun_3 = nil,
            K_3 = nil,
            Mid_2 = nil,
            Res_13 = Res_9
    end,
        Res_13
    catch {return, Ret} -> Ret end.

bitonic_sort(Arr_3, Low_2, Length_2, Dir_3) ->
    try
        Res_14 = Arr_3,
        case (Length_2 > 1) of
        true -> Mid_3 = (Length_2 div 2),
            Res_15 = bitonic_sort(Res_14, Low_2, Mid_3, 1),
            Res_16 = bitonic_sort(Res_15, (Low_2 + Mid_3), Mid_3, 0),
            Res_17 = bitonic_merge(Res_16, Low_2, Length_2, Dir_3),
            Mid_4 = Mid_3,
            Res_18 = Res_17;
        _ -> Mid_4 = nil,
            Res_18 = Res_14
    end,
        Res_18
    catch {return, Ret} -> Ret end.

main() ->
    try
        Data = [12, 34, 92, -23, 0, -121, -167, 145],
        Asc = bitonic_sort(Data, 0, erlang:length(Data), 1),
        io:format("~ts~n", [mochi_str(Asc)]),
        Desc = bitonic_merge(Asc, 0, erlang:length(Asc), 0),
        io:format("~ts~n", [mochi_str(Desc)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
