#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, comb_sort/1, main/0]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

comb_sort(Data) ->
    try
        Shrink_factor = 1.3,
        Gap = erlang:length(Data),
        Completed = false,
        Fun_2 = fun Fun_2_loop(Completed, Data, Gap, Shrink_factor) ->
    case mochi_not(Completed) of
        true ->
            Gap_2 = mochi_to_int(mochi_safe_div(Gap, Shrink_factor)),
            case (Gap_2 =< 1) of
        true -> Gap_3 = 1,
            Completed_2 = true,
            Completed_3 = Completed_2,
            Gap_4 = Gap_3;
        _ -> Completed_3 = Completed,
            Gap_4 = Gap_2
    end,
            Index = 0,
            Fun = fun Fun_loop(Completed_3, Data, Gap_4, Index, Shrink_factor) ->
    case ((Index + Gap_4) < erlang:length(Data)) of
        true ->
            case ((case erlang:is_map(Data) of true -> maps:get(Index, Data, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Data) + Index + 1, Data); _ -> mochi_nth(Index + 1, Data) end end) > (case erlang:is_map(Data) of true -> maps:get((Index + Gap_4), Data, nil); _ -> case (Index + Gap_4) < 0 of true -> mochi_nth(erlang:length(Data) + (Index + Gap_4) + 1, Data); _ -> mochi_nth((Index + Gap_4) + 1, Data) end end)) of
        true -> Tmp = (case erlang:is_map(Data) of true -> maps:get(Index, Data, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Data) + Index + 1, Data); _ -> mochi_nth(Index + 1, Data) end end),
            Data_2 = lists:sublist(Data, Index) ++ [(case erlang:is_map(Data) of true -> maps:get((Index + Gap_4), Data, nil); _ -> case (Index + Gap_4) < 0 of true -> mochi_nth(erlang:length(Data) + (Index + Gap_4) + 1, Data); _ -> mochi_nth((Index + Gap_4) + 1, Data) end end)] ++ lists:nthtail(Index + 1, Data),
            Data_3 = lists:sublist(Data_2, (Index + Gap_4)) ++ [Tmp] ++ lists:nthtail((Index + Gap_4) + 1, Data_2),
            Completed_4 = false,
            Completed_5 = Completed_4,
            Data_4 = Data_3,
            Tmp_2 = Tmp;
        _ -> Completed_5 = Completed_3,
            Data_4 = Data,
            Tmp_2 = nil
    end,
            Index_2 = (Index + 1),
            Fun_loop(Completed_5, Data_4, Gap_4, Index_2, Shrink_factor);
        _ -> {Completed_3, Data, Gap_4, Index, Shrink_factor}
    end
end,
{Completed_5, Data_4, Gap_4, Index_2, Shrink_factor} = Fun(Completed_3, Data, Gap_4, Index, Shrink_factor),
            Fun_2_loop(Completed_5, Data_4, Gap_4, Shrink_factor);
        _ -> {Completed, Data, Gap, Shrink_factor}
    end
end,
{Completed_5, Data_4, Gap_4, Shrink_factor} = Fun_2(Completed, Data, Gap, Shrink_factor),
        Data_4
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(comb_sort([0, 5, 3, 2, 2]))]),
        io:format("~ts~n", [mochi_repr(comb_sort([]))]),
        io:format("~ts~n", [mochi_repr(comb_sort([99, 45, -7, 8, 2, 0, -15, 3]))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
