#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pigeonhole_sort/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

pigeonhole_sort(Arr) ->
    try
        case (erlang:length(Arr) == 0) of
        true -> throw({return, Arr});
        _ -> ok
    end,
        Min_val = mochi_to_int(lists:min(Arr)),
        Max_val = mochi_to_int(lists:max(Arr)),
        Size = ((Max_val - Min_val) + 1),
        Holes = [],
        I = 0,
        Fun = fun Fun_loop(Arr, Holes, I, Max_val, Min_val, Size) ->
    case (I < Size) of
        true ->
            Holes_2 = lists:append((case Holes of nil -> []; _ -> Holes end), [0]),
            I_2 = (I + 1),
            Fun_loop(Arr, Holes_2, I_2, Max_val, Min_val, Size);
        _ -> {Arr, Holes, I, Max_val, Min_val, Size}
    end
end,
{Arr, Holes_2, I_2, Max_val, Min_val, Size} = Fun(Arr, Holes, I, Max_val, Min_val, Size),
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Arr, Holes_2, I_3, Max_val, Min_val, Size) ->
    case (I_3 < erlang:length(Arr)) of
        true ->
            X = (case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr) + I_3 + 1, Arr); _ -> mochi_nth(I_3 + 1, Arr) end end),
            Index = (X - Min_val),
            Holes_3 = lists:sublist(Holes_2, Index) ++ [((case erlang:is_map(Holes_2) of true -> maps:get(Index, Holes_2, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Holes_2) + Index + 1, Holes_2); _ -> mochi_nth(Index + 1, Holes_2) end end) + 1)] ++ lists:nthtail(Index + 1, Holes_2),
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr, Holes_3, I_4, Max_val, Min_val, Size);
        _ -> {Arr, Holes_2, I_3, Max_val, Min_val, Size}
    end
end,
{Arr, Holes_3, I_4, Max_val, Min_val, Size} = Fun_2(Arr, Holes_2, I_3, Max_val, Min_val, Size),
        Sorted_index = 0,
        Count = 0,
        Fun_4 = fun Fun_4_loop(Arr, Count, Holes_3, I_4, Max_val, Min_val, Size, Sorted_index) ->
    case (Count < Size) of
        true ->
            Fun_3 = fun Fun_3_loop(Arr, Count, Holes_3, I_4, Max_val, Min_val, Size, Sorted_index) ->
    case ((case erlang:is_map(Holes_3) of true -> maps:get(Count, Holes_3, nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length(Holes_3) + Count + 1, Holes_3); _ -> mochi_nth(Count + 1, Holes_3) end end) > 0) of
        true ->
            Arr_2 = lists:sublist(Arr, Sorted_index) ++ [(Count + Min_val)] ++ lists:nthtail(Sorted_index + 1, Arr),
            Holes_4 = lists:sublist(Holes_3, Count) ++ [((case erlang:is_map(Holes_3) of true -> maps:get(Count, Holes_3, nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length(Holes_3) + Count + 1, Holes_3); _ -> mochi_nth(Count + 1, Holes_3) end end) - 1)] ++ lists:nthtail(Count + 1, Holes_3),
            Sorted_index_2 = (Sorted_index + 1),
            Fun_3_loop(Arr_2, Count, Holes_4, I_4, Max_val, Min_val, Size, Sorted_index_2);
        _ -> {Arr, Count, Holes_3, I_4, Max_val, Min_val, Size, Sorted_index}
    end
end,
{Arr_2, Count, Holes_4, I_4, Max_val, Min_val, Size, Sorted_index_2} = Fun_3(Arr, Count, Holes_3, I_4, Max_val, Min_val, Size, Sorted_index),
            Count_2 = (Count + 1),
            Fun_4_loop(Arr_2, Count_2, Holes_4, I_4, Max_val, Min_val, Size, Sorted_index_2);
        _ -> {Arr, Count, Holes_3, I_4, Max_val, Min_val, Size, Sorted_index}
    end
end,
{Arr_2, Count_2, Holes_4, I_4, Max_val, Min_val, Size, Sorted_index_2} = Fun_4(Arr, Count, Holes_3, I_4, Max_val, Min_val, Size, Sorted_index),
        Arr_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('example', [8, 3, 2, 7, 4, 6, 8]),
    erlang:put('result', pigeonhole_sort(erlang:get('example'))),
    erlang:put('output', "Sorted order is:"),
    erlang:put('j', 0),
    Fun_5 = fun Fun_5_loop() ->
    case (erlang:get('j') < erlang:length(erlang:get('result'))) of
        true ->
            erlang:put('output', ((erlang:get('output') ++ " ") ++ mochi_str((case erlang:is_map(erlang:get('result')) of true -> maps:get(erlang:get('j'), erlang:get('result'), nil); _ -> case erlang:get('j') < 0 of true -> mochi_nth(erlang:length(erlang:get('result')) + erlang:get('j') + 1, erlang:get('result')); _ -> mochi_nth(erlang:get('j') + 1, erlang:get('result')) end end)))),
            erlang:put('j', (erlang:get('j') + 1)),
            Fun_5_loop();
        _ -> {}
    end
end,
{} = Fun_5(),
    io:format("~ts~n", [mochi_repr(erlang:get('output'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
