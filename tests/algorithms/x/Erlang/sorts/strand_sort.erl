#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, merge/3, strand_sort_rec/3, strand_sort/2]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

merge(Xs, Ys, Reverse) ->
    try
        Result = [],
        I = 0,
        J = 0,
        Fun = fun Fun_loop(I, J, Result, Reverse, Xs, Ys) ->
    case ((I < erlang:length(Xs)) andalso (J < erlang:length(Ys))) of
        true ->
            case Reverse of
        true -> case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) > (case erlang:is_map(Ys) of true -> maps:get(J, Ys, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Ys) + J + 1, Ys); _ -> mochi_nth(J + 1, Ys) end end)) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            I_2 = (I + 1),
            I_3 = I_2,
            J_3 = J,
            Result_4 = Result_2;
        _ -> Result_3 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Ys) of true -> maps:get(J, Ys, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Ys) + J + 1, Ys); _ -> mochi_nth(J + 1, Ys) end end)]),
            J_2 = (J + 1),
            I_3 = I,
            J_3 = J_2,
            Result_4 = Result_3
    end,
            I_6 = I_3,
            J_6 = J_3,
            Result_8 = Result_4;
        _ -> case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) < (case erlang:is_map(Ys) of true -> maps:get(J, Ys, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Ys) + J + 1, Ys); _ -> mochi_nth(J + 1, Ys) end end)) of
        true -> Result_5 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            I_4 = (I + 1),
            I_5 = I_4,
            J_5 = J,
            Result_7 = Result_5;
        _ -> Result_6 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Ys) of true -> maps:get(J, Ys, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Ys) + J + 1, Ys); _ -> mochi_nth(J + 1, Ys) end end)]),
            J_4 = (J + 1),
            I_5 = I,
            J_5 = J_4,
            Result_7 = Result_6
    end,
            I_6 = I_5,
            J_6 = J_5,
            Result_8 = Result_7
    end,
            Fun_loop(I_6, J_6, Result_8, Reverse, Xs, Ys);
        _ -> {I, J, Result, Reverse, Xs, Ys}
    end
end,
{I_6, J_6, Result_8, Reverse, Xs, Ys} = Fun(I, J, Result, Reverse, Xs, Ys),
        Fun_2 = fun Fun_2_loop(I_6, J_6, Result_8, Reverse, Xs, Ys) ->
    case (I_6 < erlang:length(Xs)) of
        true ->
            Result_9 = lists:append((case Result_8 of nil -> []; _ -> Result_8 end), [(case erlang:is_map(Xs) of true -> maps:get(I_6, Xs, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Xs) + I_6 + 1, Xs); _ -> mochi_nth(I_6 + 1, Xs) end end)]),
            I_7 = (I_6 + 1),
            Fun_2_loop(I_7, J_6, Result_9, Reverse, Xs, Ys);
        _ -> {I_6, J_6, Result_8, Reverse, Xs, Ys}
    end
end,
{I_7, J_6, Result_9, Reverse, Xs, Ys} = Fun_2(I_6, J_6, Result_8, Reverse, Xs, Ys),
        Fun_3 = fun Fun_3_loop(I_7, J_6, Result_9, Reverse, Xs, Ys) ->
    case (J_6 < erlang:length(Ys)) of
        true ->
            Result_10 = lists:append((case Result_9 of nil -> []; _ -> Result_9 end), [(case erlang:is_map(Ys) of true -> maps:get(J_6, Ys, nil); _ -> case J_6 < 0 of true -> mochi_nth(erlang:length(Ys) + J_6 + 1, Ys); _ -> mochi_nth(J_6 + 1, Ys) end end)]),
            J_7 = (J_6 + 1),
            Fun_3_loop(I_7, J_7, Result_10, Reverse, Xs, Ys);
        _ -> {I_7, J_6, Result_9, Reverse, Xs, Ys}
    end
end,
{I_7, J_7, Result_10, Reverse, Xs, Ys} = Fun_3(I_7, J_6, Result_9, Reverse, Xs, Ys),
        Result_10
    catch {return, RetCatch} -> RetCatch end.

strand_sort_rec(Arr, Reverse_2, Solution) ->
    try
        case (erlang:length(Arr) == 0) of
        true -> throw({return, Solution});
        _ -> ok
    end,
        Sublist = [],
        Remaining = [],
        Sublist_2 = lists:append((case Sublist of nil -> []; _ -> Sublist end), [(case erlang:is_map(Arr) of true -> maps:get(0, Arr, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr) + 0 + 1, Arr); _ -> mochi_nth(0 + 1, Arr) end end)]),
        Last = (case erlang:is_map(Arr) of true -> maps:get(0, Arr, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr) + 0 + 1, Arr); _ -> mochi_nth(0 + 1, Arr) end end),
        K = 1,
        Fun_4 = fun Fun_4_loop(Arr, K, Last, Remaining, Reverse_2, Solution, Sublist_2) ->
    case (K < erlang:length(Arr)) of
        true ->
            Item = (case erlang:is_map(Arr) of true -> maps:get(K, Arr, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Arr) + K + 1, Arr); _ -> mochi_nth(K + 1, Arr) end end),
            case Reverse_2 of
        true -> case (Item < Last) of
        true -> Sublist_3 = lists:append((case Sublist_2 of nil -> []; _ -> Sublist_2 end), [Item]),
            Last_2 = Item,
            Last_3 = Last_2,
            Remaining_3 = Remaining,
            Sublist_4 = Sublist_3;
        _ -> Remaining_2 = lists:append((case Remaining of nil -> []; _ -> Remaining end), [Item]),
            Last_3 = Last,
            Remaining_3 = Remaining_2,
            Sublist_4 = Sublist_2
    end,
            Last_6 = Last_3,
            Remaining_6 = Remaining_3,
            Sublist_7 = Sublist_4;
        _ -> case (Item > Last) of
        true -> Sublist_5 = lists:append((case Sublist_2 of nil -> []; _ -> Sublist_2 end), [Item]),
            Last_4 = Item,
            Last_5 = Last_4,
            Remaining_5 = Remaining,
            Sublist_6 = Sublist_5;
        _ -> Remaining_4 = lists:append((case Remaining of nil -> []; _ -> Remaining end), [Item]),
            Last_5 = Last,
            Remaining_5 = Remaining_4,
            Sublist_6 = Sublist_2
    end,
            Last_6 = Last_5,
            Remaining_6 = Remaining_5,
            Sublist_7 = Sublist_6
    end,
            K_2 = (K + 1),
            Fun_4_loop(Arr, K_2, Last_6, Remaining_6, Reverse_2, Solution, Sublist_7);
        _ -> {Arr, K, Last, Remaining, Reverse_2, Solution, Sublist_2}
    end
end,
{Arr, K_2, Last_6, Remaining_6, Reverse_2, Solution, Sublist_7} = Fun_4(Arr, K, Last, Remaining, Reverse_2, Solution, Sublist_2),
        Solution_2 = merge(Solution, Sublist_7, Reverse_2),
        strand_sort_rec(Remaining_6, Reverse_2, Solution_2)
    catch {return, RetCatch} -> RetCatch end.

strand_sort(Arr_2, Reverse_3) ->
    try
        strand_sort_rec(Arr_2, Reverse_3, [])
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(strand_sort([4, 3, 5, 1, 2], false))]),
    io:format("~ts~n", [mochi_str(strand_sort([4, 3, 5, 1, 2], true))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
