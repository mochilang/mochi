#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/2, is_digit/1, to_lower/1, pad_left/2, alphanum_key/1, compare_keys/2, natural_sort/1]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

index_of(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, 1) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

is_digit(Ch_2) ->
    try
        (index_of("0123456789", Ch_2) >= 0)
    catch {return, RetCatch} -> RetCatch end.

to_lower(Ch_3) ->
    try
        Idx = index_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch_3),
        case (Idx >= 0) of
        true -> throw({return, string:substr("abcdefghijklmnopqrstuvwxyz", Idx + 1, ((Idx + 1) - Idx))});
        _ -> ok
    end,
        Ch_3
    catch {return, RetCatch} -> RetCatch end.

pad_left(S_2, Width) ->
    try
        Res = S_2,
        Fun_2 = fun Fun_2_loop(Res, S_2, Width) ->
    case (erlang:length(Res) < Width) of
        true ->
            Res_2 = ("0" ++ Res),
            Fun_2_loop(Res_2, S_2, Width);
        _ -> {Res, S_2, Width}
    end
end,
{Res_2, S_2, Width} = Fun_2(Res, S_2, Width),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

alphanum_key(S_3) ->
    try
        Key = [],
        I_3 = 0,
        Fun_6 = fun Fun_6_loop(I_3, Key, S_3) ->
    case (I_3 < erlang:length(S_3)) of
        true ->
            try
                case is_digit(string:substr(S_3, I_3 + 1, 1)) of
        true -> Num = "",
            Fun_3 = fun Fun_3_loop(I_3, Key, Num, S_3) ->
    case ((I_3 < erlang:length(S_3)) andalso is_digit(string:substr(S_3, I_3 + 1, 1))) of
        true ->
            Num_2 = (Num ++ string:substr(S_3, I_3 + 1, 1)),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Key, Num_2, S_3);
        _ -> {I_3, Key, Num, S_3}
    end
end,
{I_4, Key, Num_2, S_3} = Fun_3(I_3, Key, Num, S_3),
            Len_str = pad_left(mochi_str(erlang:length(Num_2)), 3),
            Key_2 = lists:append((case Key of nil -> []; _ -> Key end), [(("#" ++ Len_str) ++ Num_2)]),
            Fun_5 = Fun_3,
            I_6 = I_4,
            Key_4 = Key_2,
            Len_str_2 = Len_str,
            Num_3 = Num_2,
            Seg_3 = nil;
        _ -> Seg = "",
            Fun_4 = fun Fun_4_loop(I_3, Key, S_3, Seg) ->
    case (I_3 < erlang:length(S_3)) of
        true ->
            try
                case is_digit(string:substr(S_3, I_3 + 1, 1)) of
        true -> throw({break, I_3, Key, S_3, Seg});
        _ -> ok
    end,
                Seg_2 = (Seg ++ to_lower(string:substr(S_3, I_3 + 1, 1))),
                I_5 = (I_3 + 1),
                Fun_4_loop(I_5, Key, S_3, Seg_2)
            catch
                {continue, C0, C1, C2, C3} -> Fun_4_loop(C0, C1, C2, C3);
                {break, B0, B1, B2, B3} -> {B0, B1, B2, B3}
            end;
        _ -> {I_3, Key, S_3, Seg}
    end
end,
{I_5, Key, S_3, Seg_2} = Fun_4(I_3, Key, S_3, Seg),
            Key_3 = lists:append((case Key of nil -> []; _ -> Key end), [Seg_2]),
            Fun_5 = Fun_4,
            I_6 = I_5,
            Key_4 = Key_3,
            Len_str_2 = nil,
            Num_3 = nil,
            Seg_3 = Seg_2
    end,
                Fun_6_loop(I_6, Key_4, S_3)
            catch
                {continue, C0, C1, C2} -> Fun_6_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {I_3, Key, S_3}
    end
end,
{I_6, Key_4, S_3} = Fun_6(I_3, Key, S_3),
        Key_4
    catch {return, RetCatch} -> RetCatch end.

compare_keys(A, B) ->
    try
        I_7 = 0,
        Fun_7 = fun Fun_7_loop(A, B, I_7) ->
    case ((I_7 < erlang:length(A)) andalso (I_7 < erlang:length(B))) of
        true ->
            case ((case erlang:is_map(A) of true -> maps:get(I_7, A, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A) + I_7 + 1, A); _ -> mochi_nth(I_7 + 1, A) end end) < (case erlang:is_map(B) of true -> maps:get(I_7, B, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B) + I_7 + 1, B); _ -> mochi_nth(I_7 + 1, B) end end)) of
        true -> throw({return, -1});
        _ -> ok
    end,
            case ((case erlang:is_map(A) of true -> maps:get(I_7, A, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A) + I_7 + 1, A); _ -> mochi_nth(I_7 + 1, A) end end) > (case erlang:is_map(B) of true -> maps:get(I_7, B, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B) + I_7 + 1, B); _ -> mochi_nth(I_7 + 1, B) end end)) of
        true -> throw({return, 1});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_7_loop(A, B, I_8);
        _ -> {A, B, I_7}
    end
end,
{A, B, I_8} = Fun_7(A, B, I_7),
        case (erlang:length(A) < erlang:length(B)) of
        true -> throw({return, -1});
        _ -> ok
    end,
        case (erlang:length(A) > erlang:length(B)) of
        true -> throw({return, 1});
        _ -> ok
    end,
        0
    catch {return, RetCatch} -> RetCatch end.

natural_sort(Arr) ->
    try
        Res_3 = [],
        Keys = [],
        K = 0,
        Fun_8 = fun Fun_8_loop(Arr, K, Keys, Res_3) ->
    case (K < erlang:length(Arr)) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [(case erlang:is_map(Arr) of true -> maps:get(K, Arr, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Arr) + K + 1, Arr); _ -> mochi_nth(K + 1, Arr) end end)]),
            Keys_2 = lists:append((case Keys of nil -> []; _ -> Keys end), [alphanum_key((case erlang:is_map(Arr) of true -> maps:get(K, Arr, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Arr) + K + 1, Arr); _ -> mochi_nth(K + 1, Arr) end end))]),
            K_2 = (K + 1),
            Fun_8_loop(Arr, K_2, Keys_2, Res_4);
        _ -> {Arr, K, Keys, Res_3}
    end
end,
{Arr, K_2, Keys_2, Res_4} = Fun_8(Arr, K, Keys, Res_3),
        I_9 = 1,
        Fun_10 = fun Fun_10_loop(Arr, I_9, K_2, Keys_2, Res_4) ->
    case (I_9 < erlang:length(Res_4)) of
        true ->
            Current = (case erlang:is_map(Res_4) of true -> maps:get(I_9, Res_4, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Res_4) + I_9 + 1, Res_4); _ -> mochi_nth(I_9 + 1, Res_4) end end),
            Current_key = (case erlang:is_map(Keys_2) of true -> maps:get(I_9, Keys_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Keys_2) + I_9 + 1, Keys_2); _ -> mochi_nth(I_9 + 1, Keys_2) end end),
            J = (I_9 - 1),
            Fun_9 = fun Fun_9_loop(Arr, Current, Current_key, I_9, J, K_2, Keys_2, Res_4) ->
    case ((J >= 0) andalso (compare_keys((case erlang:is_map(Keys_2) of true -> maps:get(J, Keys_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Keys_2) + J + 1, Keys_2); _ -> mochi_nth(J + 1, Keys_2) end end), Current_key) > 0)) of
        true ->
            Res_5 = lists:sublist(Res_4, (J + 1)) ++ [(case erlang:is_map(Res_4) of true -> maps:get(J, Res_4, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Res_4) + J + 1, Res_4); _ -> mochi_nth(J + 1, Res_4) end end)] ++ lists:nthtail((J + 1) + 1, Res_4),
            Keys_3 = lists:sublist(Keys_2, (J + 1)) ++ [(case erlang:is_map(Keys_2) of true -> maps:get(J, Keys_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Keys_2) + J + 1, Keys_2); _ -> mochi_nth(J + 1, Keys_2) end end)] ++ lists:nthtail((J + 1) + 1, Keys_2),
            J_2 = (J - 1),
            Fun_9_loop(Arr, Current, Current_key, I_9, J_2, K_2, Keys_3, Res_5);
        _ -> {Arr, Current, Current_key, I_9, J, K_2, Keys_2, Res_4}
    end
end,
{Arr, Current, Current_key, I_9, J_2, K_2, Keys_3, Res_5} = Fun_9(Arr, Current, Current_key, I_9, J, K_2, Keys_2, Res_4),
            Res_6 = lists:sublist(Res_5, (J_2 + 1)) ++ [Current] ++ lists:nthtail((J_2 + 1) + 1, Res_5),
            Keys_4 = lists:sublist(Keys_3, (J_2 + 1)) ++ [Current_key] ++ lists:nthtail((J_2 + 1) + 1, Keys_3),
            I_10 = (I_9 + 1),
            Fun_10_loop(Arr, I_10, K_2, Keys_4, Res_6);
        _ -> {Arr, I_9, K_2, Keys_2, Res_4}
    end
end,
{Arr, I_10, K_2, Keys_4, Res_6} = Fun_10(Arr, I_9, K_2, Keys_2, Res_4),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('DIGITS', "0123456789"),
    erlang:put('LOWER', "abcdefghijklmnopqrstuvwxyz"),
    erlang:put('UPPER', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    erlang:put('example1', ["2 ft 7 in", "1 ft 5 in", "10 ft 2 in", "2 ft 11 in", "7 ft 6 in"]),
    io:format("~ts~n", [mochi_str(natural_sort(erlang:get('example1')))]),
    erlang:put('example2', ["Elm11", "Elm12", "Elm2", "elm0", "elm1", "elm10", "elm13", "elm9"]),
    io:format("~ts~n", [mochi_str(natural_sort(erlang:get('example2')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
