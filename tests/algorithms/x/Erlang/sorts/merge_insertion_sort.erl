#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, binary_search_insertion_from/3, binary_search_insertion/2, merge/2, sortlist_2d/1, merge_insertion_sort/1, main/0]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

binary_search_insertion_from(Sorted_list, Item, Start) ->
    try
        Left = Start,
        Right = (erlang:length(Sorted_list) - 1),
        Fun = fun Fun_loop(Item, Left, Right, Sorted_list, Start) ->
    case (Left =< Right) of
        true ->
            try
                Middle = ((Left + Right) div 2),
                case (Left == Right) of
        true -> case ((case erlang:is_map(Sorted_list) of true -> maps:get(Middle, Sorted_list, nil); _ -> case Middle < 0 of true -> mochi_nth(erlang:length(Sorted_list) + Middle + 1, Sorted_list); _ -> mochi_nth(Middle + 1, Sorted_list) end end) < Item) of
        true -> Left_2 = (Middle + 1),
            Left_3 = Left_2;
        _ -> Left_3 = Left
    end,
            throw({break, Item, Left_3, Right, Sorted_list, Start}),
            Left_6 = Left_3,
            Right_4 = Right;
        _ -> case ((case erlang:is_map(Sorted_list) of true -> maps:get(Middle, Sorted_list, nil); _ -> case Middle < 0 of true -> mochi_nth(erlang:length(Sorted_list) + Middle + 1, Sorted_list); _ -> mochi_nth(Middle + 1, Sorted_list) end end) < Item) of
        true -> Left_4 = (Middle + 1),
            Left_5 = Left_4,
            Right_3 = Right;
        _ -> Right_2 = (Middle - 1),
            Left_5 = Left,
            Right_3 = Right_2
    end,
            Left_6 = Left_5,
            Right_4 = Right_3
    end,
                Fun_loop(Item, Left_6, Right_4, Sorted_list, Start)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Item, Left, Right, Sorted_list, Start}
    end
end,
{Item, Left_6, Right_4, Sorted_list, Start} = Fun(Item, Left, Right, Sorted_list, Start),
        Result = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Item, Left_6, Result, Right_4, Sorted_list, Start) ->
    case (I < Left_6) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Sorted_list) of true -> maps:get(I, Sorted_list, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sorted_list) + I + 1, Sorted_list); _ -> mochi_nth(I + 1, Sorted_list) end end)]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Item, Left_6, Result_2, Right_4, Sorted_list, Start);
        _ -> {I, Item, Left_6, Result, Right_4, Sorted_list, Start}
    end
end,
{I_2, Item, Left_6, Result_2, Right_4, Sorted_list, Start} = Fun_2(I, Item, Left_6, Result, Right_4, Sorted_list, Start),
        Result_3 = lists:append((case Result_2 of nil -> []; _ -> Result_2 end), [Item]),
        Fun_3 = fun Fun_3_loop(I_2, Item, Left_6, Result_3, Right_4, Sorted_list, Start) ->
    case (I_2 < erlang:length(Sorted_list)) of
        true ->
            Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [(case erlang:is_map(Sorted_list) of true -> maps:get(I_2, Sorted_list, nil); _ -> case I_2 < 0 of true -> mochi_nth(erlang:length(Sorted_list) + I_2 + 1, Sorted_list); _ -> mochi_nth(I_2 + 1, Sorted_list) end end)]),
            I_3 = (I_2 + 1),
            Fun_3_loop(I_3, Item, Left_6, Result_4, Right_4, Sorted_list, Start);
        _ -> {I_2, Item, Left_6, Result_3, Right_4, Sorted_list, Start}
    end
end,
{I_3, Item, Left_6, Result_4, Right_4, Sorted_list, Start} = Fun_3(I_2, Item, Left_6, Result_3, Right_4, Sorted_list, Start),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

binary_search_insertion(Sorted_list_2, Item_2) ->
    try
        binary_search_insertion_from(Sorted_list_2, Item_2, 0)
    catch {return, RetCatch} -> RetCatch end.

merge(Left_7, Right_5) ->
    try
        Result_5 = [],
        I_4 = 0,
        J = 0,
        Fun_4 = fun Fun_4_loop(I_4, J, Left_7, Result_5, Right_5) ->
    case ((I_4 < erlang:length(Left_7)) andalso (J < erlang:length(Right_5))) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(Left_7) of true -> maps:get(I_4, Left_7, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Left_7) + I_4 + 1, Left_7); _ -> mochi_nth(I_4 + 1, Left_7) end end)) of true -> maps:get(0, (case erlang:is_map(Left_7) of true -> maps:get(I_4, Left_7, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Left_7) + I_4 + 1, Left_7); _ -> mochi_nth(I_4 + 1, Left_7) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Left_7) of true -> maps:get(I_4, Left_7, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Left_7) + I_4 + 1, Left_7); _ -> mochi_nth(I_4 + 1, Left_7) end end)) + 0 + 1, (case erlang:is_map(Left_7) of true -> maps:get(I_4, Left_7, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Left_7) + I_4 + 1, Left_7); _ -> mochi_nth(I_4 + 1, Left_7) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Left_7) of true -> maps:get(I_4, Left_7, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Left_7) + I_4 + 1, Left_7); _ -> mochi_nth(I_4 + 1, Left_7) end end)) end end) < (case erlang:is_map((case erlang:is_map(Right_5) of true -> maps:get(J, Right_5, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Right_5) + J + 1, Right_5); _ -> mochi_nth(J + 1, Right_5) end end)) of true -> maps:get(0, (case erlang:is_map(Right_5) of true -> maps:get(J, Right_5, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Right_5) + J + 1, Right_5); _ -> mochi_nth(J + 1, Right_5) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Right_5) of true -> maps:get(J, Right_5, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Right_5) + J + 1, Right_5); _ -> mochi_nth(J + 1, Right_5) end end)) + 0 + 1, (case erlang:is_map(Right_5) of true -> maps:get(J, Right_5, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Right_5) + J + 1, Right_5); _ -> mochi_nth(J + 1, Right_5) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Right_5) of true -> maps:get(J, Right_5, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Right_5) + J + 1, Right_5); _ -> mochi_nth(J + 1, Right_5) end end)) end end)) of
        true -> Result_6 = lists:append((case Result_5 of nil -> []; _ -> Result_5 end), [(case erlang:is_map(Left_7) of true -> maps:get(I_4, Left_7, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Left_7) + I_4 + 1, Left_7); _ -> mochi_nth(I_4 + 1, Left_7) end end)]),
            I_5 = (I_4 + 1),
            I_6 = I_5,
            J_3 = J,
            Result_8 = Result_6;
        _ -> Result_7 = lists:append((case Result_5 of nil -> []; _ -> Result_5 end), [(case erlang:is_map(Right_5) of true -> maps:get(J, Right_5, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Right_5) + J + 1, Right_5); _ -> mochi_nth(J + 1, Right_5) end end)]),
            J_2 = (J + 1),
            I_6 = I_4,
            J_3 = J_2,
            Result_8 = Result_7
    end,
            Fun_4_loop(I_6, J_3, Left_7, Result_8, Right_5);
        _ -> {I_4, J, Left_7, Result_5, Right_5}
    end
end,
{I_6, J_3, Left_7, Result_8, Right_5} = Fun_4(I_4, J, Left_7, Result_5, Right_5),
        Fun_5 = fun Fun_5_loop(I_6, J_3, Left_7, Result_8, Right_5) ->
    case (I_6 < erlang:length(Left_7)) of
        true ->
            Result_9 = lists:append((case Result_8 of nil -> []; _ -> Result_8 end), [(case erlang:is_map(Left_7) of true -> maps:get(I_6, Left_7, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Left_7) + I_6 + 1, Left_7); _ -> mochi_nth(I_6 + 1, Left_7) end end)]),
            I_7 = (I_6 + 1),
            Fun_5_loop(I_7, J_3, Left_7, Result_9, Right_5);
        _ -> {I_6, J_3, Left_7, Result_8, Right_5}
    end
end,
{I_7, J_3, Left_7, Result_9, Right_5} = Fun_5(I_6, J_3, Left_7, Result_8, Right_5),
        Fun_6 = fun Fun_6_loop(I_7, J_3, Left_7, Result_9, Right_5) ->
    case (J_3 < erlang:length(Right_5)) of
        true ->
            Result_10 = lists:append((case Result_9 of nil -> []; _ -> Result_9 end), [(case erlang:is_map(Right_5) of true -> maps:get(J_3, Right_5, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Right_5) + J_3 + 1, Right_5); _ -> mochi_nth(J_3 + 1, Right_5) end end)]),
            J_4 = (J_3 + 1),
            Fun_6_loop(I_7, J_4, Left_7, Result_10, Right_5);
        _ -> {I_7, J_3, Left_7, Result_9, Right_5}
    end
end,
{I_7, J_4, Left_7, Result_10, Right_5} = Fun_6(I_7, J_3, Left_7, Result_9, Right_5),
        Result_10
    catch {return, RetCatch} -> RetCatch end.

sortlist_2d(List_2d) ->
    try
        Length = erlang:length(List_2d),
        case (Length =< 1) of
        true -> throw({return, List_2d});
        _ -> ok
    end,
        Middle_2 = (Length div 2),
        Left_8 = [],
        I_8 = 0,
        Fun_7 = fun Fun_7_loop(I_8, Left_8, Length, List_2d, Middle_2) ->
    case (I_8 < Middle_2) of
        true ->
            Left_9 = lists:append((case Left_8 of nil -> []; _ -> Left_8 end), [(case erlang:is_map(List_2d) of true -> maps:get(I_8, List_2d, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(List_2d) + I_8 + 1, List_2d); _ -> mochi_nth(I_8 + 1, List_2d) end end)]),
            I_9 = (I_8 + 1),
            Fun_7_loop(I_9, Left_9, Length, List_2d, Middle_2);
        _ -> {I_8, Left_8, Length, List_2d, Middle_2}
    end
end,
{I_9, Left_9, Length, List_2d, Middle_2} = Fun_7(I_8, Left_8, Length, List_2d, Middle_2),
        Right_6 = [],
        J_5 = Middle_2,
        Fun_8 = fun Fun_8_loop(I_9, J_5, Left_9, Length, List_2d, Middle_2, Right_6) ->
    case (J_5 < Length) of
        true ->
            Right_7 = lists:append((case Right_6 of nil -> []; _ -> Right_6 end), [(case erlang:is_map(List_2d) of true -> maps:get(J_5, List_2d, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(List_2d) + J_5 + 1, List_2d); _ -> mochi_nth(J_5 + 1, List_2d) end end)]),
            J_6 = (J_5 + 1),
            Fun_8_loop(I_9, J_6, Left_9, Length, List_2d, Middle_2, Right_7);
        _ -> {I_9, J_5, Left_9, Length, List_2d, Middle_2, Right_6}
    end
end,
{I_9, J_6, Left_9, Length, List_2d, Middle_2, Right_7} = Fun_8(I_9, J_5, Left_9, Length, List_2d, Middle_2, Right_6),
        merge(sortlist_2d(Left_9), sortlist_2d(Right_7))
    catch {return, RetCatch} -> RetCatch end.

merge_insertion_sort(Collection) ->
    try
        case (erlang:length(Collection) =< 1) of
        true -> throw({return, Collection});
        _ -> ok
    end,
        Two_paired_list = [],
        Has_last_odd_item = false,
        I_10 = 0,
        Fun_9 = fun Fun_9_loop(Collection, Has_last_odd_item, I_10, Two_paired_list) ->
    case (I_10 < erlang:length(Collection)) of
        true ->
            case (I_10 == (erlang:length(Collection) - 1)) of
        true -> Has_last_odd_item_2 = true,
            A_2 = nil,
            B_2 = nil,
            Has_last_odd_item_3 = Has_last_odd_item_2,
            Two_paired_list_5 = Two_paired_list;
        _ -> A = (case erlang:is_map(Collection) of true -> maps:get(I_10, Collection, nil); _ -> case I_10 < 0 of true -> mochi_nth(erlang:length(Collection) + I_10 + 1, Collection); _ -> mochi_nth(I_10 + 1, Collection) end end),
            B = (case erlang:is_map(Collection) of true -> maps:get((I_10 + 1), Collection, nil); _ -> case (I_10 + 1) < 0 of true -> mochi_nth(erlang:length(Collection) + (I_10 + 1) + 1, Collection); _ -> mochi_nth((I_10 + 1) + 1, Collection) end end),
            case (A < B) of
        true -> Two_paired_list_2 = lists:append((case Two_paired_list of nil -> []; _ -> Two_paired_list end), [[A, B]]),
            Two_paired_list_4 = Two_paired_list_2;
        _ -> Two_paired_list_3 = lists:append((case Two_paired_list of nil -> []; _ -> Two_paired_list end), [[B, A]]),
            Two_paired_list_4 = Two_paired_list_3
    end,
            A_2 = A,
            B_2 = B,
            Has_last_odd_item_3 = Has_last_odd_item,
            Two_paired_list_5 = Two_paired_list_4
    end,
            I_11 = (I_10 + 2),
            Fun_9_loop(Collection, Has_last_odd_item_3, I_11, Two_paired_list_5);
        _ -> {Collection, Has_last_odd_item, I_10, Two_paired_list}
    end
end,
{Collection, Has_last_odd_item_3, I_11, Two_paired_list_5} = Fun_9(Collection, Has_last_odd_item, I_10, Two_paired_list),
        Sorted_list_2d = sortlist_2d(Two_paired_list_5),
        Result_11 = [],
        I_12 = 0,
        Fun_10 = fun Fun_10_loop(Collection, Has_last_odd_item_3, I_12, Result_11, Sorted_list_2d, Two_paired_list_5) ->
    case (I_12 < erlang:length(Sorted_list_2d)) of
        true ->
            Result_12 = lists:append((case Result_11 of nil -> []; _ -> Result_11 end), [(case erlang:is_map((case erlang:is_map(Sorted_list_2d) of true -> maps:get(I_12, Sorted_list_2d, nil); _ -> case I_12 < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + I_12 + 1, Sorted_list_2d); _ -> mochi_nth(I_12 + 1, Sorted_list_2d) end end)) of true -> maps:get(0, (case erlang:is_map(Sorted_list_2d) of true -> maps:get(I_12, Sorted_list_2d, nil); _ -> case I_12 < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + I_12 + 1, Sorted_list_2d); _ -> mochi_nth(I_12 + 1, Sorted_list_2d) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Sorted_list_2d) of true -> maps:get(I_12, Sorted_list_2d, nil); _ -> case I_12 < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + I_12 + 1, Sorted_list_2d); _ -> mochi_nth(I_12 + 1, Sorted_list_2d) end end)) + 0 + 1, (case erlang:is_map(Sorted_list_2d) of true -> maps:get(I_12, Sorted_list_2d, nil); _ -> case I_12 < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + I_12 + 1, Sorted_list_2d); _ -> mochi_nth(I_12 + 1, Sorted_list_2d) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Sorted_list_2d) of true -> maps:get(I_12, Sorted_list_2d, nil); _ -> case I_12 < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + I_12 + 1, Sorted_list_2d); _ -> mochi_nth(I_12 + 1, Sorted_list_2d) end end)) end end)]),
            I_13 = (I_12 + 1),
            Fun_10_loop(Collection, Has_last_odd_item_3, I_13, Result_12, Sorted_list_2d, Two_paired_list_5);
        _ -> {Collection, Has_last_odd_item_3, I_12, Result_11, Sorted_list_2d, Two_paired_list_5}
    end
end,
{Collection, Has_last_odd_item_3, I_13, Result_12, Sorted_list_2d, Two_paired_list_5} = Fun_10(Collection, Has_last_odd_item_3, I_12, Result_11, Sorted_list_2d, Two_paired_list_5),
        Result_13 = lists:append((case Result_12 of nil -> []; _ -> Result_12 end), [(case erlang:is_map((case erlang:is_map(Sorted_list_2d) of true -> maps:get((erlang:length(Sorted_list_2d) - 1), Sorted_list_2d, nil); _ -> case (erlang:length(Sorted_list_2d) - 1) < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + (erlang:length(Sorted_list_2d) - 1) + 1, Sorted_list_2d); _ -> mochi_nth((erlang:length(Sorted_list_2d) - 1) + 1, Sorted_list_2d) end end)) of true -> maps:get(1, (case erlang:is_map(Sorted_list_2d) of true -> maps:get((erlang:length(Sorted_list_2d) - 1), Sorted_list_2d, nil); _ -> case (erlang:length(Sorted_list_2d) - 1) < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + (erlang:length(Sorted_list_2d) - 1) + 1, Sorted_list_2d); _ -> mochi_nth((erlang:length(Sorted_list_2d) - 1) + 1, Sorted_list_2d) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Sorted_list_2d) of true -> maps:get((erlang:length(Sorted_list_2d) - 1), Sorted_list_2d, nil); _ -> case (erlang:length(Sorted_list_2d) - 1) < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + (erlang:length(Sorted_list_2d) - 1) + 1, Sorted_list_2d); _ -> mochi_nth((erlang:length(Sorted_list_2d) - 1) + 1, Sorted_list_2d) end end)) + 1 + 1, (case erlang:is_map(Sorted_list_2d) of true -> maps:get((erlang:length(Sorted_list_2d) - 1), Sorted_list_2d, nil); _ -> case (erlang:length(Sorted_list_2d) - 1) < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + (erlang:length(Sorted_list_2d) - 1) + 1, Sorted_list_2d); _ -> mochi_nth((erlang:length(Sorted_list_2d) - 1) + 1, Sorted_list_2d) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Sorted_list_2d) of true -> maps:get((erlang:length(Sorted_list_2d) - 1), Sorted_list_2d, nil); _ -> case (erlang:length(Sorted_list_2d) - 1) < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + (erlang:length(Sorted_list_2d) - 1) + 1, Sorted_list_2d); _ -> mochi_nth((erlang:length(Sorted_list_2d) - 1) + 1, Sorted_list_2d) end end)) end end)]),
        case (Has_last_odd_item_3 /= nil) of
        true -> Result_14 = binary_search_insertion(Result_13, (case erlang:is_map(Collection) of true -> maps:get((erlang:length(Collection) - 1), Collection, nil); _ -> case (erlang:length(Collection) - 1) < 0 of true -> mochi_nth(erlang:length(Collection) + (erlang:length(Collection) - 1) + 1, Collection); _ -> mochi_nth((erlang:length(Collection) - 1) + 1, Collection) end end)),
            Result_15 = Result_14;
        _ -> Result_15 = Result_13
    end,
        Inserted_before = false,
        Idx = 0,
        Fun_11 = fun Fun_11_loop(Collection, Has_last_odd_item_3, I_13, Idx, Inserted_before, Result_15, Sorted_list_2d, Two_paired_list_5) ->
    case (Idx < (erlang:length(Sorted_list_2d) - 1)) of
        true ->
            case (Has_last_odd_item_3 andalso ((case erlang:is_map(Result_15) of true -> maps:get(Idx, Result_15, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Result_15) + Idx + 1, Result_15); _ -> mochi_nth(Idx + 1, Result_15) end end) == (case erlang:is_map(Collection) of true -> maps:get((erlang:length(Collection) - 1), Collection, nil); _ -> case (erlang:length(Collection) - 1) < 0 of true -> mochi_nth(erlang:length(Collection) + (erlang:length(Collection) - 1) + 1, Collection); _ -> mochi_nth((erlang:length(Collection) - 1) + 1, Collection) end end))) of
        true -> Inserted_before_2 = true,
            Inserted_before_3 = Inserted_before_2;
        _ -> Inserted_before_3 = Inserted_before
    end,
            Pivot = (case erlang:is_map((case erlang:is_map(Sorted_list_2d) of true -> maps:get(Idx, Sorted_list_2d, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + Idx + 1, Sorted_list_2d); _ -> mochi_nth(Idx + 1, Sorted_list_2d) end end)) of true -> maps:get(1, (case erlang:is_map(Sorted_list_2d) of true -> maps:get(Idx, Sorted_list_2d, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + Idx + 1, Sorted_list_2d); _ -> mochi_nth(Idx + 1, Sorted_list_2d) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Sorted_list_2d) of true -> maps:get(Idx, Sorted_list_2d, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + Idx + 1, Sorted_list_2d); _ -> mochi_nth(Idx + 1, Sorted_list_2d) end end)) + 1 + 1, (case erlang:is_map(Sorted_list_2d) of true -> maps:get(Idx, Sorted_list_2d, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + Idx + 1, Sorted_list_2d); _ -> mochi_nth(Idx + 1, Sorted_list_2d) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Sorted_list_2d) of true -> maps:get(Idx, Sorted_list_2d, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Sorted_list_2d) + Idx + 1, Sorted_list_2d); _ -> mochi_nth(Idx + 1, Sorted_list_2d) end end)) end end),
            case Inserted_before_3 of
        true -> Result_16 = binary_search_insertion_from(Result_15, Pivot, (Idx + 2)),
            Result_18 = Result_16;
        _ -> Result_17 = binary_search_insertion_from(Result_15, Pivot, (Idx + 1)),
            Result_18 = Result_17
    end,
            Idx_2 = (Idx + 1),
            Fun_11_loop(Collection, Has_last_odd_item_3, I_13, Idx_2, Inserted_before_3, Result_18, Sorted_list_2d, Two_paired_list_5);
        _ -> {Collection, Has_last_odd_item_3, I_13, Idx, Inserted_before, Result_15, Sorted_list_2d, Two_paired_list_5}
    end
end,
{Collection, Has_last_odd_item_3, I_13, Idx_2, Inserted_before_3, Result_18, Sorted_list_2d, Two_paired_list_5} = Fun_11(Collection, Has_last_odd_item_3, I_13, Idx, Inserted_before, Result_15, Sorted_list_2d, Two_paired_list_5),
        Result_18
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Example1 = [0, 5, 3, 2, 2],
        Example2 = [99],
        Example3 = [-2, -5, -45],
        io:format("~ts~n", [mochi_str(merge_insertion_sort(Example1))]),
        io:format("~ts~n", [mochi_str(merge_insertion_sort(Example2))]),
        io:format("~ts~n", [mochi_str(merge_insertion_sort(Example3))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
