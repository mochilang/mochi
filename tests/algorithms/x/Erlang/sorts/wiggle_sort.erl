#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, swap/3, wiggle_sort/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

swap(Xs, I, J) ->
    try
        Res = [],
        K = 0,
        Fun = fun Fun_loop(I, J, K, Res, Xs) ->
    case (K < erlang:length(Xs)) of
        true ->
            case (K == I) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(J, Xs, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Xs) + J + 1, Xs); _ -> mochi_nth(J + 1, Xs) end end)]),
            Res_6 = Res_2;
        _ -> case (K == J) of
        true -> Res_3 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            Res_5 = Res_3;
        _ -> Res_4 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(K, Xs, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Xs) + K + 1, Xs); _ -> mochi_nth(K + 1, Xs) end end)]),
            Res_5 = Res_4
    end,
            Res_6 = Res_5
    end,
            K_2 = (K + 1),
            Fun_loop(I, J, K_2, Res_6, Xs);
        _ -> {I, J, K, Res, Xs}
    end
end,
{I, J, K_2, Res_6, Xs} = Fun(I, J, K, Res, Xs),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

wiggle_sort(Nums) ->
    try
        I_2 = 0,
        Res_7 = Nums,
        Fun_2 = fun Fun_2_loop(I_2, Nums, Res_7) ->
    case (I_2 < erlang:length(Res_7)) of
        true ->
            J_2 = (case (I_2 == 0) of
    true -> (erlang:length(Res_7) - 1);
    _ -> (I_2 - 1)
end),
            Prev = (case erlang:is_map(Res_7) of true -> maps:get(J_2, Res_7, nil); _ -> case J_2 < 0 of true -> mochi_nth(erlang:length(Res_7) + J_2 + 1, Res_7); _ -> mochi_nth(J_2 + 1, Res_7) end end),
            Curr = (case erlang:is_map(Res_7) of true -> maps:get(I_2, Res_7, nil); _ -> case I_2 < 0 of true -> mochi_nth(erlang:length(Res_7) + I_2 + 1, Res_7); _ -> mochi_nth(I_2 + 1, Res_7) end end),
            case ((mochi_mod(I_2, 2) == 1) == (Prev > Curr)) of
        true -> Res_8 = swap(Res_7, J_2, I_2),
            Res_9 = Res_8;
        _ -> Res_9 = Res_7
    end,
            I_3 = (I_2 + 1),
            Fun_2_loop(I_3, Nums, Res_9);
        _ -> {I_2, Nums, Res_7}
    end
end,
{I_3, Nums, Res_9} = Fun_2(I_2, Nums, Res_7),
        Res_9
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(wiggle_sort([3.0, 5.0, 2.0, 1.0, 6.0, 4.0]))]),
    io:format("~ts~n", [mochi_str(wiggle_sort([0.0, 5.0, 3.0, 2.0, 2.0]))]),
    io:format("~ts~n", [mochi_str(wiggle_sort([]))]),
    io:format("~ts~n", [mochi_str(wiggle_sort([-2.0, -5.0, -45.0]))]),
    io:format("~ts~n", [mochi_str(wiggle_sort([-2.1, -5.68, -45.11]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
