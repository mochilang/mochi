#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, double_sort/1]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

double_sort(Collection) ->
    try
        No_of_elements = erlang:length(Collection),
        Passes = (((No_of_elements - 1) div 2) + 1),
        I = 0,
        Fun_2 = fun Fun_2_loop(Collection, I, No_of_elements, Passes) ->
    case (I < Passes) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Collection, I, J, No_of_elements, Passes) ->
    case (J < (No_of_elements - 1)) of
        true ->
            case ((case erlang:is_map(Collection) of true -> maps:get((J + 1), Collection, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Collection) + (J + 1) + 1, Collection); _ -> mochi_nth((J + 1) + 1, Collection) end end) < (case erlang:is_map(Collection) of true -> maps:get(J, Collection, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Collection) + J + 1, Collection); _ -> mochi_nth(J + 1, Collection) end end)) of
        true -> Tmp = (case erlang:is_map(Collection) of true -> maps:get(J, Collection, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Collection) + J + 1, Collection); _ -> mochi_nth(J + 1, Collection) end end),
            Collection_2 = lists:sublist(Collection, J) ++ [(case erlang:is_map(Collection) of true -> maps:get((J + 1), Collection, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Collection) + (J + 1) + 1, Collection); _ -> mochi_nth((J + 1) + 1, Collection) end end)] ++ lists:nthtail(J + 1, Collection),
            Collection_3 = lists:sublist(Collection_2, (J + 1)) ++ [Tmp] ++ lists:nthtail((J + 1) + 1, Collection_2),
            Collection_4 = Collection_3,
            Tmp_2 = Tmp;
        _ -> Collection_4 = Collection,
            Tmp_2 = nil
    end,
            case ((case erlang:is_map(Collection_4) of true -> maps:get(((No_of_elements - 1) - J), Collection_4, nil); _ -> case ((No_of_elements - 1) - J) < 0 of true -> mochi_nth(erlang:length(Collection_4) + ((No_of_elements - 1) - J) + 1, Collection_4); _ -> mochi_nth(((No_of_elements - 1) - J) + 1, Collection_4) end end) < (case erlang:is_map(Collection_4) of true -> maps:get(((No_of_elements - 2) - J), Collection_4, nil); _ -> case ((No_of_elements - 2) - J) < 0 of true -> mochi_nth(erlang:length(Collection_4) + ((No_of_elements - 2) - J) + 1, Collection_4); _ -> mochi_nth(((No_of_elements - 2) - J) + 1, Collection_4) end end)) of
        true -> Tmp2 = (case erlang:is_map(Collection_4) of true -> maps:get(((No_of_elements - 1) - J), Collection_4, nil); _ -> case ((No_of_elements - 1) - J) < 0 of true -> mochi_nth(erlang:length(Collection_4) + ((No_of_elements - 1) - J) + 1, Collection_4); _ -> mochi_nth(((No_of_elements - 1) - J) + 1, Collection_4) end end),
            Collection_5 = lists:sublist(Collection_4, ((No_of_elements - 1) - J)) ++ [(case erlang:is_map(Collection_4) of true -> maps:get(((No_of_elements - 2) - J), Collection_4, nil); _ -> case ((No_of_elements - 2) - J) < 0 of true -> mochi_nth(erlang:length(Collection_4) + ((No_of_elements - 2) - J) + 1, Collection_4); _ -> mochi_nth(((No_of_elements - 2) - J) + 1, Collection_4) end end)] ++ lists:nthtail(((No_of_elements - 1) - J) + 1, Collection_4),
            Collection_6 = lists:sublist(Collection_5, ((No_of_elements - 2) - J)) ++ [Tmp2] ++ lists:nthtail(((No_of_elements - 2) - J) + 1, Collection_5),
            Collection_7 = Collection_6,
            Tmp2_2 = Tmp2;
        _ -> Collection_7 = Collection_4,
            Tmp2_2 = nil
    end,
            J_2 = (J + 1),
            Fun_loop(Collection_7, I, J_2, No_of_elements, Passes);
        _ -> {Collection, I, J, No_of_elements, Passes}
    end
end,
{Collection_7, I, J_2, No_of_elements, Passes} = Fun(Collection, I, J, No_of_elements, Passes),
            I_2 = (I + 1),
            Fun_2_loop(Collection_7, I_2, No_of_elements, Passes);
        _ -> {Collection, I, No_of_elements, Passes}
    end
end,
{Collection_7, I_2, No_of_elements, Passes} = Fun_2(Collection, I, No_of_elements, Passes),
        Collection_7
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(double_sort([-1, -2, -3, -4, -5, -6, -7]))]),
    io:format("~ts~n", [mochi_str(double_sort([]))]),
    io:format("~ts~n", [mochi_str(double_sort([-1, -2, -3, -4, -5, -6]))]),
    io:format("~ts~n", [mochi_str((double_sort([-3, 10, 16, -42, 29]) == [-42, -3, 10, 16, 29]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
