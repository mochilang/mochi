#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, subarray/3, merge/2, merge_sort/1, split_into_blocks/2, merge_blocks/1, external_sort/2, main/0]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

subarray(Xs, Start, End) ->
    try
        Result = [],
        K = Start,
        Fun = fun Fun_loop(End, K, Result, Start, Xs) ->
    case (K < End) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Xs) of true -> maps:get(K, Xs, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Xs) + K + 1, Xs); _ -> mochi_nth(K + 1, Xs) end end)]),
            K_2 = (K + 1),
            Fun_loop(End, K_2, Result_2, Start, Xs);
        _ -> {End, K, Result, Start, Xs}
    end
end,
{End, K_2, Result_2, Start, Xs} = Fun(End, K, Result, Start, Xs),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

merge(Left_half, Right_half) ->
    try
        Result_3 = [],
        I = 0,
        J = 0,
        Fun_2 = fun Fun_2_loop(I, J, Left_half, Result_3, Right_half) ->
    case ((I < erlang:length(Left_half)) andalso (J < erlang:length(Right_half))) of
        true ->
            case ((case erlang:is_map(Left_half) of true -> maps:get(I, Left_half, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Left_half) + I + 1, Left_half); _ -> mochi_nth(I + 1, Left_half) end end) < (case erlang:is_map(Right_half) of true -> maps:get(J, Right_half, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Right_half) + J + 1, Right_half); _ -> mochi_nth(J + 1, Right_half) end end)) of
        true -> Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [(case erlang:is_map(Left_half) of true -> maps:get(I, Left_half, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Left_half) + I + 1, Left_half); _ -> mochi_nth(I + 1, Left_half) end end)]),
            I_2 = (I + 1),
            I_3 = I_2,
            J_3 = J,
            Result_6 = Result_4;
        _ -> Result_5 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [(case erlang:is_map(Right_half) of true -> maps:get(J, Right_half, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Right_half) + J + 1, Right_half); _ -> mochi_nth(J + 1, Right_half) end end)]),
            J_2 = (J + 1),
            I_3 = I,
            J_3 = J_2,
            Result_6 = Result_5
    end,
            Fun_2_loop(I_3, J_3, Left_half, Result_6, Right_half);
        _ -> {I, J, Left_half, Result_3, Right_half}
    end
end,
{I_3, J_3, Left_half, Result_6, Right_half} = Fun_2(I, J, Left_half, Result_3, Right_half),
        Fun_3 = fun Fun_3_loop(I_3, J_3, Left_half, Result_6, Right_half) ->
    case (I_3 < erlang:length(Left_half)) of
        true ->
            Result_7 = lists:append((case Result_6 of nil -> []; _ -> Result_6 end), [(case erlang:is_map(Left_half) of true -> maps:get(I_3, Left_half, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Left_half) + I_3 + 1, Left_half); _ -> mochi_nth(I_3 + 1, Left_half) end end)]),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, J_3, Left_half, Result_7, Right_half);
        _ -> {I_3, J_3, Left_half, Result_6, Right_half}
    end
end,
{I_4, J_3, Left_half, Result_7, Right_half} = Fun_3(I_3, J_3, Left_half, Result_6, Right_half),
        Fun_4 = fun Fun_4_loop(I_4, J_3, Left_half, Result_7, Right_half) ->
    case (J_3 < erlang:length(Right_half)) of
        true ->
            Result_8 = lists:append((case Result_7 of nil -> []; _ -> Result_7 end), [(case erlang:is_map(Right_half) of true -> maps:get(J_3, Right_half, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Right_half) + J_3 + 1, Right_half); _ -> mochi_nth(J_3 + 1, Right_half) end end)]),
            J_4 = (J_3 + 1),
            Fun_4_loop(I_4, J_4, Left_half, Result_8, Right_half);
        _ -> {I_4, J_3, Left_half, Result_7, Right_half}
    end
end,
{I_4, J_4, Left_half, Result_8, Right_half} = Fun_4(I_4, J_3, Left_half, Result_7, Right_half),
        Result_8
    catch {return, RetCatch} -> RetCatch end.

merge_sort(Array) ->
    try
        case (erlang:length(Array) =< 1) of
        true -> throw({return, Array});
        _ -> ok
    end,
        Middle = mochi_safe_div(erlang:length(Array), 2),
        Left_half_2 = subarray(Array, 0, Middle),
        Right_half_2 = subarray(Array, Middle, erlang:length(Array)),
        Sorted_left = merge_sort(Left_half_2),
        Sorted_right = merge_sort(Right_half_2),
        merge(Sorted_left, Sorted_right)
    catch {return, RetCatch} -> RetCatch end.

split_into_blocks(Data, Block_size) ->
    try
        Blocks = [],
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Block_size, Blocks, Data, I_5) ->
    case (I_5 < erlang:length(Data)) of
        true ->
            End_2 = (case ((I_5 + Block_size) < erlang:length(Data)) of
    true -> (I_5 + Block_size);
    _ -> erlang:length(Data)
end),
            Block = subarray(Data, I_5, End_2),
            Sorted_block = merge_sort(Block),
            Blocks_2 = lists:append((case Blocks of nil -> []; _ -> Blocks end), [Sorted_block]),
            I_6 = End_2,
            Fun_5_loop(Block_size, Blocks_2, Data, I_6);
        _ -> {Block_size, Blocks, Data, I_5}
    end
end,
{Block_size, Blocks_2, Data, I_6} = Fun_5(Block_size, Blocks, Data, I_5),
        Blocks_2
    catch {return, RetCatch} -> RetCatch end.

merge_blocks(Blocks_3) ->
    try
        Num_blocks = erlang:length(Blocks_3),
        Indices = [],
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(Blocks_3, I_7, Indices, Num_blocks) ->
    case (I_7 < Num_blocks) of
        true ->
            Indices_2 = lists:append((case Indices of nil -> []; _ -> Indices end), [0]),
            I_8 = (I_7 + 1),
            Fun_6_loop(Blocks_3, I_8, Indices_2, Num_blocks);
        _ -> {Blocks_3, I_7, Indices, Num_blocks}
    end
end,
{Blocks_3, I_8, Indices_2, Num_blocks} = Fun_6(Blocks_3, I_7, Indices, Num_blocks),
        Result_9 = [],
        Done = false,
        Fun_8 = fun Fun_8_loop(Blocks_3, Done, I_8, Indices_2, Num_blocks, Result_9) ->
    case mochi_not(Done) of
        true ->
            Done_2 = true,
            Min_val = 0,
            Min_block = (0 - 1),
            J_5 = 0,
            Fun_7 = fun Fun_7_loop(Blocks_3, Done_2, I_8, Indices_2, J_5, Min_block, Min_val, Num_blocks, Result_9) ->
    case (J_5 < Num_blocks) of
        true ->
            Idx = (case erlang:is_map(Indices_2) of true -> maps:get(J_5, Indices_2, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Indices_2) + J_5 + 1, Indices_2); _ -> mochi_nth(J_5 + 1, Indices_2) end end),
            case (Idx < erlang:length((case erlang:is_map(Blocks_3) of true -> maps:get(J_5, Blocks_3, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Blocks_3) + J_5 + 1, Blocks_3); _ -> mochi_nth(J_5 + 1, Blocks_3) end end))) of
        true -> Val = (case erlang:is_map((case erlang:is_map(Blocks_3) of true -> maps:get(J_5, Blocks_3, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Blocks_3) + J_5 + 1, Blocks_3); _ -> mochi_nth(J_5 + 1, Blocks_3) end end)) of true -> maps:get(Idx, (case erlang:is_map(Blocks_3) of true -> maps:get(J_5, Blocks_3, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Blocks_3) + J_5 + 1, Blocks_3); _ -> mochi_nth(J_5 + 1, Blocks_3) end end), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Blocks_3) of true -> maps:get(J_5, Blocks_3, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Blocks_3) + J_5 + 1, Blocks_3); _ -> mochi_nth(J_5 + 1, Blocks_3) end end)) + Idx + 1, (case erlang:is_map(Blocks_3) of true -> maps:get(J_5, Blocks_3, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Blocks_3) + J_5 + 1, Blocks_3); _ -> mochi_nth(J_5 + 1, Blocks_3) end end)); _ -> mochi_nth(Idx + 1, (case erlang:is_map(Blocks_3) of true -> maps:get(J_5, Blocks_3, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Blocks_3) + J_5 + 1, Blocks_3); _ -> mochi_nth(J_5 + 1, Blocks_3) end end)) end end),
            case ((Min_block == (0 - 1)) orelse (Val < Min_val)) of
        true -> Min_val_2 = Val,
            Min_block_2 = J_5,
            Min_block_3 = Min_block_2,
            Min_val_3 = Min_val_2;
        _ -> Min_block_3 = Min_block,
            Min_val_3 = Min_val
    end,
            Done_3 = false,
            Done_4 = Done_3,
            Min_block_4 = Min_block_3,
            Min_val_4 = Min_val_3,
            Val_2 = Val;
        _ -> Done_4 = Done_2,
            Min_block_4 = Min_block,
            Min_val_4 = Min_val,
            Val_2 = nil
    end,
            J_6 = (J_5 + 1),
            Fun_7_loop(Blocks_3, Done_4, I_8, Indices_2, J_6, Min_block_4, Min_val_4, Num_blocks, Result_9);
        _ -> {Blocks_3, Done_2, I_8, Indices_2, J_5, Min_block, Min_val, Num_blocks, Result_9}
    end
end,
{Blocks_3, Done_4, I_8, Indices_2, J_6, Min_block_4, Min_val_4, Num_blocks, Result_9} = Fun_7(Blocks_3, Done_2, I_8, Indices_2, J_5, Min_block, Min_val, Num_blocks, Result_9),
            case mochi_not(Done_4) of
        true -> Result_10 = lists:append((case Result_9 of nil -> []; _ -> Result_9 end), [Min_val_4]),
            Indices_3 = lists:sublist(Indices_2, Min_block_4) ++ [((case erlang:is_map(Indices_2) of true -> maps:get(Min_block_4, Indices_2, nil); _ -> case Min_block_4 < 0 of true -> mochi_nth(erlang:length(Indices_2) + Min_block_4 + 1, Indices_2); _ -> mochi_nth(Min_block_4 + 1, Indices_2) end end) + 1)] ++ lists:nthtail(Min_block_4 + 1, Indices_2),
            Indices_4 = Indices_3,
            Result_11 = Result_10;
        _ -> Indices_4 = Indices_2,
            Result_11 = Result_9
    end,
            Fun_8_loop(Blocks_3, Done_4, I_8, Indices_4, Num_blocks, Result_11);
        _ -> {Blocks_3, Done, I_8, Indices_2, Num_blocks, Result_9}
    end
end,
{Blocks_3, Done_4, I_8, Indices_4, Num_blocks, Result_11} = Fun_8(Blocks_3, Done, I_8, Indices_2, Num_blocks, Result_9),
        Result_11
    catch {return, RetCatch} -> RetCatch end.

external_sort(Data_2, Block_size_2) ->
    try
        Blocks_4 = split_into_blocks(Data_2, Block_size_2),
        merge_blocks(Blocks_4)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Data_3 = [7, 1, 5, 3, 9, 2, 6, 4, 8, 0],
        Sorted_data = external_sort(Data_3, 3),
        io:format("~ts~n", [mochi_repr(Sorted_data)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
