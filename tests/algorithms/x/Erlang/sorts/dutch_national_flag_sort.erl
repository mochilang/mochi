#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, dutch_national_flag_sort/1]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

dutch_national_flag_sort(Seq) ->
    try
        A = Seq,
        Low = 0,
        Mid = 0,
        High = (erlang:length(A) - 1),
        Fun = fun Fun_loop(A, High, Low, Mid, Seq) ->
    case (Mid =< High) of
        true ->
            V = (case erlang:is_map(A) of true -> maps:get(Mid, A, nil); _ -> case Mid < 0 of true -> mochi_nth(erlang:length(A) + Mid + 1, A); _ -> mochi_nth(Mid + 1, A) end end),
            case (V == 0) of
        true -> Tmp = (case erlang:is_map(A) of true -> maps:get(Low, A, nil); _ -> case Low < 0 of true -> mochi_nth(erlang:length(A) + Low + 1, A); _ -> mochi_nth(Low + 1, A) end end),
            A_2 = lists:sublist(A, Low) ++ [V] ++ lists:nthtail(Low + 1, A),
            A_3 = lists:sublist(A_2, Mid) ++ [Tmp] ++ lists:nthtail(Mid + 1, A_2),
            Low_2 = (Low + 1),
            Mid_2 = (Mid + 1),
            A_8 = A_3,
            High_5 = High,
            Low_3 = Low_2,
            Mid_5 = Mid_2,
            Tmp_2 = Tmp,
            Tmp2_4 = nil;
        _ -> case (V == 1) of
        true -> Mid_3 = (Mid + 1),
            A_7 = A,
            High_4 = High,
            Mid_4 = Mid_3,
            Tmp2_3 = nil;
        _ -> case (V == 2) of
        true -> Tmp2 = (case erlang:is_map(A) of true -> maps:get(High, A, nil); _ -> case High < 0 of true -> mochi_nth(erlang:length(A) + High + 1, A); _ -> mochi_nth(High + 1, A) end end),
            A_4 = lists:sublist(A, High) ++ [V] ++ lists:nthtail(High + 1, A),
            A_5 = lists:sublist(A_4, Mid) ++ [Tmp2] ++ lists:nthtail(Mid + 1, A_4),
            High_2 = (High - 1),
            A_6 = A_5,
            High_3 = High_2,
            Tmp2_2 = Tmp2;
        _ -> erlang:error({panic, "The elements inside the sequence must contains only (0, 1, 2) values"}),
            A_6 = A,
            High_3 = High,
            Tmp2_2 = nil
    end,
            A_7 = A_6,
            High_4 = High_3,
            Mid_4 = Mid,
            Tmp2_3 = Tmp2_2
    end,
            A_8 = A_7,
            High_5 = High_4,
            Low_3 = Low,
            Mid_5 = Mid_4,
            Tmp_2 = nil,
            Tmp2_4 = Tmp2_3
    end,
            Fun_loop(A_8, High_5, Low_3, Mid_5, Seq);
        _ -> {A, High, Low, Mid, Seq}
    end
end,
{A_8, High_5, Low_3, Mid_5, Seq} = Fun(A, High, Low, Mid, Seq),
        A_8
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(dutch_national_flag_sort([]))]),
    io:format("~ts~n", [mochi_repr(dutch_national_flag_sort([0]))]),
    io:format("~ts~n", [mochi_repr(dutch_national_flag_sort([2, 1, 0, 0, 1, 2]))]),
    io:format("~ts~n", [mochi_repr(dutch_national_flag_sort([0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
