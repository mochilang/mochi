#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, count_alive_neighbours/3, next_state/2, step/1, show/1]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

count_alive_neighbours(Board, Row, Col) ->
    try
        Size = length(Board),
        Alive = 0,
        Dr = -1,
        Fun_2 = fun Fun_2_loop(Alive, Board, Col, Dr, Row, Size) ->
    case (Dr < 2) of
        true ->
            Dc = -1,
            Fun = fun Fun_loop(Alive, Board, Col, Dc, Dr, Row, Size) ->
    case (Dc < 2) of
        true ->
            Nr = (Row + Dr),
            Nc = (Col + Dc),
            case ((((mochi_not(((Dr == 0) andalso (Dc == 0))) andalso (Nr >= 0)) andalso (Nr < Size)) andalso (Nc >= 0)) andalso (Nc < Size)) of
        true -> case (case erlang:is_map((case erlang:is_map(Board) of true -> maps:get(Nr, Board, nil); _ -> lists:nth(Nr + 1, Board) end)) of true -> maps:get(Nc, (case erlang:is_map(Board) of true -> maps:get(Nr, Board, nil); _ -> lists:nth(Nr + 1, Board) end), nil); _ -> lists:nth(Nc + 1, (case erlang:is_map(Board) of true -> maps:get(Nr, Board, nil); _ -> lists:nth(Nr + 1, Board) end)) end) of
        true -> Alive_2 = (Alive + 1),
            Alive_3 = Alive_2;
        _ -> Alive_3 = Alive
    end,
            Alive_4 = Alive_3;
        _ -> Alive_4 = Alive
    end,
            Dc_2 = (Dc + 1),
            Fun_loop(Alive_4, Board, Col, Dc_2, Dr, Row, Size);
        _ -> {Alive, Board, Col, Dc, Dr, Row, Size}
    end
end,
{Alive_4, Board, Col, Dc_2, Dr, Row, Size} = Fun(Alive, Board, Col, Dc, Dr, Row, Size),
            Dr_2 = (Dr + 1),
            Fun_2_loop(Alive_4, Board, Col, Dr_2, Row, Size);
        _ -> {Alive, Board, Col, Dr, Row, Size}
    end
end,
{Alive_4, Board, Col, Dr_2, Row, Size} = Fun_2(Alive, Board, Col, Dr, Row, Size),
        Alive_4
    catch {return, Ret} -> Ret end.

next_state(Current, Alive_5) ->
    try
        State = Current,
        case Current of
        true -> case (Alive_5 < 2) of
        true -> State_2 = false,
            State_6 = State_2;
        _ -> case ((Alive_5 == 2) orelse (Alive_5 == 3)) of
        true -> State_3 = true,
            State_5 = State_3;
        _ -> State_4 = false,
            State_5 = State_4
    end,
            State_6 = State_5
    end,
            State_9 = State_6;
        _ -> case (Alive_5 == 3) of
        true -> State_7 = true,
            State_8 = State_7;
        _ -> State_8 = State
    end,
            State_9 = State_8
    end,
        State_9
    catch {return, Ret} -> Ret end.

step(Board_2) ->
    try
        Size_2 = length(Board_2),
        New_board = [],
        R = 0,
        Fun_4 = fun Fun_4_loop(Board_2, New_board, R, Size_2) ->
    case (R < Size_2) of
        true ->
            New_row = [],
            C = 0,
            Fun_3 = fun Fun_3_loop(Board_2, C, New_board, New_row, R, Size_2) ->
    case (C < Size_2) of
        true ->
            Alive_6 = count_alive_neighbours(Board_2, R, C),
            Cell = (case erlang:is_map((case erlang:is_map(Board_2) of true -> maps:get(R, Board_2, nil); _ -> lists:nth(R + 1, Board_2) end)) of true -> maps:get(C, (case erlang:is_map(Board_2) of true -> maps:get(R, Board_2, nil); _ -> lists:nth(R + 1, Board_2) end), nil); _ -> lists:nth(C + 1, (case erlang:is_map(Board_2) of true -> maps:get(R, Board_2, nil); _ -> lists:nth(R + 1, Board_2) end)) end),
            Updated = next_state(Cell, Alive_6),
            New_row_2 = lists:append(New_row, [Updated]),
            C_2 = (C + 1),
            Fun_3_loop(Board_2, C_2, New_board, New_row_2, R, Size_2);
        _ -> {Board_2, C, New_board, New_row, R, Size_2}
    end
end,
{Board_2, C_2, New_board, New_row_2, R, Size_2} = Fun_3(Board_2, C, New_board, New_row, R, Size_2),
            New_board_2 = lists:append(New_board, [New_row_2]),
            R_2 = (R + 1),
            Fun_4_loop(Board_2, New_board_2, R_2, Size_2);
        _ -> {Board_2, New_board, R, Size_2}
    end
end,
{Board_2, New_board_2, R_2, Size_2} = Fun_4(Board_2, New_board, R, Size_2),
        New_board_2
    catch {return, Ret} -> Ret end.

show(Board_3) ->
    try
        R_3 = 0,
        Fun_6 = fun Fun_6_loop(Board_3, R_3) ->
    case (R_3 < length(Board_3)) of
        true ->
            Line = "",
            C_3 = 0,
            Fun_5 = fun Fun_5_loop(Board_3, C_3, Line, R_3) ->
    case (C_3 < length((case erlang:is_map(Board_3) of true -> maps:get(R_3, Board_3, nil); _ -> lists:nth(R_3 + 1, Board_3) end))) of
        true ->
            case (case erlang:is_map((case erlang:is_map(Board_3) of true -> maps:get(R_3, Board_3, nil); _ -> lists:nth(R_3 + 1, Board_3) end)) of true -> maps:get(C_3, (case erlang:is_map(Board_3) of true -> maps:get(R_3, Board_3, nil); _ -> lists:nth(R_3 + 1, Board_3) end), nil); _ -> lists:nth(C_3 + 1, (case erlang:is_map(Board_3) of true -> maps:get(R_3, Board_3, nil); _ -> lists:nth(R_3 + 1, Board_3) end)) end) of
        true -> Line_2 = (Line ++ "#"),
            Line_4 = Line_2;
        _ -> Line_3 = (Line ++ "."),
            Line_4 = Line_3
    end,
            C_4 = (C_3 + 1),
            Fun_5_loop(Board_3, C_4, Line_4, R_3);
        _ -> {Board_3, C_3, Line, R_3}
    end
end,
{Board_3, C_4, Line_4, R_3} = Fun_5(Board_3, C_3, Line, R_3),
            io:format("~ts~n", [mochi_repr(Line_4)]),
            R_4 = (R_3 + 1),
            Fun_6_loop(Board_3, R_4);
        _ -> {Board_3, R_3}
    end
end,
{Board_3, R_4} = Fun_6(Board_3, R_3),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('glider', [[false, true, false, false, false], [false, false, true, false, false], [true, true, true, false, false], [false, false, false, false, false], [false, false, false, false, false]]),
    erlang:put('board', erlang:get('glider')),
    io:format("~ts~n", [mochi_repr("Initial")]),
    show(erlang:get('board')),
    erlang:put('i', 0),
    Fun_7 = fun Fun_7_loop() ->
    case (erlang:get('i') < 4) of
        true ->
            erlang:put('board', step(erlang:get('board'))),
            io:format("~ts~n", [mochi_repr(("\nStep " ++ mochi_str((erlang:get('i') + 1))))]),
            show(erlang:get('board')),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_7_loop();
        _ -> {}
    end
end,
{} = Fun_7(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
