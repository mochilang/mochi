#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rand/0, randint/2, random/0, construct_highway/6, get_distance/2, update/3, simulate/4, main/0]).

% Generated by Mochi transpiler v0.10.59 (857f4cdc6a) on 2025-08-06 21:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

rand() ->
    try
        erlang:put('seed', (((erlang:get('seed') * 1103515245) + 12345) rem 2147483648)),
        erlang:get('seed')
    catch {return, Ret} -> Ret end.

randint(A, B) ->
    try
        R = rand(),
        (A + (R rem ((B - A) + 1)))
    catch {return, Ret} -> Ret end.

random() ->
    try
        mochi_safe_div(mochi_safe_mul(1, rand()), 2.147483648e+09)
    catch {return, Ret} -> Ret end.

construct_highway(Number_of_cells, Frequency, Initial_speed, Random_frequency, Random_speed, Max_speed) ->
    try
        Row = [],
        I = 0,
        Fun = fun Fun_loop(Frequency, I, Initial_speed, Max_speed, Number_of_cells, Random_frequency, Random_speed, Row) ->
    case (I < Number_of_cells) of
        true ->
            Row_2 = lists:append(Row, [-1]),
            I_2 = (I + 1),
            Fun_loop(Frequency, I_2, Initial_speed, Max_speed, Number_of_cells, Random_frequency, Random_speed, Row_2);
        _ -> {Frequency, I, Initial_speed, Max_speed, Number_of_cells, Random_frequency, Random_speed, Row}
    end
end,
{Frequency, I_2, Initial_speed, Max_speed, Number_of_cells, Random_frequency, Random_speed, Row_2} = Fun(Frequency, I, Initial_speed, Max_speed, Number_of_cells, Random_frequency, Random_speed, Row),
        Highway = [],
        Highway_2 = lists:append(Highway, [Row_2]),
        I_3 = 0,
        case (Initial_speed < 0) of
        true -> Initial_speed_2 = 0,
            Initial_speed_3 = Initial_speed_2;
        _ -> Initial_speed_3 = Initial_speed
    end,
        Fun_2 = fun Fun_2_loop(Frequency, Highway_2, I_3, Initial_speed_3, Max_speed, Number_of_cells, Random_frequency, Random_speed, Row_2) ->
    case (I_3 < Number_of_cells) of
        true ->
            Speed = Initial_speed_3,
            case Random_speed of
        true -> Speed_2 = randint(0, Max_speed),
            Speed_3 = Speed_2;
        _ -> Speed_3 = Speed
    end,
            Tmp = (case erlang:is_map(Highway_2) of true -> maps:get(0, Highway_2, nil); _ -> lists:nth(0 + 1, Highway_2) end),
            Tmp_2 = lists:sublist(Tmp, I_3) ++ [Speed_3] ++ lists:nthtail(I_3 + 1, Tmp),
            Highway_3 = lists:sublist(Highway_2, 0) ++ [Tmp_2] ++ lists:nthtail(0 + 1, Highway_2),
            Step = Frequency,
            case Random_frequency of
        true -> Step_2 = randint(1, (Max_speed * 2)),
            Step_3 = Step_2;
        _ -> Step_3 = Step
    end,
            I_4 = (I_3 + Step_3),
            Fun_2_loop(Frequency, Highway_3, I_4, Initial_speed_3, Max_speed, Number_of_cells, Random_frequency, Random_speed, Row_2);
        _ -> {Frequency, Highway_2, I_3, Initial_speed_3, Max_speed, Number_of_cells, Random_frequency, Random_speed, Row_2}
    end
end,
{Frequency, Highway_3, I_4, Initial_speed_3, Max_speed, Number_of_cells, Random_frequency, Random_speed, Row_2} = Fun_2(Frequency, Highway_2, I_3, Initial_speed_3, Max_speed, Number_of_cells, Random_frequency, Random_speed, Row_2),
        Highway_3
    catch {return, Ret} -> Ret end.

get_distance(Highway_now, Car_index) ->
    try
        Distance = 0,
        I_5 = (Car_index + 1),
        Fun_3 = fun Fun_3_loop(Car_index, Distance, Highway_now, I_5) ->
    case (I_5 < length(Highway_now)) of
        true ->
            case ((case erlang:is_map(Highway_now) of true -> maps:get(I_5, Highway_now, nil); _ -> lists:nth(I_5 + 1, Highway_now) end) > erlang:get('NEG_ONE')) of
        true -> throw({return, Distance});
        _ -> ok
    end,
            Distance_2 = (Distance + 1),
            I_6 = (I_5 + 1),
            Fun_3_loop(Car_index, Distance_2, Highway_now, I_6);
        _ -> {Car_index, Distance, Highway_now, I_5}
    end
end,
{Car_index, Distance_2, Highway_now, I_6} = Fun_3(Car_index, Distance, Highway_now, I_5),
        (Distance_2 + get_distance(Highway_now, -1))
    catch {return, Ret} -> Ret end.

update(Highway_now_2, Probability, Max_speed_2) ->
    try
        Number_of_cells_2 = length(Highway_now_2),
        Next_highway = [],
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Highway_now_2, I_7, Max_speed_2, Next_highway, Number_of_cells_2, Probability) ->
    case (I_7 < Number_of_cells_2) of
        true ->
            Next_highway_2 = lists:append(Next_highway, [-1]),
            I_8 = (I_7 + 1),
            Fun_4_loop(Highway_now_2, I_8, Max_speed_2, Next_highway_2, Number_of_cells_2, Probability);
        _ -> {Highway_now_2, I_7, Max_speed_2, Next_highway, Number_of_cells_2, Probability}
    end
end,
{Highway_now_2, I_8, Max_speed_2, Next_highway_2, Number_of_cells_2, Probability} = Fun_4(Highway_now_2, I_7, Max_speed_2, Next_highway, Number_of_cells_2, Probability),
        Car_index_2 = 0,
        Fun_5 = fun Fun_5_loop(Car_index_2, Highway_now_2, I_8, Max_speed_2, Next_highway_2, Number_of_cells_2, Probability) ->
    case (Car_index_2 < Number_of_cells_2) of
        true ->
            Speed_4 = (case erlang:is_map(Highway_now_2) of true -> maps:get(Car_index_2, Highway_now_2, nil); _ -> lists:nth(Car_index_2 + 1, Highway_now_2) end),
            case (Speed_4 > erlang:get('NEG_ONE')) of
        true -> New_speed = (Speed_4 + 1),
            case (New_speed > Max_speed_2) of
        true -> New_speed_2 = Max_speed_2,
            New_speed_3 = New_speed_2;
        _ -> New_speed_3 = New_speed
    end,
            Dn = (get_distance(Highway_now_2, Car_index_2) - 1),
            case (New_speed_3 > Dn) of
        true -> New_speed_4 = Dn,
            New_speed_5 = New_speed_4;
        _ -> New_speed_5 = New_speed_3
    end,
            case (random() < Probability) of
        true -> New_speed_6 = (New_speed_5 - 1),
            case (New_speed_6 < 0) of
        true -> New_speed_7 = 0,
            New_speed_8 = New_speed_7;
        _ -> New_speed_8 = New_speed_6
    end,
            New_speed_9 = New_speed_8;
        _ -> New_speed_9 = New_speed_5
    end,
            Next_highway_3 = lists:sublist(Next_highway_2, Car_index_2) ++ [New_speed_9] ++ lists:nthtail(Car_index_2 + 1, Next_highway_2),
            Dn_2 = Dn,
            New_speed_10 = New_speed_9,
            Next_highway_4 = Next_highway_3;
        _ -> Dn_2 = nil,
            New_speed_10 = nil,
            Next_highway_4 = Next_highway_2
    end,
            Car_index_3 = (Car_index_2 + 1),
            Fun_5_loop(Car_index_3, Highway_now_2, I_8, Max_speed_2, Next_highway_4, Number_of_cells_2, Probability);
        _ -> {Car_index_2, Highway_now_2, I_8, Max_speed_2, Next_highway_2, Number_of_cells_2, Probability}
    end
end,
{Car_index_3, Highway_now_2, I_8, Max_speed_2, Next_highway_4, Number_of_cells_2, Probability} = Fun_5(Car_index_2, Highway_now_2, I_8, Max_speed_2, Next_highway_2, Number_of_cells_2, Probability),
        Next_highway_4
    catch {return, Ret} -> Ret end.

simulate(Highway_4, Number_of_update, Probability_2, Max_speed_3) ->
    try
        Number_of_cells_3 = length((case erlang:is_map(Highway_4) of true -> maps:get(0, Highway_4, nil); _ -> lists:nth(0 + 1, Highway_4) end)),
        I_9 = 0,
        Fun_8 = fun Fun_8_loop(Highway_4, I_9, Max_speed_3, Number_of_cells_3, Number_of_update, Probability_2) ->
    case (I_9 < Number_of_update) of
        true ->
            Next_speeds = update((case erlang:is_map(Highway_4) of true -> maps:get(I_9, Highway_4, nil); _ -> lists:nth(I_9 + 1, Highway_4) end), Probability_2, Max_speed_3),
            Real_next = [],
            J = 0,
            Fun_6 = fun Fun_6_loop(Highway_4, I_9, J, Max_speed_3, Next_speeds, Number_of_cells_3, Number_of_update, Probability_2, Real_next) ->
    case (J < Number_of_cells_3) of
        true ->
            Real_next_2 = lists:append(Real_next, [-1]),
            J_2 = (J + 1),
            Fun_6_loop(Highway_4, I_9, J_2, Max_speed_3, Next_speeds, Number_of_cells_3, Number_of_update, Probability_2, Real_next_2);
        _ -> {Highway_4, I_9, J, Max_speed_3, Next_speeds, Number_of_cells_3, Number_of_update, Probability_2, Real_next}
    end
end,
{Highway_4, I_9, J_2, Max_speed_3, Next_speeds, Number_of_cells_3, Number_of_update, Probability_2, Real_next_2} = Fun_6(Highway_4, I_9, J, Max_speed_3, Next_speeds, Number_of_cells_3, Number_of_update, Probability_2, Real_next),
            K = 0,
            Fun_7 = fun Fun_7_loop(Highway_4, I_9, J_2, K, Max_speed_3, Next_speeds, Number_of_cells_3, Number_of_update, Probability_2, Real_next_2) ->
    case (K < Number_of_cells_3) of
        true ->
            Speed_5 = (case erlang:is_map(Next_speeds) of true -> maps:get(K, Next_speeds, nil); _ -> lists:nth(K + 1, Next_speeds) end),
            case (Speed_5 > erlang:get('NEG_ONE')) of
        true -> Index = ((K + Speed_5) rem Number_of_cells_3),
            Real_next_3 = lists:sublist(Real_next_2, Index) ++ [Speed_5] ++ lists:nthtail(Index + 1, Real_next_2),
            Index_2 = Index,
            Real_next_4 = Real_next_3;
        _ -> Index_2 = nil,
            Real_next_4 = Real_next_2
    end,
            K_2 = (K + 1),
            Fun_7_loop(Highway_4, I_9, J_2, K_2, Max_speed_3, Next_speeds, Number_of_cells_3, Number_of_update, Probability_2, Real_next_4);
        _ -> {Highway_4, I_9, J_2, K, Max_speed_3, Next_speeds, Number_of_cells_3, Number_of_update, Probability_2, Real_next_2}
    end
end,
{Highway_4, I_9, J_2, K_2, Max_speed_3, Next_speeds, Number_of_cells_3, Number_of_update, Probability_2, Real_next_4} = Fun_7(Highway_4, I_9, J_2, K, Max_speed_3, Next_speeds, Number_of_cells_3, Number_of_update, Probability_2, Real_next_2),
            Highway_5 = lists:append(Highway_4, [Real_next_4]),
            I_10 = (I_9 + 1),
            Fun_8_loop(Highway_5, I_10, Max_speed_3, Number_of_cells_3, Number_of_update, Probability_2);
        _ -> {Highway_4, I_9, Max_speed_3, Number_of_cells_3, Number_of_update, Probability_2}
    end
end,
{Highway_5, I_10, Max_speed_3, Number_of_cells_3, Number_of_update, Probability_2} = Fun_8(Highway_4, I_9, Max_speed_3, Number_of_cells_3, Number_of_update, Probability_2),
        Highway_5
    catch {return, Ret} -> Ret end.

main() ->
    try
        Ex1 = simulate(construct_highway(6, 3, 0, false, false, 2), 2, 0, 2),
        io:format("~ts~n", [mochi_str(Ex1)]),
        Ex2 = simulate(construct_highway(5, 2, -2, false, false, 2), 3, 0, 2),
        io:format("~ts~n", [mochi_str(Ex2)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    erlang:put('NEG_ONE', -1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
