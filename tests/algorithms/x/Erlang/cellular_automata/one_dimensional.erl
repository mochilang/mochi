#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, format_ruleset/1, new_generation/3, cells_to_string/1]).

% Generated by Mochi transpiler v0.10.59 (857f4cdc6a) on 2025-08-06 21:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

format_ruleset(Ruleset) ->
    try
        Rs = Ruleset,
        Bits_rev = [],
        I = 0,
        Fun = fun Fun_loop(Bits_rev, I, Rs, Ruleset) ->
    case (I < 8) of
        true ->
            Bits_rev_2 = lists:append(Bits_rev, [(Rs rem 2)]),
            Rs_2 = (Rs div 2),
            I_2 = (I + 1),
            Fun_loop(Bits_rev_2, I_2, Rs_2, Ruleset);
        _ -> {Bits_rev, I, Rs, Ruleset}
    end
end,
{Bits_rev_2, I_2, Rs_2, Ruleset} = Fun(Bits_rev, I, Rs, Ruleset),
        Bits = [],
        J = (length(Bits_rev_2) - 1),
        Fun_2 = fun Fun_2_loop(Bits, Bits_rev_2, I_2, J, Rs_2, Ruleset) ->
    case (J >= 0) of
        true ->
            Bits_2 = lists:append(Bits, [(case erlang:is_map(Bits_rev_2) of true -> maps:get(J, Bits_rev_2, nil); _ -> lists:nth(J + 1, Bits_rev_2) end)]),
            J_2 = (J - 1),
            Fun_2_loop(Bits_2, Bits_rev_2, I_2, J_2, Rs_2, Ruleset);
        _ -> {Bits, Bits_rev_2, I_2, J, Rs_2, Ruleset}
    end
end,
{Bits_2, Bits_rev_2, I_2, J_2, Rs_2, Ruleset} = Fun_2(Bits, Bits_rev_2, I_2, J, Rs_2, Ruleset),
        Bits_2
    catch {return, Ret} -> Ret end.

new_generation(Cells, Rules, Time) ->
    try
        Population = length((case erlang:is_map(Cells) of true -> maps:get(0, Cells, nil); _ -> lists:nth(0 + 1, Cells) end)),
        Next_generation = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Cells, I_3, Next_generation, Population, Rules, Time) ->
    case (I_3 < Population) of
        true ->
            Left_neighbor = (case (I_3 == 0) of
    true -> 0;
    _ -> (case erlang:is_map((case erlang:is_map(Cells) of true -> maps:get(Time, Cells, nil); _ -> lists:nth(Time + 1, Cells) end)) of true -> maps:get((I_3 - 1), (case erlang:is_map(Cells) of true -> maps:get(Time, Cells, nil); _ -> lists:nth(Time + 1, Cells) end), nil); _ -> lists:nth((I_3 - 1) + 1, (case erlang:is_map(Cells) of true -> maps:get(Time, Cells, nil); _ -> lists:nth(Time + 1, Cells) end)) end)
end),
            Right_neighbor = (case (I_3 == (Population - 1)) of
    true -> 0;
    _ -> (case erlang:is_map((case erlang:is_map(Cells) of true -> maps:get(Time, Cells, nil); _ -> lists:nth(Time + 1, Cells) end)) of true -> maps:get((I_3 + 1), (case erlang:is_map(Cells) of true -> maps:get(Time, Cells, nil); _ -> lists:nth(Time + 1, Cells) end), nil); _ -> lists:nth((I_3 + 1) + 1, (case erlang:is_map(Cells) of true -> maps:get(Time, Cells, nil); _ -> lists:nth(Time + 1, Cells) end)) end)
end),
            Center = (case erlang:is_map((case erlang:is_map(Cells) of true -> maps:get(Time, Cells, nil); _ -> lists:nth(Time + 1, Cells) end)) of true -> maps:get(I_3, (case erlang:is_map(Cells) of true -> maps:get(Time, Cells, nil); _ -> lists:nth(Time + 1, Cells) end), nil); _ -> lists:nth(I_3 + 1, (case erlang:is_map(Cells) of true -> maps:get(Time, Cells, nil); _ -> lists:nth(Time + 1, Cells) end)) end),
            Idx = (7 - (((Left_neighbor * 4) + (Center * 2)) + Right_neighbor)),
            Next_generation_2 = lists:append(Next_generation, [(case erlang:is_map(Rules) of true -> maps:get(Idx, Rules, nil); _ -> lists:nth(Idx + 1, Rules) end)]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Cells, I_4, Next_generation_2, Population, Rules, Time);
        _ -> {Cells, I_3, Next_generation, Population, Rules, Time}
    end
end,
{Cells, I_4, Next_generation_2, Population, Rules, Time} = Fun_3(Cells, I_3, Next_generation, Population, Rules, Time),
        Next_generation_2
    catch {return, Ret} -> Ret end.

cells_to_string(Row) ->
    try
        Result = "",
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, Result, Row) ->
    case (I_5 < length(Row)) of
        true ->
            case ((case erlang:is_map(Row) of true -> maps:get(I_5, Row, nil); _ -> lists:nth(I_5 + 1, Row) end) == 1) of
        true -> Result_2 = (Result ++ "#"),
            Result_4 = Result_2;
        _ -> Result_3 = (Result ++ "."),
            Result_4 = Result_3
    end,
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Result_4, Row);
        _ -> {I_5, Result, Row}
    end
end,
{I_6, Result_4, Row} = Fun_4(I_5, Result, Row),
        Result_4
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('initial', [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    erlang:put('cells', [erlang:get('initial')]),
    erlang:put('rules', format_ruleset(30)),
    erlang:put('time', 0),
    Fun_5 = fun Fun_5_loop() ->
    case (erlang:get('time') < 16) of
        true ->
            Next = new_generation(erlang:get('cells'), erlang:get('rules'), erlang:get('time')),
            erlang:put('cells', lists:append(erlang:get('cells'), [Next])),
            erlang:put('time', (erlang:get('time') + 1)),
            Fun_5_loop();
        _ -> {}
    end
end,
{} = Fun_5(),
    erlang:put('t', 0),
    Fun_6 = fun Fun_6_loop() ->
    case (erlang:get('t') < length(erlang:get('cells'))) of
        true ->
            io:format("~ts~n", [mochi_repr(cells_to_string((case erlang:is_map(erlang:get('cells')) of true -> maps:get(erlang:get('t'), erlang:get('cells'), nil); _ -> lists:nth(erlang:get('t') + 1, erlang:get('cells')) end)))]),
            erlang:put('t', (erlang:get('t') + 1)),
            Fun_6_loop();
        _ -> {}
    end
end,
{} = Fun_6(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
