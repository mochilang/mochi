#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rand/0, rand_range/1, shuffle/1, create_board/0, create_prey/2, create_predator/2, empty_cell/2, add_entity/1, setup/0, inside/2, find_prey/2, step_world/0, count_entities/1]).

% Generated by Mochi transpiler v0.10.59 (857f4cdc6a) on 2025-08-06 21:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

rand() ->
    try
        erlang:put('seed', (((erlang:get('seed') * 1103515245) + 12345) rem 2147483648)),
        erlang:get('seed')
    catch {return, Ret} -> Ret end.

rand_range(Max) ->
    try
        (rand() rem Max)
    catch {return, Ret} -> Ret end.

shuffle(List_int) ->
    try
        I = (length(List_int) - 1),
        Fun = fun Fun_loop(I, List_int) ->
    case (I > 0) of
        true ->
            J = rand_range((I + 1)),
            Tmp = (case erlang:is_map(List_int) of true -> maps:get(I, List_int, nil); _ -> lists:nth(I + 1, List_int) end),
            List_int_2 = lists:sublist(List_int, I) ++ [(case erlang:is_map(List_int) of true -> maps:get(J, List_int, nil); _ -> lists:nth(J + 1, List_int) end)] ++ lists:nthtail(I + 1, List_int),
            List_int_3 = lists:sublist(List_int_2, J) ++ [Tmp] ++ lists:nthtail(J + 1, List_int_2),
            I_2 = (I - 1),
            Fun_loop(I_2, List_int_3);
        _ -> {I, List_int}
    end
end,
{I_2, List_int_3} = Fun(I, List_int),
        List_int_3
    catch {return, Ret} -> Ret end.

create_board() ->
    try
        Board = [],
        R = 0,
        Fun_3 = fun Fun_3_loop(Board, R) ->
    case (R < 10) of
        true ->
            Row = [],
            C = 0,
            Fun_2 = fun Fun_2_loop(Board, C, R, Row) ->
    case (C < 10) of
        true ->
            Row_2 = lists:append(Row, [0]),
            C_2 = (C + 1),
            Fun_2_loop(Board, C_2, R, Row_2);
        _ -> {Board, C, R, Row}
    end
end,
{Board, C_2, R, Row_2} = Fun_2(Board, C, R, Row),
            Board_2 = lists:append(Board, [Row_2]),
            R_2 = (R + 1),
            Fun_3_loop(Board_2, R_2);
        _ -> {Board, R}
    end
end,
{Board_2, R_2} = Fun_3(Board, R),
        Board_2
    catch {return, Ret} -> Ret end.

create_prey(R_3, C_3) ->
    try
        [0, R_3, C_3, 5, 0, 1]
    catch {return, Ret} -> Ret end.

create_predator(R_4, C_4) ->
    try
        [1, R_4, C_4, 20, 15, 1]
    catch {return, Ret} -> Ret end.

empty_cell(R_5, C_5) ->
    try
        ((case erlang:is_map((case erlang:is_map(erlang:get('board')) of true -> maps:get(R_5, erlang:get('board'), nil); _ -> lists:nth(R_5 + 1, erlang:get('board')) end)) of true -> maps:get(C_5, (case erlang:is_map(erlang:get('board')) of true -> maps:get(R_5, erlang:get('board'), nil); _ -> lists:nth(R_5 + 1, erlang:get('board')) end), nil); _ -> lists:nth(C_5 + 1, (case erlang:is_map(erlang:get('board')) of true -> maps:get(R_5, erlang:get('board'), nil); _ -> lists:nth(R_5 + 1, erlang:get('board')) end)) end) == 0)
    catch {return, Ret} -> Ret end.

add_entity(Typ) ->
    try
        Fun_4 = fun Fun_4_loop(Typ) ->
    case true of
        true ->
            R_6 = rand_range(10),
            C_6 = rand_range(10),
            case empty_cell(R_6, C_6) of
        true -> case (Typ == 0) of
        true -> Board_3 = erlang:get('board'),
            Tmp_2 = (case erlang:is_map(Board_3) of true -> maps:get(R_6, Board_3, nil); _ -> lists:nth(R_6 + 1, Board_3) end),
            Tmp_3 = lists:sublist(Tmp_2, C_6) ++ [1] ++ lists:nthtail(C_6 + 1, Tmp_2),
            Board_4 = lists:sublist(Board_3, R_6) ++ [Tmp_3] ++ lists:nthtail(R_6 + 1, Board_3),
            erlang:put('board', Board_4),
            erlang:put('entities', lists:append(erlang:get('entities'), [create_prey(R_6, C_6)])),
            Board_7 = Board_4,
            Tmp_6 = Tmp_3;
        _ -> Board_5 = erlang:get('board'),
            Tmp_4 = (case erlang:is_map(Board_5) of true -> maps:get(R_6, Board_5, nil); _ -> lists:nth(R_6 + 1, Board_5) end),
            Tmp_5 = lists:sublist(Tmp_4, C_6) ++ [2] ++ lists:nthtail(C_6 + 1, Tmp_4),
            Board_6 = lists:sublist(Board_5, R_6) ++ [Tmp_5] ++ lists:nthtail(R_6 + 1, Board_5),
            erlang:put('board', Board_6),
            erlang:put('entities', lists:append(erlang:get('entities'), [create_predator(R_6, C_6)])),
            Board_7 = Board_6,
            Tmp_6 = Tmp_5
    end,
            throw({return, nil}),
            Board_8 = Board_7,
            Tmp_7 = Tmp_6;
        _ -> Board_8 = nil,
            Tmp_7 = nil
    end,
            Fun_4_loop(Typ);
        _ -> {Typ}
    end
end,
{Typ} = Fun_4(Typ),
        nil
    catch {return, Ret} -> Ret end.

setup() ->
    try
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(I_3) ->
    case (I_3 < 20) of
        true ->
            add_entity(0),
            I_4 = (I_3 + 1),
            Fun_5_loop(I_4);
        _ -> {I_3}
    end
end,
{I_4} = Fun_5(I_3),
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(I_5) ->
    case (I_5 < 5) of
        true ->
            add_entity(1),
            I_6 = (I_5 + 1),
            Fun_6_loop(I_6);
        _ -> {I_5}
    end
end,
{I_6} = Fun_6(I_5),
        nil
    catch {return, Ret} -> Ret end.

inside(R_7, C_7) ->
    try
        ((((R_7 >= 0) andalso (R_7 < 10)) andalso (C_7 >= 0)) andalso (C_7 < 10))
    catch {return, Ret} -> Ret end.

find_prey(R_8, C_8) ->
    try
        I_7 = 0,
        Fun_7 = fun Fun_7_loop(C_8, I_7, R_8) ->
    case (I_7 < length(erlang:get('entities'))) of
        true ->
            E = (case erlang:is_map(erlang:get('entities')) of true -> maps:get(I_7, erlang:get('entities'), nil); _ -> lists:nth(I_7 + 1, erlang:get('entities')) end),
            case (((((case erlang:is_map(E) of true -> maps:get(5, E, nil); _ -> lists:nth(5 + 1, E) end) == 1) andalso ((case erlang:is_map(E) of true -> maps:get(0, E, nil); _ -> lists:nth(0 + 1, E) end) == 0)) andalso ((case erlang:is_map(E) of true -> maps:get(1, E, nil); _ -> lists:nth(1 + 1, E) end) == R_8)) andalso ((case erlang:is_map(E) of true -> maps:get(2, E, nil); _ -> lists:nth(2 + 1, E) end) == C_8)) of
        true -> throw({return, I_7});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_7_loop(C_8, I_8, R_8);
        _ -> {C_8, I_7, R_8}
    end
end,
{C_8, I_8, R_8} = Fun_7(C_8, I_7, R_8),
        -1
    catch {return, Ret} -> Ret end.

step_world() ->
    try
        I_9 = 0,
        Fun_13 = fun Fun_13_loop(I_9) ->
    case (I_9 < length(erlang:get('entities'))) of
        true ->
            try
                E_2 = (case erlang:is_map(erlang:get('entities')) of true -> maps:get(I_9, erlang:get('entities'), nil); _ -> lists:nth(I_9 + 1, erlang:get('entities')) end),
                case ((case erlang:is_map(E_2) of true -> maps:get(5, E_2, nil); _ -> lists:nth(5 + 1, E_2) end) == 0) of
        true -> I_10 = (I_9 + 1),
            throw({continue, I_10}),
            I_11 = I_10;
        _ -> I_11 = I_9
    end,
                Typ_2 = (case erlang:is_map(E_2) of true -> maps:get(0, E_2, nil); _ -> lists:nth(0 + 1, E_2) end),
                Row_3 = (case erlang:is_map(E_2) of true -> maps:get(1, E_2, nil); _ -> lists:nth(1 + 1, E_2) end),
                Col = (case erlang:is_map(E_2) of true -> maps:get(2, E_2, nil); _ -> lists:nth(2 + 1, E_2) end),
                Repro = (case erlang:is_map(E_2) of true -> maps:get(3, E_2, nil); _ -> lists:nth(3 + 1, E_2) end),
                Energy = (case erlang:is_map(E_2) of true -> maps:get(4, E_2, nil); _ -> lists:nth(4 + 1, E_2) end),
                Dirs = [0, 1, 2, 3],
                Dirs_2 = shuffle(Dirs),
                Moved = false,
                Old_r = Row_3,
                Old_c = Col,
                case (Typ_2 == 1) of
        true -> J_2 = 0,
            Ate = false,
            Fun_8 = fun Fun_8_loop(Ate, Col, Dirs_2, E_2, Energy, I_11, J_2, Moved, Old_c, Old_r, Repro, Row_3, Typ_2) ->
    case (J_2 < 4) of
        true ->
            try
                D = (case erlang:is_map(Dirs_2) of true -> maps:get(J_2, Dirs_2, nil); _ -> lists:nth(J_2 + 1, Dirs_2) end),
                Nr = (Row_3 + (case erlang:is_map(erlang:get('dr')) of true -> maps:get(D, erlang:get('dr'), nil); _ -> lists:nth(D + 1, erlang:get('dr')) end)),
                Nc = (Col + (case erlang:is_map(erlang:get('dc')) of true -> maps:get(D, erlang:get('dc'), nil); _ -> lists:nth(D + 1, erlang:get('dc')) end)),
                case (inside(Nr, Nc) andalso ((case erlang:is_map((case erlang:is_map(erlang:get('board')) of true -> maps:get(Nr, erlang:get('board'), nil); _ -> lists:nth(Nr + 1, erlang:get('board')) end)) of true -> maps:get(Nc, (case erlang:is_map(erlang:get('board')) of true -> maps:get(Nr, erlang:get('board'), nil); _ -> lists:nth(Nr + 1, erlang:get('board')) end), nil); _ -> lists:nth(Nc + 1, (case erlang:is_map(erlang:get('board')) of true -> maps:get(Nr, erlang:get('board'), nil); _ -> lists:nth(Nr + 1, erlang:get('board')) end)) end) == 1)) of
        true -> Prey_index = find_prey(Nr, Nc),
            case (Prey_index >= 0) of
        true -> Entities = erlang:get('entities'),
            Tmp_8 = (case erlang:is_map(Entities) of true -> maps:get(Prey_index, Entities, nil); _ -> lists:nth(Prey_index + 1, Entities) end),
            Tmp_9 = lists:sublist(Tmp_8, 5) ++ [0] ++ lists:nthtail(5 + 1, Tmp_8),
            Entities_2 = lists:sublist(Entities, Prey_index) ++ [Tmp_9] ++ lists:nthtail(Prey_index + 1, Entities),
            erlang:put('entities', Entities_2),
            Entities_3 = Entities_2,
            Tmp_10 = Tmp_9;
        _ -> Entities_3 = nil,
            Tmp_10 = nil
    end,
            Board_9 = erlang:get('board'),
            Tmp_11 = (case erlang:is_map(Board_9) of true -> maps:get(Nr, Board_9, nil); _ -> lists:nth(Nr + 1, Board_9) end),
            Tmp_12 = lists:sublist(Tmp_11, Nc) ++ [2] ++ lists:nthtail(Nc + 1, Tmp_11),
            Board_10 = lists:sublist(Board_9, Nr) ++ [Tmp_12] ++ lists:nthtail(Nr + 1, Board_9),
            erlang:put('board', Board_10),
            Board_11 = erlang:get('board'),
            Tmp_13 = (case erlang:is_map(Board_11) of true -> maps:get(Row_3, Board_11, nil); _ -> lists:nth(Row_3 + 1, Board_11) end),
            Tmp_14 = lists:sublist(Tmp_13, Col) ++ [0] ++ lists:nthtail(Col + 1, Tmp_13),
            Board_12 = lists:sublist(Board_11, Row_3) ++ [Tmp_14] ++ lists:nthtail(Row_3 + 1, Board_11),
            erlang:put('board', Board_12),
            E_3 = lists:sublist(E_2, 1) ++ [Nr] ++ lists:nthtail(1 + 1, E_2),
            E_4 = lists:sublist(E_3, 2) ++ [Nc] ++ lists:nthtail(2 + 1, E_3),
            E_5 = lists:sublist(E_4, 4) ++ [((Energy + 5) - 1)] ++ lists:nthtail(4 + 1, E_4),
            Moved_2 = true,
            Ate_2 = true,
            throw(break),
            Ate_3 = Ate_2,
            Board_13 = Board_12,
            E_6 = E_5,
            Entities_4 = Entities_3,
            Moved_3 = Moved_2,
            Prey_index_2 = Prey_index,
            Tmp_15 = Tmp_14;
        _ -> Ate_3 = Ate,
            Board_13 = nil,
            E_6 = E_2,
            Entities_4 = nil,
            Moved_3 = Moved,
            Prey_index_2 = nil,
            Tmp_15 = nil
    end,
                J_3 = (J_2 + 1),
                Fun_8_loop(Ate_3, Col, Dirs_2, E_6, Energy, I_11, J_3, Moved_3, Old_c, Old_r, Repro, Row_3, Typ_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12} -> Fun_8_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12);
                break -> {Ate, Col, Dirs_2, E_2, Energy, I_11, J_2, Moved, Old_c, Old_r, Repro, Row_3, Typ_2}
            end;
        _ -> {Ate, Col, Dirs_2, E_2, Energy, I_11, J_2, Moved, Old_c, Old_r, Repro, Row_3, Typ_2}
    end
end,
{Ate_3, Col, Dirs_2, E_6, Energy, I_11, J_3, Moved_3, Old_c, Old_r, Repro, Row_3, Typ_2} = Fun_8(Ate, Col, Dirs_2, E_2, Energy, I_11, J_2, Moved, Old_c, Old_r, Repro, Row_3, Typ_2),
            case mochi_not(Ate_3) of
        true -> J_4 = 0,
            Fun_9 = fun Fun_9_loop(Ate_3, Col, Dirs_2, E_6, Energy, I_11, J_4, Moved_3, Old_c, Old_r, Repro, Row_3, Typ_2) ->
    case (J_4 < 4) of
        true ->
            try
                D_2 = (case erlang:is_map(Dirs_2) of true -> maps:get(J_4, Dirs_2, nil); _ -> lists:nth(J_4 + 1, Dirs_2) end),
                Nr_2 = (Row_3 + (case erlang:is_map(erlang:get('dr')) of true -> maps:get(D_2, erlang:get('dr'), nil); _ -> lists:nth(D_2 + 1, erlang:get('dr')) end)),
                Nc_2 = (Col + (case erlang:is_map(erlang:get('dc')) of true -> maps:get(D_2, erlang:get('dc'), nil); _ -> lists:nth(D_2 + 1, erlang:get('dc')) end)),
                case (inside(Nr_2, Nc_2) andalso ((case erlang:is_map((case erlang:is_map(erlang:get('board')) of true -> maps:get(Nr_2, erlang:get('board'), nil); _ -> lists:nth(Nr_2 + 1, erlang:get('board')) end)) of true -> maps:get(Nc_2, (case erlang:is_map(erlang:get('board')) of true -> maps:get(Nr_2, erlang:get('board'), nil); _ -> lists:nth(Nr_2 + 1, erlang:get('board')) end), nil); _ -> lists:nth(Nc_2 + 1, (case erlang:is_map(erlang:get('board')) of true -> maps:get(Nr_2, erlang:get('board'), nil); _ -> lists:nth(Nr_2 + 1, erlang:get('board')) end)) end) == 0)) of
        true -> Board_14 = erlang:get('board'),
            Tmp_16 = (case erlang:is_map(Board_14) of true -> maps:get(Nr_2, Board_14, nil); _ -> lists:nth(Nr_2 + 1, Board_14) end),
            Tmp_17 = lists:sublist(Tmp_16, Nc_2) ++ [2] ++ lists:nthtail(Nc_2 + 1, Tmp_16),
            Board_15 = lists:sublist(Board_14, Nr_2) ++ [Tmp_17] ++ lists:nthtail(Nr_2 + 1, Board_14),
            erlang:put('board', Board_15),
            Board_16 = erlang:get('board'),
            Tmp_18 = (case erlang:is_map(Board_16) of true -> maps:get(Row_3, Board_16, nil); _ -> lists:nth(Row_3 + 1, Board_16) end),
            Tmp_19 = lists:sublist(Tmp_18, Col) ++ [0] ++ lists:nthtail(Col + 1, Tmp_18),
            Board_17 = lists:sublist(Board_16, Row_3) ++ [Tmp_19] ++ lists:nthtail(Row_3 + 1, Board_16),
            erlang:put('board', Board_17),
            E_7 = lists:sublist(E_6, 1) ++ [Nr_2] ++ lists:nthtail(1 + 1, E_6),
            E_8 = lists:sublist(E_7, 2) ++ [Nc_2] ++ lists:nthtail(2 + 1, E_7),
            Moved_4 = true,
            throw(break),
            Board_18 = Board_17,
            E_9 = E_8,
            Moved_5 = Moved_4,
            Tmp_20 = Tmp_19;
        _ -> Board_18 = nil,
            E_9 = E_6,
            Moved_5 = Moved_3,
            Tmp_20 = nil
    end,
                J_5 = (J_4 + 1),
                Fun_9_loop(Ate_3, Col, Dirs_2, E_9, Energy, I_11, J_5, Moved_5, Old_c, Old_r, Repro, Row_3, Typ_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12} -> Fun_9_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12);
                break -> {Ate_3, Col, Dirs_2, E_6, Energy, I_11, J_4, Moved_3, Old_c, Old_r, Repro, Row_3, Typ_2}
            end;
        _ -> {Ate_3, Col, Dirs_2, E_6, Energy, I_11, J_4, Moved_3, Old_c, Old_r, Repro, Row_3, Typ_2}
    end
end,
{Ate_3, Col, Dirs_2, E_9, Energy, I_11, J_5, Moved_5, Old_c, Old_r, Repro, Row_3, Typ_2} = Fun_9(Ate_3, Col, Dirs_2, E_6, Energy, I_11, J_4, Moved_3, Old_c, Old_r, Repro, Row_3, Typ_2),
            E_10 = lists:sublist(E_9, 4) ++ [(Energy - 1)] ++ lists:nthtail(4 + 1, E_9),
            E_11 = E_10,
            Fun_10 = Fun_9,
            J_6 = J_5,
            Moved_6 = Moved_5;
        _ -> E_11 = E_6,
            Fun_10 = Fun_8,
            J_6 = J_3,
            Moved_6 = Moved_3
    end,
            case ((case erlang:is_map(E_11) of true -> maps:get(4, E_11, nil); _ -> lists:nth(4 + 1, E_11) end) =< 0) of
        true -> E_12 = lists:sublist(E_11, 5) ++ [0] ++ lists:nthtail(5 + 1, E_11),
            Board_19 = erlang:get('board'),
            Tmp_21 = (case erlang:is_map(Board_19) of true -> maps:get((case erlang:is_map(E_12) of true -> maps:get(1, E_12, nil); _ -> lists:nth(1 + 1, E_12) end), Board_19, nil); _ -> lists:nth((case erlang:is_map(E_12) of true -> maps:get(1, E_12, nil); _ -> lists:nth(1 + 1, E_12) end) + 1, Board_19) end),
            Tmp_22 = lists:sublist(Tmp_21, (case erlang:is_map(E_12) of true -> maps:get(2, E_12, nil); _ -> lists:nth(2 + 1, E_12) end)) ++ [0] ++ lists:nthtail((case erlang:is_map(E_12) of true -> maps:get(2, E_12, nil); _ -> lists:nth(2 + 1, E_12) end) + 1, Tmp_21),
            Board_20 = lists:sublist(Board_19, (case erlang:is_map(E_12) of true -> maps:get(1, E_12, nil); _ -> lists:nth(1 + 1, E_12) end)) ++ [Tmp_22] ++ lists:nthtail((case erlang:is_map(E_12) of true -> maps:get(1, E_12, nil); _ -> lists:nth(1 + 1, E_12) end) + 1, Board_19),
            erlang:put('board', Board_20),
            Board_21 = Board_20,
            E_13 = E_12,
            Tmp_23 = Tmp_22;
        _ -> Board_21 = nil,
            E_13 = E_11,
            Tmp_23 = nil
    end,
            Ate_4 = Ate_3,
            Board_27 = Board_21,
            E_17 = E_13,
            Fun_12 = Fun_10,
            J_9 = J_6,
            Moved_9 = Moved_6,
            Tmp_29 = Tmp_23;
        _ -> J_7 = 0,
            Fun_11 = fun Fun_11_loop(Col, Dirs_2, E_2, Energy, I_11, J_7, Moved, Old_c, Old_r, Repro, Row_3, Typ_2) ->
    case (J_7 < 4) of
        true ->
            try
                D_3 = (case erlang:is_map(Dirs_2) of true -> maps:get(J_7, Dirs_2, nil); _ -> lists:nth(J_7 + 1, Dirs_2) end),
                Nr_3 = (Row_3 + (case erlang:is_map(erlang:get('dr')) of true -> maps:get(D_3, erlang:get('dr'), nil); _ -> lists:nth(D_3 + 1, erlang:get('dr')) end)),
                Nc_3 = (Col + (case erlang:is_map(erlang:get('dc')) of true -> maps:get(D_3, erlang:get('dc'), nil); _ -> lists:nth(D_3 + 1, erlang:get('dc')) end)),
                case (inside(Nr_3, Nc_3) andalso ((case erlang:is_map((case erlang:is_map(erlang:get('board')) of true -> maps:get(Nr_3, erlang:get('board'), nil); _ -> lists:nth(Nr_3 + 1, erlang:get('board')) end)) of true -> maps:get(Nc_3, (case erlang:is_map(erlang:get('board')) of true -> maps:get(Nr_3, erlang:get('board'), nil); _ -> lists:nth(Nr_3 + 1, erlang:get('board')) end), nil); _ -> lists:nth(Nc_3 + 1, (case erlang:is_map(erlang:get('board')) of true -> maps:get(Nr_3, erlang:get('board'), nil); _ -> lists:nth(Nr_3 + 1, erlang:get('board')) end)) end) == 0)) of
        true -> Board_22 = erlang:get('board'),
            Tmp_24 = (case erlang:is_map(Board_22) of true -> maps:get(Nr_3, Board_22, nil); _ -> lists:nth(Nr_3 + 1, Board_22) end),
            Tmp_25 = lists:sublist(Tmp_24, Nc_3) ++ [1] ++ lists:nthtail(Nc_3 + 1, Tmp_24),
            Board_23 = lists:sublist(Board_22, Nr_3) ++ [Tmp_25] ++ lists:nthtail(Nr_3 + 1, Board_22),
            erlang:put('board', Board_23),
            Board_24 = erlang:get('board'),
            Tmp_26 = (case erlang:is_map(Board_24) of true -> maps:get(Row_3, Board_24, nil); _ -> lists:nth(Row_3 + 1, Board_24) end),
            Tmp_27 = lists:sublist(Tmp_26, Col) ++ [0] ++ lists:nthtail(Col + 1, Tmp_26),
            Board_25 = lists:sublist(Board_24, Row_3) ++ [Tmp_27] ++ lists:nthtail(Row_3 + 1, Board_24),
            erlang:put('board', Board_25),
            E_14 = lists:sublist(E_2, 1) ++ [Nr_3] ++ lists:nthtail(1 + 1, E_2),
            E_15 = lists:sublist(E_14, 2) ++ [Nc_3] ++ lists:nthtail(2 + 1, E_14),
            Moved_7 = true,
            throw(break),
            Board_26 = Board_25,
            E_16 = E_15,
            Moved_8 = Moved_7,
            Tmp_28 = Tmp_27;
        _ -> Board_26 = nil,
            E_16 = E_2,
            Moved_8 = Moved,
            Tmp_28 = nil
    end,
                J_8 = (J_7 + 1),
                Fun_11_loop(Col, Dirs_2, E_16, Energy, I_11, J_8, Moved_8, Old_c, Old_r, Repro, Row_3, Typ_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11} -> Fun_11_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11);
                break -> {Col, Dirs_2, E_2, Energy, I_11, J_7, Moved, Old_c, Old_r, Repro, Row_3, Typ_2}
            end;
        _ -> {Col, Dirs_2, E_2, Energy, I_11, J_7, Moved, Old_c, Old_r, Repro, Row_3, Typ_2}
    end
end,
{Col, Dirs_2, E_16, Energy, I_11, J_8, Moved_8, Old_c, Old_r, Repro, Row_3, Typ_2} = Fun_11(Col, Dirs_2, E_2, Energy, I_11, J_7, Moved, Old_c, Old_r, Repro, Row_3, Typ_2),
            Ate_4 = nil,
            Board_27 = nil,
            E_17 = E_16,
            Fun_12 = Fun_11,
            J_9 = J_8,
            Moved_9 = Moved_8,
            Tmp_29 = nil
    end,
                case ((case erlang:is_map(E_17) of true -> maps:get(5, E_17, nil); _ -> lists:nth(5 + 1, E_17) end) == 1) of
        true -> case (Moved_9 andalso (Repro =< 0)) of
        true -> case (Typ_2 == 0) of
        true -> Board_28 = erlang:get('board'),
            Tmp_30 = (case erlang:is_map(Board_28) of true -> maps:get(Old_r, Board_28, nil); _ -> lists:nth(Old_r + 1, Board_28) end),
            Tmp_31 = lists:sublist(Tmp_30, Old_c) ++ [1] ++ lists:nthtail(Old_c + 1, Tmp_30),
            Board_29 = lists:sublist(Board_28, Old_r) ++ [Tmp_31] ++ lists:nthtail(Old_r + 1, Board_28),
            erlang:put('board', Board_29),
            erlang:put('entities', lists:append(erlang:get('entities'), [create_prey(Old_r, Old_c)])),
            E_18 = lists:sublist(E_17, 3) ++ [5] ++ lists:nthtail(3 + 1, E_17),
            Board_32 = Board_29,
            E_20 = E_18,
            Tmp_34 = Tmp_31;
        _ -> Board_30 = erlang:get('board'),
            Tmp_32 = (case erlang:is_map(Board_30) of true -> maps:get(Old_r, Board_30, nil); _ -> lists:nth(Old_r + 1, Board_30) end),
            Tmp_33 = lists:sublist(Tmp_32, Old_c) ++ [2] ++ lists:nthtail(Old_c + 1, Tmp_32),
            Board_31 = lists:sublist(Board_30, Old_r) ++ [Tmp_33] ++ lists:nthtail(Old_r + 1, Board_30),
            erlang:put('board', Board_31),
            erlang:put('entities', lists:append(erlang:get('entities'), [create_predator(Old_r, Old_c)])),
            E_19 = lists:sublist(E_17, 3) ++ [20] ++ lists:nthtail(3 + 1, E_17),
            Board_32 = Board_31,
            E_20 = E_19,
            Tmp_34 = Tmp_33
    end,
            Board_33 = Board_32,
            E_22 = E_20,
            Tmp_35 = Tmp_34;
        _ -> E_21 = lists:sublist(E_17, 3) ++ [(Repro - 1)] ++ lists:nthtail(3 + 1, E_17),
            Board_33 = Board_27,
            E_22 = E_21,
            Tmp_35 = Tmp_29
    end,
            Board_34 = Board_33,
            E_23 = E_22,
            Tmp_36 = Tmp_35;
        _ -> Board_34 = Board_27,
            E_23 = E_17,
            Tmp_36 = Tmp_29
    end,
                I_12 = (I_11 + 1),
                Fun_13_loop(I_12)
            catch
                {continue, C0} -> Fun_13_loop(C0);
                break -> {I_9}
            end;
        _ -> {I_9}
    end
end,
{I_12} = Fun_13(I_9),
        Alive = [],
        K = 0,
        Fun_14 = fun Fun_14_loop(Alive, I_12, K) ->
    case (K < length(erlang:get('entities'))) of
        true ->
            E2 = (case erlang:is_map(erlang:get('entities')) of true -> maps:get(K, erlang:get('entities'), nil); _ -> lists:nth(K + 1, erlang:get('entities')) end),
            case ((case erlang:is_map(E2) of true -> maps:get(5, E2, nil); _ -> lists:nth(5 + 1, E2) end) == 1) of
        true -> Alive_2 = lists:append(Alive, [E2]),
            Alive_3 = Alive_2;
        _ -> Alive_3 = Alive
    end,
            K_2 = (K + 1),
            Fun_14_loop(Alive_3, I_12, K_2);
        _ -> {Alive, I_12, K}
    end
end,
{Alive_3, I_12, K_2} = Fun_14(Alive, I_12, K),
        erlang:put('entities', Alive_3),
        nil
    catch {return, Ret} -> Ret end.

count_entities(Typ_3) ->
    try
        Cnt = 0,
        I_13 = 0,
        Fun_15 = fun Fun_15_loop(Cnt, I_13, Typ_3) ->
    case (I_13 < length(erlang:get('entities'))) of
        true ->
            case (((case erlang:is_map((case erlang:is_map(erlang:get('entities')) of true -> maps:get(I_13, erlang:get('entities'), nil); _ -> lists:nth(I_13 + 1, erlang:get('entities')) end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('entities')) of true -> maps:get(I_13, erlang:get('entities'), nil); _ -> lists:nth(I_13 + 1, erlang:get('entities')) end), nil); _ -> lists:nth(0 + 1, (case erlang:is_map(erlang:get('entities')) of true -> maps:get(I_13, erlang:get('entities'), nil); _ -> lists:nth(I_13 + 1, erlang:get('entities')) end)) end) == Typ_3) andalso ((case erlang:is_map((case erlang:is_map(erlang:get('entities')) of true -> maps:get(I_13, erlang:get('entities'), nil); _ -> lists:nth(I_13 + 1, erlang:get('entities')) end)) of true -> maps:get(5, (case erlang:is_map(erlang:get('entities')) of true -> maps:get(I_13, erlang:get('entities'), nil); _ -> lists:nth(I_13 + 1, erlang:get('entities')) end), nil); _ -> lists:nth(5 + 1, (case erlang:is_map(erlang:get('entities')) of true -> maps:get(I_13, erlang:get('entities'), nil); _ -> lists:nth(I_13 + 1, erlang:get('entities')) end)) end) == 1)) of
        true -> Cnt_2 = (Cnt + 1),
            Cnt_3 = Cnt_2;
        _ -> Cnt_3 = Cnt
    end,
            I_14 = (I_13 + 1),
            Fun_15_loop(Cnt_3, I_14, Typ_3);
        _ -> {Cnt, I_13, Typ_3}
    end
end,
{Cnt_3, I_14, Typ_3} = Fun_15(Cnt, I_13, Typ_3),
        Cnt_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('WIDTH', 10),
    erlang:put('HEIGHT', 10),
    erlang:put('PREY_INITIAL_COUNT', 20),
    erlang:put('PREY_REPRODUCTION_TIME', 5),
    erlang:put('PREDATOR_INITIAL_COUNT', 5),
    erlang:put('PREDATOR_REPRODUCTION_TIME', 20),
    erlang:put('PREDATOR_INITIAL_ENERGY', 15),
    erlang:put('PREDATOR_FOOD_VALUE', 5),
    erlang:put('TYPE_PREY', 0),
    erlang:put('TYPE_PREDATOR', 1),
    erlang:put('seed', 123456789),
    erlang:put('board', create_board()),
    erlang:put('entities', []),
    erlang:put('dr', [-1, 0, 1, 0]),
    erlang:put('dc', [0, 1, 0, -1]),
    setup(),
    erlang:put('t', 0),
    Fun_16 = fun Fun_16_loop() ->
    case (erlang:get('t') < 10) of
        true ->
            step_world(),
            erlang:put('t', (erlang:get('t') + 1)),
            Fun_16_loop();
        _ -> {}
    end
end,
{} = Fun_16(),
    io:format("~ts~n", [mochi_repr(("Prey: " ++ mochi_str(count_entities(0))))]),
    io:format("~ts~n", [mochi_repr(("Predators: " ++ mochi_str(count_entities(1))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
