#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, new_generation/1, generate_generations/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

new_generation(Cells) ->
    try
        Rows = length(Cells),
        Cols = length((case erlang:is_map(Cells) of true -> maps:get(0, Cells, nil); _ -> lists:nth(0 + 1, Cells) end)),
        Next = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Cells, Cols, I, Next, Rows) ->
    case (I < Rows) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(Cells, Cols, I, J, Next, Row, Rows) ->
    case (J < Cols) of
        true ->
            Count = 0,
            case ((I > 0) andalso (J > 0)) of
        true -> Count_2 = (Count + (case erlang:is_map((case erlang:is_map(Cells) of true -> maps:get((I - 1), Cells, nil); _ -> lists:nth((I - 1) + 1, Cells) end)) of true -> maps:get((J - 1), (case erlang:is_map(Cells) of true -> maps:get((I - 1), Cells, nil); _ -> lists:nth((I - 1) + 1, Cells) end), nil); _ -> lists:nth((J - 1) + 1, (case erlang:is_map(Cells) of true -> maps:get((I - 1), Cells, nil); _ -> lists:nth((I - 1) + 1, Cells) end)) end)),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            case (I > 0) of
        true -> Count_4 = (Count_3 + (case erlang:is_map((case erlang:is_map(Cells) of true -> maps:get((I - 1), Cells, nil); _ -> lists:nth((I - 1) + 1, Cells) end)) of true -> maps:get(J, (case erlang:is_map(Cells) of true -> maps:get((I - 1), Cells, nil); _ -> lists:nth((I - 1) + 1, Cells) end), nil); _ -> lists:nth(J + 1, (case erlang:is_map(Cells) of true -> maps:get((I - 1), Cells, nil); _ -> lists:nth((I - 1) + 1, Cells) end)) end)),
            Count_5 = Count_4;
        _ -> Count_5 = Count_3
    end,
            case ((I > 0) andalso (J < (Cols - 1))) of
        true -> Count_6 = (Count_5 + (case erlang:is_map((case erlang:is_map(Cells) of true -> maps:get((I - 1), Cells, nil); _ -> lists:nth((I - 1) + 1, Cells) end)) of true -> maps:get((J + 1), (case erlang:is_map(Cells) of true -> maps:get((I - 1), Cells, nil); _ -> lists:nth((I - 1) + 1, Cells) end), nil); _ -> lists:nth((J + 1) + 1, (case erlang:is_map(Cells) of true -> maps:get((I - 1), Cells, nil); _ -> lists:nth((I - 1) + 1, Cells) end)) end)),
            Count_7 = Count_6;
        _ -> Count_7 = Count_5
    end,
            case (J > 0) of
        true -> Count_8 = (Count_7 + (case erlang:is_map((case erlang:is_map(Cells) of true -> maps:get(I, Cells, nil); _ -> lists:nth(I + 1, Cells) end)) of true -> maps:get((J - 1), (case erlang:is_map(Cells) of true -> maps:get(I, Cells, nil); _ -> lists:nth(I + 1, Cells) end), nil); _ -> lists:nth((J - 1) + 1, (case erlang:is_map(Cells) of true -> maps:get(I, Cells, nil); _ -> lists:nth(I + 1, Cells) end)) end)),
            Count_9 = Count_8;
        _ -> Count_9 = Count_7
    end,
            case (J < (Cols - 1)) of
        true -> Count_10 = (Count_9 + (case erlang:is_map((case erlang:is_map(Cells) of true -> maps:get(I, Cells, nil); _ -> lists:nth(I + 1, Cells) end)) of true -> maps:get((J + 1), (case erlang:is_map(Cells) of true -> maps:get(I, Cells, nil); _ -> lists:nth(I + 1, Cells) end), nil); _ -> lists:nth((J + 1) + 1, (case erlang:is_map(Cells) of true -> maps:get(I, Cells, nil); _ -> lists:nth(I + 1, Cells) end)) end)),
            Count_11 = Count_10;
        _ -> Count_11 = Count_9
    end,
            case ((I < (Rows - 1)) andalso (J > 0)) of
        true -> Count_12 = (Count_11 + (case erlang:is_map((case erlang:is_map(Cells) of true -> maps:get((I + 1), Cells, nil); _ -> lists:nth((I + 1) + 1, Cells) end)) of true -> maps:get((J - 1), (case erlang:is_map(Cells) of true -> maps:get((I + 1), Cells, nil); _ -> lists:nth((I + 1) + 1, Cells) end), nil); _ -> lists:nth((J - 1) + 1, (case erlang:is_map(Cells) of true -> maps:get((I + 1), Cells, nil); _ -> lists:nth((I + 1) + 1, Cells) end)) end)),
            Count_13 = Count_12;
        _ -> Count_13 = Count_11
    end,
            case (I < (Rows - 1)) of
        true -> Count_14 = (Count_13 + (case erlang:is_map((case erlang:is_map(Cells) of true -> maps:get((I + 1), Cells, nil); _ -> lists:nth((I + 1) + 1, Cells) end)) of true -> maps:get(J, (case erlang:is_map(Cells) of true -> maps:get((I + 1), Cells, nil); _ -> lists:nth((I + 1) + 1, Cells) end), nil); _ -> lists:nth(J + 1, (case erlang:is_map(Cells) of true -> maps:get((I + 1), Cells, nil); _ -> lists:nth((I + 1) + 1, Cells) end)) end)),
            Count_15 = Count_14;
        _ -> Count_15 = Count_13
    end,
            case ((I < (Rows - 1)) andalso (J < (Cols - 1))) of
        true -> Count_16 = (Count_15 + (case erlang:is_map((case erlang:is_map(Cells) of true -> maps:get((I + 1), Cells, nil); _ -> lists:nth((I + 1) + 1, Cells) end)) of true -> maps:get((J + 1), (case erlang:is_map(Cells) of true -> maps:get((I + 1), Cells, nil); _ -> lists:nth((I + 1) + 1, Cells) end), nil); _ -> lists:nth((J + 1) + 1, (case erlang:is_map(Cells) of true -> maps:get((I + 1), Cells, nil); _ -> lists:nth((I + 1) + 1, Cells) end)) end)),
            Count_17 = Count_16;
        _ -> Count_17 = Count_15
    end,
            Alive = ((case erlang:is_map((case erlang:is_map(Cells) of true -> maps:get(I, Cells, nil); _ -> lists:nth(I + 1, Cells) end)) of true -> maps:get(J, (case erlang:is_map(Cells) of true -> maps:get(I, Cells, nil); _ -> lists:nth(I + 1, Cells) end), nil); _ -> lists:nth(J + 1, (case erlang:is_map(Cells) of true -> maps:get(I, Cells, nil); _ -> lists:nth(I + 1, Cells) end)) end) == 1),
            case (((Alive andalso (Count_17 >= 2)) andalso (Count_17 =< 3)) orelse (mochi_not(Alive) andalso (Count_17 == 3))) of
        true -> Row_2 = lists:append(Row, [1]),
            Row_4 = Row_2;
        _ -> Row_3 = lists:append(Row, [0]),
            Row_4 = Row_3
    end,
            J_2 = (J + 1),
            Fun_loop(Cells, Cols, I, J_2, Next, Row_4, Rows);
        _ -> {Cells, Cols, I, J, Next, Row, Rows}
    end
end,
{Cells, Cols, I, J_2, Next, Row_4, Rows} = Fun(Cells, Cols, I, J, Next, Row, Rows),
            Next_2 = lists:append(Next, [Row_4]),
            I_2 = (I + 1),
            Fun_2_loop(Cells, Cols, I_2, Next_2, Rows);
        _ -> {Cells, Cols, I, Next, Rows}
    end
end,
{Cells, Cols, I_2, Next_2, Rows} = Fun_2(Cells, Cols, I, Next, Rows),
        Next_2
    catch {return, Ret} -> Ret end.

generate_generations(Cells_2, Frames) ->
    try
        Result = [],
        I_3 = 0,
        Current = Cells_2,
        Fun_3 = fun Fun_3_loop(Cells_2, Current, Frames, I_3, Result) ->
    case (I_3 < Frames) of
        true ->
            Result_2 = lists:append(Result, [Current]),
            Current_2 = new_generation(Current),
            I_4 = (I_3 + 1),
            Fun_3_loop(Cells_2, Current_2, Frames, I_4, Result_2);
        _ -> {Cells_2, Current, Frames, I_3, Result}
    end
end,
{Cells_2, Current_2, Frames, I_4, Result_2} = Fun_3(Cells_2, Current, Frames, I_3, Result),
        Result_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Frames_2 = generate_generations(erlang:get('GLIDER'), 4),
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Frames_2, I_5) ->
    case (I_5 < length(Frames_2)) of
        true ->
            io:format("~ts~n", [mochi_repr((case erlang:is_map(Frames_2) of true -> maps:get(I_5, Frames_2, nil); _ -> lists:nth(I_5 + 1, Frames_2) end))]),
            I_6 = (I_5 + 1),
            Fun_4_loop(Frames_2, I_6);
        _ -> {Frames_2, I_5}
    end
end,
{Frames_2, I_6} = Fun_4(Frames_2, I_5),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('GLIDER', [[0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [1, 1, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]),
    erlang:put('BLINKER', [[0, 1, 0], [0, 1, 0], [0, 1, 0]]),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
