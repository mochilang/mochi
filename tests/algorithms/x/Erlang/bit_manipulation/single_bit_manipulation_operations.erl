#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow2/1, is_bit_set/2, set_bit/2, clear_bit/2, flip_bit/2, get_bit/2]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

pow2(Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = (Result * 2),
            I_2 = (I + 1),
            Fun_loop(Exp, I_2, Result_2);
        _ -> {Exp, I, Result}
    end
end,
{Exp, I_2, Result_2} = Fun(Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

is_bit_set(Number, Position) ->
    try
        Shifted = (Number div pow2(Position)),
        Remainder = (Shifted rem 2),
        (Remainder == 1)
    catch {return, Ret} -> Ret end.

set_bit(Number_2, Position_2) ->
    try
        (case is_bit_set(Number_2, Position_2) of
    true -> Number_2;
    _ -> (Number_2 + pow2(Position_2))
end)
    catch {return, Ret} -> Ret end.

clear_bit(Number_3, Position_3) ->
    try
        (case is_bit_set(Number_3, Position_3) of
    true -> (Number_3 - pow2(Position_3));
    _ -> Number_3
end)
    catch {return, Ret} -> Ret end.

flip_bit(Number_4, Position_4) ->
    try
        (case is_bit_set(Number_4, Position_4) of
    true -> (Number_4 - pow2(Position_4));
    _ -> (Number_4 + pow2(Position_4))
end)
    catch {return, Ret} -> Ret end.

get_bit(Number_5, Position_5) ->
    try
        (case is_bit_set(Number_5, Position_5) of
    true -> 1;
    _ -> 0
end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(set_bit(13, 1))]),
    io:format("~ts~n", [mochi_str(clear_bit(18, 1))]),
    io:format("~ts~n", [mochi_str(flip_bit(5, 1))]),
    io:format("~ts~n", [mochi_str(is_bit_set(10, 3))]),
    io:format("~ts~n", [mochi_str(get_bit(10, 1))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
