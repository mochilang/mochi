#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, to_binary4/1, binary_coded_decimal/1]).

% Generated by Mochi transpiler v0.10.59 (85449788bf) on 2025-08-06 21:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

to_binary4(N) ->
    try
        Result = "",
        X = N,
        Fun = fun Fun_loop(N, Result, X) ->
    case (X > 0) of
        true ->
            Result_2 = (mochi_str((X rem 2)) ++ Result),
            X_2 = (X div 2),
            Fun_loop(N, Result_2, X_2);
        _ -> {N, Result, X}
    end
end,
{N, Result_2, X_2} = Fun(N, Result, X),
        Fun_2 = fun Fun_2_loop(N, Result_2, X_2) ->
    case (length(Result_2) < 4) of
        true ->
            Result_3 = ("0" ++ Result_2),
            Fun_2_loop(N, Result_3, X_2);
        _ -> {N, Result_2, X_2}
    end
end,
{N, Result_3, X_2} = Fun_2(N, Result_2, X_2),
        Result_3
    catch {return, Ret} -> Ret end.

binary_coded_decimal(Number) ->
    try
        N_2 = Number,
        case (N_2 < 0) of
        true -> N_3 = 0,
            N_4 = N_3;
        _ -> N_4 = N_2
    end,
        Digits = mochi_str(N_4),
        Out = "0b",
        I = 0,
        Fun_3 = fun Fun_3_loop(Digits, I, N_4, Number, Out) ->
    case (I < length(Digits)) of
        true ->
            D = string:substr(Digits, I + 1, 1),
            D_int = mochi_to_int(D),
            Out_2 = (Out ++ to_binary4(D_int)),
            I_2 = (I + 1),
            Fun_3_loop(Digits, I_2, N_4, Number, Out_2);
        _ -> {Digits, I, N_4, Number, Out}
    end
end,
{Digits, I_2, N_4, Number, Out_2} = Fun_3(Digits, I, N_4, Number, Out),
        Out_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(binary_coded_decimal(-2))]),
    io:format("~ts~n", [mochi_repr(binary_coded_decimal(-1))]),
    io:format("~ts~n", [mochi_repr(binary_coded_decimal(0))]),
    io:format("~ts~n", [mochi_repr(binary_coded_decimal(3))]),
    io:format("~ts~n", [mochi_repr(binary_coded_decimal(2))]),
    io:format("~ts~n", [mochi_repr(binary_coded_decimal(12))]),
    io:format("~ts~n", [mochi_repr(binary_coded_decimal(987))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
