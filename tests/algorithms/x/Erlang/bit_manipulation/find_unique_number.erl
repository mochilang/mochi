#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bit_xor/2, find_unique_number/1]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

bit_xor(A, B) ->
    try
        Ua = A,
        Ub = B,
        Res = 0,
        Bit = 1,
        Fun = fun Fun_loop(A, B, Bit, Res, Ua, Ub) ->
    case ((Ua > 0) orelse (Ub > 0)) of
        true ->
            Abit = (Ua rem 2),
            Bbit = (Ub rem 2),
            case (((Abit == 1) andalso (Bbit == 0)) orelse ((Abit == 0) andalso (Bbit == 1))) of
        true -> Res_2 = (Res + Bit),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            Ua_2 = mochi_to_int((Ua div 2)),
            Ub_2 = mochi_to_int((Ub div 2)),
            Bit_2 = (Bit * 2),
            Fun_loop(A, B, Bit_2, Res_3, Ua_2, Ub_2);
        _ -> {A, B, Bit, Res, Ua, Ub}
    end
end,
{A, B, Bit_2, Res_3, Ua_2, Ub_2} = Fun(A, B, Bit, Res, Ua, Ub),
        Res_3
    catch {return, Ret} -> Ret end.

find_unique_number(Arr) ->
    try
        case (length(Arr) == 0) of
        true -> erlang:error("input list must not be empty");
        _ -> ok
    end,
        Result = 0,
        Fun_2 = fun Fun_2_loop(List, Arr, Result) ->
    case List of
        [] -> {Arr, Result};
        [Num|Num_rest] ->
            Result_2 = bit_xor(Result, Num),
            Fun_2_loop(Num_rest, Arr, Result_2);
        _ -> {Arr, Result}
    end
end,
{Arr, Result_2} = Fun_2(Arr, Arr, Result),
        Result_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(find_unique_number([1, 1, 2, 2, 3]))]),
    io:format("~ts~n", [mochi_str(find_unique_number([4, 5, 4, 6, 6]))]),
    io:format("~ts~n", [mochi_str(find_unique_number([7]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
