#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, repeat_char/2, abs_int/1, pow2/1, to_binary_no_prefix/1, logical_left_shift/2, logical_right_shift/2, arithmetic_right_shift/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

repeat_char(Ch, Count) ->
    try
        Res = "",
        I = 0,
        Fun = fun Fun_loop(Ch, Count, I, Res) ->
    case (I < Count) of
        true ->
            Res_2 = (Res ++ Ch),
            I_2 = (I + 1),
            Fun_loop(Ch, Count, I_2, Res_2);
        _ -> {Ch, Count, I, Res}
    end
end,
{Ch, Count, I_2, Res_2} = Fun(Ch, Count, I, Res),
        Res_2
    catch {return, Ret} -> Ret end.

abs_int(N) ->
    try
        (case (N < 0) of
    true -> -N;
    _ -> N
end)
    catch {return, Ret} -> Ret end.

pow2(Exp) ->
    try
        Res_3 = 1,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Exp, I_3, Res_3) ->
    case (I_3 < Exp) of
        true ->
            Res_4 = (Res_3 * 2),
            I_4 = (I_3 + 1),
            Fun_2_loop(Exp, I_4, Res_4);
        _ -> {Exp, I_3, Res_3}
    end
end,
{Exp, I_4, Res_4} = Fun_2(Exp, I_3, Res_3),
        Res_4
    catch {return, Ret} -> Ret end.

to_binary_no_prefix(N_2) ->
    try
        V = N_2,
        case (V < 0) of
        true -> V_2 = -V,
            V_3 = V_2;
        _ -> V_3 = V
    end,
        case (V_3 == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Res_5 = "",
        Fun_3 = fun Fun_3_loop(N_2, Res_5, V_3) ->
    case (V_3 > 0) of
        true ->
            Res_6 = (mochi_str((V_3 rem 2)) ++ Res_5),
            V_4 = (V_3 div 2),
            Fun_3_loop(N_2, Res_6, V_4);
        _ -> {N_2, Res_5, V_3}
    end
end,
{N_2, Res_6, V_4} = Fun_3(N_2, Res_5, V_3),
        Res_6
    catch {return, Ret} -> Ret end.

logical_left_shift(Number, Shift_amount) ->
    try
        case ((Number < 0) orelse (Shift_amount < 0)) of
        true -> erlang:error("both inputs must be positive integers");
        _ -> ok
    end,
        Binary_number = ("0b" ++ to_binary_no_prefix(Number)),
        (Binary_number ++ repeat_char("0", Shift_amount))
    catch {return, Ret} -> Ret end.

logical_right_shift(Number_2, Shift_amount_2) ->
    try
        case ((Number_2 < 0) orelse (Shift_amount_2 < 0)) of
        true -> erlang:error("both inputs must be positive integers");
        _ -> ok
    end,
        Binary_number_2 = to_binary_no_prefix(Number_2),
        case (Shift_amount_2 >= length(Binary_number_2)) of
        true -> throw({return, "0b0"});
        _ -> ok
    end,
        Shifted = string:substr(Binary_number_2, 0 + 1, ((length(Binary_number_2) - Shift_amount_2) - 0)),
        ("0b" ++ Shifted)
    catch {return, Ret} -> Ret end.

arithmetic_right_shift(Number_3, Shift_amount_3) ->
    try
        Binary_number_3 = nil,
        case (Number_3 >= 0) of
        true -> Binary_number_4 = ("0" ++ to_binary_no_prefix(Number_3)),
            Bin_repr_2 = nil,
            Binary_number_6 = Binary_number_4,
            Intermediate_2 = nil,
            Length_2 = nil;
        _ -> Length = length(to_binary_no_prefix(-Number_3)),
            Intermediate = (abs_int(Number_3) - pow2(Length)),
            Bin_repr = to_binary_no_prefix(Intermediate),
            Binary_number_5 = (("1" ++ repeat_char("0", (Length - length(Bin_repr)))) ++ Bin_repr),
            Bin_repr_2 = Bin_repr,
            Binary_number_6 = Binary_number_5,
            Intermediate_2 = Intermediate,
            Length_2 = Length
    end,
        case (Shift_amount_3 >= length(Binary_number_6)) of
        true -> Sign = string:substr(Binary_number_6, 0 + 1, (1 - 0)),
            throw({return, ("0b" ++ repeat_char(Sign, length(Binary_number_6)))}),
            Sign_2 = Sign;
        _ -> Sign_2 = nil
    end,
        Sign_3 = string:substr(Binary_number_6, 0 + 1, (1 - 0)),
        Shifted_2 = string:substr(Binary_number_6, 0 + 1, ((length(Binary_number_6) - Shift_amount_3) - 0)),
        (("0b" ++ repeat_char(Sign_3, Shift_amount_3)) ++ Shifted_2)
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(logical_left_shift(17, 2))]),
        io:format("~ts~n", [mochi_repr(logical_right_shift(1983, 4))]),
        io:format("~ts~n", [mochi_repr(arithmetic_right_shift(-17, 2))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
