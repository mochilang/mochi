#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, get_reverse_bit_string/1, reverse_bit/1]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

get_reverse_bit_string(Number) ->
    try
        Bit_string = "",
        N = Number,
        I = 0,
        Fun = fun Fun_loop(Bit_string, I, N, Number) ->
    case (I < 32) of
        true ->
            Bit_string_2 = (Bit_string ++ mochi_str((N rem 2))),
            N_2 = (N div 2),
            I_2 = (I + 1),
            Fun_loop(Bit_string_2, I_2, N_2, Number);
        _ -> {Bit_string, I, N, Number}
    end
end,
{Bit_string_2, I_2, N_2, Number} = Fun(Bit_string, I, N, Number),
        Bit_string_2
    catch {return, Ret} -> Ret end.

reverse_bit(Number_2) ->
    try
        case (Number_2 < 0) of
        true -> erlang:error("the value of input must be positive");
        _ -> ok
    end,
        N_3 = Number_2,
        Result = 0,
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(I_3, N_3, Number_2, Result) ->
    case (I_3 =< 32) of
        true ->
            Result_2 = (Result * 2),
            End_bit = (N_3 rem 2),
            N_4 = (N_3 div 2),
            Result_3 = (Result_2 + End_bit),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, N_4, Number_2, Result_3);
        _ -> {I_3, N_3, Number_2, Result}
    end
end,
{I_4, N_4, Number_2, Result_3} = Fun_2(I_3, N_3, Number_2, Result),
        get_reverse_bit_string(Result_3)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(reverse_bit(25))]),
    io:format("~ts~n", [mochi_repr(reverse_bit(37))]),
    io:format("~ts~n", [mochi_repr(reverse_bit(21))]),
    io:format("~ts~n", [mochi_repr(reverse_bit(58))]),
    io:format("~ts~n", [mochi_repr(reverse_bit(0))]),
    io:format("~ts~n", [mochi_repr(reverse_bit(256))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
