#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bitwise_xor/2, bitwise_and/2, bitwise_addition_recursive/2]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

bitwise_xor(A, B) ->
    try
        Result = 0,
        Bit = 1,
        X = A,
        Y = B,
        Fun = fun Fun_loop(A, B, Bit, Result, X, Y) ->
    case ((X > 0) orelse (Y > 0)) of
        true ->
            Ax = (X rem 2),
            By = (Y rem 2),
            case (((Ax + By) rem 2) == 1) of
        true -> Result_2 = (Result + Bit),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            X_2 = (X div 2),
            Y_2 = (Y div 2),
            Bit_2 = (Bit * 2),
            Fun_loop(A, B, Bit_2, Result_3, X_2, Y_2);
        _ -> {A, B, Bit, Result, X, Y}
    end
end,
{A, B, Bit_2, Result_3, X_2, Y_2} = Fun(A, B, Bit, Result, X, Y),
        Result_3
    catch {return, Ret} -> Ret end.

bitwise_and(A_2, B_2) ->
    try
        Result_4 = 0,
        Bit_3 = 1,
        X_3 = A_2,
        Y_3 = B_2,
        Fun_2 = fun Fun_2_loop(A_2, B_2, Bit_3, Result_4, X_3, Y_3) ->
    case ((X_3 > 0) andalso (Y_3 > 0)) of
        true ->
            case (((X_3 rem 2) == 1) andalso ((Y_3 rem 2) == 1)) of
        true -> Result_5 = (Result_4 + Bit_3),
            Result_6 = Result_5;
        _ -> Result_6 = Result_4
    end,
            X_4 = (X_3 div 2),
            Y_4 = (Y_3 div 2),
            Bit_4 = (Bit_3 * 2),
            Fun_2_loop(A_2, B_2, Bit_4, Result_6, X_4, Y_4);
        _ -> {A_2, B_2, Bit_3, Result_4, X_3, Y_3}
    end
end,
{A_2, B_2, Bit_4, Result_6, X_4, Y_4} = Fun_2(A_2, B_2, Bit_3, Result_4, X_3, Y_3),
        Result_6
    catch {return, Ret} -> Ret end.

bitwise_addition_recursive(Number, Other_number) ->
    try
        case ((Number < 0) orelse (Other_number < 0)) of
        true -> erlang:error("Both arguments MUST be non-negative!");
        _ -> ok
    end,
        Bitwise_sum = bitwise_xor(Number, Other_number),
        Carry = bitwise_and(Number, Other_number),
        case (Carry == 0) of
        true -> throw({return, Bitwise_sum});
        _ -> ok
    end,
        bitwise_addition_recursive(Bitwise_sum, (Carry * 2))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(bitwise_addition_recursive(4, 5))]),
    io:format("~ts~n", [mochi_str(bitwise_addition_recursive(8, 9))]),
    io:format("~ts~n", [mochi_str(bitwise_addition_recursive(0, 4))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
