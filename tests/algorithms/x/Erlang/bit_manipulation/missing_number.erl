#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, find_missing_number/1]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

find_missing_number(Nums) ->
    try
        Low = mochi_to_int(lists:min(Nums)),
        High = mochi_to_int(lists:max(Nums)),
        Count = ((High - Low) + 1),
        Expected_sum = (((Low + High) * Count) div 2),
        Actual_sum = 0,
        I = 0,
        N = length(Nums),
        Fun = fun Fun_loop(Actual_sum, Count, Expected_sum, High, I, Low, N, Nums) ->
    case (I < N) of
        true ->
            Actual_sum_2 = (Actual_sum + (case erlang:is_map(Nums) of true -> maps:get(I, Nums, nil); _ -> lists:nth(I + 1, Nums) end)),
            I_2 = (I + 1),
            Fun_loop(Actual_sum_2, Count, Expected_sum, High, I_2, Low, N, Nums);
        _ -> {Actual_sum, Count, Expected_sum, High, I, Low, N, Nums}
    end
end,
{Actual_sum_2, Count, Expected_sum, High, I_2, Low, N, Nums} = Fun(Actual_sum, Count, Expected_sum, High, I, Low, N, Nums),
        (Expected_sum - Actual_sum_2)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(find_missing_number([0, 1, 3, 4]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
