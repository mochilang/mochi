#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, lowest_set_bit/1, get_1s_count/1]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

lowest_set_bit(N) ->
    try
        Lb = 1,
        Fun = fun Fun_loop(Lb, N) ->
    case ((N rem (Lb * 2)) == 0) of
        true ->
            Lb_2 = (Lb * 2),
            Fun_loop(Lb_2, N);
        _ -> {Lb, N}
    end
end,
{Lb_2, N} = Fun(Lb, N),
        Lb_2
    catch {return, Ret} -> Ret end.

get_1s_count(Number) ->
    try
        case (Number < 0) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: Input must be a non-negative integer")]),
            throw({return, 0});
        _ -> ok
    end,
        N_2 = Number,
        Count = 0,
        Fun_2 = fun Fun_2_loop(Count, N_2, Number) ->
    case (N_2 > 0) of
        true ->
            N_3 = (N_2 - lowest_set_bit(N_2)),
            Count_2 = (Count + 1),
            Fun_2_loop(Count_2, N_3, Number);
        _ -> {Count, N_2, Number}
    end
end,
{Count_2, N_3, Number} = Fun_2(Count, N_2, Number),
        Count_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(get_1s_count(25))]),
    io:format("~ts~n", [mochi_str(get_1s_count(37))]),
    io:format("~ts~n", [mochi_str(get_1s_count(21))]),
    io:format("~ts~n", [mochi_str(get_1s_count(58))]),
    io:format("~ts~n", [mochi_str(get_1s_count(0))]),
    io:format("~ts~n", [mochi_str(get_1s_count(256))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
