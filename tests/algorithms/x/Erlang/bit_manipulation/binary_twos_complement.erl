#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, repeat_char/2, to_binary/1, pow2/1, twos_complement/1]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

repeat_char(Ch, Times) ->
    try
        Res = "",
        I = 0,
        Fun = fun Fun_loop(Ch, I, Res, Times) ->
    case (I < Times) of
        true ->
            Res_2 = (Res ++ Ch),
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, Res_2, Times);
        _ -> {Ch, I, Res, Times}
    end
end,
{Ch, I_2, Res_2, Times} = Fun(Ch, I, Res, Times),
        Res_2
    catch {return, Ret} -> Ret end.

to_binary(N) ->
    try
        case (N == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Res_3 = "",
        V = N,
        Fun_2 = fun Fun_2_loop(N, Res_3, V) ->
    case (V > 0) of
        true ->
            Res_4 = (mochi_str((V rem 2)) ++ Res_3),
            V_2 = (V div 2),
            Fun_2_loop(N, Res_4, V_2);
        _ -> {N, Res_3, V}
    end
end,
{N, Res_4, V_2} = Fun_2(N, Res_3, V),
        Res_4
    catch {return, Ret} -> Ret end.

pow2(Exp) ->
    try
        Res_5 = 1,
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Exp, I_3, Res_5) ->
    case (I_3 < Exp) of
        true ->
            Res_6 = (Res_5 * 2),
            I_4 = (I_3 + 1),
            Fun_3_loop(Exp, I_4, Res_6);
        _ -> {Exp, I_3, Res_5}
    end
end,
{Exp, I_4, Res_6} = Fun_3(Exp, I_3, Res_5),
        Res_6
    catch {return, Ret} -> Ret end.

twos_complement(Number) ->
    try
        case (Number > 0) of
        true -> erlang:error("input must be a negative integer");
        _ -> ok
    end,
        case (Number == 0) of
        true -> throw({return, "0b0"});
        _ -> ok
    end,
        Abs_number = (case (Number < 0) of
    true -> -Number;
    _ -> Number
end),
        Binary_number_length = length(to_binary(Abs_number)),
        Complement_value = (pow2(Binary_number_length) - Abs_number),
        Complement_binary = to_binary(Complement_value),
        Padding = repeat_char("0", (Binary_number_length - length(Complement_binary))),
        Twos_complement_number = (("1" ++ Padding) ++ Complement_binary),
        ("0b" ++ Twos_complement_number)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(twos_complement(0))]),
    io:format("~ts~n", [mochi_repr(twos_complement(-1))]),
    io:format("~ts~n", [mochi_repr(twos_complement(-5))]),
    io:format("~ts~n", [mochi_repr(twos_complement(-17))]),
    io:format("~ts~n", [mochi_repr(twos_complement(-207))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
