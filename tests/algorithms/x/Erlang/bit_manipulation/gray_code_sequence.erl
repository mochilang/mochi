#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow2/1, gray_code/1]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

pow2(Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = (Result * 2),
            I_2 = (I + 1),
            Fun_loop(Exp, I_2, Result_2);
        _ -> {Exp, I, Result}
    end
end,
{Exp, I_2, Result_2} = Fun(Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

gray_code(Bit_count) ->
    try
        case (Bit_count == 0) of
        true -> throw({return, [0]});
        _ -> ok
    end,
        Prev = gray_code((Bit_count - 1)),
        Add_val = pow2((Bit_count - 1)),
        Res = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Add_val, Bit_count, I_3, Prev, Res) ->
    case (I_3 < length(Prev)) of
        true ->
            Res_2 = lists:append(Res, [(case erlang:is_map(Prev) of true -> maps:get(I_3, Prev, nil); _ -> lists:nth(I_3 + 1, Prev) end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Add_val, Bit_count, I_4, Prev, Res_2);
        _ -> {Add_val, Bit_count, I_3, Prev, Res}
    end
end,
{Add_val, Bit_count, I_4, Prev, Res_2} = Fun_2(Add_val, Bit_count, I_3, Prev, Res),
        J = (length(Prev) - 1),
        Fun_3 = fun Fun_3_loop(Add_val, Bit_count, I_4, J, Prev, Res_2) ->
    case (J >= 0) of
        true ->
            Res_3 = lists:append(Res_2, [((case erlang:is_map(Prev) of true -> maps:get(J, Prev, nil); _ -> lists:nth(J + 1, Prev) end) + Add_val)]),
            J_2 = (J - 1),
            Fun_3_loop(Add_val, Bit_count, I_4, J_2, Prev, Res_3);
        _ -> {Add_val, Bit_count, I_4, J, Prev, Res_2}
    end
end,
{Add_val, Bit_count, I_4, J_2, Prev, Res_3} = Fun_3(Add_val, Bit_count, I_4, J, Prev, Res_2),
        Res_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seq2', gray_code(2)),
    io:format("~ts~n", [mochi_str(erlang:get('seq2'))]),
    erlang:put('seq1', gray_code(1)),
    io:format("~ts~n", [mochi_str(erlang:get('seq1'))]),
    erlang:put('seq3', gray_code(3)),
    io:format("~ts~n", [mochi_str(erlang:get('seq3'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
