#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pad_left_num/1, to_binary/1, show_bits/2, lshift/2, rshift/2, swap_odd_even_bits/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

pad_left_num(N) ->
    try
        S = mochi_str(N),
        Fun = fun Fun_loop(N, S) ->
    case (length(S) < 5) of
        true ->
            S_2 = (" " ++ S),
            Fun_loop(N, S_2);
        _ -> {N, S}
    end
end,
{N, S_2} = Fun(N, S),
        S_2
    catch {return, Ret} -> Ret end.

to_binary(N_2) ->
    try
        Sign = "",
        Num = N_2,
        case (Num < 0) of
        true -> Sign_2 = "-",
            Num_2 = (0 - Num),
            Num_3 = Num_2,
            Sign_3 = Sign_2;
        _ -> Num_3 = Num,
            Sign_3 = Sign
    end,
        Bits = "",
        Fun_2 = fun Fun_2_loop(Bits, N_2, Num_3, Sign_3) ->
    case (Num_3 > 0) of
        true ->
            Bits_2 = (mochi_str((Num_3 rem 2)) ++ Bits),
            Num_4 = ((Num_3 - (Num_3 rem 2)) div 2),
            Fun_2_loop(Bits_2, N_2, Num_4, Sign_3);
        _ -> {Bits, N_2, Num_3, Sign_3}
    end
end,
{Bits_2, N_2, Num_4, Sign_3} = Fun_2(Bits, N_2, Num_3, Sign_3),
        case (Bits_2 == "") of
        true -> Bits_3 = "0",
            Bits_4 = Bits_3;
        _ -> Bits_4 = Bits_2
    end,
        Min_width = 8,
        Fun_3 = fun Fun_3_loop(Bits_4, Min_width, N_2, Num_4, Sign_3) ->
    case (length(Bits_4) < (Min_width - length(Sign_3))) of
        true ->
            Bits_5 = ("0" ++ Bits_4),
            Fun_3_loop(Bits_5, Min_width, N_2, Num_4, Sign_3);
        _ -> {Bits_4, Min_width, N_2, Num_4, Sign_3}
    end
end,
{Bits_5, Min_width, N_2, Num_4, Sign_3} = Fun_3(Bits_4, Min_width, N_2, Num_4, Sign_3),
        (Sign_3 ++ Bits_5)
    catch {return, Ret} -> Ret end.

show_bits(Before, After) ->
    try
        ((((((pad_left_num(Before) ++ ": ") ++ to_binary(Before)) ++ "\n") ++ pad_left_num(After)) ++ ": ") ++ to_binary(After))
    catch {return, Ret} -> Ret end.

lshift(Num_5, K) ->
    try
        Result = Num_5,
        I = 0,
        Fun_4 = fun Fun_4_loop(I, K, Num_5, Result) ->
    case (I < K) of
        true ->
            Result_2 = (Result * 2),
            I_2 = (I + 1),
            Fun_4_loop(I_2, K, Num_5, Result_2);
        _ -> {I, K, Num_5, Result}
    end
end,
{I_2, K, Num_5, Result_2} = Fun_4(I, K, Num_5, Result),
        Result_2
    catch {return, Ret} -> Ret end.

rshift(Num_6, K_2) ->
    try
        Result_3 = Num_6,
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(I_3, K_2, Num_6, Result_3) ->
    case (I_3 < K_2) of
        true ->
            Result_4 = ((Result_3 - (Result_3 rem 2)) div 2),
            I_4 = (I_3 + 1),
            Fun_5_loop(I_4, K_2, Num_6, Result_4);
        _ -> {I_3, K_2, Num_6, Result_3}
    end
end,
{I_4, K_2, Num_6, Result_4} = Fun_5(I_3, K_2, Num_6, Result_3),
        Result_4
    catch {return, Ret} -> Ret end.

swap_odd_even_bits(Num_7) ->
    try
        N_3 = Num_7,
        case (N_3 < 0) of
        true -> N_4 = (N_3 + 4294967296),
            N_5 = N_4;
        _ -> N_5 = N_3
    end,
        Result_5 = 0,
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(I_5, N_5, Num_7, Result_5) ->
    case (I_5 < 32) of
        true ->
            Bit1 = (rshift(N_5, I_5) rem 2),
            Bit2 = (rshift(N_5, (I_5 + 1)) rem 2),
            Result_6 = ((Result_5 + lshift(Bit1, (I_5 + 1))) + lshift(Bit2, I_5)),
            I_6 = (I_5 + 2),
            Fun_6_loop(I_6, N_5, Num_7, Result_6);
        _ -> {I_5, N_5, Num_7, Result_5}
    end
end,
{I_6, N_5, Num_7, Result_6} = Fun_6(I_5, N_5, Num_7, Result_5),
        Result_6
    catch {return, Ret} -> Ret end.

main() ->
    try
        Nums = [-1, 0, 1, 2, 3, 4, 23, 24],
        I_7 = 0,
        Fun_7 = fun Fun_7_loop(I_7, Nums) ->
    case (I_7 < length(Nums)) of
        true ->
            N_6 = (case erlang:is_map(Nums) of true -> maps:get(I_7, Nums, nil); _ -> lists:nth(I_7 + 1, Nums) end),
            io:format("~ts~n", [mochi_repr(show_bits(N_6, swap_odd_even_bits(N_6)))]),
            io:format("~ts~n", [mochi_repr("")]),
            I_8 = (I_7 + 1),
            Fun_7_loop(I_8, Nums);
        _ -> {I_7, Nums}
    end
end,
{I_8, Nums} = Fun_7(I_7, Nums),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
