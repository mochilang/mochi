#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, to_binary/1, zfill/2, binary_and/2]).

% Generated by Mochi transpiler v0.10.59 (4cd36c2212) on 2025-08-06 20:43 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = string:replace(S, ",", " ", all),
    string:replace(S1, "\"", "", all).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    string:replace(S, ",", ", ", all).

to_binary(N) ->
    try
        case (N == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Num = N,
        Res = "",
        Fun = fun Fun_loop(N, Num, Res) ->
    case (Num > 0) of
        true ->
            Bit = (Num rem 2),
            Res_2 = (mochi_str(Bit) ++ Res),
            Num_2 = (Num div 2),
            Fun_loop(N, Num_2, Res_2);
        _ -> {N, Num, Res}
    end
end,
{N, Num_2, Res_2} = Fun(N, Num, Res),
        Res_2
    catch {return, Ret} -> Ret end.

zfill(S, Width) ->
    try
        Res_3 = S,
        Pad = (Width - length(S)),
        Fun_2 = fun Fun_2_loop(Pad, Res_3, S, Width) ->
    case (Pad > 0) of
        true ->
            Res_4 = ("0" ++ Res_3),
            Pad_2 = (Pad - 1),
            Fun_2_loop(Pad_2, Res_4, S, Width);
        _ -> {Pad, Res_3, S, Width}
    end
end,
{Pad_2, Res_4, S, Width} = Fun_2(Pad, Res_3, S, Width),
        Res_4
    catch {return, Ret} -> Ret end.

binary_and(A, B) ->
    try
        case ((A < 0) orelse (B < 0)) of
        true -> erlang:error("the value of both inputs must be positive");
        _ -> ok
    end,
        A_bin = to_binary(A),
        B_bin = to_binary(B),
        Max_len = length(A_bin),
        case (length(B_bin) > Max_len) of
        true -> Max_len_2 = length(B_bin),
            Max_len_3 = Max_len_2;
        _ -> Max_len_3 = Max_len
    end,
        A_pad = zfill(A_bin, Max_len_3),
        B_pad = zfill(B_bin, Max_len_3),
        I = 0,
        Res_5 = "",
        Fun_3 = fun Fun_3_loop(A, A_bin, A_pad, B, B_bin, B_pad, I, Max_len_3, Res_5) ->
    case (I < Max_len_3) of
        true ->
            case ((string:substr(A_pad, I + 1, 1) == "1") andalso (string:substr(B_pad, I + 1, 1) == "1")) of
        true -> Res_6 = (Res_5 ++ "1"),
            Res_8 = Res_6;
        _ -> Res_7 = (Res_5 ++ "0"),
            Res_8 = Res_7
    end,
            I_2 = (I + 1),
            Fun_3_loop(A, A_bin, A_pad, B, B_bin, B_pad, I_2, Max_len_3, Res_8);
        _ -> {A, A_bin, A_pad, B, B_bin, B_pad, I, Max_len_3, Res_5}
    end
end,
{A, A_bin, A_pad, B, B_bin, B_pad, I_2, Max_len_3, Res_8} = Fun_3(A, A_bin, A_pad, B, B_bin, B_pad, I, Max_len_3, Res_5),
        ("0b" ++ Res_8)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(binary_and(25, 32))]),
    io:format("~ts~n", [mochi_repr(binary_and(37, 50))]),
    io:format("~ts~n", [mochi_repr(binary_and(21, 30))]),
    io:format("~ts~n", [mochi_repr(binary_and(58, 73))]),
    io:format("~ts~n", [mochi_repr(binary_and(0, 255))]),
    io:format("~ts~n", [mochi_repr(binary_and(256, 256))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
