#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, int_to_binary/1, pad_left/2, binary_xor/2]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

int_to_binary(N) ->
    try
        case (N == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Res = "",
        Num = N,
        Fun = fun Fun_loop(N, Num, Res) ->
    case (Num > 0) of
        true ->
            Res_2 = (mochi_str((Num rem 2)) ++ Res),
            Num_2 = (Num div 2),
            Fun_loop(N, Num_2, Res_2);
        _ -> {N, Num, Res}
    end
end,
{N, Num_2, Res_2} = Fun(N, Num, Res),
        Res_2
    catch {return, Ret} -> Ret end.

pad_left(S, Width) ->
    try
        Res_3 = S,
        Fun_2 = fun Fun_2_loop(Res_3, S, Width) ->
    case (length(Res_3) < Width) of
        true ->
            Res_4 = ("0" ++ Res_3),
            Fun_2_loop(Res_4, S, Width);
        _ -> {Res_3, S, Width}
    end
end,
{Res_4, S, Width} = Fun_2(Res_3, S, Width),
        Res_4
    catch {return, Ret} -> Ret end.

binary_xor(A, B) ->
    try
        case ((A < 0) orelse (B < 0)) of
        true -> erlang:error("the value of both inputs must be positive");
        _ -> ok
    end,
        A_bin = int_to_binary(A),
        B_bin = int_to_binary(B),
        Max_len = (case (length(A_bin) > length(B_bin)) of
    true -> length(A_bin);
    _ -> length(B_bin)
end),
        A_pad = pad_left(A_bin, Max_len),
        B_pad = pad_left(B_bin, Max_len),
        I = 0,
        Result = "",
        Fun_3 = fun Fun_3_loop(A, A_bin, A_pad, B, B_bin, B_pad, I, Max_len, Result) ->
    case (I < Max_len) of
        true ->
            case (string:substr(A_pad, I + 1, 1) /= string:substr(B_pad, I + 1, 1)) of
        true -> Result_2 = (Result ++ "1"),
            Result_4 = Result_2;
        _ -> Result_3 = (Result ++ "0"),
            Result_4 = Result_3
    end,
            I_2 = (I + 1),
            Fun_3_loop(A, A_bin, A_pad, B, B_bin, B_pad, I_2, Max_len, Result_4);
        _ -> {A, A_bin, A_pad, B, B_bin, B_pad, I, Max_len, Result}
    end
end,
{A, A_bin, A_pad, B, B_bin, B_pad, I_2, Max_len, Result_4} = Fun_3(A, A_bin, A_pad, B, B_bin, B_pad, I, Max_len, Result),
        ("0b" ++ Result_4)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(binary_xor(25, 32))]),
    io:format("~ts~n", [mochi_repr(binary_xor(37, 50))]),
    io:format("~ts~n", [mochi_repr(binary_xor(21, 30))]),
    io:format("~ts~n", [mochi_repr(binary_xor(58, 73))]),
    io:format("~ts~n", [mochi_repr(binary_xor(0, 255))]),
    io:format("~ts~n", [mochi_repr(binary_xor(256, 256))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
