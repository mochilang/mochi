#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, binary_or/2]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

binary_or(A, B) ->
    try
        case ((A < 0) orelse (B < 0)) of
        true -> throw({return, "ValueError"});
        _ -> ok
    end,
        Res = "",
        X = A,
        Y = B,
        Fun = fun Fun_loop(A, B, Res, X, Y) ->
    case ((X > 0) orelse (Y > 0)) of
        true ->
            Bit_a = (X rem 2),
            Bit_b = (Y rem 2),
            case ((Bit_a == 1) orelse (Bit_b == 1)) of
        true -> Res_2 = ("1" ++ Res),
            Res_4 = Res_2;
        _ -> Res_3 = ("0" ++ Res),
            Res_4 = Res_3
    end,
            X_2 = (X div 2),
            Y_2 = (Y div 2),
            Fun_loop(A, B, Res_4, X_2, Y_2);
        _ -> {A, B, Res, X, Y}
    end
end,
{A, B, Res_4, X_2, Y_2} = Fun(A, B, Res, X, Y),
        case (Res_4 == "") of
        true -> Res_5 = "0",
            Res_6 = Res_5;
        _ -> Res_6 = Res_4
    end,
        ("0b" ++ Res_6)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(binary_or(25, 32))]),
    io:format("~ts~n", [mochi_repr(binary_or(37, 50))]),
    io:format("~ts~n", [mochi_repr(binary_or(21, 30))]),
    io:format("~ts~n", [mochi_repr(binary_or(58, 73))]),
    io:format("~ts~n", [mochi_repr(binary_or(0, 255))]),
    io:format("~ts~n", [mochi_repr(binary_or(0, 256))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
