#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, excess_3_code/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

excess_3_code(Number) ->
    try
        N = Number,
        case (N < 0) of
        true -> N_2 = 0,
            N_3 = N_2;
        _ -> N_3 = N
    end,
        Mapping = ["0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100"],
        Res = "",
        case (N_3 == 0) of
        true -> Res_2 = (case erlang:is_map(Mapping) of true -> maps:get(0, Mapping, nil); _ -> lists:nth(0 + 1, Mapping) end),
            Fun_2 = nil,
            N_5 = N_3,
            Res_4 = Res_2;
        _ -> Fun = fun Fun_loop(Mapping, N_3, Number, Res) ->
    case (N_3 > 0) of
        true ->
            Digit = (N_3 rem 10),
            Res_3 = ((case erlang:is_map(Mapping) of true -> maps:get(Digit, Mapping, nil); _ -> lists:nth(Digit + 1, Mapping) end) ++ Res),
            N_4 = (N_3 div 10),
            Fun_loop(Mapping, N_4, Number, Res_3);
        _ -> {Mapping, N_3, Number, Res}
    end
end,
{Mapping, N_4, Number, Res_3} = Fun(Mapping, N_3, Number, Res),
            Fun_2 = Fun,
            N_5 = N_4,
            Res_4 = Res_3
    end,
        ("0b" ++ Res_4)
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(excess_3_code(0))]),
        io:format("~ts~n", [mochi_repr(excess_3_code(3))]),
        io:format("~ts~n", [mochi_repr(excess_3_code(2))]),
        io:format("~ts~n", [mochi_repr(excess_3_code(20))]),
        io:format("~ts~n", [mochi_repr(excess_3_code(120))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
