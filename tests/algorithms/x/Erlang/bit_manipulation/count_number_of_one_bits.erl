#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bit_and/2, count_bits_kernighan/1, count_bits_modulo/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

bit_and(A, B) ->
    try
        Ua = A,
        Ub = B,
        Res = 0,
        Bit = 1,
        Fun = fun Fun_loop(A, B, Bit, Res, Ua, Ub) ->
    case ((Ua > 0) orelse (Ub > 0)) of
        true ->
            case (((Ua rem 2) == 1) andalso ((Ub rem 2) == 1)) of
        true -> Res_2 = (Res + Bit),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            Ua_2 = mochi_to_int((Ua div 2)),
            Ub_2 = mochi_to_int((Ub div 2)),
            Bit_2 = (Bit * 2),
            Fun_loop(A, B, Bit_2, Res_3, Ua_2, Ub_2);
        _ -> {A, B, Bit, Res, Ua, Ub}
    end
end,
{A, B, Bit_2, Res_3, Ua_2, Ub_2} = Fun(A, B, Bit, Res, Ua, Ub),
        Res_3
    catch {return, Ret} -> Ret end.

count_bits_kernighan(N) ->
    try
        case (N < 0) of
        true -> erlang:error("the value of input must not be negative");
        _ -> ok
    end,
        Num = N,
        Result = 0,
        Fun_2 = fun Fun_2_loop(N, Num, Result) ->
    case (Num /= 0) of
        true ->
            Num_2 = bit_and(Num, (Num - 1)),
            Result_2 = (Result + 1),
            Fun_2_loop(N, Num_2, Result_2);
        _ -> {N, Num, Result}
    end
end,
{N, Num_2, Result_2} = Fun_2(N, Num, Result),
        Result_2
    catch {return, Ret} -> Ret end.

count_bits_modulo(N_2) ->
    try
        case (N_2 < 0) of
        true -> erlang:error("the value of input must not be negative");
        _ -> ok
    end,
        Num_3 = N_2,
        Result_3 = 0,
        Fun_3 = fun Fun_3_loop(N_2, Num_3, Result_3) ->
    case (Num_3 /= 0) of
        true ->
            case ((Num_3 rem 2) == 1) of
        true -> Result_4 = (Result_3 + 1),
            Result_5 = Result_4;
        _ -> Result_5 = Result_3
    end,
            Num_4 = mochi_to_int((Num_3 div 2)),
            Fun_3_loop(N_2, Num_4, Result_5);
        _ -> {N_2, Num_3, Result_3}
    end
end,
{N_2, Num_4, Result_5} = Fun_3(N_2, Num_3, Result_3),
        Result_5
    catch {return, Ret} -> Ret end.

main() ->
    try
        Numbers = [25, 37, 21, 58, 0, 256],
        I = 0,
        Fun_4 = fun Fun_4_loop(I, Numbers) ->
    case (I < length(Numbers)) of
        true ->
            io:format("~ts~n", [mochi_str(count_bits_kernighan((case erlang:is_map(Numbers) of true -> maps:get(I, Numbers, nil); _ -> lists:nth(I + 1, Numbers) end)))]),
            I_2 = (I + 1),
            Fun_4_loop(I_2, Numbers);
        _ -> {I, Numbers}
    end
end,
{I_2, Numbers} = Fun_4(I, Numbers),
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(I_3, Numbers) ->
    case (I_3 < length(Numbers)) of
        true ->
            io:format("~ts~n", [mochi_str(count_bits_modulo((case erlang:is_map(Numbers) of true -> maps:get(I_3, Numbers, nil); _ -> lists:nth(I_3 + 1, Numbers) end)))]),
            I_4 = (I_3 + 1),
            Fun_5_loop(I_4, Numbers);
        _ -> {I_3, Numbers}
    end
end,
{I_4, Numbers} = Fun_5(I_3, Numbers),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
