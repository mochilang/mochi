#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, complex_conj/1, complex_eq/2, complex_add/2, complex_mul/2, conj_vector/1, vec_mat_mul/2, dot/2, is_hermitian/1, rayleigh_quotient/2]).

% Generated by Mochi transpiler v0.10.65 (63755001db)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

complex_conj(Z) ->
    try
        #{"re" => maps:get("re", Z, nil), "im" => -maps:get("im", Z, nil)}
    catch {return, RetCatch} -> RetCatch end.

complex_eq(A, B) ->
    try
        ((maps:get("re", A, nil) == maps:get("re", B, nil)) andalso (maps:get("im", A, nil) == maps:get("im", B, nil)))
    catch {return, RetCatch} -> RetCatch end.

complex_add(A_2, B_2) ->
    try
        #{"re" => (maps:get("re", A_2, nil) + maps:get("re", B_2, nil)), "im" => (maps:get("im", A_2, nil) + maps:get("im", B_2, nil))}
    catch {return, RetCatch} -> RetCatch end.

complex_mul(A_3, B_3) ->
    try
        Real = (mochi_safe_mul(maps:get("re", A_3, nil), maps:get("re", B_3, nil)) - mochi_safe_mul(maps:get("im", A_3, nil), maps:get("im", B_3, nil))),
        Imag = (mochi_safe_mul(maps:get("re", A_3, nil), maps:get("im", B_3, nil)) + mochi_safe_mul(maps:get("im", A_3, nil), maps:get("re", B_3, nil))),
        #{"re" => Real, "im" => Imag}
    catch {return, RetCatch} -> RetCatch end.

conj_vector(V) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, Res, V) ->
    case (I < erlang:length(V)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [complex_conj((case erlang:is_map(V) of true -> maps:get(I, V, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(V) + I + 1, V); _ -> mochi_nth(I + 1, V) end end))]),
            I_2 = (I + 1),
            Fun_loop(I_2, Res_2, V);
        _ -> {I, Res, V}
    end
end,
{I_2, Res_2, V} = Fun(I, Res, V),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

vec_mat_mul(V_2, M) ->
    try
        Result = [],
        Col = 0,
        Fun_3 = fun Fun_3_loop(Col, M, Result, V_2) ->
    case (Col < erlang:length((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end))) of
        true ->
            Sum = #{"re" => 0.0, "im" => 0.0},
            Row = 0,
            Fun_2 = fun Fun_2_loop(Col, M, Result, Row, Sum, V_2) ->
    case (Row < erlang:length(V_2)) of
        true ->
            Sum_2 = complex_add(Sum, complex_mul((case erlang:is_map(V_2) of true -> maps:get(Row, V_2, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(V_2) + Row + 1, V_2); _ -> mochi_nth(Row + 1, V_2) end end), (case erlang:is_map((case erlang:is_map(M) of true -> maps:get(Row, M, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(M) + Row + 1, M); _ -> mochi_nth(Row + 1, M) end end)) of true -> maps:get(Col, (case erlang:is_map(M) of true -> maps:get(Row, M, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(M) + Row + 1, M); _ -> mochi_nth(Row + 1, M) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M) of true -> maps:get(Row, M, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(M) + Row + 1, M); _ -> mochi_nth(Row + 1, M) end end)) + Col + 1, (case erlang:is_map(M) of true -> maps:get(Row, M, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(M) + Row + 1, M); _ -> mochi_nth(Row + 1, M) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(M) of true -> maps:get(Row, M, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(M) + Row + 1, M); _ -> mochi_nth(Row + 1, M) end end)) end end))),
            Row_2 = (Row + 1),
            Fun_2_loop(Col, M, Result, Row_2, Sum_2, V_2);
        _ -> {Col, M, Result, Row, Sum, V_2}
    end
end,
{Col, M, Result, Row_2, Sum_2, V_2} = Fun_2(Col, M, Result, Row, Sum, V_2),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Sum_2]),
            Col_2 = (Col + 1),
            Fun_3_loop(Col_2, M, Result_2, V_2);
        _ -> {Col, M, Result, V_2}
    end
end,
{Col_2, M, Result_2, V_2} = Fun_3(Col, M, Result, V_2),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

dot(A_4, B_4) ->
    try
        Sum_3 = #{"re" => 0.0, "im" => 0.0},
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(A_4, B_4, I_3, Sum_3) ->
    case (I_3 < erlang:length(A_4)) of
        true ->
            Sum_4 = complex_add(Sum_3, complex_mul((case erlang:is_map(A_4) of true -> maps:get(I_3, A_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A_4) + I_3 + 1, A_4); _ -> mochi_nth(I_3 + 1, A_4) end end), (case erlang:is_map(B_4) of true -> maps:get(I_3, B_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(B_4) + I_3 + 1, B_4); _ -> mochi_nth(I_3 + 1, B_4) end end))),
            I_4 = (I_3 + 1),
            Fun_4_loop(A_4, B_4, I_4, Sum_4);
        _ -> {A_4, B_4, I_3, Sum_3}
    end
end,
{A_4, B_4, I_4, Sum_4} = Fun_4(A_4, B_4, I_3, Sum_3),
        Sum_4
    catch {return, RetCatch} -> RetCatch end.

is_hermitian(M_2) ->
    try
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(I_5, M_2) ->
    case (I_5 < erlang:length(M_2)) of
        true ->
            J = 0,
            Fun_5 = fun Fun_5_loop(I_5, J, M_2) ->
    case (J < erlang:length(M_2)) of
        true ->
            case mochi_not(complex_eq((case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(I_5, M_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(M_2) + I_5 + 1, M_2); _ -> mochi_nth(I_5 + 1, M_2) end end)) of true -> maps:get(J, (case erlang:is_map(M_2) of true -> maps:get(I_5, M_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(M_2) + I_5 + 1, M_2); _ -> mochi_nth(I_5 + 1, M_2) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(I_5, M_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(M_2) + I_5 + 1, M_2); _ -> mochi_nth(I_5 + 1, M_2) end end)) + J + 1, (case erlang:is_map(M_2) of true -> maps:get(I_5, M_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(M_2) + I_5 + 1, M_2); _ -> mochi_nth(I_5 + 1, M_2) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(M_2) of true -> maps:get(I_5, M_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(M_2) + I_5 + 1, M_2); _ -> mochi_nth(I_5 + 1, M_2) end end)) end end), complex_conj((case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(J, M_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(M_2) + J + 1, M_2); _ -> mochi_nth(J + 1, M_2) end end)) of true -> maps:get(I_5, (case erlang:is_map(M_2) of true -> maps:get(J, M_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(M_2) + J + 1, M_2); _ -> mochi_nth(J + 1, M_2) end end), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(J, M_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(M_2) + J + 1, M_2); _ -> mochi_nth(J + 1, M_2) end end)) + I_5 + 1, (case erlang:is_map(M_2) of true -> maps:get(J, M_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(M_2) + J + 1, M_2); _ -> mochi_nth(J + 1, M_2) end end)); _ -> mochi_nth(I_5 + 1, (case erlang:is_map(M_2) of true -> maps:get(J, M_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(M_2) + J + 1, M_2); _ -> mochi_nth(J + 1, M_2) end end)) end end)))) of
        true -> throw({return, false});
        _ -> ok
    end,
            J_2 = (J + 1),
            Fun_5_loop(I_5, J_2, M_2);
        _ -> {I_5, J, M_2}
    end
end,
{I_5, J_2, M_2} = Fun_5(I_5, J, M_2),
            I_6 = (I_5 + 1),
            Fun_6_loop(I_6, M_2);
        _ -> {I_5, M_2}
    end
end,
{I_6, M_2} = Fun_6(I_5, M_2),
        true
    catch {return, RetCatch} -> RetCatch end.

rayleigh_quotient(A_5, V_3) ->
    try
        V_star = conj_vector(V_3),
        V_star_dot = vec_mat_mul(V_star, A_5),
        Num = dot(V_star_dot, V_3),
        Den = dot(V_star, V_3),
        mochi_safe_div(maps:get("re", Num, nil), maps:get("re", Den, nil))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('a', [[#{"re" => 2.0, "im" => 0.0}, #{"re" => 2.0, "im" => 1.0}, #{"re" => 4.0, "im" => 0.0}], [#{"re" => 2.0, "im" => -1.0}, #{"re" => 3.0, "im" => 0.0}, #{"re" => 0.0, "im" => 1.0}], [#{"re" => 4.0, "im" => 0.0}, #{"re" => 0.0, "im" => -1.0}, #{"re" => 1.0, "im" => 0.0}]]),
    erlang:put('v', [#{"re" => 1.0, "im" => 0.0}, #{"re" => 2.0, "im" => 0.0}, #{"re" => 3.0, "im" => 0.0}]),
    case is_hermitian(erlang:get('a')) of
        true -> R1 = rayleigh_quotient(erlang:get('a'), erlang:get('v')),
            io:format("~ts~n", [mochi_repr(R1)]),
            io:format("~ts~n", [mochi_repr("\n")]),
            R1_2 = R1;
        _ -> R1_2 = nil
    end,
    erlang:put('b', [[#{"re" => 1.0, "im" => 0.0}, #{"re" => 2.0, "im" => 0.0}, #{"re" => 4.0, "im" => 0.0}], [#{"re" => 2.0, "im" => 0.0}, #{"re" => 3.0, "im" => 0.0}, #{"re" => -1.0, "im" => 0.0}], [#{"re" => 4.0, "im" => 0.0}, #{"re" => -1.0, "im" => 0.0}, #{"re" => 1.0, "im" => 0.0}]]),
    case is_hermitian(erlang:get('b')) of
        true -> R2 = rayleigh_quotient(erlang:get('b'), erlang:get('v')),
            io:format("~ts~n", [mochi_repr(R2)]),
            R2_2 = R2;
        _ -> R2_2 = nil
    end,
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
