#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, int_to_string/1, float_to_string/2, vector_component/2, vector_str_int/1, vector_str_float/2, vector_add/2, vector_sub/2, vector_scalar_mul/2, vector_dot/2, sqrt_newton/1, euclidean_length/1, zero_vector/1, unit_basis_vector/2, axpy/3, copy_vector/1, change_component/3, matrix_str/1, submatrix/3, determinant/1, matrix_minor/3, matrix_cofactor/3, matrix_mul_vector/2, matrix_mul_scalar/2, matrix_change_component/4, matrix_component/3, matrix_add/2, matrix_sub/2, square_zero_matrix/1, assert_int/3, assert_str/3, assert_float/4]).

% Generated by Mochi transpiler v0.10.65 (63755001db)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

int_to_string(N) ->
    try
        case (N == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Num = N,
        Neg = false,
        case (Num < 0) of
        true -> Neg_2 = true,
            Num_2 = -Num,
            Neg_3 = Neg_2,
            Num_3 = Num_2;
        _ -> Neg_3 = Neg,
            Num_3 = Num
    end,
        Res = "",
        Fun = fun Fun_loop(N, Neg_3, Num_3, Res) ->
    case (Num_3 > 0) of
        true ->
            Digit = mochi_mod(Num_3, 10),
            Ch = string:substr("0123456789", Digit + 1, ((Digit + 1) - Digit)),
            Res_2 = (Ch ++ Res),
            Num_4 = (Num_3 div 10),
            Fun_loop(N, Neg_3, Num_4, Res_2);
        _ -> {N, Neg_3, Num_3, Res}
    end
end,
{N, Neg_3, Num_4, Res_2} = Fun(N, Neg_3, Num_3, Res),
        case Neg_3 of
        true -> Res_3 = ("-" ++ Res_2),
            Res_4 = Res_3;
        _ -> Res_4 = Res_2
    end,
        Res_4
    catch {return, RetCatch} -> RetCatch end.

float_to_string(X, Dec) ->
    try
        Neg_4 = false,
        Num_5 = X,
        case (Num_5 < 0.0) of
        true -> Neg_5 = true,
            Num_6 = -Num_5,
            Neg_6 = Neg_5,
            Num_7 = Num_6;
        _ -> Neg_6 = Neg_4,
            Num_7 = Num_5
    end,
        Int_part = mochi_to_int(Num_7),
        Res_5 = int_to_string(Int_part),
        case (Dec > 0) of
        true -> Res_6 = (Res_5 ++ "."),
            Frac = (Num_7 - float(Int_part)),
            I = 0,
            Fun_2 = fun Fun_2_loop(Dec, Frac, I, Int_part, Neg_6, Num_7, Res_6, X) ->
    case (I < Dec) of
        true ->
            Frac_2 = mochi_safe_mul(Frac, 10.0),
            Digit_2 = mochi_to_int(Frac_2),
            Res_7 = (Res_6 ++ string:substr("0123456789", Digit_2 + 1, ((Digit_2 + 1) - Digit_2))),
            Frac_3 = (Frac_2 - float(Digit_2)),
            I_2 = (I + 1),
            Fun_2_loop(Dec, Frac_3, I_2, Int_part, Neg_6, Num_7, Res_7, X);
        _ -> {Dec, Frac, I, Int_part, Neg_6, Num_7, Res_6, X}
    end
end,
{Dec, Frac_3, I_2, Int_part, Neg_6, Num_7, Res_7, X} = Fun_2(Dec, Frac, I, Int_part, Neg_6, Num_7, Res_6, X),
            Frac_4 = Frac_3,
            Fun_3 = Fun_2,
            I_3 = I_2,
            Res_8 = Res_7;
        _ -> Frac_4 = nil,
            Fun_3 = nil,
            I_3 = nil,
            Res_8 = Res_5
    end,
        case Neg_6 of
        true -> Res_9 = ("-" ++ Res_8),
            Res_10 = Res_9;
        _ -> Res_10 = Res_8
    end,
        Res_10
    catch {return, RetCatch} -> RetCatch end.

vector_component(V, I_4) ->
    try
        (case erlang:is_map(V) of true -> maps:get(I_4, V, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(V) + I_4 + 1, V); _ -> mochi_nth(I_4 + 1, V) end end)
    catch {return, RetCatch} -> RetCatch end.

vector_str_int(V_2) ->
    try
        S = "(",
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, S, V_2) ->
    case (I_5 < erlang:length(V_2)) of
        true ->
            S_2 = (S ++ int_to_string((case erlang:is_map(V_2) of true -> maps:get(I_5, V_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(V_2) + I_5 + 1, V_2); _ -> mochi_nth(I_5 + 1, V_2) end end))),
            case ((I_5 + 1) < erlang:length(V_2)) of
        true -> S_3 = (S_2 ++ ","),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, S_4, V_2);
        _ -> {I_5, S, V_2}
    end
end,
{I_6, S_4, V_2} = Fun_4(I_5, S, V_2),
        S_5 = (S_4 ++ ")"),
        S_5
    catch {return, RetCatch} -> RetCatch end.

vector_str_float(V_3, Dec_2) ->
    try
        S_6 = "(",
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(Dec_2, I_7, S_6, V_3) ->
    case (I_7 < erlang:length(V_3)) of
        true ->
            S_7 = (S_6 ++ float_to_string((case erlang:is_map(V_3) of true -> maps:get(I_7, V_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(V_3) + I_7 + 1, V_3); _ -> mochi_nth(I_7 + 1, V_3) end end), Dec_2)),
            case ((I_7 + 1) < erlang:length(V_3)) of
        true -> S_8 = (S_7 ++ ","),
            S_9 = S_8;
        _ -> S_9 = S_7
    end,
            I_8 = (I_7 + 1),
            Fun_5_loop(Dec_2, I_8, S_9, V_3);
        _ -> {Dec_2, I_7, S_6, V_3}
    end
end,
{Dec_2, I_8, S_9, V_3} = Fun_5(Dec_2, I_7, S_6, V_3),
        S_10 = (S_9 ++ ")"),
        S_10
    catch {return, RetCatch} -> RetCatch end.

vector_add(A, B) ->
    try
        Res_11 = [],
        I_9 = 0,
        Fun_6 = fun Fun_6_loop(A, B, I_9, Res_11) ->
    case (I_9 < erlang:length(A)) of
        true ->
            Res_12 = lists:append((case Res_11 of nil -> []; _ -> Res_11 end), [((case erlang:is_map(A) of true -> maps:get(I_9, A, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A) + I_9 + 1, A); _ -> mochi_nth(I_9 + 1, A) end end) + (case erlang:is_map(B) of true -> maps:get(I_9, B, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(B) + I_9 + 1, B); _ -> mochi_nth(I_9 + 1, B) end end))]),
            I_10 = (I_9 + 1),
            Fun_6_loop(A, B, I_10, Res_12);
        _ -> {A, B, I_9, Res_11}
    end
end,
{A, B, I_10, Res_12} = Fun_6(A, B, I_9, Res_11),
        Res_12
    catch {return, RetCatch} -> RetCatch end.

vector_sub(A_2, B_2) ->
    try
        Res_13 = [],
        I_11 = 0,
        Fun_7 = fun Fun_7_loop(A_2, B_2, I_11, Res_13) ->
    case (I_11 < erlang:length(A_2)) of
        true ->
            Res_14 = lists:append((case Res_13 of nil -> []; _ -> Res_13 end), [((case erlang:is_map(A_2) of true -> maps:get(I_11, A_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(A_2) + I_11 + 1, A_2); _ -> mochi_nth(I_11 + 1, A_2) end end) - (case erlang:is_map(B_2) of true -> maps:get(I_11, B_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(B_2) + I_11 + 1, B_2); _ -> mochi_nth(I_11 + 1, B_2) end end))]),
            I_12 = (I_11 + 1),
            Fun_7_loop(A_2, B_2, I_12, Res_14);
        _ -> {A_2, B_2, I_11, Res_13}
    end
end,
{A_2, B_2, I_12, Res_14} = Fun_7(A_2, B_2, I_11, Res_13),
        Res_14
    catch {return, RetCatch} -> RetCatch end.

vector_scalar_mul(V_4, S_11) ->
    try
        Res_15 = [],
        I_13 = 0,
        Fun_8 = fun Fun_8_loop(I_13, Res_15, S_11, V_4) ->
    case (I_13 < erlang:length(V_4)) of
        true ->
            Res_16 = lists:append((case Res_15 of nil -> []; _ -> Res_15 end), [mochi_safe_mul(float((case erlang:is_map(V_4) of true -> maps:get(I_13, V_4, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(V_4) + I_13 + 1, V_4); _ -> mochi_nth(I_13 + 1, V_4) end end)), S_11)]),
            I_14 = (I_13 + 1),
            Fun_8_loop(I_14, Res_16, S_11, V_4);
        _ -> {I_13, Res_15, S_11, V_4}
    end
end,
{I_14, Res_16, S_11, V_4} = Fun_8(I_13, Res_15, S_11, V_4),
        Res_16
    catch {return, RetCatch} -> RetCatch end.

vector_dot(A_3, B_3) ->
    try
        Sum = 0,
        I_15 = 0,
        Fun_9 = fun Fun_9_loop(A_3, B_3, I_15, Sum) ->
    case (I_15 < erlang:length(A_3)) of
        true ->
            Sum_2 = (Sum + ((case erlang:is_map(A_3) of true -> maps:get(I_15, A_3, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_3) + I_15 + 1, A_3); _ -> mochi_nth(I_15 + 1, A_3) end end) * (case erlang:is_map(B_3) of true -> maps:get(I_15, B_3, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(B_3) + I_15 + 1, B_3); _ -> mochi_nth(I_15 + 1, B_3) end end))),
            I_16 = (I_15 + 1),
            Fun_9_loop(A_3, B_3, I_16, Sum_2);
        _ -> {A_3, B_3, I_15, Sum}
    end
end,
{A_3, B_3, I_16, Sum_2} = Fun_9(A_3, B_3, I_15, Sum),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

sqrt_newton(X_2) ->
    try
        case (X_2 == 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Low = 0.0,
        High = X_2,
        case (X_2 < 1.0) of
        true -> High_2 = 1.0,
            High_3 = High_2;
        _ -> High_3 = High
    end,
        Mid = 0.0,
        I_17 = 0,
        Fun_10 = fun Fun_10_loop(High_3, I_17, Low, Mid, X_2) ->
    case (I_17 < 40) of
        true ->
            Mid_2 = mochi_safe_div((Low + High_3), 2.0),
            case (mochi_safe_mul(Mid_2, Mid_2) > X_2) of
        true -> High_4 = Mid_2,
            High_5 = High_4,
            Low_3 = Low;
        _ -> Low_2 = Mid_2,
            High_5 = High_3,
            Low_3 = Low_2
    end,
            I_18 = (I_17 + 1),
            Fun_10_loop(High_5, I_18, Low_3, Mid_2, X_2);
        _ -> {High_3, I_17, Low, Mid, X_2}
    end
end,
{High_5, I_18, Low_3, Mid_2, X_2} = Fun_10(High_3, I_17, Low, Mid, X_2),
        Mid_2
    catch {return, RetCatch} -> RetCatch end.

euclidean_length(V_5) ->
    try
        Sum_3 = 0.0,
        I_19 = 0,
        Fun_11 = fun Fun_11_loop(I_19, Sum_3, V_5) ->
    case (I_19 < erlang:length(V_5)) of
        true ->
            Val = float((case erlang:is_map(V_5) of true -> maps:get(I_19, V_5, nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(V_5) + I_19 + 1, V_5); _ -> mochi_nth(I_19 + 1, V_5) end end)),
            Sum_4 = (Sum_3 + mochi_safe_mul(Val, Val)),
            I_20 = (I_19 + 1),
            Fun_11_loop(I_20, Sum_4, V_5);
        _ -> {I_19, Sum_3, V_5}
    end
end,
{I_20, Sum_4, V_5} = Fun_11(I_19, Sum_3, V_5),
        sqrt_newton(Sum_4)
    catch {return, RetCatch} -> RetCatch end.

zero_vector(N_2) ->
    try
        V_6 = [],
        I_21 = 0,
        Fun_12 = fun Fun_12_loop(I_21, N_2, V_6) ->
    case (I_21 < N_2) of
        true ->
            V_7 = lists:append((case V_6 of nil -> []; _ -> V_6 end), [0]),
            I_22 = (I_21 + 1),
            Fun_12_loop(I_22, N_2, V_7);
        _ -> {I_21, N_2, V_6}
    end
end,
{I_22, N_2, V_7} = Fun_12(I_21, N_2, V_6),
        V_7
    catch {return, RetCatch} -> RetCatch end.

unit_basis_vector(N_3, Idx) ->
    try
        V_8 = zero_vector(N_3),
        V_9 = lists:sublist(V_8, Idx) ++ [1] ++ lists:nthtail(Idx + 1, V_8),
        V_9
    catch {return, RetCatch} -> RetCatch end.

axpy(A_4, X_3, Y) ->
    try
        Res_17 = [],
        I_23 = 0,
        Fun_13 = fun Fun_13_loop(A_4, I_23, Res_17, X_3, Y) ->
    case (I_23 < erlang:length(X_3)) of
        true ->
            Res_18 = lists:append((case Res_17 of nil -> []; _ -> Res_17 end), [((A_4 * (case erlang:is_map(X_3) of true -> maps:get(I_23, X_3, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(X_3) + I_23 + 1, X_3); _ -> mochi_nth(I_23 + 1, X_3) end end)) + (case erlang:is_map(Y) of true -> maps:get(I_23, Y, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(Y) + I_23 + 1, Y); _ -> mochi_nth(I_23 + 1, Y) end end))]),
            I_24 = (I_23 + 1),
            Fun_13_loop(A_4, I_24, Res_18, X_3, Y);
        _ -> {A_4, I_23, Res_17, X_3, Y}
    end
end,
{A_4, I_24, Res_18, X_3, Y} = Fun_13(A_4, I_23, Res_17, X_3, Y),
        Res_18
    catch {return, RetCatch} -> RetCatch end.

copy_vector(X_4) ->
    try
        Res_19 = [],
        I_25 = 0,
        Fun_14 = fun Fun_14_loop(I_25, Res_19, X_4) ->
    case (I_25 < erlang:length(X_4)) of
        true ->
            Res_20 = lists:append((case Res_19 of nil -> []; _ -> Res_19 end), [(case erlang:is_map(X_4) of true -> maps:get(I_25, X_4, nil); _ -> case I_25 < 0 of true -> mochi_nth(erlang:length(X_4) + I_25 + 1, X_4); _ -> mochi_nth(I_25 + 1, X_4) end end)]),
            I_26 = (I_25 + 1),
            Fun_14_loop(I_26, Res_20, X_4);
        _ -> {I_25, Res_19, X_4}
    end
end,
{I_26, Res_20, X_4} = Fun_14(I_25, Res_19, X_4),
        Res_20
    catch {return, RetCatch} -> RetCatch end.

change_component(V_10, Idx_2, Val_2) ->
    try
        V_11 = lists:sublist(V_10, Idx_2) ++ [Val_2] ++ lists:nthtail(Idx_2 + 1, V_10),
        {nil, V_11}
    catch {return, RetCatch} -> RetCatch end.

matrix_str(M) ->
    try
        S_12 = "",
        I_27 = 0,
        Fun_16 = fun Fun_16_loop(I_27, M, S_12) ->
    case (I_27 < erlang:length(M)) of
        true ->
            S_13 = (S_12 ++ "|"),
            J = 0,
            Fun_15 = fun Fun_15_loop(I_27, J, M, S_13) ->
    case (J < erlang:length((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end))) of
        true ->
            S_14 = (S_13 ++ int_to_string((case erlang:is_map((case erlang:is_map(M) of true -> maps:get(I_27, M, nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(M) + I_27 + 1, M); _ -> mochi_nth(I_27 + 1, M) end end)) of true -> maps:get(J, (case erlang:is_map(M) of true -> maps:get(I_27, M, nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(M) + I_27 + 1, M); _ -> mochi_nth(I_27 + 1, M) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M) of true -> maps:get(I_27, M, nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(M) + I_27 + 1, M); _ -> mochi_nth(I_27 + 1, M) end end)) + J + 1, (case erlang:is_map(M) of true -> maps:get(I_27, M, nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(M) + I_27 + 1, M); _ -> mochi_nth(I_27 + 1, M) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(M) of true -> maps:get(I_27, M, nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(M) + I_27 + 1, M); _ -> mochi_nth(I_27 + 1, M) end end)) end end))),
            case ((J + 1) < erlang:length((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end))) of
        true -> S_15 = (S_14 ++ ","),
            S_16 = S_15;
        _ -> S_16 = S_14
    end,
            J_2 = (J + 1),
            Fun_15_loop(I_27, J_2, M, S_16);
        _ -> {I_27, J, M, S_13}
    end
end,
{I_27, J_2, M, S_16} = Fun_15(I_27, J, M, S_13),
            S_17 = (S_16 ++ "|\n"),
            I_28 = (I_27 + 1),
            Fun_16_loop(I_28, M, S_17);
        _ -> {I_27, M, S_12}
    end
end,
{I_28, M, S_17} = Fun_16(I_27, M, S_12),
        S_17
    catch {return, RetCatch} -> RetCatch end.

submatrix(M_2, Row, Col) ->
    try
        Res_21 = [],
        I_29 = 0,
        Fun_19 = fun Fun_19_loop(Col, I_29, M_2, Res_21, Row) ->
    case (I_29 < erlang:length(M_2)) of
        true ->
            case (I_29 /= Row) of
        true -> R = [],
            J_3 = 0,
            Fun_17 = fun Fun_17_loop(Col, I_29, J_3, M_2, R, Res_21, Row) ->
    case (J_3 < erlang:length((case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end))) of
        true ->
            case (J_3 /= Col) of
        true -> R_2 = lists:append((case R of nil -> []; _ -> R end), [(case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(I_29, M_2, nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(M_2) + I_29 + 1, M_2); _ -> mochi_nth(I_29 + 1, M_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(M_2) of true -> maps:get(I_29, M_2, nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(M_2) + I_29 + 1, M_2); _ -> mochi_nth(I_29 + 1, M_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(I_29, M_2, nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(M_2) + I_29 + 1, M_2); _ -> mochi_nth(I_29 + 1, M_2) end end)) + J_3 + 1, (case erlang:is_map(M_2) of true -> maps:get(I_29, M_2, nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(M_2) + I_29 + 1, M_2); _ -> mochi_nth(I_29 + 1, M_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(M_2) of true -> maps:get(I_29, M_2, nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(M_2) + I_29 + 1, M_2); _ -> mochi_nth(I_29 + 1, M_2) end end)) end end)]),
            R_3 = R_2;
        _ -> R_3 = R
    end,
            J_4 = (J_3 + 1),
            Fun_17_loop(Col, I_29, J_4, M_2, R_3, Res_21, Row);
        _ -> {Col, I_29, J_3, M_2, R, Res_21, Row}
    end
end,
{Col, I_29, J_4, M_2, R_3, Res_21, Row} = Fun_17(Col, I_29, J_3, M_2, R, Res_21, Row),
            Res_22 = lists:append((case Res_21 of nil -> []; _ -> Res_21 end), [R_3]),
            Fun_18 = Fun_17,
            J_5 = J_4,
            R_4 = R_3,
            Res_23 = Res_22;
        _ -> Fun_18 = nil,
            J_5 = nil,
            R_4 = nil,
            Res_23 = Res_21
    end,
            I_30 = (I_29 + 1),
            Fun_19_loop(Col, I_30, M_2, Res_23, Row);
        _ -> {Col, I_29, M_2, Res_21, Row}
    end
end,
{Col, I_30, M_2, Res_23, Row} = Fun_19(Col, I_29, M_2, Res_21, Row),
        Res_23
    catch {return, RetCatch} -> RetCatch end.

determinant(M_3) ->
    try
        N_4 = erlang:length(M_3),
        case (N_4 == 1) of
        true -> throw({return, (case erlang:is_map((case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)) of true -> maps:get(0, (case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)) + 0 + 1, (case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)) end end)});
        _ -> ok
    end,
        case (N_4 == 2) of
        true -> throw({return, (((case erlang:is_map((case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)) of true -> maps:get(0, (case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)) + 0 + 1, (case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)) end end) * (case erlang:is_map((case erlang:is_map(M_3) of true -> maps:get(1, M_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_3) + 1 + 1, M_3); _ -> mochi_nth(1 + 1, M_3) end end)) of true -> maps:get(1, (case erlang:is_map(M_3) of true -> maps:get(1, M_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_3) + 1 + 1, M_3); _ -> mochi_nth(1 + 1, M_3) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_3) of true -> maps:get(1, M_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_3) + 1 + 1, M_3); _ -> mochi_nth(1 + 1, M_3) end end)) + 1 + 1, (case erlang:is_map(M_3) of true -> maps:get(1, M_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_3) + 1 + 1, M_3); _ -> mochi_nth(1 + 1, M_3) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(M_3) of true -> maps:get(1, M_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_3) + 1 + 1, M_3); _ -> mochi_nth(1 + 1, M_3) end end)) end end)) - ((case erlang:is_map((case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)) of true -> maps:get(1, (case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)) + 1 + 1, (case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)) end end) * (case erlang:is_map((case erlang:is_map(M_3) of true -> maps:get(1, M_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_3) + 1 + 1, M_3); _ -> mochi_nth(1 + 1, M_3) end end)) of true -> maps:get(0, (case erlang:is_map(M_3) of true -> maps:get(1, M_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_3) + 1 + 1, M_3); _ -> mochi_nth(1 + 1, M_3) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_3) of true -> maps:get(1, M_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_3) + 1 + 1, M_3); _ -> mochi_nth(1 + 1, M_3) end end)) + 0 + 1, (case erlang:is_map(M_3) of true -> maps:get(1, M_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_3) + 1 + 1, M_3); _ -> mochi_nth(1 + 1, M_3) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(M_3) of true -> maps:get(1, M_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_3) + 1 + 1, M_3); _ -> mochi_nth(1 + 1, M_3) end end)) end end)))});
        _ -> ok
    end,
        Det = 0,
        C = 0,
        Fun_20 = fun Fun_20_loop(C, Det, M_3, N_4) ->
    case (C < N_4) of
        true ->
            Sub = submatrix(M_3, 0, C),
            Sign = 1,
            case (mochi_mod(C, 2) == 1) of
        true -> Sign_2 = -1,
            Sign_3 = Sign_2;
        _ -> Sign_3 = Sign
    end,
            Det_2 = (Det + ((Sign_3 * (case erlang:is_map((case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)) of true -> maps:get(C, (case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end), nil); _ -> case C < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)) + C + 1, (case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)); _ -> mochi_nth(C + 1, (case erlang:is_map(M_3) of true -> maps:get(0, M_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_3) + 0 + 1, M_3); _ -> mochi_nth(0 + 1, M_3) end end)) end end)) * determinant(Sub))),
            C_2 = (C + 1),
            Fun_20_loop(C_2, Det_2, M_3, N_4);
        _ -> {C, Det, M_3, N_4}
    end
end,
{C_2, Det_2, M_3, N_4} = Fun_20(C, Det, M_3, N_4),
        Det_2
    catch {return, RetCatch} -> RetCatch end.

matrix_minor(M_4, Row_2, Col_2) ->
    try
        determinant(submatrix(M_4, Row_2, Col_2))
    catch {return, RetCatch} -> RetCatch end.

matrix_cofactor(M_5, Row_3, Col_3) ->
    try
        Sign_4 = 1,
        case (mochi_mod((Row_3 + Col_3), 2) == 1) of
        true -> Sign_5 = -1,
            Sign_6 = Sign_5;
        _ -> Sign_6 = Sign_4
    end,
        (Sign_6 * matrix_minor(M_5, Row_3, Col_3))
    catch {return, RetCatch} -> RetCatch end.

matrix_mul_vector(M_6, V_12) ->
    try
        Res_24 = [],
        I_31 = 0,
        Fun_22 = fun Fun_22_loop(I_31, M_6, Res_24, V_12) ->
    case (I_31 < erlang:length(M_6)) of
        true ->
            Sum_5 = 0,
            J_6 = 0,
            Fun_21 = fun Fun_21_loop(I_31, J_6, M_6, Res_24, Sum_5, V_12) ->
    case (J_6 < erlang:length((case erlang:is_map(M_6) of true -> maps:get(0, M_6, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_6) + 0 + 1, M_6); _ -> mochi_nth(0 + 1, M_6) end end))) of
        true ->
            Sum_6 = (Sum_5 + ((case erlang:is_map((case erlang:is_map(M_6) of true -> maps:get(I_31, M_6, nil); _ -> case I_31 < 0 of true -> mochi_nth(erlang:length(M_6) + I_31 + 1, M_6); _ -> mochi_nth(I_31 + 1, M_6) end end)) of true -> maps:get(J_6, (case erlang:is_map(M_6) of true -> maps:get(I_31, M_6, nil); _ -> case I_31 < 0 of true -> mochi_nth(erlang:length(M_6) + I_31 + 1, M_6); _ -> mochi_nth(I_31 + 1, M_6) end end), nil); _ -> case J_6 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_6) of true -> maps:get(I_31, M_6, nil); _ -> case I_31 < 0 of true -> mochi_nth(erlang:length(M_6) + I_31 + 1, M_6); _ -> mochi_nth(I_31 + 1, M_6) end end)) + J_6 + 1, (case erlang:is_map(M_6) of true -> maps:get(I_31, M_6, nil); _ -> case I_31 < 0 of true -> mochi_nth(erlang:length(M_6) + I_31 + 1, M_6); _ -> mochi_nth(I_31 + 1, M_6) end end)); _ -> mochi_nth(J_6 + 1, (case erlang:is_map(M_6) of true -> maps:get(I_31, M_6, nil); _ -> case I_31 < 0 of true -> mochi_nth(erlang:length(M_6) + I_31 + 1, M_6); _ -> mochi_nth(I_31 + 1, M_6) end end)) end end) * (case erlang:is_map(V_12) of true -> maps:get(J_6, V_12, nil); _ -> case J_6 < 0 of true -> mochi_nth(erlang:length(V_12) + J_6 + 1, V_12); _ -> mochi_nth(J_6 + 1, V_12) end end))),
            J_7 = (J_6 + 1),
            Fun_21_loop(I_31, J_7, M_6, Res_24, Sum_6, V_12);
        _ -> {I_31, J_6, M_6, Res_24, Sum_5, V_12}
    end
end,
{I_31, J_7, M_6, Res_24, Sum_6, V_12} = Fun_21(I_31, J_6, M_6, Res_24, Sum_5, V_12),
            Res_25 = lists:append((case Res_24 of nil -> []; _ -> Res_24 end), [Sum_6]),
            I_32 = (I_31 + 1),
            Fun_22_loop(I_32, M_6, Res_25, V_12);
        _ -> {I_31, M_6, Res_24, V_12}
    end
end,
{I_32, M_6, Res_25, V_12} = Fun_22(I_31, M_6, Res_24, V_12),
        Res_25
    catch {return, RetCatch} -> RetCatch end.

matrix_mul_scalar(M_7, S_18) ->
    try
        Res_26 = [],
        I_33 = 0,
        Fun_24 = fun Fun_24_loop(I_33, M_7, Res_26, S_18) ->
    case (I_33 < erlang:length(M_7)) of
        true ->
            Row_4 = [],
            J_8 = 0,
            Fun_23 = fun Fun_23_loop(I_33, J_8, M_7, Res_26, Row_4, S_18) ->
    case (J_8 < erlang:length((case erlang:is_map(M_7) of true -> maps:get(0, M_7, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_7) + 0 + 1, M_7); _ -> mochi_nth(0 + 1, M_7) end end))) of
        true ->
            Row_5 = lists:append((case Row_4 of nil -> []; _ -> Row_4 end), [((case erlang:is_map((case erlang:is_map(M_7) of true -> maps:get(I_33, M_7, nil); _ -> case I_33 < 0 of true -> mochi_nth(erlang:length(M_7) + I_33 + 1, M_7); _ -> mochi_nth(I_33 + 1, M_7) end end)) of true -> maps:get(J_8, (case erlang:is_map(M_7) of true -> maps:get(I_33, M_7, nil); _ -> case I_33 < 0 of true -> mochi_nth(erlang:length(M_7) + I_33 + 1, M_7); _ -> mochi_nth(I_33 + 1, M_7) end end), nil); _ -> case J_8 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_7) of true -> maps:get(I_33, M_7, nil); _ -> case I_33 < 0 of true -> mochi_nth(erlang:length(M_7) + I_33 + 1, M_7); _ -> mochi_nth(I_33 + 1, M_7) end end)) + J_8 + 1, (case erlang:is_map(M_7) of true -> maps:get(I_33, M_7, nil); _ -> case I_33 < 0 of true -> mochi_nth(erlang:length(M_7) + I_33 + 1, M_7); _ -> mochi_nth(I_33 + 1, M_7) end end)); _ -> mochi_nth(J_8 + 1, (case erlang:is_map(M_7) of true -> maps:get(I_33, M_7, nil); _ -> case I_33 < 0 of true -> mochi_nth(erlang:length(M_7) + I_33 + 1, M_7); _ -> mochi_nth(I_33 + 1, M_7) end end)) end end) * S_18)]),
            J_9 = (J_8 + 1),
            Fun_23_loop(I_33, J_9, M_7, Res_26, Row_5, S_18);
        _ -> {I_33, J_8, M_7, Res_26, Row_4, S_18}
    end
end,
{I_33, J_9, M_7, Res_26, Row_5, S_18} = Fun_23(I_33, J_8, M_7, Res_26, Row_4, S_18),
            Res_27 = lists:append((case Res_26 of nil -> []; _ -> Res_26 end), [Row_5]),
            I_34 = (I_33 + 1),
            Fun_24_loop(I_34, M_7, Res_27, S_18);
        _ -> {I_33, M_7, Res_26, S_18}
    end
end,
{I_34, M_7, Res_27, S_18} = Fun_24(I_33, M_7, Res_26, S_18),
        Res_27
    catch {return, RetCatch} -> RetCatch end.

matrix_change_component(M_8, I_35, J_10, Val_3) ->
    try
        M_9 = lists:sublist(M_8, I_35) ++ [lists:sublist(lists:nth(I_35 + 1, M_8), J_10) ++ [Val_3] ++ lists:nthtail(J_10 + 1, lists:nth(I_35 + 1, M_8))] ++ lists:nthtail(I_35 + 1, M_8),
        {nil, M_9}
    catch {return, RetCatch} -> RetCatch end.

matrix_component(M_10, I_36, J_11) ->
    try
        (case erlang:is_map((case erlang:is_map(M_10) of true -> maps:get(I_36, M_10, nil); _ -> case I_36 < 0 of true -> mochi_nth(erlang:length(M_10) + I_36 + 1, M_10); _ -> mochi_nth(I_36 + 1, M_10) end end)) of true -> maps:get(J_11, (case erlang:is_map(M_10) of true -> maps:get(I_36, M_10, nil); _ -> case I_36 < 0 of true -> mochi_nth(erlang:length(M_10) + I_36 + 1, M_10); _ -> mochi_nth(I_36 + 1, M_10) end end), nil); _ -> case J_11 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_10) of true -> maps:get(I_36, M_10, nil); _ -> case I_36 < 0 of true -> mochi_nth(erlang:length(M_10) + I_36 + 1, M_10); _ -> mochi_nth(I_36 + 1, M_10) end end)) + J_11 + 1, (case erlang:is_map(M_10) of true -> maps:get(I_36, M_10, nil); _ -> case I_36 < 0 of true -> mochi_nth(erlang:length(M_10) + I_36 + 1, M_10); _ -> mochi_nth(I_36 + 1, M_10) end end)); _ -> mochi_nth(J_11 + 1, (case erlang:is_map(M_10) of true -> maps:get(I_36, M_10, nil); _ -> case I_36 < 0 of true -> mochi_nth(erlang:length(M_10) + I_36 + 1, M_10); _ -> mochi_nth(I_36 + 1, M_10) end end)) end end)
    catch {return, RetCatch} -> RetCatch end.

matrix_add(A_5, B_4) ->
    try
        Res_28 = [],
        I_37 = 0,
        Fun_26 = fun Fun_26_loop(A_5, B_4, I_37, Res_28) ->
    case (I_37 < erlang:length(A_5)) of
        true ->
            Row_6 = [],
            J_12 = 0,
            Fun_25 = fun Fun_25_loop(A_5, B_4, I_37, J_12, Res_28, Row_6) ->
    case (J_12 < erlang:length((case erlang:is_map(A_5) of true -> maps:get(0, A_5, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_5) + 0 + 1, A_5); _ -> mochi_nth(0 + 1, A_5) end end))) of
        true ->
            Row_7 = lists:append((case Row_6 of nil -> []; _ -> Row_6 end), [((case erlang:is_map((case erlang:is_map(A_5) of true -> maps:get(I_37, A_5, nil); _ -> case I_37 < 0 of true -> mochi_nth(erlang:length(A_5) + I_37 + 1, A_5); _ -> mochi_nth(I_37 + 1, A_5) end end)) of true -> maps:get(J_12, (case erlang:is_map(A_5) of true -> maps:get(I_37, A_5, nil); _ -> case I_37 < 0 of true -> mochi_nth(erlang:length(A_5) + I_37 + 1, A_5); _ -> mochi_nth(I_37 + 1, A_5) end end), nil); _ -> case J_12 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_5) of true -> maps:get(I_37, A_5, nil); _ -> case I_37 < 0 of true -> mochi_nth(erlang:length(A_5) + I_37 + 1, A_5); _ -> mochi_nth(I_37 + 1, A_5) end end)) + J_12 + 1, (case erlang:is_map(A_5) of true -> maps:get(I_37, A_5, nil); _ -> case I_37 < 0 of true -> mochi_nth(erlang:length(A_5) + I_37 + 1, A_5); _ -> mochi_nth(I_37 + 1, A_5) end end)); _ -> mochi_nth(J_12 + 1, (case erlang:is_map(A_5) of true -> maps:get(I_37, A_5, nil); _ -> case I_37 < 0 of true -> mochi_nth(erlang:length(A_5) + I_37 + 1, A_5); _ -> mochi_nth(I_37 + 1, A_5) end end)) end end) + (case erlang:is_map((case erlang:is_map(B_4) of true -> maps:get(I_37, B_4, nil); _ -> case I_37 < 0 of true -> mochi_nth(erlang:length(B_4) + I_37 + 1, B_4); _ -> mochi_nth(I_37 + 1, B_4) end end)) of true -> maps:get(J_12, (case erlang:is_map(B_4) of true -> maps:get(I_37, B_4, nil); _ -> case I_37 < 0 of true -> mochi_nth(erlang:length(B_4) + I_37 + 1, B_4); _ -> mochi_nth(I_37 + 1, B_4) end end), nil); _ -> case J_12 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B_4) of true -> maps:get(I_37, B_4, nil); _ -> case I_37 < 0 of true -> mochi_nth(erlang:length(B_4) + I_37 + 1, B_4); _ -> mochi_nth(I_37 + 1, B_4) end end)) + J_12 + 1, (case erlang:is_map(B_4) of true -> maps:get(I_37, B_4, nil); _ -> case I_37 < 0 of true -> mochi_nth(erlang:length(B_4) + I_37 + 1, B_4); _ -> mochi_nth(I_37 + 1, B_4) end end)); _ -> mochi_nth(J_12 + 1, (case erlang:is_map(B_4) of true -> maps:get(I_37, B_4, nil); _ -> case I_37 < 0 of true -> mochi_nth(erlang:length(B_4) + I_37 + 1, B_4); _ -> mochi_nth(I_37 + 1, B_4) end end)) end end))]),
            J_13 = (J_12 + 1),
            Fun_25_loop(A_5, B_4, I_37, J_13, Res_28, Row_7);
        _ -> {A_5, B_4, I_37, J_12, Res_28, Row_6}
    end
end,
{A_5, B_4, I_37, J_13, Res_28, Row_7} = Fun_25(A_5, B_4, I_37, J_12, Res_28, Row_6),
            Res_29 = lists:append((case Res_28 of nil -> []; _ -> Res_28 end), [Row_7]),
            I_38 = (I_37 + 1),
            Fun_26_loop(A_5, B_4, I_38, Res_29);
        _ -> {A_5, B_4, I_37, Res_28}
    end
end,
{A_5, B_4, I_38, Res_29} = Fun_26(A_5, B_4, I_37, Res_28),
        Res_29
    catch {return, RetCatch} -> RetCatch end.

matrix_sub(A_6, B_5) ->
    try
        Res_30 = [],
        I_39 = 0,
        Fun_28 = fun Fun_28_loop(A_6, B_5, I_39, Res_30) ->
    case (I_39 < erlang:length(A_6)) of
        true ->
            Row_8 = [],
            J_14 = 0,
            Fun_27 = fun Fun_27_loop(A_6, B_5, I_39, J_14, Res_30, Row_8) ->
    case (J_14 < erlang:length((case erlang:is_map(A_6) of true -> maps:get(0, A_6, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_6) + 0 + 1, A_6); _ -> mochi_nth(0 + 1, A_6) end end))) of
        true ->
            Row_9 = lists:append((case Row_8 of nil -> []; _ -> Row_8 end), [((case erlang:is_map((case erlang:is_map(A_6) of true -> maps:get(I_39, A_6, nil); _ -> case I_39 < 0 of true -> mochi_nth(erlang:length(A_6) + I_39 + 1, A_6); _ -> mochi_nth(I_39 + 1, A_6) end end)) of true -> maps:get(J_14, (case erlang:is_map(A_6) of true -> maps:get(I_39, A_6, nil); _ -> case I_39 < 0 of true -> mochi_nth(erlang:length(A_6) + I_39 + 1, A_6); _ -> mochi_nth(I_39 + 1, A_6) end end), nil); _ -> case J_14 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_6) of true -> maps:get(I_39, A_6, nil); _ -> case I_39 < 0 of true -> mochi_nth(erlang:length(A_6) + I_39 + 1, A_6); _ -> mochi_nth(I_39 + 1, A_6) end end)) + J_14 + 1, (case erlang:is_map(A_6) of true -> maps:get(I_39, A_6, nil); _ -> case I_39 < 0 of true -> mochi_nth(erlang:length(A_6) + I_39 + 1, A_6); _ -> mochi_nth(I_39 + 1, A_6) end end)); _ -> mochi_nth(J_14 + 1, (case erlang:is_map(A_6) of true -> maps:get(I_39, A_6, nil); _ -> case I_39 < 0 of true -> mochi_nth(erlang:length(A_6) + I_39 + 1, A_6); _ -> mochi_nth(I_39 + 1, A_6) end end)) end end) - (case erlang:is_map((case erlang:is_map(B_5) of true -> maps:get(I_39, B_5, nil); _ -> case I_39 < 0 of true -> mochi_nth(erlang:length(B_5) + I_39 + 1, B_5); _ -> mochi_nth(I_39 + 1, B_5) end end)) of true -> maps:get(J_14, (case erlang:is_map(B_5) of true -> maps:get(I_39, B_5, nil); _ -> case I_39 < 0 of true -> mochi_nth(erlang:length(B_5) + I_39 + 1, B_5); _ -> mochi_nth(I_39 + 1, B_5) end end), nil); _ -> case J_14 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B_5) of true -> maps:get(I_39, B_5, nil); _ -> case I_39 < 0 of true -> mochi_nth(erlang:length(B_5) + I_39 + 1, B_5); _ -> mochi_nth(I_39 + 1, B_5) end end)) + J_14 + 1, (case erlang:is_map(B_5) of true -> maps:get(I_39, B_5, nil); _ -> case I_39 < 0 of true -> mochi_nth(erlang:length(B_5) + I_39 + 1, B_5); _ -> mochi_nth(I_39 + 1, B_5) end end)); _ -> mochi_nth(J_14 + 1, (case erlang:is_map(B_5) of true -> maps:get(I_39, B_5, nil); _ -> case I_39 < 0 of true -> mochi_nth(erlang:length(B_5) + I_39 + 1, B_5); _ -> mochi_nth(I_39 + 1, B_5) end end)) end end))]),
            J_15 = (J_14 + 1),
            Fun_27_loop(A_6, B_5, I_39, J_15, Res_30, Row_9);
        _ -> {A_6, B_5, I_39, J_14, Res_30, Row_8}
    end
end,
{A_6, B_5, I_39, J_15, Res_30, Row_9} = Fun_27(A_6, B_5, I_39, J_14, Res_30, Row_8),
            Res_31 = lists:append((case Res_30 of nil -> []; _ -> Res_30 end), [Row_9]),
            I_40 = (I_39 + 1),
            Fun_28_loop(A_6, B_5, I_40, Res_31);
        _ -> {A_6, B_5, I_39, Res_30}
    end
end,
{A_6, B_5, I_40, Res_31} = Fun_28(A_6, B_5, I_39, Res_30),
        Res_31
    catch {return, RetCatch} -> RetCatch end.

square_zero_matrix(N_5) ->
    try
        M_11 = [],
        I_41 = 0,
        Fun_29 = fun Fun_29_loop(I_41, M_11, N_5) ->
    case (I_41 < N_5) of
        true ->
            M_12 = lists:append((case M_11 of nil -> []; _ -> M_11 end), [zero_vector(N_5)]),
            I_42 = (I_41 + 1),
            Fun_29_loop(I_42, M_12, N_5);
        _ -> {I_41, M_11, N_5}
    end
end,
{I_42, M_12, N_5} = Fun_29(I_41, M_11, N_5),
        M_12
    catch {return, RetCatch} -> RetCatch end.

assert_int(Name, Actual, Expected) ->
    try
        case (Actual == Expected) of
        true -> io:format("~ts~n", [mochi_repr((Name ++ " ok"))]);
        _ -> io:format("~ts~n", [mochi_repr(((((Name ++ " fail ") ++ int_to_string(Actual)) ++ " != ") ++ int_to_string(Expected)))])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

assert_str(Name_2, Actual_2, Expected_2) ->
    try
        case (Actual_2 == Expected_2) of
        true -> io:format("~ts~n", [mochi_repr((Name_2 ++ " ok"))]);
        _ -> io:format("~ts~n", [mochi_repr((Name_2 ++ " fail"))]),
            io:format("~ts~n", [mochi_repr(Actual_2)]),
            io:format("~ts~n", [mochi_repr(Expected_2)])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

assert_float(Name_3, Actual_3, Expected_3, Eps) ->
    try
        Diff = (Actual_3 - Expected_3),
        case (Diff < 0.0) of
        true -> Diff_2 = -Diff,
            Diff_3 = Diff_2;
        _ -> Diff_3 = Diff
    end,
        case (Diff_3 =< Eps) of
        true -> io:format("~ts~n", [mochi_repr((Name_3 ++ " ok"))]);
        _ -> io:format("~ts~n", [mochi_repr((Name_3 ++ " fail"))])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('vx', [1, 2, 3]),
    assert_int("component0", vector_component(erlang:get('vx'), 0), 1),
    assert_int("component2", vector_component(erlang:get('vx'), 2), 3),
    erlang:put('vs', [0, 0, 0, 0, 0, 1]),
    assert_str("str_vector", vector_str_int(erlang:get('vs')), "(0,0,0,0,0,1)"),
    erlang:put('vsize', [1, 2, 3, 4]),
    assert_int("size", erlang:length(erlang:get('vsize')), 4),
    erlang:put('va', [1, 2, 3]),
    erlang:put('vb', [1, 1, 1]),
    erlang:put('vsum', vector_add(erlang:get('va'), erlang:get('vb'))),
    assert_int("add0", vector_component(erlang:get('vsum'), 0), 2),
    assert_int("add1", vector_component(erlang:get('vsum'), 1), 3),
    assert_int("add2", vector_component(erlang:get('vsum'), 2), 4),
    erlang:put('vsub', vector_sub(erlang:get('va'), erlang:get('vb'))),
    assert_int("sub0", vector_component(erlang:get('vsub'), 0), 0),
    assert_int("sub1", vector_component(erlang:get('vsub'), 1), 1),
    assert_int("sub2", vector_component(erlang:get('vsub'), 2), 2),
    erlang:put('vmul', vector_scalar_mul(erlang:get('va'), 3.0)),
    assert_str("scalar_mul", vector_str_float(erlang:get('vmul'), 1), "(3.0,6.0,9.0)"),
    assert_int("dot_product", vector_dot([2, -1, 4], [1, -2, -1]), 0),
    erlang:put('zvec', zero_vector(10)),
    erlang:put('zstr', vector_str_int(erlang:get('zvec'))),
    erlang:put('zcount', 0),
    erlang:put('zi', 0),
    Fun_30 = fun Fun_30_loop() ->
    case (erlang:get('zi') < erlang:length(erlang:get('zstr'))) of
        true ->
            case (string:substr(erlang:get('zstr'), erlang:get('zi') + 1, ((erlang:get('zi') + 1) - erlang:get('zi'))) == "0") of
        true -> erlang:put('zcount', (erlang:get('zcount') + 1));
        _ -> ok
    end,
            erlang:put('zi', (erlang:get('zi') + 1)),
            Fun_30_loop();
        _ -> {}
    end
end,
{} = Fun_30(),
    assert_int("zero_vector", erlang:get('zcount'), 10),
    assert_str("unit_basis", vector_str_int(unit_basis_vector(3, 1)), "(0,1,0)"),
    assert_str("axpy", vector_str_int(axpy(2, [1, 2, 3], [1, 0, 1])), "(3,4,7)"),
    erlang:put('vcopy', copy_vector([1, 0, 0, 0, 0, 0])),
    assert_str("copy", vector_str_int(erlang:get('vcopy')), "(1,0,0,0,0,0)"),
    erlang:put('vchange', [1, 0, 0]),
    {_, Vchange} = change_component(erlang:get('vchange'), 0, 0),
    erlang:put('vchange', Vchange),
    {_, Vchange_2} = change_component(erlang:get('vchange'), 1, 1),
    erlang:put('vchange', Vchange_2),
    assert_str("change_component", vector_str_int(erlang:get('vchange')), "(0,1,0)"),
    erlang:put('ma', [[1, 2, 3], [2, 4, 5], [6, 7, 8]]),
    assert_str("matrix_str", matrix_str(erlang:get('ma')), "|1,2,3|\n|2,4,5|\n|6,7,8|\n"),
    assert_int("determinant", determinant(erlang:get('ma')), -5),
    erlang:put('mb', [[1, 2, 3], [4, 5, 6], [7, 8, 9]]),
    erlang:put('mv', matrix_mul_vector(erlang:get('mb'), [1, 2, 3])),
    assert_str("matrix_vec_mul", vector_str_int(erlang:get('mv')), "(14,32,50)"),
    erlang:put('msc', matrix_mul_scalar(erlang:get('mb'), 2)),
    assert_str("matrix_scalar_mul", matrix_str(erlang:get('msc')), "|2,4,6|\n|8,10,12|\n|14,16,18|\n"),
    erlang:put('mc', [[1, 2, 3], [2, 4, 5], [6, 7, 8]]),
    {_, Mc} = matrix_change_component(erlang:get('mc'), 0, 2, 5),
    erlang:put('mc', Mc),
    assert_str("change_component_matrix", matrix_str(erlang:get('mc')), "|1,2,5|\n|2,4,5|\n|6,7,8|\n"),
    assert_int("matrix_component", matrix_component(erlang:get('mc'), 2, 1), 7),
    erlang:put('madd', matrix_add([[1, 2, 3], [2, 4, 5], [6, 7, 8]], [[1, 2, 7], [2, 4, 5], [6, 7, 10]])),
    assert_str("matrix_add", matrix_str(erlang:get('madd')), "|2,4,10|\n|4,8,10|\n|12,14,18|\n"),
    erlang:put('msub', matrix_sub([[1, 2, 3], [2, 4, 5], [6, 7, 8]], [[1, 2, 7], [2, 4, 5], [6, 7, 10]])),
    assert_str("matrix_sub", matrix_str(erlang:get('msub')), "|0,0,-4|\n|0,0,0|\n|0,0,-2|\n"),
    erlang:put('mzero', square_zero_matrix(5)),
    assert_str("square_zero_matrix", matrix_str(erlang:get('mzero')), "|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n|0,0,0,0,0|\n"),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
