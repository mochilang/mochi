#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rank_of_matrix/1]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

rank_of_matrix(Matrix) ->
    try
        Rows = erlang:length(Matrix),
        case (Rows == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Columns = (case (erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) > 0) of
    true -> erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end));
    _ -> 0
end),
        Rank = (case (Rows < Columns) of
    true -> Rows;
    _ -> Columns
end),
        Row = 0,
        Fun_7 = fun Fun_7_loop(Columns, Matrix, Rank, Row, Rows) ->
    case (Row < Rank) of
        true ->
            try
                case ((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end)) of true -> maps:get(Row, (case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end), nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end)) + Row + 1, (case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end)); _ -> mochi_nth(Row + 1, (case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end)) end end) /= 0.0) of
        true -> Col = (Row + 1),
            Fun_2 = fun Fun_2_loop(Col, Columns, Matrix, Rank, Row, Rows) ->
    case (Col < Rows) of
        true ->
            Mult = mochi_safe_div((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(Col, Matrix, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Matrix) + Col + 1, Matrix); _ -> mochi_nth(Col + 1, Matrix) end end)) of true -> maps:get(Row, (case erlang:is_map(Matrix) of true -> maps:get(Col, Matrix, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Matrix) + Col + 1, Matrix); _ -> mochi_nth(Col + 1, Matrix) end end), nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(Col, Matrix, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Matrix) + Col + 1, Matrix); _ -> mochi_nth(Col + 1, Matrix) end end)) + Row + 1, (case erlang:is_map(Matrix) of true -> maps:get(Col, Matrix, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Matrix) + Col + 1, Matrix); _ -> mochi_nth(Col + 1, Matrix) end end)); _ -> mochi_nth(Row + 1, (case erlang:is_map(Matrix) of true -> maps:get(Col, Matrix, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Matrix) + Col + 1, Matrix); _ -> mochi_nth(Col + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end)) of true -> maps:get(Row, (case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end), nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end)) + Row + 1, (case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end)); _ -> mochi_nth(Row + 1, (case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end)) end end)),
            I = Row,
            Fun = fun Fun_loop(Col, Columns, I, Matrix, Mult, Rank, Row, Rows) ->
    case (I < Columns) of
        true ->
            Matrix_2 = lists:sublist(Matrix, Col) ++ [lists:sublist(lists:nth(Col + 1, Matrix), I) ++ [((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(Col, Matrix, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Matrix) + Col + 1, Matrix); _ -> mochi_nth(Col + 1, Matrix) end end)) of true -> maps:get(I, (case erlang:is_map(Matrix) of true -> maps:get(Col, Matrix, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Matrix) + Col + 1, Matrix); _ -> mochi_nth(Col + 1, Matrix) end end), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(Col, Matrix, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Matrix) + Col + 1, Matrix); _ -> mochi_nth(Col + 1, Matrix) end end)) + I + 1, (case erlang:is_map(Matrix) of true -> maps:get(Col, Matrix, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Matrix) + Col + 1, Matrix); _ -> mochi_nth(Col + 1, Matrix) end end)); _ -> mochi_nth(I + 1, (case erlang:is_map(Matrix) of true -> maps:get(Col, Matrix, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Matrix) + Col + 1, Matrix); _ -> mochi_nth(Col + 1, Matrix) end end)) end end) - mochi_safe_mul(Mult, (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end)) of true -> maps:get(I, (case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end)) + I + 1, (case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end)); _ -> mochi_nth(I + 1, (case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end)) end end)))] ++ lists:nthtail(I + 1, lists:nth(Col + 1, Matrix))] ++ lists:nthtail(Col + 1, Matrix),
            I_2 = (I + 1),
            Fun_loop(Col, Columns, I_2, Matrix_2, Mult, Rank, Row, Rows);
        _ -> {Col, Columns, I, Matrix, Mult, Rank, Row, Rows}
    end
end,
{Col, Columns, I_2, Matrix_2, Mult, Rank, Row, Rows} = Fun(Col, Columns, I, Matrix, Mult, Rank, Row, Rows),
            Col_2 = (Col + 1),
            Fun_2_loop(Col_2, Columns, Matrix_2, Rank, Row, Rows);
        _ -> {Col, Columns, Matrix, Rank, Row, Rows}
    end
end,
{Col_2, Columns, Matrix_2, Rank, Row, Rows} = Fun_2(Col, Columns, Matrix, Rank, Row, Rows),
            Col_3 = Col_2,
            Fun_6 = Fun_2,
            I_5 = nil,
            J_4 = nil,
            Matrix_8 = Matrix_2,
            Rank_4 = Rank,
            Reduce_4 = nil,
            Row_3 = Row;
        _ -> Reduce = true,
            I_3 = (Row + 1),
            Fun_3 = fun Fun_3_loop(Columns, I_3, Matrix, Rank, Reduce, Row, Rows) ->
    case (I_3 < Rows) of
        true ->
            try
                case ((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(I_3, Matrix, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix) + I_3 + 1, Matrix); _ -> mochi_nth(I_3 + 1, Matrix) end end)) of true -> maps:get(Row, (case erlang:is_map(Matrix) of true -> maps:get(I_3, Matrix, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix) + I_3 + 1, Matrix); _ -> mochi_nth(I_3 + 1, Matrix) end end), nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(I_3, Matrix, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix) + I_3 + 1, Matrix); _ -> mochi_nth(I_3 + 1, Matrix) end end)) + Row + 1, (case erlang:is_map(Matrix) of true -> maps:get(I_3, Matrix, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix) + I_3 + 1, Matrix); _ -> mochi_nth(I_3 + 1, Matrix) end end)); _ -> mochi_nth(Row + 1, (case erlang:is_map(Matrix) of true -> maps:get(I_3, Matrix, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix) + I_3 + 1, Matrix); _ -> mochi_nth(I_3 + 1, Matrix) end end)) end end) /= 0.0) of
        true -> Temp = (case erlang:is_map(Matrix) of true -> maps:get(Row, Matrix, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Matrix) + Row + 1, Matrix); _ -> mochi_nth(Row + 1, Matrix) end end),
            Matrix_3 = lists:sublist(Matrix, Row) ++ [(case erlang:is_map(Matrix) of true -> maps:get(I_3, Matrix, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix) + I_3 + 1, Matrix); _ -> mochi_nth(I_3 + 1, Matrix) end end)] ++ lists:nthtail(Row + 1, Matrix),
            Matrix_4 = lists:sublist(Matrix_3, I_3) ++ [Temp] ++ lists:nthtail(I_3 + 1, Matrix_3),
            Reduce_2 = false,
            throw({break, Columns, I_3, Matrix_4, Rank, Reduce_2, Row, Rows}),
            Matrix_5 = Matrix_4,
            Reduce_3 = Reduce_2,
            Temp_2 = Temp;
        _ -> Matrix_5 = Matrix,
            Reduce_3 = Reduce,
            Temp_2 = nil
    end,
                I_4 = (I_3 + 1),
                Fun_3_loop(Columns, I_4, Matrix_5, Rank, Reduce_3, Row, Rows)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {Columns, I_3, Matrix, Rank, Reduce, Row, Rows}
    end
end,
{Columns, I_4, Matrix_5, Rank, Reduce_3, Row, Rows} = Fun_3(Columns, I_3, Matrix, Rank, Reduce, Row, Rows),
            case (Reduce_3 /= nil) of
        true -> Rank_2 = (Rank - 1),
            J = 0,
            Fun_4 = fun Fun_4_loop(Columns, I_4, J, Matrix_5, Rank_2, Reduce_3, Row, Rows) ->
    case (J < Rows) of
        true ->
            Matrix_6 = lists:sublist(Matrix_5, J) ++ [lists:sublist(lists:nth(J + 1, Matrix_5), Row) ++ [(case erlang:is_map((case erlang:is_map(Matrix_5) of true -> maps:get(J, Matrix_5, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Matrix_5) + J + 1, Matrix_5); _ -> mochi_nth(J + 1, Matrix_5) end end)) of true -> maps:get(Rank_2, (case erlang:is_map(Matrix_5) of true -> maps:get(J, Matrix_5, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Matrix_5) + J + 1, Matrix_5); _ -> mochi_nth(J + 1, Matrix_5) end end), nil); _ -> case Rank_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_5) of true -> maps:get(J, Matrix_5, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Matrix_5) + J + 1, Matrix_5); _ -> mochi_nth(J + 1, Matrix_5) end end)) + Rank_2 + 1, (case erlang:is_map(Matrix_5) of true -> maps:get(J, Matrix_5, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Matrix_5) + J + 1, Matrix_5); _ -> mochi_nth(J + 1, Matrix_5) end end)); _ -> mochi_nth(Rank_2 + 1, (case erlang:is_map(Matrix_5) of true -> maps:get(J, Matrix_5, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Matrix_5) + J + 1, Matrix_5); _ -> mochi_nth(J + 1, Matrix_5) end end)) end end)] ++ lists:nthtail(Row + 1, lists:nth(J + 1, Matrix_5))] ++ lists:nthtail(J + 1, Matrix_5),
            J_2 = (J + 1),
            Fun_4_loop(Columns, I_4, J_2, Matrix_6, Rank_2, Reduce_3, Row, Rows);
        _ -> {Columns, I_4, J, Matrix_5, Rank_2, Reduce_3, Row, Rows}
    end
end,
{Columns, I_4, J_2, Matrix_6, Rank_2, Reduce_3, Row, Rows} = Fun_4(Columns, I_4, J, Matrix_5, Rank_2, Reduce_3, Row, Rows),
            Fun_5 = Fun_4,
            J_3 = J_2,
            Matrix_7 = Matrix_6,
            Rank_3 = Rank_2;
        _ -> Fun_5 = Fun_3,
            J_3 = nil,
            Matrix_7 = Matrix_5,
            Rank_3 = Rank
    end,
            Row_2 = (Row - 1),
            Col_3 = nil,
            Fun_6 = Fun_5,
            I_5 = I_4,
            J_4 = J_3,
            Matrix_8 = Matrix_7,
            Rank_4 = Rank_3,
            Reduce_4 = Reduce_3,
            Row_3 = Row_2
    end,
                Row_4 = (Row_3 + 1),
                Fun_7_loop(Columns, Matrix_8, Rank_4, Row_4, Rows)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_7_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Columns, Matrix, Rank, Row, Rows}
    end
end,
{Columns, Matrix_8, Rank_4, Row_4, Rows} = Fun_7(Columns, Matrix, Rank, Row, Rows),
        Rank_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
