#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, identity/1, transpose/1, matmul/2, mat_sub/2, inverse/1, schur_complement/4, print_matrix/1, main/0]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

identity(N) ->
    try
        Mat = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Mat, N) ->
    case (I < N) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(I, J, Mat, N, Row) ->
    case (J < N) of
        true ->
            case (I == J) of
        true -> Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [1.0]),
            Row_4 = Row_2;
        _ -> Row_3 = lists:append((case Row of nil -> []; _ -> Row end), [0.0]),
            Row_4 = Row_3
    end,
            J_2 = (J + 1),
            Fun_loop(I, J_2, Mat, N, Row_4);
        _ -> {I, J, Mat, N, Row}
    end
end,
{I, J_2, Mat, N, Row_4} = Fun(I, J, Mat, N, Row),
            Mat_2 = lists:append((case Mat of nil -> []; _ -> Mat end), [Row_4]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Mat_2, N);
        _ -> {I, Mat, N}
    end
end,
{I_2, Mat_2, N} = Fun_2(I, Mat, N),
        Mat_2
    catch {return, RetCatch} -> RetCatch end.

transpose(Mat_3) ->
    try
        Rows = erlang:length(Mat_3),
        Cols = erlang:length((case erlang:is_map(Mat_3) of true -> maps:get(0, Mat_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Mat_3) + 0 + 1, Mat_3); _ -> mochi_nth(0 + 1, Mat_3) end end)),
        Res = [],
        J_3 = 0,
        Fun_4 = fun Fun_4_loop(Cols, J_3, Mat_3, Res, Rows) ->
    case (J_3 < Cols) of
        true ->
            Row_5 = [],
            I_3 = 0,
            Fun_3 = fun Fun_3_loop(Cols, I_3, J_3, Mat_3, Res, Row_5, Rows) ->
    case (I_3 < Rows) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [(case erlang:is_map((case erlang:is_map(Mat_3) of true -> maps:get(I_3, Mat_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat_3) + I_3 + 1, Mat_3); _ -> mochi_nth(I_3 + 1, Mat_3) end end)) of true -> maps:get(J_3, (case erlang:is_map(Mat_3) of true -> maps:get(I_3, Mat_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat_3) + I_3 + 1, Mat_3); _ -> mochi_nth(I_3 + 1, Mat_3) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat_3) of true -> maps:get(I_3, Mat_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat_3) + I_3 + 1, Mat_3); _ -> mochi_nth(I_3 + 1, Mat_3) end end)) + J_3 + 1, (case erlang:is_map(Mat_3) of true -> maps:get(I_3, Mat_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat_3) + I_3 + 1, Mat_3); _ -> mochi_nth(I_3 + 1, Mat_3) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Mat_3) of true -> maps:get(I_3, Mat_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat_3) + I_3 + 1, Mat_3); _ -> mochi_nth(I_3 + 1, Mat_3) end end)) end end)]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Cols, I_4, J_3, Mat_3, Res, Row_6, Rows);
        _ -> {Cols, I_3, J_3, Mat_3, Res, Row_5, Rows}
    end
end,
{Cols, I_4, J_3, Mat_3, Res, Row_6, Rows} = Fun_3(Cols, I_3, J_3, Mat_3, Res, Row_5, Rows),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Row_6]),
            J_4 = (J_3 + 1),
            Fun_4_loop(Cols, J_4, Mat_3, Res_2, Rows);
        _ -> {Cols, J_3, Mat_3, Res, Rows}
    end
end,
{Cols, J_4, Mat_3, Res_2, Rows} = Fun_4(Cols, J_3, Mat_3, Res, Rows),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

matmul(A, B) ->
    try
        Rows_2 = erlang:length(A),
        Cols_2 = erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)),
        Inner = erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)),
        Res_3 = [],
        I_5 = 0,
        Fun_7 = fun Fun_7_loop(A, B, Cols_2, I_5, Inner, Res_3, Rows_2) ->
    case (I_5 < Rows_2) of
        true ->
            Row_7 = [],
            J_5 = 0,
            Fun_6 = fun Fun_6_loop(A, B, Cols_2, I_5, Inner, J_5, Res_3, Row_7, Rows_2) ->
    case (J_5 < Cols_2) of
        true ->
            Sum = 0.0,
            K = 0,
            Fun_5 = fun Fun_5_loop(A, B, Cols_2, I_5, Inner, J_5, K, Res_3, Row_7, Rows_2, Sum) ->
    case (K < Inner) of
        true ->
            Sum_2 = (Sum + mochi_safe_mul((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end)) of true -> maps:get(K, (case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end)) + K + 1, (case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end)) end end), (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) of true -> maps:get(J_5, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) + J_5 + 1, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) end end))),
            K_2 = (K + 1),
            Fun_5_loop(A, B, Cols_2, I_5, Inner, J_5, K_2, Res_3, Row_7, Rows_2, Sum_2);
        _ -> {A, B, Cols_2, I_5, Inner, J_5, K, Res_3, Row_7, Rows_2, Sum}
    end
end,
{A, B, Cols_2, I_5, Inner, J_5, K_2, Res_3, Row_7, Rows_2, Sum_2} = Fun_5(A, B, Cols_2, I_5, Inner, J_5, K, Res_3, Row_7, Rows_2, Sum),
            Row_8 = lists:append((case Row_7 of nil -> []; _ -> Row_7 end), [Sum_2]),
            J_6 = (J_5 + 1),
            Fun_6_loop(A, B, Cols_2, I_5, Inner, J_6, Res_3, Row_8, Rows_2);
        _ -> {A, B, Cols_2, I_5, Inner, J_5, Res_3, Row_7, Rows_2}
    end
end,
{A, B, Cols_2, I_5, Inner, J_6, Res_3, Row_8, Rows_2} = Fun_6(A, B, Cols_2, I_5, Inner, J_5, Res_3, Row_7, Rows_2),
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Row_8]),
            I_6 = (I_5 + 1),
            Fun_7_loop(A, B, Cols_2, I_6, Inner, Res_4, Rows_2);
        _ -> {A, B, Cols_2, I_5, Inner, Res_3, Rows_2}
    end
end,
{A, B, Cols_2, I_6, Inner, Res_4, Rows_2} = Fun_7(A, B, Cols_2, I_5, Inner, Res_3, Rows_2),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

mat_sub(A_2, B_2) ->
    try
        Rows_3 = erlang:length(A_2),
        Cols_3 = erlang:length((case erlang:is_map(A_2) of true -> maps:get(0, A_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_2) + 0 + 1, A_2); _ -> mochi_nth(0 + 1, A_2) end end)),
        Res_5 = [],
        I_7 = 0,
        Fun_9 = fun Fun_9_loop(A_2, B_2, Cols_3, I_7, Res_5, Rows_3) ->
    case (I_7 < Rows_3) of
        true ->
            Row_9 = [],
            J_7 = 0,
            Fun_8 = fun Fun_8_loop(A_2, B_2, Cols_3, I_7, J_7, Res_5, Row_9, Rows_3) ->
    case (J_7 < Cols_3) of
        true ->
            Row_10 = lists:append((case Row_9 of nil -> []; _ -> Row_9 end), [((case erlang:is_map((case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end)) of true -> maps:get(J_7, (case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end), nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end)) + J_7 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end)); _ -> mochi_nth(J_7 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end)) end end) - (case erlang:is_map((case erlang:is_map(B_2) of true -> maps:get(I_7, B_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B_2) + I_7 + 1, B_2); _ -> mochi_nth(I_7 + 1, B_2) end end)) of true -> maps:get(J_7, (case erlang:is_map(B_2) of true -> maps:get(I_7, B_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B_2) + I_7 + 1, B_2); _ -> mochi_nth(I_7 + 1, B_2) end end), nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B_2) of true -> maps:get(I_7, B_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B_2) + I_7 + 1, B_2); _ -> mochi_nth(I_7 + 1, B_2) end end)) + J_7 + 1, (case erlang:is_map(B_2) of true -> maps:get(I_7, B_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B_2) + I_7 + 1, B_2); _ -> mochi_nth(I_7 + 1, B_2) end end)); _ -> mochi_nth(J_7 + 1, (case erlang:is_map(B_2) of true -> maps:get(I_7, B_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B_2) + I_7 + 1, B_2); _ -> mochi_nth(I_7 + 1, B_2) end end)) end end))]),
            J_8 = (J_7 + 1),
            Fun_8_loop(A_2, B_2, Cols_3, I_7, J_8, Res_5, Row_10, Rows_3);
        _ -> {A_2, B_2, Cols_3, I_7, J_7, Res_5, Row_9, Rows_3}
    end
end,
{A_2, B_2, Cols_3, I_7, J_8, Res_5, Row_10, Rows_3} = Fun_8(A_2, B_2, Cols_3, I_7, J_7, Res_5, Row_9, Rows_3),
            Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [Row_10]),
            I_8 = (I_7 + 1),
            Fun_9_loop(A_2, B_2, Cols_3, I_8, Res_6, Rows_3);
        _ -> {A_2, B_2, Cols_3, I_7, Res_5, Rows_3}
    end
end,
{A_2, B_2, Cols_3, I_8, Res_6, Rows_3} = Fun_9(A_2, B_2, Cols_3, I_7, Res_5, Rows_3),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

inverse(Mat_4) ->
    try
        N_2 = erlang:length(Mat_4),
        Id = identity(N_2),
        Aug = [],
        I_9 = 0,
        Fun_10 = fun Fun_10_loop(Aug, I_9, Id, Mat_4, N_2) ->
    case (I_9 < N_2) of
        true ->
            Row_11 = lists:append((case erlang:is_map(Mat_4) of true -> maps:get(I_9, Mat_4, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Mat_4) + I_9 + 1, Mat_4); _ -> mochi_nth(I_9 + 1, Mat_4) end end), (case erlang:is_map(Id) of true -> maps:get(I_9, Id, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Id) + I_9 + 1, Id); _ -> mochi_nth(I_9 + 1, Id) end end)),
            Aug_2 = lists:append((case Aug of nil -> []; _ -> Aug end), [Row_11]),
            I_10 = (I_9 + 1),
            Fun_10_loop(Aug_2, I_10, Id, Mat_4, N_2);
        _ -> {Aug, I_9, Id, Mat_4, N_2}
    end
end,
{Aug_2, I_10, Id, Mat_4, N_2} = Fun_10(Aug, I_9, Id, Mat_4, N_2),
        Col = 0,
        Fun_15 = fun Fun_15_loop(Aug_2, Col, I_10, Id, Mat_4, N_2) ->
    case (Col < N_2) of
        true ->
            Pivot_row = (case erlang:is_map(Aug_2) of true -> maps:get(Col, Aug_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_2) + Col + 1, Aug_2); _ -> mochi_nth(Col + 1, Aug_2) end end),
            Pivot = (case erlang:is_map(Pivot_row) of true -> maps:get(Col, Pivot_row, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Pivot_row) + Col + 1, Pivot_row); _ -> mochi_nth(Col + 1, Pivot_row) end end),
            case (Pivot == 0.0) of
        true -> erlang:error({panic, "matrix is singular"});
        _ -> ok
    end,
            J_9 = 0,
            Fun_11 = fun Fun_11_loop(Aug_2, Col, I_10, Id, J_9, Mat_4, N_2, Pivot, Pivot_row) ->
    case (J_9 < (2 * N_2)) of
        true ->
            Pivot_row_2 = lists:sublist(Pivot_row, J_9) ++ [mochi_safe_div((case erlang:is_map(Pivot_row) of true -> maps:get(J_9, Pivot_row, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(Pivot_row) + J_9 + 1, Pivot_row); _ -> mochi_nth(J_9 + 1, Pivot_row) end end), Pivot)] ++ lists:nthtail(J_9 + 1, Pivot_row),
            J_10 = (J_9 + 1),
            Fun_11_loop(Aug_2, Col, I_10, Id, J_10, Mat_4, N_2, Pivot, Pivot_row_2);
        _ -> {Aug_2, Col, I_10, Id, J_9, Mat_4, N_2, Pivot, Pivot_row}
    end
end,
{Aug_2, Col, I_10, Id, J_10, Mat_4, N_2, Pivot, Pivot_row_2} = Fun_11(Aug_2, Col, I_10, Id, J_9, Mat_4, N_2, Pivot, Pivot_row),
            Aug_3 = lists:sublist(Aug_2, Col) ++ [Pivot_row_2] ++ lists:nthtail(Col + 1, Aug_2),
            R = 0,
            Fun_14 = fun Fun_14_loop(Aug_3, Col, I_10, Id, J_10, Mat_4, N_2, Pivot, Pivot_row_2, R) ->
    case (R < N_2) of
        true ->
            case (R /= Col) of
        true -> Row_r = (case erlang:is_map(Aug_3) of true -> maps:get(R, Aug_3, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_3) + R + 1, Aug_3); _ -> mochi_nth(R + 1, Aug_3) end end),
            Factor = (case erlang:is_map(Row_r) of true -> maps:get(Col, Row_r, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Row_r) + Col + 1, Row_r); _ -> mochi_nth(Col + 1, Row_r) end end),
            J_11 = 0,
            Fun_12 = fun Fun_12_loop(Aug_3, Col, Factor, I_10, Id, J_11, Mat_4, N_2, Pivot, Pivot_row_2, R, Row_r) ->
    case (J_11 < (2 * N_2)) of
        true ->
            Row_r_2 = lists:sublist(Row_r, J_11) ++ [((case erlang:is_map(Row_r) of true -> maps:get(J_11, Row_r, nil); _ -> case J_11 < 0 of true -> mochi_nth(erlang:length(Row_r) + J_11 + 1, Row_r); _ -> mochi_nth(J_11 + 1, Row_r) end end) - mochi_safe_mul(Factor, (case erlang:is_map(Pivot_row_2) of true -> maps:get(J_11, Pivot_row_2, nil); _ -> case J_11 < 0 of true -> mochi_nth(erlang:length(Pivot_row_2) + J_11 + 1, Pivot_row_2); _ -> mochi_nth(J_11 + 1, Pivot_row_2) end end)))] ++ lists:nthtail(J_11 + 1, Row_r),
            J_12 = (J_11 + 1),
            Fun_12_loop(Aug_3, Col, Factor, I_10, Id, J_12, Mat_4, N_2, Pivot, Pivot_row_2, R, Row_r_2);
        _ -> {Aug_3, Col, Factor, I_10, Id, J_11, Mat_4, N_2, Pivot, Pivot_row_2, R, Row_r}
    end
end,
{Aug_3, Col, Factor, I_10, Id, J_12, Mat_4, N_2, Pivot, Pivot_row_2, R, Row_r_2} = Fun_12(Aug_3, Col, Factor, I_10, Id, J_11, Mat_4, N_2, Pivot, Pivot_row_2, R, Row_r),
            Aug_4 = lists:sublist(Aug_3, R) ++ [Row_r_2] ++ lists:nthtail(R + 1, Aug_3),
            Aug_5 = Aug_4,
            Factor_2 = Factor,
            Fun_13 = Fun_12,
            J_13 = J_12,
            Row_r_3 = Row_r_2;
        _ -> Aug_5 = Aug_3,
            Factor_2 = nil,
            Fun_13 = Fun_11,
            J_13 = J_10,
            Row_r_3 = nil
    end,
            R_2 = (R + 1),
            Fun_14_loop(Aug_5, Col, I_10, Id, J_13, Mat_4, N_2, Pivot, Pivot_row_2, R_2);
        _ -> {Aug_3, Col, I_10, Id, J_10, Mat_4, N_2, Pivot, Pivot_row_2, R}
    end
end,
{Aug_5, Col, I_10, Id, J_13, Mat_4, N_2, Pivot, Pivot_row_2, R_2} = Fun_14(Aug_3, Col, I_10, Id, J_10, Mat_4, N_2, Pivot, Pivot_row_2, R),
            Col_2 = (Col + 1),
            Fun_15_loop(Aug_5, Col_2, I_10, Id, Mat_4, N_2);
        _ -> {Aug_2, Col, I_10, Id, Mat_4, N_2}
    end
end,
{Aug_5, Col_2, I_10, Id, Mat_4, N_2} = Fun_15(Aug_2, Col, I_10, Id, Mat_4, N_2),
        Inv = [],
        R_3 = 0,
        Fun_17 = fun Fun_17_loop(Aug_5, Col_2, I_10, Id, Inv, Mat_4, N_2, R_3) ->
    case (R_3 < N_2) of
        true ->
            Row_12 = [],
            C = N_2,
            Fun_16 = fun Fun_16_loop(Aug_5, C, Col_2, I_10, Id, Inv, Mat_4, N_2, R_3, Row_12) ->
    case (C < (2 * N_2)) of
        true ->
            Row_13 = lists:append((case Row_12 of nil -> []; _ -> Row_12 end), [(case erlang:is_map((case erlang:is_map(Aug_5) of true -> maps:get(R_3, Aug_5, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Aug_5) + R_3 + 1, Aug_5); _ -> mochi_nth(R_3 + 1, Aug_5) end end)) of true -> maps:get(C, (case erlang:is_map(Aug_5) of true -> maps:get(R_3, Aug_5, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Aug_5) + R_3 + 1, Aug_5); _ -> mochi_nth(R_3 + 1, Aug_5) end end), nil); _ -> case C < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_5) of true -> maps:get(R_3, Aug_5, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Aug_5) + R_3 + 1, Aug_5); _ -> mochi_nth(R_3 + 1, Aug_5) end end)) + C + 1, (case erlang:is_map(Aug_5) of true -> maps:get(R_3, Aug_5, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Aug_5) + R_3 + 1, Aug_5); _ -> mochi_nth(R_3 + 1, Aug_5) end end)); _ -> mochi_nth(C + 1, (case erlang:is_map(Aug_5) of true -> maps:get(R_3, Aug_5, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Aug_5) + R_3 + 1, Aug_5); _ -> mochi_nth(R_3 + 1, Aug_5) end end)) end end)]),
            C_2 = (C + 1),
            Fun_16_loop(Aug_5, C_2, Col_2, I_10, Id, Inv, Mat_4, N_2, R_3, Row_13);
        _ -> {Aug_5, C, Col_2, I_10, Id, Inv, Mat_4, N_2, R_3, Row_12}
    end
end,
{Aug_5, C_2, Col_2, I_10, Id, Inv, Mat_4, N_2, R_3, Row_13} = Fun_16(Aug_5, C, Col_2, I_10, Id, Inv, Mat_4, N_2, R_3, Row_12),
            Inv_2 = lists:append((case Inv of nil -> []; _ -> Inv end), [Row_13]),
            R_4 = (R_3 + 1),
            Fun_17_loop(Aug_5, Col_2, I_10, Id, Inv_2, Mat_4, N_2, R_4);
        _ -> {Aug_5, Col_2, I_10, Id, Inv, Mat_4, N_2, R_3}
    end
end,
{Aug_5, Col_2, I_10, Id, Inv_2, Mat_4, N_2, R_4} = Fun_17(Aug_5, Col_2, I_10, Id, Inv, Mat_4, N_2, R_3),
        Inv_2
    catch {return, RetCatch} -> RetCatch end.

schur_complement(Mat_a, Mat_b, Mat_c, Pseudo_inv) ->
    try
        A_rows = erlang:length(Mat_a),
        A_cols = erlang:length((case erlang:is_map(Mat_a) of true -> maps:get(0, Mat_a, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Mat_a) + 0 + 1, Mat_a); _ -> mochi_nth(0 + 1, Mat_a) end end)),
        case (A_rows /= A_cols) of
        true -> erlang:error({panic, "Matrix A must be square"});
        _ -> ok
    end,
        case (A_rows /= erlang:length(Mat_b)) of
        true -> erlang:error({panic, "Expected the same number of rows for A and B"});
        _ -> ok
    end,
        case (erlang:length((case erlang:is_map(Mat_b) of true -> maps:get(0, Mat_b, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Mat_b) + 0 + 1, Mat_b); _ -> mochi_nth(0 + 1, Mat_b) end end)) /= erlang:length((case erlang:is_map(Mat_c) of true -> maps:get(0, Mat_c, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Mat_c) + 0 + 1, Mat_c); _ -> mochi_nth(0 + 1, Mat_c) end end))) of
        true -> erlang:error({panic, "Expected the same number of columns for B and C"});
        _ -> ok
    end,
        A_inv = nil,
        case maps:get("ok", Pseudo_inv, nil) of
        true -> A_inv_2 = maps:get("value", Pseudo_inv, nil),
            A_inv_4 = A_inv_2;
        _ -> A_inv_3 = inverse(Mat_a),
            A_inv_4 = A_inv_3
    end,
        Bt = transpose(Mat_b),
        A_inv_b = matmul(A_inv_4, Mat_b),
        Bt_a_inv_b = matmul(Bt, A_inv_b),
        mat_sub(Mat_c, Bt_a_inv_b)
    catch {return, RetCatch} -> RetCatch end.

print_matrix(Mat_5) ->
    try
        I_11 = 0,
        Fun_19 = fun Fun_19_loop(I_11, Mat_5) ->
    case (I_11 < erlang:length(Mat_5)) of
        true ->
            Line = "",
            J_14 = 0,
            Row_14 = (case erlang:is_map(Mat_5) of true -> maps:get(I_11, Mat_5, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_11 + 1, Mat_5); _ -> mochi_nth(I_11 + 1, Mat_5) end end),
            Fun_18 = fun Fun_18_loop(I_11, J_14, Line, Mat_5, Row_14) ->
    case (J_14 < erlang:length(Row_14)) of
        true ->
            Line_2 = (Line ++ mochi_str((case erlang:is_map(Row_14) of true -> maps:get(J_14, Row_14, nil); _ -> case J_14 < 0 of true -> mochi_nth(erlang:length(Row_14) + J_14 + 1, Row_14); _ -> mochi_nth(J_14 + 1, Row_14) end end))),
            case ((J_14 + 1) < erlang:length(Row_14)) of
        true -> Line_3 = (Line_2 ++ " "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            J_15 = (J_14 + 1),
            Fun_18_loop(I_11, J_15, Line_4, Mat_5, Row_14);
        _ -> {I_11, J_14, Line, Mat_5, Row_14}
    end
end,
{I_11, J_15, Line_4, Mat_5, Row_14} = Fun_18(I_11, J_14, Line, Mat_5, Row_14),
            io:format("~ts~n", [mochi_repr(Line_4)]),
            I_12 = (I_11 + 1),
            Fun_19_loop(I_12, Mat_5);
        _ -> {I_11, Mat_5}
    end
end,
{I_12, Mat_5} = Fun_19(I_11, Mat_5),
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        A_3 = [[1.0, 2.0], [2.0, 1.0]],
        B_3 = [[0.0, 3.0], [3.0, 0.0]],
        C_3 = [[2.0, 1.0], [6.0, 3.0]],
        None = #{"value" => [], "ok" => false},
        S = schur_complement(A_3, B_3, C_3, None),
        print_matrix(S),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
