#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, abs/1, sqrtapprox/1, dot/2, mat_vec_mult/2, norm/1, normalize/1, power_iteration/4]).

% Generated by Mochi transpiler v0.10.65 (63755001db)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

abs(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

sqrtapprox(X_2) ->
    try
        case (X_2 == 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = mochi_safe_div(X_2, 2.0),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_2, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

dot(A, B) ->
    try
        Sum = 0.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(A, B, I_3, Sum) ->
    case (I_3 < erlang:length(A)) of
        true ->
            Sum_2 = (Sum + mochi_safe_mul((case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end), (case erlang:is_map(B) of true -> maps:get(I_3, B, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(B) + I_3 + 1, B); _ -> mochi_nth(I_3 + 1, B) end end))),
            I_4 = (I_3 + 1),
            Fun_2_loop(A, B, I_4, Sum_2);
        _ -> {A, B, I_3, Sum}
    end
end,
{A, B, I_4, Sum_2} = Fun_2(A, B, I_3, Sum),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

mat_vec_mult(Mat, Vec) ->
    try
        Res = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Mat, Res, Vec) ->
    case (I_5 < erlang:length(Mat)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [dot((case erlang:is_map(Mat) of true -> maps:get(I_5, Mat, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat) + I_5 + 1, Mat); _ -> mochi_nth(I_5 + 1, Mat) end end), Vec)]),
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Mat, Res_2, Vec);
        _ -> {I_5, Mat, Res, Vec}
    end
end,
{I_6, Mat, Res_2, Vec} = Fun_3(I_5, Mat, Res, Vec),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

norm(Vec_2) ->
    try
        Sum_3 = 0.0,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(I_7, Sum_3, Vec_2) ->
    case (I_7 < erlang:length(Vec_2)) of
        true ->
            Sum_4 = (Sum_3 + mochi_safe_mul((case erlang:is_map(Vec_2) of true -> maps:get(I_7, Vec_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Vec_2) + I_7 + 1, Vec_2); _ -> mochi_nth(I_7 + 1, Vec_2) end end), (case erlang:is_map(Vec_2) of true -> maps:get(I_7, Vec_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Vec_2) + I_7 + 1, Vec_2); _ -> mochi_nth(I_7 + 1, Vec_2) end end))),
            I_8 = (I_7 + 1),
            Fun_4_loop(I_8, Sum_4, Vec_2);
        _ -> {I_7, Sum_3, Vec_2}
    end
end,
{I_8, Sum_4, Vec_2} = Fun_4(I_7, Sum_3, Vec_2),
        Root = sqrtapprox(Sum_4),
        Root
    catch {return, RetCatch} -> RetCatch end.

normalize(Vec_3) ->
    try
        N = norm(Vec_3),
        Res_3 = [],
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(I_9, N, Res_3, Vec_3) ->
    case (I_9 < erlang:length(Vec_3)) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [mochi_safe_div((case erlang:is_map(Vec_3) of true -> maps:get(I_9, Vec_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Vec_3) + I_9 + 1, Vec_3); _ -> mochi_nth(I_9 + 1, Vec_3) end end), N)]),
            I_10 = (I_9 + 1),
            Fun_5_loop(I_10, N, Res_4, Vec_3);
        _ -> {I_9, N, Res_3, Vec_3}
    end
end,
{I_10, N, Res_4, Vec_3} = Fun_5(I_9, N, Res_3, Vec_3),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

power_iteration(Matrix, Vector, Error_tol, Max_iterations) ->
    try
        V = normalize(Vector),
        Lambda_prev = 0.0,
        Lambda = 0.0,
        Err = 1000000000000.0,
        Iterations = 0,
        Fun_6 = fun Fun_6_loop(Err, Error_tol, Iterations, Lambda, Lambda_prev, Matrix, Max_iterations, V, Vector) ->
    case ((Err > Error_tol) andalso (Iterations < Max_iterations)) of
        true ->
            W = mat_vec_mult(Matrix, V),
            V_2 = normalize(W),
            Mv = mat_vec_mult(Matrix, V_2),
            Lambda_2 = dot(V_2, Mv),
            Denom = (case (Lambda_2 /= 0.0) of
    true -> erlang:abs(Lambda_2);
    _ -> 1.0
end),
            Err_2 = mochi_safe_div(erlang:abs((Lambda_2 - Lambda_prev)), Denom),
            Lambda_prev_2 = Lambda_2,
            Iterations_2 = (Iterations + 1),
            Fun_6_loop(Err_2, Error_tol, Iterations_2, Lambda_2, Lambda_prev_2, Matrix, Max_iterations, V_2, Vector);
        _ -> {Err, Error_tol, Iterations, Lambda, Lambda_prev, Matrix, Max_iterations, V, Vector}
    end
end,
{Err_2, Error_tol, Iterations_2, Lambda_2, Lambda_prev_2, Matrix, Max_iterations, V_2, Vector} = Fun_6(Err, Error_tol, Iterations, Lambda, Lambda_prev, Matrix, Max_iterations, V, Vector),
        #{"eigenvalue" => Lambda_2, "eigenvector" => V_2}
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('input_matrix', [[41.0, 4.0, 20.0], [4.0, 26.0, 30.0], [20.0, 30.0, 50.0]]),
    erlang:put('vector', [41.0, 4.0, 20.0]),
    erlang:put('result', power_iteration(erlang:get('input_matrix'), erlang:get('vector'), 0.000000000001, 100)),
    io:format("~ts~n", [mochi_str(maps:get("eigenvalue", erlang:get('result'), nil))]),
    io:format("~ts~n", [mochi_str(maps:get("eigenvector", erlang:get('result'), nil))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
