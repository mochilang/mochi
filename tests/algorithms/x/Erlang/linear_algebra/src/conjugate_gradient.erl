#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, zeros/1, dot/2, mat_vec_mul/2, vec_add/2, vec_sub/2, scalar_mul/2, sqrtapprox/1, norm/1, conjugate_gradient/4]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

zeros(N) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, N, Res) ->
    case (I < N) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [0.0]),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Res_2);
        _ -> {I, N, Res}
    end
end,
{I_2, N, Res_2} = Fun(I, N, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

dot(A, B) ->
    try
        Sum = 0.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(A, B, I_3, Sum) ->
    case (I_3 < erlang:length(A)) of
        true ->
            Sum_2 = (Sum + mochi_safe_mul((case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end), (case erlang:is_map(B) of true -> maps:get(I_3, B, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(B) + I_3 + 1, B); _ -> mochi_nth(I_3 + 1, B) end end))),
            I_4 = (I_3 + 1),
            Fun_2_loop(A, B, I_4, Sum_2);
        _ -> {A, B, I_3, Sum}
    end
end,
{A, B, I_4, Sum_2} = Fun_2(A, B, I_3, Sum),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

mat_vec_mul(M, V) ->
    try
        Res_3 = [],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, M, Res_3, V) ->
    case (I_5 < erlang:length(M)) of
        true ->
            S = 0.0,
            J = 0,
            Fun_3 = fun Fun_3_loop(I_5, J, M, Res_3, S, V) ->
    case (J < erlang:length((case erlang:is_map(M) of true -> maps:get(I_5, M, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(M) + I_5 + 1, M); _ -> mochi_nth(I_5 + 1, M) end end))) of
        true ->
            S_2 = (S + mochi_safe_mul((case erlang:is_map((case erlang:is_map(M) of true -> maps:get(I_5, M, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(M) + I_5 + 1, M); _ -> mochi_nth(I_5 + 1, M) end end)) of true -> maps:get(J, (case erlang:is_map(M) of true -> maps:get(I_5, M, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(M) + I_5 + 1, M); _ -> mochi_nth(I_5 + 1, M) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M) of true -> maps:get(I_5, M, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(M) + I_5 + 1, M); _ -> mochi_nth(I_5 + 1, M) end end)) + J + 1, (case erlang:is_map(M) of true -> maps:get(I_5, M, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(M) + I_5 + 1, M); _ -> mochi_nth(I_5 + 1, M) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(M) of true -> maps:get(I_5, M, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(M) + I_5 + 1, M); _ -> mochi_nth(I_5 + 1, M) end end)) end end), (case erlang:is_map(V) of true -> maps:get(J, V, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(V) + J + 1, V); _ -> mochi_nth(J + 1, V) end end))),
            J_2 = (J + 1),
            Fun_3_loop(I_5, J_2, M, Res_3, S_2, V);
        _ -> {I_5, J, M, Res_3, S, V}
    end
end,
{I_5, J_2, M, Res_3, S_2, V} = Fun_3(I_5, J, M, Res_3, S, V),
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [S_2]),
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, M, Res_4, V);
        _ -> {I_5, M, Res_3, V}
    end
end,
{I_6, M, Res_4, V} = Fun_4(I_5, M, Res_3, V),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

vec_add(A_2, B_2) ->
    try
        Res_5 = [],
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(A_2, B_2, I_7, Res_5) ->
    case (I_7 < erlang:length(A_2)) of
        true ->
            Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [((case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end) + (case erlang:is_map(B_2) of true -> maps:get(I_7, B_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B_2) + I_7 + 1, B_2); _ -> mochi_nth(I_7 + 1, B_2) end end))]),
            I_8 = (I_7 + 1),
            Fun_5_loop(A_2, B_2, I_8, Res_6);
        _ -> {A_2, B_2, I_7, Res_5}
    end
end,
{A_2, B_2, I_8, Res_6} = Fun_5(A_2, B_2, I_7, Res_5),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

vec_sub(A_3, B_3) ->
    try
        Res_7 = [],
        I_9 = 0,
        Fun_6 = fun Fun_6_loop(A_3, B_3, I_9, Res_7) ->
    case (I_9 < erlang:length(A_3)) of
        true ->
            Res_8 = lists:append((case Res_7 of nil -> []; _ -> Res_7 end), [((case erlang:is_map(A_3) of true -> maps:get(I_9, A_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_3) + I_9 + 1, A_3); _ -> mochi_nth(I_9 + 1, A_3) end end) - (case erlang:is_map(B_3) of true -> maps:get(I_9, B_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(B_3) + I_9 + 1, B_3); _ -> mochi_nth(I_9 + 1, B_3) end end))]),
            I_10 = (I_9 + 1),
            Fun_6_loop(A_3, B_3, I_10, Res_8);
        _ -> {A_3, B_3, I_9, Res_7}
    end
end,
{A_3, B_3, I_10, Res_8} = Fun_6(A_3, B_3, I_9, Res_7),
        Res_8
    catch {return, RetCatch} -> RetCatch end.

scalar_mul(S_3, V_2) ->
    try
        Res_9 = [],
        I_11 = 0,
        Fun_7 = fun Fun_7_loop(I_11, Res_9, S_3, V_2) ->
    case (I_11 < erlang:length(V_2)) of
        true ->
            Res_10 = lists:append((case Res_9 of nil -> []; _ -> Res_9 end), [mochi_safe_mul(S_3, (case erlang:is_map(V_2) of true -> maps:get(I_11, V_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(V_2) + I_11 + 1, V_2); _ -> mochi_nth(I_11 + 1, V_2) end end))]),
            I_12 = (I_11 + 1),
            Fun_7_loop(I_12, Res_10, S_3, V_2);
        _ -> {I_11, Res_9, S_3, V_2}
    end
end,
{I_12, Res_10, S_3, V_2} = Fun_7(I_11, Res_9, S_3, V_2),
        Res_10
    catch {return, RetCatch} -> RetCatch end.

sqrtapprox(X) ->
    try
        case (X =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X,
        I_13 = 0,
        Fun_8 = fun Fun_8_loop(Guess, I_13, X) ->
    case (I_13 < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_14 = (I_13 + 1),
            Fun_8_loop(Guess_2, I_14, X);
        _ -> {Guess, I_13, X}
    end
end,
{Guess_2, I_14, X} = Fun_8(Guess, I_13, X),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

norm(V_3) ->
    try
        sqrtapprox(dot(V_3, V_3))
    catch {return, RetCatch} -> RetCatch end.

conjugate_gradient(A, B_4, Max_iterations, Tol) ->
    try
        N_2 = erlang:length(B_4),
        X_2 = zeros(N_2),
        R = vec_sub(B_4, mat_vec_mul(A, X_2)),
        P = R,
        Rs_old = dot(R, R),
        I_15 = 0,
        Fun_9 = fun Fun_9_loop(A, B_4, I_15, Max_iterations, N_2, P, R, Rs_old, Tol, X_2) ->
    case (I_15 < Max_iterations) of
        true ->
            try
                Ap = mat_vec_mul(A, P),
                Alpha = mochi_safe_div(Rs_old, dot(P, Ap)),
                X_3 = vec_add(X_2, scalar_mul(Alpha, P)),
                R_2 = vec_sub(R, scalar_mul(Alpha, Ap)),
                Rs_new = dot(R_2, R_2),
                case (sqrtapprox(Rs_new) < Tol) of
        true -> throw({break, A, B_4, I_15, Max_iterations, N_2, P, R_2, Rs_old, Tol, X_3});
        _ -> ok
    end,
                Beta = mochi_safe_div(Rs_new, Rs_old),
                P_2 = vec_add(R_2, scalar_mul(Beta, P)),
                Rs_old_2 = Rs_new,
                I_16 = (I_15 + 1),
                Fun_9_loop(A, B_4, I_16, Max_iterations, N_2, P_2, R_2, Rs_old_2, Tol, X_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9} -> Fun_9_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9}
            end;
        _ -> {A, B_4, I_15, Max_iterations, N_2, P, R, Rs_old, Tol, X_2}
    end
end,
{A, B_4, I_16, Max_iterations, N_2, P_2, R_2, Rs_old_2, Tol, X_3} = Fun_9(A, B_4, I_15, Max_iterations, N_2, P, R, Rs_old, Tol, X_2),
        X_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('A', [[8.73256573, -5.02034289, -2.68709226], [-5.02034289, 3.78188322, 0.91980451], [-2.68709226, 0.91980451, 1.94746467]]),
    erlang:put('b', [-5.80872761, 3.23807431, 1.95381422]),
    erlang:put('x', conjugate_gradient(erlang:get('A'), erlang:get('b'), 1000, 0.00000001)),
    io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('x')) of true -> maps:get(0, erlang:get('x'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('x')) + 0 + 1, erlang:get('x')); _ -> mochi_nth(0 + 1, erlang:get('x')) end end))]),
    io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('x')) of true -> maps:get(1, erlang:get('x'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('x')) + 1 + 1, erlang:get('x')); _ -> mochi_nth(1 + 1, erlang:get('x')) end end))]),
    io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('x')) of true -> maps:get(2, erlang:get('x'), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(erlang:get('x')) + 2 + 1, erlang:get('x')); _ -> mochi_nth(2 + 1, erlang:get('x')) end end))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
