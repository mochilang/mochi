#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, contains_int/2, split/2, pow_int_float/2, points_to_polynomial/1, main/0]).

% Generated by Mochi transpiler v0.10.65 (63755001db)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

contains_int(Xs, X) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, X, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) == X) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, X, Xs);
        _ -> {I, X, Xs}
    end
end,
{I_2, X, Xs} = Fun(I, X, Xs),
        false
    catch {return, RetCatch} -> RetCatch end.

split(S, Sep) ->
    try
        Res = [],
        Current = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Current, I_3, Res, S, Sep) ->
    case (I_3 < erlang:length(S)) of
        true ->
            Ch = string:substr(S, I_3 + 1, ((I_3 + 1) - I_3)),
            case (Ch == Sep) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Current]),
            Current_2 = "",
            Current_4 = Current_2,
            Res_3 = Res_2;
        _ -> Current_3 = (Current ++ Ch),
            Current_4 = Current_3,
            Res_3 = Res
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Current_4, I_4, Res_3, S, Sep);
        _ -> {Current, I_3, Res, S, Sep}
    end
end,
{Current_4, I_4, Res_3, S, Sep} = Fun_2(Current, I_3, Res, S, Sep),
        Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Current_4]),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

pow_int_float(Base, Exp) ->
    try
        Result = 1.0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Base, Exp, I_5, Result) ->
    case (I_5 < Exp) of
        true ->
            Result_2 = mochi_safe_mul(Result, float(Base)),
            I_6 = (I_5 + 1),
            Fun_3_loop(Base, Exp, I_6, Result_2);
        _ -> {Base, Exp, I_5, Result}
    end
end,
{Base, Exp, I_6, Result_2} = Fun_3(Base, Exp, I_5, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

points_to_polynomial(Coordinates) ->
    try
        case (erlang:length(Coordinates) == 0) of
        true -> erlang:error({panic, "The program cannot work out a fitting polynomial."});
        _ -> ok
    end,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Coordinates, I_7) ->
    case (I_7 < erlang:length(Coordinates)) of
        true ->
            case (erlang:length((case erlang:is_map(Coordinates) of true -> maps:get(I_7, Coordinates, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Coordinates) + I_7 + 1, Coordinates); _ -> mochi_nth(I_7 + 1, Coordinates) end end)) /= 2) of
        true -> erlang:error({panic, "The program cannot work out a fitting polynomial."});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(Coordinates, I_8);
        _ -> {Coordinates, I_7}
    end
end,
{Coordinates, I_8} = Fun_4(Coordinates, I_7),
        J = 0,
        Fun_6 = fun Fun_6_loop(Coordinates, I_8, J) ->
    case (J < erlang:length(Coordinates)) of
        true ->
            K = (J + 1),
            Fun_5 = fun Fun_5_loop(Coordinates, I_8, J, K) ->
    case (K < erlang:length(Coordinates)) of
        true ->
            case (((case erlang:is_map((case erlang:is_map(Coordinates) of true -> maps:get(J, Coordinates, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Coordinates) + J + 1, Coordinates); _ -> mochi_nth(J + 1, Coordinates) end end)) of true -> maps:get(0, (case erlang:is_map(Coordinates) of true -> maps:get(J, Coordinates, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Coordinates) + J + 1, Coordinates); _ -> mochi_nth(J + 1, Coordinates) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Coordinates) of true -> maps:get(J, Coordinates, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Coordinates) + J + 1, Coordinates); _ -> mochi_nth(J + 1, Coordinates) end end)) + 0 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(J, Coordinates, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Coordinates) + J + 1, Coordinates); _ -> mochi_nth(J + 1, Coordinates) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(J, Coordinates, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Coordinates) + J + 1, Coordinates); _ -> mochi_nth(J + 1, Coordinates) end end)) end end) == (case erlang:is_map((case erlang:is_map(Coordinates) of true -> maps:get(K, Coordinates, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Coordinates) + K + 1, Coordinates); _ -> mochi_nth(K + 1, Coordinates) end end)) of true -> maps:get(0, (case erlang:is_map(Coordinates) of true -> maps:get(K, Coordinates, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Coordinates) + K + 1, Coordinates); _ -> mochi_nth(K + 1, Coordinates) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Coordinates) of true -> maps:get(K, Coordinates, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Coordinates) + K + 1, Coordinates); _ -> mochi_nth(K + 1, Coordinates) end end)) + 0 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(K, Coordinates, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Coordinates) + K + 1, Coordinates); _ -> mochi_nth(K + 1, Coordinates) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(K, Coordinates, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Coordinates) + K + 1, Coordinates); _ -> mochi_nth(K + 1, Coordinates) end end)) end end)) andalso ((case erlang:is_map((case erlang:is_map(Coordinates) of true -> maps:get(J, Coordinates, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Coordinates) + J + 1, Coordinates); _ -> mochi_nth(J + 1, Coordinates) end end)) of true -> maps:get(1, (case erlang:is_map(Coordinates) of true -> maps:get(J, Coordinates, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Coordinates) + J + 1, Coordinates); _ -> mochi_nth(J + 1, Coordinates) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Coordinates) of true -> maps:get(J, Coordinates, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Coordinates) + J + 1, Coordinates); _ -> mochi_nth(J + 1, Coordinates) end end)) + 1 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(J, Coordinates, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Coordinates) + J + 1, Coordinates); _ -> mochi_nth(J + 1, Coordinates) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(J, Coordinates, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Coordinates) + J + 1, Coordinates); _ -> mochi_nth(J + 1, Coordinates) end end)) end end) == (case erlang:is_map((case erlang:is_map(Coordinates) of true -> maps:get(K, Coordinates, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Coordinates) + K + 1, Coordinates); _ -> mochi_nth(K + 1, Coordinates) end end)) of true -> maps:get(1, (case erlang:is_map(Coordinates) of true -> maps:get(K, Coordinates, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Coordinates) + K + 1, Coordinates); _ -> mochi_nth(K + 1, Coordinates) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Coordinates) of true -> maps:get(K, Coordinates, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Coordinates) + K + 1, Coordinates); _ -> mochi_nth(K + 1, Coordinates) end end)) + 1 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(K, Coordinates, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Coordinates) + K + 1, Coordinates); _ -> mochi_nth(K + 1, Coordinates) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(K, Coordinates, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Coordinates) + K + 1, Coordinates); _ -> mochi_nth(K + 1, Coordinates) end end)) end end))) of
        true -> erlang:error({panic, "The program cannot work out a fitting polynomial."});
        _ -> ok
    end,
            K_2 = (K + 1),
            Fun_5_loop(Coordinates, I_8, J, K_2);
        _ -> {Coordinates, I_8, J, K}
    end
end,
{Coordinates, I_8, J, K_2} = Fun_5(Coordinates, I_8, J, K),
            J_2 = (J + 1),
            Fun_6_loop(Coordinates, I_8, J_2);
        _ -> {Coordinates, I_8, J}
    end
end,
{Coordinates, I_8, J_2} = Fun_6(Coordinates, I_8, J),
        Set_x = [],
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(Coordinates, I_9, J_2, Set_x) ->
    case (I_9 < erlang:length(Coordinates)) of
        true ->
            X_val = (case erlang:is_map((case erlang:is_map(Coordinates) of true -> maps:get(I_9, Coordinates, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Coordinates) + I_9 + 1, Coordinates); _ -> mochi_nth(I_9 + 1, Coordinates) end end)) of true -> maps:get(0, (case erlang:is_map(Coordinates) of true -> maps:get(I_9, Coordinates, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Coordinates) + I_9 + 1, Coordinates); _ -> mochi_nth(I_9 + 1, Coordinates) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Coordinates) of true -> maps:get(I_9, Coordinates, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Coordinates) + I_9 + 1, Coordinates); _ -> mochi_nth(I_9 + 1, Coordinates) end end)) + 0 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(I_9, Coordinates, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Coordinates) + I_9 + 1, Coordinates); _ -> mochi_nth(I_9 + 1, Coordinates) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(I_9, Coordinates, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Coordinates) + I_9 + 1, Coordinates); _ -> mochi_nth(I_9 + 1, Coordinates) end end)) end end),
            case mochi_not(contains_int(Set_x, X_val)) of
        true -> Set_x_2 = lists:append((case Set_x of nil -> []; _ -> Set_x end), [X_val]),
            Set_x_3 = Set_x_2;
        _ -> Set_x_3 = Set_x
    end,
            I_10 = (I_9 + 1),
            Fun_7_loop(Coordinates, I_10, J_2, Set_x_3);
        _ -> {Coordinates, I_9, J_2, Set_x}
    end
end,
{Coordinates, I_10, J_2, Set_x_3} = Fun_7(Coordinates, I_9, J_2, Set_x),
        case (erlang:length(Set_x_3) == 1) of
        true -> throw({return, ("x=" ++ mochi_str((case erlang:is_map((case erlang:is_map(Coordinates) of true -> maps:get(0, Coordinates, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Coordinates) + 0 + 1, Coordinates); _ -> mochi_nth(0 + 1, Coordinates) end end)) of true -> maps:get(0, (case erlang:is_map(Coordinates) of true -> maps:get(0, Coordinates, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Coordinates) + 0 + 1, Coordinates); _ -> mochi_nth(0 + 1, Coordinates) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Coordinates) of true -> maps:get(0, Coordinates, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Coordinates) + 0 + 1, Coordinates); _ -> mochi_nth(0 + 1, Coordinates) end end)) + 0 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(0, Coordinates, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Coordinates) + 0 + 1, Coordinates); _ -> mochi_nth(0 + 1, Coordinates) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(0, Coordinates, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Coordinates) + 0 + 1, Coordinates); _ -> mochi_nth(0 + 1, Coordinates) end end)) end end)))});
        _ -> ok
    end,
        case (erlang:length(Set_x_3) /= erlang:length(Coordinates)) of
        true -> erlang:error({panic, "The program cannot work out a fitting polynomial."});
        _ -> ok
    end,
        N = erlang:length(Coordinates),
        Matrix = [],
        Row = 0,
        Fun_9 = fun Fun_9_loop(Coordinates, I_10, J_2, Matrix, N, Row, Set_x_3) ->
    case (Row < N) of
        true ->
            Line = [],
            Col = 0,
            Fun_8 = fun Fun_8_loop(Col, Coordinates, I_10, J_2, Line, Matrix, N, Row, Set_x_3) ->
    case (Col < N) of
        true ->
            Power = pow_int_float((case erlang:is_map((case erlang:is_map(Coordinates) of true -> maps:get(Row, Coordinates, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Coordinates) + Row + 1, Coordinates); _ -> mochi_nth(Row + 1, Coordinates) end end)) of true -> maps:get(0, (case erlang:is_map(Coordinates) of true -> maps:get(Row, Coordinates, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Coordinates) + Row + 1, Coordinates); _ -> mochi_nth(Row + 1, Coordinates) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Coordinates) of true -> maps:get(Row, Coordinates, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Coordinates) + Row + 1, Coordinates); _ -> mochi_nth(Row + 1, Coordinates) end end)) + 0 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(Row, Coordinates, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Coordinates) + Row + 1, Coordinates); _ -> mochi_nth(Row + 1, Coordinates) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(Row, Coordinates, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Coordinates) + Row + 1, Coordinates); _ -> mochi_nth(Row + 1, Coordinates) end end)) end end), (N - (Col + 1))),
            Line_2 = lists:append((case Line of nil -> []; _ -> Line end), [Power]),
            Col_2 = (Col + 1),
            Fun_8_loop(Col_2, Coordinates, I_10, J_2, Line_2, Matrix, N, Row, Set_x_3);
        _ -> {Col, Coordinates, I_10, J_2, Line, Matrix, N, Row, Set_x_3}
    end
end,
{Col_2, Coordinates, I_10, J_2, Line_2, Matrix, N, Row, Set_x_3} = Fun_8(Col, Coordinates, I_10, J_2, Line, Matrix, N, Row, Set_x_3),
            Matrix_2 = lists:append((case Matrix of nil -> []; _ -> Matrix end), [Line_2]),
            Row_2 = (Row + 1),
            Fun_9_loop(Coordinates, I_10, J_2, Matrix_2, N, Row_2, Set_x_3);
        _ -> {Coordinates, I_10, J_2, Matrix, N, Row, Set_x_3}
    end
end,
{Coordinates, I_10, J_2, Matrix_2, N, Row_2, Set_x_3} = Fun_9(Coordinates, I_10, J_2, Matrix, N, Row, Set_x_3),
        Vector = [],
        Row_3 = 0,
        Fun_10 = fun Fun_10_loop(Coordinates, I_10, J_2, Matrix_2, N, Row_3, Set_x_3, Vector) ->
    case (Row_3 < N) of
        true ->
            Vector_2 = lists:append((case Vector of nil -> []; _ -> Vector end), [float((case erlang:is_map((case erlang:is_map(Coordinates) of true -> maps:get(Row_3, Coordinates, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Coordinates) + Row_3 + 1, Coordinates); _ -> mochi_nth(Row_3 + 1, Coordinates) end end)) of true -> maps:get(1, (case erlang:is_map(Coordinates) of true -> maps:get(Row_3, Coordinates, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Coordinates) + Row_3 + 1, Coordinates); _ -> mochi_nth(Row_3 + 1, Coordinates) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Coordinates) of true -> maps:get(Row_3, Coordinates, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Coordinates) + Row_3 + 1, Coordinates); _ -> mochi_nth(Row_3 + 1, Coordinates) end end)) + 1 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(Row_3, Coordinates, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Coordinates) + Row_3 + 1, Coordinates); _ -> mochi_nth(Row_3 + 1, Coordinates) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Coordinates) of true -> maps:get(Row_3, Coordinates, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Coordinates) + Row_3 + 1, Coordinates); _ -> mochi_nth(Row_3 + 1, Coordinates) end end)) end end))]),
            Row_4 = (Row_3 + 1),
            Fun_10_loop(Coordinates, I_10, J_2, Matrix_2, N, Row_4, Set_x_3, Vector_2);
        _ -> {Coordinates, I_10, J_2, Matrix_2, N, Row_3, Set_x_3, Vector}
    end
end,
{Coordinates, I_10, J_2, Matrix_2, N, Row_4, Set_x_3, Vector_2} = Fun_10(Coordinates, I_10, J_2, Matrix_2, N, Row_3, Set_x_3, Vector),
        Count = 0,
        Fun_14 = fun Fun_14_loop(Coordinates, Count, I_10, J_2, Matrix_2, N, Row_4, Set_x_3, Vector_2) ->
    case (Count < N) of
        true ->
            Number = 0,
            Fun_13 = fun Fun_13_loop(Coordinates, Count, I_10, J_2, Matrix_2, N, Number, Row_4, Set_x_3, Vector_2) ->
    case (Number < N) of
        true ->
            case (Count /= Number) of
        true -> Fraction = mochi_safe_div((case erlang:is_map((case erlang:is_map(Matrix_2) of true -> maps:get(Number, Matrix_2, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Number + 1, Matrix_2); _ -> mochi_nth(Number + 1, Matrix_2) end end)) of true -> maps:get(Count, (case erlang:is_map(Matrix_2) of true -> maps:get(Number, Matrix_2, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Number + 1, Matrix_2); _ -> mochi_nth(Number + 1, Matrix_2) end end), nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get(Number, Matrix_2, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Number + 1, Matrix_2); _ -> mochi_nth(Number + 1, Matrix_2) end end)) + Count + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(Number, Matrix_2, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Number + 1, Matrix_2); _ -> mochi_nth(Number + 1, Matrix_2) end end)); _ -> mochi_nth(Count + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(Number, Matrix_2, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Number + 1, Matrix_2); _ -> mochi_nth(Number + 1, Matrix_2) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix_2) of true -> maps:get(Count, Matrix_2, nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Count + 1, Matrix_2); _ -> mochi_nth(Count + 1, Matrix_2) end end)) of true -> maps:get(Count, (case erlang:is_map(Matrix_2) of true -> maps:get(Count, Matrix_2, nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Count + 1, Matrix_2); _ -> mochi_nth(Count + 1, Matrix_2) end end), nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get(Count, Matrix_2, nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Count + 1, Matrix_2); _ -> mochi_nth(Count + 1, Matrix_2) end end)) + Count + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(Count, Matrix_2, nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Count + 1, Matrix_2); _ -> mochi_nth(Count + 1, Matrix_2) end end)); _ -> mochi_nth(Count + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(Count, Matrix_2, nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Count + 1, Matrix_2); _ -> mochi_nth(Count + 1, Matrix_2) end end)) end end)),
            Cc = 0,
            Fun_11 = fun Fun_11_loop(Cc, Coordinates, Count, Fraction, I_10, J_2, Matrix_2, N, Number, Row_4, Set_x_3, Vector_2) ->
    case (Cc < N) of
        true ->
            Matrix_3 = lists:sublist(Matrix_2, Number) ++ [lists:sublist(lists:nth(Number + 1, Matrix_2), Cc) ++ [((case erlang:is_map((case erlang:is_map(Matrix_2) of true -> maps:get(Number, Matrix_2, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Number + 1, Matrix_2); _ -> mochi_nth(Number + 1, Matrix_2) end end)) of true -> maps:get(Cc, (case erlang:is_map(Matrix_2) of true -> maps:get(Number, Matrix_2, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Number + 1, Matrix_2); _ -> mochi_nth(Number + 1, Matrix_2) end end), nil); _ -> case Cc < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get(Number, Matrix_2, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Number + 1, Matrix_2); _ -> mochi_nth(Number + 1, Matrix_2) end end)) + Cc + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(Number, Matrix_2, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Number + 1, Matrix_2); _ -> mochi_nth(Number + 1, Matrix_2) end end)); _ -> mochi_nth(Cc + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(Number, Matrix_2, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Number + 1, Matrix_2); _ -> mochi_nth(Number + 1, Matrix_2) end end)) end end) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix_2) of true -> maps:get(Count, Matrix_2, nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Count + 1, Matrix_2); _ -> mochi_nth(Count + 1, Matrix_2) end end)) of true -> maps:get(Cc, (case erlang:is_map(Matrix_2) of true -> maps:get(Count, Matrix_2, nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Count + 1, Matrix_2); _ -> mochi_nth(Count + 1, Matrix_2) end end), nil); _ -> case Cc < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get(Count, Matrix_2, nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Count + 1, Matrix_2); _ -> mochi_nth(Count + 1, Matrix_2) end end)) + Cc + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(Count, Matrix_2, nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Count + 1, Matrix_2); _ -> mochi_nth(Count + 1, Matrix_2) end end)); _ -> mochi_nth(Cc + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(Count, Matrix_2, nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Count + 1, Matrix_2); _ -> mochi_nth(Count + 1, Matrix_2) end end)) end end), Fraction))] ++ lists:nthtail(Cc + 1, lists:nth(Number + 1, Matrix_2))] ++ lists:nthtail(Number + 1, Matrix_2),
            Cc_2 = (Cc + 1),
            Fun_11_loop(Cc_2, Coordinates, Count, Fraction, I_10, J_2, Matrix_3, N, Number, Row_4, Set_x_3, Vector_2);
        _ -> {Cc, Coordinates, Count, Fraction, I_10, J_2, Matrix_2, N, Number, Row_4, Set_x_3, Vector_2}
    end
end,
{Cc_2, Coordinates, Count, Fraction, I_10, J_2, Matrix_3, N, Number, Row_4, Set_x_3, Vector_2} = Fun_11(Cc, Coordinates, Count, Fraction, I_10, J_2, Matrix_2, N, Number, Row_4, Set_x_3, Vector_2),
            Vector_3 = lists:sublist(Vector_2, Number) ++ [((case erlang:is_map(Vector_2) of true -> maps:get(Number, Vector_2, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Vector_2) + Number + 1, Vector_2); _ -> mochi_nth(Number + 1, Vector_2) end end) - mochi_safe_mul((case erlang:is_map(Vector_2) of true -> maps:get(Count, Vector_2, nil); _ -> case Count < 0 of true -> mochi_nth(erlang:length(Vector_2) + Count + 1, Vector_2); _ -> mochi_nth(Count + 1, Vector_2) end end), Fraction))] ++ lists:nthtail(Number + 1, Vector_2),
            Cc_3 = Cc_2,
            Fraction_2 = Fraction,
            Fun_12 = Fun_11,
            Matrix_4 = Matrix_3,
            Vector_4 = Vector_3;
        _ -> Cc_3 = nil,
            Fraction_2 = nil,
            Fun_12 = Fun_10,
            Matrix_4 = Matrix_2,
            Vector_4 = Vector_2
    end,
            Number_2 = (Number + 1),
            Fun_13_loop(Coordinates, Count, I_10, J_2, Matrix_4, N, Number_2, Row_4, Set_x_3, Vector_4);
        _ -> {Coordinates, Count, I_10, J_2, Matrix_2, N, Number, Row_4, Set_x_3, Vector_2}
    end
end,
{Coordinates, Count, I_10, J_2, Matrix_4, N, Number_2, Row_4, Set_x_3, Vector_4} = Fun_13(Coordinates, Count, I_10, J_2, Matrix_2, N, Number, Row_4, Set_x_3, Vector_2),
            Count_2 = (Count + 1),
            Fun_14_loop(Coordinates, Count_2, I_10, J_2, Matrix_4, N, Row_4, Set_x_3, Vector_4);
        _ -> {Coordinates, Count, I_10, J_2, Matrix_2, N, Row_4, Set_x_3, Vector_2}
    end
end,
{Coordinates, Count_2, I_10, J_2, Matrix_4, N, Row_4, Set_x_3, Vector_4} = Fun_14(Coordinates, Count, I_10, J_2, Matrix_2, N, Row_4, Set_x_3, Vector_2),
        Solution = [],
        Count_3 = 0,
        Fun_15 = fun Fun_15_loop(Coordinates, Count_3, I_10, J_2, Matrix_4, N, Row_4, Set_x_3, Solution, Vector_4) ->
    case (Count_3 < N) of
        true ->
            Value = mochi_safe_div((case erlang:is_map(Vector_4) of true -> maps:get(Count_3, Vector_4, nil); _ -> case Count_3 < 0 of true -> mochi_nth(erlang:length(Vector_4) + Count_3 + 1, Vector_4); _ -> mochi_nth(Count_3 + 1, Vector_4) end end), (case erlang:is_map((case erlang:is_map(Matrix_4) of true -> maps:get(Count_3, Matrix_4, nil); _ -> case Count_3 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + Count_3 + 1, Matrix_4); _ -> mochi_nth(Count_3 + 1, Matrix_4) end end)) of true -> maps:get(Count_3, (case erlang:is_map(Matrix_4) of true -> maps:get(Count_3, Matrix_4, nil); _ -> case Count_3 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + Count_3 + 1, Matrix_4); _ -> mochi_nth(Count_3 + 1, Matrix_4) end end), nil); _ -> case Count_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_4) of true -> maps:get(Count_3, Matrix_4, nil); _ -> case Count_3 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + Count_3 + 1, Matrix_4); _ -> mochi_nth(Count_3 + 1, Matrix_4) end end)) + Count_3 + 1, (case erlang:is_map(Matrix_4) of true -> maps:get(Count_3, Matrix_4, nil); _ -> case Count_3 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + Count_3 + 1, Matrix_4); _ -> mochi_nth(Count_3 + 1, Matrix_4) end end)); _ -> mochi_nth(Count_3 + 1, (case erlang:is_map(Matrix_4) of true -> maps:get(Count_3, Matrix_4, nil); _ -> case Count_3 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + Count_3 + 1, Matrix_4); _ -> mochi_nth(Count_3 + 1, Matrix_4) end end)) end end)),
            Solution_2 = lists:append((case Solution of nil -> []; _ -> Solution end), [mochi_str(Value)]),
            Count_4 = (Count_3 + 1),
            Fun_15_loop(Coordinates, Count_4, I_10, J_2, Matrix_4, N, Row_4, Set_x_3, Solution_2, Vector_4);
        _ -> {Coordinates, Count_3, I_10, J_2, Matrix_4, N, Row_4, Set_x_3, Solution, Vector_4}
    end
end,
{Coordinates, Count_4, I_10, J_2, Matrix_4, N, Row_4, Set_x_3, Solution_2, Vector_4} = Fun_15(Coordinates, Count_3, I_10, J_2, Matrix_4, N, Row_4, Set_x_3, Solution, Vector_4),
        Solved = "f(x)=",
        Count_5 = 0,
        Fun_16 = fun Fun_16_loop(Coordinates, Count_5, I_10, J_2, Matrix_4, N, Row_4, Set_x_3, Solution_2, Solved, Vector_4) ->
    case (Count_5 < N) of
        true ->
            Parts = string:tokens((case erlang:is_map(Solution_2) of true -> maps:get(Count_5, Solution_2, nil); _ -> case Count_5 < 0 of true -> mochi_nth(erlang:length(Solution_2) + Count_5 + 1, Solution_2); _ -> mochi_nth(Count_5 + 1, Solution_2) end end), "e"),
            Coeff = (case erlang:is_map(Solution_2) of true -> maps:get(Count_5, Solution_2, nil); _ -> case Count_5 < 0 of true -> mochi_nth(erlang:length(Solution_2) + Count_5 + 1, Solution_2); _ -> mochi_nth(Count_5 + 1, Solution_2) end end),
            case (erlang:length(Parts) > 1) of
        true -> Coeff_2 = ((string:substr(Parts, 0 + 1, 1) ++ "*10^") ++ string:substr(Parts, 1 + 1, 1)),
            Coeff_3 = Coeff_2;
        _ -> Coeff_3 = Coeff
    end,
            Solved_2 = ((((Solved ++ "x^") ++ mochi_str((N - (Count_5 + 1)))) ++ "*") ++ Coeff_3),
            case ((Count_5 + 1) /= N) of
        true -> Solved_3 = (Solved_2 ++ "+"),
            Solved_4 = Solved_3;
        _ -> Solved_4 = Solved_2
    end,
            Count_6 = (Count_5 + 1),
            Fun_16_loop(Coordinates, Count_6, I_10, J_2, Matrix_4, N, Row_4, Set_x_3, Solution_2, Solved_4, Vector_4);
        _ -> {Coordinates, Count_5, I_10, J_2, Matrix_4, N, Row_4, Set_x_3, Solution_2, Solved, Vector_4}
    end
end,
{Coordinates, Count_6, I_10, J_2, Matrix_4, N, Row_4, Set_x_3, Solution_2, Solved_4, Vector_4} = Fun_16(Coordinates, Count_5, I_10, J_2, Matrix_4, N, Row_4, Set_x_3, Solution_2, Solved, Vector_4),
        Solved_4
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(points_to_polynomial([[1, 0], [2, 0], [3, 0]]))]),
        io:format("~ts~n", [mochi_repr(points_to_polynomial([[1, 1], [2, 1], [3, 1]]))]),
        io:format("~ts~n", [mochi_repr(points_to_polynomial([[1, 1], [2, 4], [3, 9]]))]),
        io:format("~ts~n", [mochi_repr(points_to_polynomial([[1, 3], [2, 6], [3, 11]]))]),
        io:format("~ts~n", [mochi_repr(points_to_polynomial([[1, -3], [2, -6], [3, -11]]))]),
        io:format("~ts~n", [mochi_repr(points_to_polynomial([[1, 1], [1, 2], [1, 3]]))]),
        io:format("~ts~n", [mochi_repr(points_to_polynomial([[1, 5], [2, 2], [3, 9]]))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
