#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, floor/1, modf/2, sin_taylor/1, cos_taylor/1, matrix_to_string/1, scaling/1, rotation/1, projection/1, reflection/1]).

-compile({no_auto_import,[floor/1]}).
% Generated by Mochi transpiler v0.10.65 (63755001db)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

floor(X) ->
    try
        I = mochi_to_int(X),
        case (float(I) > X) of
        true -> I_2 = (I - 1),
            I_3 = I_2;
        _ -> I_3 = I
    end,
        float(I_3)
    catch {return, RetCatch} -> RetCatch end.

modf(X_2, M) ->
    try
        (X_2 - mochi_safe_mul(math:floor(mochi_safe_div(X_2, M)), M))
    catch {return, RetCatch} -> RetCatch end.

sin_taylor(Angle) ->
    try
        X_3 = modf(Angle, mochi_safe_mul(2.0, 3.141592653589793)),
        case (X_3 > 3.141592653589793) of
        true -> X_4 = (X_3 - mochi_safe_mul(2.0, 3.141592653589793)),
            X_5 = X_4;
        _ -> X_5 = X_3
    end,
        Term = X_5,
        Sum = X_5,
        I_4 = 1,
        Fun = fun Fun_loop(Angle, I_4, Sum, Term, X_5) ->
    case (I_4 < 10) of
        true ->
            K1 = mochi_safe_mul(2.0, float(I_4)),
            K2 = (K1 + 1.0),
            Term_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term, X_5), X_5), mochi_safe_mul(K1, K2)),
            Sum_2 = (Sum + Term_2),
            I_5 = (I_4 + 1),
            Fun_loop(Angle, I_5, Sum_2, Term_2, X_5);
        _ -> {Angle, I_4, Sum, Term, X_5}
    end
end,
{Angle, I_5, Sum_2, Term_2, X_5} = Fun(Angle, I_4, Sum, Term, X_5),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

cos_taylor(Angle_2) ->
    try
        X_6 = modf(Angle_2, mochi_safe_mul(2.0, 3.141592653589793)),
        case (X_6 > 3.141592653589793) of
        true -> X_7 = (X_6 - mochi_safe_mul(2.0, 3.141592653589793)),
            X_8 = X_7;
        _ -> X_8 = X_6
    end,
        Term_3 = 1.0,
        Sum_3 = 1.0,
        I_6 = 1,
        Fun_2 = fun Fun_2_loop(Angle_2, I_6, Sum_3, Term_3, X_8) ->
    case (I_6 < 10) of
        true ->
            K1_2 = (mochi_safe_mul(2.0, float(I_6)) - 1.0),
            K2_2 = mochi_safe_mul(2.0, float(I_6)),
            Term_4 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term_3, X_8), X_8), mochi_safe_mul(K1_2, K2_2)),
            Sum_4 = (Sum_3 + Term_4),
            I_7 = (I_6 + 1),
            Fun_2_loop(Angle_2, I_7, Sum_4, Term_4, X_8);
        _ -> {Angle_2, I_6, Sum_3, Term_3, X_8}
    end
end,
{Angle_2, I_7, Sum_4, Term_4, X_8} = Fun_2(Angle_2, I_6, Sum_3, Term_3, X_8),
        Sum_4
    catch {return, RetCatch} -> RetCatch end.

matrix_to_string(M_2) ->
    try
        S = "[",
        I_8 = 0,
        Fun_4 = fun Fun_4_loop(I_8, M_2, S) ->
    case (I_8 < erlang:length(M_2)) of
        true ->
            Row = (case erlang:is_map(M_2) of true -> maps:get(I_8, M_2, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(M_2) + I_8 + 1, M_2); _ -> mochi_nth(I_8 + 1, M_2) end end),
            S_2 = (S ++ "["),
            J = 0,
            Fun_3 = fun Fun_3_loop(I_8, J, M_2, Row, S_2) ->
    case (J < erlang:length(Row)) of
        true ->
            S_3 = (S_2 ++ mochi_str((case erlang:is_map(Row) of true -> maps:get(J, Row, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Row) + J + 1, Row); _ -> mochi_nth(J + 1, Row) end end))),
            case (J < (erlang:length(Row) - 1)) of
        true -> S_4 = (S_3 ++ ", "),
            S_5 = S_4;
        _ -> S_5 = S_3
    end,
            J_2 = (J + 1),
            Fun_3_loop(I_8, J_2, M_2, Row, S_5);
        _ -> {I_8, J, M_2, Row, S_2}
    end
end,
{I_8, J_2, M_2, Row, S_5} = Fun_3(I_8, J, M_2, Row, S_2),
            S_6 = (S_5 ++ "]"),
            case (I_8 < (erlang:length(M_2) - 1)) of
        true -> S_7 = (S_6 ++ ", "),
            S_8 = S_7;
        _ -> S_8 = S_6
    end,
            I_9 = (I_8 + 1),
            Fun_4_loop(I_9, M_2, S_8);
        _ -> {I_8, M_2, S}
    end
end,
{I_9, M_2, S_8} = Fun_4(I_8, M_2, S),
        S_9 = (S_8 ++ "]"),
        S_9
    catch {return, RetCatch} -> RetCatch end.

scaling(F) ->
    try
        [[F, 0.0], [0.0, F]]
    catch {return, RetCatch} -> RetCatch end.

rotation(Angle_3) ->
    try
        C = cos_taylor(Angle_3),
        S_10 = sin_taylor(Angle_3),
        [[C, -S_10], [S_10, C]]
    catch {return, RetCatch} -> RetCatch end.

projection(Angle_4) ->
    try
        C_2 = cos_taylor(Angle_4),
        S_11 = sin_taylor(Angle_4),
        Cs = mochi_safe_mul(C_2, S_11),
        [[mochi_safe_mul(C_2, C_2), Cs], [Cs, mochi_safe_mul(S_11, S_11)]]
    catch {return, RetCatch} -> RetCatch end.

reflection(Angle_5) ->
    try
        C_3 = cos_taylor(Angle_5),
        S_12 = sin_taylor(Angle_5),
        Cs_2 = mochi_safe_mul(C_3, S_12),
        [[(mochi_safe_mul(2.0, C_3) - 1.0), mochi_safe_mul(2.0, Cs_2)], [mochi_safe_mul(2.0, Cs_2), (mochi_safe_mul(2.0, S_12) - 1.0)]]
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    io:format("~ts~n", [mochi_repr(("    scaling(5) = " ++ matrix_to_string(scaling(5.0))))]),
    io:format("~ts~n", [mochi_repr(("  rotation(45) = " ++ matrix_to_string(rotation(45.0))))]),
    io:format("~ts~n", [mochi_repr(("projection(45) = " ++ matrix_to_string(projection(45.0))))]),
    io:format("~ts~n", [mochi_repr(("reflection(45) = " ++ matrix_to_string(reflection(45.0))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
