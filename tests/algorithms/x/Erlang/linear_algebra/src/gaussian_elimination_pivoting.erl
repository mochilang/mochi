#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, panic/1, abs_float/1, copy_matrix/1, solve_linear_system/1]).

% Generated by Mochi transpiler v0.10.65 (365e579019) on 2025-08-13 16:57 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

panic(Msg) ->
    try
        io:format("~ts~n", [mochi_repr(Msg)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

abs_float(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

copy_matrix(Src) ->
    try
        Res = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Res, Src) ->
    case (I < erlang:length(Src)) of
        true ->
            Row_src = (case erlang:is_map(Src) of true -> maps:get(I, Src, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Src) + I + 1, Src); _ -> mochi_nth(I + 1, Src) end end),
            Row = [],
            J = 0,
            Fun = fun Fun_loop(I, J, Res, Row, Row_src, Src) ->
    case (J < erlang:length(Row_src)) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [(case erlang:is_map(Row_src) of true -> maps:get(J, Row_src, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Row_src) + J + 1, Row_src); _ -> mochi_nth(J + 1, Row_src) end end)]),
            J_2 = (J + 1),
            Fun_loop(I, J_2, Res, Row_2, Row_src, Src);
        _ -> {I, J, Res, Row, Row_src, Src}
    end
end,
{I, J_2, Res, Row_2, Row_src, Src} = Fun(I, J, Res, Row, Row_src, Src),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Res_2, Src);
        _ -> {I, Res, Src}
    end
end,
{I_2, Res_2, Src} = Fun_2(I, Res, Src),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

solve_linear_system(Matrix) ->
    try
        Ab = copy_matrix(Matrix),
        Num_rows = erlang:length(Ab),
        Num_cols = (erlang:length((case erlang:is_map(Ab) of true -> maps:get(0, Ab, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Ab) + 0 + 1, Ab); _ -> mochi_nth(0 + 1, Ab) end end)) - 1),
        case (Num_rows /= Num_cols) of
        true -> erlang:error({panic, "Matrix is not square"}),
            throw({return, []});
        _ -> ok
    end,
        Column_num = 0,
        Fun_7 = fun Fun_7_loop(Ab, Column_num, Matrix, Num_cols, Num_rows) ->
    case (Column_num < Num_rows) of
        true ->
            I_3 = Column_num,
            Fun_3 = fun Fun_3_loop(Ab, Column_num, I_3, Matrix, Num_cols, Num_rows) ->
    case (I_3 < Num_cols) of
        true ->
            case (abs_float((case erlang:is_map((case erlang:is_map(Ab) of true -> maps:get(I_3, Ab, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Ab) + I_3 + 1, Ab); _ -> mochi_nth(I_3 + 1, Ab) end end)) of true -> maps:get(Column_num, (case erlang:is_map(Ab) of true -> maps:get(I_3, Ab, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Ab) + I_3 + 1, Ab); _ -> mochi_nth(I_3 + 1, Ab) end end), nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ab) of true -> maps:get(I_3, Ab, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Ab) + I_3 + 1, Ab); _ -> mochi_nth(I_3 + 1, Ab) end end)) + Column_num + 1, (case erlang:is_map(Ab) of true -> maps:get(I_3, Ab, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Ab) + I_3 + 1, Ab); _ -> mochi_nth(I_3 + 1, Ab) end end)); _ -> mochi_nth(Column_num + 1, (case erlang:is_map(Ab) of true -> maps:get(I_3, Ab, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Ab) + I_3 + 1, Ab); _ -> mochi_nth(I_3 + 1, Ab) end end)) end end)) > abs_float((case erlang:is_map((case erlang:is_map(Ab) of true -> maps:get(Column_num, Ab, nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length(Ab) + Column_num + 1, Ab); _ -> mochi_nth(Column_num + 1, Ab) end end)) of true -> maps:get(Column_num, (case erlang:is_map(Ab) of true -> maps:get(Column_num, Ab, nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length(Ab) + Column_num + 1, Ab); _ -> mochi_nth(Column_num + 1, Ab) end end), nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ab) of true -> maps:get(Column_num, Ab, nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length(Ab) + Column_num + 1, Ab); _ -> mochi_nth(Column_num + 1, Ab) end end)) + Column_num + 1, (case erlang:is_map(Ab) of true -> maps:get(Column_num, Ab, nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length(Ab) + Column_num + 1, Ab); _ -> mochi_nth(Column_num + 1, Ab) end end)); _ -> mochi_nth(Column_num + 1, (case erlang:is_map(Ab) of true -> maps:get(Column_num, Ab, nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length(Ab) + Column_num + 1, Ab); _ -> mochi_nth(Column_num + 1, Ab) end end)) end end))) of
        true -> Temp = (case erlang:is_map(Ab) of true -> maps:get(Column_num, Ab, nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length(Ab) + Column_num + 1, Ab); _ -> mochi_nth(Column_num + 1, Ab) end end),
            Ab_2 = lists:sublist(Ab, Column_num) ++ [(case erlang:is_map(Ab) of true -> maps:get(I_3, Ab, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Ab) + I_3 + 1, Ab); _ -> mochi_nth(I_3 + 1, Ab) end end)] ++ lists:nthtail(Column_num + 1, Ab),
            Ab_3 = lists:sublist(Ab_2, I_3) ++ [Temp] ++ lists:nthtail(I_3 + 1, Ab_2),
            Ab_4 = Ab_3,
            Temp_2 = Temp;
        _ -> Ab_4 = Ab,
            Temp_2 = nil
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(Ab_4, Column_num, I_4, Matrix, Num_cols, Num_rows);
        _ -> {Ab, Column_num, I_3, Matrix, Num_cols, Num_rows}
    end
end,
{Ab_4, Column_num, I_4, Matrix, Num_cols, Num_rows} = Fun_3(Ab, Column_num, I_3, Matrix, Num_cols, Num_rows),
            case (abs_float((case erlang:is_map((case erlang:is_map(Ab_4) of true -> maps:get(Column_num, Ab_4, nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length(Ab_4) + Column_num + 1, Ab_4); _ -> mochi_nth(Column_num + 1, Ab_4) end end)) of true -> maps:get(Column_num, (case erlang:is_map(Ab_4) of true -> maps:get(Column_num, Ab_4, nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length(Ab_4) + Column_num + 1, Ab_4); _ -> mochi_nth(Column_num + 1, Ab_4) end end), nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ab_4) of true -> maps:get(Column_num, Ab_4, nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length(Ab_4) + Column_num + 1, Ab_4); _ -> mochi_nth(Column_num + 1, Ab_4) end end)) + Column_num + 1, (case erlang:is_map(Ab_4) of true -> maps:get(Column_num, Ab_4, nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length(Ab_4) + Column_num + 1, Ab_4); _ -> mochi_nth(Column_num + 1, Ab_4) end end)); _ -> mochi_nth(Column_num + 1, (case erlang:is_map(Ab_4) of true -> maps:get(Column_num, Ab_4, nil); _ -> case Column_num < 0 of true -> mochi_nth(erlang:length(Ab_4) + Column_num + 1, Ab_4); _ -> mochi_nth(Column_num + 1, Ab_4) end end)) end end)) < 0.00000001) of
        true -> erlang:error({panic, "Matrix is singular"}),
            throw({return, []});
        _ -> ok
    end,
            case (Column_num /= 0) of
        true -> I_5 = Column_num,
            Fun_5 = fun Fun_5_loop(Ab_4, Column_num, I_5, Matrix, Num_cols, Num_rows) ->
    case (I_5 < Num_rows) of
        true ->
            Factor = mochi_safe_div((case erlang:is_map((case erlang:is_map(Ab_4) of true -> maps:get(I_5, Ab_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Ab_4) + I_5 + 1, Ab_4); _ -> mochi_nth(I_5 + 1, Ab_4) end end)) of true -> maps:get((Column_num - 1), (case erlang:is_map(Ab_4) of true -> maps:get(I_5, Ab_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Ab_4) + I_5 + 1, Ab_4); _ -> mochi_nth(I_5 + 1, Ab_4) end end), nil); _ -> case (Column_num - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ab_4) of true -> maps:get(I_5, Ab_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Ab_4) + I_5 + 1, Ab_4); _ -> mochi_nth(I_5 + 1, Ab_4) end end)) + (Column_num - 1) + 1, (case erlang:is_map(Ab_4) of true -> maps:get(I_5, Ab_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Ab_4) + I_5 + 1, Ab_4); _ -> mochi_nth(I_5 + 1, Ab_4) end end)); _ -> mochi_nth((Column_num - 1) + 1, (case erlang:is_map(Ab_4) of true -> maps:get(I_5, Ab_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Ab_4) + I_5 + 1, Ab_4); _ -> mochi_nth(I_5 + 1, Ab_4) end end)) end end), (case erlang:is_map((case erlang:is_map(Ab_4) of true -> maps:get((Column_num - 1), Ab_4, nil); _ -> case (Column_num - 1) < 0 of true -> mochi_nth(erlang:length(Ab_4) + (Column_num - 1) + 1, Ab_4); _ -> mochi_nth((Column_num - 1) + 1, Ab_4) end end)) of true -> maps:get((Column_num - 1), (case erlang:is_map(Ab_4) of true -> maps:get((Column_num - 1), Ab_4, nil); _ -> case (Column_num - 1) < 0 of true -> mochi_nth(erlang:length(Ab_4) + (Column_num - 1) + 1, Ab_4); _ -> mochi_nth((Column_num - 1) + 1, Ab_4) end end), nil); _ -> case (Column_num - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ab_4) of true -> maps:get((Column_num - 1), Ab_4, nil); _ -> case (Column_num - 1) < 0 of true -> mochi_nth(erlang:length(Ab_4) + (Column_num - 1) + 1, Ab_4); _ -> mochi_nth((Column_num - 1) + 1, Ab_4) end end)) + (Column_num - 1) + 1, (case erlang:is_map(Ab_4) of true -> maps:get((Column_num - 1), Ab_4, nil); _ -> case (Column_num - 1) < 0 of true -> mochi_nth(erlang:length(Ab_4) + (Column_num - 1) + 1, Ab_4); _ -> mochi_nth((Column_num - 1) + 1, Ab_4) end end)); _ -> mochi_nth((Column_num - 1) + 1, (case erlang:is_map(Ab_4) of true -> maps:get((Column_num - 1), Ab_4, nil); _ -> case (Column_num - 1) < 0 of true -> mochi_nth(erlang:length(Ab_4) + (Column_num - 1) + 1, Ab_4); _ -> mochi_nth((Column_num - 1) + 1, Ab_4) end end)) end end)),
            J_3 = 0,
            Fun_4 = fun Fun_4_loop(Ab_4, Column_num, Factor, I_5, J_3, Matrix, Num_cols, Num_rows) ->
    case (J_3 < erlang:length((case erlang:is_map(Ab_4) of true -> maps:get(I_5, Ab_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Ab_4) + I_5 + 1, Ab_4); _ -> mochi_nth(I_5 + 1, Ab_4) end end))) of
        true ->
            Ab_5 = lists:sublist(Ab_4, I_5) ++ [lists:sublist(lists:nth(I_5 + 1, Ab_4), J_3) ++ [((case erlang:is_map((case erlang:is_map(Ab_4) of true -> maps:get(I_5, Ab_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Ab_4) + I_5 + 1, Ab_4); _ -> mochi_nth(I_5 + 1, Ab_4) end end)) of true -> maps:get(J_3, (case erlang:is_map(Ab_4) of true -> maps:get(I_5, Ab_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Ab_4) + I_5 + 1, Ab_4); _ -> mochi_nth(I_5 + 1, Ab_4) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ab_4) of true -> maps:get(I_5, Ab_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Ab_4) + I_5 + 1, Ab_4); _ -> mochi_nth(I_5 + 1, Ab_4) end end)) + J_3 + 1, (case erlang:is_map(Ab_4) of true -> maps:get(I_5, Ab_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Ab_4) + I_5 + 1, Ab_4); _ -> mochi_nth(I_5 + 1, Ab_4) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Ab_4) of true -> maps:get(I_5, Ab_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Ab_4) + I_5 + 1, Ab_4); _ -> mochi_nth(I_5 + 1, Ab_4) end end)) end end) - mochi_safe_mul(Factor, (case erlang:is_map((case erlang:is_map(Ab_4) of true -> maps:get((Column_num - 1), Ab_4, nil); _ -> case (Column_num - 1) < 0 of true -> mochi_nth(erlang:length(Ab_4) + (Column_num - 1) + 1, Ab_4); _ -> mochi_nth((Column_num - 1) + 1, Ab_4) end end)) of true -> maps:get(J_3, (case erlang:is_map(Ab_4) of true -> maps:get((Column_num - 1), Ab_4, nil); _ -> case (Column_num - 1) < 0 of true -> mochi_nth(erlang:length(Ab_4) + (Column_num - 1) + 1, Ab_4); _ -> mochi_nth((Column_num - 1) + 1, Ab_4) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ab_4) of true -> maps:get((Column_num - 1), Ab_4, nil); _ -> case (Column_num - 1) < 0 of true -> mochi_nth(erlang:length(Ab_4) + (Column_num - 1) + 1, Ab_4); _ -> mochi_nth((Column_num - 1) + 1, Ab_4) end end)) + J_3 + 1, (case erlang:is_map(Ab_4) of true -> maps:get((Column_num - 1), Ab_4, nil); _ -> case (Column_num - 1) < 0 of true -> mochi_nth(erlang:length(Ab_4) + (Column_num - 1) + 1, Ab_4); _ -> mochi_nth((Column_num - 1) + 1, Ab_4) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Ab_4) of true -> maps:get((Column_num - 1), Ab_4, nil); _ -> case (Column_num - 1) < 0 of true -> mochi_nth(erlang:length(Ab_4) + (Column_num - 1) + 1, Ab_4); _ -> mochi_nth((Column_num - 1) + 1, Ab_4) end end)) end end)))] ++ lists:nthtail(J_3 + 1, lists:nth(I_5 + 1, Ab_4))] ++ lists:nthtail(I_5 + 1, Ab_4),
            J_4 = (J_3 + 1),
            Fun_4_loop(Ab_5, Column_num, Factor, I_5, J_4, Matrix, Num_cols, Num_rows);
        _ -> {Ab_4, Column_num, Factor, I_5, J_3, Matrix, Num_cols, Num_rows}
    end
end,
{Ab_5, Column_num, Factor, I_5, J_4, Matrix, Num_cols, Num_rows} = Fun_4(Ab_4, Column_num, Factor, I_5, J_3, Matrix, Num_cols, Num_rows),
            I_6 = (I_5 + 1),
            Fun_5_loop(Ab_5, Column_num, I_6, Matrix, Num_cols, Num_rows);
        _ -> {Ab_4, Column_num, I_5, Matrix, Num_cols, Num_rows}
    end
end,
{Ab_5, Column_num, I_6, Matrix, Num_cols, Num_rows} = Fun_5(Ab_4, Column_num, I_5, Matrix, Num_cols, Num_rows),
            Ab_6 = Ab_5,
            Fun_6 = Fun_5,
            I_7 = I_6;
        _ -> Ab_6 = Ab_4,
            Fun_6 = Fun_3,
            I_7 = I_4
    end,
            Column_num_2 = (Column_num + 1),
            Fun_7_loop(Ab_6, Column_num_2, Matrix, Num_cols, Num_rows);
        _ -> {Ab, Column_num, Matrix, Num_cols, Num_rows}
    end
end,
{Ab_6, Column_num_2, Matrix, Num_cols, Num_rows} = Fun_7(Ab, Column_num, Matrix, Num_cols, Num_rows),
        X_lst = [],
        T = 0,
        Fun_8 = fun Fun_8_loop(Ab_6, Column_num_2, Matrix, Num_cols, Num_rows, T, X_lst) ->
    case (T < Num_rows) of
        true ->
            X_lst_2 = lists:append((case X_lst of nil -> []; _ -> X_lst end), [0.0]),
            T_2 = (T + 1),
            Fun_8_loop(Ab_6, Column_num_2, Matrix, Num_cols, Num_rows, T_2, X_lst_2);
        _ -> {Ab_6, Column_num_2, Matrix, Num_cols, Num_rows, T, X_lst}
    end
end,
{Ab_6, Column_num_2, Matrix, Num_cols, Num_rows, T_2, X_lst_2} = Fun_8(Ab_6, Column_num_2, Matrix, Num_cols, Num_rows, T, X_lst),
        Column_num_3 = (Num_rows - 1),
        Fun_10 = fun Fun_10_loop(Ab_6, Column_num_3, Matrix, Num_cols, Num_rows, T_2, X_lst_2) ->
    case (Column_num_3 >= 0) of
        true ->
            X_2 = mochi_safe_div((case erlang:is_map((case erlang:is_map(Ab_6) of true -> maps:get(Column_num_3, Ab_6, nil); _ -> case Column_num_3 < 0 of true -> mochi_nth(erlang:length(Ab_6) + Column_num_3 + 1, Ab_6); _ -> mochi_nth(Column_num_3 + 1, Ab_6) end end)) of true -> maps:get(Num_cols, (case erlang:is_map(Ab_6) of true -> maps:get(Column_num_3, Ab_6, nil); _ -> case Column_num_3 < 0 of true -> mochi_nth(erlang:length(Ab_6) + Column_num_3 + 1, Ab_6); _ -> mochi_nth(Column_num_3 + 1, Ab_6) end end), nil); _ -> case Num_cols < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ab_6) of true -> maps:get(Column_num_3, Ab_6, nil); _ -> case Column_num_3 < 0 of true -> mochi_nth(erlang:length(Ab_6) + Column_num_3 + 1, Ab_6); _ -> mochi_nth(Column_num_3 + 1, Ab_6) end end)) + Num_cols + 1, (case erlang:is_map(Ab_6) of true -> maps:get(Column_num_3, Ab_6, nil); _ -> case Column_num_3 < 0 of true -> mochi_nth(erlang:length(Ab_6) + Column_num_3 + 1, Ab_6); _ -> mochi_nth(Column_num_3 + 1, Ab_6) end end)); _ -> mochi_nth(Num_cols + 1, (case erlang:is_map(Ab_6) of true -> maps:get(Column_num_3, Ab_6, nil); _ -> case Column_num_3 < 0 of true -> mochi_nth(erlang:length(Ab_6) + Column_num_3 + 1, Ab_6); _ -> mochi_nth(Column_num_3 + 1, Ab_6) end end)) end end), (case erlang:is_map((case erlang:is_map(Ab_6) of true -> maps:get(Column_num_3, Ab_6, nil); _ -> case Column_num_3 < 0 of true -> mochi_nth(erlang:length(Ab_6) + Column_num_3 + 1, Ab_6); _ -> mochi_nth(Column_num_3 + 1, Ab_6) end end)) of true -> maps:get(Column_num_3, (case erlang:is_map(Ab_6) of true -> maps:get(Column_num_3, Ab_6, nil); _ -> case Column_num_3 < 0 of true -> mochi_nth(erlang:length(Ab_6) + Column_num_3 + 1, Ab_6); _ -> mochi_nth(Column_num_3 + 1, Ab_6) end end), nil); _ -> case Column_num_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ab_6) of true -> maps:get(Column_num_3, Ab_6, nil); _ -> case Column_num_3 < 0 of true -> mochi_nth(erlang:length(Ab_6) + Column_num_3 + 1, Ab_6); _ -> mochi_nth(Column_num_3 + 1, Ab_6) end end)) + Column_num_3 + 1, (case erlang:is_map(Ab_6) of true -> maps:get(Column_num_3, Ab_6, nil); _ -> case Column_num_3 < 0 of true -> mochi_nth(erlang:length(Ab_6) + Column_num_3 + 1, Ab_6); _ -> mochi_nth(Column_num_3 + 1, Ab_6) end end)); _ -> mochi_nth(Column_num_3 + 1, (case erlang:is_map(Ab_6) of true -> maps:get(Column_num_3, Ab_6, nil); _ -> case Column_num_3 < 0 of true -> mochi_nth(erlang:length(Ab_6) + Column_num_3 + 1, Ab_6); _ -> mochi_nth(Column_num_3 + 1, Ab_6) end end)) end end)),
            X_lst_3 = lists:sublist(X_lst_2, Column_num_3) ++ [X_2] ++ lists:nthtail(Column_num_3 + 1, X_lst_2),
            I_8 = (Column_num_3 - 1),
            Fun_9 = fun Fun_9_loop(Ab_6, Column_num_3, I_8, Matrix, Num_cols, Num_rows, T_2, X_2, X_lst_3) ->
    case (I_8 >= 0) of
        true ->
            Ab_7 = lists:sublist(Ab_6, I_8) ++ [lists:sublist(lists:nth(I_8 + 1, Ab_6), Num_cols) ++ [((case erlang:is_map((case erlang:is_map(Ab_6) of true -> maps:get(I_8, Ab_6, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Ab_6) + I_8 + 1, Ab_6); _ -> mochi_nth(I_8 + 1, Ab_6) end end)) of true -> maps:get(Num_cols, (case erlang:is_map(Ab_6) of true -> maps:get(I_8, Ab_6, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Ab_6) + I_8 + 1, Ab_6); _ -> mochi_nth(I_8 + 1, Ab_6) end end), nil); _ -> case Num_cols < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ab_6) of true -> maps:get(I_8, Ab_6, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Ab_6) + I_8 + 1, Ab_6); _ -> mochi_nth(I_8 + 1, Ab_6) end end)) + Num_cols + 1, (case erlang:is_map(Ab_6) of true -> maps:get(I_8, Ab_6, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Ab_6) + I_8 + 1, Ab_6); _ -> mochi_nth(I_8 + 1, Ab_6) end end)); _ -> mochi_nth(Num_cols + 1, (case erlang:is_map(Ab_6) of true -> maps:get(I_8, Ab_6, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Ab_6) + I_8 + 1, Ab_6); _ -> mochi_nth(I_8 + 1, Ab_6) end end)) end end) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(Ab_6) of true -> maps:get(I_8, Ab_6, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Ab_6) + I_8 + 1, Ab_6); _ -> mochi_nth(I_8 + 1, Ab_6) end end)) of true -> maps:get(Column_num_3, (case erlang:is_map(Ab_6) of true -> maps:get(I_8, Ab_6, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Ab_6) + I_8 + 1, Ab_6); _ -> mochi_nth(I_8 + 1, Ab_6) end end), nil); _ -> case Column_num_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ab_6) of true -> maps:get(I_8, Ab_6, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Ab_6) + I_8 + 1, Ab_6); _ -> mochi_nth(I_8 + 1, Ab_6) end end)) + Column_num_3 + 1, (case erlang:is_map(Ab_6) of true -> maps:get(I_8, Ab_6, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Ab_6) + I_8 + 1, Ab_6); _ -> mochi_nth(I_8 + 1, Ab_6) end end)); _ -> mochi_nth(Column_num_3 + 1, (case erlang:is_map(Ab_6) of true -> maps:get(I_8, Ab_6, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Ab_6) + I_8 + 1, Ab_6); _ -> mochi_nth(I_8 + 1, Ab_6) end end)) end end), X_2))] ++ lists:nthtail(Num_cols + 1, lists:nth(I_8 + 1, Ab_6))] ++ lists:nthtail(I_8 + 1, Ab_6),
            I_9 = (I_8 - 1),
            Fun_9_loop(Ab_7, Column_num_3, I_9, Matrix, Num_cols, Num_rows, T_2, X_2, X_lst_3);
        _ -> {Ab_6, Column_num_3, I_8, Matrix, Num_cols, Num_rows, T_2, X_2, X_lst_3}
    end
end,
{Ab_7, Column_num_3, I_9, Matrix, Num_cols, Num_rows, T_2, X_2, X_lst_3} = Fun_9(Ab_6, Column_num_3, I_8, Matrix, Num_cols, Num_rows, T_2, X_2, X_lst_3),
            Column_num_4 = (Column_num_3 - 1),
            Fun_10_loop(Ab_7, Column_num_4, Matrix, Num_cols, Num_rows, T_2, X_lst_3);
        _ -> {Ab_6, Column_num_3, Matrix, Num_cols, Num_rows, T_2, X_lst_2}
    end
end,
{Ab_7, Column_num_4, Matrix, Num_cols, Num_rows, T_2, X_lst_3} = Fun_10(Ab_6, Column_num_3, Matrix, Num_cols, Num_rows, T_2, X_lst_2),
        X_lst_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('example_matrix', [[5.0, -5.0, -3.0, 4.0, -11.0], [1.0, -4.0, 6.0, -4.0, -10.0], [-2.0, -5.0, 4.0, -5.0, -12.0], [-3.0, -3.0, 5.0, -5.0, 8.0]]),
    io:format("~ts~n", [mochi_repr("Matrix:")]),
    io:format("~ts~n", [mochi_str(erlang:get('example_matrix'))]),
    erlang:put('solution', solve_linear_system(erlang:get('example_matrix'))),
    io:format("~ts~n", [mochi_str(erlang:get('solution'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
