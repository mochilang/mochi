#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rand/0, random_int/2, sqrtapprox/1, arcsin_taylor/1, acos_taylor/1, vector_len/1, vector_to_string/1, vector_add/2, vector_sub/2, vector_eq/2, vector_mul_scalar/2, vector_dot/2, vector_copy/1, vector_component/2, vector_change_component/3, vector_euclidean_length/1, vector_angle/3, zero_vector/1, unit_basis_vector/2, axpy/3, random_vector/3, matrix_to_string/1, matrix_add/2, matrix_sub/2, matrix_mul_vector/2, matrix_mul_scalar/2, matrix_component/3, matrix_change_component/4, matrix_minor/3, matrix_cofactor/3, matrix_determinant/1, square_zero_matrix/1, random_matrix/4, main/0]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

rand() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        erlang:get('seed')
    catch {return, RetCatch} -> RetCatch end.

random_int(A, B) ->
    try
        R = mochi_mod(rand(), ((B - A) + 1)),
        (A + R)
    catch {return, RetCatch} -> RetCatch end.

sqrtapprox(X) ->
    try
        case (X =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

arcsin_taylor(X_2) ->
    try
        Term = X_2,
        Sum = X_2,
        N = 1,
        Fun_2 = fun Fun_2_loop(N, Sum, Term, X_2) ->
    case (N < 10) of
        true ->
            Num = mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(mochi_safe_mul((mochi_safe_mul(2.0, float(N)) - 1.0), (mochi_safe_mul(2.0, float(N)) - 1.0)), X_2), X_2), Term),
            Den = mochi_safe_mul(mochi_safe_mul(2.0, float(N)), (mochi_safe_mul(2.0, float(N)) + 1.0)),
            Term_2 = mochi_safe_div(Num, Den),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_2_loop(N_2, Sum_2, Term_2, X_2);
        _ -> {N, Sum, Term, X_2}
    end
end,
{N_2, Sum_2, Term_2, X_2} = Fun_2(N, Sum, Term, X_2),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

acos_taylor(X_3) ->
    try
        (mochi_safe_div(3.141592653589793, 2.0) - arcsin_taylor(X_3))
    catch {return, RetCatch} -> RetCatch end.

vector_len(V) ->
    try
        erlang:length(maps:get("components", V, nil))
    catch {return, RetCatch} -> RetCatch end.

vector_to_string(V_2) ->
    try
        S = "(",
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, S, V_2) ->
    case (I_3 < erlang:length(maps:get("components", V_2, nil))) of
        true ->
            S_2 = (S ++ mochi_str((case erlang:is_map(maps:get("components", V_2, nil)) of true -> maps:get(I_3, maps:get("components", V_2, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("components", V_2, nil)) + I_3 + 1, maps:get("components", V_2, nil)); _ -> mochi_nth(I_3 + 1, maps:get("components", V_2, nil)) end end))),
            case (I_3 < (erlang:length(maps:get("components", V_2, nil)) - 1)) of
        true -> S_3 = (S_2 ++ ","),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, S_4, V_2);
        _ -> {I_3, S, V_2}
    end
end,
{I_4, S_4, V_2} = Fun_3(I_3, S, V_2),
        S_5 = (S_4 ++ ")"),
        S_5
    catch {return, RetCatch} -> RetCatch end.

vector_add(A_2, B_2) ->
    try
        Size = vector_len(A_2),
        case (Size /= vector_len(B_2)) of
        true -> throw({return, #{"components" => []}});
        _ -> ok
    end,
        Res = [],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(A_2, B_2, I_5, Res, Size) ->
    case (I_5 < Size) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [((case erlang:is_map(maps:get("components", A_2, nil)) of true -> maps:get(I_5, maps:get("components", A_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("components", A_2, nil)) + I_5 + 1, maps:get("components", A_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("components", A_2, nil)) end end) + (case erlang:is_map(maps:get("components", B_2, nil)) of true -> maps:get(I_5, maps:get("components", B_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("components", B_2, nil)) + I_5 + 1, maps:get("components", B_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("components", B_2, nil)) end end))]),
            I_6 = (I_5 + 1),
            Fun_4_loop(A_2, B_2, I_6, Res_2, Size);
        _ -> {A_2, B_2, I_5, Res, Size}
    end
end,
{A_2, B_2, I_6, Res_2, Size} = Fun_4(A_2, B_2, I_5, Res, Size),
        #{"components" => Res_2}
    catch {return, RetCatch} -> RetCatch end.

vector_sub(A_3, B_3) ->
    try
        Size_2 = vector_len(A_3),
        case (Size_2 /= vector_len(B_3)) of
        true -> throw({return, #{"components" => []}});
        _ -> ok
    end,
        Res_3 = [],
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(A_3, B_3, I_7, Res_3, Size_2) ->
    case (I_7 < Size_2) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [((case erlang:is_map(maps:get("components", A_3, nil)) of true -> maps:get(I_7, maps:get("components", A_3, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("components", A_3, nil)) + I_7 + 1, maps:get("components", A_3, nil)); _ -> mochi_nth(I_7 + 1, maps:get("components", A_3, nil)) end end) - (case erlang:is_map(maps:get("components", B_3, nil)) of true -> maps:get(I_7, maps:get("components", B_3, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("components", B_3, nil)) + I_7 + 1, maps:get("components", B_3, nil)); _ -> mochi_nth(I_7 + 1, maps:get("components", B_3, nil)) end end))]),
            I_8 = (I_7 + 1),
            Fun_5_loop(A_3, B_3, I_8, Res_4, Size_2);
        _ -> {A_3, B_3, I_7, Res_3, Size_2}
    end
end,
{A_3, B_3, I_8, Res_4, Size_2} = Fun_5(A_3, B_3, I_7, Res_3, Size_2),
        #{"components" => Res_4}
    catch {return, RetCatch} -> RetCatch end.

vector_eq(A_4, B_4) ->
    try
        case (vector_len(A_4) /= vector_len(B_4)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_9 = 0,
        Fun_6 = fun Fun_6_loop(A_4, B_4, I_9) ->
    case (I_9 < vector_len(A_4)) of
        true ->
            case ((case erlang:is_map(maps:get("components", A_4, nil)) of true -> maps:get(I_9, maps:get("components", A_4, nil), nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(maps:get("components", A_4, nil)) + I_9 + 1, maps:get("components", A_4, nil)); _ -> mochi_nth(I_9 + 1, maps:get("components", A_4, nil)) end end) /= (case erlang:is_map(maps:get("components", B_4, nil)) of true -> maps:get(I_9, maps:get("components", B_4, nil), nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(maps:get("components", B_4, nil)) + I_9 + 1, maps:get("components", B_4, nil)); _ -> mochi_nth(I_9 + 1, maps:get("components", B_4, nil)) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_10 = (I_9 + 1),
            Fun_6_loop(A_4, B_4, I_10);
        _ -> {A_4, B_4, I_9}
    end
end,
{A_4, B_4, I_10} = Fun_6(A_4, B_4, I_9),
        true
    catch {return, RetCatch} -> RetCatch end.

vector_mul_scalar(V_3, S_6) ->
    try
        Res_5 = [],
        I_11 = 0,
        Fun_7 = fun Fun_7_loop(I_11, Res_5, S_6, V_3) ->
    case (I_11 < vector_len(V_3)) of
        true ->
            Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [mochi_safe_mul((case erlang:is_map(maps:get("components", V_3, nil)) of true -> maps:get(I_11, maps:get("components", V_3, nil), nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(maps:get("components", V_3, nil)) + I_11 + 1, maps:get("components", V_3, nil)); _ -> mochi_nth(I_11 + 1, maps:get("components", V_3, nil)) end end), S_6)]),
            I_12 = (I_11 + 1),
            Fun_7_loop(I_12, Res_6, S_6, V_3);
        _ -> {I_11, Res_5, S_6, V_3}
    end
end,
{I_12, Res_6, S_6, V_3} = Fun_7(I_11, Res_5, S_6, V_3),
        #{"components" => Res_6}
    catch {return, RetCatch} -> RetCatch end.

vector_dot(A_5, B_5) ->
    try
        Size_3 = vector_len(A_5),
        case (Size_3 /= vector_len(B_5)) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Sum_3 = 0.0,
        I_13 = 0,
        Fun_8 = fun Fun_8_loop(A_5, B_5, I_13, Size_3, Sum_3) ->
    case (I_13 < Size_3) of
        true ->
            Sum_4 = (Sum_3 + mochi_safe_mul((case erlang:is_map(maps:get("components", A_5, nil)) of true -> maps:get(I_13, maps:get("components", A_5, nil), nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(maps:get("components", A_5, nil)) + I_13 + 1, maps:get("components", A_5, nil)); _ -> mochi_nth(I_13 + 1, maps:get("components", A_5, nil)) end end), (case erlang:is_map(maps:get("components", B_5, nil)) of true -> maps:get(I_13, maps:get("components", B_5, nil), nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(maps:get("components", B_5, nil)) + I_13 + 1, maps:get("components", B_5, nil)); _ -> mochi_nth(I_13 + 1, maps:get("components", B_5, nil)) end end))),
            I_14 = (I_13 + 1),
            Fun_8_loop(A_5, B_5, I_14, Size_3, Sum_4);
        _ -> {A_5, B_5, I_13, Size_3, Sum_3}
    end
end,
{A_5, B_5, I_14, Size_3, Sum_4} = Fun_8(A_5, B_5, I_13, Size_3, Sum_3),
        Sum_4
    catch {return, RetCatch} -> RetCatch end.

vector_copy(V_4) ->
    try
        Res_7 = [],
        I_15 = 0,
        Fun_9 = fun Fun_9_loop(I_15, Res_7, V_4) ->
    case (I_15 < vector_len(V_4)) of
        true ->
            Res_8 = lists:append((case Res_7 of nil -> []; _ -> Res_7 end), [(case erlang:is_map(maps:get("components", V_4, nil)) of true -> maps:get(I_15, maps:get("components", V_4, nil), nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(maps:get("components", V_4, nil)) + I_15 + 1, maps:get("components", V_4, nil)); _ -> mochi_nth(I_15 + 1, maps:get("components", V_4, nil)) end end)]),
            I_16 = (I_15 + 1),
            Fun_9_loop(I_16, Res_8, V_4);
        _ -> {I_15, Res_7, V_4}
    end
end,
{I_16, Res_8, V_4} = Fun_9(I_15, Res_7, V_4),
        #{"components" => Res_8}
    catch {return, RetCatch} -> RetCatch end.

vector_component(V_5, Idx) ->
    try
        (case erlang:is_map(maps:get("components", V_5, nil)) of true -> maps:get(Idx, maps:get("components", V_5, nil), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(maps:get("components", V_5, nil)) + Idx + 1, maps:get("components", V_5, nil)); _ -> mochi_nth(Idx + 1, maps:get("components", V_5, nil)) end end)
    catch {return, RetCatch} -> RetCatch end.

vector_change_component(V_6, Pos, Value) ->
    try
        Comps = maps:get("components", V_6, nil),
        Comps_2 = lists:sublist(Comps, Pos) ++ [Value] ++ lists:nthtail(Pos + 1, Comps),
        #{"components" => Comps_2}
    catch {return, RetCatch} -> RetCatch end.

vector_euclidean_length(V_7) ->
    try
        Sum_5 = 0.0,
        I_17 = 0,
        Fun_10 = fun Fun_10_loop(I_17, Sum_5, V_7) ->
    case (I_17 < erlang:length(maps:get("components", V_7, nil))) of
        true ->
            Sum_6 = (Sum_5 + mochi_safe_mul((case erlang:is_map(maps:get("components", V_7, nil)) of true -> maps:get(I_17, maps:get("components", V_7, nil), nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(maps:get("components", V_7, nil)) + I_17 + 1, maps:get("components", V_7, nil)); _ -> mochi_nth(I_17 + 1, maps:get("components", V_7, nil)) end end), (case erlang:is_map(maps:get("components", V_7, nil)) of true -> maps:get(I_17, maps:get("components", V_7, nil), nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(maps:get("components", V_7, nil)) + I_17 + 1, maps:get("components", V_7, nil)); _ -> mochi_nth(I_17 + 1, maps:get("components", V_7, nil)) end end))),
            I_18 = (I_17 + 1),
            Fun_10_loop(I_18, Sum_6, V_7);
        _ -> {I_17, Sum_5, V_7}
    end
end,
{I_18, Sum_6, V_7} = Fun_10(I_17, Sum_5, V_7),
        Result = sqrtapprox(Sum_6),
        Result
    catch {return, RetCatch} -> RetCatch end.

vector_angle(A_6, B_6, Deg) ->
    try
        Num_2 = vector_dot(A_6, B_6),
        Den_2 = mochi_safe_mul(vector_euclidean_length(A_6), vector_euclidean_length(B_6)),
        Ang = acos_taylor(mochi_safe_div(Num_2, Den_2)),
        case Deg of
        true -> Ang_2 = mochi_safe_div(mochi_safe_mul(Ang, 180.0), 3.141592653589793),
            Ang_3 = Ang_2;
        _ -> Ang_3 = Ang
    end,
        Ang_3
    catch {return, RetCatch} -> RetCatch end.

zero_vector(D) ->
    try
        Res_9 = [],
        I_19 = 0,
        Fun_11 = fun Fun_11_loop(D, I_19, Res_9) ->
    case (I_19 < D) of
        true ->
            Res_10 = lists:append((case Res_9 of nil -> []; _ -> Res_9 end), [0.0]),
            I_20 = (I_19 + 1),
            Fun_11_loop(D, I_20, Res_10);
        _ -> {D, I_19, Res_9}
    end
end,
{D, I_20, Res_10} = Fun_11(D, I_19, Res_9),
        #{"components" => Res_10}
    catch {return, RetCatch} -> RetCatch end.

unit_basis_vector(D_2, Pos_2) ->
    try
        Res_11 = [],
        I_21 = 0,
        Fun_12 = fun Fun_12_loop(D_2, I_21, Pos_2, Res_11) ->
    case (I_21 < D_2) of
        true ->
            case (I_21 == Pos_2) of
        true -> Res_12 = lists:append((case Res_11 of nil -> []; _ -> Res_11 end), [1.0]),
            Res_14 = Res_12;
        _ -> Res_13 = lists:append((case Res_11 of nil -> []; _ -> Res_11 end), [0.0]),
            Res_14 = Res_13
    end,
            I_22 = (I_21 + 1),
            Fun_12_loop(D_2, I_22, Pos_2, Res_14);
        _ -> {D_2, I_21, Pos_2, Res_11}
    end
end,
{D_2, I_22, Pos_2, Res_14} = Fun_12(D_2, I_21, Pos_2, Res_11),
        #{"components" => Res_14}
    catch {return, RetCatch} -> RetCatch end.

axpy(S_7, X_4, Y) ->
    try
        vector_add(vector_mul_scalar(X_4, S_7), Y)
    catch {return, RetCatch} -> RetCatch end.

random_vector(N_3, A_7, B_7) ->
    try
        Res_15 = [],
        I_23 = 0,
        Fun_13 = fun Fun_13_loop(A_7, B_7, I_23, N_3, Res_15) ->
    case (I_23 < N_3) of
        true ->
            Res_16 = lists:append((case Res_15 of nil -> []; _ -> Res_15 end), [float(random_int(A_7, B_7))]),
            I_24 = (I_23 + 1),
            Fun_13_loop(A_7, B_7, I_24, N_3, Res_16);
        _ -> {A_7, B_7, I_23, N_3, Res_15}
    end
end,
{A_7, B_7, I_24, N_3, Res_16} = Fun_13(A_7, B_7, I_23, N_3, Res_15),
        #{"components" => Res_16}
    catch {return, RetCatch} -> RetCatch end.

matrix_to_string(M) ->
    try
        Ans = "",
        I_25 = 0,
        Fun_15 = fun Fun_15_loop(Ans, I_25, M) ->
    case (I_25 < maps:get("height", M, nil)) of
        true ->
            Ans_2 = (Ans ++ "|"),
            J = 0,
            Fun_14 = fun Fun_14_loop(Ans_2, I_25, J, M) ->
    case (J < maps:get("width", M, nil)) of
        true ->
            Ans_3 = (Ans_2 ++ mochi_str((case erlang:is_map((case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I_25, maps:get("data", M, nil), nil); _ -> case I_25 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I_25 + 1, maps:get("data", M, nil)); _ -> mochi_nth(I_25 + 1, maps:get("data", M, nil)) end end)) of true -> maps:get(J, (case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I_25, maps:get("data", M, nil), nil); _ -> case I_25 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I_25 + 1, maps:get("data", M, nil)); _ -> mochi_nth(I_25 + 1, maps:get("data", M, nil)) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I_25, maps:get("data", M, nil), nil); _ -> case I_25 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I_25 + 1, maps:get("data", M, nil)); _ -> mochi_nth(I_25 + 1, maps:get("data", M, nil)) end end)) + J + 1, (case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I_25, maps:get("data", M, nil), nil); _ -> case I_25 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I_25 + 1, maps:get("data", M, nil)); _ -> mochi_nth(I_25 + 1, maps:get("data", M, nil)) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I_25, maps:get("data", M, nil), nil); _ -> case I_25 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I_25 + 1, maps:get("data", M, nil)); _ -> mochi_nth(I_25 + 1, maps:get("data", M, nil)) end end)) end end))),
            case (J < (maps:get("width", M, nil) - 1)) of
        true -> Ans_4 = (Ans_3 ++ ","),
            Ans_5 = Ans_4;
        _ -> Ans_5 = Ans_3
    end,
            J_2 = (J + 1),
            Fun_14_loop(Ans_5, I_25, J_2, M);
        _ -> {Ans_2, I_25, J, M}
    end
end,
{Ans_5, I_25, J_2, M} = Fun_14(Ans_2, I_25, J, M),
            Ans_6 = (Ans_5 ++ "|\n"),
            I_26 = (I_25 + 1),
            Fun_15_loop(Ans_6, I_26, M);
        _ -> {Ans, I_25, M}
    end
end,
{Ans_6, I_26, M} = Fun_15(Ans, I_25, M),
        Ans_6
    catch {return, RetCatch} -> RetCatch end.

matrix_add(A_8, B_8) ->
    try
        case ((maps:get("width", A_8, nil) /= maps:get("width", B_8, nil)) orelse (maps:get("height", A_8, nil) /= maps:get("height", B_8, nil))) of
        true -> throw({return, #{"data" => [], "width" => 0, "height" => 0}});
        _ -> ok
    end,
        Mat = [],
        I_27 = 0,
        Fun_17 = fun Fun_17_loop(A_8, B_8, I_27, Mat) ->
    case (I_27 < maps:get("height", A_8, nil)) of
        true ->
            Row = [],
            J_3 = 0,
            Fun_16 = fun Fun_16_loop(A_8, B_8, I_27, J_3, Mat, Row) ->
    case (J_3 < maps:get("width", A_8, nil)) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [((case erlang:is_map((case erlang:is_map(maps:get("data", A_8, nil)) of true -> maps:get(I_27, maps:get("data", A_8, nil), nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_8, nil)) + I_27 + 1, maps:get("data", A_8, nil)); _ -> mochi_nth(I_27 + 1, maps:get("data", A_8, nil)) end end)) of true -> maps:get(J_3, (case erlang:is_map(maps:get("data", A_8, nil)) of true -> maps:get(I_27, maps:get("data", A_8, nil), nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_8, nil)) + I_27 + 1, maps:get("data", A_8, nil)); _ -> mochi_nth(I_27 + 1, maps:get("data", A_8, nil)) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", A_8, nil)) of true -> maps:get(I_27, maps:get("data", A_8, nil), nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_8, nil)) + I_27 + 1, maps:get("data", A_8, nil)); _ -> mochi_nth(I_27 + 1, maps:get("data", A_8, nil)) end end)) + J_3 + 1, (case erlang:is_map(maps:get("data", A_8, nil)) of true -> maps:get(I_27, maps:get("data", A_8, nil), nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_8, nil)) + I_27 + 1, maps:get("data", A_8, nil)); _ -> mochi_nth(I_27 + 1, maps:get("data", A_8, nil)) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(maps:get("data", A_8, nil)) of true -> maps:get(I_27, maps:get("data", A_8, nil), nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_8, nil)) + I_27 + 1, maps:get("data", A_8, nil)); _ -> mochi_nth(I_27 + 1, maps:get("data", A_8, nil)) end end)) end end) + (case erlang:is_map((case erlang:is_map(maps:get("data", B_8, nil)) of true -> maps:get(I_27, maps:get("data", B_8, nil), nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_8, nil)) + I_27 + 1, maps:get("data", B_8, nil)); _ -> mochi_nth(I_27 + 1, maps:get("data", B_8, nil)) end end)) of true -> maps:get(J_3, (case erlang:is_map(maps:get("data", B_8, nil)) of true -> maps:get(I_27, maps:get("data", B_8, nil), nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_8, nil)) + I_27 + 1, maps:get("data", B_8, nil)); _ -> mochi_nth(I_27 + 1, maps:get("data", B_8, nil)) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", B_8, nil)) of true -> maps:get(I_27, maps:get("data", B_8, nil), nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_8, nil)) + I_27 + 1, maps:get("data", B_8, nil)); _ -> mochi_nth(I_27 + 1, maps:get("data", B_8, nil)) end end)) + J_3 + 1, (case erlang:is_map(maps:get("data", B_8, nil)) of true -> maps:get(I_27, maps:get("data", B_8, nil), nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_8, nil)) + I_27 + 1, maps:get("data", B_8, nil)); _ -> mochi_nth(I_27 + 1, maps:get("data", B_8, nil)) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(maps:get("data", B_8, nil)) of true -> maps:get(I_27, maps:get("data", B_8, nil), nil); _ -> case I_27 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_8, nil)) + I_27 + 1, maps:get("data", B_8, nil)); _ -> mochi_nth(I_27 + 1, maps:get("data", B_8, nil)) end end)) end end))]),
            J_4 = (J_3 + 1),
            Fun_16_loop(A_8, B_8, I_27, J_4, Mat, Row_2);
        _ -> {A_8, B_8, I_27, J_3, Mat, Row}
    end
end,
{A_8, B_8, I_27, J_4, Mat, Row_2} = Fun_16(A_8, B_8, I_27, J_3, Mat, Row),
            Mat_2 = lists:append((case Mat of nil -> []; _ -> Mat end), [Row_2]),
            I_28 = (I_27 + 1),
            Fun_17_loop(A_8, B_8, I_28, Mat_2);
        _ -> {A_8, B_8, I_27, Mat}
    end
end,
{A_8, B_8, I_28, Mat_2} = Fun_17(A_8, B_8, I_27, Mat),
        #{"data" => Mat_2, "width" => maps:get("width", A_8, nil), "height" => maps:get("height", A_8, nil)}
    catch {return, RetCatch} -> RetCatch end.

matrix_sub(A_9, B_9) ->
    try
        case ((maps:get("width", A_9, nil) /= maps:get("width", B_9, nil)) orelse (maps:get("height", A_9, nil) /= maps:get("height", B_9, nil))) of
        true -> throw({return, #{"data" => [], "width" => 0, "height" => 0}});
        _ -> ok
    end,
        Mat_3 = [],
        I_29 = 0,
        Fun_19 = fun Fun_19_loop(A_9, B_9, I_29, Mat_3) ->
    case (I_29 < maps:get("height", A_9, nil)) of
        true ->
            Row_3 = [],
            J_5 = 0,
            Fun_18 = fun Fun_18_loop(A_9, B_9, I_29, J_5, Mat_3, Row_3) ->
    case (J_5 < maps:get("width", A_9, nil)) of
        true ->
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [((case erlang:is_map((case erlang:is_map(maps:get("data", A_9, nil)) of true -> maps:get(I_29, maps:get("data", A_9, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_9, nil)) + I_29 + 1, maps:get("data", A_9, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", A_9, nil)) end end)) of true -> maps:get(J_5, (case erlang:is_map(maps:get("data", A_9, nil)) of true -> maps:get(I_29, maps:get("data", A_9, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_9, nil)) + I_29 + 1, maps:get("data", A_9, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", A_9, nil)) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", A_9, nil)) of true -> maps:get(I_29, maps:get("data", A_9, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_9, nil)) + I_29 + 1, maps:get("data", A_9, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", A_9, nil)) end end)) + J_5 + 1, (case erlang:is_map(maps:get("data", A_9, nil)) of true -> maps:get(I_29, maps:get("data", A_9, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_9, nil)) + I_29 + 1, maps:get("data", A_9, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", A_9, nil)) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(maps:get("data", A_9, nil)) of true -> maps:get(I_29, maps:get("data", A_9, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_9, nil)) + I_29 + 1, maps:get("data", A_9, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", A_9, nil)) end end)) end end) - (case erlang:is_map((case erlang:is_map(maps:get("data", B_9, nil)) of true -> maps:get(I_29, maps:get("data", B_9, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_9, nil)) + I_29 + 1, maps:get("data", B_9, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", B_9, nil)) end end)) of true -> maps:get(J_5, (case erlang:is_map(maps:get("data", B_9, nil)) of true -> maps:get(I_29, maps:get("data", B_9, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_9, nil)) + I_29 + 1, maps:get("data", B_9, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", B_9, nil)) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", B_9, nil)) of true -> maps:get(I_29, maps:get("data", B_9, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_9, nil)) + I_29 + 1, maps:get("data", B_9, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", B_9, nil)) end end)) + J_5 + 1, (case erlang:is_map(maps:get("data", B_9, nil)) of true -> maps:get(I_29, maps:get("data", B_9, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_9, nil)) + I_29 + 1, maps:get("data", B_9, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", B_9, nil)) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(maps:get("data", B_9, nil)) of true -> maps:get(I_29, maps:get("data", B_9, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_9, nil)) + I_29 + 1, maps:get("data", B_9, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", B_9, nil)) end end)) end end))]),
            J_6 = (J_5 + 1),
            Fun_18_loop(A_9, B_9, I_29, J_6, Mat_3, Row_4);
        _ -> {A_9, B_9, I_29, J_5, Mat_3, Row_3}
    end
end,
{A_9, B_9, I_29, J_6, Mat_3, Row_4} = Fun_18(A_9, B_9, I_29, J_5, Mat_3, Row_3),
            Mat_4 = lists:append((case Mat_3 of nil -> []; _ -> Mat_3 end), [Row_4]),
            I_30 = (I_29 + 1),
            Fun_19_loop(A_9, B_9, I_30, Mat_4);
        _ -> {A_9, B_9, I_29, Mat_3}
    end
end,
{A_9, B_9, I_30, Mat_4} = Fun_19(A_9, B_9, I_29, Mat_3),
        #{"data" => Mat_4, "width" => maps:get("width", A_9, nil), "height" => maps:get("height", A_9, nil)}
    catch {return, RetCatch} -> RetCatch end.

matrix_mul_vector(M_2, V_8) ->
    try
        case (erlang:length(maps:get("components", V_8, nil)) /= maps:get("width", M_2, nil)) of
        true -> throw({return, #{"components" => []}});
        _ -> ok
    end,
        Res_17 = zero_vector(maps:get("height", M_2, nil)),
        I_31 = 0,
        Fun_21 = fun Fun_21_loop(I_31, M_2, Res_17, V_8) ->
    case (I_31 < maps:get("height", M_2, nil)) of
        true ->
            Sum_7 = 0.0,
            J_7 = 0,
            Fun_20 = fun Fun_20_loop(I_31, J_7, M_2, Res_17, Sum_7, V_8) ->
    case (J_7 < maps:get("width", M_2, nil)) of
        true ->
            Sum_8 = (Sum_7 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(maps:get("data", M_2, nil)) of true -> maps:get(I_31, maps:get("data", M_2, nil), nil); _ -> case I_31 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_2, nil)) + I_31 + 1, maps:get("data", M_2, nil)); _ -> mochi_nth(I_31 + 1, maps:get("data", M_2, nil)) end end)) of true -> maps:get(J_7, (case erlang:is_map(maps:get("data", M_2, nil)) of true -> maps:get(I_31, maps:get("data", M_2, nil), nil); _ -> case I_31 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_2, nil)) + I_31 + 1, maps:get("data", M_2, nil)); _ -> mochi_nth(I_31 + 1, maps:get("data", M_2, nil)) end end), nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_2, nil)) of true -> maps:get(I_31, maps:get("data", M_2, nil), nil); _ -> case I_31 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_2, nil)) + I_31 + 1, maps:get("data", M_2, nil)); _ -> mochi_nth(I_31 + 1, maps:get("data", M_2, nil)) end end)) + J_7 + 1, (case erlang:is_map(maps:get("data", M_2, nil)) of true -> maps:get(I_31, maps:get("data", M_2, nil), nil); _ -> case I_31 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_2, nil)) + I_31 + 1, maps:get("data", M_2, nil)); _ -> mochi_nth(I_31 + 1, maps:get("data", M_2, nil)) end end)); _ -> mochi_nth(J_7 + 1, (case erlang:is_map(maps:get("data", M_2, nil)) of true -> maps:get(I_31, maps:get("data", M_2, nil), nil); _ -> case I_31 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_2, nil)) + I_31 + 1, maps:get("data", M_2, nil)); _ -> mochi_nth(I_31 + 1, maps:get("data", M_2, nil)) end end)) end end), (case erlang:is_map(maps:get("components", V_8, nil)) of true -> maps:get(J_7, maps:get("components", V_8, nil), nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(maps:get("components", V_8, nil)) + J_7 + 1, maps:get("components", V_8, nil)); _ -> mochi_nth(J_7 + 1, maps:get("components", V_8, nil)) end end))),
            J_8 = (J_7 + 1),
            Fun_20_loop(I_31, J_8, M_2, Res_17, Sum_8, V_8);
        _ -> {I_31, J_7, M_2, Res_17, Sum_7, V_8}
    end
end,
{I_31, J_8, M_2, Res_17, Sum_8, V_8} = Fun_20(I_31, J_7, M_2, Res_17, Sum_7, V_8),
            Res_18 = vector_change_component(Res_17, I_31, Sum_8),
            I_32 = (I_31 + 1),
            Fun_21_loop(I_32, M_2, Res_18, V_8);
        _ -> {I_31, M_2, Res_17, V_8}
    end
end,
{I_32, M_2, Res_18, V_8} = Fun_21(I_31, M_2, Res_17, V_8),
        Res_18
    catch {return, RetCatch} -> RetCatch end.

matrix_mul_scalar(M_3, S_8) ->
    try
        Mat_5 = [],
        I_33 = 0,
        Fun_23 = fun Fun_23_loop(I_33, M_3, Mat_5, S_8) ->
    case (I_33 < maps:get("height", M_3, nil)) of
        true ->
            Row_5 = [],
            J_9 = 0,
            Fun_22 = fun Fun_22_loop(I_33, J_9, M_3, Mat_5, Row_5, S_8) ->
    case (J_9 < maps:get("width", M_3, nil)) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [mochi_safe_mul((case erlang:is_map((case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(I_33, maps:get("data", M_3, nil), nil); _ -> case I_33 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + I_33 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(I_33 + 1, maps:get("data", M_3, nil)) end end)) of true -> maps:get(J_9, (case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(I_33, maps:get("data", M_3, nil), nil); _ -> case I_33 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + I_33 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(I_33 + 1, maps:get("data", M_3, nil)) end end), nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(I_33, maps:get("data", M_3, nil), nil); _ -> case I_33 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + I_33 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(I_33 + 1, maps:get("data", M_3, nil)) end end)) + J_9 + 1, (case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(I_33, maps:get("data", M_3, nil), nil); _ -> case I_33 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + I_33 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(I_33 + 1, maps:get("data", M_3, nil)) end end)); _ -> mochi_nth(J_9 + 1, (case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(I_33, maps:get("data", M_3, nil), nil); _ -> case I_33 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + I_33 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(I_33 + 1, maps:get("data", M_3, nil)) end end)) end end), S_8)]),
            J_10 = (J_9 + 1),
            Fun_22_loop(I_33, J_10, M_3, Mat_5, Row_6, S_8);
        _ -> {I_33, J_9, M_3, Mat_5, Row_5, S_8}
    end
end,
{I_33, J_10, M_3, Mat_5, Row_6, S_8} = Fun_22(I_33, J_9, M_3, Mat_5, Row_5, S_8),
            Mat_6 = lists:append((case Mat_5 of nil -> []; _ -> Mat_5 end), [Row_6]),
            I_34 = (I_33 + 1),
            Fun_23_loop(I_34, M_3, Mat_6, S_8);
        _ -> {I_33, M_3, Mat_5, S_8}
    end
end,
{I_34, M_3, Mat_6, S_8} = Fun_23(I_33, M_3, Mat_5, S_8),
        #{"data" => Mat_6, "width" => maps:get("width", M_3, nil), "height" => maps:get("height", M_3, nil)}
    catch {return, RetCatch} -> RetCatch end.

matrix_component(M_4, X_5, Y_2) ->
    try
        (case erlang:is_map((case erlang:is_map(maps:get("data", M_4, nil)) of true -> maps:get(X_5, maps:get("data", M_4, nil), nil); _ -> case X_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_4, nil)) + X_5 + 1, maps:get("data", M_4, nil)); _ -> mochi_nth(X_5 + 1, maps:get("data", M_4, nil)) end end)) of true -> maps:get(Y_2, (case erlang:is_map(maps:get("data", M_4, nil)) of true -> maps:get(X_5, maps:get("data", M_4, nil), nil); _ -> case X_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_4, nil)) + X_5 + 1, maps:get("data", M_4, nil)); _ -> mochi_nth(X_5 + 1, maps:get("data", M_4, nil)) end end), nil); _ -> case Y_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_4, nil)) of true -> maps:get(X_5, maps:get("data", M_4, nil), nil); _ -> case X_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_4, nil)) + X_5 + 1, maps:get("data", M_4, nil)); _ -> mochi_nth(X_5 + 1, maps:get("data", M_4, nil)) end end)) + Y_2 + 1, (case erlang:is_map(maps:get("data", M_4, nil)) of true -> maps:get(X_5, maps:get("data", M_4, nil), nil); _ -> case X_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_4, nil)) + X_5 + 1, maps:get("data", M_4, nil)); _ -> mochi_nth(X_5 + 1, maps:get("data", M_4, nil)) end end)); _ -> mochi_nth(Y_2 + 1, (case erlang:is_map(maps:get("data", M_4, nil)) of true -> maps:get(X_5, maps:get("data", M_4, nil), nil); _ -> case X_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_4, nil)) + X_5 + 1, maps:get("data", M_4, nil)); _ -> mochi_nth(X_5 + 1, maps:get("data", M_4, nil)) end end)) end end)
    catch {return, RetCatch} -> RetCatch end.

matrix_change_component(M_5, X_6, Y_3, Value_2) ->
    try
        Data = maps:get("data", M_5, nil),
        Data_2 = lists:sublist(Data, X_6) ++ [lists:sublist(lists:nth(X_6 + 1, Data), Y_3) ++ [Value_2] ++ lists:nthtail(Y_3 + 1, lists:nth(X_6 + 1, Data))] ++ lists:nthtail(X_6 + 1, Data),
        #{"data" => Data_2, "width" => maps:get("width", M_5, nil), "height" => maps:get("height", M_5, nil)}
    catch {return, RetCatch} -> RetCatch end.

matrix_minor(M_6, X_7, Y_4) ->
    try
        case (maps:get("height", M_6, nil) /= maps:get("width", M_6, nil)) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Minor = [],
        I_35 = 0,
        Fun_26 = fun Fun_26_loop(I_35, M_6, Minor, X_7, Y_4) ->
    case (I_35 < maps:get("height", M_6, nil)) of
        true ->
            case (I_35 /= X_7) of
        true -> Row_7 = [],
            J_11 = 0,
            Fun_24 = fun Fun_24_loop(I_35, J_11, M_6, Minor, Row_7, X_7, Y_4) ->
    case (J_11 < maps:get("width", M_6, nil)) of
        true ->
            case (J_11 /= Y_4) of
        true -> Row_8 = lists:append((case Row_7 of nil -> []; _ -> Row_7 end), [(case erlang:is_map((case erlang:is_map(maps:get("data", M_6, nil)) of true -> maps:get(I_35, maps:get("data", M_6, nil), nil); _ -> case I_35 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_6, nil)) + I_35 + 1, maps:get("data", M_6, nil)); _ -> mochi_nth(I_35 + 1, maps:get("data", M_6, nil)) end end)) of true -> maps:get(J_11, (case erlang:is_map(maps:get("data", M_6, nil)) of true -> maps:get(I_35, maps:get("data", M_6, nil), nil); _ -> case I_35 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_6, nil)) + I_35 + 1, maps:get("data", M_6, nil)); _ -> mochi_nth(I_35 + 1, maps:get("data", M_6, nil)) end end), nil); _ -> case J_11 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_6, nil)) of true -> maps:get(I_35, maps:get("data", M_6, nil), nil); _ -> case I_35 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_6, nil)) + I_35 + 1, maps:get("data", M_6, nil)); _ -> mochi_nth(I_35 + 1, maps:get("data", M_6, nil)) end end)) + J_11 + 1, (case erlang:is_map(maps:get("data", M_6, nil)) of true -> maps:get(I_35, maps:get("data", M_6, nil), nil); _ -> case I_35 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_6, nil)) + I_35 + 1, maps:get("data", M_6, nil)); _ -> mochi_nth(I_35 + 1, maps:get("data", M_6, nil)) end end)); _ -> mochi_nth(J_11 + 1, (case erlang:is_map(maps:get("data", M_6, nil)) of true -> maps:get(I_35, maps:get("data", M_6, nil), nil); _ -> case I_35 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_6, nil)) + I_35 + 1, maps:get("data", M_6, nil)); _ -> mochi_nth(I_35 + 1, maps:get("data", M_6, nil)) end end)) end end)]),
            Row_9 = Row_8;
        _ -> Row_9 = Row_7
    end,
            J_12 = (J_11 + 1),
            Fun_24_loop(I_35, J_12, M_6, Minor, Row_9, X_7, Y_4);
        _ -> {I_35, J_11, M_6, Minor, Row_7, X_7, Y_4}
    end
end,
{I_35, J_12, M_6, Minor, Row_9, X_7, Y_4} = Fun_24(I_35, J_11, M_6, Minor, Row_7, X_7, Y_4),
            Minor_2 = lists:append((case Minor of nil -> []; _ -> Minor end), [Row_9]),
            Fun_25 = Fun_24,
            J_13 = J_12,
            Minor_3 = Minor_2,
            Row_10 = Row_9;
        _ -> Fun_25 = nil,
            J_13 = nil,
            Minor_3 = Minor,
            Row_10 = nil
    end,
            I_36 = (I_35 + 1),
            Fun_26_loop(I_36, M_6, Minor_3, X_7, Y_4);
        _ -> {I_35, M_6, Minor, X_7, Y_4}
    end
end,
{I_36, M_6, Minor_3, X_7, Y_4} = Fun_26(I_35, M_6, Minor, X_7, Y_4),
        Sub = #{"data" => Minor_3, "width" => (maps:get("width", M_6, nil) - 1), "height" => (maps:get("height", M_6, nil) - 1)},
        matrix_determinant(Sub)
    catch {return, RetCatch} -> RetCatch end.

matrix_cofactor(M_7, X_8, Y_5) ->
    try
        Sign = (case (mochi_mod((X_8 + Y_5), 2) == 0) of
    true -> 1.0;
    _ -> -1.0
end),
        mochi_safe_mul(Sign, matrix_minor(M_7, X_8, Y_5))
    catch {return, RetCatch} -> RetCatch end.

matrix_determinant(M_8) ->
    try
        case (maps:get("height", M_8, nil) /= maps:get("width", M_8, nil)) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        case (maps:get("height", M_8, nil) == 0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        case (maps:get("height", M_8, nil) == 1) of
        true -> throw({return, (case erlang:is_map((case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)) of true -> maps:get(0, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)) + 0 + 1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)) end end)});
        _ -> ok
    end,
        case (maps:get("height", M_8, nil) == 2) of
        true -> throw({return, (mochi_safe_mul((case erlang:is_map((case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)) of true -> maps:get(0, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)) + 0 + 1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)) end end), (case erlang:is_map((case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(1, maps:get("data", M_8, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 1 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_8, nil)) end end)) of true -> maps:get(1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(1, maps:get("data", M_8, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 1 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_8, nil)) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(1, maps:get("data", M_8, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 1 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_8, nil)) end end)) + 1 + 1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(1, maps:get("data", M_8, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 1 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_8, nil)) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(1, maps:get("data", M_8, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 1 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_8, nil)) end end)) end end)) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)) of true -> maps:get(1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)) + 1 + 1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)) end end), (case erlang:is_map((case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(1, maps:get("data", M_8, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 1 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_8, nil)) end end)) of true -> maps:get(0, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(1, maps:get("data", M_8, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 1 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_8, nil)) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(1, maps:get("data", M_8, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 1 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_8, nil)) end end)) + 0 + 1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(1, maps:get("data", M_8, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 1 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_8, nil)) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(1, maps:get("data", M_8, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 1 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_8, nil)) end end)) end end)))});
        _ -> ok
    end,
        Sum_9 = 0.0,
        Y_6 = 0,
        Fun_27 = fun Fun_27_loop(M_8, Sum_9, Y_6) ->
    case (Y_6 < maps:get("width", M_8, nil)) of
        true ->
            Sum_10 = (Sum_9 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)) of true -> maps:get(Y_6, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end), nil); _ -> case Y_6 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)) + Y_6 + 1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)); _ -> mochi_nth(Y_6 + 1, (case erlang:is_map(maps:get("data", M_8, nil)) of true -> maps:get(0, maps:get("data", M_8, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_8, nil)) + 0 + 1, maps:get("data", M_8, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_8, nil)) end end)) end end), matrix_cofactor(M_8, 0, Y_6))),
            Y_7 = (Y_6 + 1),
            Fun_27_loop(M_8, Sum_10, Y_7);
        _ -> {M_8, Sum_9, Y_6}
    end
end,
{M_8, Sum_10, Y_7} = Fun_27(M_8, Sum_9, Y_6),
        Sum_10
    catch {return, RetCatch} -> RetCatch end.

square_zero_matrix(N_4) ->
    try
        Mat_7 = [],
        I_37 = 0,
        Fun_29 = fun Fun_29_loop(I_37, Mat_7, N_4) ->
    case (I_37 < N_4) of
        true ->
            Row_11 = [],
            J_14 = 0,
            Fun_28 = fun Fun_28_loop(I_37, J_14, Mat_7, N_4, Row_11) ->
    case (J_14 < N_4) of
        true ->
            Row_12 = lists:append((case Row_11 of nil -> []; _ -> Row_11 end), [0.0]),
            J_15 = (J_14 + 1),
            Fun_28_loop(I_37, J_15, Mat_7, N_4, Row_12);
        _ -> {I_37, J_14, Mat_7, N_4, Row_11}
    end
end,
{I_37, J_15, Mat_7, N_4, Row_12} = Fun_28(I_37, J_14, Mat_7, N_4, Row_11),
            Mat_8 = lists:append((case Mat_7 of nil -> []; _ -> Mat_7 end), [Row_12]),
            I_38 = (I_37 + 1),
            Fun_29_loop(I_38, Mat_8, N_4);
        _ -> {I_37, Mat_7, N_4}
    end
end,
{I_38, Mat_8, N_4} = Fun_29(I_37, Mat_7, N_4),
        #{"data" => Mat_8, "width" => N_4, "height" => N_4}
    catch {return, RetCatch} -> RetCatch end.

random_matrix(W, H, A_10, B_10) ->
    try
        Mat_9 = [],
        I_39 = 0,
        Fun_31 = fun Fun_31_loop(A_10, B_10, H, I_39, Mat_9, W) ->
    case (I_39 < H) of
        true ->
            Row_13 = [],
            J_16 = 0,
            Fun_30 = fun Fun_30_loop(A_10, B_10, H, I_39, J_16, Mat_9, Row_13, W) ->
    case (J_16 < W) of
        true ->
            Row_14 = lists:append((case Row_13 of nil -> []; _ -> Row_13 end), [float(random_int(A_10, B_10))]),
            J_17 = (J_16 + 1),
            Fun_30_loop(A_10, B_10, H, I_39, J_17, Mat_9, Row_14, W);
        _ -> {A_10, B_10, H, I_39, J_16, Mat_9, Row_13, W}
    end
end,
{A_10, B_10, H, I_39, J_17, Mat_9, Row_14, W} = Fun_30(A_10, B_10, H, I_39, J_16, Mat_9, Row_13, W),
            Mat_10 = lists:append((case Mat_9 of nil -> []; _ -> Mat_9 end), [Row_14]),
            I_40 = (I_39 + 1),
            Fun_31_loop(A_10, B_10, H, I_40, Mat_10, W);
        _ -> {A_10, B_10, H, I_39, Mat_9, W}
    end
end,
{A_10, B_10, H, I_40, Mat_10, W} = Fun_31(A_10, B_10, H, I_39, Mat_9, W),
        #{"data" => Mat_10, "width" => W, "height" => H}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        V1 = #{"components" => [1.0, 2.0, 3.0]},
        V2 = #{"components" => [4.0, 5.0, 6.0]},
        io:format("~ts~n", [mochi_repr(vector_to_string(vector_add(V1, V2)))]),
        io:format("~ts~n", [mochi_str(vector_dot(V1, V2))]),
        io:format("~ts~n", [mochi_str(vector_euclidean_length(V1))]),
        M_9 = #{"data" => [[1.0, 2.0], [3.0, 4.0]], "width" => 2, "height" => 2},
        io:format("~ts~n", [mochi_str(matrix_determinant(M_9))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('seed', 123456789),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
