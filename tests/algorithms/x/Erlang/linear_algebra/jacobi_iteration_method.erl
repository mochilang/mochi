#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, absf/1, strictly_diagonally_dominant/1, jacobi_iteration_method/4]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

absf(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

strictly_diagonally_dominant(Matrix) ->
    try
        N = erlang:length(Matrix),
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Matrix, N) ->
    case (I < N) of
        true ->
            Sum = 0.0,
            J = 0,
            Fun = fun Fun_loop(I, J, Matrix, N, Sum) ->
    case (J < N) of
        true ->
            case (I /= J) of
        true -> Sum_2 = (Sum + absf((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)) of true -> maps:get(J, (case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)) + J + 1, (case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)) end end))),
            Sum_3 = Sum_2;
        _ -> Sum_3 = Sum
    end,
            J_2 = (J + 1),
            Fun_loop(I, J_2, Matrix, N, Sum_3);
        _ -> {I, J, Matrix, N, Sum}
    end
end,
{I, J_2, Matrix, N, Sum_3} = Fun(I, J, Matrix, N, Sum),
            case (absf((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)) of true -> maps:get(I, (case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)) + I + 1, (case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)); _ -> mochi_nth(I + 1, (case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)) end end)) =< Sum_3) of
        true -> erlang:error({panic, "Coefficient matrix is not strictly diagonally dominant"});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_2_loop(I_2, Matrix, N);
        _ -> {I, Matrix, N}
    end
end,
{I_2, Matrix, N} = Fun_2(I, Matrix, N),
        true
    catch {return, RetCatch} -> RetCatch end.

jacobi_iteration_method(Coefficient, Constant, Init_val, Iterations) ->
    try
        N_2 = erlang:length(Coefficient),
        case (N_2 == 0) of
        true -> erlang:error({panic, "Coefficient matrix cannot be empty"});
        _ -> ok
    end,
        case (erlang:length(Constant) /= N_2) of
        true -> erlang:error({panic, "Constant vector length must equal number of rows in coefficient matrix"});
        _ -> ok
    end,
        case (erlang:length(Init_val) /= N_2) of
        true -> erlang:error({panic, "Initial values count must match matrix size"});
        _ -> ok
    end,
        R = 0,
        Fun_3 = fun Fun_3_loop(Coefficient, Constant, Init_val, Iterations, N_2, R) ->
    case (R < N_2) of
        true ->
            case (erlang:length((case erlang:is_map(Coefficient) of true -> maps:get(R, Coefficient, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Coefficient) + R + 1, Coefficient); _ -> mochi_nth(R + 1, Coefficient) end end)) /= N_2) of
        true -> erlang:error({panic, "Coefficient matrix must be square"});
        _ -> ok
    end,
            R_2 = (R + 1),
            Fun_3_loop(Coefficient, Constant, Init_val, Iterations, N_2, R_2);
        _ -> {Coefficient, Constant, Init_val, Iterations, N_2, R}
    end
end,
{Coefficient, Constant, Init_val, Iterations, N_2, R_2} = Fun_3(Coefficient, Constant, Init_val, Iterations, N_2, R),
        case (Iterations =< 0) of
        true -> erlang:error({panic, "Iterations must be at least 1"});
        _ -> ok
    end,
        strictly_diagonally_dominant(Coefficient),
        X_2 = Init_val,
        K = 0,
        Fun_6 = fun Fun_6_loop(Coefficient, Constant, Init_val, Iterations, K, N_2, R_2, X_2) ->
    case (K < Iterations) of
        true ->
            New_x = [],
            I_3 = 0,
            Fun_5 = fun Fun_5_loop(Coefficient, Constant, I_3, Init_val, Iterations, K, N_2, New_x, R_2, X_2) ->
    case (I_3 < N_2) of
        true ->
            Sum_4 = 0.0,
            J_3 = 0,
            Fun_4 = fun Fun_4_loop(Coefficient, Constant, I_3, Init_val, Iterations, J_3, K, N_2, New_x, R_2, Sum_4, X_2) ->
    case (J_3 < N_2) of
        true ->
            case (I_3 /= J_3) of
        true -> Sum_5 = (Sum_4 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(Coefficient) of true -> maps:get(I_3, Coefficient, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficient) + I_3 + 1, Coefficient); _ -> mochi_nth(I_3 + 1, Coefficient) end end)) of true -> maps:get(J_3, (case erlang:is_map(Coefficient) of true -> maps:get(I_3, Coefficient, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficient) + I_3 + 1, Coefficient); _ -> mochi_nth(I_3 + 1, Coefficient) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Coefficient) of true -> maps:get(I_3, Coefficient, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficient) + I_3 + 1, Coefficient); _ -> mochi_nth(I_3 + 1, Coefficient) end end)) + J_3 + 1, (case erlang:is_map(Coefficient) of true -> maps:get(I_3, Coefficient, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficient) + I_3 + 1, Coefficient); _ -> mochi_nth(I_3 + 1, Coefficient) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Coefficient) of true -> maps:get(I_3, Coefficient, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficient) + I_3 + 1, Coefficient); _ -> mochi_nth(I_3 + 1, Coefficient) end end)) end end), (case erlang:is_map(X_2) of true -> maps:get(J_3, X_2, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(X_2) + J_3 + 1, X_2); _ -> mochi_nth(J_3 + 1, X_2) end end))),
            Sum_6 = Sum_5;
        _ -> Sum_6 = Sum_4
    end,
            J_4 = (J_3 + 1),
            Fun_4_loop(Coefficient, Constant, I_3, Init_val, Iterations, J_4, K, N_2, New_x, R_2, Sum_6, X_2);
        _ -> {Coefficient, Constant, I_3, Init_val, Iterations, J_3, K, N_2, New_x, R_2, Sum_4, X_2}
    end
end,
{Coefficient, Constant, I_3, Init_val, Iterations, J_4, K, N_2, New_x, R_2, Sum_6, X_2} = Fun_4(Coefficient, Constant, I_3, Init_val, Iterations, J_3, K, N_2, New_x, R_2, Sum_4, X_2),
            Value = mochi_safe_div(((case erlang:is_map(Constant) of true -> maps:get(I_3, Constant, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Constant) + I_3 + 1, Constant); _ -> mochi_nth(I_3 + 1, Constant) end end) - Sum_6), (case erlang:is_map((case erlang:is_map(Coefficient) of true -> maps:get(I_3, Coefficient, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficient) + I_3 + 1, Coefficient); _ -> mochi_nth(I_3 + 1, Coefficient) end end)) of true -> maps:get(I_3, (case erlang:is_map(Coefficient) of true -> maps:get(I_3, Coefficient, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficient) + I_3 + 1, Coefficient); _ -> mochi_nth(I_3 + 1, Coefficient) end end), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Coefficient) of true -> maps:get(I_3, Coefficient, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficient) + I_3 + 1, Coefficient); _ -> mochi_nth(I_3 + 1, Coefficient) end end)) + I_3 + 1, (case erlang:is_map(Coefficient) of true -> maps:get(I_3, Coefficient, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficient) + I_3 + 1, Coefficient); _ -> mochi_nth(I_3 + 1, Coefficient) end end)); _ -> mochi_nth(I_3 + 1, (case erlang:is_map(Coefficient) of true -> maps:get(I_3, Coefficient, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficient) + I_3 + 1, Coefficient); _ -> mochi_nth(I_3 + 1, Coefficient) end end)) end end)),
            New_x_2 = lists:append((case New_x of nil -> []; _ -> New_x end), [Value]),
            I_4 = (I_3 + 1),
            Fun_5_loop(Coefficient, Constant, I_4, Init_val, Iterations, K, N_2, New_x_2, R_2, X_2);
        _ -> {Coefficient, Constant, I_3, Init_val, Iterations, K, N_2, New_x, R_2, X_2}
    end
end,
{Coefficient, Constant, I_4, Init_val, Iterations, K, N_2, New_x_2, R_2, X_2} = Fun_5(Coefficient, Constant, I_3, Init_val, Iterations, K, N_2, New_x, R_2, X_2),
            X_3 = New_x_2,
            K_2 = (K + 1),
            Fun_6_loop(Coefficient, Constant, Init_val, Iterations, K_2, N_2, R_2, X_3);
        _ -> {Coefficient, Constant, Init_val, Iterations, K, N_2, R_2, X_2}
    end
end,
{Coefficient, Constant, Init_val, Iterations, K_2, N_2, R_2, X_3} = Fun_6(Coefficient, Constant, Init_val, Iterations, K, N_2, R_2, X_2),
        X_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('coefficient', [[4.0, 1.0, 1.0], [1.0, 5.0, 2.0], [1.0, 2.0, 4.0]]),
    erlang:put('constant', [2.0, -6.0, -4.0]),
    erlang:put('init_val', [0.5, -0.5, -0.5]),
    erlang:put('iterations', 3),
    erlang:put('result', jacobi_iteration_method(erlang:get('coefficient'), erlang:get('constant'), erlang:get('init_val'), 3)),
    io:format("~ts~n", [mochi_repr(erlang:get('result'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
