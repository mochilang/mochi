#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, retroactive_resolution/2, gaussian_elimination/2]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

retroactive_resolution(Coefficients, Vector) ->
    try
        Rows = erlang:length(Coefficients),
        X = [],
        I = 0,
        Fun = fun Fun_loop(Coefficients, I, Rows, Vector, X) ->
    case (I < Rows) of
        true ->
            Inner = [],
            Inner_2 = lists:append((case Inner of nil -> []; _ -> Inner end), [0.0]),
            X_2 = lists:append((case X of nil -> []; _ -> X end), [Inner_2]),
            I_2 = (I + 1),
            Fun_loop(Coefficients, I_2, Rows, Vector, X_2);
        _ -> {Coefficients, I, Rows, Vector, X}
    end
end,
{Coefficients, I_2, Rows, Vector, X_2} = Fun(Coefficients, I, Rows, Vector, X),
        R = (Rows - 1),
        Fun_3 = fun Fun_3_loop(Coefficients, I_2, R, Rows, Vector, X_2) ->
    case (R >= 0) of
        true ->
            Total = 0.0,
            C = (R + 1),
            Fun_2 = fun Fun_2_loop(C, Coefficients, I_2, R, Rows, Total, Vector, X_2) ->
    case (C < Rows) of
        true ->
            Total_2 = (Total + mochi_safe_mul((case erlang:is_map((case erlang:is_map(Coefficients) of true -> maps:get(R, Coefficients, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Coefficients) + R + 1, Coefficients); _ -> mochi_nth(R + 1, Coefficients) end end)) of true -> maps:get(C, (case erlang:is_map(Coefficients) of true -> maps:get(R, Coefficients, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Coefficients) + R + 1, Coefficients); _ -> mochi_nth(R + 1, Coefficients) end end), nil); _ -> case C < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Coefficients) of true -> maps:get(R, Coefficients, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Coefficients) + R + 1, Coefficients); _ -> mochi_nth(R + 1, Coefficients) end end)) + C + 1, (case erlang:is_map(Coefficients) of true -> maps:get(R, Coefficients, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Coefficients) + R + 1, Coefficients); _ -> mochi_nth(R + 1, Coefficients) end end)); _ -> mochi_nth(C + 1, (case erlang:is_map(Coefficients) of true -> maps:get(R, Coefficients, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Coefficients) + R + 1, Coefficients); _ -> mochi_nth(R + 1, Coefficients) end end)) end end), (case erlang:is_map((case erlang:is_map(X_2) of true -> maps:get(C, X_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(X_2) + C + 1, X_2); _ -> mochi_nth(C + 1, X_2) end end)) of true -> maps:get(0, (case erlang:is_map(X_2) of true -> maps:get(C, X_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(X_2) + C + 1, X_2); _ -> mochi_nth(C + 1, X_2) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(X_2) of true -> maps:get(C, X_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(X_2) + C + 1, X_2); _ -> mochi_nth(C + 1, X_2) end end)) + 0 + 1, (case erlang:is_map(X_2) of true -> maps:get(C, X_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(X_2) + C + 1, X_2); _ -> mochi_nth(C + 1, X_2) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(X_2) of true -> maps:get(C, X_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(X_2) + C + 1, X_2); _ -> mochi_nth(C + 1, X_2) end end)) end end))),
            C_2 = (C + 1),
            Fun_2_loop(C_2, Coefficients, I_2, R, Rows, Total_2, Vector, X_2);
        _ -> {C, Coefficients, I_2, R, Rows, Total, Vector, X_2}
    end
end,
{C_2, Coefficients, I_2, R, Rows, Total_2, Vector, X_2} = Fun_2(C, Coefficients, I_2, R, Rows, Total, Vector, X_2),
            X_3 = lists:sublist(X_2, R) ++ [lists:sublist(lists:nth(R + 1, X_2), 0) ++ [mochi_safe_div(((case erlang:is_map((case erlang:is_map(Vector) of true -> maps:get(R, Vector, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Vector) + R + 1, Vector); _ -> mochi_nth(R + 1, Vector) end end)) of true -> maps:get(0, (case erlang:is_map(Vector) of true -> maps:get(R, Vector, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Vector) + R + 1, Vector); _ -> mochi_nth(R + 1, Vector) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Vector) of true -> maps:get(R, Vector, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Vector) + R + 1, Vector); _ -> mochi_nth(R + 1, Vector) end end)) + 0 + 1, (case erlang:is_map(Vector) of true -> maps:get(R, Vector, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Vector) + R + 1, Vector); _ -> mochi_nth(R + 1, Vector) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Vector) of true -> maps:get(R, Vector, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Vector) + R + 1, Vector); _ -> mochi_nth(R + 1, Vector) end end)) end end) - Total_2), (case erlang:is_map((case erlang:is_map(Coefficients) of true -> maps:get(R, Coefficients, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Coefficients) + R + 1, Coefficients); _ -> mochi_nth(R + 1, Coefficients) end end)) of true -> maps:get(R, (case erlang:is_map(Coefficients) of true -> maps:get(R, Coefficients, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Coefficients) + R + 1, Coefficients); _ -> mochi_nth(R + 1, Coefficients) end end), nil); _ -> case R < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Coefficients) of true -> maps:get(R, Coefficients, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Coefficients) + R + 1, Coefficients); _ -> mochi_nth(R + 1, Coefficients) end end)) + R + 1, (case erlang:is_map(Coefficients) of true -> maps:get(R, Coefficients, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Coefficients) + R + 1, Coefficients); _ -> mochi_nth(R + 1, Coefficients) end end)); _ -> mochi_nth(R + 1, (case erlang:is_map(Coefficients) of true -> maps:get(R, Coefficients, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Coefficients) + R + 1, Coefficients); _ -> mochi_nth(R + 1, Coefficients) end end)) end end))] ++ lists:nthtail(0 + 1, lists:nth(R + 1, X_2))] ++ lists:nthtail(R + 1, X_2),
            R_2 = (R - 1),
            Fun_3_loop(Coefficients, I_2, R_2, Rows, Vector, X_3);
        _ -> {Coefficients, I_2, R, Rows, Vector, X_2}
    end
end,
{Coefficients, I_2, R_2, Rows, Vector, X_3} = Fun_3(Coefficients, I_2, R, Rows, Vector, X_2),
        X_3
    catch {return, RetCatch} -> RetCatch end.

gaussian_elimination(Coefficients_2, Vector_2) ->
    try
        Rows_2 = erlang:length(Coefficients_2),
        Columns = erlang:length((case erlang:is_map(Coefficients_2) of true -> maps:get(0, Coefficients_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Coefficients_2) + 0 + 1, Coefficients_2); _ -> mochi_nth(0 + 1, Coefficients_2) end end)),
        case (Rows_2 /= Columns) of
        true -> throw({return, []});
        _ -> ok
    end,
        Augmented = [],
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(Augmented, Coefficients_2, Columns, I_3, Rows_2, Vector_2) ->
    case (I_3 < Rows_2) of
        true ->
            Row = [],
            J = 0,
            Fun_4 = fun Fun_4_loop(Augmented, Coefficients_2, Columns, I_3, J, Row, Rows_2, Vector_2) ->
    case (J < Columns) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [(case erlang:is_map((case erlang:is_map(Coefficients_2) of true -> maps:get(I_3, Coefficients_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficients_2) + I_3 + 1, Coefficients_2); _ -> mochi_nth(I_3 + 1, Coefficients_2) end end)) of true -> maps:get(J, (case erlang:is_map(Coefficients_2) of true -> maps:get(I_3, Coefficients_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficients_2) + I_3 + 1, Coefficients_2); _ -> mochi_nth(I_3 + 1, Coefficients_2) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Coefficients_2) of true -> maps:get(I_3, Coefficients_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficients_2) + I_3 + 1, Coefficients_2); _ -> mochi_nth(I_3 + 1, Coefficients_2) end end)) + J + 1, (case erlang:is_map(Coefficients_2) of true -> maps:get(I_3, Coefficients_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficients_2) + I_3 + 1, Coefficients_2); _ -> mochi_nth(I_3 + 1, Coefficients_2) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Coefficients_2) of true -> maps:get(I_3, Coefficients_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coefficients_2) + I_3 + 1, Coefficients_2); _ -> mochi_nth(I_3 + 1, Coefficients_2) end end)) end end)]),
            J_2 = (J + 1),
            Fun_4_loop(Augmented, Coefficients_2, Columns, I_3, J_2, Row_2, Rows_2, Vector_2);
        _ -> {Augmented, Coefficients_2, Columns, I_3, J, Row, Rows_2, Vector_2}
    end
end,
{Augmented, Coefficients_2, Columns, I_3, J_2, Row_2, Rows_2, Vector_2} = Fun_4(Augmented, Coefficients_2, Columns, I_3, J, Row, Rows_2, Vector_2),
            Row_3 = lists:append((case Row_2 of nil -> []; _ -> Row_2 end), [(case erlang:is_map((case erlang:is_map(Vector_2) of true -> maps:get(I_3, Vector_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Vector_2) + I_3 + 1, Vector_2); _ -> mochi_nth(I_3 + 1, Vector_2) end end)) of true -> maps:get(0, (case erlang:is_map(Vector_2) of true -> maps:get(I_3, Vector_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Vector_2) + I_3 + 1, Vector_2); _ -> mochi_nth(I_3 + 1, Vector_2) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Vector_2) of true -> maps:get(I_3, Vector_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Vector_2) + I_3 + 1, Vector_2); _ -> mochi_nth(I_3 + 1, Vector_2) end end)) + 0 + 1, (case erlang:is_map(Vector_2) of true -> maps:get(I_3, Vector_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Vector_2) + I_3 + 1, Vector_2); _ -> mochi_nth(I_3 + 1, Vector_2) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Vector_2) of true -> maps:get(I_3, Vector_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Vector_2) + I_3 + 1, Vector_2); _ -> mochi_nth(I_3 + 1, Vector_2) end end)) end end)]),
            Augmented_2 = lists:append((case Augmented of nil -> []; _ -> Augmented end), [Row_3]),
            I_4 = (I_3 + 1),
            Fun_5_loop(Augmented_2, Coefficients_2, Columns, I_4, Rows_2, Vector_2);
        _ -> {Augmented, Coefficients_2, Columns, I_3, Rows_2, Vector_2}
    end
end,
{Augmented_2, Coefficients_2, Columns, I_4, Rows_2, Vector_2} = Fun_5(Augmented, Coefficients_2, Columns, I_3, Rows_2, Vector_2),
        Row_idx = 0,
        Fun_8 = fun Fun_8_loop(Augmented_2, Coefficients_2, Columns, I_4, Row_idx, Rows_2, Vector_2) ->
    case (Row_idx < (Rows_2 - 1)) of
        true ->
            Pivot = (case erlang:is_map((case erlang:is_map(Augmented_2) of true -> maps:get(Row_idx, Augmented_2, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Row_idx + 1, Augmented_2); _ -> mochi_nth(Row_idx + 1, Augmented_2) end end)) of true -> maps:get(Row_idx, (case erlang:is_map(Augmented_2) of true -> maps:get(Row_idx, Augmented_2, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Row_idx + 1, Augmented_2); _ -> mochi_nth(Row_idx + 1, Augmented_2) end end), nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Augmented_2) of true -> maps:get(Row_idx, Augmented_2, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Row_idx + 1, Augmented_2); _ -> mochi_nth(Row_idx + 1, Augmented_2) end end)) + Row_idx + 1, (case erlang:is_map(Augmented_2) of true -> maps:get(Row_idx, Augmented_2, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Row_idx + 1, Augmented_2); _ -> mochi_nth(Row_idx + 1, Augmented_2) end end)); _ -> mochi_nth(Row_idx + 1, (case erlang:is_map(Augmented_2) of true -> maps:get(Row_idx, Augmented_2, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Row_idx + 1, Augmented_2); _ -> mochi_nth(Row_idx + 1, Augmented_2) end end)) end end),
            Col = (Row_idx + 1),
            Fun_7 = fun Fun_7_loop(Augmented_2, Coefficients_2, Col, Columns, I_4, Pivot, Row_idx, Rows_2, Vector_2) ->
    case (Col < Rows_2) of
        true ->
            Factor = mochi_safe_div((case erlang:is_map((case erlang:is_map(Augmented_2) of true -> maps:get(Col, Augmented_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Col + 1, Augmented_2); _ -> mochi_nth(Col + 1, Augmented_2) end end)) of true -> maps:get(Row_idx, (case erlang:is_map(Augmented_2) of true -> maps:get(Col, Augmented_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Col + 1, Augmented_2); _ -> mochi_nth(Col + 1, Augmented_2) end end), nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Augmented_2) of true -> maps:get(Col, Augmented_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Col + 1, Augmented_2); _ -> mochi_nth(Col + 1, Augmented_2) end end)) + Row_idx + 1, (case erlang:is_map(Augmented_2) of true -> maps:get(Col, Augmented_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Col + 1, Augmented_2); _ -> mochi_nth(Col + 1, Augmented_2) end end)); _ -> mochi_nth(Row_idx + 1, (case erlang:is_map(Augmented_2) of true -> maps:get(Col, Augmented_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Col + 1, Augmented_2); _ -> mochi_nth(Col + 1, Augmented_2) end end)) end end), Pivot),
            K = Row_idx,
            Fun_6 = fun Fun_6_loop(Augmented_2, Coefficients_2, Col, Columns, Factor, I_4, K, Pivot, Row_idx, Rows_2, Vector_2) ->
    case (K < (Columns + 1)) of
        true ->
            Augmented_3 = lists:sublist(Augmented_2, Col) ++ [lists:sublist(lists:nth(Col + 1, Augmented_2), K) ++ [((case erlang:is_map((case erlang:is_map(Augmented_2) of true -> maps:get(Col, Augmented_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Col + 1, Augmented_2); _ -> mochi_nth(Col + 1, Augmented_2) end end)) of true -> maps:get(K, (case erlang:is_map(Augmented_2) of true -> maps:get(Col, Augmented_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Col + 1, Augmented_2); _ -> mochi_nth(Col + 1, Augmented_2) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Augmented_2) of true -> maps:get(Col, Augmented_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Col + 1, Augmented_2); _ -> mochi_nth(Col + 1, Augmented_2) end end)) + K + 1, (case erlang:is_map(Augmented_2) of true -> maps:get(Col, Augmented_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Col + 1, Augmented_2); _ -> mochi_nth(Col + 1, Augmented_2) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(Augmented_2) of true -> maps:get(Col, Augmented_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Col + 1, Augmented_2); _ -> mochi_nth(Col + 1, Augmented_2) end end)) end end) - mochi_safe_mul(Factor, (case erlang:is_map((case erlang:is_map(Augmented_2) of true -> maps:get(Row_idx, Augmented_2, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Row_idx + 1, Augmented_2); _ -> mochi_nth(Row_idx + 1, Augmented_2) end end)) of true -> maps:get(K, (case erlang:is_map(Augmented_2) of true -> maps:get(Row_idx, Augmented_2, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Row_idx + 1, Augmented_2); _ -> mochi_nth(Row_idx + 1, Augmented_2) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Augmented_2) of true -> maps:get(Row_idx, Augmented_2, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Row_idx + 1, Augmented_2); _ -> mochi_nth(Row_idx + 1, Augmented_2) end end)) + K + 1, (case erlang:is_map(Augmented_2) of true -> maps:get(Row_idx, Augmented_2, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Row_idx + 1, Augmented_2); _ -> mochi_nth(Row_idx + 1, Augmented_2) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(Augmented_2) of true -> maps:get(Row_idx, Augmented_2, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Augmented_2) + Row_idx + 1, Augmented_2); _ -> mochi_nth(Row_idx + 1, Augmented_2) end end)) end end)))] ++ lists:nthtail(K + 1, lists:nth(Col + 1, Augmented_2))] ++ lists:nthtail(Col + 1, Augmented_2),
            K_2 = (K + 1),
            Fun_6_loop(Augmented_3, Coefficients_2, Col, Columns, Factor, I_4, K_2, Pivot, Row_idx, Rows_2, Vector_2);
        _ -> {Augmented_2, Coefficients_2, Col, Columns, Factor, I_4, K, Pivot, Row_idx, Rows_2, Vector_2}
    end
end,
{Augmented_3, Coefficients_2, Col, Columns, Factor, I_4, K_2, Pivot, Row_idx, Rows_2, Vector_2} = Fun_6(Augmented_2, Coefficients_2, Col, Columns, Factor, I_4, K, Pivot, Row_idx, Rows_2, Vector_2),
            Col_2 = (Col + 1),
            Fun_7_loop(Augmented_3, Coefficients_2, Col_2, Columns, I_4, Pivot, Row_idx, Rows_2, Vector_2);
        _ -> {Augmented_2, Coefficients_2, Col, Columns, I_4, Pivot, Row_idx, Rows_2, Vector_2}
    end
end,
{Augmented_3, Coefficients_2, Col_2, Columns, I_4, Pivot, Row_idx, Rows_2, Vector_2} = Fun_7(Augmented_2, Coefficients_2, Col, Columns, I_4, Pivot, Row_idx, Rows_2, Vector_2),
            Row_idx_2 = (Row_idx + 1),
            Fun_8_loop(Augmented_3, Coefficients_2, Columns, I_4, Row_idx_2, Rows_2, Vector_2);
        _ -> {Augmented_2, Coefficients_2, Columns, I_4, Row_idx, Rows_2, Vector_2}
    end
end,
{Augmented_3, Coefficients_2, Columns, I_4, Row_idx_2, Rows_2, Vector_2} = Fun_8(Augmented_2, Coefficients_2, Columns, I_4, Row_idx, Rows_2, Vector_2),
        Coeffs = [],
        Vec = [],
        R_3 = 0,
        Fun_10 = fun Fun_10_loop(Augmented_3, Coefficients_2, Coeffs, Columns, I_4, R_3, Row_idx_2, Rows_2, Vec, Vector_2) ->
    case (R_3 < Rows_2) of
        true ->
            Row_4 = [],
            C_3 = 0,
            Fun_9 = fun Fun_9_loop(Augmented_3, C_3, Coefficients_2, Coeffs, Columns, I_4, R_3, Row_4, Row_idx_2, Rows_2, Vec, Vector_2) ->
    case (C_3 < Columns) of
        true ->
            Row_5 = lists:append((case Row_4 of nil -> []; _ -> Row_4 end), [(case erlang:is_map((case erlang:is_map(Augmented_3) of true -> maps:get(R_3, Augmented_3, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Augmented_3) + R_3 + 1, Augmented_3); _ -> mochi_nth(R_3 + 1, Augmented_3) end end)) of true -> maps:get(C_3, (case erlang:is_map(Augmented_3) of true -> maps:get(R_3, Augmented_3, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Augmented_3) + R_3 + 1, Augmented_3); _ -> mochi_nth(R_3 + 1, Augmented_3) end end), nil); _ -> case C_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Augmented_3) of true -> maps:get(R_3, Augmented_3, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Augmented_3) + R_3 + 1, Augmented_3); _ -> mochi_nth(R_3 + 1, Augmented_3) end end)) + C_3 + 1, (case erlang:is_map(Augmented_3) of true -> maps:get(R_3, Augmented_3, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Augmented_3) + R_3 + 1, Augmented_3); _ -> mochi_nth(R_3 + 1, Augmented_3) end end)); _ -> mochi_nth(C_3 + 1, (case erlang:is_map(Augmented_3) of true -> maps:get(R_3, Augmented_3, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Augmented_3) + R_3 + 1, Augmented_3); _ -> mochi_nth(R_3 + 1, Augmented_3) end end)) end end)]),
            C_4 = (C_3 + 1),
            Fun_9_loop(Augmented_3, C_4, Coefficients_2, Coeffs, Columns, I_4, R_3, Row_5, Row_idx_2, Rows_2, Vec, Vector_2);
        _ -> {Augmented_3, C_3, Coefficients_2, Coeffs, Columns, I_4, R_3, Row_4, Row_idx_2, Rows_2, Vec, Vector_2}
    end
end,
{Augmented_3, C_4, Coefficients_2, Coeffs, Columns, I_4, R_3, Row_5, Row_idx_2, Rows_2, Vec, Vector_2} = Fun_9(Augmented_3, C_3, Coefficients_2, Coeffs, Columns, I_4, R_3, Row_4, Row_idx_2, Rows_2, Vec, Vector_2),
            Coeffs_2 = lists:append((case Coeffs of nil -> []; _ -> Coeffs end), [Row_5]),
            Vec_2 = lists:append((case Vec of nil -> []; _ -> Vec end), [[(case erlang:is_map((case erlang:is_map(Augmented_3) of true -> maps:get(R_3, Augmented_3, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Augmented_3) + R_3 + 1, Augmented_3); _ -> mochi_nth(R_3 + 1, Augmented_3) end end)) of true -> maps:get(Columns, (case erlang:is_map(Augmented_3) of true -> maps:get(R_3, Augmented_3, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Augmented_3) + R_3 + 1, Augmented_3); _ -> mochi_nth(R_3 + 1, Augmented_3) end end), nil); _ -> case Columns < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Augmented_3) of true -> maps:get(R_3, Augmented_3, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Augmented_3) + R_3 + 1, Augmented_3); _ -> mochi_nth(R_3 + 1, Augmented_3) end end)) + Columns + 1, (case erlang:is_map(Augmented_3) of true -> maps:get(R_3, Augmented_3, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Augmented_3) + R_3 + 1, Augmented_3); _ -> mochi_nth(R_3 + 1, Augmented_3) end end)); _ -> mochi_nth(Columns + 1, (case erlang:is_map(Augmented_3) of true -> maps:get(R_3, Augmented_3, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(Augmented_3) + R_3 + 1, Augmented_3); _ -> mochi_nth(R_3 + 1, Augmented_3) end end)) end end)]]),
            R_4 = (R_3 + 1),
            Fun_10_loop(Augmented_3, Coefficients_2, Coeffs_2, Columns, I_4, R_4, Row_idx_2, Rows_2, Vec_2, Vector_2);
        _ -> {Augmented_3, Coefficients_2, Coeffs, Columns, I_4, R_3, Row_idx_2, Rows_2, Vec, Vector_2}
    end
end,
{Augmented_3, Coefficients_2, Coeffs_2, Columns, I_4, R_4, Row_idx_2, Rows_2, Vec_2, Vector_2} = Fun_10(Augmented_3, Coefficients_2, Coeffs, Columns, I_4, R_3, Row_idx_2, Rows_2, Vec, Vector_2),
        X_4 = retroactive_resolution(Coeffs_2, Vec_2),
        X_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(gaussian_elimination([[1.0, -4.0, -2.0], [5.0, 2.0, -2.0], [1.0, -1.0, 0.0]], [[-2.0], [-3.0], [4.0]]))]),
    io:format("~ts~n", [mochi_repr(gaussian_elimination([[1.0, 2.0], [5.0, 2.0]], [[5.0], [5.0]]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
