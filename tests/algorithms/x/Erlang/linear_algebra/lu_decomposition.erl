#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, lu_decomposition/1, print_matrix/1]).

% Generated by Mochi transpiler v0.10.59 (589dcb03e5) on 2025-08-07 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

lu_decomposition(Mat) ->
    try
        N = erlang:length(Mat),
        case (N == 0) of
        true -> throw({return, #{"lower" => [], "upper" => []}});
        _ -> ok
    end,
        M = erlang:length((case erlang:is_map(Mat) of true -> maps:get(0, Mat, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Mat) + 0 + 1, Mat); _ -> mochi_nth(0 + 1, Mat) end end)),
        case (N /= M) of
        true -> erlang:error("Matrix must be square");
        _ -> ok
    end,
        Lower = [],
        Upper = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Lower, M, Mat, N, Upper) ->
    case (I < N) of
        true ->
            Lrow = [],
            Urow = [],
            J = 0,
            Fun = fun Fun_loop(I, J, Lower, Lrow, M, Mat, N, Upper, Urow) ->
    case (J < N) of
        true ->
            Lrow_2 = lists:append((case Lrow of nil -> []; _ -> Lrow end), [0]),
            Urow_2 = lists:append((case Urow of nil -> []; _ -> Urow end), [0]),
            J_2 = (J + 1),
            Fun_loop(I, J_2, Lower, Lrow_2, M, Mat, N, Upper, Urow_2);
        _ -> {I, J, Lower, Lrow, M, Mat, N, Upper, Urow}
    end
end,
{I, J_2, Lower, Lrow_2, M, Mat, N, Upper, Urow_2} = Fun(I, J, Lower, Lrow, M, Mat, N, Upper, Urow),
            Lower_2 = lists:append((case Lower of nil -> []; _ -> Lower end), [Lrow_2]),
            Upper_2 = lists:append((case Upper of nil -> []; _ -> Upper end), [Urow_2]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Lower_2, M, Mat, N, Upper_2);
        _ -> {I, Lower, M, Mat, N, Upper}
    end
end,
{I_2, Lower_2, M, Mat, N, Upper_2} = Fun_2(I, Lower, M, Mat, N, Upper),
        I_3 = 0,
        Fun_7 = fun Fun_7_loop(I_3, Lower_2, M, Mat, N, Upper_2) ->
    case (I_3 < N) of
        true ->
            J1 = 0,
            Fun_4 = fun Fun_4_loop(I_3, J1, Lower_2, M, Mat, N, Upper_2) ->
    case (J1 < I_3) of
        true ->
            Total = 0,
            K = 0,
            Fun_3 = fun Fun_3_loop(I_3, J1, K, Lower_2, M, Mat, N, Total, Upper_2) ->
    case (K < I_3) of
        true ->
            Total_2 = (Total + mochi_safe_mul((case erlang:is_map((case erlang:is_map(Lower_2) of true -> maps:get(I_3, Lower_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Lower_2) + I_3 + 1, Lower_2); _ -> mochi_nth(I_3 + 1, Lower_2) end end)) of true -> maps:get(K, (case erlang:is_map(Lower_2) of true -> maps:get(I_3, Lower_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Lower_2) + I_3 + 1, Lower_2); _ -> mochi_nth(I_3 + 1, Lower_2) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Lower_2) of true -> maps:get(I_3, Lower_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Lower_2) + I_3 + 1, Lower_2); _ -> mochi_nth(I_3 + 1, Lower_2) end end)) + K + 1, (case erlang:is_map(Lower_2) of true -> maps:get(I_3, Lower_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Lower_2) + I_3 + 1, Lower_2); _ -> mochi_nth(I_3 + 1, Lower_2) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(Lower_2) of true -> maps:get(I_3, Lower_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Lower_2) + I_3 + 1, Lower_2); _ -> mochi_nth(I_3 + 1, Lower_2) end end)) end end), (case erlang:is_map((case erlang:is_map(Upper_2) of true -> maps:get(K, Upper_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Upper_2) + K + 1, Upper_2); _ -> mochi_nth(K + 1, Upper_2) end end)) of true -> maps:get(J1, (case erlang:is_map(Upper_2) of true -> maps:get(K, Upper_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Upper_2) + K + 1, Upper_2); _ -> mochi_nth(K + 1, Upper_2) end end), nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Upper_2) of true -> maps:get(K, Upper_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Upper_2) + K + 1, Upper_2); _ -> mochi_nth(K + 1, Upper_2) end end)) + J1 + 1, (case erlang:is_map(Upper_2) of true -> maps:get(K, Upper_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Upper_2) + K + 1, Upper_2); _ -> mochi_nth(K + 1, Upper_2) end end)); _ -> mochi_nth(J1 + 1, (case erlang:is_map(Upper_2) of true -> maps:get(K, Upper_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Upper_2) + K + 1, Upper_2); _ -> mochi_nth(K + 1, Upper_2) end end)) end end))),
            K_2 = (K + 1),
            Fun_3_loop(I_3, J1, K_2, Lower_2, M, Mat, N, Total_2, Upper_2);
        _ -> {I_3, J1, K, Lower_2, M, Mat, N, Total, Upper_2}
    end
end,
{I_3, J1, K_2, Lower_2, M, Mat, N, Total_2, Upper_2} = Fun_3(I_3, J1, K, Lower_2, M, Mat, N, Total, Upper_2),
            case ((case erlang:is_map((case erlang:is_map(Upper_2) of true -> maps:get(J1, Upper_2, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Upper_2) + J1 + 1, Upper_2); _ -> mochi_nth(J1 + 1, Upper_2) end end)) of true -> maps:get(J1, (case erlang:is_map(Upper_2) of true -> maps:get(J1, Upper_2, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Upper_2) + J1 + 1, Upper_2); _ -> mochi_nth(J1 + 1, Upper_2) end end), nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Upper_2) of true -> maps:get(J1, Upper_2, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Upper_2) + J1 + 1, Upper_2); _ -> mochi_nth(J1 + 1, Upper_2) end end)) + J1 + 1, (case erlang:is_map(Upper_2) of true -> maps:get(J1, Upper_2, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Upper_2) + J1 + 1, Upper_2); _ -> mochi_nth(J1 + 1, Upper_2) end end)); _ -> mochi_nth(J1 + 1, (case erlang:is_map(Upper_2) of true -> maps:get(J1, Upper_2, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Upper_2) + J1 + 1, Upper_2); _ -> mochi_nth(J1 + 1, Upper_2) end end)) end end) == 0) of
        true -> erlang:error("No LU decomposition exists");
        _ -> ok
    end,
            Lower_3 = lists:sublist(Lower_2, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Lower_2), J1) ++ [mochi_safe_div(((case erlang:is_map((case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat) + I_3 + 1, Mat); _ -> mochi_nth(I_3 + 1, Mat) end end)) of true -> maps:get(J1, (case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat) + I_3 + 1, Mat); _ -> mochi_nth(I_3 + 1, Mat) end end), nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat) + I_3 + 1, Mat); _ -> mochi_nth(I_3 + 1, Mat) end end)) + J1 + 1, (case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat) + I_3 + 1, Mat); _ -> mochi_nth(I_3 + 1, Mat) end end)); _ -> mochi_nth(J1 + 1, (case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat) + I_3 + 1, Mat); _ -> mochi_nth(I_3 + 1, Mat) end end)) end end) - Total_2), (case erlang:is_map((case erlang:is_map(Upper_2) of true -> maps:get(J1, Upper_2, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Upper_2) + J1 + 1, Upper_2); _ -> mochi_nth(J1 + 1, Upper_2) end end)) of true -> maps:get(J1, (case erlang:is_map(Upper_2) of true -> maps:get(J1, Upper_2, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Upper_2) + J1 + 1, Upper_2); _ -> mochi_nth(J1 + 1, Upper_2) end end), nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Upper_2) of true -> maps:get(J1, Upper_2, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Upper_2) + J1 + 1, Upper_2); _ -> mochi_nth(J1 + 1, Upper_2) end end)) + J1 + 1, (case erlang:is_map(Upper_2) of true -> maps:get(J1, Upper_2, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Upper_2) + J1 + 1, Upper_2); _ -> mochi_nth(J1 + 1, Upper_2) end end)); _ -> mochi_nth(J1 + 1, (case erlang:is_map(Upper_2) of true -> maps:get(J1, Upper_2, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Upper_2) + J1 + 1, Upper_2); _ -> mochi_nth(J1 + 1, Upper_2) end end)) end end))] ++ lists:nthtail(J1 + 1, lists:nth(I_3 + 1, Lower_2))] ++ lists:nthtail(I_3 + 1, Lower_2),
            J1_2 = (J1 + 1),
            Fun_4_loop(I_3, J1_2, Lower_3, M, Mat, N, Upper_2);
        _ -> {I_3, J1, Lower_2, M, Mat, N, Upper_2}
    end
end,
{I_3, J1_2, Lower_3, M, Mat, N, Upper_2} = Fun_4(I_3, J1, Lower_2, M, Mat, N, Upper_2),
            Lower_4 = lists:sublist(Lower_3, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Lower_3), I_3) ++ [1] ++ lists:nthtail(I_3 + 1, lists:nth(I_3 + 1, Lower_3))] ++ lists:nthtail(I_3 + 1, Lower_3),
            J2 = I_3,
            Fun_6 = fun Fun_6_loop(I_3, J1_2, J2, Lower_4, M, Mat, N, Upper_2) ->
    case (J2 < N) of
        true ->
            Total2 = 0,
            K2 = 0,
            Fun_5 = fun Fun_5_loop(I_3, J1_2, J2, K2, Lower_4, M, Mat, N, Total2, Upper_2) ->
    case (K2 < I_3) of
        true ->
            Total2_2 = (Total2 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(Lower_4) of true -> maps:get(I_3, Lower_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Lower_4) + I_3 + 1, Lower_4); _ -> mochi_nth(I_3 + 1, Lower_4) end end)) of true -> maps:get(K2, (case erlang:is_map(Lower_4) of true -> maps:get(I_3, Lower_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Lower_4) + I_3 + 1, Lower_4); _ -> mochi_nth(I_3 + 1, Lower_4) end end), nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Lower_4) of true -> maps:get(I_3, Lower_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Lower_4) + I_3 + 1, Lower_4); _ -> mochi_nth(I_3 + 1, Lower_4) end end)) + K2 + 1, (case erlang:is_map(Lower_4) of true -> maps:get(I_3, Lower_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Lower_4) + I_3 + 1, Lower_4); _ -> mochi_nth(I_3 + 1, Lower_4) end end)); _ -> mochi_nth(K2 + 1, (case erlang:is_map(Lower_4) of true -> maps:get(I_3, Lower_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Lower_4) + I_3 + 1, Lower_4); _ -> mochi_nth(I_3 + 1, Lower_4) end end)) end end), (case erlang:is_map((case erlang:is_map(Upper_2) of true -> maps:get(K2, Upper_2, nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length(Upper_2) + K2 + 1, Upper_2); _ -> mochi_nth(K2 + 1, Upper_2) end end)) of true -> maps:get(J2, (case erlang:is_map(Upper_2) of true -> maps:get(K2, Upper_2, nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length(Upper_2) + K2 + 1, Upper_2); _ -> mochi_nth(K2 + 1, Upper_2) end end), nil); _ -> case J2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Upper_2) of true -> maps:get(K2, Upper_2, nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length(Upper_2) + K2 + 1, Upper_2); _ -> mochi_nth(K2 + 1, Upper_2) end end)) + J2 + 1, (case erlang:is_map(Upper_2) of true -> maps:get(K2, Upper_2, nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length(Upper_2) + K2 + 1, Upper_2); _ -> mochi_nth(K2 + 1, Upper_2) end end)); _ -> mochi_nth(J2 + 1, (case erlang:is_map(Upper_2) of true -> maps:get(K2, Upper_2, nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length(Upper_2) + K2 + 1, Upper_2); _ -> mochi_nth(K2 + 1, Upper_2) end end)) end end))),
            K2_2 = (K2 + 1),
            Fun_5_loop(I_3, J1_2, J2, K2_2, Lower_4, M, Mat, N, Total2_2, Upper_2);
        _ -> {I_3, J1_2, J2, K2, Lower_4, M, Mat, N, Total2, Upper_2}
    end
end,
{I_3, J1_2, J2, K2_2, Lower_4, M, Mat, N, Total2_2, Upper_2} = Fun_5(I_3, J1_2, J2, K2, Lower_4, M, Mat, N, Total2, Upper_2),
            Upper_3 = lists:sublist(Upper_2, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Upper_2), J2) ++ [((case erlang:is_map((case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat) + I_3 + 1, Mat); _ -> mochi_nth(I_3 + 1, Mat) end end)) of true -> maps:get(J2, (case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat) + I_3 + 1, Mat); _ -> mochi_nth(I_3 + 1, Mat) end end), nil); _ -> case J2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat) + I_3 + 1, Mat); _ -> mochi_nth(I_3 + 1, Mat) end end)) + J2 + 1, (case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat) + I_3 + 1, Mat); _ -> mochi_nth(I_3 + 1, Mat) end end)); _ -> mochi_nth(J2 + 1, (case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat) + I_3 + 1, Mat); _ -> mochi_nth(I_3 + 1, Mat) end end)) end end) - Total2_2)] ++ lists:nthtail(J2 + 1, lists:nth(I_3 + 1, Upper_2))] ++ lists:nthtail(I_3 + 1, Upper_2),
            J2_2 = (J2 + 1),
            Fun_6_loop(I_3, J1_2, J2_2, Lower_4, M, Mat, N, Upper_3);
        _ -> {I_3, J1_2, J2, Lower_4, M, Mat, N, Upper_2}
    end
end,
{I_3, J1_2, J2_2, Lower_4, M, Mat, N, Upper_3} = Fun_6(I_3, J1_2, J2, Lower_4, M, Mat, N, Upper_2),
            I_4 = (I_3 + 1),
            Fun_7_loop(I_4, Lower_4, M, Mat, N, Upper_3);
        _ -> {I_3, Lower_2, M, Mat, N, Upper_2}
    end
end,
{I_4, Lower_4, M, Mat, N, Upper_3} = Fun_7(I_3, Lower_2, M, Mat, N, Upper_2),
        #{"lower" => Lower_4, "upper" => Upper_3}
    catch {return, Ret} -> Ret end.

print_matrix(Mat_2) ->
    try
        I_5 = 0,
        Fun_9 = fun Fun_9_loop(I_5, Mat_2) ->
    case (I_5 < erlang:length(Mat_2)) of
        true ->
            Line = "",
            J_3 = 0,
            Fun_8 = fun Fun_8_loop(I_5, J_3, Line, Mat_2) ->
    case (J_3 < erlang:length((case erlang:is_map(Mat_2) of true -> maps:get(I_5, Mat_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_2) + I_5 + 1, Mat_2); _ -> mochi_nth(I_5 + 1, Mat_2) end end))) of
        true ->
            Line_2 = (Line ++ mochi_str((case erlang:is_map((case erlang:is_map(Mat_2) of true -> maps:get(I_5, Mat_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_2) + I_5 + 1, Mat_2); _ -> mochi_nth(I_5 + 1, Mat_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Mat_2) of true -> maps:get(I_5, Mat_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_2) + I_5 + 1, Mat_2); _ -> mochi_nth(I_5 + 1, Mat_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat_2) of true -> maps:get(I_5, Mat_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_2) + I_5 + 1, Mat_2); _ -> mochi_nth(I_5 + 1, Mat_2) end end)) + J_3 + 1, (case erlang:is_map(Mat_2) of true -> maps:get(I_5, Mat_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_2) + I_5 + 1, Mat_2); _ -> mochi_nth(I_5 + 1, Mat_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Mat_2) of true -> maps:get(I_5, Mat_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_2) + I_5 + 1, Mat_2); _ -> mochi_nth(I_5 + 1, Mat_2) end end)) end end))),
            case ((J_3 + 1) < erlang:length((case erlang:is_map(Mat_2) of true -> maps:get(I_5, Mat_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_2) + I_5 + 1, Mat_2); _ -> mochi_nth(I_5 + 1, Mat_2) end end))) of
        true -> Line_3 = (Line_2 ++ " "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            J_4 = (J_3 + 1),
            Fun_8_loop(I_5, J_4, Line_4, Mat_2);
        _ -> {I_5, J_3, Line, Mat_2}
    end
end,
{I_5, J_4, Line_4, Mat_2} = Fun_8(I_5, J_3, Line, Mat_2),
            io:format("~ts~n", [mochi_repr(Line_4)]),
            I_6 = (I_5 + 1),
            Fun_9_loop(I_6, Mat_2);
        _ -> {I_5, Mat_2}
    end
end,
{I_6, Mat_2} = Fun_9(I_5, Mat_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('matrix', [[2, -2, 1], [0, 1, 2], [5, 3, 1]]),
    erlang:put('result', lu_decomposition(erlang:get('matrix'))),
    print_matrix(maps:get("lower", erlang:get('result'), nil)),
    print_matrix(maps:get("upper", erlang:get('result'), nil)),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
