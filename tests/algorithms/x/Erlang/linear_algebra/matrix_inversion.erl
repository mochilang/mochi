#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, invert_matrix/1]).

% Generated by Mochi transpiler v0.10.65 (365e579019) on 2025-08-13 16:57 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

invert_matrix(Matrix) ->
    try
        N = erlang:length(Matrix),
        Aug = [],
        I = 0,
        Fun_3 = fun Fun_3_loop(Aug, I, Matrix, N) ->
    case (I < N) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(Aug, I, J, Matrix, N, Row) ->
    case (J < N) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [(case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)) of true -> maps:get(J, (case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)) + J + 1, (case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)) end end)]),
            J_2 = (J + 1),
            Fun_loop(Aug, I, J_2, Matrix, N, Row_2);
        _ -> {Aug, I, J, Matrix, N, Row}
    end
end,
{Aug, I, J_2, Matrix, N, Row_2} = Fun(Aug, I, J, Matrix, N, Row),
            K = 0,
            Fun_2 = fun Fun_2_loop(Aug, I, J_2, K, Matrix, N, Row_2) ->
    case (K < N) of
        true ->
            case (I == K) of
        true -> Row_3 = lists:append((case Row_2 of nil -> []; _ -> Row_2 end), [1.0]),
            Row_5 = Row_3;
        _ -> Row_4 = lists:append((case Row_2 of nil -> []; _ -> Row_2 end), [0.0]),
            Row_5 = Row_4
    end,
            K_2 = (K + 1),
            Fun_2_loop(Aug, I, J_2, K_2, Matrix, N, Row_5);
        _ -> {Aug, I, J_2, K, Matrix, N, Row_2}
    end
end,
{Aug, I, J_2, K_2, Matrix, N, Row_5} = Fun_2(Aug, I, J_2, K, Matrix, N, Row_2),
            Aug_2 = lists:append((case Aug of nil -> []; _ -> Aug end), [Row_5]),
            I_2 = (I + 1),
            Fun_3_loop(Aug_2, I_2, Matrix, N);
        _ -> {Aug, I, Matrix, N}
    end
end,
{Aug_2, I_2, Matrix, N} = Fun_3(Aug, I, Matrix, N),
        Col = 0,
        Fun_9 = fun Fun_9_loop(Aug_2, Col, I_2, Matrix, N) ->
    case (Col < N) of
        true ->
            try
                Pivot_row = Col,
                R = Col,
                Fun_4 = fun Fun_4_loop(Aug_2, Col, I_2, Matrix, N, Pivot_row, R) ->
    case (R < N) of
        true ->
            try
                case ((case erlang:is_map((case erlang:is_map(Aug_2) of true -> maps:get(R, Aug_2, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_2) + R + 1, Aug_2); _ -> mochi_nth(R + 1, Aug_2) end end)) of true -> maps:get(Col, (case erlang:is_map(Aug_2) of true -> maps:get(R, Aug_2, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_2) + R + 1, Aug_2); _ -> mochi_nth(R + 1, Aug_2) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_2) of true -> maps:get(R, Aug_2, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_2) + R + 1, Aug_2); _ -> mochi_nth(R + 1, Aug_2) end end)) + Col + 1, (case erlang:is_map(Aug_2) of true -> maps:get(R, Aug_2, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_2) + R + 1, Aug_2); _ -> mochi_nth(R + 1, Aug_2) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(Aug_2) of true -> maps:get(R, Aug_2, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Aug_2) + R + 1, Aug_2); _ -> mochi_nth(R + 1, Aug_2) end end)) end end) /= 0.0) of
        true -> Pivot_row_2 = R,
            throw({break, Aug_2, Col, I_2, Matrix, N, Pivot_row_2, R}),
            Pivot_row_3 = Pivot_row_2;
        _ -> Pivot_row_3 = Pivot_row
    end,
                R_2 = (R + 1),
                Fun_4_loop(Aug_2, Col, I_2, Matrix, N, Pivot_row_3, R_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_4_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {Aug_2, Col, I_2, Matrix, N, Pivot_row, R}
    end
end,
{Aug_2, Col, I_2, Matrix, N, Pivot_row_3, R_2} = Fun_4(Aug_2, Col, I_2, Matrix, N, Pivot_row, R),
                case ((case erlang:is_map((case erlang:is_map(Aug_2) of true -> maps:get(Pivot_row_3, Aug_2, nil); _ -> case Pivot_row_3 < 0 of true -> mochi_nth(erlang:length(Aug_2) + Pivot_row_3 + 1, Aug_2); _ -> mochi_nth(Pivot_row_3 + 1, Aug_2) end end)) of true -> maps:get(Col, (case erlang:is_map(Aug_2) of true -> maps:get(Pivot_row_3, Aug_2, nil); _ -> case Pivot_row_3 < 0 of true -> mochi_nth(erlang:length(Aug_2) + Pivot_row_3 + 1, Aug_2); _ -> mochi_nth(Pivot_row_3 + 1, Aug_2) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_2) of true -> maps:get(Pivot_row_3, Aug_2, nil); _ -> case Pivot_row_3 < 0 of true -> mochi_nth(erlang:length(Aug_2) + Pivot_row_3 + 1, Aug_2); _ -> mochi_nth(Pivot_row_3 + 1, Aug_2) end end)) + Col + 1, (case erlang:is_map(Aug_2) of true -> maps:get(Pivot_row_3, Aug_2, nil); _ -> case Pivot_row_3 < 0 of true -> mochi_nth(erlang:length(Aug_2) + Pivot_row_3 + 1, Aug_2); _ -> mochi_nth(Pivot_row_3 + 1, Aug_2) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(Aug_2) of true -> maps:get(Pivot_row_3, Aug_2, nil); _ -> case Pivot_row_3 < 0 of true -> mochi_nth(erlang:length(Aug_2) + Pivot_row_3 + 1, Aug_2); _ -> mochi_nth(Pivot_row_3 + 1, Aug_2) end end)) end end) == 0.0) of
        true -> erlang:error({panic, "Matrix is not invertible"});
        _ -> ok
    end,
                case (Pivot_row_3 /= Col) of
        true -> Temp = (case erlang:is_map(Aug_2) of true -> maps:get(Col, Aug_2, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_2) + Col + 1, Aug_2); _ -> mochi_nth(Col + 1, Aug_2) end end),
            Aug_3 = lists:sublist(Aug_2, Col) ++ [(case erlang:is_map(Aug_2) of true -> maps:get(Pivot_row_3, Aug_2, nil); _ -> case Pivot_row_3 < 0 of true -> mochi_nth(erlang:length(Aug_2) + Pivot_row_3 + 1, Aug_2); _ -> mochi_nth(Pivot_row_3 + 1, Aug_2) end end)] ++ lists:nthtail(Col + 1, Aug_2),
            Aug_4 = lists:sublist(Aug_3, Pivot_row_3) ++ [Temp] ++ lists:nthtail(Pivot_row_3 + 1, Aug_3),
            Aug_5 = Aug_4,
            Temp_2 = Temp;
        _ -> Aug_5 = Aug_2,
            Temp_2 = nil
    end,
                Pivot = (case erlang:is_map((case erlang:is_map(Aug_5) of true -> maps:get(Col, Aug_5, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_5) + Col + 1, Aug_5); _ -> mochi_nth(Col + 1, Aug_5) end end)) of true -> maps:get(Col, (case erlang:is_map(Aug_5) of true -> maps:get(Col, Aug_5, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_5) + Col + 1, Aug_5); _ -> mochi_nth(Col + 1, Aug_5) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_5) of true -> maps:get(Col, Aug_5, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_5) + Col + 1, Aug_5); _ -> mochi_nth(Col + 1, Aug_5) end end)) + Col + 1, (case erlang:is_map(Aug_5) of true -> maps:get(Col, Aug_5, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_5) + Col + 1, Aug_5); _ -> mochi_nth(Col + 1, Aug_5) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(Aug_5) of true -> maps:get(Col, Aug_5, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_5) + Col + 1, Aug_5); _ -> mochi_nth(Col + 1, Aug_5) end end)) end end),
                C = 0,
                Fun_5 = fun Fun_5_loop(Aug_5, C, Col, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, Temp_2) ->
    case (C < (2 * N)) of
        true ->
            Aug_6 = lists:sublist(Aug_5, Col) ++ [lists:sublist(lists:nth(Col + 1, Aug_5), C) ++ [mochi_safe_div((case erlang:is_map((case erlang:is_map(Aug_5) of true -> maps:get(Col, Aug_5, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_5) + Col + 1, Aug_5); _ -> mochi_nth(Col + 1, Aug_5) end end)) of true -> maps:get(C, (case erlang:is_map(Aug_5) of true -> maps:get(Col, Aug_5, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_5) + Col + 1, Aug_5); _ -> mochi_nth(Col + 1, Aug_5) end end), nil); _ -> case C < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_5) of true -> maps:get(Col, Aug_5, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_5) + Col + 1, Aug_5); _ -> mochi_nth(Col + 1, Aug_5) end end)) + C + 1, (case erlang:is_map(Aug_5) of true -> maps:get(Col, Aug_5, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_5) + Col + 1, Aug_5); _ -> mochi_nth(Col + 1, Aug_5) end end)); _ -> mochi_nth(C + 1, (case erlang:is_map(Aug_5) of true -> maps:get(Col, Aug_5, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_5) + Col + 1, Aug_5); _ -> mochi_nth(Col + 1, Aug_5) end end)) end end), Pivot)] ++ lists:nthtail(C + 1, lists:nth(Col + 1, Aug_5))] ++ lists:nthtail(Col + 1, Aug_5),
            C_2 = (C + 1),
            Fun_5_loop(Aug_6, C_2, Col, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, Temp_2);
        _ -> {Aug_5, C, Col, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, Temp_2}
    end
end,
{Aug_6, C_2, Col, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, Temp_2} = Fun_5(Aug_5, C, Col, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, Temp_2),
                R2 = 0,
                Fun_8 = fun Fun_8_loop(Aug_6, C_2, Col, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, R2, Temp_2) ->
    case (R2 < N) of
        true ->
            case (R2 /= Col) of
        true -> Factor = (case erlang:is_map((case erlang:is_map(Aug_6) of true -> maps:get(R2, Aug_6, nil); _ -> case R2 < 0 of true -> mochi_nth(erlang:length(Aug_6) + R2 + 1, Aug_6); _ -> mochi_nth(R2 + 1, Aug_6) end end)) of true -> maps:get(Col, (case erlang:is_map(Aug_6) of true -> maps:get(R2, Aug_6, nil); _ -> case R2 < 0 of true -> mochi_nth(erlang:length(Aug_6) + R2 + 1, Aug_6); _ -> mochi_nth(R2 + 1, Aug_6) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_6) of true -> maps:get(R2, Aug_6, nil); _ -> case R2 < 0 of true -> mochi_nth(erlang:length(Aug_6) + R2 + 1, Aug_6); _ -> mochi_nth(R2 + 1, Aug_6) end end)) + Col + 1, (case erlang:is_map(Aug_6) of true -> maps:get(R2, Aug_6, nil); _ -> case R2 < 0 of true -> mochi_nth(erlang:length(Aug_6) + R2 + 1, Aug_6); _ -> mochi_nth(R2 + 1, Aug_6) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(Aug_6) of true -> maps:get(R2, Aug_6, nil); _ -> case R2 < 0 of true -> mochi_nth(erlang:length(Aug_6) + R2 + 1, Aug_6); _ -> mochi_nth(R2 + 1, Aug_6) end end)) end end),
            C2 = 0,
            Fun_6 = fun Fun_6_loop(Aug_6, C_2, C2, Col, Factor, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, R2, Temp_2) ->
    case (C2 < (2 * N)) of
        true ->
            Aug_7 = lists:sublist(Aug_6, R2) ++ [lists:sublist(lists:nth(R2 + 1, Aug_6), C2) ++ [((case erlang:is_map((case erlang:is_map(Aug_6) of true -> maps:get(R2, Aug_6, nil); _ -> case R2 < 0 of true -> mochi_nth(erlang:length(Aug_6) + R2 + 1, Aug_6); _ -> mochi_nth(R2 + 1, Aug_6) end end)) of true -> maps:get(C2, (case erlang:is_map(Aug_6) of true -> maps:get(R2, Aug_6, nil); _ -> case R2 < 0 of true -> mochi_nth(erlang:length(Aug_6) + R2 + 1, Aug_6); _ -> mochi_nth(R2 + 1, Aug_6) end end), nil); _ -> case C2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_6) of true -> maps:get(R2, Aug_6, nil); _ -> case R2 < 0 of true -> mochi_nth(erlang:length(Aug_6) + R2 + 1, Aug_6); _ -> mochi_nth(R2 + 1, Aug_6) end end)) + C2 + 1, (case erlang:is_map(Aug_6) of true -> maps:get(R2, Aug_6, nil); _ -> case R2 < 0 of true -> mochi_nth(erlang:length(Aug_6) + R2 + 1, Aug_6); _ -> mochi_nth(R2 + 1, Aug_6) end end)); _ -> mochi_nth(C2 + 1, (case erlang:is_map(Aug_6) of true -> maps:get(R2, Aug_6, nil); _ -> case R2 < 0 of true -> mochi_nth(erlang:length(Aug_6) + R2 + 1, Aug_6); _ -> mochi_nth(R2 + 1, Aug_6) end end)) end end) - mochi_safe_mul(Factor, (case erlang:is_map((case erlang:is_map(Aug_6) of true -> maps:get(Col, Aug_6, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_6) + Col + 1, Aug_6); _ -> mochi_nth(Col + 1, Aug_6) end end)) of true -> maps:get(C2, (case erlang:is_map(Aug_6) of true -> maps:get(Col, Aug_6, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_6) + Col + 1, Aug_6); _ -> mochi_nth(Col + 1, Aug_6) end end), nil); _ -> case C2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_6) of true -> maps:get(Col, Aug_6, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_6) + Col + 1, Aug_6); _ -> mochi_nth(Col + 1, Aug_6) end end)) + C2 + 1, (case erlang:is_map(Aug_6) of true -> maps:get(Col, Aug_6, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_6) + Col + 1, Aug_6); _ -> mochi_nth(Col + 1, Aug_6) end end)); _ -> mochi_nth(C2 + 1, (case erlang:is_map(Aug_6) of true -> maps:get(Col, Aug_6, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Aug_6) + Col + 1, Aug_6); _ -> mochi_nth(Col + 1, Aug_6) end end)) end end)))] ++ lists:nthtail(C2 + 1, lists:nth(R2 + 1, Aug_6))] ++ lists:nthtail(R2 + 1, Aug_6),
            C2_2 = (C2 + 1),
            Fun_6_loop(Aug_7, C_2, C2_2, Col, Factor, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, R2, Temp_2);
        _ -> {Aug_6, C_2, C2, Col, Factor, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, R2, Temp_2}
    end
end,
{Aug_7, C_2, C2_2, Col, Factor, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, R2, Temp_2} = Fun_6(Aug_6, C_2, C2, Col, Factor, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, R2, Temp_2),
            Aug_8 = Aug_7,
            C2_3 = C2_2,
            Factor_2 = Factor,
            Fun_7 = Fun_6;
        _ -> Aug_8 = Aug_6,
            C2_3 = nil,
            Factor_2 = nil,
            Fun_7 = Fun_5
    end,
            R2_2 = (R2 + 1),
            Fun_8_loop(Aug_8, C_2, Col, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, R2_2, Temp_2);
        _ -> {Aug_6, C_2, Col, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, R2, Temp_2}
    end
end,
{Aug_8, C_2, Col, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, R2_2, Temp_2} = Fun_8(Aug_6, C_2, Col, I_2, Matrix, N, Pivot, Pivot_row_3, R_2, R2, Temp_2),
                Col_2 = (Col + 1),
                Fun_9_loop(Aug_8, Col_2, I_2, Matrix, N)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_9_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Aug_2, Col, I_2, Matrix, N}
    end
end,
{Aug_8, Col_2, I_2, Matrix, N} = Fun_9(Aug_2, Col, I_2, Matrix, N),
        Inv = [],
        R3 = 0,
        Fun_11 = fun Fun_11_loop(Aug_8, Col_2, I_2, Inv, Matrix, N, R3) ->
    case (R3 < N) of
        true ->
            Row_6 = [],
            C3 = 0,
            Fun_10 = fun Fun_10_loop(Aug_8, C3, Col_2, I_2, Inv, Matrix, N, R3, Row_6) ->
    case (C3 < N) of
        true ->
            Row_7 = lists:append((case Row_6 of nil -> []; _ -> Row_6 end), [(case erlang:is_map((case erlang:is_map(Aug_8) of true -> maps:get(R3, Aug_8, nil); _ -> case R3 < 0 of true -> mochi_nth(erlang:length(Aug_8) + R3 + 1, Aug_8); _ -> mochi_nth(R3 + 1, Aug_8) end end)) of true -> maps:get((C3 + N), (case erlang:is_map(Aug_8) of true -> maps:get(R3, Aug_8, nil); _ -> case R3 < 0 of true -> mochi_nth(erlang:length(Aug_8) + R3 + 1, Aug_8); _ -> mochi_nth(R3 + 1, Aug_8) end end), nil); _ -> case (C3 + N) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Aug_8) of true -> maps:get(R3, Aug_8, nil); _ -> case R3 < 0 of true -> mochi_nth(erlang:length(Aug_8) + R3 + 1, Aug_8); _ -> mochi_nth(R3 + 1, Aug_8) end end)) + (C3 + N) + 1, (case erlang:is_map(Aug_8) of true -> maps:get(R3, Aug_8, nil); _ -> case R3 < 0 of true -> mochi_nth(erlang:length(Aug_8) + R3 + 1, Aug_8); _ -> mochi_nth(R3 + 1, Aug_8) end end)); _ -> mochi_nth((C3 + N) + 1, (case erlang:is_map(Aug_8) of true -> maps:get(R3, Aug_8, nil); _ -> case R3 < 0 of true -> mochi_nth(erlang:length(Aug_8) + R3 + 1, Aug_8); _ -> mochi_nth(R3 + 1, Aug_8) end end)) end end)]),
            C3_2 = (C3 + 1),
            Fun_10_loop(Aug_8, C3_2, Col_2, I_2, Inv, Matrix, N, R3, Row_7);
        _ -> {Aug_8, C3, Col_2, I_2, Inv, Matrix, N, R3, Row_6}
    end
end,
{Aug_8, C3_2, Col_2, I_2, Inv, Matrix, N, R3, Row_7} = Fun_10(Aug_8, C3, Col_2, I_2, Inv, Matrix, N, R3, Row_6),
            Inv_2 = lists:append((case Inv of nil -> []; _ -> Inv end), [Row_7]),
            R3_2 = (R3 + 1),
            Fun_11_loop(Aug_8, Col_2, I_2, Inv_2, Matrix, N, R3_2);
        _ -> {Aug_8, Col_2, I_2, Inv, Matrix, N, R3}
    end
end,
{Aug_8, Col_2, I_2, Inv_2, Matrix, N, R3_2} = Fun_11(Aug_8, Col_2, I_2, Inv, Matrix, N, R3),
        Inv_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('mat', [[4.0, 7.0], [2.0, 6.0]]),
    io:format("~ts~n", [mochi_repr("Original Matrix:")]),
    io:format("~ts~n", [mochi_repr(erlang:get('mat'))]),
    io:format("~ts~n", [mochi_repr("Inverted Matrix:")]),
    io:format("~ts~n", [mochi_repr(invert_matrix(erlang:get('mat')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
