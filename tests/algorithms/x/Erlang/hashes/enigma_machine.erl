#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, build_alphabet/0, range_list/1, reversed_range_list/1, index_of_char/2, index_of_int/2, enigma_encrypt/2]).

% Generated by Mochi transpiler v0.10.66 (951718e85a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

build_alphabet() ->
    try
        Result = [],
        I = 0,
        Fun = fun Fun_loop(I, Result) ->
    case (I < erlang:length(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}")) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}", I + 1, 1)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Result_2);
        _ -> {I, Result}
    end
end,
{I_2, Result_2} = Fun(I, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

range_list(N) ->
    try
        Lst = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Lst, N) ->
    case (I_3 < N) of
        true ->
            Lst_2 = lists:append((case Lst of nil -> []; _ -> Lst end), [I_3]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Lst_2, N);
        _ -> {I_3, Lst, N}
    end
end,
{I_4, Lst_2, N} = Fun_2(I_3, Lst, N),
        Lst_2
    catch {return, RetCatch} -> RetCatch end.

reversed_range_list(N_2) ->
    try
        Lst_3 = [],
        I_5 = (N_2 - 1),
        Fun_3 = fun Fun_3_loop(I_5, Lst_3, N_2) ->
    case (I_5 >= 0) of
        true ->
            Lst_4 = lists:append((case Lst_3 of nil -> []; _ -> Lst_3 end), [I_5]),
            I_6 = (I_5 - 1),
            Fun_3_loop(I_6, Lst_4, N_2);
        _ -> {I_5, Lst_3, N_2}
    end
end,
{I_6, Lst_4, N_2} = Fun_3(I_5, Lst_3, N_2),
        Lst_4
    catch {return, RetCatch} -> RetCatch end.

index_of_char(Lst_5, Ch) ->
    try
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Ch, I_7, Lst_5) ->
    case (I_7 < erlang:length(Lst_5)) of
        true ->
            case ((case erlang:is_map(Lst_5) of true -> maps:get(I_7, Lst_5, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Lst_5) + I_7 + 1, Lst_5); _ -> mochi_nth(I_7 + 1, Lst_5) end end) == Ch) of
        true -> throw({return, I_7});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(Ch, I_8, Lst_5);
        _ -> {Ch, I_7, Lst_5}
    end
end,
{Ch, I_8, Lst_5} = Fun_4(Ch, I_7, Lst_5),
        -1
    catch {return, RetCatch} -> RetCatch end.

index_of_int(Lst_6, Value) ->
    try
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(I_9, Lst_6, Value) ->
    case (I_9 < erlang:length(Lst_6)) of
        true ->
            case ((case erlang:is_map(Lst_6) of true -> maps:get(I_9, Lst_6, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Lst_6) + I_9 + 1, Lst_6); _ -> mochi_nth(I_9 + 1, Lst_6) end end) == Value) of
        true -> throw({return, I_9});
        _ -> ok
    end,
            I_10 = (I_9 + 1),
            Fun_5_loop(I_10, Lst_6, Value);
        _ -> {I_9, Lst_6, Value}
    end
end,
{I_10, Lst_6, Value} = Fun_5(I_9, Lst_6, Value),
        -1
    catch {return, RetCatch} -> RetCatch end.

enigma_encrypt(Message, Token) ->
    try
        Alphabets = build_alphabet(),
        N_3 = erlang:length(Alphabets),
        Gear_one = range_list(N_3),
        Gear_two = range_list(N_3),
        Gear_three = range_list(N_3),
        Reflector = reversed_range_list(N_3),
        Gear_one_pos = 0,
        Gear_two_pos = 0,
        Gear_three_pos = 0,
        Rotator = fun Rotator() ->
    try
        I_11 = (case erlang:is_map(Gear_one) of true -> maps:get(0, Gear_one, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Gear_one) + 0 + 1, Gear_one); _ -> mochi_nth(0 + 1, Gear_one) end end),
        Gear_one_2 = lists:sublist(Gear_one, 1 + 1, (erlang:length(Gear_one) - 1)),
        Gear_one_3 = lists:append((case Gear_one_2 of nil -> []; _ -> Gear_one_2 end), [I_11]),
        Gear_one_pos_2 = (Gear_one_pos + 1),
        case (mochi_mod(Gear_one_pos_2, N_3) == 0) of
        true -> I_12 = (case erlang:is_map(Gear_two) of true -> maps:get(0, Gear_two, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Gear_two) + 0 + 1, Gear_two); _ -> mochi_nth(0 + 1, Gear_two) end end),
            Gear_two_2 = lists:sublist(Gear_two, 1 + 1, (erlang:length(Gear_two) - 1)),
            Gear_two_3 = lists:append((case Gear_two_2 of nil -> []; _ -> Gear_two_2 end), [I_12]),
            Gear_two_pos_2 = (Gear_two_pos + 1),
            case (mochi_mod(Gear_two_pos_2, N_3) == 0) of
        true -> I_13 = (case erlang:is_map(Gear_three) of true -> maps:get(0, Gear_three, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Gear_three) + 0 + 1, Gear_three); _ -> mochi_nth(0 + 1, Gear_three) end end),
            Gear_three_2 = lists:sublist(Gear_three, 1 + 1, (erlang:length(Gear_three) - 1)),
            Gear_three_3 = lists:append((case Gear_three_2 of nil -> []; _ -> Gear_three_2 end), [I_13]),
            Gear_three_pos_2 = (Gear_three_pos + 1),
            Gear_three_4 = Gear_three_3,
            Gear_three_pos_3 = Gear_three_pos_2,
            I_14 = I_13;
        _ -> Gear_three_4 = Gear_three,
            Gear_three_pos_3 = Gear_three_pos,
            I_14 = I_12
    end,
            Gear_three_5 = Gear_three_4,
            Gear_three_pos_4 = Gear_three_pos_3,
            Gear_two_4 = Gear_two_3,
            Gear_two_pos_3 = Gear_two_pos_2,
            I_15 = I_14;
        _ -> Gear_three_5 = Gear_three,
            Gear_three_pos_4 = Gear_three_pos,
            Gear_two_4 = Gear_two,
            Gear_two_pos_3 = Gear_two_pos,
            I_15 = I_11
    end,
        nil
    catch {return, RetCatch} -> RetCatch end
end,
        Engine = fun Engine(Ch_2) ->
    try
        Target = index_of_char(Alphabets, Ch_2),
        Target_2 = (case erlang:is_map(Gear_one) of true -> maps:get(Target, Gear_one, nil); _ -> case Target < 0 of true -> mochi_nth(erlang:length(Gear_one) + Target + 1, Gear_one); _ -> mochi_nth(Target + 1, Gear_one) end end),
        Target_3 = (case erlang:is_map(Gear_two) of true -> maps:get(Target_2, Gear_two, nil); _ -> case Target_2 < 0 of true -> mochi_nth(erlang:length(Gear_two) + Target_2 + 1, Gear_two); _ -> mochi_nth(Target_2 + 1, Gear_two) end end),
        Target_4 = (case erlang:is_map(Gear_three) of true -> maps:get(Target_3, Gear_three, nil); _ -> case Target_3 < 0 of true -> mochi_nth(erlang:length(Gear_three) + Target_3 + 1, Gear_three); _ -> mochi_nth(Target_3 + 1, Gear_three) end end),
        Target_5 = (case erlang:is_map(Reflector) of true -> maps:get(Target_4, Reflector, nil); _ -> case Target_4 < 0 of true -> mochi_nth(erlang:length(Reflector) + Target_4 + 1, Reflector); _ -> mochi_nth(Target_4 + 1, Reflector) end end),
        Target_6 = index_of_int(Gear_three, Target_5),
        Target_7 = index_of_int(Gear_two, Target_6),
        Target_8 = index_of_int(Gear_one, Target_7),
        Rotator(),
        (case erlang:is_map(Alphabets) of true -> maps:get(Target_8, Alphabets, nil); _ -> case Target_8 < 0 of true -> mochi_nth(erlang:length(Alphabets) + Target_8 + 1, Alphabets); _ -> mochi_nth(Target_8 + 1, Alphabets) end end)
    catch {return, RetCatch} -> RetCatch end
end,
        T = 0,
        Fun_6 = fun Fun_6_loop(Alphabets, Engine, Gear_one, Gear_one_pos, Gear_three, Gear_three_pos, Gear_two, Gear_two_pos, Message, N_3, Reflector, Rotator, T, Token) ->
    case (T < Token) of
        true ->
            Rotator(),
            T_2 = (T + 1),
            Fun_6_loop(Alphabets, Engine, Gear_one, Gear_one_pos, Gear_three, Gear_three_pos, Gear_two, Gear_two_pos, Message, N_3, Reflector, Rotator, T_2, Token);
        _ -> {Alphabets, Engine, Gear_one, Gear_one_pos, Gear_three, Gear_three_pos, Gear_two, Gear_two_pos, Message, N_3, Reflector, Rotator, T, Token}
    end
end,
{Alphabets, Engine, Gear_one, Gear_one_pos, Gear_three, Gear_three_pos, Gear_two, Gear_two_pos, Message, N_3, Reflector, Rotator, T_2, Token} = Fun_6(Alphabets, Engine, Gear_one, Gear_one_pos, Gear_three, Gear_three_pos, Gear_two, Gear_two_pos, Message, N_3, Reflector, Rotator, T, Token),
        Result_3 = "",
        Idx = 0,
        Fun_7 = fun Fun_7_loop(Alphabets, Engine, Gear_one, Gear_one_pos, Gear_three, Gear_three_pos, Gear_two, Gear_two_pos, Idx, Message, N_3, Reflector, Result_3, Rotator, T_2, Token) ->
    case (Idx < erlang:length(Message)) of
        true ->
            Result_4 = (Result_3 ++ Engine(string:substr(Message, Idx + 1, 1))),
            Idx_2 = (Idx + 1),
            Fun_7_loop(Alphabets, Engine, Gear_one, Gear_one_pos, Gear_three, Gear_three_pos, Gear_two, Gear_two_pos, Idx_2, Message, N_3, Reflector, Result_4, Rotator, T_2, Token);
        _ -> {Alphabets, Engine, Gear_one, Gear_one_pos, Gear_three, Gear_three_pos, Gear_two, Gear_two_pos, Idx, Message, N_3, Reflector, Result_3, Rotator, T_2, Token}
    end
end,
{Alphabets, Engine, Gear_one, Gear_one_pos, Gear_three, Gear_three_pos, Gear_two, Gear_two_pos, Idx_2, Message, N_3, Reflector, Result_4, Rotator, T_2, Token} = Fun_7(Alphabets, Engine, Gear_one, Gear_one_pos, Gear_three, Gear_three_pos, Gear_two, Gear_two_pos, Idx, Message, N_3, Reflector, Result_3, Rotator, T_2, Token),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ASCII', " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}"),
    erlang:put('message', "HELLO WORLD"),
    erlang:put('token', 123),
    erlang:put('encoded', enigma_encrypt("HELLO WORLD", 123)),
    io:format("~ts~n", [mochi_repr(erlang:get('encoded'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
