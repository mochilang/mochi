#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/2, ord/1, chr/1, text_to_bits/1, text_from_bits/1, bool_to_string/1, string_to_bitlist/1, bitlist_to_string/1, is_power_of_two/1, list_eq/2, pow2/1, has_bit/2, hamming_encode/2, hamming_decode/2, main/0]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

index_of(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, 1) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

ord(Ch_2) ->
    try
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower = "abcdefghijklmnopqrstuvwxyz",
        Idx = index_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch_2),
        case (Idx >= 0) of
        true -> throw({return, (65 + Idx)});
        _ -> ok
    end,
        Idx_2 = index_of("abcdefghijklmnopqrstuvwxyz", Ch_2),
        case (Idx_2 >= 0) of
        true -> throw({return, (97 + Idx_2)});
        _ -> ok
    end,
        0
    catch {return, RetCatch} -> RetCatch end.

chr(N) ->
    try
        Upper_2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower_2 = "abcdefghijklmnopqrstuvwxyz",
        case ((N >= 65) andalso (N < 91)) of
        true -> throw({return, string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", (N - 65) + 1, ((N - 64) - (N - 65)))});
        _ -> ok
    end,
        case ((N >= 97) andalso (N < 123)) of
        true -> throw({return, string:substr("abcdefghijklmnopqrstuvwxyz", (N - 97) + 1, ((N - 96) - (N - 97)))});
        _ -> ok
    end,
        "?"
    catch {return, RetCatch} -> RetCatch end.

text_to_bits(Text) ->
    try
        Bits = "",
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Bits, I_3, Text) ->
    case (I_3 < erlang:length(Text)) of
        true ->
            Code = ord(string:substr(Text, I_3 + 1, 1)),
            J = 7,
            Fun_2 = fun Fun_2_loop(Bits, Code, I_3, J, Text) ->
    case (J >= 0) of
        true ->
            P = pow2(J),
            case (mochi_mod((Code div P), 2) == 1) of
        true -> Bits_2 = (Bits ++ "1"),
            Bits_4 = Bits_2;
        _ -> Bits_3 = (Bits ++ "0"),
            Bits_4 = Bits_3
    end,
            J_2 = (J - 1),
            Fun_2_loop(Bits_4, Code, I_3, J_2, Text);
        _ -> {Bits, Code, I_3, J, Text}
    end
end,
{Bits_4, Code, I_3, J_2, Text} = Fun_2(Bits, Code, I_3, J, Text),
            I_4 = (I_3 + 1),
            Fun_3_loop(Bits_4, I_4, Text);
        _ -> {Bits, I_3, Text}
    end
end,
{Bits_4, I_4, Text} = Fun_3(Bits, I_3, Text),
        Bits_4
    catch {return, RetCatch} -> RetCatch end.

text_from_bits(Bits_5) ->
    try
        Text_2 = "",
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Bits_5, I_5, Text_2) ->
    case (I_5 < erlang:length(Bits_5)) of
        true ->
            Code_2 = 0,
            J_3 = 0,
            Fun_4 = fun Fun_4_loop(Bits_5, Code_2, I_5, J_3, Text_2) ->
    case ((J_3 < 8) andalso ((I_5 + J_3) < erlang:length(Bits_5))) of
        true ->
            Code_3 = (Code_2 * 2),
            case (string:substr(Bits_5, (I_5 + J_3) + 1, 1) == "1") of
        true -> Code_4 = (Code_3 + 1),
            Code_5 = Code_4;
        _ -> Code_5 = Code_3
    end,
            J_4 = (J_3 + 1),
            Fun_4_loop(Bits_5, Code_5, I_5, J_4, Text_2);
        _ -> {Bits_5, Code_2, I_5, J_3, Text_2}
    end
end,
{Bits_5, Code_5, I_5, J_4, Text_2} = Fun_4(Bits_5, Code_2, I_5, J_3, Text_2),
            Text_3 = (Text_2 ++ chr(Code_5)),
            I_6 = (I_5 + 8),
            Fun_5_loop(Bits_5, I_6, Text_3);
        _ -> {Bits_5, I_5, Text_2}
    end
end,
{Bits_5, I_6, Text_3} = Fun_5(Bits_5, I_5, Text_2),
        Text_3
    catch {return, RetCatch} -> RetCatch end.

bool_to_string(B) ->
    try
        (case B of
    true -> "True";
    _ -> "False"
end)
    catch {return, RetCatch} -> RetCatch end.

string_to_bitlist(S_2) ->
    try
        Res = [],
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(I_7, Res, S_2) ->
    case (I_7 < erlang:length(S_2)) of
        true ->
            case (string:substr(S_2, I_7 + 1, 1) == "1") of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [1]),
            Res_4 = Res_2;
        _ -> Res_3 = lists:append((case Res of nil -> []; _ -> Res end), [0]),
            Res_4 = Res_3
    end,
            I_8 = (I_7 + 1),
            Fun_6_loop(I_8, Res_4, S_2);
        _ -> {I_7, Res, S_2}
    end
end,
{I_8, Res_4, S_2} = Fun_6(I_7, Res, S_2),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

bitlist_to_string(Bits_6) ->
    try
        S_3 = "",
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(Bits_6, I_9, S_3) ->
    case (I_9 < erlang:length(Bits_6)) of
        true ->
            case ((case erlang:is_map(Bits_6) of true -> maps:get(I_9, Bits_6, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Bits_6) + I_9 + 1, Bits_6); _ -> mochi_nth(I_9 + 1, Bits_6) end end) == 1) of
        true -> S_4 = (S_3 ++ "1"),
            S_6 = S_4;
        _ -> S_5 = (S_3 ++ "0"),
            S_6 = S_5
    end,
            I_10 = (I_9 + 1),
            Fun_7_loop(Bits_6, I_10, S_6);
        _ -> {Bits_6, I_9, S_3}
    end
end,
{Bits_6, I_10, S_6} = Fun_7(Bits_6, I_9, S_3),
        S_6
    catch {return, RetCatch} -> RetCatch end.

is_power_of_two(X) ->
    try
        case (X < 1) of
        true -> throw({return, false});
        _ -> ok
    end,
        P_2 = 1,
        Fun_8 = fun Fun_8_loop(P_2, X) ->
    case (P_2 < X) of
        true ->
            P_3 = (P_2 * 2),
            Fun_8_loop(P_3, X);
        _ -> {P_2, X}
    end
end,
{P_3, X} = Fun_8(P_2, X),
        (P_3 == X)
    catch {return, RetCatch} -> RetCatch end.

list_eq(A, B_2) ->
    try
        case (erlang:length(A) /= erlang:length(B_2)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_11 = 0,
        Fun_9 = fun Fun_9_loop(A, B_2, I_11) ->
    case (I_11 < erlang:length(A)) of
        true ->
            case ((case erlang:is_map(A) of true -> maps:get(I_11, A, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(A) + I_11 + 1, A); _ -> mochi_nth(I_11 + 1, A) end end) /= (case erlang:is_map(B_2) of true -> maps:get(I_11, B_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(B_2) + I_11 + 1, B_2); _ -> mochi_nth(I_11 + 1, B_2) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_12 = (I_11 + 1),
            Fun_9_loop(A, B_2, I_12);
        _ -> {A, B_2, I_11}
    end
end,
{A, B_2, I_12} = Fun_9(A, B_2, I_11),
        true
    catch {return, RetCatch} -> RetCatch end.

pow2(E) ->
    try
        Res_5 = 1,
        I_13 = 0,
        Fun_10 = fun Fun_10_loop(E, I_13, Res_5) ->
    case (I_13 < E) of
        true ->
            Res_6 = (Res_5 * 2),
            I_14 = (I_13 + 1),
            Fun_10_loop(E, I_14, Res_6);
        _ -> {E, I_13, Res_5}
    end
end,
{E, I_14, Res_6} = Fun_10(E, I_13, Res_5),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

has_bit(N_2, B_3) ->
    try
        P_4 = pow2(B_3),
        case (mochi_mod((N_2 div P_4), 2) == 1) of
        true -> throw({return, true});
        _ -> ok
    end,
        false
    catch {return, RetCatch} -> RetCatch end.

hamming_encode(R, Data_bits) ->
    try
        Total = (R + erlang:length(Data_bits)),
        Data_ord = [],
        Cont_data = 0,
        X_2 = 1,
        Fun_11 = fun Fun_11_loop(Cont_data, Data_bits, Data_ord, R, Total, X_2) ->
    case (X_2 =< Total) of
        true ->
            case is_power_of_two(X_2) of
        true -> Data_ord_2 = lists:append((case Data_ord of nil -> []; _ -> Data_ord end), [-1]),
            Cont_data_3 = Cont_data,
            Data_ord_4 = Data_ord_2;
        _ -> Data_ord_3 = lists:append((case Data_ord of nil -> []; _ -> Data_ord end), [(case erlang:is_map(Data_bits) of true -> maps:get(Cont_data, Data_bits, nil); _ -> case Cont_data < 0 of true -> mochi_nth(erlang:length(Data_bits) + Cont_data + 1, Data_bits); _ -> mochi_nth(Cont_data + 1, Data_bits) end end)]),
            Cont_data_2 = (Cont_data + 1),
            Cont_data_3 = Cont_data_2,
            Data_ord_4 = Data_ord_3
    end,
            X_3 = (X_2 + 1),
            Fun_11_loop(Cont_data_3, Data_bits, Data_ord_4, R, Total, X_3);
        _ -> {Cont_data, Data_bits, Data_ord, R, Total, X_2}
    end
end,
{Cont_data_3, Data_bits, Data_ord_4, R, Total, X_3} = Fun_11(Cont_data, Data_bits, Data_ord, R, Total, X_2),
        Parity = [],
        Bp = 0,
        Fun_13 = fun Fun_13_loop(Bp, Cont_data_3, Data_bits, Data_ord_4, Parity, R, Total, X_3) ->
    case (Bp < R) of
        true ->
            Cont_bo = 0,
            J_5 = 0,
            Fun_12 = fun Fun_12_loop(Bp, Cont_bo, Cont_data_3, Data_bits, Data_ord_4, J_5, Parity, R, Total, X_3) ->
    case (J_5 < erlang:length(Data_ord_4)) of
        true ->
            Bit = (case erlang:is_map(Data_ord_4) of true -> maps:get(J_5, Data_ord_4, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Data_ord_4) + J_5 + 1, Data_ord_4); _ -> mochi_nth(J_5 + 1, Data_ord_4) end end),
            case (Bit >= 0) of
        true -> Pos = (J_5 + 1),
            case (has_bit(Pos, Bp) andalso (Bit == 1)) of
        true -> Cont_bo_2 = (Cont_bo + 1),
            Cont_bo_3 = Cont_bo_2;
        _ -> Cont_bo_3 = Cont_bo
    end,
            Cont_bo_4 = Cont_bo_3,
            Pos_2 = Pos;
        _ -> Cont_bo_4 = Cont_bo,
            Pos_2 = nil
    end,
            J_6 = (J_5 + 1),
            Fun_12_loop(Bp, Cont_bo_4, Cont_data_3, Data_bits, Data_ord_4, J_6, Parity, R, Total, X_3);
        _ -> {Bp, Cont_bo, Cont_data_3, Data_bits, Data_ord_4, J_5, Parity, R, Total, X_3}
    end
end,
{Bp, Cont_bo_4, Cont_data_3, Data_bits, Data_ord_4, J_6, Parity, R, Total, X_3} = Fun_12(Bp, Cont_bo, Cont_data_3, Data_bits, Data_ord_4, J_5, Parity, R, Total, X_3),
            Parity_2 = lists:append((case Parity of nil -> []; _ -> Parity end), [mochi_mod(Cont_bo_4, 2)]),
            Bp_2 = (Bp + 1),
            Fun_13_loop(Bp_2, Cont_data_3, Data_bits, Data_ord_4, Parity_2, R, Total, X_3);
        _ -> {Bp, Cont_data_3, Data_bits, Data_ord_4, Parity, R, Total, X_3}
    end
end,
{Bp_2, Cont_data_3, Data_bits, Data_ord_4, Parity_2, R, Total, X_3} = Fun_13(Bp, Cont_data_3, Data_bits, Data_ord_4, Parity, R, Total, X_3),
        Result = [],
        Cont_bp = 0,
        I_15 = 0,
        Fun_14 = fun Fun_14_loop(Bp_2, Cont_bp, Cont_data_3, Data_bits, Data_ord_4, I_15, Parity_2, R, Result, Total, X_3) ->
    case (I_15 < erlang:length(Data_ord_4)) of
        true ->
            case ((case erlang:is_map(Data_ord_4) of true -> maps:get(I_15, Data_ord_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Data_ord_4) + I_15 + 1, Data_ord_4); _ -> mochi_nth(I_15 + 1, Data_ord_4) end end) < 0) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Parity_2) of true -> maps:get(Cont_bp, Parity_2, nil); _ -> case Cont_bp < 0 of true -> mochi_nth(erlang:length(Parity_2) + Cont_bp + 1, Parity_2); _ -> mochi_nth(Cont_bp + 1, Parity_2) end end)]),
            Cont_bp_2 = (Cont_bp + 1),
            Cont_bp_3 = Cont_bp_2,
            Result_4 = Result_2;
        _ -> Result_3 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Data_ord_4) of true -> maps:get(I_15, Data_ord_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Data_ord_4) + I_15 + 1, Data_ord_4); _ -> mochi_nth(I_15 + 1, Data_ord_4) end end)]),
            Cont_bp_3 = Cont_bp,
            Result_4 = Result_3
    end,
            I_16 = (I_15 + 1),
            Fun_14_loop(Bp_2, Cont_bp_3, Cont_data_3, Data_bits, Data_ord_4, I_16, Parity_2, R, Result_4, Total, X_3);
        _ -> {Bp_2, Cont_bp, Cont_data_3, Data_bits, Data_ord_4, I_15, Parity_2, R, Result, Total, X_3}
    end
end,
{Bp_2, Cont_bp_3, Cont_data_3, Data_bits, Data_ord_4, I_16, Parity_2, R, Result_4, Total, X_3} = Fun_14(Bp_2, Cont_bp, Cont_data_3, Data_bits, Data_ord_4, I_15, Parity_2, R, Result, Total, X_3),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

hamming_decode(R_2, Code_6) ->
    try
        Data_output = [],
        Parity_received = [],
        I_17 = 1,
        Idx_3 = 0,
        Fun_15 = fun Fun_15_loop(Code_6, Data_output, I_17, Idx_3, Parity_received, R_2) ->
    case (I_17 =< erlang:length(Code_6)) of
        true ->
            case is_power_of_two(I_17) of
        true -> Parity_received_2 = lists:append((case Parity_received of nil -> []; _ -> Parity_received end), [(case erlang:is_map(Code_6) of true -> maps:get(Idx_3, Code_6, nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(Code_6) + Idx_3 + 1, Code_6); _ -> mochi_nth(Idx_3 + 1, Code_6) end end)]),
            Data_output_3 = Data_output,
            Parity_received_3 = Parity_received_2;
        _ -> Data_output_2 = lists:append((case Data_output of nil -> []; _ -> Data_output end), [(case erlang:is_map(Code_6) of true -> maps:get(Idx_3, Code_6, nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(Code_6) + Idx_3 + 1, Code_6); _ -> mochi_nth(Idx_3 + 1, Code_6) end end)]),
            Data_output_3 = Data_output_2,
            Parity_received_3 = Parity_received
    end,
            Idx_4 = (Idx_3 + 1),
            I_18 = (I_17 + 1),
            Fun_15_loop(Code_6, Data_output_3, I_18, Idx_4, Parity_received_3, R_2);
        _ -> {Code_6, Data_output, I_17, Idx_3, Parity_received, R_2}
    end
end,
{Code_6, Data_output_3, I_18, Idx_4, Parity_received_3, R_2} = Fun_15(Code_6, Data_output, I_17, Idx_3, Parity_received, R_2),
        Recomputed = hamming_encode(R_2, Data_output_3),
        Parity_calc = [],
        J_7 = 0,
        Fun_16 = fun Fun_16_loop(Code_6, Data_output_3, I_18, Idx_4, J_7, Parity_calc, Parity_received_3, R_2, Recomputed) ->
    case (J_7 < erlang:length(Recomputed)) of
        true ->
            case is_power_of_two((J_7 + 1)) of
        true -> Parity_calc_2 = lists:append((case Parity_calc of nil -> []; _ -> Parity_calc end), [(case erlang:is_map(Recomputed) of true -> maps:get(J_7, Recomputed, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Recomputed) + J_7 + 1, Recomputed); _ -> mochi_nth(J_7 + 1, Recomputed) end end)]),
            Parity_calc_3 = Parity_calc_2;
        _ -> Parity_calc_3 = Parity_calc
    end,
            J_8 = (J_7 + 1),
            Fun_16_loop(Code_6, Data_output_3, I_18, Idx_4, J_8, Parity_calc_3, Parity_received_3, R_2, Recomputed);
        _ -> {Code_6, Data_output_3, I_18, Idx_4, J_7, Parity_calc, Parity_received_3, R_2, Recomputed}
    end
end,
{Code_6, Data_output_3, I_18, Idx_4, J_8, Parity_calc_3, Parity_received_3, R_2, Recomputed} = Fun_16(Code_6, Data_output_3, I_18, Idx_4, J_7, Parity_calc, Parity_received_3, R_2, Recomputed),
        Ack = list_eq(Parity_received_3, Parity_calc_3),
        #{"data" => Data_output_3, "ack" => Ack}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        SizePari = 4,
        Be = 2,
        Text_4 = "Message01",
        Binary = text_to_bits("Message01"),
        io:format("~ts~n", [mochi_repr((("Text input in binary is '" ++ Binary) ++ "'"))]),
        Data_bits_2 = string_to_bitlist(Binary),
        Encoded = hamming_encode(4, Data_bits_2),
        io:format("~ts~n", [mochi_repr(("Data converted ----------> " ++ bitlist_to_string(Encoded)))]),
        Decoded = hamming_decode(4, Encoded),
        io:format("~ts~n", [mochi_repr(((("Data receive ------------> " ++ bitlist_to_string(maps:get("data", Decoded, nil))) ++ " -- Data integrity: ") ++ bool_to_string(maps:get("ack", Decoded, nil))))]),
        Corrupted = [],
        I_19 = 0,
        Fun_17 = fun Fun_17_loop(Be, Binary, Corrupted, Data_bits_2, Decoded, Encoded, I_19, SizePari, Text_4) ->
    case (I_19 < erlang:length(Encoded)) of
        true ->
            Corrupted_2 = lists:append((case Corrupted of nil -> []; _ -> Corrupted end), [(case erlang:is_map(Encoded) of true -> maps:get(I_19, Encoded, nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(Encoded) + I_19 + 1, Encoded); _ -> mochi_nth(I_19 + 1, Encoded) end end)]),
            I_20 = (I_19 + 1),
            Fun_17_loop(Be, Binary, Corrupted_2, Data_bits_2, Decoded, Encoded, I_20, SizePari, Text_4);
        _ -> {Be, Binary, Corrupted, Data_bits_2, Decoded, Encoded, I_19, SizePari, Text_4}
    end
end,
{Be, Binary, Corrupted_2, Data_bits_2, Decoded, Encoded, I_20, SizePari, Text_4} = Fun_17(Be, Binary, Corrupted, Data_bits_2, Decoded, Encoded, I_19, SizePari, Text_4),
        Pos_3 = (Be - 1),
        case ((case erlang:is_map(Corrupted_2) of true -> maps:get(Pos_3, Corrupted_2, nil); _ -> case Pos_3 < 0 of true -> mochi_nth(erlang:length(Corrupted_2) + Pos_3 + 1, Corrupted_2); _ -> mochi_nth(Pos_3 + 1, Corrupted_2) end end) == 0) of
        true -> Corrupted_3 = lists:sublist(Corrupted_2, Pos_3) ++ [1] ++ lists:nthtail(Pos_3 + 1, Corrupted_2),
            Corrupted_5 = Corrupted_3;
        _ -> Corrupted_4 = lists:sublist(Corrupted_2, Pos_3) ++ [0] ++ lists:nthtail(Pos_3 + 1, Corrupted_2),
            Corrupted_5 = Corrupted_4
    end,
        Decoded_err = hamming_decode(SizePari, Corrupted_5),
        io:format("~ts~n", [mochi_repr(((("Data receive (error) ----> " ++ bitlist_to_string(maps:get("data", Decoded_err, nil))) ++ " -- Data integrity: ") ++ bool_to_string(maps:get("ack", Decoded_err, nil))))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
