#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, ord/1, bit_and/2, bit_xor/2, bit_not32/1, elf_hash/1]).

% Generated by Mochi transpiler v0.10.66 (8fdd1fe3d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

ord(Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I) ->
    case (I < erlang:length(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")) of
        true ->
            case (string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, (32 + I)});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2);
        _ -> {Ch, I}
    end
end,
{Ch, I_2} = Fun(Ch, I),
        0
    catch {return, RetCatch} -> RetCatch end.

bit_and(A, B) ->
    try
        Ua = A,
        Ub = B,
        Res = 0,
        Bit = 1,
        Fun_2 = fun Fun_2_loop(A, B, Bit, Res, Ua, Ub) ->
    case ((Ua > 0) orelse (Ub > 0)) of
        true ->
            case ((mochi_mod(Ua, 2) == 1) andalso (mochi_mod(Ub, 2) == 1)) of
        true -> Res_2 = (Res + Bit),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            Ua_2 = mochi_to_int((Ua div 2)),
            Ub_2 = mochi_to_int((Ub div 2)),
            Bit_2 = (Bit * 2),
            Fun_2_loop(A, B, Bit_2, Res_3, Ua_2, Ub_2);
        _ -> {A, B, Bit, Res, Ua, Ub}
    end
end,
{A, B, Bit_2, Res_3, Ua_2, Ub_2} = Fun_2(A, B, Bit, Res, Ua, Ub),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

bit_xor(A_2, B_2) ->
    try
        Ua_3 = A_2,
        Ub_3 = B_2,
        Res_4 = 0,
        Bit_3 = 1,
        Fun_3 = fun Fun_3_loop(A_2, B_2, Bit_3, Res_4, Ua_3, Ub_3) ->
    case ((Ua_3 > 0) orelse (Ub_3 > 0)) of
        true ->
            Abit = mochi_mod(Ua_3, 2),
            Bbit = mochi_mod(Ub_3, 2),
            case (Abit /= Bbit) of
        true -> Res_5 = (Res_4 + Bit_3),
            Res_6 = Res_5;
        _ -> Res_6 = Res_4
    end,
            Ua_4 = mochi_to_int((Ua_3 div 2)),
            Ub_4 = mochi_to_int((Ub_3 div 2)),
            Bit_4 = (Bit_3 * 2),
            Fun_3_loop(A_2, B_2, Bit_4, Res_6, Ua_4, Ub_4);
        _ -> {A_2, B_2, Bit_3, Res_4, Ua_3, Ub_3}
    end
end,
{A_2, B_2, Bit_4, Res_6, Ua_4, Ub_4} = Fun_3(A_2, B_2, Bit_3, Res_4, Ua_3, Ub_3),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

bit_not32(X) ->
    try
        Ux = X,
        Res_7 = 0,
        Bit_5 = 1,
        Count = 0,
        Fun_4 = fun Fun_4_loop(Bit_5, Count, Res_7, Ux, X) ->
    case (Count < 32) of
        true ->
            case (mochi_mod(Ux, 2) == 0) of
        true -> Res_8 = (Res_7 + Bit_5),
            Res_9 = Res_8;
        _ -> Res_9 = Res_7
    end,
            Ux_2 = mochi_to_int((Ux div 2)),
            Bit_6 = (Bit_5 * 2),
            Count_2 = (Count + 1),
            Fun_4_loop(Bit_6, Count_2, Res_9, Ux_2, X);
        _ -> {Bit_5, Count, Res_7, Ux, X}
    end
end,
{Bit_6, Count_2, Res_9, Ux_2, X} = Fun_4(Bit_5, Count, Res_7, Ux, X),
        Res_9
    catch {return, RetCatch} -> RetCatch end.

elf_hash(Data) ->
    try
        Hash_ = 0,
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(Data, Hash_, I_3) ->
    case (I_3 < erlang:length(Data)) of
        true ->
            C = ord(string:substr(Data, I_3 + 1, ((I_3 + 1) - I_3))),
            Hash__2 = ((Hash_ * 16) + C),
            X_2 = bit_and(Hash__2, 4026531840),
            case (X_2 /= 0) of
        true -> Hash__3 = bit_xor(Hash__2, mochi_to_int((X_2 div 16777216))),
            Hash__4 = Hash__3;
        _ -> Hash__4 = Hash__2
    end,
            Hash__5 = bit_and(Hash__4, bit_not32(X_2)),
            I_4 = (I_3 + 1),
            Fun_5_loop(Data, Hash__5, I_4);
        _ -> {Data, Hash_, I_3}
    end
end,
{Data, Hash__5, I_4} = Fun_5(Data, Hash_, I_3),
        Hash__5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ascii', " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"),
    io:format("~ts~n", [mochi_str(elf_hash("lorem ipsum"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
