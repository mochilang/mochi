#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, ord/1, adler32/1, main/0]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

ord(Ch) ->
    try
        Lower = "abcdefghijklmnopqrstuvwxyz",
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Digits = "0123456789",
        I = 0,
        Fun = fun Fun_loop(Ch, Digits, I, Lower, Upper) ->
    case (I < erlang:length(Lower)) of
        true ->
            case (string:substr(Lower, I + 1, 1) == Ch) of
        true -> throw({return, (97 + I)});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, Digits, I_2, Lower, Upper);
        _ -> {Ch, Digits, I, Lower, Upper}
    end
end,
{Ch, Digits, I_2, Lower, Upper} = Fun(Ch, Digits, I, Lower, Upper),
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Ch, Digits, I_3, Lower, Upper) ->
    case (I_3 < erlang:length(Upper)) of
        true ->
            case (string:substr(Upper, I_3 + 1, 1) == Ch) of
        true -> throw({return, (65 + I_3)});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Ch, Digits, I_4, Lower, Upper);
        _ -> {Ch, Digits, I_3, Lower, Upper}
    end
end,
{Ch, Digits, I_4, Lower, Upper} = Fun_2(Ch, Digits, I_3, Lower, Upper),
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Ch, Digits, I_5, Lower, Upper) ->
    case (I_5 < erlang:length(Digits)) of
        true ->
            case (string:substr(Digits, I_5 + 1, 1) == Ch) of
        true -> throw({return, (48 + I_5)});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Ch, Digits, I_6, Lower, Upper);
        _ -> {Ch, Digits, I_5, Lower, Upper}
    end
end,
{Ch, Digits, I_6, Lower, Upper} = Fun_3(Ch, Digits, I_5, Lower, Upper),
        case (Ch == " ") of
        true -> throw({return, 32});
        _ -> ok
    end,
        0
    catch {return, RetCatch} -> RetCatch end.

adler32(Plain_text) ->
    try
        A = 1,
        B = 0,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(A, B, I_7, Plain_text) ->
    case (I_7 < erlang:length(Plain_text)) of
        true ->
            Code = ord(string:substr(Plain_text, I_7 + 1, 1)),
            A_2 = mochi_mod((A + Code), 65521),
            B_2 = mochi_mod((B + A_2), 65521),
            I_8 = (I_7 + 1),
            Fun_4_loop(A_2, B_2, I_8, Plain_text);
        _ -> {A, B, I_7, Plain_text}
    end
end,
{A_2, B_2, I_8, Plain_text} = Fun_4(A, B, I_7, Plain_text),
        ((B_2 * 65536) + A_2)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_str(adler32("Algorithms"))]),
        io:format("~ts~n", [mochi_str(adler32("go adler em all"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('MOD_ADLER', 65521),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
