#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, round_dec/2, reset/0, push/2, xor_fn/2, xorshift/2, pull/1]).

% Generated by Mochi transpiler v0.10.66 (951718e85a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

round_dec(X, N) ->
    try
        M10 = 1.0,
        I = 0,
        Fun = fun Fun_loop(I, M10, N, X) ->
    case (I < N) of
        true ->
            M10_2 = mochi_safe_mul(M10, 10.0),
            I_2 = (I + 1),
            Fun_loop(I_2, M10_2, N, X);
        _ -> {I, M10, N, X}
    end
end,
{I_2, M10_2, N, X} = Fun(I, M10, N, X),
        Y = (mochi_safe_mul(X, M10_2) + 0.5),
        mochi_safe_div(mochi_safe_mul(1.0, mochi_to_int(Y)), M10_2)
    catch {return, RetCatch} -> RetCatch end.

reset() ->
    try
        #{"buffer" => erlang:get('K'), "params" => [0.0, 0.0, 0.0, 0.0, 0.0], "time" => 0}
    catch {return, RetCatch} -> RetCatch end.

push(M, Seed) ->
    try
        Buf = maps:get("buffer", M, nil),
        Par = maps:get("params", M, nil),
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Buf, I_3, M, Par, Seed) ->
    case (I_3 < erlang:length(Buf)) of
        true ->
            Value = (case erlang:is_map(Buf) of true -> maps:get(I_3, Buf, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Buf) + I_3 + 1, Buf); _ -> mochi_nth(I_3 + 1, Buf) end end),
            E = mochi_safe_div(mochi_safe_mul(1.0, Seed), Value),
            Next_value = ((case erlang:is_map(Buf) of true -> maps:get(mochi_mod((I_3 + 1), 5), Buf, nil); _ -> case mochi_mod((I_3 + 1), 5) < 0 of true -> mochi_nth(erlang:length(Buf) + mochi_mod((I_3 + 1), 5) + 1, Buf); _ -> mochi_nth(mochi_mod((I_3 + 1), 5) + 1, Buf) end end) + E),
            Next_value_2 = (Next_value - mochi_safe_mul(1.0, mochi_to_int(Next_value))),
            R = ((case erlang:is_map(Par) of true -> maps:get(I_3, Par, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Par) + I_3 + 1, Par); _ -> mochi_nth(I_3 + 1, Par) end end) + E),
            R_2 = (R - mochi_safe_mul(1.0, mochi_to_int(R))),
            R_3 = (R_2 + 3.0),
            Buf_2 = lists:sublist(Buf, I_3) ++ [round_dec(mochi_safe_mul(mochi_safe_mul(R_3, Next_value_2), (1.0 - Next_value_2)), 10)] ++ lists:nthtail(I_3 + 1, Buf),
            Par_2 = lists:sublist(Par, I_3) ++ [R_3] ++ lists:nthtail(I_3 + 1, Par),
            I_4 = (I_3 + 1),
            Fun_2_loop(Buf_2, I_4, M, Par_2, Seed);
        _ -> {Buf, I_3, M, Par, Seed}
    end
end,
{Buf_2, I_4, M, Par_2, Seed} = Fun_2(Buf, I_3, M, Par, Seed),
        #{"buffer" => Buf_2, "params" => Par_2, "time" => (maps:get("time", M, nil) + 1)}
    catch {return, RetCatch} -> RetCatch end.

xor_fn(A, B) ->
    try
        Aa = A,
        Bb = B,
        Res = 0,
        Bit = 1,
        Fun_3 = fun Fun_3_loop(A, Aa, B, Bb, Bit, Res) ->
    case ((Aa > 0) orelse (Bb > 0)) of
        true ->
            Abit = mochi_mod(Aa, 2),
            Bbit = mochi_mod(Bb, 2),
            case (Abit /= Bbit) of
        true -> Res_2 = (Res + Bit),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            Aa_2 = (Aa div 2),
            Bb_2 = (Bb div 2),
            Bit_2 = (Bit * 2),
            Fun_3_loop(A, Aa_2, B, Bb_2, Bit_2, Res_3);
        _ -> {A, Aa, B, Bb, Bit, Res}
    end
end,
{A, Aa_2, B, Bb_2, Bit_2, Res_3} = Fun_3(A, Aa, B, Bb, Bit, Res),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

xorshift(X_2, Y_2) ->
    try
        Xv = X_2,
        Yv = Y_2,
        Xv_2 = xor_fn(Xv, (Yv div 8192)),
        Yv_2 = xor_fn(Yv, (Xv_2 * 131072)),
        Xv_3 = xor_fn(Xv_2, (Yv_2 div 32)),
        Xv_3
    catch {return, RetCatch} -> RetCatch end.

pull(M_2) ->
    try
        Buf_3 = maps:get("buffer", M_2, nil),
        Par_3 = maps:get("params", M_2, nil),
        Key = mochi_mod(maps:get("time", M_2, nil), 5),
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Buf_3, I_5, Key, M_2, Par_3) ->
    case (I_5 < 3) of
        true ->
            R_4 = (case erlang:is_map(Par_3) of true -> maps:get(Key, Par_3, nil); _ -> case Key < 0 of true -> mochi_nth(erlang:length(Par_3) + Key + 1, Par_3); _ -> mochi_nth(Key + 1, Par_3) end end),
            Value_2 = (case erlang:is_map(Buf_3) of true -> maps:get(Key, Buf_3, nil); _ -> case Key < 0 of true -> mochi_nth(erlang:length(Buf_3) + Key + 1, Buf_3); _ -> mochi_nth(Key + 1, Buf_3) end end),
            Buf_4 = lists:sublist(Buf_3, Key) ++ [round_dec(mochi_safe_mul(mochi_safe_mul(R_4, Value_2), (1.0 - Value_2)), 10)] ++ lists:nthtail(Key + 1, Buf_3),
            New_r = (mochi_safe_mul(mochi_safe_mul(1.0, maps:get("time", M_2, nil)), 0.01) + mochi_safe_mul(R_4, 1.01)),
            New_r_2 = (New_r - mochi_safe_mul(1.0, mochi_to_int(New_r))),
            Par_4 = lists:sublist(Par_3, Key) ++ [(New_r_2 + 3.0)] ++ lists:nthtail(Key + 1, Par_3),
            I_6 = (I_5 + 1),
            Fun_4_loop(Buf_4, I_6, Key, M_2, Par_4);
        _ -> {Buf_3, I_5, Key, M_2, Par_3}
    end
end,
{Buf_4, I_6, Key, M_2, Par_4} = Fun_4(Buf_3, I_5, Key, M_2, Par_3),
        X_3 = mochi_to_int(mochi_safe_mul((case erlang:is_map(Buf_4) of true -> maps:get(mochi_mod((Key + 2), 5), Buf_4, nil); _ -> case mochi_mod((Key + 2), 5) < 0 of true -> mochi_nth(erlang:length(Buf_4) + mochi_mod((Key + 2), 5) + 1, Buf_4); _ -> mochi_nth(mochi_mod((Key + 2), 5) + 1, Buf_4) end end), 10000000000.0)),
        Y_3 = mochi_to_int(mochi_safe_mul((case erlang:is_map(Buf_4) of true -> maps:get(mochi_mod(((Key + 5) - 2), 5), Buf_4, nil); _ -> case mochi_mod(((Key + 5) - 2), 5) < 0 of true -> mochi_nth(erlang:length(Buf_4) + mochi_mod(((Key + 5) - 2), 5) + 1, Buf_4); _ -> mochi_nth(mochi_mod(((Key + 5) - 2), 5) + 1, Buf_4) end end), 10000000000.0)),
        New_machine = #{"buffer" => Buf_4, "params" => Par_4, "time" => (maps:get("time", M_2, nil) + 1)},
        Value_3 = mochi_mod(xorshift(X_3, Y_3), 4294967295),
        #{"value" => Value_3, "machine" => New_machine}
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('K', [0.33, 0.44, 0.55, 0.44, 0.33]),
    erlang:put('t', 3),
    erlang:put('size', 5),
    erlang:put('machine', reset()),
    erlang:put('i', 0),
    Fun_5 = fun Fun_5_loop() ->
    case (erlang:get('i') < 100) of
        true ->
            erlang:put('machine', push(erlang:get('machine'), erlang:get('i'))),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_5_loop();
        _ -> {}
    end
end,
{} = Fun_5(),
    erlang:put('res', pull(erlang:get('machine'))),
    io:format("~ts~n", [mochi_repr(maps:get("value", erlang:get('res'), nil))]),
    io:format("~ts~n", [mochi_repr(maps:get("buffer", maps:get("machine", erlang:get('res'), nil), nil))]),
    io:format("~ts~n", [mochi_repr(maps:get("params", maps:get("machine", erlang:get('res'), nil), nil))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
