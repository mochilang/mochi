#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ord/1, pow2/1, bit_and/2, bit_or/2, bit_xor/2, bit_not/1, rotate_left/2, to_hex32/1, sha1/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (589dcb03e5) on 2025-08-07 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

ord(Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I) ->
    case (I < erlang:length(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")) of
        true ->
            case (string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, (32 + I)});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2);
        _ -> {Ch, I}
    end
end,
{Ch, I_2} = Fun(Ch, I),
        0
    catch {return, Ret} -> Ret end.

pow2(N) ->
    try
        Res = 1,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, N, Res) ->
    case (I_3 < N) of
        true ->
            Res_2 = (Res * 2),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, N, Res_2);
        _ -> {I_3, N, Res}
    end
end,
{I_4, N, Res_2} = Fun_2(I_3, N, Res),
        Res_2
    catch {return, Ret} -> Ret end.

bit_and(A, B) ->
    try
        X = A,
        Y = B,
        Res_3 = 0,
        Bit = 1,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(A, B, Bit, I_5, Res_3, X, Y) ->
    case (I_5 < 32) of
        true ->
            case ((mochi_mod(X, 2) == 1) andalso (mochi_mod(Y, 2) == 1)) of
        true -> Res_4 = (Res_3 + Bit),
            Res_5 = Res_4;
        _ -> Res_5 = Res_3
    end,
            X_2 = (X div 2),
            Y_2 = (Y div 2),
            Bit_2 = (Bit * 2),
            I_6 = (I_5 + 1),
            Fun_3_loop(A, B, Bit_2, I_6, Res_5, X_2, Y_2);
        _ -> {A, B, Bit, I_5, Res_3, X, Y}
    end
end,
{A, B, Bit_2, I_6, Res_5, X_2, Y_2} = Fun_3(A, B, Bit, I_5, Res_3, X, Y),
        Res_5
    catch {return, Ret} -> Ret end.

bit_or(A_2, B_2) ->
    try
        X_3 = A_2,
        Y_3 = B_2,
        Res_6 = 0,
        Bit_3 = 1,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(A_2, B_2, Bit_3, I_7, Res_6, X_3, Y_3) ->
    case (I_7 < 32) of
        true ->
            Abit = mochi_mod(X_3, 2),
            Bbit = mochi_mod(Y_3, 2),
            case ((Abit == 1) orelse (Bbit == 1)) of
        true -> Res_7 = (Res_6 + Bit_3),
            Res_8 = Res_7;
        _ -> Res_8 = Res_6
    end,
            X_4 = (X_3 div 2),
            Y_4 = (Y_3 div 2),
            Bit_4 = (Bit_3 * 2),
            I_8 = (I_7 + 1),
            Fun_4_loop(A_2, B_2, Bit_4, I_8, Res_8, X_4, Y_4);
        _ -> {A_2, B_2, Bit_3, I_7, Res_6, X_3, Y_3}
    end
end,
{A_2, B_2, Bit_4, I_8, Res_8, X_4, Y_4} = Fun_4(A_2, B_2, Bit_3, I_7, Res_6, X_3, Y_3),
        Res_8
    catch {return, Ret} -> Ret end.

bit_xor(A_3, B_3) ->
    try
        X_5 = A_3,
        Y_5 = B_3,
        Res_9 = 0,
        Bit_5 = 1,
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(A_3, B_3, Bit_5, I_9, Res_9, X_5, Y_5) ->
    case (I_9 < 32) of
        true ->
            Abit_2 = mochi_mod(X_5, 2),
            Bbit_2 = mochi_mod(Y_5, 2),
            case (((Abit_2 == 1) andalso (Bbit_2 == 0)) orelse ((Abit_2 == 0) andalso (Bbit_2 == 1))) of
        true -> Res_10 = (Res_9 + Bit_5),
            Res_11 = Res_10;
        _ -> Res_11 = Res_9
    end,
            X_6 = (X_5 div 2),
            Y_6 = (Y_5 div 2),
            Bit_6 = (Bit_5 * 2),
            I_10 = (I_9 + 1),
            Fun_5_loop(A_3, B_3, Bit_6, I_10, Res_11, X_6, Y_6);
        _ -> {A_3, B_3, Bit_5, I_9, Res_9, X_5, Y_5}
    end
end,
{A_3, B_3, Bit_6, I_10, Res_11, X_6, Y_6} = Fun_5(A_3, B_3, Bit_5, I_9, Res_9, X_5, Y_5),
        Res_11
    catch {return, Ret} -> Ret end.

bit_not(A_4) ->
    try
        ((4294967296 - 1) - A_4)
    catch {return, Ret} -> Ret end.

rotate_left(N_2, B_4) ->
    try
        Left = mochi_mod((N_2 * pow2(B_4)), 4294967296),
        Right = (N_2 div pow2((32 - B_4))),
        mochi_mod((Left + Right), 4294967296)
    catch {return, Ret} -> Ret end.

to_hex32(N_3) ->
    try
        Digits = "0123456789abcdef",
        Num = N_3,
        S = "",
        case (Num == 0) of
        true -> S_2 = "0",
            S_3 = S_2;
        _ -> S_3 = S
    end,
        Fun_6 = fun Fun_6_loop(Digits, N_3, Num, S_3) ->
    case (Num > 0) of
        true ->
            D = mochi_mod(Num, 16),
            S_4 = (string:substr(Digits, D + 1, ((D + 1) - D)) ++ S_3),
            Num_2 = (Num div 16),
            Fun_6_loop(Digits, N_3, Num_2, S_4);
        _ -> {Digits, N_3, Num, S_3}
    end
end,
{Digits, N_3, Num_2, S_4} = Fun_6(Digits, N_3, Num, S_3),
        Fun_7 = fun Fun_7_loop(Digits, N_3, Num_2, S_4) ->
    case (erlang:length(S_4) < 8) of
        true ->
            S_5 = ("0" ++ S_4),
            Fun_7_loop(Digits, N_3, Num_2, S_5);
        _ -> {Digits, N_3, Num_2, S_4}
    end
end,
{Digits, N_3, Num_2, S_5} = Fun_7(Digits, N_3, Num_2, S_4),
        case (erlang:length(S_5) > 8) of
        true -> S_6 = string:substr(S_5, (erlang:length(S_5) - 8) + 1, (erlang:length(S_5) - (erlang:length(S_5) - 8))),
            S_7 = S_6;
        _ -> S_7 = S_5
    end,
        S_7
    catch {return, Ret} -> Ret end.

sha1(Message) ->
    try
        Bytes = [],
        I_11 = 0,
        Fun_8 = fun Fun_8_loop(Bytes, I_11, Message) ->
    case (I_11 < erlang:length(Message)) of
        true ->
            Bytes_2 = lists:append((case Bytes of nil -> []; _ -> Bytes end), [ord(string:substr(Message, I_11 + 1, ((I_11 + 1) - I_11)))]),
            I_12 = (I_11 + 1),
            Fun_8_loop(Bytes_2, I_12, Message);
        _ -> {Bytes, I_11, Message}
    end
end,
{Bytes_2, I_12, Message} = Fun_8(Bytes, I_11, Message),
        Bytes_3 = lists:append((case Bytes_2 of nil -> []; _ -> Bytes_2 end), [128]),
        Fun_9 = fun Fun_9_loop(Bytes_3, I_12, Message) ->
    case (mochi_mod((erlang:length(Bytes_3) + 8), 64) /= 0) of
        true ->
            Bytes_4 = lists:append((case Bytes_3 of nil -> []; _ -> Bytes_3 end), [0]),
            Fun_9_loop(Bytes_4, I_12, Message);
        _ -> {Bytes_3, I_12, Message}
    end
end,
{Bytes_4, I_12, Message} = Fun_9(Bytes_3, I_12, Message),
        Bit_len = (erlang:length(Message) * 8),
        Len_bytes = [0, 0, 0, 0, 0, 0, 0, 0],
        Bl = Bit_len,
        K = 7,
        Fun_10 = fun Fun_10_loop(Bit_len, Bl, Bytes_4, I_12, K, Len_bytes, Message) ->
    case (K >= 0) of
        true ->
            Len_bytes_2 = lists:sublist(Len_bytes, K) ++ [mochi_mod(Bl, 256)] ++ lists:nthtail(K + 1, Len_bytes),
            Bl_2 = (Bl div 256),
            K_2 = (K - 1),
            Fun_10_loop(Bit_len, Bl_2, Bytes_4, I_12, K_2, Len_bytes_2, Message);
        _ -> {Bit_len, Bl, Bytes_4, I_12, K, Len_bytes, Message}
    end
end,
{Bit_len, Bl_2, Bytes_4, I_12, K_2, Len_bytes_2, Message} = Fun_10(Bit_len, Bl, Bytes_4, I_12, K, Len_bytes, Message),
        J = 0,
        Fun_11 = fun Fun_11_loop(Bit_len, Bl_2, Bytes_4, I_12, J, K_2, Len_bytes_2, Message) ->
    case (J < 8) of
        true ->
            Bytes_5 = lists:append((case Bytes_4 of nil -> []; _ -> Bytes_4 end), [(case erlang:is_map(Len_bytes_2) of true -> maps:get(J, Len_bytes_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Len_bytes_2) + J + 1, Len_bytes_2); _ -> mochi_nth(J + 1, Len_bytes_2) end end)]),
            J_2 = (J + 1),
            Fun_11_loop(Bit_len, Bl_2, Bytes_5, I_12, J_2, K_2, Len_bytes_2, Message);
        _ -> {Bit_len, Bl_2, Bytes_4, I_12, J, K_2, Len_bytes_2, Message}
    end
end,
{Bit_len, Bl_2, Bytes_5, I_12, J_2, K_2, Len_bytes_2, Message} = Fun_11(Bit_len, Bl_2, Bytes_4, I_12, J, K_2, Len_bytes_2, Message),
        Blocks = [],
        Pos = 0,
        Fun_13 = fun Fun_13_loop(Bit_len, Bl_2, Blocks, Bytes_5, I_12, J_2, K_2, Len_bytes_2, Message, Pos) ->
    case (Pos < erlang:length(Bytes_5)) of
        true ->
            Block = [],
            J2 = 0,
            Fun_12 = fun Fun_12_loop(Bit_len, Bl_2, Block, Blocks, Bytes_5, I_12, J_2, J2, K_2, Len_bytes_2, Message, Pos) ->
    case (J2 < 64) of
        true ->
            Block_2 = lists:append((case Block of nil -> []; _ -> Block end), [(case erlang:is_map(Bytes_5) of true -> maps:get((Pos + J2), Bytes_5, nil); _ -> case (Pos + J2) < 0 of true -> mochi_nth(erlang:length(Bytes_5) + (Pos + J2) + 1, Bytes_5); _ -> mochi_nth((Pos + J2) + 1, Bytes_5) end end)]),
            J2_2 = (J2 + 1),
            Fun_12_loop(Bit_len, Bl_2, Block_2, Blocks, Bytes_5, I_12, J_2, J2_2, K_2, Len_bytes_2, Message, Pos);
        _ -> {Bit_len, Bl_2, Block, Blocks, Bytes_5, I_12, J_2, J2, K_2, Len_bytes_2, Message, Pos}
    end
end,
{Bit_len, Bl_2, Block_2, Blocks, Bytes_5, I_12, J_2, J2_2, K_2, Len_bytes_2, Message, Pos} = Fun_12(Bit_len, Bl_2, Block, Blocks, Bytes_5, I_12, J_2, J2, K_2, Len_bytes_2, Message, Pos),
            Blocks_2 = lists:append((case Blocks of nil -> []; _ -> Blocks end), [Block_2]),
            Pos_2 = (Pos + 64),
            Fun_13_loop(Bit_len, Bl_2, Blocks_2, Bytes_5, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2);
        _ -> {Bit_len, Bl_2, Blocks, Bytes_5, I_12, J_2, K_2, Len_bytes_2, Message, Pos}
    end
end,
{Bit_len, Bl_2, Blocks_2, Bytes_5, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2} = Fun_13(Bit_len, Bl_2, Blocks, Bytes_5, I_12, J_2, K_2, Len_bytes_2, Message, Pos),
        H0 = 1732584193,
        H1 = 4023233417,
        H2 = 2562383102,
        H3 = 271733878,
        H4 = 3285377520,
        Bindex = 0,
        Fun_17 = fun Fun_17_loop(Bindex, Bit_len, Bl_2, Blocks_2, Bytes_5, H0, H1, H2, H3, H4, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2) ->
    case (Bindex < erlang:length(Blocks_2)) of
        true ->
            Block_3 = (case erlang:is_map(Blocks_2) of true -> maps:get(Bindex, Blocks_2, nil); _ -> case Bindex < 0 of true -> mochi_nth(erlang:length(Blocks_2) + Bindex + 1, Blocks_2); _ -> mochi_nth(Bindex + 1, Blocks_2) end end),
            W = [],
            T = 0,
            Fun_14 = fun Fun_14_loop(Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, H0, H1, H2, H3, H4, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2, T, W) ->
    case (T < 16) of
        true ->
            J3 = (T * 4),
            Word = (((((((case erlang:is_map(Block_3) of true -> maps:get(J3, Block_3, nil); _ -> case J3 < 0 of true -> mochi_nth(erlang:length(Block_3) + J3 + 1, Block_3); _ -> mochi_nth(J3 + 1, Block_3) end end) * 256) + (case erlang:is_map(Block_3) of true -> maps:get((J3 + 1), Block_3, nil); _ -> case (J3 + 1) < 0 of true -> mochi_nth(erlang:length(Block_3) + (J3 + 1) + 1, Block_3); _ -> mochi_nth((J3 + 1) + 1, Block_3) end end)) * 256) + (case erlang:is_map(Block_3) of true -> maps:get((J3 + 2), Block_3, nil); _ -> case (J3 + 2) < 0 of true -> mochi_nth(erlang:length(Block_3) + (J3 + 2) + 1, Block_3); _ -> mochi_nth((J3 + 2) + 1, Block_3) end end)) * 256) + (case erlang:is_map(Block_3) of true -> maps:get((J3 + 3), Block_3, nil); _ -> case (J3 + 3) < 0 of true -> mochi_nth(erlang:length(Block_3) + (J3 + 3) + 1, Block_3); _ -> mochi_nth((J3 + 3) + 1, Block_3) end end)),
            W_2 = lists:append((case W of nil -> []; _ -> W end), [Word]),
            T_2 = (T + 1),
            Fun_14_loop(Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, H0, H1, H2, H3, H4, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2, T_2, W_2);
        _ -> {Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, H0, H1, H2, H3, H4, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2, T, W}
    end
end,
{Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, H0, H1, H2, H3, H4, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2, T_2, W_2} = Fun_14(Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, H0, H1, H2, H3, H4, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2, T, W),
            Fun_15 = fun Fun_15_loop(Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, H0, H1, H2, H3, H4, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2, T_2, W_2) ->
    case (T_2 < 80) of
        true ->
            Tmp = bit_xor(bit_xor(bit_xor((case erlang:is_map(W_2) of true -> maps:get((T_2 - 3), W_2, nil); _ -> case (T_2 - 3) < 0 of true -> mochi_nth(erlang:length(W_2) + (T_2 - 3) + 1, W_2); _ -> mochi_nth((T_2 - 3) + 1, W_2) end end), (case erlang:is_map(W_2) of true -> maps:get((T_2 - 8), W_2, nil); _ -> case (T_2 - 8) < 0 of true -> mochi_nth(erlang:length(W_2) + (T_2 - 8) + 1, W_2); _ -> mochi_nth((T_2 - 8) + 1, W_2) end end)), (case erlang:is_map(W_2) of true -> maps:get((T_2 - 14), W_2, nil); _ -> case (T_2 - 14) < 0 of true -> mochi_nth(erlang:length(W_2) + (T_2 - 14) + 1, W_2); _ -> mochi_nth((T_2 - 14) + 1, W_2) end end)), (case erlang:is_map(W_2) of true -> maps:get((T_2 - 16), W_2, nil); _ -> case (T_2 - 16) < 0 of true -> mochi_nth(erlang:length(W_2) + (T_2 - 16) + 1, W_2); _ -> mochi_nth((T_2 - 16) + 1, W_2) end end)),
            W_3 = lists:append((case W_2 of nil -> []; _ -> W_2 end), [rotate_left(Tmp, 1)]),
            T_3 = (T_2 + 1),
            Fun_15_loop(Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, H0, H1, H2, H3, H4, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2, T_3, W_3);
        _ -> {Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, H0, H1, H2, H3, H4, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2, T_2, W_2}
    end
end,
{Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, H0, H1, H2, H3, H4, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2, T_3, W_3} = Fun_15(Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, H0, H1, H2, H3, H4, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2, T_2, W_2),
            A_5 = H0,
            B_5 = H1,
            C = H2,
            D_2 = H3,
            E = H4,
            I2 = 0,
            Fun_16 = fun Fun_16_loop(A_5, B_5, Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, C, D_2, E, H0, H1, H2, H3, H4, I_12, I2, J_2, K_2, Len_bytes_2, Message, Pos_2, T_3, W_3) ->
    case (I2 < 80) of
        true ->
            F = 0,
            Kconst = 0,
            case (I2 < 20) of
        true -> F_2 = bit_or(bit_and(B_5, C), bit_and(bit_not(B_5), D_2)),
            Kconst_2 = 1518500249,
            F_8 = F_2,
            Kconst_8 = Kconst_2;
        _ -> case (I2 < 40) of
        true -> F_3 = bit_xor(bit_xor(B_5, C), D_2),
            Kconst_3 = 1859775393,
            F_7 = F_3,
            Kconst_7 = Kconst_3;
        _ -> case (I2 < 60) of
        true -> F_4 = bit_or(bit_or(bit_and(B_5, C), bit_and(B_5, D_2)), bit_and(C, D_2)),
            Kconst_4 = 2400959708,
            F_6 = F_4,
            Kconst_6 = Kconst_4;
        _ -> F_5 = bit_xor(bit_xor(B_5, C), D_2),
            Kconst_5 = 3395469782,
            F_6 = F_5,
            Kconst_6 = Kconst_5
    end,
            F_7 = F_6,
            Kconst_7 = Kconst_6
    end,
            F_8 = F_7,
            Kconst_8 = Kconst_7
    end,
            Temp = mochi_mod(((((rotate_left(A_5, 5) + F_8) + E) + Kconst_8) + (case erlang:is_map(W_3) of true -> maps:get(I2, W_3, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(W_3) + I2 + 1, W_3); _ -> mochi_nth(I2 + 1, W_3) end end)), 4294967296),
            E_2 = D_2,
            D_3 = C,
            C_2 = rotate_left(B_5, 30),
            B_6 = A_5,
            A_6 = Temp,
            I2_2 = (I2 + 1),
            Fun_16_loop(A_6, B_6, Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, C_2, D_3, E_2, H0, H1, H2, H3, H4, I_12, I2_2, J_2, K_2, Len_bytes_2, Message, Pos_2, T_3, W_3);
        _ -> {A_5, B_5, Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, C, D_2, E, H0, H1, H2, H3, H4, I_12, I2, J_2, K_2, Len_bytes_2, Message, Pos_2, T_3, W_3}
    end
end,
{A_6, B_6, Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, C_2, D_3, E_2, H0, H1, H2, H3, H4, I_12, I2_2, J_2, K_2, Len_bytes_2, Message, Pos_2, T_3, W_3} = Fun_16(A_5, B_5, Bindex, Bit_len, Bl_2, Block_3, Blocks_2, Bytes_5, C, D_2, E, H0, H1, H2, H3, H4, I_12, I2, J_2, K_2, Len_bytes_2, Message, Pos_2, T_3, W_3),
            H0_2 = mochi_mod((H0 + A_6), 4294967296),
            H1_2 = mochi_mod((H1 + B_6), 4294967296),
            H2_2 = mochi_mod((H2 + C_2), 4294967296),
            H3_2 = mochi_mod((H3 + D_3), 4294967296),
            H4_2 = mochi_mod((H4 + E_2), 4294967296),
            Bindex_2 = (Bindex + 1),
            Fun_17_loop(Bindex_2, Bit_len, Bl_2, Blocks_2, Bytes_5, H0_2, H1_2, H2_2, H3_2, H4_2, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2);
        _ -> {Bindex, Bit_len, Bl_2, Blocks_2, Bytes_5, H0, H1, H2, H3, H4, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2}
    end
end,
{Bindex_2, Bit_len, Bl_2, Blocks_2, Bytes_5, H0_2, H1_2, H2_2, H3_2, H4_2, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2} = Fun_17(Bindex, Bit_len, Bl_2, Blocks_2, Bytes_5, H0, H1, H2, H3, H4, I_12, J_2, K_2, Len_bytes_2, Message, Pos_2),
        ((((to_hex32(H0_2) ++ to_hex32(H1_2)) ++ to_hex32(H2_2)) ++ to_hex32(H3_2)) ++ to_hex32(H4_2))
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(sha1("Test String"))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('MOD', 4294967296),
    erlang:put('ASCII', " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
