#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, empty_list/0, length/1, is_empty/1, to_string/1, insert_nth/3, insert_head/2, insert_tail/2, delete_nth/2, delete_front/1, delete_tail/1, main/0]).

-compile({no_auto_import,[length/1]}).
% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

empty_list() ->
    try
        #{"data" => []}
    catch {return, RetCatch} -> RetCatch end.

length(List) ->
    try
        erlang:length(maps:get("data", List, nil))
    catch {return, RetCatch} -> RetCatch end.

is_empty(List_2) ->
    try
        (erlang:length(maps:get("data", List_2, nil)) == 0)
    catch {return, RetCatch} -> RetCatch end.

to_string(List_3) ->
    try
        case (erlang:length(maps:get("data", List_3, nil)) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        S = mochi_str((case erlang:is_map(maps:get("data", List_3, nil)) of true -> maps:get(0, maps:get("data", List_3, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", List_3, nil)) + 0 + 1, maps:get("data", List_3, nil)); _ -> mochi_nth(0 + 1, maps:get("data", List_3, nil)) end end)),
        I = 1,
        Fun = fun Fun_loop(I, List_3, S) ->
    case (I < erlang:length(maps:get("data", List_3, nil))) of
        true ->
            S_2 = ((S ++ "->") ++ mochi_str((case erlang:is_map(maps:get("data", List_3, nil)) of true -> maps:get(I, maps:get("data", List_3, nil), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(maps:get("data", List_3, nil)) + I + 1, maps:get("data", List_3, nil)); _ -> mochi_nth(I + 1, maps:get("data", List_3, nil)) end end))),
            I_2 = (I + 1),
            Fun_loop(I_2, List_3, S_2);
        _ -> {I, List_3, S}
    end
end,
{I_2, List_3, S_2} = Fun(I, List_3, S),
        S_2
    catch {return, RetCatch} -> RetCatch end.

insert_nth(List_4, Index, Value) ->
    try
        case ((Index < 0) orelse (Index > erlang:length(maps:get("data", List_4, nil)))) of
        true -> erlang:error({panic, "index out of range"});
        _ -> ok
    end,
        Res = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Index, List_4, Res, Value) ->
    case (I_3 < Index) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(maps:get("data", List_4, nil)) of true -> maps:get(I_3, maps:get("data", List_4, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", List_4, nil)) + I_3 + 1, maps:get("data", List_4, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", List_4, nil)) end end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Index, List_4, Res_2, Value);
        _ -> {I_3, Index, List_4, Res, Value}
    end
end,
{I_4, Index, List_4, Res_2, Value} = Fun_2(I_3, Index, List_4, Res, Value),
        Res_3 = lists:append((case Res_2 of nil -> []; _ -> Res_2 end), [Value]),
        Fun_3 = fun Fun_3_loop(I_4, Index, List_4, Res_3, Value) ->
    case (I_4 < erlang:length(maps:get("data", List_4, nil))) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [(case erlang:is_map(maps:get("data", List_4, nil)) of true -> maps:get(I_4, maps:get("data", List_4, nil), nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(maps:get("data", List_4, nil)) + I_4 + 1, maps:get("data", List_4, nil)); _ -> mochi_nth(I_4 + 1, maps:get("data", List_4, nil)) end end)]),
            I_5 = (I_4 + 1),
            Fun_3_loop(I_5, Index, List_4, Res_4, Value);
        _ -> {I_4, Index, List_4, Res_3, Value}
    end
end,
{I_5, Index, List_4, Res_4, Value} = Fun_3(I_4, Index, List_4, Res_3, Value),
        #{"data" => Res_4}
    catch {return, RetCatch} -> RetCatch end.

insert_head(List_5, Value_2) ->
    try
        insert_nth(List_5, 0, Value_2)
    catch {return, RetCatch} -> RetCatch end.

insert_tail(List_6, Value_3) ->
    try
        insert_nth(List_6, erlang:length(maps:get("data", List_6, nil)), Value_3)
    catch {return, RetCatch} -> RetCatch end.

delete_nth(List_7, Index_2) ->
    try
        case ((Index_2 < 0) orelse (Index_2 >= erlang:length(maps:get("data", List_7, nil)))) of
        true -> erlang:error({panic, "index out of range"});
        _ -> ok
    end,
        Res_5 = [],
        I_6 = 0,
        Val = 0,
        Fun_4 = fun Fun_4_loop(I_6, Index_2, List_7, Res_5, Val) ->
    case (I_6 < erlang:length(maps:get("data", List_7, nil))) of
        true ->
            Val_3 = (case (I_6 == Index_2) of
        true -> Val_2 = (case erlang:is_map(maps:get("data", List_7, nil)) of true -> maps:get(I_6, maps:get("data", List_7, nil), nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(maps:get("data", List_7, nil)) + I_6 + 1, maps:get("data", List_7, nil)); _ -> mochi_nth(I_6 + 1, maps:get("data", List_7, nil)) end end),
            Res_7 = Res_5,
            Val_2;
        _ -> Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [(case erlang:is_map(maps:get("data", List_7, nil)) of true -> maps:get(I_6, maps:get("data", List_7, nil), nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(maps:get("data", List_7, nil)) + I_6 + 1, maps:get("data", List_7, nil)); _ -> mochi_nth(I_6 + 1, maps:get("data", List_7, nil)) end end)]),
            Res_7 = Res_6,
            Val
    end),
            I_7 = (I_6 + 1),
            Fun_4_loop(I_7, Index_2, List_7, Res_7, Val_3);
        _ -> {I_6, Index_2, List_7, Res_5, Val}
    end
end,
{I_7, Index_2, List_7, Res_7, Val_3} = Fun_4(I_6, Index_2, List_7, Res_5, Val),
        #{"list" => #{"data" => Res_7}, "value" => Val_3}
    catch {return, RetCatch} -> RetCatch end.

delete_front(List_8) ->
    try
        delete_nth(List_8, 0)
    catch {return, RetCatch} -> RetCatch end.

delete_tail(List_9) ->
    try
        delete_nth(List_9, (erlang:length(maps:get("data", List_9, nil)) - 1))
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Cll = empty_list(),
        I_8 = 0,
        Fun_5 = fun Fun_5_loop(Cll, I_8) ->
    case (I_8 < 5) of
        true ->
            Cll_2 = insert_tail(Cll, (I_8 + 1)),
            I_9 = (I_8 + 1),
            Fun_5_loop(Cll_2, I_9);
        _ -> {Cll, I_8}
    end
end,
{Cll_2, I_9} = Fun_5(Cll, I_8),
        io:format("~s~n", [mochi_format(to_string(Cll_2))]),
        Cll_3 = insert_tail(Cll_2, 6),
        io:format("~s~n", [mochi_format(to_string(Cll_3))]),
        Cll_4 = insert_head(Cll_3, 0),
        io:format("~s~n", [mochi_format(to_string(Cll_4))]),
        Res_8 = delete_front(Cll_4),
        Cll_5 = maps:get("list", Res_8, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_8, nil))]),
        Res_9 = delete_tail(Cll_5),
        Cll_6 = maps:get("list", Res_9, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_9, nil))]),
        Res_10 = delete_nth(Cll_6, 2),
        Cll_7 = maps:get("list", Res_10, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_10, nil))]),
        io:format("~s~n", [mochi_format(to_string(Cll_7))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
