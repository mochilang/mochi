#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_linked_list/1, node_to_string/1, main/0]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_linked_list(Elements) ->
    try
        case (erlang:length(Elements) == 0) of
        true -> erlang:error({panic, "The Elements List is empty"});
        _ -> ok
    end,
        erlang:put('nodes', []),
        erlang:put('nodes', lists:append((case erlang:get('nodes') of nil -> []; _ -> erlang:get('nodes') end), [#{"data" => (case erlang:is_map(Elements) of true -> maps:get(0, Elements, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Elements) + 0 + 1, Elements); _ -> mochi_nth(0 + 1, Elements) end end), "next" => erlang:get('NIL')}])),
        Head = 0,
        Current = Head,
        I = 1,
        Fun = fun Fun_loop(Current, Elements, Head, I) ->
    case (I < erlang:length(Elements)) of
        true ->
            erlang:put('nodes', lists:append((case erlang:get('nodes') of nil -> []; _ -> erlang:get('nodes') end), [#{"data" => (case erlang:is_map(Elements) of true -> maps:get(I, Elements, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Elements) + I + 1, Elements); _ -> mochi_nth(I + 1, Elements) end end), "next" => erlang:get('NIL')}])),
            Nodes_tmp = lists:sublist(erlang:get('nodes'), Current) ++ [maps:put("next", (erlang:length(erlang:get('nodes')) - 1), lists:nth(Current + 1, erlang:get('nodes')) )] ++ lists:nthtail(Current + 1, erlang:get('nodes')),
            erlang:put('nodes', Nodes_tmp),
            Current_2 = (erlang:length(erlang:get('nodes')) - 1),
            I_2 = (I + 1),
            Fun_loop(Current_2, Elements, Head, I_2);
        _ -> {Current, Elements, Head, I}
    end
end,
{Current_2, Elements, Head, I_2} = Fun(Current, Elements, Head, I),
        Head
    catch {return, RetCatch} -> RetCatch end.

node_to_string(Head_2) ->
    try
        S = "",
        Index = Head_2,
        Fun_2 = fun Fun_2_loop(Head_2, Index, S) ->
    case (Index /= erlang:get('NIL')) of
        true ->
            Node = (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(Index, erlang:get('nodes'), nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + Index + 1, erlang:get('nodes')); _ -> mochi_nth(Index + 1, erlang:get('nodes')) end end),
            S_2 = (((S ++ "<") ++ mochi_str(maps:get("data", Node, nil))) ++ "> ---> "),
            Index_2 = maps:get("next", Node, nil),
            Fun_2_loop(Head_2, Index_2, S_2);
        _ -> {Head_2, Index, S}
    end
end,
{Head_2, Index_2, S_2} = Fun_2(Head_2, Index, S),
        S_3 = (S_2 ++ "<END>"),
        S_3
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        List_data = [1, 3, 5, 32, 44, 12, 43],
        io:format("~s~n", [mochi_format(("List: " ++ mochi_str(List_data)))]),
        io:format("~s~n", [mochi_format("Creating Linked List from List.")]),
        Head_3 = make_linked_list(List_data),
        io:format("~s~n", [mochi_format("Linked List:")]),
        io:format("~s~n", [mochi_format(node_to_string(Head_3))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('NIL', (0 - 1)),
    erlang:put('nodes', []),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
