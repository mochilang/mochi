#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, empty_list/0, length/1, is_empty/1, to_string/1, insert_nth/3, insert_head/2, insert_tail/2, delete_nth/2, delete_head/1, delete_tail/1, get_item/2, set_item/3, reverse_list/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

empty_list() ->
    try
        #{"data" => []}
    catch {return, Ret} -> Ret end.

length(List) ->
    try
        erlang:length(maps:get("data", List, nil))
    catch {return, Ret} -> Ret end.

is_empty(List_2) ->
    try
        (erlang:length(maps:get("data", List_2, nil)) == 0)
    catch {return, Ret} -> Ret end.

to_string(List_3) ->
    try
        case (erlang:length(maps:get("data", List_3, nil)) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        S = mochi_str((case erlang:is_map(maps:get("data", List_3, nil)) of true -> maps:get(0, maps:get("data", List_3, nil), nil); _ -> lists:nth(0 + 1, maps:get("data", List_3, nil)) end)),
        I = 1,
        Fun = fun Fun_loop(I, List_3, S) ->
    case (I < erlang:length(maps:get("data", List_3, nil))) of
        true ->
            S_2 = ((S ++ " -> ") ++ mochi_str((case erlang:is_map(maps:get("data", List_3, nil)) of true -> maps:get(I, maps:get("data", List_3, nil), nil); _ -> lists:nth(I + 1, maps:get("data", List_3, nil)) end))),
            I_2 = (I + 1),
            Fun_loop(I_2, List_3, S_2);
        _ -> {I, List_3, S}
    end
end,
{I_2, List_3, S_2} = Fun(I, List_3, S),
        S_2
    catch {return, Ret} -> Ret end.

insert_nth(List_4, Index, Value) ->
    try
        case ((Index < 0) orelse (Index > erlang:length(maps:get("data", List_4, nil)))) of
        true -> erlang:error("index out of range");
        _ -> ok
    end,
        Res = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Index, List_4, Res, Value) ->
    case (I_3 < Index) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(maps:get("data", List_4, nil)) of true -> maps:get(I_3, maps:get("data", List_4, nil), nil); _ -> lists:nth(I_3 + 1, maps:get("data", List_4, nil)) end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Index, List_4, Res_2, Value);
        _ -> {I_3, Index, List_4, Res, Value}
    end
end,
{I_4, Index, List_4, Res_2, Value} = Fun_2(I_3, Index, List_4, Res, Value),
        Res_3 = lists:append((case Res_2 of nil -> []; _ -> Res_2 end), [Value]),
        Fun_3 = fun Fun_3_loop(I_4, Index, List_4, Res_3, Value) ->
    case (I_4 < erlang:length(maps:get("data", List_4, nil))) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [(case erlang:is_map(maps:get("data", List_4, nil)) of true -> maps:get(I_4, maps:get("data", List_4, nil), nil); _ -> lists:nth(I_4 + 1, maps:get("data", List_4, nil)) end)]),
            I_5 = (I_4 + 1),
            Fun_3_loop(I_5, Index, List_4, Res_4, Value);
        _ -> {I_4, Index, List_4, Res_3, Value}
    end
end,
{I_5, Index, List_4, Res_4, Value} = Fun_3(I_4, Index, List_4, Res_3, Value),
        #{"data" => Res_4}
    catch {return, Ret} -> Ret end.

insert_head(List_5, Value_2) ->
    try
        insert_nth(List_5, 0, Value_2)
    catch {return, Ret} -> Ret end.

insert_tail(List_6, Value_3) ->
    try
        insert_nth(List_6, erlang:length(maps:get("data", List_6, nil)), Value_3)
    catch {return, Ret} -> Ret end.

delete_nth(List_7, Index_2) ->
    try
        case ((Index_2 < 0) orelse (Index_2 >= erlang:length(maps:get("data", List_7, nil)))) of
        true -> erlang:error("index out of range");
        _ -> ok
    end,
        Res_5 = [],
        Val = 0,
        I_6 = 0,
        Fun_4 = fun Fun_4_loop(I_6, Index_2, List_7, Res_5, Val) ->
    case (I_6 < erlang:length(maps:get("data", List_7, nil))) of
        true ->
            case (I_6 == Index_2) of
        true -> Val_2 = (case erlang:is_map(maps:get("data", List_7, nil)) of true -> maps:get(I_6, maps:get("data", List_7, nil), nil); _ -> lists:nth(I_6 + 1, maps:get("data", List_7, nil)) end),
            Res_7 = Res_5,
            Val_3 = Val_2;
        _ -> Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [(case erlang:is_map(maps:get("data", List_7, nil)) of true -> maps:get(I_6, maps:get("data", List_7, nil), nil); _ -> lists:nth(I_6 + 1, maps:get("data", List_7, nil)) end)]),
            Res_7 = Res_6,
            Val_3 = Val
    end,
            I_7 = (I_6 + 1),
            Fun_4_loop(I_7, Index_2, List_7, Res_7, Val_3);
        _ -> {I_6, Index_2, List_7, Res_5, Val}
    end
end,
{I_7, Index_2, List_7, Res_7, Val_3} = Fun_4(I_6, Index_2, List_7, Res_5, Val),
        #{"list" => #{"data" => Res_7}, "value" => Val_3}
    catch {return, Ret} -> Ret end.

delete_head(List_8) ->
    try
        delete_nth(List_8, 0)
    catch {return, Ret} -> Ret end.

delete_tail(List_9) ->
    try
        delete_nth(List_9, (erlang:length(maps:get("data", List_9, nil)) - 1))
    catch {return, Ret} -> Ret end.

get_item(List_10, Index_3) ->
    try
        case ((Index_3 < 0) orelse (Index_3 >= erlang:length(maps:get("data", List_10, nil)))) of
        true -> erlang:error("index out of range");
        _ -> ok
    end,
        (case erlang:is_map(maps:get("data", List_10, nil)) of true -> maps:get(Index_3, maps:get("data", List_10, nil), nil); _ -> lists:nth(Index_3 + 1, maps:get("data", List_10, nil)) end)
    catch {return, Ret} -> Ret end.

set_item(List_11, Index_4, Value_4) ->
    try
        case ((Index_4 < 0) orelse (Index_4 >= erlang:length(maps:get("data", List_11, nil)))) of
        true -> erlang:error("index out of range");
        _ -> ok
    end,
        Res_8 = [],
        I_8 = 0,
        Fun_5 = fun Fun_5_loop(I_8, Index_4, List_11, Res_8, Value_4) ->
    case (I_8 < erlang:length(maps:get("data", List_11, nil))) of
        true ->
            case (I_8 == Index_4) of
        true -> Res_9 = lists:append((case Res_8 of nil -> []; _ -> Res_8 end), [Value_4]),
            Res_11 = Res_9;
        _ -> Res_10 = lists:append((case Res_8 of nil -> []; _ -> Res_8 end), [(case erlang:is_map(maps:get("data", List_11, nil)) of true -> maps:get(I_8, maps:get("data", List_11, nil), nil); _ -> lists:nth(I_8 + 1, maps:get("data", List_11, nil)) end)]),
            Res_11 = Res_10
    end,
            I_9 = (I_8 + 1),
            Fun_5_loop(I_9, Index_4, List_11, Res_11, Value_4);
        _ -> {I_8, Index_4, List_11, Res_8, Value_4}
    end
end,
{I_9, Index_4, List_11, Res_11, Value_4} = Fun_5(I_8, Index_4, List_11, Res_8, Value_4),
        #{"data" => Res_11}
    catch {return, Ret} -> Ret end.

reverse_list(List_12) ->
    try
        Res_12 = [],
        I_10 = (erlang:length(maps:get("data", List_12, nil)) - 1),
        Fun_6 = fun Fun_6_loop(I_10, List_12, Res_12) ->
    case (I_10 >= 0) of
        true ->
            Res_13 = lists:append((case Res_12 of nil -> []; _ -> Res_12 end), [(case erlang:is_map(maps:get("data", List_12, nil)) of true -> maps:get(I_10, maps:get("data", List_12, nil), nil); _ -> lists:nth(I_10 + 1, maps:get("data", List_12, nil)) end)]),
            I_11 = (I_10 - 1),
            Fun_6_loop(I_11, List_12, Res_13);
        _ -> {I_10, List_12, Res_12}
    end
end,
{I_11, List_12, Res_13} = Fun_6(I_10, List_12, Res_12),
        #{"data" => Res_13}
    catch {return, Ret} -> Ret end.

main() ->
    try
        Lst = empty_list(),
        I_12 = 1,
        Fun_7 = fun Fun_7_loop(I_12, Lst) ->
    case (I_12 =< 5) of
        true ->
            Lst_2 = insert_tail(Lst, I_12),
            I_13 = (I_12 + 1),
            Fun_7_loop(I_13, Lst_2);
        _ -> {I_12, Lst}
    end
end,
{I_13, Lst_2} = Fun_7(I_12, Lst),
        io:format("~ts~n", [mochi_repr(to_string(Lst_2))]),
        Lst_3 = insert_head(Lst_2, 0),
        io:format("~ts~n", [mochi_repr(to_string(Lst_3))]),
        Del = delete_head(Lst_3),
        Lst_4 = maps:get("list", Del, nil),
        io:format("~ts~n", [mochi_str(maps:get("value", Del, nil))]),
        Del_2 = delete_tail(Lst_4),
        Lst_5 = maps:get("list", Del_2, nil),
        io:format("~ts~n", [mochi_str(maps:get("value", Del_2, nil))]),
        Del_3 = delete_nth(Lst_5, 2),
        Lst_6 = maps:get("list", Del_3, nil),
        io:format("~ts~n", [mochi_str(maps:get("value", Del_3, nil))]),
        Lst_7 = set_item(Lst_6, 1, 99),
        io:format("~ts~n", [mochi_str(get_item(Lst_7, 1))]),
        Lst_8 = reverse_list(Lst_7),
        io:format("~ts~n", [mochi_repr(to_string(Lst_8))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
