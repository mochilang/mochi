#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, empty_list/0, append_value/2, extend_list/2, to_string/1, make_linked_list/1, in_reverse/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

empty_list() ->
    try
        #{"data" => []}
    catch {return, Ret} -> Ret end.

append_value(List, Value) ->
    try
        D = maps:get("data", List, nil),
        D_2 = lists:append((case D of nil -> []; _ -> D end), [Value]),
        #{"data" => D_2}
    catch {return, Ret} -> Ret end.

extend_list(List_2, Items) ->
    try
        Result = List_2,
        I = 0,
        Fun = fun Fun_loop(I, Items, List_2, Result) ->
    case (I < erlang:length(Items)) of
        true ->
            Result_2 = append_value(Result, (case erlang:is_map(Items) of true -> maps:get(I, Items, nil); _ -> lists:nth(I + 1, Items) end)),
            I_2 = (I + 1),
            Fun_loop(I_2, Items, List_2, Result_2);
        _ -> {I, Items, List_2, Result}
    end
end,
{I_2, Items, List_2, Result_2} = Fun(I, Items, List_2, Result),
        Result_2
    catch {return, Ret} -> Ret end.

to_string(List_3) ->
    try
        case (erlang:length(maps:get("data", List_3, nil)) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        S = mochi_str((case erlang:is_map(maps:get("data", List_3, nil)) of true -> maps:get(0, maps:get("data", List_3, nil), nil); _ -> lists:nth(0 + 1, maps:get("data", List_3, nil)) end)),
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(I_3, List_3, S) ->
    case (I_3 < erlang:length(maps:get("data", List_3, nil))) of
        true ->
            S_2 = ((S ++ " -> ") ++ mochi_str((case erlang:is_map(maps:get("data", List_3, nil)) of true -> maps:get(I_3, maps:get("data", List_3, nil), nil); _ -> lists:nth(I_3 + 1, maps:get("data", List_3, nil)) end))),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, List_3, S_2);
        _ -> {I_3, List_3, S}
    end
end,
{I_4, List_3, S_2} = Fun_2(I_3, List_3, S),
        S_2
    catch {return, Ret} -> Ret end.

make_linked_list(Items_2) ->
    try
        case (erlang:length(Items_2) == 0) of
        true -> erlang:error("The Elements List is empty");
        _ -> ok
    end,
        Ll = empty_list(),
        Ll_2 = extend_list(Ll, Items_2),
        Ll_2
    catch {return, Ret} -> Ret end.

in_reverse(List_4) ->
    try
        case (erlang:length(maps:get("data", List_4, nil)) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        I_5 = (erlang:length(maps:get("data", List_4, nil)) - 1),
        S_3 = mochi_str((case erlang:is_map(maps:get("data", List_4, nil)) of true -> maps:get(I_5, maps:get("data", List_4, nil), nil); _ -> lists:nth(I_5 + 1, maps:get("data", List_4, nil)) end)),
        I_6 = (I_5 - 1),
        Fun_3 = fun Fun_3_loop(I_6, List_4, S_3) ->
    case (I_6 >= 0) of
        true ->
            S_4 = ((S_3 ++ " <- ") ++ mochi_str((case erlang:is_map(maps:get("data", List_4, nil)) of true -> maps:get(I_6, maps:get("data", List_4, nil), nil); _ -> lists:nth(I_6 + 1, maps:get("data", List_4, nil)) end))),
            I_7 = (I_6 - 1),
            Fun_3_loop(I_7, List_4, S_4);
        _ -> {I_6, List_4, S_3}
    end
end,
{I_7, List_4, S_4} = Fun_3(I_6, List_4, S_3),
        S_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        Linked_list = make_linked_list([14, 52, 14, 12, 43]),
        io:format("~ts~n", [mochi_repr(("Linked List:  " ++ to_string(Linked_list)))]),
        io:format("~ts~n", [mochi_repr(("Reverse List: " ++ in_reverse(Linked_list)))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
