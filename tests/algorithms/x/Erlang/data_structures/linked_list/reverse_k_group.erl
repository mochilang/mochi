#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, to_string/1, reverse_k_nodes/2, main/0]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

to_string(List) ->
    try
        case (erlang:length(maps:get("data", List, nil)) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        S = mochi_str((case erlang:is_map(maps:get("data", List, nil)) of true -> maps:get(0, maps:get("data", List, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", List, nil)) + 0 + 1, maps:get("data", List, nil)); _ -> mochi_nth(0 + 1, maps:get("data", List, nil)) end end)),
        I = 1,
        Fun = fun Fun_loop(I, List, S) ->
    case (I < erlang:length(maps:get("data", List, nil))) of
        true ->
            S_2 = ((S ++ " -> ") ++ mochi_str((case erlang:is_map(maps:get("data", List, nil)) of true -> maps:get(I, maps:get("data", List, nil), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(maps:get("data", List, nil)) + I + 1, maps:get("data", List, nil)); _ -> mochi_nth(I + 1, maps:get("data", List, nil)) end end))),
            I_2 = (I + 1),
            Fun_loop(I_2, List, S_2);
        _ -> {I, List, S}
    end
end,
{I_2, List, S_2} = Fun(I, List, S),
        S_2
    catch {return, RetCatch} -> RetCatch end.

reverse_k_nodes(List_2, K) ->
    try
        case (K =< 1) of
        true -> throw({return, List_2});
        _ -> ok
    end,
        Res = [],
        I_3 = 0,
        Fun_6 = fun Fun_6_loop(I_3, K, List_2, Res) ->
    case (I_3 < erlang:length(maps:get("data", List_2, nil))) of
        true ->
            J = 0,
            Group = [],
            Fun_2 = fun Fun_2_loop(Group, I_3, J, K, List_2, Res) ->
    case ((J < K) andalso ((I_3 + J) < erlang:length(maps:get("data", List_2, nil)))) of
        true ->
            Group_2 = lists:append((case Group of nil -> []; _ -> Group end), [(case erlang:is_map(maps:get("data", List_2, nil)) of true -> maps:get((I_3 + J), maps:get("data", List_2, nil), nil); _ -> case (I_3 + J) < 0 of true -> mochi_nth(erlang:length(maps:get("data", List_2, nil)) + (I_3 + J) + 1, maps:get("data", List_2, nil)); _ -> mochi_nth((I_3 + J) + 1, maps:get("data", List_2, nil)) end end)]),
            J_2 = (J + 1),
            Fun_2_loop(Group_2, I_3, J_2, K, List_2, Res);
        _ -> {Group, I_3, J, K, List_2, Res}
    end
end,
{Group_2, I_3, J_2, K, List_2, Res} = Fun_2(Group, I_3, J, K, List_2, Res),
            Res_4 = (case (erlang:length(Group_2) == K) of
        true -> G = (K - 1),
            Fun_3 = fun Fun_3_loop(G, Group_2, I_3, J_2, K, List_2, Res) ->
    case (G >= 0) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Group_2) of true -> maps:get(G, Group_2, nil); _ -> case G < 0 of true -> mochi_nth(erlang:length(Group_2) + G + 1, Group_2); _ -> mochi_nth(G + 1, Group_2) end end)]),
            G_2 = (G - 1),
            Fun_3_loop(G_2, Group_2, I_3, J_2, K, List_2, Res_2);
        _ -> {G, Group_2, I_3, J_2, K, List_2, Res}
    end
end,
{G_2, Group_2, I_3, J_2, K, List_2, Res_2} = Fun_3(G, Group_2, I_3, J_2, K, List_2, Res),
            Fun_5 = Fun_3,
            G_5 = G_2,
            Res_2;
        _ -> G_3 = 0,
            Fun_4 = fun Fun_4_loop(G_3, Group_2, I_3, J_2, K, List_2, Res) ->
    case (G_3 < erlang:length(Group_2)) of
        true ->
            Res_3 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Group_2) of true -> maps:get(G_3, Group_2, nil); _ -> case G_3 < 0 of true -> mochi_nth(erlang:length(Group_2) + G_3 + 1, Group_2); _ -> mochi_nth(G_3 + 1, Group_2) end end)]),
            G_4 = (G_3 + 1),
            Fun_4_loop(G_4, Group_2, I_3, J_2, K, List_2, Res_3);
        _ -> {G_3, Group_2, I_3, J_2, K, List_2, Res}
    end
end,
{G_4, Group_2, I_3, J_2, K, List_2, Res_3} = Fun_4(G_3, Group_2, I_3, J_2, K, List_2, Res),
            Fun_5 = Fun_4,
            G_5 = G_4,
            Res_3
    end),
            I_4 = (I_3 + K),
            Fun_6_loop(I_4, K, List_2, Res_4);
        _ -> {I_3, K, List_2, Res}
    end
end,
{I_4, K, List_2, Res_4} = Fun_6(I_3, K, List_2, Res),
        #{"data" => Res_4}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Ll = #{"data" => [1, 2, 3, 4, 5]},
        io:format("~s~n", [mochi_format(("Original Linked List: " ++ to_string(Ll)))]),
        K_2 = 2,
        Ll_2 = reverse_k_nodes(Ll, K_2),
        io:format("~s~n", [mochi_format(((("After reversing groups of size " ++ mochi_str(K_2)) ++ ": ") ++ to_string(Ll_2)))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
