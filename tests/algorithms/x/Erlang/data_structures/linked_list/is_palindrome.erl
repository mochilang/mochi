#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_palindrome/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

is_palindrome(Values) ->
    try
        Stack = [],
        Fast = 0,
        Slow = 0,
        N = erlang:length(Values),
        Fun = fun Fun_loop(Fast, N, Slow, Stack, Values) ->
    case ((Fast < N) andalso ((Fast + 1) < N)) of
        true ->
            Stack_2 = lists:append((case Stack of nil -> []; _ -> Stack end), [(case erlang:is_map(Values) of true -> maps:get(Slow, Values, nil); _ -> lists:nth(Slow + 1, Values) end)]),
            Slow_2 = (Slow + 1),
            Fast_2 = (Fast + 2),
            Fun_loop(Fast_2, N, Slow_2, Stack_2, Values);
        _ -> {Fast, N, Slow, Stack, Values}
    end
end,
{Fast_2, N, Slow_2, Stack_2, Values} = Fun(Fast, N, Slow, Stack, Values),
        case (Fast_2 == (N - 1)) of
        true -> Slow_3 = (Slow_2 + 1),
            Slow_4 = Slow_3;
        _ -> Slow_4 = Slow_2
    end,
        I = (erlang:length(Stack_2) - 1),
        Fun_2 = fun Fun_2_loop(Fast_2, I, N, Slow_4, Stack_2, Values) ->
    case (Slow_4 < N) of
        true ->
            case ((case erlang:is_map(Stack_2) of true -> maps:get(I, Stack_2, nil); _ -> lists:nth(I + 1, Stack_2) end) /= (case erlang:is_map(Values) of true -> maps:get(Slow_4, Values, nil); _ -> lists:nth(Slow_4 + 1, Values) end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I - 1),
            Slow_5 = (Slow_4 + 1),
            Fun_2_loop(Fast_2, I_2, N, Slow_5, Stack_2, Values);
        _ -> {Fast_2, I, N, Slow_4, Stack_2, Values}
    end
end,
{Fast_2, I_2, N, Slow_5, Stack_2, Values} = Fun_2(Fast_2, I, N, Slow_4, Stack_2, Values),
        true
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(is_palindrome([]))]),
        io:format("~ts~n", [mochi_repr(is_palindrome([1]))]),
        io:format("~ts~n", [mochi_repr(is_palindrome([1, 2]))]),
        io:format("~ts~n", [mochi_repr(is_palindrome([1, 2, 1]))]),
        io:format("~ts~n", [mochi_repr(is_palindrome([1, 2, 2, 1]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
