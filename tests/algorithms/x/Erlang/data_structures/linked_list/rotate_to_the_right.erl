#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, list_to_string/1, insert_node/2, rotate_to_the_right/2, main/0]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

list_to_string(Xs) ->
    try
        case (erlang:length(Xs) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        S = mochi_str((case erlang:is_map(Xs) of true -> maps:get(0, Xs, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Xs) + 0 + 1, Xs); _ -> mochi_nth(0 + 1, Xs) end end)),
        I = 1,
        Fun = fun Fun_loop(I, S, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            S_2 = ((S ++ "->") ++ mochi_str((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end))),
            I_2 = (I + 1),
            Fun_loop(I_2, S_2, Xs);
        _ -> {I, S, Xs}
    end
end,
{I_2, S_2, Xs} = Fun(I, S, Xs),
        S_2
    catch {return, RetCatch} -> RetCatch end.

insert_node(Xs_2, Data) ->
    try
        lists:append((case Xs_2 of nil -> []; _ -> Xs_2 end), [Data])
    catch {return, RetCatch} -> RetCatch end.

rotate_to_the_right(Xs_3, Places) ->
    try
        case (erlang:length(Xs_3) == 0) of
        true -> erlang:error({panic, "The linked list is empty."});
        _ -> ok
    end,
        N = erlang:length(Xs_3),
        K = mochi_mod(Places, N),
        case (K == 0) of
        true -> throw({return, Xs_3});
        _ -> ok
    end,
        Split = (N - K),
        Res = [],
        I_3 = Split,
        Fun_2 = fun Fun_2_loop(I_3, K, N, Places, Res, Split, Xs_3) ->
    case (I_3 < N) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs_3) of true -> maps:get(I_3, Xs_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs_3) + I_3 + 1, Xs_3); _ -> mochi_nth(I_3 + 1, Xs_3) end end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, K, N, Places, Res_2, Split, Xs_3);
        _ -> {I_3, K, N, Places, Res, Split, Xs_3}
    end
end,
{I_4, K, N, Places, Res_2, Split, Xs_3} = Fun_2(I_3, K, N, Places, Res, Split, Xs_3),
        J = 0,
        Fun_3 = fun Fun_3_loop(I_4, J, K, N, Places, Res_2, Split, Xs_3) ->
    case (J < Split) of
        true ->
            Res_3 = lists:append((case Res_2 of nil -> []; _ -> Res_2 end), [(case erlang:is_map(Xs_3) of true -> maps:get(J, Xs_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Xs_3) + J + 1, Xs_3); _ -> mochi_nth(J + 1, Xs_3) end end)]),
            J_2 = (J + 1),
            Fun_3_loop(I_4, J_2, K, N, Places, Res_3, Split, Xs_3);
        _ -> {I_4, J, K, N, Places, Res_2, Split, Xs_3}
    end
end,
{I_4, J_2, K, N, Places, Res_3, Split, Xs_3} = Fun_3(I_4, J, K, N, Places, Res_2, Split, Xs_3),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Head = [],
        Head_2 = insert_node(Head, 5),
        Head_3 = insert_node(Head_2, 1),
        Head_4 = insert_node(Head_3, 2),
        Head_5 = insert_node(Head_4, 4),
        Head_6 = insert_node(Head_5, 3),
        io:format("~s~n", [mochi_format(("Original list: " ++ list_to_string(Head_6)))]),
        Places_2 = 3,
        New_head = rotate_to_the_right(Head_6, 3),
        io:format("~s~n", [mochi_format(((("After " ++ mochi_str(3)) ++ " iterations: ") ++ list_to_string(New_head)))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
