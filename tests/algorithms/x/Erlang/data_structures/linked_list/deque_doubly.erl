#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, new_deque/0, is_empty/1, front/1, back/1, insert/4, delete/2, add_first/2, add_last/2, remove_first/1, remove_last/1, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

new_deque() ->
    try
        Nodes = [],
        Nodes_2 = lists:append((case Nodes of nil -> []; _ -> Nodes end), [#{"data" => "", "prev" => -1, "next" => 1}]),
        Nodes_3 = lists:append((case Nodes_2 of nil -> []; _ -> Nodes_2 end), [#{"data" => "", "prev" => 0, "next" => -1}]),
        #{"nodes" => Nodes_3, "header" => 0, "trailer" => 1, "size" => 0}
    catch {return, RetCatch} -> RetCatch end.

is_empty(D) ->
    try
        (maps:get("size", D, nil) == 0)
    catch {return, RetCatch} -> RetCatch end.

front(D_2) ->
    try
        case is_empty(D_2) of
        true -> erlang:error({panic, "List is empty"});
        _ -> ok
    end,
        Head = (case erlang:is_map(maps:get("nodes", D_2, nil)) of true -> maps:get(maps:get("header", D_2, nil), maps:get("nodes", D_2, nil), nil); _ -> case maps:get("header", D_2, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", D_2, nil)) + maps:get("header", D_2, nil) + 1, maps:get("nodes", D_2, nil)); _ -> mochi_nth(maps:get("header", D_2, nil) + 1, maps:get("nodes", D_2, nil)) end end),
        Idx = maps:get("next", Head, nil),
        Node = (case erlang:is_map(maps:get("nodes", D_2, nil)) of true -> maps:get(Idx, maps:get("nodes", D_2, nil), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", D_2, nil)) + Idx + 1, maps:get("nodes", D_2, nil)); _ -> mochi_nth(Idx + 1, maps:get("nodes", D_2, nil)) end end),
        maps:get("data", Node, nil)
    catch {return, RetCatch} -> RetCatch end.

back(D_3) ->
    try
        case is_empty(D_3) of
        true -> erlang:error({panic, "List is empty"});
        _ -> ok
    end,
        Tail = (case erlang:is_map(maps:get("nodes", D_3, nil)) of true -> maps:get(maps:get("trailer", D_3, nil), maps:get("nodes", D_3, nil), nil); _ -> case maps:get("trailer", D_3, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", D_3, nil)) + maps:get("trailer", D_3, nil) + 1, maps:get("nodes", D_3, nil)); _ -> mochi_nth(maps:get("trailer", D_3, nil) + 1, maps:get("nodes", D_3, nil)) end end),
        Idx_2 = maps:get("prev", Tail, nil),
        Node_2 = (case erlang:is_map(maps:get("nodes", D_3, nil)) of true -> maps:get(Idx_2, maps:get("nodes", D_3, nil), nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", D_3, nil)) + Idx_2 + 1, maps:get("nodes", D_3, nil)); _ -> mochi_nth(Idx_2 + 1, maps:get("nodes", D_3, nil)) end end),
        maps:get("data", Node_2, nil)
    catch {return, RetCatch} -> RetCatch end.

insert(D_4, Pred, Value, Succ) ->
    try
        Nodes_4 = maps:get("nodes", D_4, nil),
        New_idx = erlang:length(Nodes_4),
        Nodes_5 = lists:append((case Nodes_4 of nil -> []; _ -> Nodes_4 end), [#{"data" => Value, "prev" => Pred, "next" => Succ}]),
        Pred_node = (case erlang:is_map(Nodes_5) of true -> maps:get(Pred, Nodes_5, nil); _ -> case Pred < 0 of true -> mochi_nth(erlang:length(Nodes_5) + Pred + 1, Nodes_5); _ -> mochi_nth(Pred + 1, Nodes_5) end end),
        Pred_node_2 = maps:put("next", New_idx, Pred_node),
        Nodes_6 = lists:sublist(Nodes_5, Pred) ++ [Pred_node_2] ++ lists:nthtail(Pred + 1, Nodes_5),
        Succ_node = (case erlang:is_map(Nodes_6) of true -> maps:get(Succ, Nodes_6, nil); _ -> case Succ < 0 of true -> mochi_nth(erlang:length(Nodes_6) + Succ + 1, Nodes_6); _ -> mochi_nth(Succ + 1, Nodes_6) end end),
        Succ_node_2 = maps:put("prev", New_idx, Succ_node),
        Nodes_7 = lists:sublist(Nodes_6, Succ) ++ [Succ_node_2] ++ lists:nthtail(Succ + 1, Nodes_6),
        D_5 = maps:put("nodes", Nodes_7, D_4),
        D_6 = maps:put("size", (maps:get("size", D_5, nil) + 1), D_5),
        D_6
    catch {return, RetCatch} -> RetCatch end.

delete(D_7, Idx_3) ->
    try
        Nodes_8 = maps:get("nodes", D_7, nil),
        Node_3 = (case erlang:is_map(Nodes_8) of true -> maps:get(Idx_3, Nodes_8, nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(Nodes_8) + Idx_3 + 1, Nodes_8); _ -> mochi_nth(Idx_3 + 1, Nodes_8) end end),
        Pred_2 = maps:get("prev", Node_3, nil),
        Succ_2 = maps:get("next", Node_3, nil),
        Pred_node_3 = (case erlang:is_map(Nodes_8) of true -> maps:get(Pred_2, Nodes_8, nil); _ -> case Pred_2 < 0 of true -> mochi_nth(erlang:length(Nodes_8) + Pred_2 + 1, Nodes_8); _ -> mochi_nth(Pred_2 + 1, Nodes_8) end end),
        Pred_node_4 = maps:put("next", Succ_2, Pred_node_3),
        Nodes_9 = lists:sublist(Nodes_8, Pred_2) ++ [Pred_node_4] ++ lists:nthtail(Pred_2 + 1, Nodes_8),
        Succ_node_3 = (case erlang:is_map(Nodes_9) of true -> maps:get(Succ_2, Nodes_9, nil); _ -> case Succ_2 < 0 of true -> mochi_nth(erlang:length(Nodes_9) + Succ_2 + 1, Nodes_9); _ -> mochi_nth(Succ_2 + 1, Nodes_9) end end),
        Succ_node_4 = maps:put("prev", Pred_2, Succ_node_3),
        Nodes_10 = lists:sublist(Nodes_9, Succ_2) ++ [Succ_node_4] ++ lists:nthtail(Succ_2 + 1, Nodes_9),
        Val = maps:get("data", Node_3, nil),
        D_8 = maps:put("nodes", Nodes_10, D_7),
        D_9 = maps:put("size", (maps:get("size", D_8, nil) - 1), D_8),
        #{"deque" => D_9, "value" => Val}
    catch {return, RetCatch} -> RetCatch end.

add_first(D_10, Value_2) ->
    try
        Head_2 = (case erlang:is_map(maps:get("nodes", D_10, nil)) of true -> maps:get(maps:get("header", D_10, nil), maps:get("nodes", D_10, nil), nil); _ -> case maps:get("header", D_10, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", D_10, nil)) + maps:get("header", D_10, nil) + 1, maps:get("nodes", D_10, nil)); _ -> mochi_nth(maps:get("header", D_10, nil) + 1, maps:get("nodes", D_10, nil)) end end),
        Succ_3 = maps:get("next", Head_2, nil),
        insert(D_10, maps:get("header", D_10, nil), Value_2, Succ_3)
    catch {return, RetCatch} -> RetCatch end.

add_last(D_11, Value_3) ->
    try
        Tail_2 = (case erlang:is_map(maps:get("nodes", D_11, nil)) of true -> maps:get(maps:get("trailer", D_11, nil), maps:get("nodes", D_11, nil), nil); _ -> case maps:get("trailer", D_11, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", D_11, nil)) + maps:get("trailer", D_11, nil) + 1, maps:get("nodes", D_11, nil)); _ -> mochi_nth(maps:get("trailer", D_11, nil) + 1, maps:get("nodes", D_11, nil)) end end),
        Pred_3 = maps:get("prev", Tail_2, nil),
        insert(D_11, Pred_3, Value_3, maps:get("trailer", D_11, nil))
    catch {return, RetCatch} -> RetCatch end.

remove_first(D_12) ->
    try
        case is_empty(D_12) of
        true -> erlang:error({panic, "remove_first from empty list"});
        _ -> ok
    end,
        Head_3 = (case erlang:is_map(maps:get("nodes", D_12, nil)) of true -> maps:get(maps:get("header", D_12, nil), maps:get("nodes", D_12, nil), nil); _ -> case maps:get("header", D_12, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", D_12, nil)) + maps:get("header", D_12, nil) + 1, maps:get("nodes", D_12, nil)); _ -> mochi_nth(maps:get("header", D_12, nil) + 1, maps:get("nodes", D_12, nil)) end end),
        Idx_4 = maps:get("next", Head_3, nil),
        delete(D_12, Idx_4)
    catch {return, RetCatch} -> RetCatch end.

remove_last(D_13) ->
    try
        case is_empty(D_13) of
        true -> erlang:error({panic, "remove_first from empty list"});
        _ -> ok
    end,
        Tail_3 = (case erlang:is_map(maps:get("nodes", D_13, nil)) of true -> maps:get(maps:get("trailer", D_13, nil), maps:get("nodes", D_13, nil), nil); _ -> case maps:get("trailer", D_13, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", D_13, nil)) + maps:get("trailer", D_13, nil) + 1, maps:get("nodes", D_13, nil)); _ -> mochi_nth(maps:get("trailer", D_13, nil) + 1, maps:get("nodes", D_13, nil)) end end),
        Idx_5 = maps:get("prev", Tail_3, nil),
        delete(D_13, Idx_5)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        D_14 = new_deque(),
        D_15 = add_first(D_14, "A"),
        io:format("~s~n", [mochi_format(front(D_15))]),
        D_16 = add_last(D_15, "B"),
        io:format("~s~n", [mochi_format(back(D_16))]),
        R = remove_first(D_16),
        D_17 = maps:get("deque", R, nil),
        io:format("~s~n", [mochi_format(maps:get("value", R, nil))]),
        R_2 = remove_last(D_17),
        D_18 = maps:get("deque", R_2, nil),
        io:format("~s~n", [mochi_format(maps:get("value", R_2, nil))]),
        io:format("~s~n", [mochi_str(is_empty(D_18))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
