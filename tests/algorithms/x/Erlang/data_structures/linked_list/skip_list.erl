#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, random/0, random_level/0, empty_forward/0, init/0, insert/2, find/1, delete/1, to_string/0, main/0]).

% Generated by Mochi transpiler v0.10.59 (e561788721) on 2025-08-07 08:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

random() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 13) + 7), 100)),
        mochi_safe_div(float(erlang:get('seed')), 100)
    catch {return, Ret} -> Ret end.

random_level() ->
    try
        Lvl = 1,
        Fun = fun Fun_loop(Lvl) ->
    case ((random() < 0.5) andalso (Lvl < 6)) of
        true ->
            Lvl_2 = (Lvl + 1),
            Fun_loop(Lvl_2);
        _ -> {Lvl}
    end
end,
{Lvl_2} = Fun(Lvl),
        Lvl_2
    catch {return, Ret} -> Ret end.

empty_forward() ->
    try
        F = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(F, I) ->
    case (I < 6) of
        true ->
            F_2 = lists:append((case F of nil -> []; _ -> F end), [erlang:get('NIL')]),
            I_2 = (I + 1),
            Fun_2_loop(F_2, I_2);
        _ -> {F, I}
    end
end,
{F_2, I_2} = Fun_2(F, I),
        F_2
    catch {return, Ret} -> Ret end.

init() ->
    try
        erlang:put('node_keys', [-1]),
        erlang:put('node_vals', [0]),
        erlang:put('node_forwards', [empty_forward()]),
        erlang:put('level', 1),
        nil
    catch {return, Ret} -> Ret end.

insert(Key, Value) ->
    try
        Update = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, Key, Update, Value) ->
    case (I_3 < 6) of
        true ->
            Update_2 = lists:append((case Update of nil -> []; _ -> Update end), [0]),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Key, Update_2, Value);
        _ -> {I_3, Key, Update, Value}
    end
end,
{I_4, Key, Update_2, Value} = Fun_3(I_3, Key, Update, Value),
        X = 0,
        I_5 = (erlang:get('level') - 1),
        Fun_5 = fun Fun_5_loop(I_5, Key, Update_2, Value, X) ->
    case (I_5 >= 0) of
        true ->
            Fun_4 = fun Fun_4_loop(I_5, Key, Update_2, Value, X) ->
    case (((case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X, erlang:get('node_forwards'), nil); _ -> lists:nth(X + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_5, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X, erlang:get('node_forwards'), nil); _ -> lists:nth(X + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_5 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X, erlang:get('node_forwards'), nil); _ -> lists:nth(X + 1, erlang:get('node_forwards')) end)) end) /= erlang:get('NIL')) andalso ((case erlang:is_map(erlang:get('node_keys')) of true -> maps:get((case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X, erlang:get('node_forwards'), nil); _ -> lists:nth(X + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_5, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X, erlang:get('node_forwards'), nil); _ -> lists:nth(X + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_5 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X, erlang:get('node_forwards'), nil); _ -> lists:nth(X + 1, erlang:get('node_forwards')) end)) end), erlang:get('node_keys'), nil); _ -> lists:nth((case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X, erlang:get('node_forwards'), nil); _ -> lists:nth(X + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_5, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X, erlang:get('node_forwards'), nil); _ -> lists:nth(X + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_5 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X, erlang:get('node_forwards'), nil); _ -> lists:nth(X + 1, erlang:get('node_forwards')) end)) end) + 1, erlang:get('node_keys')) end) < Key)) of
        true ->
            X_2 = (case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X, erlang:get('node_forwards'), nil); _ -> lists:nth(X + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_5, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X, erlang:get('node_forwards'), nil); _ -> lists:nth(X + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_5 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X, erlang:get('node_forwards'), nil); _ -> lists:nth(X + 1, erlang:get('node_forwards')) end)) end),
            Fun_4_loop(I_5, Key, Update_2, Value, X_2);
        _ -> {I_5, Key, Update_2, Value, X}
    end
end,
{I_5, Key, Update_2, Value, X_2} = Fun_4(I_5, Key, Update_2, Value, X),
            Update_3 = lists:sublist(Update_2, I_5) ++ [X_2] ++ lists:nthtail(I_5 + 1, Update_2),
            I_6 = (I_5 - 1),
            Fun_5_loop(I_6, Key, Update_3, Value, X_2);
        _ -> {I_5, Key, Update_2, Value, X}
    end
end,
{I_6, Key, Update_3, Value, X_2} = Fun_5(I_5, Key, Update_2, Value, X),
        X_3 = (case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_2, erlang:get('node_forwards'), nil); _ -> lists:nth(X_2 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_2, erlang:get('node_forwards'), nil); _ -> lists:nth(X_2 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(0 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_2, erlang:get('node_forwards'), nil); _ -> lists:nth(X_2 + 1, erlang:get('node_forwards')) end)) end),
        case ((X_3 /= erlang:get('NIL')) andalso ((case erlang:is_map(erlang:get('node_keys')) of true -> maps:get(X_3, erlang:get('node_keys'), nil); _ -> lists:nth(X_3 + 1, erlang:get('node_keys')) end) == Key)) of
        true -> Node_vals_tmp = lists:sublist(erlang:get('node_vals'), X_3) ++ [Value] ++ lists:nthtail(X_3 + 1, erlang:get('node_vals')),
            erlang:put('node_vals', Node_vals_tmp),
            throw({return, nil}),
            Node_vals_tmp_2 = Node_vals_tmp;
        _ -> Node_vals_tmp_2 = nil
    end,
        Lvl_3 = random_level(),
        case (Lvl_3 > erlang:get('level')) of
        true -> J = erlang:get('level'),
            Fun_6 = fun Fun_6_loop(I_6, J, Key, Lvl_3, Node_vals_tmp_2, Update_3, Value, X_3) ->
    case (J < Lvl_3) of
        true ->
            Update_4 = lists:sublist(Update_3, J) ++ [0] ++ lists:nthtail(J + 1, Update_3),
            J_2 = (J + 1),
            Fun_6_loop(I_6, J_2, Key, Lvl_3, Node_vals_tmp_2, Update_4, Value, X_3);
        _ -> {I_6, J, Key, Lvl_3, Node_vals_tmp_2, Update_3, Value, X_3}
    end
end,
{I_6, J_2, Key, Lvl_3, Node_vals_tmp_2, Update_4, Value, X_3} = Fun_6(I_6, J, Key, Lvl_3, Node_vals_tmp_2, Update_3, Value, X_3),
            erlang:put('level', Lvl_3),
            Fun_7 = Fun_6,
            J_3 = J_2,
            Update_5 = Update_4;
        _ -> Fun_7 = Fun_5,
            J_3 = nil,
            Update_5 = Update_3
    end,
        erlang:put('node_keys', lists:append((case erlang:get('node_keys') of nil -> []; _ -> erlang:get('node_keys') end), [Key])),
        erlang:put('node_vals', lists:append((case erlang:get('node_vals') of nil -> []; _ -> erlang:get('node_vals') end), [Value])),
        Forwards = empty_forward(),
        Idx = (erlang:length(erlang:get('node_keys')) - 1),
        I_7 = 0,
        Fun_8 = fun Fun_8_loop(Forwards, I_7, Idx, J_3, Key, Lvl_3, Node_vals_tmp_2, Update_5, Value, X_3) ->
    case (I_7 < Lvl_3) of
        true ->
            Forwards_2 = lists:sublist(Forwards, I_7) ++ [(case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get((case erlang:is_map(Update_5) of true -> maps:get(I_7, Update_5, nil); _ -> lists:nth(I_7 + 1, Update_5) end), erlang:get('node_forwards'), nil); _ -> lists:nth((case erlang:is_map(Update_5) of true -> maps:get(I_7, Update_5, nil); _ -> lists:nth(I_7 + 1, Update_5) end) + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_7, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get((case erlang:is_map(Update_5) of true -> maps:get(I_7, Update_5, nil); _ -> lists:nth(I_7 + 1, Update_5) end), erlang:get('node_forwards'), nil); _ -> lists:nth((case erlang:is_map(Update_5) of true -> maps:get(I_7, Update_5, nil); _ -> lists:nth(I_7 + 1, Update_5) end) + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_7 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get((case erlang:is_map(Update_5) of true -> maps:get(I_7, Update_5, nil); _ -> lists:nth(I_7 + 1, Update_5) end), erlang:get('node_forwards'), nil); _ -> lists:nth((case erlang:is_map(Update_5) of true -> maps:get(I_7, Update_5, nil); _ -> lists:nth(I_7 + 1, Update_5) end) + 1, erlang:get('node_forwards')) end)) end)] ++ lists:nthtail(I_7 + 1, Forwards),
            Node_forwards_tmp = lists:sublist(erlang:get('node_forwards'), (case erlang:is_map(Update_5) of true -> maps:get(I_7, Update_5, nil); _ -> lists:nth(I_7 + 1, Update_5) end)) ++ [lists:sublist(lists:nth((case erlang:is_map(Update_5) of true -> maps:get(I_7, Update_5, nil); _ -> lists:nth(I_7 + 1, Update_5) end) + 1, erlang:get('node_forwards')), I_7) ++ [Idx] ++ lists:nthtail(I_7 + 1, lists:nth((case erlang:is_map(Update_5) of true -> maps:get(I_7, Update_5, nil); _ -> lists:nth(I_7 + 1, Update_5) end) + 1, erlang:get('node_forwards')))] ++ lists:nthtail((case erlang:is_map(Update_5) of true -> maps:get(I_7, Update_5, nil); _ -> lists:nth(I_7 + 1, Update_5) end) + 1, erlang:get('node_forwards')),
            erlang:put('node_forwards', Node_forwards_tmp),
            I_8 = (I_7 + 1),
            Fun_8_loop(Forwards_2, I_8, Idx, J_3, Key, Lvl_3, Node_vals_tmp_2, Update_5, Value, X_3);
        _ -> {Forwards, I_7, Idx, J_3, Key, Lvl_3, Node_vals_tmp_2, Update_5, Value, X_3}
    end
end,
{Forwards_2, I_8, Idx, J_3, Key, Lvl_3, Node_vals_tmp_2, Update_5, Value, X_3} = Fun_8(Forwards, I_7, Idx, J_3, Key, Lvl_3, Node_vals_tmp_2, Update_5, Value, X_3),
        erlang:put('node_forwards', lists:append((case erlang:get('node_forwards') of nil -> []; _ -> erlang:get('node_forwards') end), [Forwards_2])),
        nil
    catch {return, Ret} -> Ret end.

find(Key_2) ->
    try
        X_4 = 0,
        I_9 = (erlang:get('level') - 1),
        Fun_10 = fun Fun_10_loop(I_9, Key_2, X_4) ->
    case (I_9 >= 0) of
        true ->
            Fun_9 = fun Fun_9_loop(I_9, Key_2, X_4) ->
    case (((case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_4, erlang:get('node_forwards'), nil); _ -> lists:nth(X_4 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_9, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_4, erlang:get('node_forwards'), nil); _ -> lists:nth(X_4 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_9 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_4, erlang:get('node_forwards'), nil); _ -> lists:nth(X_4 + 1, erlang:get('node_forwards')) end)) end) /= erlang:get('NIL')) andalso ((case erlang:is_map(erlang:get('node_keys')) of true -> maps:get((case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_4, erlang:get('node_forwards'), nil); _ -> lists:nth(X_4 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_9, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_4, erlang:get('node_forwards'), nil); _ -> lists:nth(X_4 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_9 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_4, erlang:get('node_forwards'), nil); _ -> lists:nth(X_4 + 1, erlang:get('node_forwards')) end)) end), erlang:get('node_keys'), nil); _ -> lists:nth((case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_4, erlang:get('node_forwards'), nil); _ -> lists:nth(X_4 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_9, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_4, erlang:get('node_forwards'), nil); _ -> lists:nth(X_4 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_9 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_4, erlang:get('node_forwards'), nil); _ -> lists:nth(X_4 + 1, erlang:get('node_forwards')) end)) end) + 1, erlang:get('node_keys')) end) < Key_2)) of
        true ->
            X_5 = (case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_4, erlang:get('node_forwards'), nil); _ -> lists:nth(X_4 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_9, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_4, erlang:get('node_forwards'), nil); _ -> lists:nth(X_4 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_9 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_4, erlang:get('node_forwards'), nil); _ -> lists:nth(X_4 + 1, erlang:get('node_forwards')) end)) end),
            Fun_9_loop(I_9, Key_2, X_5);
        _ -> {I_9, Key_2, X_4}
    end
end,
{I_9, Key_2, X_5} = Fun_9(I_9, Key_2, X_4),
            I_10 = (I_9 - 1),
            Fun_10_loop(I_10, Key_2, X_5);
        _ -> {I_9, Key_2, X_4}
    end
end,
{I_10, Key_2, X_5} = Fun_10(I_9, Key_2, X_4),
        X_6 = (case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_5, erlang:get('node_forwards'), nil); _ -> lists:nth(X_5 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_5, erlang:get('node_forwards'), nil); _ -> lists:nth(X_5 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(0 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_5, erlang:get('node_forwards'), nil); _ -> lists:nth(X_5 + 1, erlang:get('node_forwards')) end)) end),
        case ((X_6 /= erlang:get('NIL')) andalso ((case erlang:is_map(erlang:get('node_keys')) of true -> maps:get(X_6, erlang:get('node_keys'), nil); _ -> lists:nth(X_6 + 1, erlang:get('node_keys')) end) == Key_2)) of
        true -> throw({return, (case erlang:is_map(erlang:get('node_vals')) of true -> maps:get(X_6, erlang:get('node_vals'), nil); _ -> lists:nth(X_6 + 1, erlang:get('node_vals')) end)});
        _ -> ok
    end,
        -1
    catch {return, Ret} -> Ret end.

delete(Key_3) ->
    try
        Update_6 = [],
        I_11 = 0,
        Fun_11 = fun Fun_11_loop(I_11, Key_3, Update_6) ->
    case (I_11 < 6) of
        true ->
            Update_7 = lists:append((case Update_6 of nil -> []; _ -> Update_6 end), [0]),
            I_12 = (I_11 + 1),
            Fun_11_loop(I_12, Key_3, Update_7);
        _ -> {I_11, Key_3, Update_6}
    end
end,
{I_12, Key_3, Update_7} = Fun_11(I_11, Key_3, Update_6),
        X_7 = 0,
        I_13 = (erlang:get('level') - 1),
        Fun_13 = fun Fun_13_loop(I_13, Key_3, Update_7, X_7) ->
    case (I_13 >= 0) of
        true ->
            Fun_12 = fun Fun_12_loop(I_13, Key_3, Update_7, X_7) ->
    case (((case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_7, erlang:get('node_forwards'), nil); _ -> lists:nth(X_7 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_13, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_7, erlang:get('node_forwards'), nil); _ -> lists:nth(X_7 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_13 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_7, erlang:get('node_forwards'), nil); _ -> lists:nth(X_7 + 1, erlang:get('node_forwards')) end)) end) /= erlang:get('NIL')) andalso ((case erlang:is_map(erlang:get('node_keys')) of true -> maps:get((case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_7, erlang:get('node_forwards'), nil); _ -> lists:nth(X_7 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_13, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_7, erlang:get('node_forwards'), nil); _ -> lists:nth(X_7 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_13 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_7, erlang:get('node_forwards'), nil); _ -> lists:nth(X_7 + 1, erlang:get('node_forwards')) end)) end), erlang:get('node_keys'), nil); _ -> lists:nth((case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_7, erlang:get('node_forwards'), nil); _ -> lists:nth(X_7 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_13, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_7, erlang:get('node_forwards'), nil); _ -> lists:nth(X_7 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_13 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_7, erlang:get('node_forwards'), nil); _ -> lists:nth(X_7 + 1, erlang:get('node_forwards')) end)) end) + 1, erlang:get('node_keys')) end) < Key_3)) of
        true ->
            X_8 = (case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_7, erlang:get('node_forwards'), nil); _ -> lists:nth(X_7 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_13, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_7, erlang:get('node_forwards'), nil); _ -> lists:nth(X_7 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_13 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_7, erlang:get('node_forwards'), nil); _ -> lists:nth(X_7 + 1, erlang:get('node_forwards')) end)) end),
            Fun_12_loop(I_13, Key_3, Update_7, X_8);
        _ -> {I_13, Key_3, Update_7, X_7}
    end
end,
{I_13, Key_3, Update_7, X_8} = Fun_12(I_13, Key_3, Update_7, X_7),
            Update_8 = lists:sublist(Update_7, I_13) ++ [X_8] ++ lists:nthtail(I_13 + 1, Update_7),
            I_14 = (I_13 - 1),
            Fun_13_loop(I_14, Key_3, Update_8, X_8);
        _ -> {I_13, Key_3, Update_7, X_7}
    end
end,
{I_14, Key_3, Update_8, X_8} = Fun_13(I_13, Key_3, Update_7, X_7),
        X_9 = (case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_8, erlang:get('node_forwards'), nil); _ -> lists:nth(X_8 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_8, erlang:get('node_forwards'), nil); _ -> lists:nth(X_8 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(0 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_8, erlang:get('node_forwards'), nil); _ -> lists:nth(X_8 + 1, erlang:get('node_forwards')) end)) end),
        case ((X_9 == erlang:get('NIL')) orelse ((case erlang:is_map(erlang:get('node_keys')) of true -> maps:get(X_9, erlang:get('node_keys'), nil); _ -> lists:nth(X_9 + 1, erlang:get('node_keys')) end) /= Key_3)) of
        true -> throw({return, nil});
        _ -> ok
    end,
        I_15 = 0,
        Fun_14 = fun Fun_14_loop(I_15, Key_3, Update_8, X_9) ->
    case (I_15 < erlang:get('level')) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get((case erlang:is_map(Update_8) of true -> maps:get(I_15, Update_8, nil); _ -> lists:nth(I_15 + 1, Update_8) end), erlang:get('node_forwards'), nil); _ -> lists:nth((case erlang:is_map(Update_8) of true -> maps:get(I_15, Update_8, nil); _ -> lists:nth(I_15 + 1, Update_8) end) + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_15, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get((case erlang:is_map(Update_8) of true -> maps:get(I_15, Update_8, nil); _ -> lists:nth(I_15 + 1, Update_8) end), erlang:get('node_forwards'), nil); _ -> lists:nth((case erlang:is_map(Update_8) of true -> maps:get(I_15, Update_8, nil); _ -> lists:nth(I_15 + 1, Update_8) end) + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_15 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get((case erlang:is_map(Update_8) of true -> maps:get(I_15, Update_8, nil); _ -> lists:nth(I_15 + 1, Update_8) end), erlang:get('node_forwards'), nil); _ -> lists:nth((case erlang:is_map(Update_8) of true -> maps:get(I_15, Update_8, nil); _ -> lists:nth(I_15 + 1, Update_8) end) + 1, erlang:get('node_forwards')) end)) end) == X_9) of
        true -> Node_forwards_tmp_2 = lists:sublist(erlang:get('node_forwards'), (case erlang:is_map(Update_8) of true -> maps:get(I_15, Update_8, nil); _ -> lists:nth(I_15 + 1, Update_8) end)) ++ [lists:sublist(lists:nth((case erlang:is_map(Update_8) of true -> maps:get(I_15, Update_8, nil); _ -> lists:nth(I_15 + 1, Update_8) end) + 1, erlang:get('node_forwards')), I_15) ++ [(case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_9, erlang:get('node_forwards'), nil); _ -> lists:nth(X_9 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(I_15, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_9, erlang:get('node_forwards'), nil); _ -> lists:nth(X_9 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(I_15 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_9, erlang:get('node_forwards'), nil); _ -> lists:nth(X_9 + 1, erlang:get('node_forwards')) end)) end)] ++ lists:nthtail(I_15 + 1, lists:nth((case erlang:is_map(Update_8) of true -> maps:get(I_15, Update_8, nil); _ -> lists:nth(I_15 + 1, Update_8) end) + 1, erlang:get('node_forwards')))] ++ lists:nthtail((case erlang:is_map(Update_8) of true -> maps:get(I_15, Update_8, nil); _ -> lists:nth(I_15 + 1, Update_8) end) + 1, erlang:get('node_forwards')),
            erlang:put('node_forwards', Node_forwards_tmp_2),
            Node_forwards_tmp_3 = Node_forwards_tmp_2;
        _ -> Node_forwards_tmp_3 = nil
    end,
            I_16 = (I_15 + 1),
            Fun_14_loop(I_16, Key_3, Update_8, X_9);
        _ -> {I_15, Key_3, Update_8, X_9}
    end
end,
{I_16, Key_3, Update_8, X_9} = Fun_14(I_15, Key_3, Update_8, X_9),
        Fun_15 = fun Fun_15_loop(I_16, Key_3, Update_8, X_9) ->
    case ((erlang:get('level') > 1) andalso ((case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(0, erlang:get('node_forwards'), nil); _ -> lists:nth(0 + 1, erlang:get('node_forwards')) end)) of true -> maps:get((erlang:get('level') - 1), (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(0, erlang:get('node_forwards'), nil); _ -> lists:nth(0 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth((erlang:get('level') - 1) + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(0, erlang:get('node_forwards'), nil); _ -> lists:nth(0 + 1, erlang:get('node_forwards')) end)) end) == erlang:get('NIL'))) of
        true ->
            erlang:put('level', (erlang:get('level') - 1)),
            Fun_15_loop(I_16, Key_3, Update_8, X_9);
        _ -> {I_16, Key_3, Update_8, X_9}
    end
end,
{I_16, Key_3, Update_8, X_9} = Fun_15(I_16, Key_3, Update_8, X_9),
        nil
    catch {return, Ret} -> Ret end.

to_string() ->
    try
        S = "",
        X_10 = (case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(0, erlang:get('node_forwards'), nil); _ -> lists:nth(0 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(0, erlang:get('node_forwards'), nil); _ -> lists:nth(0 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(0 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(0, erlang:get('node_forwards'), nil); _ -> lists:nth(0 + 1, erlang:get('node_forwards')) end)) end),
        Fun_16 = fun Fun_16_loop(S, X_10) ->
    case (X_10 /= erlang:get('NIL')) of
        true ->
            case (S /= "") of
        true -> S_2 = (S ++ " -> "),
            S_3 = S_2;
        _ -> S_3 = S
    end,
            S_4 = (((S_3 ++ mochi_str((case erlang:is_map(erlang:get('node_keys')) of true -> maps:get(X_10, erlang:get('node_keys'), nil); _ -> lists:nth(X_10 + 1, erlang:get('node_keys')) end))) ++ ":") ++ mochi_str((case erlang:is_map(erlang:get('node_vals')) of true -> maps:get(X_10, erlang:get('node_vals'), nil); _ -> lists:nth(X_10 + 1, erlang:get('node_vals')) end))),
            X_11 = (case erlang:is_map((case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_10, erlang:get('node_forwards'), nil); _ -> lists:nth(X_10 + 1, erlang:get('node_forwards')) end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_10, erlang:get('node_forwards'), nil); _ -> lists:nth(X_10 + 1, erlang:get('node_forwards')) end), nil); _ -> lists:nth(0 + 1, (case erlang:is_map(erlang:get('node_forwards')) of true -> maps:get(X_10, erlang:get('node_forwards'), nil); _ -> lists:nth(X_10 + 1, erlang:get('node_forwards')) end)) end),
            Fun_16_loop(S_4, X_11);
        _ -> {S, X_10}
    end
end,
{S_4, X_11} = Fun_16(S, X_10),
        S_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        init(),
        insert(2, 2),
        insert(4, 4),
        insert(6, 4),
        insert(4, 5),
        insert(8, 4),
        insert(9, 4),
        delete(4),
        io:format("~ts~n", [mochi_repr(to_string())]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('NIL', (0 - 1)),
    erlang:put('MAX_LEVEL', 6),
    erlang:put('P', 0.5),
    erlang:put('seed', 1),
    erlang:put('node_keys', []),
    erlang:put('node_vals', []),
    erlang:put('node_forwards', []),
    erlang:put('level', 1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
