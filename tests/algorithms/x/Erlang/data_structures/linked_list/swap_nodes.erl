#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, empty_list/0, push/2, swap_nodes/3, to_string/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (e561788721) on 2025-08-07 08:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

empty_list() ->
    try
        #{"data" => []}
    catch {return, Ret} -> Ret end.

push(List, Value) ->
    try
        Res = [Value],
        Res_2 = lists:append(Res, maps:get("data", List, nil)),
        #{"data" => Res_2}
    catch {return, Ret} -> Ret end.

swap_nodes(List_2, V1, V2) ->
    try
        case (V1 == V2) of
        true -> throw({return, List_2});
        _ -> ok
    end,
        Idx1 = (0 - 1),
        Idx2 = (0 - 1),
        I = 0,
        Fun = fun Fun_loop(I, Idx1, Idx2, List_2, V1, V2) ->
    case (I < erlang:length(maps:get("data", List_2, nil))) of
        true ->
            case (((case erlang:is_map(maps:get("data", List_2, nil)) of true -> maps:get(I, maps:get("data", List_2, nil), nil); _ -> lists:nth(I + 1, maps:get("data", List_2, nil)) end) == V1) andalso (Idx1 == (0 - 1))) of
        true -> Idx1_2 = I,
            Idx1_3 = Idx1_2;
        _ -> Idx1_3 = Idx1
    end,
            case (((case erlang:is_map(maps:get("data", List_2, nil)) of true -> maps:get(I, maps:get("data", List_2, nil), nil); _ -> lists:nth(I + 1, maps:get("data", List_2, nil)) end) == V2) andalso (Idx2 == (0 - 1))) of
        true -> Idx2_2 = I,
            Idx2_3 = Idx2_2;
        _ -> Idx2_3 = Idx2
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Idx1_3, Idx2_3, List_2, V1, V2);
        _ -> {I, Idx1, Idx2, List_2, V1, V2}
    end
end,
{I_2, Idx1_3, Idx2_3, List_2, V1, V2} = Fun(I, Idx1, Idx2, List_2, V1, V2),
        case ((Idx1_3 == (0 - 1)) orelse (Idx2_3 == (0 - 1))) of
        true -> throw({return, List_2});
        _ -> ok
    end,
        Res_3 = maps:get("data", List_2, nil),
        Temp = (case erlang:is_map(Res_3) of true -> maps:get(Idx1_3, Res_3, nil); _ -> lists:nth(Idx1_3 + 1, Res_3) end),
        Res_4 = lists:sublist(Res_3, Idx1_3) ++ [(case erlang:is_map(Res_3) of true -> maps:get(Idx2_3, Res_3, nil); _ -> lists:nth(Idx2_3 + 1, Res_3) end)] ++ lists:nthtail(Idx1_3 + 1, Res_3),
        Res_5 = lists:sublist(Res_4, Idx2_3) ++ [Temp] ++ lists:nthtail(Idx2_3 + 1, Res_4),
        #{"data" => Res_5}
    catch {return, Ret} -> Ret end.

to_string(List_3) ->
    try
        mochi_str(maps:get("data", List_3, nil))
    catch {return, Ret} -> Ret end.

main() ->
    try
        Ll = empty_list(),
        I_3 = 5,
        Fun_2 = fun Fun_2_loop(I_3, Ll) ->
    case (I_3 > 0) of
        true ->
            Ll_2 = push(Ll, I_3),
            I_4 = (I_3 - 1),
            Fun_2_loop(I_4, Ll_2);
        _ -> {I_3, Ll}
    end
end,
{I_4, Ll_2} = Fun_2(I_3, Ll),
        io:format("~ts~n", [mochi_repr(("Original Linked List: " ++ to_string(Ll_2)))]),
        Ll_3 = swap_nodes(Ll_2, 1, 4),
        io:format("~ts~n", [mochi_repr(("Modified Linked List: " ++ to_string(Ll_3)))]),
        io:format("~ts~n", [mochi_repr("After swapping the nodes whose data is 1 and 4.")]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
