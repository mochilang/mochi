#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, has_loop/2, make_nodes/1, main/0]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

has_loop(Nodes, Head) ->
    try
        Slow = Head,
        Fast = Head,
        Fun = fun Fun_loop(Fast, Head, Nodes, Slow) ->
    case (Fast /= (0 - 1)) of
        true ->
            Fast_node1 = (case erlang:is_map(Nodes) of true -> maps:get(Fast, Nodes, nil); _ -> case Fast < 0 of true -> mochi_nth(erlang:length(Nodes) + Fast + 1, Nodes); _ -> mochi_nth(Fast + 1, Nodes) end end),
            case (maps:get("next", Fast_node1, nil) == (0 - 1)) of
        true -> throw({return, false});
        _ -> ok
    end,
            Fast_node2 = (case erlang:is_map(Nodes) of true -> maps:get(maps:get("next", Fast_node1, nil), Nodes, nil); _ -> case maps:get("next", Fast_node1, nil) < 0 of true -> mochi_nth(erlang:length(Nodes) + maps:get("next", Fast_node1, nil) + 1, Nodes); _ -> mochi_nth(maps:get("next", Fast_node1, nil) + 1, Nodes) end end),
            case (maps:get("next", Fast_node2, nil) == (0 - 1)) of
        true -> throw({return, false});
        _ -> ok
    end,
            Slow_node = (case erlang:is_map(Nodes) of true -> maps:get(Slow, Nodes, nil); _ -> case Slow < 0 of true -> mochi_nth(erlang:length(Nodes) + Slow + 1, Nodes); _ -> mochi_nth(Slow + 1, Nodes) end end),
            Slow_2 = maps:get("next", Slow_node, nil),
            Fast_2 = maps:get("next", Fast_node2, nil),
            case (Slow_2 == Fast_2) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_loop(Fast_2, Head, Nodes, Slow_2);
        _ -> {Fast, Head, Nodes, Slow}
    end
end,
{Fast_2, Head, Nodes, Slow_2} = Fun(Fast, Head, Nodes, Slow),
        false
    catch {return, RetCatch} -> RetCatch end.

make_nodes(Values) ->
    try
        Nodes_2 = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Nodes_2, Values) ->
    case (I < erlang:length(Values)) of
        true ->
            Next_idx = (case (I == (erlang:length(Values) - 1)) of
    true -> (0 - 1);
    _ -> (I + 1)
end),
            Nodes_3 = lists:append((case Nodes_2 of nil -> []; _ -> Nodes_2 end), [#{"data" => (case erlang:is_map(Values) of true -> maps:get(I, Values, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Values) + I + 1, Values); _ -> mochi_nth(I + 1, Values) end end), "next" => Next_idx}]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Nodes_3, Values);
        _ -> {I, Nodes_2, Values}
    end
end,
{I_2, Nodes_3, Values} = Fun_2(I, Nodes_2, Values),
        Nodes_3
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        List1 = make_nodes([1, 2, 3, 4]),
        io:format("~s~n", [mochi_str(has_loop(List1, 0))]),
        List1_2 = lists:sublist(List1, 3) ++ [maps:put("next", 1, lists:nth(3 + 1, List1) )] ++ lists:nthtail(3 + 1, List1),
        io:format("~s~n", [mochi_str(has_loop(List1_2, 0))]),
        List2 = make_nodes([5, 6, 5, 6]),
        io:format("~s~n", [mochi_str(has_loop(List2, 0))]),
        List3 = make_nodes([1]),
        io:format("~s~n", [mochi_str(has_loop(List3, 0))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
