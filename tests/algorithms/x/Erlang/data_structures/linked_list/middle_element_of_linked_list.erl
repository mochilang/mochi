#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, empty_list/0, push/2, middle_element/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

empty_list() ->
    try
        #{"data" => []}
    catch {return, Ret} -> Ret end.

push(Lst, Value) ->
    try
        Res = [Value],
        I = 0,
        Fun = fun Fun_loop(I, Lst, Res, Value) ->
    case (I < erlang:length(maps:get("data", Lst, nil))) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(maps:get("data", Lst, nil)) of true -> maps:get(I, maps:get("data", Lst, nil), nil); _ -> lists:nth(I + 1, maps:get("data", Lst, nil)) end)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Lst, Res_2, Value);
        _ -> {I, Lst, Res, Value}
    end
end,
{I_2, Lst, Res_2, Value} = Fun(I, Lst, Res, Value),
        #{"data" => Res_2}
    catch {return, Ret} -> Ret end.

middle_element(Lst_2) ->
    try
        N = erlang:length(maps:get("data", Lst_2, nil)),
        case (N == 0) of
        true -> io:format("~ts~n", [mochi_repr("No element found.")]),
            throw({return, 0});
        _ -> ok
    end,
        Slow = 0,
        Fast = 0,
        Fun_2 = fun Fun_2_loop(Fast, Lst_2, N, Slow) ->
    case ((Fast + 1) < N) of
        true ->
            Fast_2 = (Fast + 2),
            Slow_2 = (Slow + 1),
            Fun_2_loop(Fast_2, Lst_2, N, Slow_2);
        _ -> {Fast, Lst_2, N, Slow}
    end
end,
{Fast_2, Lst_2, N, Slow_2} = Fun_2(Fast, Lst_2, N, Slow),
        (case erlang:is_map(maps:get("data", Lst_2, nil)) of true -> maps:get(Slow_2, maps:get("data", Lst_2, nil), nil); _ -> lists:nth(Slow_2 + 1, maps:get("data", Lst_2, nil)) end)
    catch {return, Ret} -> Ret end.

main() ->
    try
        Lst_3 = empty_list(),
        middle_element(Lst_3),
        Lst_4 = push(Lst_3, 5),
        io:format("~ts~n", [mochi_repr(5)]),
        Lst_5 = push(Lst_4, 6),
        io:format("~ts~n", [mochi_repr(6)]),
        Lst_6 = push(Lst_5, 8),
        io:format("~ts~n", [mochi_repr(8)]),
        Lst_7 = push(Lst_6, 8),
        io:format("~ts~n", [mochi_repr(8)]),
        Lst_8 = push(Lst_7, 10),
        io:format("~ts~n", [mochi_repr(10)]),
        Lst_9 = push(Lst_8, 12),
        io:format("~ts~n", [mochi_repr(12)]),
        Lst_10 = push(Lst_9, 17),
        io:format("~ts~n", [mochi_repr(17)]),
        Lst_11 = push(Lst_10, 7),
        io:format("~ts~n", [mochi_repr(7)]),
        Lst_12 = push(Lst_11, 3),
        io:format("~ts~n", [mochi_repr(3)]),
        Lst_13 = push(Lst_12, 20),
        io:format("~ts~n", [mochi_repr(20)]),
        Lst_14 = push(Lst_13, -20),
        io:format("~ts~n", [mochi_repr(-20)]),
        io:format("~ts~n", [mochi_repr(middle_element(Lst_14))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
