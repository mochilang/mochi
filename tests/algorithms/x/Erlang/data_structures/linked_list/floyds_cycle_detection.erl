#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, empty_list/0, add_node/2, set_next/3, detect_cycle/1, main/0]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

empty_list() ->
    try
        #{"next" => [], "head" => erlang:get('NULL')}
    catch {return, RetCatch} -> RetCatch end.

add_node(List, Value) ->
    try
        Nexts = maps:get("next", List, nil),
        New_index = erlang:length(Nexts),
        Nexts_2 = lists:append((case Nexts of nil -> []; _ -> Nexts end), [erlang:get('NULL')]),
        case (maps:get("head", List, nil) == erlang:get('NULL')) of
        true -> throw({return, #{"next" => Nexts_2, "head" => New_index}});
        _ -> ok
    end,
        Last = maps:get("head", List, nil),
        Fun = fun Fun_loop(Last, List, New_index, Nexts_2, Value) ->
    case ((case erlang:is_map(Nexts_2) of true -> maps:get(Last, Nexts_2, nil); _ -> case Last < 0 of true -> mochi_nth(erlang:length(Nexts_2) + Last + 1, Nexts_2); _ -> mochi_nth(Last + 1, Nexts_2) end end) /= erlang:get('NULL')) of
        true ->
            Last_2 = (case erlang:is_map(Nexts_2) of true -> maps:get(Last, Nexts_2, nil); _ -> case Last < 0 of true -> mochi_nth(erlang:length(Nexts_2) + Last + 1, Nexts_2); _ -> mochi_nth(Last + 1, Nexts_2) end end),
            Fun_loop(Last_2, List, New_index, Nexts_2, Value);
        _ -> {Last, List, New_index, Nexts_2, Value}
    end
end,
{Last_2, List, New_index, Nexts_2, Value} = Fun(Last, List, New_index, Nexts_2, Value),
        New_nexts = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Last_2, List, New_index, New_nexts, Nexts_2, Value) ->
    case (I < erlang:length(Nexts_2)) of
        true ->
            New_nexts_4 = (case (I == Last_2) of
        true -> New_nexts_2 = lists:append((case New_nexts of nil -> []; _ -> New_nexts end), [New_index]),
            New_nexts_2;
        _ -> New_nexts_3 = lists:append((case New_nexts of nil -> []; _ -> New_nexts end), [(case erlang:is_map(Nexts_2) of true -> maps:get(I, Nexts_2, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Nexts_2) + I + 1, Nexts_2); _ -> mochi_nth(I + 1, Nexts_2) end end)]),
            New_nexts_3
    end),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Last_2, List, New_index, New_nexts_4, Nexts_2, Value);
        _ -> {I, Last_2, List, New_index, New_nexts, Nexts_2, Value}
    end
end,
{I_2, Last_2, List, New_index, New_nexts_4, Nexts_2, Value} = Fun_2(I, Last_2, List, New_index, New_nexts, Nexts_2, Value),
        #{"next" => New_nexts_4, "head" => maps:get("head", List, nil)}
    catch {return, RetCatch} -> RetCatch end.

set_next(List_2, Index, Next_index) ->
    try
        Nexts_3 = maps:get("next", List_2, nil),
        New_nexts_5 = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, Index, List_2, New_nexts_5, Next_index, Nexts_3) ->
    case (I_3 < erlang:length(Nexts_3)) of
        true ->
            New_nexts_8 = (case (I_3 == Index) of
        true -> New_nexts_6 = lists:append((case New_nexts_5 of nil -> []; _ -> New_nexts_5 end), [Next_index]),
            New_nexts_6;
        _ -> New_nexts_7 = lists:append((case New_nexts_5 of nil -> []; _ -> New_nexts_5 end), [(case erlang:is_map(Nexts_3) of true -> maps:get(I_3, Nexts_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Nexts_3) + I_3 + 1, Nexts_3); _ -> mochi_nth(I_3 + 1, Nexts_3) end end)]),
            New_nexts_7
    end),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Index, List_2, New_nexts_8, Next_index, Nexts_3);
        _ -> {I_3, Index, List_2, New_nexts_5, Next_index, Nexts_3}
    end
end,
{I_4, Index, List_2, New_nexts_8, Next_index, Nexts_3} = Fun_3(I_3, Index, List_2, New_nexts_5, Next_index, Nexts_3),
        #{"next" => New_nexts_8, "head" => maps:get("head", List_2, nil)}
    catch {return, RetCatch} -> RetCatch end.

detect_cycle(List_3) ->
    try
        case (maps:get("head", List_3, nil) == erlang:get('NULL')) of
        true -> throw({return, false});
        _ -> ok
    end,
        Nexts_4 = maps:get("next", List_3, nil),
        Slow = maps:get("head", List_3, nil),
        Fast = maps:get("head", List_3, nil),
        Fun_4 = fun Fun_4_loop(Fast, List_3, Nexts_4, Slow) ->
    case ((Fast /= erlang:get('NULL')) andalso ((case erlang:is_map(Nexts_4) of true -> maps:get(Fast, Nexts_4, nil); _ -> case Fast < 0 of true -> mochi_nth(erlang:length(Nexts_4) + Fast + 1, Nexts_4); _ -> mochi_nth(Fast + 1, Nexts_4) end end) /= erlang:get('NULL'))) of
        true ->
            Slow_2 = (case erlang:is_map(Nexts_4) of true -> maps:get(Slow, Nexts_4, nil); _ -> case Slow < 0 of true -> mochi_nth(erlang:length(Nexts_4) + Slow + 1, Nexts_4); _ -> mochi_nth(Slow + 1, Nexts_4) end end),
            Fast_2 = (case erlang:is_map(Nexts_4) of true -> maps:get((case erlang:is_map(Nexts_4) of true -> maps:get(Fast, Nexts_4, nil); _ -> case Fast < 0 of true -> mochi_nth(erlang:length(Nexts_4) + Fast + 1, Nexts_4); _ -> mochi_nth(Fast + 1, Nexts_4) end end), Nexts_4, nil); _ -> case (case erlang:is_map(Nexts_4) of true -> maps:get(Fast, Nexts_4, nil); _ -> case Fast < 0 of true -> mochi_nth(erlang:length(Nexts_4) + Fast + 1, Nexts_4); _ -> mochi_nth(Fast + 1, Nexts_4) end end) < 0 of true -> mochi_nth(erlang:length(Nexts_4) + (case erlang:is_map(Nexts_4) of true -> maps:get(Fast, Nexts_4, nil); _ -> case Fast < 0 of true -> mochi_nth(erlang:length(Nexts_4) + Fast + 1, Nexts_4); _ -> mochi_nth(Fast + 1, Nexts_4) end end) + 1, Nexts_4); _ -> mochi_nth((case erlang:is_map(Nexts_4) of true -> maps:get(Fast, Nexts_4, nil); _ -> case Fast < 0 of true -> mochi_nth(erlang:length(Nexts_4) + Fast + 1, Nexts_4); _ -> mochi_nth(Fast + 1, Nexts_4) end end) + 1, Nexts_4) end end),
            case (Slow_2 == Fast_2) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_4_loop(Fast_2, List_3, Nexts_4, Slow_2);
        _ -> {Fast, List_3, Nexts_4, Slow}
    end
end,
{Fast_2, List_3, Nexts_4, Slow_2} = Fun_4(Fast, List_3, Nexts_4, Slow),
        false
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Ll = empty_list(),
        Ll_2 = add_node(Ll, 1),
        Ll_3 = add_node(Ll_2, 2),
        Ll_4 = add_node(Ll_3, 3),
        Ll_5 = add_node(Ll_4, 4),
        Ll_6 = set_next(Ll_5, 3, 1),
        io:format("~s~n", [mochi_format(detect_cycle(Ll_6))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('NULL', (0 - 1)),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
