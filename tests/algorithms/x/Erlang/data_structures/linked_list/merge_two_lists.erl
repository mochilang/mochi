#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, sort_list/1, make_sorted_linked_list/1, len_sll/1, str_sll/1, merge_lists/2, main/0]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

sort_list(Nums) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, Nums) ->
    case (I < erlang:length(Nums)) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [(case erlang:is_map(Nums) of true -> maps:get(I, Nums, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Nums) + I + 1, Nums); _ -> mochi_nth(I + 1, Nums) end end)]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, I_2, Nums);
        _ -> {Arr, I, Nums}
    end
end,
{Arr_2, I_2, Nums} = Fun(Arr, I, Nums),
        J = 0,
        Fun_3 = fun Fun_3_loop(Arr_2, I_2, J, Nums) ->
    case (J < erlang:length(Arr_2)) of
        true ->
            K = (J + 1),
            Fun_2 = fun Fun_2_loop(Arr_2, I_2, J, K, Nums) ->
    case (K < erlang:length(Arr_2)) of
        true ->
            Tmp_2 = (case ((case erlang:is_map(Arr_2) of true -> maps:get(K, Arr_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Arr_2) + K + 1, Arr_2); _ -> mochi_nth(K + 1, Arr_2) end end) < (case erlang:is_map(Arr_2) of true -> maps:get(J, Arr_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr_2) + J + 1, Arr_2); _ -> mochi_nth(J + 1, Arr_2) end end)) of
        true -> Tmp = (case erlang:is_map(Arr_2) of true -> maps:get(J, Arr_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr_2) + J + 1, Arr_2); _ -> mochi_nth(J + 1, Arr_2) end end),
            Arr_3 = lists:sublist(Arr_2, J) ++ [(case erlang:is_map(Arr_2) of true -> maps:get(K, Arr_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Arr_2) + K + 1, Arr_2); _ -> mochi_nth(K + 1, Arr_2) end end)] ++ lists:nthtail(J + 1, Arr_2),
            Arr_4 = lists:sublist(Arr_3, K) ++ [Tmp] ++ lists:nthtail(K + 1, Arr_3),
            Arr_5 = Arr_4,
            Tmp;
        _ -> Arr_5 = Arr_2,
            nil
    end),
            K_2 = (K + 1),
            Fun_2_loop(Arr_5, I_2, J, K_2, Nums);
        _ -> {Arr_2, I_2, J, K, Nums}
    end
end,
{Arr_5, I_2, J, K_2, Nums} = Fun_2(Arr_2, I_2, J, K, Nums),
            J_2 = (J + 1),
            Fun_3_loop(Arr_5, I_2, J_2, Nums);
        _ -> {Arr_2, I_2, J, Nums}
    end
end,
{Arr_5, I_2, J_2, Nums} = Fun_3(Arr_2, I_2, J, Nums),
        Arr_5
    catch {return, RetCatch} -> RetCatch end.

make_sorted_linked_list(Ints) ->
    try
        #{"values" => sort_list(Ints)}
    catch {return, RetCatch} -> RetCatch end.

len_sll(Sll) ->
    try
        erlang:length(maps:get("values", Sll, nil))
    catch {return, RetCatch} -> RetCatch end.

str_sll(Sll_2) ->
    try
        Res = "",
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(I_3, Res, Sll_2) ->
    case (I_3 < erlang:length(maps:get("values", Sll_2, nil))) of
        true ->
            Res_2 = (Res ++ mochi_str((case erlang:is_map(maps:get("values", Sll_2, nil)) of true -> maps:get(I_3, maps:get("values", Sll_2, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("values", Sll_2, nil)) + I_3 + 1, maps:get("values", Sll_2, nil)); _ -> mochi_nth(I_3 + 1, maps:get("values", Sll_2, nil)) end end))),
            Res_4 = (case ((I_3 + 1) < erlang:length(maps:get("values", Sll_2, nil))) of
        true -> Res_3 = (Res_2 ++ " -> "),
            Res_3;
        _ -> Res_2
    end),
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, Res_4, Sll_2);
        _ -> {I_3, Res, Sll_2}
    end
end,
{I_4, Res_4, Sll_2} = Fun_4(I_3, Res, Sll_2),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

merge_lists(A, B) ->
    try
        Combined = [],
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(A, B, Combined, I_5) ->
    case (I_5 < erlang:length(maps:get("values", A, nil))) of
        true ->
            Combined_2 = lists:append((case Combined of nil -> []; _ -> Combined end), [(case erlang:is_map(maps:get("values", A, nil)) of true -> maps:get(I_5, maps:get("values", A, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("values", A, nil)) + I_5 + 1, maps:get("values", A, nil)); _ -> mochi_nth(I_5 + 1, maps:get("values", A, nil)) end end)]),
            I_6 = (I_5 + 1),
            Fun_5_loop(A, B, Combined_2, I_6);
        _ -> {A, B, Combined, I_5}
    end
end,
{A, B, Combined_2, I_6} = Fun_5(A, B, Combined, I_5),
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(A, B, Combined_2, I_7) ->
    case (I_7 < erlang:length(maps:get("values", B, nil))) of
        true ->
            Combined_3 = lists:append((case Combined_2 of nil -> []; _ -> Combined_2 end), [(case erlang:is_map(maps:get("values", B, nil)) of true -> maps:get(I_7, maps:get("values", B, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("values", B, nil)) + I_7 + 1, maps:get("values", B, nil)); _ -> mochi_nth(I_7 + 1, maps:get("values", B, nil)) end end)]),
            I_8 = (I_7 + 1),
            Fun_6_loop(A, B, Combined_3, I_8);
        _ -> {A, B, Combined_2, I_7}
    end
end,
{A, B, Combined_3, I_8} = Fun_6(A, B, Combined_2, I_7),
        make_sorted_linked_list(Combined_3)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Test_data_odd = [3, 9, -11, 0, 7, 5, 1, -1],
        Test_data_even = [4, 6, 2, 0, 8, 10, 3, -2],
        Sll_one = make_sorted_linked_list(Test_data_odd),
        Sll_two = make_sorted_linked_list(Test_data_even),
        Merged = merge_lists(Sll_one, Sll_two),
        io:format("~s~n", [mochi_str(len_sll(Merged))]),
        io:format("~s~n", [mochi_format(str_sll(Merged))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
