#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_set/2, find_set/2, union_set/3, same_python_set/2]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

make_set(Ds, X) ->
    try
        P = maps:get("parent", Ds, nil),
        R = maps:get("rank", Ds, nil),
        P_2 = lists:sublist(P, X) ++ [X] ++ lists:nthtail(X + 1, P),
        R_2 = lists:sublist(R, X) ++ [0] ++ lists:nthtail(X + 1, R),
        #{"parent" => P_2, "rank" => R_2}
    catch {return, RetCatch} -> RetCatch end.

find_set(Ds_2, X_2) ->
    try
        case ((case erlang:is_map(maps:get("parent", Ds_2, nil)) of true -> maps:get(X_2, maps:get("parent", Ds_2, nil), nil); _ -> case X_2 < 0 of true -> mochi_nth(erlang:length(maps:get("parent", Ds_2, nil)) + X_2 + 1, maps:get("parent", Ds_2, nil)); _ -> mochi_nth(X_2 + 1, maps:get("parent", Ds_2, nil)) end end) == X_2) of
        true -> throw({return, #{"ds" => Ds_2, "root" => X_2}});
        _ -> ok
    end,
        Res = find_set(Ds_2, (case erlang:is_map(maps:get("parent", Ds_2, nil)) of true -> maps:get(X_2, maps:get("parent", Ds_2, nil), nil); _ -> case X_2 < 0 of true -> mochi_nth(erlang:length(maps:get("parent", Ds_2, nil)) + X_2 + 1, maps:get("parent", Ds_2, nil)); _ -> mochi_nth(X_2 + 1, maps:get("parent", Ds_2, nil)) end end)),
        P_3 = maps:get("parent", maps:get("ds", Res, nil), nil),
        P_4 = lists:sublist(P_3, X_2) ++ [maps:get("root", Res, nil)] ++ lists:nthtail(X_2 + 1, P_3),
        #{"ds" => #{"parent" => P_4, "rank" => maps:get("rank", maps:get("ds", Res, nil), nil)}, "root" => maps:get("root", Res, nil)}
    catch {return, RetCatch} -> RetCatch end.

union_set(Ds_3, X_3, Y) ->
    try
        Fx = find_set(Ds_3, X_3),
        Ds1 = maps:get("ds", Fx, nil),
        X_root = maps:get("root", Fx, nil),
        Fy = find_set(Ds1, Y),
        Ds2 = maps:get("ds", Fy, nil),
        Y_root = maps:get("root", Fy, nil),
        case (X_root == Y_root) of
        true -> throw({return, Ds2});
        _ -> ok
    end,
        P_5 = maps:get("parent", Ds2, nil),
        R_3 = maps:get("rank", Ds2, nil),
        R_6 = (case ((case erlang:is_map(R_3) of true -> maps:get(X_root, R_3, nil); _ -> case X_root < 0 of true -> mochi_nth(erlang:length(R_3) + X_root + 1, R_3); _ -> mochi_nth(X_root + 1, R_3) end end) > (case erlang:is_map(R_3) of true -> maps:get(Y_root, R_3, nil); _ -> case Y_root < 0 of true -> mochi_nth(erlang:length(R_3) + Y_root + 1, R_3); _ -> mochi_nth(Y_root + 1, R_3) end end)) of
        true -> P_6 = lists:sublist(P_5, Y_root) ++ [X_root] ++ lists:nthtail(Y_root + 1, P_5),
            P_8 = P_6,
            R_3;
        _ -> P_7 = lists:sublist(P_5, X_root) ++ [Y_root] ++ lists:nthtail(X_root + 1, P_5),
            R_5 = (case ((case erlang:is_map(R_3) of true -> maps:get(X_root, R_3, nil); _ -> case X_root < 0 of true -> mochi_nth(erlang:length(R_3) + X_root + 1, R_3); _ -> mochi_nth(X_root + 1, R_3) end end) == (case erlang:is_map(R_3) of true -> maps:get(Y_root, R_3, nil); _ -> case Y_root < 0 of true -> mochi_nth(erlang:length(R_3) + Y_root + 1, R_3); _ -> mochi_nth(Y_root + 1, R_3) end end)) of
        true -> R_4 = lists:sublist(R_3, Y_root) ++ [((case erlang:is_map(R_3) of true -> maps:get(Y_root, R_3, nil); _ -> case Y_root < 0 of true -> mochi_nth(erlang:length(R_3) + Y_root + 1, R_3); _ -> mochi_nth(Y_root + 1, R_3) end end) + 1)] ++ lists:nthtail(Y_root + 1, R_3),
            R_4;
        _ -> R_3
    end),
            P_8 = P_7,
            R_5
    end),
        #{"parent" => P_8, "rank" => R_6}
    catch {return, RetCatch} -> RetCatch end.

same_python_set(A, B) ->
    try
        case ((A < 3) andalso (B < 3)) of
        true -> throw({return, true});
        _ -> ok
    end,
        case ((((A >= 3) andalso (A < 6)) andalso (B >= 3)) andalso (B < 6)) of
        true -> throw({return, true});
        _ -> ok
    end,
        false
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ds', #{"parent" => [], "rank" => []}),
    erlang:put('i', 0),
    Fun = fun Fun_loop() ->
    case (erlang:get('i') < 6) of
        true ->
            Ds_tmp = maps:put("parent", lists:append((case maps:get("parent", erlang:get('ds'), nil) of nil -> []; _ -> maps:get("parent", erlang:get('ds'), nil) end), [0]), erlang:get('ds')),
            erlang:put('ds', Ds_tmp),
            Ds_tmp_2 = maps:put("rank", lists:append((case maps:get("rank", erlang:get('ds'), nil) of nil -> []; _ -> maps:get("rank", erlang:get('ds'), nil) end), [0]), erlang:get('ds')),
            erlang:put('ds', Ds_tmp_2),
            erlang:put('ds', make_set(erlang:get('ds'), erlang:get('i'))),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_loop();
        _ -> {}
    end
end,
{} = Fun(),
    erlang:put('ds', union_set(erlang:get('ds'), 0, 1)),
    erlang:put('ds', union_set(erlang:get('ds'), 1, 2)),
    erlang:put('ds', union_set(erlang:get('ds'), 3, 4)),
    erlang:put('ds', union_set(erlang:get('ds'), 3, 5)),
    erlang:put('i', 0),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('i') < 6) of
        true ->
            J = 0,
            Fun_2 = fun Fun_2_loop(J) ->
    case (J < 6) of
        true ->
            Res_i = find_set(erlang:get('ds'), erlang:get('i')),
            erlang:put('ds', maps:get("ds", Res_i, nil)),
            Root_i = maps:get("root", Res_i, nil),
            Res_j = find_set(erlang:get('ds'), J),
            erlang:put('ds', maps:get("ds", Res_j, nil)),
            Root_j = maps:get("root", Res_j, nil),
            Same = same_python_set(erlang:get('i'), J),
            Root_same = (Root_i == Root_j),
            case Same of
        true -> case mochi_not(Root_same) of
        true -> erlang:error({panic, "nodes should be in same set"});
        _ -> ok
    end;
        _ -> case Root_same of
        true -> erlang:error({panic, "nodes should be in different sets"});
        _ -> ok
    end
    end,
            J_2 = (J + 1),
            Fun_2_loop(J_2);
        _ -> {J}
    end
end,
{J_2} = Fun_2(J),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    erlang:put('i', 0),
    Fun_4 = fun Fun_4_loop() ->
    case (erlang:get('i') < 6) of
        true ->
            Res_2 = find_set(erlang:get('ds'), erlang:get('i')),
            erlang:put('ds', maps:get("ds", Res_2, nil)),
            io:format("~s~n", [mochi_str(maps:get("root", Res_2, nil))]),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_4_loop();
        _ -> {}
    end
end,
{} = Fun_4(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
