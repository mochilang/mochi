#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, max_list/1, disjoint_set_new/1, get_parent/2, merge/3]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).

max_list(Xs) ->
    try
        M = (case erlang:is_map(Xs) of true -> maps:get(0, Xs, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Xs) + 0 + 1, Xs); _ -> mochi_nth(0 + 1, Xs) end end),
        I = 1,
        Fun = fun Fun_loop(I, M, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            M_3 = (case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) > M) of
        true -> M_2 = (case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end),
            M_2;
        _ -> M
    end),
            I_2 = (I + 1),
            Fun_loop(I_2, M_3, Xs);
        _ -> {I, M, Xs}
    end
end,
{I_2, M_3, Xs} = Fun(I, M, Xs),
        M_3
    catch {return, RetCatch} -> RetCatch end.

disjoint_set_new(Set_counts) ->
    try
        Max_set = max_list(Set_counts),
        Num_sets = erlang:length(Set_counts),
        Ranks = [],
        Parents = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Max_set, Num_sets, Parents, Ranks, Set_counts) ->
    case (I_3 < Num_sets) of
        true ->
            Ranks_2 = lists:append((case Ranks of nil -> []; _ -> Ranks end), [1]),
            Parents_2 = lists:append((case Parents of nil -> []; _ -> Parents end), [I_3]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Max_set, Num_sets, Parents_2, Ranks_2, Set_counts);
        _ -> {I_3, Max_set, Num_sets, Parents, Ranks, Set_counts}
    end
end,
{I_4, Max_set, Num_sets, Parents_2, Ranks_2, Set_counts} = Fun_2(I_3, Max_set, Num_sets, Parents, Ranks, Set_counts),
        #{"set_counts" => Set_counts, "max_set" => Max_set, "ranks" => Ranks_2, "parents" => Parents_2}
    catch {return, RetCatch} -> RetCatch end.

get_parent(Ds, Idx) ->
    try
        case ((case erlang:is_map(maps:get("parents", Ds, nil)) of true -> maps:get(Idx, maps:get("parents", Ds, nil), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(maps:get("parents", Ds, nil)) + Idx + 1, maps:get("parents", Ds, nil)); _ -> mochi_nth(Idx + 1, maps:get("parents", Ds, nil)) end end) == Idx) of
        true -> throw({return, Idx});
        _ -> ok
    end,
        Parents_3 = maps:get("parents", Ds, nil),
        Parents_4 = lists:sublist(Parents_3, Idx) ++ [get_parent(Ds, (case erlang:is_map(Parents_3) of true -> maps:get(Idx, Parents_3, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Parents_3) + Idx + 1, Parents_3); _ -> mochi_nth(Idx + 1, Parents_3) end end))] ++ lists:nthtail(Idx + 1, Parents_3),
        Ds_2 = maps:put("parents", Parents_4, Ds),
        (case erlang:is_map(maps:get("parents", Ds_2, nil)) of true -> maps:get(Idx, maps:get("parents", Ds_2, nil), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(maps:get("parents", Ds_2, nil)) + Idx + 1, maps:get("parents", Ds_2, nil)); _ -> mochi_nth(Idx + 1, maps:get("parents", Ds_2, nil)) end end)
    catch {return, RetCatch} -> RetCatch end.

merge(Ds_3, Src, Dst) ->
    try
        Src_parent = get_parent(Ds_3, Src),
        Dst_parent = get_parent(Ds_3, Dst),
        case (Src_parent == Dst_parent) of
        true -> throw({return, false});
        _ -> ok
    end,
        Ranks_6 = (case ((case erlang:is_map(maps:get("ranks", Ds_3, nil)) of true -> maps:get(Dst_parent, maps:get("ranks", Ds_3, nil), nil); _ -> case Dst_parent < 0 of true -> mochi_nth(erlang:length(maps:get("ranks", Ds_3, nil)) + Dst_parent + 1, maps:get("ranks", Ds_3, nil)); _ -> mochi_nth(Dst_parent + 1, maps:get("ranks", Ds_3, nil)) end end) >= (case erlang:is_map(maps:get("ranks", Ds_3, nil)) of true -> maps:get(Src_parent, maps:get("ranks", Ds_3, nil), nil); _ -> case Src_parent < 0 of true -> mochi_nth(erlang:length(maps:get("ranks", Ds_3, nil)) + Src_parent + 1, maps:get("ranks", Ds_3, nil)); _ -> mochi_nth(Src_parent + 1, maps:get("ranks", Ds_3, nil)) end end)) of
        true -> Counts = maps:get("set_counts", Ds_3, nil),
            Counts_2 = lists:sublist(Counts, Dst_parent) ++ [((case erlang:is_map(Counts) of true -> maps:get(Dst_parent, Counts, nil); _ -> case Dst_parent < 0 of true -> mochi_nth(erlang:length(Counts) + Dst_parent + 1, Counts); _ -> mochi_nth(Dst_parent + 1, Counts) end end) + (case erlang:is_map(Counts) of true -> maps:get(Src_parent, Counts, nil); _ -> case Src_parent < 0 of true -> mochi_nth(erlang:length(Counts) + Src_parent + 1, Counts); _ -> mochi_nth(Src_parent + 1, Counts) end end))] ++ lists:nthtail(Dst_parent + 1, Counts),
            Counts_3 = lists:sublist(Counts_2, Src_parent) ++ [0] ++ lists:nthtail(Src_parent + 1, Counts_2),
            Ds_4 = maps:put("set_counts", Counts_3, Ds_3),
            Parents_5 = maps:get("parents", Ds_4, nil),
            Parents_6 = lists:sublist(Parents_5, Src_parent) ++ [Dst_parent] ++ lists:nthtail(Src_parent + 1, Parents_5),
            Ds_5 = maps:put("parents", Parents_6, Ds_4),
            Ranks_5 = (case ((case erlang:is_map(maps:get("ranks", Ds_5, nil)) of true -> maps:get(Dst_parent, maps:get("ranks", Ds_5, nil), nil); _ -> case Dst_parent < 0 of true -> mochi_nth(erlang:length(maps:get("ranks", Ds_5, nil)) + Dst_parent + 1, maps:get("ranks", Ds_5, nil)); _ -> mochi_nth(Dst_parent + 1, maps:get("ranks", Ds_5, nil)) end end) == (case erlang:is_map(maps:get("ranks", Ds_5, nil)) of true -> maps:get(Src_parent, maps:get("ranks", Ds_5, nil), nil); _ -> case Src_parent < 0 of true -> mochi_nth(erlang:length(maps:get("ranks", Ds_5, nil)) + Src_parent + 1, maps:get("ranks", Ds_5, nil)); _ -> mochi_nth(Src_parent + 1, maps:get("ranks", Ds_5, nil)) end end)) of
        true -> Ranks_3 = maps:get("ranks", Ds_5, nil),
            Ranks_4 = lists:sublist(Ranks_3, Dst_parent) ++ [((case erlang:is_map(Ranks_3) of true -> maps:get(Dst_parent, Ranks_3, nil); _ -> case Dst_parent < 0 of true -> mochi_nth(erlang:length(Ranks_3) + Dst_parent + 1, Ranks_3); _ -> mochi_nth(Dst_parent + 1, Ranks_3) end end) + 1)] ++ lists:nthtail(Dst_parent + 1, Ranks_3),
            Ds_6 = maps:put("ranks", Ranks_4, Ds_5),
            Ds_7 = Ds_6,
            Ranks_4;
        _ -> Ds_7 = Ds_5,
            nil
    end),
            Joined = (case erlang:is_map(maps:get("set_counts", Ds_7, nil)) of true -> maps:get(Dst_parent, maps:get("set_counts", Ds_7, nil), nil); _ -> case Dst_parent < 0 of true -> mochi_nth(erlang:length(maps:get("set_counts", Ds_7, nil)) + Dst_parent + 1, maps:get("set_counts", Ds_7, nil)); _ -> mochi_nth(Dst_parent + 1, maps:get("set_counts", Ds_7, nil)) end end),
            Ds_9 = (case (Joined > maps:get("max_set", Ds_7, nil)) of
        true -> Ds_8 = maps:put("max_set", Joined, Ds_7),
            Ds_8;
        _ -> Ds_7
    end),
            Counts_7 = Counts_3,
            Ds_14 = Ds_9,
            Joined_3 = Joined,
            Parents_9 = Parents_6,
            Ranks_5;
        _ -> Counts_4 = maps:get("set_counts", Ds_3, nil),
            Counts_5 = lists:sublist(Counts_4, Src_parent) ++ [((case erlang:is_map(Counts_4) of true -> maps:get(Src_parent, Counts_4, nil); _ -> case Src_parent < 0 of true -> mochi_nth(erlang:length(Counts_4) + Src_parent + 1, Counts_4); _ -> mochi_nth(Src_parent + 1, Counts_4) end end) + (case erlang:is_map(Counts_4) of true -> maps:get(Dst_parent, Counts_4, nil); _ -> case Dst_parent < 0 of true -> mochi_nth(erlang:length(Counts_4) + Dst_parent + 1, Counts_4); _ -> mochi_nth(Dst_parent + 1, Counts_4) end end))] ++ lists:nthtail(Src_parent + 1, Counts_4),
            Counts_6 = lists:sublist(Counts_5, Dst_parent) ++ [0] ++ lists:nthtail(Dst_parent + 1, Counts_5),
            Ds_10 = maps:put("set_counts", Counts_6, Ds_3),
            Parents_7 = maps:get("parents", Ds_10, nil),
            Parents_8 = lists:sublist(Parents_7, Dst_parent) ++ [Src_parent] ++ lists:nthtail(Dst_parent + 1, Parents_7),
            Ds_11 = maps:put("parents", Parents_8, Ds_10),
            Joined_2 = (case erlang:is_map(maps:get("set_counts", Ds_11, nil)) of true -> maps:get(Src_parent, maps:get("set_counts", Ds_11, nil), nil); _ -> case Src_parent < 0 of true -> mochi_nth(erlang:length(maps:get("set_counts", Ds_11, nil)) + Src_parent + 1, maps:get("set_counts", Ds_11, nil)); _ -> mochi_nth(Src_parent + 1, maps:get("set_counts", Ds_11, nil)) end end),
            Ds_13 = (case (Joined_2 > maps:get("max_set", Ds_11, nil)) of
        true -> Ds_12 = maps:put("max_set", Joined_2, Ds_11),
            Ds_12;
        _ -> Ds_11
    end),
            Counts_7 = Counts_6,
            Ds_14 = Ds_13,
            Joined_3 = Joined_2,
            Parents_9 = Parents_8,
            nil
    end),
        true
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ds', disjoint_set_new([1, 1, 1])),
    io:format("~s~n", [mochi_format(merge(erlang:get('ds'), 1, 2))]),
    io:format("~s~n", [mochi_format(merge(erlang:get('ds'), 0, 2))]),
    io:format("~s~n", [mochi_format(merge(erlang:get('ds'), 0, 1))]),
    io:format("~s~n", [mochi_format(get_parent(erlang:get('ds'), 0))]),
    io:format("~s~n", [mochi_format(get_parent(erlang:get('ds'), 1))]),
    io:format("~s~n", [mochi_format(maps:get("max_set", erlang:get('ds'), nil))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
