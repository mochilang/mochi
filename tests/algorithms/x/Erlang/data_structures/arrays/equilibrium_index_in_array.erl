#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, equilibrium_index/1]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

equilibrium_index(Arr) ->
    try
        Total = 0,
        I = 0,
        Fun = fun Fun_loop(Arr, I, Total) ->
    case (I < length(Arr)) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> lists:nth(I + 1, Arr) end)),
            I_2 = (I + 1),
            Fun_loop(Arr, I_2, Total_2);
        _ -> {Arr, I, Total}
    end
end,
{Arr, I_2, Total_2} = Fun(Arr, I, Total),
        Left = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Arr, I_3, Left, Total_2) ->
    case (I_3 < length(Arr)) of
        true ->
            Total_3 = (Total_2 - (case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> lists:nth(I_3 + 1, Arr) end)),
            case (Left == Total_3) of
        true -> throw({return, I_3});
        _ -> ok
    end,
            Left_2 = (Left + (case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> lists:nth(I_3 + 1, Arr) end)),
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr, I_4, Left_2, Total_3);
        _ -> {Arr, I_3, Left, Total_2}
    end
end,
{Arr, I_4, Left_2, Total_3} = Fun_2(Arr, I_3, Left, Total_2),
        -1
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('arr1', [-7, 1, 5, 2, -4, 3, 0]),
    io:format("~ts~n", [mochi_repr(equilibrium_index(erlang:get('arr1')))]),
    erlang:put('arr2', [1, 2, 3, 4, 5]),
    io:format("~ts~n", [mochi_repr(equilibrium_index(erlang:get('arr2')))]),
    erlang:put('arr3', [1, 1, 1, 1, 1]),
    io:format("~ts~n", [mochi_repr(equilibrium_index(erlang:get('arr3')))]),
    erlang:put('arr4', [2, 4, 6, 8, 10, 3]),
    io:format("~ts~n", [mochi_repr(equilibrium_index(erlang:get('arr4')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
