#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, tail/1, rotate_left/1, permute_recursive/1, swap/3, permute_backtrack_helper/3, permute_backtrack/1]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

tail(Xs) ->
    try
        Res = [],
        I = 1,
        Fun = fun Fun_loop(I, Res, Xs) ->
    case (I < length(Xs)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> lists:nth(I + 1, Xs) end)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Res_2, Xs);
        _ -> {I, Res, Xs}
    end
end,
{I_2, Res_2, Xs} = Fun(I, Res, Xs),
        Res_2
    catch {return, Ret} -> Ret end.

rotate_left(Xs_2) ->
    try
        case (length(Xs_2) == 0) of
        true -> throw({return, Xs_2});
        _ -> ok
    end,
        Res_3 = [],
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(I_3, Res_3, Xs_2) ->
    case (I_3 < length(Xs_2)) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [(case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> lists:nth(I_3 + 1, Xs_2) end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Res_4, Xs_2);
        _ -> {I_3, Res_3, Xs_2}
    end
end,
{I_4, Res_4, Xs_2} = Fun_2(I_3, Res_3, Xs_2),
        Res_5 = lists:append((case Res_4 of nil -> []; _ -> Res_4 end), [(case erlang:is_map(Xs_2) of true -> maps:get(0, Xs_2, nil); _ -> lists:nth(0 + 1, Xs_2) end)]),
        Res_5
    catch {return, Ret} -> Ret end.

permute_recursive(Nums) ->
    try
        case (length(Nums) == 0) of
        true -> Base = [],
            throw({return, lists:append((case Base of nil -> []; _ -> Base end), [[]])}),
            Base_2 = Base;
        _ -> Base_2 = nil
    end,
        Result = [],
        Current = Nums,
        Count = 0,
        Fun_4 = fun Fun_4_loop(Base_2, Count, Current, Nums, Result) ->
    case (Count < length(Nums)) of
        true ->
            N = (case erlang:is_map(Current) of true -> maps:get(0, Current, nil); _ -> lists:nth(0 + 1, Current) end),
            Rest = tail(Current),
            Perms = permute_recursive(Rest),
            J = 0,
            Fun_3 = fun Fun_3_loop(Base_2, Count, Current, J, N, Nums, Perms, Rest, Result) ->
    case (J < length(Perms)) of
        true ->
            Perm = lists:append((case (case erlang:is_map(Perms) of true -> maps:get(J, Perms, nil); _ -> lists:nth(J + 1, Perms) end) of nil -> []; _ -> (case erlang:is_map(Perms) of true -> maps:get(J, Perms, nil); _ -> lists:nth(J + 1, Perms) end) end), [N]),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Perm]),
            J_2 = (J + 1),
            Fun_3_loop(Base_2, Count, Current, J_2, N, Nums, Perms, Rest, Result_2);
        _ -> {Base_2, Count, Current, J, N, Nums, Perms, Rest, Result}
    end
end,
{Base_2, Count, Current, J_2, N, Nums, Perms, Rest, Result_2} = Fun_3(Base_2, Count, Current, J, N, Nums, Perms, Rest, Result),
            Current_2 = rotate_left(Current),
            Count_2 = (Count + 1),
            Fun_4_loop(Base_2, Count_2, Current_2, Nums, Result_2);
        _ -> {Base_2, Count, Current, Nums, Result}
    end
end,
{Base_2, Count_2, Current_2, Nums, Result_2} = Fun_4(Base_2, Count, Current, Nums, Result),
        Result_2
    catch {return, Ret} -> Ret end.

swap(Xs_3, I_5, J_3) ->
    try
        Res_6 = [],
        K = 0,
        Fun_5 = fun Fun_5_loop(I_5, J_3, K, Res_6, Xs_3) ->
    case (K < length(Xs_3)) of
        true ->
            case (K == I_5) of
        true -> Res_7 = lists:append((case Res_6 of nil -> []; _ -> Res_6 end), [(case erlang:is_map(Xs_3) of true -> maps:get(J_3, Xs_3, nil); _ -> lists:nth(J_3 + 1, Xs_3) end)]),
            Res_11 = Res_7;
        _ -> case (K == J_3) of
        true -> Res_8 = lists:append((case Res_6 of nil -> []; _ -> Res_6 end), [(case erlang:is_map(Xs_3) of true -> maps:get(I_5, Xs_3, nil); _ -> lists:nth(I_5 + 1, Xs_3) end)]),
            Res_10 = Res_8;
        _ -> Res_9 = lists:append((case Res_6 of nil -> []; _ -> Res_6 end), [(case erlang:is_map(Xs_3) of true -> maps:get(K, Xs_3, nil); _ -> lists:nth(K + 1, Xs_3) end)]),
            Res_10 = Res_9
    end,
            Res_11 = Res_10
    end,
            K_2 = (K + 1),
            Fun_5_loop(I_5, J_3, K_2, Res_11, Xs_3);
        _ -> {I_5, J_3, K, Res_6, Xs_3}
    end
end,
{I_5, J_3, K_2, Res_11, Xs_3} = Fun_5(I_5, J_3, K, Res_6, Xs_3),
        Res_11
    catch {return, Ret} -> Ret end.

permute_backtrack_helper(Nums_2, Start, Output) ->
    try
        case (Start == (length(Nums_2) - 1)) of
        true -> throw({return, lists:append((case Output of nil -> []; _ -> Output end), [Nums_2])});
        _ -> ok
    end,
        I_6 = Start,
        Res_12 = Output,
        Fun_6 = fun Fun_6_loop(I_6, Nums_2, Output, Res_12, Start) ->
    case (I_6 < length(Nums_2)) of
        true ->
            Swapped = swap(Nums_2, Start, I_6),
            Res_13 = permute_backtrack_helper(Swapped, (Start + 1), Res_12),
            I_7 = (I_6 + 1),
            Fun_6_loop(I_7, Nums_2, Output, Res_13, Start);
        _ -> {I_6, Nums_2, Output, Res_12, Start}
    end
end,
{I_7, Nums_2, Output, Res_13, Start} = Fun_6(I_6, Nums_2, Output, Res_12, Start),
        Res_13
    catch {return, Ret} -> Ret end.

permute_backtrack(Nums_3) ->
    try
        Output_2 = [],
        permute_backtrack_helper(Nums_3, 0, Output_2)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(permute_recursive([1, 2, 3]))]),
    io:format("~ts~n", [mochi_str(permute_backtrack([1, 2, 3]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
