#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_prefix_sum/1, get_sum/3, contains_sum/2]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_prefix_sum(Arr) ->
    try
        Prefix = [],
        Running = 0,
        I = 0,
        Fun = fun Fun_loop(Arr, I, Prefix, Running) ->
    case (I < length(Arr)) of
        true ->
            Running_2 = (Running + (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> lists:nth(I + 1, Arr) end)),
            Prefix_2 = lists:append((case Prefix of nil -> []; _ -> Prefix end), [Running_2]),
            I_2 = (I + 1),
            Fun_loop(Arr, I_2, Prefix_2, Running_2);
        _ -> {Arr, I, Prefix, Running}
    end
end,
{Arr, I_2, Prefix_2, Running_2} = Fun(Arr, I, Prefix, Running),
        #{"prefix_sum" => Prefix_2}
    catch {return, Ret} -> Ret end.

get_sum(Ps, Start, End) ->
    try
        Prefix_3 = maps:get("prefix_sum", Ps, nil),
        case (length(Prefix_3) == 0) of
        true -> erlang:error("The array is empty.");
        _ -> ok
    end,
        case (((Start < 0) orelse (End >= length(Prefix_3))) orelse (Start > End)) of
        true -> erlang:error("Invalid range specified.");
        _ -> ok
    end,
        case (Start == 0) of
        true -> throw({return, (case erlang:is_map(Prefix_3) of true -> maps:get(End, Prefix_3, nil); _ -> lists:nth(End + 1, Prefix_3) end)});
        _ -> ok
    end,
        ((case erlang:is_map(Prefix_3) of true -> maps:get(End, Prefix_3, nil); _ -> lists:nth(End + 1, Prefix_3) end) - (case erlang:is_map(Prefix_3) of true -> maps:get((Start - 1), Prefix_3, nil); _ -> lists:nth((Start - 1) + 1, Prefix_3) end))
    catch {return, Ret} -> Ret end.

contains_sum(Ps_2, Target_sum) ->
    try
        Prefix_4 = maps:get("prefix_sum", Ps_2, nil),
        Sums = [0],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, Prefix_4, Ps_2, Sums, Target_sum) ->
    case (I_3 < length(Prefix_4)) of
        true ->
            Sum_item = (case erlang:is_map(Prefix_4) of true -> maps:get(I_3, Prefix_4, nil); _ -> lists:nth(I_3 + 1, Prefix_4) end),
            J = 0,
            Fun_2 = fun Fun_2_loop(I_3, J, Prefix_4, Ps_2, Sum_item, Sums, Target_sum) ->
    case (J < length(Sums)) of
        true ->
            case ((case erlang:is_map(Sums) of true -> maps:get(J, Sums, nil); _ -> lists:nth(J + 1, Sums) end) == (Sum_item - Target_sum)) of
        true -> throw({return, true});
        _ -> ok
    end,
            J_2 = (J + 1),
            Fun_2_loop(I_3, J_2, Prefix_4, Ps_2, Sum_item, Sums, Target_sum);
        _ -> {I_3, J, Prefix_4, Ps_2, Sum_item, Sums, Target_sum}
    end
end,
{I_3, J_2, Prefix_4, Ps_2, Sum_item, Sums, Target_sum} = Fun_2(I_3, J, Prefix_4, Ps_2, Sum_item, Sums, Target_sum),
            Sums_2 = lists:append((case Sums of nil -> []; _ -> Sums end), [Sum_item]),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Prefix_4, Ps_2, Sums_2, Target_sum);
        _ -> {I_3, Prefix_4, Ps_2, Sums, Target_sum}
    end
end,
{I_4, Prefix_4, Ps_2, Sums_2, Target_sum} = Fun_3(I_3, Prefix_4, Ps_2, Sums, Target_sum),
        false
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ps', make_prefix_sum([1, 2, 3])),
    io:format("~ts~n", [mochi_str(get_sum(erlang:get('ps'), 0, 2))]),
    io:format("~ts~n", [mochi_str(get_sum(erlang:get('ps'), 1, 2))]),
    io:format("~ts~n", [mochi_str(get_sum(erlang:get('ps'), 2, 2))]),
    io:format("~ts~n", [mochi_str(contains_sum(erlang:get('ps'), 6))]),
    io:format("~ts~n", [mochi_str(contains_sum(erlang:get('ps'), 5))]),
    io:format("~ts~n", [mochi_str(contains_sum(erlang:get('ps'), 3))]),
    io:format("~ts~n", [mochi_str(contains_sum(erlang:get('ps'), 4))]),
    io:format("~ts~n", [mochi_str(contains_sum(erlang:get('ps'), 7))]),
    erlang:put('ps2', make_prefix_sum([1, -2, 3])),
    io:format("~ts~n", [mochi_str(contains_sum(erlang:get('ps2'), 2))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
