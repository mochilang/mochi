#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pairs_with_sum/2]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

pairs_with_sum(Arr, Req_sum) ->
    try
        N = length(Arr),
        Count = 0,
        I = 0,
        Fun_2 = fun Fun_2_loop(Arr, Count, I, N, Req_sum) ->
    case (I < N) of
        true ->
            J = (I + 1),
            Fun = fun Fun_loop(Arr, Count, I, J, N, Req_sum) ->
    case (J < N) of
        true ->
            case (((case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> lists:nth(I + 1, Arr) end) + (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> lists:nth(J + 1, Arr) end)) == Req_sum) of
        true -> Count_2 = (Count + 1),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            J_2 = (J + 1),
            Fun_loop(Arr, Count_3, I, J_2, N, Req_sum);
        _ -> {Arr, Count, I, J, N, Req_sum}
    end
end,
{Arr, Count_3, I, J_2, N, Req_sum} = Fun(Arr, Count, I, J, N, Req_sum),
            I_2 = (I + 1),
            Fun_2_loop(Arr, Count_3, I_2, N, Req_sum);
        _ -> {Arr, Count, I, N, Req_sum}
    end
end,
{Arr, Count_3, I_2, N, Req_sum} = Fun_2(Arr, Count, I, N, Req_sum),
        Count_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(pairs_with_sum([1, 5, 7, 1], 6))]),
    io:format("~ts~n", [mochi_repr(pairs_with_sum([1, 1, 1, 1, 1, 1, 1, 1], 2))]),
    io:format("~ts~n", [mochi_repr(pairs_with_sum([1, 7, 6, 2, 5, 4, 3, 1, 9, 8], 7))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
