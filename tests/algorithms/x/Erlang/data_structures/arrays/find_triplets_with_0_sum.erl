#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sort_triplet/3, contains_triplet/2, contains_int/2, find_triplets_with_0_sum/1, find_triplets_with_0_sum_hashing/1]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

sort_triplet(A, B, C) ->
    try
        X = A,
        Y = B,
        Z = C,
        case (X > Y) of
        true -> T = X,
            X_2 = Y,
            Y_2 = T,
            T_2 = T,
            X_3 = X_2,
            Y_3 = Y_2;
        _ -> T_2 = nil,
            X_3 = X,
            Y_3 = Y
    end,
        case (Y_3 > Z) of
        true -> T_3 = Y_3,
            Y_4 = Z,
            Z_2 = T_3,
            T_4 = T_3,
            Y_5 = Y_4,
            Z_3 = Z_2;
        _ -> T_4 = T_2,
            Y_5 = Y_3,
            Z_3 = Z
    end,
        case (X_3 > Y_5) of
        true -> T_5 = X_3,
            X_4 = Y_5,
            Y_6 = T_5,
            T_6 = T_5,
            X_5 = X_4,
            Y_7 = Y_6;
        _ -> T_6 = T_4,
            X_5 = X_3,
            Y_7 = Y_5
    end,
        [X_5, Y_7, Z_3]
    catch {return, Ret} -> Ret end.

contains_triplet(Arr, Target) ->
    try
        Fun = fun Fun_loop(List, Arr, Target) ->
    case List of
        [] -> {Arr, Target};
        [I|I_rest] ->
        try
            Item = (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> lists:nth(I + 1, Arr) end),
            Same = true,
            Fun_2 = fun Fun_2_loop(List, Arr, I, Item, Same, Target) ->
    case List of
        [] -> {Arr, I, Item, Same, Target};
        [J|J_rest] ->
        try
            case ((case erlang:is_map(Item) of true -> maps:get(J, Item, nil); _ -> lists:nth(J + 1, Item) end) /= (case erlang:is_map(Target) of true -> maps:get(J, Target, nil); _ -> lists:nth(J + 1, Target) end)) of
        true -> Same_2 = false,
            throw({break, Arr, I, Item, Same_2, Target}),
            Same_3 = Same_2;
        _ -> Same_3 = Same
    end,
            Fun_2_loop(J_rest, Arr, I, Item, Same_3, Target)
        catch
            {continue, C0, C1, C2, C3, C4} -> Fun_2_loop(J_rest, C0, C1, C2, C3, C4);
            {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4};
            break -> {Arr, I, Item, Same, Target}
        end;
        _ -> {Arr, I, Item, Same, Target}
    end
end,
{Arr, I, Item, Same_3, Target} = Fun_2(lists:seq(0, (length(Target)) - 1), Arr, I, Item, Same, Target),
            case Same_3 of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_loop(I_rest, Arr, Target)
        catch
            {continue, C0, C1} -> Fun_loop(I_rest, C0, C1);
            {break, B0, B1} -> {B0, B1};
            break -> {Arr, Target}
        end;
        _ -> {Arr, Target}
    end
end,
{Arr, Target} = Fun(lists:seq(0, (length(Arr)) - 1), Arr, Target),
        false
    catch {return, Ret} -> Ret end.

contains_int(Arr_2, Value) ->
    try
        Fun_3 = fun Fun_3_loop(List, Arr_2, Value) ->
    case List of
        [] -> {Arr_2, Value};
        [I_2|I_2_rest] ->
            case ((case erlang:is_map(Arr_2) of true -> maps:get(I_2, Arr_2, nil); _ -> lists:nth(I_2 + 1, Arr_2) end) == Value) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_3_loop(I_2_rest, Arr_2, Value);
        _ -> {Arr_2, Value}
    end
end,
{Arr_2, Value} = Fun_3(lists:seq(0, (length(Arr_2)) - 1), Arr_2, Value),
        false
    catch {return, Ret} -> Ret end.

find_triplets_with_0_sum(Nums) ->
    try
        N = length(Nums),
        Result = [],
        Fun_4 = fun Fun_4_loop(List, N, Nums, Result) ->
    case List of
        [] -> {N, Nums, Result};
        [I_3|I_3_rest] ->
            Fun_5 = fun Fun_5_loop(List, I_3, N, Nums, Result) ->
    case List of
        [] -> {I_3, N, Nums, Result};
        [J_2|J_2_rest] ->
            Fun_6 = fun Fun_6_loop(List, I_3, J_2, N, Nums, Result) ->
    case List of
        [] -> {I_3, J_2, N, Nums, Result};
        [K|K_rest] ->
            A_2 = (case erlang:is_map(Nums) of true -> maps:get(I_3, Nums, nil); _ -> lists:nth(I_3 + 1, Nums) end),
            B_2 = (case erlang:is_map(Nums) of true -> maps:get(J_2, Nums, nil); _ -> lists:nth(J_2 + 1, Nums) end),
            C_2 = (case erlang:is_map(Nums) of true -> maps:get(K, Nums, nil); _ -> lists:nth(K + 1, Nums) end),
            case (((A_2 + B_2) + C_2) == 0) of
        true -> Trip = sort_triplet(A_2, B_2, C_2),
            case mochi_not(contains_triplet(Result, Trip)) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Trip]),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            Result_4 = Result_3,
            Trip_2 = Trip;
        _ -> Result_4 = Result,
            Trip_2 = nil
    end,
            Fun_6_loop(K_rest, I_3, J_2, N, Nums, Result_4);
        _ -> {I_3, J_2, N, Nums, Result}
    end
end,
{I_3, J_2, N, Nums, Result_4} = Fun_6(lists:seq((J_2 + 1), (N) - 1), I_3, J_2, N, Nums, Result),
            Fun_5_loop(J_2_rest, I_3, N, Nums, Result_4);
        _ -> {I_3, N, Nums, Result}
    end
end,
{I_3, N, Nums, Result_4} = Fun_5(lists:seq((I_3 + 1), (N) - 1), I_3, N, Nums, Result),
            Fun_4_loop(I_3_rest, N, Nums, Result_4);
        _ -> {N, Nums, Result}
    end
end,
{N, Nums, Result_4} = Fun_4(lists:seq(0, (N) - 1), N, Nums, Result),
        Result_4
    catch {return, Ret} -> Ret end.

find_triplets_with_0_sum_hashing(Arr_3) ->
    try
        Target_sum = 0,
        Output = [],
        Fun_7 = fun Fun_7_loop(List, Arr_3, Output, Target_sum) ->
    case List of
        [] -> {Arr_3, Output, Target_sum};
        [I_4|I_4_rest] ->
            Seen = [],
            Current_sum = (0 - (case erlang:is_map(Arr_3) of true -> maps:get(I_4, Arr_3, nil); _ -> lists:nth(I_4 + 1, Arr_3) end)),
            Fun_8 = fun Fun_8_loop(List, Arr_3, Current_sum, I_4, Output, Seen, Target_sum) ->
    case List of
        [] -> {Arr_3, Current_sum, I_4, Output, Seen, Target_sum};
        [J_3|J_3_rest] ->
            Other = (case erlang:is_map(Arr_3) of true -> maps:get(J_3, Arr_3, nil); _ -> lists:nth(J_3 + 1, Arr_3) end),
            Required = (Current_sum - Other),
            case contains_int(Seen, Required) of
        true -> Trip_3 = sort_triplet((case erlang:is_map(Arr_3) of true -> maps:get(I_4, Arr_3, nil); _ -> lists:nth(I_4 + 1, Arr_3) end), Other, Required),
            case mochi_not(contains_triplet(Output, Trip_3)) of
        true -> Output_2 = lists:append((case Output of nil -> []; _ -> Output end), [Trip_3]),
            Output_3 = Output_2;
        _ -> Output_3 = Output
    end,
            Output_4 = Output_3,
            Trip_4 = Trip_3;
        _ -> Output_4 = Output,
            Trip_4 = nil
    end,
            Seen_2 = lists:append((case Seen of nil -> []; _ -> Seen end), [Other]),
            Fun_8_loop(J_3_rest, Arr_3, Current_sum, I_4, Output_4, Seen_2, Target_sum);
        _ -> {Arr_3, Current_sum, I_4, Output, Seen, Target_sum}
    end
end,
{Arr_3, Current_sum, I_4, Output_4, Seen_2, Target_sum} = Fun_8(lists:seq((I_4 + 1), (length(Arr_3)) - 1), Arr_3, Current_sum, I_4, Output, Seen, Target_sum),
            Fun_7_loop(I_4_rest, Arr_3, Output_4, Target_sum);
        _ -> {Arr_3, Output, Target_sum}
    end
end,
{Arr_3, Output_4, Target_sum} = Fun_7(lists:seq(0, (length(Arr_3)) - 1), Arr_3, Output, Target_sum),
        Output_4
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(find_triplets_with_0_sum([-1, 0, 1, 2, -1, -4]))]),
    io:format("~ts~n", [mochi_str(find_triplets_with_0_sum([]))]),
    io:format("~ts~n", [mochi_str(find_triplets_with_0_sum([0, 0, 0]))]),
    io:format("~ts~n", [mochi_str(find_triplets_with_0_sum([1, 2, 3, 0, -1, -2, -3]))]),
    io:format("~ts~n", [mochi_str(find_triplets_with_0_sum_hashing([-1, 0, 1, 2, -1, -4]))]),
    io:format("~ts~n", [mochi_str(find_triplets_with_0_sum_hashing([]))]),
    io:format("~ts~n", [mochi_str(find_triplets_with_0_sum_hashing([0, 0, 0]))]),
    io:format("~ts~n", [mochi_str(find_triplets_with_0_sum_hashing([1, 2, 3, 0, -1, -2, -3]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
