#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, product_sum/2, product_sum_array/1]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_exists(X) ->
    case erlang:is_map(X) of
        true -> maps:size(X) > 0;
        _ -> case erlang:is_list(X) of
            true -> length(X) > 0;
            _ -> case is_binary(X) of
                true -> byte_size(X) > 0;
                _ -> false
            end
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

product_sum(Arr, Depth) ->
    try
        Total = 0,
        I = 0,
        Fun = fun Fun_loop(Arr, Depth, I, Total) ->
    case (I < length(Arr)) of
        true ->
            El = (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> lists:nth(I + 1, Arr) end),
            case mochi_exists(El) of
        true -> Total_2 = (Total + product_sum(El, (Depth + 1))),
            Total_4 = Total_2;
        _ -> Total_3 = (Total + mochi_to_int(El)),
            Total_4 = Total_3
    end,
            I_2 = (I + 1),
            Fun_loop(Arr, Depth, I_2, Total_4);
        _ -> {Arr, Depth, I, Total}
    end
end,
{Arr, Depth, I_2, Total_4} = Fun(Arr, Depth, I, Total),
        (Total_4 * Depth)
    catch {return, Ret} -> Ret end.

product_sum_array(Array) ->
    try
        Res = product_sum(Array, 1),
        Res
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('example', [5, 2, [-7, 1], 3, [6, [-13, 8], 4]]),
    io:format("~ts~n", [mochi_repr(product_sum_array(erlang:get('example')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
