#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, iterator_values/1, index_2d_array_in_1d/2]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

iterator_values(Matrix) ->
    try
        Result = [],
        Fun = fun Fun_loop(List, Matrix, Result) ->
    case List of
        [] -> {Matrix, Result};
        [Row|Row_rest] ->
            Fun_2 = fun Fun_2_loop(List, Matrix, Result, Row) ->
    case List of
        [] -> {Matrix, Result, Row};
        [Value|Value_rest] ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Value]),
            Fun_2_loop(Value_rest, Matrix, Result_2, Row);
        _ -> {Matrix, Result, Row}
    end
end,
{Matrix, Result_2, Row} = Fun_2(Row, Matrix, Result, Row),
            Fun_loop(Row_rest, Matrix, Result_2);
        _ -> {Matrix, Result}
    end
end,
{Matrix, Result_2} = Fun(Matrix, Matrix, Result),
        Result_2
    catch {return, Ret} -> Ret end.

index_2d_array_in_1d(Array, Index) ->
    try
        Rows = length(Array),
        Cols = length((case erlang:is_map(Array) of true -> maps:get(0, Array, nil); _ -> lists:nth(0 + 1, Array) end)),
        case ((Rows == 0) orelse (Cols == 0)) of
        true -> erlang:error("no items in array");
        _ -> ok
    end,
        case ((Index < 0) orelse (Index >= (Rows * Cols))) of
        true -> erlang:error("index out of range");
        _ -> ok
    end,
        (case erlang:is_map((case erlang:is_map(Array) of true -> maps:get(mochi_to_int((Index div Cols)), Array, nil); _ -> lists:nth(mochi_to_int((Index div Cols)) + 1, Array) end)) of true -> maps:get(mochi_mod(Index, Cols), (case erlang:is_map(Array) of true -> maps:get(mochi_to_int((Index div Cols)), Array, nil); _ -> lists:nth(mochi_to_int((Index div Cols)) + 1, Array) end), nil); _ -> lists:nth(mochi_mod(Index, Cols) + 1, (case erlang:is_map(Array) of true -> maps:get(mochi_to_int((Index div Cols)), Array, nil); _ -> lists:nth(mochi_to_int((Index div Cols)) + 1, Array) end)) end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(iterator_values([[5], [-523], [-1], [34], [0]]))]),
    io:format("~ts~n", [mochi_str(iterator_values([[5, -523, -1], [34, 0]]))]),
    io:format("~ts~n", [mochi_str(index_2d_array_in_1d([[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]], 5))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
