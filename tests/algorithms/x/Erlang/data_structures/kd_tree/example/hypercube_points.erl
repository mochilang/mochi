#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rand/0, random/0, hypercube_points/3]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

rand() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        erlang:get('seed')
    catch {return, Ret} -> Ret end.

random() ->
    try
        mochi_safe_div(float(rand()), 2.147483648e+09)
    catch {return, Ret} -> Ret end.

hypercube_points(Num_points, Hypercube_size, Num_dimensions) ->
    try
        Points = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Hypercube_size, I, Num_dimensions, Num_points, Points) ->
    case (I < Num_points) of
        true ->
            Point = [],
            J = 0,
            Fun = fun Fun_loop(Hypercube_size, I, J, Num_dimensions, Num_points, Point, Points) ->
    case (J < Num_dimensions) of
        true ->
            Value = mochi_safe_mul(Hypercube_size, random()),
            Point_2 = lists:append((case Point of nil -> []; _ -> Point end), [Value]),
            J_2 = (J + 1),
            Fun_loop(Hypercube_size, I, J_2, Num_dimensions, Num_points, Point_2, Points);
        _ -> {Hypercube_size, I, J, Num_dimensions, Num_points, Point, Points}
    end
end,
{Hypercube_size, I, J_2, Num_dimensions, Num_points, Point_2, Points} = Fun(Hypercube_size, I, J, Num_dimensions, Num_points, Point, Points),
            Points_2 = lists:append((case Points of nil -> []; _ -> Points end), [Point_2]),
            I_2 = (I + 1),
            Fun_2_loop(Hypercube_size, I_2, Num_dimensions, Num_points, Points_2);
        _ -> {Hypercube_size, I, Num_dimensions, Num_points, Points}
    end
end,
{Hypercube_size, I_2, Num_dimensions, Num_points, Points_2} = Fun_2(Hypercube_size, I, Num_dimensions, Num_points, Points),
        Points_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    erlang:put('pts', hypercube_points(3, 1, 2)),
    io:format("~ts~n", [mochi_repr(erlang:get('pts'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
