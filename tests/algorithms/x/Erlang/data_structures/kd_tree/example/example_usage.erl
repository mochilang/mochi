#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, rand/0, random/0, hypercube_points/3, sort_points/2, sublist/3, shift_nodes/2, build_kdtree/2, square_distance/2, nearest_neighbour_search/3, list_to_string/1, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

rand() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        erlang:get('seed')
    catch {return, RetCatch} -> RetCatch end.

random() ->
    try
        mochi_safe_div(mochi_safe_mul(1.0, rand()), 2147483648.0)
    catch {return, RetCatch} -> RetCatch end.

hypercube_points(Num_points, Cube_size, Num_dimensions) ->
    try
        Pts = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Cube_size, I, Num_dimensions, Num_points, Pts) ->
    case (I < Num_points) of
        true ->
            P = [],
            J = 0,
            Fun = fun Fun_loop(Cube_size, I, J, Num_dimensions, Num_points, P, Pts) ->
    case (J < Num_dimensions) of
        true ->
            P_2 = lists:append((case P of nil -> []; _ -> P end), [mochi_safe_mul(Cube_size, random())]),
            J_2 = (J + 1),
            Fun_loop(Cube_size, I, J_2, Num_dimensions, Num_points, P_2, Pts);
        _ -> {Cube_size, I, J, Num_dimensions, Num_points, P, Pts}
    end
end,
{Cube_size, I, J_2, Num_dimensions, Num_points, P_2, Pts} = Fun(Cube_size, I, J, Num_dimensions, Num_points, P, Pts),
            Pts_2 = lists:append((case Pts of nil -> []; _ -> Pts end), [P_2]),
            I_2 = (I + 1),
            Fun_2_loop(Cube_size, I_2, Num_dimensions, Num_points, Pts_2);
        _ -> {Cube_size, I, Num_dimensions, Num_points, Pts}
    end
end,
{Cube_size, I_2, Num_dimensions, Num_points, Pts_2} = Fun_2(Cube_size, I, Num_dimensions, Num_points, Pts),
        Pts_2
    catch {return, RetCatch} -> RetCatch end.

sort_points(Points, Axis) ->
    try
        N = erlang:length(Points),
        I_3 = 1,
        Fun_4 = fun Fun_4_loop(Axis, I_3, N, Points) ->
    case (I_3 < N) of
        true ->
            Key = (case erlang:is_map(Points) of true -> maps:get(I_3, Points, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Points) + I_3 + 1, Points); _ -> mochi_nth(I_3 + 1, Points) end end),
            J_3 = (I_3 - 1),
            Fun_3 = fun Fun_3_loop(Axis, I_3, J_3, Key, N, Points) ->
    case ((J_3 >= 0) andalso ((case erlang:is_map((case erlang:is_map(Points) of true -> maps:get(J_3, Points, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Points) + J_3 + 1, Points); _ -> mochi_nth(J_3 + 1, Points) end end)) of true -> maps:get(Axis, (case erlang:is_map(Points) of true -> maps:get(J_3, Points, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Points) + J_3 + 1, Points); _ -> mochi_nth(J_3 + 1, Points) end end), nil); _ -> case Axis < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Points) of true -> maps:get(J_3, Points, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Points) + J_3 + 1, Points); _ -> mochi_nth(J_3 + 1, Points) end end)) + Axis + 1, (case erlang:is_map(Points) of true -> maps:get(J_3, Points, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Points) + J_3 + 1, Points); _ -> mochi_nth(J_3 + 1, Points) end end)); _ -> mochi_nth(Axis + 1, (case erlang:is_map(Points) of true -> maps:get(J_3, Points, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Points) + J_3 + 1, Points); _ -> mochi_nth(J_3 + 1, Points) end end)) end end) > (case erlang:is_map(Key) of true -> maps:get(Axis, Key, nil); _ -> case Axis < 0 of true -> mochi_nth(erlang:length(Key) + Axis + 1, Key); _ -> mochi_nth(Axis + 1, Key) end end))) of
        true ->
            Points_2 = lists:sublist(Points, (J_3 + 1)) ++ [(case erlang:is_map(Points) of true -> maps:get(J_3, Points, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Points) + J_3 + 1, Points); _ -> mochi_nth(J_3 + 1, Points) end end)] ++ lists:nthtail((J_3 + 1) + 1, Points),
            J_4 = (J_3 - 1),
            Fun_3_loop(Axis, I_3, J_4, Key, N, Points_2);
        _ -> {Axis, I_3, J_3, Key, N, Points}
    end
end,
{Axis, I_3, J_4, Key, N, Points_2} = Fun_3(Axis, I_3, J_3, Key, N, Points),
            Points_3 = lists:sublist(Points_2, (J_4 + 1)) ++ [Key] ++ lists:nthtail((J_4 + 1) + 1, Points_2),
            I_4 = (I_3 + 1),
            Fun_4_loop(Axis, I_4, N, Points_3);
        _ -> {Axis, I_3, N, Points}
    end
end,
{Axis, I_4, N, Points_3} = Fun_4(Axis, I_3, N, Points),
        Points_3
    catch {return, RetCatch} -> RetCatch end.

sublist(Arr, Start, End) ->
    try
        Res = [],
        I_5 = Start,
        Fun_5 = fun Fun_5_loop(Arr, End, I_5, Res, Start) ->
    case (I_5 < End) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Arr) of true -> maps:get(I_5, Arr, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Arr) + I_5 + 1, Arr); _ -> mochi_nth(I_5 + 1, Arr) end end)]),
            I_6 = (I_5 + 1),
            Fun_5_loop(Arr, End, I_6, Res_2, Start);
        _ -> {Arr, End, I_5, Res, Start}
    end
end,
{Arr, End, I_6, Res_2, Start} = Fun_5(Arr, End, I_5, Res, Start),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

shift_nodes(Nodes, Offset) ->
    try
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(I_7, Nodes, Offset) ->
    case (I_7 < erlang:length(Nodes)) of
        true ->
            Nodes_3 = (case (maps:get("left", (case erlang:is_map(Nodes) of true -> maps:get(I_7, Nodes, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Nodes) + I_7 + 1, Nodes); _ -> mochi_nth(I_7 + 1, Nodes) end end), nil) /= (0 - 1)) of
        true -> Nodes_2 = lists:sublist(Nodes, I_7) ++ [maps:put("left", (maps:get("left", (case erlang:is_map(Nodes) of true -> maps:get(I_7, Nodes, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Nodes) + I_7 + 1, Nodes); _ -> mochi_nth(I_7 + 1, Nodes) end end), nil) + Offset), lists:nth(I_7 + 1, Nodes) )] ++ lists:nthtail(I_7 + 1, Nodes),
            Nodes_2;
        _ -> Nodes
    end),
            Nodes_5 = (case (maps:get("right", (case erlang:is_map(Nodes_3) of true -> maps:get(I_7, Nodes_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Nodes_3) + I_7 + 1, Nodes_3); _ -> mochi_nth(I_7 + 1, Nodes_3) end end), nil) /= (0 - 1)) of
        true -> Nodes_4 = lists:sublist(Nodes_3, I_7) ++ [maps:put("right", (maps:get("right", (case erlang:is_map(Nodes_3) of true -> maps:get(I_7, Nodes_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Nodes_3) + I_7 + 1, Nodes_3); _ -> mochi_nth(I_7 + 1, Nodes_3) end end), nil) + Offset), lists:nth(I_7 + 1, Nodes_3) )] ++ lists:nthtail(I_7 + 1, Nodes_3),
            Nodes_4;
        _ -> Nodes_3
    end),
            I_8 = (I_7 + 1),
            Fun_6_loop(I_8, Nodes_5, Offset);
        _ -> {I_7, Nodes, Offset}
    end
end,
{I_8, Nodes_5, Offset} = Fun_6(I_7, Nodes, Offset),
        Nodes_5
    catch {return, RetCatch} -> RetCatch end.

build_kdtree(Points_4, Depth) ->
    try
        case (erlang:length(Points_4) == 0) of
        true -> throw({return, #{"index" => (0 - 1), "nodes" => []}});
        _ -> ok
    end,
        K = erlang:length((case erlang:is_map(Points_4) of true -> maps:get(0, Points_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Points_4) + 0 + 1, Points_4); _ -> mochi_nth(0 + 1, Points_4) end end)),
        Axis_2 = mochi_mod(Depth, K),
        Points_5 = sort_points(Points_4, Axis_2),
        Median = mochi_safe_div(erlang:length(Points_5), 2),
        Left_points = sublist(Points_5, 0, Median),
        Right_points = sublist(Points_5, (Median + 1), erlang:length(Points_5)),
        Left_res = build_kdtree(Left_points, (Depth + 1)),
        Right_res = build_kdtree(Right_points, (Depth + 1)),
        Offset_2 = (erlang:length(maps:get("nodes", Left_res, nil)) + 1),
        Shifted_right = shift_nodes(maps:get("nodes", Right_res, nil), Offset_2),
        Nodes_6 = maps:get("nodes", Left_res, nil),
        Left_index = maps:get("index", Left_res, nil),
        Right_index = (case (maps:get("index", Right_res, nil) == (0 - 1)) of
    true -> (0 - 1);
    _ -> (maps:get("index", Right_res, nil) + Offset_2)
end),
        Nodes_7 = lists:append((case Nodes_6 of nil -> []; _ -> Nodes_6 end), [#{"point" => (case erlang:is_map(Points_5) of true -> maps:get(Median, Points_5, nil); _ -> case Median < 0 of true -> mochi_nth(erlang:length(Points_5) + Median + 1, Points_5); _ -> mochi_nth(Median + 1, Points_5) end end), "left" => Left_index, "right" => Right_index}]),
        Nodes_8 = lists:append(Nodes_7, Shifted_right),
        Root_index = erlang:length(maps:get("nodes", Left_res, nil)),
        #{"index" => Root_index, "nodes" => Nodes_8}
    catch {return, RetCatch} -> RetCatch end.

square_distance(A, B) ->
    try
        Sum = 0.0,
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(A, B, I_9, Sum) ->
    case (I_9 < erlang:length(A)) of
        true ->
            Diff = ((case erlang:is_map(A) of true -> maps:get(I_9, A, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A) + I_9 + 1, A); _ -> mochi_nth(I_9 + 1, A) end end) - (case erlang:is_map(B) of true -> maps:get(I_9, B, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(B) + I_9 + 1, B); _ -> mochi_nth(I_9 + 1, B) end end)),
            Sum_2 = (Sum + mochi_safe_mul(Diff, Diff)),
            I_10 = (I_9 + 1),
            Fun_7_loop(A, B, I_10, Sum_2);
        _ -> {A, B, I_9, Sum}
    end
end,
{A, B, I_10, Sum_2} = Fun_7(A, B, I_9, Sum),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

nearest_neighbour_search(Tree, Root, Query_point) ->
    try
        Nearest_point = [],
        Nearest_dist = 0.0,
        Visited = 0,
        I_11 = 0,
        Fun_8 = fun Fun_8_loop(I_11, Nearest_dist, Nearest_point, Query_point, Root, Tree, Visited) ->
    case (I_11 < erlang:length(Tree)) of
        true ->
            Node = (case erlang:is_map(Tree) of true -> maps:get(I_11, Tree, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Tree) + I_11 + 1, Tree); _ -> mochi_nth(I_11 + 1, Tree) end end),
            Dist = square_distance(Query_point, maps:get("point", Node, nil)),
            Visited_2 = (Visited + 1),
            Nearest_point_3 = (case ((Visited_2 == 1) orelse (Dist < Nearest_dist)) of
        true -> Nearest_point_2 = maps:get("point", Node, nil),
            Nearest_dist_2 = Dist,
            Nearest_dist_3 = Nearest_dist_2,
            Nearest_point_2;
        _ -> Nearest_dist_3 = Nearest_dist,
            Nearest_point
    end),
            I_12 = (I_11 + 1),
            Fun_8_loop(I_12, Nearest_dist_3, Nearest_point_3, Query_point, Root, Tree, Visited_2);
        _ -> {I_11, Nearest_dist, Nearest_point, Query_point, Root, Tree, Visited}
    end
end,
{I_12, Nearest_dist_3, Nearest_point_3, Query_point, Root, Tree, Visited_2} = Fun_8(I_11, Nearest_dist, Nearest_point, Query_point, Root, Tree, Visited),
        #{"point" => Nearest_point_3, "dist" => Nearest_dist_3, "visited" => Visited_2}
    catch {return, RetCatch} -> RetCatch end.

list_to_string(Arr_2) ->
    try
        S = "[",
        I_13 = 0,
        Fun_9 = fun Fun_9_loop(Arr_2, I_13, S) ->
    case (I_13 < erlang:length(Arr_2)) of
        true ->
            S_2 = (S ++ mochi_str((case erlang:is_map(Arr_2) of true -> maps:get(I_13, Arr_2, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Arr_2) + I_13 + 1, Arr_2); _ -> mochi_nth(I_13 + 1, Arr_2) end end))),
            S_4 = (case (I_13 < (erlang:length(Arr_2) - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_3;
        _ -> S_2
    end),
            I_14 = (I_13 + 1),
            Fun_9_loop(Arr_2, I_14, S_4);
        _ -> {Arr_2, I_13, S}
    end
end,
{Arr_2, I_14, S_4} = Fun_9(Arr_2, I_13, S),
        (S_4 ++ "]")
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Num_points_2 = 5000,
        Cube_size_2 = 10.0,
        Num_dimensions_2 = 10,
        Pts_3 = hypercube_points(5000, 10.0, 10),
        Build = build_kdtree(Pts_3, 0),
        Root_2 = maps:get("index", Build, nil),
        Tree_2 = maps:get("nodes", Build, nil),
        Query = [],
        I_15 = 0,
        Fun_10 = fun Fun_10_loop(Build, Cube_size_2, I_15, Num_dimensions_2, Num_points_2, Pts_3, Query, Root_2, Tree_2) ->
    case (I_15 < Num_dimensions_2) of
        true ->
            Query_2 = lists:append((case Query of nil -> []; _ -> Query end), [random()]),
            I_16 = (I_15 + 1),
            Fun_10_loop(Build, Cube_size_2, I_16, Num_dimensions_2, Num_points_2, Pts_3, Query_2, Root_2, Tree_2);
        _ -> {Build, Cube_size_2, I_15, Num_dimensions_2, Num_points_2, Pts_3, Query, Root_2, Tree_2}
    end
end,
{Build, Cube_size_2, I_16, Num_dimensions_2, Num_points_2, Pts_3, Query_2, Root_2, Tree_2} = Fun_10(Build, Cube_size_2, I_15, Num_dimensions_2, Num_points_2, Pts_3, Query, Root_2, Tree_2),
        Res_3 = nearest_neighbour_search(Tree_2, Root_2, Query_2),
        io:format("~s~n", [mochi_format(("Query point: " ++ list_to_string(Query_2)))]),
        io:format("~s~n", [mochi_format(("Nearest point: " ++ list_to_string(maps:get("point", Res_3, nil))))]),
        io:format("~s~n", [mochi_format(("Distance: " ++ mochi_str(maps:get("dist", Res_3, nil))))]),
        io:format("~s~n", [mochi_format(("Nodes visited: " ++ mochi_str(maps:get("visited", Res_3, nil))))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
