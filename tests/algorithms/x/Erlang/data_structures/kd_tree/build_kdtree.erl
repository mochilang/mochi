#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, sort_points/2, build_kdtree/2]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

sort_points(Points, Axis) ->
    try
        Arr = Points,
        I = 0,
        Fun_2 = fun Fun_2_loop(Arr, Axis, I, Points) ->
    case (I < erlang:length(Arr)) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Arr, Axis, I, J, Points) ->
    case (J < (erlang:length(Arr) - 1)) of
        true ->
            Tmp_2 = (case ((case erlang:is_map((case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end)) of true -> maps:get(Axis, (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end), nil); _ -> case Axis < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end)) + Axis + 1, (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end)); _ -> mochi_nth(Axis + 1, (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end)) end end) > (case erlang:is_map((case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> mochi_nth((J + 1) + 1, Arr) end end)) of true -> maps:get(Axis, (case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> mochi_nth((J + 1) + 1, Arr) end end), nil); _ -> case Axis < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> mochi_nth((J + 1) + 1, Arr) end end)) + Axis + 1, (case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> mochi_nth((J + 1) + 1, Arr) end end)); _ -> mochi_nth(Axis + 1, (case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> mochi_nth((J + 1) + 1, Arr) end end)) end end)) of
        true -> Tmp = (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, J) ++ [(case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> mochi_nth((J + 1) + 1, Arr) end end)] ++ lists:nthtail(J + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, (J + 1)) ++ [Tmp] ++ lists:nthtail((J + 1) + 1, Arr_2),
            Arr_4 = Arr_3,
            Tmp;
        _ -> Arr_4 = Arr,
            nil
    end),
            J_2 = (J + 1),
            Fun_loop(Arr_4, Axis, I, J_2, Points);
        _ -> {Arr, Axis, I, J, Points}
    end
end,
{Arr_4, Axis, I, J_2, Points} = Fun(Arr, Axis, I, J, Points),
            I_2 = (I + 1),
            Fun_2_loop(Arr_4, Axis, I_2, Points);
        _ -> {Arr, Axis, I, Points}
    end
end,
{Arr_4, Axis, I_2, Points} = Fun_2(Arr, Axis, I, Points),
        Arr_4
    catch {return, RetCatch} -> RetCatch end.

build_kdtree(Points_2, Depth) ->
    try
        case (erlang:length(Points_2) == 0) of
        true -> throw({return, (0 - 1)});
        _ -> ok
    end,
        K = erlang:length((case erlang:is_map(Points_2) of true -> maps:get(0, Points_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Points_2) + 0 + 1, Points_2); _ -> mochi_nth(0 + 1, Points_2) end end)),
        Axis_2 = mochi_mod(Depth, K),
        Sorted = sort_points(Points_2, Axis_2),
        Median_idx = mochi_safe_div(erlang:length(Sorted), 2),
        Left_points = lists:sublist(Sorted, 0 + 1, (Median_idx - 0)),
        Right_points = lists:sublist(Sorted, (Median_idx + 1) + 1, (erlang:length(Sorted) - (Median_idx + 1))),
        Idx = erlang:length(erlang:get('tree')),
        erlang:put('tree', lists:append((case erlang:get('tree') of nil -> []; _ -> erlang:get('tree') end), [#{"point" => (case erlang:is_map(Sorted) of true -> maps:get(Median_idx, Sorted, nil); _ -> case Median_idx < 0 of true -> mochi_nth(erlang:length(Sorted) + Median_idx + 1, Sorted); _ -> mochi_nth(Median_idx + 1, Sorted) end end), "left" => (0 - 1), "right" => (0 - 1)}])),
        Left_idx = build_kdtree(Left_points, (Depth + 1)),
        Right_idx = build_kdtree(Right_points, (Depth + 1)),
        Node = (case erlang:is_map(erlang:get('tree')) of true -> maps:get(Idx, erlang:get('tree'), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(erlang:get('tree')) + Idx + 1, erlang:get('tree')); _ -> mochi_nth(Idx + 1, erlang:get('tree')) end end),
        Node_2 = maps:put("left", Left_idx, Node),
        Node_3 = maps:put("right", Right_idx, Node_2),
        Tree_tmp = lists:sublist(erlang:get('tree'), Idx) ++ [Node_3] ++ lists:nthtail(Idx + 1, erlang:get('tree')),
        erlang:put('tree', Tree_tmp),
        Idx
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('tree', []),
    erlang:put('pts', [[2.0, 3.0], [5.0, 4.0], [9.0, 6.0], [4.0, 7.0], [8.0, 1.0], [7.0, 2.0]]),
    erlang:put('root', build_kdtree(erlang:get('pts'), 0)),
    io:format("~s~n", [mochi_str(erlang:get('tree'))]),
    io:format("~s~n", [mochi_format(erlang:get('root'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
