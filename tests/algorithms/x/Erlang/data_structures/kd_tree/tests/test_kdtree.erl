#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, rand_float/0, hypercube_points/3, build_kdtree/2, distance_sq/2, nearest_neighbour_search/2, test_build_cases/0, test_search/0, test_edge/0, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

rand_float() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        mochi_safe_div(float(erlang:get('seed')), 2147483648.0)
    catch {return, RetCatch} -> RetCatch end.

hypercube_points(Num_points, Cube_size, Num_dimensions) ->
    try
        Pts = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Cube_size, I, Num_dimensions, Num_points, Pts) ->
    case (I < Num_points) of
        true ->
            P = [],
            J = 0,
            Fun = fun Fun_loop(Cube_size, I, J, Num_dimensions, Num_points, P, Pts) ->
    case (J < Num_dimensions) of
        true ->
            V = mochi_safe_mul(Cube_size, rand_float()),
            P_2 = lists:append((case P of nil -> []; _ -> P end), [V]),
            J_2 = (J + 1),
            Fun_loop(Cube_size, I, J_2, Num_dimensions, Num_points, P_2, Pts);
        _ -> {Cube_size, I, J, Num_dimensions, Num_points, P, Pts}
    end
end,
{Cube_size, I, J_2, Num_dimensions, Num_points, P_2, Pts} = Fun(Cube_size, I, J, Num_dimensions, Num_points, P, Pts),
            Pts_2 = lists:append((case Pts of nil -> []; _ -> Pts end), [P_2]),
            I_2 = (I + 1),
            Fun_2_loop(Cube_size, I_2, Num_dimensions, Num_points, Pts_2);
        _ -> {Cube_size, I, Num_dimensions, Num_points, Pts}
    end
end,
{Cube_size, I_2, Num_dimensions, Num_points, Pts_2} = Fun_2(Cube_size, I, Num_dimensions, Num_points, Pts),
        Pts_2
    catch {return, RetCatch} -> RetCatch end.

build_kdtree(Points, Depth) ->
    try
        Points
    catch {return, RetCatch} -> RetCatch end.

distance_sq(A, B) ->
    try
        Sum = 0.0,
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(A, B, I_3, Sum) ->
    case (I_3 < erlang:length(A)) of
        true ->
            D = ((case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end) - (case erlang:is_map(B) of true -> maps:get(I_3, B, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(B) + I_3 + 1, B); _ -> mochi_nth(I_3 + 1, B) end end)),
            Sum_2 = (Sum + mochi_safe_mul(D, D)),
            I_4 = (I_3 + 1),
            Fun_3_loop(A, B, I_4, Sum_2);
        _ -> {A, B, I_3, Sum}
    end
end,
{A, B, I_4, Sum_2} = Fun_3(A, B, I_3, Sum),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

nearest_neighbour_search(Points_2, Query) ->
    try
        case (erlang:length(Points_2) == 0) of
        true -> throw({return, #{"index" => -1.0, "dist" => 1000000000.0, "visited" => 0.0}});
        _ -> ok
    end,
        Nearest_idx = 0,
        Nearest_dist = 1000000000.0,
        Visited = 0,
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, Nearest_dist, Nearest_idx, Points_2, Query, Visited) ->
    case (I_5 < erlang:length(Points_2)) of
        true ->
            D_2 = distance_sq(Query, (case erlang:is_map(Points_2) of true -> maps:get(I_5, Points_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Points_2) + I_5 + 1, Points_2); _ -> mochi_nth(I_5 + 1, Points_2) end end)),
            Visited_2 = (Visited + 1),
            Nearest_idx_3 = (case (D_2 < Nearest_dist) of
        true -> Nearest_dist_2 = D_2,
            Nearest_idx_2 = I_5,
            Nearest_dist_3 = Nearest_dist_2,
            Nearest_idx_2;
        _ -> Nearest_dist_3 = Nearest_dist,
            Nearest_idx
    end),
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Nearest_dist_3, Nearest_idx_3, Points_2, Query, Visited_2);
        _ -> {I_5, Nearest_dist, Nearest_idx, Points_2, Query, Visited}
    end
end,
{I_6, Nearest_dist_3, Nearest_idx_3, Points_2, Query, Visited_2} = Fun_4(I_5, Nearest_dist, Nearest_idx, Points_2, Query, Visited),
        #{"index" => float(Nearest_idx_3), "dist" => Nearest_dist_3, "visited" => float(Visited_2)}
    catch {return, RetCatch} -> RetCatch end.

test_build_cases() ->
    try
        Empty_pts = [],
        Tree0 = build_kdtree(Empty_pts, 0),
        case (erlang:length(Tree0) == 0) of
        true -> io:format("~s~n", [mochi_format("case1 true")]);
        _ -> io:format("~s~n", [mochi_format("case1 false")])
    end,
        Pts1 = hypercube_points(10, 10.0, 2),
        Tree1 = build_kdtree(Pts1, 2),
        case ((erlang:length(Tree1) > 0) andalso (erlang:length((case erlang:is_map(Tree1) of true -> maps:get(0, Tree1, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Tree1) + 0 + 1, Tree1); _ -> mochi_nth(0 + 1, Tree1) end end)) == 2)) of
        true -> io:format("~s~n", [mochi_format("case2 true")]);
        _ -> io:format("~s~n", [mochi_format("case2 false")])
    end,
        Pts2 = hypercube_points(10, 10.0, 3),
        Tree2 = build_kdtree(Pts2, -2),
        case ((erlang:length(Tree2) > 0) andalso (erlang:length((case erlang:is_map(Tree2) of true -> maps:get(0, Tree2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Tree2) + 0 + 1, Tree2); _ -> mochi_nth(0 + 1, Tree2) end end)) == 3)) of
        true -> io:format("~s~n", [mochi_format("case3 true")]);
        _ -> io:format("~s~n", [mochi_format("case3 false")])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

test_search() ->
    try
        Pts_3 = hypercube_points(10, 10.0, 2),
        Tree = build_kdtree(Pts_3, 0),
        Qp = (case erlang:is_map(hypercube_points(1, 10.0, 2)) of true -> maps:get(0, hypercube_points(1, 10.0, 2), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(hypercube_points(1, 10.0, 2)) + 0 + 1, hypercube_points(1, 10.0, 2)); _ -> mochi_nth(0 + 1, hypercube_points(1, 10.0, 2)) end end),
        Res = nearest_neighbour_search(Tree, Qp),
        case (((maps:get("index", Res, nil) /= -1.0) andalso (maps:get("dist", Res, nil) >= 0.0)) andalso (maps:get("visited", Res, nil) > 0.0)) of
        true -> io:format("~s~n", [mochi_format("search true")]);
        _ -> io:format("~s~n", [mochi_format("search false")])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

test_edge() ->
    try
        Empty_pts_2 = [],
        Tree_2 = build_kdtree(Empty_pts_2, 0),
        Query_2 = [0.0, 0.0],
        Res_2 = nearest_neighbour_search(Tree_2, Query_2),
        case (((maps:get("index", Res_2, nil) == -1.0) andalso (maps:get("dist", Res_2, nil) > 100000000.0)) andalso (maps:get("visited", Res_2, nil) == 0.0)) of
        true -> io:format("~s~n", [mochi_format("edge true")]);
        _ -> io:format("~s~n", [mochi_format("edge false")])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        erlang:put('seed', 1),
        test_build_cases(),
        test_search(),
        test_edge(),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('INF', 1000000000.0),
    erlang:put('seed', 1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
