#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_kd_node/3]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_kd_node(Point, Left, Right) ->
    try
        #{"point" => Point, "left" => Left, "right" => Right}
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('nodes', []),
    erlang:put('nodes', lists:append((case erlang:get('nodes') of nil -> []; _ -> erlang:get('nodes') end), [make_kd_node([2, 3], 1, 2)])),
    erlang:put('nodes', lists:append((case erlang:get('nodes') of nil -> []; _ -> erlang:get('nodes') end), [make_kd_node([1, 5], -1, -1)])),
    erlang:put('nodes', lists:append((case erlang:get('nodes') of nil -> []; _ -> erlang:get('nodes') end), [make_kd_node([4, 2], -1, -1)])),
    erlang:put('root', (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(0, erlang:get('nodes'), nil); _ -> lists:nth(0 + 1, erlang:get('nodes')) end)),
    erlang:put('left_child', (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(1, erlang:get('nodes'), nil); _ -> lists:nth(1 + 1, erlang:get('nodes')) end)),
    erlang:put('right_child', (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(2, erlang:get('nodes'), nil); _ -> lists:nth(2 + 1, erlang:get('nodes')) end)),
    io:format("~ts~n", [mochi_str(maps:get("point", erlang:get('root'), nil))]),
    io:format("~ts~n", [mochi_str(maps:get("left", erlang:get('root'), nil))]),
    io:format("~ts~n", [mochi_str(maps:get("right", erlang:get('root'), nil))]),
    io:format("~ts~n", [mochi_str(maps:get("point", erlang:get('left_child'), nil))]),
    io:format("~ts~n", [mochi_str(maps:get("point", erlang:get('right_child'), nil))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
