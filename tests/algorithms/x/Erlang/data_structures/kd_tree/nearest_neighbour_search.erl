#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, square_distance/2, search/5, nearest_neighbour_search/3]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

square_distance(A, B) ->
    try
        I = 0,
        Total = 0.0,
        Fun = fun Fun_loop(A, B, I, Total) ->
    case (I < erlang:length(A)) of
        true ->
            Diff = ((case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(A) + I + 1, A); _ -> mochi_nth(I + 1, A) end end) - (case erlang:is_map(B) of true -> maps:get(I, B, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(B) + I + 1, B); _ -> mochi_nth(I + 1, B) end end)),
            Total_2 = (Total + mochi_safe_mul(Diff, Diff)),
            I_2 = (I + 1),
            Fun_loop(A, B, I_2, Total_2);
        _ -> {A, B, I, Total}
    end
end,
{A, B, I_2, Total_2} = Fun(A, B, I, Total),
        Total_2
    catch {return, RetCatch} -> RetCatch end.

search(Nodes, Index, Query_point, Depth, Best) ->
    try
        case (Index == -1) of
        true -> throw({return, Best});
        _ -> ok
    end,
        Result = Best,
        Result_2 = maps:put("nodes_visited", (maps:get("nodes_visited", Result, nil) + 1), Result),
        Node = (case erlang:is_map(Nodes) of true -> maps:get(Index, Nodes, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Nodes) + Index + 1, Nodes); _ -> mochi_nth(Index + 1, Nodes) end end),
        Current_point = maps:get("point", Node, nil),
        Current_dist = square_distance(Query_point, Current_point),
        Result_5 = (case ((erlang:length(maps:get("point", Result_2, nil)) == 0) orelse (Current_dist < maps:get("distance", Result_2, nil))) of
        true -> Result_3 = maps:put("point", Current_point, Result_2),
            Result_4 = maps:put("distance", Current_dist, Result_3),
            Result_4;
        _ -> Result_2
    end),
        K = erlang:length(Query_point),
        Axis = mochi_mod(Depth, K),
        Nearer = maps:get("left", Node, nil),
        Further = maps:get("right", Node, nil),
        Nearer_3 = (case ((case erlang:is_map(Query_point) of true -> maps:get(Axis, Query_point, nil); _ -> case Axis < 0 of true -> mochi_nth(erlang:length(Query_point) + Axis + 1, Query_point); _ -> mochi_nth(Axis + 1, Query_point) end end) > (case erlang:is_map(Current_point) of true -> maps:get(Axis, Current_point, nil); _ -> case Axis < 0 of true -> mochi_nth(erlang:length(Current_point) + Axis + 1, Current_point); _ -> mochi_nth(Axis + 1, Current_point) end end)) of
        true -> Nearer_2 = maps:get("right", Node, nil),
            Further_2 = maps:get("left", Node, nil),
            Further_3 = Further_2,
            Nearer_2;
        _ -> Further_3 = Further,
            Nearer
    end),
        Result_6 = search(Nodes, Nearer_3, Query_point, (Depth + 1), Result_5),
        Diff_2 = ((case erlang:is_map(Query_point) of true -> maps:get(Axis, Query_point, nil); _ -> case Axis < 0 of true -> mochi_nth(erlang:length(Query_point) + Axis + 1, Query_point); _ -> mochi_nth(Axis + 1, Query_point) end end) - (case erlang:is_map(Current_point) of true -> maps:get(Axis, Current_point, nil); _ -> case Axis < 0 of true -> mochi_nth(erlang:length(Current_point) + Axis + 1, Current_point); _ -> mochi_nth(Axis + 1, Current_point) end end)),
        Result_8 = (case (mochi_safe_mul(Diff_2, Diff_2) < maps:get("distance", Result_6, nil)) of
        true -> Result_7 = search(Nodes, Further_3, Query_point, (Depth + 1), Result_6),
            Result_7;
        _ -> Result_6
    end),
        Result_8
    catch {return, RetCatch} -> RetCatch end.

nearest_neighbour_search(Nodes_2, Root, Query_point_2) ->
    try
        Initial = #{"point" => [], "distance" => 1000000000000000000000000000000.0, "nodes_visited" => 0},
        search(Nodes_2, Root, Query_point_2, 0, Initial)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('nodes', [#{"point" => [9.0, 1.0], "left" => 1, "right" => 4}, #{"point" => [2.0, 7.0], "left" => 2, "right" => 3}, #{"point" => [3.0, 6.0], "left" => -1, "right" => -1}, #{"point" => [6.0, 12.0], "left" => -1, "right" => -1}, #{"point" => [17.0, 15.0], "left" => 5, "right" => 6}, #{"point" => [13.0, 15.0], "left" => -1, "right" => -1}, #{"point" => [10.0, 19.0], "left" => -1, "right" => -1}]),
    erlang:put('queries', [[9.0, 2.0], [12.0, 15.0], [1.0, 3.0]]),
    erlang:put('q', 0),
    Fun_2 = fun Fun_2_loop() ->
    case (erlang:get('q') < erlang:length(erlang:get('queries'))) of
        true ->
            Res = nearest_neighbour_search(erlang:get('nodes'), 0, (case erlang:is_map(erlang:get('queries')) of true -> maps:get(erlang:get('q'), erlang:get('queries'), nil); _ -> case erlang:get('q') < 0 of true -> mochi_nth(erlang:length(erlang:get('queries')) + erlang:get('q') + 1, erlang:get('queries')); _ -> mochi_nth(erlang:get('q') + 1, erlang:get('queries')) end end)),
            io:format("~s~n", [mochi_format((((((mochi_str(maps:get("point", Res, nil)) ++ " ") ++ mochi_str(maps:get("distance", Res, nil))) ++ " ") ++ mochi_str(maps:get("nodes_visited", Res, nil))) ++ "\n"))]),
            erlang:put('q', (erlang:get('q') + 1)),
            Fun_2_loop();
        _ -> {}
    end
end,
{} = Fun_2(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
