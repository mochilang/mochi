#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, tree_sum/2, is_sum_node/2, build_a_tree/0, build_a_sum_tree/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.

tree_sum(Nodes, Idx) ->
    try
        case (Idx == -1) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Node = (case erlang:is_map(Nodes) of true -> maps:get(Idx, Nodes, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Nodes) + Idx + 1, Nodes); _ -> mochi_nth(Idx + 1, Nodes) end end),
        ((maps:get("value", Node, nil) + tree_sum(Nodes, maps:get("left", Node, nil))) + tree_sum(Nodes, maps:get("right", Node, nil)))
    catch {return, RetCatch} -> RetCatch end.

is_sum_node(Nodes_2, Idx_2) ->
    try
        Node_2 = (case erlang:is_map(Nodes_2) of true -> maps:get(Idx_2, Nodes_2, nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(Nodes_2) + Idx_2 + 1, Nodes_2); _ -> mochi_nth(Idx_2 + 1, Nodes_2) end end),
        case ((maps:get("left", Node_2, nil) == -1) andalso (maps:get("right", Node_2, nil) == -1)) of
        true -> throw({return, true});
        _ -> ok
    end,
        Left_sum = tree_sum(Nodes_2, maps:get("left", Node_2, nil)),
        Right_sum = tree_sum(Nodes_2, maps:get("right", Node_2, nil)),
        case (maps:get("value", Node_2, nil) /= (Left_sum + Right_sum)) of
        true -> throw({return, false});
        _ -> ok
    end,
        Left_ok = true,
        Left_ok_3 = (case (maps:get("left", Node_2, nil) /= -1) of
        true -> Left_ok_2 = is_sum_node(Nodes_2, maps:get("left", Node_2, nil)),
            Left_ok_2;
        _ -> Left_ok
    end),
        Right_ok = true,
        Right_ok_3 = (case (maps:get("right", Node_2, nil) /= -1) of
        true -> Right_ok_2 = is_sum_node(Nodes_2, maps:get("right", Node_2, nil)),
            Right_ok_2;
        _ -> Right_ok
    end),
        (Left_ok_3 andalso Right_ok_3)
    catch {return, RetCatch} -> RetCatch end.

build_a_tree() ->
    try
        [#{"value" => 11, "left" => 1, "right" => 2}, #{"value" => 2, "left" => 3, "right" => 4}, #{"value" => 29, "left" => 5, "right" => 6}, #{"value" => 1, "left" => -1, "right" => -1}, #{"value" => 7, "left" => -1, "right" => -1}, #{"value" => 15, "left" => -1, "right" => -1}, #{"value" => 40, "left" => 7, "right" => -1}, #{"value" => 35, "left" => -1, "right" => -1}]
    catch {return, RetCatch} -> RetCatch end.

build_a_sum_tree() ->
    try
        [#{"value" => 26, "left" => 1, "right" => 2}, #{"value" => 10, "left" => 3, "right" => 4}, #{"value" => 3, "left" => -1, "right" => 5}, #{"value" => 4, "left" => -1, "right" => -1}, #{"value" => 6, "left" => -1, "right" => -1}, #{"value" => 3, "left" => -1, "right" => -1}]
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
