#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, tree_sum/2, is_sum_node/2, build_a_tree/0, build_a_sum_tree/0]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

tree_sum(Nodes, Idx) ->
    try
        case (Idx == -1) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Node = (case erlang:is_map(Nodes) of true -> maps:get(Idx, Nodes, nil); _ -> lists:nth(Idx + 1, Nodes) end),
        ((maps:get("value", Node, nil) + tree_sum(Nodes, maps:get("left", Node, nil))) + tree_sum(Nodes, maps:get("right", Node, nil)))
    catch {return, Ret} -> Ret end.

is_sum_node(Nodes_2, Idx_2) ->
    try
        Node_2 = (case erlang:is_map(Nodes_2) of true -> maps:get(Idx_2, Nodes_2, nil); _ -> lists:nth(Idx_2 + 1, Nodes_2) end),
        case ((maps:get("left", Node_2, nil) == -1) andalso (maps:get("right", Node_2, nil) == -1)) of
        true -> throw({return, true});
        _ -> ok
    end,
        Left_sum = tree_sum(Nodes_2, maps:get("left", Node_2, nil)),
        Right_sum = tree_sum(Nodes_2, maps:get("right", Node_2, nil)),
        case (maps:get("value", Node_2, nil) /= (Left_sum + Right_sum)) of
        true -> throw({return, false});
        _ -> ok
    end,
        Left_ok = true,
        case (maps:get("left", Node_2, nil) /= -1) of
        true -> Left_ok_2 = is_sum_node(Nodes_2, maps:get("left", Node_2, nil)),
            Left_ok_3 = Left_ok_2;
        _ -> Left_ok_3 = Left_ok
    end,
        Right_ok = true,
        case (maps:get("right", Node_2, nil) /= -1) of
        true -> Right_ok_2 = is_sum_node(Nodes_2, maps:get("right", Node_2, nil)),
            Right_ok_3 = Right_ok_2;
        _ -> Right_ok_3 = Right_ok
    end,
        (Left_ok_3 andalso Right_ok_3)
    catch {return, Ret} -> Ret end.

build_a_tree() ->
    try
        [#{"value" => 11, "left" => 1, "right" => 2}, #{"value" => 2, "left" => 3, "right" => 4}, #{"value" => 29, "left" => 5, "right" => 6}, #{"value" => 1, "left" => -1, "right" => -1}, #{"value" => 7, "left" => -1, "right" => -1}, #{"value" => 15, "left" => -1, "right" => -1}, #{"value" => 40, "left" => 7, "right" => -1}, #{"value" => 35, "left" => -1, "right" => -1}]
    catch {return, Ret} -> Ret end.

build_a_sum_tree() ->
    try
        [#{"value" => 26, "left" => 1, "right" => 2}, #{"value" => 10, "left" => 3, "right" => 4}, #{"value" => 3, "left" => -1, "right" => 5}, #{"value" => 4, "left" => -1, "right" => -1}, #{"value" => 6, "left" => -1, "right" => -1}, #{"value" => 3, "left" => -1, "right" => -1}]
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
