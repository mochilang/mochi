#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_symmetric_tree/0, make_asymmetric_tree/0, is_symmetric_tree/1]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_symmetric_tree() ->
    try
        [[1, 1, 2], [2, 3, 4], [2, 5, 6], [3, -1, -1], [4, -1, -1], [4, -1, -1], [3, -1, -1]]
    catch {return, RetCatch} -> RetCatch end.

make_asymmetric_tree() ->
    try
        [[1, 1, 2], [2, 3, 4], [2, 5, 6], [3, -1, -1], [4, -1, -1], [3, -1, -1], [4, -1, -1]]
    catch {return, RetCatch} -> RetCatch end.

is_symmetric_tree(Tree) ->
    try
        Stack = [(case erlang:is_map((case erlang:is_map(Tree) of true -> maps:get(0, Tree, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Tree) + 0 + 1, Tree); _ -> mochi_nth(0 + 1, Tree) end end)) of true -> maps:get(1, (case erlang:is_map(Tree) of true -> maps:get(0, Tree, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Tree) + 0 + 1, Tree); _ -> mochi_nth(0 + 1, Tree) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Tree) of true -> maps:get(0, Tree, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Tree) + 0 + 1, Tree); _ -> mochi_nth(0 + 1, Tree) end end)) + 1 + 1, (case erlang:is_map(Tree) of true -> maps:get(0, Tree, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Tree) + 0 + 1, Tree); _ -> mochi_nth(0 + 1, Tree) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Tree) of true -> maps:get(0, Tree, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Tree) + 0 + 1, Tree); _ -> mochi_nth(0 + 1, Tree) end end)) end end), (case erlang:is_map((case erlang:is_map(Tree) of true -> maps:get(0, Tree, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Tree) + 0 + 1, Tree); _ -> mochi_nth(0 + 1, Tree) end end)) of true -> maps:get(2, (case erlang:is_map(Tree) of true -> maps:get(0, Tree, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Tree) + 0 + 1, Tree); _ -> mochi_nth(0 + 1, Tree) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Tree) of true -> maps:get(0, Tree, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Tree) + 0 + 1, Tree); _ -> mochi_nth(0 + 1, Tree) end end)) + 2 + 1, (case erlang:is_map(Tree) of true -> maps:get(0, Tree, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Tree) + 0 + 1, Tree); _ -> mochi_nth(0 + 1, Tree) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Tree) of true -> maps:get(0, Tree, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Tree) + 0 + 1, Tree); _ -> mochi_nth(0 + 1, Tree) end end)) end end)],
        Fun = fun Fun_loop(Stack, Tree) ->
    case (erlang:length(Stack) >= 2) of
        true ->
            try
                Left = (case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 2), Stack, nil); _ -> case (erlang:length(Stack) - 2) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 2) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 2) + 1, Stack) end end),
                Right = (case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end),
                Stack_2 = lists:sublist(Stack, 0 + 1, ((erlang:length(Stack) - 2) - 0)),
                case ((Left == -1) andalso (Right == -1)) of
        true -> throw({continue, Stack_2, Tree});
        _ -> ok
    end,
                case ((Left == -1) orelse (Right == -1)) of
        true -> throw({return, false});
        _ -> ok
    end,
                Lnode = (case erlang:is_map(Tree) of true -> maps:get(Left, Tree, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Tree) + Left + 1, Tree); _ -> mochi_nth(Left + 1, Tree) end end),
                Rnode = (case erlang:is_map(Tree) of true -> maps:get(Right, Tree, nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(Tree) + Right + 1, Tree); _ -> mochi_nth(Right + 1, Tree) end end),
                case ((case erlang:is_map(Lnode) of true -> maps:get(0, Lnode, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Lnode) + 0 + 1, Lnode); _ -> mochi_nth(0 + 1, Lnode) end end) /= (case erlang:is_map(Rnode) of true -> maps:get(0, Rnode, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Rnode) + 0 + 1, Rnode); _ -> mochi_nth(0 + 1, Rnode) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
                Stack_3 = lists:append((case Stack_2 of nil -> []; _ -> Stack_2 end), [(case erlang:is_map(Lnode) of true -> maps:get(1, Lnode, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Lnode) + 1 + 1, Lnode); _ -> mochi_nth(1 + 1, Lnode) end end)]),
                Stack_4 = lists:append((case Stack_3 of nil -> []; _ -> Stack_3 end), [(case erlang:is_map(Rnode) of true -> maps:get(2, Rnode, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Rnode) + 2 + 1, Rnode); _ -> mochi_nth(2 + 1, Rnode) end end)]),
                Stack_5 = lists:append((case Stack_4 of nil -> []; _ -> Stack_4 end), [(case erlang:is_map(Lnode) of true -> maps:get(2, Lnode, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Lnode) + 2 + 1, Lnode); _ -> mochi_nth(2 + 1, Lnode) end end)]),
                Stack_6 = lists:append((case Stack_5 of nil -> []; _ -> Stack_5 end), [(case erlang:is_map(Rnode) of true -> maps:get(1, Rnode, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Rnode) + 1 + 1, Rnode); _ -> mochi_nth(1 + 1, Rnode) end end)]),
                Fun_loop(Stack_6, Tree)
            catch
                {continue, C0, C1} -> Fun_loop(C0, C1);
                {break, Bs} -> Bs
            end;
        _ -> {Stack, Tree}
    end
end,
{Stack_6, Tree} = Fun(Stack, Tree),
        true
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('symmetric_tree', make_symmetric_tree()),
    erlang:put('asymmetric_tree', make_asymmetric_tree()),
    io:format("~s~n", [mochi_str(is_symmetric_tree(erlang:get('symmetric_tree')))]),
    io:format("~s~n", [mochi_str(is_symmetric_tree(erlang:get('asymmetric_tree')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
