#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, inorder/2, floor_ceiling/3]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

inorder(Nodes, Idx) ->
    try
        case (Idx == -1) of
        true -> throw({return, []});
        _ -> ok
    end,
        Node = (case erlang:is_map(Nodes) of true -> maps:get(Idx, Nodes, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Nodes) + Idx + 1, Nodes); _ -> mochi_nth(Idx + 1, Nodes) end end),
        Result = inorder(Nodes, maps:get("left", Node, nil)),
        Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [maps:get("key", Node, nil)]),
        Result_3 = lists:append(Result_2, inorder(Nodes, maps:get("right", Node, nil))),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

floor_ceiling(Nodes_2, Idx_2, Key) ->
    try
        Floor_val = nil,
        Ceiling_val = nil,
        Current = Idx_2,
        Fun = fun Fun_loop(Ceiling_val, Current, Floor_val, Idx_2, Key, Nodes_2) ->
    case (Current /= -1) of
        true ->
            try
                Node_2 = (case erlang:is_map(Nodes_2) of true -> maps:get(Current, Nodes_2, nil); _ -> case Current < 0 of true -> mochi_nth(erlang:length(Nodes_2) + Current + 1, Nodes_2); _ -> mochi_nth(Current + 1, Nodes_2) end end),
                Floor_val_3 = (case (maps:get("key", Node_2, nil) == Key) of
        true -> Floor_val_2 = maps:get("key", Node_2, nil),
            Ceiling_val_2 = maps:get("key", Node_2, nil),
            throw({break, {Ceiling_val_2, Current, Floor_val_2, Idx_2, Key, Nodes_2}}),
            Ceiling_val_3 = Ceiling_val_2,
            Floor_val_2;
        _ -> Ceiling_val_3 = Ceiling_val,
            Floor_val
    end),
                Floor_val_5 = (case (Key < maps:get("key", Node_2, nil)) of
        true -> Ceiling_val_4 = maps:get("key", Node_2, nil),
            Current_2 = maps:get("left", Node_2, nil),
            Ceiling_val_5 = Ceiling_val_4,
            Current_4 = Current_2,
            Floor_val_3;
        _ -> Floor_val_4 = maps:get("key", Node_2, nil),
            Current_3 = maps:get("right", Node_2, nil),
            Ceiling_val_5 = Ceiling_val_3,
            Current_4 = Current_3,
            Floor_val_4
    end),
                Fun_loop(Ceiling_val_5, Current_4, Floor_val_5, Idx_2, Key, Nodes_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_loop(C0, C1, C2, C3, C4, C5);
                {break, Bs} -> Bs
            end;
        _ -> {Ceiling_val, Current, Floor_val, Idx_2, Key, Nodes_2}
    end
end,
{Ceiling_val_5, Current_4, Floor_val_5, Idx_2, Key, Nodes_2} = Fun(Ceiling_val, Current, Floor_val, Idx_2, Key, Nodes_2),
        [Floor_val_5, Ceiling_val_5]
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('tree', [#{"key" => 10, "left" => 1, "right" => 2}, #{"key" => 5, "left" => 3, "right" => 4}, #{"key" => 20, "left" => 5, "right" => 6}, #{"key" => 3, "left" => -1, "right" => -1}, #{"key" => 7, "left" => -1, "right" => -1}, #{"key" => 15, "left" => -1, "right" => -1}, #{"key" => 25, "left" => -1, "right" => -1}]),
    io:format("~s~n", [mochi_str(inorder(erlang:get('tree'), 0))]),
    io:format("~s~n", [mochi_str(floor_ceiling(erlang:get('tree'), 0, 8))]),
    io:format("~s~n", [mochi_str(floor_ceiling(erlang:get('tree'), 0, 14))]),
    io:format("~s~n", [mochi_str(floor_ceiling(erlang:get('tree'), 0, -1))]),
    io:format("~s~n", [mochi_str(floor_ceiling(erlang:get('tree'), 0, 30))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
