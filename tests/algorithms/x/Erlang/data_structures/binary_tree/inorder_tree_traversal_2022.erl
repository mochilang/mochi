#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, new_node/2, insert/2, inorder/2, make_tree/0, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).

new_node(State, Value) ->
    try
        State_2 = maps:put("nodes", lists:append((case maps:get("nodes", State, nil) of nil -> []; _ -> maps:get("nodes", State, nil) end), [#{"data" => Value, "left" => -1, "right" => -1}]), State),
        (erlang:length(maps:get("nodes", State_2, nil)) - 1)
    catch {return, RetCatch} -> RetCatch end.

insert(State_3, Value_2) ->
    try
        State_5 = (case (maps:get("root", State_3, nil) == -1) of
        true -> State_4 = maps:put("root", new_node(State_3, Value_2), State_3),
            throw({return, State_4}),
            State_4;
        _ -> State_3
    end),
        Current = maps:get("root", State_5, nil),
        Nodes = maps:get("nodes", State_5, nil),
        Fun = fun Fun_loop(Current, Nodes, State_5, Value_2) ->
    case true of
        true ->
            Node = (case erlang:is_map(Nodes) of true -> maps:get(Current, Nodes, nil); _ -> case Current < 0 of true -> mochi_nth(erlang:length(Nodes) + Current + 1, Nodes); _ -> mochi_nth(Current + 1, Nodes) end end),
            State_10 = (case (Value_2 < maps:get("data", Node, nil)) of
        true -> State_7 = (case (maps:get("left", Node, nil) == -1) of
        true -> Node_2 = maps:put("left", new_node(State_5, Value_2), Node),
            Nodes_2 = lists:sublist(Nodes, Current) ++ [Node_2] ++ lists:nthtail(Current + 1, Nodes),
            State_6 = maps:put("nodes", Nodes_2, State_5),
            throw({return, State_6}),
            Node_3 = Node_2,
            Nodes_3 = Nodes_2,
            State_6;
        _ -> Node_3 = Node,
            Nodes_3 = Nodes,
            State_5
    end),
            Current_2 = maps:get("left", Node_3, nil),
            Current_4 = Current_2,
            Node_6 = Node_3,
            Nodes_6 = Nodes_3,
            State_7;
        _ -> State_9 = (case (maps:get("right", Node, nil) == -1) of
        true -> Node_4 = maps:put("right", new_node(State_5, Value_2), Node),
            Nodes_4 = lists:sublist(Nodes, Current) ++ [Node_4] ++ lists:nthtail(Current + 1, Nodes),
            State_8 = maps:put("nodes", Nodes_4, State_5),
            throw({return, State_8}),
            Node_5 = Node_4,
            Nodes_5 = Nodes_4,
            State_8;
        _ -> Node_5 = Node,
            Nodes_5 = Nodes,
            State_5
    end),
            Current_3 = maps:get("right", Node_5, nil),
            Current_4 = Current_3,
            Node_6 = Node_5,
            Nodes_6 = Nodes_5,
            State_9
    end),
            Fun_loop(Current_4, Nodes_6, State_10, Value_2);
        _ -> {Current, Nodes, State_5, Value_2}
    end
end,
{Current_4, Nodes_6, State_10, Value_2} = Fun(Current, Nodes, State_5, Value_2),
        nil
    catch {return, RetCatch} -> RetCatch end.

inorder(State_11, Idx) ->
    try
        case (Idx == -1) of
        true -> throw({return, []});
        _ -> ok
    end,
        Node_7 = (case erlang:is_map(maps:get("nodes", State_11, nil)) of true -> maps:get(Idx, maps:get("nodes", State_11, nil), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", State_11, nil)) + Idx + 1, maps:get("nodes", State_11, nil)); _ -> mochi_nth(Idx + 1, maps:get("nodes", State_11, nil)) end end),
        Result = inorder(State_11, maps:get("left", Node_7, nil)),
        Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [maps:get("data", Node_7, nil)]),
        Right_part = inorder(State_11, maps:get("right", Node_7, nil)),
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Idx, Node_7, Result_2, Right_part, State_11) ->
    case (I < erlang:length(Right_part)) of
        true ->
            Result_3 = lists:append((case Result_2 of nil -> []; _ -> Result_2 end), [(case erlang:is_map(Right_part) of true -> maps:get(I, Right_part, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Right_part) + I + 1, Right_part); _ -> mochi_nth(I + 1, Right_part) end end)]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Idx, Node_7, Result_3, Right_part, State_11);
        _ -> {I, Idx, Node_7, Result_2, Right_part, State_11}
    end
end,
{I_2, Idx, Node_7, Result_3, Right_part, State_11} = Fun_2(I, Idx, Node_7, Result_2, Right_part, State_11),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

make_tree() ->
    try
        State_12 = #{"nodes" => [], "root" => -1},
        insert(State_12, 15),
        insert(State_12, 10),
        insert(State_12, 25),
        insert(State_12, 6),
        insert(State_12, 14),
        insert(State_12, 20),
        insert(State_12, 60),
        State_12
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        State_13 = make_tree(),
        io:format("~s~n", [mochi_format("Printing values of binary search tree in Inorder Traversal.")]),
        io:format("~s~n", [mochi_format(inorder(State_13, maps:get("root", State_13, nil)))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
