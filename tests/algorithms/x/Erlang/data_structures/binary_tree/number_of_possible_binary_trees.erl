#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, binomial_coefficient/2, catalan_number/1, factorial/1, binary_tree_count/1]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

binomial_coefficient(N, K) ->
    try
        Result = 1,
        Kk = K,
        case (K > (N - K)) of
        true -> Kk_2 = (N - K),
            Kk_3 = Kk_2;
        _ -> Kk_3 = Kk
    end,
        Fun = fun Fun_loop(List, K, Kk_3, N, Result) ->
    case List of
        [] -> {K, Kk_3, N, Result};
        [I|I_rest] ->
            Result_2 = (Result * (N - I)),
            Result_3 = (Result_2 div (I + 1)),
            Fun_loop(I_rest, K, Kk_3, N, Result_3);
        _ -> {K, Kk_3, N, Result}
    end
end,
{K, Kk_3, N, Result_3} = Fun(lists:seq(0, (Kk_3) - 1), K, Kk_3, N, Result),
        Result_3
    catch {return, Ret} -> Ret end.

catalan_number(Node_count) ->
    try
        (binomial_coefficient((2 * Node_count), Node_count) div (Node_count + 1))
    catch {return, Ret} -> Ret end.

factorial(N_2) ->
    try
        case (N_2 < 0) of
        true -> io:format("~ts~n", [mochi_repr("factorial() not defined for negative values")]),
            throw({return, 0});
        _ -> ok
    end,
        Result_4 = 1,
        Fun_2 = fun Fun_2_loop(List, N_2, Result_4) ->
    case List of
        [] -> {N_2, Result_4};
        [I_2|I_2_rest] ->
            Result_5 = (Result_4 * I_2),
            Fun_2_loop(I_2_rest, N_2, Result_5);
        _ -> {N_2, Result_4}
    end
end,
{N_2, Result_5} = Fun_2(lists:seq(1, ((N_2 + 1)) - 1), N_2, Result_4),
        Result_5
    catch {return, Ret} -> Ret end.

binary_tree_count(Node_count_2) ->
    try
        (catalan_number(Node_count_2) * factorial(Node_count_2))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr("Enter the number of nodes:")]),
    erlang:put('input_str', ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)())),
    erlang:put('node_count', mochi_to_int(erlang:get('input_str'))),
    case (erlang:get('node_count') =< 0) of
        true -> io:format("~ts~n", [mochi_repr("We need some nodes to work with.")]),
            Bst_2 = nil,
            Bt_2 = nil;
        _ -> Bst = catalan_number(erlang:get('node_count')),
            Bt = binary_tree_count(erlang:get('node_count')),
            io:format("~ts ~ts ~ts ~ts ~ts ~ts ~ts~n", [mochi_repr("Given"), mochi_repr(erlang:get('node_count')), mochi_repr("nodes, there are"), mochi_repr(Bt), mochi_repr("binary trees and"), mochi_repr(Bst), mochi_repr("binary search trees.")]),
            Bst_2 = Bst,
            Bt_2 = Bt
    end,
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
