#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, binomial_coefficient/2, catalan_number/1, factorial/1, binary_tree_count/1]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.

binomial_coefficient(N, K) ->
    try
        Result = 1,
        Kk = K,
        Kk_3 = (case (K > (N - K)) of
        true -> Kk_2 = (N - K),
            Kk_2;
        _ -> Kk
    end),
        Fun = fun Fun_loop(List, K, Kk_3, N, Result) ->
    case List of
        [] -> {K, Kk_3, N, Result};
        [I|I_rest] ->
            Result_2 = (Result * (N - I)),
            Result_3 = mochi_safe_div(Result_2, (I + 1)),
            Fun_loop(I_rest, K, Kk_3, N, Result_3);
        _ -> {K, Kk_3, N, Result}
    end
end,
{K, Kk_3, N, Result_3} = Fun(lists:seq(0, (Kk_3) - 1), K, Kk_3, N, Result),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

catalan_number(Node_count) ->
    try
        mochi_idiv(binomial_coefficient((2 * Node_count), Node_count), (Node_count + 1))
    catch {return, RetCatch} -> RetCatch end.

factorial(N_2) ->
    try
        case (N_2 < 0) of
        true -> io:format("~s~n", [mochi_format("factorial() not defined for negative values")]),
            throw({return, 0});
        _ -> ok
    end,
        Result_4 = 1,
        Fun_2 = fun Fun_2_loop(List, N_2, Result_4) ->
    case List of
        [] -> {N_2, Result_4};
        [I_2|I_2_rest] ->
            Result_5 = (Result_4 * I_2),
            Fun_2_loop(I_2_rest, N_2, Result_5);
        _ -> {N_2, Result_4}
    end
end,
{N_2, Result_5} = Fun_2(lists:seq(1, ((N_2 + 1)) - 1), N_2, Result_4),
        Result_5
    catch {return, RetCatch} -> RetCatch end.

binary_tree_count(Node_count_2) ->
    try
        (catalan_number(Node_count_2) * factorial(Node_count_2))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~s~n", [mochi_format("Enter the number of nodes:")]),
    erlang:put('input_str', ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)())),
    erlang:put('node_count', mochi_to_int(erlang:get('input_str'))),
    Bt_2 = (case (erlang:get('node_count') =< 0) of
        true -> io:format("~s~n", [mochi_format("We need some nodes to work with.")]),
            Bst_2 = nil,
            nil;
        _ -> Bst = catalan_number(erlang:get('node_count')),
            Bt = binary_tree_count(erlang:get('node_count')),
            io:format("~s ~s ~s ~s ~s ~s ~s~n", [mochi_format("Given"), mochi_format(erlang:get('node_count')), mochi_format("nodes, there are"), mochi_format(Bt), mochi_format("binary trees and"), mochi_format(Bst), mochi_format("binary search trees.")]),
            Bst_2 = Bst,
            Bt
    end),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
