#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, fenwick_from_list/1, fenwick_empty/1, fenwick_get_array/1, bit_and/2, low_bit/1, fenwick_next/1, fenwick_prev/1, fenwick_add/3, fenwick_update/3, fenwick_prefix/2, fenwick_query/3, fenwick_get/2, fenwick_rank_query/2]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

fenwick_from_list(Arr) ->
    try
        Size = erlang:length(Arr),
        Tree = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, Size, Tree) ->
    case (I < Size) of
        true ->
            Tree_2 = lists:append((case Tree of nil -> []; _ -> Tree end), [(case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end)]),
            I_2 = (I + 1),
            Fun_loop(Arr, I_2, Size, Tree_2);
        _ -> {Arr, I, Size, Tree}
    end
end,
{Arr, I_2, Size, Tree_2} = Fun(Arr, I, Size, Tree),
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(Arr, I_3, Size, Tree_2) ->
    case (I_3 < Size) of
        true ->
            J = fenwick_next(I_3),
            Tree_4 = (case (J < Size) of
        true -> Tree_3 = lists:sublist(Tree_2, J) ++ [((case erlang:is_map(Tree_2) of true -> maps:get(J, Tree_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Tree_2) + J + 1, Tree_2); _ -> mochi_nth(J + 1, Tree_2) end end) + (case erlang:is_map(Tree_2) of true -> maps:get(I_3, Tree_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Tree_2) + I_3 + 1, Tree_2); _ -> mochi_nth(I_3 + 1, Tree_2) end end))] ++ lists:nthtail(J + 1, Tree_2),
            Tree_3;
        _ -> Tree_2
    end),
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr, I_4, Size, Tree_4);
        _ -> {Arr, I_3, Size, Tree_2}
    end
end,
{Arr, I_4, Size, Tree_4} = Fun_2(Arr, I_3, Size, Tree_2),
        #{"size" => Size, "tree" => Tree_4}
    catch {return, RetCatch} -> RetCatch end.

fenwick_empty(Size_2) ->
    try
        Tree_5 = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Size_2, Tree_5) ->
    case (I_5 < Size_2) of
        true ->
            Tree_6 = lists:append((case Tree_5 of nil -> []; _ -> Tree_5 end), [0]),
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Size_2, Tree_6);
        _ -> {I_5, Size_2, Tree_5}
    end
end,
{I_6, Size_2, Tree_6} = Fun_3(I_5, Size_2, Tree_5),
        #{"size" => Size_2, "tree" => Tree_6}
    catch {return, RetCatch} -> RetCatch end.

fenwick_get_array(F) ->
    try
        Arr_2 = [],
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Arr_2, F, I_7) ->
    case (I_7 < maps:get("size", F, nil)) of
        true ->
            Arr_3 = lists:append((case Arr_2 of nil -> []; _ -> Arr_2 end), [(case erlang:is_map(maps:get("tree", F, nil)) of true -> maps:get(I_7, maps:get("tree", F, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("tree", F, nil)) + I_7 + 1, maps:get("tree", F, nil)); _ -> mochi_nth(I_7 + 1, maps:get("tree", F, nil)) end end)]),
            I_8 = (I_7 + 1),
            Fun_4_loop(Arr_3, F, I_8);
        _ -> {Arr_2, F, I_7}
    end
end,
{Arr_3, F, I_8} = Fun_4(Arr_2, F, I_7),
        I_9 = (maps:get("size", F, nil) - 1),
        Fun_5 = fun Fun_5_loop(Arr_3, F, I_9) ->
    case (I_9 > 0) of
        true ->
            J_2 = fenwick_next(I_9),
            Arr_5 = (case (J_2 < maps:get("size", F, nil)) of
        true -> Arr_4 = lists:sublist(Arr_3, J_2) ++ [((case erlang:is_map(Arr_3) of true -> maps:get(J_2, Arr_3, nil); _ -> case J_2 < 0 of true -> mochi_nth(erlang:length(Arr_3) + J_2 + 1, Arr_3); _ -> mochi_nth(J_2 + 1, Arr_3) end end) - (case erlang:is_map(Arr_3) of true -> maps:get(I_9, Arr_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Arr_3) + I_9 + 1, Arr_3); _ -> mochi_nth(I_9 + 1, Arr_3) end end))] ++ lists:nthtail(J_2 + 1, Arr_3),
            Arr_4;
        _ -> Arr_3
    end),
            I_10 = (I_9 - 1),
            Fun_5_loop(Arr_5, F, I_10);
        _ -> {Arr_3, F, I_9}
    end
end,
{Arr_5, F, I_10} = Fun_5(Arr_3, F, I_9),
        Arr_5
    catch {return, RetCatch} -> RetCatch end.

bit_and(A, B) ->
    try
        Ua = A,
        Ub = B,
        Res = 0,
        Bit = 1,
        Fun_6 = fun Fun_6_loop(A, B, Bit, Res, Ua, Ub) ->
    case ((Ua /= 0) orelse (Ub /= 0)) of
        true ->
            Res_3 = (case ((mochi_mod(Ua, 2) == 1) andalso (mochi_mod(Ub, 2) == 1)) of
        true -> Res_2 = (Res + Bit),
            Res_2;
        _ -> Res
    end),
            Ua_2 = mochi_to_int(mochi_idiv(Ua, 2)),
            Ub_2 = mochi_to_int(mochi_idiv(Ub, 2)),
            Bit_2 = (Bit * 2),
            Fun_6_loop(A, B, Bit_2, Res_3, Ua_2, Ub_2);
        _ -> {A, B, Bit, Res, Ua, Ub}
    end
end,
{A, B, Bit_2, Res_3, Ua_2, Ub_2} = Fun_6(A, B, Bit, Res, Ua, Ub),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

low_bit(X) ->
    try
        (case (X == 0) of
    true -> 0;
    _ -> (X - bit_and(X, (X - 1)))
end)
    catch {return, RetCatch} -> RetCatch end.

fenwick_next(Index) ->
    try
        (Index + low_bit(Index))
    catch {return, RetCatch} -> RetCatch end.

fenwick_prev(Index_2) ->
    try
        (Index_2 - low_bit(Index_2))
    catch {return, RetCatch} -> RetCatch end.

fenwick_add(F_2, Index_3, Value) ->
    try
        Tree_7 = maps:get("tree", F_2, nil),
        Tree_9 = (case (Index_3 == 0) of
        true -> Tree_8 = lists:sublist(Tree_7, 0) ++ [((case erlang:is_map(Tree_7) of true -> maps:get(0, Tree_7, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Tree_7) + 0 + 1, Tree_7); _ -> mochi_nth(0 + 1, Tree_7) end end) + Value)] ++ lists:nthtail(0 + 1, Tree_7),
            throw({return, #{"size" => maps:get("size", F_2, nil), "tree" => Tree_8}}),
            Tree_8;
        _ -> Tree_7
    end),
        I_11 = Index_3,
        Fun_7 = fun Fun_7_loop(F_2, I_11, Index_3, Tree_9, Value) ->
    case (I_11 < maps:get("size", F_2, nil)) of
        true ->
            Tree_10 = lists:sublist(Tree_9, I_11) ++ [((case erlang:is_map(Tree_9) of true -> maps:get(I_11, Tree_9, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Tree_9) + I_11 + 1, Tree_9); _ -> mochi_nth(I_11 + 1, Tree_9) end end) + Value)] ++ lists:nthtail(I_11 + 1, Tree_9),
            I_12 = fenwick_next(I_11),
            Fun_7_loop(F_2, I_12, Index_3, Tree_10, Value);
        _ -> {F_2, I_11, Index_3, Tree_9, Value}
    end
end,
{F_2, I_12, Index_3, Tree_10, Value} = Fun_7(F_2, I_11, Index_3, Tree_9, Value),
        #{"size" => maps:get("size", F_2, nil), "tree" => Tree_10}
    catch {return, RetCatch} -> RetCatch end.

fenwick_update(F_3, Index_4, Value_2) ->
    try
        Current = fenwick_get(F_3, Index_4),
        fenwick_add(F_3, Index_4, (Value_2 - Current))
    catch {return, RetCatch} -> RetCatch end.

fenwick_prefix(F_4, Right) ->
    try
        case (Right == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Result = (case erlang:is_map(maps:get("tree", F_4, nil)) of true -> maps:get(0, maps:get("tree", F_4, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("tree", F_4, nil)) + 0 + 1, maps:get("tree", F_4, nil)); _ -> mochi_nth(0 + 1, maps:get("tree", F_4, nil)) end end),
        R = (Right - 1),
        Fun_8 = fun Fun_8_loop(F_4, R, Result, Right) ->
    case (R > 0) of
        true ->
            Result_2 = (Result + (case erlang:is_map(maps:get("tree", F_4, nil)) of true -> maps:get(R, maps:get("tree", F_4, nil), nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(maps:get("tree", F_4, nil)) + R + 1, maps:get("tree", F_4, nil)); _ -> mochi_nth(R + 1, maps:get("tree", F_4, nil)) end end)),
            R_2 = fenwick_prev(R),
            Fun_8_loop(F_4, R_2, Result_2, Right);
        _ -> {F_4, R, Result, Right}
    end
end,
{F_4, R_2, Result_2, Right} = Fun_8(F_4, R, Result, Right),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

fenwick_query(F_5, Left, Right_2) ->
    try
        (fenwick_prefix(F_5, Right_2) - fenwick_prefix(F_5, Left))
    catch {return, RetCatch} -> RetCatch end.

fenwick_get(F_6, Index_5) ->
    try
        fenwick_query(F_6, Index_5, (Index_5 + 1))
    catch {return, RetCatch} -> RetCatch end.

fenwick_rank_query(F_7, Value_3) ->
    try
        V = (Value_3 - (case erlang:is_map(maps:get("tree", F_7, nil)) of true -> maps:get(0, maps:get("tree", F_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("tree", F_7, nil)) + 0 + 1, maps:get("tree", F_7, nil)); _ -> mochi_nth(0 + 1, maps:get("tree", F_7, nil)) end end)),
        case (V < 0) of
        true -> throw({return, -1});
        _ -> ok
    end,
        J_3 = 1,
        Fun_9 = fun Fun_9_loop(F_7, J_3, V, Value_3) ->
    case ((J_3 * 2) < maps:get("size", F_7, nil)) of
        true ->
            J_4 = (J_3 * 2),
            Fun_9_loop(F_7, J_4, V, Value_3);
        _ -> {F_7, J_3, V, Value_3}
    end
end,
{F_7, J_4, V, Value_3} = Fun_9(F_7, J_3, V, Value_3),
        I_13 = 0,
        Jj = J_4,
        Fun_10 = fun Fun_10_loop(F_7, I_13, J_4, Jj, V, Value_3) ->
    case (Jj > 0) of
        true ->
            V_3 = (case (((I_13 + Jj) < maps:get("size", F_7, nil)) andalso ((case erlang:is_map(maps:get("tree", F_7, nil)) of true -> maps:get((I_13 + Jj), maps:get("tree", F_7, nil), nil); _ -> case (I_13 + Jj) < 0 of true -> mochi_nth(erlang:length(maps:get("tree", F_7, nil)) + (I_13 + Jj) + 1, maps:get("tree", F_7, nil)); _ -> mochi_nth((I_13 + Jj) + 1, maps:get("tree", F_7, nil)) end end) =< V)) of
        true -> V_2 = (V - (case erlang:is_map(maps:get("tree", F_7, nil)) of true -> maps:get((I_13 + Jj), maps:get("tree", F_7, nil), nil); _ -> case (I_13 + Jj) < 0 of true -> mochi_nth(erlang:length(maps:get("tree", F_7, nil)) + (I_13 + Jj) + 1, maps:get("tree", F_7, nil)); _ -> mochi_nth((I_13 + Jj) + 1, maps:get("tree", F_7, nil)) end end)),
            I_14 = (I_13 + Jj),
            I_15 = I_14,
            V_2;
        _ -> I_15 = I_13,
            V
    end),
            Jj_2 = mochi_idiv(Jj, 2),
            Fun_10_loop(F_7, I_15, J_4, Jj_2, V_3, Value_3);
        _ -> {F_7, I_13, J_4, Jj, V, Value_3}
    end
end,
{F_7, I_15, J_4, Jj_2, V_3, Value_3} = Fun_10(F_7, I_13, J_4, Jj, V, Value_3),
        I_15
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('f_base', fenwick_from_list([1, 2, 3, 4, 5])),
    io:format("~s~n", [mochi_format(fenwick_get_array(erlang:get('f_base')))]),
    erlang:put('f', fenwick_from_list([1, 2, 3, 4, 5])),
    erlang:put('f', fenwick_add(erlang:get('f'), 0, 1)),
    erlang:put('f', fenwick_add(erlang:get('f'), 1, 2)),
    erlang:put('f', fenwick_add(erlang:get('f'), 2, 3)),
    erlang:put('f', fenwick_add(erlang:get('f'), 3, 4)),
    erlang:put('f', fenwick_add(erlang:get('f'), 4, 5)),
    io:format("~s~n", [mochi_format(fenwick_get_array(erlang:get('f')))]),
    erlang:put('f2', fenwick_from_list([1, 2, 3, 4, 5])),
    io:format("~s~n", [mochi_format(fenwick_prefix(erlang:get('f2'), 3))]),
    io:format("~s~n", [mochi_format(fenwick_query(erlang:get('f2'), 1, 4))]),
    erlang:put('f3', fenwick_from_list([1, 2, 0, 3, 0, 5])),
    io:format("~s~n", [mochi_format(fenwick_rank_query(erlang:get('f3'), 0))]),
    io:format("~s~n", [mochi_format(fenwick_rank_query(erlang:get('f3'), 2))]),
    io:format("~s~n", [mochi_format(fenwick_rank_query(erlang:get('f3'), 1))]),
    io:format("~s~n", [mochi_format(fenwick_rank_query(erlang:get('f3'), 3))]),
    io:format("~s~n", [mochi_format(fenwick_rank_query(erlang:get('f3'), 5))]),
    io:format("~s~n", [mochi_format(fenwick_rank_query(erlang:get('f3'), 6))]),
    io:format("~s~n", [mochi_format(fenwick_rank_query(erlang:get('f3'), 11))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
