#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, min_int/2, max_int/2, solver/2, max_sum_bst/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

min_int(A, B) ->
    try
        (case (A < B) of
    true -> A;
    _ -> B
end)
    catch {return, Ret} -> Ret end.

max_int(A_2, B_2) ->
    try
        (case (A_2 > B_2) of
    true -> A_2;
    _ -> B_2
end)
    catch {return, Ret} -> Ret end.

solver(Nodes, Idx) ->
    try
        case (Idx == (0 - 1)) of
        true -> throw({return, #{"is_bst" => true, "min_val" => 2147483647, "max_val" => -2147483648, "total" => 0, "best" => 0}});
        _ -> ok
    end,
        Node = (case erlang:is_map(Nodes) of true -> maps:get(Idx, Nodes, nil); _ -> lists:nth(Idx + 1, Nodes) end),
        Left_info = solver(Nodes, maps:get("left", Node, nil)),
        Right_info = solver(Nodes, maps:get("right", Node, nil)),
        Current_best = max_int(maps:get("best", Left_info, nil), maps:get("best", Right_info, nil)),
        case (((maps:get("is_bst", Left_info, nil) andalso maps:get("is_bst", Right_info, nil)) andalso (maps:get("max_val", Left_info, nil) < maps:get("val", Node, nil))) andalso (maps:get("val", Node, nil) < maps:get("min_val", Right_info, nil))) of
        true -> Sum_val = ((maps:get("total", Left_info, nil) + maps:get("total", Right_info, nil)) + maps:get("val", Node, nil)),
            Current_best_2 = max_int(Current_best, Sum_val),
            throw({return, #{"is_bst" => true, "min_val" => min_int(maps:get("min_val", Left_info, nil), maps:get("val", Node, nil)), "max_val" => max_int(maps:get("max_val", Right_info, nil), maps:get("val", Node, nil)), "total" => Sum_val, "best" => Current_best_2}}),
            Current_best_3 = Current_best_2,
            Sum_val_2 = Sum_val;
        _ -> Current_best_3 = Current_best,
            Sum_val_2 = nil
    end,
        #{"is_bst" => false, "min_val" => 0, "max_val" => 0, "total" => 0, "best" => Current_best_3}
    catch {return, Ret} -> Ret end.

max_sum_bst(Nodes_2, Root) ->
    try
        Info = solver(Nodes_2, Root),
        maps:get("best", Info, nil)
    catch {return, Ret} -> Ret end.

main() ->
    try
        T1_nodes = [#{"val" => 4, "left" => 1, "right" => (0 - 1)}, #{"val" => 3, "left" => 2, "right" => 3}, #{"val" => 1, "left" => (0 - 1), "right" => (0 - 1)}, #{"val" => 2, "left" => (0 - 1), "right" => (0 - 1)}],
        io:format("~ts~n", [mochi_repr(max_sum_bst(T1_nodes, 0))]),
        T2_nodes = [#{"val" => -4, "left" => 1, "right" => 2}, #{"val" => -2, "left" => (0 - 1), "right" => (0 - 1)}, #{"val" => -5, "left" => (0 - 1), "right" => (0 - 1)}],
        io:format("~ts~n", [mochi_repr(max_sum_bst(T2_nodes, 0))]),
        T3_nodes = [#{"val" => 1, "left" => 1, "right" => 2}, #{"val" => 4, "left" => 3, "right" => 4}, #{"val" => 3, "left" => 5, "right" => 6}, #{"val" => 2, "left" => (0 - 1), "right" => (0 - 1)}, #{"val" => 4, "left" => (0 - 1), "right" => (0 - 1)}, #{"val" => 2, "left" => (0 - 1), "right" => (0 - 1)}, #{"val" => 5, "left" => 7, "right" => 8}, #{"val" => 4, "left" => (0 - 1), "right" => (0 - 1)}, #{"val" => 6, "left" => (0 - 1), "right" => (0 - 1)}],
        io:format("~ts~n", [mochi_repr(max_sum_bst(T3_nodes, 0))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
