#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, init_int_array/1, init_bool_array/1, left/1, right/1, build/5, update/9, query/8, segtree_to_string/4]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.

init_int_array(N) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, N) ->
    case (I < ((4 * N) + 5)) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [0]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, I_2, N);
        _ -> {Arr, I, N}
    end
end,
{Arr_2, I_2, N} = Fun(Arr, I, N),
        Arr_2
    catch {return, RetCatch} -> RetCatch end.

init_bool_array(N_2) ->
    try
        Arr_3 = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Arr_3, I_3, N_2) ->
    case (I_3 < ((4 * N_2) + 5)) of
        true ->
            Arr_4 = lists:append((case Arr_3 of nil -> []; _ -> Arr_3 end), [false]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr_4, I_4, N_2);
        _ -> {Arr_3, I_3, N_2}
    end
end,
{Arr_4, I_4, N_2} = Fun_2(Arr_3, I_3, N_2),
        Arr_4
    catch {return, RetCatch} -> RetCatch end.

left(Idx) ->
    try
        (Idx * 2)
    catch {return, RetCatch} -> RetCatch end.

right(Idx_2) ->
    try
        ((Idx_2 * 2) + 1)
    catch {return, RetCatch} -> RetCatch end.

build(Segment_tree, Idx_3, L, R, A) ->
    try
        Segment_tree_6 = (case (L == R) of
        true -> Segment_tree_2 = lists:sublist(Segment_tree, Idx_3) ++ [(case erlang:is_map(A) of true -> maps:get((L - 1), A, nil); _ -> case (L - 1) < 0 of true -> mochi_nth(erlang:length(A) + (L - 1) + 1, A); _ -> mochi_nth((L - 1) + 1, A) end end)] ++ lists:nthtail(Idx_3 + 1, Segment_tree),
            Lv_2 = nil,
            Mid_2 = nil,
            Rv_2 = nil,
            Segment_tree_2;
        _ -> Mid = mochi_idiv((L + R), 2),
            build(Segment_tree, left(Idx_3), L, Mid, A),
            build(Segment_tree, right(Idx_3), (Mid + 1), R, A),
            Lv = (case erlang:is_map(Segment_tree) of true -> maps:get(left(Idx_3), Segment_tree, nil); _ -> case left(Idx_3) < 0 of true -> mochi_nth(erlang:length(Segment_tree) + left(Idx_3) + 1, Segment_tree); _ -> mochi_nth(left(Idx_3) + 1, Segment_tree) end end),
            Rv = (case erlang:is_map(Segment_tree) of true -> maps:get(right(Idx_3), Segment_tree, nil); _ -> case right(Idx_3) < 0 of true -> mochi_nth(erlang:length(Segment_tree) + right(Idx_3) + 1, Segment_tree); _ -> mochi_nth(right(Idx_3) + 1, Segment_tree) end end),
            Segment_tree_5 = (case (Lv > Rv) of
        true -> Segment_tree_3 = lists:sublist(Segment_tree, Idx_3) ++ [Lv] ++ lists:nthtail(Idx_3 + 1, Segment_tree),
            Segment_tree_3;
        _ -> Segment_tree_4 = lists:sublist(Segment_tree, Idx_3) ++ [Rv] ++ lists:nthtail(Idx_3 + 1, Segment_tree),
            Segment_tree_4
    end),
            Lv_2 = Lv,
            Mid_2 = Mid,
            Rv_2 = Rv,
            Segment_tree_5
    end),
        nil
    catch {return, RetCatch} -> RetCatch end.

update(Segment_tree_7, Lazy, Flag, Idx_4, L_2, R_2, A_2, B, Val) ->
    try
        Segment_tree_9 = (case (case erlang:is_map(Flag) of true -> maps:get(Idx_4, Flag, nil); _ -> case Idx_4 < 0 of true -> mochi_nth(erlang:length(Flag) + Idx_4 + 1, Flag); _ -> mochi_nth(Idx_4 + 1, Flag) end end) of
        true -> Segment_tree_8 = lists:sublist(Segment_tree_7, Idx_4) ++ [(case erlang:is_map(Lazy) of true -> maps:get(Idx_4, Lazy, nil); _ -> case Idx_4 < 0 of true -> mochi_nth(erlang:length(Lazy) + Idx_4 + 1, Lazy); _ -> mochi_nth(Idx_4 + 1, Lazy) end end)] ++ lists:nthtail(Idx_4 + 1, Segment_tree_7),
            Flag_2 = lists:sublist(Flag, Idx_4) ++ [false] ++ lists:nthtail(Idx_4 + 1, Flag),
            Lazy_4 = (case (L_2 /= R_2) of
        true -> Lazy_2 = lists:sublist(Lazy, left(Idx_4)) ++ [(case erlang:is_map(Lazy) of true -> maps:get(Idx_4, Lazy, nil); _ -> case Idx_4 < 0 of true -> mochi_nth(erlang:length(Lazy) + Idx_4 + 1, Lazy); _ -> mochi_nth(Idx_4 + 1, Lazy) end end)] ++ lists:nthtail(left(Idx_4) + 1, Lazy),
            Lazy_3 = lists:sublist(Lazy_2, right(Idx_4)) ++ [(case erlang:is_map(Lazy_2) of true -> maps:get(Idx_4, Lazy_2, nil); _ -> case Idx_4 < 0 of true -> mochi_nth(erlang:length(Lazy_2) + Idx_4 + 1, Lazy_2); _ -> mochi_nth(Idx_4 + 1, Lazy_2) end end)] ++ lists:nthtail(right(Idx_4) + 1, Lazy_2),
            Flag_3 = lists:sublist(Flag_2, left(Idx_4)) ++ [true] ++ lists:nthtail(left(Idx_4) + 1, Flag_2),
            Flag_4 = lists:sublist(Flag_3, right(Idx_4)) ++ [true] ++ lists:nthtail(right(Idx_4) + 1, Flag_3),
            Flag_5 = Flag_4,
            Lazy_3;
        _ -> Flag_5 = Flag_2,
            Lazy
    end),
            Flag_6 = Flag_5,
            Lazy_5 = Lazy_4,
            Segment_tree_8;
        _ -> Flag_6 = Flag,
            Lazy_5 = Lazy,
            Segment_tree_7
    end),
        case ((R_2 < A_2) orelse (L_2 > B)) of
        true -> throw({return, nil});
        _ -> ok
    end,
        Segment_tree_11 = (case ((L_2 >= A_2) andalso (R_2 =< B)) of
        true -> Segment_tree_10 = lists:sublist(Segment_tree_9, Idx_4) ++ [Val] ++ lists:nthtail(Idx_4 + 1, Segment_tree_9),
            Lazy_8 = (case (L_2 /= R_2) of
        true -> Lazy_6 = lists:sublist(Lazy_5, left(Idx_4)) ++ [Val] ++ lists:nthtail(left(Idx_4) + 1, Lazy_5),
            Lazy_7 = lists:sublist(Lazy_6, right(Idx_4)) ++ [Val] ++ lists:nthtail(right(Idx_4) + 1, Lazy_6),
            Flag_7 = lists:sublist(Flag_6, left(Idx_4)) ++ [true] ++ lists:nthtail(left(Idx_4) + 1, Flag_6),
            Flag_8 = lists:sublist(Flag_7, right(Idx_4)) ++ [true] ++ lists:nthtail(right(Idx_4) + 1, Flag_7),
            Flag_9 = Flag_8,
            Lazy_7;
        _ -> Flag_9 = Flag_6,
            Lazy_5
    end),
            throw({return, Segment_tree_10}),
            Flag_10 = Flag_9,
            Lazy_9 = Lazy_8,
            Segment_tree_10;
        _ -> Flag_10 = Flag_6,
            Lazy_9 = Lazy_5,
            Segment_tree_9
    end),
        Mid_3 = mochi_idiv((L_2 + R_2), 2),
        update(Segment_tree_11, Lazy_9, Flag_10, left(Idx_4), L_2, Mid_3, A_2, B, Val),
        update(Segment_tree_11, Lazy_9, Flag_10, right(Idx_4), (Mid_3 + 1), R_2, A_2, B, Val),
        Lv_3 = (case erlang:is_map(Segment_tree_11) of true -> maps:get(left(Idx_4), Segment_tree_11, nil); _ -> case left(Idx_4) < 0 of true -> mochi_nth(erlang:length(Segment_tree_11) + left(Idx_4) + 1, Segment_tree_11); _ -> mochi_nth(left(Idx_4) + 1, Segment_tree_11) end end),
        Rv_3 = (case erlang:is_map(Segment_tree_11) of true -> maps:get(right(Idx_4), Segment_tree_11, nil); _ -> case right(Idx_4) < 0 of true -> mochi_nth(erlang:length(Segment_tree_11) + right(Idx_4) + 1, Segment_tree_11); _ -> mochi_nth(right(Idx_4) + 1, Segment_tree_11) end end),
        Segment_tree_14 = (case (Lv_3 > Rv_3) of
        true -> Segment_tree_12 = lists:sublist(Segment_tree_11, Idx_4) ++ [Lv_3] ++ lists:nthtail(Idx_4 + 1, Segment_tree_11),
            Segment_tree_12;
        _ -> Segment_tree_13 = lists:sublist(Segment_tree_11, Idx_4) ++ [Rv_3] ++ lists:nthtail(Idx_4 + 1, Segment_tree_11),
            Segment_tree_13
    end),
        nil
    catch {return, RetCatch} -> RetCatch end.

query(Segment_tree_15, Lazy_10, Flag_11, Idx_5, L_3, R_3, A_3, B_2) ->
    try
        Segment_tree_17 = (case (case erlang:is_map(Flag_11) of true -> maps:get(Idx_5, Flag_11, nil); _ -> case Idx_5 < 0 of true -> mochi_nth(erlang:length(Flag_11) + Idx_5 + 1, Flag_11); _ -> mochi_nth(Idx_5 + 1, Flag_11) end end) of
        true -> Segment_tree_16 = lists:sublist(Segment_tree_15, Idx_5) ++ [(case erlang:is_map(Lazy_10) of true -> maps:get(Idx_5, Lazy_10, nil); _ -> case Idx_5 < 0 of true -> mochi_nth(erlang:length(Lazy_10) + Idx_5 + 1, Lazy_10); _ -> mochi_nth(Idx_5 + 1, Lazy_10) end end)] ++ lists:nthtail(Idx_5 + 1, Segment_tree_15),
            Flag_12 = lists:sublist(Flag_11, Idx_5) ++ [false] ++ lists:nthtail(Idx_5 + 1, Flag_11),
            Lazy_13 = (case (L_3 /= R_3) of
        true -> Lazy_11 = lists:sublist(Lazy_10, left(Idx_5)) ++ [(case erlang:is_map(Lazy_10) of true -> maps:get(Idx_5, Lazy_10, nil); _ -> case Idx_5 < 0 of true -> mochi_nth(erlang:length(Lazy_10) + Idx_5 + 1, Lazy_10); _ -> mochi_nth(Idx_5 + 1, Lazy_10) end end)] ++ lists:nthtail(left(Idx_5) + 1, Lazy_10),
            Lazy_12 = lists:sublist(Lazy_11, right(Idx_5)) ++ [(case erlang:is_map(Lazy_11) of true -> maps:get(Idx_5, Lazy_11, nil); _ -> case Idx_5 < 0 of true -> mochi_nth(erlang:length(Lazy_11) + Idx_5 + 1, Lazy_11); _ -> mochi_nth(Idx_5 + 1, Lazy_11) end end)] ++ lists:nthtail(right(Idx_5) + 1, Lazy_11),
            Flag_13 = lists:sublist(Flag_12, left(Idx_5)) ++ [true] ++ lists:nthtail(left(Idx_5) + 1, Flag_12),
            Flag_14 = lists:sublist(Flag_13, right(Idx_5)) ++ [true] ++ lists:nthtail(right(Idx_5) + 1, Flag_13),
            Flag_15 = Flag_14,
            Lazy_12;
        _ -> Flag_15 = Flag_12,
            Lazy_10
    end),
            Flag_16 = Flag_15,
            Lazy_14 = Lazy_13,
            Segment_tree_16;
        _ -> Flag_16 = Flag_11,
            Lazy_14 = Lazy_10,
            Segment_tree_15
    end),
        case ((R_3 < A_3) orelse (L_3 > B_2)) of
        true -> throw({return, erlang:get('NEG_INF')});
        _ -> ok
    end,
        case ((L_3 >= A_3) andalso (R_3 =< B_2)) of
        true -> throw({return, (case erlang:is_map(Segment_tree_17) of true -> maps:get(Idx_5, Segment_tree_17, nil); _ -> case Idx_5 < 0 of true -> mochi_nth(erlang:length(Segment_tree_17) + Idx_5 + 1, Segment_tree_17); _ -> mochi_nth(Idx_5 + 1, Segment_tree_17) end end)});
        _ -> ok
    end,
        Mid_4 = mochi_idiv((L_3 + R_3), 2),
        Q1 = query(Segment_tree_17, Lazy_14, Flag_16, left(Idx_5), L_3, Mid_4, A_3, B_2),
        Q2 = query(Segment_tree_17, Lazy_14, Flag_16, right(Idx_5), (Mid_4 + 1), R_3, A_3, B_2),
        case (Q1 > Q2) of
        true -> throw({return, Q1});
        _ -> throw({return, Q2})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

segtree_to_string(Segment_tree_18, Lazy_15, Flag_17, N_3) ->
    try
        Res = "[",
        I_5 = 1,
        Fun_3 = fun Fun_3_loop(Flag_17, I_5, Lazy_15, N_3, Res, Segment_tree_18) ->
    case (I_5 =< N_3) of
        true ->
            V = query(Segment_tree_18, Lazy_15, Flag_17, 1, 1, N_3, I_5, I_5),
            Res_2 = (Res ++ mochi_str(V)),
            Res_4 = (case (I_5 < N_3) of
        true -> Res_3 = (Res_2 ++ ", "),
            Res_3;
        _ -> Res_2
    end),
            I_6 = (I_5 + 1),
            Fun_3_loop(Flag_17, I_6, Lazy_15, N_3, Res_4, Segment_tree_18);
        _ -> {Flag_17, I_5, Lazy_15, N_3, Res, Segment_tree_18}
    end
end,
{Flag_17, I_6, Lazy_15, N_3, Res_4, Segment_tree_18} = Fun_3(Flag_17, I_5, Lazy_15, N_3, Res, Segment_tree_18),
        Res_5 = (Res_4 ++ "]"),
        Res_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('NEG_INF', -1000000000),
    erlang:put('A', [1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8]),
    erlang:put('n', 15),
    erlang:put('segment_tree', init_int_array(15)),
    erlang:put('lazy', init_int_array(15)),
    erlang:put('flag', init_bool_array(15)),
    build(erlang:get('segment_tree'), 1, 1, 15, erlang:get('A')),
    io:format("~s~n", [mochi_format(query(erlang:get('segment_tree'), erlang:get('lazy'), erlang:get('flag'), 1, 1, 15, 4, 6))]),
    io:format("~s~n", [mochi_format(query(erlang:get('segment_tree'), erlang:get('lazy'), erlang:get('flag'), 1, 1, 15, 7, 11))]),
    io:format("~s~n", [mochi_format(query(erlang:get('segment_tree'), erlang:get('lazy'), erlang:get('flag'), 1, 1, 15, 7, 12))]),
    update(erlang:get('segment_tree'), erlang:get('lazy'), erlang:get('flag'), 1, 1, 15, 1, 3, 111),
    io:format("~s~n", [mochi_format(query(erlang:get('segment_tree'), erlang:get('lazy'), erlang:get('flag'), 1, 1, 15, 1, 15))]),
    update(erlang:get('segment_tree'), erlang:get('lazy'), erlang:get('flag'), 1, 1, 15, 7, 8, 235),
    io:format("~s~n", [mochi_format(segtree_to_string(erlang:get('segment_tree'), erlang:get('lazy'), erlang:get('flag'), 15))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
