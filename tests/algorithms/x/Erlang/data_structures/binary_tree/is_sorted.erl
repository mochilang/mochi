#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, inorder/2, is_sorted/2]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

inorder(Tree, Index) ->
    try
        Res = [],
        case (Index == erlang:get('NONE')) of
        true -> throw({return, Res});
        _ -> ok
    end,
        Left_idx = (case erlang:is_map(maps:get("left", Tree, nil)) of true -> maps:get(Index, maps:get("left", Tree, nil), nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(maps:get("left", Tree, nil)) + Index + 1, maps:get("left", Tree, nil)); _ -> mochi_nth(Index + 1, maps:get("left", Tree, nil)) end end),
        Res_3 = (case (Left_idx /= erlang:get('NONE')) of
        true -> Res_2 = lists:append(Res, inorder(Tree, Left_idx)),
            Res_2;
        _ -> Res
    end),
        Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [(case erlang:is_map(maps:get("data", Tree, nil)) of true -> maps:get(Index, maps:get("data", Tree, nil), nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(maps:get("data", Tree, nil)) + Index + 1, maps:get("data", Tree, nil)); _ -> mochi_nth(Index + 1, maps:get("data", Tree, nil)) end end)]),
        Right_idx = (case erlang:is_map(maps:get("right", Tree, nil)) of true -> maps:get(Index, maps:get("right", Tree, nil), nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(maps:get("right", Tree, nil)) + Index + 1, maps:get("right", Tree, nil)); _ -> mochi_nth(Index + 1, maps:get("right", Tree, nil)) end end),
        Res_6 = (case (Right_idx /= erlang:get('NONE')) of
        true -> Res_5 = lists:append(Res_4, inorder(Tree, Right_idx)),
            Res_5;
        _ -> Res_4
    end),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

is_sorted(Tree_2, Index_2) ->
    try
        case (Index_2 == erlang:get('NONE')) of
        true -> throw({return, true});
        _ -> ok
    end,
        Left_idx_2 = (case erlang:is_map(maps:get("left", Tree_2, nil)) of true -> maps:get(Index_2, maps:get("left", Tree_2, nil), nil); _ -> case Index_2 < 0 of true -> mochi_nth(erlang:length(maps:get("left", Tree_2, nil)) + Index_2 + 1, maps:get("left", Tree_2, nil)); _ -> mochi_nth(Index_2 + 1, maps:get("left", Tree_2, nil)) end end),
        case (Left_idx_2 /= erlang:get('NONE')) of
        true -> case ((case erlang:is_map(maps:get("data", Tree_2, nil)) of true -> maps:get(Index_2, maps:get("data", Tree_2, nil), nil); _ -> case Index_2 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Tree_2, nil)) + Index_2 + 1, maps:get("data", Tree_2, nil)); _ -> mochi_nth(Index_2 + 1, maps:get("data", Tree_2, nil)) end end) < (case erlang:is_map(maps:get("data", Tree_2, nil)) of true -> maps:get(Left_idx_2, maps:get("data", Tree_2, nil), nil); _ -> case Left_idx_2 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Tree_2, nil)) + Left_idx_2 + 1, maps:get("data", Tree_2, nil)); _ -> mochi_nth(Left_idx_2 + 1, maps:get("data", Tree_2, nil)) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            case mochi_not(is_sorted(Tree_2, Left_idx_2)) of
        true -> throw({return, false});
        _ -> ok
    end;
        _ -> ok
    end,
        Right_idx_2 = (case erlang:is_map(maps:get("right", Tree_2, nil)) of true -> maps:get(Index_2, maps:get("right", Tree_2, nil), nil); _ -> case Index_2 < 0 of true -> mochi_nth(erlang:length(maps:get("right", Tree_2, nil)) + Index_2 + 1, maps:get("right", Tree_2, nil)); _ -> mochi_nth(Index_2 + 1, maps:get("right", Tree_2, nil)) end end),
        case (Right_idx_2 /= erlang:get('NONE')) of
        true -> case ((case erlang:is_map(maps:get("data", Tree_2, nil)) of true -> maps:get(Index_2, maps:get("data", Tree_2, nil), nil); _ -> case Index_2 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Tree_2, nil)) + Index_2 + 1, maps:get("data", Tree_2, nil)); _ -> mochi_nth(Index_2 + 1, maps:get("data", Tree_2, nil)) end end) > (case erlang:is_map(maps:get("data", Tree_2, nil)) of true -> maps:get(Right_idx_2, maps:get("data", Tree_2, nil), nil); _ -> case Right_idx_2 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Tree_2, nil)) + Right_idx_2 + 1, maps:get("data", Tree_2, nil)); _ -> mochi_nth(Right_idx_2 + 1, maps:get("data", Tree_2, nil)) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            case mochi_not(is_sorted(Tree_2, Right_idx_2)) of
        true -> throw({return, false});
        _ -> ok
    end;
        _ -> ok
    end,
        true
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('NONE', (0 - 1)),
    erlang:put('tree1', #{"data" => [2.1, 2.0, 2.2], "left" => [1, erlang:get('NONE'), erlang:get('NONE')], "right" => [2, erlang:get('NONE'), erlang:get('NONE')]}),
    io:format("~s~n", [mochi_format(((("Tree " ++ mochi_str(inorder(erlang:get('tree1'), 0))) ++ " is sorted: ") ++ mochi_str(is_sorted(erlang:get('tree1'), 0))))]),
    erlang:put('tree2', #{"data" => [2.1, 2.0, 2.0], "left" => [1, erlang:get('NONE'), erlang:get('NONE')], "right" => [2, erlang:get('NONE'), erlang:get('NONE')]}),
    io:format("~s~n", [mochi_format(((("Tree " ++ mochi_str(inorder(erlang:get('tree2'), 0))) ++ " is sorted: ") ++ mochi_str(is_sorted(erlang:get('tree2'), 0))))]),
    erlang:put('tree3', #{"data" => [2.1, 2.0, 2.1], "left" => [1, erlang:get('NONE'), erlang:get('NONE')], "right" => [2, erlang:get('NONE'), erlang:get('NONE')]}),
    io:format("~s~n", [mochi_format(((("Tree " ++ mochi_str(inorder(erlang:get('tree3'), 0))) ++ " is sorted: ") ++ mochi_str(is_sorted(erlang:get('tree3'), 0))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
