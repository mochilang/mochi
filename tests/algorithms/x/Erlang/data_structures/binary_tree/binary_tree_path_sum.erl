#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, dfs/3, path_sum/2, sample_tree_one/0, sample_tree_two/0, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).

dfs(Node, Target, Current) ->
    try
        (case Node of
    #{"tag" := "empty"} -> 0;
    #{"tag" := "node", "left" := L, "value" := V, "right" := R} -> (((case ((Current + V) == Target) of
    true -> 1;
    _ -> 0
end) + dfs(L, Target, (Current + V))) + dfs(R, Target, (Current + V)))
end)
    catch {return, RetCatch} -> RetCatch end.

path_sum(Node_2, Target_2) ->
    try
        (case Node_2 of
    #{"tag" := "empty"} -> 0;
    #{"tag" := "node", "left" := L_2, "value" := V_2, "right" := R_2} -> ((dfs(Node_2, Target_2, 0) + path_sum(L_2, Target_2)) + path_sum(R_2, Target_2))
end)
    catch {return, RetCatch} -> RetCatch end.

sample_tree_one() ->
    try
        #{"tag" => "node", "value" => 10, "left" => #{"tag" => "node", "value" => 5, "left" => #{"tag" => "node", "value" => 3, "left" => #{"tag" => "node", "value" => 3, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "empty"}}, "right" => #{"tag" => "node", "value" => -2, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "empty"}}}, "right" => #{"tag" => "node", "value" => 2, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "node", "value" => 1, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "empty"}}}}, "right" => #{"tag" => "node", "value" => -3, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "node", "value" => 11, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "empty"}}}}
    catch {return, RetCatch} -> RetCatch end.

sample_tree_two() ->
    try
        #{"tag" => "node", "value" => 10, "left" => #{"tag" => "node", "value" => 5, "left" => #{"tag" => "node", "value" => 3, "left" => #{"tag" => "node", "value" => 3, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "empty"}}, "right" => #{"tag" => "node", "value" => -2, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "empty"}}}, "right" => #{"tag" => "node", "value" => 2, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "node", "value" => 1, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "empty"}}}}, "right" => #{"tag" => "node", "value" => -3, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "node", "value" => 10, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "empty"}}}}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Tree1 = sample_tree_one(),
        io:format("~s~n", [mochi_format(path_sum(Tree1, 8))]),
        io:format("~s~n", [mochi_format(path_sum(Tree1, 7))]),
        Tree2 = sample_tree_two(),
        io:format("~s~n", [mochi_format(path_sum(Tree2, 8))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
