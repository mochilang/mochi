#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, inorder/3, size/2, depth/2, is_full/2, small_tree/0, medium_tree/0]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

inorder(Nodes, Index, Acc) ->
    try
        case (Index == (0 - 1)) of
        true -> throw({return, Acc});
        _ -> ok
    end,
        Node = (case erlang:is_map(Nodes) of true -> maps:get(Index, Nodes, nil); _ -> lists:nth(Index + 1, Nodes) end),
        Res = inorder(Nodes, maps:get("left", Node, nil), Acc),
        Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [maps:get("data", Node, nil)]),
        Res_3 = inorder(Nodes, maps:get("right", Node, nil), Res_2),
        Res_3
    catch {return, Ret} -> Ret end.

size(Nodes_2, Index_2) ->
    try
        case (Index_2 == (0 - 1)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Node_2 = (case erlang:is_map(Nodes_2) of true -> maps:get(Index_2, Nodes_2, nil); _ -> lists:nth(Index_2 + 1, Nodes_2) end),
        ((1 + size(Nodes_2, maps:get("left", Node_2, nil))) + size(Nodes_2, maps:get("right", Node_2, nil)))
    catch {return, Ret} -> Ret end.

depth(Nodes_3, Index_3) ->
    try
        case (Index_3 == (0 - 1)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Node_3 = (case erlang:is_map(Nodes_3) of true -> maps:get(Index_3, Nodes_3, nil); _ -> lists:nth(Index_3 + 1, Nodes_3) end),
        Left_depth = depth(Nodes_3, maps:get("left", Node_3, nil)),
        Right_depth = depth(Nodes_3, maps:get("right", Node_3, nil)),
        case (Left_depth > Right_depth) of
        true -> throw({return, (Left_depth + 1)});
        _ -> ok
    end,
        (Right_depth + 1)
    catch {return, Ret} -> Ret end.

is_full(Nodes_4, Index_4) ->
    try
        case (Index_4 == (0 - 1)) of
        true -> throw({return, true});
        _ -> ok
    end,
        Node_4 = (case erlang:is_map(Nodes_4) of true -> maps:get(Index_4, Nodes_4, nil); _ -> lists:nth(Index_4 + 1, Nodes_4) end),
        case ((maps:get("left", Node_4, nil) == (0 - 1)) andalso (maps:get("right", Node_4, nil) == (0 - 1))) of
        true -> throw({return, true});
        _ -> ok
    end,
        case ((maps:get("left", Node_4, nil) /= (0 - 1)) andalso (maps:get("right", Node_4, nil) /= (0 - 1))) of
        true -> throw({return, (is_full(Nodes_4, maps:get("left", Node_4, nil)) andalso is_full(Nodes_4, maps:get("right", Node_4, nil)))});
        _ -> ok
    end,
        false
    catch {return, Ret} -> Ret end.

small_tree() ->
    try
        Arr = [],
        Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [#{"data" => 2, "left" => 1, "right" => 2}]),
        Arr_3 = lists:append((case Arr_2 of nil -> []; _ -> Arr_2 end), [#{"data" => 1, "left" => (0 - 1), "right" => (0 - 1)}]),
        Arr_4 = lists:append((case Arr_3 of nil -> []; _ -> Arr_3 end), [#{"data" => 3, "left" => (0 - 1), "right" => (0 - 1)}]),
        Arr_4
    catch {return, Ret} -> Ret end.

medium_tree() ->
    try
        Arr_5 = [],
        Arr_6 = lists:append((case Arr_5 of nil -> []; _ -> Arr_5 end), [#{"data" => 4, "left" => 1, "right" => 4}]),
        Arr_7 = lists:append((case Arr_6 of nil -> []; _ -> Arr_6 end), [#{"data" => 2, "left" => 2, "right" => 3}]),
        Arr_8 = lists:append((case Arr_7 of nil -> []; _ -> Arr_7 end), [#{"data" => 1, "left" => (0 - 1), "right" => (0 - 1)}]),
        Arr_9 = lists:append((case Arr_8 of nil -> []; _ -> Arr_8 end), [#{"data" => 3, "left" => (0 - 1), "right" => (0 - 1)}]),
        Arr_10 = lists:append((case Arr_9 of nil -> []; _ -> Arr_9 end), [#{"data" => 5, "left" => (0 - 1), "right" => 5}]),
        Arr_11 = lists:append((case Arr_10 of nil -> []; _ -> Arr_10 end), [#{"data" => 6, "left" => (0 - 1), "right" => 6}]),
        Arr_12 = lists:append((case Arr_11 of nil -> []; _ -> Arr_11 end), [#{"data" => 7, "left" => (0 - 1), "right" => (0 - 1)}]),
        Arr_12
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('small', small_tree()),
    io:format("~ts~n", [mochi_repr(size(erlang:get('small'), 0))]),
    io:format("~ts~n", [mochi_repr(inorder(erlang:get('small'), 0, []))]),
    io:format("~ts~n", [mochi_repr(depth(erlang:get('small'), 0))]),
    io:format("~ts~n", [mochi_repr(is_full(erlang:get('small'), 0))]),
    erlang:put('medium', medium_tree()),
    io:format("~ts~n", [mochi_repr(size(erlang:get('medium'), 0))]),
    io:format("~ts~n", [mochi_repr(inorder(erlang:get('medium'), 0, []))]),
    io:format("~ts~n", [mochi_repr(depth(erlang:get('medium'), 0))]),
    io:format("~ts~n", [mochi_repr(is_full(erlang:get('medium'), 0))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
