#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, combine/3, build_tree/5, new_segment_tree/2, update/3, query_range/3, traverse/1, node_to_string/1, print_traverse/1]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

combine(A, B, Op) ->
    try
        case (Op == 0) of
        true -> throw({return, (A + B)});
        _ -> ok
    end,
        case (Op == 1) of
        true -> case (A > B) of
        true -> throw({return, A});
        _ -> ok
    end,
            throw({return, B});
        _ -> ok
    end,
        case (A < B) of
        true -> throw({return, A});
        _ -> ok
    end,
        B
    catch {return, Ret} -> Ret end.

build_tree(Nodes, Arr, Start, End, Op_2) ->
    try
        case (Start == End) of
        true -> Node = #{"start" => Start, "end" => End, "val" => (case erlang:is_map(Arr) of true -> maps:get(Start, Arr, nil); _ -> lists:nth(Start + 1, Arr) end), "mid" => Start, "left" => -1, "right" => -1},
            New_nodes = lists:append((case Nodes of nil -> []; _ -> Nodes end), [Node]),
            throw({return, #{"nodes" => New_nodes, "idx" => (length(New_nodes) - 1)}}),
            New_nodes_2 = New_nodes,
            Node_2 = Node;
        _ -> New_nodes_2 = nil,
            Node_2 = nil
    end,
        Mid = ((Start + End) div 2),
        Left_res = build_tree(Nodes, Arr, Start, Mid, Op_2),
        Right_res = build_tree(maps:get("nodes", Left_res, nil), Arr, (Mid + 1), End, Op_2),
        Left_node = (case erlang:is_map(maps:get("nodes", Right_res, nil)) of true -> maps:get(maps:get("idx", Left_res, nil), maps:get("nodes", Right_res, nil), nil); _ -> lists:nth(maps:get("idx", Left_res, nil) + 1, maps:get("nodes", Right_res, nil)) end),
        Right_node = (case erlang:is_map(maps:get("nodes", Right_res, nil)) of true -> maps:get(maps:get("idx", Right_res, nil), maps:get("nodes", Right_res, nil), nil); _ -> lists:nth(maps:get("idx", Right_res, nil) + 1, maps:get("nodes", Right_res, nil)) end),
        Val = combine(maps:get("val", Left_node, nil), maps:get("val", Right_node, nil), Op_2),
        Parent = #{"start" => Start, "end" => End, "val" => Val, "mid" => Mid, "left" => maps:get("idx", Left_res, nil), "right" => maps:get("idx", Right_res, nil)},
        New_nodes_3 = lists:append((case maps:get("nodes", Right_res, nil) of nil -> []; _ -> maps:get("nodes", Right_res, nil) end), [Parent]),
        #{"nodes" => New_nodes_3, "idx" => (length(New_nodes_3) - 1)}
    catch {return, Ret} -> Ret end.

new_segment_tree(Collection, Op_3) ->
    try
        #{"arr" => Collection, "op" => Op_3}
    catch {return, Ret} -> Ret end.

update(Tree, I, Val_2) ->
    try
        New_arr = [],
        Idx = 0,
        Fun = fun Fun_loop(I, Idx, New_arr, Tree, Val_2) ->
    case (Idx < length(maps:get("arr", Tree, nil))) of
        true ->
            case (Idx == I) of
        true -> New_arr_2 = lists:append((case New_arr of nil -> []; _ -> New_arr end), [Val_2]),
            New_arr_4 = New_arr_2;
        _ -> New_arr_3 = lists:append((case New_arr of nil -> []; _ -> New_arr end), [(case erlang:is_map(maps:get("arr", Tree, nil)) of true -> maps:get(Idx, maps:get("arr", Tree, nil), nil); _ -> lists:nth(Idx + 1, maps:get("arr", Tree, nil)) end)]),
            New_arr_4 = New_arr_3
    end,
            Idx_2 = (Idx + 1),
            Fun_loop(I, Idx_2, New_arr_4, Tree, Val_2);
        _ -> {I, Idx, New_arr, Tree, Val_2}
    end
end,
{I, Idx_2, New_arr_4, Tree, Val_2} = Fun(I, Idx, New_arr, Tree, Val_2),
        #{"arr" => New_arr_4, "op" => maps:get("op", Tree, nil)}
    catch {return, Ret} -> Ret end.

query_range(Tree_2, I_2, J) ->
    try
        Result = (case erlang:is_map(maps:get("arr", Tree_2, nil)) of true -> maps:get(I_2, maps:get("arr", Tree_2, nil), nil); _ -> lists:nth(I_2 + 1, maps:get("arr", Tree_2, nil)) end),
        Idx_3 = (I_2 + 1),
        Fun_2 = fun Fun_2_loop(I_2, Idx_3, J, Result, Tree_2) ->
    case (Idx_3 =< J) of
        true ->
            Result_2 = combine(Result, (case erlang:is_map(maps:get("arr", Tree_2, nil)) of true -> maps:get(Idx_3, maps:get("arr", Tree_2, nil), nil); _ -> lists:nth(Idx_3 + 1, maps:get("arr", Tree_2, nil)) end), maps:get("op", Tree_2, nil)),
            Idx_4 = (Idx_3 + 1),
            Fun_2_loop(I_2, Idx_4, J, Result_2, Tree_2);
        _ -> {I_2, Idx_3, J, Result, Tree_2}
    end
end,
{I_2, Idx_4, J, Result_2, Tree_2} = Fun_2(I_2, Idx_3, J, Result, Tree_2),
        Result_2
    catch {return, Ret} -> Ret end.

traverse(Tree_3) ->
    try
        case (length(maps:get("arr", Tree_3, nil)) == 0) of
        true -> throw({return, []});
        _ -> ok
    end,
        Res = build_tree([], maps:get("arr", Tree_3, nil), 0, (length(maps:get("arr", Tree_3, nil)) - 1), maps:get("op", Tree_3, nil)),
        maps:get("nodes", Res, nil)
    catch {return, Ret} -> Ret end.

node_to_string(Node_3) ->
    try
        (((((("SegmentTreeNode(start=" ++ mochi_str(maps:get("start", Node_3, nil))) ++ ", end=") ++ mochi_str(maps:get("end", Node_3, nil))) ++ ", val=") ++ mochi_str(maps:get("val", Node_3, nil))) ++ ")")
    catch {return, Ret} -> Ret end.

print_traverse(Tree_4) ->
    try
        Nodes_2 = traverse(Tree_4),
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, Nodes_2, Tree_4) ->
    case (I_3 < length(Nodes_2)) of
        true ->
            io:format("~ts~n", [mochi_repr(node_to_string((case erlang:is_map(Nodes_2) of true -> maps:get(I_3, Nodes_2, nil); _ -> lists:nth(I_3 + 1, Nodes_2) end)))]),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Nodes_2, Tree_4);
        _ -> {I_3, Nodes_2, Tree_4}
    end
end,
{I_4, Nodes_2, Tree_4} = Fun_3(I_3, Nodes_2, Tree_4),
        io:format("~ts~n", [mochi_repr("")]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('arr', [2, 1, 5, 3, 4]),
    Fun_4 = fun Fun_4_loop(List) ->
    case List of
        [] -> {};
        [Op_4|Op_4_rest] ->
            io:format("~ts~n", [mochi_repr("**************************************************")]),
            Tree_5 = new_segment_tree(erlang:get('arr'), Op_4),
            print_traverse(Tree_5),
            Tree_6 = update(Tree_5, 1, 5),
            print_traverse(Tree_6),
            io:format("~ts~n", [mochi_repr(query_range(Tree_6, 3, 4))]),
            io:format("~ts~n", [mochi_repr(query_range(Tree_6, 2, 2))]),
            io:format("~ts~n", [mochi_repr(query_range(Tree_6, 1, 3))]),
            io:format("~ts~n", [mochi_repr("")]),
            Fun_4_loop(Op_4_rest);
        _ -> {}
    end
end,
{} = Fun_4([0, 1, 2]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
