#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, left_child/1, right_child/1, build/3, update_recursive/6, update/3, query_recursive/5, query/2, show_data/0, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.

left_child(Idx) ->
    try
        (Idx * 2)
    catch {return, RetCatch} -> RetCatch end.

right_child(Idx_2) ->
    try
        ((Idx_2 * 2) + 1)
    catch {return, RetCatch} -> RetCatch end.

build(Idx_3, Left, Right) ->
    try
        St_tmp_3 = (case (Left == Right) of
        true -> St_tmp = lists:sublist(erlang:get('st'), Idx_3) ++ [(case erlang:is_map(erlang:get('A')) of true -> maps:get(Left, erlang:get('A'), nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(erlang:get('A')) + Left + 1, erlang:get('A')); _ -> mochi_nth(Left + 1, erlang:get('A')) end end)] ++ lists:nthtail(Idx_3 + 1, erlang:get('st')),
            erlang:put('st', St_tmp),
            Left_val_2 = nil,
            Mid_2 = nil,
            Right_val_2 = nil,
            St_tmp;
        _ -> Mid = mochi_idiv((Left + Right), 2),
            build(left_child(Idx_3), Left, Mid),
            build(right_child(Idx_3), (Mid + 1), Right),
            Left_val = (case erlang:is_map(erlang:get('st')) of true -> maps:get(left_child(Idx_3), erlang:get('st'), nil); _ -> case left_child(Idx_3) < 0 of true -> mochi_nth(erlang:length(erlang:get('st')) + left_child(Idx_3) + 1, erlang:get('st')); _ -> mochi_nth(left_child(Idx_3) + 1, erlang:get('st')) end end),
            Right_val = (case erlang:is_map(erlang:get('st')) of true -> maps:get(right_child(Idx_3), erlang:get('st'), nil); _ -> case right_child(Idx_3) < 0 of true -> mochi_nth(erlang:length(erlang:get('st')) + right_child(Idx_3) + 1, erlang:get('st')); _ -> mochi_nth(right_child(Idx_3) + 1, erlang:get('st')) end end),
            St_tmp_2 = lists:sublist(erlang:get('st'), Idx_3) ++ [(case (Left_val > Right_val) of
    true -> Left_val;
    _ -> Right_val
end)] ++ lists:nthtail(Idx_3 + 1, erlang:get('st')),
            erlang:put('st', St_tmp_2),
            Left_val_2 = Left_val,
            Mid_2 = Mid,
            Right_val_2 = Right_val,
            St_tmp_2
    end),
        nil
    catch {return, RetCatch} -> RetCatch end.

update_recursive(Idx_4, Left_2, Right_2, A, B, Val) ->
    try
        case ((Right_2 < A) orelse (Left_2 > B)) of
        true -> throw({return, true});
        _ -> ok
    end,
        St_tmp_5 = (case (Left_2 == Right_2) of
        true -> St_tmp_4 = lists:sublist(erlang:get('st'), Idx_4) ++ [Val] ++ lists:nthtail(Idx_4 + 1, erlang:get('st')),
            erlang:put('st', St_tmp_4),
            throw({return, true}),
            St_tmp_4;
        _ -> nil
    end),
        Mid_3 = mochi_idiv((Left_2 + Right_2), 2),
        update_recursive(left_child(Idx_4), Left_2, Mid_3, A, B, Val),
        update_recursive(right_child(Idx_4), (Mid_3 + 1), Right_2, A, B, Val),
        Left_val_3 = (case erlang:is_map(erlang:get('st')) of true -> maps:get(left_child(Idx_4), erlang:get('st'), nil); _ -> case left_child(Idx_4) < 0 of true -> mochi_nth(erlang:length(erlang:get('st')) + left_child(Idx_4) + 1, erlang:get('st')); _ -> mochi_nth(left_child(Idx_4) + 1, erlang:get('st')) end end),
        Right_val_3 = (case erlang:is_map(erlang:get('st')) of true -> maps:get(right_child(Idx_4), erlang:get('st'), nil); _ -> case right_child(Idx_4) < 0 of true -> mochi_nth(erlang:length(erlang:get('st')) + right_child(Idx_4) + 1, erlang:get('st')); _ -> mochi_nth(right_child(Idx_4) + 1, erlang:get('st')) end end),
        St_tmp_6 = lists:sublist(erlang:get('st'), Idx_4) ++ [(case (Left_val_3 > Right_val_3) of
    true -> Left_val_3;
    _ -> Right_val_3
end)] ++ lists:nthtail(Idx_4 + 1, erlang:get('st')),
        erlang:put('st', St_tmp_6),
        true
    catch {return, RetCatch} -> RetCatch end.

update(A_2, B_2, Val_2) ->
    try
        update_recursive(1, 0, (erlang:get('N') - 1), (A_2 - 1), (B_2 - 1), Val_2)
    catch {return, RetCatch} -> RetCatch end.

query_recursive(Idx_5, Left_3, Right_3, A_3, B_3) ->
    try
        case ((Right_3 < A_3) orelse (Left_3 > B_3)) of
        true -> throw({return, erlang:get('NEG_INF')});
        _ -> ok
    end,
        case ((Left_3 >= A_3) andalso (Right_3 =< B_3)) of
        true -> throw({return, (case erlang:is_map(erlang:get('st')) of true -> maps:get(Idx_5, erlang:get('st'), nil); _ -> case Idx_5 < 0 of true -> mochi_nth(erlang:length(erlang:get('st')) + Idx_5 + 1, erlang:get('st')); _ -> mochi_nth(Idx_5 + 1, erlang:get('st')) end end)});
        _ -> ok
    end,
        Mid_4 = mochi_idiv((Left_3 + Right_3), 2),
        Q1 = query_recursive(left_child(Idx_5), Left_3, Mid_4, A_3, B_3),
        Q2 = query_recursive(right_child(Idx_5), (Mid_4 + 1), Right_3, A_3, B_3),
        (case (Q1 > Q2) of
    true -> Q1;
    _ -> Q2
end)
    catch {return, RetCatch} -> RetCatch end.

query(A_4, B_4) ->
    try
        query_recursive(1, 0, (erlang:get('N') - 1), (A_4 - 1), (B_4 - 1))
    catch {return, RetCatch} -> RetCatch end.

show_data() ->
    try
        I = 0,
        Show_list = [],
        Fun = fun Fun_loop(I, Show_list) ->
    case (I < erlang:get('N')) of
        true ->
            Show_list_2 = lists:append((case Show_list of nil -> []; _ -> Show_list end), [query((I + 1), (I + 1))]),
            I_2 = (I + 1),
            Fun_loop(I_2, Show_list_2);
        _ -> {I, Show_list}
    end
end,
{I_2, Show_list_2} = Fun(I, Show_list),
        io:format("~s~n", [mochi_format(Show_list_2)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        erlang:put('A', [1, 2, -4, 7, 3, -5, 6, 11, -20, 9, 14, 15, 5, 2, -8]),
        erlang:put('N', erlang:length(erlang:get('A'))),
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3) ->
    case (I_3 < (4 * erlang:get('N'))) of
        true ->
            erlang:put('st', lists:append((case erlang:get('st') of nil -> []; _ -> erlang:get('st') end), [0])),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4);
        _ -> {I_3}
    end
end,
{I_4} = Fun_2(I_3),
        case (erlang:get('N') > 0) of
        true -> build(1, 0, (erlang:get('N') - 1));
        _ -> ok
    end,
        io:format("~s~n", [mochi_format(query(4, 6))]),
        io:format("~s~n", [mochi_format(query(7, 11))]),
        io:format("~s~n", [mochi_format(query(7, 12))]),
        update(1, 3, 111),
        io:format("~s~n", [mochi_format(query(1, 15))]),
        update(7, 8, 235),
        show_data(),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('A', []),
    erlang:put('N', 0),
    erlang:put('st', []),
    erlang:put('NEG_INF', -1000000000),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
