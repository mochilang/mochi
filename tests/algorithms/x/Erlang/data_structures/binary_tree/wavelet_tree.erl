#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_list/2, min_list/1, max_list/1, build_tree/1, rank_till_index/3, rank/4, quantile/4, range_counting/5]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

make_list(Length, Value) ->
    try
        Lst = [],
        I = 0,
        Fun = fun Fun_loop(I, Length, Lst, Value) ->
    case (I < Length) of
        true ->
            Lst_2 = lists:append((case Lst of nil -> []; _ -> Lst end), [Value]),
            I_2 = (I + 1),
            Fun_loop(I_2, Length, Lst_2, Value);
        _ -> {I, Length, Lst, Value}
    end
end,
{I_2, Length, Lst_2, Value} = Fun(I, Length, Lst, Value),
        Lst_2
    catch {return, RetCatch} -> RetCatch end.

min_list(Arr) ->
    try
        M = (case erlang:is_map(Arr) of true -> maps:get(0, Arr, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr) + 0 + 1, Arr); _ -> mochi_nth(0 + 1, Arr) end end),
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(Arr, I_3, M) ->
    case (I_3 < erlang:length(Arr)) of
        true ->
            M_3 = (case ((case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr) + I_3 + 1, Arr); _ -> mochi_nth(I_3 + 1, Arr) end end) < M) of
        true -> M_2 = (case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr) + I_3 + 1, Arr); _ -> mochi_nth(I_3 + 1, Arr) end end),
            M_2;
        _ -> M
    end),
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr, I_4, M_3);
        _ -> {Arr, I_3, M}
    end
end,
{Arr, I_4, M_3} = Fun_2(Arr, I_3, M),
        M_3
    catch {return, RetCatch} -> RetCatch end.

max_list(Arr_2) ->
    try
        M_4 = (case erlang:is_map(Arr_2) of true -> maps:get(0, Arr_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr_2) + 0 + 1, Arr_2); _ -> mochi_nth(0 + 1, Arr_2) end end),
        I_5 = 1,
        Fun_3 = fun Fun_3_loop(Arr_2, I_5, M_4) ->
    case (I_5 < erlang:length(Arr_2)) of
        true ->
            M_6 = (case ((case erlang:is_map(Arr_2) of true -> maps:get(I_5, Arr_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Arr_2) + I_5 + 1, Arr_2); _ -> mochi_nth(I_5 + 1, Arr_2) end end) > M_4) of
        true -> M_5 = (case erlang:is_map(Arr_2) of true -> maps:get(I_5, Arr_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Arr_2) + I_5 + 1, Arr_2); _ -> mochi_nth(I_5 + 1, Arr_2) end end),
            M_5;
        _ -> M_4
    end),
            I_6 = (I_5 + 1),
            Fun_3_loop(Arr_2, I_6, M_6);
        _ -> {Arr_2, I_5, M_4}
    end
end,
{Arr_2, I_6, M_6} = Fun_3(Arr_2, I_5, M_4),
        M_6
    catch {return, RetCatch} -> RetCatch end.

build_tree(Arr_3) ->
    try
        N = #{"minn" => min_list(Arr_3), "maxx" => max_list(Arr_3), "map_left" => make_list(erlang:length(Arr_3), 0), "left" => -1, "right" => -1},
        case (maps:get("minn", N, nil) == maps:get("maxx", N, nil)) of
        true -> erlang:put('nodes', lists:append((case erlang:get('nodes') of nil -> []; _ -> erlang:get('nodes') end), [N])),
            throw({return, (erlang:length(erlang:get('nodes')) - 1)});
        _ -> ok
    end,
        Pivot = mochi_safe_div((maps:get("minn", N, nil) + maps:get("maxx", N, nil)), 2),
        Left_arr = [],
        Right_arr = [],
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Arr_3, I_7, Left_arr, N, Pivot, Right_arr) ->
    case (I_7 < erlang:length(Arr_3)) of
        true ->
            Num = (case erlang:is_map(Arr_3) of true -> maps:get(I_7, Arr_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Arr_3) + I_7 + 1, Arr_3); _ -> mochi_nth(I_7 + 1, Arr_3) end end),
            Right_arr_3 = (case (Num =< Pivot) of
        true -> Left_arr_2 = lists:append((case Left_arr of nil -> []; _ -> Left_arr end), [Num]),
            Left_arr_3 = Left_arr_2,
            Right_arr;
        _ -> Right_arr_2 = lists:append((case Right_arr of nil -> []; _ -> Right_arr end), [Num]),
            Left_arr_3 = Left_arr,
            Right_arr_2
    end),
            Ml = maps:get("map_left", N, nil),
            Ml_2 = lists:sublist(Ml, I_7) ++ [erlang:length(Left_arr_3)] ++ lists:nthtail(I_7 + 1, Ml),
            N_2 = maps:put("map_left", Ml_2, N),
            I_8 = (I_7 + 1),
            Fun_4_loop(Arr_3, I_8, Left_arr_3, N_2, Pivot, Right_arr_3);
        _ -> {Arr_3, I_7, Left_arr, N, Pivot, Right_arr}
    end
end,
{Arr_3, I_8, Left_arr_3, N_2, Pivot, Right_arr_3} = Fun_4(Arr_3, I_7, Left_arr, N, Pivot, Right_arr),
        N_4 = (case (erlang:length(Left_arr_3) > 0) of
        true -> N_3 = maps:put("left", build_tree(Left_arr_3), N_2),
            N_3;
        _ -> N_2
    end),
        N_6 = (case (erlang:length(Right_arr_3) > 0) of
        true -> N_5 = maps:put("right", build_tree(Right_arr_3), N_4),
            N_5;
        _ -> N_4
    end),
        erlang:put('nodes', lists:append((case erlang:get('nodes') of nil -> []; _ -> erlang:get('nodes') end), [N_6])),
        (erlang:length(erlang:get('nodes')) - 1)
    catch {return, RetCatch} -> RetCatch end.

rank_till_index(Node_idx, Num_2, Index) ->
    try
        case ((Index < 0) orelse (Node_idx < 0)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Node = (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(Node_idx, erlang:get('nodes'), nil); _ -> case Node_idx < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + Node_idx + 1, erlang:get('nodes')); _ -> mochi_nth(Node_idx + 1, erlang:get('nodes')) end end),
        case (maps:get("minn", Node, nil) == maps:get("maxx", Node, nil)) of
        true -> case (maps:get("minn", Node, nil) == Num_2) of
        true -> throw({return, (Index + 1)});
        _ -> throw({return, 0})
    end;
        _ -> ok
    end,
        Pivot_2 = mochi_safe_div((maps:get("minn", Node, nil) + maps:get("maxx", Node, nil)), 2),
        case (Num_2 =< Pivot_2) of
        true -> throw({return, rank_till_index(maps:get("left", Node, nil), Num_2, ((case erlang:is_map(maps:get("map_left", Node, nil)) of true -> maps:get(Index, maps:get("map_left", Node, nil), nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(maps:get("map_left", Node, nil)) + Index + 1, maps:get("map_left", Node, nil)); _ -> mochi_nth(Index + 1, maps:get("map_left", Node, nil)) end end) - 1))});
        _ -> throw({return, rank_till_index(maps:get("right", Node, nil), Num_2, (Index - (case erlang:is_map(maps:get("map_left", Node, nil)) of true -> maps:get(Index, maps:get("map_left", Node, nil), nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(maps:get("map_left", Node, nil)) + Index + 1, maps:get("map_left", Node, nil)); _ -> mochi_nth(Index + 1, maps:get("map_left", Node, nil)) end end)))})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

rank(Node_idx_2, Num_3, Start, End) ->
    try
        case (Start > End) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Rank_till_end = rank_till_index(Node_idx_2, Num_3, End),
        Rank_before_start = rank_till_index(Node_idx_2, Num_3, (Start - 1)),
        (Rank_till_end - Rank_before_start)
    catch {return, RetCatch} -> RetCatch end.

quantile(Node_idx_3, Index_2, Start_2, End_2) ->
    try
        case (((Index_2 > (End_2 - Start_2)) orelse (Start_2 > End_2)) orelse (Node_idx_3 < 0)) of
        true -> throw({return, -1});
        _ -> ok
    end,
        Node_2 = (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(Node_idx_3, erlang:get('nodes'), nil); _ -> case Node_idx_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + Node_idx_3 + 1, erlang:get('nodes')); _ -> mochi_nth(Node_idx_3 + 1, erlang:get('nodes')) end end),
        case (maps:get("minn", Node_2, nil) == maps:get("maxx", Node_2, nil)) of
        true -> throw({return, maps:get("minn", Node_2, nil)});
        _ -> ok
    end,
        Left_start = (case (Start_2 == 0) of
    true -> 0;
    _ -> (case erlang:is_map(maps:get("map_left", Node_2, nil)) of true -> maps:get((Start_2 - 1), maps:get("map_left", Node_2, nil), nil); _ -> case (Start_2 - 1) < 0 of true -> mochi_nth(erlang:length(maps:get("map_left", Node_2, nil)) + (Start_2 - 1) + 1, maps:get("map_left", Node_2, nil)); _ -> mochi_nth((Start_2 - 1) + 1, maps:get("map_left", Node_2, nil)) end end)
end),
        Num_left = ((case erlang:is_map(maps:get("map_left", Node_2, nil)) of true -> maps:get(End_2, maps:get("map_left", Node_2, nil), nil); _ -> case End_2 < 0 of true -> mochi_nth(erlang:length(maps:get("map_left", Node_2, nil)) + End_2 + 1, maps:get("map_left", Node_2, nil)); _ -> mochi_nth(End_2 + 1, maps:get("map_left", Node_2, nil)) end end) - Left_start),
        case (Num_left > Index_2) of
        true -> throw({return, quantile(maps:get("left", Node_2, nil), Index_2, Left_start, ((case erlang:is_map(maps:get("map_left", Node_2, nil)) of true -> maps:get(End_2, maps:get("map_left", Node_2, nil), nil); _ -> case End_2 < 0 of true -> mochi_nth(erlang:length(maps:get("map_left", Node_2, nil)) + End_2 + 1, maps:get("map_left", Node_2, nil)); _ -> mochi_nth(End_2 + 1, maps:get("map_left", Node_2, nil)) end end) - 1))});
        _ -> throw({return, quantile(maps:get("right", Node_2, nil), (Index_2 - Num_left), (Start_2 - Left_start), (End_2 - (case erlang:is_map(maps:get("map_left", Node_2, nil)) of true -> maps:get(End_2, maps:get("map_left", Node_2, nil), nil); _ -> case End_2 < 0 of true -> mochi_nth(erlang:length(maps:get("map_left", Node_2, nil)) + End_2 + 1, maps:get("map_left", Node_2, nil)); _ -> mochi_nth(End_2 + 1, maps:get("map_left", Node_2, nil)) end end)))})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

range_counting(Node_idx_4, Start_3, End_3, Start_num, End_num) ->
    try
        case (((Start_3 > End_3) orelse (Node_idx_4 < 0)) orelse (Start_num > End_num)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Node_3 = (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(Node_idx_4, erlang:get('nodes'), nil); _ -> case Node_idx_4 < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + Node_idx_4 + 1, erlang:get('nodes')); _ -> mochi_nth(Node_idx_4 + 1, erlang:get('nodes')) end end),
        case ((maps:get("minn", Node_3, nil) > End_num) orelse (maps:get("maxx", Node_3, nil) < Start_num)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case ((Start_num =< maps:get("minn", Node_3, nil)) andalso (maps:get("maxx", Node_3, nil) =< End_num)) of
        true -> throw({return, ((End_3 - Start_3) + 1)});
        _ -> ok
    end,
        Left = range_counting(maps:get("left", Node_3, nil), (case (Start_3 == 0) of
    true -> 0;
    _ -> (case erlang:is_map(maps:get("map_left", Node_3, nil)) of true -> maps:get((Start_3 - 1), maps:get("map_left", Node_3, nil), nil); _ -> case (Start_3 - 1) < 0 of true -> mochi_nth(erlang:length(maps:get("map_left", Node_3, nil)) + (Start_3 - 1) + 1, maps:get("map_left", Node_3, nil)); _ -> mochi_nth((Start_3 - 1) + 1, maps:get("map_left", Node_3, nil)) end end)
end), ((case erlang:is_map(maps:get("map_left", Node_3, nil)) of true -> maps:get(End_3, maps:get("map_left", Node_3, nil), nil); _ -> case End_3 < 0 of true -> mochi_nth(erlang:length(maps:get("map_left", Node_3, nil)) + End_3 + 1, maps:get("map_left", Node_3, nil)); _ -> mochi_nth(End_3 + 1, maps:get("map_left", Node_3, nil)) end end) - 1), Start_num, End_num),
        Right = range_counting(maps:get("right", Node_3, nil), (Start_3 - (case (Start_3 == 0) of
    true -> 0;
    _ -> (case erlang:is_map(maps:get("map_left", Node_3, nil)) of true -> maps:get((Start_3 - 1), maps:get("map_left", Node_3, nil), nil); _ -> case (Start_3 - 1) < 0 of true -> mochi_nth(erlang:length(maps:get("map_left", Node_3, nil)) + (Start_3 - 1) + 1, maps:get("map_left", Node_3, nil)); _ -> mochi_nth((Start_3 - 1) + 1, maps:get("map_left", Node_3, nil)) end end)
end)), (End_3 - (case erlang:is_map(maps:get("map_left", Node_3, nil)) of true -> maps:get(End_3, maps:get("map_left", Node_3, nil), nil); _ -> case End_3 < 0 of true -> mochi_nth(erlang:length(maps:get("map_left", Node_3, nil)) + End_3 + 1, maps:get("map_left", Node_3, nil)); _ -> mochi_nth(End_3 + 1, maps:get("map_left", Node_3, nil)) end end)), Start_num, End_num),
        (Left + Right)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('nodes', []),
    erlang:put('test_array', [2, 1, 4, 5, 6, 0, 8, 9, 1, 2, 0, 6, 4, 2, 0, 6, 5, 3, 2, 7]),
    erlang:put('root', build_tree(erlang:get('test_array'))),
    io:format("~s~n", [mochi_format(("rank_till_index 6 at 6 -> " ++ mochi_str(rank_till_index(erlang:get('root'), 6, 6))))]),
    io:format("~s~n", [mochi_format(("rank 6 in [3,13] -> " ++ mochi_str(rank(erlang:get('root'), 6, 3, 13))))]),
    io:format("~s~n", [mochi_format(("quantile index 2 in [2,5] -> " ++ mochi_str(quantile(erlang:get('root'), 2, 2, 5))))]),
    io:format("~s~n", [mochi_format(("range_counting [3,7] in [1,10] -> " ++ mochi_str(range_counting(erlang:get('root'), 1, 10, 3, 7))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
