#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, new_node/1, build_tree/0, flatten/1, display/1]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

new_node(Value) ->
    try
        erlang:put('node_data', lists:append((case erlang:get('node_data') of nil -> []; _ -> erlang:get('node_data') end), [Value])),
        erlang:put('left_child', lists:append((case erlang:get('left_child') of nil -> []; _ -> erlang:get('left_child') end), [0])),
        erlang:put('right_child', lists:append((case erlang:get('right_child') of nil -> []; _ -> erlang:get('right_child') end), [0])),
        (erlang:length(erlang:get('node_data')) - 1)
    catch {return, RetCatch} -> RetCatch end.

build_tree() ->
    try
        Root = new_node(1),
        N2 = new_node(2),
        N5 = new_node(5),
        N3 = new_node(3),
        N4 = new_node(4),
        N6 = new_node(6),
        Left_child_tmp = lists:sublist(erlang:get('left_child'), Root) ++ [N2] ++ lists:nthtail(Root + 1, erlang:get('left_child')),
        erlang:put('left_child', Left_child_tmp),
        Right_child_tmp = lists:sublist(erlang:get('right_child'), Root) ++ [N5] ++ lists:nthtail(Root + 1, erlang:get('right_child')),
        erlang:put('right_child', Right_child_tmp),
        Left_child_tmp_2 = lists:sublist(erlang:get('left_child'), N2) ++ [N3] ++ lists:nthtail(N2 + 1, erlang:get('left_child')),
        erlang:put('left_child', Left_child_tmp_2),
        Right_child_tmp_2 = lists:sublist(erlang:get('right_child'), N2) ++ [N4] ++ lists:nthtail(N2 + 1, erlang:get('right_child')),
        erlang:put('right_child', Right_child_tmp_2),
        Right_child_tmp_3 = lists:sublist(erlang:get('right_child'), N5) ++ [N6] ++ lists:nthtail(N5 + 1, erlang:get('right_child')),
        erlang:put('right_child', Right_child_tmp_3),
        Root
    catch {return, RetCatch} -> RetCatch end.

flatten(Root_2) ->
    try
        case (Root_2 == 0) of
        true -> throw({return, []});
        _ -> ok
    end,
        Res = [(case erlang:is_map(erlang:get('node_data')) of true -> maps:get(Root_2, erlang:get('node_data'), nil); _ -> case Root_2 < 0 of true -> mochi_nth(erlang:length(erlang:get('node_data')) + Root_2 + 1, erlang:get('node_data')); _ -> mochi_nth(Root_2 + 1, erlang:get('node_data')) end end)],
        Left_vals = flatten((case erlang:is_map(erlang:get('left_child')) of true -> maps:get(Root_2, erlang:get('left_child'), nil); _ -> case Root_2 < 0 of true -> mochi_nth(erlang:length(erlang:get('left_child')) + Root_2 + 1, erlang:get('left_child')); _ -> mochi_nth(Root_2 + 1, erlang:get('left_child')) end end)),
        Right_vals = flatten((case erlang:is_map(erlang:get('right_child')) of true -> maps:get(Root_2, erlang:get('right_child'), nil); _ -> case Root_2 < 0 of true -> mochi_nth(erlang:length(erlang:get('right_child')) + Root_2 + 1, erlang:get('right_child')); _ -> mochi_nth(Root_2 + 1, erlang:get('right_child')) end end)),
        I = 0,
        Fun = fun Fun_loop(I, Left_vals, Res, Right_vals, Root_2) ->
    case (I < erlang:length(Left_vals)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Left_vals) of true -> maps:get(I, Left_vals, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Left_vals) + I + 1, Left_vals); _ -> mochi_nth(I + 1, Left_vals) end end)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Left_vals, Res_2, Right_vals, Root_2);
        _ -> {I, Left_vals, Res, Right_vals, Root_2}
    end
end,
{I_2, Left_vals, Res_2, Right_vals, Root_2} = Fun(I, Left_vals, Res, Right_vals, Root_2),
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Left_vals, Res_2, Right_vals, Root_2) ->
    case (I_3 < erlang:length(Right_vals)) of
        true ->
            Res_3 = lists:append((case Res_2 of nil -> []; _ -> Res_2 end), [(case erlang:is_map(Right_vals) of true -> maps:get(I_3, Right_vals, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Right_vals) + I_3 + 1, Right_vals); _ -> mochi_nth(I_3 + 1, Right_vals) end end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Left_vals, Res_3, Right_vals, Root_2);
        _ -> {I_3, Left_vals, Res_2, Right_vals, Root_2}
    end
end,
{I_4, Left_vals, Res_3, Right_vals, Root_2} = Fun_2(I_3, Left_vals, Res_2, Right_vals, Root_2),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

display(Values) ->
    try
        S = "",
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, S, Values) ->
    case (I_5 < erlang:length(Values)) of
        true ->
            S_4 = (case (I_5 == 0) of
        true -> S_2 = mochi_str((case erlang:is_map(Values) of true -> maps:get(I_5, Values, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Values) + I_5 + 1, Values); _ -> mochi_nth(I_5 + 1, Values) end end)),
            S_2;
        _ -> S_3 = ((S ++ " ") ++ mochi_str((case erlang:is_map(Values) of true -> maps:get(I_5, Values, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Values) + I_5 + 1, Values); _ -> mochi_nth(I_5 + 1, Values) end end))),
            S_3
    end),
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, S_4, Values);
        _ -> {I_5, S, Values}
    end
end,
{I_6, S_4, Values} = Fun_3(I_5, S, Values),
        io:format("~s~n", [mochi_format(S_4)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('node_data', [0]),
    erlang:put('left_child', [0]),
    erlang:put('right_child', [0]),
    io:format("~s~n", [mochi_format("Flattened Linked List:")]),
    erlang:put('root', build_tree()),
    erlang:put('vals', flatten(erlang:get('root'))),
    display(erlang:get('vals')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
