#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, count_nodes/2, count_coins/2, iabs/1, dfs/2, distribute_coins/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

count_nodes(Nodes, Idx) ->
    try
        case (Idx == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Node = (case erlang:is_map(Nodes) of true -> maps:get(Idx, Nodes, nil); _ -> lists:nth(Idx + 1, Nodes) end),
        ((count_nodes(Nodes, maps:get("left", Node, nil)) + count_nodes(Nodes, maps:get("right", Node, nil))) + 1)
    catch {return, Ret} -> Ret end.

count_coins(Nodes_2, Idx_2) ->
    try
        case (Idx_2 == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Node_2 = (case erlang:is_map(Nodes_2) of true -> maps:get(Idx_2, Nodes_2, nil); _ -> lists:nth(Idx_2 + 1, Nodes_2) end),
        ((count_coins(Nodes_2, maps:get("left", Node_2, nil)) + count_coins(Nodes_2, maps:get("right", Node_2, nil))) + maps:get("data", Node_2, nil))
    catch {return, Ret} -> Ret end.

iabs(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

dfs(Nodes_3, Idx_3) ->
    try
        case (Idx_3 == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Node_3 = (case erlang:is_map(Nodes_3) of true -> maps:get(Idx_3, Nodes_3, nil); _ -> lists:nth(Idx_3 + 1, Nodes_3) end),
        Left_excess = dfs(Nodes_3, maps:get("left", Node_3, nil)),
        Right_excess = dfs(Nodes_3, maps:get("right", Node_3, nil)),
        Abs_left = iabs(Left_excess),
        Abs_right = iabs(Right_excess),
        erlang:put('total_moves', ((erlang:get('total_moves') + Abs_left) + Abs_right)),
        (((maps:get("data", Node_3, nil) + Left_excess) + Right_excess) - 1)
    catch {return, Ret} -> Ret end.

distribute_coins(Nodes_4, Root) ->
    try
        case (Root == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case (count_nodes(Nodes_4, Root) /= count_coins(Nodes_4, Root)) of
        true -> erlang:error("The nodes number should be same as the number of coins");
        _ -> ok
    end,
        erlang:put('total_moves', 0),
        dfs(Nodes_4, Root),
        erlang:get('total_moves')
    catch {return, Ret} -> Ret end.

main() ->
    try
        Example1 = [#{"data" => 0, "left" => 0, "right" => 0}, #{"data" => 3, "left" => 2, "right" => 3}, #{"data" => 0, "left" => 0, "right" => 0}, #{"data" => 0, "left" => 0, "right" => 0}],
        Example2 = [#{"data" => 0, "left" => 0, "right" => 0}, #{"data" => 0, "left" => 2, "right" => 3}, #{"data" => 3, "left" => 0, "right" => 0}, #{"data" => 0, "left" => 0, "right" => 0}],
        Example3 = [#{"data" => 0, "left" => 0, "right" => 0}, #{"data" => 0, "left" => 2, "right" => 3}, #{"data" => 0, "left" => 0, "right" => 0}, #{"data" => 3, "left" => 0, "right" => 0}],
        io:format("~ts~n", [mochi_repr(distribute_coins(Example1, 1))]),
        io:format("~ts~n", [mochi_repr(distribute_coins(Example2, 1))]),
        io:format("~ts~n", [mochi_repr(distribute_coins(Example3, 1))]),
        io:format("~ts~n", [mochi_repr(distribute_coins([#{"data" => 0, "left" => 0, "right" => 0}], 0))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('total_moves', 0),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
