#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, count_nodes/2, count_coins/2, iabs/1, dfs/2, distribute_coins/2, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).

count_nodes(Nodes, Idx) ->
    try
        case (Idx == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Node = (case erlang:is_map(Nodes) of true -> maps:get(Idx, Nodes, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Nodes) + Idx + 1, Nodes); _ -> mochi_nth(Idx + 1, Nodes) end end),
        ((count_nodes(Nodes, maps:get("left", Node, nil)) + count_nodes(Nodes, maps:get("right", Node, nil))) + 1)
    catch {return, RetCatch} -> RetCatch end.

count_coins(Nodes_2, Idx_2) ->
    try
        case (Idx_2 == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Node_2 = (case erlang:is_map(Nodes_2) of true -> maps:get(Idx_2, Nodes_2, nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(Nodes_2) + Idx_2 + 1, Nodes_2); _ -> mochi_nth(Idx_2 + 1, Nodes_2) end end),
        ((count_coins(Nodes_2, maps:get("left", Node_2, nil)) + count_coins(Nodes_2, maps:get("right", Node_2, nil))) + maps:get("data", Node_2, nil))
    catch {return, RetCatch} -> RetCatch end.

iabs(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

dfs(Nodes_3, Idx_3) ->
    try
        case (Idx_3 == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Node_3 = (case erlang:is_map(Nodes_3) of true -> maps:get(Idx_3, Nodes_3, nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(Nodes_3) + Idx_3 + 1, Nodes_3); _ -> mochi_nth(Idx_3 + 1, Nodes_3) end end),
        Left_excess = dfs(Nodes_3, maps:get("left", Node_3, nil)),
        Right_excess = dfs(Nodes_3, maps:get("right", Node_3, nil)),
        Abs_left = iabs(Left_excess),
        Abs_right = iabs(Right_excess),
        erlang:put('total_moves', ((erlang:get('total_moves') + Abs_left) + Abs_right)),
        (((maps:get("data", Node_3, nil) + Left_excess) + Right_excess) - 1)
    catch {return, RetCatch} -> RetCatch end.

distribute_coins(Nodes_4, Root) ->
    try
        case (Root == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case (count_nodes(Nodes_4, Root) /= count_coins(Nodes_4, Root)) of
        true -> erlang:error({panic, "The nodes number should be same as the number of coins"});
        _ -> ok
    end,
        erlang:put('total_moves', 0),
        dfs(Nodes_4, Root),
        erlang:get('total_moves')
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Example1 = [#{"data" => 0, "left" => 0, "right" => 0}, #{"data" => 3, "left" => 2, "right" => 3}, #{"data" => 0, "left" => 0, "right" => 0}, #{"data" => 0, "left" => 0, "right" => 0}],
        Example2 = [#{"data" => 0, "left" => 0, "right" => 0}, #{"data" => 0, "left" => 2, "right" => 3}, #{"data" => 3, "left" => 0, "right" => 0}, #{"data" => 0, "left" => 0, "right" => 0}],
        Example3 = [#{"data" => 0, "left" => 0, "right" => 0}, #{"data" => 0, "left" => 2, "right" => 3}, #{"data" => 0, "left" => 0, "right" => 0}, #{"data" => 3, "left" => 0, "right" => 0}],
        io:format("~s~n", [mochi_format(distribute_coins(Example1, 1))]),
        io:format("~s~n", [mochi_format(distribute_coins(Example2, 1))]),
        io:format("~s~n", [mochi_format(distribute_coins(Example3, 1))]),
        io:format("~s~n", [mochi_format(distribute_coins([#{"data" => 0, "left" => 0, "right" => 0}], 0))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('total_moves', 0),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
