#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, zeros/1, update/3, query/3]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).

zeros(N) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, N, Res) ->
    case (I < N) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [0]),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Res_2);
        _ -> {I, N, Res}
    end
end,
{I_2, N, Res_2} = Fun(I, N, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

update(Arr, Idx, Value) ->
    try
        Arr_2 = lists:sublist(Arr, Idx) ++ [Value] ++ lists:nthtail(Idx + 1, Arr),
        {nil, Arr_2}
    catch {return, RetCatch} -> RetCatch end.

query(Arr_3, Left, Right) ->
    try
        Result = 0,
        I_3 = Left,
        Fun_2 = fun Fun_2_loop(Arr_3, I_3, Left, Result, Right) ->
    case (I_3 < Right) of
        true ->
            Result_3 = (case ((case erlang:is_map(Arr_3) of true -> maps:get(I_3, Arr_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr_3) + I_3 + 1, Arr_3); _ -> mochi_nth(I_3 + 1, Arr_3) end end) > Result) of
        true -> Result_2 = (case erlang:is_map(Arr_3) of true -> maps:get(I_3, Arr_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr_3) + I_3 + 1, Arr_3); _ -> mochi_nth(I_3 + 1, Arr_3) end end),
            Result_2;
        _ -> Result
    end),
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr_3, I_4, Left, Result_3, Right);
        _ -> {Arr_3, I_3, Left, Result, Right}
    end
end,
{Arr_3, I_4, Left, Result_3, Right} = Fun_2(Arr_3, I_3, Left, Result, Right),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('arr', [0, 0, 0, 0, 0]),
    io:format("~s~n", [mochi_format(query(erlang:get('arr'), 0, 5))]),
    {_, Arr_4} = update(erlang:get('arr'), 4, 100),
    erlang:put('arr', Arr_4),
    io:format("~s~n", [mochi_format(query(erlang:get('arr'), 0, 5))]),
    {_, Arr_5} = update(erlang:get('arr'), 4, 0),
    erlang:put('arr', Arr_5),
    {_, Arr_6} = update(erlang:get('arr'), 2, 20),
    erlang:put('arr', Arr_6),
    io:format("~s~n", [mochi_format(query(erlang:get('arr'), 0, 5))]),
    {_, Arr_7} = update(erlang:get('arr'), 4, 10),
    erlang:put('arr', Arr_7),
    io:format("~s~n", [mochi_format(query(erlang:get('arr'), 2, 5))]),
    io:format("~s~n", [mochi_format(query(erlang:get('arr'), 1, 5))]),
    {_, Arr_8} = update(erlang:get('arr'), 2, 0),
    erlang:put('arr', Arr_8),
    io:format("~s~n", [mochi_format(query(erlang:get('arr'), 0, 5))]),
    erlang:put('arr', zeros(10000)),
    {_, Arr_9} = update(erlang:get('arr'), 255, 30),
    erlang:put('arr', Arr_9),
    io:format("~s~n", [mochi_format(query(erlang:get('arr'), 0, 10000))]),
    erlang:put('arr', zeros(6)),
    {_, Arr_10} = update(erlang:get('arr'), 5, 1),
    erlang:put('arr', Arr_10),
    io:format("~s~n", [mochi_format(query(erlang:get('arr'), 5, 6))]),
    erlang:put('arr', zeros(6)),
    {_, Arr_11} = update(erlang:get('arr'), 0, 1000),
    erlang:put('arr', Arr_11),
    io:format("~s~n", [mochi_format(query(erlang:get('arr'), 0, 1))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
