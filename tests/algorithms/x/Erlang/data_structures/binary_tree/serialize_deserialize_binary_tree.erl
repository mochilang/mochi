#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, digit/1, to_int/1, split/2, serialize/1, build/2, deserialize/1, five_tree/0, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

digit(Ch) ->
    try
        Digits = "0123456789",
        I = 0,
        Fun = fun Fun_loop(Ch, Digits, I) ->
    case (I < erlang:length(Digits)) of
        true ->
            case (string:substr(Digits, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, Digits, I_2);
        _ -> {Ch, Digits, I}
    end
end,
{Ch, Digits, I_2} = Fun(Ch, Digits, I),
        0
    catch {return, RetCatch} -> RetCatch end.

to_int(S) ->
    try
        I_3 = 0,
        Sign = 1,
        Sign_3 = (case ((erlang:length(S) > 0) andalso (string:substr(S, 0 + 1, (1 - 0)) == "-")) of
        true -> Sign_2 = -1,
            I_4 = 1,
            I_5 = I_4,
            Sign_2;
        _ -> I_5 = I_3,
            Sign
    end),
        Num = 0,
        Fun_2 = fun Fun_2_loop(I_5, Num, S, Sign_3) ->
    case (I_5 < erlang:length(S)) of
        true ->
            Ch_2 = string:substr(S, I_5 + 1, ((I_5 + 1) - I_5)),
            Num_2 = ((Num * 10) + digit(Ch_2)),
            I_6 = (I_5 + 1),
            Fun_2_loop(I_6, Num_2, S, Sign_3);
        _ -> {I_5, Num, S, Sign_3}
    end
end,
{I_6, Num_2, S, Sign_3} = Fun_2(I_5, Num, S, Sign_3),
        (Sign_3 * Num_2)
    catch {return, RetCatch} -> RetCatch end.

split(S_2, Sep) ->
    try
        Res = [],
        Current = "",
        I_7 = 0,
        Fun_3 = fun Fun_3_loop(Current, I_7, Res, S_2, Sep) ->
    case (I_7 < erlang:length(S_2)) of
        true ->
            Ch_3 = string:substr(S_2, I_7 + 1, ((I_7 + 1) - I_7)),
            Res_3 = (case (Ch_3 == Sep) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Current]),
            Current_2 = "",
            Current_4 = Current_2,
            Res_2;
        _ -> Current_3 = (Current ++ Ch_3),
            Current_4 = Current_3,
            Res
    end),
            I_8 = (I_7 + 1),
            Fun_3_loop(Current_4, I_8, Res_3, S_2, Sep);
        _ -> {Current, I_7, Res, S_2, Sep}
    end
end,
{Current_4, I_8, Res_3, S_2, Sep} = Fun_3(Current, I_7, Res, S_2, Sep),
        Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Current_4]),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

serialize(Node) ->
    try
        (case Node of
    #{"tag" := "empty"} -> "null";
    #{"tag" := "node", "left" := L, "value" := V, "right" := R} -> ((((mochi_str(V) ++ ",") ++ serialize(L)) ++ ",") ++ serialize(R))
end)
    catch {return, RetCatch} -> RetCatch end.

build(Nodes, Idx) ->
    try
        Value = (case erlang:is_map(Nodes) of true -> maps:get(Idx, Nodes, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Nodes) + Idx + 1, Nodes); _ -> mochi_nth(Idx + 1, Nodes) end end),
        case (Value == "null") of
        true -> throw({return, #{"node" => #{"tag" => "empty"}, "next" => (Idx + 1)}});
        _ -> ok
    end,
        Left_res = build(Nodes, (Idx + 1)),
        Right_res = build(Nodes, maps:get("next", Left_res, nil)),
        Node_2 = #{"tag" => "node", "left" => maps:get("node", Left_res, nil), "value" => to_int(Value), "right" => maps:get("node", Right_res, nil)},
        #{"node" => Node_2, "next" => maps:get("next", Right_res, nil)}
    catch {return, RetCatch} -> RetCatch end.

deserialize(Data) ->
    try
        Nodes_2 = string:tokens(Data, ","),
        Res_5 = build(Nodes_2, 0),
        maps:get("node", Res_5, nil)
    catch {return, RetCatch} -> RetCatch end.

five_tree() ->
    try
        Left_child = #{"tag" => "node", "value" => 2, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "empty"}},
        Right_left = #{"tag" => "node", "value" => 4, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "empty"}},
        Right_right = #{"tag" => "node", "value" => 5, "left" => #{"tag" => "empty"}, "right" => #{"tag" => "empty"}},
        Right_child = #{"tag" => "node", "value" => 3, "left" => Right_left, "right" => Right_right},
        #{"tag" => "node", "value" => 1, "left" => Left_child, "right" => Right_child}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Root = five_tree(),
        Serial = serialize(Root),
        io:format("~s~n", [mochi_format(Serial)]),
        Rebuilt = deserialize(Serial),
        Serial2 = serialize(Rebuilt),
        io:format("~s~n", [mochi_format(Serial2)]),
        io:format("~s~n", [mochi_format((Serial == Serial2))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
