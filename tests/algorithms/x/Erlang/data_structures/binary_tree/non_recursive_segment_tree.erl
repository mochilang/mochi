#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, build/2, update/5, query/5, add/2, min_int/2, max_int/2]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

build(Arr, Combine) ->
    try
        N = erlang:length(Arr),
        St = [],
        I = 0,
        Fun = fun Fun_loop(Arr, Combine, I, N, St) ->
    case (I < (2 * N)) of
        true ->
            St_2 = lists:append((case St of nil -> []; _ -> St end), [0]),
            I_2 = (I + 1),
            Fun_loop(Arr, Combine, I_2, N, St_2);
        _ -> {Arr, Combine, I, N, St}
    end
end,
{Arr, Combine, I_2, N, St_2} = Fun(Arr, Combine, I, N, St),
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Arr, Combine, I_3, N, St_2) ->
    case (I_3 < N) of
        true ->
            St_3 = lists:sublist(St_2, (N + I_3)) ++ [(case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr) + I_3 + 1, Arr); _ -> mochi_nth(I_3 + 1, Arr) end end)] ++ lists:nthtail((N + I_3) + 1, St_2),
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr, Combine, I_4, N, St_3);
        _ -> {Arr, Combine, I_3, N, St_2}
    end
end,
{Arr, Combine, I_4, N, St_3} = Fun_2(Arr, Combine, I_3, N, St_2),
        I_5 = (N - 1),
        Fun_3 = fun Fun_3_loop(Arr, Combine, I_5, N, St_3) ->
    case (I_5 > 0) of
        true ->
            St_4 = lists:sublist(St_3, I_5) ++ [Combine((case erlang:is_map(St_3) of true -> maps:get((I_5 * 2), St_3, nil); _ -> case (I_5 * 2) < 0 of true -> mochi_nth(erlang:length(St_3) + (I_5 * 2) + 1, St_3); _ -> mochi_nth((I_5 * 2) + 1, St_3) end end), (case erlang:is_map(St_3) of true -> maps:get(((I_5 * 2) + 1), St_3, nil); _ -> case ((I_5 * 2) + 1) < 0 of true -> mochi_nth(erlang:length(St_3) + ((I_5 * 2) + 1) + 1, St_3); _ -> mochi_nth(((I_5 * 2) + 1) + 1, St_3) end end))] ++ lists:nthtail(I_5 + 1, St_3),
            I_6 = (I_5 - 1),
            Fun_3_loop(Arr, Combine, I_6, N, St_4);
        _ -> {Arr, Combine, I_5, N, St_3}
    end
end,
{Arr, Combine, I_6, N, St_4} = Fun_3(Arr, Combine, I_5, N, St_3),
        St_4
    catch {return, RetCatch} -> RetCatch end.

update(St_5, N_2, Combine_2, P, V) ->
    try
        Idx = (P + N_2),
        St_6 = lists:sublist(St_5, Idx) ++ [V] ++ lists:nthtail(Idx + 1, St_5),
        Fun_4 = fun Fun_4_loop(Combine_2, Idx, N_2, P, St_6, V) ->
    case (Idx > 1) of
        true ->
            Idx_2 = mochi_to_int(mochi_idiv(Idx, 2)),
            St_7 = lists:sublist(St_6, Idx_2) ++ [Combine_2((case erlang:is_map(St_6) of true -> maps:get((Idx_2 * 2), St_6, nil); _ -> case (Idx_2 * 2) < 0 of true -> mochi_nth(erlang:length(St_6) + (Idx_2 * 2) + 1, St_6); _ -> mochi_nth((Idx_2 * 2) + 1, St_6) end end), (case erlang:is_map(St_6) of true -> maps:get(((Idx_2 * 2) + 1), St_6, nil); _ -> case ((Idx_2 * 2) + 1) < 0 of true -> mochi_nth(erlang:length(St_6) + ((Idx_2 * 2) + 1) + 1, St_6); _ -> mochi_nth(((Idx_2 * 2) + 1) + 1, St_6) end end))] ++ lists:nthtail(Idx_2 + 1, St_6),
            Fun_4_loop(Combine_2, Idx_2, N_2, P, St_7, V);
        _ -> {Combine_2, Idx, N_2, P, St_6, V}
    end
end,
{Combine_2, Idx_2, N_2, P, St_7, V} = Fun_4(Combine_2, Idx, N_2, P, St_6, V),
        {nil, St_7}
    catch {return, RetCatch} -> RetCatch end.

query(St_8, N_3, Combine_3, Left, Right) ->
    try
        L = (Left + N_3),
        R = (Right + N_3),
        Res = 0,
        Has = false,
        Fun_5 = fun Fun_5_loop(Combine_3, Has, L, Left, N_3, R, Res, Right, St_8) ->
    case (L =< R) of
        true ->
            Res_5 = (case (mochi_mod(L, 2) == 1) of
        true -> Res_4 = (case mochi_not(Has) of
        true -> Res_2 = (case erlang:is_map(St_8) of true -> maps:get(L, St_8, nil); _ -> case L < 0 of true -> mochi_nth(erlang:length(St_8) + L + 1, St_8); _ -> mochi_nth(L + 1, St_8) end end),
            Has_2 = true,
            Has_3 = Has_2,
            Res_2;
        _ -> Res_3 = Combine_3(Res, (case erlang:is_map(St_8) of true -> maps:get(L, St_8, nil); _ -> case L < 0 of true -> mochi_nth(erlang:length(St_8) + L + 1, St_8); _ -> mochi_nth(L + 1, St_8) end end)),
            Has_3 = Has,
            Res_3
    end),
            L_2 = (L + 1),
            Has_4 = Has_3,
            L_3 = L_2,
            Res_4;
        _ -> Has_4 = Has,
            L_3 = L,
            Res
    end),
            Res_9 = (case (mochi_mod(R, 2) == 0) of
        true -> Res_8 = (case mochi_not(Has_4) of
        true -> Res_6 = (case erlang:is_map(St_8) of true -> maps:get(R, St_8, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(St_8) + R + 1, St_8); _ -> mochi_nth(R + 1, St_8) end end),
            Has_5 = true,
            Has_6 = Has_5,
            Res_6;
        _ -> Res_7 = Combine_3(Res_5, (case erlang:is_map(St_8) of true -> maps:get(R, St_8, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(St_8) + R + 1, St_8); _ -> mochi_nth(R + 1, St_8) end end)),
            Has_6 = Has_4,
            Res_7
    end),
            R_2 = (R - 1),
            Has_7 = Has_6,
            R_3 = R_2,
            Res_8;
        _ -> Has_7 = Has_4,
            R_3 = R,
            Res_5
    end),
            L_4 = mochi_to_int(mochi_idiv(L_3, 2)),
            R_4 = mochi_to_int(mochi_idiv(R_3, 2)),
            Fun_5_loop(Combine_3, Has_7, L_4, Left, N_3, R_4, Res_9, Right, St_8);
        _ -> {Combine_3, Has, L, Left, N_3, R, Res, Right, St_8}
    end
end,
{Combine_3, Has_7, L_4, Left, N_3, R_4, Res_9, Right, St_8} = Fun_5(Combine_3, Has, L, Left, N_3, R, Res, Right, St_8),
        Res_9
    catch {return, RetCatch} -> RetCatch end.

add(A, B) ->
    try
        (A + B)
    catch {return, RetCatch} -> RetCatch end.

min_int(A_2, B_2) ->
    try
        case (A_2 < B_2) of
        true -> throw({return, A_2});
        _ -> throw({return, B_2})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

max_int(A_3, B_3) ->
    try
        case (A_3 > B_3) of
        true -> throw({return, A_3});
        _ -> throw({return, B_3})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('arr1', [1, 2, 3]),
    erlang:put('st1', build(erlang:get('arr1'), fun add/2)),
    io:format("~s~n", [mochi_str(query(erlang:get('st1'), erlang:length(erlang:get('arr1')), fun add/2, 0, 2))]),
    erlang:put('arr2', [3, 1, 2]),
    erlang:put('st2', build(erlang:get('arr2'), fun min_int/2)),
    io:format("~s~n", [mochi_str(query(erlang:get('st2'), erlang:length(erlang:get('arr2')), fun min_int/2, 0, 2))]),
    erlang:put('arr3', [2, 3, 1]),
    erlang:put('st3', build(erlang:get('arr3'), fun max_int/2)),
    io:format("~s~n", [mochi_str(query(erlang:get('st3'), erlang:length(erlang:get('arr3')), fun max_int/2, 0, 2))]),
    erlang:put('arr4', [1, 5, 7, -1, 6]),
    erlang:put('n4', erlang:length(erlang:get('arr4'))),
    erlang:put('st4', build(erlang:get('arr4'), fun add/2)),
    {_, St4} = update(erlang:get('st4'), erlang:get('n4'), fun add/2, 1, -1),
    erlang:put('st4', St4),
    {_, St4_2} = update(erlang:get('st4'), erlang:get('n4'), fun add/2, 2, 3),
    erlang:put('st4', St4_2),
    io:format("~s~n", [mochi_str(query(erlang:get('st4'), erlang:get('n4'), fun add/2, 1, 2))]),
    io:format("~s~n", [mochi_str(query(erlang:get('st4'), erlang:get('n4'), fun add/2, 1, 1))]),
    {_, St4_3} = update(erlang:get('st4'), erlang:get('n4'), fun add/2, 4, 1),
    erlang:put('st4', St4_3),
    io:format("~s~n", [mochi_str(query(erlang:get('st4'), erlang:get('n4'), fun add/2, 3, 4))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
