#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, binary_tree_mirror_dict/2, binary_tree_mirror/2, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

binary_tree_mirror_dict(Tree, Root) ->
    try
        case ((Root == 0) orelse mochi_not(maps:is_key(Root, Tree))) of
        true -> throw({return, nil});
        _ -> ok
    end,
        Children = maps:get(Root, Tree, nil),
        Left = (case erlang:is_map(Children) of true -> maps:get(0, Children, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Children) + 0 + 1, Children); _ -> mochi_nth(0 + 1, Children) end end),
        Right = (case erlang:is_map(Children) of true -> maps:get(1, Children, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Children) + 1 + 1, Children); _ -> mochi_nth(1 + 1, Children) end end),
        Tree_2 = maps:put(Root, [Right, Left], Tree),
        binary_tree_mirror_dict(Tree_2, Left),
        binary_tree_mirror_dict(Tree_2, Right),
        {nil, Tree_2}
    catch {return, RetCatch} -> RetCatch end.

binary_tree_mirror(Binary_tree, Root_2) ->
    try
        case (maps:size(Binary_tree) == 0) of
        true -> erlang:error({panic, "binary tree cannot be empty"});
        _ -> ok
    end,
        case mochi_not(maps:is_key(Root_2, Binary_tree)) of
        true -> erlang:error({panic, (("root " ++ mochi_str(Root_2)) ++ " is not present in the binary_tree")});
        _ -> ok
    end,
        Tree_copy = #{},
        Fun = fun Fun_loop(List, Binary_tree, Root_2, Tree_copy) ->
    case List of
        [] -> {Binary_tree, Root_2, Tree_copy};
        [K|K_rest] ->
            Tree_copy_2 = maps:put(K, maps:get(K, Binary_tree, nil), Tree_copy),
            Fun_loop(K_rest, Binary_tree, Root_2, Tree_copy_2);
        _ -> {Binary_tree, Root_2, Tree_copy}
    end
end,
{Binary_tree, Root_2, Tree_copy_2} = Fun(maps:keys(Binary_tree), Binary_tree, Root_2, Tree_copy),
        Tree_copy_res = binary_tree_mirror_dict(Tree_copy_2, Root_2),
        Tree_copy_tmp = element(2, Tree_copy_res),
        Tree_copy_3 = Tree_copy_tmp,
        Tree_copy_3
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Binary_tree_2 = #{1 => [2, 3], 2 => [4, 5], 3 => [6, 7], 7 => [8, 9]},
        io:format("~s~n", [mochi_format(("Binary tree: " ++ mochi_str(Binary_tree_2)))]),
        Mirrored = binary_tree_mirror(Binary_tree_2, 1),
        io:format("~s~n", [mochi_format(("Binary tree mirror: " ++ mochi_str(Mirrored)))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
