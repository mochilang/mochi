#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_tree/0, index_of/2, sort_pairs/2, right_view/1, left_view/1, top_view/1, bottom_view/1]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).

make_tree() ->
    try
        #{"values" => [3, 9, 20, 15, 7], "lefts" => [1, erlang:get('NIL'), 3, erlang:get('NIL'), erlang:get('NIL')], "rights" => [2, erlang:get('NIL'), 4, erlang:get('NIL'), erlang:get('NIL')], "root" => 0}
    catch {return, RetCatch} -> RetCatch end.

index_of(Xs, X) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, X, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) == X) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, X, Xs);
        _ -> {I, X, Xs}
    end
end,
{I_2, X, Xs} = Fun(I, X, Xs),
        erlang:get('NIL')
    catch {return, RetCatch} -> RetCatch end.

sort_pairs(Hds, Vals) ->
    try
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Hds, I_3, Vals) ->
    case (I_3 < erlang:length(Hds)) of
        true ->
            J = I_3,
            Fun_2 = fun Fun_2_loop(Hds, I_3, J, Vals) ->
    case ((J > 0) andalso ((case erlang:is_map(Hds) of true -> maps:get((J - 1), Hds, nil); _ -> case (J - 1) < 0 of true -> mochi_nth(erlang:length(Hds) + (J - 1) + 1, Hds); _ -> mochi_nth((J - 1) + 1, Hds) end end) > (case erlang:is_map(Hds) of true -> maps:get(J, Hds, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Hds) + J + 1, Hds); _ -> mochi_nth(J + 1, Hds) end end))) of
        true ->
            Hd_tmp = (case erlang:is_map(Hds) of true -> maps:get((J - 1), Hds, nil); _ -> case (J - 1) < 0 of true -> mochi_nth(erlang:length(Hds) + (J - 1) + 1, Hds); _ -> mochi_nth((J - 1) + 1, Hds) end end),
            Hds_2 = lists:sublist(Hds, (J - 1)) ++ [(case erlang:is_map(Hds) of true -> maps:get(J, Hds, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Hds) + J + 1, Hds); _ -> mochi_nth(J + 1, Hds) end end)] ++ lists:nthtail((J - 1) + 1, Hds),
            Hds_3 = lists:sublist(Hds_2, J) ++ [Hd_tmp] ++ lists:nthtail(J + 1, Hds_2),
            Val_tmp = (case erlang:is_map(Vals) of true -> maps:get((J - 1), Vals, nil); _ -> case (J - 1) < 0 of true -> mochi_nth(erlang:length(Vals) + (J - 1) + 1, Vals); _ -> mochi_nth((J - 1) + 1, Vals) end end),
            Vals_2 = lists:sublist(Vals, (J - 1)) ++ [(case erlang:is_map(Vals) of true -> maps:get(J, Vals, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Vals) + J + 1, Vals); _ -> mochi_nth(J + 1, Vals) end end)] ++ lists:nthtail((J - 1) + 1, Vals),
            Vals_3 = lists:sublist(Vals_2, J) ++ [Val_tmp] ++ lists:nthtail(J + 1, Vals_2),
            J_2 = (J - 1),
            Fun_2_loop(Hds_3, I_3, J_2, Vals_3);
        _ -> {Hds, I_3, J, Vals}
    end
end,
{Hds_3, I_3, J_2, Vals_3} = Fun_2(Hds, I_3, J, Vals),
            I_4 = (I_3 + 1),
            Fun_3_loop(Hds_3, I_4, Vals_3);
        _ -> {Hds, I_3, Vals}
    end
end,
{Hds_3, I_4, Vals_3} = Fun_3(Hds, I_3, Vals),
        nil
    catch {return, RetCatch} -> RetCatch end.

right_view(T) ->
    try
        Res = [],
        Queue = [maps:get("root", T, nil)],
        Fun_5 = fun Fun_5_loop(Queue, Res, T) ->
    case (erlang:length(Queue) > 0) of
        true ->
            Size = erlang:length(Queue),
            I_5 = 0,
            Fun_4 = fun Fun_4_loop(I_5, Queue, Res, Size, T) ->
    case (I_5 < Size) of
        true ->
            Idx = (case erlang:is_map(Queue) of true -> maps:get(I_5, Queue, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Queue) + I_5 + 1, Queue); _ -> mochi_nth(I_5 + 1, Queue) end end),
            Queue_3 = (case ((case erlang:is_map(maps:get("lefts", T, nil)) of true -> maps:get(Idx, maps:get("lefts", T, nil), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(maps:get("lefts", T, nil)) + Idx + 1, maps:get("lefts", T, nil)); _ -> mochi_nth(Idx + 1, maps:get("lefts", T, nil)) end end) /= erlang:get('NIL')) of
        true -> Queue_2 = lists:append((case Queue of nil -> []; _ -> Queue end), [(case erlang:is_map(maps:get("lefts", T, nil)) of true -> maps:get(Idx, maps:get("lefts", T, nil), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(maps:get("lefts", T, nil)) + Idx + 1, maps:get("lefts", T, nil)); _ -> mochi_nth(Idx + 1, maps:get("lefts", T, nil)) end end)]),
            Queue_2;
        _ -> Queue
    end),
            Queue_5 = (case ((case erlang:is_map(maps:get("rights", T, nil)) of true -> maps:get(Idx, maps:get("rights", T, nil), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(maps:get("rights", T, nil)) + Idx + 1, maps:get("rights", T, nil)); _ -> mochi_nth(Idx + 1, maps:get("rights", T, nil)) end end) /= erlang:get('NIL')) of
        true -> Queue_4 = lists:append((case Queue_3 of nil -> []; _ -> Queue_3 end), [(case erlang:is_map(maps:get("rights", T, nil)) of true -> maps:get(Idx, maps:get("rights", T, nil), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(maps:get("rights", T, nil)) + Idx + 1, maps:get("rights", T, nil)); _ -> mochi_nth(Idx + 1, maps:get("rights", T, nil)) end end)]),
            Queue_4;
        _ -> Queue_3
    end),
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Queue_5, Res, Size, T);
        _ -> {I_5, Queue, Res, Size, T}
    end
end,
{I_6, Queue_5, Res, Size, T} = Fun_4(I_5, Queue, Res, Size, T),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(maps:get("values", T, nil)) of true -> maps:get((case erlang:is_map(Queue_5) of true -> maps:get((Size - 1), Queue_5, nil); _ -> case (Size - 1) < 0 of true -> mochi_nth(erlang:length(Queue_5) + (Size - 1) + 1, Queue_5); _ -> mochi_nth((Size - 1) + 1, Queue_5) end end), maps:get("values", T, nil), nil); _ -> case (case erlang:is_map(Queue_5) of true -> maps:get((Size - 1), Queue_5, nil); _ -> case (Size - 1) < 0 of true -> mochi_nth(erlang:length(Queue_5) + (Size - 1) + 1, Queue_5); _ -> mochi_nth((Size - 1) + 1, Queue_5) end end) < 0 of true -> mochi_nth(erlang:length(maps:get("values", T, nil)) + (case erlang:is_map(Queue_5) of true -> maps:get((Size - 1), Queue_5, nil); _ -> case (Size - 1) < 0 of true -> mochi_nth(erlang:length(Queue_5) + (Size - 1) + 1, Queue_5); _ -> mochi_nth((Size - 1) + 1, Queue_5) end end) + 1, maps:get("values", T, nil)); _ -> mochi_nth((case erlang:is_map(Queue_5) of true -> maps:get((Size - 1), Queue_5, nil); _ -> case (Size - 1) < 0 of true -> mochi_nth(erlang:length(Queue_5) + (Size - 1) + 1, Queue_5); _ -> mochi_nth((Size - 1) + 1, Queue_5) end end) + 1, maps:get("values", T, nil)) end end)]),
            Queue_6 = lists:sublist(Queue_5, Size + 1, (erlang:length(Queue_5) - Size)),
            Fun_5_loop(Queue_6, Res_2, T);
        _ -> {Queue, Res, T}
    end
end,
{Queue_6, Res_2, T} = Fun_5(Queue, Res, T),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

left_view(T_2) ->
    try
        Res_3 = [],
        Queue_7 = [maps:get("root", T_2, nil)],
        Fun_7 = fun Fun_7_loop(Queue_7, Res_3, T_2) ->
    case (erlang:length(Queue_7) > 0) of
        true ->
            Size_2 = erlang:length(Queue_7),
            I_7 = 0,
            Fun_6 = fun Fun_6_loop(I_7, Queue_7, Res_3, Size_2, T_2) ->
    case (I_7 < Size_2) of
        true ->
            Idx_2 = (case erlang:is_map(Queue_7) of true -> maps:get(I_7, Queue_7, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Queue_7) + I_7 + 1, Queue_7); _ -> mochi_nth(I_7 + 1, Queue_7) end end),
            Queue_9 = (case ((case erlang:is_map(maps:get("lefts", T_2, nil)) of true -> maps:get(Idx_2, maps:get("lefts", T_2, nil), nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(maps:get("lefts", T_2, nil)) + Idx_2 + 1, maps:get("lefts", T_2, nil)); _ -> mochi_nth(Idx_2 + 1, maps:get("lefts", T_2, nil)) end end) /= erlang:get('NIL')) of
        true -> Queue_8 = lists:append((case Queue_7 of nil -> []; _ -> Queue_7 end), [(case erlang:is_map(maps:get("lefts", T_2, nil)) of true -> maps:get(Idx_2, maps:get("lefts", T_2, nil), nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(maps:get("lefts", T_2, nil)) + Idx_2 + 1, maps:get("lefts", T_2, nil)); _ -> mochi_nth(Idx_2 + 1, maps:get("lefts", T_2, nil)) end end)]),
            Queue_8;
        _ -> Queue_7
    end),
            Queue_11 = (case ((case erlang:is_map(maps:get("rights", T_2, nil)) of true -> maps:get(Idx_2, maps:get("rights", T_2, nil), nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(maps:get("rights", T_2, nil)) + Idx_2 + 1, maps:get("rights", T_2, nil)); _ -> mochi_nth(Idx_2 + 1, maps:get("rights", T_2, nil)) end end) /= erlang:get('NIL')) of
        true -> Queue_10 = lists:append((case Queue_9 of nil -> []; _ -> Queue_9 end), [(case erlang:is_map(maps:get("rights", T_2, nil)) of true -> maps:get(Idx_2, maps:get("rights", T_2, nil), nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(maps:get("rights", T_2, nil)) + Idx_2 + 1, maps:get("rights", T_2, nil)); _ -> mochi_nth(Idx_2 + 1, maps:get("rights", T_2, nil)) end end)]),
            Queue_10;
        _ -> Queue_9
    end),
            I_8 = (I_7 + 1),
            Fun_6_loop(I_8, Queue_11, Res_3, Size_2, T_2);
        _ -> {I_7, Queue_7, Res_3, Size_2, T_2}
    end
end,
{I_8, Queue_11, Res_3, Size_2, T_2} = Fun_6(I_7, Queue_7, Res_3, Size_2, T_2),
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [(case erlang:is_map(maps:get("values", T_2, nil)) of true -> maps:get((case erlang:is_map(Queue_11) of true -> maps:get(0, Queue_11, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Queue_11) + 0 + 1, Queue_11); _ -> mochi_nth(0 + 1, Queue_11) end end), maps:get("values", T_2, nil), nil); _ -> case (case erlang:is_map(Queue_11) of true -> maps:get(0, Queue_11, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Queue_11) + 0 + 1, Queue_11); _ -> mochi_nth(0 + 1, Queue_11) end end) < 0 of true -> mochi_nth(erlang:length(maps:get("values", T_2, nil)) + (case erlang:is_map(Queue_11) of true -> maps:get(0, Queue_11, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Queue_11) + 0 + 1, Queue_11); _ -> mochi_nth(0 + 1, Queue_11) end end) + 1, maps:get("values", T_2, nil)); _ -> mochi_nth((case erlang:is_map(Queue_11) of true -> maps:get(0, Queue_11, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Queue_11) + 0 + 1, Queue_11); _ -> mochi_nth(0 + 1, Queue_11) end end) + 1, maps:get("values", T_2, nil)) end end)]),
            Queue_12 = lists:sublist(Queue_11, Size_2 + 1, (erlang:length(Queue_11) - Size_2)),
            Fun_7_loop(Queue_12, Res_4, T_2);
        _ -> {Queue_7, Res_3, T_2}
    end
end,
{Queue_12, Res_4, T_2} = Fun_7(Queue_7, Res_3, T_2),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

top_view(T_3) ->
    try
        Hds_4 = [],
        Vals_4 = [],
        Queue_idx = [maps:get("root", T_3, nil)],
        Queue_hd = [0],
        Fun_8 = fun Fun_8_loop(Hds_4, Queue_hd, Queue_idx, T_3, Vals_4) ->
    case (erlang:length(Queue_idx) > 0) of
        true ->
            Idx_3 = (case erlang:is_map(Queue_idx) of true -> maps:get(0, Queue_idx, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Queue_idx) + 0 + 1, Queue_idx); _ -> mochi_nth(0 + 1, Queue_idx) end end),
            Queue_idx_2 = lists:sublist(Queue_idx, 1 + 1, (erlang:length(Queue_idx) - 1)),
            Hd = (case erlang:is_map(Queue_hd) of true -> maps:get(0, Queue_hd, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Queue_hd) + 0 + 1, Queue_hd); _ -> mochi_nth(0 + 1, Queue_hd) end end),
            Queue_hd_2 = lists:sublist(Queue_hd, 1 + 1, (erlang:length(Queue_hd) - 1)),
            Vals_6 = (case (index_of(Hds_4, Hd) == erlang:get('NIL')) of
        true -> Hds_5 = lists:append((case Hds_4 of nil -> []; _ -> Hds_4 end), [Hd]),
            Vals_5 = lists:append((case Vals_4 of nil -> []; _ -> Vals_4 end), [(case erlang:is_map(maps:get("values", T_3, nil)) of true -> maps:get(Idx_3, maps:get("values", T_3, nil), nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(maps:get("values", T_3, nil)) + Idx_3 + 1, maps:get("values", T_3, nil)); _ -> mochi_nth(Idx_3 + 1, maps:get("values", T_3, nil)) end end)]),
            Hds_6 = Hds_5,
            Vals_5;
        _ -> Hds_6 = Hds_4,
            Vals_4
    end),
            Queue_idx_4 = (case ((case erlang:is_map(maps:get("lefts", T_3, nil)) of true -> maps:get(Idx_3, maps:get("lefts", T_3, nil), nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(maps:get("lefts", T_3, nil)) + Idx_3 + 1, maps:get("lefts", T_3, nil)); _ -> mochi_nth(Idx_3 + 1, maps:get("lefts", T_3, nil)) end end) /= erlang:get('NIL')) of
        true -> Queue_idx_3 = lists:append((case Queue_idx_2 of nil -> []; _ -> Queue_idx_2 end), [(case erlang:is_map(maps:get("lefts", T_3, nil)) of true -> maps:get(Idx_3, maps:get("lefts", T_3, nil), nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(maps:get("lefts", T_3, nil)) + Idx_3 + 1, maps:get("lefts", T_3, nil)); _ -> mochi_nth(Idx_3 + 1, maps:get("lefts", T_3, nil)) end end)]),
            Queue_hd_3 = lists:append((case Queue_hd_2 of nil -> []; _ -> Queue_hd_2 end), [(Hd - 1)]),
            Queue_hd_4 = Queue_hd_3,
            Queue_idx_3;
        _ -> Queue_hd_4 = Queue_hd_2,
            Queue_idx_2
    end),
            Queue_idx_6 = (case ((case erlang:is_map(maps:get("rights", T_3, nil)) of true -> maps:get(Idx_3, maps:get("rights", T_3, nil), nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(maps:get("rights", T_3, nil)) + Idx_3 + 1, maps:get("rights", T_3, nil)); _ -> mochi_nth(Idx_3 + 1, maps:get("rights", T_3, nil)) end end) /= erlang:get('NIL')) of
        true -> Queue_idx_5 = lists:append((case Queue_idx_4 of nil -> []; _ -> Queue_idx_4 end), [(case erlang:is_map(maps:get("rights", T_3, nil)) of true -> maps:get(Idx_3, maps:get("rights", T_3, nil), nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(maps:get("rights", T_3, nil)) + Idx_3 + 1, maps:get("rights", T_3, nil)); _ -> mochi_nth(Idx_3 + 1, maps:get("rights", T_3, nil)) end end)]),
            Queue_hd_5 = lists:append((case Queue_hd_4 of nil -> []; _ -> Queue_hd_4 end), [(Hd + 1)]),
            Queue_hd_6 = Queue_hd_5,
            Queue_idx_5;
        _ -> Queue_hd_6 = Queue_hd_4,
            Queue_idx_4
    end),
            Fun_8_loop(Hds_6, Queue_hd_6, Queue_idx_6, T_3, Vals_6);
        _ -> {Hds_4, Queue_hd, Queue_idx, T_3, Vals_4}
    end
end,
{Hds_6, Queue_hd_6, Queue_idx_6, T_3, Vals_6} = Fun_8(Hds_4, Queue_hd, Queue_idx, T_3, Vals_4),
        sort_pairs(Hds_6, Vals_6),
        Vals_6
    catch {return, RetCatch} -> RetCatch end.

bottom_view(T_4) ->
    try
        Hds_7 = [],
        Vals_7 = [],
        Queue_idx_7 = [maps:get("root", T_4, nil)],
        Queue_hd_7 = [0],
        Fun_9 = fun Fun_9_loop(Hds_7, Queue_hd_7, Queue_idx_7, T_4, Vals_7) ->
    case (erlang:length(Queue_idx_7) > 0) of
        true ->
            Idx_4 = (case erlang:is_map(Queue_idx_7) of true -> maps:get(0, Queue_idx_7, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Queue_idx_7) + 0 + 1, Queue_idx_7); _ -> mochi_nth(0 + 1, Queue_idx_7) end end),
            Queue_idx_8 = lists:sublist(Queue_idx_7, 1 + 1, (erlang:length(Queue_idx_7) - 1)),
            Hd_2 = (case erlang:is_map(Queue_hd_7) of true -> maps:get(0, Queue_hd_7, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Queue_hd_7) + 0 + 1, Queue_hd_7); _ -> mochi_nth(0 + 1, Queue_hd_7) end end),
            Queue_hd_8 = lists:sublist(Queue_hd_7, 1 + 1, (erlang:length(Queue_hd_7) - 1)),
            Pos = index_of(Hds_7, Hd_2),
            Vals_10 = (case (Pos == erlang:get('NIL')) of
        true -> Hds_8 = lists:append((case Hds_7 of nil -> []; _ -> Hds_7 end), [Hd_2]),
            Vals_8 = lists:append((case Vals_7 of nil -> []; _ -> Vals_7 end), [(case erlang:is_map(maps:get("values", T_4, nil)) of true -> maps:get(Idx_4, maps:get("values", T_4, nil), nil); _ -> case Idx_4 < 0 of true -> mochi_nth(erlang:length(maps:get("values", T_4, nil)) + Idx_4 + 1, maps:get("values", T_4, nil)); _ -> mochi_nth(Idx_4 + 1, maps:get("values", T_4, nil)) end end)]),
            Hds_9 = Hds_8,
            Vals_8;
        _ -> Vals_9 = lists:sublist(Vals_7, Pos) ++ [(case erlang:is_map(maps:get("values", T_4, nil)) of true -> maps:get(Idx_4, maps:get("values", T_4, nil), nil); _ -> case Idx_4 < 0 of true -> mochi_nth(erlang:length(maps:get("values", T_4, nil)) + Idx_4 + 1, maps:get("values", T_4, nil)); _ -> mochi_nth(Idx_4 + 1, maps:get("values", T_4, nil)) end end)] ++ lists:nthtail(Pos + 1, Vals_7),
            Hds_9 = Hds_7,
            Vals_9
    end),
            Queue_idx_10 = (case ((case erlang:is_map(maps:get("lefts", T_4, nil)) of true -> maps:get(Idx_4, maps:get("lefts", T_4, nil), nil); _ -> case Idx_4 < 0 of true -> mochi_nth(erlang:length(maps:get("lefts", T_4, nil)) + Idx_4 + 1, maps:get("lefts", T_4, nil)); _ -> mochi_nth(Idx_4 + 1, maps:get("lefts", T_4, nil)) end end) /= erlang:get('NIL')) of
        true -> Queue_idx_9 = lists:append((case Queue_idx_8 of nil -> []; _ -> Queue_idx_8 end), [(case erlang:is_map(maps:get("lefts", T_4, nil)) of true -> maps:get(Idx_4, maps:get("lefts", T_4, nil), nil); _ -> case Idx_4 < 0 of true -> mochi_nth(erlang:length(maps:get("lefts", T_4, nil)) + Idx_4 + 1, maps:get("lefts", T_4, nil)); _ -> mochi_nth(Idx_4 + 1, maps:get("lefts", T_4, nil)) end end)]),
            Queue_hd_9 = lists:append((case Queue_hd_8 of nil -> []; _ -> Queue_hd_8 end), [(Hd_2 - 1)]),
            Queue_hd_10 = Queue_hd_9,
            Queue_idx_9;
        _ -> Queue_hd_10 = Queue_hd_8,
            Queue_idx_8
    end),
            Queue_idx_12 = (case ((case erlang:is_map(maps:get("rights", T_4, nil)) of true -> maps:get(Idx_4, maps:get("rights", T_4, nil), nil); _ -> case Idx_4 < 0 of true -> mochi_nth(erlang:length(maps:get("rights", T_4, nil)) + Idx_4 + 1, maps:get("rights", T_4, nil)); _ -> mochi_nth(Idx_4 + 1, maps:get("rights", T_4, nil)) end end) /= erlang:get('NIL')) of
        true -> Queue_idx_11 = lists:append((case Queue_idx_10 of nil -> []; _ -> Queue_idx_10 end), [(case erlang:is_map(maps:get("rights", T_4, nil)) of true -> maps:get(Idx_4, maps:get("rights", T_4, nil), nil); _ -> case Idx_4 < 0 of true -> mochi_nth(erlang:length(maps:get("rights", T_4, nil)) + Idx_4 + 1, maps:get("rights", T_4, nil)); _ -> mochi_nth(Idx_4 + 1, maps:get("rights", T_4, nil)) end end)]),
            Queue_hd_11 = lists:append((case Queue_hd_10 of nil -> []; _ -> Queue_hd_10 end), [(Hd_2 + 1)]),
            Queue_hd_12 = Queue_hd_11,
            Queue_idx_11;
        _ -> Queue_hd_12 = Queue_hd_10,
            Queue_idx_10
    end),
            Fun_9_loop(Hds_9, Queue_hd_12, Queue_idx_12, T_4, Vals_10);
        _ -> {Hds_7, Queue_hd_7, Queue_idx_7, T_4, Vals_7}
    end
end,
{Hds_9, Queue_hd_12, Queue_idx_12, T_4, Vals_10} = Fun_9(Hds_7, Queue_hd_7, Queue_idx_7, T_4, Vals_7),
        sort_pairs(Hds_9, Vals_10),
        Vals_10
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('NIL', (0 - 1)),
    erlang:put('tree', make_tree()),
    io:format("~s~n", [mochi_format(right_view(erlang:get('tree')))]),
    io:format("~s~n", [mochi_format(left_view(erlang:get('tree')))]),
    io:format("~s~n", [mochi_format(top_view(erlang:get('tree')))]),
    io:format("~s~n", [mochi_format(bottom_view(erlang:get('tree')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
