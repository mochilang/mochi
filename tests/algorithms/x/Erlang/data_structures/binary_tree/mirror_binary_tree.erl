#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, mirror_node/3, mirror/1, inorder/2, make_tree_zero/0, make_tree_seven/0, make_tree_nine/0, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

mirror_node(Left, Right, Idx) ->
    try
        case (Idx == -1) of
        true -> throw({return, nil});
        _ -> ok
    end,
        Temp = (case erlang:is_map(Left) of true -> maps:get(Idx, Left, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Left) + Idx + 1, Left); _ -> mochi_nth(Idx + 1, Left) end end),
        Left_2 = lists:sublist(Left, Idx) ++ [(case erlang:is_map(Right) of true -> maps:get(Idx, Right, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Right) + Idx + 1, Right); _ -> mochi_nth(Idx + 1, Right) end end)] ++ lists:nthtail(Idx + 1, Left),
        Right_2 = lists:sublist(Right, Idx) ++ [Temp] ++ lists:nthtail(Idx + 1, Right),
        mirror_node(Left_2, Right_2, (case erlang:is_map(Left_2) of true -> maps:get(Idx, Left_2, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Left_2) + Idx + 1, Left_2); _ -> mochi_nth(Idx + 1, Left_2) end end)),
        mirror_node(Left_2, Right_2, (case erlang:is_map(Right_2) of true -> maps:get(Idx, Right_2, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Right_2) + Idx + 1, Right_2); _ -> mochi_nth(Idx + 1, Right_2) end end)),
        nil
    catch {return, RetCatch} -> RetCatch end.

mirror(Tree) ->
    try
        mirror_node(maps:get("left", Tree, nil), maps:get("right", Tree, nil), maps:get("root", Tree, nil)),
        Tree
    catch {return, RetCatch} -> RetCatch end.

inorder(Tree_2, Idx_2) ->
    try
        case (Idx_2 == -1) of
        true -> throw({return, []});
        _ -> ok
    end,
        Left_vals = inorder(Tree_2, (case erlang:is_map(maps:get("left", Tree_2, nil)) of true -> maps:get(Idx_2, maps:get("left", Tree_2, nil), nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(maps:get("left", Tree_2, nil)) + Idx_2 + 1, maps:get("left", Tree_2, nil)); _ -> mochi_nth(Idx_2 + 1, maps:get("left", Tree_2, nil)) end end)),
        Right_vals = inorder(Tree_2, (case erlang:is_map(maps:get("right", Tree_2, nil)) of true -> maps:get(Idx_2, maps:get("right", Tree_2, nil), nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(maps:get("right", Tree_2, nil)) + Idx_2 + 1, maps:get("right", Tree_2, nil)); _ -> mochi_nth(Idx_2 + 1, maps:get("right", Tree_2, nil)) end end)),
        lists:append(lists:append(Left_vals, [(case erlang:is_map(maps:get("values", Tree_2, nil)) of true -> maps:get(Idx_2, maps:get("values", Tree_2, nil), nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(maps:get("values", Tree_2, nil)) + Idx_2 + 1, maps:get("values", Tree_2, nil)); _ -> mochi_nth(Idx_2 + 1, maps:get("values", Tree_2, nil)) end end)]), Right_vals)
    catch {return, RetCatch} -> RetCatch end.

make_tree_zero() ->
    try
        #{"values" => [0], "left" => [-1], "right" => [-1], "root" => 0}
    catch {return, RetCatch} -> RetCatch end.

make_tree_seven() ->
    try
        #{"values" => [1, 2, 3, 4, 5, 6, 7], "left" => [1, 3, 5, -1, -1, -1, -1], "right" => [2, 4, 6, -1, -1, -1, -1], "root" => 0}
    catch {return, RetCatch} -> RetCatch end.

make_tree_nine() ->
    try
        #{"values" => [1, 2, 3, 4, 5, 6, 7, 8, 9], "left" => [1, 3, -1, 6, -1, -1, -1, -1, -1], "right" => [2, 4, 5, 7, 8, -1, -1, -1, -1], "root" => 0}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Names = ["zero", "seven", "nine"],
        Trees = [make_tree_zero(), make_tree_seven(), make_tree_nine()],
        I = 0,
        Fun = fun Fun_loop(I, Names, Trees) ->
    case (I < erlang:length(Trees)) of
        true ->
            Tree_3 = (case erlang:is_map(Trees) of true -> maps:get(I, Trees, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Trees) + I + 1, Trees); _ -> mochi_nth(I + 1, Trees) end end),
            io:format("~s~n", [mochi_format(((("      The " ++ (case erlang:is_map(Names) of true -> maps:get(I, Names, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Names) + I + 1, Names); _ -> mochi_nth(I + 1, Names) end end)) ++ " tree: ") ++ mochi_str(inorder(Tree_3, maps:get("root", Tree_3, nil)))))]),
            Mirrored = mirror(Tree_3),
            io:format("~s~n", [mochi_format(((("Mirror of " ++ (case erlang:is_map(Names) of true -> maps:get(I, Names, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Names) + I + 1, Names); _ -> mochi_nth(I + 1, Names) end end)) ++ " tree: ") ++ mochi_str(inorder(Mirrored, maps:get("root", Mirrored, nil)))))]),
            I_2 = (I + 1),
            Fun_loop(I_2, Names, Trees);
        _ -> {I, Names, Trees}
    end
end,
{I_2, Names, Trees} = Fun(I, Names, Trees),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
