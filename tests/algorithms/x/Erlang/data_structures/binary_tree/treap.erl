#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, random/0, new_node/1, split/2, merge/2, insert/2, erase/2, inorder/2, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

random() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 13) + 7), 100)),
        mochi_safe_div(float(erlang:get('seed')), 100.0)
    catch {return, RetCatch} -> RetCatch end.

new_node(Value) ->
    try
        erlang:put('node_values', lists:append((case erlang:get('node_values') of nil -> []; _ -> erlang:get('node_values') end), [Value])),
        erlang:put('node_priors', lists:append((case erlang:get('node_priors') of nil -> []; _ -> erlang:get('node_priors') end), [random()])),
        erlang:put('node_lefts', lists:append((case erlang:get('node_lefts') of nil -> []; _ -> erlang:get('node_lefts') end), [erlang:get('NIL')])),
        erlang:put('node_rights', lists:append((case erlang:get('node_rights') of nil -> []; _ -> erlang:get('node_rights') end), [erlang:get('NIL')])),
        (erlang:length(erlang:get('node_values')) - 1)
    catch {return, RetCatch} -> RetCatch end.

split(Root, Value_2) ->
    try
        case (Root == erlang:get('NIL')) of
        true -> throw({return, #{"left" => erlang:get('NIL'), "right" => erlang:get('NIL')}});
        _ -> ok
    end,
        Res_2 = (case (Value_2 < (case erlang:is_map(erlang:get('node_values')) of true -> maps:get(Root, erlang:get('node_values'), nil); _ -> case Root < 0 of true -> mochi_nth(erlang:length(erlang:get('node_values')) + Root + 1, erlang:get('node_values')); _ -> mochi_nth(Root + 1, erlang:get('node_values')) end end)) of
        true -> Res = string:tokens((case erlang:is_map(erlang:get('node_lefts')) of true -> maps:get(Root, erlang:get('node_lefts'), nil); _ -> case Root < 0 of true -> mochi_nth(erlang:length(erlang:get('node_lefts')) + Root + 1, erlang:get('node_lefts')); _ -> mochi_nth(Root + 1, erlang:get('node_lefts')) end end), Value_2),
            Node_lefts_tmp = lists:sublist(erlang:get('node_lefts'), Root) ++ [maps:get("right", Res, nil)] ++ lists:nthtail(Root + 1, erlang:get('node_lefts')),
            erlang:put('node_lefts', Node_lefts_tmp),
            throw({return, #{"left" => maps:get("left", Res, nil), "right" => Root}}),
            Node_lefts_tmp_2 = Node_lefts_tmp,
            Res;
        _ -> Node_lefts_tmp_2 = nil,
            nil
    end),
        Res_3 = string:tokens((case erlang:is_map(erlang:get('node_rights')) of true -> maps:get(Root, erlang:get('node_rights'), nil); _ -> case Root < 0 of true -> mochi_nth(erlang:length(erlang:get('node_rights')) + Root + 1, erlang:get('node_rights')); _ -> mochi_nth(Root + 1, erlang:get('node_rights')) end end), Value_2),
        Node_rights_tmp = lists:sublist(erlang:get('node_rights'), Root) ++ [maps:get("left", Res_3, nil)] ++ lists:nthtail(Root + 1, erlang:get('node_rights')),
        erlang:put('node_rights', Node_rights_tmp),
        #{"left" => Root, "right" => maps:get("right", Res_3, nil)}
    catch {return, RetCatch} -> RetCatch end.

merge(Left, Right) ->
    try
        case (Left == erlang:get('NIL')) of
        true -> throw({return, Right});
        _ -> ok
    end,
        case (Right == erlang:get('NIL')) of
        true -> throw({return, Left});
        _ -> ok
    end,
        Node_rights_tmp_3 = (case ((case erlang:is_map(erlang:get('node_priors')) of true -> maps:get(Left, erlang:get('node_priors'), nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(erlang:get('node_priors')) + Left + 1, erlang:get('node_priors')); _ -> mochi_nth(Left + 1, erlang:get('node_priors')) end end) < (case erlang:is_map(erlang:get('node_priors')) of true -> maps:get(Right, erlang:get('node_priors'), nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(erlang:get('node_priors')) + Right + 1, erlang:get('node_priors')); _ -> mochi_nth(Right + 1, erlang:get('node_priors')) end end)) of
        true -> Node_rights_tmp_2 = lists:sublist(erlang:get('node_rights'), Left) ++ [merge((case erlang:is_map(erlang:get('node_rights')) of true -> maps:get(Left, erlang:get('node_rights'), nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(erlang:get('node_rights')) + Left + 1, erlang:get('node_rights')); _ -> mochi_nth(Left + 1, erlang:get('node_rights')) end end), Right)] ++ lists:nthtail(Left + 1, erlang:get('node_rights')),
            erlang:put('node_rights', Node_rights_tmp_2),
            throw({return, Left}),
            Node_rights_tmp_2;
        _ -> nil
    end),
        Node_lefts_tmp_3 = lists:sublist(erlang:get('node_lefts'), Right) ++ [merge(Left, (case erlang:is_map(erlang:get('node_lefts')) of true -> maps:get(Right, erlang:get('node_lefts'), nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(erlang:get('node_lefts')) + Right + 1, erlang:get('node_lefts')); _ -> mochi_nth(Right + 1, erlang:get('node_lefts')) end end))] ++ lists:nthtail(Right + 1, erlang:get('node_lefts')),
        erlang:put('node_lefts', Node_lefts_tmp_3),
        Right
    catch {return, RetCatch} -> RetCatch end.

insert(Root_2, Value_3) ->
    try
        Node = new_node(Value_3),
        Res_4 = string:tokens(Root_2, Value_3),
        merge(merge(maps:get("left", Res_4, nil), Node), maps:get("right", Res_4, nil))
    catch {return, RetCatch} -> RetCatch end.

erase(Root_3, Value_4) ->
    try
        Res1 = string:tokens(Root_3, (Value_4 - 1)),
        Res2 = string:tokens(maps:get("right", Res1, nil), Value_4),
        merge(maps:get("left", Res1, nil), maps:get("right", Res2, nil))
    catch {return, RetCatch} -> RetCatch end.

inorder(I, Acc) ->
    try
        case (I == erlang:get('NIL')) of
        true -> throw({return, Acc});
        _ -> ok
    end,
        Left_acc = inorder((case erlang:is_map(erlang:get('node_lefts')) of true -> maps:get(I, erlang:get('node_lefts'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('node_lefts')) + I + 1, erlang:get('node_lefts')); _ -> mochi_nth(I + 1, erlang:get('node_lefts')) end end), Acc),
        With_node = lists:append((case Left_acc of nil -> []; _ -> Left_acc end), [(case erlang:is_map(erlang:get('node_values')) of true -> maps:get(I, erlang:get('node_values'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('node_values')) + I + 1, erlang:get('node_values')); _ -> mochi_nth(I + 1, erlang:get('node_values')) end end)]),
        inorder((case erlang:is_map(erlang:get('node_rights')) of true -> maps:get(I, erlang:get('node_rights'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('node_rights')) + I + 1, erlang:get('node_rights')); _ -> mochi_nth(I + 1, erlang:get('node_rights')) end end), With_node)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Root_4 = erlang:get('NIL'),
        Root_5 = insert(Root_4, 1),
        io:format("~s~n", [mochi_str(inorder(Root_5, []))]),
        Root_6 = insert(Root_5, 3),
        Root_7 = insert(Root_6, 5),
        Root_8 = insert(Root_7, 17),
        Root_9 = insert(Root_8, 19),
        Root_10 = insert(Root_9, 2),
        Root_11 = insert(Root_10, 16),
        Root_12 = insert(Root_11, 4),
        Root_13 = insert(Root_12, 0),
        io:format("~s~n", [mochi_str(inorder(Root_13, []))]),
        Root_14 = insert(Root_13, 4),
        Root_15 = insert(Root_14, 4),
        Root_16 = insert(Root_15, 4),
        io:format("~s~n", [mochi_str(inorder(Root_16, []))]),
        Root_17 = erase(Root_16, 0),
        io:format("~s~n", [mochi_str(inorder(Root_17, []))]),
        Root_18 = erase(Root_17, 4),
        io:format("~s~n", [mochi_str(inorder(Root_18, []))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('NIL', (0 - 1)),
    erlang:put('node_values', []),
    erlang:put('node_priors', []),
    erlang:put('node_lefts', []),
    erlang:put('node_rights', []),
    erlang:put('seed', 1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
