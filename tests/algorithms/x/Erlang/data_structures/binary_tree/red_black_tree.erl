#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_tree/0, rotate_left/2, rotate_right/2, insert_fix/2, tree_insert/2, inorder/3, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_tree() ->
    try
        #{"nodes" => [], "root" => -1}
    catch {return, RetCatch} -> RetCatch end.

rotate_left(T, X) ->
    try
        Nodes = maps:get("nodes", T, nil),
        Y = (case erlang:is_map((case erlang:is_map(Nodes) of true -> maps:get(X, Nodes, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(Nodes) + X + 1, Nodes); _ -> mochi_nth(X + 1, Nodes) end end)) of true -> maps:get(4, (case erlang:is_map(Nodes) of true -> maps:get(X, Nodes, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(Nodes) + X + 1, Nodes); _ -> mochi_nth(X + 1, Nodes) end end), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes) of true -> maps:get(X, Nodes, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(Nodes) + X + 1, Nodes); _ -> mochi_nth(X + 1, Nodes) end end)) + 4 + 1, (case erlang:is_map(Nodes) of true -> maps:get(X, Nodes, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(Nodes) + X + 1, Nodes); _ -> mochi_nth(X + 1, Nodes) end end)); _ -> mochi_nth(4 + 1, (case erlang:is_map(Nodes) of true -> maps:get(X, Nodes, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(Nodes) + X + 1, Nodes); _ -> mochi_nth(X + 1, Nodes) end end)) end end),
        YLeft = (case erlang:is_map((case erlang:is_map(Nodes) of true -> maps:get(Y, Nodes, nil); _ -> case Y < 0 of true -> mochi_nth(erlang:length(Nodes) + Y + 1, Nodes); _ -> mochi_nth(Y + 1, Nodes) end end)) of true -> maps:get(3, (case erlang:is_map(Nodes) of true -> maps:get(Y, Nodes, nil); _ -> case Y < 0 of true -> mochi_nth(erlang:length(Nodes) + Y + 1, Nodes); _ -> mochi_nth(Y + 1, Nodes) end end), nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes) of true -> maps:get(Y, Nodes, nil); _ -> case Y < 0 of true -> mochi_nth(erlang:length(Nodes) + Y + 1, Nodes); _ -> mochi_nth(Y + 1, Nodes) end end)) + 3 + 1, (case erlang:is_map(Nodes) of true -> maps:get(Y, Nodes, nil); _ -> case Y < 0 of true -> mochi_nth(erlang:length(Nodes) + Y + 1, Nodes); _ -> mochi_nth(Y + 1, Nodes) end end)); _ -> mochi_nth(3 + 1, (case erlang:is_map(Nodes) of true -> maps:get(Y, Nodes, nil); _ -> case Y < 0 of true -> mochi_nth(erlang:length(Nodes) + Y + 1, Nodes); _ -> mochi_nth(Y + 1, Nodes) end end)) end end),
        Nodes_2 = lists:sublist(Nodes, X) ++ [(lists:sublist(lists:nth(X + 1, Nodes), 4) ++ [YLeft] ++ lists:nthtail(4 + 1, lists:nth(X + 1, Nodes)))] ++ lists:nthtail(X + 1, Nodes),
        Nodes_4 = (case (YLeft /= erlang:get('NEG_ONE')) of
        true -> Nodes_3 = lists:sublist(Nodes_2, YLeft) ++ [(lists:sublist(lists:nth(YLeft + 1, Nodes_2), 2) ++ [X] ++ lists:nthtail(2 + 1, lists:nth(YLeft + 1, Nodes_2)))] ++ lists:nthtail(YLeft + 1, Nodes_2),
            Nodes_3;
        _ -> Nodes_2
    end),
        XParent = (case erlang:is_map((case erlang:is_map(Nodes_4) of true -> maps:get(X, Nodes_4, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(Nodes_4) + X + 1, Nodes_4); _ -> mochi_nth(X + 1, Nodes_4) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_4) of true -> maps:get(X, Nodes_4, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(Nodes_4) + X + 1, Nodes_4); _ -> mochi_nth(X + 1, Nodes_4) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_4) of true -> maps:get(X, Nodes_4, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(Nodes_4) + X + 1, Nodes_4); _ -> mochi_nth(X + 1, Nodes_4) end end)) + 2 + 1, (case erlang:is_map(Nodes_4) of true -> maps:get(X, Nodes_4, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(Nodes_4) + X + 1, Nodes_4); _ -> mochi_nth(X + 1, Nodes_4) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_4) of true -> maps:get(X, Nodes_4, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(Nodes_4) + X + 1, Nodes_4); _ -> mochi_nth(X + 1, Nodes_4) end end)) end end),
        Nodes_5 = lists:sublist(Nodes_4, Y) ++ [(lists:sublist(lists:nth(Y + 1, Nodes_4), 2) ++ [XParent] ++ lists:nthtail(2 + 1, lists:nth(Y + 1, Nodes_4)))] ++ lists:nthtail(Y + 1, Nodes_4),
        T_3 = (case (XParent == erlang:get('NEG_ONE')) of
        true -> T_2 = maps:put("root", Y, T),
            Nodes_9 = Nodes_5,
            T_2;
        _ -> Nodes_8 = (case (X == (case erlang:is_map((case erlang:is_map(Nodes_5) of true -> maps:get(XParent, Nodes_5, nil); _ -> case XParent < 0 of true -> mochi_nth(erlang:length(Nodes_5) + XParent + 1, Nodes_5); _ -> mochi_nth(XParent + 1, Nodes_5) end end)) of true -> maps:get(3, (case erlang:is_map(Nodes_5) of true -> maps:get(XParent, Nodes_5, nil); _ -> case XParent < 0 of true -> mochi_nth(erlang:length(Nodes_5) + XParent + 1, Nodes_5); _ -> mochi_nth(XParent + 1, Nodes_5) end end), nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_5) of true -> maps:get(XParent, Nodes_5, nil); _ -> case XParent < 0 of true -> mochi_nth(erlang:length(Nodes_5) + XParent + 1, Nodes_5); _ -> mochi_nth(XParent + 1, Nodes_5) end end)) + 3 + 1, (case erlang:is_map(Nodes_5) of true -> maps:get(XParent, Nodes_5, nil); _ -> case XParent < 0 of true -> mochi_nth(erlang:length(Nodes_5) + XParent + 1, Nodes_5); _ -> mochi_nth(XParent + 1, Nodes_5) end end)); _ -> mochi_nth(3 + 1, (case erlang:is_map(Nodes_5) of true -> maps:get(XParent, Nodes_5, nil); _ -> case XParent < 0 of true -> mochi_nth(erlang:length(Nodes_5) + XParent + 1, Nodes_5); _ -> mochi_nth(XParent + 1, Nodes_5) end end)) end end)) of
        true -> Nodes_6 = lists:sublist(Nodes_5, XParent) ++ [(lists:sublist(lists:nth(XParent + 1, Nodes_5), 3) ++ [Y] ++ lists:nthtail(3 + 1, lists:nth(XParent + 1, Nodes_5)))] ++ lists:nthtail(XParent + 1, Nodes_5),
            Nodes_6;
        _ -> Nodes_7 = lists:sublist(Nodes_5, XParent) ++ [(lists:sublist(lists:nth(XParent + 1, Nodes_5), 4) ++ [Y] ++ lists:nthtail(4 + 1, lists:nth(XParent + 1, Nodes_5)))] ++ lists:nthtail(XParent + 1, Nodes_5),
            Nodes_7
    end),
            Nodes_9 = Nodes_8,
            T
    end),
        Nodes_10 = lists:sublist(Nodes_9, Y) ++ [(lists:sublist(lists:nth(Y + 1, Nodes_9), 3) ++ [X] ++ lists:nthtail(3 + 1, lists:nth(Y + 1, Nodes_9)))] ++ lists:nthtail(Y + 1, Nodes_9),
        Nodes_11 = lists:sublist(Nodes_10, X) ++ [(lists:sublist(lists:nth(X + 1, Nodes_10), 2) ++ [Y] ++ lists:nthtail(2 + 1, lists:nth(X + 1, Nodes_10)))] ++ lists:nthtail(X + 1, Nodes_10),
        T_4 = maps:put("nodes", Nodes_11, T_3),
        T_4
    catch {return, RetCatch} -> RetCatch end.

rotate_right(T_5, X_2) ->
    try
        Nodes_12 = maps:get("nodes", T_5, nil),
        Y_2 = (case erlang:is_map((case erlang:is_map(Nodes_12) of true -> maps:get(X_2, Nodes_12, nil); _ -> case X_2 < 0 of true -> mochi_nth(erlang:length(Nodes_12) + X_2 + 1, Nodes_12); _ -> mochi_nth(X_2 + 1, Nodes_12) end end)) of true -> maps:get(3, (case erlang:is_map(Nodes_12) of true -> maps:get(X_2, Nodes_12, nil); _ -> case X_2 < 0 of true -> mochi_nth(erlang:length(Nodes_12) + X_2 + 1, Nodes_12); _ -> mochi_nth(X_2 + 1, Nodes_12) end end), nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_12) of true -> maps:get(X_2, Nodes_12, nil); _ -> case X_2 < 0 of true -> mochi_nth(erlang:length(Nodes_12) + X_2 + 1, Nodes_12); _ -> mochi_nth(X_2 + 1, Nodes_12) end end)) + 3 + 1, (case erlang:is_map(Nodes_12) of true -> maps:get(X_2, Nodes_12, nil); _ -> case X_2 < 0 of true -> mochi_nth(erlang:length(Nodes_12) + X_2 + 1, Nodes_12); _ -> mochi_nth(X_2 + 1, Nodes_12) end end)); _ -> mochi_nth(3 + 1, (case erlang:is_map(Nodes_12) of true -> maps:get(X_2, Nodes_12, nil); _ -> case X_2 < 0 of true -> mochi_nth(erlang:length(Nodes_12) + X_2 + 1, Nodes_12); _ -> mochi_nth(X_2 + 1, Nodes_12) end end)) end end),
        YRight = (case erlang:is_map((case erlang:is_map(Nodes_12) of true -> maps:get(Y_2, Nodes_12, nil); _ -> case Y_2 < 0 of true -> mochi_nth(erlang:length(Nodes_12) + Y_2 + 1, Nodes_12); _ -> mochi_nth(Y_2 + 1, Nodes_12) end end)) of true -> maps:get(4, (case erlang:is_map(Nodes_12) of true -> maps:get(Y_2, Nodes_12, nil); _ -> case Y_2 < 0 of true -> mochi_nth(erlang:length(Nodes_12) + Y_2 + 1, Nodes_12); _ -> mochi_nth(Y_2 + 1, Nodes_12) end end), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_12) of true -> maps:get(Y_2, Nodes_12, nil); _ -> case Y_2 < 0 of true -> mochi_nth(erlang:length(Nodes_12) + Y_2 + 1, Nodes_12); _ -> mochi_nth(Y_2 + 1, Nodes_12) end end)) + 4 + 1, (case erlang:is_map(Nodes_12) of true -> maps:get(Y_2, Nodes_12, nil); _ -> case Y_2 < 0 of true -> mochi_nth(erlang:length(Nodes_12) + Y_2 + 1, Nodes_12); _ -> mochi_nth(Y_2 + 1, Nodes_12) end end)); _ -> mochi_nth(4 + 1, (case erlang:is_map(Nodes_12) of true -> maps:get(Y_2, Nodes_12, nil); _ -> case Y_2 < 0 of true -> mochi_nth(erlang:length(Nodes_12) + Y_2 + 1, Nodes_12); _ -> mochi_nth(Y_2 + 1, Nodes_12) end end)) end end),
        Nodes_13 = lists:sublist(Nodes_12, X_2) ++ [(lists:sublist(lists:nth(X_2 + 1, Nodes_12), 3) ++ [YRight] ++ lists:nthtail(3 + 1, lists:nth(X_2 + 1, Nodes_12)))] ++ lists:nthtail(X_2 + 1, Nodes_12),
        Nodes_15 = (case (YRight /= erlang:get('NEG_ONE')) of
        true -> Nodes_14 = lists:sublist(Nodes_13, YRight) ++ [(lists:sublist(lists:nth(YRight + 1, Nodes_13), 2) ++ [X_2] ++ lists:nthtail(2 + 1, lists:nth(YRight + 1, Nodes_13)))] ++ lists:nthtail(YRight + 1, Nodes_13),
            Nodes_14;
        _ -> Nodes_13
    end),
        XParent_2 = (case erlang:is_map((case erlang:is_map(Nodes_15) of true -> maps:get(X_2, Nodes_15, nil); _ -> case X_2 < 0 of true -> mochi_nth(erlang:length(Nodes_15) + X_2 + 1, Nodes_15); _ -> mochi_nth(X_2 + 1, Nodes_15) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_15) of true -> maps:get(X_2, Nodes_15, nil); _ -> case X_2 < 0 of true -> mochi_nth(erlang:length(Nodes_15) + X_2 + 1, Nodes_15); _ -> mochi_nth(X_2 + 1, Nodes_15) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_15) of true -> maps:get(X_2, Nodes_15, nil); _ -> case X_2 < 0 of true -> mochi_nth(erlang:length(Nodes_15) + X_2 + 1, Nodes_15); _ -> mochi_nth(X_2 + 1, Nodes_15) end end)) + 2 + 1, (case erlang:is_map(Nodes_15) of true -> maps:get(X_2, Nodes_15, nil); _ -> case X_2 < 0 of true -> mochi_nth(erlang:length(Nodes_15) + X_2 + 1, Nodes_15); _ -> mochi_nth(X_2 + 1, Nodes_15) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_15) of true -> maps:get(X_2, Nodes_15, nil); _ -> case X_2 < 0 of true -> mochi_nth(erlang:length(Nodes_15) + X_2 + 1, Nodes_15); _ -> mochi_nth(X_2 + 1, Nodes_15) end end)) end end),
        Nodes_16 = lists:sublist(Nodes_15, Y_2) ++ [(lists:sublist(lists:nth(Y_2 + 1, Nodes_15), 2) ++ [XParent_2] ++ lists:nthtail(2 + 1, lists:nth(Y_2 + 1, Nodes_15)))] ++ lists:nthtail(Y_2 + 1, Nodes_15),
        T_7 = (case (XParent_2 == erlang:get('NEG_ONE')) of
        true -> T_6 = maps:put("root", Y_2, T_5),
            Nodes_20 = Nodes_16,
            T_6;
        _ -> Nodes_19 = (case (X_2 == (case erlang:is_map((case erlang:is_map(Nodes_16) of true -> maps:get(XParent_2, Nodes_16, nil); _ -> case XParent_2 < 0 of true -> mochi_nth(erlang:length(Nodes_16) + XParent_2 + 1, Nodes_16); _ -> mochi_nth(XParent_2 + 1, Nodes_16) end end)) of true -> maps:get(4, (case erlang:is_map(Nodes_16) of true -> maps:get(XParent_2, Nodes_16, nil); _ -> case XParent_2 < 0 of true -> mochi_nth(erlang:length(Nodes_16) + XParent_2 + 1, Nodes_16); _ -> mochi_nth(XParent_2 + 1, Nodes_16) end end), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_16) of true -> maps:get(XParent_2, Nodes_16, nil); _ -> case XParent_2 < 0 of true -> mochi_nth(erlang:length(Nodes_16) + XParent_2 + 1, Nodes_16); _ -> mochi_nth(XParent_2 + 1, Nodes_16) end end)) + 4 + 1, (case erlang:is_map(Nodes_16) of true -> maps:get(XParent_2, Nodes_16, nil); _ -> case XParent_2 < 0 of true -> mochi_nth(erlang:length(Nodes_16) + XParent_2 + 1, Nodes_16); _ -> mochi_nth(XParent_2 + 1, Nodes_16) end end)); _ -> mochi_nth(4 + 1, (case erlang:is_map(Nodes_16) of true -> maps:get(XParent_2, Nodes_16, nil); _ -> case XParent_2 < 0 of true -> mochi_nth(erlang:length(Nodes_16) + XParent_2 + 1, Nodes_16); _ -> mochi_nth(XParent_2 + 1, Nodes_16) end end)) end end)) of
        true -> Nodes_17 = lists:sublist(Nodes_16, XParent_2) ++ [(lists:sublist(lists:nth(XParent_2 + 1, Nodes_16), 4) ++ [Y_2] ++ lists:nthtail(4 + 1, lists:nth(XParent_2 + 1, Nodes_16)))] ++ lists:nthtail(XParent_2 + 1, Nodes_16),
            Nodes_17;
        _ -> Nodes_18 = lists:sublist(Nodes_16, XParent_2) ++ [(lists:sublist(lists:nth(XParent_2 + 1, Nodes_16), 3) ++ [Y_2] ++ lists:nthtail(3 + 1, lists:nth(XParent_2 + 1, Nodes_16)))] ++ lists:nthtail(XParent_2 + 1, Nodes_16),
            Nodes_18
    end),
            Nodes_20 = Nodes_19,
            T_5
    end),
        Nodes_21 = lists:sublist(Nodes_20, Y_2) ++ [(lists:sublist(lists:nth(Y_2 + 1, Nodes_20), 4) ++ [X_2] ++ lists:nthtail(4 + 1, lists:nth(Y_2 + 1, Nodes_20)))] ++ lists:nthtail(Y_2 + 1, Nodes_20),
        Nodes_22 = lists:sublist(Nodes_21, X_2) ++ [(lists:sublist(lists:nth(X_2 + 1, Nodes_21), 2) ++ [Y_2] ++ lists:nthtail(2 + 1, lists:nth(X_2 + 1, Nodes_21)))] ++ lists:nthtail(X_2 + 1, Nodes_21),
        T_8 = maps:put("nodes", Nodes_22, T_7),
        T_8
    catch {return, RetCatch} -> RetCatch end.

insert_fix(T_9, Z) ->
    try
        Nodes_23 = maps:get("nodes", T_9, nil),
        Fun = fun Fun_loop(Nodes_23, T_9, Z) ->
    case ((Z /= maps:get("root", T_9, nil)) andalso ((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 1 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) == 1)) of
        true ->
            Z_10 = (case ((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) == (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(3, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 3 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(3 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end)) of
        true -> Y_3 = (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(4, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 4 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(4 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end),
            Z_5 = (case ((Y_3 /= erlang:get('NEG_ONE')) andalso ((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Y_3, Nodes_23, nil); _ -> case Y_3 < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Y_3 + 1, Nodes_23); _ -> mochi_nth(Y_3 + 1, Nodes_23) end end)) of true -> maps:get(1, (case erlang:is_map(Nodes_23) of true -> maps:get(Y_3, Nodes_23, nil); _ -> case Y_3 < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Y_3 + 1, Nodes_23); _ -> mochi_nth(Y_3 + 1, Nodes_23) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Y_3, Nodes_23, nil); _ -> case Y_3 < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Y_3 + 1, Nodes_23); _ -> mochi_nth(Y_3 + 1, Nodes_23) end end)) + 1 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Y_3, Nodes_23, nil); _ -> case Y_3 < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Y_3 + 1, Nodes_23); _ -> mochi_nth(Y_3 + 1, Nodes_23) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Y_3, Nodes_23, nil); _ -> case Y_3 < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Y_3 + 1, Nodes_23); _ -> mochi_nth(Y_3 + 1, Nodes_23) end end)) end end) == 1)) of
        true -> Nodes_24 = lists:sublist(Nodes_23, (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end)) ++ [(lists:sublist(lists:nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23), 1) ++ [0] ++ lists:nthtail(1 + 1, lists:nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23)))] ++ lists:nthtail((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23),
            Nodes_25 = lists:sublist(Nodes_24, Y_3) ++ [(lists:sublist(lists:nth(Y_3 + 1, Nodes_24), 1) ++ [0] ++ lists:nthtail(1 + 1, lists:nth(Y_3 + 1, Nodes_24)))] ++ lists:nthtail(Y_3 + 1, Nodes_24),
            Gp = (case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end), Nodes_25, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_25) + (case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) + 1, Nodes_25); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end), Nodes_25, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_25) + (case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) + 1, Nodes_25); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end), Nodes_25, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_25) + (case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) + 1, Nodes_25); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end), Nodes_25, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_25) + (case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) + 1, Nodes_25); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end), Nodes_25, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_25) + (case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) + 1, Nodes_25); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) + 2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_25) of true -> maps:get(Z, Nodes_25, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_25) + Z + 1, Nodes_25); _ -> mochi_nth(Z + 1, Nodes_25) end end)) end end) + 1, Nodes_25) end end)) end end),
            Nodes_26 = lists:sublist(Nodes_25, Gp) ++ [(lists:sublist(lists:nth(Gp + 1, Nodes_25), 1) ++ [1] ++ lists:nthtail(1 + 1, lists:nth(Gp + 1, Nodes_25)))] ++ lists:nthtail(Gp + 1, Nodes_25),
            Z_2 = Gp,
            Gp_3 = Gp,
            Nodes_32 = Nodes_26,
            T_15 = T_9,
            Z_2;
        _ -> Z_4 = (case (Z == (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(4, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 4 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(4 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end)) of
        true -> Z_3 = (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end),
            T_10 = maps:put("nodes", Nodes_23, T_9),
            T_11 = rotate_left(T_10, Z_3),
            Nodes_27 = maps:get("nodes", T_11, nil),
            Nodes_28 = Nodes_27,
            T_12 = T_11,
            Z_3;
        _ -> Nodes_28 = Nodes_23,
            T_12 = T_9,
            Z
    end),
            Nodes_29 = lists:sublist(Nodes_28, (case erlang:is_map((case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)) + 2 + 1, (case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)) end end)) ++ [(lists:sublist(lists:nth((case erlang:is_map((case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)) + 2 + 1, (case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)) end end) + 1, Nodes_28), 1) ++ [0] ++ lists:nthtail(1 + 1, lists:nth((case erlang:is_map((case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)) + 2 + 1, (case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)) end end) + 1, Nodes_28)))] ++ lists:nthtail((case erlang:is_map((case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)) + 2 + 1, (case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_28) of true -> maps:get(Z_4, Nodes_28, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_28) + Z_4 + 1, Nodes_28); _ -> mochi_nth(Z_4 + 1, Nodes_28) end end)) end end) + 1, Nodes_28),
            Gp_2 = (case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end), Nodes_29, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_29) + (case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) + 1, Nodes_29); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end), Nodes_29, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_29) + (case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) + 1, Nodes_29); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end), Nodes_29, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_29) + (case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) + 1, Nodes_29); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end), Nodes_29, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_29) + (case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) + 1, Nodes_29); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end), Nodes_29, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_29) + (case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) + 1, Nodes_29); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) + 2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_29) of true -> maps:get(Z_4, Nodes_29, nil); _ -> case Z_4 < 0 of true -> mochi_nth(erlang:length(Nodes_29) + Z_4 + 1, Nodes_29); _ -> mochi_nth(Z_4 + 1, Nodes_29) end end)) end end) + 1, Nodes_29) end end)) end end),
            Nodes_30 = lists:sublist(Nodes_29, Gp_2) ++ [(lists:sublist(lists:nth(Gp_2 + 1, Nodes_29), 1) ++ [1] ++ lists:nthtail(1 + 1, lists:nth(Gp_2 + 1, Nodes_29)))] ++ lists:nthtail(Gp_2 + 1, Nodes_29),
            T_13 = maps:put("nodes", Nodes_30, T_12),
            T_14 = rotate_right(T_13, Gp_2),
            Nodes_31 = maps:get("nodes", T_14, nil),
            Gp_3 = Gp_2,
            Nodes_32 = Nodes_31,
            T_15 = T_14,
            Z_4
    end),
            Gp_7 = Gp_3,
            Nodes_42 = Nodes_32,
            T_22 = T_15,
            Y_5 = Y_3,
            Z_5;
        _ -> Y_4 = (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(3, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 3 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(3 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end),
            Z_9 = (case ((Y_4 /= erlang:get('NEG_ONE')) andalso ((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Y_4, Nodes_23, nil); _ -> case Y_4 < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Y_4 + 1, Nodes_23); _ -> mochi_nth(Y_4 + 1, Nodes_23) end end)) of true -> maps:get(1, (case erlang:is_map(Nodes_23) of true -> maps:get(Y_4, Nodes_23, nil); _ -> case Y_4 < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Y_4 + 1, Nodes_23); _ -> mochi_nth(Y_4 + 1, Nodes_23) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Y_4, Nodes_23, nil); _ -> case Y_4 < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Y_4 + 1, Nodes_23); _ -> mochi_nth(Y_4 + 1, Nodes_23) end end)) + 1 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Y_4, Nodes_23, nil); _ -> case Y_4 < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Y_4 + 1, Nodes_23); _ -> mochi_nth(Y_4 + 1, Nodes_23) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Y_4, Nodes_23, nil); _ -> case Y_4 < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Y_4 + 1, Nodes_23); _ -> mochi_nth(Y_4 + 1, Nodes_23) end end)) end end) == 1)) of
        true -> Nodes_33 = lists:sublist(Nodes_23, (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end)) ++ [(lists:sublist(lists:nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23), 1) ++ [0] ++ lists:nthtail(1 + 1, lists:nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23)))] ++ lists:nthtail((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23),
            Nodes_34 = lists:sublist(Nodes_33, Y_4) ++ [(lists:sublist(lists:nth(Y_4 + 1, Nodes_33), 1) ++ [0] ++ lists:nthtail(1 + 1, lists:nth(Y_4 + 1, Nodes_33)))] ++ lists:nthtail(Y_4 + 1, Nodes_33),
            Gp_4 = (case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end), Nodes_34, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_34) + (case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) + 1, Nodes_34); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end), Nodes_34, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_34) + (case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) + 1, Nodes_34); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end), Nodes_34, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_34) + (case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) + 1, Nodes_34); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end), Nodes_34, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_34) + (case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) + 1, Nodes_34); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end), Nodes_34, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_34) + (case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) + 1, Nodes_34); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) + 2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_34) of true -> maps:get(Z, Nodes_34, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_34) + Z + 1, Nodes_34); _ -> mochi_nth(Z + 1, Nodes_34) end end)) end end) + 1, Nodes_34) end end)) end end),
            Nodes_35 = lists:sublist(Nodes_34, Gp_4) ++ [(lists:sublist(lists:nth(Gp_4 + 1, Nodes_34), 1) ++ [1] ++ lists:nthtail(1 + 1, lists:nth(Gp_4 + 1, Nodes_34)))] ++ lists:nthtail(Gp_4 + 1, Nodes_34),
            Z_6 = Gp_4,
            Gp_6 = Gp_4,
            Nodes_41 = Nodes_35,
            T_21 = T_9,
            Z_6;
        _ -> Z_8 = (case (Z == (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) of true -> maps:get(3, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end), nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) + 3 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)); _ -> mochi_nth(3 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end), Nodes_23, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_23) + (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end) + 1, Nodes_23) end end)) end end)) of
        true -> Z_7 = (case erlang:is_map((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) + 2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_23) of true -> maps:get(Z, Nodes_23, nil); _ -> case Z < 0 of true -> mochi_nth(erlang:length(Nodes_23) + Z + 1, Nodes_23); _ -> mochi_nth(Z + 1, Nodes_23) end end)) end end),
            T_16 = maps:put("nodes", Nodes_23, T_9),
            T_17 = rotate_right(T_16, Z_7),
            Nodes_36 = maps:get("nodes", T_17, nil),
            Nodes_37 = Nodes_36,
            T_18 = T_17,
            Z_7;
        _ -> Nodes_37 = Nodes_23,
            T_18 = T_9,
            Z
    end),
            Nodes_38 = lists:sublist(Nodes_37, (case erlang:is_map((case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)) + 2 + 1, (case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)) end end)) ++ [(lists:sublist(lists:nth((case erlang:is_map((case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)) + 2 + 1, (case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)) end end) + 1, Nodes_37), 1) ++ [0] ++ lists:nthtail(1 + 1, lists:nth((case erlang:is_map((case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)) + 2 + 1, (case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)) end end) + 1, Nodes_37)))] ++ lists:nthtail((case erlang:is_map((case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)) + 2 + 1, (case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_37) of true -> maps:get(Z_8, Nodes_37, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_37) + Z_8 + 1, Nodes_37); _ -> mochi_nth(Z_8 + 1, Nodes_37) end end)) end end) + 1, Nodes_37),
            Gp_5 = (case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end), Nodes_38, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_38) + (case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) + 1, Nodes_38); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end), Nodes_38, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_38) + (case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) + 1, Nodes_38); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end), Nodes_38, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_38) + (case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) + 1, Nodes_38); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end), Nodes_38, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_38) + (case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) + 1, Nodes_38); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get((case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end), Nodes_38, nil); _ -> case (case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) < 0 of true -> mochi_nth(erlang:length(Nodes_38) + (case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) + 1, Nodes_38); _ -> mochi_nth((case erlang:is_map((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) of true -> maps:get(2, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) + 2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Nodes_38) of true -> maps:get(Z_8, Nodes_38, nil); _ -> case Z_8 < 0 of true -> mochi_nth(erlang:length(Nodes_38) + Z_8 + 1, Nodes_38); _ -> mochi_nth(Z_8 + 1, Nodes_38) end end)) end end) + 1, Nodes_38) end end)) end end),
            Nodes_39 = lists:sublist(Nodes_38, Gp_5) ++ [(lists:sublist(lists:nth(Gp_5 + 1, Nodes_38), 1) ++ [1] ++ lists:nthtail(1 + 1, lists:nth(Gp_5 + 1, Nodes_38)))] ++ lists:nthtail(Gp_5 + 1, Nodes_38),
            T_19 = maps:put("nodes", Nodes_39, T_18),
            T_20 = rotate_left(T_19, Gp_5),
            Nodes_40 = maps:get("nodes", T_20, nil),
            Gp_6 = Gp_5,
            Nodes_41 = Nodes_40,
            T_21 = T_20,
            Z_8
    end),
            Gp_7 = Gp_6,
            Nodes_42 = Nodes_41,
            T_22 = T_21,
            Y_5 = Y_4,
            Z_9
    end),
            Fun_loop(Nodes_42, T_22, Z_10);
        _ -> {Nodes_23, T_9, Z}
    end
end,
{Nodes_42, T_22, Z_10} = Fun(Nodes_23, T_9, Z),
        Nodes_43 = maps:get("nodes", T_22, nil),
        Nodes_44 = lists:sublist(Nodes_43, maps:get("root", T_22, nil)) ++ [(lists:sublist(lists:nth(maps:get("root", T_22, nil) + 1, Nodes_43), 1) ++ [0] ++ lists:nthtail(1 + 1, lists:nth(maps:get("root", T_22, nil) + 1, Nodes_43)))] ++ lists:nthtail(maps:get("root", T_22, nil) + 1, Nodes_43),
        T_23 = maps:put("nodes", Nodes_44, T_22),
        T_23
    catch {return, RetCatch} -> RetCatch end.

tree_insert(T_24, V) ->
    try
        Nodes_45 = maps:get("nodes", T_24, nil),
        Node = [V, 1, -1, -1, -1],
        Nodes_46 = lists:append((case Nodes_45 of nil -> []; _ -> Nodes_45 end), [Node]),
        Idx = (erlang:length(Nodes_46) - 1),
        Y_6 = erlang:get('NEG_ONE'),
        X_3 = maps:get("root", T_24, nil),
        Fun_2 = fun Fun_2_loop(Idx, Node, Nodes_46, T_24, V, X_3, Y_6) ->
    case (X_3 /= erlang:get('NEG_ONE')) of
        true ->
            Y_7 = X_3,
            X_6 = (case (V < (case erlang:is_map((case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end)) of true -> maps:get(0, (case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end)) + 0 + 1, (case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end)) end end)) of
        true -> X_4 = (case erlang:is_map((case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end)) of true -> maps:get(3, (case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end), nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end)) + 3 + 1, (case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end)); _ -> mochi_nth(3 + 1, (case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end)) end end),
            X_4;
        _ -> X_5 = (case erlang:is_map((case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end)) of true -> maps:get(4, (case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end)) + 4 + 1, (case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end)); _ -> mochi_nth(4 + 1, (case erlang:is_map(Nodes_46) of true -> maps:get(X_3, Nodes_46, nil); _ -> case X_3 < 0 of true -> mochi_nth(erlang:length(Nodes_46) + X_3 + 1, Nodes_46); _ -> mochi_nth(X_3 + 1, Nodes_46) end end)) end end),
            X_5
    end),
            Fun_2_loop(Idx, Node, Nodes_46, T_24, V, X_6, Y_7);
        _ -> {Idx, Node, Nodes_46, T_24, V, X_3, Y_6}
    end
end,
{Idx, Node, Nodes_46, T_24, V, X_6, Y_7} = Fun_2(Idx, Node, Nodes_46, T_24, V, X_3, Y_6),
        Nodes_47 = lists:sublist(Nodes_46, Idx) ++ [(lists:sublist(lists:nth(Idx + 1, Nodes_46), 2) ++ [Y_7] ++ lists:nthtail(2 + 1, lists:nth(Idx + 1, Nodes_46)))] ++ lists:nthtail(Idx + 1, Nodes_46),
        T_26 = (case (Y_7 == erlang:get('NEG_ONE')) of
        true -> T_25 = maps:put("root", Idx, T_24),
            Nodes_51 = Nodes_47,
            T_25;
        _ -> Nodes_50 = (case (V < (case erlang:is_map((case erlang:is_map(Nodes_47) of true -> maps:get(Y_7, Nodes_47, nil); _ -> case Y_7 < 0 of true -> mochi_nth(erlang:length(Nodes_47) + Y_7 + 1, Nodes_47); _ -> mochi_nth(Y_7 + 1, Nodes_47) end end)) of true -> maps:get(0, (case erlang:is_map(Nodes_47) of true -> maps:get(Y_7, Nodes_47, nil); _ -> case Y_7 < 0 of true -> mochi_nth(erlang:length(Nodes_47) + Y_7 + 1, Nodes_47); _ -> mochi_nth(Y_7 + 1, Nodes_47) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Nodes_47) of true -> maps:get(Y_7, Nodes_47, nil); _ -> case Y_7 < 0 of true -> mochi_nth(erlang:length(Nodes_47) + Y_7 + 1, Nodes_47); _ -> mochi_nth(Y_7 + 1, Nodes_47) end end)) + 0 + 1, (case erlang:is_map(Nodes_47) of true -> maps:get(Y_7, Nodes_47, nil); _ -> case Y_7 < 0 of true -> mochi_nth(erlang:length(Nodes_47) + Y_7 + 1, Nodes_47); _ -> mochi_nth(Y_7 + 1, Nodes_47) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Nodes_47) of true -> maps:get(Y_7, Nodes_47, nil); _ -> case Y_7 < 0 of true -> mochi_nth(erlang:length(Nodes_47) + Y_7 + 1, Nodes_47); _ -> mochi_nth(Y_7 + 1, Nodes_47) end end)) end end)) of
        true -> Nodes_48 = lists:sublist(Nodes_47, Y_7) ++ [(lists:sublist(lists:nth(Y_7 + 1, Nodes_47), 3) ++ [Idx] ++ lists:nthtail(3 + 1, lists:nth(Y_7 + 1, Nodes_47)))] ++ lists:nthtail(Y_7 + 1, Nodes_47),
            Nodes_48;
        _ -> Nodes_49 = lists:sublist(Nodes_47, Y_7) ++ [(lists:sublist(lists:nth(Y_7 + 1, Nodes_47), 4) ++ [Idx] ++ lists:nthtail(4 + 1, lists:nth(Y_7 + 1, Nodes_47)))] ++ lists:nthtail(Y_7 + 1, Nodes_47),
            Nodes_49
    end),
            Nodes_51 = Nodes_50,
            T_24
    end),
        T_27 = maps:put("nodes", Nodes_51, T_26),
        T_28 = insert_fix(T_27, Idx),
        T_28
    catch {return, RetCatch} -> RetCatch end.

inorder(T_29, X_7, Acc) ->
    try
        case (X_7 == erlang:get('NEG_ONE')) of
        true -> throw({return, Acc});
        _ -> ok
    end,
        Acc_2 = inorder(T_29, (case erlang:is_map((case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end)) of true -> maps:get(3, (case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end), nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end)) + 3 + 1, (case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end)); _ -> mochi_nth(3 + 1, (case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end)) end end), Acc),
        Acc_3 = lists:append((case Acc_2 of nil -> []; _ -> Acc_2 end), [(case erlang:is_map((case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end)) of true -> maps:get(0, (case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end)) + 0 + 1, (case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end)) end end)]),
        Acc_4 = inorder(T_29, (case erlang:is_map((case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end)) of true -> maps:get(4, (case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end)) + 4 + 1, (case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end)); _ -> mochi_nth(4 + 1, (case erlang:is_map(maps:get("nodes", T_29, nil)) of true -> maps:get(X_7, maps:get("nodes", T_29, nil), nil); _ -> case X_7 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", T_29, nil)) + X_7 + 1, maps:get("nodes", T_29, nil)); _ -> mochi_nth(X_7 + 1, maps:get("nodes", T_29, nil)) end end)) end end), Acc_3),
        Acc_4
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        T_30 = make_tree(),
        Values = [10, 20, 30, 15, 25, 5, 1],
        I = 0,
        Fun_3 = fun Fun_3_loop(I, T_30, Values) ->
    case (I < erlang:length(Values)) of
        true ->
            T_31 = tree_insert(T_30, (case erlang:is_map(Values) of true -> maps:get(I, Values, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Values) + I + 1, Values); _ -> mochi_nth(I + 1, Values) end end)),
            I_2 = (I + 1),
            Fun_3_loop(I_2, T_31, Values);
        _ -> {I, T_30, Values}
    end
end,
{I_2, T_31, Values} = Fun_3(I, T_30, Values),
        Res = [],
        Res_2 = inorder(T_31, maps:get("root", T_31, nil), Res),
        io:format("~s~n", [mochi_str(Res_2)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('LABEL', 0),
    erlang:put('COLOR', 1),
    erlang:put('PARENT', 2),
    erlang:put('LEFT', 3),
    erlang:put('RIGHT', 4),
    erlang:put('NEG_ONE', -1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
