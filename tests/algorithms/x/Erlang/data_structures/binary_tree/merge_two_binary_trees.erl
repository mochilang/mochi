#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, merge_two_binary_trees/2, is_leaf/1, get_left/1, get_right/1, get_value/1, print_preorder/1]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

merge_two_binary_trees(T1, T2) ->
    try
        (case T1 of
    #{"tag" := "leaf"} -> T2;
    #{"tag" := "node", "left" := L1, "value" := V1, "right" := R1} -> (case T2 of
    #{"tag" := "leaf"} -> T1;
    #{"tag" := "node", "left" := L2, "value" := V2, "right" := R2} -> #{"tag" => "node", "left" => merge_two_binary_trees(L1, L2), "value" => (V1 + V2), "right" => merge_two_binary_trees(R1, R2)}
end)
end)
    catch {return, Ret} -> Ret end.

is_leaf(T) ->
    try
        (case T of
    #{"tag" := "leaf"} -> true;
    _ -> false
end)
    catch {return, Ret} -> Ret end.

get_left(T_2) ->
    try
        (case T_2 of
    #{"tag" := "node", "left" := L, "value" := _, "right" := _} -> L;
    _ -> #{"tag" => "leaf"}
end)
    catch {return, Ret} -> Ret end.

get_right(T_3) ->
    try
        (case T_3 of
    #{"tag" := "node", "left" := _, "value" := _, "right" := R} -> R;
    _ -> #{"tag" => "leaf"}
end)
    catch {return, Ret} -> Ret end.

get_value(T_4) ->
    try
        (case T_4 of
    #{"tag" := "node", "left" := _, "value" := V, "right" := _} -> V;
    _ -> 0
end)
    catch {return, Ret} -> Ret end.

print_preorder(T_5) ->
    try
        case mochi_not(is_leaf(T_5)) of
        true -> V_2 = get_value(T_5),
            L_2 = get_left(T_5),
            R_2 = get_right(T_5),
            io:format("~ts~n", [mochi_repr(V_2)]),
            print_preorder(L_2),
            print_preorder(R_2),
            L_3 = L_2,
            R_3 = R_2,
            V_3 = V_2;
        _ -> L_3 = nil,
            R_3 = nil,
            V_3 = nil
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('tree1', #{"tag" => "node", "left" => #{"tag" => "node", "left" => #{"tag" => "node", "left" => #{"tag" => "leaf"}, "value" => 4, "right" => #{"tag" => "leaf"}}, "value" => 2, "right" => #{"tag" => "leaf"}}, "value" => 1, "right" => #{"tag" => "node", "left" => #{"tag" => "leaf"}, "value" => 3, "right" => #{"tag" => "leaf"}}}),
    erlang:put('tree2', #{"tag" => "node", "left" => #{"tag" => "node", "left" => #{"tag" => "leaf"}, "value" => 4, "right" => #{"tag" => "node", "left" => #{"tag" => "leaf"}, "value" => 9, "right" => #{"tag" => "leaf"}}}, "value" => 2, "right" => #{"tag" => "node", "left" => #{"tag" => "leaf"}, "value" => 6, "right" => #{"tag" => "node", "left" => #{"tag" => "leaf"}, "value" => 5, "right" => #{"tag" => "leaf"}}}}),
    io:format("~ts~n", [mochi_repr("Tree1 is:")]),
    print_preorder(erlang:get('tree1')),
    io:format("~ts~n", [mochi_repr("Tree2 is:")]),
    print_preorder(erlang:get('tree2')),
    erlang:put('merged_tree', merge_two_binary_trees(erlang:get('tree1'), erlang:get('tree2'))),
    io:format("~ts~n", [mochi_repr("Merged Tree is:")]),
    print_preorder(erlang:get('merged_tree')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
