#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, new_suffix_tree_node/5, empty_suffix_tree_node/0, has_key/2]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

new_suffix_tree_node(Children, Is_end_of_string, Start, End, Suffix_link) ->
    try
        #{"children" => Children, "is_end_of_string" => Is_end_of_string, "start" => Start, "end" => End, "suffix_link" => Suffix_link}
    catch {return, RetCatch} -> RetCatch end.

empty_suffix_tree_node() ->
    try
        new_suffix_tree_node(#{}, false, (0 - 1), (0 - 1), (0 - 1))
    catch {return, RetCatch} -> RetCatch end.

has_key(M, K) ->
    try
        Fun = fun Fun_loop(List, K, M) ->
    case List of
        [] -> {K, M};
        [Key|Key_rest] ->
            case (Key == K) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_loop(Key_rest, K, M);
        _ -> {K, M}
    end
end,
{K, M} = Fun(maps:keys(M), K, M),
        false
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('root', new_suffix_tree_node(#{"a" => 1}, false, (0 - 1), (0 - 1), (0 - 1))),
    erlang:put('leaf', new_suffix_tree_node(#{}, true, 0, 2, 0)),
    erlang:put('nodes', [erlang:get('root'), erlang:get('leaf')]),
    erlang:put('root_check', (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(0, erlang:get('nodes'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + 0 + 1, erlang:get('nodes')); _ -> mochi_nth(0 + 1, erlang:get('nodes')) end end)),
    erlang:put('leaf_check', (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(1, erlang:get('nodes'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + 1 + 1, erlang:get('nodes')); _ -> mochi_nth(1 + 1, erlang:get('nodes')) end end)),
    io:format("~s~n", [mochi_str(has_key(maps:get("children", erlang:get('root_check'), nil), "a"))]),
    io:format("~s~n", [mochi_str(maps:get("is_end_of_string", erlang:get('leaf_check'), nil))]),
    io:format("~s~n", [mochi_str(maps:get("start", erlang:get('leaf_check'), nil))]),
    io:format("~s~n", [mochi_str(maps:get("end", erlang:get('leaf_check'), nil))]),
    io:format("~s~n", [mochi_str(maps:get("suffix_link", erlang:get('leaf_check'), nil))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
