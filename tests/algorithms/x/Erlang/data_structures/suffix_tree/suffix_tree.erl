#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, new_node/0, has_key/2, add_suffix/3, build_suffix_tree/1, new_suffix_tree/1, search/2]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

new_node() ->
    try
        #{"children" => #{}, "is_end_of_string" => false, "start" => -1, "end" => -1}
    catch {return, RetCatch} -> RetCatch end.

has_key(M, K) ->
    try
        Fun = fun Fun_loop(List, K, M) ->
    case List of
        [] -> {K, M};
        [Key|Key_rest] ->
            case (Key == K) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_loop(Key_rest, K, M);
        _ -> {K, M}
    end
end,
{K, M} = Fun(maps:keys(M), K, M),
        false
    catch {return, RetCatch} -> RetCatch end.

add_suffix(Tree, Suffix, Index) ->
    try
        Nodes = maps:get("nodes", Tree, nil),
        Node_idx = 0,
        J = 0,
        Fun_2 = fun Fun_2_loop(Index, J, Node_idx, Nodes, Suffix, Tree) ->
    case (J < erlang:length(Suffix)) of
        true ->
            Ch = string:substr(Suffix, J + 1, ((J + 1) - J)),
            Node = (case erlang:is_map(Nodes) of true -> maps:get(Node_idx, Nodes, nil); _ -> case Node_idx < 0 of true -> mochi_nth(erlang:length(Nodes) + Node_idx + 1, Nodes); _ -> mochi_nth(Node_idx + 1, Nodes) end end),
            Children = maps:get("children", Node, nil),
            Nodes_3 = (case mochi_not(has_key(Children, Ch)) of
        true -> Nodes_2 = lists:append((case Nodes of nil -> []; _ -> Nodes end), [new_node()]),
            New_idx = (erlang:length(Nodes_2) - 1),
            Children_2 = maps:put(Ch, New_idx, Children),
            Children_3 = Children_2,
            New_idx_2 = New_idx,
            Nodes_2;
        _ -> Children_3 = Children,
            New_idx_2 = nil,
            Nodes
    end),
            Node_2 = maps:put("children", Children_3, Node),
            Nodes_4 = lists:sublist(Nodes_3, Node_idx) ++ [Node_2] ++ lists:nthtail(Node_idx + 1, Nodes_3),
            Node_idx_2 = maps:get(Ch, Children_3, nil),
            J_2 = (J + 1),
            Fun_2_loop(Index, J_2, Node_idx_2, Nodes_4, Suffix, Tree);
        _ -> {Index, J, Node_idx, Nodes, Suffix, Tree}
    end
end,
{Index, J_2, Node_idx_2, Nodes_4, Suffix, Tree} = Fun_2(Index, J, Node_idx, Nodes, Suffix, Tree),
        Node_3 = (case erlang:is_map(Nodes_4) of true -> maps:get(Node_idx_2, Nodes_4, nil); _ -> case Node_idx_2 < 0 of true -> mochi_nth(erlang:length(Nodes_4) + Node_idx_2 + 1, Nodes_4); _ -> mochi_nth(Node_idx_2 + 1, Nodes_4) end end),
        Node_4 = maps:put("is_end_of_string", true, Node_3),
        Node_5 = maps:put("start", Index, Node_4),
        Node_6 = maps:put("end", ((Index + erlang:length(Suffix)) - 1), Node_5),
        Nodes_5 = lists:sublist(Nodes_4, Node_idx_2) ++ [Node_6] ++ lists:nthtail(Node_idx_2 + 1, Nodes_4),
        Tree_2 = maps:put("nodes", Nodes_5, Tree),
        Tree_2
    catch {return, RetCatch} -> RetCatch end.

build_suffix_tree(Tree_3) ->
    try
        Text = maps:get("text", Tree_3, nil),
        N = erlang:length(Text),
        I = 0,
        T = Tree_3,
        Fun_4 = fun Fun_4_loop(I, N, T, Text, Tree_3) ->
    case (I < N) of
        true ->
            Suffix_2 = "",
            K_2 = I,
            Fun_3 = fun Fun_3_loop(I, K_2, N, Suffix_2, T, Text, Tree_3) ->
    case (K_2 < N) of
        true ->
            Suffix_3 = (Suffix_2 ++ string:substr(Text, K_2 + 1, ((K_2 + 1) - K_2))),
            K_3 = (K_2 + 1),
            Fun_3_loop(I, K_3, N, Suffix_3, T, Text, Tree_3);
        _ -> {I, K_2, N, Suffix_2, T, Text, Tree_3}
    end
end,
{I, K_3, N, Suffix_3, T, Text, Tree_3} = Fun_3(I, K_2, N, Suffix_2, T, Text, Tree_3),
            T_2 = add_suffix(T, Suffix_3, I),
            I_2 = (I + 1),
            Fun_4_loop(I_2, N, T_2, Text, Tree_3);
        _ -> {I, N, T, Text, Tree_3}
    end
end,
{I_2, N, T_2, Text, Tree_3} = Fun_4(I, N, T, Text, Tree_3),
        T_2
    catch {return, RetCatch} -> RetCatch end.

new_suffix_tree(Text_2) ->
    try
        Tree_4 = #{"text" => Text_2, "nodes" => []},
        Tree_5 = maps:put("nodes", lists:append((case maps:get("nodes", Tree_4, nil) of nil -> []; _ -> maps:get("nodes", Tree_4, nil) end), [new_node()]), Tree_4),
        Tree_6 = build_suffix_tree(Tree_5),
        Tree_6
    catch {return, RetCatch} -> RetCatch end.

search(Tree_7, Pattern) ->
    try
        Node_idx_3 = 0,
        I_3 = 0,
        Nodes_6 = maps:get("nodes", Tree_7, nil),
        Fun_5 = fun Fun_5_loop(I_3, Node_idx_3, Nodes_6, Pattern, Tree_7) ->
    case (I_3 < erlang:length(Pattern)) of
        true ->
            Ch_2 = string:substr(Pattern, I_3 + 1, ((I_3 + 1) - I_3)),
            Node_7 = (case erlang:is_map(Nodes_6) of true -> maps:get(Node_idx_3, Nodes_6, nil); _ -> case Node_idx_3 < 0 of true -> mochi_nth(erlang:length(Nodes_6) + Node_idx_3 + 1, Nodes_6); _ -> mochi_nth(Node_idx_3 + 1, Nodes_6) end end),
            Children_4 = maps:get("children", Node_7, nil),
            case mochi_not(has_key(Children_4, Ch_2)) of
        true -> throw({return, false});
        _ -> ok
    end,
            Node_idx_4 = maps:get(Ch_2, Children_4, nil),
            I_4 = (I_3 + 1),
            Fun_5_loop(I_4, Node_idx_4, Nodes_6, Pattern, Tree_7);
        _ -> {I_3, Node_idx_3, Nodes_6, Pattern, Tree_7}
    end
end,
{I_4, Node_idx_4, Nodes_6, Pattern, Tree_7} = Fun_5(I_3, Node_idx_3, Nodes_6, Pattern, Tree_7),
        true
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('st', new_suffix_tree("bananas")),
    io:format("~s~n", [mochi_str(search(erlang:get('st'), "ana"))]),
    io:format("~s~n", [mochi_str(search(erlang:get('st'), "apple"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
