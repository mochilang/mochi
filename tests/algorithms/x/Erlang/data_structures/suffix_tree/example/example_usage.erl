#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, new_suffix_tree/1, search/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (9be2afe36e) on 2025-08-07 08:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

new_suffix_tree(Text) ->
    try
        #{"text" => Text}
    catch {return, Ret} -> Ret end.

search(Tree, Pattern) ->
    try
        N = erlang:length(maps:get("text", Tree, nil)),
        M = erlang:length(Pattern),
        case (M == 0) of
        true -> throw({return, true});
        _ -> ok
    end,
        case (M > N) of
        true -> throw({return, false});
        _ -> ok
    end,
        I = 0,
        Fun = fun Fun_loop(I, M, N, Pattern, Tree) ->
    case (I =< (N - M)) of
        true ->
            case (lists:sublist(maps:get("text", Tree, nil), I + 1, ((I + M) - I)) == Pattern) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, M, N, Pattern, Tree);
        _ -> {I, M, N, Pattern, Tree}
    end
end,
{I_2, M, N, Pattern, Tree} = Fun(I, M, N, Pattern, Tree),
        false
    catch {return, Ret} -> Ret end.

main() ->
    try
        Text_2 = "monkey banana",
        Suffix_tree = new_suffix_tree("monkey banana"),
        Patterns = ["ana", "ban", "na", "xyz", "mon"],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Patterns, Suffix_tree, Text_2) ->
    case (I_3 < erlang:length(Patterns)) of
        true ->
            Pattern_2 = (case erlang:is_map(Patterns) of true -> maps:get(I_3, Patterns, nil); _ -> lists:nth(I_3 + 1, Patterns) end),
            Found = search(Suffix_tree, Pattern_2),
            io:format("~ts~n", [mochi_repr(((("Pattern '" ++ Pattern_2) ++ "' found: ") ++ mochi_str(Found)))]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Patterns, Suffix_tree, Text_2);
        _ -> {I_3, Patterns, Suffix_tree, Text_2}
    end
end,
{I_4, Patterns, Suffix_tree, Text_2} = Fun_2(I_3, Patterns, Suffix_tree, Text_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
