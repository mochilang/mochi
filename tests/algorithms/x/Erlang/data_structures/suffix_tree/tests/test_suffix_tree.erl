#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, suffix_tree_new/1, suffix_tree_search/2]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

suffix_tree_new(Text) ->
    try
        #{"text" => Text}
    catch {return, RetCatch} -> RetCatch end.

suffix_tree_search(St, Pattern) ->
    try
        case (erlang:length(Pattern) == 0) of
        true -> throw({return, true});
        _ -> ok
    end,
        I = 0,
        N = erlang:length(maps:get("text", St, nil)),
        M = erlang:length(Pattern),
        Fun_2 = fun Fun_2_loop(I, M, N, Pattern, St) ->
    case (I =< (N - M)) of
        true ->
            try
                J = 0,
                Found = true,
                Fun = fun Fun_loop(Found, I, J, M, N, Pattern, St) ->
    case (J < M) of
        true ->
            try
                Found_3 = (case (string:substr(maps:get("text", St, nil), (I + J) + 1, 1) /= string:substr(Pattern, J + 1, 1)) of
        true -> Found_2 = false,
            throw({break, {Found_2, I, J, M, N, Pattern, St}}),
            Found_2;
        _ -> Found
    end),
                J_2 = (J + 1),
                Fun_loop(Found_3, I, J_2, M, N, Pattern, St)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, Bs} -> Bs
            end;
        _ -> {Found, I, J, M, N, Pattern, St}
    end
end,
{Found_3, I, J_2, M, N, Pattern, St} = Fun(Found, I, J, M, N, Pattern, St),
                case (Found_3 /= nil) of
        true -> throw({return, true});
        _ -> ok
    end,
                I_2 = (I + 1),
                Fun_2_loop(I_2, M, N, Pattern, St)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_2_loop(C0, C1, C2, C3, C4);
                {break, Bs} -> Bs
            end;
        _ -> {I, M, N, Pattern, St}
    end
end,
{I_2, M, N, Pattern, St} = Fun_2(I, M, N, Pattern, St),
        false
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('text', "banana"),
    erlang:put('st', suffix_tree_new("banana")),
    erlang:put('patterns_exist', ["ana", "ban", "na"]),
    erlang:put('i', 0),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('i') < erlang:length(erlang:get('patterns_exist'))) of
        true ->
            io:format("~s~n", [mochi_str(suffix_tree_search(erlang:get('st'), (case erlang:is_map(erlang:get('patterns_exist')) of true -> maps:get(erlang:get('i'), erlang:get('patterns_exist'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('patterns_exist')) + erlang:get('i') + 1, erlang:get('patterns_exist')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('patterns_exist')) end end)))]),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    erlang:put('patterns_none', ["xyz", "apple", "cat"]),
    erlang:put('i', 0),
    Fun_4 = fun Fun_4_loop() ->
    case (erlang:get('i') < erlang:length(erlang:get('patterns_none'))) of
        true ->
            io:format("~s~n", [mochi_str(suffix_tree_search(erlang:get('st'), (case erlang:is_map(erlang:get('patterns_none')) of true -> maps:get(erlang:get('i'), erlang:get('patterns_none'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('patterns_none')) + erlang:get('i') + 1, erlang:get('patterns_none')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('patterns_none')) end end)))]),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_4_loop();
        _ -> {}
    end
end,
{} = Fun_4(),
    io:format("~s~n", [mochi_str(suffix_tree_search(erlang:get('st'), ""))]),
    io:format("~s~n", [mochi_str(suffix_tree_search(erlang:get('st'), "banana"))]),
    erlang:put('substrings', ["ban", "ana", "a", "na"]),
    erlang:put('i', 0),
    Fun_5 = fun Fun_5_loop() ->
    case (erlang:get('i') < erlang:length(erlang:get('substrings'))) of
        true ->
            io:format("~s~n", [mochi_str(suffix_tree_search(erlang:get('st'), (case erlang:is_map(erlang:get('substrings')) of true -> maps:get(erlang:get('i'), erlang:get('substrings'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('substrings')) + erlang:get('i') + 1, erlang:get('substrings')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('substrings')) end end)))]),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_5_loop();
        _ -> {}
    end
end,
{} = Fun_5(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
