#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, is_prime/1, prev_prime/1, create_table/1, hash1/2, hash2/2, insert_double_hash/4, table_keys/1, run_example/2]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

is_prime(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        I = 2,
        Fun = fun Fun_loop(I, N) ->
    case ((I * I) =< N) of
        true ->
            case (mochi_mod(N, I) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, N);
        _ -> {I, N}
    end
end,
{I_2, N} = Fun(I, N),
        true
    catch {return, RetCatch} -> RetCatch end.

prev_prime(N_2) ->
    try
        P = (N_2 - 1),
        Fun_2 = fun Fun_2_loop(N_2, P) ->
    case (P >= 2) of
        true ->
            case is_prime(P) of
        true -> throw({return, P});
        _ -> ok
    end,
            P_2 = (P - 1),
            Fun_2_loop(N_2, P_2);
        _ -> {N_2, P}
    end
end,
{N_2, P_2} = Fun_2(N_2, P),
        1
    catch {return, RetCatch} -> RetCatch end.

create_table(Size) ->
    try
        Vals = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, Size, Vals) ->
    case (I_3 < Size) of
        true ->
            Vals_2 = lists:append((case Vals of nil -> []; _ -> Vals end), [-1]),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Size, Vals_2);
        _ -> {I_3, Size, Vals}
    end
end,
{I_4, Size, Vals_2} = Fun_3(I_3, Size, Vals),
        Vals_2
    catch {return, RetCatch} -> RetCatch end.

hash1(Size_2, Key) ->
    try
        mochi_mod(Key, Size_2)
    catch {return, RetCatch} -> RetCatch end.

hash2(Prime, Key_2) ->
    try
        (Prime - mochi_mod(Key_2, Prime))
    catch {return, RetCatch} -> RetCatch end.

insert_double_hash(Values, Size_3, Prime_2, Value) ->
    try
        Vals_3 = Values,
        Idx = hash1(Size_3, Value),
        Step = hash2(Prime_2, Value),
        Count = 0,
        Fun_4 = fun Fun_4_loop(Count, Idx, Prime_2, Size_3, Step, Vals_3, Value, Values) ->
    case (((case erlang:is_map(Vals_3) of true -> maps:get(Idx, Vals_3, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Vals_3) + Idx + 1, Vals_3); _ -> mochi_nth(Idx + 1, Vals_3) end end) /= -1) andalso (Count < Size_3)) of
        true ->
            Idx_2 = mochi_mod((Idx + Step), Size_3),
            Count_2 = (Count + 1),
            Fun_4_loop(Count_2, Idx_2, Prime_2, Size_3, Step, Vals_3, Value, Values);
        _ -> {Count, Idx, Prime_2, Size_3, Step, Vals_3, Value, Values}
    end
end,
{Count_2, Idx_2, Prime_2, Size_3, Step, Vals_3, Value, Values} = Fun_4(Count, Idx, Prime_2, Size_3, Step, Vals_3, Value, Values),
        Vals_5 = (case ((case erlang:is_map(Vals_3) of true -> maps:get(Idx_2, Vals_3, nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(Vals_3) + Idx_2 + 1, Vals_3); _ -> mochi_nth(Idx_2 + 1, Vals_3) end end) == -1) of
        true -> Vals_4 = lists:sublist(Vals_3, Idx_2) ++ [Value] ++ lists:nthtail(Idx_2 + 1, Vals_3),
            Vals_4;
        _ -> Vals_3
    end),
        Vals_5
    catch {return, RetCatch} -> RetCatch end.

table_keys(Values_2) ->
    try
        Res = #{},
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(I_5, Res, Values_2) ->
    case (I_5 < erlang:length(Values_2)) of
        true ->
            Res_3 = (case ((case erlang:is_map(Values_2) of true -> maps:get(I_5, Values_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Values_2) + I_5 + 1, Values_2); _ -> mochi_nth(I_5 + 1, Values_2) end end) /= -1) of
        true -> Res_2 = maps:put(I_5, (case erlang:is_map(Values_2) of true -> maps:get(I_5, Values_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Values_2) + I_5 + 1, Values_2); _ -> mochi_nth(I_5 + 1, Values_2) end end), Res),
            Res_2;
        _ -> Res
    end),
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, Res_3, Values_2);
        _ -> {I_5, Res, Values_2}
    end
end,
{I_6, Res_3, Values_2} = Fun_5(I_5, Res, Values_2),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

run_example(Size_4, Data) ->
    try
        Prime_3 = prev_prime(Size_4),
        Table = create_table(Size_4),
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(Data, I_7, Prime_3, Size_4, Table) ->
    case (I_7 < erlang:length(Data)) of
        true ->
            Table_2 = insert_double_hash(Table, Size_4, Prime_3, (case erlang:is_map(Data) of true -> maps:get(I_7, Data, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Data) + I_7 + 1, Data); _ -> mochi_nth(I_7 + 1, Data) end end)),
            I_8 = (I_7 + 1),
            Fun_6_loop(Data, I_8, Prime_3, Size_4, Table_2);
        _ -> {Data, I_7, Prime_3, Size_4, Table}
    end
end,
{Data, I_8, Prime_3, Size_4, Table_2} = Fun_6(Data, I_7, Prime_3, Size_4, Table),
        io:format("~s~n", [mochi_str(table_keys(Table_2))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    run_example(3, [10, 20, 30]),
    run_example(4, [10, 20, 30]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
