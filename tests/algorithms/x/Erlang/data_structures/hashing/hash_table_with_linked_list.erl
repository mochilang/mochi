#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_table/2, hash_function/2, prepend/2, set_value/3, count_empty/1, balanced_factor/1, collision_resolution/2, insert/2, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

make_table(Size_table, Charge_factor) ->
    try
        Vals = [],
        I = 0,
        Fun = fun Fun_loop(Charge_factor, I, Size_table, Vals) ->
    case (I < Size_table) of
        true ->
            Vals_2 = lists:append((case Vals of nil -> []; _ -> Vals end), [[]]),
            I_2 = (I + 1),
            Fun_loop(Charge_factor, I_2, Size_table, Vals_2);
        _ -> {Charge_factor, I, Size_table, Vals}
    end
end,
{Charge_factor, I_2, Size_table, Vals_2} = Fun(Charge_factor, I, Size_table, Vals),
        #{"size_table" => Size_table, "charge_factor" => Charge_factor, "values" => Vals_2, "keys" => #{}}
    catch {return, RetCatch} -> RetCatch end.

hash_function(Ht, Key) ->
    try
        Res = mochi_mod(Key, maps:get("size_table", Ht, nil)),
        Res_3 = (case (Res < 0) of
        true -> Res_2 = (Res + maps:get("size_table", Ht, nil)),
            Res_2;
        _ -> Res
    end),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

prepend(Lst, Value) ->
    try
        Result = [Value],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Lst, Result, Value) ->
    case (I_3 < erlang:length(Lst)) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Lst) of true -> maps:get(I_3, Lst, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Lst) + I_3 + 1, Lst); _ -> mochi_nth(I_3 + 1, Lst) end end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Lst, Result_2, Value);
        _ -> {I_3, Lst, Result, Value}
    end
end,
{I_4, Lst, Result_2, Value} = Fun_2(I_3, Lst, Result, Value),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

set_value(Ht_2, Key_2, Data) ->
    try
        Current = (case erlang:is_map(maps:get("values", Ht_2, nil)) of true -> maps:get(Key_2, maps:get("values", Ht_2, nil), nil); _ -> case Key_2 < 0 of true -> mochi_nth(erlang:length(maps:get("values", Ht_2, nil)) + Key_2 + 1, maps:get("values", Ht_2, nil)); _ -> mochi_nth(Key_2 + 1, maps:get("values", Ht_2, nil)) end end),
        Updated = prepend(Current, Data),
        Vals_3 = maps:get("values", Ht_2, nil),
        Vals_4 = lists:sublist(Vals_3, Key_2) ++ [Updated] ++ lists:nthtail(Key_2 + 1, Vals_3),
        Ht_3 = maps:put("values", Vals_4, Ht_2),
        Ks = maps:get("keys", Ht_3, nil),
        Ks_2 = maps:put(Key_2, Updated, Ks),
        Ht_4 = maps:put("keys", Ks_2, Ht_3),
        {nil, Ht_4}
    catch {return, RetCatch} -> RetCatch end.

count_empty(Ht_5) ->
    try
        Count = 0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Count, Ht_5, I_5) ->
    case (I_5 < erlang:length(maps:get("values", Ht_5, nil))) of
        true ->
            Count_3 = (case (erlang:length((case erlang:is_map(maps:get("values", Ht_5, nil)) of true -> maps:get(I_5, maps:get("values", Ht_5, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("values", Ht_5, nil)) + I_5 + 1, maps:get("values", Ht_5, nil)); _ -> mochi_nth(I_5 + 1, maps:get("values", Ht_5, nil)) end end)) == 0) of
        true -> Count_2 = (Count + 1),
            Count_2;
        _ -> Count
    end),
            I_6 = (I_5 + 1),
            Fun_3_loop(Count_3, Ht_5, I_6);
        _ -> {Count, Ht_5, I_5}
    end
end,
{Count_3, Ht_5, I_6} = Fun_3(Count, Ht_5, I_5),
        Count_3
    catch {return, RetCatch} -> RetCatch end.

balanced_factor(Ht_6) ->
    try
        Total = 0,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Ht_6, I_7, Total) ->
    case (I_7 < erlang:length(maps:get("values", Ht_6, nil))) of
        true ->
            Total_2 = (Total + (maps:get("charge_factor", Ht_6, nil) - erlang:length((case erlang:is_map(maps:get("values", Ht_6, nil)) of true -> maps:get(I_7, maps:get("values", Ht_6, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("values", Ht_6, nil)) + I_7 + 1, maps:get("values", Ht_6, nil)); _ -> mochi_nth(I_7 + 1, maps:get("values", Ht_6, nil)) end end)))),
            I_8 = (I_7 + 1),
            Fun_4_loop(Ht_6, I_8, Total_2);
        _ -> {Ht_6, I_7, Total}
    end
end,
{Ht_6, I_8, Total_2} = Fun_4(Ht_6, I_7, Total),
        mochi_safe_mul(mochi_safe_div(float(Total_2), float(maps:get("size_table", Ht_6, nil))), float(maps:get("charge_factor", Ht_6, nil)))
    catch {return, RetCatch} -> RetCatch end.

collision_resolution(Ht_7, Key_3) ->
    try
        case mochi_not(((erlang:length((case erlang:is_map(maps:get("values", Ht_7, nil)) of true -> maps:get(Key_3, maps:get("values", Ht_7, nil), nil); _ -> case Key_3 < 0 of true -> mochi_nth(erlang:length(maps:get("values", Ht_7, nil)) + Key_3 + 1, maps:get("values", Ht_7, nil)); _ -> mochi_nth(Key_3 + 1, maps:get("values", Ht_7, nil)) end end)) == maps:get("charge_factor", Ht_7, nil)) andalso (count_empty(Ht_7) == 0))) of
        true -> throw({return, Key_3});
        _ -> ok
    end,
        New_key = mochi_mod((Key_3 + 1), maps:get("size_table", Ht_7, nil)),
        Steps = 0,
        Fun_5 = fun Fun_5_loop(Ht_7, Key_3, New_key, Steps) ->
    case ((erlang:length((case erlang:is_map(maps:get("values", Ht_7, nil)) of true -> maps:get(New_key, maps:get("values", Ht_7, nil), nil); _ -> case New_key < 0 of true -> mochi_nth(erlang:length(maps:get("values", Ht_7, nil)) + New_key + 1, maps:get("values", Ht_7, nil)); _ -> mochi_nth(New_key + 1, maps:get("values", Ht_7, nil)) end end)) == maps:get("charge_factor", Ht_7, nil)) andalso (Steps < (maps:get("size_table", Ht_7, nil) - 1))) of
        true ->
            New_key_2 = mochi_mod((New_key + 1), maps:get("size_table", Ht_7, nil)),
            Steps_2 = (Steps + 1),
            Fun_5_loop(Ht_7, Key_3, New_key_2, Steps_2);
        _ -> {Ht_7, Key_3, New_key, Steps}
    end
end,
{Ht_7, Key_3, New_key_2, Steps_2} = Fun_5(Ht_7, Key_3, New_key, Steps),
        case (erlang:length((case erlang:is_map(maps:get("values", Ht_7, nil)) of true -> maps:get(New_key_2, maps:get("values", Ht_7, nil), nil); _ -> case New_key_2 < 0 of true -> mochi_nth(erlang:length(maps:get("values", Ht_7, nil)) + New_key_2 + 1, maps:get("values", Ht_7, nil)); _ -> mochi_nth(New_key_2 + 1, maps:get("values", Ht_7, nil)) end end)) < maps:get("charge_factor", Ht_7, nil)) of
        true -> throw({return, New_key_2});
        _ -> ok
    end,
        -1
    catch {return, RetCatch} -> RetCatch end.

insert(Ht_8, Data_2) ->
    try
        Key_4 = hash_function(Ht_8, Data_2),
        Ht_tmp_2 = (case ((erlang:length((case erlang:is_map(maps:get("values", Ht_8, nil)) of true -> maps:get(Key_4, maps:get("values", Ht_8, nil), nil); _ -> case Key_4 < 0 of true -> mochi_nth(erlang:length(maps:get("values", Ht_8, nil)) + Key_4 + 1, maps:get("values", Ht_8, nil)); _ -> mochi_nth(Key_4 + 1, maps:get("values", Ht_8, nil)) end end)) == 0) orelse (erlang:length((case erlang:is_map(maps:get("values", Ht_8, nil)) of true -> maps:get(Key_4, maps:get("values", Ht_8, nil), nil); _ -> case Key_4 < 0 of true -> mochi_nth(erlang:length(maps:get("values", Ht_8, nil)) + Key_4 + 1, maps:get("values", Ht_8, nil)); _ -> mochi_nth(Key_4 + 1, maps:get("values", Ht_8, nil)) end end)) < maps:get("charge_factor", Ht_8, nil))) of
        true -> Ht_res = set_value(Ht_8, Key_4, Data_2),
            Ht_tmp = element(2, Ht_res),
            Ht_9 = Ht_tmp,
            throw({return, Ht_9}),
            Ht_10 = Ht_9,
            Ht_res_2 = Ht_res,
            Ht_tmp;
        _ -> Ht_10 = Ht_8,
            Ht_res_2 = nil,
            nil
    end),
        Dest = collision_resolution(Ht_10, Key_4),
        Ht_tmp_4 = (case (Dest >= 0) of
        true -> Ht_res_3 = set_value(Ht_10, Dest, Data_2),
            Ht_tmp_3 = element(2, Ht_res_3),
            Ht_11 = Ht_tmp_3,
            Ht_12 = Ht_11,
            Ht_res_4 = Ht_res_3,
            Ht_tmp_3;
        _ -> io:format("~s~n", [mochi_format("table full")]),
            Ht_12 = Ht_10,
            Ht_res_4 = Ht_res_2,
            Ht_tmp_2
    end),
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Ht_13 = make_table(3, 2),
        insert(Ht_13, 10),
        insert(Ht_13, 20),
        insert(Ht_13, 30),
        insert(Ht_13, 40),
        insert(Ht_13, 50),
        io:format("~s~n", [mochi_str(maps:get("values", Ht_13, nil))]),
        io:format("~s~n", [mochi_str(balanced_factor(Ht_13))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
