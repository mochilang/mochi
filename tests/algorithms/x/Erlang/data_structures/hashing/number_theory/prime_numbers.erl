#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, isprime/1, nextprime/3]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

isprime(Number) ->
    try
        case (Number < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (Number < 4) of
        true -> throw({return, true});
        _ -> ok
    end,
        case (mochi_mod(Number, 2) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        I = 3,
        Fun = fun Fun_loop(I, Number) ->
    case ((I * I) =< Number) of
        true ->
            case (mochi_mod(Number, I) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 2),
            Fun_loop(I_2, Number);
        _ -> {I, Number}
    end
end,
{I_2, Number} = Fun(I, Number),
        true
    catch {return, RetCatch} -> RetCatch end.

nextprime(Value, Factor, Desc) ->
    try
        V = (Value * Factor),
        FirstValue = V,
        Fun_2 = fun Fun_2_loop(Desc, Factor, FirstValue, V, Value) ->
    case mochi_not(isprime(V)) of
        true ->
            V_4 = (case Desc of
        true -> V_2 = (V - 1),
            V_2;
        _ -> V_3 = (V + 1),
            V_3
    end),
            Fun_2_loop(Desc, Factor, FirstValue, V_4, Value);
        _ -> {Desc, Factor, FirstValue, V, Value}
    end
end,
{Desc, Factor, FirstValue, V_4, Value} = Fun_2(Desc, Factor, FirstValue, V, Value),
        case (V_4 == FirstValue) of
        true -> case Desc of
        true -> throw({return, nextprime((V_4 - 1), 1, Desc)});
        _ -> throw({return, nextprime((V_4 + 1), 1, Desc)})
    end;
        _ -> ok
    end,
        V_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~s~n", [mochi_format(isprime(0))]),
    io:format("~s~n", [mochi_format(isprime(1))]),
    io:format("~s~n", [mochi_format(isprime(2))]),
    io:format("~s~n", [mochi_format(isprime(3))]),
    io:format("~s~n", [mochi_format(isprime(27))]),
    io:format("~s~n", [mochi_format(isprime(87))]),
    io:format("~s~n", [mochi_format(isprime(563))]),
    io:format("~s~n", [mochi_format(isprime(2999))]),
    io:format("~s~n", [mochi_format(isprime(67483))]),
    io:format("~s~n", [mochi_format(nextprime(14, 1, false))]),
    io:format("~s~n", [mochi_format(nextprime(14, 1, true))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
