#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, ord/1, new_bloom/1, hash1/2, hash2/2, hash_positions/2, bloom_add/2, bloom_exists/2, bitstring/1, format_hash/2, estimated_error_rate/1, any_in/2, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> V;
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_ord(S) when is_list(S) ->
    case S of
        [C|_] -> C;
        _ -> 0
    end;
mochi_ord(S) when is_binary(S) ->
    case S of
        <<C,_/binary>> -> C;
        _ -> 0
    end;
mochi_ord(C) when is_integer(C) -> C;
mochi_ord(_) -> 0.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

ord(Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I) ->
    case (I < erlang:length(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")) of
        true ->
            case (string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, (32 + I)});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2);
        _ -> {Ch, I}
    end
end,
{Ch, I_2} = Fun(Ch, I),
        0
    catch {return, RetCatch} -> RetCatch end.

new_bloom(Size) ->
    try
        Bits = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Bits, I_3, Size) ->
    case (I_3 < Size) of
        true ->
            Bits_2 = lists:append((case Bits of nil -> []; _ -> Bits end), [0]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Bits_2, I_4, Size);
        _ -> {Bits, I_3, Size}
    end
end,
{Bits_2, I_4, Size} = Fun_2(Bits, I_3, Size),
        #{"size" => Size, "bits" => Bits_2}
    catch {return, RetCatch} -> RetCatch end.

hash1(Value, Size_2) ->
    try
        H = 0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(H, I_5, Size_2, Value) ->
    case (I_5 < erlang:length(Value)) of
        true ->
            H_2 = mochi_mod(((H * 31) + mochi_ord(string:substr(Value, I_5 + 1, ((I_5 + 1) - I_5)))), Size_2),
            I_6 = (I_5 + 1),
            Fun_3_loop(H_2, I_6, Size_2, Value);
        _ -> {H, I_5, Size_2, Value}
    end
end,
{H_2, I_6, Size_2, Value} = Fun_3(H, I_5, Size_2, Value),
        H_2
    catch {return, RetCatch} -> RetCatch end.

hash2(Value_2, Size_3) ->
    try
        H_3 = 0,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(H_3, I_7, Size_3, Value_2) ->
    case (I_7 < erlang:length(Value_2)) of
        true ->
            H_4 = mochi_mod(((H_3 * 131) + mochi_ord(string:substr(Value_2, I_7 + 1, ((I_7 + 1) - I_7)))), Size_3),
            I_8 = (I_7 + 1),
            Fun_4_loop(H_4, I_8, Size_3, Value_2);
        _ -> {H_3, I_7, Size_3, Value_2}
    end
end,
{H_4, I_8, Size_3, Value_2} = Fun_4(H_3, I_7, Size_3, Value_2),
        H_4
    catch {return, RetCatch} -> RetCatch end.

hash_positions(Value_3, Size_4) ->
    try
        H1 = hash1(Value_3, Size_4),
        H2 = hash2(Value_3, Size_4),
        Res = [],
        Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [H1]),
        Res_3 = lists:append((case Res_2 of nil -> []; _ -> Res_2 end), [H2]),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

bloom_add(B, Value_4) ->
    try
        Pos = hash_positions(Value_4, maps:get("size", B, nil)),
        Bits_3 = maps:get("bits", B, nil),
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(B, Bits_3, I_9, Pos, Value_4) ->
    case (I_9 < erlang:length(Pos)) of
        true ->
            Idx = ((maps:get("size", B, nil) - 1) - (case erlang:is_map(Pos) of true -> maps:get(I_9, Pos, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Pos) + I_9 + 1, Pos); _ -> mochi_nth(I_9 + 1, Pos) end end)),
            Bits_4 = lists:sublist(Bits_3, Idx) ++ [1] ++ lists:nthtail(Idx + 1, Bits_3),
            I_10 = (I_9 + 1),
            Fun_5_loop(B, Bits_4, I_10, Pos, Value_4);
        _ -> {B, Bits_3, I_9, Pos, Value_4}
    end
end,
{B, Bits_4, I_10, Pos, Value_4} = Fun_5(B, Bits_3, I_9, Pos, Value_4),
        #{"size" => maps:get("size", B, nil), "bits" => Bits_4}
    catch {return, RetCatch} -> RetCatch end.

bloom_exists(B_2, Value_5) ->
    try
        Pos_2 = hash_positions(Value_5, maps:get("size", B_2, nil)),
        I_11 = 0,
        Fun_6 = fun Fun_6_loop(B_2, I_11, Pos_2, Value_5) ->
    case (I_11 < erlang:length(Pos_2)) of
        true ->
            Idx_2 = ((maps:get("size", B_2, nil) - 1) - (case erlang:is_map(Pos_2) of true -> maps:get(I_11, Pos_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Pos_2) + I_11 + 1, Pos_2); _ -> mochi_nth(I_11 + 1, Pos_2) end end)),
            case ((case erlang:is_map(maps:get("bits", B_2, nil)) of true -> maps:get(Idx_2, maps:get("bits", B_2, nil), nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(maps:get("bits", B_2, nil)) + Idx_2 + 1, maps:get("bits", B_2, nil)); _ -> mochi_nth(Idx_2 + 1, maps:get("bits", B_2, nil)) end end) /= 1) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_12 = (I_11 + 1),
            Fun_6_loop(B_2, I_12, Pos_2, Value_5);
        _ -> {B_2, I_11, Pos_2, Value_5}
    end
end,
{B_2, I_12, Pos_2, Value_5} = Fun_6(B_2, I_11, Pos_2, Value_5),
        true
    catch {return, RetCatch} -> RetCatch end.

bitstring(B_3) ->
    try
        Res_4 = "",
        I_13 = 0,
        Fun_7 = fun Fun_7_loop(B_3, I_13, Res_4) ->
    case (I_13 < maps:get("size", B_3, nil)) of
        true ->
            Res_5 = (Res_4 ++ mochi_str((case erlang:is_map(maps:get("bits", B_3, nil)) of true -> maps:get(I_13, maps:get("bits", B_3, nil), nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(maps:get("bits", B_3, nil)) + I_13 + 1, maps:get("bits", B_3, nil)); _ -> mochi_nth(I_13 + 1, maps:get("bits", B_3, nil)) end end))),
            I_14 = (I_13 + 1),
            Fun_7_loop(B_3, I_14, Res_5);
        _ -> {B_3, I_13, Res_4}
    end
end,
{B_3, I_14, Res_5} = Fun_7(B_3, I_13, Res_4),
        Res_5
    catch {return, RetCatch} -> RetCatch end.

format_hash(B_4, Value_6) ->
    try
        Pos_3 = hash_positions(Value_6, maps:get("size", B_4, nil)),
        Bits_5 = [],
        I_15 = 0,
        Fun_8 = fun Fun_8_loop(B_4, Bits_5, I_15, Pos_3, Value_6) ->
    case (I_15 < maps:get("size", B_4, nil)) of
        true ->
            Bits_6 = lists:append((case Bits_5 of nil -> []; _ -> Bits_5 end), [0]),
            I_16 = (I_15 + 1),
            Fun_8_loop(B_4, Bits_6, I_16, Pos_3, Value_6);
        _ -> {B_4, Bits_5, I_15, Pos_3, Value_6}
    end
end,
{B_4, Bits_6, I_16, Pos_3, Value_6} = Fun_8(B_4, Bits_5, I_15, Pos_3, Value_6),
        I_17 = 0,
        Fun_9 = fun Fun_9_loop(B_4, Bits_6, I_17, Pos_3, Value_6) ->
    case (I_17 < erlang:length(Pos_3)) of
        true ->
            Idx_3 = ((maps:get("size", B_4, nil) - 1) - (case erlang:is_map(Pos_3) of true -> maps:get(I_17, Pos_3, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(Pos_3) + I_17 + 1, Pos_3); _ -> mochi_nth(I_17 + 1, Pos_3) end end)),
            Bits_7 = lists:sublist(Bits_6, Idx_3) ++ [1] ++ lists:nthtail(Idx_3 + 1, Bits_6),
            I_18 = (I_17 + 1),
            Fun_9_loop(B_4, Bits_7, I_18, Pos_3, Value_6);
        _ -> {B_4, Bits_6, I_17, Pos_3, Value_6}
    end
end,
{B_4, Bits_7, I_18, Pos_3, Value_6} = Fun_9(B_4, Bits_6, I_17, Pos_3, Value_6),
        Res_6 = "",
        I_19 = 0,
        Fun_10 = fun Fun_10_loop(B_4, Bits_7, I_19, Pos_3, Res_6, Value_6) ->
    case (I_19 < maps:get("size", B_4, nil)) of
        true ->
            Res_7 = (Res_6 ++ mochi_str((case erlang:is_map(Bits_7) of true -> maps:get(I_19, Bits_7, nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(Bits_7) + I_19 + 1, Bits_7); _ -> mochi_nth(I_19 + 1, Bits_7) end end))),
            I_20 = (I_19 + 1),
            Fun_10_loop(B_4, Bits_7, I_20, Pos_3, Res_7, Value_6);
        _ -> {B_4, Bits_7, I_19, Pos_3, Res_6, Value_6}
    end
end,
{B_4, Bits_7, I_20, Pos_3, Res_7, Value_6} = Fun_10(B_4, Bits_7, I_19, Pos_3, Res_6, Value_6),
        Res_7
    catch {return, RetCatch} -> RetCatch end.

estimated_error_rate(B_5) ->
    try
        Ones = 0,
        I_21 = 0,
        Fun_11 = fun Fun_11_loop(B_5, I_21, Ones) ->
    case (I_21 < maps:get("size", B_5, nil)) of
        true ->
            Ones_3 = (case ((case erlang:is_map(maps:get("bits", B_5, nil)) of true -> maps:get(I_21, maps:get("bits", B_5, nil), nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(maps:get("bits", B_5, nil)) + I_21 + 1, maps:get("bits", B_5, nil)); _ -> mochi_nth(I_21 + 1, maps:get("bits", B_5, nil)) end end) == 1) of
        true -> Ones_2 = (Ones + 1),
            Ones_2;
        _ -> Ones
    end),
            I_22 = (I_21 + 1),
            Fun_11_loop(B_5, I_22, Ones_3);
        _ -> {B_5, I_21, Ones}
    end
end,
{B_5, I_22, Ones_3} = Fun_11(B_5, I_21, Ones),
        Frac = mochi_safe_div(float(Ones_3), float(maps:get("size", B_5, nil))),
        mochi_safe_mul(Frac, Frac)
    catch {return, RetCatch} -> RetCatch end.

any_in(B_6, Items) ->
    try
        I_23 = 0,
        Fun_12 = fun Fun_12_loop(B_6, I_23, Items) ->
    case (I_23 < erlang:length(Items)) of
        true ->
            case bloom_exists(B_6, (case erlang:is_map(Items) of true -> maps:get(I_23, Items, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(Items) + I_23 + 1, Items); _ -> mochi_nth(I_23 + 1, Items) end end)) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_24 = (I_23 + 1),
            Fun_12_loop(B_6, I_24, Items);
        _ -> {B_6, I_23, Items}
    end
end,
{B_6, I_24, Items} = Fun_12(B_6, I_23, Items),
        false
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Bloom = new_bloom(8),
        io:format("~s~n", [mochi_format(bitstring(Bloom))]),
        io:format("~s~n", [mochi_format(bloom_exists(Bloom, "Titanic"))]),
        Bloom_2 = bloom_add(Bloom, "Titanic"),
        io:format("~s~n", [mochi_format(bitstring(Bloom_2))]),
        io:format("~s~n", [mochi_format(bloom_exists(Bloom_2, "Titanic"))]),
        Bloom_3 = bloom_add(Bloom_2, "Avatar"),
        io:format("~s~n", [mochi_format(bloom_exists(Bloom_3, "Avatar"))]),
        io:format("~s~n", [mochi_format(format_hash(Bloom_3, "Avatar"))]),
        io:format("~s~n", [mochi_format(bitstring(Bloom_3))]),
        Not_present = ["The Godfather", "Interstellar", "Parasite", "Pulp Fiction"],
        I_25 = 0,
        Fun_13 = fun Fun_13_loop(Bloom_3, I_25, Not_present) ->
    case (I_25 < erlang:length(Not_present)) of
        true ->
            Film = (case erlang:is_map(Not_present) of true -> maps:get(I_25, Not_present, nil); _ -> case I_25 < 0 of true -> mochi_nth(erlang:length(Not_present) + I_25 + 1, Not_present); _ -> mochi_nth(I_25 + 1, Not_present) end end),
            io:format("~s~n", [mochi_format(((Film ++ ":") ++ format_hash(Bloom_3, Film)))]),
            I_26 = (I_25 + 1),
            Fun_13_loop(Bloom_3, I_26, Not_present);
        _ -> {Bloom_3, I_25, Not_present}
    end
end,
{Bloom_3, I_26, Not_present} = Fun_13(Bloom_3, I_25, Not_present),
        io:format("~s~n", [mochi_format(any_in(Bloom_3, Not_present))]),
        io:format("~s~n", [mochi_format(bloom_exists(Bloom_3, "Ratatouille"))]),
        io:format("~s~n", [mochi_format(format_hash(Bloom_3, "Ratatouille"))]),
        io:format("~s~n", [mochi_str(estimated_error_rate(Bloom_3))]),
        Bloom_4 = bloom_add(Bloom_3, "The Godfather"),
        io:format("~s~n", [mochi_str(estimated_error_rate(Bloom_4))]),
        io:format("~s~n", [mochi_format(bitstring(Bloom_4))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ascii', " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
