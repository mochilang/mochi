#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, create_hash_table/1, hash_function/2, balanced_factor/1, collision_resolution/2, insert_data/2, int_to_string/1, keys_to_string/1]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

create_hash_table(Size) ->
    try
        Vals = [],
        I = 0,
        Fun = fun Fun_loop(I, Size, Vals) ->
    case (I < Size) of
        true ->
            Vals_2 = lists:append((case Vals of nil -> []; _ -> Vals end), [nil]),
            I_2 = (I + 1),
            Fun_loop(I_2, Size, Vals_2);
        _ -> {I, Size, Vals}
    end
end,
{I_2, Size, Vals_2} = Fun(I, Size, Vals),
        #{"size_table" => Size, "values" => Vals_2, "lim_charge" => 0.75}
    catch {return, RetCatch} -> RetCatch end.

hash_function(Table, Key) ->
    try
        mochi_mod(Key, maps:get("size_table", Table, nil))
    catch {return, RetCatch} -> RetCatch end.

balanced_factor(Table_2) ->
    try
        Count = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Count, I_3, Table_2) ->
    case (I_3 < erlang:length(maps:get("values", Table_2, nil))) of
        true ->
            Count_3 = (case ((case erlang:is_map(maps:get("values", Table_2, nil)) of true -> maps:get(I_3, maps:get("values", Table_2, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("values", Table_2, nil)) + I_3 + 1, maps:get("values", Table_2, nil)); _ -> mochi_nth(I_3 + 1, maps:get("values", Table_2, nil)) end end) /= nil) of
        true -> Count_2 = (Count + 1),
            Count_2;
        _ -> Count
    end),
            I_4 = (I_3 + 1),
            Fun_2_loop(Count_3, I_4, Table_2);
        _ -> {Count, I_3, Table_2}
    end
end,
{Count_3, I_4, Table_2} = Fun_2(Count, I_3, Table_2),
        mochi_safe_div(float(Count_3), float(maps:get("size_table", Table_2, nil)))
    catch {return, RetCatch} -> RetCatch end.

collision_resolution(Table_3, Key_2) ->
    try
        I_5 = 1,
        New_key = hash_function(Table_3, (Key_2 + (I_5 * I_5))),
        Fun_3 = fun Fun_3_loop(I_5, Key_2, New_key, Table_3) ->
    case (((case erlang:is_map(maps:get("values", Table_3, nil)) of true -> maps:get(New_key, maps:get("values", Table_3, nil), nil); _ -> case New_key < 0 of true -> mochi_nth(erlang:length(maps:get("values", Table_3, nil)) + New_key + 1, maps:get("values", Table_3, nil)); _ -> mochi_nth(New_key + 1, maps:get("values", Table_3, nil)) end end) /= nil) andalso ((case erlang:is_map(maps:get("values", Table_3, nil)) of true -> maps:get(New_key, maps:get("values", Table_3, nil), nil); _ -> case New_key < 0 of true -> mochi_nth(erlang:length(maps:get("values", Table_3, nil)) + New_key + 1, maps:get("values", Table_3, nil)); _ -> mochi_nth(New_key + 1, maps:get("values", Table_3, nil)) end end) /= Key_2)) of
        true ->
            I_6 = (I_5 + 1),
            case (balanced_factor(Table_3) >= maps:get("lim_charge", Table_3, nil)) of
        true -> throw({return, maps:get("size_table", Table_3, nil)});
        _ -> ok
    end,
            New_key_2 = hash_function(Table_3, (Key_2 + (I_6 * I_6))),
            Fun_3_loop(I_6, Key_2, New_key_2, Table_3);
        _ -> {I_5, Key_2, New_key, Table_3}
    end
end,
{I_6, Key_2, New_key_2, Table_3} = Fun_3(I_5, Key_2, New_key, Table_3),
        New_key_2
    catch {return, RetCatch} -> RetCatch end.

insert_data(Table_4, Data) ->
    try
        Key_3 = hash_function(Table_4, Data),
        Vals_3 = maps:get("values", Table_4, nil),
        Vals_8 = (case ((case erlang:is_map(Vals_3) of true -> maps:get(Key_3, Vals_3, nil); _ -> case Key_3 < 0 of true -> mochi_nth(erlang:length(Vals_3) + Key_3 + 1, Vals_3); _ -> mochi_nth(Key_3 + 1, Vals_3) end end) == nil) of
        true -> Vals_4 = lists:sublist(Vals_3, Key_3) ++ [Data] ++ lists:nthtail(Key_3 + 1, Vals_3),
            New_key_5 = nil,
            Table_7 = Table_4,
            Vals_4;
        _ -> Vals_7 = (case ((case erlang:is_map(Vals_3) of true -> maps:get(Key_3, Vals_3, nil); _ -> case Key_3 < 0 of true -> mochi_nth(erlang:length(Vals_3) + Key_3 + 1, Vals_3); _ -> mochi_nth(Key_3 + 1, Vals_3) end end) == Data) of
        true -> Table_5 = maps:put("values", Vals_3, Table_4),
            throw({return, Table_5}),
            New_key_4 = nil,
            Table_6 = Table_5,
            Vals_3;
        _ -> New_key_3 = collision_resolution(Table_4, Key_3),
            Vals_6 = (case ((New_key_3 < erlang:length(Vals_3)) andalso ((case erlang:is_map(Vals_3) of true -> maps:get(New_key_3, Vals_3, nil); _ -> case New_key_3 < 0 of true -> mochi_nth(erlang:length(Vals_3) + New_key_3 + 1, Vals_3); _ -> mochi_nth(New_key_3 + 1, Vals_3) end end) == nil)) of
        true -> Vals_5 = lists:sublist(Vals_3, New_key_3) ++ [Data] ++ lists:nthtail(New_key_3 + 1, Vals_3),
            Vals_5;
        _ -> Vals_3
    end),
            New_key_4 = New_key_3,
            Table_6 = Table_4,
            Vals_6
    end),
            New_key_5 = New_key_4,
            Table_7 = Table_6,
            Vals_7
    end),
        Table_8 = maps:put("values", Vals_8, Table_7),
        {nil, Table_8}
    catch {return, RetCatch} -> RetCatch end.

int_to_string(N) ->
    try
        case (N == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Num = N,
        Neg = false,
        Num_3 = (case (Num < 0) of
        true -> Neg_2 = true,
            Num_2 = -Num,
            Neg_3 = Neg_2,
            Num_2;
        _ -> Neg_3 = Neg,
            Num
    end),
        Res = "",
        Fun_4 = fun Fun_4_loop(N, Neg_3, Num_3, Res) ->
    case (Num_3 > 0) of
        true ->
            Digit = mochi_mod(Num_3, 10),
            Ch = string:substr("0123456789", Digit + 1, ((Digit + 1) - Digit)),
            Res_2 = (Ch ++ Res),
            Num_4 = mochi_idiv(Num_3, 10),
            Fun_4_loop(N, Neg_3, Num_4, Res_2);
        _ -> {N, Neg_3, Num_3, Res}
    end
end,
{N, Neg_3, Num_4, Res_2} = Fun_4(N, Neg_3, Num_3, Res),
        Res_4 = (case Neg_3 of
        true -> Res_3 = ("-" ++ Res_2),
            Res_3;
        _ -> Res_2
    end),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

keys_to_string(Table_9) ->
    try
        Result = "{",
        First = true,
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(First, I_7, Result, Table_9) ->
    case (I_7 < erlang:length(maps:get("values", Table_9, nil))) of
        true ->
            V = (case erlang:is_map(maps:get("values", Table_9, nil)) of true -> maps:get(I_7, maps:get("values", Table_9, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("values", Table_9, nil)) + I_7 + 1, maps:get("values", Table_9, nil)); _ -> mochi_nth(I_7 + 1, maps:get("values", Table_9, nil)) end end),
            Result_5 = (case (V /= nil) of
        true -> Result_3 = (case mochi_not(First) of
        true -> Result_2 = (Result ++ ", "),
            Result_2;
        _ -> Result
    end),
            Result_4 = (((Result_3 ++ int_to_string(I_7)) ++ ": ") ++ int_to_string(V)),
            First_2 = false,
            First_3 = First_2,
            Result_4;
        _ -> First_3 = First,
            Result
    end),
            I_8 = (I_7 + 1),
            Fun_5_loop(First_3, I_8, Result_5, Table_9);
        _ -> {First, I_7, Result, Table_9}
    end
end,
{First_3, I_8, Result_5, Table_9} = Fun_5(First, I_7, Result, Table_9),
        Result_6 = (Result_5 ++ "}"),
        Result_6
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('qp', create_hash_table(8)),
    {_, Qp} = insert_data(erlang:get('qp'), 0),
    erlang:put('qp', Qp),
    {_, Qp_2} = insert_data(erlang:get('qp'), 999),
    erlang:put('qp', Qp_2),
    {_, Qp_3} = insert_data(erlang:get('qp'), 111),
    erlang:put('qp', Qp_3),
    io:format("~s~n", [mochi_format(keys_to_string(erlang:get('qp')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
