#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, repeat_int/2, repeat_bool/2, set_int/3, set_bool/3, create_table/3, hash_function/2, is_prime/1, next_prime/2, set_value/3, collision_resolution/2, rehashing/1, insert_data/2, keys/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

repeat_int(N, Val) ->
    try
        Res = nil,
        I = 0,
        Fun = fun Fun_loop(I, N, Res, Val) ->
    case (I < N) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Val]),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Res_2, Val);
        _ -> {I, N, Res, Val}
    end
end,
{I_2, N, Res_2, Val} = Fun(I, N, Res, Val),
        Res_2
    catch {return, Ret} -> Ret end.

repeat_bool(N_2, Val_2) ->
    try
        Res_3 = nil,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, N_2, Res_3, Val_2) ->
    case (I_3 < N_2) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Val_2]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, N_2, Res_4, Val_2);
        _ -> {I_3, N_2, Res_3, Val_2}
    end
end,
{I_4, N_2, Res_4, Val_2} = Fun_2(I_3, N_2, Res_3, Val_2),
        Res_4
    catch {return, Ret} -> Ret end.

set_int(Xs, Idx, Value) ->
    try
        Res_5 = nil,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Idx, Res_5, Value, Xs) ->
    case (I_5 < length(Xs)) of
        true ->
            case (I_5 == Idx) of
        true -> Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [Value]),
            Res_8 = Res_6;
        _ -> Res_7 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [(case erlang:is_map(Xs) of true -> maps:get(I_5, Xs, nil); _ -> lists:nth(I_5 + 1, Xs) end)]),
            Res_8 = Res_7
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Idx, Res_8, Value, Xs);
        _ -> {I_5, Idx, Res_5, Value, Xs}
    end
end,
{I_6, Idx, Res_8, Value, Xs} = Fun_3(I_5, Idx, Res_5, Value, Xs),
        Res_8
    catch {return, Ret} -> Ret end.

set_bool(Xs_2, Idx_2, Value_2) ->
    try
        Res_9 = nil,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(I_7, Idx_2, Res_9, Value_2, Xs_2) ->
    case (I_7 < length(Xs_2)) of
        true ->
            case (I_7 == Idx_2) of
        true -> Res_10 = lists:append((case Res_9 of nil -> []; _ -> Res_9 end), [Value_2]),
            Res_12 = Res_10;
        _ -> Res_11 = lists:append((case Res_9 of nil -> []; _ -> Res_9 end), [(case erlang:is_map(Xs_2) of true -> maps:get(I_7, Xs_2, nil); _ -> lists:nth(I_7 + 1, Xs_2) end)]),
            Res_12 = Res_11
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(I_8, Idx_2, Res_12, Value_2, Xs_2);
        _ -> {I_7, Idx_2, Res_9, Value_2, Xs_2}
    end
end,
{I_8, Idx_2, Res_12, Value_2, Xs_2} = Fun_4(I_7, Idx_2, Res_9, Value_2, Xs_2),
        Res_12
    catch {return, Ret} -> Ret end.

create_table(Size_table, Charge_factor, Lim_charge) ->
    try
        #{"size_table" => Size_table, "values" => repeat_int(Size_table, 0), "filled" => repeat_bool(Size_table, false), "charge_factor" => Charge_factor, "lim_charge" => Lim_charge}
    catch {return, Ret} -> Ret end.

hash_function(Ht, Key) ->
    try
        K = mochi_mod(Key, maps:get("size_table", Ht, nil)),
        case (K < 0) of
        true -> K_2 = (K + maps:get("size_table", Ht, nil)),
            K_3 = K_2;
        _ -> K_3 = K
    end,
        K_3
    catch {return, Ret} -> Ret end.

is_prime(N_3) ->
    try
        case (N_3 < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (mochi_mod(N_3, 2) == 0) of
        true -> throw({return, (N_3 == 2)});
        _ -> ok
    end,
        I_9 = 3,
        Fun_5 = fun Fun_5_loop(I_9, N_3) ->
    case ((I_9 * I_9) =< N_3) of
        true ->
            case (mochi_mod(N_3, I_9) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_10 = (I_9 + 2),
            Fun_5_loop(I_10, N_3);
        _ -> {I_9, N_3}
    end
end,
{I_10, N_3} = Fun_5(I_9, N_3),
        true
    catch {return, Ret} -> Ret end.

next_prime(Value_3, Factor) ->
    try
        Candidate = ((Value_3 * Factor) + 1),
        Fun_6 = fun Fun_6_loop(Candidate, Factor, Value_3) ->
    case mochi_not(is_prime(Candidate)) of
        true ->
            Candidate_2 = (Candidate + 1),
            Fun_6_loop(Candidate_2, Factor, Value_3);
        _ -> {Candidate, Factor, Value_3}
    end
end,
{Candidate_2, Factor, Value_3} = Fun_6(Candidate, Factor, Value_3),
        Candidate_2
    catch {return, Ret} -> Ret end.

set_value(Ht_2, Key_2, Data) ->
    try
        New_values = set_int(maps:get("values", Ht_2, nil), Key_2, Data),
        New_filled = set_bool(maps:get("filled", Ht_2, nil), Key_2, true),
        #{"size_table" => maps:get("size_table", Ht_2, nil), "values" => New_values, "filled" => New_filled, "charge_factor" => maps:get("charge_factor", Ht_2, nil), "lim_charge" => maps:get("lim_charge", Ht_2, nil)}
    catch {return, Ret} -> Ret end.

collision_resolution(Ht_3, Key_3) ->
    try
        New_key = hash_function(Ht_3, (Key_3 + 1)),
        Steps = 0,
        Fun_7 = fun Fun_7_loop(Ht_3, Key_3, New_key, Steps) ->
    case (case erlang:is_map(maps:get("filled", Ht_3, nil)) of true -> maps:get(New_key, maps:get("filled", Ht_3, nil), nil); _ -> lists:nth(New_key + 1, maps:get("filled", Ht_3, nil)) end) of
        true ->
            New_key_2 = hash_function(Ht_3, (New_key + 1)),
            Steps_2 = (Steps + 1),
            case (Steps_2 >= maps:get("size_table", Ht_3, nil)) of
        true -> throw({return, -1});
        _ -> ok
    end,
            Fun_7_loop(Ht_3, Key_3, New_key_2, Steps_2);
        _ -> {Ht_3, Key_3, New_key, Steps}
    end
end,
{Ht_3, Key_3, New_key_2, Steps_2} = Fun_7(Ht_3, Key_3, New_key, Steps),
        New_key_2
    catch {return, Ret} -> Ret end.

rehashing(Ht_4) ->
    try
        Survivors = nil,
        I_11 = 0,
        Fun_8 = fun Fun_8_loop(Ht_4, I_11, Survivors) ->
    case (I_11 < length(maps:get("values", Ht_4, nil))) of
        true ->
            case (case erlang:is_map(maps:get("filled", Ht_4, nil)) of true -> maps:get(I_11, maps:get("filled", Ht_4, nil), nil); _ -> lists:nth(I_11 + 1, maps:get("filled", Ht_4, nil)) end) of
        true -> Survivors_2 = lists:append((case Survivors of nil -> []; _ -> Survivors end), [(case erlang:is_map(maps:get("values", Ht_4, nil)) of true -> maps:get(I_11, maps:get("values", Ht_4, nil), nil); _ -> lists:nth(I_11 + 1, maps:get("values", Ht_4, nil)) end)]),
            Survivors_3 = Survivors_2;
        _ -> Survivors_3 = Survivors
    end,
            I_12 = (I_11 + 1),
            Fun_8_loop(Ht_4, I_12, Survivors_3);
        _ -> {Ht_4, I_11, Survivors}
    end
end,
{Ht_4, I_12, Survivors_3} = Fun_8(Ht_4, I_11, Survivors),
        New_size = next_prime(maps:get("size_table", Ht_4, nil), 2),
        New_ht = create_table(New_size, maps:get("charge_factor", Ht_4, nil), maps:get("lim_charge", Ht_4, nil)),
        I_13 = 0,
        Fun_9 = fun Fun_9_loop(Ht_4, I_13, New_ht, New_size, Survivors_3) ->
    case (I_13 < length(Survivors_3)) of
        true ->
            New_ht_2 = insert_data(New_ht, (case erlang:is_map(Survivors_3) of true -> maps:get(I_13, Survivors_3, nil); _ -> lists:nth(I_13 + 1, Survivors_3) end)),
            I_14 = (I_13 + 1),
            Fun_9_loop(Ht_4, I_14, New_ht_2, New_size, Survivors_3);
        _ -> {Ht_4, I_13, New_ht, New_size, Survivors_3}
    end
end,
{Ht_4, I_14, New_ht_2, New_size, Survivors_3} = Fun_9(Ht_4, I_13, New_ht, New_size, Survivors_3),
        New_ht_2
    catch {return, Ret} -> Ret end.

insert_data(Ht_5, Data_2) ->
    try
        Key_4 = hash_function(Ht_5, Data_2),
        case mochi_not((case erlang:is_map(maps:get("filled", Ht_5, nil)) of true -> maps:get(Key_4, maps:get("filled", Ht_5, nil), nil); _ -> lists:nth(Key_4 + 1, maps:get("filled", Ht_5, nil)) end)) of
        true -> throw({return, set_value(Ht_5, Key_4, Data_2)});
        _ -> ok
    end,
        case ((case erlang:is_map(maps:get("values", Ht_5, nil)) of true -> maps:get(Key_4, maps:get("values", Ht_5, nil), nil); _ -> lists:nth(Key_4 + 1, maps:get("values", Ht_5, nil)) end) == Data_2) of
        true -> throw({return, Ht_5});
        _ -> ok
    end,
        New_key_3 = collision_resolution(Ht_5, Key_4),
        case (New_key_3 >= 0) of
        true -> throw({return, set_value(Ht_5, New_key_3, Data_2)});
        _ -> ok
    end,
        Resized = rehashing(Ht_5),
        insert_data(Resized, Data_2)
    catch {return, Ret} -> Ret end.

keys(Ht_6) ->
    try
        Res_13 = nil,
        I_15 = 0,
        Fun_10 = fun Fun_10_loop(Ht_6, I_15, Res_13) ->
    case (I_15 < length(maps:get("values", Ht_6, nil))) of
        true ->
            case (case erlang:is_map(maps:get("filled", Ht_6, nil)) of true -> maps:get(I_15, maps:get("filled", Ht_6, nil), nil); _ -> lists:nth(I_15 + 1, maps:get("filled", Ht_6, nil)) end) of
        true -> Res_14 = lists:append((case Res_13 of nil -> []; _ -> Res_13 end), [[I_15, (case erlang:is_map(maps:get("values", Ht_6, nil)) of true -> maps:get(I_15, maps:get("values", Ht_6, nil), nil); _ -> lists:nth(I_15 + 1, maps:get("values", Ht_6, nil)) end)]]),
            Res_15 = Res_14;
        _ -> Res_15 = Res_13
    end,
            I_16 = (I_15 + 1),
            Fun_10_loop(Ht_6, I_16, Res_15);
        _ -> {Ht_6, I_15, Res_13}
    end
end,
{Ht_6, I_16, Res_15} = Fun_10(Ht_6, I_15, Res_13),
        Res_15
    catch {return, Ret} -> Ret end.

main() ->
    try
        Ht_7 = create_table(3, 1, 0.75),
        Ht_8 = insert_data(Ht_7, 17),
        Ht_9 = insert_data(Ht_8, 18),
        Ht_10 = insert_data(Ht_9, 99),
        io:format("~ts~n", [mochi_repr(maps:keys(Ht_10))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
