#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_stack/1, is_empty/1, size/1, is_full/1, push/2, pop/1, peek/1, contains/2, stack_repr/1, main/0]).

-compile({no_auto_import,[size/1]}).
% Generated by Mochi transpiler v0.10.59 (9be2afe36e) on 2025-08-07 08:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_stack(Limit) ->
    try
        #{"items" => [], "limit" => Limit}
    catch {return, Ret} -> Ret end.

is_empty(S) ->
    try
        (erlang:length(maps:get("items", S, nil)) == 0)
    catch {return, Ret} -> Ret end.

size(S_2) ->
    try
        erlang:length(maps:get("items", S_2, nil))
    catch {return, Ret} -> Ret end.

is_full(S_3) ->
    try
        (erlang:length(maps:get("items", S_3, nil)) >= maps:get("limit", S_3, nil))
    catch {return, Ret} -> Ret end.

push(S_4, Item) ->
    try
        case is_full(S_4) of
        true -> erlang:error("stack overflow");
        _ -> ok
    end,
        S_5 = maps:put("items", lists:append((case maps:get("items", S_4, nil) of nil -> []; _ -> maps:get("items", S_4, nil) end), [Item]), S_4),
        {nil, S_5}
    catch {return, Ret} -> Ret end.

pop(S_6) ->
    try
        case is_empty(S_6) of
        true -> erlang:error("stack underflow");
        _ -> ok
    end,
        N = erlang:length(maps:get("items", S_6, nil)),
        Val = (case erlang:is_map(maps:get("items", S_6, nil)) of true -> maps:get((N - 1), maps:get("items", S_6, nil), nil); _ -> lists:nth((N - 1) + 1, maps:get("items", S_6, nil)) end),
        S_7 = maps:put("items", lists:sublist(maps:get("items", S_6, nil), 0 + 1, ((N - 1) - 0)), S_6),
        Val
    catch {return, Ret} -> Ret end.

peek(S_8) ->
    try
        case is_empty(S_8) of
        true -> erlang:error("peek from empty stack");
        _ -> ok
    end,
        (case erlang:is_map(maps:get("items", S_8, nil)) of true -> maps:get((erlang:length(maps:get("items", S_8, nil)) - 1), maps:get("items", S_8, nil), nil); _ -> lists:nth((erlang:length(maps:get("items", S_8, nil)) - 1) + 1, maps:get("items", S_8, nil)) end)
    catch {return, Ret} -> Ret end.

contains(S_9, Item_2) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, Item_2, S_9) ->
    case (I < erlang:length(maps:get("items", S_9, nil))) of
        true ->
            case ((case erlang:is_map(maps:get("items", S_9, nil)) of true -> maps:get(I, maps:get("items", S_9, nil), nil); _ -> lists:nth(I + 1, maps:get("items", S_9, nil)) end) == Item_2) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Item_2, S_9);
        _ -> {I, Item_2, S_9}
    end
end,
{I_2, Item_2, S_9} = Fun(I, Item_2, S_9),
        false
    catch {return, Ret} -> Ret end.

stack_repr(S_10) ->
    try
        mochi_str(maps:get("items", S_10, nil))
    catch {return, Ret} -> Ret end.

main() ->
    try
        S_11 = make_stack(5),
        io:format("~ts~n", [mochi_str(is_empty(S_11))]),
        {_, S_12} = push(S_11, 0),
        {_, S_13} = push(S_12, 1),
        {_, S_14} = push(S_13, 2),
        io:format("~ts~n", [mochi_str(peek(S_14))]),
        io:format("~ts~n", [mochi_str(size(S_14))]),
        io:format("~ts~n", [mochi_str(is_full(S_14))]),
        {_, S_15} = push(S_14, 3),
        {_, S_16} = push(S_15, 4),
        io:format("~ts~n", [mochi_str(is_full(S_16))]),
        io:format("~ts~n", [mochi_repr(stack_repr(S_16))]),
        io:format("~ts~n", [mochi_str(pop(S_16))]),
        io:format("~ts~n", [mochi_str(peek(S_16))]),
        io:format("~ts~n", [mochi_str(mochi_member(1, S_16))]),
        io:format("~ts~n", [mochi_str(mochi_member(9, S_16))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
