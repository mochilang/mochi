#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_stack/1, is_empty/1, size/1, is_full/1, push/2, pop/1, peek/1, contains/2, stack_repr/1, main/0]).

-compile({no_auto_import,[size/1]}).
% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) ->
                K = case Key of
                    <<_/binary>> -> Key;
                    _ when is_integer(Key) -> <<Key>>;
                    _ -> list_to_binary(Key)
                end,
                binary:match(Coll, K) /= nomatch;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_stack(Limit) ->
    try
        #{"items" => [], "limit" => Limit}
    catch {return, RetCatch} -> RetCatch end.

is_empty(S) ->
    try
        (erlang:length(maps:get("items", S, nil)) == 0)
    catch {return, RetCatch} -> RetCatch end.

size(S_2) ->
    try
        erlang:length(maps:get("items", S_2, nil))
    catch {return, RetCatch} -> RetCatch end.

is_full(S_3) ->
    try
        (erlang:length(maps:get("items", S_3, nil)) >= maps:get("limit", S_3, nil))
    catch {return, RetCatch} -> RetCatch end.

push(S_4, Item) ->
    try
        case is_full(S_4) of
        true -> erlang:error({panic, "stack overflow"});
        _ -> ok
    end,
        S_5 = maps:put("items", lists:append((case maps:get("items", S_4, nil) of nil -> []; _ -> maps:get("items", S_4, nil) end), [Item]), S_4),
        {nil, S_5}
    catch {return, RetCatch} -> RetCatch end.

pop(S_6) ->
    try
        case is_empty(S_6) of
        true -> erlang:error({panic, "stack underflow"});
        _ -> ok
    end,
        N = erlang:length(maps:get("items", S_6, nil)),
        Val = (case erlang:is_map(maps:get("items", S_6, nil)) of true -> maps:get((N - 1), maps:get("items", S_6, nil), nil); _ -> case (N - 1) < 0 of true -> mochi_nth(erlang:length(maps:get("items", S_6, nil)) + (N - 1) + 1, maps:get("items", S_6, nil)); _ -> mochi_nth((N - 1) + 1, maps:get("items", S_6, nil)) end end),
        S_7 = maps:put("items", lists:sublist(maps:get("items", S_6, nil), 0 + 1, ((N - 1) - 0)), S_6),
        Val
    catch {return, RetCatch} -> RetCatch end.

peek(S_8) ->
    try
        case is_empty(S_8) of
        true -> erlang:error({panic, "peek from empty stack"});
        _ -> ok
    end,
        (case erlang:is_map(maps:get("items", S_8, nil)) of true -> maps:get((erlang:length(maps:get("items", S_8, nil)) - 1), maps:get("items", S_8, nil), nil); _ -> case (erlang:length(maps:get("items", S_8, nil)) - 1) < 0 of true -> mochi_nth(erlang:length(maps:get("items", S_8, nil)) + (erlang:length(maps:get("items", S_8, nil)) - 1) + 1, maps:get("items", S_8, nil)); _ -> mochi_nth((erlang:length(maps:get("items", S_8, nil)) - 1) + 1, maps:get("items", S_8, nil)) end end)
    catch {return, RetCatch} -> RetCatch end.

contains(S_9, Item_2) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, Item_2, S_9) ->
    case (I < erlang:length(maps:get("items", S_9, nil))) of
        true ->
            case ((case erlang:is_map(maps:get("items", S_9, nil)) of true -> maps:get(I, maps:get("items", S_9, nil), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(maps:get("items", S_9, nil)) + I + 1, maps:get("items", S_9, nil)); _ -> mochi_nth(I + 1, maps:get("items", S_9, nil)) end end) == Item_2) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Item_2, S_9);
        _ -> {I, Item_2, S_9}
    end
end,
{I_2, Item_2, S_9} = Fun(I, Item_2, S_9),
        false
    catch {return, RetCatch} -> RetCatch end.

stack_repr(S_10) ->
    try
        mochi_str(maps:get("items", S_10, nil))
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        S_11 = make_stack(5),
        io:format("~s~n", [mochi_str(is_empty(S_11))]),
        S_res = push(S_11, 0),
        S_12 = element(2, S_res),
        S_res_2 = push(S_12, 1),
        S_13 = element(2, S_res_2),
        S_res_3 = push(S_13, 2),
        S_14 = element(2, S_res_3),
        io:format("~s~n", [mochi_str(peek(S_14))]),
        io:format("~s~n", [mochi_str(size(S_14))]),
        io:format("~s~n", [mochi_str(is_full(S_14))]),
        S_res_4 = push(S_14, 3),
        S_15 = element(2, S_res_4),
        S_res_5 = push(S_15, 4),
        S_16 = element(2, S_res_5),
        io:format("~s~n", [mochi_str(is_full(S_16))]),
        io:format("~s~n", [mochi_format(stack_repr(S_16))]),
        io:format("~s~n", [mochi_str(pop(S_16))]),
        io:format("~s~n", [mochi_str(peek(S_16))]),
        io:format("~s~n", [mochi_str(mochi_member(1, S_16))]),
        io:format("~s~n", [mochi_str(mochi_member(9, S_16))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
