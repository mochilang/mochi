#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, split_custom/2, tokenize/1, is_digit/1, is_operand/1, to_int/1, apply_op/3, evaluate/1, eval_rec/2, evaluate_recursive/1]).

% Generated by Mochi transpiler v0.10.59 (9be2afe36e) on 2025-08-07 08:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

split_custom(S, Sep) ->
    try
        Res = [],
        Current = "",
        I = 0,
        Fun = fun Fun_loop(Current, I, Res, S, Sep) ->
    case (I < erlang:length(S)) of
        true ->
            Ch = string:substr(S, I + 1, ((I + 1) - I)),
            case (Ch == Sep) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Current]),
            Current_2 = "",
            Current_4 = Current_2,
            Res_3 = Res_2;
        _ -> Current_3 = (Current ++ Ch),
            Current_4 = Current_3,
            Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_loop(Current_4, I_2, Res_3, S, Sep);
        _ -> {Current, I, Res, S, Sep}
    end
end,
{Current_4, I_2, Res_3, S, Sep} = Fun(Current, I, Res, S, Sep),
        Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Current_4]),
        Res_4
    catch {return, Ret} -> Ret end.

tokenize(S_2) ->
    try
        Parts = split_custom(S_2, " "),
        Res_5 = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Parts, Res_5, S_2) ->
    case (I_3 < erlang:length(Parts)) of
        true ->
            P = (case erlang:is_map(Parts) of true -> maps:get(I_3, Parts, nil); _ -> lists:nth(I_3 + 1, Parts) end),
            case (P /= "") of
        true -> Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [P]),
            Res_7 = Res_6;
        _ -> Res_7 = Res_5
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Parts, Res_7, S_2);
        _ -> {I_3, Parts, Res_5, S_2}
    end
end,
{I_4, Parts, Res_7, S_2} = Fun_2(I_3, Parts, Res_5, S_2),
        Res_7
    catch {return, Ret} -> Ret end.

is_digit(Ch_2) ->
    try
        ((Ch_2 >= "0") andalso (Ch_2 =< "9"))
    catch {return, Ret} -> Ret end.

is_operand(Token) ->
    try
        case (Token == "") of
        true -> throw({return, false});
        _ -> ok
    end,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Token) ->
    case (I_5 < erlang:length(Token)) of
        true ->
            Ch_3 = string:substr(Token, I_5 + 1, ((I_5 + 1) - I_5)),
            case mochi_not(is_digit(Ch_3)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Token);
        _ -> {I_5, Token}
    end
end,
{I_6, Token} = Fun_3(I_5, Token),
        true
    catch {return, Ret} -> Ret end.

to_int(Token_2) ->
    try
        Res_8 = 0,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(I_7, Res_8, Token_2) ->
    case (I_7 < erlang:length(Token_2)) of
        true ->
            Res_9 = ((Res_8 * 10) + mochi_to_int(string:substr(Token_2, I_7 + 1, ((I_7 + 1) - I_7)))),
            I_8 = (I_7 + 1),
            Fun_4_loop(I_8, Res_9, Token_2);
        _ -> {I_7, Res_8, Token_2}
    end
end,
{I_8, Res_9, Token_2} = Fun_4(I_7, Res_8, Token_2),
        Res_9
    catch {return, Ret} -> Ret end.

apply_op(Op, A, B) ->
    try
        case (Op == "+") of
        true -> throw({return, (A + B)});
        _ -> ok
    end,
        case (Op == "-") of
        true -> throw({return, (A - B)});
        _ -> ok
    end,
        case (Op == "*") of
        true -> throw({return, mochi_safe_mul(A, B)});
        _ -> ok
    end,
        case (Op == "/") of
        true -> throw({return, mochi_safe_div(A, B)});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

evaluate(Expression) ->
    try
        Tokens = tokenize(Expression),
        Stack = [],
        I_9 = (erlang:length(Tokens) - 1),
        Fun_5 = fun Fun_5_loop(Expression, I_9, Stack, Tokens) ->
    case (I_9 >= 0) of
        true ->
            Token_3 = (case erlang:is_map(Tokens) of true -> maps:get(I_9, Tokens, nil); _ -> lists:nth(I_9 + 1, Tokens) end),
            case (Token_3 /= "") of
        true -> case is_operand(Token_3) of
        true -> Stack_2 = lists:append((case Stack of nil -> []; _ -> Stack end), [float(to_int(Token_3))]),
            O1_2 = nil,
            O2_2 = nil,
            Res_11 = nil,
            Stack_5 = Stack_2;
        _ -> O1 = (case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> lists:nth((erlang:length(Stack) - 1) + 1, Stack) end),
            O2 = (case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 2), Stack, nil); _ -> lists:nth((erlang:length(Stack) - 2) + 1, Stack) end),
            Stack_3 = lists:sublist(Stack, 0 + 1, ((erlang:length(Stack) - 2) - 0)),
            Res_10 = apply_op(Token_3, O1, O2),
            Stack_4 = lists:append((case Stack_3 of nil -> []; _ -> Stack_3 end), [Res_10]),
            O1_2 = O1,
            O2_2 = O2,
            Res_11 = Res_10,
            Stack_5 = Stack_4
    end,
            O1_3 = O1_2,
            O2_3 = O2_2,
            Res_12 = Res_11,
            Stack_6 = Stack_5;
        _ -> O1_3 = nil,
            O2_3 = nil,
            Res_12 = nil,
            Stack_6 = Stack
    end,
            I_10 = (I_9 - 1),
            Fun_5_loop(Expression, I_10, Stack_6, Tokens);
        _ -> {Expression, I_9, Stack, Tokens}
    end
end,
{Expression, I_10, Stack_6, Tokens} = Fun_5(Expression, I_9, Stack, Tokens),
        (case erlang:is_map(Stack_6) of true -> maps:get(0, Stack_6, nil); _ -> lists:nth(0 + 1, Stack_6) end)
    catch {return, Ret} -> Ret end.

eval_rec(Tokens_2, Pos) ->
    try
        Token_4 = (case erlang:is_map(Tokens_2) of true -> maps:get(Pos, Tokens_2, nil); _ -> lists:nth(Pos + 1, Tokens_2) end),
        Next = (Pos + 1),
        case is_operand(Token_4) of
        true -> throw({return, [float(to_int(Token_4)), float(Next)]});
        _ -> ok
    end,
        Left = eval_rec(Tokens_2, Next),
        A_2 = (case erlang:is_map(Left) of true -> maps:get(0, Left, nil); _ -> lists:nth(0 + 1, Left) end),
        P1 = mochi_to_int((case erlang:is_map(Left) of true -> maps:get(1, Left, nil); _ -> lists:nth(1 + 1, Left) end)),
        Right = eval_rec(Tokens_2, P1),
        B_2 = (case erlang:is_map(Right) of true -> maps:get(0, Right, nil); _ -> lists:nth(0 + 1, Right) end),
        P2 = (case erlang:is_map(Right) of true -> maps:get(1, Right, nil); _ -> lists:nth(1 + 1, Right) end),
        [apply_op(Token_4, A_2, B_2), P2]
    catch {return, Ret} -> Ret end.

evaluate_recursive(Expression_2) ->
    try
        Tokens_3 = tokenize(Expression_2),
        Res_13 = eval_rec(Tokens_3, 0),
        (case erlang:is_map(Res_13) of true -> maps:get(0, Res_13, nil); _ -> lists:nth(0 + 1, Res_13) end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('test_expression', "+ 9 * 2 6"),
    io:format("~ts~n", [mochi_str(evaluate("+ 9 * 2 6"))]),
    erlang:put('test_expression2', "/ * 10 2 + 4 1 "),
    io:format("~ts~n", [mochi_str(evaluate("/ * 10 2 + 4 1 "))]),
    erlang:put('test_expression3', "+ * 2 3 / 8 4"),
    io:format("~ts~n", [mochi_str(evaluate_recursive("+ * 2 3 / 8 4"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
