#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, largest_rectangle_area/1]).

% Generated by Mochi transpiler v0.10.59 (9be2afe36e) on 2025-08-07 08:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

largest_rectangle_area(Heights) ->
    try
        Stack = [],
        Max_area = 0,
        Hs = Heights,
        Hs_2 = lists:append((case Hs of nil -> []; _ -> Hs end), [0]),
        I = 0,
        Fun_2 = fun Fun_2_loop(Heights, Hs_2, I, Max_area, Stack) ->
    case (I < erlang:length(Hs_2)) of
        true ->
            Fun = fun Fun_loop(Heights, Hs_2, I, Max_area, Stack) ->
    case ((erlang:length(Stack) > 0) andalso ((case erlang:is_map(Hs_2) of true -> maps:get(I, Hs_2, nil); _ -> lists:nth(I + 1, Hs_2) end) < (case erlang:is_map(Hs_2) of true -> maps:get((case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> lists:nth((erlang:length(Stack) - 1) + 1, Stack) end), Hs_2, nil); _ -> lists:nth((case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> lists:nth((erlang:length(Stack) - 1) + 1, Stack) end) + 1, Hs_2) end))) of
        true ->
            Top = (case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> lists:nth((erlang:length(Stack) - 1) + 1, Stack) end),
            Stack_2 = lists:sublist(Stack, 0 + 1, ((erlang:length(Stack) - 1) - 0)),
            Height = (case erlang:is_map(Hs_2) of true -> maps:get(Top, Hs_2, nil); _ -> lists:nth(Top + 1, Hs_2) end),
            Width = I,
            case (erlang:length(Stack_2) > 0) of
        true -> Width_2 = ((I - (case erlang:is_map(Stack_2) of true -> maps:get((erlang:length(Stack_2) - 1), Stack_2, nil); _ -> lists:nth((erlang:length(Stack_2) - 1) + 1, Stack_2) end)) - 1),
            Width_3 = Width_2;
        _ -> Width_3 = Width
    end,
            Area = (Height * Width_3),
            case (Area > Max_area) of
        true -> Max_area_2 = Area,
            Max_area_3 = Max_area_2;
        _ -> Max_area_3 = Max_area
    end,
            Fun_loop(Heights, Hs_2, I, Max_area_3, Stack_2);
        _ -> {Heights, Hs_2, I, Max_area, Stack}
    end
end,
{Heights, Hs_2, I, Max_area_3, Stack_2} = Fun(Heights, Hs_2, I, Max_area, Stack),
            Stack_3 = lists:append((case Stack_2 of nil -> []; _ -> Stack_2 end), [I]),
            I_2 = (I + 1),
            Fun_2_loop(Heights, Hs_2, I_2, Max_area_3, Stack_3);
        _ -> {Heights, Hs_2, I, Max_area, Stack}
    end
end,
{Heights, Hs_2, I_2, Max_area_3, Stack_3} = Fun_2(Heights, Hs_2, I, Max_area, Stack),
        Max_area_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(largest_rectangle_area([2, 1, 5, 6, 2, 3]))]),
    io:format("~ts~n", [mochi_str(largest_rectangle_area([2, 4]))]),
    io:format("~ts~n", [mochi_str(largest_rectangle_area([6, 2, 5, 4, 5, 1, 6]))]),
    io:format("~ts~n", [mochi_str(largest_rectangle_area([1]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
