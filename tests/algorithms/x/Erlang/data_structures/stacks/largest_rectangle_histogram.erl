#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, largest_rectangle_area/1]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

largest_rectangle_area(Heights) ->
    try
        Stack = [],
        Max_area = 0,
        Hs = Heights,
        Hs_2 = lists:append((case Hs of nil -> []; _ -> Hs end), [0]),
        I = 0,
        Fun_2 = fun Fun_2_loop(Heights, Hs_2, I, Max_area, Stack) ->
    case (I < erlang:length(Hs_2)) of
        true ->
            Fun = fun Fun_loop(Heights, Hs_2, I, Max_area, Stack) ->
    case ((erlang:length(Stack) > 0) andalso ((case erlang:is_map(Hs_2) of true -> maps:get(I, Hs_2, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Hs_2) + I + 1, Hs_2); _ -> mochi_nth(I + 1, Hs_2) end end) < (case erlang:is_map(Hs_2) of true -> maps:get((case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end), Hs_2, nil); _ -> case (case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end) < 0 of true -> mochi_nth(erlang:length(Hs_2) + (case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end) + 1, Hs_2); _ -> mochi_nth((case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end) + 1, Hs_2) end end))) of
        true ->
            Top = (case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end),
            Stack_2 = lists:sublist(Stack, 0 + 1, ((erlang:length(Stack) - 1) - 0)),
            Height = (case erlang:is_map(Hs_2) of true -> maps:get(Top, Hs_2, nil); _ -> case Top < 0 of true -> mochi_nth(erlang:length(Hs_2) + Top + 1, Hs_2); _ -> mochi_nth(Top + 1, Hs_2) end end),
            Width = I,
            Width_3 = (case (erlang:length(Stack_2) > 0) of
        true -> Width_2 = ((I - (case erlang:is_map(Stack_2) of true -> maps:get((erlang:length(Stack_2) - 1), Stack_2, nil); _ -> case (erlang:length(Stack_2) - 1) < 0 of true -> mochi_nth(erlang:length(Stack_2) + (erlang:length(Stack_2) - 1) + 1, Stack_2); _ -> mochi_nth((erlang:length(Stack_2) - 1) + 1, Stack_2) end end)) - 1),
            Width_2;
        _ -> Width
    end),
            Area = (Height * Width_3),
            Max_area_3 = (case (Area > Max_area) of
        true -> Max_area_2 = Area,
            Max_area_2;
        _ -> Max_area
    end),
            Fun_loop(Heights, Hs_2, I, Max_area_3, Stack_2);
        _ -> {Heights, Hs_2, I, Max_area, Stack}
    end
end,
{Heights, Hs_2, I, Max_area_3, Stack_2} = Fun(Heights, Hs_2, I, Max_area, Stack),
            Stack_3 = lists:append((case Stack_2 of nil -> []; _ -> Stack_2 end), [I]),
            I_2 = (I + 1),
            Fun_2_loop(Heights, Hs_2, I_2, Max_area_3, Stack_3);
        _ -> {Heights, Hs_2, I, Max_area, Stack}
    end
end,
{Heights, Hs_2, I_2, Max_area_3, Stack_3} = Fun_2(Heights, Hs_2, I, Max_area, Stack),
        Max_area_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~s~n", [mochi_str(largest_rectangle_area([2, 1, 5, 6, 2, 3]))]),
    io:format("~s~n", [mochi_str(largest_rectangle_area([2, 4]))]),
    io:format("~s~n", [mochi_str(largest_rectangle_area([6, 2, 5, 4, 5, 1, 6]))]),
    io:format("~s~n", [mochi_str(largest_rectangle_area([1]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
