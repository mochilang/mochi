#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, calculation_span/1, print_array/1]).

% Generated by Mochi transpiler v0.10.59 (9be2afe36e) on 2025-08-07 08:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

calculation_span(Price) ->
    try
        N = erlang:length(Price),
        St = [],
        Span = [],
        St_2 = lists:append((case St of nil -> []; _ -> St end), [0]),
        Span_2 = lists:append((case Span of nil -> []; _ -> Span end), [1]),
        Fun = fun Fun_loop(List, N, Price, Span_2, St_2) ->
    case List of
        [] -> {N, Price, Span_2, St_2};
        [I|I_rest] ->
            Fun_2 = fun Fun_2_loop(I, N, Price, Span_2, St_2) ->
    case ((erlang:length(St_2) > 0) andalso ((case erlang:is_map(Price) of true -> maps:get((case erlang:is_map(St_2) of true -> maps:get((erlang:length(St_2) - 1), St_2, nil); _ -> lists:nth((erlang:length(St_2) - 1) + 1, St_2) end), Price, nil); _ -> lists:nth((case erlang:is_map(St_2) of true -> maps:get((erlang:length(St_2) - 1), St_2, nil); _ -> lists:nth((erlang:length(St_2) - 1) + 1, St_2) end) + 1, Price) end) =< (case erlang:is_map(Price) of true -> maps:get(I, Price, nil); _ -> lists:nth(I + 1, Price) end))) of
        true ->
            St_3 = (case erlang:is_binary(St_2) of true -> string:substr(St_2, 0 + 1, ((erlang:length(St_2) - 1) - 0)); _ -> lists:sublist(St_2, (0 + 1), ((erlang:length(St_2) - 1) - 0)) end),
            Fun_2_loop(I, N, Price, Span_2, St_3);
        _ -> {I, N, Price, Span_2, St_2}
    end
end,
{I, N, Price, Span_2, St_3} = Fun_2(I, N, Price, Span_2, St_2),
            S = (case (erlang:length(St_3) =< 0) of
    true -> (I + 1);
    _ -> (I - (case erlang:is_map(St_3) of true -> maps:get((erlang:length(St_3) - 1), St_3, nil); _ -> lists:nth((erlang:length(St_3) - 1) + 1, St_3) end))
end),
            Span_3 = lists:append((case Span_2 of nil -> []; _ -> Span_2 end), [S]),
            St_4 = lists:append((case St_3 of nil -> []; _ -> St_3 end), [I]),
            Fun_loop(I_rest, N, Price, Span_3, St_4);
        _ -> {N, Price, Span_2, St_2}
    end
end,
{N, Price, Span_3, St_4} = Fun(lists:seq(1, (N) - 1), N, Price, Span_2, St_2),
        Span_3
    catch {return, Ret} -> Ret end.

print_array(Arr) ->
    try
        Fun_3 = fun Fun_3_loop(List, Arr) ->
    case List of
        [] -> {Arr};
        [I_2|I_2_rest] ->
            io:format("~ts~n", [mochi_repr((case erlang:is_map(Arr) of true -> maps:get(I_2, Arr, nil); _ -> lists:nth(I_2 + 1, Arr) end))]),
            Fun_3_loop(I_2_rest, Arr);
        _ -> {Arr}
    end
end,
{Arr} = Fun_3(lists:seq(0, (erlang:length(Arr)) - 1), Arr),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('price', [10, 4, 5, 90, 120, 80]),
    erlang:put('spans', calculation_span(erlang:get('price'))),
    print_array(erlang:get('spans')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
