#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, lexical_order/1, join_ints/1]).

% Generated by Mochi transpiler v0.10.59 (9be2afe36e) on 2025-08-07 08:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

lexical_order(Max_number) ->
    try
        Result = [],
        Stack = [1],
        Fun = fun Fun_loop(Max_number, Result, Stack) ->
    case (erlang:length(Stack) > 0) of
        true ->
            try
                Idx = (erlang:length(Stack) - 1),
                Num = (case erlang:is_map(Stack) of true -> maps:get(Idx, Stack, nil); _ -> lists:nth(Idx + 1, Stack) end),
                Stack_2 = lists:sublist(Stack, 0 + 1, (Idx - 0)),
                case (Num > Max_number) of
        true -> throw({continue, Max_number, Result, Stack_2});
        _ -> ok
    end,
                Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Num]),
                case (mochi_mod(Num, 10) /= 9) of
        true -> Stack_3 = lists:append((case Stack_2 of nil -> []; _ -> Stack_2 end), [(Num + 1)]),
            Stack_4 = Stack_3;
        _ -> Stack_4 = Stack_2
    end,
                Stack_5 = lists:append((case Stack_4 of nil -> []; _ -> Stack_4 end), [(Num * 10)]),
                Fun_loop(Max_number, Result_2, Stack_5)
            catch
                {continue, C0, C1, C2} -> Fun_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Max_number, Result, Stack}
    end
end,
{Max_number, Result_2, Stack_5} = Fun(Max_number, Result, Stack),
        Result_2
    catch {return, Ret} -> Ret end.

join_ints(Xs) ->
    try
        Res = "",
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Res, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case (I > 0) of
        true -> Res_2 = (Res ++ " "),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            Res_4 = (Res_3 ++ mochi_str((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> lists:nth(I + 1, Xs) end))),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Res_4, Xs);
        _ -> {I, Res, Xs}
    end
end,
{I_2, Res_4, Xs} = Fun_2(I, Res, Xs),
        Res_4
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(join_ints(lexical_order(13)))]),
    io:format("~ts~n", [mochi_str(lexical_order(1))]),
    io:format("~ts~n", [mochi_repr(join_ints(lexical_order(20)))]),
    io:format("~ts~n", [mochi_repr(join_ints(lexical_order(25)))]),
    io:format("~ts~n", [mochi_str(lexical_order(12))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
