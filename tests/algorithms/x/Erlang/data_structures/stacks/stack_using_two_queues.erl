#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_stack/0, push/2, pop/1, peek/1, is_empty/1]).

% Generated by Mochi transpiler v0.10.59 (9be2afe36e) on 2025-08-07 08:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_stack() ->
    try
        #{"main_queue" => [], "temp_queue" => []}
    catch {return, Ret} -> Ret end.

push(S, Item) ->
    try
        S_2 = maps:put("temp_queue", lists:append((case maps:get("temp_queue", S, nil) of nil -> []; _ -> maps:get("temp_queue", S, nil) end), [Item]), S),
        Fun = fun Fun_loop(Item, S_2) ->
    case (erlang:length(maps:get("main_queue", S_2, nil)) > 0) of
        true ->
            S_3 = maps:put("temp_queue", lists:append((case maps:get("temp_queue", S_2, nil) of nil -> []; _ -> maps:get("temp_queue", S_2, nil) end), [(case erlang:is_map(maps:get("main_queue", S_2, nil)) of true -> maps:get(0, maps:get("main_queue", S_2, nil), nil); _ -> lists:nth(0 + 1, maps:get("main_queue", S_2, nil)) end)]), S_2),
            S_4 = maps:put("main_queue", lists:sublist(maps:get("main_queue", S_3, nil), 1 + 1, (erlang:length(maps:get("main_queue", S_3, nil)) - 1)), S_3),
            Fun_loop(Item, S_4);
        _ -> {Item, S_2}
    end
end,
{Item, S_4} = Fun(Item, S_2),
        New_main = maps:get("temp_queue", S_4, nil),
        S_5 = maps:put("temp_queue", maps:get("main_queue", S_4, nil), S_4),
        S_6 = maps:put("main_queue", New_main, S_5),
        {nil, S_6}
    catch {return, Ret} -> Ret end.

pop(S_7) ->
    try
        case (erlang:length(maps:get("main_queue", S_7, nil)) == 0) of
        true -> erlang:error("pop from empty stack");
        _ -> ok
    end,
        Item_2 = (case erlang:is_map(maps:get("main_queue", S_7, nil)) of true -> maps:get(0, maps:get("main_queue", S_7, nil), nil); _ -> lists:nth(0 + 1, maps:get("main_queue", S_7, nil)) end),
        S_8 = maps:put("main_queue", lists:sublist(maps:get("main_queue", S_7, nil), 1 + 1, (erlang:length(maps:get("main_queue", S_7, nil)) - 1)), S_7),
        Item_2
    catch {return, Ret} -> Ret end.

peek(S_9) ->
    try
        case (erlang:length(maps:get("main_queue", S_9, nil)) == 0) of
        true -> erlang:error("peek from empty stack");
        _ -> ok
    end,
        (case erlang:is_map(maps:get("main_queue", S_9, nil)) of true -> maps:get(0, maps:get("main_queue", S_9, nil), nil); _ -> lists:nth(0 + 1, maps:get("main_queue", S_9, nil)) end)
    catch {return, Ret} -> Ret end.

is_empty(S_10) ->
    try
        (erlang:length(maps:get("main_queue", S_10, nil)) == 0)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('stack', make_stack()),
    {_, Stack} = push(erlang:get('stack'), 1),
    erlang:put('stack', Stack),
    {_, Stack_2} = push(erlang:get('stack'), 2),
    erlang:put('stack', Stack_2),
    {_, Stack_3} = push(erlang:get('stack'), 3),
    erlang:put('stack', Stack_3),
    io:format("~ts~n", [mochi_str(peek(erlang:get('stack')))]),
    io:format("~ts~n", [mochi_str(pop(erlang:get('stack')))]),
    io:format("~ts~n", [mochi_str(peek(erlang:get('stack')))]),
    io:format("~ts~n", [mochi_str(pop(erlang:get('stack')))]),
    io:format("~ts~n", [mochi_str(pop(erlang:get('stack')))]),
    io:format("~ts~n", [mochi_str(is_empty(erlang:get('stack')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
