#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, pop_last/1, balanced_parentheses/1]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

pop_last(Xs) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, Res, Xs) ->
    case (I < (erlang:length(Xs) - 1)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Res_2, Xs);
        _ -> {I, Res, Xs}
    end
end,
{I_2, Res_2, Xs} = Fun(I, Res, Xs),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

balanced_parentheses(S) ->
    try
        Stack = [],
        Pairs = #{"(" => ")", "[" => "]", "{" => "}"},
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Pairs, S, Stack) ->
    case (I_3 < erlang:length(S)) of
        true ->
            Ch = string:substr(S, I_3 + 1, 1),
            Top_3 = (case maps:is_key(Ch, Pairs) of
        true -> Stack_2 = lists:append((case Stack of nil -> []; _ -> Stack end), [Ch]),
            Stack_5 = Stack_2,
            nil;
        _ -> Top_2 = (case (((Ch == ")") orelse (Ch == "]")) orelse (Ch == "}")) of
        true -> case (erlang:length(Stack) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            Top = (case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end),
            case (maps:get(Top, Pairs, nil) /= Ch) of
        true -> throw({return, false});
        _ -> ok
    end,
            Stack_3 = pop_last(Stack),
            Stack_4 = Stack_3,
            Top;
        _ -> Stack_4 = Stack,
            nil
    end),
            Stack_5 = Stack_4,
            Top_2
    end),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Pairs, S, Stack_5);
        _ -> {I_3, Pairs, S, Stack}
    end
end,
{I_4, Pairs, S, Stack_5} = Fun_2(I_3, Pairs, S, Stack),
        (erlang:length(Stack_5) == 0)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('tests', ["([]{})", "[()]{}{[()()]()}", "[(])", "1+2*3-4", ""]),
    erlang:put('idx', 0),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('idx') < erlang:length(erlang:get('tests'))) of
        true ->
            io:format("~s~n", [mochi_format(balanced_parentheses((case erlang:is_map(erlang:get('tests')) of true -> maps:get(erlang:get('idx'), erlang:get('tests'), nil); _ -> case erlang:get('idx') < 0 of true -> mochi_nth(erlang:length(erlang:get('tests')) + erlang:get('idx') + 1, erlang:get('tests')); _ -> mochi_nth(erlang:get('idx') + 1, erlang:get('tests')) end end)))]),
            erlang:put('idx', (erlang:get('idx') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
