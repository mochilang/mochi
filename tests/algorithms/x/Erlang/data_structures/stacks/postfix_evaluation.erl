#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, slice_without_last/1, parse_float/1, pow_float/2, apply_op/3, evaluate/1]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

slice_without_last(Xs) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, Res, Xs) ->
    case (I < (erlang:length(Xs) - 1)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Res_2, Xs);
        _ -> {I, Res, Xs}
    end
end,
{I_2, Res_2, Xs} = Fun(I, Res, Xs),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

parse_float(Token) ->
    try
        Sign = 1.0,
        Idx = 0,
        Sign_4 = (case (erlang:length(Token) > 0) of
        true -> First = string:substr(Token, 0 + 1, (1 - 0)),
            Sign_3 = (case (First == "-") of
        true -> Sign_2 = -1.0,
            Idx_2 = 1,
            Idx_5 = Idx_2,
            Sign_2;
        _ -> Idx_4 = (case (First == "+") of
        true -> Idx_3 = 1,
            Idx_3;
        _ -> Idx
    end),
            Idx_5 = Idx_4,
            Sign
    end),
            First_2 = First,
            Idx_6 = Idx_5,
            Sign_3;
        _ -> First_2 = nil,
            Idx_6 = Idx,
            Sign
    end),
        Int_part = 0,
        Fun_2 = fun Fun_2_loop(First_2, Idx_6, Int_part, Sign_4, Token) ->
    case ((Idx_6 < erlang:length(Token)) andalso (string:substr(Token, Idx_6 + 1, ((Idx_6 + 1) - Idx_6)) /= ".")) of
        true ->
            Int_part_2 = ((Int_part * 10) + mochi_to_int(string:substr(Token, Idx_6 + 1, ((Idx_6 + 1) - Idx_6)))),
            Idx_7 = (Idx_6 + 1),
            Fun_2_loop(First_2, Idx_7, Int_part_2, Sign_4, Token);
        _ -> {First_2, Idx_6, Int_part, Sign_4, Token}
    end
end,
{First_2, Idx_7, Int_part_2, Sign_4, Token} = Fun_2(First_2, Idx_6, Int_part, Sign_4, Token),
        Result = mochi_safe_mul(1.0, Int_part_2),
        Result_3 = (case ((Idx_7 < erlang:length(Token)) andalso (string:substr(Token, Idx_7 + 1, ((Idx_7 + 1) - Idx_7)) == ".")) of
        true -> Idx_8 = (Idx_7 + 1),
            Place = 0.1,
            Fun_3 = fun Fun_3_loop(First_2, Idx_8, Int_part_2, Place, Result, Sign_4, Token) ->
    case (Idx_8 < erlang:length(Token)) of
        true ->
            Digit = mochi_to_int(string:substr(Token, Idx_8 + 1, ((Idx_8 + 1) - Idx_8))),
            Result_2 = (Result + mochi_safe_mul(Place, mochi_safe_mul(1.0, Digit))),
            Place_2 = mochi_safe_div(Place, 10.0),
            Idx_9 = (Idx_8 + 1),
            Fun_3_loop(First_2, Idx_9, Int_part_2, Place_2, Result_2, Sign_4, Token);
        _ -> {First_2, Idx_8, Int_part_2, Place, Result, Sign_4, Token}
    end
end,
{First_2, Idx_9, Int_part_2, Place_2, Result_2, Sign_4, Token} = Fun_3(First_2, Idx_8, Int_part_2, Place, Result, Sign_4, Token),
            Fun_4 = Fun_3,
            Idx_10 = Idx_9,
            Place_3 = Place_2,
            Result_2;
        _ -> Fun_4 = Fun_2,
            Idx_10 = Idx_7,
            Place_3 = nil,
            Result
    end),
        mochi_safe_mul(Sign_4, Result_3)
    catch {return, RetCatch} -> RetCatch end.

pow_float(Base, Exp) ->
    try
        Result_4 = 1.0,
        I_3 = 0,
        E = mochi_to_int(Exp),
        Fun_5 = fun Fun_5_loop(Base, E, Exp, I_3, Result_4) ->
    case (I_3 < E) of
        true ->
            Result_5 = mochi_safe_mul(Result_4, Base),
            I_4 = (I_3 + 1),
            Fun_5_loop(Base, E, Exp, I_4, Result_5);
        _ -> {Base, E, Exp, I_3, Result_4}
    end
end,
{Base, E, Exp, I_4, Result_5} = Fun_5(Base, E, Exp, I_3, Result_4),
        Result_5
    catch {return, RetCatch} -> RetCatch end.

apply_op(A, B, Op) ->
    try
        case (Op == "+") of
        true -> throw({return, (A + B)});
        _ -> ok
    end,
        case (Op == "-") of
        true -> throw({return, (A - B)});
        _ -> ok
    end,
        case (Op == "*") of
        true -> throw({return, mochi_safe_mul(A, B)});
        _ -> ok
    end,
        case (Op == "/") of
        true -> throw({return, mochi_safe_div(A, B)});
        _ -> ok
    end,
        case (Op == "^") of
        true -> throw({return, pow_float(A, B)});
        _ -> ok
    end,
        0.0
    catch {return, RetCatch} -> RetCatch end.

evaluate(Tokens) ->
    try
        case (erlang:length(Tokens) == 0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Stack = [],
        Fun_6 = fun Fun_6_loop(List, Stack, Tokens) ->
    case List of
        [] -> {Stack, Tokens};
        [Token_2|Token_2_rest] ->
            Stack_11 = (case (((((Token_2 == "+") orelse (Token_2 == "-")) orelse (Token_2 == "*")) orelse (Token_2 == "/")) orelse (Token_2 == "^")) of
        true -> Stack_9 = (case (((Token_2 == "+") orelse (Token_2 == "-")) andalso (erlang:length(Stack) < 2)) of
        true -> B_2 = (case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end),
            Stack_2 = slice_without_last(Stack),
            Stack_5 = (case (Token_2 == "-") of
        true -> Stack_3 = lists:append((case Stack_2 of nil -> []; _ -> Stack_2 end), [(0.0 - B_2)]),
            Stack_3;
        _ -> Stack_4 = lists:append((case Stack_2 of nil -> []; _ -> Stack_2 end), [B_2]),
            Stack_4
    end),
            A_3 = nil,
            B_4 = B_2,
            Result_7 = nil,
            Stack_5;
        _ -> B_3 = (case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end),
            Stack_6 = slice_without_last(Stack),
            A_2 = (case erlang:is_map(Stack_6) of true -> maps:get((erlang:length(Stack_6) - 1), Stack_6, nil); _ -> case (erlang:length(Stack_6) - 1) < 0 of true -> mochi_nth(erlang:length(Stack_6) + (erlang:length(Stack_6) - 1) + 1, Stack_6); _ -> mochi_nth((erlang:length(Stack_6) - 1) + 1, Stack_6) end end),
            Stack_7 = slice_without_last(Stack_6),
            Result_6 = apply_op(A_2, B_3, Token_2),
            Stack_8 = lists:append((case Stack_7 of nil -> []; _ -> Stack_7 end), [Result_6]),
            A_3 = A_2,
            B_4 = B_3,
            Result_7 = Result_6,
            Stack_8
    end),
            A_4 = A_3,
            B_5 = B_4,
            Result_8 = Result_7,
            Stack_9;
        _ -> Stack_10 = lists:append((case Stack of nil -> []; _ -> Stack end), [parse_float(Token_2)]),
            A_4 = nil,
            B_5 = nil,
            Result_8 = nil,
            Stack_10
    end),
            Fun_6_loop(Token_2_rest, Stack_11, Tokens);
        _ -> {Stack, Tokens}
    end
end,
{Stack_11, Tokens} = Fun_6(Tokens, Stack, Tokens),
        case (erlang:length(Stack_11) /= 1) of
        true -> erlang:error({panic, "Invalid postfix expression"});
        _ -> ok
    end,
        (case erlang:is_map(Stack_11) of true -> maps:get(0, Stack_11, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Stack_11) + 0 + 1, Stack_11); _ -> mochi_nth(0 + 1, Stack_11) end end)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~s~n", [mochi_str(evaluate(["2", "1", "+", "3", "*"]))]),
    io:format("~s~n", [mochi_str(evaluate(["4", "13", "5", "/", "+"]))]),
    io:format("~s~n", [mochi_str(evaluate(["5", "6", "9", "*", "+"]))]),
    io:format("~s~n", [mochi_str(evaluate(["2", "-", "3", "+"]))]),
    io:format("~s~n", [mochi_str(evaluate([]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
