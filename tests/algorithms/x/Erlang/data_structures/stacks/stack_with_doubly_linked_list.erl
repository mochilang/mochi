#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, empty_stack/0, push/2, pop/1, top/1, size/1, is_empty/1, print_stack/1, main/0]).

-compile({no_auto_import,[size/1]}).
% Generated by Mochi transpiler v0.10.59 (9be2afe36e) on 2025-08-07 08:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

empty_stack() ->
    try
        #{"nodes" => [], "head" => (0 - 1)}
    catch {return, Ret} -> Ret end.

push(Stack, Value) ->
    try
        Nodes = maps:get("nodes", Stack, nil),
        Idx = erlang:length(Nodes),
        New_node = #{"data" => Value, "next" => maps:get("head", Stack, nil), "prev" => (0 - 1)},
        Nodes_2 = lists:append((case Nodes of nil -> []; _ -> Nodes end), [New_node]),
        case (maps:get("head", Stack, nil) /= (0 - 1)) of
        true -> Head_node = (case erlang:is_map(Nodes_2) of true -> maps:get(maps:get("head", Stack, nil), Nodes_2, nil); _ -> lists:nth(maps:get("head", Stack, nil) + 1, Nodes_2) end),
            Head_node_2 = maps:put("prev", Idx, Head_node),
            Nodes_3 = lists:sublist(Nodes_2, maps:get("head", Stack, nil)) ++ [Head_node_2] ++ lists:nthtail(maps:get("head", Stack, nil) + 1, Nodes_2),
            Head_node_3 = Head_node_2,
            Nodes_4 = Nodes_3;
        _ -> Head_node_3 = nil,
            Nodes_4 = Nodes_2
    end,
        #{"nodes" => Nodes_4, "head" => Idx}
    catch {return, Ret} -> Ret end.

pop(Stack_2) ->
    try
        case (maps:get("head", Stack_2, nil) == (0 - 1)) of
        true -> throw({return, #{"stack" => Stack_2, "value" => 0, "ok" => false}});
        _ -> ok
    end,
        Nodes_5 = maps:get("nodes", Stack_2, nil),
        Head_node_4 = (case erlang:is_map(Nodes_5) of true -> maps:get(maps:get("head", Stack_2, nil), Nodes_5, nil); _ -> lists:nth(maps:get("head", Stack_2, nil) + 1, Nodes_5) end),
        Value_2 = maps:get("data", Head_node_4, nil),
        Next_idx = maps:get("next", Head_node_4, nil),
        case (Next_idx /= (0 - 1)) of
        true -> Next_node = (case erlang:is_map(Nodes_5) of true -> maps:get(Next_idx, Nodes_5, nil); _ -> lists:nth(Next_idx + 1, Nodes_5) end),
            Next_node_2 = maps:put("prev", (0 - 1), Next_node),
            Nodes_6 = lists:sublist(Nodes_5, Next_idx) ++ [Next_node_2] ++ lists:nthtail(Next_idx + 1, Nodes_5),
            Next_node_3 = Next_node_2,
            Nodes_7 = Nodes_6;
        _ -> Next_node_3 = nil,
            Nodes_7 = Nodes_5
    end,
        New_stack = #{"nodes" => Nodes_7, "head" => Next_idx},
        #{"stack" => New_stack, "value" => Value_2, "ok" => true}
    catch {return, Ret} -> Ret end.

top(Stack_3) ->
    try
        case (maps:get("head", Stack_3, nil) == (0 - 1)) of
        true -> throw({return, #{"value" => 0, "ok" => false}});
        _ -> ok
    end,
        Node = (case erlang:is_map(maps:get("nodes", Stack_3, nil)) of true -> maps:get(maps:get("head", Stack_3, nil), maps:get("nodes", Stack_3, nil), nil); _ -> lists:nth(maps:get("head", Stack_3, nil) + 1, maps:get("nodes", Stack_3, nil)) end),
        #{"value" => maps:get("data", Node, nil), "ok" => true}
    catch {return, Ret} -> Ret end.

size(Stack_4) ->
    try
        Count = 0,
        Idx_2 = maps:get("head", Stack_4, nil),
        Fun = fun Fun_loop(Count, Idx_2, Stack_4) ->
    case (Idx_2 /= (0 - 1)) of
        true ->
            Count_2 = (Count + 1),
            Node_2 = (case erlang:is_map(maps:get("nodes", Stack_4, nil)) of true -> maps:get(Idx_2, maps:get("nodes", Stack_4, nil), nil); _ -> lists:nth(Idx_2 + 1, maps:get("nodes", Stack_4, nil)) end),
            Idx_3 = maps:get("next", Node_2, nil),
            Fun_loop(Count_2, Idx_3, Stack_4);
        _ -> {Count, Idx_2, Stack_4}
    end
end,
{Count_2, Idx_3, Stack_4} = Fun(Count, Idx_2, Stack_4),
        Count_2
    catch {return, Ret} -> Ret end.

is_empty(Stack_5) ->
    try
        (maps:get("head", Stack_5, nil) == (0 - 1))
    catch {return, Ret} -> Ret end.

print_stack(Stack_6) ->
    try
        io:format("~ts~n", [mochi_repr("stack elements are:")]),
        Idx_4 = maps:get("head", Stack_6, nil),
        S = "",
        Fun_2 = fun Fun_2_loop(Idx_4, S, Stack_6) ->
    case (Idx_4 /= (0 - 1)) of
        true ->
            Node_3 = (case erlang:is_map(maps:get("nodes", Stack_6, nil)) of true -> maps:get(Idx_4, maps:get("nodes", Stack_6, nil), nil); _ -> lists:nth(Idx_4 + 1, maps:get("nodes", Stack_6, nil)) end),
            S_2 = ((S ++ mochi_str(maps:get("data", Node_3, nil))) ++ "->"),
            Idx_5 = maps:get("next", Node_3, nil),
            Fun_2_loop(Idx_5, S_2, Stack_6);
        _ -> {Idx_4, S, Stack_6}
    end
end,
{Idx_5, S_2, Stack_6} = Fun_2(Idx_4, S, Stack_6),
        case (erlang:length(S_2) > 0) of
        true -> io:format("~ts~n", [mochi_repr(S_2)]);
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Stack_7 = empty_stack(),
        io:format("~ts~n", [mochi_repr("Stack operations using Doubly LinkedList")]),
        Stack_8 = push(Stack_7, 4),
        Stack_9 = push(Stack_8, 5),
        Stack_10 = push(Stack_9, 6),
        Stack_11 = push(Stack_10, 7),
        print_stack(Stack_11),
        T = top(Stack_11),
        case maps:get("ok", T, nil) of
        true -> io:format("~ts~n", [mochi_repr(("Top element is " ++ mochi_str(maps:get("value", T, nil))))]);
        _ -> io:format("~ts~n", [mochi_repr("Top element is None")])
    end,
        io:format("~ts~n", [mochi_repr(("Size of the stack is " ++ mochi_str(size(Stack_11))))]),
        P = pop(Stack_11),
        Stack_12 = maps:get("stack", P, nil),
        P_2 = pop(Stack_12),
        Stack_13 = maps:get("stack", P_2, nil),
        print_stack(Stack_13),
        io:format("~ts~n", [mochi_repr(("stack is empty: " ++ mochi_str(is_empty(Stack_13))))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
