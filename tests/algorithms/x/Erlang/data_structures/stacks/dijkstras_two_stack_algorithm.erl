#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_digit/1, slice_without_last_int/1, slice_without_last_string/1, dijkstras_two_stack_algorithm/1]).

% Generated by Mochi transpiler v0.10.59 (9be2afe36e) on 2025-08-07 08:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

is_digit(Ch) ->
    try
        ((((((((((Ch == "0") orelse (Ch == "1")) orelse (Ch == "2")) orelse (Ch == "3")) orelse (Ch == "4")) orelse (Ch == "5")) orelse (Ch == "6")) orelse (Ch == "7")) orelse (Ch == "8")) orelse (Ch == "9"))
    catch {return, Ret} -> Ret end.

slice_without_last_int(Xs) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, Res, Xs) ->
    case (I < (erlang:length(Xs) - 1)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> lists:nth(I + 1, Xs) end)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Res_2, Xs);
        _ -> {I, Res, Xs}
    end
end,
{I_2, Res_2, Xs} = Fun(I, Res, Xs),
        Res_2
    catch {return, Ret} -> Ret end.

slice_without_last_string(Xs_2) ->
    try
        Res_3 = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Res_3, Xs_2) ->
    case (I_3 < (erlang:length(Xs_2) - 1)) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [(case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> lists:nth(I_3 + 1, Xs_2) end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Res_4, Xs_2);
        _ -> {I_3, Res_3, Xs_2}
    end
end,
{I_4, Res_4, Xs_2} = Fun_2(I_3, Res_3, Xs_2),
        Res_4
    catch {return, Ret} -> Ret end.

dijkstras_two_stack_algorithm(Equation) ->
    try
        Operand_stack = [],
        Operator_stack = [],
        Idx = 0,
        Fun_3 = fun Fun_3_loop(Equation, Idx, Operand_stack, Operator_stack) ->
    case (Idx < erlang:length(Equation)) of
        true ->
            Ch_2 = string:substr(Equation, Idx + 1, ((Idx + 1) - Idx)),
            case is_digit(Ch_2) of
        true -> Operand_stack_2 = lists:append((case Operand_stack of nil -> []; _ -> Operand_stack end), [mochi_to_int(Ch_2)]),
            Num1_4 = nil,
            Num2_4 = nil,
            Operand_stack_8 = Operand_stack_2,
            Operator_stack_6 = Operator_stack,
            Opr_4 = nil,
            Total_4 = nil;
        _ -> case ((((Ch_2 == "+") orelse (Ch_2 == "-")) orelse (Ch_2 == "*")) orelse (Ch_2 == "/")) of
        true -> Operator_stack_2 = lists:append((case Operator_stack of nil -> []; _ -> Operator_stack end), [Ch_2]),
            Num1_3 = nil,
            Num2_3 = nil,
            Operand_stack_7 = Operand_stack,
            Operator_stack_5 = Operator_stack_2,
            Opr_3 = nil,
            Total_3 = nil;
        _ -> case (Ch_2 == ")") of
        true -> Opr = (case erlang:is_map(Operator_stack) of true -> maps:get((erlang:length(Operator_stack) - 1), Operator_stack, nil); _ -> lists:nth((erlang:length(Operator_stack) - 1) + 1, Operator_stack) end),
            Operator_stack_3 = slice_without_last_string(Operator_stack),
            Num1 = (case erlang:is_map(Operand_stack) of true -> maps:get((erlang:length(Operand_stack) - 1), Operand_stack, nil); _ -> lists:nth((erlang:length(Operand_stack) - 1) + 1, Operand_stack) end),
            Operand_stack_3 = slice_without_last_int(Operand_stack),
            Num2 = (case erlang:is_map(Operand_stack_3) of true -> maps:get((erlang:length(Operand_stack_3) - 1), Operand_stack_3, nil); _ -> lists:nth((erlang:length(Operand_stack_3) - 1) + 1, Operand_stack_3) end),
            Operand_stack_4 = slice_without_last_int(Operand_stack_3),
            Total = (case (Opr == "+") of
    true -> (Num2 + Num1);
    _ -> (case (Opr == "-") of
    true -> (Num2 - Num1);
    _ -> (case (Opr == "*") of
    true -> (Num2 * Num1);
    _ -> (Num2 div Num1)
end)
end)
end),
            Operand_stack_5 = lists:append((case Operand_stack_4 of nil -> []; _ -> Operand_stack_4 end), [Total]),
            Num1_2 = Num1,
            Num2_2 = Num2,
            Operand_stack_6 = Operand_stack_5,
            Operator_stack_4 = Operator_stack_3,
            Opr_2 = Opr,
            Total_2 = Total;
        _ -> Num1_2 = nil,
            Num2_2 = nil,
            Operand_stack_6 = Operand_stack,
            Operator_stack_4 = Operator_stack,
            Opr_2 = nil,
            Total_2 = nil
    end,
            Num1_3 = Num1_2,
            Num2_3 = Num2_2,
            Operand_stack_7 = Operand_stack_6,
            Operator_stack_5 = Operator_stack_4,
            Opr_3 = Opr_2,
            Total_3 = Total_2
    end,
            Num1_4 = Num1_3,
            Num2_4 = Num2_3,
            Operand_stack_8 = Operand_stack_7,
            Operator_stack_6 = Operator_stack_5,
            Opr_4 = Opr_3,
            Total_4 = Total_3
    end,
            Idx_2 = (Idx + 1),
            Fun_3_loop(Equation, Idx_2, Operand_stack_8, Operator_stack_6);
        _ -> {Equation, Idx, Operand_stack, Operator_stack}
    end
end,
{Equation, Idx_2, Operand_stack_8, Operator_stack_6} = Fun_3(Equation, Idx, Operand_stack, Operator_stack),
        (case erlang:is_map(Operand_stack_8) of true -> maps:get((erlang:length(Operand_stack_8) - 1), Operand_stack_8, nil); _ -> lists:nth((erlang:length(Operand_stack_8) - 1) + 1, Operand_stack_8) end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('equation', "(5 + ((4 * 2) * (2 + 3)))"),
    io:format("~ts~n", [mochi_repr((("(5 + ((4 * 2) * (2 + 3)))" ++ " = ") ++ mochi_str(dijkstras_two_stack_algorithm("(5 + ((4 * 2) * (2 + 3)))"))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
