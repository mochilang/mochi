#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, precedence/1, associativity/1, balanced_parentheses/1, is_letter/1, is_digit/1, is_alnum/1, infix_to_postfix/1, main/0]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

precedence(Ch) ->
    try
        (case maps:is_key(Ch, erlang:get('PRECEDENCES')) of
    true -> maps:get(Ch, erlang:get('PRECEDENCES'), nil);
    _ -> -1
end)
    catch {return, RetCatch} -> RetCatch end.

associativity(Ch_2) ->
    try
        (case maps:is_key(Ch_2, erlang:get('ASSOCIATIVITIES')) of
    true -> maps:get(Ch_2, erlang:get('ASSOCIATIVITIES'), nil);
    _ -> ""
end)
    catch {return, RetCatch} -> RetCatch end.

balanced_parentheses(Expr) ->
    try
        Count = 0,
        I = 0,
        Fun = fun Fun_loop(Count, Expr, I) ->
    case (I < erlang:length(Expr)) of
        true ->
            Ch_3 = string:substr(Expr, I + 1, ((I + 1) - I)),
            Count_3 = (case (Ch_3 == "(") of
        true -> Count_2 = (Count + 1),
            Count_2;
        _ -> Count
    end),
            Count_5 = (case (Ch_3 == ")") of
        true -> Count_4 = (Count_3 - 1),
            case (Count_4 < 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            Count_4;
        _ -> Count_3
    end),
            I_2 = (I + 1),
            Fun_loop(Count_5, Expr, I_2);
        _ -> {Count, Expr, I}
    end
end,
{Count_5, Expr, I_2} = Fun(Count, Expr, I),
        (Count_5 == 0)
    catch {return, RetCatch} -> RetCatch end.

is_letter(Ch_4) ->
    try
        ((("a" =< Ch_4) andalso (Ch_4 =< "z")) orelse (("A" =< Ch_4) andalso (Ch_4 =< "Z")))
    catch {return, RetCatch} -> RetCatch end.

is_digit(Ch_5) ->
    try
        (("0" =< Ch_5) andalso (Ch_5 =< "9"))
    catch {return, RetCatch} -> RetCatch end.

is_alnum(Ch_6) ->
    try
        (is_letter(Ch_6) orelse is_digit(Ch_6))
    catch {return, RetCatch} -> RetCatch end.

infix_to_postfix(Expression) ->
    try
        case (balanced_parentheses(Expression) == false) of
        true -> erlang:error({panic, "Mismatched parentheses"});
        _ -> ok
    end,
        Stack = [],
        Postfix = [],
        I_3 = 0,
        Fun_8 = fun Fun_8_loop(Expression, I_3, Postfix, Stack) ->
    case (I_3 < erlang:length(Expression)) of
        true ->
            try
                Ch_7 = string:substr(Expression, I_3 + 1, ((I_3 + 1) - I_3)),
                Stack_18 = (case is_alnum(Ch_7) of
        true -> Postfix_2 = lists:append((case Postfix of nil -> []; _ -> Postfix end), [Ch_7]),
            Fun_7 = nil,
            Postfix_10 = Postfix_2,
            Stack;
        _ -> Stack_17 = (case (Ch_7 == "(") of
        true -> Stack_2 = lists:append((case Stack of nil -> []; _ -> Stack end), [Ch_7]),
            Fun_6 = nil,
            Postfix_9 = Postfix,
            Stack_2;
        _ -> Stack_16 = (case (Ch_7 == ")") of
        true -> Fun_2 = fun Fun_2_loop(Ch_7, Expression, I_3, Postfix, Stack) ->
    case ((erlang:length(Stack) > 0) andalso ((case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end) /= "(")) of
        true ->
            Postfix_3 = lists:append((case Postfix of nil -> []; _ -> Postfix end), [(case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end)]),
            Stack_3 = (case erlang:is_binary(Stack) of true -> string:substr(Stack, 0 + 1, ((erlang:length(Stack) - 1) - 0)); _ -> lists:sublist(Stack, (0 + 1), ((erlang:length(Stack) - 1) - 0)) end),
            Fun_2_loop(Ch_7, Expression, I_3, Postfix_3, Stack_3);
        _ -> {Ch_7, Expression, I_3, Postfix, Stack}
    end
end,
{Ch_7, Expression, I_3, Postfix_3, Stack_3} = Fun_2(Ch_7, Expression, I_3, Postfix, Stack),
            Stack_5 = (case (erlang:length(Stack_3) > 0) of
        true -> Stack_4 = (case erlang:is_binary(Stack_3) of true -> string:substr(Stack_3, 0 + 1, ((erlang:length(Stack_3) - 1) - 0)); _ -> lists:sublist(Stack_3, (0 + 1), ((erlang:length(Stack_3) - 1) - 0)) end),
            Stack_4;
        _ -> Stack_3
    end),
            Fun_5 = Fun_2,
            Postfix_8 = Postfix_3,
            Stack_5;
        _ -> Stack_15 = (case (Ch_7 == " ") of
        true -> Fun_4 = nil,
            Postfix_7 = Postfix,
            Stack;
        _ -> Fun_3 = fun Fun_3_loop(Ch_7, Expression, I_3, Postfix, Stack) ->
    case true of
        true ->
            try
                Stack_7 = (case (erlang:length(Stack) == 0) of
        true -> Stack_6 = lists:append((case Stack of nil -> []; _ -> Stack end), [Ch_7]),
            throw({break, {Ch_7, Expression, I_3, Postfix, Stack_6}}),
            Stack_6;
        _ -> Stack
    end),
                Cp = precedence(Ch_7),
                Tp = precedence((case erlang:is_map(Stack_7) of true -> maps:get((erlang:length(Stack_7) - 1), Stack_7, nil); _ -> case (erlang:length(Stack_7) - 1) < 0 of true -> mochi_nth(erlang:length(Stack_7) + (erlang:length(Stack_7) - 1) + 1, Stack_7); _ -> mochi_nth((erlang:length(Stack_7) - 1) + 1, Stack_7) end end)),
                Stack_9 = (case (Cp > Tp) of
        true -> Stack_8 = lists:append((case Stack_7 of nil -> []; _ -> Stack_7 end), [Ch_7]),
            throw({break, {Ch_7, Expression, I_3, Postfix, Stack_8}}),
            Stack_8;
        _ -> Stack_7
    end),
                Stack_11 = (case (Cp < Tp) of
        true -> Postfix_4 = lists:append((case Postfix of nil -> []; _ -> Postfix end), [(case erlang:is_map(Stack_9) of true -> maps:get((erlang:length(Stack_9) - 1), Stack_9, nil); _ -> case (erlang:length(Stack_9) - 1) < 0 of true -> mochi_nth(erlang:length(Stack_9) + (erlang:length(Stack_9) - 1) + 1, Stack_9); _ -> mochi_nth((erlang:length(Stack_9) - 1) + 1, Stack_9) end end)]),
            Stack_10 = (case erlang:is_binary(Stack_9) of true -> string:substr(Stack_9, 0 + 1, ((erlang:length(Stack_9) - 1) - 0)); _ -> lists:sublist(Stack_9, (0 + 1), ((erlang:length(Stack_9) - 1) - 0)) end),
            throw({continue, Ch_7, Expression, I_3, Postfix_4, Stack_10}),
            Postfix_5 = Postfix_4,
            Stack_10;
        _ -> Postfix_5 = Postfix,
            Stack_9
    end),
                Stack_13 = (case (associativity(Ch_7) == "RL") of
        true -> Stack_12 = lists:append((case Stack_11 of nil -> []; _ -> Stack_11 end), [Ch_7]),
            throw({break, {Ch_7, Expression, I_3, Postfix_5, Stack_12}}),
            Stack_12;
        _ -> Stack_11
    end),
                Postfix_6 = lists:append((case Postfix_5 of nil -> []; _ -> Postfix_5 end), [(case erlang:is_map(Stack_13) of true -> maps:get((erlang:length(Stack_13) - 1), Stack_13, nil); _ -> case (erlang:length(Stack_13) - 1) < 0 of true -> mochi_nth(erlang:length(Stack_13) + (erlang:length(Stack_13) - 1) + 1, Stack_13); _ -> mochi_nth((erlang:length(Stack_13) - 1) + 1, Stack_13) end end)]),
                Stack_14 = (case erlang:is_binary(Stack_13) of true -> string:substr(Stack_13, 0 + 1, ((erlang:length(Stack_13) - 1) - 0)); _ -> lists:sublist(Stack_13, (0 + 1), ((erlang:length(Stack_13) - 1) - 0)) end),
                Fun_3_loop(Ch_7, Expression, I_3, Postfix_6, Stack_14)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_3_loop(C0, C1, C2, C3, C4);
                {break, Bs} -> Bs
            end;
        _ -> {Ch_7, Expression, I_3, Postfix, Stack}
    end
end,
{Ch_7, Expression, I_3, Postfix_6, Stack_14} = Fun_3(Ch_7, Expression, I_3, Postfix, Stack),
            Fun_4 = Fun_3,
            Postfix_7 = Postfix_6,
            Stack_14
    end),
            Fun_5 = Fun_4,
            Postfix_8 = Postfix_7,
            Stack_15
    end),
            Fun_6 = Fun_5,
            Postfix_9 = Postfix_8,
            Stack_16
    end),
            Fun_7 = Fun_6,
            Postfix_10 = Postfix_9,
            Stack_17
    end),
                I_4 = (I_3 + 1),
                Fun_8_loop(Expression, I_4, Postfix_10, Stack_18)
            catch
                {continue, C0, C1, C2, C3} -> Fun_8_loop(C0, C1, C2, C3);
                {break, Bs} -> Bs
            end;
        _ -> {Expression, I_3, Postfix, Stack}
    end
end,
{Expression, I_4, Postfix_10, Stack_18} = Fun_8(Expression, I_3, Postfix, Stack),
        Fun_9 = fun Fun_9_loop(Expression, I_4, Postfix_10, Stack_18) ->
    case (erlang:length(Stack_18) > 0) of
        true ->
            Postfix_11 = lists:append((case Postfix_10 of nil -> []; _ -> Postfix_10 end), [(case erlang:is_map(Stack_18) of true -> maps:get((erlang:length(Stack_18) - 1), Stack_18, nil); _ -> case (erlang:length(Stack_18) - 1) < 0 of true -> mochi_nth(erlang:length(Stack_18) + (erlang:length(Stack_18) - 1) + 1, Stack_18); _ -> mochi_nth((erlang:length(Stack_18) - 1) + 1, Stack_18) end end)]),
            Stack_19 = (case erlang:is_binary(Stack_18) of true -> string:substr(Stack_18, 0 + 1, ((erlang:length(Stack_18) - 1) - 0)); _ -> lists:sublist(Stack_18, (0 + 1), ((erlang:length(Stack_18) - 1) - 0)) end),
            Fun_9_loop(Expression, I_4, Postfix_11, Stack_19);
        _ -> {Expression, I_4, Postfix_10, Stack_18}
    end
end,
{Expression, I_4, Postfix_11, Stack_19} = Fun_9(Expression, I_4, Postfix_10, Stack_18),
        Res = "",
        J = 0,
        Fun_10 = fun Fun_10_loop(Expression, I_4, J, Postfix_11, Res, Stack_19) ->
    case (J < erlang:length(Postfix_11)) of
        true ->
            Res_3 = (case (J > 0) of
        true -> Res_2 = (Res ++ " "),
            Res_2;
        _ -> Res
    end),
            Res_4 = (Res_3 ++ (case erlang:is_map(Postfix_11) of true -> maps:get(J, Postfix_11, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Postfix_11) + J + 1, Postfix_11); _ -> mochi_nth(J + 1, Postfix_11) end end)),
            J_2 = (J + 1),
            Fun_10_loop(Expression, I_4, J_2, Postfix_11, Res_4, Stack_19);
        _ -> {Expression, I_4, J, Postfix_11, Res, Stack_19}
    end
end,
{Expression, I_4, J_2, Postfix_11, Res_4, Stack_19} = Fun_10(Expression, I_4, J, Postfix_11, Res, Stack_19),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Expression_2 = "a+b*(c^d-e)^(f+g*h)-i",
        io:format("~s~n", [mochi_format("a+b*(c^d-e)^(f+g*h)-i")]),
        io:format("~s~n", [mochi_format(infix_to_postfix("a+b*(c^d-e)^(f+g*h)-i"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PRECEDENCES', #{"+" => 1, "-" => 1, "*" => 2, "/" => 2, "^" => 3}),
    erlang:put('ASSOCIATIVITIES', #{"+" => "LR", "-" => "LR", "*" => "LR", "/" => "LR", "^" => "RL"}),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
