#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, is_alpha/1, is_digit/1, reverse_string/1, infix_to_postfix/1, infix_to_prefix/1]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.

is_alpha(Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I) ->
    case (I < erlang:length("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ")) of
        true ->
            case (string:substr("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", I + 1, 1) == Ch) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2);
        _ -> {Ch, I}
    end
end,
{Ch, I_2} = Fun(Ch, I),
        false
    catch {return, RetCatch} -> RetCatch end.

is_digit(Ch_2) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Ch_2, I_3) ->
    case (I_3 < erlang:length("0123456789")) of
        true ->
            case (string:substr("0123456789", I_3 + 1, 1) == Ch_2) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Ch_2, I_4);
        _ -> {Ch_2, I_3}
    end
end,
{Ch_2, I_4} = Fun_2(Ch_2, I_3),
        false
    catch {return, RetCatch} -> RetCatch end.

reverse_string(S) ->
    try
        Out = "",
        I_5 = (erlang:length(S) - 1),
        Fun_3 = fun Fun_3_loop(I_5, Out, S) ->
    case (I_5 >= 0) of
        true ->
            Out_2 = (Out ++ string:substr(S, I_5 + 1, 1)),
            I_6 = (I_5 - 1),
            Fun_3_loop(I_6, Out_2, S);
        _ -> {I_5, Out, S}
    end
end,
{I_6, Out_2, S} = Fun_3(I_5, Out, S),
        Out_2
    catch {return, RetCatch} -> RetCatch end.

infix_to_postfix(Infix) ->
    try
        Stack = [],
        Post = [],
        I_7 = 0,
        Fun_10 = fun Fun_10_loop(I_7, Infix, Post, Stack) ->
    case (I_7 < erlang:length(Infix)) of
        true ->
            X = string:substr(Infix, I_7 + 1, 1),
            Stack_11 = (case (is_alpha(X) orelse is_digit(X)) of
        true -> Post_2 = lists:append((case Post of nil -> []; _ -> Post end), [X]),
            Fun_9 = nil,
            Post_8 = Post_2,
            Stack;
        _ -> Stack_10 = (case (X == "(") of
        true -> Stack_2 = lists:append((case Stack of nil -> []; _ -> Stack end), [X]),
            Fun_8 = nil,
            Post_7 = Post,
            Stack_2;
        _ -> Stack_9 = (case (X == ")") of
        true -> case (erlang:length(Stack) == 0) of
        true -> erlang:error({panic, "list index out of range"});
        _ -> ok
    end,
            Fun_4 = fun Fun_4_loop(I_7, Infix, Post, Stack, X) ->
    case ((case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end) /= "(") of
        true ->
            Post_3 = lists:append((case Post of nil -> []; _ -> Post end), [(case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end)]),
            Stack_3 = lists:sublist(Stack, 0 + 1, ((erlang:length(Stack) - 1) - 0)),
            Fun_4_loop(I_7, Infix, Post_3, Stack_3, X);
        _ -> {I_7, Infix, Post, Stack, X}
    end
end,
{I_7, Infix, Post_3, Stack_3, X} = Fun_4(I_7, Infix, Post, Stack, X),
            Stack_4 = lists:sublist(Stack_3, 0 + 1, ((erlang:length(Stack_3) - 1) - 0)),
            Fun_7 = Fun_4,
            Post_6 = Post_3,
            Stack_4;
        _ -> Stack_8 = (case (erlang:length(Stack) == 0) of
        true -> Stack_5 = lists:append((case Stack of nil -> []; _ -> Stack end), [X]),
            Fun_6 = nil,
            Post_5 = Post,
            Stack_5;
        _ -> Fun_5 = fun Fun_5_loop(I_7, Infix, Post, Stack, X) ->
    case (((erlang:length(Stack) > 0) andalso ((case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end) /= "(")) andalso (maps:get(X, erlang:get('PRIORITY'), nil) =< maps:get((case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end), erlang:get('PRIORITY'), nil))) of
        true ->
            Post_4 = lists:append((case Post of nil -> []; _ -> Post end), [(case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> case (erlang:length(Stack) - 1) < 0 of true -> mochi_nth(erlang:length(Stack) + (erlang:length(Stack) - 1) + 1, Stack); _ -> mochi_nth((erlang:length(Stack) - 1) + 1, Stack) end end)]),
            Stack_6 = lists:sublist(Stack, 0 + 1, ((erlang:length(Stack) - 1) - 0)),
            Fun_5_loop(I_7, Infix, Post_4, Stack_6, X);
        _ -> {I_7, Infix, Post, Stack, X}
    end
end,
{I_7, Infix, Post_4, Stack_6, X} = Fun_5(I_7, Infix, Post, Stack, X),
            Stack_7 = lists:append((case Stack_6 of nil -> []; _ -> Stack_6 end), [X]),
            Fun_6 = Fun_5,
            Post_5 = Post_4,
            Stack_7
    end),
            Fun_7 = Fun_6,
            Post_6 = Post_5,
            Stack_8
    end),
            Fun_8 = Fun_7,
            Post_7 = Post_6,
            Stack_9
    end),
            Fun_9 = Fun_8,
            Post_8 = Post_7,
            Stack_10
    end),
            I_8 = (I_7 + 1),
            Fun_10_loop(I_8, Infix, Post_8, Stack_11);
        _ -> {I_7, Infix, Post, Stack}
    end
end,
{I_8, Infix, Post_8, Stack_11} = Fun_10(I_7, Infix, Post, Stack),
        Fun_11 = fun Fun_11_loop(I_8, Infix, Post_8, Stack_11) ->
    case (erlang:length(Stack_11) > 0) of
        true ->
            case ((case erlang:is_map(Stack_11) of true -> maps:get((erlang:length(Stack_11) - 1), Stack_11, nil); _ -> case (erlang:length(Stack_11) - 1) < 0 of true -> mochi_nth(erlang:length(Stack_11) + (erlang:length(Stack_11) - 1) + 1, Stack_11); _ -> mochi_nth((erlang:length(Stack_11) - 1) + 1, Stack_11) end end) == "(") of
        true -> erlang:error({panic, "invalid expression"});
        _ -> ok
    end,
            Post_9 = lists:append((case Post_8 of nil -> []; _ -> Post_8 end), [(case erlang:is_map(Stack_11) of true -> maps:get((erlang:length(Stack_11) - 1), Stack_11, nil); _ -> case (erlang:length(Stack_11) - 1) < 0 of true -> mochi_nth(erlang:length(Stack_11) + (erlang:length(Stack_11) - 1) + 1, Stack_11); _ -> mochi_nth((erlang:length(Stack_11) - 1) + 1, Stack_11) end end)]),
            Stack_12 = lists:sublist(Stack_11, 0 + 1, ((erlang:length(Stack_11) - 1) - 0)),
            Fun_11_loop(I_8, Infix, Post_9, Stack_12);
        _ -> {I_8, Infix, Post_8, Stack_11}
    end
end,
{I_8, Infix, Post_9, Stack_12} = Fun_11(I_8, Infix, Post_8, Stack_11),
        Res = "",
        J = 0,
        Fun_12 = fun Fun_12_loop(I_8, Infix, J, Post_9, Res, Stack_12) ->
    case (J < erlang:length(Post_9)) of
        true ->
            Res_2 = (Res ++ (case erlang:is_map(Post_9) of true -> maps:get(J, Post_9, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Post_9) + J + 1, Post_9); _ -> mochi_nth(J + 1, Post_9) end end)),
            J_2 = (J + 1),
            Fun_12_loop(I_8, Infix, J_2, Post_9, Res_2, Stack_12);
        _ -> {I_8, Infix, J, Post_9, Res, Stack_12}
    end
end,
{I_8, Infix, J_2, Post_9, Res_2, Stack_12} = Fun_12(I_8, Infix, J, Post_9, Res, Stack_12),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

infix_to_prefix(Infix_2) ->
    try
        Reversed = "",
        I_9 = (erlang:length(Infix_2) - 1),
        Fun_13 = fun Fun_13_loop(I_9, Infix_2, Reversed) ->
    case (I_9 >= 0) of
        true ->
            Ch_3 = string:substr(Infix_2, I_9 + 1, 1),
            Reversed_6 = (case (Ch_3 == "(") of
        true -> Reversed_2 = (Reversed ++ ")"),
            Reversed_2;
        _ -> Reversed_5 = (case (Ch_3 == ")") of
        true -> Reversed_3 = (Reversed ++ "("),
            Reversed_3;
        _ -> Reversed_4 = (Reversed ++ Ch_3),
            Reversed_4
    end),
            Reversed_5
    end),
            I_10 = (I_9 - 1),
            Fun_13_loop(I_10, Infix_2, Reversed_6);
        _ -> {I_9, Infix_2, Reversed}
    end
end,
{I_10, Infix_2, Reversed_6} = Fun_13(I_9, Infix_2, Reversed),
        Postfix = infix_to_postfix(Reversed_6),
        Prefix = reverse_string(Postfix),
        Prefix
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PRIORITY', #{"^" => 3, "*" => 2, "/" => 2, "%" => 2, "+" => 1, "-" => 1}),
    erlang:put('LETTERS', "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    erlang:put('DIGITS', "0123456789"),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
