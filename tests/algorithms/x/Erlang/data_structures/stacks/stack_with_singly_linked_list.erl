#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, empty_stack/0, is_empty/1, push/2, pop/1, peek/1, clear/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (9be2afe36e) on 2025-08-07 08:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

empty_stack() ->
    try
        #{"nodes" => [], "top" => -1}
    catch {return, Ret} -> Ret end.

is_empty(Stack) ->
    try
        (maps:get("top", Stack, nil) == -1)
    catch {return, Ret} -> Ret end.

push(Stack_2, Item) ->
    try
        New_node = #{"value" => Item, "next" => maps:get("top", Stack_2, nil)},
        New_nodes = maps:get("nodes", Stack_2, nil),
        New_nodes_2 = lists:append((case New_nodes of nil -> []; _ -> New_nodes end), [New_node]),
        New_top = (erlang:length(New_nodes_2) - 1),
        #{"nodes" => New_nodes_2, "top" => New_top}
    catch {return, Ret} -> Ret end.

pop(Stack_3) ->
    try
        case (maps:get("top", Stack_3, nil) == -1) of
        true -> erlang:error("pop from empty stack");
        _ -> ok
    end,
        Node = (case erlang:is_map(maps:get("nodes", Stack_3, nil)) of true -> maps:get(maps:get("top", Stack_3, nil), maps:get("nodes", Stack_3, nil), nil); _ -> lists:nth(maps:get("top", Stack_3, nil) + 1, maps:get("nodes", Stack_3, nil)) end),
        New_top_2 = maps:get("next", Node, nil),
        New_stack = #{"nodes" => maps:get("nodes", Stack_3, nil), "top" => New_top_2},
        #{"stack" => New_stack, "value" => maps:get("value", Node, nil)}
    catch {return, Ret} -> Ret end.

peek(Stack_4) ->
    try
        case (maps:get("top", Stack_4, nil) == -1) of
        true -> erlang:error("peek from empty stack");
        _ -> ok
    end,
        Node_2 = (case erlang:is_map(maps:get("nodes", Stack_4, nil)) of true -> maps:get(maps:get("top", Stack_4, nil), maps:get("nodes", Stack_4, nil), nil); _ -> lists:nth(maps:get("top", Stack_4, nil) + 1, maps:get("nodes", Stack_4, nil)) end),
        maps:get("value", Node_2, nil)
    catch {return, Ret} -> Ret end.

clear(Stack_5) ->
    try
        #{"nodes" => [], "top" => -1}
    catch {return, Ret} -> Ret end.

main() ->
    try
        Stack_6 = empty_stack(),
        io:format("~ts~n", [mochi_repr(is_empty(Stack_6))]),
        Stack_7 = push(Stack_6, "5"),
        Stack_8 = push(Stack_7, "9"),
        Stack_9 = push(Stack_8, "python"),
        io:format("~ts~n", [mochi_repr(is_empty(Stack_9))]),
        Res = pop(Stack_9),
        Stack_10 = maps:get("stack", Res, nil),
        io:format("~ts~n", [mochi_repr(maps:get("value", Res, nil))]),
        Stack_11 = push(Stack_10, "algorithms"),
        Res_2 = pop(Stack_11),
        Stack_12 = maps:get("stack", Res_2, nil),
        io:format("~ts~n", [mochi_repr(maps:get("value", Res_2, nil))]),
        Res_3 = pop(Stack_12),
        Stack_13 = maps:get("stack", Res_3, nil),
        io:format("~ts~n", [mochi_repr(maps:get("value", Res_3, nil))]),
        Res_4 = pop(Stack_13),
        Stack_14 = maps:get("stack", Res_4, nil),
        io:format("~ts~n", [mochi_repr(maps:get("value", Res_4, nil))]),
        io:format("~ts~n", [mochi_repr(is_empty(Stack_14))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
