#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, next_greatest_element_slow/1, next_greatest_element_fast/1, set_at_float/3, next_greatest_element/1]).

% Generated by Mochi transpiler v0.10.59 (9be2afe36e) on 2025-08-07 08:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

next_greatest_element_slow(Xs) ->
    try
        Res = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Res, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            try
                Next = -1,
                J = (I + 1),
                Fun = fun Fun_loop(I, J, Next, Res, Xs) ->
    case (J < erlang:length(Xs)) of
        true ->
            try
                case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> lists:nth(I + 1, Xs) end) < (case erlang:is_map(Xs) of true -> maps:get(J, Xs, nil); _ -> lists:nth(J + 1, Xs) end)) of
        true -> Next_2 = (case erlang:is_map(Xs) of true -> maps:get(J, Xs, nil); _ -> lists:nth(J + 1, Xs) end),
            throw({break, I, J, Next_2, Res, Xs}),
            Next_3 = Next_2;
        _ -> Next_3 = Next
    end,
                J_2 = (J + 1),
                Fun_loop(I, J_2, Next_3, Res, Xs)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {I, J, Next, Res, Xs}
    end
end,
{I, J_2, Next_3, Res, Xs} = Fun(I, J, Next, Res, Xs),
                Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Next_3]),
                I_2 = (I + 1),
                Fun_2_loop(I_2, Res_2, Xs)
            catch
                {continue, C0, C1, C2} -> Fun_2_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {I, Res, Xs}
    end
end,
{I_2, Res_2, Xs} = Fun_2(I, Res, Xs),
        Res_2
    catch {return, Ret} -> Ret end.

next_greatest_element_fast(Xs_2) ->
    try
        Res_3 = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(I_3, Res_3, Xs_2) ->
    case (I_3 < erlang:length(Xs_2)) of
        true ->
            try
                Next_4 = -1,
                J_3 = (I_3 + 1),
                Fun_3 = fun Fun_3_loop(I_3, J_3, Next_4, Res_3, Xs_2) ->
    case (J_3 < erlang:length(Xs_2)) of
        true ->
            try
                Inner = (case erlang:is_map(Xs_2) of true -> maps:get(J_3, Xs_2, nil); _ -> lists:nth(J_3 + 1, Xs_2) end),
                case ((case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> lists:nth(I_3 + 1, Xs_2) end) < Inner) of
        true -> Next_5 = Inner,
            throw({break, I_3, J_3, Next_5, Res_3, Xs_2}),
            Next_6 = Next_5;
        _ -> Next_6 = Next_4
    end,
                J_4 = (J_3 + 1),
                Fun_3_loop(I_3, J_4, Next_6, Res_3, Xs_2)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_3_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {I_3, J_3, Next_4, Res_3, Xs_2}
    end
end,
{I_3, J_4, Next_6, Res_3, Xs_2} = Fun_3(I_3, J_3, Next_4, Res_3, Xs_2),
                Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Next_6]),
                I_4 = (I_3 + 1),
                Fun_4_loop(I_4, Res_4, Xs_2)
            catch
                {continue, C0, C1, C2} -> Fun_4_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {I_3, Res_3, Xs_2}
    end
end,
{I_4, Res_4, Xs_2} = Fun_4(I_3, Res_3, Xs_2),
        Res_4
    catch {return, Ret} -> Ret end.

set_at_float(Xs_3, Idx, Value) ->
    try
        I_5 = 0,
        Res_5 = [],
        Fun_5 = fun Fun_5_loop(I_5, Idx, Res_5, Value, Xs_3) ->
    case (I_5 < erlang:length(Xs_3)) of
        true ->
            case (I_5 == Idx) of
        true -> Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [Value]),
            Res_8 = Res_6;
        _ -> Res_7 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [(case erlang:is_map(Xs_3) of true -> maps:get(I_5, Xs_3, nil); _ -> lists:nth(I_5 + 1, Xs_3) end)]),
            Res_8 = Res_7
    end,
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, Idx, Res_8, Value, Xs_3);
        _ -> {I_5, Idx, Res_5, Value, Xs_3}
    end
end,
{I_6, Idx, Res_8, Value, Xs_3} = Fun_5(I_5, Idx, Res_5, Value, Xs_3),
        Res_8
    catch {return, Ret} -> Ret end.

next_greatest_element(Xs_4) ->
    try
        Res_9 = [],
        K = 0,
        Fun_6 = fun Fun_6_loop(K, Res_9, Xs_4) ->
    case (K < erlang:length(Xs_4)) of
        true ->
            Res_10 = lists:append((case Res_9 of nil -> []; _ -> Res_9 end), [-1]),
            K_2 = (K + 1),
            Fun_6_loop(K_2, Res_10, Xs_4);
        _ -> {K, Res_9, Xs_4}
    end
end,
{K_2, Res_10, Xs_4} = Fun_6(K, Res_9, Xs_4),
        Stack = [],
        I_7 = 0,
        Fun_8 = fun Fun_8_loop(I_7, K_2, Res_10, Stack, Xs_4) ->
    case (I_7 < erlang:length(Xs_4)) of
        true ->
            Fun_7 = fun Fun_7_loop(I_7, K_2, Res_10, Stack, Xs_4) ->
    case ((erlang:length(Stack) > 0) andalso ((case erlang:is_map(Xs_4) of true -> maps:get(I_7, Xs_4, nil); _ -> lists:nth(I_7 + 1, Xs_4) end) > (case erlang:is_map(Xs_4) of true -> maps:get((case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> lists:nth((erlang:length(Stack) - 1) + 1, Stack) end), Xs_4, nil); _ -> lists:nth((case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> lists:nth((erlang:length(Stack) - 1) + 1, Stack) end) + 1, Xs_4) end))) of
        true ->
            Idx_2 = (case erlang:is_map(Stack) of true -> maps:get((erlang:length(Stack) - 1), Stack, nil); _ -> lists:nth((erlang:length(Stack) - 1) + 1, Stack) end),
            Stack_2 = lists:sublist(Stack, 0 + 1, ((erlang:length(Stack) - 1) - 0)),
            Res_11 = set_at_float(Res_10, Idx_2, (case erlang:is_map(Xs_4) of true -> maps:get(I_7, Xs_4, nil); _ -> lists:nth(I_7 + 1, Xs_4) end)),
            Fun_7_loop(I_7, K_2, Res_11, Stack_2, Xs_4);
        _ -> {I_7, K_2, Res_10, Stack, Xs_4}
    end
end,
{I_7, K_2, Res_11, Stack_2, Xs_4} = Fun_7(I_7, K_2, Res_10, Stack, Xs_4),
            Stack_3 = lists:append((case Stack_2 of nil -> []; _ -> Stack_2 end), [I_7]),
            I_8 = (I_7 + 1),
            Fun_8_loop(I_8, K_2, Res_11, Stack_3, Xs_4);
        _ -> {I_7, K_2, Res_10, Stack, Xs_4}
    end
end,
{I_8, K_2, Res_11, Stack_3, Xs_4} = Fun_8(I_7, K_2, Res_10, Stack, Xs_4),
        Res_11
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('arr', [-10, -5, 0, 5, 5.1, 11, 13, 21, 3, 4, -21, -10, -5, -1, 0]),
    erlang:put('expected', [-5, 0, 5, 5.1, 11, 13, 21, -1, 4, -1, -10, -5, -1, 0, -1]),
    io:format("~ts~n", [mochi_str(next_greatest_element_slow(erlang:get('arr')))]),
    io:format("~ts~n", [mochi_str(next_greatest_element_fast(erlang:get('arr')))]),
    io:format("~ts~n", [mochi_str(next_greatest_element(erlang:get('arr')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
