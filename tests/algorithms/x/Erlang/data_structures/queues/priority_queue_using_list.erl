#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, panic/1, fpq_new/0, fpq_enqueue/3, fpq_dequeue/1, fpq_to_string/1, epq_new/0, epq_enqueue/2, epq_dequeue/1, epq_to_string/1, fixed_priority_queue/0, element_priority_queue/0, main/0]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

panic(Msg) ->
    try
        io:format("~s~n", [mochi_format(Msg)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

fpq_new() ->
    try
        #{"queues" => [[], [], []]}
    catch {return, RetCatch} -> RetCatch end.

fpq_enqueue(Fpq, Priority, Data) ->
    try
        case ((Priority < 0) orelse (Priority >= erlang:length(maps:get("queues", Fpq, nil)))) of
        true -> erlang:error({panic, "Valid priorities are 0, 1, and 2"}),
            throw({return, Fpq});
        _ -> ok
    end,
        case (erlang:length((case erlang:is_map(maps:get("queues", Fpq, nil)) of true -> maps:get(Priority, maps:get("queues", Fpq, nil), nil); _ -> case Priority < 0 of true -> mochi_nth(erlang:length(maps:get("queues", Fpq, nil)) + Priority + 1, maps:get("queues", Fpq, nil)); _ -> mochi_nth(Priority + 1, maps:get("queues", Fpq, nil)) end end)) >= 100) of
        true -> erlang:error({panic, "Maximum queue size is 100"}),
            throw({return, Fpq});
        _ -> ok
    end,
        Qs = maps:get("queues", Fpq, nil),
        Qs_2 = lists:sublist(Qs, Priority) ++ [lists:append((case (case erlang:is_map(Qs) of true -> maps:get(Priority, Qs, nil); _ -> case Priority < 0 of true -> mochi_nth(erlang:length(Qs) + Priority + 1, Qs); _ -> mochi_nth(Priority + 1, Qs) end end) of nil -> []; _ -> (case erlang:is_map(Qs) of true -> maps:get(Priority, Qs, nil); _ -> case Priority < 0 of true -> mochi_nth(erlang:length(Qs) + Priority + 1, Qs); _ -> mochi_nth(Priority + 1, Qs) end end) end), [Data])] ++ lists:nthtail(Priority + 1, Qs),
        Fpq_2 = maps:put("queues", Qs_2, Fpq),
        Fpq_2
    catch {return, RetCatch} -> RetCatch end.

fpq_dequeue(Fpq_3) ->
    try
        Qs_3 = maps:get("queues", Fpq_3, nil),
        I = 0,
        Fun_3 = fun Fun_3_loop(Fpq_3, I, Qs_3) ->
    case (I < erlang:length(Qs_3)) of
        true ->
            Q = (case erlang:is_map(Qs_3) of true -> maps:get(I, Qs_3, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Qs_3) + I + 1, Qs_3); _ -> mochi_nth(I + 1, Qs_3) end end),
            Val_2 = (case (erlang:length(Q) > 0) of
        true -> Val = (case erlang:is_map(Q) of true -> maps:get(0, Q, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Q) + 0 + 1, Q); _ -> mochi_nth(0 + 1, Q) end end),
            New_q = [],
            J = 1,
            Fun = fun Fun_loop(Fpq_3, I, J, New_q, Q, Qs_3, Val) ->
    case (J < erlang:length(Q)) of
        true ->
            New_q_2 = lists:append((case New_q of nil -> []; _ -> New_q end), [(case erlang:is_map(Q) of true -> maps:get(J, Q, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Q) + J + 1, Q); _ -> mochi_nth(J + 1, Q) end end)]),
            J_2 = (J + 1),
            Fun_loop(Fpq_3, I, J_2, New_q_2, Q, Qs_3, Val);
        _ -> {Fpq_3, I, J, New_q, Q, Qs_3, Val}
    end
end,
{Fpq_3, I, J_2, New_q_2, Q, Qs_3, Val} = Fun(Fpq_3, I, J, New_q, Q, Qs_3, Val),
            Qs_4 = lists:sublist(Qs_3, I) ++ [New_q_2] ++ lists:nthtail(I + 1, Qs_3),
            Fpq_4 = maps:put("queues", Qs_4, Fpq_3),
            throw({return, #{"queue" => Fpq_4, "value" => Val}}),
            Fpq_5 = Fpq_4,
            Fun_2 = Fun,
            J_3 = J_2,
            New_q_3 = New_q_2,
            Qs_5 = Qs_4,
            Val;
        _ -> Fpq_5 = Fpq_3,
            Fun_2 = nil,
            J_3 = nil,
            New_q_3 = nil,
            Qs_5 = Qs_3,
            nil
    end),
            I_2 = (I + 1),
            Fun_3_loop(Fpq_5, I_2, Qs_5);
        _ -> {Fpq_3, I, Qs_3}
    end
end,
{Fpq_5, I_2, Qs_5} = Fun_3(Fpq_3, I, Qs_3),
        erlang:error({panic, "All queues are empty"}),
        #{"queue" => Fpq_5, "value" => 0}
    catch {return, RetCatch} -> RetCatch end.

fpq_to_string(Fpq_6) ->
    try
        Lines = [],
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(Fpq_6, I_3, Lines) ->
    case (I_3 < erlang:length(maps:get("queues", Fpq_6, nil))) of
        true ->
            Q_str = "[",
            Q_2 = (case erlang:is_map(maps:get("queues", Fpq_6, nil)) of true -> maps:get(I_3, maps:get("queues", Fpq_6, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("queues", Fpq_6, nil)) + I_3 + 1, maps:get("queues", Fpq_6, nil)); _ -> mochi_nth(I_3 + 1, maps:get("queues", Fpq_6, nil)) end end),
            J_4 = 0,
            Fun_4 = fun Fun_4_loop(Fpq_6, I_3, J_4, Lines, Q_2, Q_str) ->
    case (J_4 < erlang:length(Q_2)) of
        true ->
            Q_str_3 = (case (J_4 > 0) of
        true -> Q_str_2 = (Q_str ++ ", "),
            Q_str_2;
        _ -> Q_str
    end),
            Q_str_4 = (Q_str_3 ++ mochi_str((case erlang:is_map(Q_2) of true -> maps:get(J_4, Q_2, nil); _ -> case J_4 < 0 of true -> mochi_nth(erlang:length(Q_2) + J_4 + 1, Q_2); _ -> mochi_nth(J_4 + 1, Q_2) end end))),
            J_5 = (J_4 + 1),
            Fun_4_loop(Fpq_6, I_3, J_5, Lines, Q_2, Q_str_4);
        _ -> {Fpq_6, I_3, J_4, Lines, Q_2, Q_str}
    end
end,
{Fpq_6, I_3, J_5, Lines, Q_2, Q_str_4} = Fun_4(Fpq_6, I_3, J_4, Lines, Q_2, Q_str),
            Q_str_5 = (Q_str_4 ++ "]"),
            Lines_2 = lists:append((case Lines of nil -> []; _ -> Lines end), [((("Priority " ++ mochi_str(I_3)) ++ ": ") ++ Q_str_5)]),
            I_4 = (I_3 + 1),
            Fun_5_loop(Fpq_6, I_4, Lines_2);
        _ -> {Fpq_6, I_3, Lines}
    end
end,
{Fpq_6, I_4, Lines_2} = Fun_5(Fpq_6, I_3, Lines),
        Res = "",
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(Fpq_6, I_5, Lines_2, Res) ->
    case (I_5 < erlang:length(Lines_2)) of
        true ->
            Res_3 = (case (I_5 > 0) of
        true -> Res_2 = (Res ++ "\n"),
            Res_2;
        _ -> Res
    end),
            Res_4 = (Res_3 ++ (case erlang:is_map(Lines_2) of true -> maps:get(I_5, Lines_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Lines_2) + I_5 + 1, Lines_2); _ -> mochi_nth(I_5 + 1, Lines_2) end end)),
            I_6 = (I_5 + 1),
            Fun_6_loop(Fpq_6, I_6, Lines_2, Res_4);
        _ -> {Fpq_6, I_5, Lines_2, Res}
    end
end,
{Fpq_6, I_6, Lines_2, Res_4} = Fun_6(Fpq_6, I_5, Lines_2, Res),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

epq_new() ->
    try
        #{"queue" => []}
    catch {return, RetCatch} -> RetCatch end.

epq_enqueue(Epq, Data_2) ->
    try
        case (erlang:length(maps:get("queue", Epq, nil)) >= 100) of
        true -> erlang:error({panic, "Maximum queue size is 100"}),
            throw({return, Epq});
        _ -> ok
    end,
        Epq_2 = maps:put("queue", lists:append((case maps:get("queue", Epq, nil) of nil -> []; _ -> maps:get("queue", Epq, nil) end), [Data_2]), Epq),
        Epq_2
    catch {return, RetCatch} -> RetCatch end.

epq_dequeue(Epq_3) ->
    try
        case (erlang:length(maps:get("queue", Epq_3, nil)) == 0) of
        true -> erlang:error({panic, "The queue is empty"}),
            throw({return, #{"queue" => Epq_3, "value" => 0}});
        _ -> ok
    end,
        Min_val = (case erlang:is_map(maps:get("queue", Epq_3, nil)) of true -> maps:get(0, maps:get("queue", Epq_3, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("queue", Epq_3, nil)) + 0 + 1, maps:get("queue", Epq_3, nil)); _ -> mochi_nth(0 + 1, maps:get("queue", Epq_3, nil)) end end),
        Idx = 0,
        I_7 = 1,
        Fun_7 = fun Fun_7_loop(Epq_3, I_7, Idx, Min_val) ->
    case (I_7 < erlang:length(maps:get("queue", Epq_3, nil))) of
        true ->
            V = (case erlang:is_map(maps:get("queue", Epq_3, nil)) of true -> maps:get(I_7, maps:get("queue", Epq_3, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("queue", Epq_3, nil)) + I_7 + 1, maps:get("queue", Epq_3, nil)); _ -> mochi_nth(I_7 + 1, maps:get("queue", Epq_3, nil)) end end),
            Min_val_3 = (case (V < Min_val) of
        true -> Min_val_2 = V,
            Idx_2 = I_7,
            Idx_3 = Idx_2,
            Min_val_2;
        _ -> Idx_3 = Idx,
            Min_val
    end),
            I_8 = (I_7 + 1),
            Fun_7_loop(Epq_3, I_8, Idx_3, Min_val_3);
        _ -> {Epq_3, I_7, Idx, Min_val}
    end
end,
{Epq_3, I_8, Idx_3, Min_val_3} = Fun_7(Epq_3, I_7, Idx, Min_val),
        New_q_4 = [],
        I_9 = 0,
        Fun_8 = fun Fun_8_loop(Epq_3, I_9, Idx_3, Min_val_3, New_q_4) ->
    case (I_9 < erlang:length(maps:get("queue", Epq_3, nil))) of
        true ->
            New_q_6 = (case (I_9 /= Idx_3) of
        true -> New_q_5 = lists:append((case New_q_4 of nil -> []; _ -> New_q_4 end), [(case erlang:is_map(maps:get("queue", Epq_3, nil)) of true -> maps:get(I_9, maps:get("queue", Epq_3, nil), nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(maps:get("queue", Epq_3, nil)) + I_9 + 1, maps:get("queue", Epq_3, nil)); _ -> mochi_nth(I_9 + 1, maps:get("queue", Epq_3, nil)) end end)]),
            New_q_5;
        _ -> New_q_4
    end),
            I_10 = (I_9 + 1),
            Fun_8_loop(Epq_3, I_10, Idx_3, Min_val_3, New_q_6);
        _ -> {Epq_3, I_9, Idx_3, Min_val_3, New_q_4}
    end
end,
{Epq_3, I_10, Idx_3, Min_val_3, New_q_6} = Fun_8(Epq_3, I_9, Idx_3, Min_val_3, New_q_4),
        Epq_4 = maps:put("queue", New_q_6, Epq_3),
        #{"queue" => Epq_4, "value" => Min_val_3}
    catch {return, RetCatch} -> RetCatch end.

epq_to_string(Epq_5) ->
    try
        mochi_str(maps:get("queue", Epq_5, nil))
    catch {return, RetCatch} -> RetCatch end.

fixed_priority_queue() ->
    try
        Fpq_7 = fpq_new(),
        Fpq_8 = fpq_enqueue(Fpq_7, 0, 10),
        Fpq_9 = fpq_enqueue(Fpq_8, 1, 70),
        Fpq_10 = fpq_enqueue(Fpq_9, 0, 100),
        Fpq_11 = fpq_enqueue(Fpq_10, 2, 1),
        Fpq_12 = fpq_enqueue(Fpq_11, 2, 5),
        Fpq_13 = fpq_enqueue(Fpq_12, 1, 7),
        Fpq_14 = fpq_enqueue(Fpq_13, 2, 4),
        Fpq_15 = fpq_enqueue(Fpq_14, 1, 64),
        Fpq_16 = fpq_enqueue(Fpq_15, 0, 128),
        io:format("~s~n", [mochi_format(fpq_to_string(Fpq_16))]),
        Res_5 = fpq_dequeue(Fpq_16),
        Fpq_17 = maps:get("queue", Res_5, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_5, nil))]),
        Res_6 = fpq_dequeue(Fpq_17),
        Fpq_18 = maps:get("queue", Res_6, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_6, nil))]),
        Res_7 = fpq_dequeue(Fpq_18),
        Fpq_19 = maps:get("queue", Res_7, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_7, nil))]),
        Res_8 = fpq_dequeue(Fpq_19),
        Fpq_20 = maps:get("queue", Res_8, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_8, nil))]),
        Res_9 = fpq_dequeue(Fpq_20),
        Fpq_21 = maps:get("queue", Res_9, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_9, nil))]),
        io:format("~s~n", [mochi_format(fpq_to_string(Fpq_21))]),
        Res_10 = fpq_dequeue(Fpq_21),
        Fpq_22 = maps:get("queue", Res_10, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_10, nil))]),
        Res_11 = fpq_dequeue(Fpq_22),
        Fpq_23 = maps:get("queue", Res_11, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_11, nil))]),
        Res_12 = fpq_dequeue(Fpq_23),
        Fpq_24 = maps:get("queue", Res_12, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_12, nil))]),
        Res_13 = fpq_dequeue(Fpq_24),
        Fpq_25 = maps:get("queue", Res_13, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_13, nil))]),
        Res_14 = fpq_dequeue(Fpq_25),
        Fpq_26 = maps:get("queue", Res_14, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_14, nil))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

element_priority_queue() ->
    try
        Epq_6 = epq_new(),
        Epq_7 = epq_enqueue(Epq_6, 10),
        Epq_8 = epq_enqueue(Epq_7, 70),
        Epq_9 = epq_enqueue(Epq_8, 100),
        Epq_10 = epq_enqueue(Epq_9, 1),
        Epq_11 = epq_enqueue(Epq_10, 5),
        Epq_12 = epq_enqueue(Epq_11, 7),
        Epq_13 = epq_enqueue(Epq_12, 4),
        Epq_14 = epq_enqueue(Epq_13, 64),
        Epq_15 = epq_enqueue(Epq_14, 128),
        io:format("~s~n", [mochi_format(epq_to_string(Epq_15))]),
        Res_15 = epq_dequeue(Epq_15),
        Epq_16 = maps:get("queue", Res_15, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_15, nil))]),
        Res_16 = epq_dequeue(Epq_16),
        Epq_17 = maps:get("queue", Res_16, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_16, nil))]),
        Res_17 = epq_dequeue(Epq_17),
        Epq_18 = maps:get("queue", Res_17, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_17, nil))]),
        Res_18 = epq_dequeue(Epq_18),
        Epq_19 = maps:get("queue", Res_18, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_18, nil))]),
        Res_19 = epq_dequeue(Epq_19),
        Epq_20 = maps:get("queue", Res_19, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_19, nil))]),
        io:format("~s~n", [mochi_format(epq_to_string(Epq_20))]),
        Res_20 = epq_dequeue(Epq_20),
        Epq_21 = maps:get("queue", Res_20, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_20, nil))]),
        Res_21 = epq_dequeue(Epq_21),
        Epq_22 = maps:get("queue", Res_21, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_21, nil))]),
        Res_22 = epq_dequeue(Epq_22),
        Epq_23 = maps:get("queue", Res_22, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_22, nil))]),
        Res_23 = epq_dequeue(Epq_23),
        Epq_24 = maps:get("queue", Res_23, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_23, nil))]),
        Res_24 = epq_dequeue(Epq_24),
        Epq_25 = maps:get("queue", Res_24, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_24, nil))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        fixed_priority_queue(),
        element_priority_queue(),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
