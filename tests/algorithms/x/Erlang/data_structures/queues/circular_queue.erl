#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, create_queue/1, length/1, is_empty/1, front/1, enqueue/2, dequeue/1, main/0]).

-compile({no_auto_import,[length/1]}).
% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

create_queue(Capacity) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, Capacity, I) ->
    case (I < Capacity) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [0]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, Capacity, I_2);
        _ -> {Arr, Capacity, I}
    end
end,
{Arr_2, Capacity, I_2} = Fun(Arr, Capacity, I),
        #{"data" => Arr_2, "front" => 0, "rear" => 0, "size" => 0, "capacity" => Capacity}
    catch {return, RetCatch} -> RetCatch end.

length(Q) ->
    try
        maps:get("size", Q, nil)
    catch {return, RetCatch} -> RetCatch end.

is_empty(Q_2) ->
    try
        (maps:get("size", Q_2, nil) == 0)
    catch {return, RetCatch} -> RetCatch end.

front(Q_3) ->
    try
        (case is_empty(Q_3) of
    true -> 0;
    _ -> (case erlang:is_map(maps:get("data", Q_3, nil)) of true -> maps:get(maps:get("front", Q_3, nil), maps:get("data", Q_3, nil), nil); _ -> case maps:get("front", Q_3, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("data", Q_3, nil)) + maps:get("front", Q_3, nil) + 1, maps:get("data", Q_3, nil)); _ -> mochi_nth(maps:get("front", Q_3, nil) + 1, maps:get("data", Q_3, nil)) end end)
end)
    catch {return, RetCatch} -> RetCatch end.

enqueue(Q_4, Value) ->
    try
        case (maps:get("size", Q_4, nil) >= maps:get("capacity", Q_4, nil)) of
        true -> erlang:error({panic, "QUEUE IS FULL"});
        _ -> ok
    end,
        Arr_3 = maps:get("data", Q_4, nil),
        Arr_4 = lists:sublist(Arr_3, maps:get("rear", Q_4, nil)) ++ [Value] ++ lists:nthtail(maps:get("rear", Q_4, nil) + 1, Arr_3),
        Q_5 = maps:put("data", Arr_4, Q_4),
        Q_6 = maps:put("rear", mochi_mod((maps:get("rear", Q_5, nil) + 1), maps:get("capacity", Q_5, nil)), Q_5),
        Q_7 = maps:put("size", (maps:get("size", Q_6, nil) + 1), Q_6),
        Q_7
    catch {return, RetCatch} -> RetCatch end.

dequeue(Q_8) ->
    try
        case (maps:get("size", Q_8, nil) == 0) of
        true -> erlang:error({panic, "UNDERFLOW"});
        _ -> ok
    end,
        Value_2 = (case erlang:is_map(maps:get("data", Q_8, nil)) of true -> maps:get(maps:get("front", Q_8, nil), maps:get("data", Q_8, nil), nil); _ -> case maps:get("front", Q_8, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("data", Q_8, nil)) + maps:get("front", Q_8, nil) + 1, maps:get("data", Q_8, nil)); _ -> mochi_nth(maps:get("front", Q_8, nil) + 1, maps:get("data", Q_8, nil)) end end),
        Arr2 = maps:get("data", Q_8, nil),
        Arr2_2 = lists:sublist(Arr2, maps:get("front", Q_8, nil)) ++ [0] ++ lists:nthtail(maps:get("front", Q_8, nil) + 1, Arr2),
        Q_9 = maps:put("data", Arr2_2, Q_8),
        Q_10 = maps:put("front", mochi_mod((maps:get("front", Q_9, nil) + 1), maps:get("capacity", Q_9, nil)), Q_9),
        Q_11 = maps:put("size", (maps:get("size", Q_10, nil) - 1), Q_10),
        #{"queue" => Q_11, "value" => Value_2}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Q_12 = create_queue(5),
        io:format("~s~n", [mochi_format(is_empty(Q_12))]),
        Q_13 = enqueue(Q_12, 10),
        io:format("~s~n", [mochi_format(is_empty(Q_13))]),
        Q_14 = enqueue(Q_13, 20),
        Q_15 = enqueue(Q_14, 30),
        io:format("~s~n", [mochi_format(front(Q_15))]),
        R = dequeue(Q_15),
        Q_16 = maps:get("queue", R, nil),
        io:format("~s~n", [mochi_format(maps:get("value", R, nil))]),
        io:format("~s~n", [mochi_format(front(Q_16))]),
        io:format("~s~n", [mochi_format(length(Q_16))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
