#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, empty_queue/0, put/2, drop_first/1, drop_last/1, rotate/2, get/1, front/1, size/1, to_string/1, main/0]).

-compile({no_auto_import,[put/2,get/1,size/1]}).
% Generated by Mochi transpiler v0.10.59 (e561788721) on 2025-08-07 08:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

empty_queue() ->
    try
        #{"stack" => [], "length" => 0}
    catch {return, Ret} -> Ret end.

put(Q, Item) ->
    try
        S = lists:append((case maps:get("stack", Q, nil) of nil -> []; _ -> maps:get("stack", Q, nil) end), [Item]),
        #{"stack" => S, "length" => (maps:get("length", Q, nil) + 1)}
    catch {return, Ret} -> Ret end.

drop_first(Xs) ->
    try
        Res = [],
        I = 1,
        Fun = fun Fun_loop(I, Res, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> lists:nth(I + 1, Xs) end)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Res_2, Xs);
        _ -> {I, Res, Xs}
    end
end,
{I_2, Res_2, Xs} = Fun(I, Res, Xs),
        Res_2
    catch {return, Ret} -> Ret end.

drop_last(Xs_2) ->
    try
        Res_3 = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Res_3, Xs_2) ->
    case (I_3 < (erlang:length(Xs_2) - 1)) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [(case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> lists:nth(I_3 + 1, Xs_2) end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Res_4, Xs_2);
        _ -> {I_3, Res_3, Xs_2}
    end
end,
{I_4, Res_4, Xs_2} = Fun_2(I_3, Res_3, Xs_2),
        Res_4
    catch {return, Ret} -> Ret end.

rotate(Q_2, Rotation) ->
    try
        S_2 = maps:get("stack", Q_2, nil),
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Q_2, Rotation, S_2) ->
    case ((I_5 < Rotation) andalso (erlang:length(S_2) > 0)) of
        true ->
            Temp = (case erlang:is_map(S_2) of true -> maps:get(0, S_2, nil); _ -> lists:nth(0 + 1, S_2) end),
            S_3 = drop_first(S_2),
            S_4 = lists:append((case S_3 of nil -> []; _ -> S_3 end), [Temp]),
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Q_2, Rotation, S_4);
        _ -> {I_5, Q_2, Rotation, S_2}
    end
end,
{I_6, Q_2, Rotation, S_4} = Fun_3(I_5, Q_2, Rotation, S_2),
        #{"stack" => S_4, "length" => maps:get("length", Q_2, nil)}
    catch {return, Ret} -> Ret end.

get(Q_3) ->
    try
        case (maps:get("length", Q_3, nil) == 0) of
        true -> erlang:error("queue empty");
        _ -> ok
    end,
        Q1 = rotate(Q_3, 1),
        V = (case erlang:is_map(maps:get("stack", Q1, nil)) of true -> maps:get((maps:get("length", Q1, nil) - 1), maps:get("stack", Q1, nil), nil); _ -> lists:nth((maps:get("length", Q1, nil) - 1) + 1, maps:get("stack", Q1, nil)) end),
        S_5 = drop_last(maps:get("stack", Q1, nil)),
        Q2 = #{"stack" => S_5, "length" => maps:get("length", Q1, nil)},
        Q2_2 = rotate(Q2, (maps:get("length", Q2, nil) - 1)),
        Q2_3 = #{"stack" => maps:get("stack", Q2_2, nil), "length" => (maps:get("length", Q2_2, nil) - 1)},
        #{"queue" => Q2_3, "value" => V}
    catch {return, Ret} -> Ret end.

front(Q_4) ->
    try
        R = get(Q_4),
        Q2_4 = put(maps:get("queue", R, nil), maps:get("value", R, nil)),
        Q2_5 = rotate(Q2_4, (maps:get("length", Q2_4, nil) - 1)),
        #{"queue" => Q2_5, "value" => maps:get("value", R, nil)}
    catch {return, Ret} -> Ret end.

size(Q_5) ->
    try
        maps:get("length", Q_5, nil)
    catch {return, Ret} -> Ret end.

to_string(Q_6) ->
    try
        S_6 = "<",
        case (maps:get("length", Q_6, nil) > 0) of
        true -> S_7 = (S_6 ++ mochi_str((case erlang:is_map(maps:get("stack", Q_6, nil)) of true -> maps:get(0, maps:get("stack", Q_6, nil), nil); _ -> lists:nth(0 + 1, maps:get("stack", Q_6, nil)) end))),
            I_7 = 1,
            Fun_4 = fun Fun_4_loop(I_7, Q_6, S_7) ->
    case (I_7 < maps:get("length", Q_6, nil)) of
        true ->
            S_8 = ((S_7 ++ ", ") ++ mochi_str((case erlang:is_map(maps:get("stack", Q_6, nil)) of true -> maps:get(I_7, maps:get("stack", Q_6, nil), nil); _ -> lists:nth(I_7 + 1, maps:get("stack", Q_6, nil)) end))),
            I_8 = (I_7 + 1),
            Fun_4_loop(I_8, Q_6, S_8);
        _ -> {I_7, Q_6, S_7}
    end
end,
{I_8, Q_6, S_8} = Fun_4(I_7, Q_6, S_7),
            Fun_5 = Fun_4,
            I_9 = I_8,
            S_9 = S_8;
        _ -> Fun_5 = nil,
            I_9 = nil,
            S_9 = S_6
    end,
        S_10 = (S_9 ++ ">"),
        S_10
    catch {return, Ret} -> Ret end.

main() ->
    try
        Q_7 = empty_queue(),
        Q_8 = put(Q_7, 1),
        Q_9 = put(Q_8, 2),
        Q_10 = put(Q_9, 3),
        io:format("~ts~n", [mochi_repr(to_string(Q_10))]),
        G = get(Q_10),
        Q_11 = maps:get("queue", G, nil),
        io:format("~ts~n", [mochi_repr(maps:get("value", G, nil))]),
        io:format("~ts~n", [mochi_repr(to_string(Q_11))]),
        F = front(Q_11),
        Q_12 = maps:get("queue", F, nil),
        io:format("~ts~n", [mochi_repr(maps:get("value", F, nil))]),
        io:format("~ts~n", [mochi_repr(to_string(Q_12))]),
        io:format("~ts~n", [mochi_repr(size(Q_12))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
