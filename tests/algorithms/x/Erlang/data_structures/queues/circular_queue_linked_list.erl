#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, create_queue/1, is_empty/1, check_can_perform/1, check_is_full/1, peek/1, enqueue/2, dequeue/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (e561788721) on 2025-08-07 08:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

create_queue(Capacity) ->
    try
        Data = [],
        Next = [],
        Prev = [],
        I = 0,
        Fun = fun Fun_loop(Capacity, Data, I, Next, Prev) ->
    case (I < Capacity) of
        true ->
            Data_2 = lists:append((case Data of nil -> []; _ -> Data end), [""]),
            Next_2 = lists:append((case Next of nil -> []; _ -> Next end), [mochi_mod((I + 1), Capacity)]),
            Prev_2 = lists:append((case Prev of nil -> []; _ -> Prev end), [mochi_mod(((I - 1) + Capacity), Capacity)]),
            I_2 = (I + 1),
            Fun_loop(Capacity, Data_2, I_2, Next_2, Prev_2);
        _ -> {Capacity, Data, I, Next, Prev}
    end
end,
{Capacity, Data_2, I_2, Next_2, Prev_2} = Fun(Capacity, Data, I, Next, Prev),
        #{"data" => Data_2, "next" => Next_2, "prev" => Prev_2, "front" => 0, "rear" => 0}
    catch {return, Ret} -> Ret end.

is_empty(Q) ->
    try
        ((maps:get("front", Q, nil) == maps:get("rear", Q, nil)) andalso ((case erlang:is_map(maps:get("data", Q, nil)) of true -> maps:get(maps:get("front", Q, nil), maps:get("data", Q, nil), nil); _ -> lists:nth(maps:get("front", Q, nil) + 1, maps:get("data", Q, nil)) end) == ""))
    catch {return, Ret} -> Ret end.

check_can_perform(Q_2) ->
    try
        case is_empty(Q_2) of
        true -> erlang:error("Empty Queue");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

check_is_full(Q_3) ->
    try
        case ((case erlang:is_map(maps:get("next", Q_3, nil)) of true -> maps:get(maps:get("rear", Q_3, nil), maps:get("next", Q_3, nil), nil); _ -> lists:nth(maps:get("rear", Q_3, nil) + 1, maps:get("next", Q_3, nil)) end) == maps:get("front", Q_3, nil)) of
        true -> erlang:error("Full Queue");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

peek(Q_4) ->
    try
        check_can_perform(Q_4),
        (case erlang:is_map(maps:get("data", Q_4, nil)) of true -> maps:get(maps:get("front", Q_4, nil), maps:get("data", Q_4, nil), nil); _ -> lists:nth(maps:get("front", Q_4, nil) + 1, maps:get("data", Q_4, nil)) end)
    catch {return, Ret} -> Ret end.

enqueue(Q_5, Value) ->
    try
        check_is_full(Q_5),
        case mochi_not(is_empty(Q_5)) of
        true -> Q_6 = maps:put("rear", (case erlang:is_map(maps:get("next", Q_5, nil)) of true -> maps:get(maps:get("rear", Q_5, nil), maps:get("next", Q_5, nil), nil); _ -> lists:nth(maps:get("rear", Q_5, nil) + 1, maps:get("next", Q_5, nil)) end), Q_5),
            Q_7 = Q_6;
        _ -> Q_7 = Q_5
    end,
        Data_3 = maps:get("data", Q_7, nil),
        Data_4 = lists:sublist(Data_3, maps:get("rear", Q_7, nil)) ++ [Value] ++ lists:nthtail(maps:get("rear", Q_7, nil) + 1, Data_3),
        Q_8 = maps:put("data", Data_4, Q_7),
        Q_8
    catch {return, Ret} -> Ret end.

dequeue(Q_9) ->
    try
        check_can_perform(Q_9),
        Data_5 = maps:get("data", Q_9, nil),
        Val = (case erlang:is_map(Data_5) of true -> maps:get(maps:get("front", Q_9, nil), Data_5, nil); _ -> lists:nth(maps:get("front", Q_9, nil) + 1, Data_5) end),
        Data_6 = lists:sublist(Data_5, maps:get("front", Q_9, nil)) ++ [""] ++ lists:nthtail(maps:get("front", Q_9, nil) + 1, Data_5),
        Q_10 = maps:put("data", Data_6, Q_9),
        case (maps:get("front", Q_10, nil) /= maps:get("rear", Q_10, nil)) of
        true -> Q_11 = maps:put("front", (case erlang:is_map(maps:get("next", Q_10, nil)) of true -> maps:get(maps:get("front", Q_10, nil), maps:get("next", Q_10, nil), nil); _ -> lists:nth(maps:get("front", Q_10, nil) + 1, maps:get("next", Q_10, nil)) end), Q_10),
            Q_12 = Q_11;
        _ -> Q_12 = Q_10
    end,
        #{"queue" => Q_12, "value" => Val}
    catch {return, Ret} -> Ret end.

main() ->
    try
        Q_13 = create_queue(3),
        io:format("~ts~n", [mochi_str(is_empty(Q_13))]),
        Q_14 = enqueue(Q_13, "a"),
        Q_15 = enqueue(Q_14, "b"),
        io:format("~ts~n", [mochi_repr(peek(Q_15))]),
        Res = dequeue(Q_15),
        Q_16 = maps:get("queue", Res, nil),
        io:format("~ts~n", [mochi_repr(maps:get("value", Res, nil))]),
        Res_2 = dequeue(Q_16),
        Q_17 = maps:get("queue", Res_2, nil),
        io:format("~ts~n", [mochi_repr(maps:get("value", Res_2, nil))]),
        io:format("~ts~n", [mochi_str(is_empty(Q_17))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
