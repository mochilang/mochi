#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, create_queue/1, is_empty/1, check_can_perform/1, check_is_full/1, peek/1, enqueue/2, dequeue/1, main/0]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

create_queue(Capacity) ->
    try
        Data = [],
        Next = [],
        Prev = [],
        I = 0,
        Fun = fun Fun_loop(Capacity, Data, I, Next, Prev) ->
    case (I < Capacity) of
        true ->
            Data_2 = lists:append((case Data of nil -> []; _ -> Data end), [""]),
            Next_2 = lists:append((case Next of nil -> []; _ -> Next end), [mochi_mod((I + 1), Capacity)]),
            Prev_2 = lists:append((case Prev of nil -> []; _ -> Prev end), [mochi_mod(((I - 1) + Capacity), Capacity)]),
            I_2 = (I + 1),
            Fun_loop(Capacity, Data_2, I_2, Next_2, Prev_2);
        _ -> {Capacity, Data, I, Next, Prev}
    end
end,
{Capacity, Data_2, I_2, Next_2, Prev_2} = Fun(Capacity, Data, I, Next, Prev),
        #{"data" => Data_2, "next" => Next_2, "prev" => Prev_2, "front" => 0, "rear" => 0}
    catch {return, RetCatch} -> RetCatch end.

is_empty(Q) ->
    try
        ((maps:get("front", Q, nil) == maps:get("rear", Q, nil)) andalso ((case erlang:is_map(maps:get("data", Q, nil)) of true -> maps:get(maps:get("front", Q, nil), maps:get("data", Q, nil), nil); _ -> case maps:get("front", Q, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("data", Q, nil)) + maps:get("front", Q, nil) + 1, maps:get("data", Q, nil)); _ -> mochi_nth(maps:get("front", Q, nil) + 1, maps:get("data", Q, nil)) end end) == ""))
    catch {return, RetCatch} -> RetCatch end.

check_can_perform(Q_2) ->
    try
        case is_empty(Q_2) of
        true -> erlang:error({panic, "Empty Queue"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

check_is_full(Q_3) ->
    try
        case ((case erlang:is_map(maps:get("next", Q_3, nil)) of true -> maps:get(maps:get("rear", Q_3, nil), maps:get("next", Q_3, nil), nil); _ -> case maps:get("rear", Q_3, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("next", Q_3, nil)) + maps:get("rear", Q_3, nil) + 1, maps:get("next", Q_3, nil)); _ -> mochi_nth(maps:get("rear", Q_3, nil) + 1, maps:get("next", Q_3, nil)) end end) == maps:get("front", Q_3, nil)) of
        true -> erlang:error({panic, "Full Queue"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

peek(Q_4) ->
    try
        check_can_perform(Q_4),
        (case erlang:is_map(maps:get("data", Q_4, nil)) of true -> maps:get(maps:get("front", Q_4, nil), maps:get("data", Q_4, nil), nil); _ -> case maps:get("front", Q_4, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("data", Q_4, nil)) + maps:get("front", Q_4, nil) + 1, maps:get("data", Q_4, nil)); _ -> mochi_nth(maps:get("front", Q_4, nil) + 1, maps:get("data", Q_4, nil)) end end)
    catch {return, RetCatch} -> RetCatch end.

enqueue(Q_5, Value) ->
    try
        check_is_full(Q_5),
        Q_7 = (case mochi_not(is_empty(Q_5)) of
        true -> Q_6 = maps:put("rear", (case erlang:is_map(maps:get("next", Q_5, nil)) of true -> maps:get(maps:get("rear", Q_5, nil), maps:get("next", Q_5, nil), nil); _ -> case maps:get("rear", Q_5, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("next", Q_5, nil)) + maps:get("rear", Q_5, nil) + 1, maps:get("next", Q_5, nil)); _ -> mochi_nth(maps:get("rear", Q_5, nil) + 1, maps:get("next", Q_5, nil)) end end), Q_5),
            Q_6;
        _ -> Q_5
    end),
        Data_3 = maps:get("data", Q_7, nil),
        Data_4 = lists:sublist(Data_3, maps:get("rear", Q_7, nil)) ++ [Value] ++ lists:nthtail(maps:get("rear", Q_7, nil) + 1, Data_3),
        Q_8 = maps:put("data", Data_4, Q_7),
        Q_8
    catch {return, RetCatch} -> RetCatch end.

dequeue(Q_9) ->
    try
        check_can_perform(Q_9),
        Data_5 = maps:get("data", Q_9, nil),
        Val = (case erlang:is_map(Data_5) of true -> maps:get(maps:get("front", Q_9, nil), Data_5, nil); _ -> case maps:get("front", Q_9, nil) < 0 of true -> mochi_nth(erlang:length(Data_5) + maps:get("front", Q_9, nil) + 1, Data_5); _ -> mochi_nth(maps:get("front", Q_9, nil) + 1, Data_5) end end),
        Data_6 = lists:sublist(Data_5, maps:get("front", Q_9, nil)) ++ [""] ++ lists:nthtail(maps:get("front", Q_9, nil) + 1, Data_5),
        Q_10 = maps:put("data", Data_6, Q_9),
        Q_12 = (case (maps:get("front", Q_10, nil) /= maps:get("rear", Q_10, nil)) of
        true -> Q_11 = maps:put("front", (case erlang:is_map(maps:get("next", Q_10, nil)) of true -> maps:get(maps:get("front", Q_10, nil), maps:get("next", Q_10, nil), nil); _ -> case maps:get("front", Q_10, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("next", Q_10, nil)) + maps:get("front", Q_10, nil) + 1, maps:get("next", Q_10, nil)); _ -> mochi_nth(maps:get("front", Q_10, nil) + 1, maps:get("next", Q_10, nil)) end end), Q_10),
            Q_11;
        _ -> Q_10
    end),
        #{"queue" => Q_12, "value" => Val}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Q_13 = create_queue(3),
        io:format("~s~n", [mochi_str(is_empty(Q_13))]),
        Q_14 = enqueue(Q_13, "a"),
        Q_15 = enqueue(Q_14, "b"),
        io:format("~s~n", [mochi_format(peek(Q_15))]),
        Res = dequeue(Q_15),
        Q_16 = maps:get("queue", Res, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res, nil))]),
        Res_2 = dequeue(Q_16),
        Q_17 = maps:get("queue", Res_2, nil),
        io:format("~s~n", [mochi_format(maps:get("value", Res_2, nil))]),
        io:format("~s~n", [mochi_str(is_empty(Q_17))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
