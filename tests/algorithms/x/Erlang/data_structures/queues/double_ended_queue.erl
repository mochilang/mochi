#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, empty_deque/0, push_back/2, push_front/2, extend_back/2, extend_front/2, pop_back/1, pop_front/1, is_empty/1, length/1, to_string/1, main/0]).

-compile({no_auto_import,[length/1]}).
% Generated by Mochi transpiler v0.10.59 (e561788721) on 2025-08-07 08:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

empty_deque() ->
    try
        #{"data" => []}
    catch {return, Ret} -> Ret end.

push_back(Dq, Value) ->
    try
        #{"data" => lists:append((case maps:get("data", Dq, nil) of nil -> []; _ -> maps:get("data", Dq, nil) end), [Value])}
    catch {return, Ret} -> Ret end.

push_front(Dq_2, Value_2) ->
    try
        Res = [Value_2],
        I = 0,
        Fun = fun Fun_loop(Dq_2, I, Res, Value_2) ->
    case (I < erlang:length(maps:get("data", Dq_2, nil))) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(maps:get("data", Dq_2, nil)) of true -> maps:get(I, maps:get("data", Dq_2, nil), nil); _ -> lists:nth(I + 1, maps:get("data", Dq_2, nil)) end)]),
            I_2 = (I + 1),
            Fun_loop(Dq_2, I_2, Res_2, Value_2);
        _ -> {Dq_2, I, Res, Value_2}
    end
end,
{Dq_2, I_2, Res_2, Value_2} = Fun(Dq_2, I, Res, Value_2),
        #{"data" => Res_2}
    catch {return, Ret} -> Ret end.

extend_back(Dq_3, Values) ->
    try
        Res_3 = maps:get("data", Dq_3, nil),
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Dq_3, I_3, Res_3, Values) ->
    case (I_3 < erlang:length(Values)) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [(case erlang:is_map(Values) of true -> maps:get(I_3, Values, nil); _ -> lists:nth(I_3 + 1, Values) end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Dq_3, I_4, Res_4, Values);
        _ -> {Dq_3, I_3, Res_3, Values}
    end
end,
{Dq_3, I_4, Res_4, Values} = Fun_2(Dq_3, I_3, Res_3, Values),
        #{"data" => Res_4}
    catch {return, Ret} -> Ret end.

extend_front(Dq_4, Values_2) ->
    try
        Res_5 = [],
        I_5 = (erlang:length(Values_2) - 1),
        Fun_3 = fun Fun_3_loop(Dq_4, I_5, Res_5, Values_2) ->
    case (I_5 >= 0) of
        true ->
            Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [(case erlang:is_map(Values_2) of true -> maps:get(I_5, Values_2, nil); _ -> lists:nth(I_5 + 1, Values_2) end)]),
            I_6 = (I_5 - 1),
            Fun_3_loop(Dq_4, I_6, Res_6, Values_2);
        _ -> {Dq_4, I_5, Res_5, Values_2}
    end
end,
{Dq_4, I_6, Res_6, Values_2} = Fun_3(Dq_4, I_5, Res_5, Values_2),
        J = 0,
        Fun_4 = fun Fun_4_loop(Dq_4, I_6, J, Res_6, Values_2) ->
    case (J < erlang:length(maps:get("data", Dq_4, nil))) of
        true ->
            Res_7 = lists:append((case Res_6 of nil -> []; _ -> Res_6 end), [(case erlang:is_map(maps:get("data", Dq_4, nil)) of true -> maps:get(J, maps:get("data", Dq_4, nil), nil); _ -> lists:nth(J + 1, maps:get("data", Dq_4, nil)) end)]),
            J_2 = (J + 1),
            Fun_4_loop(Dq_4, I_6, J_2, Res_7, Values_2);
        _ -> {Dq_4, I_6, J, Res_6, Values_2}
    end
end,
{Dq_4, I_6, J_2, Res_7, Values_2} = Fun_4(Dq_4, I_6, J, Res_6, Values_2),
        #{"data" => Res_7}
    catch {return, Ret} -> Ret end.

pop_back(Dq_5) ->
    try
        case (erlang:length(maps:get("data", Dq_5, nil)) == 0) of
        true -> erlang:error("pop from empty deque");
        _ -> ok
    end,
        Res_8 = [],
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(Dq_5, I_7, Res_8) ->
    case (I_7 < (erlang:length(maps:get("data", Dq_5, nil)) - 1)) of
        true ->
            Res_9 = lists:append((case Res_8 of nil -> []; _ -> Res_8 end), [(case erlang:is_map(maps:get("data", Dq_5, nil)) of true -> maps:get(I_7, maps:get("data", Dq_5, nil), nil); _ -> lists:nth(I_7 + 1, maps:get("data", Dq_5, nil)) end)]),
            I_8 = (I_7 + 1),
            Fun_5_loop(Dq_5, I_8, Res_9);
        _ -> {Dq_5, I_7, Res_8}
    end
end,
{Dq_5, I_8, Res_9} = Fun_5(Dq_5, I_7, Res_8),
        #{"deque" => #{"data" => Res_9}, "value" => (case erlang:is_map(maps:get("data", Dq_5, nil)) of true -> maps:get((erlang:length(maps:get("data", Dq_5, nil)) - 1), maps:get("data", Dq_5, nil), nil); _ -> lists:nth((erlang:length(maps:get("data", Dq_5, nil)) - 1) + 1, maps:get("data", Dq_5, nil)) end)}
    catch {return, Ret} -> Ret end.

pop_front(Dq_6) ->
    try
        case (erlang:length(maps:get("data", Dq_6, nil)) == 0) of
        true -> erlang:error("popleft from empty deque");
        _ -> ok
    end,
        Res_10 = [],
        I_9 = 1,
        Fun_6 = fun Fun_6_loop(Dq_6, I_9, Res_10) ->
    case (I_9 < erlang:length(maps:get("data", Dq_6, nil))) of
        true ->
            Res_11 = lists:append((case Res_10 of nil -> []; _ -> Res_10 end), [(case erlang:is_map(maps:get("data", Dq_6, nil)) of true -> maps:get(I_9, maps:get("data", Dq_6, nil), nil); _ -> lists:nth(I_9 + 1, maps:get("data", Dq_6, nil)) end)]),
            I_10 = (I_9 + 1),
            Fun_6_loop(Dq_6, I_10, Res_11);
        _ -> {Dq_6, I_9, Res_10}
    end
end,
{Dq_6, I_10, Res_11} = Fun_6(Dq_6, I_9, Res_10),
        #{"deque" => #{"data" => Res_11}, "value" => (case erlang:is_map(maps:get("data", Dq_6, nil)) of true -> maps:get(0, maps:get("data", Dq_6, nil), nil); _ -> lists:nth(0 + 1, maps:get("data", Dq_6, nil)) end)}
    catch {return, Ret} -> Ret end.

is_empty(Dq_7) ->
    try
        (erlang:length(maps:get("data", Dq_7, nil)) == 0)
    catch {return, Ret} -> Ret end.

length(Dq_8) ->
    try
        erlang:length(maps:get("data", Dq_8, nil))
    catch {return, Ret} -> Ret end.

to_string(Dq_9) ->
    try
        case (erlang:length(maps:get("data", Dq_9, nil)) == 0) of
        true -> throw({return, "[]"});
        _ -> ok
    end,
        S = ("[" ++ mochi_str((case erlang:is_map(maps:get("data", Dq_9, nil)) of true -> maps:get(0, maps:get("data", Dq_9, nil), nil); _ -> lists:nth(0 + 1, maps:get("data", Dq_9, nil)) end))),
        I_11 = 1,
        Fun_7 = fun Fun_7_loop(Dq_9, I_11, S) ->
    case (I_11 < erlang:length(maps:get("data", Dq_9, nil))) of
        true ->
            S_2 = ((S ++ ", ") ++ mochi_str((case erlang:is_map(maps:get("data", Dq_9, nil)) of true -> maps:get(I_11, maps:get("data", Dq_9, nil), nil); _ -> lists:nth(I_11 + 1, maps:get("data", Dq_9, nil)) end))),
            I_12 = (I_11 + 1),
            Fun_7_loop(Dq_9, I_12, S_2);
        _ -> {Dq_9, I_11, S}
    end
end,
{Dq_9, I_12, S_2} = Fun_7(Dq_9, I_11, S),
        (S_2 ++ "]")
    catch {return, Ret} -> Ret end.

main() ->
    try
        Dq_10 = empty_deque(),
        Dq_11 = push_back(Dq_10, 2),
        Dq_12 = push_front(Dq_11, 1),
        Dq_13 = extend_back(Dq_12, [3, 4]),
        Dq_14 = extend_front(Dq_13, [0]),
        io:format("~ts~n", [mochi_repr(to_string(Dq_14))]),
        R = pop_back(Dq_14),
        Dq_15 = maps:get("deque", R, nil),
        io:format("~ts~n", [mochi_repr(maps:get("value", R, nil))]),
        R_2 = pop_front(Dq_15),
        Dq_16 = maps:get("deque", R_2, nil),
        io:format("~ts~n", [mochi_repr(maps:get("value", R_2, nil))]),
        io:format("~ts~n", [mochi_repr(to_string(Dq_16))]),
        io:format("~ts~n", [mochi_repr(is_empty(empty_deque()))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
