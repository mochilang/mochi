#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, new_queue/1, len_queue/1, str_queue/1, put/2, get/1]).

-compile({no_auto_import,[put/2,get/1]}).
% Generated by Mochi transpiler v0.10.59 (e561788721) on 2025-08-07 08:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

new_queue(Items) ->
    try
        #{"stack1" => Items, "stack2" => []}
    catch {return, Ret} -> Ret end.

len_queue(Q) ->
    try
        (erlang:length(maps:get("stack1", Q, nil)) + erlang:length(maps:get("stack2", Q, nil)))
    catch {return, Ret} -> Ret end.

str_queue(Q_2) ->
    try
        Items_2 = [],
        I = (erlang:length(maps:get("stack2", Q_2, nil)) - 1),
        Fun = fun Fun_loop(I, Items_2, Q_2) ->
    case (I >= 0) of
        true ->
            Items_3 = lists:append((case Items_2 of nil -> []; _ -> Items_2 end), [(case erlang:is_map(maps:get("stack2", Q_2, nil)) of true -> maps:get(I, maps:get("stack2", Q_2, nil), nil); _ -> lists:nth(I + 1, maps:get("stack2", Q_2, nil)) end)]),
            I_2 = (I - 1),
            Fun_loop(I_2, Items_3, Q_2);
        _ -> {I, Items_2, Q_2}
    end
end,
{I_2, Items_3, Q_2} = Fun(I, Items_2, Q_2),
        J = 0,
        Fun_2 = fun Fun_2_loop(I_2, Items_3, J, Q_2) ->
    case (J < erlang:length(maps:get("stack1", Q_2, nil))) of
        true ->
            Items_4 = lists:append((case Items_3 of nil -> []; _ -> Items_3 end), [(case erlang:is_map(maps:get("stack1", Q_2, nil)) of true -> maps:get(J, maps:get("stack1", Q_2, nil), nil); _ -> lists:nth(J + 1, maps:get("stack1", Q_2, nil)) end)]),
            J_2 = (J + 1),
            Fun_2_loop(I_2, Items_4, J_2, Q_2);
        _ -> {I_2, Items_3, J, Q_2}
    end
end,
{I_2, Items_4, J_2, Q_2} = Fun_2(I_2, Items_3, J, Q_2),
        S = "Queue((",
        K = 0,
        Fun_3 = fun Fun_3_loop(I_2, Items_4, J_2, K, Q_2, S) ->
    case (K < erlang:length(Items_4)) of
        true ->
            S_2 = (S ++ mochi_str((case erlang:is_map(Items_4) of true -> maps:get(K, Items_4, nil); _ -> lists:nth(K + 1, Items_4) end))),
            case (K < (erlang:length(Items_4) - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            K_2 = (K + 1),
            Fun_3_loop(I_2, Items_4, J_2, K_2, Q_2, S_4);
        _ -> {I_2, Items_4, J_2, K, Q_2, S}
    end
end,
{I_2, Items_4, J_2, K_2, Q_2, S_4} = Fun_3(I_2, Items_4, J_2, K, Q_2, S),
        S_5 = (S_4 ++ "))"),
        S_5
    catch {return, Ret} -> Ret end.

put(Q_3, Item) ->
    try
        S1 = maps:get("stack1", Q_3, nil),
        S1_2 = lists:append((case S1 of nil -> []; _ -> S1 end), [Item]),
        #{"stack1" => S1_2, "stack2" => maps:get("stack2", Q_3, nil)}
    catch {return, Ret} -> Ret end.

get(Q_4) ->
    try
        S1_3 = maps:get("stack1", Q_4, nil),
        S2 = maps:get("stack2", Q_4, nil),
        case (erlang:length(S2) == 0) of
        true -> Fun_5 = fun Fun_5_loop(Q_4, S1_3, S2) ->
    case (erlang:length(S1_3) > 0) of
        true ->
            Idx = (erlang:length(S1_3) - 1),
            V = (case erlang:is_map(S1_3) of true -> maps:get(Idx, S1_3, nil); _ -> lists:nth(Idx + 1, S1_3) end),
            New_s1 = [],
            I_3 = 0,
            Fun_4 = fun Fun_4_loop(I_3, Idx, New_s1, Q_4, S1_3, S2, V) ->
    case (I_3 < Idx) of
        true ->
            New_s1_2 = lists:append((case New_s1 of nil -> []; _ -> New_s1 end), [(case erlang:is_map(S1_3) of true -> maps:get(I_3, S1_3, nil); _ -> lists:nth(I_3 + 1, S1_3) end)]),
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, Idx, New_s1_2, Q_4, S1_3, S2, V);
        _ -> {I_3, Idx, New_s1, Q_4, S1_3, S2, V}
    end
end,
{I_4, Idx, New_s1_2, Q_4, S1_3, S2, V} = Fun_4(I_3, Idx, New_s1, Q_4, S1_3, S2, V),
            S1_4 = New_s1_2,
            S2_2 = lists:append((case S2 of nil -> []; _ -> S2 end), [V]),
            Fun_5_loop(Q_4, S1_4, S2_2);
        _ -> {Q_4, S1_3, S2}
    end
end,
{Q_4, S1_4, S2_2} = Fun_5(Q_4, S1_3, S2),
            Fun_6 = Fun_5,
            S1_5 = S1_4,
            S2_3 = S2_2;
        _ -> Fun_6 = nil,
            S1_5 = S1_3,
            S2_3 = S2
    end,
        case (erlang:length(S2_3) == 0) of
        true -> erlang:error("Queue is empty");
        _ -> ok
    end,
        Idx2 = (erlang:length(S2_3) - 1),
        Value = (case erlang:is_map(S2_3) of true -> maps:get(Idx2, S2_3, nil); _ -> lists:nth(Idx2 + 1, S2_3) end),
        New_s2 = [],
        J_3 = 0,
        Fun_7 = fun Fun_7_loop(Idx2, J_3, New_s2, Q_4, S1_5, S2_3, Value) ->
    case (J_3 < Idx2) of
        true ->
            New_s2_2 = lists:append((case New_s2 of nil -> []; _ -> New_s2 end), [(case erlang:is_map(S2_3) of true -> maps:get(J_3, S2_3, nil); _ -> lists:nth(J_3 + 1, S2_3) end)]),
            J_4 = (J_3 + 1),
            Fun_7_loop(Idx2, J_4, New_s2_2, Q_4, S1_5, S2_3, Value);
        _ -> {Idx2, J_3, New_s2, Q_4, S1_5, S2_3, Value}
    end
end,
{Idx2, J_4, New_s2_2, Q_4, S1_5, S2_3, Value} = Fun_7(Idx2, J_3, New_s2, Q_4, S1_5, S2_3, Value),
        S2_4 = New_s2_2,
        #{"queue" => #{"stack1" => S1_5, "stack2" => S2_4}, "value" => Value}
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('q', new_queue([10, 20, 30])),
    erlang:put('r1', get(erlang:get('q'))),
    erlang:put('q', maps:get("queue", erlang:get('r1'), nil)),
    io:format("~ts~n", [mochi_repr(maps:get("value", erlang:get('r1'), nil))]),
    erlang:put('q', put(erlang:get('q'), 40)),
    erlang:put('r2', get(erlang:get('q'))),
    erlang:put('q', maps:get("queue", erlang:get('r2'), nil)),
    io:format("~ts~n", [mochi_repr(maps:get("value", erlang:get('r2'), nil))]),
    erlang:put('r3', get(erlang:get('q'))),
    erlang:put('q', maps:get("queue", erlang:get('r3'), nil)),
    io:format("~ts~n", [mochi_repr(maps:get("value", erlang:get('r3'), nil))]),
    io:format("~ts~n", [mochi_repr(len_queue(erlang:get('q')))]),
    erlang:put('r4', get(erlang:get('q'))),
    erlang:put('q', maps:get("queue", erlang:get('r4'), nil)),
    io:format("~ts~n", [mochi_repr(maps:get("value", erlang:get('r4'), nil))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
