#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, new_queue/1, len_queue/1, str_queue/1, put/2, get/1, rotate/2, get_front/1]).

-compile({no_auto_import,[put/2,get/1]}).
% Generated by Mochi transpiler v0.10.59 (e561788721) on 2025-08-07 08:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

new_queue(Items) ->
    try
        #{"entries" => Items}
    catch {return, Ret} -> Ret end.

len_queue(Q) ->
    try
        erlang:length(maps:get("entries", Q, nil))
    catch {return, Ret} -> Ret end.

str_queue(Q_2) ->
    try
        S = "Queue((",
        I = 0,
        Fun = fun Fun_loop(I, Q_2, S) ->
    case (I < erlang:length(maps:get("entries", Q_2, nil))) of
        true ->
            S_2 = (S ++ mochi_str((case erlang:is_map(maps:get("entries", Q_2, nil)) of true -> maps:get(I, maps:get("entries", Q_2, nil), nil); _ -> lists:nth(I + 1, maps:get("entries", Q_2, nil)) end))),
            case (I < (erlang:length(maps:get("entries", Q_2, nil)) - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Q_2, S_4);
        _ -> {I, Q_2, S}
    end
end,
{I_2, Q_2, S_4} = Fun(I, Q_2, S),
        S_5 = (S_4 ++ "))"),
        S_5
    catch {return, Ret} -> Ret end.

put(Q_3, Item) ->
    try
        E = maps:get("entries", Q_3, nil),
        E_2 = lists:append((case E of nil -> []; _ -> E end), [Item]),
        #{"entries" => E_2}
    catch {return, Ret} -> Ret end.

get(Q_4) ->
    try
        case (erlang:length(maps:get("entries", Q_4, nil)) == 0) of
        true -> erlang:error("Queue is empty");
        _ -> ok
    end,
        Value = (case erlang:is_map(maps:get("entries", Q_4, nil)) of true -> maps:get(0, maps:get("entries", Q_4, nil), nil); _ -> lists:nth(0 + 1, maps:get("entries", Q_4, nil)) end),
        New_entries = [],
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(I_3, New_entries, Q_4, Value) ->
    case (I_3 < erlang:length(maps:get("entries", Q_4, nil))) of
        true ->
            New_entries_2 = lists:append((case New_entries of nil -> []; _ -> New_entries end), [(case erlang:is_map(maps:get("entries", Q_4, nil)) of true -> maps:get(I_3, maps:get("entries", Q_4, nil), nil); _ -> lists:nth(I_3 + 1, maps:get("entries", Q_4, nil)) end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, New_entries_2, Q_4, Value);
        _ -> {I_3, New_entries, Q_4, Value}
    end
end,
{I_4, New_entries_2, Q_4, Value} = Fun_2(I_3, New_entries, Q_4, Value),
        #{"queue" => #{"entries" => New_entries_2}, "value" => Value}
    catch {return, Ret} -> Ret end.

rotate(Q_5, Rotation) ->
    try
        E_3 = maps:get("entries", Q_5, nil),
        R = 0,
        Fun_5 = fun Fun_5_loop(E_3, Q_5, R, Rotation) ->
    case (R < Rotation) of
        true ->
            case (erlang:length(E_3) > 0) of
        true -> First = (case erlang:is_map(E_3) of true -> maps:get(0, E_3, nil); _ -> lists:nth(0 + 1, E_3) end),
            Rest = [],
            I_5 = 1,
            Fun_3 = fun Fun_3_loop(E_3, First, I_5, Q_5, R, Rest, Rotation) ->
    case (I_5 < erlang:length(E_3)) of
        true ->
            Rest_2 = lists:append((case Rest of nil -> []; _ -> Rest end), [(case erlang:is_map(E_3) of true -> maps:get(I_5, E_3, nil); _ -> lists:nth(I_5 + 1, E_3) end)]),
            I_6 = (I_5 + 1),
            Fun_3_loop(E_3, First, I_6, Q_5, R, Rest_2, Rotation);
        _ -> {E_3, First, I_5, Q_5, R, Rest, Rotation}
    end
end,
{E_3, First, I_6, Q_5, R, Rest_2, Rotation} = Fun_3(E_3, First, I_5, Q_5, R, Rest, Rotation),
            Rest_3 = lists:append((case Rest_2 of nil -> []; _ -> Rest_2 end), [First]),
            E_4 = Rest_3,
            E_5 = E_4,
            First_2 = First,
            Fun_4 = Fun_3,
            I_7 = I_6,
            Rest_4 = Rest_3;
        _ -> E_5 = E_3,
            First_2 = nil,
            Fun_4 = nil,
            I_7 = nil,
            Rest_4 = nil
    end,
            R_2 = (R + 1),
            Fun_5_loop(E_5, Q_5, R_2, Rotation);
        _ -> {E_3, Q_5, R, Rotation}
    end
end,
{E_5, Q_5, R_2, Rotation} = Fun_5(E_3, Q_5, R, Rotation),
        #{"entries" => E_5}
    catch {return, Ret} -> Ret end.

get_front(Q_6) ->
    try
        (case erlang:is_map(maps:get("entries", Q_6, nil)) of true -> maps:get(0, maps:get("entries", Q_6, nil), nil); _ -> lists:nth(0 + 1, maps:get("entries", Q_6, nil)) end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('q', new_queue([])),
    io:format("~ts~n", [mochi_repr(len_queue(erlang:get('q')))]),
    erlang:put('q', put(erlang:get('q'), 10)),
    erlang:put('q', put(erlang:get('q'), 20)),
    erlang:put('q', put(erlang:get('q'), 30)),
    erlang:put('q', put(erlang:get('q'), 40)),
    io:format("~ts~n", [mochi_repr(str_queue(erlang:get('q')))]),
    erlang:put('res', get(erlang:get('q'))),
    erlang:put('q', maps:get("queue", erlang:get('res'), nil)),
    io:format("~ts~n", [mochi_repr(maps:get("value", erlang:get('res'), nil))]),
    io:format("~ts~n", [mochi_repr(str_queue(erlang:get('q')))]),
    erlang:put('q', rotate(erlang:get('q'), 2)),
    io:format("~ts~n", [mochi_repr(str_queue(erlang:get('q')))]),
    erlang:put('front', get_front(erlang:get('q'))),
    io:format("~ts~n", [mochi_repr(erlang:get('front'))]),
    io:format("~ts~n", [mochi_repr(str_queue(erlang:get('q')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
