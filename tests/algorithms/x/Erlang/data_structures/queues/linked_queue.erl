#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, new_queue/0, is_empty/1, put/2, get/1, length/1, to_string/1, clear/1]).

-compile({no_auto_import,[put/2,get/1,length/1]}).
% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

new_queue() ->
    try
        #{"nodes" => [], "front" => (0 - 1), "rear" => (0 - 1)}
    catch {return, RetCatch} -> RetCatch end.

is_empty(Q) ->
    try
        (maps:get("front", Q, nil) == (0 - 1))
    catch {return, RetCatch} -> RetCatch end.

put(Q_2, Item) ->
    try
        Node = #{"data" => Item, "next" => (0 - 1)},
        Q_3 = maps:put("nodes", lists:append((case maps:get("nodes", Q_2, nil) of nil -> []; _ -> maps:get("nodes", Q_2, nil) end), [Node]), Q_2),
        Idx = (erlang:length(maps:get("nodes", Q_3, nil)) - 1),
        Q_8 = (case (maps:get("front", Q_3, nil) == (0 - 1)) of
        true -> Q_4 = maps:put("front", Idx, Q_3),
            Q_5 = maps:put("rear", Idx, Q_4),
            Nodes_3 = nil,
            Q_5;
        _ -> Nodes = maps:get("nodes", Q_3, nil),
            Nodes_2 = lists:sublist(Nodes, maps:get("rear", Q_3, nil)) ++ [maps:put("next", Idx, lists:nth(maps:get("rear", Q_3, nil) + 1, Nodes) )] ++ lists:nthtail(maps:get("rear", Q_3, nil) + 1, Nodes),
            Q_6 = maps:put("nodes", Nodes_2, Q_3),
            Q_7 = maps:put("rear", Idx, Q_6),
            Nodes_3 = Nodes_2,
            Q_7
    end),
        {nil, Q_8}
    catch {return, RetCatch} -> RetCatch end.

get(Q_9) ->
    try
        case is_empty(Q_9) of
        true -> erlang:error({panic, "dequeue from empty queue"});
        _ -> ok
    end,
        Idx_2 = maps:get("front", Q_9, nil),
        Node_2 = (case erlang:is_map(maps:get("nodes", Q_9, nil)) of true -> maps:get(Idx_2, maps:get("nodes", Q_9, nil), nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", Q_9, nil)) + Idx_2 + 1, maps:get("nodes", Q_9, nil)); _ -> mochi_nth(Idx_2 + 1, maps:get("nodes", Q_9, nil)) end end),
        Q_10 = maps:put("front", maps:get("next", Node_2, nil), Q_9),
        Q_12 = (case (maps:get("front", Q_10, nil) == (0 - 1)) of
        true -> Q_11 = maps:put("rear", (0 - 1), Q_10),
            Q_11;
        _ -> Q_10
    end),
        maps:get("data", Node_2, nil)
    catch {return, RetCatch} -> RetCatch end.

length(Q_13) ->
    try
        Count = 0,
        Idx_3 = maps:get("front", Q_13, nil),
        Fun = fun Fun_loop(Count, Idx_3, Q_13) ->
    case (Idx_3 /= (0 - 1)) of
        true ->
            Count_2 = (Count + 1),
            Idx_4 = maps:get("next", (case erlang:is_map(maps:get("nodes", Q_13, nil)) of true -> maps:get(Idx_3, maps:get("nodes", Q_13, nil), nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", Q_13, nil)) + Idx_3 + 1, maps:get("nodes", Q_13, nil)); _ -> mochi_nth(Idx_3 + 1, maps:get("nodes", Q_13, nil)) end end), nil),
            Fun_loop(Count_2, Idx_4, Q_13);
        _ -> {Count, Idx_3, Q_13}
    end
end,
{Count_2, Idx_4, Q_13} = Fun(Count, Idx_3, Q_13),
        Count_2
    catch {return, RetCatch} -> RetCatch end.

to_string(Q_14) ->
    try
        Res = "",
        Idx_5 = maps:get("front", Q_14, nil),
        First = true,
        Fun_2 = fun Fun_2_loop(First, Idx_5, Q_14, Res) ->
    case (Idx_5 /= (0 - 1)) of
        true ->
            Node_3 = (case erlang:is_map(maps:get("nodes", Q_14, nil)) of true -> maps:get(Idx_5, maps:get("nodes", Q_14, nil), nil); _ -> case Idx_5 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", Q_14, nil)) + Idx_5 + 1, maps:get("nodes", Q_14, nil)); _ -> mochi_nth(Idx_5 + 1, maps:get("nodes", Q_14, nil)) end end),
            Res_4 = (case First of
        true -> Res_2 = maps:get("data", Node_3, nil),
            First_2 = false,
            First_3 = First_2,
            Res_2;
        _ -> Res_3 = ((Res ++ " <- ") ++ maps:get("data", Node_3, nil)),
            First_3 = First,
            Res_3
    end),
            Idx_6 = maps:get("next", Node_3, nil),
            Fun_2_loop(First_3, Idx_6, Q_14, Res_4);
        _ -> {First, Idx_5, Q_14, Res}
    end
end,
{First_3, Idx_6, Q_14, Res_4} = Fun_2(First, Idx_5, Q_14, Res),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

clear(Q_15) ->
    try
        Q_16 = maps:put("nodes", [], Q_15),
        Q_17 = maps:put("front", (0 - 1), Q_16),
        Q_18 = maps:put("rear", (0 - 1), Q_17),
        {nil, Q_18}
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('queue', new_queue()),
    io:format("~s~n", [mochi_str(is_empty(erlang:get('queue')))]),
    {_, Queue} = put(erlang:get('queue'), "5"),
    erlang:put('queue', Queue),
    {_, Queue_2} = put(erlang:get('queue'), "9"),
    erlang:put('queue', Queue_2),
    {_, Queue_3} = put(erlang:get('queue'), "python"),
    erlang:put('queue', Queue_3),
    io:format("~s~n", [mochi_str(is_empty(erlang:get('queue')))]),
    io:format("~s~n", [mochi_format(get(erlang:get('queue')))]),
    {_, Queue_4} = put(erlang:get('queue'), "algorithms"),
    erlang:put('queue', Queue_4),
    io:format("~s~n", [mochi_format(get(erlang:get('queue')))]),
    io:format("~s~n", [mochi_format(get(erlang:get('queue')))]),
    io:format("~s~n", [mochi_format(get(erlang:get('queue')))]),
    io:format("~s~n", [mochi_str(is_empty(erlang:get('queue')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
