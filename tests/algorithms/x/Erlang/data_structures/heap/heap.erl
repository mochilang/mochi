#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, parent_index/1, left_child_idx/1, right_child_idx/1, max_heapify/3, build_max_heap/1, extract_max/2, insert/3, heap_sort/2, heap_to_string/2]).

% Generated by Mochi transpiler v0.10.72 (30c348480d)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.

parent_index(Child_idx) ->
    try
        (case (Child_idx > 0) of
    true -> mochi_idiv((Child_idx - 1), 2);
    _ -> -1
end)
    catch {return, RetCatch} -> RetCatch end.

left_child_idx(Parent_idx) ->
    try
        ((2 * Parent_idx) + 1)
    catch {return, RetCatch} -> RetCatch end.

right_child_idx(Parent_idx_2) ->
    try
        ((2 * Parent_idx_2) + 2)
    catch {return, RetCatch} -> RetCatch end.

max_heapify(H, Heap_size, Index) ->
    try
        Largest = Index,
        Left = left_child_idx(Index),
        Right = right_child_idx(Index),
        Largest_3 = (case ((Left < Heap_size) andalso ((case erlang:is_map(H) of true -> maps:get(Left, H, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(H) + Left + 1, H); _ -> mochi_nth(Left + 1, H) end end) > (case erlang:is_map(H) of true -> maps:get(Largest, H, nil); _ -> case Largest < 0 of true -> mochi_nth(erlang:length(H) + Largest + 1, H); _ -> mochi_nth(Largest + 1, H) end end))) of
        true -> Largest_2 = Left,
            Largest_2;
        _ -> Largest
    end),
        Largest_5 = (case ((Right < Heap_size) andalso ((case erlang:is_map(H) of true -> maps:get(Right, H, nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(H) + Right + 1, H); _ -> mochi_nth(Right + 1, H) end end) > (case erlang:is_map(H) of true -> maps:get(Largest_3, H, nil); _ -> case Largest_3 < 0 of true -> mochi_nth(erlang:length(H) + Largest_3 + 1, H); _ -> mochi_nth(Largest_3 + 1, H) end end))) of
        true -> Largest_4 = Right,
            Largest_4;
        _ -> Largest_3
    end),
        Temp_2 = (case (Largest_5 /= Index) of
        true -> Temp = (case erlang:is_map(H) of true -> maps:get(Index, H, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(H) + Index + 1, H); _ -> mochi_nth(Index + 1, H) end end),
            H_2 = lists:sublist(H, Index) ++ [(case erlang:is_map(H) of true -> maps:get(Largest_5, H, nil); _ -> case Largest_5 < 0 of true -> mochi_nth(erlang:length(H) + Largest_5 + 1, H); _ -> mochi_nth(Largest_5 + 1, H) end end)] ++ lists:nthtail(Index + 1, H),
            H_3 = lists:sublist(H_2, Largest_5) ++ [Temp] ++ lists:nthtail(Largest_5 + 1, H_2),
            max_heapify(H_3, Heap_size, Largest_5),
            H_4 = H_3,
            Temp;
        _ -> H_4 = H,
            nil
    end),
        nil
    catch {return, RetCatch} -> RetCatch end.

build_max_heap(H_5) ->
    try
        Heap_size_2 = erlang:length(H_5),
        I = (mochi_idiv(Heap_size_2, 2) - 1),
        Fun = fun Fun_loop(H_5, Heap_size_2, I) ->
    case (I >= 0) of
        true ->
            max_heapify(H_5, Heap_size_2, I),
            I_2 = (I - 1),
            Fun_loop(H_5, Heap_size_2, I_2);
        _ -> {H_5, Heap_size_2, I}
    end
end,
{H_5, Heap_size_2, I_2} = Fun(H_5, Heap_size_2, I),
        Heap_size_2
    catch {return, RetCatch} -> RetCatch end.

extract_max(H_6, Heap_size_3) ->
    try
        Max_value = (case erlang:is_map(H_6) of true -> maps:get(0, H_6, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(H_6) + 0 + 1, H_6); _ -> mochi_nth(0 + 1, H_6) end end),
        H_7 = lists:sublist(H_6, 0) ++ [(case erlang:is_map(H_6) of true -> maps:get((Heap_size_3 - 1), H_6, nil); _ -> case (Heap_size_3 - 1) < 0 of true -> mochi_nth(erlang:length(H_6) + (Heap_size_3 - 1) + 1, H_6); _ -> mochi_nth((Heap_size_3 - 1) + 1, H_6) end end)] ++ lists:nthtail(0 + 1, H_6),
        max_heapify(H_7, (Heap_size_3 - 1), 0),
        Max_value
    catch {return, RetCatch} -> RetCatch end.

insert(H_8, Heap_size_4, Value) ->
    try
        H_11 = (case (Heap_size_4 < erlang:length(H_8)) of
        true -> H_9 = lists:sublist(H_8, Heap_size_4) ++ [Value] ++ lists:nthtail(Heap_size_4 + 1, H_8),
            H_9;
        _ -> H_10 = lists:append((case H_8 of nil -> []; _ -> H_8 end), [Value]),
            H_10
    end),
        Heap_size_5 = (Heap_size_4 + 1),
        Idx = mochi_idiv((Heap_size_5 - 1), 2),
        Fun_2 = fun Fun_2_loop(H_11, Heap_size_5, Idx, Value) ->
    case (Idx >= 0) of
        true ->
            max_heapify(H_11, Heap_size_5, Idx),
            Idx_2 = mochi_idiv((Idx - 1), 2),
            Fun_2_loop(H_11, Heap_size_5, Idx_2, Value);
        _ -> {H_11, Heap_size_5, Idx, Value}
    end
end,
{H_11, Heap_size_5, Idx_2, Value} = Fun_2(H_11, Heap_size_5, Idx, Value),
        Heap_size_5
    catch {return, RetCatch} -> RetCatch end.

heap_sort(H_12, Heap_size_6) ->
    try
        Size = Heap_size_6,
        J = (Size - 1),
        Fun_3 = fun Fun_3_loop(H_12, Heap_size_6, J, Size) ->
    case (J > 0) of
        true ->
            Temp_3 = (case erlang:is_map(H_12) of true -> maps:get(0, H_12, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(H_12) + 0 + 1, H_12); _ -> mochi_nth(0 + 1, H_12) end end),
            H_13 = lists:sublist(H_12, 0) ++ [(case erlang:is_map(H_12) of true -> maps:get(J, H_12, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(H_12) + J + 1, H_12); _ -> mochi_nth(J + 1, H_12) end end)] ++ lists:nthtail(0 + 1, H_12),
            H_14 = lists:sublist(H_13, J) ++ [Temp_3] ++ lists:nthtail(J + 1, H_13),
            Size_2 = (Size - 1),
            max_heapify(H_14, Size_2, 0),
            J_2 = (J - 1),
            Fun_3_loop(H_14, Heap_size_6, J_2, Size_2);
        _ -> {H_12, Heap_size_6, J, Size}
    end
end,
{H_14, Heap_size_6, J_2, Size_2} = Fun_3(H_12, Heap_size_6, J, Size),
        {nil, H_14}
    catch {return, RetCatch} -> RetCatch end.

heap_to_string(H_15, Heap_size_7) ->
    try
        S = "[",
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(H_15, Heap_size_7, I_3, S) ->
    case (I_3 < Heap_size_7) of
        true ->
            S_2 = (S ++ mochi_str((case erlang:is_map(H_15) of true -> maps:get(I_3, H_15, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(H_15) + I_3 + 1, H_15); _ -> mochi_nth(I_3 + 1, H_15) end end))),
            S_4 = (case (I_3 < (Heap_size_7 - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_3;
        _ -> S_2
    end),
            I_4 = (I_3 + 1),
            Fun_4_loop(H_15, Heap_size_7, I_4, S_4);
        _ -> {H_15, Heap_size_7, I_3, S}
    end
end,
{H_15, Heap_size_7, I_4, S_4} = Fun_4(H_15, Heap_size_7, I_3, S),
        S_5 = (S_4 ++ "]"),
        S_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('heap', [103.0, 9.0, 1.0, 7.0, 11.0, 15.0, 25.0, 201.0, 209.0, 107.0, 5.0]),
    erlang:put('size', build_max_heap(erlang:get('heap'))),
    io:format("~s~n", [mochi_format(heap_to_string(erlang:get('heap'), erlang:get('size')))]),
    erlang:put('m', extract_max(erlang:get('heap'), erlang:get('size'))),
    erlang:put('size', (erlang:get('size') - 1)),
    io:format("~s~n", [mochi_str(erlang:get('m'))]),
    io:format("~s~n", [mochi_format(heap_to_string(erlang:get('heap'), erlang:get('size')))]),
    erlang:put('size', insert(erlang:get('heap'), erlang:get('size'), 100.0)),
    io:format("~s~n", [mochi_format(heap_to_string(erlang:get('heap'), erlang:get('size')))]),
    {_, Heap} = heap_sort(erlang:get('heap'), erlang:get('size')),
    erlang:put('heap', Heap),
    io:format("~s~n", [mochi_format(heap_to_string(erlang:get('heap'), erlang:get('size')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
