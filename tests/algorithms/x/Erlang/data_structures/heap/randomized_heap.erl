#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, set_seed/1, randint/2, rand_bool/0, new_heap/0, merge/2, insert/1, top/0, pop/0, is_empty/0, to_sorted_list/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

set_seed(S) ->
    try
        erlang:put('seed', S),
        nil
    catch {return, RetCatch} -> RetCatch end.

randint(A, B) ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        (mochi_mod(erlang:get('seed'), ((B - A) + 1)) + A)
    catch {return, RetCatch} -> RetCatch end.

rand_bool() ->
    try
        (randint(0, 1) == 1)
    catch {return, RetCatch} -> RetCatch end.

new_heap() ->
    try
        erlang:put('nodes', []),
        erlang:put('root', erlang:get('NIL')),
        nil
    catch {return, RetCatch} -> RetCatch end.

merge(R1, R2) ->
    try
        case (R1 == erlang:get('NIL')) of
        true -> throw({return, R2});
        _ -> ok
    end,
        case (R2 == erlang:get('NIL')) of
        true -> throw({return, R1});
        _ -> ok
    end,
        Tmp_2 = (case (maps:get("value", (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(R1, erlang:get('nodes'), nil); _ -> case R1 < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + R1 + 1, erlang:get('nodes')); _ -> mochi_nth(R1 + 1, erlang:get('nodes')) end end), nil) > maps:get("value", (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(R2, erlang:get('nodes'), nil); _ -> case R2 < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + R2 + 1, erlang:get('nodes')); _ -> mochi_nth(R2 + 1, erlang:get('nodes')) end end), nil)) of
        true -> Tmp = R1,
            R1_2 = R2,
            R2_2 = Tmp,
            R1_3 = R1_2,
            R2_3 = R2_2,
            Tmp;
        _ -> R1_3 = R1,
            R2_3 = R2,
            nil
    end),
        Tmp_4 = (case rand_bool() of
        true -> Tmp_3 = maps:get("left", (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(R1_3, erlang:get('nodes'), nil); _ -> case R1_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + R1_3 + 1, erlang:get('nodes')); _ -> mochi_nth(R1_3 + 1, erlang:get('nodes')) end end), nil),
            Nodes_tmp = lists:sublist(erlang:get('nodes'), R1_3) ++ [(lists:sublist(lists:nth(R1_3 + 1, erlang:get('nodes')), "left") ++ [maps:get("right", (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(R1_3, erlang:get('nodes'), nil); _ -> case R1_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + R1_3 + 1, erlang:get('nodes')); _ -> mochi_nth(R1_3 + 1, erlang:get('nodes')) end end), nil)] ++ lists:nthtail("left" + 1, lists:nth(R1_3 + 1, erlang:get('nodes'))))] ++ lists:nthtail(R1_3 + 1, erlang:get('nodes')),
            erlang:put('nodes', Nodes_tmp),
            Nodes_tmp_2 = lists:sublist(erlang:get('nodes'), R1_3) ++ [(lists:sublist(lists:nth(R1_3 + 1, erlang:get('nodes')), "right") ++ [Tmp_3] ++ lists:nthtail("right" + 1, lists:nth(R1_3 + 1, erlang:get('nodes'))))] ++ lists:nthtail(R1_3 + 1, erlang:get('nodes')),
            erlang:put('nodes', Nodes_tmp_2),
            Nodes_tmp_3 = Nodes_tmp_2,
            Tmp_3;
        _ -> Nodes_tmp_3 = nil,
            Tmp_2
    end),
        Nodes_tmp_4 = lists:sublist(erlang:get('nodes'), R1_3) ++ [(lists:sublist(lists:nth(R1_3 + 1, erlang:get('nodes')), "left") ++ [merge(maps:get("left", (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(R1_3, erlang:get('nodes'), nil); _ -> case R1_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + R1_3 + 1, erlang:get('nodes')); _ -> mochi_nth(R1_3 + 1, erlang:get('nodes')) end end), nil), R2_3)] ++ lists:nthtail("left" + 1, lists:nth(R1_3 + 1, erlang:get('nodes'))))] ++ lists:nthtail(R1_3 + 1, erlang:get('nodes')),
        erlang:put('nodes', Nodes_tmp_4),
        R1_3
    catch {return, RetCatch} -> RetCatch end.

insert(Value) ->
    try
        Node = #{"value" => Value, "left" => erlang:get('NIL'), "right" => erlang:get('NIL')},
        erlang:put('nodes', lists:append((case erlang:get('nodes') of nil -> []; _ -> erlang:get('nodes') end), [Node])),
        Idx = (erlang:length(erlang:get('nodes')) - 1),
        erlang:put('root', merge(erlang:get('root'), Idx)),
        nil
    catch {return, RetCatch} -> RetCatch end.

top() ->
    try
        (case (erlang:get('root') == erlang:get('NIL')) of
    true -> 0;
    _ -> maps:get("value", (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(erlang:get('root'), erlang:get('nodes'), nil); _ -> case erlang:get('root') < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + erlang:get('root') + 1, erlang:get('nodes')); _ -> mochi_nth(erlang:get('root') + 1, erlang:get('nodes')) end end), nil)
end)
    catch {return, RetCatch} -> RetCatch end.

pop() ->
    try
        Result = top(),
        L = maps:get("left", (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(erlang:get('root'), erlang:get('nodes'), nil); _ -> case erlang:get('root') < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + erlang:get('root') + 1, erlang:get('nodes')); _ -> mochi_nth(erlang:get('root') + 1, erlang:get('nodes')) end end), nil),
        R = maps:get("right", (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(erlang:get('root'), erlang:get('nodes'), nil); _ -> case erlang:get('root') < 0 of true -> mochi_nth(erlang:length(erlang:get('nodes')) + erlang:get('root') + 1, erlang:get('nodes')); _ -> mochi_nth(erlang:get('root') + 1, erlang:get('nodes')) end end), nil),
        erlang:put('root', merge(L, R)),
        Result
    catch {return, RetCatch} -> RetCatch end.

is_empty() ->
    try
        (erlang:get('root') == erlang:get('NIL'))
    catch {return, RetCatch} -> RetCatch end.

to_sorted_list() ->
    try
        Res = [],
        Fun = fun Fun_loop(Res) ->
    case mochi_not(is_empty()) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [pop()]),
            Fun_loop(Res_2);
        _ -> {Res}
    end
end,
{Res_2} = Fun(Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('NIL', (0 - 1)),
    erlang:put('seed', 1),
    erlang:put('nodes', []),
    erlang:put('root', erlang:get('NIL')),
    set_seed(1),
    new_heap(),
    insert(2),
    insert(3),
    insert(1),
    insert(5),
    insert(1),
    insert(7),
    io:format("~s~n", [mochi_format(to_sorted_list())]),
    new_heap(),
    insert(1),
    insert(-1),
    insert(0),
    io:format("~s~n", [mochi_format(to_sorted_list())]),
    new_heap(),
    insert(3),
    insert(1),
    insert(3),
    insert(7),
    io:format("~s~n", [mochi_format(pop())]),
    io:format("~s~n", [mochi_format(pop())]),
    io:format("~s~n", [mochi_format(pop())]),
    io:format("~s~n", [mochi_format(pop())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
