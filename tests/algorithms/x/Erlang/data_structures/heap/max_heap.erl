#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, swap_up/1, insert/1, swap_down/1, shrink/0, pop/0, get_list/0, len_fn/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> binary_to_list(V);
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.

swap_up(I) ->
    try
        Temp = (case erlang:is_map(erlang:get('heap')) of true -> maps:get(I, erlang:get('heap'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + I + 1, erlang:get('heap')); _ -> mochi_nth(I + 1, erlang:get('heap')) end end),
        Idx = I,
        Fun = fun Fun_loop(I, Idx, Temp) ->
    case (mochi_idiv(Idx, 2) > 0) of
        true ->
            Heap_tmp_3 = (case ((case erlang:is_map(erlang:get('heap')) of true -> maps:get(Idx, erlang:get('heap'), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + Idx + 1, erlang:get('heap')); _ -> mochi_nth(Idx + 1, erlang:get('heap')) end end) > (case erlang:is_map(erlang:get('heap')) of true -> maps:get(mochi_idiv(Idx, 2), erlang:get('heap'), nil); _ -> case mochi_idiv(Idx, 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + mochi_idiv(Idx, 2) + 1, erlang:get('heap')); _ -> mochi_nth(mochi_idiv(Idx, 2) + 1, erlang:get('heap')) end end)) of
        true -> Heap_tmp = lists:sublist(erlang:get('heap'), Idx) ++ [(case erlang:is_map(erlang:get('heap')) of true -> maps:get(mochi_idiv(Idx, 2), erlang:get('heap'), nil); _ -> case mochi_idiv(Idx, 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + mochi_idiv(Idx, 2) + 1, erlang:get('heap')); _ -> mochi_nth(mochi_idiv(Idx, 2) + 1, erlang:get('heap')) end end)] ++ lists:nthtail(Idx + 1, erlang:get('heap')),
            erlang:put('heap', Heap_tmp),
            Heap_tmp_2 = lists:sublist(erlang:get('heap'), mochi_idiv(Idx, 2)) ++ [Temp] ++ lists:nthtail(mochi_idiv(Idx, 2) + 1, erlang:get('heap')),
            erlang:put('heap', Heap_tmp_2),
            Heap_tmp_2;
        _ -> nil
    end),
            Idx_2 = mochi_idiv(Idx, 2),
            Fun_loop(I, Idx_2, Temp);
        _ -> {I, Idx, Temp}
    end
end,
{I, Idx_2, Temp} = Fun(I, Idx, Temp),
        nil
    catch {return, RetCatch} -> RetCatch end.

insert(Value) ->
    try
        erlang:put('heap', lists:append((case erlang:get('heap') of nil -> []; _ -> erlang:get('heap') end), [Value])),
        erlang:put('size', (erlang:get('size') + 1)),
        swap_up(erlang:get('size')),
        nil
    catch {return, RetCatch} -> RetCatch end.

swap_down(I_2) ->
    try
        Idx_3 = I_2,
        Fun_2 = fun Fun_2_loop(I_2, Idx_3) ->
    case (erlang:get('size') >= (2 * Idx_3)) of
        true ->
            Bigger_child = (case (((2 * Idx_3) + 1) > erlang:get('size')) of
    true -> (2 * Idx_3);
    _ -> (case ((case erlang:is_map(erlang:get('heap')) of true -> maps:get((2 * Idx_3), erlang:get('heap'), nil); _ -> case (2 * Idx_3) < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + (2 * Idx_3) + 1, erlang:get('heap')); _ -> mochi_nth((2 * Idx_3) + 1, erlang:get('heap')) end end) > (case erlang:is_map(erlang:get('heap')) of true -> maps:get(((2 * Idx_3) + 1), erlang:get('heap'), nil); _ -> case ((2 * Idx_3) + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + ((2 * Idx_3) + 1) + 1, erlang:get('heap')); _ -> mochi_nth(((2 * Idx_3) + 1) + 1, erlang:get('heap')) end end)) of
    true -> (2 * Idx_3);
    _ -> ((2 * Idx_3) + 1)
end)
end),
            Temp_2 = (case erlang:is_map(erlang:get('heap')) of true -> maps:get(Idx_3, erlang:get('heap'), nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + Idx_3 + 1, erlang:get('heap')); _ -> mochi_nth(Idx_3 + 1, erlang:get('heap')) end end),
            Heap_tmp_6 = (case ((case erlang:is_map(erlang:get('heap')) of true -> maps:get(Idx_3, erlang:get('heap'), nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + Idx_3 + 1, erlang:get('heap')); _ -> mochi_nth(Idx_3 + 1, erlang:get('heap')) end end) < (case erlang:is_map(erlang:get('heap')) of true -> maps:get(Bigger_child, erlang:get('heap'), nil); _ -> case Bigger_child < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + Bigger_child + 1, erlang:get('heap')); _ -> mochi_nth(Bigger_child + 1, erlang:get('heap')) end end)) of
        true -> Heap_tmp_4 = lists:sublist(erlang:get('heap'), Idx_3) ++ [(case erlang:is_map(erlang:get('heap')) of true -> maps:get(Bigger_child, erlang:get('heap'), nil); _ -> case Bigger_child < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + Bigger_child + 1, erlang:get('heap')); _ -> mochi_nth(Bigger_child + 1, erlang:get('heap')) end end)] ++ lists:nthtail(Idx_3 + 1, erlang:get('heap')),
            erlang:put('heap', Heap_tmp_4),
            Heap_tmp_5 = lists:sublist(erlang:get('heap'), Bigger_child) ++ [Temp_2] ++ lists:nthtail(Bigger_child + 1, erlang:get('heap')),
            erlang:put('heap', Heap_tmp_5),
            Heap_tmp_5;
        _ -> nil
    end),
            Idx_4 = Bigger_child,
            Fun_2_loop(I_2, Idx_4);
        _ -> {I_2, Idx_3}
    end
end,
{I_2, Idx_4} = Fun_2(I_2, Idx_3),
        nil
    catch {return, RetCatch} -> RetCatch end.

shrink() ->
    try
        New_heap = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, New_heap) ->
    case (I_3 =< erlang:get('size')) of
        true ->
            New_heap_2 = lists:append((case New_heap of nil -> []; _ -> New_heap end), [(case erlang:is_map(erlang:get('heap')) of true -> maps:get(I_3, erlang:get('heap'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + I_3 + 1, erlang:get('heap')); _ -> mochi_nth(I_3 + 1, erlang:get('heap')) end end)]),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, New_heap_2);
        _ -> {I_3, New_heap}
    end
end,
{I_4, New_heap_2} = Fun_3(I_3, New_heap),
        erlang:put('heap', New_heap_2),
        nil
    catch {return, RetCatch} -> RetCatch end.

pop() ->
    try
        Max_value = (case erlang:is_map(erlang:get('heap')) of true -> maps:get(1, erlang:get('heap'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + 1 + 1, erlang:get('heap')); _ -> mochi_nth(1 + 1, erlang:get('heap')) end end),
        Heap_tmp_7 = lists:sublist(erlang:get('heap'), 1) ++ [(case erlang:is_map(erlang:get('heap')) of true -> maps:get(erlang:get('size'), erlang:get('heap'), nil); _ -> case erlang:get('size') < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + erlang:get('size') + 1, erlang:get('heap')); _ -> mochi_nth(erlang:get('size') + 1, erlang:get('heap')) end end)] ++ lists:nthtail(1 + 1, erlang:get('heap')),
        erlang:put('heap', Heap_tmp_7),
        erlang:put('size', (erlang:get('size') - 1)),
        shrink(),
        swap_down(1),
        Max_value
    catch {return, RetCatch} -> RetCatch end.

get_list() ->
    try
        Out = [],
        I_5 = 1,
        Fun_4 = fun Fun_4_loop(I_5, Out) ->
    case (I_5 =< erlang:get('size')) of
        true ->
            Out_2 = lists:append((case Out of nil -> []; _ -> Out end), [(case erlang:is_map(erlang:get('heap')) of true -> maps:get(I_5, erlang:get('heap'), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + I_5 + 1, erlang:get('heap')); _ -> mochi_nth(I_5 + 1, erlang:get('heap')) end end)]),
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Out_2);
        _ -> {I_5, Out}
    end
end,
{I_6, Out_2} = Fun_4(I_5, Out),
        Out_2
    catch {return, RetCatch} -> RetCatch end.

len_fn() ->
    try
        erlang:get('size')
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('heap', [0]),
    erlang:put('size', 0),
    insert(6),
    insert(10),
    insert(15),
    insert(12),
    io:format("~s~n", [mochi_format(pop())]),
    io:format("~s~n", [mochi_format(pop())]),
    io:format("~s~n", [mochi_format(get_list())]),
    io:format("~s~n", [mochi_format(len_fn())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
