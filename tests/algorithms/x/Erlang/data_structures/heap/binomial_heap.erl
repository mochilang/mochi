#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, new_heap/0, swap/3, sift_up/2, sift_down/2, insert/2, peek/1, is_empty/1, delete_min/1, main/0]).

% Generated by Mochi transpiler v0.10.72 (17da928c0a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]";
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.

new_heap() ->
    try
        #{"data" => []}
    catch {return, RetCatch} -> RetCatch end.

swap(Data, I, J) ->
    try
        Tmp = (case erlang:is_map(Data) of true -> maps:get(I, Data, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Data) + I + 1, Data); _ -> mochi_nth(I + 1, Data) end end),
        Data_2 = lists:sublist(Data, I) ++ [(case erlang:is_map(Data) of true -> maps:get(J, Data, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Data) + J + 1, Data); _ -> mochi_nth(J + 1, Data) end end)] ++ lists:nthtail(I + 1, Data),
        Data_3 = lists:sublist(Data_2, J) ++ [Tmp] ++ lists:nthtail(J + 1, Data_2),
        {nil, Data_3}
    catch {return, RetCatch} -> RetCatch end.

sift_up(Data_4, Idx) ->
    try
        I_2 = Idx,
        Fun = fun Fun_loop(Data_4, I_2, Idx) ->
    case (I_2 > 0) of
        true ->
            try
                Parent = mochi_idiv((I_2 - 1), 2),
                case ((case erlang:is_map(Data_4) of true -> maps:get(Parent, Data_4, nil); _ -> case Parent < 0 of true -> mochi_nth(erlang:length(Data_4) + Parent + 1, Data_4); _ -> mochi_nth(Parent + 1, Data_4) end end) =< (case erlang:is_map(Data_4) of true -> maps:get(I_2, Data_4, nil); _ -> case I_2 < 0 of true -> mochi_nth(erlang:length(Data_4) + I_2 + 1, Data_4); _ -> mochi_nth(I_2 + 1, Data_4) end end)) of
        true -> throw({break, {Data_4, I_2, Idx}});
        _ -> ok
    end,
                Data_res = swap(Data_4, Parent, I_2),
                Data_tmp = element(2, Data_res),
                Data_5 = Data_tmp,
                I_3 = Parent,
                Fun_loop(Data_5, I_3, Idx)
            catch
                {continue, C0, C1, C2} -> Fun_loop(C0, C1, C2);
                {break, Bs} -> Bs
            end;
        _ -> {Data_4, I_2, Idx}
    end
end,
{Data_5, I_3, Idx} = Fun(Data_4, I_2, Idx),
        {nil, Data_5}
    catch {return, RetCatch} -> RetCatch end.

sift_down(Data_6, Idx_2) ->
    try
        I_4 = Idx_2,
        N = erlang:length(Data_6),
        Fun_2 = fun Fun_2_loop(Data_6, I_4, Idx_2, N) ->
    case true of
        true ->
            try
                Left = ((2 * I_4) + 1),
                Right = (Left + 1),
                Smallest = I_4,
                Smallest_3 = (case ((Left < N) andalso ((case erlang:is_map(Data_6) of true -> maps:get(Left, Data_6, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Data_6) + Left + 1, Data_6); _ -> mochi_nth(Left + 1, Data_6) end end) < (case erlang:is_map(Data_6) of true -> maps:get(Smallest, Data_6, nil); _ -> case Smallest < 0 of true -> mochi_nth(erlang:length(Data_6) + Smallest + 1, Data_6); _ -> mochi_nth(Smallest + 1, Data_6) end end))) of
        true -> Smallest_2 = Left,
            Smallest_2;
        _ -> Smallest
    end),
                Smallest_5 = (case ((Right < N) andalso ((case erlang:is_map(Data_6) of true -> maps:get(Right, Data_6, nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(Data_6) + Right + 1, Data_6); _ -> mochi_nth(Right + 1, Data_6) end end) < (case erlang:is_map(Data_6) of true -> maps:get(Smallest_3, Data_6, nil); _ -> case Smallest_3 < 0 of true -> mochi_nth(erlang:length(Data_6) + Smallest_3 + 1, Data_6); _ -> mochi_nth(Smallest_3 + 1, Data_6) end end))) of
        true -> Smallest_4 = Right,
            Smallest_4;
        _ -> Smallest_3
    end),
                case (Smallest_5 == I_4) of
        true -> throw({break, {Data_6, I_4, Idx_2, N}});
        _ -> ok
    end,
                Data_res_2 = swap(Data_6, I_4, Smallest_5),
                Data_tmp_2 = element(2, Data_res_2),
                Data_7 = Data_tmp_2,
                I_5 = Smallest_5,
                Fun_2_loop(Data_7, I_5, Idx_2, N)
            catch
                {continue, C0, C1, C2, C3} -> Fun_2_loop(C0, C1, C2, C3);
                {break, Bs} -> Bs
            end;
        _ -> {Data_6, I_4, Idx_2, N}
    end
end,
{Data_7, I_5, Idx_2, N} = Fun_2(Data_6, I_4, Idx_2, N),
        {nil, Data_7}
    catch {return, RetCatch} -> RetCatch end.

insert(Heap, V) ->
    try
        D = maps:get("data", Heap, nil),
        D_2 = lists:append((case D of nil -> []; _ -> D end), [V]),
        D_res = sift_up(D_2, (erlang:length(D_2) - 1)),
        D_tmp = element(2, D_res),
        D_3 = D_tmp,
        #{"data" => D_3}
    catch {return, RetCatch} -> RetCatch end.

peek(Heap_2) ->
    try
        (case erlang:is_map(maps:get("data", Heap_2, nil)) of true -> maps:get(0, maps:get("data", Heap_2, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Heap_2, nil)) + 0 + 1, maps:get("data", Heap_2, nil)); _ -> mochi_nth(0 + 1, maps:get("data", Heap_2, nil)) end end)
    catch {return, RetCatch} -> RetCatch end.

is_empty(Heap_3) ->
    try
        (erlang:length(maps:get("data", Heap_3, nil)) == 0)
    catch {return, RetCatch} -> RetCatch end.

delete_min(Heap_4) ->
    try
        D_4 = maps:get("data", Heap_4, nil),
        Min = (case erlang:is_map(D_4) of true -> maps:get(0, D_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(D_4) + 0 + 1, D_4); _ -> mochi_nth(0 + 1, D_4) end end),
        D_5 = lists:sublist(D_4, 0) ++ [(case erlang:is_map(D_4) of true -> maps:get((erlang:length(D_4) - 1), D_4, nil); _ -> case (erlang:length(D_4) - 1) < 0 of true -> mochi_nth(erlang:length(D_4) + (erlang:length(D_4) - 1) + 1, D_4); _ -> mochi_nth((erlang:length(D_4) - 1) + 1, D_4) end end)] ++ lists:nthtail(0 + 1, D_4),
        D_6 = lists:sublist(D_5, 0 + 1, ((erlang:length(D_5) - 1) - 0)),
        D_tmp_3 = (case (erlang:length(D_6) > 0) of
        true -> D_res_2 = sift_down(D_6, 0),
            D_tmp_2 = element(2, D_res_2),
            D_7 = D_tmp_2,
            D_8 = D_7,
            D_res_3 = D_res_2,
            D_tmp_2;
        _ -> D_8 = D_6,
            D_res_3 = nil,
            nil
    end),
        #{"heap" => #{"data" => D_8}, "value" => Min}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        H = new_heap(),
        H_2 = insert(H, 10),
        H_3 = insert(H_2, 3),
        H_4 = insert(H_3, 7),
        io:format("~s~n", [mochi_str(peek(H_4))]),
        D1 = delete_min(H_4),
        H_5 = maps:get("heap", D1, nil),
        io:format("~s~n", [mochi_str(maps:get("value", D1, nil))]),
        D2 = delete_min(H_5),
        H_6 = maps:get("heap", D2, nil),
        io:format("~s~n", [mochi_str(maps:get("value", D2, nil))]),
        D3 = delete_min(H_6),
        H_7 = maps:get("heap", D3, nil),
        io:format("~s~n", [mochi_str(maps:get("value", D3, nil))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
