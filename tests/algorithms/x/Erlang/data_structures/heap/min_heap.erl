#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, get_parent_idx/1, get_left_child_idx/1, get_right_child_idx/1, remove_key/2, slice_without_last/1, sift_down/2, sift_up/2, new_min_heap/1, peek/1, remove_min/1, insert/2, is_empty/1, get_value/2, decrease_key/3, node_to_string/1]).

% Generated by Mochi transpiler v0.10.72 (30c348480d)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.

get_parent_idx(Idx) ->
    try
        mochi_idiv((Idx - 1), 2)
    catch {return, RetCatch} -> RetCatch end.

get_left_child_idx(Idx_2) ->
    try
        ((Idx_2 * 2) + 1)
    catch {return, RetCatch} -> RetCatch end.

get_right_child_idx(Idx_3) ->
    try
        ((Idx_3 * 2) + 2)
    catch {return, RetCatch} -> RetCatch end.

remove_key(M, K) ->
    try
        Out = #{},
        Fun = fun Fun_loop(List, K, M, Out) ->
    case List of
        [] -> {K, M, Out};
        [Key|Key_rest] ->
            Out_3 = (case (Key /= K) of
        true -> Out_2 = maps:put(Key, maps:get(Key, M, nil), Out),
            Out_2;
        _ -> Out
    end),
            Fun_loop(Key_rest, K, M, Out_3);
        _ -> {K, M, Out}
    end
end,
{K, M, Out_3} = Fun(maps:keys(M), K, M, Out),
        Out_3
    catch {return, RetCatch} -> RetCatch end.

slice_without_last(Xs) ->
    try
        Res = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Res, Xs) ->
    case (I < (erlang:length(Xs) - 1)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Res_2, Xs);
        _ -> {I, Res, Xs}
    end
end,
{I_2, Res_2, Xs} = Fun_2(I, Res, Xs),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

sift_down(Mh, Idx_4) ->
    try
        Heap = maps:get("heap", Mh, nil),
        Idx_map = maps:get("idx_of_element", Mh, nil),
        I_3 = Idx_4,
        Fun_3 = fun Fun_3_loop(Heap, I_3, Idx_4, Idx_map, Mh) ->
    case true of
        true ->
            try
                Left = get_left_child_idx(I_3),
                Right = get_right_child_idx(I_3),
                Smallest = I_3,
                Smallest_3 = (case ((Left < erlang:length(Heap)) andalso (maps:get("val", (case erlang:is_map(Heap) of true -> maps:get(Left, Heap, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Heap) + Left + 1, Heap); _ -> mochi_nth(Left + 1, Heap) end end), nil) < maps:get("val", (case erlang:is_map(Heap) of true -> maps:get(Smallest, Heap, nil); _ -> case Smallest < 0 of true -> mochi_nth(erlang:length(Heap) + Smallest + 1, Heap); _ -> mochi_nth(Smallest + 1, Heap) end end), nil))) of
        true -> Smallest_2 = Left,
            Smallest_2;
        _ -> Smallest
    end),
                Smallest_5 = (case ((Right < erlang:length(Heap)) andalso (maps:get("val", (case erlang:is_map(Heap) of true -> maps:get(Right, Heap, nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(Heap) + Right + 1, Heap); _ -> mochi_nth(Right + 1, Heap) end end), nil) < maps:get("val", (case erlang:is_map(Heap) of true -> maps:get(Smallest_3, Heap, nil); _ -> case Smallest_3 < 0 of true -> mochi_nth(erlang:length(Heap) + Smallest_3 + 1, Heap); _ -> mochi_nth(Smallest_3 + 1, Heap) end end), nil))) of
        true -> Smallest_4 = Right,
            Smallest_4;
        _ -> Smallest_3
    end),
                Tmp_2 = (case (Smallest_5 /= I_3) of
        true -> Tmp = (case erlang:is_map(Heap) of true -> maps:get(I_3, Heap, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Heap) + I_3 + 1, Heap); _ -> mochi_nth(I_3 + 1, Heap) end end),
            Heap_2 = lists:sublist(Heap, I_3) ++ [(case erlang:is_map(Heap) of true -> maps:get(Smallest_5, Heap, nil); _ -> case Smallest_5 < 0 of true -> mochi_nth(erlang:length(Heap) + Smallest_5 + 1, Heap); _ -> mochi_nth(Smallest_5 + 1, Heap) end end)] ++ lists:nthtail(I_3 + 1, Heap),
            Heap_3 = lists:sublist(Heap_2, Smallest_5) ++ [Tmp] ++ lists:nthtail(Smallest_5 + 1, Heap_2),
            Idx_map_2 = maps:put(maps:get("name", (case erlang:is_map(Heap_3) of true -> maps:get(I_3, Heap_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Heap_3) + I_3 + 1, Heap_3); _ -> mochi_nth(I_3 + 1, Heap_3) end end), nil), I_3, Idx_map),
            Idx_map_3 = maps:put(maps:get("name", (case erlang:is_map(Heap_3) of true -> maps:get(Smallest_5, Heap_3, nil); _ -> case Smallest_5 < 0 of true -> mochi_nth(erlang:length(Heap_3) + Smallest_5 + 1, Heap_3); _ -> mochi_nth(Smallest_5 + 1, Heap_3) end end), nil), Smallest_5, Idx_map_2),
            I_4 = Smallest_5,
            Heap_4 = Heap_3,
            I_5 = I_4,
            Idx_map_4 = Idx_map_3,
            Tmp;
        _ -> throw({break, {Heap, I_3, Idx_4, Idx_map, Mh}}),
            Heap_4 = Heap,
            I_5 = I_3,
            Idx_map_4 = Idx_map,
            nil
    end),
                Fun_3_loop(Heap_4, I_5, Idx_4, Idx_map_4, Mh)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_3_loop(C0, C1, C2, C3, C4);
                {break, Bs} -> Bs
            end;
        _ -> {Heap, I_3, Idx_4, Idx_map, Mh}
    end
end,
{Heap_4, I_5, Idx_4, Idx_map_4, Mh} = Fun_3(Heap, I_3, Idx_4, Idx_map, Mh),
        Mh_2 = maps:put("heap", Heap_4, Mh),
        Mh_3 = maps:put("idx_of_element", Idx_map_4, Mh_2),
        {nil, Mh_3}
    catch {return, RetCatch} -> RetCatch end.

sift_up(Mh_4, Idx_5) ->
    try
        Heap_5 = maps:get("heap", Mh_4, nil),
        Idx_map_5 = maps:get("idx_of_element", Mh_4, nil),
        I_6 = Idx_5,
        P = get_parent_idx(I_6),
        Fun_4 = fun Fun_4_loop(Heap_5, I_6, Idx_5, Idx_map_5, Mh_4, P) ->
    case ((P >= 0) andalso (maps:get("val", (case erlang:is_map(Heap_5) of true -> maps:get(P, Heap_5, nil); _ -> case P < 0 of true -> mochi_nth(erlang:length(Heap_5) + P + 1, Heap_5); _ -> mochi_nth(P + 1, Heap_5) end end), nil) > maps:get("val", (case erlang:is_map(Heap_5) of true -> maps:get(I_6, Heap_5, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Heap_5) + I_6 + 1, Heap_5); _ -> mochi_nth(I_6 + 1, Heap_5) end end), nil))) of
        true ->
            Tmp_3 = (case erlang:is_map(Heap_5) of true -> maps:get(P, Heap_5, nil); _ -> case P < 0 of true -> mochi_nth(erlang:length(Heap_5) + P + 1, Heap_5); _ -> mochi_nth(P + 1, Heap_5) end end),
            Heap_6 = lists:sublist(Heap_5, P) ++ [(case erlang:is_map(Heap_5) of true -> maps:get(I_6, Heap_5, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Heap_5) + I_6 + 1, Heap_5); _ -> mochi_nth(I_6 + 1, Heap_5) end end)] ++ lists:nthtail(P + 1, Heap_5),
            Heap_7 = lists:sublist(Heap_6, I_6) ++ [Tmp_3] ++ lists:nthtail(I_6 + 1, Heap_6),
            Idx_map_6 = maps:put(maps:get("name", (case erlang:is_map(Heap_7) of true -> maps:get(P, Heap_7, nil); _ -> case P < 0 of true -> mochi_nth(erlang:length(Heap_7) + P + 1, Heap_7); _ -> mochi_nth(P + 1, Heap_7) end end), nil), P, Idx_map_5),
            Idx_map_7 = maps:put(maps:get("name", (case erlang:is_map(Heap_7) of true -> maps:get(I_6, Heap_7, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Heap_7) + I_6 + 1, Heap_7); _ -> mochi_nth(I_6 + 1, Heap_7) end end), nil), I_6, Idx_map_6),
            I_7 = P,
            P_2 = get_parent_idx(I_7),
            Fun_4_loop(Heap_7, I_7, Idx_5, Idx_map_7, Mh_4, P_2);
        _ -> {Heap_5, I_6, Idx_5, Idx_map_5, Mh_4, P}
    end
end,
{Heap_7, I_7, Idx_5, Idx_map_7, Mh_4, P_2} = Fun_4(Heap_5, I_6, Idx_5, Idx_map_5, Mh_4, P),
        Mh_5 = maps:put("heap", Heap_7, Mh_4),
        Mh_6 = maps:put("idx_of_element", Idx_map_7, Mh_5),
        {nil, Mh_6}
    catch {return, RetCatch} -> RetCatch end.

new_min_heap(Array) ->
    try
        Idx_map_8 = #{},
        Val_map = #{},
        Heap_8 = Array,
        I_8 = 0,
        Fun_5 = fun Fun_5_loop(Array, Heap_8, I_8, Idx_map_8, Val_map) ->
    case (I_8 < erlang:length(Array)) of
        true ->
            N = (case erlang:is_map(Array) of true -> maps:get(I_8, Array, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Array) + I_8 + 1, Array); _ -> mochi_nth(I_8 + 1, Array) end end),
            Idx_map_9 = maps:put(maps:get("name", N, nil), I_8, Idx_map_8),
            Val_map_2 = maps:put(maps:get("name", N, nil), maps:get("val", N, nil), Val_map),
            I_9 = (I_8 + 1),
            Fun_5_loop(Array, Heap_8, I_9, Idx_map_9, Val_map_2);
        _ -> {Array, Heap_8, I_8, Idx_map_8, Val_map}
    end
end,
{Array, Heap_8, I_9, Idx_map_9, Val_map_2} = Fun_5(Array, Heap_8, I_8, Idx_map_8, Val_map),
        Mh_7 = #{"heap" => Heap_8, "idx_of_element" => Idx_map_9, "heap_dict" => Val_map_2},
        Start = get_parent_idx((erlang:length(Array) - 1)),
        Fun_6 = fun Fun_6_loop(Array, Heap_8, I_9, Idx_map_9, Mh_7, Start, Val_map_2) ->
    case (Start >= 0) of
        true ->
            Mh_res = sift_down(Mh_7, Start),
            Mh_8 = element(2, Mh_res),
            Start_2 = (Start - 1),
            Fun_6_loop(Array, Heap_8, I_9, Idx_map_9, Mh_8, Start_2, Val_map_2);
        _ -> {Array, Heap_8, I_9, Idx_map_9, Mh_7, Start, Val_map_2}
    end
end,
{Array, Heap_8, I_9, Idx_map_9, Mh_8, Start_2, Val_map_2} = Fun_6(Array, Heap_8, I_9, Idx_map_9, Mh_7, Start, Val_map_2),
        Mh_8
    catch {return, RetCatch} -> RetCatch end.

peek(Mh_9) ->
    try
        (case erlang:is_map(maps:get("heap", Mh_9, nil)) of true -> maps:get(0, maps:get("heap", Mh_9, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("heap", Mh_9, nil)) + 0 + 1, maps:get("heap", Mh_9, nil)); _ -> mochi_nth(0 + 1, maps:get("heap", Mh_9, nil)) end end)
    catch {return, RetCatch} -> RetCatch end.

remove_min(Mh_10) ->
    try
        Heap_9 = maps:get("heap", Mh_10, nil),
        Idx_map_10 = maps:get("idx_of_element", Mh_10, nil),
        Val_map_3 = maps:get("heap_dict", Mh_10, nil),
        Last_idx = (erlang:length(Heap_9) - 1),
        Top = (case erlang:is_map(Heap_9) of true -> maps:get(0, Heap_9, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Heap_9) + 0 + 1, Heap_9); _ -> mochi_nth(0 + 1, Heap_9) end end),
        Last = (case erlang:is_map(Heap_9) of true -> maps:get(Last_idx, Heap_9, nil); _ -> case Last_idx < 0 of true -> mochi_nth(erlang:length(Heap_9) + Last_idx + 1, Heap_9); _ -> mochi_nth(Last_idx + 1, Heap_9) end end),
        Heap_10 = lists:sublist(Heap_9, 0) ++ [Last] ++ lists:nthtail(0 + 1, Heap_9),
        Idx_map_11 = maps:put(maps:get("name", Last, nil), 0, Idx_map_10),
        Heap_11 = slice_without_last(Heap_10),
        Idx_map_12 = remove_key(Idx_map_11, maps:get("name", Top, nil)),
        Val_map_4 = remove_key(Val_map_3, maps:get("name", Top, nil)),
        Mh_11 = maps:put("heap", Heap_11, Mh_10),
        Mh_12 = maps:put("idx_of_element", Idx_map_12, Mh_11),
        Mh_13 = maps:put("heap_dict", Val_map_4, Mh_12),
        Mh_res_3 = (case (erlang:length(Heap_11) > 0) of
        true -> Mh_res_2 = sift_down(Mh_13, 0),
            Mh_14 = element(2, Mh_res_2),
            Mh_15 = Mh_14,
            Mh_res_2;
        _ -> Mh_15 = Mh_13,
            nil
    end),
        Top
    catch {return, RetCatch} -> RetCatch end.

insert(Mh_16, Node) ->
    try
        Heap_12 = maps:get("heap", Mh_16, nil),
        Idx_map_13 = maps:get("idx_of_element", Mh_16, nil),
        Val_map_5 = maps:get("heap_dict", Mh_16, nil),
        Heap_13 = lists:append((case Heap_12 of nil -> []; _ -> Heap_12 end), [Node]),
        Idx_6 = (erlang:length(Heap_13) - 1),
        Idx_map_14 = maps:put(maps:get("name", Node, nil), Idx_6, Idx_map_13),
        Val_map_6 = maps:put(maps:get("name", Node, nil), maps:get("val", Node, nil), Val_map_5),
        Mh_17 = maps:put("heap", Heap_13, Mh_16),
        Mh_18 = maps:put("idx_of_element", Idx_map_14, Mh_17),
        Mh_19 = maps:put("heap_dict", Val_map_6, Mh_18),
        Mh_res_4 = sift_up(Mh_19, Idx_6),
        Mh_20 = element(2, Mh_res_4),
        {nil, Mh_20}
    catch {return, RetCatch} -> RetCatch end.

is_empty(Mh_21) ->
    try
        (erlang:length(maps:get("heap", Mh_21, nil)) == 0)
    catch {return, RetCatch} -> RetCatch end.

get_value(Mh_22, Key_2) ->
    try
        maps:get(Key_2, maps:get("heap_dict", Mh_22, nil), nil)
    catch {return, RetCatch} -> RetCatch end.

decrease_key(Mh_23, Node_2, New_value) ->
    try
        Heap_14 = maps:get("heap", Mh_23, nil),
        Val_map_7 = maps:get("heap_dict", Mh_23, nil),
        Idx_map_15 = maps:get("idx_of_element", Mh_23, nil),
        Idx_7 = maps:get(maps:get("name", Node_2, nil), Idx_map_15, nil),
        case mochi_not((maps:get("val", (case erlang:is_map(Heap_14) of true -> maps:get(Idx_7, Heap_14, nil); _ -> case Idx_7 < 0 of true -> mochi_nth(erlang:length(Heap_14) + Idx_7 + 1, Heap_14); _ -> mochi_nth(Idx_7 + 1, Heap_14) end end), nil) > New_value)) of
        true -> erlang:error({panic, "newValue must be less than current value"});
        _ -> ok
    end,
        Node_3 = maps:put("val", New_value, Node_2),
        Heap_15 = lists:sublist(Heap_14, Idx_7) ++ [maps:put("val", New_value, lists:nth(Idx_7 + 1, Heap_14) )] ++ lists:nthtail(Idx_7 + 1, Heap_14),
        Val_map_8 = maps:put(maps:get("name", Node_3, nil), New_value, Val_map_7),
        Mh_24 = maps:put("heap", Heap_15, Mh_23),
        Mh_25 = maps:put("heap_dict", Val_map_8, Mh_24),
        Mh_res_5 = sift_up(Mh_25, Idx_7),
        Mh_26 = element(2, Mh_res_5),
        nil
    catch {return, RetCatch} -> RetCatch end.

node_to_string(N_2) ->
    try
        (((("Node(" ++ maps:get("name", N_2, nil)) ++ ", ") ++ mochi_str(maps:get("val", N_2, nil))) ++ ")")
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('r', #{"name" => "R", "val" => -1}),
    erlang:put('b', #{"name" => "B", "val" => 6}),
    erlang:put('a', #{"name" => "A", "val" => 3}),
    erlang:put('x', #{"name" => "X", "val" => 1}),
    erlang:put('e', #{"name" => "E", "val" => 4}),
    erlang:put('my_min_heap', new_min_heap([erlang:get('r'), erlang:get('b'), erlang:get('a'), erlang:get('x'), erlang:get('e')])),
    io:format("~s~n", [mochi_format("Min Heap - before decrease key")]),
    Fun_7 = fun Fun_7_loop(List) ->
    case List of
        [] -> {};
        [N_3|N_3_rest] ->
            io:format("~s~n", [mochi_format(node_to_string(N_3))]),
            Fun_7_loop(N_3_rest);
        _ -> {}
    end
end,
{} = Fun_7(maps:get("heap", erlang:get('my_min_heap'), nil)),
    io:format("~s~n", [mochi_format("Min Heap - After decrease key of node [B -> -17]")]),
    decrease_key(erlang:get('my_min_heap'), erlang:get('b'), -17),
    Fun_8 = fun Fun_8_loop(List) ->
    case List of
        [] -> {};
        [N_4|N_4_rest] ->
            io:format("~s~n", [mochi_format(node_to_string(N_4))]),
            Fun_8_loop(N_4_rest);
        _ -> {}
    end
end,
{} = Fun_8(maps:get("heap", erlang:get('my_min_heap'), nil)),
    io:format("~s~n", [mochi_str(get_value(erlang:get('my_min_heap'), "B"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
