#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, fibonacci/1, min_int/2, fibonacci_search/2]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

fibonacci(K) ->
    try
        case (K < 0) of
        true -> erlang:error({panic, "k must be >= 0"});
        _ -> ok
    end,
        A = 0,
        B = 1,
        I = 0,
        Fun = fun Fun_loop(A, B, I, K) ->
    case (I < K) of
        true ->
            Tmp = (A + B),
            A_2 = B,
            B_2 = Tmp,
            I_2 = (I + 1),
            Fun_loop(A_2, B_2, I_2, K);
        _ -> {A, B, I, K}
    end
end,
{A_2, B_2, I_2, K} = Fun(A, B, I, K),
        A_2
    catch {return, RetCatch} -> RetCatch end.

min_int(A_3, B_3) ->
    try
        case (A_3 < B_3) of
        true -> throw({return, A_3});
        _ -> throw({return, B_3})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

fibonacci_search(Arr, Val) ->
    try
        N = erlang:length(Arr),
        M = 0,
        Fun_2 = fun Fun_2_loop(Arr, M, N, Val) ->
    case (fibonacci(M) < N) of
        true ->
            M_2 = (M + 1),
            Fun_2_loop(Arr, M_2, N, Val);
        _ -> {Arr, M, N, Val}
    end
end,
{Arr, M_2, N, Val} = Fun_2(Arr, M, N, Val),
        Offset = 0,
        Fun_3 = fun Fun_3_loop(Arr, M_2, N, Offset, Val) ->
    case (M_2 > 0) of
        true ->
            I_3 = min_int((Offset + fibonacci((M_2 - 1))), (N - 1)),
            Item = (case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr) + I_3 + 1, Arr); _ -> mochi_nth(I_3 + 1, Arr) end end),
            case (Item == Val) of
        true -> throw({return, I_3}),
            M_6 = M_2,
            Offset_4 = Offset;
        _ -> case (Val < Item) of
        true -> M_3 = (M_2 - 1),
            M_5 = M_3,
            Offset_3 = Offset;
        _ -> Offset_2 = (Offset + fibonacci((M_2 - 1))),
            M_4 = (M_2 - 2),
            M_5 = M_4,
            Offset_3 = Offset_2
    end,
            M_6 = M_5,
            Offset_4 = Offset_3
    end,
            Fun_3_loop(Arr, M_6, N, Offset_4, Val);
        _ -> {Arr, M_2, N, Offset, Val}
    end
end,
{Arr, M_6, N, Offset_4, Val} = Fun_3(Arr, M_2, N, Offset, Val),
        -1
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('example1', [4, 5, 6, 7]),
    erlang:put('example2', [-18, 2]),
    erlang:put('example3', [0, 5, 10, 15, 20, 25, 30]),
    io:format("~ts~n", [mochi_str(fibonacci_search(erlang:get('example1'), 4))]),
    io:format("~ts~n", [mochi_str(fibonacci_search(erlang:get('example1'), -10))]),
    io:format("~ts~n", [mochi_str(fibonacci_search(erlang:get('example2'), -18))]),
    io:format("~ts~n", [mochi_str(fibonacci_search(erlang:get('example3'), 15))]),
    io:format("~ts~n", [mochi_str(fibonacci_search(erlang:get('example3'), 17))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
