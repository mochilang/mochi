#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, lin_search/4, ite_ternary_search/2, rec_ternary_search/4, main/0]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

lin_search(Left, Right, Array, Target) ->
    try
        I = Left,
        Fun = fun Fun_loop(Array, I, Left, Right, Target) ->
    case (I < Right) of
        true ->
            case ((case erlang:is_map(Array) of true -> maps:get(I, Array, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Array) + I + 1, Array); _ -> mochi_nth(I + 1, Array) end end) == Target) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Array, I_2, Left, Right, Target);
        _ -> {Array, I, Left, Right, Target}
    end
end,
{Array, I_2, Left, Right, Target} = Fun(Array, I, Left, Right, Target),
        -1
    catch {return, RetCatch} -> RetCatch end.

ite_ternary_search(Array_2, Target_2) ->
    try
        Left_2 = 0,
        Right_2 = (erlang:length(Array_2) - 1),
        Fun_2 = fun Fun_2_loop(Array_2, Left_2, Right_2, Target_2) ->
    case (Left_2 =< Right_2) of
        true ->
            case ((Right_2 - Left_2) < 10) of
        true -> Idx = lin_search(Left_2, (Right_2 + 1), Array_2, Target_2),
            throw({return, Idx}),
            Idx_2 = Idx;
        _ -> Idx_2 = nil
    end,
            One_third = (Left_2 + ((Right_2 - Left_2) div 3)),
            Two_third = (Right_2 - ((Right_2 - Left_2) div 3)),
            case ((case erlang:is_map(Array_2) of true -> maps:get(One_third, Array_2, nil); _ -> case One_third < 0 of true -> mochi_nth(erlang:length(Array_2) + One_third + 1, Array_2); _ -> mochi_nth(One_third + 1, Array_2) end end) == Target_2) of
        true -> throw({return, One_third});
        _ -> ok
    end,
            case ((case erlang:is_map(Array_2) of true -> maps:get(Two_third, Array_2, nil); _ -> case Two_third < 0 of true -> mochi_nth(erlang:length(Array_2) + Two_third + 1, Array_2); _ -> mochi_nth(Two_third + 1, Array_2) end end) == Target_2) of
        true -> throw({return, Two_third});
        _ -> ok
    end,
            case (Target_2 < (case erlang:is_map(Array_2) of true -> maps:get(One_third, Array_2, nil); _ -> case One_third < 0 of true -> mochi_nth(erlang:length(Array_2) + One_third + 1, Array_2); _ -> mochi_nth(One_third + 1, Array_2) end end)) of
        true -> Right_3 = (One_third - 1),
            Left_6 = Left_2,
            Right_6 = Right_3;
        _ -> case ((case erlang:is_map(Array_2) of true -> maps:get(Two_third, Array_2, nil); _ -> case Two_third < 0 of true -> mochi_nth(erlang:length(Array_2) + Two_third + 1, Array_2); _ -> mochi_nth(Two_third + 1, Array_2) end end) < Target_2) of
        true -> Left_3 = (Two_third + 1),
            Left_5 = Left_3,
            Right_5 = Right_2;
        _ -> Left_4 = (One_third + 1),
            Right_4 = (Two_third - 1),
            Left_5 = Left_4,
            Right_5 = Right_4
    end,
            Left_6 = Left_5,
            Right_6 = Right_5
    end,
            Fun_2_loop(Array_2, Left_6, Right_6, Target_2);
        _ -> {Array_2, Left_2, Right_2, Target_2}
    end
end,
{Array_2, Left_6, Right_6, Target_2} = Fun_2(Array_2, Left_2, Right_2, Target_2),
        -1
    catch {return, RetCatch} -> RetCatch end.

rec_ternary_search(Left_7, Right_7, Array_3, Target_3) ->
    try
        case (Left_7 =< Right_7) of
        true -> case ((Right_7 - Left_7) < 10) of
        true -> Idx_3 = lin_search(Left_7, (Right_7 + 1), Array_3, Target_3),
            throw({return, Idx_3}),
            Idx_4 = Idx_3;
        _ -> Idx_4 = nil
    end,
            One_third_2 = (Left_7 + ((Right_7 - Left_7) div 3)),
            Two_third_2 = (Right_7 - ((Right_7 - Left_7) div 3)),
            case ((case erlang:is_map(Array_3) of true -> maps:get(One_third_2, Array_3, nil); _ -> case One_third_2 < 0 of true -> mochi_nth(erlang:length(Array_3) + One_third_2 + 1, Array_3); _ -> mochi_nth(One_third_2 + 1, Array_3) end end) == Target_3) of
        true -> throw({return, One_third_2});
        _ -> ok
    end,
            case ((case erlang:is_map(Array_3) of true -> maps:get(Two_third_2, Array_3, nil); _ -> case Two_third_2 < 0 of true -> mochi_nth(erlang:length(Array_3) + Two_third_2 + 1, Array_3); _ -> mochi_nth(Two_third_2 + 1, Array_3) end end) == Target_3) of
        true -> throw({return, Two_third_2});
        _ -> ok
    end,
            case (Target_3 < (case erlang:is_map(Array_3) of true -> maps:get(One_third_2, Array_3, nil); _ -> case One_third_2 < 0 of true -> mochi_nth(erlang:length(Array_3) + One_third_2 + 1, Array_3); _ -> mochi_nth(One_third_2 + 1, Array_3) end end)) of
        true -> throw({return, rec_ternary_search(Left_7, (One_third_2 - 1), Array_3, Target_3)});
        _ -> ok
    end,
            case ((case erlang:is_map(Array_3) of true -> maps:get(Two_third_2, Array_3, nil); _ -> case Two_third_2 < 0 of true -> mochi_nth(erlang:length(Array_3) + Two_third_2 + 1, Array_3); _ -> mochi_nth(Two_third_2 + 1, Array_3) end end) < Target_3) of
        true -> throw({return, rec_ternary_search((Two_third_2 + 1), Right_7, Array_3, Target_3)});
        _ -> ok
    end,
            throw({return, rec_ternary_search((One_third_2 + 1), (Two_third_2 - 1), Array_3, Target_3)}),
            Idx_5 = Idx_4,
            One_third_3 = One_third_2,
            Two_third_3 = Two_third_2;
        _ -> Idx_5 = nil,
            One_third_3 = nil,
            Two_third_3 = nil
    end,
        -1
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Test_list = [0, 1, 2, 8, 13, 17, 19, 32, 42],
        io:format("~ts~n", [mochi_str(ite_ternary_search(Test_list, 3))]),
        io:format("~ts~n", [mochi_str(ite_ternary_search(Test_list, 13))]),
        io:format("~ts~n", [mochi_str(rec_ternary_search(0, (erlang:length(Test_list) - 1), Test_list, 3))]),
        io:format("~ts~n", [mochi_str(rec_ternary_search(0, (erlang:length(Test_list) - 1), Test_list, 13))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('precision', 10),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
