#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, partition/2, quick_select/2, median/1]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

partition(Data, Pivot) ->
    try
        Less = [],
        Equal = [],
        Greater = [],
        Fun = fun Fun_loop(List, Data, Equal, Greater, Less, Pivot) ->
    case List of
        [] -> {Data, Equal, Greater, Less, Pivot};
        [I|I_rest] ->
            V = (case erlang:is_map(Data) of true -> maps:get(I, Data, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Data) + I + 1, Data); _ -> mochi_nth(I + 1, Data) end end),
            case (V < Pivot) of
        true -> Less_2 = lists:append((case Less of nil -> []; _ -> Less end), [V]),
            Equal_4 = Equal,
            Greater_4 = Greater,
            Less_3 = Less_2;
        _ -> case (V > Pivot) of
        true -> Greater_2 = lists:append((case Greater of nil -> []; _ -> Greater end), [V]),
            Equal_3 = Equal,
            Greater_3 = Greater_2;
        _ -> Equal_2 = lists:append((case Equal of nil -> []; _ -> Equal end), [V]),
            Equal_3 = Equal_2,
            Greater_3 = Greater
    end,
            Equal_4 = Equal_3,
            Greater_4 = Greater_3,
            Less_3 = Less
    end,
            Fun_loop(I_rest, Data, Equal_4, Greater_4, Less_3, Pivot);
        _ -> {Data, Equal, Greater, Less, Pivot}
    end
end,
{Data, Equal_4, Greater_4, Less_3, Pivot} = Fun(lists:seq(0, (erlang:length(Data)) - 1), Data, Equal, Greater, Less, Pivot),
        [Less_3, Equal_4, Greater_4]
    catch {return, Ret} -> Ret end.

quick_select(Items, Index) ->
    try
        case ((Index < 0) orelse (Index >= erlang:length(Items))) of
        true -> throw({return, -1});
        _ -> ok
    end,
        Pivot_2 = (case erlang:is_map(Items) of true -> maps:get(mochi_safe_div(erlang:length(Items), 2), Items, nil); _ -> case mochi_safe_div(erlang:length(Items), 2) < 0 of true -> mochi_nth(erlang:length(Items) + mochi_safe_div(erlang:length(Items), 2) + 1, Items); _ -> mochi_nth(mochi_safe_div(erlang:length(Items), 2) + 1, Items) end end),
        Parts = partition(Items, Pivot_2),
        Smaller = (case erlang:is_map(Parts) of true -> maps:get(0, Parts, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Parts) + 0 + 1, Parts); _ -> mochi_nth(0 + 1, Parts) end end),
        Equal_5 = (case erlang:is_map(Parts) of true -> maps:get(1, Parts, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Parts) + 1 + 1, Parts); _ -> mochi_nth(1 + 1, Parts) end end),
        Larger = (case erlang:is_map(Parts) of true -> maps:get(2, Parts, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Parts) + 2 + 1, Parts); _ -> mochi_nth(2 + 1, Parts) end end),
        Count = erlang:length(Equal_5),
        M = erlang:length(Smaller),
        case ((M =< Index) andalso (Index < (M + Count))) of
        true -> throw({return, Pivot_2});
        _ -> case (Index < M) of
        true -> throw({return, quick_select(Smaller, Index)});
        _ -> throw({return, quick_select(Larger, (Index - (M + Count)))})
    end
    end,
        nil
    catch {return, Ret} -> Ret end.

median(Items_2) ->
    try
        N = erlang:length(Items_2),
        Mid = (N div 2),
        case (mochi_mod(N, 2) /= 0) of
        true -> throw({return, mochi_safe_mul(1.0, quick_select(Items_2, Mid))}),
            High_2 = nil,
            Low_2 = nil;
        _ -> Low = quick_select(Items_2, (Mid - 1)),
            High = quick_select(Items_2, Mid),
            throw({return, mochi_safe_div(mochi_safe_mul(1.0, (Low + High)), 2.0)}),
            High_2 = High,
            Low_2 = Low
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(quick_select([2, 4, 5, 7, 899, 54, 32], 5))]),
    io:format("~ts~n", [mochi_str(quick_select([2, 4, 5, 7, 899, 54, 32], 1))]),
    io:format("~ts~n", [mochi_str(quick_select([5, 4, 3, 2], 2))]),
    io:format("~ts~n", [mochi_str(quick_select([3, 5, 7, 10, 2, 12], 3))]),
    io:format("~ts~n", [mochi_str(median([3, 2, 2, 9, 9]))]),
    io:format("~ts~n", [mochi_str(median([2, 2, 9, 9, 9, 3]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
