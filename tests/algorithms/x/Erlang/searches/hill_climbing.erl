#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, score/1, neighbors/1, equal_state/2, contains_state/2, hill_climbing/7, test_f1/2, main/0]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

score(Sp) ->
    try
        nil
    catch {return, RetCatch} -> RetCatch end.

neighbors(Sp_2) ->
    try
        S = maps:get("step", Sp_2, nil),
        [#{"x" => (maps:get("x", Sp_2, nil) - S), "y" => (maps:get("y", Sp_2, nil) - S), "step" => S, "f" => maps:get("f", Sp_2, nil)}, #{"x" => (maps:get("x", Sp_2, nil) - S), "y" => maps:get("y", Sp_2, nil), "step" => S, "f" => maps:get("f", Sp_2, nil)}, #{"x" => (maps:get("x", Sp_2, nil) - S), "y" => (maps:get("y", Sp_2, nil) + S), "step" => S, "f" => maps:get("f", Sp_2, nil)}, #{"x" => maps:get("x", Sp_2, nil), "y" => (maps:get("y", Sp_2, nil) - S), "step" => S, "f" => maps:get("f", Sp_2, nil)}, #{"x" => maps:get("x", Sp_2, nil), "y" => (maps:get("y", Sp_2, nil) + S), "step" => S, "f" => maps:get("f", Sp_2, nil)}, #{"x" => (maps:get("x", Sp_2, nil) + S), "y" => (maps:get("y", Sp_2, nil) - S), "step" => S, "f" => maps:get("f", Sp_2, nil)}, #{"x" => (maps:get("x", Sp_2, nil) + S), "y" => maps:get("y", Sp_2, nil), "step" => S, "f" => maps:get("f", Sp_2, nil)}, #{"x" => (maps:get("x", Sp_2, nil) + S), "y" => (maps:get("y", Sp_2, nil) + S), "step" => S, "f" => maps:get("f", Sp_2, nil)}]
    catch {return, RetCatch} -> RetCatch end.

equal_state(A, B) ->
    try
        ((maps:get("x", A, nil) == maps:get("x", B, nil)) andalso (maps:get("y", A, nil) == maps:get("y", B, nil)))
    catch {return, RetCatch} -> RetCatch end.

contains_state(Lst, Sp_3) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, Lst, Sp_3) ->
    case (I < erlang:length(Lst)) of
        true ->
            case equal_state((case erlang:is_map(Lst) of true -> maps:get(I, Lst, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Lst) + I + 1, Lst); _ -> mochi_nth(I + 1, Lst) end end), Sp_3) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Lst, Sp_3);
        _ -> {I, Lst, Sp_3}
    end
end,
{I_2, Lst, Sp_3} = Fun(I, Lst, Sp_3),
        false
    catch {return, RetCatch} -> RetCatch end.

hill_climbing(Sp_4, Find_max, Max_x, Min_x, Max_y, Min_y, Max_iter) ->
    try
        Current = Sp_4,
        Visited = [],
        Iterations = 0,
        Solution_found = false,
        Fun_3 = fun Fun_3_loop(Current, Find_max, Iterations, Max_iter, Max_x, Max_y, Min_x, Min_y, Solution_found, Sp_4, Visited) ->
    case ((Solution_found == false) andalso (Iterations < Max_iter)) of
        true ->
            try
                Visited_2 = lists:append((case Visited of nil -> []; _ -> Visited end), [Current]),
                Iterations_2 = (Iterations + 1),
                Current_score = score(Current),
                Neighs = neighbors(Current),
                Max_change = -1000000000000000000.0,
                Min_change = 1000000000000000000.0,
                Next = Current,
                Improved = false,
                I_3 = 0,
                Fun_2 = fun Fun_2_loop(Current, Current_score, Find_max, I_3, Improved, Iterations_2, Max_change, Max_iter, Max_x, Max_y, Min_change, Min_x, Min_y, Neighs, Next, Solution_found, Sp_4, Visited_2) ->
    case (I_3 < erlang:length(Neighs)) of
        true ->
            try
                N = (case erlang:is_map(Neighs) of true -> maps:get(I_3, Neighs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Neighs) + I_3 + 1, Neighs); _ -> mochi_nth(I_3 + 1, Neighs) end end),
                I_4 = (I_3 + 1),
                case contains_state(Visited_2, N) of
        true -> throw({continue, Current, Current_score, Find_max, I_4, Improved, Iterations_2, Max_change, Max_iter, Max_x, Max_y, Min_change, Min_x, Min_y, Neighs, Next, Solution_found, Sp_4, Visited_2});
        _ -> ok
    end,
                case ((((maps:get("x", N, nil) > Max_x) orelse (maps:get("x", N, nil) < Min_x)) orelse (maps:get("y", N, nil) > Max_y)) orelse (maps:get("y", N, nil) < Min_y)) of
        true -> throw({continue, Current, Current_score, Find_max, I_4, Improved, Iterations_2, Max_change, Max_iter, Max_x, Max_y, Min_change, Min_x, Min_y, Neighs, Next, Solution_found, Sp_4, Visited_2});
        _ -> ok
    end,
                Change = (score(N) - Current_score),
                case Find_max of
        true -> case ((Change > Max_change) andalso (Change > 0.0)) of
        true -> Max_change_2 = Change,
            Next_2 = N,
            Improved_2 = true,
            Improved_3 = Improved_2,
            Max_change_3 = Max_change_2,
            Next_3 = Next_2;
        _ -> Improved_3 = Improved,
            Max_change_3 = Max_change,
            Next_3 = Next
    end,
            Improved_6 = Improved_3,
            Max_change_4 = Max_change_3,
            Min_change_4 = Min_change,
            Next_6 = Next_3;
        _ -> case ((Change < Min_change) andalso (Change < 0.0)) of
        true -> Min_change_2 = Change,
            Next_4 = N,
            Improved_4 = true,
            Improved_5 = Improved_4,
            Min_change_3 = Min_change_2,
            Next_5 = Next_4;
        _ -> Improved_5 = Improved,
            Min_change_3 = Min_change,
            Next_5 = Next
    end,
            Improved_6 = Improved_5,
            Max_change_4 = Max_change,
            Min_change_4 = Min_change_3,
            Next_6 = Next_5
    end,
                Fun_2_loop(Current, Current_score, Find_max, I_4, Improved_6, Iterations_2, Max_change_4, Max_iter, Max_x, Max_y, Min_change_4, Min_x, Min_y, Neighs, Next_6, Solution_found, Sp_4, Visited_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17} -> Fun_2_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17}
            end;
        _ -> {Current, Current_score, Find_max, I_3, Improved, Iterations_2, Max_change, Max_iter, Max_x, Max_y, Min_change, Min_x, Min_y, Neighs, Next, Solution_found, Sp_4, Visited_2}
    end
end,
{Current, Current_score, Find_max, I_4, Improved_6, Iterations_2, Max_change_4, Max_iter, Max_x, Max_y, Min_change_4, Min_x, Min_y, Neighs, Next_6, Solution_found, Sp_4, Visited_2} = Fun_2(Current, Current_score, Find_max, I_3, Improved, Iterations_2, Max_change, Max_iter, Max_x, Max_y, Min_change, Min_x, Min_y, Neighs, Next, Solution_found, Sp_4, Visited_2),
                case (Improved_6 /= nil) of
        true -> Current_2 = Next_6,
            Current_3 = Current_2,
            Solution_found_3 = Solution_found;
        _ -> Solution_found_2 = true,
            Current_3 = Current,
            Solution_found_3 = Solution_found_2
    end,
                Fun_3_loop(Current_3, Find_max, Iterations_2, Max_iter, Max_x, Max_y, Min_x, Min_y, Solution_found_3, Sp_4, Visited_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10}
            end;
        _ -> {Current, Find_max, Iterations, Max_iter, Max_x, Max_y, Min_x, Min_y, Solution_found, Sp_4, Visited}
    end
end,
{Current_3, Find_max, Iterations_2, Max_iter, Max_x, Max_y, Min_x, Min_y, Solution_found_3, Sp_4, Visited_2} = Fun_3(Current, Find_max, Iterations, Max_iter, Max_x, Max_y, Min_x, Min_y, Solution_found, Sp_4, Visited),
        Current_3
    catch {return, RetCatch} -> RetCatch end.

test_f1(X, Y) ->
    try
        (mochi_safe_mul(X, X) + mochi_safe_mul(Y, Y))
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Prob1 = #{"x" => 3.0, "y" => 4.0, "step" => 1.0, "f" => fun test_f1/2},
        Local_min1 = hill_climbing(Prob1, false, 1000000000.0, -1000000000.0, 1000000000.0, -1000000000.0, 10000),
        io:format("~ts~n", [mochi_str(mochi_to_int(score(Local_min1)))]),
        Prob2 = #{"x" => 12.0, "y" => 47.0, "step" => 1.0, "f" => fun test_f1/2},
        Local_min2 = hill_climbing(Prob2, false, 100.0, 5.0, 50.0, -5.0, 10000),
        io:format("~ts~n", [mochi_str(mochi_to_int(score(Local_min2)))]),
        Prob3 = #{"x" => 3.0, "y" => 4.0, "step" => 1.0, "f" => fun test_f1/2},
        Local_max = hill_climbing(Prob3, true, 1000000000.0, -1000000000.0, 1000000000.0, -1000000000.0, 1000),
        io:format("~ts~n", [mochi_str(mochi_to_int(score(Local_max)))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
