#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, double_linear_search/2, main/0, build_range/1]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

double_linear_search(Array, Search_item) ->
    try
        Start_ind = 0,
        End_ind = (erlang:length(Array) - 1),
        Fun = fun Fun_loop(Array, End_ind, Search_item, Start_ind) ->
    case (Start_ind =< End_ind) of
        true ->
            case ((case erlang:is_map(Array) of true -> maps:get(Start_ind, Array, nil); _ -> case Start_ind < 0 of true -> mochi_nth(erlang:length(Array) + Start_ind + 1, Array); _ -> mochi_nth(Start_ind + 1, Array) end end) == Search_item) of
        true -> throw({return, Start_ind});
        _ -> ok
    end,
            case ((case erlang:is_map(Array) of true -> maps:get(End_ind, Array, nil); _ -> case End_ind < 0 of true -> mochi_nth(erlang:length(Array) + End_ind + 1, Array); _ -> mochi_nth(End_ind + 1, Array) end end) == Search_item) of
        true -> throw({return, End_ind});
        _ -> ok
    end,
            Start_ind_2 = (Start_ind + 1),
            End_ind_2 = (End_ind - 1),
            Fun_loop(Array, End_ind_2, Search_item, Start_ind_2);
        _ -> {Array, End_ind, Search_item, Start_ind}
    end
end,
{Array, End_ind_2, Search_item, Start_ind_2} = Fun(Array, End_ind, Search_item, Start_ind),
        -1
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Data = build_range(100),
        io:format("~ts~n", [mochi_str(double_linear_search(Data, 40))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

build_range(N) ->
    try
        Res = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, N, Res) ->
    case (I < N) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [I]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, N, Res_2);
        _ -> {I, N, Res}
    end
end,
{I_2, N, Res_2} = Fun_2(I, N, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
