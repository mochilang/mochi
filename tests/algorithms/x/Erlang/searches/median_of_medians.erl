#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, set_at_int/3, sort_int/1, median_of_five/1, median_of_medians/1, quick_select/2, main/0]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

set_at_int(Xs, Idx, Value) ->
    try
        I = 0,
        Res = [],
        Fun = fun Fun_loop(I, Idx, Res, Value, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case (I == Idx) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Value]),
            Res_4 = Res_2;
        _ -> Res_3 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            Res_4 = Res_3
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Idx, Res_4, Value, Xs);
        _ -> {I, Idx, Res, Value, Xs}
    end
end,
{I_2, Idx, Res_4, Value, Xs} = Fun(I, Idx, Res, Value, Xs),
        Res_4
    catch {return, Ret} -> Ret end.

sort_int(Xs_2) ->
    try
        Res_5 = Xs_2,
        I_3 = 1,
        Fun_3 = fun Fun_3_loop(I_3, Res_5, Xs_2) ->
    case (I_3 < erlang:length(Res_5)) of
        true ->
            Key = (case erlang:is_map(Res_5) of true -> maps:get(I_3, Res_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Res_5) + I_3 + 1, Res_5); _ -> mochi_nth(I_3 + 1, Res_5) end end),
            J = (I_3 - 1),
            Fun_2 = fun Fun_2_loop(I_3, J, Key, Res_5, Xs_2) ->
    case ((J >= 0) andalso ((case erlang:is_map(Res_5) of true -> maps:get(J, Res_5, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Res_5) + J + 1, Res_5); _ -> mochi_nth(J + 1, Res_5) end end) > Key)) of
        true ->
            Res_6 = set_at_int(Res_5, (J + 1), (case erlang:is_map(Res_5) of true -> maps:get(J, Res_5, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Res_5) + J + 1, Res_5); _ -> mochi_nth(J + 1, Res_5) end end)),
            J_2 = (J - 1),
            Fun_2_loop(I_3, J_2, Key, Res_6, Xs_2);
        _ -> {I_3, J, Key, Res_5, Xs_2}
    end
end,
{I_3, J_2, Key, Res_6, Xs_2} = Fun_2(I_3, J, Key, Res_5, Xs_2),
            Res_7 = set_at_int(Res_6, (J_2 + 1), Key),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Res_7, Xs_2);
        _ -> {I_3, Res_5, Xs_2}
    end
end,
{I_4, Res_7, Xs_2} = Fun_3(I_3, Res_5, Xs_2),
        Res_7
    catch {return, Ret} -> Ret end.

median_of_five(Arr) ->
    try
        Sorted = sort_int(Arr),
        (case erlang:is_map(Sorted) of true -> maps:get(mochi_safe_div(erlang:length(Sorted), 2), Sorted, nil); _ -> case mochi_safe_div(erlang:length(Sorted), 2) < 0 of true -> mochi_nth(erlang:length(Sorted) + mochi_safe_div(erlang:length(Sorted), 2) + 1, Sorted); _ -> mochi_nth(mochi_safe_div(erlang:length(Sorted), 2) + 1, Sorted) end end)
    catch {return, Ret} -> Ret end.

median_of_medians(Arr_2) ->
    try
        case (erlang:length(Arr_2) =< 5) of
        true -> throw({return, median_of_five(Arr_2)});
        _ -> ok
    end,
        Medians = [],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Arr_2, I_5, Medians) ->
    case (I_5 < erlang:length(Arr_2)) of
        true ->
            case ((I_5 + 5) =< erlang:length(Arr_2)) of
        true -> Medians_2 = lists:append((case Medians of nil -> []; _ -> Medians end), [median_of_five(lists:sublist(Arr_2, I_5 + 1, ((I_5 + 5) - I_5)))]),
            Medians_4 = Medians_2;
        _ -> Medians_3 = lists:append((case Medians of nil -> []; _ -> Medians end), [median_of_five(lists:sublist(Arr_2, I_5 + 1, (erlang:length(Arr_2) - I_5)))]),
            Medians_4 = Medians_3
    end,
            I_6 = (I_5 + 5),
            Fun_4_loop(Arr_2, I_6, Medians_4);
        _ -> {Arr_2, I_5, Medians}
    end
end,
{Arr_2, I_6, Medians_4} = Fun_4(Arr_2, I_5, Medians),
        median_of_medians(Medians_4)
    catch {return, Ret} -> Ret end.

quick_select(Arr_3, Target) ->
    try
        case (Target > erlang:length(Arr_3)) of
        true -> throw({return, -1});
        _ -> ok
    end,
        X = median_of_medians(Arr_3),
        Left = [],
        Right = [],
        Check = false,
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(Arr_3, Check, I_7, Left, Right, Target, X) ->
    case (I_7 < erlang:length(Arr_3)) of
        true ->
            case ((case erlang:is_map(Arr_3) of true -> maps:get(I_7, Arr_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Arr_3) + I_7 + 1, Arr_3); _ -> mochi_nth(I_7 + 1, Arr_3) end end) < X) of
        true -> Left_2 = lists:append((case Left of nil -> []; _ -> Left end), [(case erlang:is_map(Arr_3) of true -> maps:get(I_7, Arr_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Arr_3) + I_7 + 1, Arr_3); _ -> mochi_nth(I_7 + 1, Arr_3) end end)]),
            Check_6 = Check,
            Left_3 = Left_2,
            Right_8 = Right;
        _ -> case ((case erlang:is_map(Arr_3) of true -> maps:get(I_7, Arr_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Arr_3) + I_7 + 1, Arr_3); _ -> mochi_nth(I_7 + 1, Arr_3) end end) > X) of
        true -> Right_2 = lists:append((case Right of nil -> []; _ -> Right end), [(case erlang:is_map(Arr_3) of true -> maps:get(I_7, Arr_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Arr_3) + I_7 + 1, Arr_3); _ -> mochi_nth(I_7 + 1, Arr_3) end end)]),
            Check_5 = Check,
            Right_7 = Right_2;
        _ -> case ((case erlang:is_map(Arr_3) of true -> maps:get(I_7, Arr_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Arr_3) + I_7 + 1, Arr_3); _ -> mochi_nth(I_7 + 1, Arr_3) end end) == X) of
        true -> case mochi_not(Check) of
        true -> Check_2 = true,
            Check_3 = Check_2,
            Right_4 = Right;
        _ -> Right_3 = lists:append((case Right of nil -> []; _ -> Right end), [(case erlang:is_map(Arr_3) of true -> maps:get(I_7, Arr_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Arr_3) + I_7 + 1, Arr_3); _ -> mochi_nth(I_7 + 1, Arr_3) end end)]),
            Check_3 = Check,
            Right_4 = Right_3
    end,
            Check_4 = Check_3,
            Right_6 = Right_4;
        _ -> Right_5 = lists:append((case Right of nil -> []; _ -> Right end), [(case erlang:is_map(Arr_3) of true -> maps:get(I_7, Arr_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Arr_3) + I_7 + 1, Arr_3); _ -> mochi_nth(I_7 + 1, Arr_3) end end)]),
            Check_4 = Check,
            Right_6 = Right_5
    end,
            Check_5 = Check_4,
            Right_7 = Right_6
    end,
            Check_6 = Check_5,
            Left_3 = Left,
            Right_8 = Right_7
    end,
            I_8 = (I_7 + 1),
            Fun_5_loop(Arr_3, Check_6, I_8, Left_3, Right_8, Target, X);
        _ -> {Arr_3, Check, I_7, Left, Right, Target, X}
    end
end,
{Arr_3, Check_6, I_8, Left_3, Right_8, Target, X} = Fun_5(Arr_3, Check, I_7, Left, Right, Target, X),
        Rank_x = (erlang:length(Left_3) + 1),
        Answer = 0,
        case (Rank_x == Target) of
        true -> Answer_2 = X,
            Answer_6 = Answer_2;
        _ -> case (Rank_x > Target) of
        true -> Answer_3 = quick_select(Left_3, Target),
            Answer_5 = Answer_3;
        _ -> Answer_4 = quick_select(Right_8, (Target - Rank_x)),
            Answer_5 = Answer_4
    end,
            Answer_6 = Answer_5
    end,
        Answer_6
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_str(median_of_five([5, 4, 3, 2]))]),
        io:format("~ts~n", [mochi_str(quick_select([2, 4, 5, 7, 899, 54, 32], 5))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
