#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, int_sqrt/1, jump_search/2, main/0]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

int_sqrt(N) ->
    try
        X = 0,
        Fun = fun Fun_loop(N, X) ->
    case (((X + 1) * (X + 1)) =< N) of
        true ->
            X_2 = (X + 1),
            Fun_loop(N, X_2);
        _ -> {N, X}
    end
end,
{N, X_2} = Fun(N, X),
        X_2
    catch {return, RetCatch} -> RetCatch end.

jump_search(Arr, Item) ->
    try
        Arr_size = erlang:length(Arr),
        Block_size = int_sqrt(Arr_size),
        Prev = 0,
        Step = Block_size,
        Fun_2 = fun Fun_2_loop(Arr, Arr_size, Block_size, Item, Prev, Step) ->
    case ((Step < Arr_size) andalso ((case erlang:is_map(Arr) of true -> maps:get((Step - 1), Arr, nil); _ -> case (Step - 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (Step - 1) + 1, Arr); _ -> mochi_nth((Step - 1) + 1, Arr) end end) < Item)) of
        true ->
            Prev_2 = Step,
            Step_2 = (Step + Block_size),
            case (Prev_2 >= Arr_size) of
        true -> throw({return, -1});
        _ -> ok
    end,
            Fun_2_loop(Arr, Arr_size, Block_size, Item, Prev_2, Step_2);
        _ -> {Arr, Arr_size, Block_size, Item, Prev, Step}
    end
end,
{Arr, Arr_size, Block_size, Item, Prev_2, Step_2} = Fun_2(Arr, Arr_size, Block_size, Item, Prev, Step),
        Fun_3 = fun Fun_3_loop(Arr, Arr_size, Block_size, Item, Prev_2, Step_2) ->
    case ((Prev_2 < Arr_size) andalso ((case erlang:is_map(Arr) of true -> maps:get(Prev_2, Arr, nil); _ -> case Prev_2 < 0 of true -> mochi_nth(erlang:length(Arr) + Prev_2 + 1, Arr); _ -> mochi_nth(Prev_2 + 1, Arr) end end) < Item)) of
        true ->
            Prev_3 = (Prev_2 + 1),
            case (Prev_3 == Step_2) of
        true -> throw({return, -1});
        _ -> ok
    end,
            Fun_3_loop(Arr, Arr_size, Block_size, Item, Prev_3, Step_2);
        _ -> {Arr, Arr_size, Block_size, Item, Prev_2, Step_2}
    end
end,
{Arr, Arr_size, Block_size, Item, Prev_3, Step_2} = Fun_3(Arr, Arr_size, Block_size, Item, Prev_2, Step_2),
        case ((Prev_3 < Arr_size) andalso ((case erlang:is_map(Arr) of true -> maps:get(Prev_3, Arr, nil); _ -> case Prev_3 < 0 of true -> mochi_nth(erlang:length(Arr) + Prev_3 + 1, Arr); _ -> mochi_nth(Prev_3 + 1, Arr) end end) == Item)) of
        true -> throw({return, Prev_3});
        _ -> ok
    end,
        -1
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_str(jump_search([0, 1, 2, 3, 4, 5], 3))]),
        io:format("~ts~n", [mochi_str(jump_search([-5, -2, -1], -1))]),
        io:format("~ts~n", [mochi_str(jump_search([0, 5, 10, 20], 8))]),
        io:format("~ts~n", [mochi_str(jump_search([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 55))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
