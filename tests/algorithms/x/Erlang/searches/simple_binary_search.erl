#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, binary_search/2]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

binary_search(Arr, Item) ->
    try
        Low = 0,
        High = (erlang:length(Arr) - 1),
        Fun = fun Fun_loop(Arr, High, Item, Low) ->
    case (Low =< High) of
        true ->
            Mid = ((Low + High) div 2),
            Val = (case erlang:is_map(Arr) of true -> maps:get(Mid, Arr, nil); _ -> case Mid < 0 of true -> mochi_nth(erlang:length(Arr) + Mid + 1, Arr); _ -> mochi_nth(Mid + 1, Arr) end end),
            case (Val == Item) of
        true -> throw({return, true});
        _ -> ok
    end,
            case (Item < Val) of
        true -> High_2 = (Mid - 1),
            High_3 = High_2,
            Low_3 = Low;
        _ -> Low_2 = (Mid + 1),
            High_3 = High,
            Low_3 = Low_2
    end,
            Fun_loop(Arr, High_3, Item, Low_3);
        _ -> {Arr, High, Item, Low}
    end
end,
{Arr, High_3, Item, Low_3} = Fun(Arr, High, Item, Low),
        false
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('arr1', [0, 1, 2, 8, 13, 17, 19, 32, 42]),
    io:format("~ts~n", [mochi_repr(binary_search(erlang:get('arr1'), 3))]),
    io:format("~ts~n", [mochi_repr(binary_search(erlang:get('arr1'), 13))]),
    erlang:put('arr2', [4, 4, 5, 6, 7]),
    io:format("~ts~n", [mochi_repr(binary_search(erlang:get('arr2'), 4))]),
    io:format("~ts~n", [mochi_repr(binary_search(erlang:get('arr2'), -10))]),
    erlang:put('arr3', [-18, 2]),
    io:format("~ts~n", [mochi_repr(binary_search(erlang:get('arr3'), -18))]),
    erlang:put('arr4', [5]),
    io:format("~ts~n", [mochi_repr(binary_search(erlang:get('arr4'), 5))]),
    erlang:put('arr5', []),
    io:format("~ts~n", [mochi_repr(binary_search(erlang:get('arr5'), 1))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
