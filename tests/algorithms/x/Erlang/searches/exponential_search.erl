#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_sorted/1, exponential_search/2]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

is_sorted(Xs) ->
    try
        I = 1,
        Fun = fun Fun_loop(I, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get((I - 1), Xs, nil); _ -> case (I - 1) < 0 of true -> mochi_nth(erlang:length(Xs) + (I - 1) + 1, Xs); _ -> mochi_nth((I - 1) + 1, Xs) end end) > (case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Xs);
        _ -> {I, Xs}
    end
end,
{I_2, Xs} = Fun(I, Xs),
        true
    catch {return, RetCatch} -> RetCatch end.

exponential_search(Arr, Item) ->
    try
        case mochi_not(is_sorted(Arr)) of
        true -> erlang:error({panic, "sorted_collection must be sorted in ascending order"});
        _ -> ok
    end,
        case (erlang:length(Arr) == 0) of
        true -> throw({return, -1});
        _ -> ok
    end,
        case ((case erlang:is_map(Arr) of true -> maps:get(0, Arr, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr) + 0 + 1, Arr); _ -> mochi_nth(0 + 1, Arr) end end) == Item) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Bound = 1,
        Fun_2 = fun Fun_2_loop(Arr, Bound, Item) ->
    case ((Bound < erlang:length(Arr)) andalso ((case erlang:is_map(Arr) of true -> maps:get(Bound, Arr, nil); _ -> case Bound < 0 of true -> mochi_nth(erlang:length(Arr) + Bound + 1, Arr); _ -> mochi_nth(Bound + 1, Arr) end end) < Item)) of
        true ->
            Bound_2 = (Bound * 2),
            Fun_2_loop(Arr, Bound_2, Item);
        _ -> {Arr, Bound, Item}
    end
end,
{Arr, Bound_2, Item} = Fun_2(Arr, Bound, Item),
        Left = mochi_safe_div(Bound_2, 2),
        Right = Bound_2,
        case (Right >= erlang:length(Arr)) of
        true -> Right_2 = (erlang:length(Arr) - 1),
            Right_3 = Right_2;
        _ -> Right_3 = Right
    end,
        Fun_3 = fun Fun_3_loop(Arr, Bound_2, Item, Left, Right_3) ->
    case (Left =< Right_3) of
        true ->
            Mid = (Left + mochi_safe_div((Right_3 - Left), 2)),
            case ((case erlang:is_map(Arr) of true -> maps:get(Mid, Arr, nil); _ -> case Mid < 0 of true -> mochi_nth(erlang:length(Arr) + Mid + 1, Arr); _ -> mochi_nth(Mid + 1, Arr) end end) == Item) of
        true -> throw({return, Mid});
        _ -> ok
    end,
            case ((case erlang:is_map(Arr) of true -> maps:get(Mid, Arr, nil); _ -> case Mid < 0 of true -> mochi_nth(erlang:length(Arr) + Mid + 1, Arr); _ -> mochi_nth(Mid + 1, Arr) end end) > Item) of
        true -> Right_4 = (Mid - 1),
            Left_3 = Left,
            Right_5 = Right_4;
        _ -> Left_2 = (Mid + 1),
            Left_3 = Left_2,
            Right_5 = Right_3
    end,
            Fun_3_loop(Arr, Bound_2, Item, Left_3, Right_5);
        _ -> {Arr, Bound_2, Item, Left, Right_3}
    end
end,
{Arr, Bound_2, Item, Left_3, Right_5} = Fun_3(Arr, Bound_2, Item, Left, Right_3),
        -1
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
