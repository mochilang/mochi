#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, interpolation_search/2, interpolation_search_recursive/4, interpolation_search_by_recursion/2]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

interpolation_search(Arr, Item) ->
    try
        Left = 0,
        Right = (erlang:length(Arr) - 1),
        Fun = fun Fun_loop(Arr, Item, Left, Right) ->
    case (Left =< Right) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(Left, Arr, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Arr) + Left + 1, Arr); _ -> mochi_nth(Left + 1, Arr) end end) == (case erlang:is_map(Arr) of true -> maps:get(Right, Arr, nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(Arr) + Right + 1, Arr); _ -> mochi_nth(Right + 1, Arr) end end)) of
        true -> case ((case erlang:is_map(Arr) of true -> maps:get(Left, Arr, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Arr) + Left + 1, Arr); _ -> mochi_nth(Left + 1, Arr) end end) == Item) of
        true -> throw({return, Left});
        _ -> ok
    end,
            throw({return, -1});
        _ -> ok
    end,
            Point = (Left + mochi_safe_div(((Item - (case erlang:is_map(Arr) of true -> maps:get(Left, Arr, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Arr) + Left + 1, Arr); _ -> mochi_nth(Left + 1, Arr) end end)) * (Right - Left)), ((case erlang:is_map(Arr) of true -> maps:get(Right, Arr, nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(Arr) + Right + 1, Arr); _ -> mochi_nth(Right + 1, Arr) end end) - (case erlang:is_map(Arr) of true -> maps:get(Left, Arr, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Arr) + Left + 1, Arr); _ -> mochi_nth(Left + 1, Arr) end end)))),
            case ((Point < 0) orelse (Point >= erlang:length(Arr))) of
        true -> throw({return, -1});
        _ -> ok
    end,
            Current = (case erlang:is_map(Arr) of true -> maps:get(Point, Arr, nil); _ -> case Point < 0 of true -> mochi_nth(erlang:length(Arr) + Point + 1, Arr); _ -> mochi_nth(Point + 1, Arr) end end),
            case (Current == Item) of
        true -> throw({return, Point});
        _ -> ok
    end,
            case (Point < Left) of
        true -> Right_2 = Left,
            Left_2 = Point,
            Left_7 = Left_2,
            Right_7 = Right_2;
        _ -> case (Point > Right) of
        true -> Left_3 = Right,
            Right_3 = Point,
            Left_6 = Left_3,
            Right_6 = Right_3;
        _ -> case (Item < Current) of
        true -> Right_4 = (Point - 1),
            Left_5 = Left,
            Right_5 = Right_4;
        _ -> Left_4 = (Point + 1),
            Left_5 = Left_4,
            Right_5 = Right
    end,
            Left_6 = Left_5,
            Right_6 = Right_5
    end,
            Left_7 = Left_6,
            Right_7 = Right_6
    end,
            Fun_loop(Arr, Item, Left_7, Right_7);
        _ -> {Arr, Item, Left, Right}
    end
end,
{Arr, Item, Left_7, Right_7} = Fun(Arr, Item, Left, Right),
        -1
    catch {return, Ret} -> Ret end.

interpolation_search_recursive(Arr_2, Item_2, Left_8, Right_8) ->
    try
        case (Left_8 > Right_8) of
        true -> throw({return, -1});
        _ -> ok
    end,
        case ((case erlang:is_map(Arr_2) of true -> maps:get(Left_8, Arr_2, nil); _ -> case Left_8 < 0 of true -> mochi_nth(erlang:length(Arr_2) + Left_8 + 1, Arr_2); _ -> mochi_nth(Left_8 + 1, Arr_2) end end) == (case erlang:is_map(Arr_2) of true -> maps:get(Right_8, Arr_2, nil); _ -> case Right_8 < 0 of true -> mochi_nth(erlang:length(Arr_2) + Right_8 + 1, Arr_2); _ -> mochi_nth(Right_8 + 1, Arr_2) end end)) of
        true -> case ((case erlang:is_map(Arr_2) of true -> maps:get(Left_8, Arr_2, nil); _ -> case Left_8 < 0 of true -> mochi_nth(erlang:length(Arr_2) + Left_8 + 1, Arr_2); _ -> mochi_nth(Left_8 + 1, Arr_2) end end) == Item_2) of
        true -> throw({return, Left_8});
        _ -> ok
    end,
            throw({return, -1});
        _ -> ok
    end,
        Point_2 = (Left_8 + mochi_safe_div(((Item_2 - (case erlang:is_map(Arr_2) of true -> maps:get(Left_8, Arr_2, nil); _ -> case Left_8 < 0 of true -> mochi_nth(erlang:length(Arr_2) + Left_8 + 1, Arr_2); _ -> mochi_nth(Left_8 + 1, Arr_2) end end)) * (Right_8 - Left_8)), ((case erlang:is_map(Arr_2) of true -> maps:get(Right_8, Arr_2, nil); _ -> case Right_8 < 0 of true -> mochi_nth(erlang:length(Arr_2) + Right_8 + 1, Arr_2); _ -> mochi_nth(Right_8 + 1, Arr_2) end end) - (case erlang:is_map(Arr_2) of true -> maps:get(Left_8, Arr_2, nil); _ -> case Left_8 < 0 of true -> mochi_nth(erlang:length(Arr_2) + Left_8 + 1, Arr_2); _ -> mochi_nth(Left_8 + 1, Arr_2) end end)))),
        case ((Point_2 < 0) orelse (Point_2 >= erlang:length(Arr_2))) of
        true -> throw({return, -1});
        _ -> ok
    end,
        case ((case erlang:is_map(Arr_2) of true -> maps:get(Point_2, Arr_2, nil); _ -> case Point_2 < 0 of true -> mochi_nth(erlang:length(Arr_2) + Point_2 + 1, Arr_2); _ -> mochi_nth(Point_2 + 1, Arr_2) end end) == Item_2) of
        true -> throw({return, Point_2});
        _ -> ok
    end,
        case (Point_2 < Left_8) of
        true -> throw({return, interpolation_search_recursive(Arr_2, Item_2, Point_2, Left_8)});
        _ -> ok
    end,
        case (Point_2 > Right_8) of
        true -> throw({return, interpolation_search_recursive(Arr_2, Item_2, Right_8, Left_8)});
        _ -> ok
    end,
        case ((case erlang:is_map(Arr_2) of true -> maps:get(Point_2, Arr_2, nil); _ -> case Point_2 < 0 of true -> mochi_nth(erlang:length(Arr_2) + Point_2 + 1, Arr_2); _ -> mochi_nth(Point_2 + 1, Arr_2) end end) > Item_2) of
        true -> throw({return, interpolation_search_recursive(Arr_2, Item_2, Left_8, (Point_2 - 1))});
        _ -> ok
    end,
        interpolation_search_recursive(Arr_2, Item_2, (Point_2 + 1), Right_8)
    catch {return, Ret} -> Ret end.

interpolation_search_by_recursion(Arr_3, Item_3) ->
    try
        interpolation_search_recursive(Arr_3, Item_3, 0, (erlang:length(Arr_3) - 1))
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(interpolation_search([1, 2, 3, 4, 5], 2))]),
    io:format("~ts~n", [mochi_str(interpolation_search([1, 2, 3, 4, 5], 6))]),
    io:format("~ts~n", [mochi_str(interpolation_search_by_recursion([0, 5, 7, 10, 15], 5))]),
    io:format("~ts~n", [mochi_str(interpolation_search_by_recursion([0, 5, 7, 10, 15], 100))]),
    io:format("~ts~n", [mochi_str(interpolation_search_by_recursion([5, 5, 5, 5, 5], 3))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
