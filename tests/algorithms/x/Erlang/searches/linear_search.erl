#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, linear_search/2, rec_linear_search/4]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

linear_search(Sequence, Target) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, Sequence, Target) ->
    case (I < erlang:length(Sequence)) of
        true ->
            case ((case erlang:is_map(Sequence) of true -> maps:get(I, Sequence, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sequence) + I + 1, Sequence); _ -> mochi_nth(I + 1, Sequence) end end) == Target) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Sequence, Target);
        _ -> {I, Sequence, Target}
    end
end,
{I_2, Sequence, Target} = Fun(I, Sequence, Target),
        -1
    catch {return, Ret} -> Ret end.

rec_linear_search(Sequence_2, Low, High, Target_2) ->
    try
        case mochi_not(((((0 =< High) andalso (High < erlang:length(Sequence_2))) andalso (0 =< Low)) andalso (Low < erlang:length(Sequence_2)))) of
        true -> erlang:error({panic, "Invalid upper or lower bound!"});
        _ -> ok
    end,
        case (High < Low) of
        true -> throw({return, -1});
        _ -> ok
    end,
        case ((case erlang:is_map(Sequence_2) of true -> maps:get(Low, Sequence_2, nil); _ -> case Low < 0 of true -> mochi_nth(erlang:length(Sequence_2) + Low + 1, Sequence_2); _ -> mochi_nth(Low + 1, Sequence_2) end end) == Target_2) of
        true -> throw({return, Low});
        _ -> ok
    end,
        case ((case erlang:is_map(Sequence_2) of true -> maps:get(High, Sequence_2, nil); _ -> case High < 0 of true -> mochi_nth(erlang:length(Sequence_2) + High + 1, Sequence_2); _ -> mochi_nth(High + 1, Sequence_2) end end) == Target_2) of
        true -> throw({return, High});
        _ -> ok
    end,
        rec_linear_search(Sequence_2, (Low + 1), (High - 1), Target_2)
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(linear_search([0, 5, 7, 10, 15], 0))]),
    io:format("~ts~n", [mochi_str(linear_search([0, 5, 7, 10, 15], 15))]),
    io:format("~ts~n", [mochi_str(linear_search([0, 5, 7, 10, 15], 5))]),
    io:format("~ts~n", [mochi_str(linear_search([0, 5, 7, 10, 15], 6))]),
    io:format("~ts~n", [mochi_str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 0))]),
    io:format("~ts~n", [mochi_str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 700))]),
    io:format("~ts~n", [mochi_str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, 30))]),
    io:format("~ts~n", [mochi_str(rec_linear_search([0, 30, 500, 100, 700], 0, 4, -6))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
