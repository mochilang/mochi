#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_sorted/1, binary_search/2, binary_search_by_recursion/4, exponential_search/2, main/0]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

is_sorted(Arr) ->
    try
        I = 1,
        Fun = fun Fun_loop(Arr, I) ->
    case (I < erlang:length(Arr)) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get((I - 1), Arr, nil); _ -> case (I - 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (I - 1) + 1, Arr); _ -> mochi_nth((I - 1) + 1, Arr) end end) > (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Arr, I_2);
        _ -> {Arr, I}
    end
end,
{Arr, I_2} = Fun(Arr, I),
        true
    catch {return, RetCatch} -> RetCatch end.

binary_search(Sorted_collection, Item) ->
    try
        case mochi_not(is_sorted(Sorted_collection)) of
        true -> throw({return, -1});
        _ -> ok
    end,
        Left = 0,
        Right = (erlang:length(Sorted_collection) - 1),
        Fun_2 = fun Fun_2_loop(Item, Left, Right, Sorted_collection) ->
    case (Left =< Right) of
        true ->
            Midpoint = (Left + ((Right - Left) div 2)),
            Current_item = (case erlang:is_map(Sorted_collection) of true -> maps:get(Midpoint, Sorted_collection, nil); _ -> case Midpoint < 0 of true -> mochi_nth(erlang:length(Sorted_collection) + Midpoint + 1, Sorted_collection); _ -> mochi_nth(Midpoint + 1, Sorted_collection) end end),
            case (Current_item == Item) of
        true -> throw({return, Midpoint});
        _ -> ok
    end,
            case (Item < Current_item) of
        true -> Right_2 = (Midpoint - 1),
            Left_3 = Left,
            Right_3 = Right_2;
        _ -> Left_2 = (Midpoint + 1),
            Left_3 = Left_2,
            Right_3 = Right
    end,
            Fun_2_loop(Item, Left_3, Right_3, Sorted_collection);
        _ -> {Item, Left, Right, Sorted_collection}
    end
end,
{Item, Left_3, Right_3, Sorted_collection} = Fun_2(Item, Left, Right, Sorted_collection),
        -1
    catch {return, RetCatch} -> RetCatch end.

binary_search_by_recursion(Sorted_collection_2, Item_2, Left_4, Right_4) ->
    try
        case (Right_4 < Left_4) of
        true -> throw({return, -1});
        _ -> ok
    end,
        Midpoint_2 = (Left_4 + ((Right_4 - Left_4) div 2)),
        case ((case erlang:is_map(Sorted_collection_2) of true -> maps:get(Midpoint_2, Sorted_collection_2, nil); _ -> case Midpoint_2 < 0 of true -> mochi_nth(erlang:length(Sorted_collection_2) + Midpoint_2 + 1, Sorted_collection_2); _ -> mochi_nth(Midpoint_2 + 1, Sorted_collection_2) end end) == Item_2) of
        true -> throw({return, Midpoint_2});
        _ -> ok
    end,
        case ((case erlang:is_map(Sorted_collection_2) of true -> maps:get(Midpoint_2, Sorted_collection_2, nil); _ -> case Midpoint_2 < 0 of true -> mochi_nth(erlang:length(Sorted_collection_2) + Midpoint_2 + 1, Sorted_collection_2); _ -> mochi_nth(Midpoint_2 + 1, Sorted_collection_2) end end) > Item_2) of
        true -> throw({return, binary_search_by_recursion(Sorted_collection_2, Item_2, Left_4, (Midpoint_2 - 1))});
        _ -> ok
    end,
        binary_search_by_recursion(Sorted_collection_2, Item_2, (Midpoint_2 + 1), Right_4)
    catch {return, RetCatch} -> RetCatch end.

exponential_search(Sorted_collection_3, Item_3) ->
    try
        case mochi_not(is_sorted(Sorted_collection_3)) of
        true -> throw({return, -1});
        _ -> ok
    end,
        case (erlang:length(Sorted_collection_3) == 0) of
        true -> throw({return, -1});
        _ -> ok
    end,
        Bound = 1,
        Fun_3 = fun Fun_3_loop(Bound, Item_3, Sorted_collection_3) ->
    case ((Bound < erlang:length(Sorted_collection_3)) andalso ((case erlang:is_map(Sorted_collection_3) of true -> maps:get(Bound, Sorted_collection_3, nil); _ -> case Bound < 0 of true -> mochi_nth(erlang:length(Sorted_collection_3) + Bound + 1, Sorted_collection_3); _ -> mochi_nth(Bound + 1, Sorted_collection_3) end end) < Item_3)) of
        true ->
            Bound_2 = (Bound * 2),
            Fun_3_loop(Bound_2, Item_3, Sorted_collection_3);
        _ -> {Bound, Item_3, Sorted_collection_3}
    end
end,
{Bound_2, Item_3, Sorted_collection_3} = Fun_3(Bound, Item_3, Sorted_collection_3),
        Left_5 = mochi_safe_div(Bound_2, 2),
        Right_5 = lists:min([Bound_2, (erlang:length(Sorted_collection_3) - 1)]),
        binary_search_by_recursion(Sorted_collection_3, Item_3, Left_5, Right_5)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Data = [0, 5, 7, 10, 15],
        io:format("~ts~n", [mochi_str(binary_search(Data, 0))]),
        io:format("~ts~n", [mochi_str(binary_search(Data, 15))]),
        io:format("~ts~n", [mochi_str(binary_search(Data, 5))]),
        io:format("~ts~n", [mochi_str(binary_search(Data, 6))]),
        io:format("~ts~n", [mochi_str(binary_search_by_recursion(Data, 0, 0, (erlang:length(Data) - 1)))]),
        io:format("~ts~n", [mochi_str(binary_search_by_recursion(Data, 15, 0, (erlang:length(Data) - 1)))]),
        io:format("~ts~n", [mochi_str(binary_search_by_recursion(Data, 5, 0, (erlang:length(Data) - 1)))]),
        io:format("~ts~n", [mochi_str(binary_search_by_recursion(Data, 6, 0, (erlang:length(Data) - 1)))]),
        io:format("~ts~n", [mochi_str(exponential_search(Data, 0))]),
        io:format("~ts~n", [mochi_str(exponential_search(Data, 15))]),
        io:format("~ts~n", [mochi_str(exponential_search(Data, 5))]),
        io:format("~ts~n", [mochi_str(exponential_search(Data, 6))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
