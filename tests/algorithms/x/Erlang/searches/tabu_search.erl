#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, path_cost/2, generate_first_solution/2, copy_path/1, find_neighborhood/2, find_swap/2, tabu_search/4]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

path_cost(Path, Graph) ->
    try
        Total = 0,
        I = 0,
        Fun = fun Fun_loop(Graph, I, Path, Total) ->
    case (I < (erlang:length(Path) - 1)) of
        true ->
            U = (case erlang:is_map(Path) of true -> maps:get(I, Path, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Path) + I + 1, Path); _ -> mochi_nth(I + 1, Path) end end),
            V = (case erlang:is_map(Path) of true -> maps:get((I + 1), Path, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Path) + (I + 1) + 1, Path); _ -> mochi_nth((I + 1) + 1, Path) end end),
            Total_2 = (Total + maps:get(V, maps:get(U, Graph, nil), nil)),
            I_2 = (I + 1),
            Fun_loop(Graph, I_2, Path, Total_2);
        _ -> {Graph, I, Path, Total}
    end
end,
{Graph, I_2, Path, Total_2} = Fun(Graph, I, Path, Total),
        Total_2
    catch {return, RetCatch} -> RetCatch end.

generate_first_solution(Graph_2, Start) ->
    try
        Path_2 = [],
        Visiting = Start,
        Total_3 = 0,
        Fun_3 = fun Fun_3_loop(Graph_2, Path_2, Start, Total_3, Visiting) ->
    case (erlang:length(Path_2) < maps:size(Graph_2)) of
        true ->
            try
                Path_3 = lists:append((case Path_2 of nil -> []; _ -> Path_2 end), [Visiting]),
                Best_node = "",
                Best_cost = 1000000,
                Fun_2 = fun Fun_2_loop(List, Best_cost, Best_node, Graph_2, Path_3, Start, Total_3, Visiting) ->
    case List of
        [] -> {Best_cost, Best_node, Graph_2, Path_3, Start, Total_3, Visiting};
        [N|N_rest] ->
            case (mochi_not(mochi_member(N, Path_3)) andalso (maps:get(N, maps:get(Visiting, Graph_2, nil), nil) < Best_cost)) of
        true -> Best_cost_2 = maps:get(N, maps:get(Visiting, Graph_2, nil), nil),
            Best_node_2 = N,
            Best_cost_3 = Best_cost_2,
            Best_node_3 = Best_node_2;
        _ -> Best_cost_3 = Best_cost,
            Best_node_3 = Best_node
    end,
            Fun_2_loop(N_rest, Best_cost_3, Best_node_3, Graph_2, Path_3, Start, Total_3, Visiting);
        _ -> {Best_cost, Best_node, Graph_2, Path_3, Start, Total_3, Visiting}
    end
end,
{Best_cost_3, Best_node_3, Graph_2, Path_3, Start, Total_3, Visiting} = Fun_2(maps:keys(maps:get(Visiting, Graph_2, nil)), Best_cost, Best_node, Graph_2, Path_3, Start, Total_3, Visiting),
                case (Best_node_3 == "") of
        true -> throw({break, Graph_2, Path_3, Start, Total_3, Visiting});
        _ -> ok
    end,
                Total_4 = (Total_3 + Best_cost_3),
                Visiting_2 = Best_node_3,
                Fun_3_loop(Graph_2, Path_3, Start, Total_4, Visiting_2)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_3_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Graph_2, Path_2, Start, Total_3, Visiting}
    end
end,
{Graph_2, Path_3, Start, Total_4, Visiting_2} = Fun_3(Graph_2, Path_2, Start, Total_3, Visiting),
        Path_4 = lists:append((case Path_3 of nil -> []; _ -> Path_3 end), [Start]),
        Total_5 = (Total_4 + maps:get(Start, maps:get(Visiting_2, Graph_2, nil), nil)),
        #{"path" => Path_4, "cost" => Total_5}
    catch {return, RetCatch} -> RetCatch end.

copy_path(Path_5) ->
    try
        Res = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(I_3, Path_5, Res) ->
    case (I_3 < erlang:length(Path_5)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Path_5) of true -> maps:get(I_3, Path_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Path_5) + I_3 + 1, Path_5); _ -> mochi_nth(I_3 + 1, Path_5) end end)]),
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, Path_5, Res_2);
        _ -> {I_3, Path_5, Res}
    end
end,
{I_4, Path_5, Res_2} = Fun_4(I_3, Path_5, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

find_neighborhood(Sol, Graph_3) ->
    try
        Neighbors = [],
        I_5 = 1,
        Fun_6 = fun Fun_6_loop(Graph_3, I_5, Neighbors, Sol) ->
    case (I_5 < (erlang:length(maps:get("path", Sol, nil)) - 1)) of
        true ->
            J = 1,
            Fun_5 = fun Fun_5_loop(Graph_3, I_5, J, Neighbors, Sol) ->
    case (J < (erlang:length(maps:get("path", Sol, nil)) - 1)) of
        true ->
            case (I_5 /= J) of
        true -> New_path = copy_path(maps:get("path", Sol, nil)),
            Tmp = (case erlang:is_map(New_path) of true -> maps:get(I_5, New_path, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(New_path) + I_5 + 1, New_path); _ -> mochi_nth(I_5 + 1, New_path) end end),
            New_path_2 = lists:sublist(New_path, I_5) ++ [(case erlang:is_map(New_path) of true -> maps:get(J, New_path, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(New_path) + J + 1, New_path); _ -> mochi_nth(J + 1, New_path) end end)] ++ lists:nthtail(I_5 + 1, New_path),
            New_path_3 = lists:sublist(New_path_2, J) ++ [Tmp] ++ lists:nthtail(J + 1, New_path_2),
            Cost = path_cost(New_path_3, Graph_3),
            Neighbors_2 = lists:append((case Neighbors of nil -> []; _ -> Neighbors end), [#{"path" => New_path_3, "cost" => Cost}]),
            Cost_2 = Cost,
            Neighbors_3 = Neighbors_2,
            New_path_4 = New_path_3,
            Tmp_2 = Tmp;
        _ -> Cost_2 = nil,
            Neighbors_3 = Neighbors,
            New_path_4 = nil,
            Tmp_2 = nil
    end,
            J_2 = (J + 1),
            Fun_5_loop(Graph_3, I_5, J_2, Neighbors_3, Sol);
        _ -> {Graph_3, I_5, J, Neighbors, Sol}
    end
end,
{Graph_3, I_5, J_2, Neighbors_3, Sol} = Fun_5(Graph_3, I_5, J, Neighbors, Sol),
            I_6 = (I_5 + 1),
            Fun_6_loop(Graph_3, I_6, Neighbors_3, Sol);
        _ -> {Graph_3, I_5, Neighbors, Sol}
    end
end,
{Graph_3, I_6, Neighbors_3, Sol} = Fun_6(Graph_3, I_5, Neighbors, Sol),
        Neighbors_3
    catch {return, RetCatch} -> RetCatch end.

find_swap(A, B) ->
    try
        I_7 = 0,
        Fun_7 = fun Fun_7_loop(A, B, I_7) ->
    case (I_7 < erlang:length(A)) of
        true ->
            case ((case erlang:is_map(A) of true -> maps:get(I_7, A, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A) + I_7 + 1, A); _ -> mochi_nth(I_7 + 1, A) end end) /= (case erlang:is_map(B) of true -> maps:get(I_7, B, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B) + I_7 + 1, B); _ -> mochi_nth(I_7 + 1, B) end end)) of
        true -> throw({return, #{"a" => (case erlang:is_map(A) of true -> maps:get(I_7, A, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A) + I_7 + 1, A); _ -> mochi_nth(I_7 + 1, A) end end), "b" => (case erlang:is_map(B) of true -> maps:get(I_7, B, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B) + I_7 + 1, B); _ -> mochi_nth(I_7 + 1, B) end end)}});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_7_loop(A, B, I_8);
        _ -> {A, B, I_7}
    end
end,
{A, B, I_8} = Fun_7(A, B, I_7),
        #{"a" => "", "b" => ""}
    catch {return, RetCatch} -> RetCatch end.

tabu_search(First, Graph_4, Iters, Size) ->
    try
        Solution = First,
        Best = First,
        Tabu = [],
        Count = 0,
        Fun_12 = fun Fun_12_loop(Best, Count, First, Graph_4, Iters, Size, Solution, Tabu) ->
    case (Count < Iters) of
        true ->
            try
                Neighborhood = find_neighborhood(Solution, Graph_4),
                case (erlang:length(Neighborhood) == 0) of
        true -> throw({break, Best, Count, First, Graph_4, Iters, Size, Solution, Tabu});
        _ -> ok
    end,
                Best_neighbor = (case erlang:is_map(Neighborhood) of true -> maps:get(0, Neighborhood, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Neighborhood) + 0 + 1, Neighborhood); _ -> mochi_nth(0 + 1, Neighborhood) end end),
                Best_move = find_swap(maps:get("path", Solution, nil), maps:get("path", Best_neighbor, nil)),
                I_9 = 1,
                Fun_9 = fun Fun_9_loop(Best, Best_move, Best_neighbor, Count, First, Graph_4, I_9, Iters, Neighborhood, Size, Solution, Tabu) ->
    case (I_9 < erlang:length(Neighborhood)) of
        true ->
            Cand = (case erlang:is_map(Neighborhood) of true -> maps:get(I_9, Neighborhood, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Neighborhood) + I_9 + 1, Neighborhood); _ -> mochi_nth(I_9 + 1, Neighborhood) end end),
            Move = find_swap(maps:get("path", Solution, nil), maps:get("path", Cand, nil)),
            Forbidden = false,
            T = 0,
            Fun_8 = fun Fun_8_loop(Best, Best_move, Best_neighbor, Cand, Count, First, Forbidden, Graph_4, I_9, Iters, Move, Neighborhood, Size, Solution, T, Tabu) ->
    case (T < erlang:length(Tabu)) of
        true ->
            case (((maps:get("a", (case erlang:is_map(Tabu) of true -> maps:get(T, Tabu, nil); _ -> case T < 0 of true -> mochi_nth(erlang:length(Tabu) + T + 1, Tabu); _ -> mochi_nth(T + 1, Tabu) end end), nil) == maps:get("a", Move, nil)) andalso (maps:get("b", (case erlang:is_map(Tabu) of true -> maps:get(T, Tabu, nil); _ -> case T < 0 of true -> mochi_nth(erlang:length(Tabu) + T + 1, Tabu); _ -> mochi_nth(T + 1, Tabu) end end), nil) == maps:get("b", Move, nil))) orelse ((maps:get("a", (case erlang:is_map(Tabu) of true -> maps:get(T, Tabu, nil); _ -> case T < 0 of true -> mochi_nth(erlang:length(Tabu) + T + 1, Tabu); _ -> mochi_nth(T + 1, Tabu) end end), nil) == maps:get("b", Move, nil)) andalso (maps:get("b", (case erlang:is_map(Tabu) of true -> maps:get(T, Tabu, nil); _ -> case T < 0 of true -> mochi_nth(erlang:length(Tabu) + T + 1, Tabu); _ -> mochi_nth(T + 1, Tabu) end end), nil) == maps:get("a", Move, nil)))) of
        true -> Forbidden_2 = true,
            Forbidden_3 = Forbidden_2;
        _ -> Forbidden_3 = Forbidden
    end,
            T_2 = (T + 1),
            Fun_8_loop(Best, Best_move, Best_neighbor, Cand, Count, First, Forbidden_3, Graph_4, I_9, Iters, Move, Neighborhood, Size, Solution, T_2, Tabu);
        _ -> {Best, Best_move, Best_neighbor, Cand, Count, First, Forbidden, Graph_4, I_9, Iters, Move, Neighborhood, Size, Solution, T, Tabu}
    end
end,
{Best, Best_move, Best_neighbor, Cand, Count, First, Forbidden_3, Graph_4, I_9, Iters, Move, Neighborhood, Size, Solution, T_2, Tabu} = Fun_8(Best, Best_move, Best_neighbor, Cand, Count, First, Forbidden, Graph_4, I_9, Iters, Move, Neighborhood, Size, Solution, T, Tabu),
            case ((Forbidden_3 == false) andalso (maps:get("cost", Cand, nil) < maps:get("cost", Best_neighbor, nil))) of
        true -> Best_neighbor_2 = Cand,
            Best_move_2 = Move,
            Best_move_3 = Best_move_2,
            Best_neighbor_3 = Best_neighbor_2;
        _ -> Best_move_3 = Best_move,
            Best_neighbor_3 = Best_neighbor
    end,
            I_10 = (I_9 + 1),
            Fun_9_loop(Best, Best_move_3, Best_neighbor_3, Count, First, Graph_4, I_10, Iters, Neighborhood, Size, Solution, Tabu);
        _ -> {Best, Best_move, Best_neighbor, Count, First, Graph_4, I_9, Iters, Neighborhood, Size, Solution, Tabu}
    end
end,
{Best, Best_move_3, Best_neighbor_3, Count, First, Graph_4, I_10, Iters, Neighborhood, Size, Solution, Tabu} = Fun_9(Best, Best_move, Best_neighbor, Count, First, Graph_4, I_9, Iters, Neighborhood, Size, Solution, Tabu),
                Solution_2 = Best_neighbor_3,
                Tabu_2 = lists:append((case Tabu of nil -> []; _ -> Tabu end), [Best_move_3]),
                case (erlang:length(Tabu_2) > Size) of
        true -> New_tab = [],
            J_3 = 1,
            Fun_10 = fun Fun_10_loop(Best, Best_move_3, Best_neighbor_3, Count, First, Graph_4, I_10, Iters, J_3, Neighborhood, New_tab, Size, Solution_2, Tabu_2) ->
    case (J_3 < erlang:length(Tabu_2)) of
        true ->
            New_tab_2 = lists:append((case New_tab of nil -> []; _ -> New_tab end), [(case erlang:is_map(Tabu_2) of true -> maps:get(J_3, Tabu_2, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Tabu_2) + J_3 + 1, Tabu_2); _ -> mochi_nth(J_3 + 1, Tabu_2) end end)]),
            J_4 = (J_3 + 1),
            Fun_10_loop(Best, Best_move_3, Best_neighbor_3, Count, First, Graph_4, I_10, Iters, J_4, Neighborhood, New_tab_2, Size, Solution_2, Tabu_2);
        _ -> {Best, Best_move_3, Best_neighbor_3, Count, First, Graph_4, I_10, Iters, J_3, Neighborhood, New_tab, Size, Solution_2, Tabu_2}
    end
end,
{Best, Best_move_3, Best_neighbor_3, Count, First, Graph_4, I_10, Iters, J_4, Neighborhood, New_tab_2, Size, Solution_2, Tabu_2} = Fun_10(Best, Best_move_3, Best_neighbor_3, Count, First, Graph_4, I_10, Iters, J_3, Neighborhood, New_tab, Size, Solution_2, Tabu_2),
            Tabu_3 = New_tab_2,
            Fun_11 = Fun_10,
            J_5 = J_4,
            New_tab_3 = New_tab_2,
            Tabu_4 = Tabu_3;
        _ -> Fun_11 = Fun_9,
            J_5 = nil,
            New_tab_3 = nil,
            Tabu_4 = Tabu_2
    end,
                case (maps:get("cost", Solution_2, nil) < maps:get("cost", Best, nil)) of
        true -> Best_2 = Solution_2,
            Best_3 = Best_2;
        _ -> Best_3 = Best
    end,
                Count_2 = (Count + 1),
                Fun_12_loop(Best_3, Count_2, First, Graph_4, Iters, Size, Solution_2, Tabu_4)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7} -> Fun_12_loop(C0, C1, C2, C3, C4, C5, C6, C7);
                {break, B0, B1, B2, B3, B4, B5, B6, B7} -> {B0, B1, B2, B3, B4, B5, B6, B7}
            end;
        _ -> {Best, Count, First, Graph_4, Iters, Size, Solution, Tabu}
    end
end,
{Best_3, Count_2, First, Graph_4, Iters, Size, Solution_2, Tabu_4} = Fun_12(Best, Count, First, Graph_4, Iters, Size, Solution, Tabu),
        Best_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('graph', #{"a" => #{"b" => 20, "c" => 18, "d" => 22, "e" => 26}, "b" => #{"a" => 20, "c" => 10, "d" => 11, "e" => 12}, "c" => #{"a" => 18, "b" => 10, "d" => 23, "e" => 24}, "d" => #{"a" => 22, "b" => 11, "c" => 23, "e" => 40}, "e" => #{"a" => 26, "b" => 12, "c" => 24, "d" => 40}}),
    erlang:put('first', generate_first_solution(erlang:get('graph'), "a")),
    erlang:put('best', tabu_search(erlang:get('first'), erlang:get('graph'), 4, 3)),
    io:format("~ts~n", [mochi_str(maps:get("path", erlang:get('best'), nil))]),
    io:format("~ts~n", [mochi_str(maps:get("cost", erlang:get('best'), nil))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
