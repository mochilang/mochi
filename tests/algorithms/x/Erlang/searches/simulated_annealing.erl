#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, score/2, get_neighbors/1, remove_at/2, rand/0, random_float/0, randint/2, expapprox/1, simulated_annealing/10, test_f1/2, test_f2/2, main/0]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

score(P, F) ->
    try
        F(maps:get("x", P, nil), maps:get("y", P, nil))
    catch {return, Ret} -> Ret end.

get_neighbors(P_2) ->
    try
        S = maps:get("step", P_2, nil),
        Ns = [],
        Ns_2 = lists:append((case Ns of nil -> []; _ -> Ns end), [#{"x" => (maps:get("x", P_2, nil) - S), "y" => (maps:get("y", P_2, nil) - S), "step" => S}]),
        Ns_3 = lists:append((case Ns_2 of nil -> []; _ -> Ns_2 end), [#{"x" => (maps:get("x", P_2, nil) - S), "y" => maps:get("y", P_2, nil), "step" => S}]),
        Ns_4 = lists:append((case Ns_3 of nil -> []; _ -> Ns_3 end), [#{"x" => (maps:get("x", P_2, nil) - S), "y" => (maps:get("y", P_2, nil) + S), "step" => S}]),
        Ns_5 = lists:append((case Ns_4 of nil -> []; _ -> Ns_4 end), [#{"x" => maps:get("x", P_2, nil), "y" => (maps:get("y", P_2, nil) - S), "step" => S}]),
        Ns_6 = lists:append((case Ns_5 of nil -> []; _ -> Ns_5 end), [#{"x" => maps:get("x", P_2, nil), "y" => (maps:get("y", P_2, nil) + S), "step" => S}]),
        Ns_7 = lists:append((case Ns_6 of nil -> []; _ -> Ns_6 end), [#{"x" => (maps:get("x", P_2, nil) + S), "y" => (maps:get("y", P_2, nil) - S), "step" => S}]),
        Ns_8 = lists:append((case Ns_7 of nil -> []; _ -> Ns_7 end), [#{"x" => (maps:get("x", P_2, nil) + S), "y" => maps:get("y", P_2, nil), "step" => S}]),
        Ns_9 = lists:append((case Ns_8 of nil -> []; _ -> Ns_8 end), [#{"x" => (maps:get("x", P_2, nil) + S), "y" => (maps:get("y", P_2, nil) + S), "step" => S}]),
        Ns_9
    catch {return, Ret} -> Ret end.

remove_at(Lst, Idx) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, Idx, Lst, Res) ->
    case (I < erlang:length(Lst)) of
        true ->
            case (I /= Idx) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Lst) of true -> maps:get(I, Lst, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Lst) + I + 1, Lst); _ -> mochi_nth(I + 1, Lst) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Idx, Lst, Res_3);
        _ -> {I, Idx, Lst, Res}
    end
end,
{I_2, Idx, Lst, Res_3} = Fun(I, Idx, Lst, Res),
        Res_3
    catch {return, Ret} -> Ret end.

rand() ->
    try
        _t = mochi_now(),
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        erlang:get('seed')
    catch {return, Ret} -> Ret end.

random_float() ->
    try
        mochi_safe_div(float(rand()), 2147483648.0)
    catch {return, Ret} -> Ret end.

randint(Low, High) ->
    try
        (mochi_mod(rand(), ((High - Low) + 1)) + Low)
    catch {return, Ret} -> Ret end.

expapprox(X) ->
    try
        Y = X,
        Is_neg = false,
        case (X < 0.0) of
        true -> Is_neg_2 = true,
            Y_2 = -X,
            Is_neg_3 = Is_neg_2,
            Y_3 = Y_2;
        _ -> Is_neg_3 = Is_neg,
            Y_3 = Y
    end,
        Term = 1.0,
        Sum = 1.0,
        N = 1,
        Fun_2 = fun Fun_2_loop(Is_neg_3, N, Sum, Term, X, Y_3) ->
    case (N < 30) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, Y_3), float(N)),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_2_loop(Is_neg_3, N_2, Sum_2, Term_2, X, Y_3);
        _ -> {Is_neg_3, N, Sum, Term, X, Y_3}
    end
end,
{Is_neg_3, N_2, Sum_2, Term_2, X, Y_3} = Fun_2(Is_neg_3, N, Sum, Term, X, Y_3),
        case Is_neg_3 of
        true -> throw({return, mochi_safe_div(1.0, Sum_2)});
        _ -> ok
    end,
        Sum_2
    catch {return, Ret} -> Ret end.

simulated_annealing(Search_prob, F_2, Find_max, Max_x, Min_x, Max_y, Min_y, Start_temp, Rate_of_decrease, Threshold_temp) ->
    try
        Search_end = false,
        Current_state = Search_prob,
        Current_temp = Start_temp,
        Best_state = Current_state,
        Fun_4 = fun Fun_4_loop(Best_state, Current_state, Current_temp, F_2, Find_max, Max_x, Max_y, Min_x, Min_y, Rate_of_decrease, Search_end, Search_prob, Start_temp, Threshold_temp) ->
    case mochi_not(Search_end) of
        true ->
            try
                Current_score = score(Current_state, F_2),
                case (score(Best_state, F_2) < Current_score) of
        true -> Best_state_2 = Current_state,
            Best_state_3 = Best_state_2;
        _ -> Best_state_3 = Best_state
    end,
                Next_state = Current_state,
                Found_next = false,
                Neighbors = get_neighbors(Current_state),
                Fun_3 = fun Fun_3_loop(Best_state_3, Current_score, Current_state, Current_temp, F_2, Find_max, Found_next, Max_x, Max_y, Min_x, Min_y, Neighbors, Next_state, Rate_of_decrease, Search_end, Search_prob, Start_temp, Threshold_temp) ->
    case (mochi_not(Found_next) andalso (erlang:length(Neighbors) > 0)) of
        true ->
            try
                Idx_2 = randint(0, (erlang:length(Neighbors) - 1)),
                Picked_neighbor = (case erlang:is_map(Neighbors) of true -> maps:get(Idx_2, Neighbors, nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(Neighbors) + Idx_2 + 1, Neighbors); _ -> mochi_nth(Idx_2 + 1, Neighbors) end end),
                Neighbors_2 = remove_at(Neighbors, Idx_2),
                case ((((maps:get("x", Picked_neighbor, nil) > Max_x) orelse (maps:get("x", Picked_neighbor, nil) < Min_x)) orelse (maps:get("y", Picked_neighbor, nil) > Max_y)) orelse (maps:get("y", Picked_neighbor, nil) < Min_y)) of
        true -> throw({continue, Best_state_3, Current_score, Current_state, Current_temp, F_2, Find_max, Found_next, Max_x, Max_y, Min_x, Min_y, Neighbors_2, Next_state, Rate_of_decrease, Search_end, Search_prob, Start_temp, Threshold_temp});
        _ -> ok
    end,
                Change = (score(Picked_neighbor, F_2) - Current_score),
                case mochi_not(Find_max) of
        true -> Change_2 = -Change,
            Change_3 = Change_2;
        _ -> Change_3 = Change
    end,
                case (Change_3 > 0.0) of
        true -> Next_state_2 = Picked_neighbor,
            Found_next_2 = true,
            Found_next_5 = Found_next_2,
            Next_state_5 = Next_state_2,
            Probability_2 = nil;
        _ -> Probability = expapprox(mochi_safe_div(Change_3, Current_temp)),
            case (random_float() < Probability) of
        true -> Next_state_3 = Picked_neighbor,
            Found_next_3 = true,
            Found_next_4 = Found_next_3,
            Next_state_4 = Next_state_3;
        _ -> Found_next_4 = Found_next,
            Next_state_4 = Next_state
    end,
            Found_next_5 = Found_next_4,
            Next_state_5 = Next_state_4,
            Probability_2 = Probability
    end,
                Fun_3_loop(Best_state_3, Current_score, Current_state, Current_temp, F_2, Find_max, Found_next_5, Max_x, Max_y, Min_x, Min_y, Neighbors_2, Next_state_5, Rate_of_decrease, Search_end, Search_prob, Start_temp, Threshold_temp)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17}
            end;
        _ -> {Best_state_3, Current_score, Current_state, Current_temp, F_2, Find_max, Found_next, Max_x, Max_y, Min_x, Min_y, Neighbors, Next_state, Rate_of_decrease, Search_end, Search_prob, Start_temp, Threshold_temp}
    end
end,
{Best_state_3, Current_score, Current_state, Current_temp, F_2, Find_max, Found_next_5, Max_x, Max_y, Min_x, Min_y, Neighbors_2, Next_state_5, Rate_of_decrease, Search_end, Search_prob, Start_temp, Threshold_temp} = Fun_3(Best_state_3, Current_score, Current_state, Current_temp, F_2, Find_max, Found_next, Max_x, Max_y, Min_x, Min_y, Neighbors, Next_state, Rate_of_decrease, Search_end, Search_prob, Start_temp, Threshold_temp),
                Current_temp_2 = (Current_temp - mochi_safe_mul(Current_temp, Rate_of_decrease)),
                case ((Current_temp_2 < Threshold_temp) orelse mochi_not(Found_next_5)) of
        true -> Search_end_2 = true,
            Current_state_3 = Current_state,
            Search_end_3 = Search_end_2;
        _ -> Current_state_2 = Next_state_5,
            Current_state_3 = Current_state_2,
            Search_end_3 = Search_end
    end,
                Fun_4_loop(Best_state_3, Current_state_3, Current_temp_2, F_2, Find_max, Max_x, Max_y, Min_x, Min_y, Rate_of_decrease, Search_end_3, Search_prob, Start_temp, Threshold_temp)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13} -> Fun_4_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13}
            end;
        _ -> {Best_state, Current_state, Current_temp, F_2, Find_max, Max_x, Max_y, Min_x, Min_y, Rate_of_decrease, Search_end, Search_prob, Start_temp, Threshold_temp}
    end
end,
{Best_state_3, Current_state_3, Current_temp_2, F_2, Find_max, Max_x, Max_y, Min_x, Min_y, Rate_of_decrease, Search_end_3, Search_prob, Start_temp, Threshold_temp} = Fun_4(Best_state, Current_state, Current_temp, F_2, Find_max, Max_x, Max_y, Min_x, Min_y, Rate_of_decrease, Search_end, Search_prob, Start_temp, Threshold_temp),
        Best_state_3
    catch {return, Ret} -> Ret end.

test_f1(X_2, Y_4) ->
    try
        (mochi_safe_mul(X_2, X_2) + mochi_safe_mul(Y_4, Y_4))
    catch {return, Ret} -> Ret end.

test_f2(X_3, Y_5) ->
    try
        (mochi_safe_mul(mochi_safe_mul(3.0, X_3), X_3) - mochi_safe_mul(6.0, Y_5))
    catch {return, Ret} -> Ret end.

main() ->
    try
        Prob1 = #{"x" => 12.0, "y" => 47.0, "step" => 1.0},
        Min_state = simulated_annealing(Prob1, fun test_f1/2, false, 100.0, 5.0, 50.0, -5.0, 100.0, 0.01, 1.0),
        io:format("~ts ~ts~n", [mochi_repr("min1"), mochi_repr(test_f1(maps:get("x", Min_state, nil), maps:get("y", Min_state, nil)))]),
        Prob2 = #{"x" => 12.0, "y" => 47.0, "step" => 1.0},
        Max_state = simulated_annealing(Prob2, fun test_f1/2, true, 100.0, 5.0, 50.0, -5.0, 100.0, 0.01, 1.0),
        io:format("~ts ~ts~n", [mochi_repr("max1"), mochi_repr(test_f1(maps:get("x", Max_state, nil), maps:get("y", Max_state, nil)))]),
        Prob3 = #{"x" => 3.0, "y" => 4.0, "step" => 1.0},
        Min_state2 = simulated_annealing(Prob3, fun test_f2/2, false, 1000.0, -1000.0, 1000.0, -1000.0, 100.0, 0.01, 1.0),
        io:format("~ts ~ts~n", [mochi_repr("min2"), mochi_repr(test_f2(maps:get("x", Min_state2, nil), maps:get("y", Min_state2, nil)))]),
        Prob4 = #{"x" => 3.0, "y" => 4.0, "step" => 1.0},
        Max_state2 = simulated_annealing(Prob4, fun test_f2/2, true, 1000.0, -1000.0, 1000.0, -1000.0, 100.0, 0.01, 1.0),
        io:format("~ts ~ts~n", [mochi_repr("max2"), mochi_repr(test_f2(maps:get("x", Max_state2, nil), maps:get("y", Max_state2, nil)))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
