#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexof/2, contains/2, validate/1, main/0]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] when is_list(C) -> hd(C);
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

indexof(S, Sub) ->
    try
        N = erlang:length(S),
        M = erlang:length(Sub),
        I = 0,
        Fun = fun Fun_loop(I, M, N, S, Sub) ->
    case (I =< (N - M)) of
        true ->
            case (string:substr(S, I + 1, ((I + M) - I)) == Sub) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, M, N, S, Sub);
        _ -> {I, M, N, S, Sub}
    end
end,
{I_2, M, N, S, Sub} = Fun(I, M, N, S, Sub),
        -1
    catch {return, RetCatch} -> RetCatch end.

contains(S_2, Sub_2) ->
    try
        (mochi_index_of(S_2, Sub_2) >= 0)
    catch {return, RetCatch} -> RetCatch end.

validate(Files) ->
    try
        Upper = [],
        Space = [],
        Hyphen = [],
        Nodir = [],
        Fun_2 = fun Fun_2_loop(List, Files, Hyphen, Nodir, Space, Upper) ->
    case List of
        [] -> {Files, Hyphen, Nodir, Space, Upper};
        [F|F_rest] ->
            case (F /= string:to_lower(F)) of
        true -> Upper_2 = lists:append((case Upper of nil -> []; _ -> Upper end), [F]),
            Upper_3 = Upper_2;
        _ -> Upper_3 = Upper
    end,
            case mochi_member(" ", F) of
        true -> Space_2 = lists:append((case Space of nil -> []; _ -> Space end), [F]),
            Space_3 = Space_2;
        _ -> Space_3 = Space
    end,
            case (mochi_member("-", F) andalso (mochi_member("/site-packages/", F) == false)) of
        true -> Hyphen_2 = lists:append((case Hyphen of nil -> []; _ -> Hyphen end), [F]),
            Hyphen_3 = Hyphen_2;
        _ -> Hyphen_3 = Hyphen
    end,
            case mochi_not(mochi_member("/", F)) of
        true -> Nodir_2 = lists:append((case Nodir of nil -> []; _ -> Nodir end), [F]),
            Nodir_3 = Nodir_2;
        _ -> Nodir_3 = Nodir
    end,
            Fun_2_loop(F_rest, Files, Hyphen_3, Nodir_3, Space_3, Upper_3);
        _ -> {Files, Hyphen, Nodir, Space, Upper}
    end
end,
{Files, Hyphen_3, Nodir_3, Space_3, Upper_3} = Fun_2(Files, Files, Hyphen, Nodir, Space, Upper),
        case (erlang:length(Upper_3) > 0) of
        true -> io:format("~ts~n", [mochi_repr((mochi_str(erlang:length(Upper_3)) ++ " files contain uppercase characters:"))]),
            Fun_3 = fun Fun_3_loop(List, Files, Hyphen_3, Nodir_3, Space_3, Upper_3) ->
    case List of
        [] -> {Files, Hyphen_3, Nodir_3, Space_3, Upper_3};
        [F_2|F_2_rest] ->
            io:format("~ts~n", [mochi_repr(F_2)]),
            Fun_3_loop(F_2_rest, Files, Hyphen_3, Nodir_3, Space_3, Upper_3);
        _ -> {Files, Hyphen_3, Nodir_3, Space_3, Upper_3}
    end
end,
{Files, Hyphen_3, Nodir_3, Space_3, Upper_3} = Fun_3(Upper_3, Files, Hyphen_3, Nodir_3, Space_3, Upper_3),
            io:format("~ts~n", [mochi_repr("")]),
            Fun_4 = Fun_3;
        _ -> Fun_4 = Fun_2
    end,
        case (erlang:length(Space_3) > 0) of
        true -> io:format("~ts~n", [mochi_repr((mochi_str(erlang:length(Space_3)) ++ " files contain space characters:"))]),
            Fun_5 = fun Fun_5_loop(List, Files, Hyphen_3, Nodir_3, Space_3, Upper_3) ->
    case List of
        [] -> {Files, Hyphen_3, Nodir_3, Space_3, Upper_3};
        [F_3|F_3_rest] ->
            io:format("~ts~n", [mochi_repr(F_3)]),
            Fun_5_loop(F_3_rest, Files, Hyphen_3, Nodir_3, Space_3, Upper_3);
        _ -> {Files, Hyphen_3, Nodir_3, Space_3, Upper_3}
    end
end,
{Files, Hyphen_3, Nodir_3, Space_3, Upper_3} = Fun_5(Space_3, Files, Hyphen_3, Nodir_3, Space_3, Upper_3),
            io:format("~ts~n", [mochi_repr("")]),
            Fun_6 = Fun_5;
        _ -> Fun_6 = Fun_4
    end,
        case (erlang:length(Hyphen_3) > 0) of
        true -> io:format("~ts~n", [mochi_repr((mochi_str(erlang:length(Hyphen_3)) ++ " files contain hyphen characters:"))]),
            Fun_7 = fun Fun_7_loop(List, Files, Hyphen_3, Nodir_3, Space_3, Upper_3) ->
    case List of
        [] -> {Files, Hyphen_3, Nodir_3, Space_3, Upper_3};
        [F_4|F_4_rest] ->
            io:format("~ts~n", [mochi_repr(F_4)]),
            Fun_7_loop(F_4_rest, Files, Hyphen_3, Nodir_3, Space_3, Upper_3);
        _ -> {Files, Hyphen_3, Nodir_3, Space_3, Upper_3}
    end
end,
{Files, Hyphen_3, Nodir_3, Space_3, Upper_3} = Fun_7(Hyphen_3, Files, Hyphen_3, Nodir_3, Space_3, Upper_3),
            io:format("~ts~n", [mochi_repr("")]),
            Fun_8 = Fun_7;
        _ -> Fun_8 = Fun_6
    end,
        case (erlang:length(Nodir_3) > 0) of
        true -> io:format("~ts~n", [mochi_repr((mochi_str(erlang:length(Nodir_3)) ++ " files are not in a directory:"))]),
            Fun_9 = fun Fun_9_loop(List, Files, Hyphen_3, Nodir_3, Space_3, Upper_3) ->
    case List of
        [] -> {Files, Hyphen_3, Nodir_3, Space_3, Upper_3};
        [F_5|F_5_rest] ->
            io:format("~ts~n", [mochi_repr(F_5)]),
            Fun_9_loop(F_5_rest, Files, Hyphen_3, Nodir_3, Space_3, Upper_3);
        _ -> {Files, Hyphen_3, Nodir_3, Space_3, Upper_3}
    end
end,
{Files, Hyphen_3, Nodir_3, Space_3, Upper_3} = Fun_9(Nodir_3, Files, Hyphen_3, Nodir_3, Space_3, Upper_3),
            io:format("~ts~n", [mochi_repr("")]),
            Fun_10 = Fun_9;
        _ -> Fun_10 = Fun_8
    end,
        (((erlang:length(Upper_3) + erlang:length(Space_3)) + erlang:length(Hyphen_3)) + erlang:length(Nodir_3))
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Files_2 = ["scripts/Validate_filenames.py", "good/file.txt", "bad file.txt", "/site-packages/pkg-name.py", "nopath", "src/hyphen-name.py"],
        Bad = validate(Files_2),
        io:format("~ts~n", [mochi_str(Bad)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
