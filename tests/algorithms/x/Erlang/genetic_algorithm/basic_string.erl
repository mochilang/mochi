#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, evaluate/2, crossover/2, mutate/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

evaluate(Item, Target) ->
    try
        Score = 0,
        I = 0,
        Fun = fun Fun_loop(I, Item, Score, Target) ->
    case ((I < erlang:length(Item)) andalso (I < erlang:length(Target))) of
        true ->
            case (string:substr(Item, I + 1, ((I + 1) - I)) == string:substr(Target, I + 1, ((I + 1) - I))) of
        true -> Score_2 = (Score + 1),
            Score_3 = Score_2;
        _ -> Score_3 = Score
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Item, Score_3, Target);
        _ -> {I, Item, Score, Target}
    end
end,
{I_2, Item, Score_3, Target} = Fun(I, Item, Score, Target),
        Score_3
    catch {return, Ret} -> Ret end.

crossover(Parent1, Parent2) ->
    try
        Cut = (erlang:length(Parent1) div 2),
        Child1 = (string:substr(Parent1, 0 + 1, (Cut - 0)) ++ string:substr(Parent2, Cut + 1, (erlang:length(Parent2) - Cut))),
        Child2 = (string:substr(Parent2, 0 + 1, (Cut - 0)) ++ string:substr(Parent1, Cut + 1, (erlang:length(Parent1) - Cut))),
        #{"first" => Child1, "second" => Child2}
    catch {return, Ret} -> Ret end.

mutate(Child, Genes) ->
    try
        case (erlang:length(Child) == 0) of
        true -> throw({return, Child});
        _ -> ok
    end,
        Gene = (case erlang:is_map(Genes) of true -> maps:get(0, Genes, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Genes) + 0 + 1, Genes); _ -> lists:nth(0 + 1, Genes) end end),
        (string:substr(Child, 0 + 1, ((erlang:length(Child) - 1) - 0)) ++ Gene)
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_str(evaluate("Helxo Worlx", "Hello World"))]),
        Pair = crossover("123456", "abcdef"),
        io:format("~ts~n", [mochi_repr(maps:get("first", Pair, nil))]),
        io:format("~ts~n", [mochi_repr(maps:get("second", Pair, nil))]),
        Mut = mutate("123456", ["A", "B", "C", "D", "E", "F"]),
        io:format("~ts~n", [mochi_repr(Mut)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
