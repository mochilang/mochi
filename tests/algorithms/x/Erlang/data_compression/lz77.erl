#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, token_to_string/1, tokens_to_string/1, match_length_from_index/4, find_encoding_token/2, lz77_compress/3, lz77_decompress/1]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

token_to_string(T) ->
    try
        (((((("(" ++ mochi_str(maps:get("offset", T, nil))) ++ ", ") ++ mochi_str(maps:get("length", T, nil))) ++ ", ") ++ maps:get("indicator", T, nil)) ++ ")")
    catch {return, Ret} -> Ret end.

tokens_to_string(Ts) ->
    try
        Res = "[",
        I = 0,
        Fun = fun Fun_loop(I, Res, Ts) ->
    case (I < length(Ts)) of
        true ->
            Res_2 = (Res ++ token_to_string((case erlang:is_map(Ts) of true -> maps:get(I, Ts, nil); _ -> lists:nth(I + 1, Ts) end))),
            case (I < (length(Ts) - 1)) of
        true -> Res_3 = (Res_2 ++ ", "),
            Res_4 = Res_3;
        _ -> Res_4 = Res_2
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Res_4, Ts);
        _ -> {I, Res, Ts}
    end
end,
{I_2, Res_4, Ts} = Fun(I, Res, Ts),
        (Res_4 ++ "]")
    catch {return, Ret} -> Ret end.

match_length_from_index(Text, Window, Text_index, Window_index) ->
    try
        case ((Text_index >= length(Text)) orelse (Window_index >= length(Window))) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Tc = string:substr(Text, Text_index + 1, ((Text_index + 1) - Text_index)),
        Wc = string:substr(Window, Window_index + 1, ((Window_index + 1) - Window_index)),
        case (Tc /= Wc) of
        true -> throw({return, 0});
        _ -> ok
    end,
        (1 + match_length_from_index(Text, (Window ++ Tc), (Text_index + 1), (Window_index + 1)))
    catch {return, Ret} -> Ret end.

find_encoding_token(Text_2, Search_buffer) ->
    try
        case (length(Text_2) == 0) of
        true -> erlang:error("We need some text to work with.");
        _ -> ok
    end,
        Length = 0,
        Offset = 0,
        case (length(Search_buffer) == 0) of
        true -> throw({return, #{"offset" => Offset, "length" => Length, "indicator" => string:substr(Text_2, 0 + 1, (1 - 0))}});
        _ -> ok
    end,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Length, Offset, Search_buffer, Text_2) ->
    case (I_3 < length(Search_buffer)) of
        true ->
            Ch = string:substr(Search_buffer, I_3 + 1, ((I_3 + 1) - I_3)),
            Found_offset = (length(Search_buffer) - I_3),
            case (Ch == string:substr(Text_2, 0 + 1, (1 - 0))) of
        true -> Found_length = match_length_from_index(Text_2, Search_buffer, 0, I_3),
            case (Found_length >= Length) of
        true -> Offset_2 = Found_offset,
            Length_2 = Found_length,
            Length_3 = Length_2,
            Offset_3 = Offset_2;
        _ -> Length_3 = Length,
            Offset_3 = Offset
    end,
            Found_length_2 = Found_length,
            Length_4 = Length_3,
            Offset_4 = Offset_3;
        _ -> Found_length_2 = nil,
            Length_4 = Length,
            Offset_4 = Offset
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Length_4, Offset_4, Search_buffer, Text_2);
        _ -> {I_3, Length, Offset, Search_buffer, Text_2}
    end
end,
{I_4, Length_4, Offset_4, Search_buffer, Text_2} = Fun_2(I_3, Length, Offset, Search_buffer, Text_2),
        #{"offset" => Offset_4, "length" => Length_4, "indicator" => string:substr(Text_2, Length_4 + 1, ((Length_4 + 1) - Length_4))}
    catch {return, Ret} -> Ret end.

lz77_compress(Text_3, Window_size, Lookahead) ->
    try
        Search_buffer_size = (Window_size - Lookahead),
        Output = [],
        Search_buffer_2 = "",
        Remaining = Text_3,
        Fun_3 = fun Fun_3_loop(Lookahead, Output, Remaining, Search_buffer_2, Search_buffer_size, Text_3, Window_size) ->
    case (length(Remaining) > 0) of
        true ->
            Token = find_encoding_token(Remaining, Search_buffer_2),
            Add_len = (maps:get("length", Token, nil) + 1),
            Search_buffer_3 = (Search_buffer_2 ++ string:substr(Remaining, 0 + 1, (Add_len - 0))),
            case (length(Search_buffer_3) > Search_buffer_size) of
        true -> Search_buffer_4 = string:substr(Search_buffer_3, (length(Search_buffer_3) - Search_buffer_size) + 1, (length(Search_buffer_3) - (length(Search_buffer_3) - Search_buffer_size))),
            Search_buffer_5 = Search_buffer_4;
        _ -> Search_buffer_5 = Search_buffer_3
    end,
            Remaining_2 = string:substr(Remaining, Add_len + 1, (length(Remaining) - Add_len)),
            Output_2 = lists:append((case Output of nil -> []; _ -> Output end), [Token]),
            Fun_3_loop(Lookahead, Output_2, Remaining_2, Search_buffer_5, Search_buffer_size, Text_3, Window_size);
        _ -> {Lookahead, Output, Remaining, Search_buffer_2, Search_buffer_size, Text_3, Window_size}
    end
end,
{Lookahead, Output_2, Remaining_2, Search_buffer_5, Search_buffer_size, Text_3, Window_size} = Fun_3(Lookahead, Output, Remaining, Search_buffer_2, Search_buffer_size, Text_3, Window_size),
        Output_2
    catch {return, Ret} -> Ret end.

lz77_decompress(Tokens) ->
    try
        Output_3 = "",
        Fun_4 = fun Fun_4_loop(List, Output_3, Tokens) ->
    case List of
        [] -> {Output_3, Tokens};
        [T_2|T_2_rest] ->
            I_5 = 0,
            Fun_5 = fun Fun_5_loop(I_5, Output_3, T_2, Tokens) ->
    case (I_5 < maps:get("length", T_2, nil)) of
        true ->
            Output_4 = (Output_3 ++ string:substr(Output_3, (length(Output_3) - maps:get("offset", T_2, nil)) + 1, (((length(Output_3) - maps:get("offset", T_2, nil)) + 1) - (length(Output_3) - maps:get("offset", T_2, nil))))),
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, Output_4, T_2, Tokens);
        _ -> {I_5, Output_3, T_2, Tokens}
    end
end,
{I_6, Output_4, T_2, Tokens} = Fun_5(I_5, Output_3, T_2, Tokens),
            Output_5 = (Output_4 ++ maps:get("indicator", T_2, nil)),
            Fun_4_loop(T_2_rest, Output_5, Tokens);
        _ -> {Output_3, Tokens}
    end
end,
{Output_5, Tokens} = Fun_4(Tokens, Output_3, Tokens),
        Output_5
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('c1', lz77_compress("ababcbababaa", 13, 6)),
    io:format("~ts~n", [mochi_repr(tokens_to_string(erlang:get('c1')))]),
    erlang:put('c2', lz77_compress("aacaacabcabaaac", 13, 6)),
    io:format("~ts~n", [mochi_repr(tokens_to_string(erlang:get('c2')))]),
    erlang:put('tokens_example', [#{"offset" => 0, "length" => 0, "indicator" => "c"}, #{"offset" => 0, "length" => 0, "indicator" => "a"}, #{"offset" => 0, "length" => 0, "indicator" => "b"}, #{"offset" => 0, "length" => 0, "indicator" => "r"}, #{"offset" => 3, "length" => 1, "indicator" => "c"}, #{"offset" => 2, "length" => 1, "indicator" => "d"}, #{"offset" => 7, "length" => 4, "indicator" => "r"}, #{"offset" => 3, "length" => 5, "indicator" => "d"}]),
    io:format("~ts~n", [mochi_repr(lz77_decompress(erlang:get('tokens_example')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
