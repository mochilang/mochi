#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, run_length_encode/1, run_length_decode/1]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

run_length_encode(Text) ->
    try
        case (length(Text) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        Encoded = "",
        Count = 1,
        I = 0,
        Fun = fun Fun_loop(Count, Encoded, I, Text) ->
    case (I < length(Text)) of
        true ->
            case (((I + 1) < length(Text)) andalso (string:substr(Text, I + 1, 1) == string:substr(Text, (I + 1) + 1, 1))) of
        true -> Count_2 = (Count + 1),
            Count_4 = Count_2,
            Encoded_3 = Encoded;
        _ -> Encoded_2 = ((Encoded ++ string:substr(Text, I + 1, 1)) ++ mochi_str(Count)),
            Count_3 = 1,
            Count_4 = Count_3,
            Encoded_3 = Encoded_2
    end,
            I_2 = (I + 1),
            Fun_loop(Count_4, Encoded_3, I_2, Text);
        _ -> {Count, Encoded, I, Text}
    end
end,
{Count_4, Encoded_3, I_2, Text} = Fun(Count, Encoded, I, Text),
        Encoded_3
    catch {return, Ret} -> Ret end.

run_length_decode(Encoded_4) ->
    try
        Res = "",
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Encoded_4, I_3, Res) ->
    case (I_3 < length(Encoded_4)) of
        true ->
            Ch = string:substr(Encoded_4, I_3 + 1, 1),
            I_4 = (I_3 + 1),
            Num_str = "",
            Fun_2 = fun Fun_2_loop(Ch, Encoded_4, I_4, Num_str, Res) ->
    case (((I_4 < length(Encoded_4)) andalso (string:substr(Encoded_4, I_4 + 1, 1) >= "0")) andalso (string:substr(Encoded_4, I_4 + 1, 1) =< "9")) of
        true ->
            Num_str_2 = (Num_str ++ string:substr(Encoded_4, I_4 + 1, 1)),
            I_5 = (I_4 + 1),
            Fun_2_loop(Ch, Encoded_4, I_5, Num_str_2, Res);
        _ -> {Ch, Encoded_4, I_4, Num_str, Res}
    end
end,
{Ch, Encoded_4, I_5, Num_str_2, Res} = Fun_2(Ch, Encoded_4, I_4, Num_str, Res),
            Count_5 = mochi_to_int(Num_str_2),
            J = 0,
            Fun_3 = fun Fun_3_loop(Ch, Count_5, Encoded_4, I_5, J, Num_str_2, Res) ->
    case (J < Count_5) of
        true ->
            Res_2 = (Res ++ Ch),
            J_2 = (J + 1),
            Fun_3_loop(Ch, Count_5, Encoded_4, I_5, J_2, Num_str_2, Res_2);
        _ -> {Ch, Count_5, Encoded_4, I_5, J, Num_str_2, Res}
    end
end,
{Ch, Count_5, Encoded_4, I_5, J_2, Num_str_2, Res_2} = Fun_3(Ch, Count_5, Encoded_4, I_5, J, Num_str_2, Res),
            Fun_4_loop(Encoded_4, I_5, Res_2);
        _ -> {Encoded_4, I_3, Res}
    end
end,
{Encoded_4, I_5, Res_2} = Fun_4(Encoded_4, I_3, Res),
        Res_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('example1', "AAAABBBCCDAA"),
    erlang:put('encoded1', run_length_encode("AAAABBBCCDAA")),
    io:format("~ts~n", [mochi_repr(erlang:get('encoded1'))]),
    io:format("~ts~n", [mochi_repr(run_length_decode(erlang:get('encoded1')))]),
    erlang:put('example2', "A"),
    erlang:put('encoded2', run_length_encode("A")),
    io:format("~ts~n", [mochi_repr(erlang:get('encoded2'))]),
    io:format("~ts~n", [mochi_repr(run_length_decode(erlang:get('encoded2')))]),
    erlang:put('example3', "AAADDDDDDFFFCCCAAVVVV"),
    erlang:put('encoded3', run_length_encode("AAADDDDDDFFFCCCAAVVVV")),
    io:format("~ts~n", [mochi_repr(erlang:get('encoded3'))]),
    io:format("~ts~n", [mochi_repr(run_length_decode(erlang:get('encoded3')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
