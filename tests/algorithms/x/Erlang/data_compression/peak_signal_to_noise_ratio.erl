#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs/1, sqrtapprox/1, ln/1, log10/1, peak_signal_to_noise_ratio/2]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

abs(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

sqrtapprox(X_2) ->
    try
        case (X_2 =< 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Guess = X_2,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 10) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_2, Guess)), 2),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, Ret} -> Ret end.

ln(X_3) ->
    try
        T = mochi_safe_div((X_3 - 1), (X_3 + 1)),
        Term = T,
        Sum = 0,
        N = 1,
        Fun_2 = fun Fun_2_loop(N, Sum, T, Term, X_3) ->
    case (N =< 19) of
        true ->
            Sum_2 = (Sum + mochi_safe_div(Term, float(N))),
            Term_2 = mochi_safe_mul(mochi_safe_mul(Term, T), T),
            N_2 = (N + 2),
            Fun_2_loop(N_2, Sum_2, T, Term_2, X_3);
        _ -> {N, Sum, T, Term, X_3}
    end
end,
{N_2, Sum_2, T, Term_2, X_3} = Fun_2(N, Sum, T, Term, X_3),
        mochi_safe_mul(2, Sum_2)
    catch {return, Ret} -> Ret end.

log10(X_4) ->
    try
        mochi_safe_div(ln(X_4), ln(10))
    catch {return, Ret} -> Ret end.

peak_signal_to_noise_ratio(Original, Contrast) ->
    try
        Mse = 0,
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Contrast, I_3, Mse, Original) ->
    case (I_3 < length(Original)) of
        true ->
            J = 0,
            Fun_3 = fun Fun_3_loop(Contrast, I_3, J, Mse, Original) ->
    case (J < length((case erlang:is_map(Original) of true -> maps:get(I_3, Original, nil); _ -> lists:nth(I_3 + 1, Original) end))) of
        true ->
            Diff = float(((case erlang:is_map((case erlang:is_map(Original) of true -> maps:get(I_3, Original, nil); _ -> lists:nth(I_3 + 1, Original) end)) of true -> maps:get(J, (case erlang:is_map(Original) of true -> maps:get(I_3, Original, nil); _ -> lists:nth(I_3 + 1, Original) end), nil); _ -> lists:nth(J + 1, (case erlang:is_map(Original) of true -> maps:get(I_3, Original, nil); _ -> lists:nth(I_3 + 1, Original) end)) end) - (case erlang:is_map((case erlang:is_map(Contrast) of true -> maps:get(I_3, Contrast, nil); _ -> lists:nth(I_3 + 1, Contrast) end)) of true -> maps:get(J, (case erlang:is_map(Contrast) of true -> maps:get(I_3, Contrast, nil); _ -> lists:nth(I_3 + 1, Contrast) end), nil); _ -> lists:nth(J + 1, (case erlang:is_map(Contrast) of true -> maps:get(I_3, Contrast, nil); _ -> lists:nth(I_3 + 1, Contrast) end)) end))),
            Mse_2 = (Mse + mochi_safe_mul(Diff, Diff)),
            J_2 = (J + 1),
            Fun_3_loop(Contrast, I_3, J_2, Mse_2, Original);
        _ -> {Contrast, I_3, J, Mse, Original}
    end
end,
{Contrast, I_3, J_2, Mse_2, Original} = Fun_3(Contrast, I_3, J, Mse, Original),
            I_4 = (I_3 + 1),
            Fun_4_loop(Contrast, I_4, Mse_2, Original);
        _ -> {Contrast, I_3, Mse, Original}
    end
end,
{Contrast, I_4, Mse_2, Original} = Fun_4(Contrast, I_3, Mse, Original),
        Size = float((length(Original) * length((case erlang:is_map(Original) of true -> maps:get(0, Original, nil); _ -> lists:nth(0 + 1, Original) end)))),
        Mse_3 = mochi_safe_div(Mse_2, Size),
        case (Mse_3 == 0) of
        true -> throw({return, 100});
        _ -> ok
    end,
        PIXEL_MAX = 255,
        mochi_safe_mul(20, log10(mochi_safe_div(255, sqrtapprox(Mse_3))))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
