#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, to_radians/1, sin_approx/1, cos_approx/1, sqrt_approx/1, lamberts_ellipsoidal_distance/4]).

% Generated by Mochi transpiler v0.10.64 (9e806895eb) on 2025-08-13 16:13 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

to_radians(Deg) ->
    try
        mochi_safe_div(mochi_safe_mul(Deg, 3.141592653589793), 180.0)
    catch {return, RetCatch} -> RetCatch end.

sin_approx(X) ->
    try
        Term = X,
        Sum = X,
        I = 1,
        Fun = fun Fun_loop(I, Sum, Term, X) ->
    case (I < 10) of
        true ->
            K1 = mochi_safe_mul(2.0, float(I)),
            K2 = (K1 + 1.0),
            Term_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term, X), X), mochi_safe_mul(K1, K2)),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, Term_2, X);
        _ -> {I, Sum, Term, X}
    end
end,
{I_2, Sum_2, Term_2, X} = Fun(I, Sum, Term, X),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

cos_approx(X_2) ->
    try
        Term_3 = 1.0,
        Sum_3 = 1.0,
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(I_3, Sum_3, Term_3, X_2) ->
    case (I_3 < 10) of
        true ->
            K1_2 = (mochi_safe_mul(2.0, float(I_3)) - 1.0),
            K2_2 = mochi_safe_mul(2.0, float(I_3)),
            Term_4 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term_3, X_2), X_2), mochi_safe_mul(K1_2, K2_2)),
            Sum_4 = (Sum_3 + Term_4),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Sum_4, Term_4, X_2);
        _ -> {I_3, Sum_3, Term_3, X_2}
    end
end,
{I_4, Sum_4, Term_4, X_2} = Fun_2(I_3, Sum_3, Term_3, X_2),
        Sum_4
    catch {return, RetCatch} -> RetCatch end.

sqrt_approx(X_3) ->
    try
        case (X_3 =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = mochi_safe_div(X_3, 2.0),
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Guess, I_5, X_3) ->
    case (I_5 < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_3, Guess)), 2.0),
            I_6 = (I_5 + 1),
            Fun_3_loop(Guess_2, I_6, X_3);
        _ -> {Guess, I_5, X_3}
    end
end,
{Guess_2, I_6, X_3} = Fun_3(Guess, I_5, X_3),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

lamberts_ellipsoidal_distance(Lat1, Lon1, Lat2, Lon2) ->
    try
        Phi1 = to_radians(Lat1),
        Phi2 = to_radians(Lat2),
        Lambda1 = to_radians(Lon1),
        Lambda2 = to_radians(Lon2),
        X_4 = mochi_safe_mul((Lambda2 - Lambda1), cos_approx(mochi_safe_div((Phi1 + Phi2), 2.0))),
        Y = (Phi2 - Phi1),
        mochi_safe_mul(6378137.0, sqrt_approx((mochi_safe_mul(X_4, X_4) + mochi_safe_mul(Y, Y))))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('EQUATORIAL_RADIUS', 6378137.0),
    io:format("~ts~n", [mochi_repr(lamberts_ellipsoidal_distance(37.774856, -122.424227, 37.864742, -119.537521))]),
    io:format("~ts~n", [mochi_repr(lamberts_ellipsoidal_distance(37.774856, -122.424227, 40.713019, -74.012647))]),
    io:format("~ts~n", [mochi_repr(lamberts_ellipsoidal_distance(37.774856, -122.424227, 45.443012, 12.313071))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
