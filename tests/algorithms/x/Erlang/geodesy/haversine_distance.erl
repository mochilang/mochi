#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, to_radians/1, sin_taylor/1, cos_taylor/1, tan_approx/1, sqrtapprox/1, atanapprox/1, atan2approx/2, asinapprox/1, haversine_distance/4]).

% Generated by Mochi transpiler v0.10.64 (9e806895eb) on 2025-08-13 16:13 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

to_radians(Deg) ->
    try
        mochi_safe_div(mochi_safe_mul(Deg, 3.141592653589793), 180.0)
    catch {return, RetCatch} -> RetCatch end.

sin_taylor(X) ->
    try
        Term = X,
        Sum = X,
        I = 1,
        Fun = fun Fun_loop(I, Sum, Term, X) ->
    case (I < 10) of
        true ->
            K1 = mochi_safe_mul(2.0, float(I)),
            K2 = (K1 + 1.0),
            Term_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term, X), X), mochi_safe_mul(K1, K2)),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, Term_2, X);
        _ -> {I, Sum, Term, X}
    end
end,
{I_2, Sum_2, Term_2, X} = Fun(I, Sum, Term, X),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

cos_taylor(X_2) ->
    try
        Term_3 = 1.0,
        Sum_3 = 1.0,
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(I_3, Sum_3, Term_3, X_2) ->
    case (I_3 < 10) of
        true ->
            K1_2 = (mochi_safe_mul(2.0, float(I_3)) - 1.0),
            K2_2 = mochi_safe_mul(2.0, float(I_3)),
            Term_4 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term_3, X_2), X_2), mochi_safe_mul(K1_2, K2_2)),
            Sum_4 = (Sum_3 + Term_4),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Sum_4, Term_4, X_2);
        _ -> {I_3, Sum_3, Term_3, X_2}
    end
end,
{I_4, Sum_4, Term_4, X_2} = Fun_2(I_3, Sum_3, Term_3, X_2),
        Sum_4
    catch {return, RetCatch} -> RetCatch end.

tan_approx(X_3) ->
    try
        mochi_safe_div(sin_taylor(X_3), cos_taylor(X_3))
    catch {return, RetCatch} -> RetCatch end.

sqrtapprox(X_4) ->
    try
        Guess = mochi_safe_div(X_4, 2.0),
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Guess, I_5, X_4) ->
    case (I_5 < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_4, Guess)), 2.0),
            I_6 = (I_5 + 1),
            Fun_3_loop(Guess_2, I_6, X_4);
        _ -> {Guess, I_5, X_4}
    end
end,
{Guess_2, I_6, X_4} = Fun_3(Guess, I_5, X_4),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

atanapprox(X_5) ->
    try
        case (X_5 > 1.0) of
        true -> throw({return, (mochi_safe_div(3.141592653589793, 2.0) - mochi_safe_div(X_5, (mochi_safe_mul(X_5, X_5) + 0.28)))});
        _ -> ok
    end,
        case (X_5 < -1.0) of
        true -> throw({return, (mochi_safe_div(-3.141592653589793, 2.0) - mochi_safe_div(X_5, (mochi_safe_mul(X_5, X_5) + 0.28)))});
        _ -> ok
    end,
        mochi_safe_div(X_5, (1.0 + mochi_safe_mul(mochi_safe_mul(0.28, X_5), X_5)))
    catch {return, RetCatch} -> RetCatch end.

atan2approx(Y, X_6) ->
    try
        case (X_6 > 0.0) of
        true -> Val = atanapprox(mochi_safe_div(Y, X_6)),
            throw({return, Val}),
            Val_2 = Val;
        _ -> Val_2 = nil
    end,
        case (X_6 < 0.0) of
        true -> case (Y >= 0.0) of
        true -> throw({return, (atanapprox(mochi_safe_div(Y, X_6)) + 3.141592653589793)});
        _ -> ok
    end,
            throw({return, (atanapprox(mochi_safe_div(Y, X_6)) - 3.141592653589793)});
        _ -> ok
    end,
        case (Y > 0.0) of
        true -> throw({return, mochi_safe_div(3.141592653589793, 2.0)});
        _ -> ok
    end,
        case (Y < 0.0) of
        true -> throw({return, mochi_safe_div(-3.141592653589793, 2.0)});
        _ -> ok
    end,
        0.0
    catch {return, RetCatch} -> RetCatch end.

asinapprox(X_7) ->
    try
        Denom = sqrtapprox((1.0 - mochi_safe_mul(X_7, X_7))),
        Res = atan2approx(X_7, Denom),
        Res
    catch {return, RetCatch} -> RetCatch end.

haversine_distance(Lat1, Lon1, Lat2, Lon2) ->
    try
        Flattening = mochi_safe_div((6378137.0 - 6356752.314245), 6378137.0),
        Phi_1 = atanapprox(mochi_safe_mul((1.0 - Flattening), tan_approx(to_radians(Lat1)))),
        Phi_2 = atanapprox(mochi_safe_mul((1.0 - Flattening), tan_approx(to_radians(Lat2)))),
        Lambda_1 = to_radians(Lon1),
        Lambda_2 = to_radians(Lon2),
        Sin_sq_phi = sin_taylor(mochi_safe_div((Phi_2 - Phi_1), 2.0)),
        Sin_sq_lambda = sin_taylor(mochi_safe_div((Lambda_2 - Lambda_1), 2.0)),
        Sin_sq_phi_2 = mochi_safe_mul(Sin_sq_phi, Sin_sq_phi),
        Sin_sq_lambda_2 = mochi_safe_mul(Sin_sq_lambda, Sin_sq_lambda),
        H_value = sqrtapprox((Sin_sq_phi_2 + mochi_safe_mul(mochi_safe_mul(cos_taylor(Phi_1), cos_taylor(Phi_2)), Sin_sq_lambda_2))),
        mochi_safe_mul(mochi_safe_mul(2.0, 6378137.0), asinapprox(H_value))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('AXIS_A', 6378137.0),
    erlang:put('AXIS_B', 6356752.314245),
    erlang:put('RADIUS', 6378137.0),
    erlang:put('SAN_FRANCISCO', [37.774856, -122.424227]),
    erlang:put('YOSEMITE', [37.864742, -119.537521]),
    io:format("~ts~n", [mochi_str(haversine_distance((case erlang:is_map(erlang:get('SAN_FRANCISCO')) of true -> maps:get(0, erlang:get('SAN_FRANCISCO'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('SAN_FRANCISCO')) + 0 + 1, erlang:get('SAN_FRANCISCO')); _ -> mochi_nth(0 + 1, erlang:get('SAN_FRANCISCO')) end end), (case erlang:is_map(erlang:get('SAN_FRANCISCO')) of true -> maps:get(1, erlang:get('SAN_FRANCISCO'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('SAN_FRANCISCO')) + 1 + 1, erlang:get('SAN_FRANCISCO')); _ -> mochi_nth(1 + 1, erlang:get('SAN_FRANCISCO')) end end), (case erlang:is_map(erlang:get('YOSEMITE')) of true -> maps:get(0, erlang:get('YOSEMITE'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('YOSEMITE')) + 0 + 1, erlang:get('YOSEMITE')); _ -> mochi_nth(0 + 1, erlang:get('YOSEMITE')) end end), (case erlang:is_map(erlang:get('YOSEMITE')) of true -> maps:get(1, erlang:get('YOSEMITE'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('YOSEMITE')) + 1 + 1, erlang:get('YOSEMITE')); _ -> mochi_nth(1 + 1, erlang:get('YOSEMITE')) end end)))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
