#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, nor_gate/2, center/2, make_table_row/2, truth_table/0]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

nor_gate(Input_1, Input_2) ->
    try
        (case ((Input_1 == 0) andalso (Input_2 == 0)) of
    true -> 1;
    _ -> 0
end)
    catch {return, Ret} -> Ret end.

center(S, Width) ->
    try
        Total = (Width - length(S)),
        case (Total =< 0) of
        true -> throw({return, S});
        _ -> ok
    end,
        Left = (Total div 2),
        Right = (Total - Left),
        Res = S,
        I = 0,
        Fun = fun Fun_loop(I, Left, Res, Right, S, Total, Width) ->
    case (I < Left) of
        true ->
            Res_2 = (" " ++ Res),
            I_2 = (I + 1),
            Fun_loop(I_2, Left, Res_2, Right, S, Total, Width);
        _ -> {I, Left, Res, Right, S, Total, Width}
    end
end,
{I_2, Left, Res_2, Right, S, Total, Width} = Fun(I, Left, Res, Right, S, Total, Width),
        J = 0,
        Fun_2 = fun Fun_2_loop(I_2, J, Left, Res_2, Right, S, Total, Width) ->
    case (J < Right) of
        true ->
            Res_3 = (Res_2 ++ " "),
            J_2 = (J + 1),
            Fun_2_loop(I_2, J_2, Left, Res_3, Right, S, Total, Width);
        _ -> {I_2, J, Left, Res_2, Right, S, Total, Width}
    end
end,
{I_2, J_2, Left, Res_3, Right, S, Total, Width} = Fun_2(I_2, J, Left, Res_2, Right, S, Total, Width),
        Res_3
    catch {return, Ret} -> Ret end.

make_table_row(I_3, J_3) ->
    try
        Output = nor_gate(I_3, J_3),
        (((((("| " ++ center(mochi_str(I_3), 8)) ++ " | ") ++ center(mochi_str(J_3), 8)) ++ " | ") ++ center(mochi_str(Output), 8)) ++ " |")
    catch {return, Ret} -> Ret end.

truth_table() ->
    try
        (((((((("Truth Table of NOR Gate:\n" ++ "| Input 1 | Input 2 | Output  |\n") ++ make_table_row(0, 0)) ++ "\n") ++ make_table_row(0, 1)) ++ "\n") ++ make_table_row(1, 0)) ++ "\n") ++ make_table_row(1, 1))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(nor_gate(0, 0))]),
    io:format("~ts~n", [mochi_repr(nor_gate(0, 1))]),
    io:format("~ts~n", [mochi_repr(nor_gate(1, 0))]),
    io:format("~ts~n", [mochi_repr(nor_gate(1, 1))]),
    io:format("~ts~n", [mochi_repr(truth_table())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
