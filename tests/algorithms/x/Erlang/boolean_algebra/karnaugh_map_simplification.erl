#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, row_string/1, print_kmap/1, join_terms/1, simplify_kmap/1]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

row_string(Row) ->
    try
        S = "[",
        I = 0,
        Fun = fun Fun_loop(I, Row, S) ->
    case (I < length(Row)) of
        true ->
            S_2 = (S ++ mochi_str((case erlang:is_map(Row) of true -> maps:get(I, Row, nil); _ -> lists:nth(I + 1, Row) end))),
            case (I < (length(Row) - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Row, S_4);
        _ -> {I, Row, S}
    end
end,
{I_2, Row, S_4} = Fun(I, Row, S),
        S_5 = (S_4 ++ "]"),
        S_5
    catch {return, Ret} -> Ret end.

print_kmap(Kmap) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Kmap) ->
    case (I_3 < length(Kmap)) of
        true ->
            io:format("~ts~n", [mochi_repr(row_string((case erlang:is_map(Kmap) of true -> maps:get(I_3, Kmap, nil); _ -> lists:nth(I_3 + 1, Kmap) end)))]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Kmap);
        _ -> {I_3, Kmap}
    end
end,
{I_4, Kmap} = Fun_2(I_3, Kmap),
        nil
    catch {return, Ret} -> Ret end.

join_terms(Terms) ->
    try
        case (length(Terms) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        Res = (case erlang:is_map(Terms) of true -> maps:get(0, Terms, nil); _ -> lists:nth(0 + 1, Terms) end),
        I_5 = 1,
        Fun_3 = fun Fun_3_loop(I_5, Res, Terms) ->
    case (I_5 < length(Terms)) of
        true ->
            Res_2 = ((Res ++ " + ") ++ (case erlang:is_map(Terms) of true -> maps:get(I_5, Terms, nil); _ -> lists:nth(I_5 + 1, Terms) end)),
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Res_2, Terms);
        _ -> {I_5, Res, Terms}
    end
end,
{I_6, Res_2, Terms} = Fun_3(I_5, Res, Terms),
        Res_2
    catch {return, Ret} -> Ret end.

simplify_kmap(Board) ->
    try
        Terms_2 = [],
        A = 0,
        Fun_5 = fun Fun_5_loop(A, Board, Terms_2) ->
    case (A < length(Board)) of
        true ->
            Row_2 = (case erlang:is_map(Board) of true -> maps:get(A, Board, nil); _ -> lists:nth(A + 1, Board) end),
            B = 0,
            Fun_4 = fun Fun_4_loop(A, B, Board, Row_2, Terms_2) ->
    case (B < length(Row_2)) of
        true ->
            Item = (case erlang:is_map(Row_2) of true -> maps:get(B, Row_2, nil); _ -> lists:nth(B + 1, Row_2) end),
            case (Item /= 0) of
        true -> Term = ((case (A /= 0) of
    true -> "A";
    _ -> "A'"
end) ++ (case (B /= 0) of
    true -> "B";
    _ -> "B'"
end)),
            Terms_3 = lists:append(Terms_2, [Term]),
            Term_2 = Term,
            Terms_4 = Terms_3;
        _ -> Term_2 = nil,
            Terms_4 = Terms_2
    end,
            B_2 = (B + 1),
            Fun_4_loop(A, B_2, Board, Row_2, Terms_4);
        _ -> {A, B, Board, Row_2, Terms_2}
    end
end,
{A, B_2, Board, Row_2, Terms_4} = Fun_4(A, B, Board, Row_2, Terms_2),
            A_2 = (A + 1),
            Fun_5_loop(A_2, Board, Terms_4);
        _ -> {A, Board, Terms_2}
    end
end,
{A_2, Board, Terms_4} = Fun_5(A, Board, Terms_2),
        Expr = join_terms(Terms_4),
        Expr
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('kmap', [[0, 1], [1, 1]]),
    print_kmap(erlang:get('kmap')),
    io:format("~ts~n", [mochi_repr("Simplified Expression:")]),
    io:format("~ts~n", [mochi_repr(simplify_kmap(erlang:get('kmap')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
