#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_list/2, histogram_stretch/1, print_image/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_list(N, Value) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, N, Res, Value) ->
    case (I < N) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Value]),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Res_2, Value);
        _ -> {I, N, Res, Value}
    end
end,
{I_2, N, Res_2, Value} = Fun(I, N, Res, Value),
        Res_2
    catch {return, Ret} -> Ret end.

histogram_stretch(Image) ->
    try
        Height = erlang:length(Image),
        Width = erlang:length((case erlang:is_map(Image) of true -> maps:get(0, Image, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Image) + 0 + 1, Image); _ -> lists:nth(0 + 1, Image) end end)),
        Hist = make_list(256, 0),
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Height, Hist, I_3, Image, Width) ->
    case (I_3 < Height) of
        true ->
            J = 0,
            Fun_2 = fun Fun_2_loop(Height, Hist, I_3, Image, J, Width) ->
    case (J < Width) of
        true ->
            Val = (case erlang:is_map((case erlang:is_map(Image) of true -> maps:get(I_3, Image, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Image) + I_3 + 1, Image); _ -> lists:nth(I_3 + 1, Image) end end)) of true -> maps:get(J, (case erlang:is_map(Image) of true -> maps:get(I_3, Image, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Image) + I_3 + 1, Image); _ -> lists:nth(I_3 + 1, Image) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Image) of true -> maps:get(I_3, Image, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Image) + I_3 + 1, Image); _ -> lists:nth(I_3 + 1, Image) end end)) + J + 1, (case erlang:is_map(Image) of true -> maps:get(I_3, Image, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Image) + I_3 + 1, Image); _ -> lists:nth(I_3 + 1, Image) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Image) of true -> maps:get(I_3, Image, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Image) + I_3 + 1, Image); _ -> lists:nth(I_3 + 1, Image) end end)) end end),
            Hist_2 = lists:sublist(Hist, Val) ++ [((case erlang:is_map(Hist) of true -> maps:get(Val, Hist, nil); _ -> case Val < 0 of true -> lists:nth(erlang:length(Hist) + Val + 1, Hist); _ -> lists:nth(Val + 1, Hist) end end) + 1)] ++ lists:nthtail(Val + 1, Hist),
            J_2 = (J + 1),
            Fun_2_loop(Height, Hist_2, I_3, Image, J_2, Width);
        _ -> {Height, Hist, I_3, Image, J, Width}
    end
end,
{Height, Hist_2, I_3, Image, J_2, Width} = Fun_2(Height, Hist, I_3, Image, J, Width),
            I_4 = (I_3 + 1),
            Fun_3_loop(Height, Hist_2, I_4, Image, Width);
        _ -> {Height, Hist, I_3, Image, Width}
    end
end,
{Height, Hist_2, I_4, Image, Width} = Fun_3(Height, Hist, I_3, Image, Width),
        Mapping = make_list(256, 0),
        Cumulative = 0,
        Total = (Height * Width),
        H = 0,
        Fun_4 = fun Fun_4_loop(Cumulative, H, Height, Hist_2, I_4, Image, Mapping, Total, Width) ->
    case (H < 256) of
        true ->
            Cumulative_2 = (Cumulative + (case erlang:is_map(Hist_2) of true -> maps:get(H, Hist_2, nil); _ -> case H < 0 of true -> lists:nth(erlang:length(Hist_2) + H + 1, Hist_2); _ -> lists:nth(H + 1, Hist_2) end end)),
            Mapping_2 = lists:sublist(Mapping, H) ++ [((255 * Cumulative_2) div Total)] ++ lists:nthtail(H + 1, Mapping),
            H_2 = (H + 1),
            Fun_4_loop(Cumulative_2, H_2, Height, Hist_2, I_4, Image, Mapping_2, Total, Width);
        _ -> {Cumulative, H, Height, Hist_2, I_4, Image, Mapping, Total, Width}
    end
end,
{Cumulative_2, H_2, Height, Hist_2, I_4, Image, Mapping_2, Total, Width} = Fun_4(Cumulative, H, Height, Hist_2, I_4, Image, Mapping, Total, Width),
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(Cumulative_2, H_2, Height, Hist_2, I_5, Image, Mapping_2, Total, Width) ->
    case (I_5 < Height) of
        true ->
            J_3 = 0,
            Fun_5 = fun Fun_5_loop(Cumulative_2, H_2, Height, Hist_2, I_5, Image, J_3, Mapping_2, Total, Width) ->
    case (J_3 < Width) of
        true ->
            Val_2 = (case erlang:is_map((case erlang:is_map(Image) of true -> maps:get(I_5, Image, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Image) + I_5 + 1, Image); _ -> lists:nth(I_5 + 1, Image) end end)) of true -> maps:get(J_3, (case erlang:is_map(Image) of true -> maps:get(I_5, Image, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Image) + I_5 + 1, Image); _ -> lists:nth(I_5 + 1, Image) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Image) of true -> maps:get(I_5, Image, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Image) + I_5 + 1, Image); _ -> lists:nth(I_5 + 1, Image) end end)) + J_3 + 1, (case erlang:is_map(Image) of true -> maps:get(I_5, Image, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Image) + I_5 + 1, Image); _ -> lists:nth(I_5 + 1, Image) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Image) of true -> maps:get(I_5, Image, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Image) + I_5 + 1, Image); _ -> lists:nth(I_5 + 1, Image) end end)) end end),
            Image_2 = lists:sublist(Image, I_5) ++ [lists:sublist(lists:nth(I_5 + 1, Image), J_3) ++ [(case erlang:is_map(Mapping_2) of true -> maps:get(Val_2, Mapping_2, nil); _ -> case Val_2 < 0 of true -> lists:nth(erlang:length(Mapping_2) + Val_2 + 1, Mapping_2); _ -> lists:nth(Val_2 + 1, Mapping_2) end end)] ++ lists:nthtail(J_3 + 1, lists:nth(I_5 + 1, Image))] ++ lists:nthtail(I_5 + 1, Image),
            J_4 = (J_3 + 1),
            Fun_5_loop(Cumulative_2, H_2, Height, Hist_2, I_5, Image_2, J_4, Mapping_2, Total, Width);
        _ -> {Cumulative_2, H_2, Height, Hist_2, I_5, Image, J_3, Mapping_2, Total, Width}
    end
end,
{Cumulative_2, H_2, Height, Hist_2, I_5, Image_2, J_4, Mapping_2, Total, Width} = Fun_5(Cumulative_2, H_2, Height, Hist_2, I_5, Image, J_3, Mapping_2, Total, Width),
            I_6 = (I_5 + 1),
            Fun_6_loop(Cumulative_2, H_2, Height, Hist_2, I_6, Image_2, Mapping_2, Total, Width);
        _ -> {Cumulative_2, H_2, Height, Hist_2, I_5, Image, Mapping_2, Total, Width}
    end
end,
{Cumulative_2, H_2, Height, Hist_2, I_6, Image_2, Mapping_2, Total, Width} = Fun_6(Cumulative_2, H_2, Height, Hist_2, I_5, Image, Mapping_2, Total, Width),
        Image_2
    catch {return, Ret} -> Ret end.

print_image(Image_3) ->
    try
        I_7 = 0,
        Fun_7 = fun Fun_7_loop(I_7, Image_3) ->
    case (I_7 < erlang:length(Image_3)) of
        true ->
            io:format("~ts~n", [mochi_repr((case erlang:is_map(Image_3) of true -> maps:get(I_7, Image_3, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(Image_3) + I_7 + 1, Image_3); _ -> lists:nth(I_7 + 1, Image_3) end end))]),
            I_8 = (I_7 + 1),
            Fun_7_loop(I_8, Image_3);
        _ -> {I_7, Image_3}
    end
end,
{I_8, Image_3} = Fun_7(I_7, Image_3),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('img', [[52, 55, 61], [59, 79, 61], [85, 76, 62]]),
    erlang:put('result', histogram_stretch(erlang:get('img'))),
    print_image(erlang:get('result')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
