#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, clamp_byte/1, convert_to_negative/1, change_contrast/2, gen_gaussian_kernel/2, img_convolve/2, sort_ints/1, median_filter/2, iabs/1, sobel_filter/1, get_neighbors_pixel/3, pow2/1, local_binary_value/3, local_binary_pattern/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

clamp_byte(X) ->
    try
        case (X < 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case (X > 255) of
        true -> throw({return, 255});
        _ -> ok
    end,
        X
    catch {return, Ret} -> Ret end.

convert_to_negative(Img) ->
    try
        H = erlang:length(Img),
        W = erlang:length((case erlang:is_map(Img) of true -> maps:get(0, Img, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img) + 0 + 1, Img); _ -> lists:nth(0 + 1, Img) end end)),
        Out = [],
        Y = 0,
        Fun_2 = fun Fun_2_loop(H, Img, Out, W, Y) ->
    case (Y < H) of
        true ->
            Row = [],
            X_2 = 0,
            Fun = fun Fun_loop(H, Img, Out, Row, W, X_2, Y) ->
    case (X_2 < W) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [(255 - (case erlang:is_map((case erlang:is_map(Img) of true -> maps:get(Y, Img, nil); _ -> case Y < 0 of true -> lists:nth(erlang:length(Img) + Y + 1, Img); _ -> lists:nth(Y + 1, Img) end end)) of true -> maps:get(X_2, (case erlang:is_map(Img) of true -> maps:get(Y, Img, nil); _ -> case Y < 0 of true -> lists:nth(erlang:length(Img) + Y + 1, Img); _ -> lists:nth(Y + 1, Img) end end), nil); _ -> case X_2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Img) of true -> maps:get(Y, Img, nil); _ -> case Y < 0 of true -> lists:nth(erlang:length(Img) + Y + 1, Img); _ -> lists:nth(Y + 1, Img) end end)) + X_2 + 1, (case erlang:is_map(Img) of true -> maps:get(Y, Img, nil); _ -> case Y < 0 of true -> lists:nth(erlang:length(Img) + Y + 1, Img); _ -> lists:nth(Y + 1, Img) end end)); _ -> lists:nth(X_2 + 1, (case erlang:is_map(Img) of true -> maps:get(Y, Img, nil); _ -> case Y < 0 of true -> lists:nth(erlang:length(Img) + Y + 1, Img); _ -> lists:nth(Y + 1, Img) end end)) end end))]),
            X_3 = (X_2 + 1),
            Fun_loop(H, Img, Out, Row_2, W, X_3, Y);
        _ -> {H, Img, Out, Row, W, X_2, Y}
    end
end,
{H, Img, Out, Row_2, W, X_3, Y} = Fun(H, Img, Out, Row, W, X_2, Y),
            Out_2 = lists:append((case Out of nil -> []; _ -> Out end), [Row_2]),
            Y_2 = (Y + 1),
            Fun_2_loop(H, Img, Out_2, W, Y_2);
        _ -> {H, Img, Out, W, Y}
    end
end,
{H, Img, Out_2, W, Y_2} = Fun_2(H, Img, Out, W, Y),
        Out_2
    catch {return, Ret} -> Ret end.

change_contrast(Img_2, Factor) ->
    try
        H_2 = erlang:length(Img_2),
        W_2 = erlang:length((case erlang:is_map(Img_2) of true -> maps:get(0, Img_2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img_2) + 0 + 1, Img_2); _ -> lists:nth(0 + 1, Img_2) end end)),
        Out_3 = [],
        Y_3 = 0,
        Fun_4 = fun Fun_4_loop(Factor, H_2, Img_2, Out_3, W_2, Y_3) ->
    case (Y_3 < H_2) of
        true ->
            Row_3 = [],
            X_4 = 0,
            Fun_3 = fun Fun_3_loop(Factor, H_2, Img_2, Out_3, Row_3, W_2, X_4, Y_3) ->
    case (X_4 < W_2) of
        true ->
            P = (case erlang:is_map((case erlang:is_map(Img_2) of true -> maps:get(Y_3, Img_2, nil); _ -> case Y_3 < 0 of true -> lists:nth(erlang:length(Img_2) + Y_3 + 1, Img_2); _ -> lists:nth(Y_3 + 1, Img_2) end end)) of true -> maps:get(X_4, (case erlang:is_map(Img_2) of true -> maps:get(Y_3, Img_2, nil); _ -> case Y_3 < 0 of true -> lists:nth(erlang:length(Img_2) + Y_3 + 1, Img_2); _ -> lists:nth(Y_3 + 1, Img_2) end end), nil); _ -> case X_4 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Img_2) of true -> maps:get(Y_3, Img_2, nil); _ -> case Y_3 < 0 of true -> lists:nth(erlang:length(Img_2) + Y_3 + 1, Img_2); _ -> lists:nth(Y_3 + 1, Img_2) end end)) + X_4 + 1, (case erlang:is_map(Img_2) of true -> maps:get(Y_3, Img_2, nil); _ -> case Y_3 < 0 of true -> lists:nth(erlang:length(Img_2) + Y_3 + 1, Img_2); _ -> lists:nth(Y_3 + 1, Img_2) end end)); _ -> lists:nth(X_4 + 1, (case erlang:is_map(Img_2) of true -> maps:get(Y_3, Img_2, nil); _ -> case Y_3 < 0 of true -> lists:nth(erlang:length(Img_2) + Y_3 + 1, Img_2); _ -> lists:nth(Y_3 + 1, Img_2) end end)) end end),
            V = ((((P - 128) * Factor) div 100) + 128),
            V_2 = clamp_byte(V),
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [V_2]),
            X_5 = (X_4 + 1),
            Fun_3_loop(Factor, H_2, Img_2, Out_3, Row_4, W_2, X_5, Y_3);
        _ -> {Factor, H_2, Img_2, Out_3, Row_3, W_2, X_4, Y_3}
    end
end,
{Factor, H_2, Img_2, Out_3, Row_4, W_2, X_5, Y_3} = Fun_3(Factor, H_2, Img_2, Out_3, Row_3, W_2, X_4, Y_3),
            Out_4 = lists:append((case Out_3 of nil -> []; _ -> Out_3 end), [Row_4]),
            Y_4 = (Y_3 + 1),
            Fun_4_loop(Factor, H_2, Img_2, Out_4, W_2, Y_4);
        _ -> {Factor, H_2, Img_2, Out_3, W_2, Y_3}
    end
end,
{Factor, H_2, Img_2, Out_4, W_2, Y_4} = Fun_4(Factor, H_2, Img_2, Out_3, W_2, Y_3),
        Out_4
    catch {return, Ret} -> Ret end.

gen_gaussian_kernel(N, Sigma) ->
    try
        case (N == 3) of
        true -> throw({return, [[mochi_safe_div(1, 16), mochi_safe_div(2, 16), mochi_safe_div(1, 16)], [mochi_safe_div(2, 16), mochi_safe_div(4, 16), mochi_safe_div(2, 16)], [mochi_safe_div(1, 16), mochi_safe_div(2, 16), mochi_safe_div(1, 16)]]});
        _ -> ok
    end,
        K = [],
        I = 0,
        Fun_6 = fun Fun_6_loop(I, K, N, Sigma) ->
    case (I < N) of
        true ->
            Row_5 = [],
            J = 0,
            Fun_5 = fun Fun_5_loop(I, J, K, N, Row_5, Sigma) ->
    case (J < N) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [0]),
            J_2 = (J + 1),
            Fun_5_loop(I, J_2, K, N, Row_6, Sigma);
        _ -> {I, J, K, N, Row_5, Sigma}
    end
end,
{I, J_2, K, N, Row_6, Sigma} = Fun_5(I, J, K, N, Row_5, Sigma),
            K_2 = lists:append((case K of nil -> []; _ -> K end), [Row_6]),
            I_2 = (I + 1),
            Fun_6_loop(I_2, K_2, N, Sigma);
        _ -> {I, K, N, Sigma}
    end
end,
{I_2, K_2, N, Sigma} = Fun_6(I, K, N, Sigma),
        K_2
    catch {return, Ret} -> Ret end.

img_convolve(Img_3, Kernel) ->
    try
        H_3 = erlang:length(Img_3),
        W_3 = erlang:length((case erlang:is_map(Img_3) of true -> maps:get(0, Img_3, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img_3) + 0 + 1, Img_3); _ -> lists:nth(0 + 1, Img_3) end end)),
        Out_5 = [],
        Y_5 = 0,
        Fun_10 = fun Fun_10_loop(H_3, Img_3, Kernel, Out_5, W_3, Y_5) ->
    case (Y_5 < H_3) of
        true ->
            Row_7 = [],
            X_6 = 0,
            Fun_9 = fun Fun_9_loop(H_3, Img_3, Kernel, Out_5, Row_7, W_3, X_6, Y_5) ->
    case (X_6 < W_3) of
        true ->
            Acc = 0,
            Ky = 0,
            Fun_8 = fun Fun_8_loop(Acc, H_3, Img_3, Kernel, Ky, Out_5, Row_7, W_3, X_6, Y_5) ->
    case (Ky < erlang:length(Kernel)) of
        true ->
            Kx = 0,
            Fun_7 = fun Fun_7_loop(Acc, H_3, Img_3, Kernel, Kx, Ky, Out_5, Row_7, W_3, X_6, Y_5) ->
    case (Kx < erlang:length((case erlang:is_map(Kernel) of true -> maps:get(0, Kernel, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Kernel) + 0 + 1, Kernel); _ -> lists:nth(0 + 1, Kernel) end end))) of
        true ->
            Iy = ((Y_5 + Ky) - 1),
            Ix = ((X_6 + Kx) - 1),
            Pixel = 0,
            case ((((Iy >= 0) andalso (Iy < H_3)) andalso (Ix >= 0)) andalso (Ix < W_3)) of
        true -> Pixel_2 = (case erlang:is_map((case erlang:is_map(Img_3) of true -> maps:get(Iy, Img_3, nil); _ -> case Iy < 0 of true -> lists:nth(erlang:length(Img_3) + Iy + 1, Img_3); _ -> lists:nth(Iy + 1, Img_3) end end)) of true -> maps:get(Ix, (case erlang:is_map(Img_3) of true -> maps:get(Iy, Img_3, nil); _ -> case Iy < 0 of true -> lists:nth(erlang:length(Img_3) + Iy + 1, Img_3); _ -> lists:nth(Iy + 1, Img_3) end end), nil); _ -> case Ix < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Img_3) of true -> maps:get(Iy, Img_3, nil); _ -> case Iy < 0 of true -> lists:nth(erlang:length(Img_3) + Iy + 1, Img_3); _ -> lists:nth(Iy + 1, Img_3) end end)) + Ix + 1, (case erlang:is_map(Img_3) of true -> maps:get(Iy, Img_3, nil); _ -> case Iy < 0 of true -> lists:nth(erlang:length(Img_3) + Iy + 1, Img_3); _ -> lists:nth(Iy + 1, Img_3) end end)); _ -> lists:nth(Ix + 1, (case erlang:is_map(Img_3) of true -> maps:get(Iy, Img_3, nil); _ -> case Iy < 0 of true -> lists:nth(erlang:length(Img_3) + Iy + 1, Img_3); _ -> lists:nth(Iy + 1, Img_3) end end)) end end),
            Pixel_3 = Pixel_2;
        _ -> Pixel_3 = Pixel
    end,
            Acc_2 = (Acc + mochi_safe_mul((case erlang:is_map((case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end)) of true -> maps:get(Kx, (case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end), nil); _ -> case Kx < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end)) + Kx + 1, (case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end)); _ -> lists:nth(Kx + 1, (case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end)) end end), mochi_safe_mul(1, Pixel_3))),
            Kx_2 = (Kx + 1),
            Fun_7_loop(Acc_2, H_3, Img_3, Kernel, Kx_2, Ky, Out_5, Row_7, W_3, X_6, Y_5);
        _ -> {Acc, H_3, Img_3, Kernel, Kx, Ky, Out_5, Row_7, W_3, X_6, Y_5}
    end
end,
{Acc_2, H_3, Img_3, Kernel, Kx_2, Ky, Out_5, Row_7, W_3, X_6, Y_5} = Fun_7(Acc, H_3, Img_3, Kernel, Kx, Ky, Out_5, Row_7, W_3, X_6, Y_5),
            Ky_2 = (Ky + 1),
            Fun_8_loop(Acc_2, H_3, Img_3, Kernel, Ky_2, Out_5, Row_7, W_3, X_6, Y_5);
        _ -> {Acc, H_3, Img_3, Kernel, Ky, Out_5, Row_7, W_3, X_6, Y_5}
    end
end,
{Acc_2, H_3, Img_3, Kernel, Ky_2, Out_5, Row_7, W_3, X_6, Y_5} = Fun_8(Acc, H_3, Img_3, Kernel, Ky, Out_5, Row_7, W_3, X_6, Y_5),
            Row_8 = lists:append((case Row_7 of nil -> []; _ -> Row_7 end), [mochi_to_int(Acc_2)]),
            X_7 = (X_6 + 1),
            Fun_9_loop(H_3, Img_3, Kernel, Out_5, Row_8, W_3, X_7, Y_5);
        _ -> {H_3, Img_3, Kernel, Out_5, Row_7, W_3, X_6, Y_5}
    end
end,
{H_3, Img_3, Kernel, Out_5, Row_8, W_3, X_7, Y_5} = Fun_9(H_3, Img_3, Kernel, Out_5, Row_7, W_3, X_6, Y_5),
            Out_6 = lists:append((case Out_5 of nil -> []; _ -> Out_5 end), [Row_8]),
            Y_6 = (Y_5 + 1),
            Fun_10_loop(H_3, Img_3, Kernel, Out_6, W_3, Y_6);
        _ -> {H_3, Img_3, Kernel, Out_5, W_3, Y_5}
    end
end,
{H_3, Img_3, Kernel, Out_6, W_3, Y_6} = Fun_10(H_3, Img_3, Kernel, Out_5, W_3, Y_5),
        Out_6
    catch {return, Ret} -> Ret end.

sort_ints(Xs) ->
    try
        Arr = Xs,
        I_3 = 0,
        Fun_12 = fun Fun_12_loop(Arr, I_3, Xs) ->
    case (I_3 < erlang:length(Arr)) of
        true ->
            J_3 = 0,
            Fun_11 = fun Fun_11_loop(Arr, I_3, J_3, Xs) ->
    case (J_3 < ((erlang:length(Arr) - 1) - I_3)) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(J_3, Arr, nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length(Arr) + J_3 + 1, Arr); _ -> lists:nth(J_3 + 1, Arr) end end) > (case erlang:is_map(Arr) of true -> maps:get((J_3 + 1), Arr, nil); _ -> case (J_3 + 1) < 0 of true -> lists:nth(erlang:length(Arr) + (J_3 + 1) + 1, Arr); _ -> lists:nth((J_3 + 1) + 1, Arr) end end)) of
        true -> Tmp = (case erlang:is_map(Arr) of true -> maps:get(J_3, Arr, nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length(Arr) + J_3 + 1, Arr); _ -> lists:nth(J_3 + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, J_3) ++ [(case erlang:is_map(Arr) of true -> maps:get((J_3 + 1), Arr, nil); _ -> case (J_3 + 1) < 0 of true -> lists:nth(erlang:length(Arr) + (J_3 + 1) + 1, Arr); _ -> lists:nth((J_3 + 1) + 1, Arr) end end)] ++ lists:nthtail(J_3 + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, (J_3 + 1)) ++ [Tmp] ++ lists:nthtail((J_3 + 1) + 1, Arr_2),
            Arr_4 = Arr_3,
            Tmp_2 = Tmp;
        _ -> Arr_4 = Arr,
            Tmp_2 = nil
    end,
            J_4 = (J_3 + 1),
            Fun_11_loop(Arr_4, I_3, J_4, Xs);
        _ -> {Arr, I_3, J_3, Xs}
    end
end,
{Arr_4, I_3, J_4, Xs} = Fun_11(Arr, I_3, J_3, Xs),
            I_4 = (I_3 + 1),
            Fun_12_loop(Arr_4, I_4, Xs);
        _ -> {Arr, I_3, Xs}
    end
end,
{Arr_4, I_4, Xs} = Fun_12(Arr, I_3, Xs),
        Arr_4
    catch {return, Ret} -> Ret end.

median_filter(Img_4, K_3) ->
    try
        H_4 = erlang:length(Img_4),
        W_4 = erlang:length((case erlang:is_map(Img_4) of true -> maps:get(0, Img_4, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img_4) + 0 + 1, Img_4); _ -> lists:nth(0 + 1, Img_4) end end)),
        Offset = (K_3 div 2),
        Out_7 = [],
        Y_7 = 0,
        Fun_16 = fun Fun_16_loop(H_4, Img_4, K_3, Offset, Out_7, W_4, Y_7) ->
    case (Y_7 < H_4) of
        true ->
            Row_9 = [],
            X_8 = 0,
            Fun_15 = fun Fun_15_loop(H_4, Img_4, K_3, Offset, Out_7, Row_9, W_4, X_8, Y_7) ->
    case (X_8 < W_4) of
        true ->
            Vals = [],
            Ky_3 = 0,
            Fun_14 = fun Fun_14_loop(H_4, Img_4, K_3, Ky_3, Offset, Out_7, Row_9, Vals, W_4, X_8, Y_7) ->
    case (Ky_3 < K_3) of
        true ->
            Kx_3 = 0,
            Fun_13 = fun Fun_13_loop(H_4, Img_4, K_3, Kx_3, Ky_3, Offset, Out_7, Row_9, Vals, W_4, X_8, Y_7) ->
    case (Kx_3 < K_3) of
        true ->
            Iy_2 = ((Y_7 + Ky_3) - Offset),
            Ix_2 = ((X_8 + Kx_3) - Offset),
            Pixel_4 = 0,
            case ((((Iy_2 >= 0) andalso (Iy_2 < H_4)) andalso (Ix_2 >= 0)) andalso (Ix_2 < W_4)) of
        true -> Pixel_5 = (case erlang:is_map((case erlang:is_map(Img_4) of true -> maps:get(Iy_2, Img_4, nil); _ -> case Iy_2 < 0 of true -> lists:nth(erlang:length(Img_4) + Iy_2 + 1, Img_4); _ -> lists:nth(Iy_2 + 1, Img_4) end end)) of true -> maps:get(Ix_2, (case erlang:is_map(Img_4) of true -> maps:get(Iy_2, Img_4, nil); _ -> case Iy_2 < 0 of true -> lists:nth(erlang:length(Img_4) + Iy_2 + 1, Img_4); _ -> lists:nth(Iy_2 + 1, Img_4) end end), nil); _ -> case Ix_2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Img_4) of true -> maps:get(Iy_2, Img_4, nil); _ -> case Iy_2 < 0 of true -> lists:nth(erlang:length(Img_4) + Iy_2 + 1, Img_4); _ -> lists:nth(Iy_2 + 1, Img_4) end end)) + Ix_2 + 1, (case erlang:is_map(Img_4) of true -> maps:get(Iy_2, Img_4, nil); _ -> case Iy_2 < 0 of true -> lists:nth(erlang:length(Img_4) + Iy_2 + 1, Img_4); _ -> lists:nth(Iy_2 + 1, Img_4) end end)); _ -> lists:nth(Ix_2 + 1, (case erlang:is_map(Img_4) of true -> maps:get(Iy_2, Img_4, nil); _ -> case Iy_2 < 0 of true -> lists:nth(erlang:length(Img_4) + Iy_2 + 1, Img_4); _ -> lists:nth(Iy_2 + 1, Img_4) end end)) end end),
            Pixel_6 = Pixel_5;
        _ -> Pixel_6 = Pixel_4
    end,
            Vals_2 = lists:append((case Vals of nil -> []; _ -> Vals end), [Pixel_6]),
            Kx_4 = (Kx_3 + 1),
            Fun_13_loop(H_4, Img_4, K_3, Kx_4, Ky_3, Offset, Out_7, Row_9, Vals_2, W_4, X_8, Y_7);
        _ -> {H_4, Img_4, K_3, Kx_3, Ky_3, Offset, Out_7, Row_9, Vals, W_4, X_8, Y_7}
    end
end,
{H_4, Img_4, K_3, Kx_4, Ky_3, Offset, Out_7, Row_9, Vals_2, W_4, X_8, Y_7} = Fun_13(H_4, Img_4, K_3, Kx_3, Ky_3, Offset, Out_7, Row_9, Vals, W_4, X_8, Y_7),
            Ky_4 = (Ky_3 + 1),
            Fun_14_loop(H_4, Img_4, K_3, Ky_4, Offset, Out_7, Row_9, Vals_2, W_4, X_8, Y_7);
        _ -> {H_4, Img_4, K_3, Ky_3, Offset, Out_7, Row_9, Vals, W_4, X_8, Y_7}
    end
end,
{H_4, Img_4, K_3, Ky_4, Offset, Out_7, Row_9, Vals_2, W_4, X_8, Y_7} = Fun_14(H_4, Img_4, K_3, Ky_3, Offset, Out_7, Row_9, Vals, W_4, X_8, Y_7),
            Sorted = sort_ints(Vals_2),
            Row_10 = lists:append((case Row_9 of nil -> []; _ -> Row_9 end), [(case erlang:is_map(Sorted) of true -> maps:get((erlang:length(Sorted) div 2), Sorted, nil); _ -> case (erlang:length(Sorted) div 2) < 0 of true -> lists:nth(erlang:length(Sorted) + (erlang:length(Sorted) div 2) + 1, Sorted); _ -> lists:nth((erlang:length(Sorted) div 2) + 1, Sorted) end end)]),
            X_9 = (X_8 + 1),
            Fun_15_loop(H_4, Img_4, K_3, Offset, Out_7, Row_10, W_4, X_9, Y_7);
        _ -> {H_4, Img_4, K_3, Offset, Out_7, Row_9, W_4, X_8, Y_7}
    end
end,
{H_4, Img_4, K_3, Offset, Out_7, Row_10, W_4, X_9, Y_7} = Fun_15(H_4, Img_4, K_3, Offset, Out_7, Row_9, W_4, X_8, Y_7),
            Out_8 = lists:append((case Out_7 of nil -> []; _ -> Out_7 end), [Row_10]),
            Y_8 = (Y_7 + 1),
            Fun_16_loop(H_4, Img_4, K_3, Offset, Out_8, W_4, Y_8);
        _ -> {H_4, Img_4, K_3, Offset, Out_7, W_4, Y_7}
    end
end,
{H_4, Img_4, K_3, Offset, Out_8, W_4, Y_8} = Fun_16(H_4, Img_4, K_3, Offset, Out_7, W_4, Y_7),
        Out_8
    catch {return, Ret} -> Ret end.

iabs(X_10) ->
    try
        (case (X_10 < 0) of
    true -> -X_10;
    _ -> X_10
end)
    catch {return, Ret} -> Ret end.

sobel_filter(Img_5) ->
    try
        Gx = [[1, 0, -1], [2, 0, -2], [1, 0, -1]],
        Gy = [[1, 2, 1], [0, 0, 0], [-1, -2, -1]],
        H_5 = erlang:length(Img_5),
        W_5 = erlang:length((case erlang:is_map(Img_5) of true -> maps:get(0, Img_5, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img_5) + 0 + 1, Img_5); _ -> lists:nth(0 + 1, Img_5) end end)),
        Out_9 = [],
        Y_9 = 0,
        Fun_20 = fun Fun_20_loop(Gx, Gy, H_5, Img_5, Out_9, W_5, Y_9) ->
    case (Y_9 < H_5) of
        true ->
            Row_11 = [],
            X_11 = 0,
            Fun_19 = fun Fun_19_loop(Gx, Gy, H_5, Img_5, Out_9, Row_11, W_5, X_11, Y_9) ->
    case (X_11 < W_5) of
        true ->
            Sx = 0,
            Sy = 0,
            Ky_5 = 0,
            Fun_18 = fun Fun_18_loop(Gx, Gy, H_5, Img_5, Ky_5, Out_9, Row_11, Sx, Sy, W_5, X_11, Y_9) ->
    case (Ky_5 < 3) of
        true ->
            Kx_5 = 0,
            Fun_17 = fun Fun_17_loop(Gx, Gy, H_5, Img_5, Kx_5, Ky_5, Out_9, Row_11, Sx, Sy, W_5, X_11, Y_9) ->
    case (Kx_5 < 3) of
        true ->
            Iy_3 = ((Y_9 + Ky_5) - 1),
            Ix_3 = ((X_11 + Kx_5) - 1),
            Pixel_7 = 0,
            case ((((Iy_3 >= 0) andalso (Iy_3 < H_5)) andalso (Ix_3 >= 0)) andalso (Ix_3 < W_5)) of
        true -> Pixel_8 = (case erlang:is_map((case erlang:is_map(Img_5) of true -> maps:get(Iy_3, Img_5, nil); _ -> case Iy_3 < 0 of true -> lists:nth(erlang:length(Img_5) + Iy_3 + 1, Img_5); _ -> lists:nth(Iy_3 + 1, Img_5) end end)) of true -> maps:get(Ix_3, (case erlang:is_map(Img_5) of true -> maps:get(Iy_3, Img_5, nil); _ -> case Iy_3 < 0 of true -> lists:nth(erlang:length(Img_5) + Iy_3 + 1, Img_5); _ -> lists:nth(Iy_3 + 1, Img_5) end end), nil); _ -> case Ix_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Img_5) of true -> maps:get(Iy_3, Img_5, nil); _ -> case Iy_3 < 0 of true -> lists:nth(erlang:length(Img_5) + Iy_3 + 1, Img_5); _ -> lists:nth(Iy_3 + 1, Img_5) end end)) + Ix_3 + 1, (case erlang:is_map(Img_5) of true -> maps:get(Iy_3, Img_5, nil); _ -> case Iy_3 < 0 of true -> lists:nth(erlang:length(Img_5) + Iy_3 + 1, Img_5); _ -> lists:nth(Iy_3 + 1, Img_5) end end)); _ -> lists:nth(Ix_3 + 1, (case erlang:is_map(Img_5) of true -> maps:get(Iy_3, Img_5, nil); _ -> case Iy_3 < 0 of true -> lists:nth(erlang:length(Img_5) + Iy_3 + 1, Img_5); _ -> lists:nth(Iy_3 + 1, Img_5) end end)) end end),
            Pixel_9 = Pixel_8;
        _ -> Pixel_9 = Pixel_7
    end,
            Sx_2 = (Sx + ((case erlang:is_map((case erlang:is_map(Gx) of true -> maps:get(Ky_5, Gx, nil); _ -> case Ky_5 < 0 of true -> lists:nth(erlang:length(Gx) + Ky_5 + 1, Gx); _ -> lists:nth(Ky_5 + 1, Gx) end end)) of true -> maps:get(Kx_5, (case erlang:is_map(Gx) of true -> maps:get(Ky_5, Gx, nil); _ -> case Ky_5 < 0 of true -> lists:nth(erlang:length(Gx) + Ky_5 + 1, Gx); _ -> lists:nth(Ky_5 + 1, Gx) end end), nil); _ -> case Kx_5 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Gx) of true -> maps:get(Ky_5, Gx, nil); _ -> case Ky_5 < 0 of true -> lists:nth(erlang:length(Gx) + Ky_5 + 1, Gx); _ -> lists:nth(Ky_5 + 1, Gx) end end)) + Kx_5 + 1, (case erlang:is_map(Gx) of true -> maps:get(Ky_5, Gx, nil); _ -> case Ky_5 < 0 of true -> lists:nth(erlang:length(Gx) + Ky_5 + 1, Gx); _ -> lists:nth(Ky_5 + 1, Gx) end end)); _ -> lists:nth(Kx_5 + 1, (case erlang:is_map(Gx) of true -> maps:get(Ky_5, Gx, nil); _ -> case Ky_5 < 0 of true -> lists:nth(erlang:length(Gx) + Ky_5 + 1, Gx); _ -> lists:nth(Ky_5 + 1, Gx) end end)) end end) * Pixel_9)),
            Sy_2 = (Sy + ((case erlang:is_map((case erlang:is_map(Gy) of true -> maps:get(Ky_5, Gy, nil); _ -> case Ky_5 < 0 of true -> lists:nth(erlang:length(Gy) + Ky_5 + 1, Gy); _ -> lists:nth(Ky_5 + 1, Gy) end end)) of true -> maps:get(Kx_5, (case erlang:is_map(Gy) of true -> maps:get(Ky_5, Gy, nil); _ -> case Ky_5 < 0 of true -> lists:nth(erlang:length(Gy) + Ky_5 + 1, Gy); _ -> lists:nth(Ky_5 + 1, Gy) end end), nil); _ -> case Kx_5 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Gy) of true -> maps:get(Ky_5, Gy, nil); _ -> case Ky_5 < 0 of true -> lists:nth(erlang:length(Gy) + Ky_5 + 1, Gy); _ -> lists:nth(Ky_5 + 1, Gy) end end)) + Kx_5 + 1, (case erlang:is_map(Gy) of true -> maps:get(Ky_5, Gy, nil); _ -> case Ky_5 < 0 of true -> lists:nth(erlang:length(Gy) + Ky_5 + 1, Gy); _ -> lists:nth(Ky_5 + 1, Gy) end end)); _ -> lists:nth(Kx_5 + 1, (case erlang:is_map(Gy) of true -> maps:get(Ky_5, Gy, nil); _ -> case Ky_5 < 0 of true -> lists:nth(erlang:length(Gy) + Ky_5 + 1, Gy); _ -> lists:nth(Ky_5 + 1, Gy) end end)) end end) * Pixel_9)),
            Kx_6 = (Kx_5 + 1),
            Fun_17_loop(Gx, Gy, H_5, Img_5, Kx_6, Ky_5, Out_9, Row_11, Sx_2, Sy_2, W_5, X_11, Y_9);
        _ -> {Gx, Gy, H_5, Img_5, Kx_5, Ky_5, Out_9, Row_11, Sx, Sy, W_5, X_11, Y_9}
    end
end,
{Gx, Gy, H_5, Img_5, Kx_6, Ky_5, Out_9, Row_11, Sx_2, Sy_2, W_5, X_11, Y_9} = Fun_17(Gx, Gy, H_5, Img_5, Kx_5, Ky_5, Out_9, Row_11, Sx, Sy, W_5, X_11, Y_9),
            Ky_6 = (Ky_5 + 1),
            Fun_18_loop(Gx, Gy, H_5, Img_5, Ky_6, Out_9, Row_11, Sx_2, Sy_2, W_5, X_11, Y_9);
        _ -> {Gx, Gy, H_5, Img_5, Ky_5, Out_9, Row_11, Sx, Sy, W_5, X_11, Y_9}
    end
end,
{Gx, Gy, H_5, Img_5, Ky_6, Out_9, Row_11, Sx_2, Sy_2, W_5, X_11, Y_9} = Fun_18(Gx, Gy, H_5, Img_5, Ky_5, Out_9, Row_11, Sx, Sy, W_5, X_11, Y_9),
            Row_12 = lists:append((case Row_11 of nil -> []; _ -> Row_11 end), [(iabs(Sx_2) + iabs(Sy_2))]),
            X_12 = (X_11 + 1),
            Fun_19_loop(Gx, Gy, H_5, Img_5, Out_9, Row_12, W_5, X_12, Y_9);
        _ -> {Gx, Gy, H_5, Img_5, Out_9, Row_11, W_5, X_11, Y_9}
    end
end,
{Gx, Gy, H_5, Img_5, Out_9, Row_12, W_5, X_12, Y_9} = Fun_19(Gx, Gy, H_5, Img_5, Out_9, Row_11, W_5, X_11, Y_9),
            Out_10 = lists:append((case Out_9 of nil -> []; _ -> Out_9 end), [Row_12]),
            Y_10 = (Y_9 + 1),
            Fun_20_loop(Gx, Gy, H_5, Img_5, Out_10, W_5, Y_10);
        _ -> {Gx, Gy, H_5, Img_5, Out_9, W_5, Y_9}
    end
end,
{Gx, Gy, H_5, Img_5, Out_10, W_5, Y_10} = Fun_20(Gx, Gy, H_5, Img_5, Out_9, W_5, Y_9),
        Out_10
    catch {return, Ret} -> Ret end.

get_neighbors_pixel(Img_6, X_13, Y_11) ->
    try
        H_6 = erlang:length(Img_6),
        W_6 = erlang:length((case erlang:is_map(Img_6) of true -> maps:get(0, Img_6, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img_6) + 0 + 1, Img_6); _ -> lists:nth(0 + 1, Img_6) end end)),
        Neighbors = [],
        Dy = -1,
        Fun_22 = fun Fun_22_loop(Dy, H_6, Img_6, Neighbors, W_6, X_13, Y_11) ->
    case (Dy =< 1) of
        true ->
            Dx = -1,
            Fun_21 = fun Fun_21_loop(Dx, Dy, H_6, Img_6, Neighbors, W_6, X_13, Y_11) ->
    case (Dx =< 1) of
        true ->
            case mochi_not(((Dx == 0) andalso (Dy == 0))) of
        true -> Ny = (Y_11 + Dy),
            Nx = (X_13 + Dx),
            Val = 0,
            case ((((Ny >= 0) andalso (Ny < H_6)) andalso (Nx >= 0)) andalso (Nx < W_6)) of
        true -> Val_2 = (case erlang:is_map((case erlang:is_map(Img_6) of true -> maps:get(Ny, Img_6, nil); _ -> case Ny < 0 of true -> lists:nth(erlang:length(Img_6) + Ny + 1, Img_6); _ -> lists:nth(Ny + 1, Img_6) end end)) of true -> maps:get(Nx, (case erlang:is_map(Img_6) of true -> maps:get(Ny, Img_6, nil); _ -> case Ny < 0 of true -> lists:nth(erlang:length(Img_6) + Ny + 1, Img_6); _ -> lists:nth(Ny + 1, Img_6) end end), nil); _ -> case Nx < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Img_6) of true -> maps:get(Ny, Img_6, nil); _ -> case Ny < 0 of true -> lists:nth(erlang:length(Img_6) + Ny + 1, Img_6); _ -> lists:nth(Ny + 1, Img_6) end end)) + Nx + 1, (case erlang:is_map(Img_6) of true -> maps:get(Ny, Img_6, nil); _ -> case Ny < 0 of true -> lists:nth(erlang:length(Img_6) + Ny + 1, Img_6); _ -> lists:nth(Ny + 1, Img_6) end end)); _ -> lists:nth(Nx + 1, (case erlang:is_map(Img_6) of true -> maps:get(Ny, Img_6, nil); _ -> case Ny < 0 of true -> lists:nth(erlang:length(Img_6) + Ny + 1, Img_6); _ -> lists:nth(Ny + 1, Img_6) end end)) end end),
            Val_3 = Val_2;
        _ -> Val_3 = Val
    end,
            Neighbors_2 = lists:append((case Neighbors of nil -> []; _ -> Neighbors end), [Val_3]),
            Neighbors_3 = Neighbors_2,
            Nx_2 = Nx,
            Ny_2 = Ny,
            Val_4 = Val_3;
        _ -> Neighbors_3 = Neighbors,
            Nx_2 = nil,
            Ny_2 = nil,
            Val_4 = nil
    end,
            Dx_2 = (Dx + 1),
            Fun_21_loop(Dx_2, Dy, H_6, Img_6, Neighbors_3, W_6, X_13, Y_11);
        _ -> {Dx, Dy, H_6, Img_6, Neighbors, W_6, X_13, Y_11}
    end
end,
{Dx_2, Dy, H_6, Img_6, Neighbors_3, W_6, X_13, Y_11} = Fun_21(Dx, Dy, H_6, Img_6, Neighbors, W_6, X_13, Y_11),
            Dy_2 = (Dy + 1),
            Fun_22_loop(Dy_2, H_6, Img_6, Neighbors_3, W_6, X_13, Y_11);
        _ -> {Dy, H_6, Img_6, Neighbors, W_6, X_13, Y_11}
    end
end,
{Dy_2, H_6, Img_6, Neighbors_3, W_6, X_13, Y_11} = Fun_22(Dy, H_6, Img_6, Neighbors, W_6, X_13, Y_11),
        Neighbors_3
    catch {return, Ret} -> Ret end.

pow2(E) ->
    try
        R = 1,
        I_5 = 0,
        Fun_23 = fun Fun_23_loop(E, I_5, R) ->
    case (I_5 < E) of
        true ->
            R_2 = (R * 2),
            I_6 = (I_5 + 1),
            Fun_23_loop(E, I_6, R_2);
        _ -> {E, I_5, R}
    end
end,
{E, I_6, R_2} = Fun_23(E, I_5, R),
        R_2
    catch {return, Ret} -> Ret end.

local_binary_value(Img_7, X_14, Y_12) ->
    try
        Center = (case erlang:is_map((case erlang:is_map(Img_7) of true -> maps:get(Y_12, Img_7, nil); _ -> case Y_12 < 0 of true -> lists:nth(erlang:length(Img_7) + Y_12 + 1, Img_7); _ -> lists:nth(Y_12 + 1, Img_7) end end)) of true -> maps:get(X_14, (case erlang:is_map(Img_7) of true -> maps:get(Y_12, Img_7, nil); _ -> case Y_12 < 0 of true -> lists:nth(erlang:length(Img_7) + Y_12 + 1, Img_7); _ -> lists:nth(Y_12 + 1, Img_7) end end), nil); _ -> case X_14 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Img_7) of true -> maps:get(Y_12, Img_7, nil); _ -> case Y_12 < 0 of true -> lists:nth(erlang:length(Img_7) + Y_12 + 1, Img_7); _ -> lists:nth(Y_12 + 1, Img_7) end end)) + X_14 + 1, (case erlang:is_map(Img_7) of true -> maps:get(Y_12, Img_7, nil); _ -> case Y_12 < 0 of true -> lists:nth(erlang:length(Img_7) + Y_12 + 1, Img_7); _ -> lists:nth(Y_12 + 1, Img_7) end end)); _ -> lists:nth(X_14 + 1, (case erlang:is_map(Img_7) of true -> maps:get(Y_12, Img_7, nil); _ -> case Y_12 < 0 of true -> lists:nth(erlang:length(Img_7) + Y_12 + 1, Img_7); _ -> lists:nth(Y_12 + 1, Img_7) end end)) end end),
        Neighbors_4 = get_neighbors_pixel(Img_7, X_14, Y_12),
        V_3 = 0,
        I_7 = 0,
        Fun_24 = fun Fun_24_loop(Center, I_7, Img_7, Neighbors_4, V_3, X_14, Y_12) ->
    case (I_7 < erlang:length(Neighbors_4)) of
        true ->
            case ((case erlang:is_map(Neighbors_4) of true -> maps:get(I_7, Neighbors_4, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(Neighbors_4) + I_7 + 1, Neighbors_4); _ -> lists:nth(I_7 + 1, Neighbors_4) end end) >= Center) of
        true -> V_4 = (V_3 + pow2(I_7)),
            V_5 = V_4;
        _ -> V_5 = V_3
    end,
            I_8 = (I_7 + 1),
            Fun_24_loop(Center, I_8, Img_7, Neighbors_4, V_5, X_14, Y_12);
        _ -> {Center, I_7, Img_7, Neighbors_4, V_3, X_14, Y_12}
    end
end,
{Center, I_8, Img_7, Neighbors_4, V_5, X_14, Y_12} = Fun_24(Center, I_7, Img_7, Neighbors_4, V_3, X_14, Y_12),
        V_5
    catch {return, Ret} -> Ret end.

local_binary_pattern(Img_8) ->
    try
        H_7 = erlang:length(Img_8),
        W_7 = erlang:length((case erlang:is_map(Img_8) of true -> maps:get(0, Img_8, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img_8) + 0 + 1, Img_8); _ -> lists:nth(0 + 1, Img_8) end end)),
        Out_11 = [],
        Y_13 = 0,
        Fun_26 = fun Fun_26_loop(H_7, Img_8, Out_11, W_7, Y_13) ->
    case (Y_13 < H_7) of
        true ->
            Row_13 = [],
            X_15 = 0,
            Fun_25 = fun Fun_25_loop(H_7, Img_8, Out_11, Row_13, W_7, X_15, Y_13) ->
    case (X_15 < W_7) of
        true ->
            Row_14 = lists:append((case Row_13 of nil -> []; _ -> Row_13 end), [local_binary_value(Img_8, X_15, Y_13)]),
            X_16 = (X_15 + 1),
            Fun_25_loop(H_7, Img_8, Out_11, Row_14, W_7, X_16, Y_13);
        _ -> {H_7, Img_8, Out_11, Row_13, W_7, X_15, Y_13}
    end
end,
{H_7, Img_8, Out_11, Row_14, W_7, X_16, Y_13} = Fun_25(H_7, Img_8, Out_11, Row_13, W_7, X_15, Y_13),
            Out_12 = lists:append((case Out_11 of nil -> []; _ -> Out_11 end), [Row_14]),
            Y_14 = (Y_13 + 1),
            Fun_26_loop(H_7, Img_8, Out_12, W_7, Y_14);
        _ -> {H_7, Img_8, Out_11, W_7, Y_13}
    end
end,
{H_7, Img_8, Out_12, W_7, Y_14} = Fun_26(H_7, Img_8, Out_11, W_7, Y_13),
        Out_12
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('img', [[52, 55, 61], [62, 59, 55], [63, 65, 66]]),
    erlang:put('negative', convert_to_negative(erlang:get('img'))),
    erlang:put('contrast', change_contrast(erlang:get('img'), 110)),
    erlang:put('kernel', gen_gaussian_kernel(3, 1)),
    erlang:put('laplace', [[0.25, 0.5, 0.25], [0.5, -3, 0.5], [0.25, 0.5, 0.25]]),
    erlang:put('convolved', img_convolve(erlang:get('img'), erlang:get('laplace'))),
    erlang:put('medianed', median_filter(erlang:get('img'), 3)),
    erlang:put('sobel', sobel_filter(erlang:get('img'))),
    erlang:put('lbp_img', local_binary_pattern(erlang:get('img'))),
    io:format("~ts~n", [mochi_repr(erlang:get('negative'))]),
    io:format("~ts~n", [mochi_repr(erlang:get('contrast'))]),
    io:format("~ts~n", [mochi_repr(erlang:get('kernel'))]),
    io:format("~ts~n", [mochi_repr(erlang:get('convolved'))]),
    io:format("~ts~n", [mochi_repr(erlang:get('medianed'))]),
    io:format("~ts~n", [mochi_repr(erlang:get('sobel'))]),
    io:format("~ts~n", [mochi_repr(erlang:get('lbp_img'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
