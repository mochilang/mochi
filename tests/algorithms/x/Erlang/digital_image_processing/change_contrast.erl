#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, change_contrast/2, print_image/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

change_contrast(Img, Level) ->
    try
        Factor = mochi_safe_div(mochi_safe_mul(259, (float(Level) + 255)), mochi_safe_mul(255, (259 - float(Level)))),
        Result = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Factor, I, Img, Level, Result) ->
    case (I < erlang:length(Img)) of
        true ->
            Row = (case erlang:is_map(Img) of true -> maps:get(I, Img, nil); _ -> lists:nth(I + 1, Img) end),
            New_row = [],
            J = 0,
            Fun = fun Fun_loop(Factor, I, Img, J, Level, New_row, Result, Row) ->
    case (J < erlang:length(Row)) of
        true ->
            C = (case erlang:is_map(Row) of true -> maps:get(J, Row, nil); _ -> lists:nth(J + 1, Row) end),
            Contrasted = mochi_to_int((128 + mochi_safe_mul(Factor, (float(C) - 128)))),
            Clamped = (case (Contrasted < 0) of
    true -> 0;
    _ -> (case (Contrasted > 255) of
    true -> 255;
    _ -> Contrasted
end)
end),
            New_row_2 = lists:append((case New_row of nil -> []; _ -> New_row end), [Clamped]),
            J_2 = (J + 1),
            Fun_loop(Factor, I, Img, J_2, Level, New_row_2, Result, Row);
        _ -> {Factor, I, Img, J, Level, New_row, Result, Row}
    end
end,
{Factor, I, Img, J_2, Level, New_row_2, Result, Row} = Fun(Factor, I, Img, J, Level, New_row, Result, Row),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [New_row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Factor, I_2, Img, Level, Result_2);
        _ -> {Factor, I, Img, Level, Result}
    end
end,
{Factor, I_2, Img, Level, Result_2} = Fun_2(Factor, I, Img, Level, Result),
        Result_2
    catch {return, Ret} -> Ret end.

print_image(Img_2) ->
    try
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(I_3, Img_2) ->
    case (I_3 < erlang:length(Img_2)) of
        true ->
            Row_2 = (case erlang:is_map(Img_2) of true -> maps:get(I_3, Img_2, nil); _ -> lists:nth(I_3 + 1, Img_2) end),
            J_3 = 0,
            Line = "",
            Fun_3 = fun Fun_3_loop(I_3, Img_2, J_3, Line, Row_2) ->
    case (J_3 < erlang:length(Row_2)) of
        true ->
            Line_2 = ((Line ++ mochi_str((case erlang:is_map(Row_2) of true -> maps:get(J_3, Row_2, nil); _ -> lists:nth(J_3 + 1, Row_2) end))) ++ " "),
            J_4 = (J_3 + 1),
            Fun_3_loop(I_3, Img_2, J_4, Line_2, Row_2);
        _ -> {I_3, Img_2, J_3, Line, Row_2}
    end
end,
{I_3, Img_2, J_4, Line_2, Row_2} = Fun_3(I_3, Img_2, J_3, Line, Row_2),
            io:format("~ts~n", [mochi_repr(Line_2)]),
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, Img_2);
        _ -> {I_3, Img_2}
    end
end,
{I_4, Img_2} = Fun_4(I_3, Img_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('image', [[100, 125, 150], [175, 200, 225], [50, 75, 100]]),
    io:format("~ts~n", [mochi_repr("Original image:")]),
    print_image(erlang:get('image')),
    erlang:put('contrasted', change_contrast(erlang:get('image'), 170)),
    io:format("~ts~n", [mochi_repr("After contrast:")]),
    print_image(erlang:get('contrasted')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
