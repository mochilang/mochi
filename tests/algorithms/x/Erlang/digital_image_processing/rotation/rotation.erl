#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, mat_inverse3/1, mat_vec_mul/2, create_matrix/3, round_to_int/1, get_rotation/5]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mat_inverse3(M) ->
    try
        A = (case erlang:is_map((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end)) of true -> maps:get(0, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end)) + 0 + 1, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end)) end end),
        B = (case erlang:is_map((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end)) of true -> maps:get(1, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end)) + 1 + 1, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end)) end end),
        C = (case erlang:is_map((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end)) of true -> maps:get(2, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end), nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end)) + 2 + 1, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end)); _ -> lists:nth(2 + 1, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(M) + 0 + 1, M); _ -> lists:nth(0 + 1, M) end end)) end end),
        D = (case erlang:is_map((case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end)) of true -> maps:get(0, (case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end)) + 0 + 1, (case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end)) end end),
        E = (case erlang:is_map((case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end)) of true -> maps:get(1, (case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end)) + 1 + 1, (case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end)) end end),
        F = (case erlang:is_map((case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end)) of true -> maps:get(2, (case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end), nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end)) + 2 + 1, (case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end)); _ -> lists:nth(2 + 1, (case erlang:is_map(M) of true -> maps:get(1, M, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M) + 1 + 1, M); _ -> lists:nth(1 + 1, M) end end)) end end),
        G = (case erlang:is_map((case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end)) of true -> maps:get(0, (case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end)) + 0 + 1, (case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end)) end end),
        H = (case erlang:is_map((case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end)) of true -> maps:get(1, (case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end)) + 1 + 1, (case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end)) end end),
        I = (case erlang:is_map((case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end)) of true -> maps:get(2, (case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end), nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end)) + 2 + 1, (case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end)); _ -> lists:nth(2 + 1, (case erlang:is_map(M) of true -> maps:get(2, M, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(M) + 2 + 1, M); _ -> lists:nth(2 + 1, M) end end)) end end),
        Det = ((mochi_safe_mul(A, (mochi_safe_mul(E, I) - mochi_safe_mul(F, H))) - mochi_safe_mul(B, (mochi_safe_mul(D, I) - mochi_safe_mul(F, G)))) + mochi_safe_mul(C, (mochi_safe_mul(D, H) - mochi_safe_mul(E, G)))),
        case (Det == 0) of
        true -> erlang:error("singular matrix");
        _ -> ok
    end,
        Adj00 = (mochi_safe_mul(E, I) - mochi_safe_mul(F, H)),
        Adj01 = (mochi_safe_mul(C, H) - mochi_safe_mul(B, I)),
        Adj02 = (mochi_safe_mul(B, F) - mochi_safe_mul(C, E)),
        Adj10 = (mochi_safe_mul(F, G) - mochi_safe_mul(D, I)),
        Adj11 = (mochi_safe_mul(A, I) - mochi_safe_mul(C, G)),
        Adj12 = (mochi_safe_mul(C, D) - mochi_safe_mul(A, F)),
        Adj20 = (mochi_safe_mul(D, H) - mochi_safe_mul(E, G)),
        Adj21 = (mochi_safe_mul(B, G) - mochi_safe_mul(A, H)),
        Adj22 = (mochi_safe_mul(A, E) - mochi_safe_mul(B, D)),
        Inv = [],
        Inv_2 = lists:append((case Inv of nil -> []; _ -> Inv end), [[mochi_safe_div(Adj00, Det), mochi_safe_div(Adj01, Det), mochi_safe_div(Adj02, Det)]]),
        Inv_3 = lists:append((case Inv_2 of nil -> []; _ -> Inv_2 end), [[mochi_safe_div(Adj10, Det), mochi_safe_div(Adj11, Det), mochi_safe_div(Adj12, Det)]]),
        Inv_4 = lists:append((case Inv_3 of nil -> []; _ -> Inv_3 end), [[mochi_safe_div(Adj20, Det), mochi_safe_div(Adj21, Det), mochi_safe_div(Adj22, Det)]]),
        Inv_4
    catch {return, Ret} -> Ret end.

mat_vec_mul(M_2, V) ->
    try
        Res = [],
        I_2 = 0,
        Fun = fun Fun_loop(I_2, M_2, Res, V) ->
    case (I_2 < 3) of
        true ->
            Val = ((mochi_safe_mul((case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end)) of true -> maps:get(0, (case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end)) + 0 + 1, (case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end)) end end), (case erlang:is_map(V) of true -> maps:get(0, V, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(V) + 0 + 1, V); _ -> lists:nth(0 + 1, V) end end)) + mochi_safe_mul((case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end)) of true -> maps:get(1, (case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end)) + 1 + 1, (case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end)) end end), (case erlang:is_map(V) of true -> maps:get(1, V, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(V) + 1 + 1, V); _ -> lists:nth(1 + 1, V) end end))) + mochi_safe_mul((case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end)) of true -> maps:get(2, (case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end), nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end)) + 2 + 1, (case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end)); _ -> lists:nth(2 + 1, (case erlang:is_map(M_2) of true -> maps:get(I_2, M_2, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(M_2) + I_2 + 1, M_2); _ -> lists:nth(I_2 + 1, M_2) end end)) end end), (case erlang:is_map(V) of true -> maps:get(2, V, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(V) + 2 + 1, V); _ -> lists:nth(2 + 1, V) end end))),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Val]),
            I_3 = (I_2 + 1),
            Fun_loop(I_3, M_2, Res_2, V);
        _ -> {I_2, M_2, Res, V}
    end
end,
{I_3, M_2, Res_2, V} = Fun(I_2, M_2, Res, V),
        Res_2
    catch {return, Ret} -> Ret end.

create_matrix(Rows, Cols, Value) ->
    try
        Result = [],
        R = 0,
        Fun_3 = fun Fun_3_loop(Cols, R, Result, Rows, Value) ->
    case (R < Rows) of
        true ->
            Row = [],
            C_2 = 0,
            Fun_2 = fun Fun_2_loop(C_2, Cols, R, Result, Row, Rows, Value) ->
    case (C_2 < Cols) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Value]),
            C_3 = (C_2 + 1),
            Fun_2_loop(C_3, Cols, R, Result, Row_2, Rows, Value);
        _ -> {C_2, Cols, R, Result, Row, Rows, Value}
    end
end,
{C_3, Cols, R, Result, Row_2, Rows, Value} = Fun_2(C_2, Cols, R, Result, Row, Rows, Value),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_2]),
            R_2 = (R + 1),
            Fun_3_loop(Cols, R_2, Result_2, Rows, Value);
        _ -> {Cols, R, Result, Rows, Value}
    end
end,
{Cols, R_2, Result_2, Rows, Value} = Fun_3(Cols, R, Result, Rows, Value),
        Result_2
    catch {return, Ret} -> Ret end.

round_to_int(X) ->
    try
        (case (X >= 0) of
    true -> mochi_to_int((X + 0.5));
    _ -> mochi_to_int((X - 0.5))
end)
    catch {return, Ret} -> Ret end.

get_rotation(Img, Pt1, Pt2, Rows_2, Cols_2) ->
    try
        Src = [[(case erlang:is_map((case erlang:is_map(Pt1) of true -> maps:get(0, Pt1, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt1) + 0 + 1, Pt1); _ -> lists:nth(0 + 1, Pt1) end end)) of true -> maps:get(0, (case erlang:is_map(Pt1) of true -> maps:get(0, Pt1, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt1) + 0 + 1, Pt1); _ -> lists:nth(0 + 1, Pt1) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Pt1) of true -> maps:get(0, Pt1, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt1) + 0 + 1, Pt1); _ -> lists:nth(0 + 1, Pt1) end end)) + 0 + 1, (case erlang:is_map(Pt1) of true -> maps:get(0, Pt1, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt1) + 0 + 1, Pt1); _ -> lists:nth(0 + 1, Pt1) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(Pt1) of true -> maps:get(0, Pt1, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt1) + 0 + 1, Pt1); _ -> lists:nth(0 + 1, Pt1) end end)) end end), (case erlang:is_map((case erlang:is_map(Pt1) of true -> maps:get(0, Pt1, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt1) + 0 + 1, Pt1); _ -> lists:nth(0 + 1, Pt1) end end)) of true -> maps:get(1, (case erlang:is_map(Pt1) of true -> maps:get(0, Pt1, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt1) + 0 + 1, Pt1); _ -> lists:nth(0 + 1, Pt1) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Pt1) of true -> maps:get(0, Pt1, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt1) + 0 + 1, Pt1); _ -> lists:nth(0 + 1, Pt1) end end)) + 1 + 1, (case erlang:is_map(Pt1) of true -> maps:get(0, Pt1, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt1) + 0 + 1, Pt1); _ -> lists:nth(0 + 1, Pt1) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(Pt1) of true -> maps:get(0, Pt1, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt1) + 0 + 1, Pt1); _ -> lists:nth(0 + 1, Pt1) end end)) end end), 1], [(case erlang:is_map((case erlang:is_map(Pt1) of true -> maps:get(1, Pt1, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt1) + 1 + 1, Pt1); _ -> lists:nth(1 + 1, Pt1) end end)) of true -> maps:get(0, (case erlang:is_map(Pt1) of true -> maps:get(1, Pt1, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt1) + 1 + 1, Pt1); _ -> lists:nth(1 + 1, Pt1) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Pt1) of true -> maps:get(1, Pt1, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt1) + 1 + 1, Pt1); _ -> lists:nth(1 + 1, Pt1) end end)) + 0 + 1, (case erlang:is_map(Pt1) of true -> maps:get(1, Pt1, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt1) + 1 + 1, Pt1); _ -> lists:nth(1 + 1, Pt1) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(Pt1) of true -> maps:get(1, Pt1, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt1) + 1 + 1, Pt1); _ -> lists:nth(1 + 1, Pt1) end end)) end end), (case erlang:is_map((case erlang:is_map(Pt1) of true -> maps:get(1, Pt1, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt1) + 1 + 1, Pt1); _ -> lists:nth(1 + 1, Pt1) end end)) of true -> maps:get(1, (case erlang:is_map(Pt1) of true -> maps:get(1, Pt1, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt1) + 1 + 1, Pt1); _ -> lists:nth(1 + 1, Pt1) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Pt1) of true -> maps:get(1, Pt1, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt1) + 1 + 1, Pt1); _ -> lists:nth(1 + 1, Pt1) end end)) + 1 + 1, (case erlang:is_map(Pt1) of true -> maps:get(1, Pt1, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt1) + 1 + 1, Pt1); _ -> lists:nth(1 + 1, Pt1) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(Pt1) of true -> maps:get(1, Pt1, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt1) + 1 + 1, Pt1); _ -> lists:nth(1 + 1, Pt1) end end)) end end), 1], [(case erlang:is_map((case erlang:is_map(Pt1) of true -> maps:get(2, Pt1, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt1) + 2 + 1, Pt1); _ -> lists:nth(2 + 1, Pt1) end end)) of true -> maps:get(0, (case erlang:is_map(Pt1) of true -> maps:get(2, Pt1, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt1) + 2 + 1, Pt1); _ -> lists:nth(2 + 1, Pt1) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Pt1) of true -> maps:get(2, Pt1, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt1) + 2 + 1, Pt1); _ -> lists:nth(2 + 1, Pt1) end end)) + 0 + 1, (case erlang:is_map(Pt1) of true -> maps:get(2, Pt1, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt1) + 2 + 1, Pt1); _ -> lists:nth(2 + 1, Pt1) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(Pt1) of true -> maps:get(2, Pt1, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt1) + 2 + 1, Pt1); _ -> lists:nth(2 + 1, Pt1) end end)) end end), (case erlang:is_map((case erlang:is_map(Pt1) of true -> maps:get(2, Pt1, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt1) + 2 + 1, Pt1); _ -> lists:nth(2 + 1, Pt1) end end)) of true -> maps:get(1, (case erlang:is_map(Pt1) of true -> maps:get(2, Pt1, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt1) + 2 + 1, Pt1); _ -> lists:nth(2 + 1, Pt1) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Pt1) of true -> maps:get(2, Pt1, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt1) + 2 + 1, Pt1); _ -> lists:nth(2 + 1, Pt1) end end)) + 1 + 1, (case erlang:is_map(Pt1) of true -> maps:get(2, Pt1, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt1) + 2 + 1, Pt1); _ -> lists:nth(2 + 1, Pt1) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(Pt1) of true -> maps:get(2, Pt1, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt1) + 2 + 1, Pt1); _ -> lists:nth(2 + 1, Pt1) end end)) end end), 1]],
        Inv_5 = mat_inverse3(Src),
        Vecx = [(case erlang:is_map((case erlang:is_map(Pt2) of true -> maps:get(0, Pt2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt2) + 0 + 1, Pt2); _ -> lists:nth(0 + 1, Pt2) end end)) of true -> maps:get(0, (case erlang:is_map(Pt2) of true -> maps:get(0, Pt2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt2) + 0 + 1, Pt2); _ -> lists:nth(0 + 1, Pt2) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Pt2) of true -> maps:get(0, Pt2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt2) + 0 + 1, Pt2); _ -> lists:nth(0 + 1, Pt2) end end)) + 0 + 1, (case erlang:is_map(Pt2) of true -> maps:get(0, Pt2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt2) + 0 + 1, Pt2); _ -> lists:nth(0 + 1, Pt2) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(Pt2) of true -> maps:get(0, Pt2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt2) + 0 + 1, Pt2); _ -> lists:nth(0 + 1, Pt2) end end)) end end), (case erlang:is_map((case erlang:is_map(Pt2) of true -> maps:get(1, Pt2, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt2) + 1 + 1, Pt2); _ -> lists:nth(1 + 1, Pt2) end end)) of true -> maps:get(0, (case erlang:is_map(Pt2) of true -> maps:get(1, Pt2, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt2) + 1 + 1, Pt2); _ -> lists:nth(1 + 1, Pt2) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Pt2) of true -> maps:get(1, Pt2, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt2) + 1 + 1, Pt2); _ -> lists:nth(1 + 1, Pt2) end end)) + 0 + 1, (case erlang:is_map(Pt2) of true -> maps:get(1, Pt2, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt2) + 1 + 1, Pt2); _ -> lists:nth(1 + 1, Pt2) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(Pt2) of true -> maps:get(1, Pt2, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt2) + 1 + 1, Pt2); _ -> lists:nth(1 + 1, Pt2) end end)) end end), (case erlang:is_map((case erlang:is_map(Pt2) of true -> maps:get(2, Pt2, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt2) + 2 + 1, Pt2); _ -> lists:nth(2 + 1, Pt2) end end)) of true -> maps:get(0, (case erlang:is_map(Pt2) of true -> maps:get(2, Pt2, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt2) + 2 + 1, Pt2); _ -> lists:nth(2 + 1, Pt2) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Pt2) of true -> maps:get(2, Pt2, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt2) + 2 + 1, Pt2); _ -> lists:nth(2 + 1, Pt2) end end)) + 0 + 1, (case erlang:is_map(Pt2) of true -> maps:get(2, Pt2, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt2) + 2 + 1, Pt2); _ -> lists:nth(2 + 1, Pt2) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(Pt2) of true -> maps:get(2, Pt2, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt2) + 2 + 1, Pt2); _ -> lists:nth(2 + 1, Pt2) end end)) end end)],
        Vecy = [(case erlang:is_map((case erlang:is_map(Pt2) of true -> maps:get(0, Pt2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt2) + 0 + 1, Pt2); _ -> lists:nth(0 + 1, Pt2) end end)) of true -> maps:get(1, (case erlang:is_map(Pt2) of true -> maps:get(0, Pt2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt2) + 0 + 1, Pt2); _ -> lists:nth(0 + 1, Pt2) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Pt2) of true -> maps:get(0, Pt2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt2) + 0 + 1, Pt2); _ -> lists:nth(0 + 1, Pt2) end end)) + 1 + 1, (case erlang:is_map(Pt2) of true -> maps:get(0, Pt2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt2) + 0 + 1, Pt2); _ -> lists:nth(0 + 1, Pt2) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(Pt2) of true -> maps:get(0, Pt2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pt2) + 0 + 1, Pt2); _ -> lists:nth(0 + 1, Pt2) end end)) end end), (case erlang:is_map((case erlang:is_map(Pt2) of true -> maps:get(1, Pt2, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt2) + 1 + 1, Pt2); _ -> lists:nth(1 + 1, Pt2) end end)) of true -> maps:get(1, (case erlang:is_map(Pt2) of true -> maps:get(1, Pt2, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt2) + 1 + 1, Pt2); _ -> lists:nth(1 + 1, Pt2) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Pt2) of true -> maps:get(1, Pt2, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt2) + 1 + 1, Pt2); _ -> lists:nth(1 + 1, Pt2) end end)) + 1 + 1, (case erlang:is_map(Pt2) of true -> maps:get(1, Pt2, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt2) + 1 + 1, Pt2); _ -> lists:nth(1 + 1, Pt2) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(Pt2) of true -> maps:get(1, Pt2, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pt2) + 1 + 1, Pt2); _ -> lists:nth(1 + 1, Pt2) end end)) end end), (case erlang:is_map((case erlang:is_map(Pt2) of true -> maps:get(2, Pt2, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt2) + 2 + 1, Pt2); _ -> lists:nth(2 + 1, Pt2) end end)) of true -> maps:get(1, (case erlang:is_map(Pt2) of true -> maps:get(2, Pt2, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt2) + 2 + 1, Pt2); _ -> lists:nth(2 + 1, Pt2) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Pt2) of true -> maps:get(2, Pt2, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt2) + 2 + 1, Pt2); _ -> lists:nth(2 + 1, Pt2) end end)) + 1 + 1, (case erlang:is_map(Pt2) of true -> maps:get(2, Pt2, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt2) + 2 + 1, Pt2); _ -> lists:nth(2 + 1, Pt2) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(Pt2) of true -> maps:get(2, Pt2, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pt2) + 2 + 1, Pt2); _ -> lists:nth(2 + 1, Pt2) end end)) end end)],
        Avec = mat_vec_mul(Inv_5, Vecx),
        Bvec = mat_vec_mul(Inv_5, Vecy),
        A0 = (case erlang:is_map(Avec) of true -> maps:get(0, Avec, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Avec) + 0 + 1, Avec); _ -> lists:nth(0 + 1, Avec) end end),
        A1 = (case erlang:is_map(Avec) of true -> maps:get(1, Avec, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Avec) + 1 + 1, Avec); _ -> lists:nth(1 + 1, Avec) end end),
        A2 = (case erlang:is_map(Avec) of true -> maps:get(2, Avec, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Avec) + 2 + 1, Avec); _ -> lists:nth(2 + 1, Avec) end end),
        B0 = (case erlang:is_map(Bvec) of true -> maps:get(0, Bvec, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Bvec) + 0 + 1, Bvec); _ -> lists:nth(0 + 1, Bvec) end end),
        B1 = (case erlang:is_map(Bvec) of true -> maps:get(1, Bvec, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Bvec) + 1 + 1, Bvec); _ -> lists:nth(1 + 1, Bvec) end end),
        B2 = (case erlang:is_map(Bvec) of true -> maps:get(2, Bvec, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Bvec) + 2 + 1, Bvec); _ -> lists:nth(2 + 1, Bvec) end end),
        Out = create_matrix(Rows_2, Cols_2, 0),
        Y = 0,
        Fun_5 = fun Fun_5_loop(A0, A1, A2, Avec, B0, B1, B2, Bvec, Cols_2, Img, Inv_5, Out, Pt1, Pt2, Rows_2, Src, Vecx, Vecy, Y) ->
    case (Y < Rows_2) of
        true ->
            X_2 = 0,
            Fun_4 = fun Fun_4_loop(A0, A1, A2, Avec, B0, B1, B2, Bvec, Cols_2, Img, Inv_5, Out, Pt1, Pt2, Rows_2, Src, Vecx, Vecy, X_2, Y) ->
    case (X_2 < Cols_2) of
        true ->
            Xf = ((mochi_safe_mul(A0, mochi_safe_mul(1, X_2)) + mochi_safe_mul(A1, mochi_safe_mul(1, Y))) + A2),
            Yf = ((mochi_safe_mul(B0, mochi_safe_mul(1, X_2)) + mochi_safe_mul(B1, mochi_safe_mul(1, Y))) + B2),
            Sx = round_to_int(Xf),
            Sy = round_to_int(Yf),
            case ((((Sx >= 0) andalso (Sx < Cols_2)) andalso (Sy >= 0)) andalso (Sy < Rows_2)) of
        true -> Out_2 = lists:sublist(Out, Sy) ++ [lists:sublist(lists:nth(Sy + 1, Out), Sx) ++ [(case erlang:is_map((case erlang:is_map(Img) of true -> maps:get(Y, Img, nil); _ -> case Y < 0 of true -> lists:nth(erlang:length(Img) + Y + 1, Img); _ -> lists:nth(Y + 1, Img) end end)) of true -> maps:get(X_2, (case erlang:is_map(Img) of true -> maps:get(Y, Img, nil); _ -> case Y < 0 of true -> lists:nth(erlang:length(Img) + Y + 1, Img); _ -> lists:nth(Y + 1, Img) end end), nil); _ -> case X_2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Img) of true -> maps:get(Y, Img, nil); _ -> case Y < 0 of true -> lists:nth(erlang:length(Img) + Y + 1, Img); _ -> lists:nth(Y + 1, Img) end end)) + X_2 + 1, (case erlang:is_map(Img) of true -> maps:get(Y, Img, nil); _ -> case Y < 0 of true -> lists:nth(erlang:length(Img) + Y + 1, Img); _ -> lists:nth(Y + 1, Img) end end)); _ -> lists:nth(X_2 + 1, (case erlang:is_map(Img) of true -> maps:get(Y, Img, nil); _ -> case Y < 0 of true -> lists:nth(erlang:length(Img) + Y + 1, Img); _ -> lists:nth(Y + 1, Img) end end)) end end)] ++ lists:nthtail(Sx + 1, lists:nth(Sy + 1, Out))] ++ lists:nthtail(Sy + 1, Out),
            Out_3 = Out_2;
        _ -> Out_3 = Out
    end,
            X_3 = (X_2 + 1),
            Fun_4_loop(A0, A1, A2, Avec, B0, B1, B2, Bvec, Cols_2, Img, Inv_5, Out_3, Pt1, Pt2, Rows_2, Src, Vecx, Vecy, X_3, Y);
        _ -> {A0, A1, A2, Avec, B0, B1, B2, Bvec, Cols_2, Img, Inv_5, Out, Pt1, Pt2, Rows_2, Src, Vecx, Vecy, X_2, Y}
    end
end,
{A0, A1, A2, Avec, B0, B1, B2, Bvec, Cols_2, Img, Inv_5, Out_3, Pt1, Pt2, Rows_2, Src, Vecx, Vecy, X_3, Y} = Fun_4(A0, A1, A2, Avec, B0, B1, B2, Bvec, Cols_2, Img, Inv_5, Out, Pt1, Pt2, Rows_2, Src, Vecx, Vecy, X_2, Y),
            Y_2 = (Y + 1),
            Fun_5_loop(A0, A1, A2, Avec, B0, B1, B2, Bvec, Cols_2, Img, Inv_5, Out_3, Pt1, Pt2, Rows_2, Src, Vecx, Vecy, Y_2);
        _ -> {A0, A1, A2, Avec, B0, B1, B2, Bvec, Cols_2, Img, Inv_5, Out, Pt1, Pt2, Rows_2, Src, Vecx, Vecy, Y}
    end
end,
{A0, A1, A2, Avec, B0, B1, B2, Bvec, Cols_2, Img, Inv_5, Out_3, Pt1, Pt2, Rows_2, Src, Vecx, Vecy, Y_2} = Fun_5(A0, A1, A2, Avec, B0, B1, B2, Bvec, Cols_2, Img, Inv_5, Out, Pt1, Pt2, Rows_2, Src, Vecx, Vecy, Y),
        Out_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('img', [[1, 2, 3], [4, 5, 6], [7, 8, 9]]),
    erlang:put('pts1', [[0, 0], [2, 0], [0, 2]]),
    erlang:put('pts2', [[0, 2], [0, 0], [2, 2]]),
    erlang:put('rotated', get_rotation(erlang:get('img'), erlang:get('pts1'), erlang:get('pts2'), 3, 3)),
    io:format("~ts~n", [mochi_str(erlang:get('rotated'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
