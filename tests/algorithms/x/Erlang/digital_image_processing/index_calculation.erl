#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ndvi/2, bndvi/2, gndvi/2, ndre/2, ccci/3, cvi/3, gli/3, dvi/2, calc/6, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

ndvi(Red, Nir) ->
    try
        mochi_safe_div((Nir - Red), (Nir + Red))
    catch {return, Ret} -> Ret end.

bndvi(Blue, Nir_2) ->
    try
        mochi_safe_div((Nir_2 - Blue), (Nir_2 + Blue))
    catch {return, Ret} -> Ret end.

gndvi(Green, Nir_3) ->
    try
        mochi_safe_div((Nir_3 - Green), (Nir_3 + Green))
    catch {return, Ret} -> Ret end.

ndre(RedEdge, Nir_4) ->
    try
        mochi_safe_div((Nir_4 - RedEdge), (Nir_4 + RedEdge))
    catch {return, Ret} -> Ret end.

ccci(Red_2, RedEdge_2, Nir_5) ->
    try
        mochi_safe_div(ndre(RedEdge_2, Nir_5), ndvi(Red_2, Nir_5))
    catch {return, Ret} -> Ret end.

cvi(Red_3, Green_2, Nir_6) ->
    try
        mochi_safe_div(mochi_safe_mul(Nir_6, Red_3), mochi_safe_mul(Green_2, Green_2))
    catch {return, Ret} -> Ret end.

gli(Red_4, Green_3, Blue_2) ->
    try
        mochi_safe_div(((mochi_safe_mul(2, Green_3) - Red_4) - Blue_2), ((mochi_safe_mul(2, Green_3) + Red_4) + Blue_2))
    catch {return, Ret} -> Ret end.

dvi(Red_5, Nir_7) ->
    try
        mochi_safe_div(Nir_7, Red_5)
    catch {return, Ret} -> Ret end.

calc(Index, Red_6, Green_4, Blue_3, RedEdge_3, Nir_8) ->
    try
        case (Index == "NDVI") of
        true -> throw({return, ndvi(Red_6, Nir_8)});
        _ -> ok
    end,
        case (Index == "BNDVI") of
        true -> throw({return, bndvi(Blue_3, Nir_8)});
        _ -> ok
    end,
        case (Index == "GNDVI") of
        true -> throw({return, gndvi(Green_4, Nir_8)});
        _ -> ok
    end,
        case (Index == "NDRE") of
        true -> throw({return, ndre(RedEdge_3, Nir_8)});
        _ -> ok
    end,
        case (Index == "CCCI") of
        true -> throw({return, ccci(Red_6, RedEdge_3, Nir_8)});
        _ -> ok
    end,
        case (Index == "CVI") of
        true -> throw({return, cvi(Red_6, Green_4, Nir_8)});
        _ -> ok
    end,
        case (Index == "GLI") of
        true -> throw({return, gli(Red_6, Green_4, Blue_3)});
        _ -> ok
    end,
        case (Index == "DVI") of
        true -> throw({return, dvi(Red_6, Nir_8)});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

main() ->
    try
        Red_7 = 50,
        Green_5 = 30,
        Blue_4 = 10,
        RedEdge_4 = 40,
        Nir_9 = 100,
        io:format("~ts~n", [mochi_repr(("NDVI=" ++ mochi_str(ndvi(50, 100))))]),
        io:format("~ts~n", [mochi_repr(("CCCI=" ++ mochi_str(ccci(50, 40, 100))))]),
        io:format("~ts~n", [mochi_repr(("CVI=" ++ mochi_str(cvi(50, 30, 100))))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
