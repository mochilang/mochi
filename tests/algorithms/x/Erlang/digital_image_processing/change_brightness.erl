#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, clamp/1, change_brightness/2]).

% Generated by Mochi transpiler v0.10.72 (b9a682dda0)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

clamp(Value) ->
    try
        case (Value < 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case (Value > 255) of
        true -> throw({return, 255});
        _ -> ok
    end,
        Value
    catch {return, RetCatch} -> RetCatch end.

change_brightness(Img, Level) ->
    try
        case ((Level < -255) orelse (Level > 255)) of
        true -> erlang:error({panic, "level must be between -255 and 255"});
        _ -> ok
    end,
        Result = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Img, Level, Result) ->
    case (I < erlang:length(Img)) of
        true ->
            Row_res = [],
            J = 0,
            Fun = fun Fun_loop(I, Img, J, Level, Result, Row_res) ->
    case (J < erlang:length((case erlang:is_map(Img) of true -> maps:get(I, Img, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Img) + I + 1, Img); _ -> mochi_nth(I + 1, Img) end end))) of
        true ->
            Row_res_2 = lists:append((case Row_res of nil -> []; _ -> Row_res end), [clamp(((case erlang:is_map((case erlang:is_map(Img) of true -> maps:get(I, Img, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Img) + I + 1, Img); _ -> mochi_nth(I + 1, Img) end end)) of true -> maps:get(J, (case erlang:is_map(Img) of true -> maps:get(I, Img, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Img) + I + 1, Img); _ -> mochi_nth(I + 1, Img) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Img) of true -> maps:get(I, Img, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Img) + I + 1, Img); _ -> mochi_nth(I + 1, Img) end end)) + J + 1, (case erlang:is_map(Img) of true -> maps:get(I, Img, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Img) + I + 1, Img); _ -> mochi_nth(I + 1, Img) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Img) of true -> maps:get(I, Img, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Img) + I + 1, Img); _ -> mochi_nth(I + 1, Img) end end)) end end) + Level))]),
            J_2 = (J + 1),
            Fun_loop(I, Img, J_2, Level, Result, Row_res_2);
        _ -> {I, Img, J, Level, Result, Row_res}
    end
end,
{I, Img, J_2, Level, Result, Row_res_2} = Fun(I, Img, J, Level, Result, Row_res),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_res_2]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Img, Level, Result_2);
        _ -> {I, Img, Level, Result}
    end
end,
{I_2, Img, Level, Result_2} = Fun_2(I, Img, Level, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('sample', [[100, 150], [200, 250]]),
    io:format("~s~n", [mochi_format(change_brightness(erlang:get('sample'), 30))]),
    io:format("~s~n", [mochi_format(change_brightness(erlang:get('sample'), -60))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
