#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, normalize/1, to_grayscale/3, make_sepia/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

normalize(Value) ->
    try
        (case (Value > 255) of
    true -> 255;
    _ -> Value
end)
    catch {return, Ret} -> Ret end.

to_grayscale(Blue, Green, Red) ->
    try
        Gs = ((mochi_safe_mul(0.2126, float(Red)) + mochi_safe_mul(0.587, float(Green))) + mochi_safe_mul(0.114, float(Blue))),
        mochi_to_int(Gs)
    catch {return, Ret} -> Ret end.

make_sepia(Img, Factor) ->
    try
        Pixel_h = erlang:length(Img),
        Pixel_v = erlang:length((case erlang:is_map(Img) of true -> maps:get(0, Img, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img) + 0 + 1, Img); _ -> lists:nth(0 + 1, Img) end end)),
        I = 0,
        Fun_2 = fun Fun_2_loop(Factor, I, Img, Pixel_h, Pixel_v) ->
    case (I < Pixel_h) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Factor, I, Img, J, Pixel_h, Pixel_v) ->
    case (J < Pixel_v) of
        true ->
            Pixel = (case erlang:is_map((case erlang:is_map(Img) of true -> maps:get(I, Img, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Img) + I + 1, Img); _ -> lists:nth(I + 1, Img) end end)) of true -> maps:get(J, (case erlang:is_map(Img) of true -> maps:get(I, Img, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Img) + I + 1, Img); _ -> lists:nth(I + 1, Img) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Img) of true -> maps:get(I, Img, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Img) + I + 1, Img); _ -> lists:nth(I + 1, Img) end end)) + J + 1, (case erlang:is_map(Img) of true -> maps:get(I, Img, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Img) + I + 1, Img); _ -> lists:nth(I + 1, Img) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Img) of true -> maps:get(I, Img, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Img) + I + 1, Img); _ -> lists:nth(I + 1, Img) end end)) end end),
            Grey = to_grayscale((case erlang:is_map(Pixel) of true -> maps:get(0, Pixel, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Pixel) + 0 + 1, Pixel); _ -> lists:nth(0 + 1, Pixel) end end), (case erlang:is_map(Pixel) of true -> maps:get(1, Pixel, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Pixel) + 1 + 1, Pixel); _ -> lists:nth(1 + 1, Pixel) end end), (case erlang:is_map(Pixel) of true -> maps:get(2, Pixel, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Pixel) + 2 + 1, Pixel); _ -> lists:nth(2 + 1, Pixel) end end)),
            Img_2 = lists:sublist(Img, I) ++ [lists:sublist(lists:nth(I + 1, Img), J) ++ [[normalize(Grey), normalize((Grey + Factor)), normalize((Grey + (2 * Factor)))]] ++ lists:nthtail(J + 1, lists:nth(I + 1, Img))] ++ lists:nthtail(I + 1, Img),
            J_2 = (J + 1),
            Fun_loop(Factor, I, Img_2, J_2, Pixel_h, Pixel_v);
        _ -> {Factor, I, Img, J, Pixel_h, Pixel_v}
    end
end,
{Factor, I, Img_2, J_2, Pixel_h, Pixel_v} = Fun(Factor, I, Img, J, Pixel_h, Pixel_v),
            I_2 = (I + 1),
            Fun_2_loop(Factor, I_2, Img_2, Pixel_h, Pixel_v);
        _ -> {Factor, I, Img, Pixel_h, Pixel_v}
    end
end,
{Factor, I_2, Img_2, Pixel_h, Pixel_v} = Fun_2(Factor, I, Img, Pixel_h, Pixel_v),
        Img_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('image', [[[10, 20, 30], [40, 50, 60]], [[70, 80, 90], [200, 150, 100]]]),
    erlang:put('sepia', make_sepia(erlang:get('image'), 20)),
    io:format("~ts~n", [mochi_str(erlang:get('sepia'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
