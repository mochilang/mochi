#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rgb_to_gray/1, gray_to_binary/1, dilation/2, print_float_matrix/1, print_int_matrix/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

rgb_to_gray(Rgb) ->
    try
        Result = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Result, Rgb) ->
    case (I < erlang:length(Rgb)) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(I, J, Result, Rgb, Row) ->
    case (J < erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end))) of
        true ->
            R = (case erlang:is_map((case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) of true -> maps:get(0, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) + 0 + 1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) end end),
            G = (case erlang:is_map((case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) of true -> maps:get(1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) + 1 + 1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) end end),
            B = (case erlang:is_map((case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) of true -> maps:get(2, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end), nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) + 2 + 1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)); _ -> lists:nth(2 + 1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) end end),
            Gray = ((mochi_safe_mul(0.2989, mochi_safe_mul(1, R)) + mochi_safe_mul(0.587, mochi_safe_mul(1, G))) + mochi_safe_mul(0.114, mochi_safe_mul(1, B))),
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Gray]),
            J_2 = (J + 1),
            Fun_loop(I, J_2, Result, Rgb, Row_2);
        _ -> {I, J, Result, Rgb, Row}
    end
end,
{I, J_2, Result, Rgb, Row_2} = Fun(I, J, Result, Rgb, Row),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Result_2, Rgb);
        _ -> {I, Result, Rgb}
    end
end,
{I_2, Result_2, Rgb} = Fun_2(I, Result, Rgb),
        Result_2
    catch {return, Ret} -> Ret end.

gray_to_binary(Gray_2) ->
    try
        Result_3 = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Gray_2, I_3, Result_3) ->
    case (I_3 < erlang:length(Gray_2)) of
        true ->
            Row_3 = [],
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(Gray_2, I_3, J_3, Result_3, Row_3) ->
    case (J_3 < erlang:length((case erlang:is_map(Gray_2) of true -> maps:get(I_3, Gray_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_2) + I_3 + 1, Gray_2); _ -> lists:nth(I_3 + 1, Gray_2) end end))) of
        true ->
            V = (case erlang:is_map((case erlang:is_map(Gray_2) of true -> maps:get(I_3, Gray_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_2) + I_3 + 1, Gray_2); _ -> lists:nth(I_3 + 1, Gray_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Gray_2) of true -> maps:get(I_3, Gray_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_2) + I_3 + 1, Gray_2); _ -> lists:nth(I_3 + 1, Gray_2) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Gray_2) of true -> maps:get(I_3, Gray_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_2) + I_3 + 1, Gray_2); _ -> lists:nth(I_3 + 1, Gray_2) end end)) + J_3 + 1, (case erlang:is_map(Gray_2) of true -> maps:get(I_3, Gray_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_2) + I_3 + 1, Gray_2); _ -> lists:nth(I_3 + 1, Gray_2) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Gray_2) of true -> maps:get(I_3, Gray_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_2) + I_3 + 1, Gray_2); _ -> lists:nth(I_3 + 1, Gray_2) end end)) end end),
            case ((V > 127) andalso (V =< 255)) of
        true -> Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [1]),
            Row_6 = Row_4;
        _ -> Row_5 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [0]),
            Row_6 = Row_5
    end,
            J_4 = (J_3 + 1),
            Fun_3_loop(Gray_2, I_3, J_4, Result_3, Row_6);
        _ -> {Gray_2, I_3, J_3, Result_3, Row_3}
    end
end,
{Gray_2, I_3, J_4, Result_3, Row_6} = Fun_3(Gray_2, I_3, J_3, Result_3, Row_3),
            Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [Row_6]),
            I_4 = (I_3 + 1),
            Fun_4_loop(Gray_2, I_4, Result_4);
        _ -> {Gray_2, I_3, Result_3}
    end
end,
{Gray_2, I_4, Result_4} = Fun_4(Gray_2, I_3, Result_3),
        Result_4
    catch {return, Ret} -> Ret end.

dilation(Image, Kernel) ->
    try
        Img_h = erlang:length(Image),
        Img_w = erlang:length((case erlang:is_map(Image) of true -> maps:get(0, Image, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Image) + 0 + 1, Image); _ -> lists:nth(0 + 1, Image) end end)),
        K_h = erlang:length(Kernel),
        K_w = erlang:length((case erlang:is_map(Kernel) of true -> maps:get(0, Kernel, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Kernel) + 0 + 1, Kernel); _ -> lists:nth(0 + 1, Kernel) end end)),
        Pad_h = (K_h div 2),
        Pad_w = (K_w div 2),
        P_h = (Img_h + (2 * Pad_h)),
        P_w = (Img_w + (2 * Pad_w)),
        Padded = [],
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(I_5, Image, Img_h, Img_w, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded) ->
    case (I_5 < P_h) of
        true ->
            Row_7 = [],
            J_5 = 0,
            Fun_5 = fun Fun_5_loop(I_5, Image, Img_h, Img_w, J_5, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded, Row_7) ->
    case (J_5 < P_w) of
        true ->
            Row_8 = lists:append((case Row_7 of nil -> []; _ -> Row_7 end), [0]),
            J_6 = (J_5 + 1),
            Fun_5_loop(I_5, Image, Img_h, Img_w, J_6, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded, Row_8);
        _ -> {I_5, Image, Img_h, Img_w, J_5, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded, Row_7}
    end
end,
{I_5, Image, Img_h, Img_w, J_6, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded, Row_8} = Fun_5(I_5, Image, Img_h, Img_w, J_5, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded, Row_7),
            Padded_2 = lists:append((case Padded of nil -> []; _ -> Padded end), [Row_8]),
            I_6 = (I_5 + 1),
            Fun_6_loop(I_6, Image, Img_h, Img_w, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded_2);
        _ -> {I_5, Image, Img_h, Img_w, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded}
    end
end,
{I_6, Image, Img_h, Img_w, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded_2} = Fun_6(I_5, Image, Img_h, Img_w, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded),
        I_7 = 0,
        Fun_8 = fun Fun_8_loop(I_7, Image, Img_h, Img_w, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded_2) ->
    case (I_7 < Img_h) of
        true ->
            J_7 = 0,
            Fun_7 = fun Fun_7_loop(I_7, Image, Img_h, Img_w, J_7, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded_2) ->
    case (J_7 < Img_w) of
        true ->
            Padded_3 = lists:sublist(Padded_2, (Pad_h + I_7)) ++ [lists:sublist(lists:nth((Pad_h + I_7) + 1, Padded_2), (Pad_w + J_7)) ++ [(case erlang:is_map((case erlang:is_map(Image) of true -> maps:get(I_7, Image, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(Image) + I_7 + 1, Image); _ -> lists:nth(I_7 + 1, Image) end end)) of true -> maps:get(J_7, (case erlang:is_map(Image) of true -> maps:get(I_7, Image, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(Image) + I_7 + 1, Image); _ -> lists:nth(I_7 + 1, Image) end end), nil); _ -> case J_7 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Image) of true -> maps:get(I_7, Image, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(Image) + I_7 + 1, Image); _ -> lists:nth(I_7 + 1, Image) end end)) + J_7 + 1, (case erlang:is_map(Image) of true -> maps:get(I_7, Image, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(Image) + I_7 + 1, Image); _ -> lists:nth(I_7 + 1, Image) end end)); _ -> lists:nth(J_7 + 1, (case erlang:is_map(Image) of true -> maps:get(I_7, Image, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(Image) + I_7 + 1, Image); _ -> lists:nth(I_7 + 1, Image) end end)) end end)] ++ lists:nthtail((Pad_w + J_7) + 1, lists:nth((Pad_h + I_7) + 1, Padded_2))] ++ lists:nthtail((Pad_h + I_7) + 1, Padded_2),
            J_8 = (J_7 + 1),
            Fun_7_loop(I_7, Image, Img_h, Img_w, J_8, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded_3);
        _ -> {I_7, Image, Img_h, Img_w, J_7, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded_2}
    end
end,
{I_7, Image, Img_h, Img_w, J_8, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded_3} = Fun_7(I_7, Image, Img_h, Img_w, J_7, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded_2),
            I_8 = (I_7 + 1),
            Fun_8_loop(I_8, Image, Img_h, Img_w, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded_3);
        _ -> {I_7, Image, Img_h, Img_w, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded_2}
    end
end,
{I_8, Image, Img_h, Img_w, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded_3} = Fun_8(I_7, Image, Img_h, Img_w, K_h, K_w, Kernel, P_h, P_w, Pad_h, Pad_w, Padded_2),
        Output = [],
        I_9 = 0,
        Fun_12 = fun Fun_12_loop(I_9, Image, Img_h, Img_w, K_h, K_w, Kernel, Output, P_h, P_w, Pad_h, Pad_w, Padded_3) ->
    case (I_9 < Img_h) of
        true ->
            Row_9 = [],
            J_9 = 0,
            Fun_11 = fun Fun_11_loop(I_9, Image, Img_h, Img_w, J_9, K_h, K_w, Kernel, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_9) ->
    case (J_9 < Img_w) of
        true ->
            Sum = 0,
            Ky = 0,
            Fun_10 = fun Fun_10_loop(I_9, Image, Img_h, Img_w, J_9, K_h, K_w, Kernel, Ky, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_9, Sum) ->
    case (Ky < K_h) of
        true ->
            Kx = 0,
            Fun_9 = fun Fun_9_loop(I_9, Image, Img_h, Img_w, J_9, K_h, K_w, Kernel, Kx, Ky, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_9, Sum) ->
    case (Kx < K_w) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end)) of true -> maps:get(Kx, (case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end), nil); _ -> case Kx < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end)) + Kx + 1, (case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end)); _ -> lists:nth(Kx + 1, (case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end)) end end) == 1) of
        true -> Sum_2 = (Sum + (case erlang:is_map((case erlang:is_map(Padded_3) of true -> maps:get((I_9 + Ky), Padded_3, nil); _ -> case (I_9 + Ky) < 0 of true -> lists:nth(erlang:length(Padded_3) + (I_9 + Ky) + 1, Padded_3); _ -> lists:nth((I_9 + Ky) + 1, Padded_3) end end)) of true -> maps:get((J_9 + Kx), (case erlang:is_map(Padded_3) of true -> maps:get((I_9 + Ky), Padded_3, nil); _ -> case (I_9 + Ky) < 0 of true -> lists:nth(erlang:length(Padded_3) + (I_9 + Ky) + 1, Padded_3); _ -> lists:nth((I_9 + Ky) + 1, Padded_3) end end), nil); _ -> case (J_9 + Kx) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Padded_3) of true -> maps:get((I_9 + Ky), Padded_3, nil); _ -> case (I_9 + Ky) < 0 of true -> lists:nth(erlang:length(Padded_3) + (I_9 + Ky) + 1, Padded_3); _ -> lists:nth((I_9 + Ky) + 1, Padded_3) end end)) + (J_9 + Kx) + 1, (case erlang:is_map(Padded_3) of true -> maps:get((I_9 + Ky), Padded_3, nil); _ -> case (I_9 + Ky) < 0 of true -> lists:nth(erlang:length(Padded_3) + (I_9 + Ky) + 1, Padded_3); _ -> lists:nth((I_9 + Ky) + 1, Padded_3) end end)); _ -> lists:nth((J_9 + Kx) + 1, (case erlang:is_map(Padded_3) of true -> maps:get((I_9 + Ky), Padded_3, nil); _ -> case (I_9 + Ky) < 0 of true -> lists:nth(erlang:length(Padded_3) + (I_9 + Ky) + 1, Padded_3); _ -> lists:nth((I_9 + Ky) + 1, Padded_3) end end)) end end)),
            Sum_3 = Sum_2;
        _ -> Sum_3 = Sum
    end,
            Kx_2 = (Kx + 1),
            Fun_9_loop(I_9, Image, Img_h, Img_w, J_9, K_h, K_w, Kernel, Kx_2, Ky, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_9, Sum_3);
        _ -> {I_9, Image, Img_h, Img_w, J_9, K_h, K_w, Kernel, Kx, Ky, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_9, Sum}
    end
end,
{I_9, Image, Img_h, Img_w, J_9, K_h, K_w, Kernel, Kx_2, Ky, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_9, Sum_3} = Fun_9(I_9, Image, Img_h, Img_w, J_9, K_h, K_w, Kernel, Kx, Ky, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_9, Sum),
            Ky_2 = (Ky + 1),
            Fun_10_loop(I_9, Image, Img_h, Img_w, J_9, K_h, K_w, Kernel, Ky_2, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_9, Sum_3);
        _ -> {I_9, Image, Img_h, Img_w, J_9, K_h, K_w, Kernel, Ky, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_9, Sum}
    end
end,
{I_9, Image, Img_h, Img_w, J_9, K_h, K_w, Kernel, Ky_2, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_9, Sum_3} = Fun_10(I_9, Image, Img_h, Img_w, J_9, K_h, K_w, Kernel, Ky, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_9, Sum),
            case (Sum_3 > 0) of
        true -> Row_10 = lists:append((case Row_9 of nil -> []; _ -> Row_9 end), [1]),
            Row_12 = Row_10;
        _ -> Row_11 = lists:append((case Row_9 of nil -> []; _ -> Row_9 end), [0]),
            Row_12 = Row_11
    end,
            J_10 = (J_9 + 1),
            Fun_11_loop(I_9, Image, Img_h, Img_w, J_10, K_h, K_w, Kernel, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_12);
        _ -> {I_9, Image, Img_h, Img_w, J_9, K_h, K_w, Kernel, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_9}
    end
end,
{I_9, Image, Img_h, Img_w, J_10, K_h, K_w, Kernel, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_12} = Fun_11(I_9, Image, Img_h, Img_w, J_9, K_h, K_w, Kernel, Output, P_h, P_w, Pad_h, Pad_w, Padded_3, Row_9),
            Output_2 = lists:append((case Output of nil -> []; _ -> Output end), [Row_12]),
            I_10 = (I_9 + 1),
            Fun_12_loop(I_10, Image, Img_h, Img_w, K_h, K_w, Kernel, Output_2, P_h, P_w, Pad_h, Pad_w, Padded_3);
        _ -> {I_9, Image, Img_h, Img_w, K_h, K_w, Kernel, Output, P_h, P_w, Pad_h, Pad_w, Padded_3}
    end
end,
{I_10, Image, Img_h, Img_w, K_h, K_w, Kernel, Output_2, P_h, P_w, Pad_h, Pad_w, Padded_3} = Fun_12(I_9, Image, Img_h, Img_w, K_h, K_w, Kernel, Output, P_h, P_w, Pad_h, Pad_w, Padded_3),
        Output_2
    catch {return, Ret} -> Ret end.

print_float_matrix(Mat) ->
    try
        I_11 = 0,
        Fun_14 = fun Fun_14_loop(I_11, Mat) ->
    case (I_11 < erlang:length(Mat)) of
        true ->
            Line = "",
            J_11 = 0,
            Fun_13 = fun Fun_13_loop(I_11, J_11, Line, Mat) ->
    case (J_11 < erlang:length((case erlang:is_map(Mat) of true -> maps:get(I_11, Mat, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(Mat) + I_11 + 1, Mat); _ -> lists:nth(I_11 + 1, Mat) end end))) of
        true ->
            Line_2 = (Line ++ mochi_str((case erlang:is_map((case erlang:is_map(Mat) of true -> maps:get(I_11, Mat, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(Mat) + I_11 + 1, Mat); _ -> lists:nth(I_11 + 1, Mat) end end)) of true -> maps:get(J_11, (case erlang:is_map(Mat) of true -> maps:get(I_11, Mat, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(Mat) + I_11 + 1, Mat); _ -> lists:nth(I_11 + 1, Mat) end end), nil); _ -> case J_11 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Mat) of true -> maps:get(I_11, Mat, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(Mat) + I_11 + 1, Mat); _ -> lists:nth(I_11 + 1, Mat) end end)) + J_11 + 1, (case erlang:is_map(Mat) of true -> maps:get(I_11, Mat, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(Mat) + I_11 + 1, Mat); _ -> lists:nth(I_11 + 1, Mat) end end)); _ -> lists:nth(J_11 + 1, (case erlang:is_map(Mat) of true -> maps:get(I_11, Mat, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(Mat) + I_11 + 1, Mat); _ -> lists:nth(I_11 + 1, Mat) end end)) end end))),
            case (J_11 < (erlang:length((case erlang:is_map(Mat) of true -> maps:get(I_11, Mat, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(Mat) + I_11 + 1, Mat); _ -> lists:nth(I_11 + 1, Mat) end end)) - 1)) of
        true -> Line_3 = (Line_2 ++ " "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            J_12 = (J_11 + 1),
            Fun_13_loop(I_11, J_12, Line_4, Mat);
        _ -> {I_11, J_11, Line, Mat}
    end
end,
{I_11, J_12, Line_4, Mat} = Fun_13(I_11, J_11, Line, Mat),
            io:format("~ts~n", [mochi_repr(Line_4)]),
            I_12 = (I_11 + 1),
            Fun_14_loop(I_12, Mat);
        _ -> {I_11, Mat}
    end
end,
{I_12, Mat} = Fun_14(I_11, Mat),
        nil
    catch {return, Ret} -> Ret end.

print_int_matrix(Mat_2) ->
    try
        I_13 = 0,
        Fun_16 = fun Fun_16_loop(I_13, Mat_2) ->
    case (I_13 < erlang:length(Mat_2)) of
        true ->
            Line_5 = "",
            J_13 = 0,
            Fun_15 = fun Fun_15_loop(I_13, J_13, Line_5, Mat_2) ->
    case (J_13 < erlang:length((case erlang:is_map(Mat_2) of true -> maps:get(I_13, Mat_2, nil); _ -> case I_13 < 0 of true -> lists:nth(erlang:length(Mat_2) + I_13 + 1, Mat_2); _ -> lists:nth(I_13 + 1, Mat_2) end end))) of
        true ->
            Line_6 = (Line_5 ++ mochi_str((case erlang:is_map((case erlang:is_map(Mat_2) of true -> maps:get(I_13, Mat_2, nil); _ -> case I_13 < 0 of true -> lists:nth(erlang:length(Mat_2) + I_13 + 1, Mat_2); _ -> lists:nth(I_13 + 1, Mat_2) end end)) of true -> maps:get(J_13, (case erlang:is_map(Mat_2) of true -> maps:get(I_13, Mat_2, nil); _ -> case I_13 < 0 of true -> lists:nth(erlang:length(Mat_2) + I_13 + 1, Mat_2); _ -> lists:nth(I_13 + 1, Mat_2) end end), nil); _ -> case J_13 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Mat_2) of true -> maps:get(I_13, Mat_2, nil); _ -> case I_13 < 0 of true -> lists:nth(erlang:length(Mat_2) + I_13 + 1, Mat_2); _ -> lists:nth(I_13 + 1, Mat_2) end end)) + J_13 + 1, (case erlang:is_map(Mat_2) of true -> maps:get(I_13, Mat_2, nil); _ -> case I_13 < 0 of true -> lists:nth(erlang:length(Mat_2) + I_13 + 1, Mat_2); _ -> lists:nth(I_13 + 1, Mat_2) end end)); _ -> lists:nth(J_13 + 1, (case erlang:is_map(Mat_2) of true -> maps:get(I_13, Mat_2, nil); _ -> case I_13 < 0 of true -> lists:nth(erlang:length(Mat_2) + I_13 + 1, Mat_2); _ -> lists:nth(I_13 + 1, Mat_2) end end)) end end))),
            case (J_13 < (erlang:length((case erlang:is_map(Mat_2) of true -> maps:get(I_13, Mat_2, nil); _ -> case I_13 < 0 of true -> lists:nth(erlang:length(Mat_2) + I_13 + 1, Mat_2); _ -> lists:nth(I_13 + 1, Mat_2) end end)) - 1)) of
        true -> Line_7 = (Line_6 ++ " "),
            Line_8 = Line_7;
        _ -> Line_8 = Line_6
    end,
            J_14 = (J_13 + 1),
            Fun_15_loop(I_13, J_14, Line_8, Mat_2);
        _ -> {I_13, J_13, Line_5, Mat_2}
    end
end,
{I_13, J_14, Line_8, Mat_2} = Fun_15(I_13, J_13, Line_5, Mat_2),
            io:format("~ts~n", [mochi_repr(Line_8)]),
            I_14 = (I_13 + 1),
            Fun_16_loop(I_14, Mat_2);
        _ -> {I_13, Mat_2}
    end
end,
{I_14, Mat_2} = Fun_16(I_13, Mat_2),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Rgb_example = [[[127, 255, 0]]],
        print_float_matrix(rgb_to_gray(Rgb_example)),
        Gray_example = [[26, 255, 14], [5, 147, 20], [1, 200, 0]],
        print_int_matrix(gray_to_binary(Gray_example)),
        Binary_image = [[0, 1, 0], [0, 1, 0], [0, 1, 0]],
        Kernel_2 = [[0, 1, 0], [1, 1, 1], [0, 1, 0]],
        print_int_matrix(dilation(Binary_image, Kernel_2)),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
