#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rgb_to_gray/1, gray_to_binary/1, erosion/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

rgb_to_gray(Rgb) ->
    try
        Gray = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Gray, I, Rgb) ->
    case (I < erlang:length(Rgb)) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(Gray, I, J, Rgb, Row) ->
    case (J < erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end))) of
        true ->
            R = float((case erlang:is_map((case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) of true -> maps:get(0, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) + 0 + 1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) end end)),
            G = float((case erlang:is_map((case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) of true -> maps:get(1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) + 1 + 1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) end end)),
            B = float((case erlang:is_map((case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) of true -> maps:get(2, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end), nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) + 2 + 1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)); _ -> lists:nth(2 + 1, (case erlang:is_map((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) of true -> maps:get(J, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) + J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Rgb) of true -> maps:get(I, Rgb, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Rgb) + I + 1, Rgb); _ -> lists:nth(I + 1, Rgb) end end)) end end)) end end)),
            Value = ((mochi_safe_mul(0.2989, R) + mochi_safe_mul(0.587, G)) + mochi_safe_mul(0.114, B)),
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Value]),
            J_2 = (J + 1),
            Fun_loop(Gray, I, J_2, Rgb, Row_2);
        _ -> {Gray, I, J, Rgb, Row}
    end
end,
{Gray, I, J_2, Rgb, Row_2} = Fun(Gray, I, J, Rgb, Row),
            Gray_2 = lists:append((case Gray of nil -> []; _ -> Gray end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Gray_2, I_2, Rgb);
        _ -> {Gray, I, Rgb}
    end
end,
{Gray_2, I_2, Rgb} = Fun_2(Gray, I, Rgb),
        Gray_2
    catch {return, Ret} -> Ret end.

gray_to_binary(Gray_3) ->
    try
        Binary = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Binary, Gray_3, I_3) ->
    case (I_3 < erlang:length(Gray_3)) of
        true ->
            Row_3 = [],
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(Binary, Gray_3, I_3, J_3, Row_3) ->
    case (J_3 < erlang:length((case erlang:is_map(Gray_3) of true -> maps:get(I_3, Gray_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_3) + I_3 + 1, Gray_3); _ -> lists:nth(I_3 + 1, Gray_3) end end))) of
        true ->
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [(((case erlang:is_map((case erlang:is_map(Gray_3) of true -> maps:get(I_3, Gray_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_3) + I_3 + 1, Gray_3); _ -> lists:nth(I_3 + 1, Gray_3) end end)) of true -> maps:get(J_3, (case erlang:is_map(Gray_3) of true -> maps:get(I_3, Gray_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_3) + I_3 + 1, Gray_3); _ -> lists:nth(I_3 + 1, Gray_3) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Gray_3) of true -> maps:get(I_3, Gray_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_3) + I_3 + 1, Gray_3); _ -> lists:nth(I_3 + 1, Gray_3) end end)) + J_3 + 1, (case erlang:is_map(Gray_3) of true -> maps:get(I_3, Gray_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_3) + I_3 + 1, Gray_3); _ -> lists:nth(I_3 + 1, Gray_3) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Gray_3) of true -> maps:get(I_3, Gray_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_3) + I_3 + 1, Gray_3); _ -> lists:nth(I_3 + 1, Gray_3) end end)) end end) > 127) andalso ((case erlang:is_map((case erlang:is_map(Gray_3) of true -> maps:get(I_3, Gray_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_3) + I_3 + 1, Gray_3); _ -> lists:nth(I_3 + 1, Gray_3) end end)) of true -> maps:get(J_3, (case erlang:is_map(Gray_3) of true -> maps:get(I_3, Gray_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_3) + I_3 + 1, Gray_3); _ -> lists:nth(I_3 + 1, Gray_3) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Gray_3) of true -> maps:get(I_3, Gray_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_3) + I_3 + 1, Gray_3); _ -> lists:nth(I_3 + 1, Gray_3) end end)) + J_3 + 1, (case erlang:is_map(Gray_3) of true -> maps:get(I_3, Gray_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_3) + I_3 + 1, Gray_3); _ -> lists:nth(I_3 + 1, Gray_3) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Gray_3) of true -> maps:get(I_3, Gray_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Gray_3) + I_3 + 1, Gray_3); _ -> lists:nth(I_3 + 1, Gray_3) end end)) end end) =< 255))]),
            J_4 = (J_3 + 1),
            Fun_3_loop(Binary, Gray_3, I_3, J_4, Row_4);
        _ -> {Binary, Gray_3, I_3, J_3, Row_3}
    end
end,
{Binary, Gray_3, I_3, J_4, Row_4} = Fun_3(Binary, Gray_3, I_3, J_3, Row_3),
            Binary_2 = lists:append((case Binary of nil -> []; _ -> Binary end), [Row_4]),
            I_4 = (I_3 + 1),
            Fun_4_loop(Binary_2, Gray_3, I_4);
        _ -> {Binary, Gray_3, I_3}
    end
end,
{Binary_2, Gray_3, I_4} = Fun_4(Binary, Gray_3, I_3),
        Binary_2
    catch {return, Ret} -> Ret end.

erosion(Image, Kernel) ->
    try
        H = erlang:length(Image),
        W = erlang:length((case erlang:is_map(Image) of true -> maps:get(0, Image, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Image) + 0 + 1, Image); _ -> lists:nth(0 + 1, Image) end end)),
        K_h = erlang:length(Kernel),
        K_w = erlang:length((case erlang:is_map(Kernel) of true -> maps:get(0, Kernel, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Kernel) + 0 + 1, Kernel); _ -> lists:nth(0 + 1, Kernel) end end)),
        Pad_y = (K_h div 2),
        Pad_x = (K_w div 2),
        Padded = [],
        Y = 0,
        Fun_6 = fun Fun_6_loop(H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded, W, Y) ->
    case (Y < (H + (2 * Pad_y))) of
        true ->
            Row_5 = [],
            X = 0,
            Fun_5 = fun Fun_5_loop(H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded, Row_5, W, X, Y) ->
    case (X < (W + (2 * Pad_x))) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [false]),
            X_2 = (X + 1),
            Fun_5_loop(H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded, Row_6, W, X_2, Y);
        _ -> {H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded, Row_5, W, X, Y}
    end
end,
{H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded, Row_6, W, X_2, Y} = Fun_5(H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded, Row_5, W, X, Y),
            Padded_2 = lists:append((case Padded of nil -> []; _ -> Padded end), [Row_6]),
            Y_2 = (Y + 1),
            Fun_6_loop(H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded_2, W, Y_2);
        _ -> {H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded, W, Y}
    end
end,
{H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded_2, W, Y_2} = Fun_6(H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded, W, Y),
        Y_3 = 0,
        Fun_8 = fun Fun_8_loop(H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded_2, W, Y_3) ->
    case (Y_3 < H) of
        true ->
            X_3 = 0,
            Fun_7 = fun Fun_7_loop(H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded_2, W, X_3, Y_3) ->
    case (X_3 < W) of
        true ->
            Padded_3 = lists:sublist(Padded_2, (Pad_y + Y_3)) ++ [lists:sublist(lists:nth((Pad_y + Y_3) + 1, Padded_2), (Pad_x + X_3)) ++ [(case erlang:is_map((case erlang:is_map(Image) of true -> maps:get(Y_3, Image, nil); _ -> case Y_3 < 0 of true -> lists:nth(erlang:length(Image) + Y_3 + 1, Image); _ -> lists:nth(Y_3 + 1, Image) end end)) of true -> maps:get(X_3, (case erlang:is_map(Image) of true -> maps:get(Y_3, Image, nil); _ -> case Y_3 < 0 of true -> lists:nth(erlang:length(Image) + Y_3 + 1, Image); _ -> lists:nth(Y_3 + 1, Image) end end), nil); _ -> case X_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Image) of true -> maps:get(Y_3, Image, nil); _ -> case Y_3 < 0 of true -> lists:nth(erlang:length(Image) + Y_3 + 1, Image); _ -> lists:nth(Y_3 + 1, Image) end end)) + X_3 + 1, (case erlang:is_map(Image) of true -> maps:get(Y_3, Image, nil); _ -> case Y_3 < 0 of true -> lists:nth(erlang:length(Image) + Y_3 + 1, Image); _ -> lists:nth(Y_3 + 1, Image) end end)); _ -> lists:nth(X_3 + 1, (case erlang:is_map(Image) of true -> maps:get(Y_3, Image, nil); _ -> case Y_3 < 0 of true -> lists:nth(erlang:length(Image) + Y_3 + 1, Image); _ -> lists:nth(Y_3 + 1, Image) end end)) end end)] ++ lists:nthtail((Pad_x + X_3) + 1, lists:nth((Pad_y + Y_3) + 1, Padded_2))] ++ lists:nthtail((Pad_y + Y_3) + 1, Padded_2),
            X_4 = (X_3 + 1),
            Fun_7_loop(H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded_3, W, X_4, Y_3);
        _ -> {H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded_2, W, X_3, Y_3}
    end
end,
{H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded_3, W, X_4, Y_3} = Fun_7(H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded_2, W, X_3, Y_3),
            Y_4 = (Y_3 + 1),
            Fun_8_loop(H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded_3, W, Y_4);
        _ -> {H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded_2, W, Y_3}
    end
end,
{H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded_3, W, Y_4} = Fun_8(H, Image, K_h, K_w, Kernel, Pad_x, Pad_y, Padded_2, W, Y_3),
        Output = [],
        Y_5 = 0,
        Fun_12 = fun Fun_12_loop(H, Image, K_h, K_w, Kernel, Output, Pad_x, Pad_y, Padded_3, W, Y_5) ->
    case (Y_5 < H) of
        true ->
            Row_out = [],
            X_5 = 0,
            Fun_11 = fun Fun_11_loop(H, Image, K_h, K_w, Kernel, Output, Pad_x, Pad_y, Padded_3, Row_out, W, X_5, Y_5) ->
    case (X_5 < W) of
        true ->
            Sum = 0,
            Ky = 0,
            Fun_10 = fun Fun_10_loop(H, Image, K_h, K_w, Kernel, Ky, Output, Pad_x, Pad_y, Padded_3, Row_out, Sum, W, X_5, Y_5) ->
    case (Ky < K_h) of
        true ->
            Kx = 0,
            Fun_9 = fun Fun_9_loop(H, Image, K_h, K_w, Kernel, Kx, Ky, Output, Pad_x, Pad_y, Padded_3, Row_out, Sum, W, X_5, Y_5) ->
    case (Kx < K_w) of
        true ->
            case (((case erlang:is_map((case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end)) of true -> maps:get(Kx, (case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end), nil); _ -> case Kx < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end)) + Kx + 1, (case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end)); _ -> lists:nth(Kx + 1, (case erlang:is_map(Kernel) of true -> maps:get(Ky, Kernel, nil); _ -> case Ky < 0 of true -> lists:nth(erlang:length(Kernel) + Ky + 1, Kernel); _ -> lists:nth(Ky + 1, Kernel) end end)) end end) == 1) andalso (case erlang:is_map((case erlang:is_map(Padded_3) of true -> maps:get((Y_5 + Ky), Padded_3, nil); _ -> case (Y_5 + Ky) < 0 of true -> lists:nth(erlang:length(Padded_3) + (Y_5 + Ky) + 1, Padded_3); _ -> lists:nth((Y_5 + Ky) + 1, Padded_3) end end)) of true -> maps:get((X_5 + Kx), (case erlang:is_map(Padded_3) of true -> maps:get((Y_5 + Ky), Padded_3, nil); _ -> case (Y_5 + Ky) < 0 of true -> lists:nth(erlang:length(Padded_3) + (Y_5 + Ky) + 1, Padded_3); _ -> lists:nth((Y_5 + Ky) + 1, Padded_3) end end), nil); _ -> case (X_5 + Kx) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Padded_3) of true -> maps:get((Y_5 + Ky), Padded_3, nil); _ -> case (Y_5 + Ky) < 0 of true -> lists:nth(erlang:length(Padded_3) + (Y_5 + Ky) + 1, Padded_3); _ -> lists:nth((Y_5 + Ky) + 1, Padded_3) end end)) + (X_5 + Kx) + 1, (case erlang:is_map(Padded_3) of true -> maps:get((Y_5 + Ky), Padded_3, nil); _ -> case (Y_5 + Ky) < 0 of true -> lists:nth(erlang:length(Padded_3) + (Y_5 + Ky) + 1, Padded_3); _ -> lists:nth((Y_5 + Ky) + 1, Padded_3) end end)); _ -> lists:nth((X_5 + Kx) + 1, (case erlang:is_map(Padded_3) of true -> maps:get((Y_5 + Ky), Padded_3, nil); _ -> case (Y_5 + Ky) < 0 of true -> lists:nth(erlang:length(Padded_3) + (Y_5 + Ky) + 1, Padded_3); _ -> lists:nth((Y_5 + Ky) + 1, Padded_3) end end)) end end)) of
        true -> Sum_2 = (Sum + 1),
            Sum_3 = Sum_2;
        _ -> Sum_3 = Sum
    end,
            Kx_2 = (Kx + 1),
            Fun_9_loop(H, Image, K_h, K_w, Kernel, Kx_2, Ky, Output, Pad_x, Pad_y, Padded_3, Row_out, Sum_3, W, X_5, Y_5);
        _ -> {H, Image, K_h, K_w, Kernel, Kx, Ky, Output, Pad_x, Pad_y, Padded_3, Row_out, Sum, W, X_5, Y_5}
    end
end,
{H, Image, K_h, K_w, Kernel, Kx_2, Ky, Output, Pad_x, Pad_y, Padded_3, Row_out, Sum_3, W, X_5, Y_5} = Fun_9(H, Image, K_h, K_w, Kernel, Kx, Ky, Output, Pad_x, Pad_y, Padded_3, Row_out, Sum, W, X_5, Y_5),
            Ky_2 = (Ky + 1),
            Fun_10_loop(H, Image, K_h, K_w, Kernel, Ky_2, Output, Pad_x, Pad_y, Padded_3, Row_out, Sum_3, W, X_5, Y_5);
        _ -> {H, Image, K_h, K_w, Kernel, Ky, Output, Pad_x, Pad_y, Padded_3, Row_out, Sum, W, X_5, Y_5}
    end
end,
{H, Image, K_h, K_w, Kernel, Ky_2, Output, Pad_x, Pad_y, Padded_3, Row_out, Sum_3, W, X_5, Y_5} = Fun_10(H, Image, K_h, K_w, Kernel, Ky, Output, Pad_x, Pad_y, Padded_3, Row_out, Sum, W, X_5, Y_5),
            Row_out_2 = lists:append((case Row_out of nil -> []; _ -> Row_out end), [(Sum_3 == 5)]),
            X_6 = (X_5 + 1),
            Fun_11_loop(H, Image, K_h, K_w, Kernel, Output, Pad_x, Pad_y, Padded_3, Row_out_2, W, X_6, Y_5);
        _ -> {H, Image, K_h, K_w, Kernel, Output, Pad_x, Pad_y, Padded_3, Row_out, W, X_5, Y_5}
    end
end,
{H, Image, K_h, K_w, Kernel, Output, Pad_x, Pad_y, Padded_3, Row_out_2, W, X_6, Y_5} = Fun_11(H, Image, K_h, K_w, Kernel, Output, Pad_x, Pad_y, Padded_3, Row_out, W, X_5, Y_5),
            Output_2 = lists:append((case Output of nil -> []; _ -> Output end), [Row_out_2]),
            Y_6 = (Y_5 + 1),
            Fun_12_loop(H, Image, K_h, K_w, Kernel, Output_2, Pad_x, Pad_y, Padded_3, W, Y_6);
        _ -> {H, Image, K_h, K_w, Kernel, Output, Pad_x, Pad_y, Padded_3, W, Y_5}
    end
end,
{H, Image, K_h, K_w, Kernel, Output_2, Pad_x, Pad_y, Padded_3, W, Y_6} = Fun_12(H, Image, K_h, K_w, Kernel, Output, Pad_x, Pad_y, Padded_3, W, Y_5),
        Output_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('rgb_img', [[[127, 255, 0]]]),
    io:format("~ts~n", [mochi_str(rgb_to_gray(erlang:get('rgb_img')))]),
    erlang:put('gray_img', [[127, 255, 0]]),
    io:format("~ts~n", [mochi_str(gray_to_binary(erlang:get('gray_img')))]),
    erlang:put('img1', [[true, true, false]]),
    erlang:put('kernel1', [[0, 1, 0]]),
    io:format("~ts~n", [mochi_str(erosion(erlang:get('img1'), erlang:get('kernel1')))]),
    erlang:put('img2', [[true, false, false]]),
    erlang:put('kernel2', [[1, 1, 0]]),
    io:format("~ts~n", [mochi_str(erosion(erlang:get('img2'), erlang:get('kernel2')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
