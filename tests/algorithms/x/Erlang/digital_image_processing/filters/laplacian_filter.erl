#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_matrix/3, my_laplacian/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_matrix(Rows, Cols, Value) ->
    try
        Result = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Cols, I, Result, Rows, Value) ->
    case (I < Rows) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(Cols, I, J, Result, Row, Rows, Value) ->
    case (J < Cols) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Value]),
            J_2 = (J + 1),
            Fun_loop(Cols, I, J_2, Result, Row_2, Rows, Value);
        _ -> {Cols, I, J, Result, Row, Rows, Value}
    end
end,
{Cols, I, J_2, Result, Row_2, Rows, Value} = Fun(Cols, I, J, Result, Row, Rows, Value),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Cols, I_2, Result_2, Rows, Value);
        _ -> {Cols, I, Result, Rows, Value}
    end
end,
{Cols, I_2, Result_2, Rows, Value} = Fun_2(Cols, I, Result, Rows, Value),
        Result_2
    catch {return, Ret} -> Ret end.

my_laplacian(Src, Ksize) ->
    try
        Kernel = [],
        case (Ksize == 1) of
        true -> Kernel_2 = [[0, -1, 0], [-1, 4, -1], [0, -1, 0]],
            Kernel_9 = Kernel_2;
        _ -> case (Ksize == 3) of
        true -> Kernel_3 = [[0, 1, 0], [1, -4, 1], [0, 1, 0]],
            Kernel_8 = Kernel_3;
        _ -> case (Ksize == 5) of
        true -> Kernel_4 = [[0, 0, -1, 0, 0], [0, -1, -2, -1, 0], [-1, -2, 16, -2, -1], [0, -1, -2, -1, 0], [0, 0, -1, 0, 0]],
            Kernel_7 = Kernel_4;
        _ -> case (Ksize == 7) of
        true -> Kernel_5 = [[0, 0, 0, -1, 0, 0, 0], [0, 0, -2, -3, -2, 0, 0], [0, -2, -7, -10, -7, -2, 0], [-1, -3, -10, 68, -10, -3, -1], [0, -2, -7, -10, -7, -2, 0], [0, 0, -2, -3, -2, 0, 0], [0, 0, 0, -1, 0, 0, 0]],
            Kernel_6 = Kernel_5;
        _ -> erlang:error("ksize must be in (1, 3, 5, 7)"),
            Kernel_6 = Kernel
    end,
            Kernel_7 = Kernel_6
    end,
            Kernel_8 = Kernel_7
    end,
            Kernel_9 = Kernel_8
    end,
        Rows_2 = erlang:length(Src),
        Cols_2 = erlang:length((case erlang:is_map(Src) of true -> maps:get(0, Src, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Src) + 0 + 1, Src); _ -> lists:nth(0 + 1, Src) end end)),
        K = erlang:length(Kernel_9),
        Pad = (K div 2),
        Output = make_matrix(Rows_2, Cols_2, 0),
        I_3 = 0,
        Fun_6 = fun Fun_6_loop(Cols_2, I_3, K, Kernel_9, Ksize, Output, Pad, Rows_2, Src) ->
    case (I_3 < Rows_2) of
        true ->
            J_3 = 0,
            Fun_5 = fun Fun_5_loop(Cols_2, I_3, J_3, K, Kernel_9, Ksize, Output, Pad, Rows_2, Src) ->
    case (J_3 < Cols_2) of
        true ->
            Sum = 0,
            Ki = 0,
            Fun_4 = fun Fun_4_loop(Cols_2, I_3, J_3, K, Kernel_9, Ki, Ksize, Output, Pad, Rows_2, Src, Sum) ->
    case (Ki < K) of
        true ->
            Kj = 0,
            Fun_3 = fun Fun_3_loop(Cols_2, I_3, J_3, K, Kernel_9, Ki, Kj, Ksize, Output, Pad, Rows_2, Src, Sum) ->
    case (Kj < K) of
        true ->
            Ii = ((I_3 + Ki) - Pad),
            Jj = ((J_3 + Kj) - Pad),
            Val = 0,
            case ((((Ii >= 0) andalso (Ii < Rows_2)) andalso (Jj >= 0)) andalso (Jj < Cols_2)) of
        true -> Val_2 = (case erlang:is_map((case erlang:is_map(Src) of true -> maps:get(Ii, Src, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Src) + Ii + 1, Src); _ -> lists:nth(Ii + 1, Src) end end)) of true -> maps:get(Jj, (case erlang:is_map(Src) of true -> maps:get(Ii, Src, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Src) + Ii + 1, Src); _ -> lists:nth(Ii + 1, Src) end end), nil); _ -> case Jj < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Src) of true -> maps:get(Ii, Src, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Src) + Ii + 1, Src); _ -> lists:nth(Ii + 1, Src) end end)) + Jj + 1, (case erlang:is_map(Src) of true -> maps:get(Ii, Src, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Src) + Ii + 1, Src); _ -> lists:nth(Ii + 1, Src) end end)); _ -> lists:nth(Jj + 1, (case erlang:is_map(Src) of true -> maps:get(Ii, Src, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Src) + Ii + 1, Src); _ -> lists:nth(Ii + 1, Src) end end)) end end),
            Val_3 = Val_2;
        _ -> Val_3 = Val
    end,
            Sum_2 = (Sum + (Val_3 * (case erlang:is_map((case erlang:is_map(Kernel_9) of true -> maps:get(Ki, Kernel_9, nil); _ -> case Ki < 0 of true -> lists:nth(erlang:length(Kernel_9) + Ki + 1, Kernel_9); _ -> lists:nth(Ki + 1, Kernel_9) end end)) of true -> maps:get(Kj, (case erlang:is_map(Kernel_9) of true -> maps:get(Ki, Kernel_9, nil); _ -> case Ki < 0 of true -> lists:nth(erlang:length(Kernel_9) + Ki + 1, Kernel_9); _ -> lists:nth(Ki + 1, Kernel_9) end end), nil); _ -> case Kj < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Kernel_9) of true -> maps:get(Ki, Kernel_9, nil); _ -> case Ki < 0 of true -> lists:nth(erlang:length(Kernel_9) + Ki + 1, Kernel_9); _ -> lists:nth(Ki + 1, Kernel_9) end end)) + Kj + 1, (case erlang:is_map(Kernel_9) of true -> maps:get(Ki, Kernel_9, nil); _ -> case Ki < 0 of true -> lists:nth(erlang:length(Kernel_9) + Ki + 1, Kernel_9); _ -> lists:nth(Ki + 1, Kernel_9) end end)); _ -> lists:nth(Kj + 1, (case erlang:is_map(Kernel_9) of true -> maps:get(Ki, Kernel_9, nil); _ -> case Ki < 0 of true -> lists:nth(erlang:length(Kernel_9) + Ki + 1, Kernel_9); _ -> lists:nth(Ki + 1, Kernel_9) end end)) end end))),
            Kj_2 = (Kj + 1),
            Fun_3_loop(Cols_2, I_3, J_3, K, Kernel_9, Ki, Kj_2, Ksize, Output, Pad, Rows_2, Src, Sum_2);
        _ -> {Cols_2, I_3, J_3, K, Kernel_9, Ki, Kj, Ksize, Output, Pad, Rows_2, Src, Sum}
    end
end,
{Cols_2, I_3, J_3, K, Kernel_9, Ki, Kj_2, Ksize, Output, Pad, Rows_2, Src, Sum_2} = Fun_3(Cols_2, I_3, J_3, K, Kernel_9, Ki, Kj, Ksize, Output, Pad, Rows_2, Src, Sum),
            Ki_2 = (Ki + 1),
            Fun_4_loop(Cols_2, I_3, J_3, K, Kernel_9, Ki_2, Ksize, Output, Pad, Rows_2, Src, Sum_2);
        _ -> {Cols_2, I_3, J_3, K, Kernel_9, Ki, Ksize, Output, Pad, Rows_2, Src, Sum}
    end
end,
{Cols_2, I_3, J_3, K, Kernel_9, Ki_2, Ksize, Output, Pad, Rows_2, Src, Sum_2} = Fun_4(Cols_2, I_3, J_3, K, Kernel_9, Ki, Ksize, Output, Pad, Rows_2, Src, Sum),
            Output_2 = lists:sublist(Output, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Output), J_3) ++ [Sum_2] ++ lists:nthtail(J_3 + 1, lists:nth(I_3 + 1, Output))] ++ lists:nthtail(I_3 + 1, Output),
            J_4 = (J_3 + 1),
            Fun_5_loop(Cols_2, I_3, J_4, K, Kernel_9, Ksize, Output_2, Pad, Rows_2, Src);
        _ -> {Cols_2, I_3, J_3, K, Kernel_9, Ksize, Output, Pad, Rows_2, Src}
    end
end,
{Cols_2, I_3, J_4, K, Kernel_9, Ksize, Output_2, Pad, Rows_2, Src} = Fun_5(Cols_2, I_3, J_3, K, Kernel_9, Ksize, Output, Pad, Rows_2, Src),
            I_4 = (I_3 + 1),
            Fun_6_loop(Cols_2, I_4, K, Kernel_9, Ksize, Output_2, Pad, Rows_2, Src);
        _ -> {Cols_2, I_3, K, Kernel_9, Ksize, Output, Pad, Rows_2, Src}
    end
end,
{Cols_2, I_4, K, Kernel_9, Ksize, Output_2, Pad, Rows_2, Src} = Fun_6(Cols_2, I_3, K, Kernel_9, Ksize, Output, Pad, Rows_2, Src),
        Output_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('image', [[0, 0, 0, 0, 0], [0, 10, 10, 10, 0], [0, 10, 10, 10, 0], [0, 10, 10, 10, 0], [0, 0, 0, 0, 0]]),
    erlang:put('result', my_laplacian(erlang:get('image'), 3)),
    erlang:put('r', 0),
    Fun_8 = fun Fun_8_loop() ->
    case (erlang:get('r') < erlang:length(erlang:get('result'))) of
        true ->
            Row_str = "[",
            C = 0,
            Fun_7 = fun Fun_7_loop(C, Row_str) ->
    case (C < erlang:length((case erlang:is_map(erlang:get('result')) of true -> maps:get(erlang:get('r'), erlang:get('result'), nil); _ -> case erlang:get('r') < 0 of true -> lists:nth(erlang:length(erlang:get('result')) + erlang:get('r') + 1, erlang:get('result')); _ -> lists:nth(erlang:get('r') + 1, erlang:get('result')) end end))) of
        true ->
            Row_str_2 = (Row_str ++ mochi_str((case erlang:is_map((case erlang:is_map(erlang:get('result')) of true -> maps:get(erlang:get('r'), erlang:get('result'), nil); _ -> case erlang:get('r') < 0 of true -> lists:nth(erlang:length(erlang:get('result')) + erlang:get('r') + 1, erlang:get('result')); _ -> lists:nth(erlang:get('r') + 1, erlang:get('result')) end end)) of true -> maps:get(C, (case erlang:is_map(erlang:get('result')) of true -> maps:get(erlang:get('r'), erlang:get('result'), nil); _ -> case erlang:get('r') < 0 of true -> lists:nth(erlang:length(erlang:get('result')) + erlang:get('r') + 1, erlang:get('result')); _ -> lists:nth(erlang:get('r') + 1, erlang:get('result')) end end), nil); _ -> case C < 0 of true -> lists:nth(erlang:length((case erlang:is_map(erlang:get('result')) of true -> maps:get(erlang:get('r'), erlang:get('result'), nil); _ -> case erlang:get('r') < 0 of true -> lists:nth(erlang:length(erlang:get('result')) + erlang:get('r') + 1, erlang:get('result')); _ -> lists:nth(erlang:get('r') + 1, erlang:get('result')) end end)) + C + 1, (case erlang:is_map(erlang:get('result')) of true -> maps:get(erlang:get('r'), erlang:get('result'), nil); _ -> case erlang:get('r') < 0 of true -> lists:nth(erlang:length(erlang:get('result')) + erlang:get('r') + 1, erlang:get('result')); _ -> lists:nth(erlang:get('r') + 1, erlang:get('result')) end end)); _ -> lists:nth(C + 1, (case erlang:is_map(erlang:get('result')) of true -> maps:get(erlang:get('r'), erlang:get('result'), nil); _ -> case erlang:get('r') < 0 of true -> lists:nth(erlang:length(erlang:get('result')) + erlang:get('r') + 1, erlang:get('result')); _ -> lists:nth(erlang:get('r') + 1, erlang:get('result')) end end)) end end))),
            case ((C + 1) < erlang:length((case erlang:is_map(erlang:get('result')) of true -> maps:get(erlang:get('r'), erlang:get('result'), nil); _ -> case erlang:get('r') < 0 of true -> lists:nth(erlang:length(erlang:get('result')) + erlang:get('r') + 1, erlang:get('result')); _ -> lists:nth(erlang:get('r') + 1, erlang:get('result')) end end))) of
        true -> Row_str_3 = (Row_str_2 ++ ", "),
            Row_str_4 = Row_str_3;
        _ -> Row_str_4 = Row_str_2
    end,
            C_2 = (C + 1),
            Fun_7_loop(C_2, Row_str_4);
        _ -> {C, Row_str}
    end
end,
{C_2, Row_str_4} = Fun_7(C, Row_str),
            Row_str_5 = (Row_str_4 ++ "]"),
            io:format("~ts~n", [mochi_repr(Row_str_5)]),
            erlang:put('r', (erlang:get('r') + 1)),
            Fun_8_loop();
        _ -> {}
    end
end,
{} = Fun_8(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
