#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, get_neighbors_pixel/4, local_binary_value/3]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

get_neighbors_pixel(Image, X, Y, Center) ->
    try
        case ((X < 0) orelse (Y < 0)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case ((X >= erlang:length(Image)) orelse (Y >= erlang:length((case erlang:is_map(Image) of true -> maps:get(0, Image, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Image) + 0 + 1, Image); _ -> lists:nth(0 + 1, Image) end end)))) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case ((case erlang:is_map((case erlang:is_map(Image) of true -> maps:get(X, Image, nil); _ -> case X < 0 of true -> lists:nth(erlang:length(Image) + X + 1, Image); _ -> lists:nth(X + 1, Image) end end)) of true -> maps:get(Y, (case erlang:is_map(Image) of true -> maps:get(X, Image, nil); _ -> case X < 0 of true -> lists:nth(erlang:length(Image) + X + 1, Image); _ -> lists:nth(X + 1, Image) end end), nil); _ -> case Y < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Image) of true -> maps:get(X, Image, nil); _ -> case X < 0 of true -> lists:nth(erlang:length(Image) + X + 1, Image); _ -> lists:nth(X + 1, Image) end end)) + Y + 1, (case erlang:is_map(Image) of true -> maps:get(X, Image, nil); _ -> case X < 0 of true -> lists:nth(erlang:length(Image) + X + 1, Image); _ -> lists:nth(X + 1, Image) end end)); _ -> lists:nth(Y + 1, (case erlang:is_map(Image) of true -> maps:get(X, Image, nil); _ -> case X < 0 of true -> lists:nth(erlang:length(Image) + X + 1, Image); _ -> lists:nth(X + 1, Image) end end)) end end) >= Center) of
        true -> throw({return, 1});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

local_binary_value(Image_2, X_2, Y_2) ->
    try
        Center_2 = (case erlang:is_map((case erlang:is_map(Image_2) of true -> maps:get(X_2, Image_2, nil); _ -> case X_2 < 0 of true -> lists:nth(erlang:length(Image_2) + X_2 + 1, Image_2); _ -> lists:nth(X_2 + 1, Image_2) end end)) of true -> maps:get(Y_2, (case erlang:is_map(Image_2) of true -> maps:get(X_2, Image_2, nil); _ -> case X_2 < 0 of true -> lists:nth(erlang:length(Image_2) + X_2 + 1, Image_2); _ -> lists:nth(X_2 + 1, Image_2) end end), nil); _ -> case Y_2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Image_2) of true -> maps:get(X_2, Image_2, nil); _ -> case X_2 < 0 of true -> lists:nth(erlang:length(Image_2) + X_2 + 1, Image_2); _ -> lists:nth(X_2 + 1, Image_2) end end)) + Y_2 + 1, (case erlang:is_map(Image_2) of true -> maps:get(X_2, Image_2, nil); _ -> case X_2 < 0 of true -> lists:nth(erlang:length(Image_2) + X_2 + 1, Image_2); _ -> lists:nth(X_2 + 1, Image_2) end end)); _ -> lists:nth(Y_2 + 1, (case erlang:is_map(Image_2) of true -> maps:get(X_2, Image_2, nil); _ -> case X_2 < 0 of true -> lists:nth(erlang:length(Image_2) + X_2 + 1, Image_2); _ -> lists:nth(X_2 + 1, Image_2) end end)) end end),
        Powers = [1, 2, 4, 8, 16, 32, 64, 128],
        Neighbors = [get_neighbors_pixel(Image_2, (X_2 - 1), (Y_2 + 1), Center_2), get_neighbors_pixel(Image_2, X_2, (Y_2 + 1), Center_2), get_neighbors_pixel(Image_2, (X_2 - 1), Y_2, Center_2), get_neighbors_pixel(Image_2, (X_2 + 1), (Y_2 + 1), Center_2), get_neighbors_pixel(Image_2, (X_2 + 1), Y_2, Center_2), get_neighbors_pixel(Image_2, (X_2 + 1), (Y_2 - 1), Center_2), get_neighbors_pixel(Image_2, X_2, (Y_2 - 1), Center_2), get_neighbors_pixel(Image_2, (X_2 - 1), (Y_2 - 1), Center_2)],
        Sum = 0,
        I = 0,
        Fun = fun Fun_loop(Center_2, I, Image_2, Neighbors, Powers, Sum, X_2, Y_2) ->
    case (I < erlang:length(Neighbors)) of
        true ->
            Sum_2 = (Sum + ((case erlang:is_map(Neighbors) of true -> maps:get(I, Neighbors, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Neighbors) + I + 1, Neighbors); _ -> lists:nth(I + 1, Neighbors) end end) * (case erlang:is_map(Powers) of true -> maps:get(I, Powers, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Powers) + I + 1, Powers); _ -> lists:nth(I + 1, Powers) end end))),
            I_2 = (I + 1),
            Fun_loop(Center_2, I_2, Image_2, Neighbors, Powers, Sum_2, X_2, Y_2);
        _ -> {Center_2, I, Image_2, Neighbors, Powers, Sum, X_2, Y_2}
    end
end,
{Center_2, I_2, Image_2, Neighbors, Powers, Sum_2, X_2, Y_2} = Fun(Center_2, I, Image_2, Neighbors, Powers, Sum, X_2, Y_2),
        Sum_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('image', [[10, 10, 10, 10, 10], [10, 20, 30, 20, 10], [10, 30, 40, 30, 10], [10, 20, 30, 20, 10], [10, 10, 10, 10, 10]]),
    erlang:put('i', 0),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('i') < erlang:length(erlang:get('image'))) of
        true ->
            J = 0,
            Line = "",
            Fun_2 = fun Fun_2_loop(J, Line) ->
    case (J < erlang:length((case erlang:is_map(erlang:get('image')) of true -> maps:get(0, erlang:get('image'), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(erlang:get('image')) + 0 + 1, erlang:get('image')); _ -> lists:nth(0 + 1, erlang:get('image')) end end))) of
        true ->
            Value = local_binary_value(erlang:get('image'), erlang:get('i'), J),
            Line_2 = (Line ++ mochi_str(Value)),
            case (J < (erlang:length((case erlang:is_map(erlang:get('image')) of true -> maps:get(0, erlang:get('image'), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(erlang:get('image')) + 0 + 1, erlang:get('image')); _ -> lists:nth(0 + 1, erlang:get('image')) end end)) - 1)) of
        true -> Line_3 = (Line_2 ++ " "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            J_2 = (J + 1),
            Fun_2_loop(J_2, Line_4);
        _ -> {J, Line}
    end
end,
{J_2, Line_4} = Fun_2(J, Line),
            io:format("~ts~n", [mochi_repr(Line_4)]),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
