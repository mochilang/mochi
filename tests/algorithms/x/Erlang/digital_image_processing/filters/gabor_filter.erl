#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, to_radians/1, sin_taylor/1, cos_taylor/1, exp_taylor/1, gabor_filter_kernel/6]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

to_radians(Deg) ->
    try
        mochi_safe_div(mochi_safe_mul(Deg, 3.141592653589793), 180)
    catch {return, Ret} -> Ret end.

sin_taylor(X) ->
    try
        Term = X,
        Sum = X,
        I = 1,
        Fun = fun Fun_loop(I, Sum, Term, X) ->
    case (I < 10) of
        true ->
            K1 = mochi_safe_mul(2, float(I)),
            K2 = (K1 + 1),
            Term_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term, X), X), mochi_safe_mul(K1, K2)),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, Term_2, X);
        _ -> {I, Sum, Term, X}
    end
end,
{I_2, Sum_2, Term_2, X} = Fun(I, Sum, Term, X),
        Sum_2
    catch {return, Ret} -> Ret end.

cos_taylor(X_2) ->
    try
        Term_3 = 1,
        Sum_3 = 1,
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(I_3, Sum_3, Term_3, X_2) ->
    case (I_3 < 10) of
        true ->
            K1_2 = (mochi_safe_mul(2, float(I_3)) - 1),
            K2_2 = mochi_safe_mul(2, float(I_3)),
            Term_4 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term_3, X_2), X_2), mochi_safe_mul(K1_2, K2_2)),
            Sum_4 = (Sum_3 + Term_4),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Sum_4, Term_4, X_2);
        _ -> {I_3, Sum_3, Term_3, X_2}
    end
end,
{I_4, Sum_4, Term_4, X_2} = Fun_2(I_3, Sum_3, Term_3, X_2),
        Sum_4
    catch {return, Ret} -> Ret end.

exp_taylor(X_3) ->
    try
        Term_5 = 1,
        Sum_5 = 1,
        I_5 = 1,
        Fun_3 = fun Fun_3_loop(I_5, Sum_5, Term_5, X_3) ->
    case (I_5 < 20) of
        true ->
            Term_6 = mochi_safe_div(mochi_safe_mul(Term_5, X_3), I_5),
            Sum_6 = (Sum_5 + Term_6),
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Sum_6, Term_6, X_3);
        _ -> {I_5, Sum_5, Term_5, X_3}
    end
end,
{I_6, Sum_6, Term_6, X_3} = Fun_3(I_5, Sum_5, Term_5, X_3),
        Sum_6
    catch {return, Ret} -> Ret end.

gabor_filter_kernel(Ksize, Sigma, Theta, Lambd, Gamma, Psi) ->
    try
        Size = Ksize,
        case (mochi_mod(Size, 2) == 0) of
        true -> Size_2 = (Size + 1),
            Size_3 = Size_2;
        _ -> Size_3 = Size
    end,
        Gabor = [],
        Y = 0,
        Fun_5 = fun Fun_5_loop(Gabor, Gamma, Ksize, Lambd, Psi, Sigma, Size_3, Theta, Y) ->
    case (Y < Size_3) of
        true ->
            Row = [],
            X_4 = 0,
            Fun_4 = fun Fun_4_loop(Gabor, Gamma, Ksize, Lambd, Psi, Row, Sigma, Size_3, Theta, X_4, Y) ->
    case (X_4 < Size_3) of
        true ->
            Px = float((X_4 - (Size_3 div 2))),
            Py = float((Y - (Size_3 div 2))),
            Rad = to_radians(Theta),
            Cos_theta = cos_taylor(Rad),
            Sin_theta = sin_taylor(Rad),
            X_rot = (mochi_safe_mul(Cos_theta, Px) + mochi_safe_mul(Sin_theta, Py)),
            Y_rot = (mochi_safe_mul(-Sin_theta, Px) + mochi_safe_mul(Cos_theta, Py)),
            Exponent = mochi_safe_div(-(mochi_safe_mul(X_rot, X_rot) + mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(Gamma, Gamma), Y_rot), Y_rot)), mochi_safe_mul(mochi_safe_mul(2, Sigma), Sigma)),
            Value = mochi_safe_mul(exp_taylor(Exponent), cos_taylor((mochi_safe_div(mochi_safe_mul(mochi_safe_mul(2, 3.141592653589793), X_rot), Lambd) + Psi))),
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Value]),
            X_5 = (X_4 + 1),
            Fun_4_loop(Gabor, Gamma, Ksize, Lambd, Psi, Row_2, Sigma, Size_3, Theta, X_5, Y);
        _ -> {Gabor, Gamma, Ksize, Lambd, Psi, Row, Sigma, Size_3, Theta, X_4, Y}
    end
end,
{Gabor, Gamma, Ksize, Lambd, Psi, Row_2, Sigma, Size_3, Theta, X_5, Y} = Fun_4(Gabor, Gamma, Ksize, Lambd, Psi, Row, Sigma, Size_3, Theta, X_4, Y),
            Gabor_2 = lists:append((case Gabor of nil -> []; _ -> Gabor end), [Row_2]),
            Y_2 = (Y + 1),
            Fun_5_loop(Gabor_2, Gamma, Ksize, Lambd, Psi, Sigma, Size_3, Theta, Y_2);
        _ -> {Gabor, Gamma, Ksize, Lambd, Psi, Sigma, Size_3, Theta, Y}
    end
end,
{Gabor_2, Gamma, Ksize, Lambd, Psi, Sigma, Size_3, Theta, Y_2} = Fun_5(Gabor, Gamma, Ksize, Lambd, Psi, Sigma, Size_3, Theta, Y),
        Gabor_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('kernel', gabor_filter_kernel(3, 8, 0, 10, 0, 0)),
    io:format("~ts~n", [mochi_repr(erlang:get('kernel'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
