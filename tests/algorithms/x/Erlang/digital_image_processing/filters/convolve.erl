#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pad_edge/2, im2col/3, flatten/1, dot/2, img_convolve/2, print_matrix/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

pad_edge(Image, Pad_size) ->
    try
        Height = erlang:length(Image),
        Width = erlang:length((case erlang:is_map(Image) of true -> maps:get(0, Image, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Image) + 0 + 1, Image); _ -> lists:nth(0 + 1, Image) end end)),
        New_height = (Height + (Pad_size * 2)),
        New_width = (Width + (Pad_size * 2)),
        Padded = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Height, I, Image, New_height, New_width, Pad_size, Padded, Width) ->
    case (I < New_height) of
        true ->
            Row = [],
            Src_i = I,
            case (Src_i < Pad_size) of
        true -> Src_i_2 = 0,
            Src_i_3 = Src_i_2;
        _ -> Src_i_3 = Src_i
    end,
            case (Src_i_3 >= (Height + Pad_size)) of
        true -> Src_i_4 = (Height - 1),
            Src_i_6 = Src_i_4;
        _ -> Src_i_5 = (Src_i_3 - Pad_size),
            Src_i_6 = Src_i_5
    end,
            J = 0,
            Fun = fun Fun_loop(Height, I, Image, J, New_height, New_width, Pad_size, Padded, Row, Src_i_6, Width) ->
    case (J < New_width) of
        true ->
            Src_j = J,
            case (Src_j < Pad_size) of
        true -> Src_j_2 = 0,
            Src_j_3 = Src_j_2;
        _ -> Src_j_3 = Src_j
    end,
            case (Src_j_3 >= (Width + Pad_size)) of
        true -> Src_j_4 = (Width - 1),
            Src_j_6 = Src_j_4;
        _ -> Src_j_5 = (Src_j_3 - Pad_size),
            Src_j_6 = Src_j_5
    end,
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [(case erlang:is_map((case erlang:is_map(Image) of true -> maps:get(Src_i_6, Image, nil); _ -> case Src_i_6 < 0 of true -> lists:nth(erlang:length(Image) + Src_i_6 + 1, Image); _ -> lists:nth(Src_i_6 + 1, Image) end end)) of true -> maps:get(Src_j_6, (case erlang:is_map(Image) of true -> maps:get(Src_i_6, Image, nil); _ -> case Src_i_6 < 0 of true -> lists:nth(erlang:length(Image) + Src_i_6 + 1, Image); _ -> lists:nth(Src_i_6 + 1, Image) end end), nil); _ -> case Src_j_6 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Image) of true -> maps:get(Src_i_6, Image, nil); _ -> case Src_i_6 < 0 of true -> lists:nth(erlang:length(Image) + Src_i_6 + 1, Image); _ -> lists:nth(Src_i_6 + 1, Image) end end)) + Src_j_6 + 1, (case erlang:is_map(Image) of true -> maps:get(Src_i_6, Image, nil); _ -> case Src_i_6 < 0 of true -> lists:nth(erlang:length(Image) + Src_i_6 + 1, Image); _ -> lists:nth(Src_i_6 + 1, Image) end end)); _ -> lists:nth(Src_j_6 + 1, (case erlang:is_map(Image) of true -> maps:get(Src_i_6, Image, nil); _ -> case Src_i_6 < 0 of true -> lists:nth(erlang:length(Image) + Src_i_6 + 1, Image); _ -> lists:nth(Src_i_6 + 1, Image) end end)) end end)]),
            J_2 = (J + 1),
            Fun_loop(Height, I, Image, J_2, New_height, New_width, Pad_size, Padded, Row_2, Src_i_6, Width);
        _ -> {Height, I, Image, J, New_height, New_width, Pad_size, Padded, Row, Src_i_6, Width}
    end
end,
{Height, I, Image, J_2, New_height, New_width, Pad_size, Padded, Row_2, Src_i_6, Width} = Fun(Height, I, Image, J, New_height, New_width, Pad_size, Padded, Row, Src_i_6, Width),
            Padded_2 = lists:append((case Padded of nil -> []; _ -> Padded end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Height, I_2, Image, New_height, New_width, Pad_size, Padded_2, Width);
        _ -> {Height, I, Image, New_height, New_width, Pad_size, Padded, Width}
    end
end,
{Height, I_2, Image, New_height, New_width, Pad_size, Padded_2, Width} = Fun_2(Height, I, Image, New_height, New_width, Pad_size, Padded, Width),
        Padded_2
    catch {return, Ret} -> Ret end.

im2col(Image_2, Block_h, Block_w) ->
    try
        Rows = erlang:length(Image_2),
        Cols = erlang:length((case erlang:is_map(Image_2) of true -> maps:get(0, Image_2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Image_2) + 0 + 1, Image_2); _ -> lists:nth(0 + 1, Image_2) end end)),
        Dst_height = ((Rows - Block_h) + 1),
        Dst_width = ((Cols - Block_w) + 1),
        Image_array = [],
        I_3 = 0,
        Fun_6 = fun Fun_6_loop(Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, Rows) ->
    case (I_3 < Dst_height) of
        true ->
            J_3 = 0,
            Fun_5 = fun Fun_5_loop(Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, J_3, Rows) ->
    case (J_3 < Dst_width) of
        true ->
            Window = [],
            Bi = 0,
            Fun_4 = fun Fun_4_loop(Bi, Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, J_3, Rows, Window) ->
    case (Bi < Block_h) of
        true ->
            Bj = 0,
            Fun_3 = fun Fun_3_loop(Bi, Bj, Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, J_3, Rows, Window) ->
    case (Bj < Block_w) of
        true ->
            Window_2 = lists:append((case Window of nil -> []; _ -> Window end), [(case erlang:is_map((case erlang:is_map(Image_2) of true -> maps:get((I_3 + Bi), Image_2, nil); _ -> case (I_3 + Bi) < 0 of true -> lists:nth(erlang:length(Image_2) + (I_3 + Bi) + 1, Image_2); _ -> lists:nth((I_3 + Bi) + 1, Image_2) end end)) of true -> maps:get((J_3 + Bj), (case erlang:is_map(Image_2) of true -> maps:get((I_3 + Bi), Image_2, nil); _ -> case (I_3 + Bi) < 0 of true -> lists:nth(erlang:length(Image_2) + (I_3 + Bi) + 1, Image_2); _ -> lists:nth((I_3 + Bi) + 1, Image_2) end end), nil); _ -> case (J_3 + Bj) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Image_2) of true -> maps:get((I_3 + Bi), Image_2, nil); _ -> case (I_3 + Bi) < 0 of true -> lists:nth(erlang:length(Image_2) + (I_3 + Bi) + 1, Image_2); _ -> lists:nth((I_3 + Bi) + 1, Image_2) end end)) + (J_3 + Bj) + 1, (case erlang:is_map(Image_2) of true -> maps:get((I_3 + Bi), Image_2, nil); _ -> case (I_3 + Bi) < 0 of true -> lists:nth(erlang:length(Image_2) + (I_3 + Bi) + 1, Image_2); _ -> lists:nth((I_3 + Bi) + 1, Image_2) end end)); _ -> lists:nth((J_3 + Bj) + 1, (case erlang:is_map(Image_2) of true -> maps:get((I_3 + Bi), Image_2, nil); _ -> case (I_3 + Bi) < 0 of true -> lists:nth(erlang:length(Image_2) + (I_3 + Bi) + 1, Image_2); _ -> lists:nth((I_3 + Bi) + 1, Image_2) end end)) end end)]),
            Bj_2 = (Bj + 1),
            Fun_3_loop(Bi, Bj_2, Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, J_3, Rows, Window_2);
        _ -> {Bi, Bj, Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, J_3, Rows, Window}
    end
end,
{Bi, Bj_2, Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, J_3, Rows, Window_2} = Fun_3(Bi, Bj, Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, J_3, Rows, Window),
            Bi_2 = (Bi + 1),
            Fun_4_loop(Bi_2, Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, J_3, Rows, Window_2);
        _ -> {Bi, Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, J_3, Rows, Window}
    end
end,
{Bi_2, Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, J_3, Rows, Window_2} = Fun_4(Bi, Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, J_3, Rows, Window),
            Image_array_2 = lists:append((case Image_array of nil -> []; _ -> Image_array end), [Window_2]),
            J_4 = (J_3 + 1),
            Fun_5_loop(Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array_2, J_4, Rows);
        _ -> {Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, J_3, Rows}
    end
end,
{Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array_2, J_4, Rows} = Fun_5(Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, J_3, Rows),
            I_4 = (I_3 + 1),
            Fun_6_loop(Block_h, Block_w, Cols, Dst_height, Dst_width, I_4, Image_2, Image_array_2, Rows);
        _ -> {Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, Rows}
    end
end,
{Block_h, Block_w, Cols, Dst_height, Dst_width, I_4, Image_2, Image_array_2, Rows} = Fun_6(Block_h, Block_w, Cols, Dst_height, Dst_width, I_3, Image_2, Image_array, Rows),
        Image_array_2
    catch {return, Ret} -> Ret end.

flatten(Matrix) ->
    try
        Out = [],
        I_5 = 0,
        Fun_8 = fun Fun_8_loop(I_5, Matrix, Out) ->
    case (I_5 < erlang:length(Matrix)) of
        true ->
            J_5 = 0,
            Fun_7 = fun Fun_7_loop(I_5, J_5, Matrix, Out) ->
    case (J_5 < erlang:length((case erlang:is_map(Matrix) of true -> maps:get(I_5, Matrix, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Matrix) + I_5 + 1, Matrix); _ -> lists:nth(I_5 + 1, Matrix) end end))) of
        true ->
            Out_2 = lists:append((case Out of nil -> []; _ -> Out end), [(case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(I_5, Matrix, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Matrix) + I_5 + 1, Matrix); _ -> lists:nth(I_5 + 1, Matrix) end end)) of true -> maps:get(J_5, (case erlang:is_map(Matrix) of true -> maps:get(I_5, Matrix, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Matrix) + I_5 + 1, Matrix); _ -> lists:nth(I_5 + 1, Matrix) end end), nil); _ -> case J_5 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(I_5, Matrix, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Matrix) + I_5 + 1, Matrix); _ -> lists:nth(I_5 + 1, Matrix) end end)) + J_5 + 1, (case erlang:is_map(Matrix) of true -> maps:get(I_5, Matrix, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Matrix) + I_5 + 1, Matrix); _ -> lists:nth(I_5 + 1, Matrix) end end)); _ -> lists:nth(J_5 + 1, (case erlang:is_map(Matrix) of true -> maps:get(I_5, Matrix, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Matrix) + I_5 + 1, Matrix); _ -> lists:nth(I_5 + 1, Matrix) end end)) end end)]),
            J_6 = (J_5 + 1),
            Fun_7_loop(I_5, J_6, Matrix, Out_2);
        _ -> {I_5, J_5, Matrix, Out}
    end
end,
{I_5, J_6, Matrix, Out_2} = Fun_7(I_5, J_5, Matrix, Out),
            I_6 = (I_5 + 1),
            Fun_8_loop(I_6, Matrix, Out_2);
        _ -> {I_5, Matrix, Out}
    end
end,
{I_6, Matrix, Out_2} = Fun_8(I_5, Matrix, Out),
        Out_2
    catch {return, Ret} -> Ret end.

dot(A, B) ->
    try
        Sum = 0,
        I_7 = 0,
        Fun_9 = fun Fun_9_loop(A, B, I_7, Sum) ->
    case (I_7 < erlang:length(A)) of
        true ->
            Sum_2 = (Sum + ((case erlang:is_map(A) of true -> maps:get(I_7, A, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(A) + I_7 + 1, A); _ -> lists:nth(I_7 + 1, A) end end) * (case erlang:is_map(B) of true -> maps:get(I_7, B, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(B) + I_7 + 1, B); _ -> lists:nth(I_7 + 1, B) end end))),
            I_8 = (I_7 + 1),
            Fun_9_loop(A, B, I_8, Sum_2);
        _ -> {A, B, I_7, Sum}
    end
end,
{A, B, I_8, Sum_2} = Fun_9(A, B, I_7, Sum),
        Sum_2
    catch {return, Ret} -> Ret end.

img_convolve(Image_3, Kernel) ->
    try
        Height_2 = erlang:length(Image_3),
        Width_2 = erlang:length((case erlang:is_map(Image_3) of true -> maps:get(0, Image_3, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Image_3) + 0 + 1, Image_3); _ -> lists:nth(0 + 1, Image_3) end end)),
        K_size = erlang:length(Kernel),
        Pad_size_2 = (K_size div 2),
        Padded_3 = pad_edge(Image_3, Pad_size_2),
        Image_array_3 = im2col(Padded_3, K_size, K_size),
        Kernel_flat = flatten(Kernel),
        Dst = [],
        Idx = 0,
        I_9 = 0,
        Fun_11 = fun Fun_11_loop(Dst, Height_2, I_9, Idx, Image_3, Image_array_3, K_size, Kernel, Kernel_flat, Pad_size_2, Padded_3, Width_2) ->
    case (I_9 < Height_2) of
        true ->
            Row_3 = [],
            J_7 = 0,
            Fun_10 = fun Fun_10_loop(Dst, Height_2, I_9, Idx, Image_3, Image_array_3, J_7, K_size, Kernel, Kernel_flat, Pad_size_2, Padded_3, Row_3, Width_2) ->
    case (J_7 < Width_2) of
        true ->
            Val = dot((case erlang:is_map(Image_array_3) of true -> maps:get(Idx, Image_array_3, nil); _ -> case Idx < 0 of true -> lists:nth(erlang:length(Image_array_3) + Idx + 1, Image_array_3); _ -> lists:nth(Idx + 1, Image_array_3) end end), Kernel_flat),
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [Val]),
            Idx_2 = (Idx + 1),
            J_8 = (J_7 + 1),
            Fun_10_loop(Dst, Height_2, I_9, Idx_2, Image_3, Image_array_3, J_8, K_size, Kernel, Kernel_flat, Pad_size_2, Padded_3, Row_4, Width_2);
        _ -> {Dst, Height_2, I_9, Idx, Image_3, Image_array_3, J_7, K_size, Kernel, Kernel_flat, Pad_size_2, Padded_3, Row_3, Width_2}
    end
end,
{Dst, Height_2, I_9, Idx_2, Image_3, Image_array_3, J_8, K_size, Kernel, Kernel_flat, Pad_size_2, Padded_3, Row_4, Width_2} = Fun_10(Dst, Height_2, I_9, Idx, Image_3, Image_array_3, J_7, K_size, Kernel, Kernel_flat, Pad_size_2, Padded_3, Row_3, Width_2),
            Dst_2 = lists:append((case Dst of nil -> []; _ -> Dst end), [Row_4]),
            I_10 = (I_9 + 1),
            Fun_11_loop(Dst_2, Height_2, I_10, Idx_2, Image_3, Image_array_3, K_size, Kernel, Kernel_flat, Pad_size_2, Padded_3, Width_2);
        _ -> {Dst, Height_2, I_9, Idx, Image_3, Image_array_3, K_size, Kernel, Kernel_flat, Pad_size_2, Padded_3, Width_2}
    end
end,
{Dst_2, Height_2, I_10, Idx_2, Image_3, Image_array_3, K_size, Kernel, Kernel_flat, Pad_size_2, Padded_3, Width_2} = Fun_11(Dst, Height_2, I_9, Idx, Image_3, Image_array_3, K_size, Kernel, Kernel_flat, Pad_size_2, Padded_3, Width_2),
        Dst_2
    catch {return, Ret} -> Ret end.

print_matrix(M) ->
    try
        I_11 = 0,
        Fun_13 = fun Fun_13_loop(I_11, M) ->
    case (I_11 < erlang:length(M)) of
        true ->
            Line = "",
            J_9 = 0,
            Fun_12 = fun Fun_12_loop(I_11, J_9, Line, M) ->
    case (J_9 < erlang:length((case erlang:is_map(M) of true -> maps:get(I_11, M, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(M) + I_11 + 1, M); _ -> lists:nth(I_11 + 1, M) end end))) of
        true ->
            case (J_9 > 0) of
        true -> Line_2 = (Line ++ " "),
            Line_3 = Line_2;
        _ -> Line_3 = Line
    end,
            Line_4 = (Line_3 ++ mochi_str((case erlang:is_map((case erlang:is_map(M) of true -> maps:get(I_11, M, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(M) + I_11 + 1, M); _ -> lists:nth(I_11 + 1, M) end end)) of true -> maps:get(J_9, (case erlang:is_map(M) of true -> maps:get(I_11, M, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(M) + I_11 + 1, M); _ -> lists:nth(I_11 + 1, M) end end), nil); _ -> case J_9 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M) of true -> maps:get(I_11, M, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(M) + I_11 + 1, M); _ -> lists:nth(I_11 + 1, M) end end)) + J_9 + 1, (case erlang:is_map(M) of true -> maps:get(I_11, M, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(M) + I_11 + 1, M); _ -> lists:nth(I_11 + 1, M) end end)); _ -> lists:nth(J_9 + 1, (case erlang:is_map(M) of true -> maps:get(I_11, M, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(M) + I_11 + 1, M); _ -> lists:nth(I_11 + 1, M) end end)) end end))),
            J_10 = (J_9 + 1),
            Fun_12_loop(I_11, J_10, Line_4, M);
        _ -> {I_11, J_9, Line, M}
    end
end,
{I_11, J_10, Line_4, M} = Fun_12(I_11, J_9, Line, M),
            io:format("~ts~n", [mochi_repr(Line_4)]),
            I_12 = (I_11 + 1),
            Fun_13_loop(I_12, M);
        _ -> {I_11, M}
    end
end,
{I_12, M} = Fun_13(I_11, M),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('image', [[1, 2, 3, 0, 0], [4, 5, 6, 0, 0], [7, 8, 9, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]),
    erlang:put('laplace_kernel', [[0, 1, 0], [1, -4, 1], [0, 1, 0]]),
    erlang:put('result', img_convolve(erlang:get('image'), erlang:get('laplace_kernel'))),
    print_matrix(erlang:get('result')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
