#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, insertion_sort/1, median_filter/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

insertion_sort(A) ->
    try
        I = 1,
        Fun_2 = fun Fun_2_loop(A, I) ->
    case (I < erlang:length(A)) of
        true ->
            Key = (case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(A) + I + 1, A); _ -> lists:nth(I + 1, A) end end),
            J = (I - 1),
            Fun = fun Fun_loop(A, I, J, Key) ->
    case ((J >= 0) andalso ((case erlang:is_map(A) of true -> maps:get(J, A, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(A) + J + 1, A); _ -> lists:nth(J + 1, A) end end) > Key)) of
        true ->
            A_2 = lists:sublist(A, (J + 1)) ++ [(case erlang:is_map(A) of true -> maps:get(J, A, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(A) + J + 1, A); _ -> lists:nth(J + 1, A) end end)] ++ lists:nthtail((J + 1) + 1, A),
            J_2 = (J - 1),
            Fun_loop(A_2, I, J_2, Key);
        _ -> {A, I, J, Key}
    end
end,
{A_2, I, J_2, Key} = Fun(A, I, J, Key),
            A_3 = lists:sublist(A_2, (J_2 + 1)) ++ [Key] ++ lists:nthtail((J_2 + 1) + 1, A_2),
            I_2 = (I + 1),
            Fun_2_loop(A_3, I_2);
        _ -> {A, I}
    end
end,
{A_3, I_2} = Fun_2(A, I),
        A_3
    catch {return, Ret} -> Ret end.

median_filter(Gray_img, Mask) ->
    try
        Rows = erlang:length(Gray_img),
        Cols = erlang:length((case erlang:is_map(Gray_img) of true -> maps:get(0, Gray_img, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Gray_img) + 0 + 1, Gray_img); _ -> lists:nth(0 + 1, Gray_img) end end)),
        Bd = (Mask div 2),
        Result = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Bd, Cols, Gray_img, I_3, Mask, Result, Rows) ->
    case (I_3 < Rows) of
        true ->
            Row = [],
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(Bd, Cols, Gray_img, I_3, J_3, Mask, Result, Row, Rows) ->
    case (J_3 < Cols) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            J_4 = (J_3 + 1),
            Fun_3_loop(Bd, Cols, Gray_img, I_3, J_4, Mask, Result, Row_2, Rows);
        _ -> {Bd, Cols, Gray_img, I_3, J_3, Mask, Result, Row, Rows}
    end
end,
{Bd, Cols, Gray_img, I_3, J_4, Mask, Result, Row_2, Rows} = Fun_3(Bd, Cols, Gray_img, I_3, J_3, Mask, Result, Row, Rows),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_2]),
            I_4 = (I_3 + 1),
            Fun_4_loop(Bd, Cols, Gray_img, I_4, Mask, Result_2, Rows);
        _ -> {Bd, Cols, Gray_img, I_3, Mask, Result, Rows}
    end
end,
{Bd, Cols, Gray_img, I_4, Mask, Result_2, Rows} = Fun_4(Bd, Cols, Gray_img, I_3, Mask, Result, Rows),
        I_5 = Bd,
        Fun_8 = fun Fun_8_loop(Bd, Cols, Gray_img, I_5, Mask, Result_2, Rows) ->
    case (I_5 < (Rows - Bd)) of
        true ->
            J_5 = Bd,
            Fun_7 = fun Fun_7_loop(Bd, Cols, Gray_img, I_5, J_5, Mask, Result_2, Rows) ->
    case (J_5 < (Cols - Bd)) of
        true ->
            Kernel = [],
            X = (I_5 - Bd),
            Fun_6 = fun Fun_6_loop(Bd, Cols, Gray_img, I_5, J_5, Kernel, Mask, Result_2, Rows, X) ->
    case (X =< (I_5 + Bd)) of
        true ->
            Y = (J_5 - Bd),
            Fun_5 = fun Fun_5_loop(Bd, Cols, Gray_img, I_5, J_5, Kernel, Mask, Result_2, Rows, X, Y) ->
    case (Y =< (J_5 + Bd)) of
        true ->
            Kernel_2 = lists:append((case Kernel of nil -> []; _ -> Kernel end), [(case erlang:is_map((case erlang:is_map(Gray_img) of true -> maps:get(X, Gray_img, nil); _ -> case X < 0 of true -> lists:nth(erlang:length(Gray_img) + X + 1, Gray_img); _ -> lists:nth(X + 1, Gray_img) end end)) of true -> maps:get(Y, (case erlang:is_map(Gray_img) of true -> maps:get(X, Gray_img, nil); _ -> case X < 0 of true -> lists:nth(erlang:length(Gray_img) + X + 1, Gray_img); _ -> lists:nth(X + 1, Gray_img) end end), nil); _ -> case Y < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Gray_img) of true -> maps:get(X, Gray_img, nil); _ -> case X < 0 of true -> lists:nth(erlang:length(Gray_img) + X + 1, Gray_img); _ -> lists:nth(X + 1, Gray_img) end end)) + Y + 1, (case erlang:is_map(Gray_img) of true -> maps:get(X, Gray_img, nil); _ -> case X < 0 of true -> lists:nth(erlang:length(Gray_img) + X + 1, Gray_img); _ -> lists:nth(X + 1, Gray_img) end end)); _ -> lists:nth(Y + 1, (case erlang:is_map(Gray_img) of true -> maps:get(X, Gray_img, nil); _ -> case X < 0 of true -> lists:nth(erlang:length(Gray_img) + X + 1, Gray_img); _ -> lists:nth(X + 1, Gray_img) end end)) end end)]),
            Y_2 = (Y + 1),
            Fun_5_loop(Bd, Cols, Gray_img, I_5, J_5, Kernel_2, Mask, Result_2, Rows, X, Y_2);
        _ -> {Bd, Cols, Gray_img, I_5, J_5, Kernel, Mask, Result_2, Rows, X, Y}
    end
end,
{Bd, Cols, Gray_img, I_5, J_5, Kernel_2, Mask, Result_2, Rows, X, Y_2} = Fun_5(Bd, Cols, Gray_img, I_5, J_5, Kernel, Mask, Result_2, Rows, X, Y),
            X_2 = (X + 1),
            Fun_6_loop(Bd, Cols, Gray_img, I_5, J_5, Kernel_2, Mask, Result_2, Rows, X_2);
        _ -> {Bd, Cols, Gray_img, I_5, J_5, Kernel, Mask, Result_2, Rows, X}
    end
end,
{Bd, Cols, Gray_img, I_5, J_5, Kernel_2, Mask, Result_2, Rows, X_2} = Fun_6(Bd, Cols, Gray_img, I_5, J_5, Kernel, Mask, Result_2, Rows, X),
            Kernel_3 = insertion_sort(Kernel_2),
            Idx = ((Mask * Mask) div 2),
            Result_3 = lists:sublist(Result_2, I_5) ++ [lists:sublist(lists:nth(I_5 + 1, Result_2), J_5) ++ [(case erlang:is_map(Kernel_3) of true -> maps:get(Idx, Kernel_3, nil); _ -> case Idx < 0 of true -> lists:nth(erlang:length(Kernel_3) + Idx + 1, Kernel_3); _ -> lists:nth(Idx + 1, Kernel_3) end end)] ++ lists:nthtail(J_5 + 1, lists:nth(I_5 + 1, Result_2))] ++ lists:nthtail(I_5 + 1, Result_2),
            J_6 = (J_5 + 1),
            Fun_7_loop(Bd, Cols, Gray_img, I_5, J_6, Mask, Result_3, Rows);
        _ -> {Bd, Cols, Gray_img, I_5, J_5, Mask, Result_2, Rows}
    end
end,
{Bd, Cols, Gray_img, I_5, J_6, Mask, Result_3, Rows} = Fun_7(Bd, Cols, Gray_img, I_5, J_5, Mask, Result_2, Rows),
            I_6 = (I_5 + 1),
            Fun_8_loop(Bd, Cols, Gray_img, I_6, Mask, Result_3, Rows);
        _ -> {Bd, Cols, Gray_img, I_5, Mask, Result_2, Rows}
    end
end,
{Bd, Cols, Gray_img, I_6, Mask, Result_3, Rows} = Fun_8(Bd, Cols, Gray_img, I_5, Mask, Result_2, Rows),
        Result_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        Img = [[10, 10, 10, 10, 10], [10, 255, 10, 255, 10], [10, 10, 10, 10, 10], [10, 255, 10, 255, 10], [10, 10, 10, 10, 10]],
        Filtered = median_filter(Img, 3),
        io:format("~ts~n", [mochi_repr(Filtered)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
