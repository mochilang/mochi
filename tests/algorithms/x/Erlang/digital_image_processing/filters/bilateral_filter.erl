#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs/1, sqrtapprox/1, expapprox/1, vec_gaussian/2, get_slice/4, get_gauss_kernel/2, elementwise_sub/2, elementwise_mul/2, matrix_sum/1, bilateral_filter/4]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

abs(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

sqrtapprox(X_2) ->
    try
        case (X_2 =< 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Guess = X_2,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 10) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_2, Guess)), 2),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, Ret} -> Ret end.

expapprox(X_3) ->
    try
        Term = 1,
        Sum = 1,
        N = 1,
        Fun_2 = fun Fun_2_loop(N, Sum, Term, X_3) ->
    case (N < 10) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X_3), float(N)),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_2_loop(N_2, Sum_2, Term_2, X_3);
        _ -> {N, Sum, Term, X_3}
    end
end,
{N_2, Sum_2, Term_2, X_3} = Fun_2(N, Sum, Term, X_3),
        Sum_2
    catch {return, Ret} -> Ret end.

vec_gaussian(Mat, Variance) ->
    try
        I_3 = 0,
        Out = [],
        Fun_4 = fun Fun_4_loop(I_3, Mat, Out, Variance) ->
    case (I_3 < erlang:length(Mat)) of
        true ->
            Row = [],
            J = 0,
            Fun_3 = fun Fun_3_loop(I_3, J, Mat, Out, Row, Variance) ->
    case (J < erlang:length((case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> lists:nth(I_3 + 1, Mat) end))) of
        true ->
            V = (case erlang:is_map((case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> lists:nth(I_3 + 1, Mat) end)) of true -> maps:get(J, (case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> lists:nth(I_3 + 1, Mat) end), nil); _ -> lists:nth(J + 1, (case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> lists:nth(I_3 + 1, Mat) end)) end),
            E = mochi_safe_div(-mochi_safe_mul(V, V), mochi_safe_mul(2, Variance)),
            Row_2 = (Row ++ [expapprox(E)]),
            J_2 = (J + 1),
            Fun_3_loop(I_3, J_2, Mat, Out, Row_2, Variance);
        _ -> {I_3, J, Mat, Out, Row, Variance}
    end
end,
{I_3, J_2, Mat, Out, Row_2, Variance} = Fun_3(I_3, J, Mat, Out, Row, Variance),
            Out_2 = (Out ++ [Row_2]),
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, Mat, Out_2, Variance);
        _ -> {I_3, Mat, Out, Variance}
    end
end,
{I_4, Mat, Out_2, Variance} = Fun_4(I_3, Mat, Out, Variance),
        Out_2
    catch {return, Ret} -> Ret end.

get_slice(Img, X_4, Y, Kernel_size) ->
    try
        Half = (Kernel_size div 2),
        I_5 = (X_4 - Half),
        Slice = [],
        Fun_6 = fun Fun_6_loop(Half, I_5, Img, Kernel_size, Slice, X_4, Y) ->
    case (I_5 =< (X_4 + Half)) of
        true ->
            Row_3 = [],
            J_3 = (Y - Half),
            Fun_5 = fun Fun_5_loop(Half, I_5, Img, J_3, Kernel_size, Row_3, Slice, X_4, Y) ->
    case (J_3 =< (Y + Half)) of
        true ->
            Row_4 = (Row_3 ++ [(case erlang:is_map((case erlang:is_map(Img) of true -> maps:get(I_5, Img, nil); _ -> lists:nth(I_5 + 1, Img) end)) of true -> maps:get(J_3, (case erlang:is_map(Img) of true -> maps:get(I_5, Img, nil); _ -> lists:nth(I_5 + 1, Img) end), nil); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Img) of true -> maps:get(I_5, Img, nil); _ -> lists:nth(I_5 + 1, Img) end)) end)]),
            J_4 = (J_3 + 1),
            Fun_5_loop(Half, I_5, Img, J_4, Kernel_size, Row_4, Slice, X_4, Y);
        _ -> {Half, I_5, Img, J_3, Kernel_size, Row_3, Slice, X_4, Y}
    end
end,
{Half, I_5, Img, J_4, Kernel_size, Row_4, Slice, X_4, Y} = Fun_5(Half, I_5, Img, J_3, Kernel_size, Row_3, Slice, X_4, Y),
            Slice_2 = (Slice ++ [Row_4]),
            I_6 = (I_5 + 1),
            Fun_6_loop(Half, I_6, Img, Kernel_size, Slice_2, X_4, Y);
        _ -> {Half, I_5, Img, Kernel_size, Slice, X_4, Y}
    end
end,
{Half, I_6, Img, Kernel_size, Slice_2, X_4, Y} = Fun_6(Half, I_5, Img, Kernel_size, Slice, X_4, Y),
        Slice_2
    catch {return, Ret} -> Ret end.

get_gauss_kernel(Kernel_size_2, Spatial_variance) ->
    try
        Arr = [],
        I_7 = 0,
        Fun_8 = fun Fun_8_loop(Arr, I_7, Kernel_size_2, Spatial_variance) ->
    case (I_7 < Kernel_size_2) of
        true ->
            Row_5 = [],
            J_5 = 0,
            Fun_7 = fun Fun_7_loop(Arr, I_7, J_5, Kernel_size_2, Row_5, Spatial_variance) ->
    case (J_5 < Kernel_size_2) of
        true ->
            Di = float((I_7 - (Kernel_size_2 div 2))),
            Dj = float((J_5 - (Kernel_size_2 div 2))),
            Dist = sqrtapprox((mochi_safe_mul(Di, Di) + mochi_safe_mul(Dj, Dj))),
            Row_6 = (Row_5 ++ [Dist]),
            J_6 = (J_5 + 1),
            Fun_7_loop(Arr, I_7, J_6, Kernel_size_2, Row_6, Spatial_variance);
        _ -> {Arr, I_7, J_5, Kernel_size_2, Row_5, Spatial_variance}
    end
end,
{Arr, I_7, J_6, Kernel_size_2, Row_6, Spatial_variance} = Fun_7(Arr, I_7, J_5, Kernel_size_2, Row_5, Spatial_variance),
            Arr_2 = (Arr ++ [Row_6]),
            I_8 = (I_7 + 1),
            Fun_8_loop(Arr_2, I_8, Kernel_size_2, Spatial_variance);
        _ -> {Arr, I_7, Kernel_size_2, Spatial_variance}
    end
end,
{Arr_2, I_8, Kernel_size_2, Spatial_variance} = Fun_8(Arr, I_7, Kernel_size_2, Spatial_variance),
        vec_gaussian(Arr_2, Spatial_variance)
    catch {return, Ret} -> Ret end.

elementwise_sub(Mat_2, Value) ->
    try
        Res = [],
        I_9 = 0,
        Fun_10 = fun Fun_10_loop(I_9, Mat_2, Res, Value) ->
    case (I_9 < erlang:length(Mat_2)) of
        true ->
            Row_7 = [],
            J_7 = 0,
            Fun_9 = fun Fun_9_loop(I_9, J_7, Mat_2, Res, Row_7, Value) ->
    case (J_7 < erlang:length((case erlang:is_map(Mat_2) of true -> maps:get(I_9, Mat_2, nil); _ -> lists:nth(I_9 + 1, Mat_2) end))) of
        true ->
            Row_8 = (Row_7 ++ [((case erlang:is_map((case erlang:is_map(Mat_2) of true -> maps:get(I_9, Mat_2, nil); _ -> lists:nth(I_9 + 1, Mat_2) end)) of true -> maps:get(J_7, (case erlang:is_map(Mat_2) of true -> maps:get(I_9, Mat_2, nil); _ -> lists:nth(I_9 + 1, Mat_2) end), nil); _ -> lists:nth(J_7 + 1, (case erlang:is_map(Mat_2) of true -> maps:get(I_9, Mat_2, nil); _ -> lists:nth(I_9 + 1, Mat_2) end)) end) - Value)]),
            J_8 = (J_7 + 1),
            Fun_9_loop(I_9, J_8, Mat_2, Res, Row_8, Value);
        _ -> {I_9, J_7, Mat_2, Res, Row_7, Value}
    end
end,
{I_9, J_8, Mat_2, Res, Row_8, Value} = Fun_9(I_9, J_7, Mat_2, Res, Row_7, Value),
            Res_2 = (Res ++ [Row_8]),
            I_10 = (I_9 + 1),
            Fun_10_loop(I_10, Mat_2, Res_2, Value);
        _ -> {I_9, Mat_2, Res, Value}
    end
end,
{I_10, Mat_2, Res_2, Value} = Fun_10(I_9, Mat_2, Res, Value),
        Res_2
    catch {return, Ret} -> Ret end.

elementwise_mul(A, B) ->
    try
        Res_3 = [],
        I_11 = 0,
        Fun_12 = fun Fun_12_loop(A, B, I_11, Res_3) ->
    case (I_11 < erlang:length(A)) of
        true ->
            Row_9 = [],
            J_9 = 0,
            Fun_11 = fun Fun_11_loop(A, B, I_11, J_9, Res_3, Row_9) ->
    case (J_9 < erlang:length((case erlang:is_map(A) of true -> maps:get(I_11, A, nil); _ -> lists:nth(I_11 + 1, A) end))) of
        true ->
            Row_10 = (Row_9 ++ [mochi_safe_mul((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(I_11, A, nil); _ -> lists:nth(I_11 + 1, A) end)) of true -> maps:get(J_9, (case erlang:is_map(A) of true -> maps:get(I_11, A, nil); _ -> lists:nth(I_11 + 1, A) end), nil); _ -> lists:nth(J_9 + 1, (case erlang:is_map(A) of true -> maps:get(I_11, A, nil); _ -> lists:nth(I_11 + 1, A) end)) end), (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(I_11, B, nil); _ -> lists:nth(I_11 + 1, B) end)) of true -> maps:get(J_9, (case erlang:is_map(B) of true -> maps:get(I_11, B, nil); _ -> lists:nth(I_11 + 1, B) end), nil); _ -> lists:nth(J_9 + 1, (case erlang:is_map(B) of true -> maps:get(I_11, B, nil); _ -> lists:nth(I_11 + 1, B) end)) end))]),
            J_10 = (J_9 + 1),
            Fun_11_loop(A, B, I_11, J_10, Res_3, Row_10);
        _ -> {A, B, I_11, J_9, Res_3, Row_9}
    end
end,
{A, B, I_11, J_10, Res_3, Row_10} = Fun_11(A, B, I_11, J_9, Res_3, Row_9),
            Res_4 = (Res_3 ++ [Row_10]),
            I_12 = (I_11 + 1),
            Fun_12_loop(A, B, I_12, Res_4);
        _ -> {A, B, I_11, Res_3}
    end
end,
{A, B, I_12, Res_4} = Fun_12(A, B, I_11, Res_3),
        Res_4
    catch {return, Ret} -> Ret end.

matrix_sum(Mat_3) ->
    try
        Total = 0,
        I_13 = 0,
        Fun_14 = fun Fun_14_loop(I_13, Mat_3, Total) ->
    case (I_13 < erlang:length(Mat_3)) of
        true ->
            J_11 = 0,
            Fun_13 = fun Fun_13_loop(I_13, J_11, Mat_3, Total) ->
    case (J_11 < erlang:length((case erlang:is_map(Mat_3) of true -> maps:get(I_13, Mat_3, nil); _ -> lists:nth(I_13 + 1, Mat_3) end))) of
        true ->
            Total_2 = (Total + (case erlang:is_map((case erlang:is_map(Mat_3) of true -> maps:get(I_13, Mat_3, nil); _ -> lists:nth(I_13 + 1, Mat_3) end)) of true -> maps:get(J_11, (case erlang:is_map(Mat_3) of true -> maps:get(I_13, Mat_3, nil); _ -> lists:nth(I_13 + 1, Mat_3) end), nil); _ -> lists:nth(J_11 + 1, (case erlang:is_map(Mat_3) of true -> maps:get(I_13, Mat_3, nil); _ -> lists:nth(I_13 + 1, Mat_3) end)) end)),
            J_12 = (J_11 + 1),
            Fun_13_loop(I_13, J_12, Mat_3, Total_2);
        _ -> {I_13, J_11, Mat_3, Total}
    end
end,
{I_13, J_12, Mat_3, Total_2} = Fun_13(I_13, J_11, Mat_3, Total),
            I_14 = (I_13 + 1),
            Fun_14_loop(I_14, Mat_3, Total_2);
        _ -> {I_13, Mat_3, Total}
    end
end,
{I_14, Mat_3, Total_2} = Fun_14(I_13, Mat_3, Total),
        Total_2
    catch {return, Ret} -> Ret end.

bilateral_filter(Img_2, Spatial_variance_2, Intensity_variance, Kernel_size_3) ->
    try
        Gauss_ker = get_gauss_kernel(Kernel_size_3, Spatial_variance_2),
        Img_s = Img_2,
        Center = (case erlang:is_map((case erlang:is_map(Img_s) of true -> maps:get((Kernel_size_3 div 2), Img_s, nil); _ -> lists:nth((Kernel_size_3 div 2) + 1, Img_s) end)) of true -> maps:get((Kernel_size_3 div 2), (case erlang:is_map(Img_s) of true -> maps:get((Kernel_size_3 div 2), Img_s, nil); _ -> lists:nth((Kernel_size_3 div 2) + 1, Img_s) end), nil); _ -> lists:nth((Kernel_size_3 div 2) + 1, (case erlang:is_map(Img_s) of true -> maps:get((Kernel_size_3 div 2), Img_s, nil); _ -> lists:nth((Kernel_size_3 div 2) + 1, Img_s) end)) end),
        Img_i = elementwise_sub(Img_s, Center),
        Img_ig = vec_gaussian(Img_i, Intensity_variance),
        Weights = elementwise_mul(Gauss_ker, Img_ig),
        Vals = elementwise_mul(Img_s, Weights),
        Sum_weights = matrix_sum(Weights),
        Val = 0,
        case (Sum_weights /= 0) of
        true -> Val_2 = mochi_safe_div(matrix_sum(Vals), Sum_weights),
            Val_3 = Val_2;
        _ -> Val_3 = Val
    end,
        Val_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('img', [[0.2, 0.3, 0.4], [0.3, 0.4, 0.5], [0.4, 0.5, 0.6]]),
    erlang:put('result', bilateral_filter(erlang:get('img'), 1, 1, 3)),
    io:format("~ts~n", [mochi_repr(erlang:get('result'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
