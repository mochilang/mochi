#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, expapprox/1, gen_gaussian_kernel/2, gaussian_filter/3, print_image/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

expapprox(X) ->
    try
        Sum = 1,
        Term = 1,
        N = 1,
        Fun = fun Fun_loop(N, Sum, Term, X) ->
    case (N < 10) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X), float(N)),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(N_2, Sum_2, Term_2, X);
        _ -> {N, Sum, Term, X}
    end
end,
{N_2, Sum_2, Term_2, X} = Fun(N, Sum, Term, X),
        Sum_2
    catch {return, Ret} -> Ret end.

gen_gaussian_kernel(K_size, Sigma) ->
    try
        Center = (K_size div 2),
        Kernel = [],
        I = 0,
        Fun_3 = fun Fun_3_loop(Center, I, K_size, Kernel, Sigma) ->
    case (I < K_size) of
        true ->
            Row = [],
            J = 0,
            Fun_2 = fun Fun_2_loop(Center, I, J, K_size, Kernel, Row, Sigma) ->
    case (J < K_size) of
        true ->
            X_2 = float((I - Center)),
            Y = float((J - Center)),
            Exponent = -mochi_safe_div((mochi_safe_mul(X_2, X_2) + mochi_safe_mul(Y, Y)), mochi_safe_mul(mochi_safe_mul(2, Sigma), Sigma)),
            Value = mochi_safe_mul(mochi_safe_div(1, mochi_safe_mul(mochi_safe_mul(2, 3.141592653589793), Sigma)), expapprox(Exponent)),
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Value]),
            J_2 = (J + 1),
            Fun_2_loop(Center, I, J_2, K_size, Kernel, Row_2, Sigma);
        _ -> {Center, I, J, K_size, Kernel, Row, Sigma}
    end
end,
{Center, I, J_2, K_size, Kernel, Row_2, Sigma} = Fun_2(Center, I, J, K_size, Kernel, Row, Sigma),
            Kernel_2 = lists:append((case Kernel of nil -> []; _ -> Kernel end), [Row_2]),
            I_2 = (I + 1),
            Fun_3_loop(Center, I_2, K_size, Kernel_2, Sigma);
        _ -> {Center, I, K_size, Kernel, Sigma}
    end
end,
{Center, I_2, K_size, Kernel_2, Sigma} = Fun_3(Center, I, K_size, Kernel, Sigma),
        Kernel_2
    catch {return, Ret} -> Ret end.

gaussian_filter(Image, K_size_2, Sigma_2) ->
    try
        Height = erlang:length(Image),
        Width = erlang:length((case erlang:is_map(Image) of true -> maps:get(0, Image, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Image) + 0 + 1, Image); _ -> lists:nth(0 + 1, Image) end end)),
        Dst_height = ((Height - K_size_2) + 1),
        Dst_width = ((Width - K_size_2) + 1),
        Kernel_3 = gen_gaussian_kernel(K_size_2, Sigma_2),
        Dst = [],
        I_3 = 0,
        Fun_7 = fun Fun_7_loop(Dst, Dst_height, Dst_width, Height, I_3, Image, K_size_2, Kernel_3, Sigma_2, Width) ->
    case (I_3 < Dst_height) of
        true ->
            Row_3 = [],
            J_3 = 0,
            Fun_6 = fun Fun_6_loop(Dst, Dst_height, Dst_width, Height, I_3, Image, J_3, K_size_2, Kernel_3, Row_3, Sigma_2, Width) ->
    case (J_3 < Dst_width) of
        true ->
            Sum_3 = 0,
            Ki = 0,
            Fun_5 = fun Fun_5_loop(Dst, Dst_height, Dst_width, Height, I_3, Image, J_3, K_size_2, Kernel_3, Ki, Row_3, Sigma_2, Sum_3, Width) ->
    case (Ki < K_size_2) of
        true ->
            Kj = 0,
            Fun_4 = fun Fun_4_loop(Dst, Dst_height, Dst_width, Height, I_3, Image, J_3, K_size_2, Kernel_3, Ki, Kj, Row_3, Sigma_2, Sum_3, Width) ->
    case (Kj < K_size_2) of
        true ->
            Sum_4 = (Sum_3 + mochi_safe_mul(float((case erlang:is_map((case erlang:is_map(Image) of true -> maps:get((I_3 + Ki), Image, nil); _ -> case (I_3 + Ki) < 0 of true -> lists:nth(erlang:length(Image) + (I_3 + Ki) + 1, Image); _ -> lists:nth((I_3 + Ki) + 1, Image) end end)) of true -> maps:get((J_3 + Kj), (case erlang:is_map(Image) of true -> maps:get((I_3 + Ki), Image, nil); _ -> case (I_3 + Ki) < 0 of true -> lists:nth(erlang:length(Image) + (I_3 + Ki) + 1, Image); _ -> lists:nth((I_3 + Ki) + 1, Image) end end), nil); _ -> case (J_3 + Kj) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Image) of true -> maps:get((I_3 + Ki), Image, nil); _ -> case (I_3 + Ki) < 0 of true -> lists:nth(erlang:length(Image) + (I_3 + Ki) + 1, Image); _ -> lists:nth((I_3 + Ki) + 1, Image) end end)) + (J_3 + Kj) + 1, (case erlang:is_map(Image) of true -> maps:get((I_3 + Ki), Image, nil); _ -> case (I_3 + Ki) < 0 of true -> lists:nth(erlang:length(Image) + (I_3 + Ki) + 1, Image); _ -> lists:nth((I_3 + Ki) + 1, Image) end end)); _ -> lists:nth((J_3 + Kj) + 1, (case erlang:is_map(Image) of true -> maps:get((I_3 + Ki), Image, nil); _ -> case (I_3 + Ki) < 0 of true -> lists:nth(erlang:length(Image) + (I_3 + Ki) + 1, Image); _ -> lists:nth((I_3 + Ki) + 1, Image) end end)) end end)), (case erlang:is_map((case erlang:is_map(Kernel_3) of true -> maps:get(Ki, Kernel_3, nil); _ -> case Ki < 0 of true -> lists:nth(erlang:length(Kernel_3) + Ki + 1, Kernel_3); _ -> lists:nth(Ki + 1, Kernel_3) end end)) of true -> maps:get(Kj, (case erlang:is_map(Kernel_3) of true -> maps:get(Ki, Kernel_3, nil); _ -> case Ki < 0 of true -> lists:nth(erlang:length(Kernel_3) + Ki + 1, Kernel_3); _ -> lists:nth(Ki + 1, Kernel_3) end end), nil); _ -> case Kj < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Kernel_3) of true -> maps:get(Ki, Kernel_3, nil); _ -> case Ki < 0 of true -> lists:nth(erlang:length(Kernel_3) + Ki + 1, Kernel_3); _ -> lists:nth(Ki + 1, Kernel_3) end end)) + Kj + 1, (case erlang:is_map(Kernel_3) of true -> maps:get(Ki, Kernel_3, nil); _ -> case Ki < 0 of true -> lists:nth(erlang:length(Kernel_3) + Ki + 1, Kernel_3); _ -> lists:nth(Ki + 1, Kernel_3) end end)); _ -> lists:nth(Kj + 1, (case erlang:is_map(Kernel_3) of true -> maps:get(Ki, Kernel_3, nil); _ -> case Ki < 0 of true -> lists:nth(erlang:length(Kernel_3) + Ki + 1, Kernel_3); _ -> lists:nth(Ki + 1, Kernel_3) end end)) end end))),
            Kj_2 = (Kj + 1),
            Fun_4_loop(Dst, Dst_height, Dst_width, Height, I_3, Image, J_3, K_size_2, Kernel_3, Ki, Kj_2, Row_3, Sigma_2, Sum_4, Width);
        _ -> {Dst, Dst_height, Dst_width, Height, I_3, Image, J_3, K_size_2, Kernel_3, Ki, Kj, Row_3, Sigma_2, Sum_3, Width}
    end
end,
{Dst, Dst_height, Dst_width, Height, I_3, Image, J_3, K_size_2, Kernel_3, Ki, Kj_2, Row_3, Sigma_2, Sum_4, Width} = Fun_4(Dst, Dst_height, Dst_width, Height, I_3, Image, J_3, K_size_2, Kernel_3, Ki, Kj, Row_3, Sigma_2, Sum_3, Width),
            Ki_2 = (Ki + 1),
            Fun_5_loop(Dst, Dst_height, Dst_width, Height, I_3, Image, J_3, K_size_2, Kernel_3, Ki_2, Row_3, Sigma_2, Sum_4, Width);
        _ -> {Dst, Dst_height, Dst_width, Height, I_3, Image, J_3, K_size_2, Kernel_3, Ki, Row_3, Sigma_2, Sum_3, Width}
    end
end,
{Dst, Dst_height, Dst_width, Height, I_3, Image, J_3, K_size_2, Kernel_3, Ki_2, Row_3, Sigma_2, Sum_4, Width} = Fun_5(Dst, Dst_height, Dst_width, Height, I_3, Image, J_3, K_size_2, Kernel_3, Ki, Row_3, Sigma_2, Sum_3, Width),
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [mochi_to_int(Sum_4)]),
            J_4 = (J_3 + 1),
            Fun_6_loop(Dst, Dst_height, Dst_width, Height, I_3, Image, J_4, K_size_2, Kernel_3, Row_4, Sigma_2, Width);
        _ -> {Dst, Dst_height, Dst_width, Height, I_3, Image, J_3, K_size_2, Kernel_3, Row_3, Sigma_2, Width}
    end
end,
{Dst, Dst_height, Dst_width, Height, I_3, Image, J_4, K_size_2, Kernel_3, Row_4, Sigma_2, Width} = Fun_6(Dst, Dst_height, Dst_width, Height, I_3, Image, J_3, K_size_2, Kernel_3, Row_3, Sigma_2, Width),
            Dst_2 = lists:append((case Dst of nil -> []; _ -> Dst end), [Row_4]),
            I_4 = (I_3 + 1),
            Fun_7_loop(Dst_2, Dst_height, Dst_width, Height, I_4, Image, K_size_2, Kernel_3, Sigma_2, Width);
        _ -> {Dst, Dst_height, Dst_width, Height, I_3, Image, K_size_2, Kernel_3, Sigma_2, Width}
    end
end,
{Dst_2, Dst_height, Dst_width, Height, I_4, Image, K_size_2, Kernel_3, Sigma_2, Width} = Fun_7(Dst, Dst_height, Dst_width, Height, I_3, Image, K_size_2, Kernel_3, Sigma_2, Width),
        Dst_2
    catch {return, Ret} -> Ret end.

print_image(Image_2) ->
    try
        I_5 = 0,
        Fun_8 = fun Fun_8_loop(I_5, Image_2) ->
    case (I_5 < erlang:length(Image_2)) of
        true ->
            io:format("~ts~n", [mochi_repr((case erlang:is_map(Image_2) of true -> maps:get(I_5, Image_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Image_2) + I_5 + 1, Image_2); _ -> lists:nth(I_5 + 1, Image_2) end end))]),
            I_6 = (I_5 + 1),
            Fun_8_loop(I_6, Image_2);
        _ -> {I_5, Image_2}
    end
end,
{I_6, Image_2} = Fun_8(I_5, Image_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('img', [[52, 55, 61, 59, 79], [62, 59, 55, 104, 94], [63, 65, 66, 113, 144], [68, 70, 70, 126, 154], [70, 72, 69, 128, 155]]),
    erlang:put('gaussian3', gaussian_filter(erlang:get('img'), 3, 1)),
    erlang:put('gaussian5', gaussian_filter(erlang:get('img'), 5, 0.8)),
    print_image(erlang:get('gaussian3')),
    print_image(erlang:get('gaussian5')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
