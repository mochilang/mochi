#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, zeros3d/3, resize_nn/3, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

zeros3d(H, W, C) ->
    try
        Arr = [],
        Y = 0,
        Fun_3 = fun Fun_3_loop(Arr, C, H, W, Y) ->
    case (Y < H) of
        true ->
            Row = [],
            X = 0,
            Fun_2 = fun Fun_2_loop(Arr, C, H, Row, W, X, Y) ->
    case (X < W) of
        true ->
            Pixel = [],
            K = 0,
            Fun = fun Fun_loop(Arr, C, H, K, Pixel, Row, W, X, Y) ->
    case (K < C) of
        true ->
            Pixel_2 = lists:append((case Pixel of nil -> []; _ -> Pixel end), [0]),
            K_2 = (K + 1),
            Fun_loop(Arr, C, H, K_2, Pixel_2, Row, W, X, Y);
        _ -> {Arr, C, H, K, Pixel, Row, W, X, Y}
    end
end,
{Arr, C, H, K_2, Pixel_2, Row, W, X, Y} = Fun(Arr, C, H, K, Pixel, Row, W, X, Y),
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Pixel_2]),
            X_2 = (X + 1),
            Fun_2_loop(Arr, C, H, Row_2, W, X_2, Y);
        _ -> {Arr, C, H, Row, W, X, Y}
    end
end,
{Arr, C, H, Row_2, W, X_2, Y} = Fun_2(Arr, C, H, Row, W, X, Y),
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [Row_2]),
            Y_2 = (Y + 1),
            Fun_3_loop(Arr_2, C, H, W, Y_2);
        _ -> {Arr, C, H, W, Y}
    end
end,
{Arr_2, C, H, W, Y_2} = Fun_3(Arr, C, H, W, Y),
        Arr_2
    catch {return, Ret} -> Ret end.

resize_nn(Img, Dst_w, Dst_h) ->
    try
        Src_h = erlang:length(Img),
        Src_w = erlang:length((case erlang:is_map(Img) of true -> maps:get(0, Img, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img) + 0 + 1, Img); _ -> lists:nth(0 + 1, Img) end end)),
        Channels = erlang:length((case erlang:is_map((case erlang:is_map(Img) of true -> maps:get(0, Img, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img) + 0 + 1, Img); _ -> lists:nth(0 + 1, Img) end end)) of true -> maps:get(0, (case erlang:is_map(Img) of true -> maps:get(0, Img, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img) + 0 + 1, Img); _ -> lists:nth(0 + 1, Img) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Img) of true -> maps:get(0, Img, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img) + 0 + 1, Img); _ -> lists:nth(0 + 1, Img) end end)) + 0 + 1, (case erlang:is_map(Img) of true -> maps:get(0, Img, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img) + 0 + 1, Img); _ -> lists:nth(0 + 1, Img) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(Img) of true -> maps:get(0, Img, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Img) + 0 + 1, Img); _ -> lists:nth(0 + 1, Img) end end)) end end)),
        Ratio_x = mochi_safe_div(float(Src_w), float(Dst_w)),
        Ratio_y = mochi_safe_div(float(Src_h), float(Dst_h)),
        Out = zeros3d(Dst_h, Dst_w, Channels),
        I = 0,
        Fun_5 = fun Fun_5_loop(Channels, Dst_h, Dst_w, I, Img, Out, Ratio_x, Ratio_y, Src_h, Src_w) ->
    case (I < Dst_h) of
        true ->
            J = 0,
            Fun_4 = fun Fun_4_loop(Channels, Dst_h, Dst_w, I, Img, J, Out, Ratio_x, Ratio_y, Src_h, Src_w) ->
    case (J < Dst_w) of
        true ->
            Src_x = mochi_to_int(mochi_safe_mul(Ratio_x, float(J))),
            Src_y = mochi_to_int(mochi_safe_mul(Ratio_y, float(I))),
            Out_2 = lists:sublist(Out, I) ++ [lists:sublist(lists:nth(I + 1, Out), J) ++ [(case erlang:is_map((case erlang:is_map(Img) of true -> maps:get(Src_y, Img, nil); _ -> case Src_y < 0 of true -> lists:nth(erlang:length(Img) + Src_y + 1, Img); _ -> lists:nth(Src_y + 1, Img) end end)) of true -> maps:get(Src_x, (case erlang:is_map(Img) of true -> maps:get(Src_y, Img, nil); _ -> case Src_y < 0 of true -> lists:nth(erlang:length(Img) + Src_y + 1, Img); _ -> lists:nth(Src_y + 1, Img) end end), nil); _ -> case Src_x < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Img) of true -> maps:get(Src_y, Img, nil); _ -> case Src_y < 0 of true -> lists:nth(erlang:length(Img) + Src_y + 1, Img); _ -> lists:nth(Src_y + 1, Img) end end)) + Src_x + 1, (case erlang:is_map(Img) of true -> maps:get(Src_y, Img, nil); _ -> case Src_y < 0 of true -> lists:nth(erlang:length(Img) + Src_y + 1, Img); _ -> lists:nth(Src_y + 1, Img) end end)); _ -> lists:nth(Src_x + 1, (case erlang:is_map(Img) of true -> maps:get(Src_y, Img, nil); _ -> case Src_y < 0 of true -> lists:nth(erlang:length(Img) + Src_y + 1, Img); _ -> lists:nth(Src_y + 1, Img) end end)) end end)] ++ lists:nthtail(J + 1, lists:nth(I + 1, Out))] ++ lists:nthtail(I + 1, Out),
            J_2 = (J + 1),
            Fun_4_loop(Channels, Dst_h, Dst_w, I, Img, J_2, Out_2, Ratio_x, Ratio_y, Src_h, Src_w);
        _ -> {Channels, Dst_h, Dst_w, I, Img, J, Out, Ratio_x, Ratio_y, Src_h, Src_w}
    end
end,
{Channels, Dst_h, Dst_w, I, Img, J_2, Out_2, Ratio_x, Ratio_y, Src_h, Src_w} = Fun_4(Channels, Dst_h, Dst_w, I, Img, J, Out, Ratio_x, Ratio_y, Src_h, Src_w),
            I_2 = (I + 1),
            Fun_5_loop(Channels, Dst_h, Dst_w, I_2, Img, Out_2, Ratio_x, Ratio_y, Src_h, Src_w);
        _ -> {Channels, Dst_h, Dst_w, I, Img, Out, Ratio_x, Ratio_y, Src_h, Src_w}
    end
end,
{Channels, Dst_h, Dst_w, I_2, Img, Out_2, Ratio_x, Ratio_y, Src_h, Src_w} = Fun_5(Channels, Dst_h, Dst_w, I, Img, Out, Ratio_x, Ratio_y, Src_h, Src_w),
        Out_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Img_2 = [[[0, 0, 0], [255, 255, 255]], [[255, 0, 0], [0, 255, 0]]],
        Resized = resize_nn(Img_2, 4, 4),
        io:format("~ts~n", [mochi_repr(Resized)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
