#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/1, generate_key/2, cipher_text/2, original_text/2]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

index_of(Ch) ->
    try
        Fun = fun Fun_loop(List, Ch) ->
    case List of
        [] -> {Ch};
        [I|I_rest] ->
            case (string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", I + 1, 1) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            Fun_loop(I_rest, Ch);
        _ -> {Ch}
    end
end,
{Ch} = Fun(lists:seq(0, (erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ")) - 1), Ch),
        -1
    catch {return, RetCatch} -> RetCatch end.

generate_key(Message, Key) ->
    try
        Key_new = Key,
        I_2 = 0,
        Fun_2 = fun Fun_2_loop(I_2, Key, Key_new, Message) ->
    case (erlang:length(Key_new) < erlang:length(Message)) of
        true ->
            Key_new_2 = (Key_new ++ string:substr(Key, I_2 + 1, 1)),
            I_3 = (I_2 + 1),
            case (I_3 == erlang:length(Key)) of
        true -> I_4 = 0,
            I_5 = I_4;
        _ -> I_5 = I_3
    end,
            Fun_2_loop(I_5, Key, Key_new_2, Message);
        _ -> {I_2, Key, Key_new, Message}
    end
end,
{I_5, Key, Key_new_2, Message} = Fun_2(I_2, Key, Key_new, Message),
        Key_new_2
    catch {return, RetCatch} -> RetCatch end.

cipher_text(Message_2, Key_new_3) ->
    try
        Res = "",
        I_6 = 0,
        Fun_3 = fun Fun_3_loop(List, I_6, Key_new_3, Message_2, Res) ->
    case List of
        [] -> {I_6, Key_new_3, Message_2, Res};
        [Idx|Idx_rest] ->
            Ch_2 = string:substr(Message_2, Idx + 1, 1),
            case (Ch_2 == " ") of
        true -> Res_2 = (Res ++ " "),
            I_8 = I_6,
            Res_4 = Res_2,
            X_2 = nil;
        _ -> X = mochi_mod(((index_of(Ch_2) - index_of(string:substr(Key_new_3, I_6 + 1, 1))) + 26), 26),
            I_7 = (I_6 + 1),
            Res_3 = (Res ++ string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", X + 1, 1)),
            I_8 = I_7,
            Res_4 = Res_3,
            X_2 = X
    end,
            Fun_3_loop(Idx_rest, I_8, Key_new_3, Message_2, Res_4);
        _ -> {I_6, Key_new_3, Message_2, Res}
    end
end,
{I_8, Key_new_3, Message_2, Res_4} = Fun_3(lists:seq(0, (erlang:length(Message_2)) - 1), I_6, Key_new_3, Message_2, Res),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

original_text(Cipher, Key_new_4) ->
    try
        Res_5 = "",
        I_9 = 0,
        Fun_4 = fun Fun_4_loop(List, Cipher, I_9, Key_new_4, Res_5) ->
    case List of
        [] -> {Cipher, I_9, Key_new_4, Res_5};
        [Idx_2|Idx_2_rest] ->
            Ch_3 = string:substr(Cipher, Idx_2 + 1, 1),
            case (Ch_3 == " ") of
        true -> Res_6 = (Res_5 ++ " "),
            I_11 = I_9,
            Res_8 = Res_6,
            X_4 = nil;
        _ -> X_3 = mochi_mod(((index_of(Ch_3) + index_of(string:substr(Key_new_4, I_9 + 1, 1))) + 26), 26),
            I_10 = (I_9 + 1),
            Res_7 = (Res_5 ++ string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", X_3 + 1, 1)),
            I_11 = I_10,
            Res_8 = Res_7,
            X_4 = X_3
    end,
            Fun_4_loop(Idx_2_rest, Cipher, I_11, Key_new_4, Res_8);
        _ -> {Cipher, I_9, Key_new_4, Res_5}
    end
end,
{Cipher, I_11, Key_new_4, Res_8} = Fun_4(lists:seq(0, (erlang:length(Cipher)) - 1), Cipher, I_9, Key_new_4, Res_5),
        Res_8
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ALPHABET', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    erlang:put('message', "THE GERMAN ATTACK"),
    erlang:put('key', "SECRET"),
    erlang:put('key_new', generate_key("THE GERMAN ATTACK", "SECRET")),
    erlang:put('encrypted', cipher_text("THE GERMAN ATTACK", erlang:get('key_new'))),
    io:format("~ts~n", [mochi_repr(("Encrypted Text = " ++ erlang:get('encrypted')))]),
    io:format("~ts~n", [mochi_repr(("Original Text = " ++ original_text(erlang:get('encrypted'), erlang:get('key_new'))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
