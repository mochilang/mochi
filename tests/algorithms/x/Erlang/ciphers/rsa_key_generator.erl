#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow2/1, next_seed/1, rand_range/2, gcd/2, mod_inverse/2, is_prime/1, generate_prime/1, generate_key/1]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

pow2(Exp) ->
    try
        Res = 1,
        I = 0,
        Fun = fun Fun_loop(Exp, I, Res) ->
    case (I < Exp) of
        true ->
            Res_2 = (Res * 2),
            I_2 = (I + 1),
            Fun_loop(Exp, I_2, Res_2);
        _ -> {Exp, I, Res}
    end
end,
{Exp, I_2, Res_2} = Fun(Exp, I, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

next_seed(X) ->
    try
        mochi_mod(((X * 1103515245) + 12345), 2147483648)
    catch {return, RetCatch} -> RetCatch end.

rand_range(Min, Max) ->
    try
        erlang:put('seed', next_seed(erlang:get('seed'))),
        (Min + mochi_mod(erlang:get('seed'), (Max - Min)))
    catch {return, RetCatch} -> RetCatch end.

gcd(A, B) ->
    try
        X_2 = A,
        Y = B,
        Fun_2 = fun Fun_2_loop(A, B, X_2, Y) ->
    case (Y /= 0) of
        true ->
            Temp = mochi_mod(X_2, Y),
            X_3 = Y,
            Y_2 = Temp,
            Fun_2_loop(A, B, X_3, Y_2);
        _ -> {A, B, X_2, Y}
    end
end,
{A, B, X_3, Y_2} = Fun_2(A, B, X_2, Y),
        X_3
    catch {return, RetCatch} -> RetCatch end.

mod_inverse(E, Phi) ->
    try
        T = 0,
        Newt = 1,
        R = Phi,
        Newr = E,
        Fun_3 = fun Fun_3_loop(E, Newr, Newt, Phi, R, T) ->
    case (Newr /= 0) of
        true ->
            Quotient = (R div Newr),
            Tmp = Newt,
            Newt_2 = (T - (Quotient * Newt)),
            T_2 = Tmp,
            Tmp_r = Newr,
            Newr_2 = (R - (Quotient * Newr)),
            R_2 = Tmp_r,
            Fun_3_loop(E, Newr_2, Newt_2, Phi, R_2, T_2);
        _ -> {E, Newr, Newt, Phi, R, T}
    end
end,
{E, Newr_2, Newt_2, Phi, R_2, T_2} = Fun_3(E, Newr, Newt, Phi, R, T),
        case (R_2 > 1) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case (T_2 < 0) of
        true -> T_3 = (T_2 + Phi),
            T_4 = T_3;
        _ -> T_4 = T_2
    end,
        T_4
    catch {return, RetCatch} -> RetCatch end.

is_prime(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_3 = 2,
        Fun_4 = fun Fun_4_loop(I_3, N) ->
    case ((I_3 * I_3) =< N) of
        true ->
            case (mochi_mod(N, I_3) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, N);
        _ -> {I_3, N}
    end
end,
{I_4, N} = Fun_4(I_3, N),
        true
    catch {return, RetCatch} -> RetCatch end.

generate_prime(Bits) ->
    try
        Min_2 = pow2((Bits - 1)),
        Max_2 = pow2(Bits),
        P = rand_range(Min_2, Max_2),
        case (mochi_mod(P, 2) == 0) of
        true -> P_2 = (P + 1),
            P_3 = P_2;
        _ -> P_3 = P
    end,
        Fun_5 = fun Fun_5_loop(Bits, Max_2, Min_2, P_3) ->
    case mochi_not(is_prime(P_3)) of
        true ->
            P_4 = (P_3 + 2),
            case (P_4 >= Max_2) of
        true -> P_5 = (Min_2 + 1),
            P_6 = P_5;
        _ -> P_6 = P_4
    end,
            Fun_5_loop(Bits, Max_2, Min_2, P_6);
        _ -> {Bits, Max_2, Min_2, P_3}
    end
end,
{Bits, Max_2, Min_2, P_6} = Fun_5(Bits, Max_2, Min_2, P_3),
        P_6
    catch {return, RetCatch} -> RetCatch end.

generate_key(Bits_2) ->
    try
        P_7 = generate_prime(Bits_2),
        Q = generate_prime(Bits_2),
        N_2 = (P_7 * Q),
        Phi_2 = ((P_7 - 1) * (Q - 1)),
        E_2 = rand_range(2, Phi_2),
        Fun_6 = fun Fun_6_loop(Bits_2, E_2, N_2, P_7, Phi_2, Q) ->
    case (gcd(E_2, Phi_2) /= 1) of
        true ->
            E_3 = (E_2 + 1),
            case (E_3 >= Phi_2) of
        true -> E_4 = 2,
            E_5 = E_4;
        _ -> E_5 = E_3
    end,
            Fun_6_loop(Bits_2, E_5, N_2, P_7, Phi_2, Q);
        _ -> {Bits_2, E_2, N_2, P_7, Phi_2, Q}
    end
end,
{Bits_2, E_5, N_2, P_7, Phi_2, Q} = Fun_6(Bits_2, E_2, N_2, P_7, Phi_2, Q),
        D = mod_inverse(E_5, Phi_2),
        #{"public_key" => [N_2, E_5], "private_key" => [N_2, D]}
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    erlang:put('keys', generate_key(8)),
    erlang:put('pub', maps:get("public_key", erlang:get('keys'), nil)),
    erlang:put('priv', maps:get("private_key", erlang:get('keys'), nil)),
    io:format("~ts~n", [mochi_repr((((("Public key: (" ++ mochi_str((case erlang:is_map(erlang:get('pub')) of true -> maps:get(0, erlang:get('pub'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('pub')) + 0 + 1, erlang:get('pub')); _ -> mochi_nth(0 + 1, erlang:get('pub')) end end))) ++ ", ") ++ mochi_str((case erlang:is_map(erlang:get('pub')) of true -> maps:get(1, erlang:get('pub'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('pub')) + 1 + 1, erlang:get('pub')); _ -> mochi_nth(1 + 1, erlang:get('pub')) end end))) ++ ")"))]),
    io:format("~ts~n", [mochi_repr((((("Private key: (" ++ mochi_str((case erlang:is_map(erlang:get('priv')) of true -> maps:get(0, erlang:get('priv'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('priv')) + 0 + 1, erlang:get('priv')); _ -> mochi_nth(0 + 1, erlang:get('priv')) end end))) ++ ", ") ++ mochi_str((case erlang:is_map(erlang:get('priv')) of true -> maps:get(1, erlang:get('priv'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('priv')) + 1 + 1, erlang:get('priv')); _ -> mochi_nth(1 + 1, erlang:get('priv')) end end))) ++ ")"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
