#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/2, atbash/1]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

index_of(S, C) ->
    try
        I = 0,
        Fun = fun Fun_loop(C, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, 1) == C) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(C, I_2, S);
        _ -> {C, I, S}
    end
end,
{C, I_2, S} = Fun(C, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

atbash(Sequence) ->
    try
        Lower = "abcdefghijklmnopqrstuvwxyz",
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower_rev = "zyxwvutsrqponmlkjihgfedcba",
        Upper_rev = "ZYXWVUTSRQPONMLKJIHGFEDCBA",
        Result = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Lower, Lower_rev, Result, Sequence, Upper, Upper_rev) ->
    case (I_3 < erlang:length(Sequence)) of
        true ->
            Ch = string:substr(Sequence, I_3 + 1, 1),
            Idx = index_of(Lower, Ch),
            case (Idx /= -1) of
        true -> Result_2 = (Result ++ string:substr(Lower_rev, Idx + 1, 1)),
            Idx2_2 = nil,
            Result_6 = Result_2;
        _ -> Idx2 = index_of(Upper, Ch),
            case (Idx2 /= -1) of
        true -> Result_3 = (Result ++ string:substr(Upper_rev, Idx2 + 1, 1)),
            Result_5 = Result_3;
        _ -> Result_4 = (Result ++ Ch),
            Result_5 = Result_4
    end,
            Idx2_2 = Idx2,
            Result_6 = Result_5
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Lower, Lower_rev, Result_6, Sequence, Upper, Upper_rev);
        _ -> {I_3, Lower, Lower_rev, Result, Sequence, Upper, Upper_rev}
    end
end,
{I_4, Lower, Lower_rev, Result_6, Sequence, Upper, Upper_rev} = Fun_2(I_3, Lower, Lower_rev, Result, Sequence, Upper, Upper_rev),
        Result_6
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(atbash("ABCDEFGH"))]),
    io:format("~ts~n", [mochi_repr(atbash("123GGjj"))]),
    io:format("~ts~n", [mochi_repr(atbash("testStringtest"))]),
    io:format("~ts~n", [mochi_repr(atbash("with space"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
