#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexof/2, ord/1, chr/1, vernam_encrypt/2, vernam_decrypt/2]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] when is_list(C) -> hd(C);
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

indexof(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

ord(Ch_2) ->
    try
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Idx = mochi_index_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch_2),
        case (Idx >= 0) of
        true -> throw({return, (65 + Idx)});
        _ -> ok
    end,
        0
    catch {return, RetCatch} -> RetCatch end.

chr(N) ->
    try
        Upper_2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        case ((N >= 65) andalso (N < 91)) of
        true -> throw({return, string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", (N - 65) + 1, ((N - 64) - (N - 65)))});
        _ -> ok
    end,
        "?"
    catch {return, RetCatch} -> RetCatch end.

vernam_encrypt(Plaintext, Key) ->
    try
        Ciphertext = "",
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Ciphertext, I_3, Key, Plaintext) ->
    case (I_3 < erlang:length(Plaintext)) of
        true ->
            P = (ord(string:substr(Plaintext, I_3 + 1, ((I_3 + 1) - I_3))) - 65),
            K = (ord(string:substr(Key, mochi_mod(I_3, erlang:length(Key)) + 1, ((mochi_mod(I_3, erlang:length(Key)) + 1) - mochi_mod(I_3, erlang:length(Key))))) - 65),
            Ct = (P + K),
            Fun_2 = fun Fun_2_loop(Ciphertext, Ct, I_3, K, Key, P, Plaintext) ->
    case (Ct > 25) of
        true ->
            Ct_2 = (Ct - 26),
            Fun_2_loop(Ciphertext, Ct_2, I_3, K, Key, P, Plaintext);
        _ -> {Ciphertext, Ct, I_3, K, Key, P, Plaintext}
    end
end,
{Ciphertext, Ct_2, I_3, K, Key, P, Plaintext} = Fun_2(Ciphertext, Ct, I_3, K, Key, P, Plaintext),
            Ciphertext_2 = (Ciphertext ++ chr((Ct_2 + 65))),
            I_4 = (I_3 + 1),
            Fun_3_loop(Ciphertext_2, I_4, Key, Plaintext);
        _ -> {Ciphertext, I_3, Key, Plaintext}
    end
end,
{Ciphertext_2, I_4, Key, Plaintext} = Fun_3(Ciphertext, I_3, Key, Plaintext),
        Ciphertext_2
    catch {return, RetCatch} -> RetCatch end.

vernam_decrypt(Ciphertext_3, Key_2) ->
    try
        Decrypted = "",
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Ciphertext_3, Decrypted, I_5, Key_2) ->
    case (I_5 < erlang:length(Ciphertext_3)) of
        true ->
            C = ord(string:substr(Ciphertext_3, I_5 + 1, ((I_5 + 1) - I_5))),
            K_2 = ord(string:substr(Key_2, mochi_mod(I_5, erlang:length(Key_2)) + 1, ((mochi_mod(I_5, erlang:length(Key_2)) + 1) - mochi_mod(I_5, erlang:length(Key_2))))),
            Val = (C - K_2),
            Fun_4 = fun Fun_4_loop(C, Ciphertext_3, Decrypted, I_5, K_2, Key_2, Val) ->
    case (Val < 0) of
        true ->
            Val_2 = (Val + 26),
            Fun_4_loop(C, Ciphertext_3, Decrypted, I_5, K_2, Key_2, Val_2);
        _ -> {C, Ciphertext_3, Decrypted, I_5, K_2, Key_2, Val}
    end
end,
{C, Ciphertext_3, Decrypted, I_5, K_2, Key_2, Val_2} = Fun_4(C, Ciphertext_3, Decrypted, I_5, K_2, Key_2, Val),
            Decrypted_2 = (Decrypted ++ chr((Val_2 + 65))),
            I_6 = (I_5 + 1),
            Fun_5_loop(Ciphertext_3, Decrypted_2, I_6, Key_2);
        _ -> {Ciphertext_3, Decrypted, I_5, Key_2}
    end
end,
{Ciphertext_3, Decrypted_2, I_6, Key_2} = Fun_5(Ciphertext_3, Decrypted, I_5, Key_2),
        Decrypted_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('plaintext', "HELLO"),
    erlang:put('key', "KEY"),
    erlang:put('encrypted', vernam_encrypt("HELLO", "KEY")),
    erlang:put('decrypted', vernam_decrypt(erlang:get('encrypted'), "KEY")),
    io:format("~ts~n", [mochi_repr(("Plaintext: " ++ "HELLO"))]),
    io:format("~ts~n", [mochi_repr(("Encrypted: " ++ erlang:get('encrypted')))]),
    io:format("~ts~n", [mochi_repr(("Decrypted: " ++ erlang:get('decrypted')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
