#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, int_to_hex/1, rand_int/0, mod_pow/2, is_valid_public_key/1, generate_private_key/0]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

int_to_hex(N) ->
    try
        case (N == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Digits = "0123456789abcdef",
        Num = N,
        Res = "",
        Fun = fun Fun_loop(Digits, N, Num, Res) ->
    case (Num > 0) of
        true ->
            D = mochi_mod(Num, 16),
            Res_2 = (string:substr(Digits, D + 1, 1) ++ Res),
            Num_2 = (Num div 16),
            Fun_loop(Digits, N, Num_2, Res_2);
        _ -> {Digits, N, Num, Res}
    end
end,
{Digits, N, Num_2, Res_2} = Fun(Digits, N, Num, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

rand_int() ->
    try
        erlang:put('seed', mochi_mod(((1103515245 * erlang:get('seed')) + 12345), 2147483648)),
        erlang:get('seed')
    catch {return, RetCatch} -> RetCatch end.

mod_pow(Base, Exp) ->
    try
        Result = 1,
        B = mochi_mod(Base, 23),
        E = Exp,
        Fun_2 = fun Fun_2_loop(B, Base, E, Exp, Result) ->
    case (E > 0) of
        true ->
            case (mochi_mod(E, 2) == 1) of
        true -> Result_2 = mochi_mod((Result * B), 23),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            B_2 = mochi_mod((B * B), 23),
            E_2 = (E div 2),
            Fun_2_loop(B_2, Base, E_2, Exp, Result_3);
        _ -> {B, Base, E, Exp, Result}
    end
end,
{B_2, Base, E_2, Exp, Result_3} = Fun_2(B, Base, E, Exp, Result),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

is_valid_public_key(Key) ->
    try
        (case ((Key < 2) orelse (Key > (23 - 2))) of
    true -> false;
    _ -> (mod_pow(Key, ((23 - 1) div 2)) == 1)
end)
    catch {return, RetCatch} -> RetCatch end.

generate_private_key() ->
    try
        (mochi_mod(rand_int(), (23 - 2)) + 2)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 123456789),
    erlang:put('PRIME', 23),
    erlang:put('generator', 5),
    erlang:put('alice_private', generate_private_key()),
    erlang:put('alice_public', mod_pow(5, erlang:get('alice_private'))),
    erlang:put('bob_private', generate_private_key()),
    erlang:put('bob_public', mod_pow(5, erlang:get('bob_private'))),
    case mochi_not(is_valid_public_key(erlang:get('alice_public'))) of
        true -> erlang:error({panic, "Invalid public key"});
        _ -> ok
    end,
    case mochi_not(is_valid_public_key(erlang:get('bob_public'))) of
        true -> erlang:error({panic, "Invalid public key"});
        _ -> ok
    end,
    erlang:put('alice_shared', mod_pow(erlang:get('bob_public'), erlang:get('alice_private'))),
    erlang:put('bob_shared', mod_pow(erlang:get('alice_public'), erlang:get('bob_private'))),
    io:format("~ts~n", [mochi_repr(int_to_hex(erlang:get('alice_shared')))]),
    io:format("~ts~n", [mochi_repr(int_to_hex(erlang:get('bob_shared')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
