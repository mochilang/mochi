#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, to_binary/1, zfill/2, from_binary/1, repeat/2, char_index/2, base64_encode/1, base64_decode/1, main/0]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_repeat(S, N) when is_binary(S) ->
    binary:copy(S, mochi_to_int(N));
mochi_repeat(S, N) when is_list(S) ->
    string:copies(S, mochi_to_int(N));
mochi_repeat(_, _) -> [].


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

to_binary(N) ->
    try
        case (N == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Num = N,
        Res = "",
        Fun = fun Fun_loop(N, Num, Res) ->
    case (Num > 0) of
        true ->
            Bit = mochi_mod(Num, 2),
            Res_2 = (mochi_str(Bit) ++ Res),
            Num_2 = (Num div 2),
            Fun_loop(N, Num_2, Res_2);
        _ -> {N, Num, Res}
    end
end,
{N, Num_2, Res_2} = Fun(N, Num, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

zfill(S, Width) ->
    try
        Res_3 = S,
        Pad = (Width - erlang:length(S)),
        Fun_2 = fun Fun_2_loop(Pad, Res_3, S, Width) ->
    case (Pad > 0) of
        true ->
            Res_4 = ("0" ++ Res_3),
            Pad_2 = (Pad - 1),
            Fun_2_loop(Pad_2, Res_4, S, Width);
        _ -> {Pad, Res_3, S, Width}
    end
end,
{Pad_2, Res_4, S, Width} = Fun_2(Pad, Res_3, S, Width),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

from_binary(S_2) ->
    try
        I = 0,
        Result = 0,
        Fun_3 = fun Fun_3_loop(I, Result, S_2) ->
    case (I < erlang:length(S_2)) of
        true ->
            Result_2 = (Result * 2),
            case (string:substr(S_2, I + 1, ((I + 1) - I)) == "1") of
        true -> Result_3 = (Result_2 + 1),
            Result_4 = Result_3;
        _ -> Result_4 = Result_2
    end,
            I_2 = (I + 1),
            Fun_3_loop(I_2, Result_4, S_2);
        _ -> {I, Result, S_2}
    end
end,
{I_2, Result_4, S_2} = Fun_3(I, Result, S_2),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

repeat(Ch, Times) ->
    try
        Res_5 = "",
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Ch, I_3, Res_5, Times) ->
    case (I_3 < Times) of
        true ->
            Res_6 = (Res_5 ++ Ch),
            I_4 = (I_3 + 1),
            Fun_4_loop(Ch, I_4, Res_6, Times);
        _ -> {Ch, I_3, Res_5, Times}
    end
end,
{Ch, I_4, Res_6, Times} = Fun_4(Ch, I_3, Res_5, Times),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

char_index(S_3, C) ->
    try
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(C, I_5, S_3) ->
    case (I_5 < erlang:length(S_3)) of
        true ->
            case (string:substr(S_3, I_5 + 1, ((I_5 + 1) - I_5)) == C) of
        true -> throw({return, I_5});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_5_loop(C, I_6, S_3);
        _ -> {C, I_5, S_3}
    end
end,
{C, I_6, S_3} = Fun_5(C, I_5, S_3),
        -1
    catch {return, RetCatch} -> RetCatch end.

base64_encode(Data) ->
    try
        Bits = "",
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(Bits, Data, I_7) ->
    case (I_7 < erlang:length(Data)) of
        true ->
            Bits_2 = (Bits ++ zfill(to_binary((case erlang:is_map(Data) of true -> maps:get(I_7, Data, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Data) + I_7 + 1, Data); _ -> mochi_nth(I_7 + 1, Data) end end)), 8)),
            I_8 = (I_7 + 1),
            Fun_6_loop(Bits_2, Data, I_8);
        _ -> {Bits, Data, I_7}
    end
end,
{Bits_2, Data, I_8} = Fun_6(Bits, Data, I_7),
        Pad_bits = 0,
        case (mochi_mod(erlang:length(Bits_2), 6) /= 0) of
        true -> Pad_bits_2 = (6 - mochi_mod(erlang:length(Bits_2), 6)),
            Bits_3 = (Bits_2 ++ mochi_repeat("0", Pad_bits_2)),
            Bits_4 = Bits_3,
            Pad_bits_3 = Pad_bits_2;
        _ -> Bits_4 = Bits_2,
            Pad_bits_3 = Pad_bits
    end,
        J = 0,
        Encoded = "",
        Fun_7 = fun Fun_7_loop(Bits_4, Data, Encoded, I_8, J, Pad_bits_3) ->
    case (J < erlang:length(Bits_4)) of
        true ->
            Chunk = string:substr(Bits_4, J + 1, ((J + 6) - J)),
            Idx = from_binary(Chunk),
            Encoded_2 = (Encoded ++ string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", Idx + 1, ((Idx + 1) - Idx))),
            J_2 = (J + 6),
            Fun_7_loop(Bits_4, Data, Encoded_2, I_8, J_2, Pad_bits_3);
        _ -> {Bits_4, Data, Encoded, I_8, J, Pad_bits_3}
    end
end,
{Bits_4, Data, Encoded_2, I_8, J_2, Pad_bits_3} = Fun_7(Bits_4, Data, Encoded, I_8, J, Pad_bits_3),
        Pad_3 = (Pad_bits_3 div 2),
        Fun_8 = fun Fun_8_loop(Bits_4, Data, Encoded_2, I_8, J_2, Pad_3, Pad_bits_3) ->
    case (Pad_3 > 0) of
        true ->
            Encoded_3 = (Encoded_2 ++ "="),
            Pad_4 = (Pad_3 - 1),
            Fun_8_loop(Bits_4, Data, Encoded_3, I_8, J_2, Pad_4, Pad_bits_3);
        _ -> {Bits_4, Data, Encoded_2, I_8, J_2, Pad_3, Pad_bits_3}
    end
end,
{Bits_4, Data, Encoded_3, I_8, J_2, Pad_4, Pad_bits_3} = Fun_8(Bits_4, Data, Encoded_2, I_8, J_2, Pad_3, Pad_bits_3),
        Encoded_3
    catch {return, RetCatch} -> RetCatch end.

base64_decode(S_4) ->
    try
        Padding = 0,
        End = erlang:length(S_4),
        Fun_9 = fun Fun_9_loop(End, Padding, S_4) ->
    case ((End > 0) andalso (string:substr(S_4, (End - 1) + 1, (End - (End - 1))) == "=")) of
        true ->
            Padding_2 = (Padding + 1),
            End_2 = (End - 1),
            Fun_9_loop(End_2, Padding_2, S_4);
        _ -> {End, Padding, S_4}
    end
end,
{End_2, Padding_2, S_4} = Fun_9(End, Padding, S_4),
        Bits_5 = "",
        K = 0,
        Fun_10 = fun Fun_10_loop(Bits_5, End_2, K, Padding_2, S_4) ->
    case (K < End_2) of
        true ->
            C_2 = string:substr(S_4, K + 1, ((K + 1) - K)),
            Idx_2 = char_index("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", C_2),
            Bits_6 = (Bits_5 ++ zfill(to_binary(Idx_2), 6)),
            K_2 = (K + 1),
            Fun_10_loop(Bits_6, End_2, K_2, Padding_2, S_4);
        _ -> {Bits_5, End_2, K, Padding_2, S_4}
    end
end,
{Bits_6, End_2, K_2, Padding_2, S_4} = Fun_10(Bits_5, End_2, K, Padding_2, S_4),
        case (Padding_2 > 0) of
        true -> Bits_7 = string:substr(Bits_6, 0 + 1, ((erlang:length(Bits_6) - (Padding_2 * 2)) - 0)),
            Bits_8 = Bits_7;
        _ -> Bits_8 = Bits_6
    end,
        Bytes = [],
        M = 0,
        Fun_11 = fun Fun_11_loop(Bits_8, Bytes, End_2, K_2, M, Padding_2, S_4) ->
    case (M < erlang:length(Bits_8)) of
        true ->
            Byte = from_binary(string:substr(Bits_8, M + 1, ((M + 8) - M))),
            Bytes_2 = lists:append((case Bytes of nil -> []; _ -> Bytes end), [Byte]),
            M_2 = (M + 8),
            Fun_11_loop(Bits_8, Bytes_2, End_2, K_2, M_2, Padding_2, S_4);
        _ -> {Bits_8, Bytes, End_2, K_2, M, Padding_2, S_4}
    end
end,
{Bits_8, Bytes_2, End_2, K_2, M_2, Padding_2, S_4} = Fun_11(Bits_8, Bytes, End_2, K_2, M, Padding_2, S_4),
        Bytes_2
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Data_2 = [77, 111, 99, 104, 105],
        Encoded_4 = base64_encode(Data_2),
        io:format("~ts~n", [mochi_repr(Encoded_4)]),
        io:format("~p~n", [base64_decode(Encoded_4)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('B64_CHARSET', "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
