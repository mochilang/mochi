#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexof/2, ord/1, chr/1, clean_text/1, running_key_encrypt/2, running_key_decrypt/2]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] when is_list(C) -> hd(C);
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

indexof(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < length(S)) of
        true ->
            case (string:substr(S, I + 1, 1) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, Ret} -> Ret end.

ord(Ch_2) ->
    try
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower = "abcdefghijklmnopqrstuvwxyz",
        Idx = mochi_index_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch_2),
        case (Idx >= 0) of
        true -> throw({return, (65 + Idx)});
        _ -> ok
    end,
        Idx_2 = mochi_index_of("abcdefghijklmnopqrstuvwxyz", Ch_2),
        case (Idx_2 >= 0) of
        true -> throw({return, (97 + Idx_2)});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

chr(N) ->
    try
        Upper_2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower_2 = "abcdefghijklmnopqrstuvwxyz",
        case ((N >= 65) andalso (N < 91)) of
        true -> throw({return, string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", (N - 65) + 1, ((N - 64) - (N - 65)))});
        _ -> ok
    end,
        case ((N >= 97) andalso (N < 123)) of
        true -> throw({return, string:substr("abcdefghijklmnopqrstuvwxyz", (N - 97) + 1, ((N - 96) - (N - 97)))});
        _ -> ok
    end,
        "?"
    catch {return, Ret} -> Ret end.

clean_text(S_2) ->
    try
        Out = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Out, S_2) ->
    case (I_3 < length(S_2)) of
        true ->
            Ch_3 = string:substr(S_2, I_3 + 1, 1),
            case ((Ch_3 >= "A") andalso (Ch_3 =< "Z")) of
        true -> Out_2 = (Out ++ Ch_3),
            Out_5 = Out_2;
        _ -> case ((Ch_3 >= "a") andalso (Ch_3 =< "z")) of
        true -> Out_3 = (Out ++ chr((ord(Ch_3) - 32))),
            Out_4 = Out_3;
        _ -> Out_4 = Out
    end,
            Out_5 = Out_4
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Out_5, S_2);
        _ -> {I_3, Out, S_2}
    end
end,
{I_4, Out_5, S_2} = Fun_2(I_3, Out, S_2),
        Out_5
    catch {return, Ret} -> Ret end.

running_key_encrypt(Key, Plaintext) ->
    try
        Pt = clean_text(Plaintext),
        K = clean_text(Key),
        Key_len = length(K),
        Res = "",
        Ord_a = ord("A"),
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, K, Key, Key_len, Ord_a, Plaintext, Pt, Res) ->
    case (I_5 < length(Pt)) of
        true ->
            P = (ord(string:substr(Pt, I_5 + 1, 1)) - Ord_a),
            Kv = (ord(string:substr(K, (I_5 rem Key_len) + 1, 1)) - Ord_a),
            C = ((P + Kv) rem 26),
            Res_2 = (Res ++ chr((C + Ord_a))),
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, K, Key, Key_len, Ord_a, Plaintext, Pt, Res_2);
        _ -> {I_5, K, Key, Key_len, Ord_a, Plaintext, Pt, Res}
    end
end,
{I_6, K, Key, Key_len, Ord_a, Plaintext, Pt, Res_2} = Fun_3(I_5, K, Key, Key_len, Ord_a, Plaintext, Pt, Res),
        Res_2
    catch {return, Ret} -> Ret end.

running_key_decrypt(Key_2, Ciphertext) ->
    try
        Ct = clean_text(Ciphertext),
        K_2 = clean_text(Key_2),
        Key_len_2 = length(K_2),
        Res_3 = "",
        Ord_a_2 = ord("A"),
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Ciphertext, Ct, I_7, K_2, Key_2, Key_len_2, Ord_a_2, Res_3) ->
    case (I_7 < length(Ct)) of
        true ->
            C_2 = (ord(string:substr(Ct, I_7 + 1, 1)) - Ord_a_2),
            Kv_2 = (ord(string:substr(K_2, (I_7 rem Key_len_2) + 1, 1)) - Ord_a_2),
            P_2 = (((C_2 - Kv_2) + 26) rem 26),
            Res_4 = (Res_3 ++ chr((P_2 + Ord_a_2))),
            I_8 = (I_7 + 1),
            Fun_4_loop(Ciphertext, Ct, I_8, K_2, Key_2, Key_len_2, Ord_a_2, Res_4);
        _ -> {Ciphertext, Ct, I_7, K_2, Key_2, Key_len_2, Ord_a_2, Res_3}
    end
end,
{Ciphertext, Ct, I_8, K_2, Key_2, Key_len_2, Ord_a_2, Res_4} = Fun_4(Ciphertext, Ct, I_7, K_2, Key_2, Key_len_2, Ord_a_2, Res_3),
        Res_4
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('key', "How does the duck know that? said Victor"),
    erlang:put('plaintext', "DEFEND THIS"),
    erlang:put('ciphertext', running_key_encrypt("How does the duck know that? said Victor", "DEFEND THIS")),
    io:format("~ts~n", [mochi_repr(erlang:get('ciphertext'))]),
    io:format("~ts~n", [mochi_repr(running_key_decrypt("How does the duck know that? said Victor", erlang:get('ciphertext')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
