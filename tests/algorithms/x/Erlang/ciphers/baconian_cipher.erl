#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_decode_map/0, split_spaces/1, encode/1, decode/1]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_decode_map() ->
    try
        M = #{},
        Fun = fun Fun_loop(List, M) ->
    case List of
        [] -> {M};
        [K|K_rest] ->
            M_2 = maps:put(maps:get(K, erlang:get('encode_map'), nil), K, M),
            Fun_loop(K_rest, M_2);
        _ -> {M}
    end
end,
{M_2} = Fun(maps:keys(erlang:get('encode_map')), M),
        M_2
    catch {return, RetCatch} -> RetCatch end.

split_spaces(S) ->
    try
        Parts = [],
        Current = "",
        I = 0,
        Fun_2 = fun Fun_2_loop(Current, I, Parts, S) ->
    case (I < erlang:length(S)) of
        true ->
            Ch = string:substr(S, I + 1, ((I + 1) - I)),
            case (Ch == " ") of
        true -> Parts_2 = lists:append((case Parts of nil -> []; _ -> Parts end), [Current]),
            Current_2 = "",
            Current_4 = Current_2,
            Parts_3 = Parts_2;
        _ -> Current_3 = (Current ++ Ch),
            Current_4 = Current_3,
            Parts_3 = Parts
    end,
            I_2 = (I + 1),
            Fun_2_loop(Current_4, I_2, Parts_3, S);
        _ -> {Current, I, Parts, S}
    end
end,
{Current_4, I_2, Parts_3, S} = Fun_2(Current, I, Parts, S),
        Parts_4 = lists:append((case Parts_3 of nil -> []; _ -> Parts_3 end), [Current_4]),
        Parts_4
    catch {return, RetCatch} -> RetCatch end.

encode(Word) ->
    try
        W = string:to_lower(Word),
        Encoded = "",
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Encoded, I_3, W, Word) ->
    case (I_3 < erlang:length(W)) of
        true ->
            Ch_2 = string:substr(W, I_3 + 1, ((I_3 + 1) - I_3)),
            case maps:is_key(Ch_2, erlang:get('encode_map')) of
        true -> Encoded_2 = (Encoded ++ maps:get(Ch_2, erlang:get('encode_map'), nil)),
            Encoded_3 = Encoded_2;
        _ -> erlang:error({panic, "encode() accepts only letters of the alphabet and spaces"}),
            Encoded_3 = Encoded
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(Encoded_3, I_4, W, Word);
        _ -> {Encoded, I_3, W, Word}
    end
end,
{Encoded_3, I_4, W, Word} = Fun_3(Encoded, I_3, W, Word),
        Encoded_3
    catch {return, RetCatch} -> RetCatch end.

decode(Coded) ->
    try
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Coded, I_5) ->
    case (I_5 < erlang:length(Coded)) of
        true ->
            Ch_3 = string:substr(Coded, I_5 + 1, ((I_5 + 1) - I_5)),
            case (((Ch_3 /= "A") andalso (Ch_3 /= "B")) andalso (Ch_3 /= " ")) of
        true -> erlang:error({panic, "decode() accepts only 'A', 'B' and spaces"});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_4_loop(Coded, I_6);
        _ -> {Coded, I_5}
    end
end,
{Coded, I_6} = Fun_4(Coded, I_5),
        Words = split_spaces(Coded),
        Decoded = "",
        W_2 = 0,
        Fun_6 = fun Fun_6_loop(Coded, Decoded, I_6, W_2, Words) ->
    case (W_2 < erlang:length(Words)) of
        true ->
            Word_2 = (case erlang:is_map(Words) of true -> maps:get(W_2, Words, nil); _ -> case W_2 < 0 of true -> mochi_nth(erlang:length(Words) + W_2 + 1, Words); _ -> mochi_nth(W_2 + 1, Words) end end),
            J = 0,
            Fun_5 = fun Fun_5_loop(Coded, Decoded, I_6, J, W_2, Word_2, Words) ->
    case (J < erlang:length(Word_2)) of
        true ->
            Segment = string:substr(Word_2, J + 1, ((J + 5) - J)),
            Decoded_2 = (Decoded ++ maps:get(Segment, erlang:get('decode_map'), nil)),
            J_2 = (J + 5),
            Fun_5_loop(Coded, Decoded_2, I_6, J_2, W_2, Word_2, Words);
        _ -> {Coded, Decoded, I_6, J, W_2, Word_2, Words}
    end
end,
{Coded, Decoded_2, I_6, J_2, W_2, Word_2, Words} = Fun_5(Coded, Decoded, I_6, J, W_2, Word_2, Words),
            case (W_2 < (erlang:length(Words) - 1)) of
        true -> Decoded_3 = (Decoded_2 ++ " "),
            Decoded_4 = Decoded_3;
        _ -> Decoded_4 = Decoded_2
    end,
            W_3 = (W_2 + 1),
            Fun_6_loop(Coded, Decoded_4, I_6, W_3, Words);
        _ -> {Coded, Decoded, I_6, W_2, Words}
    end
end,
{Coded, Decoded_4, I_6, W_3, Words} = Fun_6(Coded, Decoded, I_6, W_2, Words),
        Decoded_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('encode_map', #{"a" => "AAAAA", "b" => "AAAAB", "c" => "AAABA", "d" => "AAABB", "e" => "AABAA", "f" => "AABAB", "g" => "AABBA", "h" => "AABBB", "i" => "ABAAA", "j" => "BBBAA", "k" => "ABAAB", "l" => "ABABA", "m" => "ABABB", "n" => "ABBAA", "o" => "ABBAB", "p" => "ABBBA", "q" => "ABBBB", "r" => "BAAAA", "s" => "BAAAB", "t" => "BAABA", "u" => "BAABB", "v" => "BBBAB", "w" => "BABAA", "x" => "BABAB", "y" => "BABBA", "z" => "BABBB", " " => " "}),
    erlang:put('decode_map', make_decode_map()),
    io:format("~ts~n", [mochi_repr(encode("hello"))]),
    io:format("~ts~n", [mochi_repr(encode("hello world"))]),
    io:format("~ts~n", [mochi_repr(decode("AABBBAABAAABABAABABAABBAB BABAAABBABBAAAAABABAAAABB"))]),
    io:format("~ts~n", [mochi_repr(decode("AABBBAABAAABABAABABAABBAB"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
