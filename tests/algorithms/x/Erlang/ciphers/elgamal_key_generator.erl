#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rand/0, rand_range/2, mod_pow/3, extended_gcd/2, mod_inverse/2, pow2/1, is_probable_prime/2, generate_large_prime/1, primitive_root/1, generate_key/1, main/0]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

rand() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483647)),
        erlang:get('seed')
    catch {return, RetCatch} -> RetCatch end.

rand_range(Min, Max) ->
    try
        (Min + mochi_mod(rand(), ((Max - Min) + 1)))
    catch {return, RetCatch} -> RetCatch end.

mod_pow(Base, Exponent, Modulus) ->
    try
        Result = 1,
        B = mochi_mod(Base, Modulus),
        E = Exponent,
        Fun = fun Fun_loop(B, Base, E, Exponent, Modulus, Result) ->
    case (E > 0) of
        true ->
            case (mochi_mod(E, 2) == 1) of
        true -> Result_2 = mochi_mod((Result * B), Modulus),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            E_2 = (E div 2),
            B_2 = mochi_mod((B * B), Modulus),
            Fun_loop(B_2, Base, E_2, Exponent, Modulus, Result_3);
        _ -> {B, Base, E, Exponent, Modulus, Result}
    end
end,
{B_2, Base, E_2, Exponent, Modulus, Result_3} = Fun(B, Base, E, Exponent, Modulus, Result),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

extended_gcd(A, B_3) ->
    try
        case (B_3 == 0) of
        true -> throw({return, #{"g" => A, "x" => 1, "y" => 0}});
        _ -> ok
    end,
        Res = extended_gcd(B_3, mochi_mod(A, B_3)),
        #{"g" => maps:get("g", Res, nil), "x" => maps:get("y", Res, nil), "y" => (maps:get("x", Res, nil) - ((A div B_3) * maps:get("y", Res, nil)))}
    catch {return, RetCatch} -> RetCatch end.

mod_inverse(A_2, M) ->
    try
        Res_2 = extended_gcd(A_2, M),
        case (maps:get("g", Res_2, nil) /= 1) of
        true -> erlang:error({panic, "inverse does not exist"});
        _ -> ok
    end,
        R = mochi_mod(maps:get("x", Res_2, nil), M),
        case (R < 0) of
        true -> throw({return, (R + M)});
        _ -> ok
    end,
        R
    catch {return, RetCatch} -> RetCatch end.

pow2(N) ->
    try
        R_2 = 1,
        I = 0,
        Fun_2 = fun Fun_2_loop(I, N, R_2) ->
    case (I < N) of
        true ->
            R_3 = (R_2 * 2),
            I_2 = (I + 1),
            Fun_2_loop(I_2, N, R_3);
        _ -> {I, N, R_2}
    end
end,
{I_2, N, R_3} = Fun_2(I, N, R_2),
        R_3
    catch {return, RetCatch} -> RetCatch end.

is_probable_prime(N_2, K) ->
    try
        case (N_2 =< 1) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (N_2 =< 3) of
        true -> throw({return, true});
        _ -> ok
    end,
        case (mochi_mod(N_2, 2) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        R_4 = 0,
        D = (N_2 - 1),
        Fun_3 = fun Fun_3_loop(D, K, N_2, R_4) ->
    case (mochi_mod(D, 2) == 0) of
        true ->
            D_2 = (D div 2),
            R_5 = (R_4 + 1),
            Fun_3_loop(D_2, K, N_2, R_5);
        _ -> {D, K, N_2, R_4}
    end
end,
{D_2, K, N_2, R_5} = Fun_3(D, K, N_2, R_4),
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(D_2, I_3, K, N_2, R_5) ->
    case (I_3 < K) of
        true ->
            try
                A_3 = rand_range(2, (N_2 - 2)),
                X = mod_pow(A_3, D_2, N_2),
                case ((X == 1) orelse (X == (N_2 - 1))) of
        true -> I_4 = (I_3 + 1),
            throw({continue, D_2, I_4, K, N_2, R_5}),
            I_5 = I_4;
        _ -> I_5 = I_3
    end,
                J = 1,
                Found = false,
                Fun_4 = fun Fun_4_loop(A_3, D_2, Found, I_5, J, K, N_2, R_5, X) ->
    case (J < R_5) of
        true ->
            try
                X_2 = mod_pow(X, 2, N_2),
                case (X_2 == (N_2 - 1)) of
        true -> Found_2 = true,
            throw({break, A_3, D_2, Found_2, I_5, J, K, N_2, R_5, X_2}),
            Found_3 = Found_2;
        _ -> Found_3 = Found
    end,
                J_2 = (J + 1),
                Fun_4_loop(A_3, D_2, Found_3, I_5, J_2, K, N_2, R_5, X_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8} -> Fun_4_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8}
            end;
        _ -> {A_3, D_2, Found, I_5, J, K, N_2, R_5, X}
    end
end,
{A_3, D_2, Found_3, I_5, J_2, K, N_2, R_5, X_2} = Fun_4(A_3, D_2, Found, I_5, J, K, N_2, R_5, X),
                case mochi_not(Found_3) of
        true -> throw({return, false});
        _ -> ok
    end,
                I_6 = (I_5 + 1),
                Fun_5_loop(D_2, I_6, K, N_2, R_5)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_5_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {D_2, I_3, K, N_2, R_5}
    end
end,
{D_2, I_6, K, N_2, R_5} = Fun_5(D_2, I_3, K, N_2, R_5),
        true
    catch {return, RetCatch} -> RetCatch end.

generate_large_prime(Bits) ->
    try
        Min_2 = pow2((Bits - 1)),
        Max_2 = (pow2(Bits) - 1),
        P = rand_range(Min_2, Max_2),
        case (mochi_mod(P, 2) == 0) of
        true -> P_2 = (P + 1),
            P_3 = P_2;
        _ -> P_3 = P
    end,
        Fun_6 = fun Fun_6_loop(Bits, Max_2, Min_2, P_3) ->
    case mochi_not(is_probable_prime(P_3, 5)) of
        true ->
            P_4 = (P_3 + 2),
            case (P_4 > Max_2) of
        true -> P_5 = (Min_2 + 1),
            P_6 = P_5;
        _ -> P_6 = P_4
    end,
            Fun_6_loop(Bits, Max_2, Min_2, P_6);
        _ -> {Bits, Max_2, Min_2, P_3}
    end
end,
{Bits, Max_2, Min_2, P_6} = Fun_6(Bits, Max_2, Min_2, P_3),
        P_6
    catch {return, RetCatch} -> RetCatch end.

primitive_root(P_7) ->
    try
        Fun_7 = fun Fun_7_loop(P_7) ->
    case true of
        true ->
            try
                G = rand_range(3, (P_7 - 1)),
                case (mod_pow(G, 2, P_7) == 1) of
        true -> throw({continue, P_7});
        _ -> ok
    end,
                case (mod_pow(G, P_7, P_7) == 1) of
        true -> throw({continue, P_7});
        _ -> ok
    end,
                throw({return, G}),
                Fun_7_loop(P_7)
            catch
                {continue, C0} -> Fun_7_loop(C0);
                {break, B0} -> {B0}
            end;
        _ -> {P_7}
    end
end,
{P_7} = Fun_7(P_7),
        nil
    catch {return, RetCatch} -> RetCatch end.

generate_key(Key_size) ->
    try
        P_8 = generate_large_prime(Key_size),
        E1 = primitive_root(P_8),
        D_3 = rand_range(3, (P_8 - 1)),
        E2 = mod_inverse(mod_pow(E1, D_3, P_8), P_8),
        Public_key = #{"key_size" => Key_size, "g" => E1, "e2" => E2, "p" => P_8},
        Private_key = #{"key_size" => Key_size, "d" => D_3},
        #{"public_key" => Public_key, "private_key" => Private_key}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Key_size_2 = 16,
        Kp = generate_key(16),
        Pub = maps:get("public_key", Kp, nil),
        Priv = maps:get("private_key", Kp, nil),
        io:format("~ts~n", [mochi_repr((((((((("public key: (" ++ mochi_str(maps:get("key_size", Pub, nil))) ++ ", ") ++ mochi_str(maps:get("g", Pub, nil))) ++ ", ") ++ mochi_str(maps:get("e2", Pub, nil))) ++ ", ") ++ mochi_str(maps:get("p", Pub, nil))) ++ ")"))]),
        io:format("~ts~n", [mochi_repr((((("private key: (" ++ mochi_str(maps:get("key_size", Priv, nil))) ++ ", ") ++ mochi_str(maps:get("d", Priv, nil))) ++ ")"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 123456789),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
