#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, gcd/2, pow_mod/3, rsa_factor/3]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

gcd(A, B) ->
    try
        X = A,
        Y = B,
        Fun = fun Fun_loop(A, B, X, Y) ->
    case (Y /= 0) of
        true ->
            T = mochi_mod(X, Y),
            X_2 = Y,
            Y_2 = T,
            Fun_loop(A, B, X_2, Y_2);
        _ -> {A, B, X, Y}
    end
end,
{A, B, X_2, Y_2} = Fun(A, B, X, Y),
        case (X_2 < 0) of
        true -> throw({return, -X_2});
        _ -> ok
    end,
        X_2
    catch {return, RetCatch} -> RetCatch end.

pow_mod(Base, Exp, Mod) ->
    try
        Result = 1,
        B_2 = mochi_mod(Base, Mod),
        E = Exp,
        Fun_2 = fun Fun_2_loop(B_2, Base, E, Exp, Mod, Result) ->
    case (E > 0) of
        true ->
            case (mochi_mod(E, 2) == 1) of
        true -> Result_2 = mochi_mod((Result * B_2), Mod),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            E_2 = (E div 2),
            B_3 = mochi_mod((B_2 * B_2), Mod),
            Fun_2_loop(B_3, Base, E_2, Exp, Mod, Result_3);
        _ -> {B_2, Base, E, Exp, Mod, Result}
    end
end,
{B_3, Base, E_2, Exp, Mod, Result_3} = Fun_2(B_2, Base, E, Exp, Mod, Result),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

rsa_factor(D, E_3, N) ->
    try
        K = ((D * E_3) - 1),
        P = 0,
        Q = 0,
        G = 2,
        Fun_4 = fun Fun_4_loop(D, E_3, G, K, N, P, Q) ->
    case ((P == 0) andalso (G < N)) of
        true ->
            try
                T_2 = K,
                Fun_3 = fun Fun_3_loop(D, E_3, G, K, N, P, Q, T_2) ->
    case (mochi_mod(T_2, 2) == 0) of
        true ->
            try
                T_3 = (T_2 div 2),
                X_3 = pow_mod(G, T_3, N),
                Y_3 = gcd((X_3 - 1), N),
                case ((X_3 > 1) andalso (Y_3 > 1)) of
        true -> P_2 = Y_3,
            Q_2 = (N div Y_3),
            throw({break, D, E_3, G, K, N, P_2, Q_2, T_3}),
            P_3 = P_2,
            Q_3 = Q_2;
        _ -> P_3 = P,
            Q_3 = Q
    end,
                Fun_3_loop(D, E_3, G, K, N, P_3, Q_3, T_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6, C7);
                {break, B0, B1, B2, B3, B4, B5, B6, B7} -> {B0, B1, B2, B3, B4, B5, B6, B7}
            end;
        _ -> {D, E_3, G, K, N, P, Q, T_2}
    end
end,
{D, E_3, G, K, N, P_3, Q_3, T_3} = Fun_3(D, E_3, G, K, N, P, Q, T_2),
                G_2 = (G + 1),
                Fun_4_loop(D, E_3, G_2, K, N, P_3, Q_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_4_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {D, E_3, G, K, N, P, Q}
    end
end,
{D, E_3, G_2, K, N, P_3, Q_3} = Fun_4(D, E_3, G, K, N, P, Q),
        case (P_3 > Q_3) of
        true -> throw({return, [Q_3, P_3]});
        _ -> ok
    end,
        [P_3, Q_3]
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(rsa_factor(3, 16971, 25777))]),
    io:format("~ts~n", [mochi_repr(rsa_factor(7331, 11, 27233))]),
    io:format("~ts~n", [mochi_repr(rsa_factor(4021, 13, 17711))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
