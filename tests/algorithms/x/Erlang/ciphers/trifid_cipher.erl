#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, remove_spaces/1, char_to_trigram/2, trigram_to_char/2, encrypt_part/2, encrypt_message/3, decrypt_part/2, decrypt_message/3, main/0]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

remove_spaces(S) ->
    try
        Res = "",
        I = 0,
        Fun = fun Fun_loop(I, Res, S) ->
    case (I < length(S)) of
        true ->
            C = string:substr(S, I + 1, ((I + 1) - I)),
            case (C /= " ") of
        true -> Res_2 = (Res ++ C),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Res_3, S);
        _ -> {I, Res, S}
    end
end,
{I_2, Res_3, S} = Fun(I, Res, S),
        Res_3
    catch {return, Ret} -> Ret end.

char_to_trigram(Ch, Alphabet) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Alphabet, Ch, I_3) ->
    case (I_3 < length(Alphabet)) of
        true ->
            case (string:substr(Alphabet, I_3 + 1, ((I_3 + 1) - I_3)) == Ch) of
        true -> throw({return, (case erlang:is_map(erlang:get('triagrams')) of true -> maps:get(I_3, erlang:get('triagrams'), nil); _ -> lists:nth(I_3 + 1, erlang:get('triagrams')) end)});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Alphabet, Ch, I_4);
        _ -> {Alphabet, Ch, I_3}
    end
end,
{Alphabet, Ch, I_4} = Fun_2(Alphabet, Ch, I_3),
        ""
    catch {return, Ret} -> Ret end.

trigram_to_char(Tri, Alphabet_2) ->
    try
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Alphabet_2, I_5, Tri) ->
    case (I_5 < length(erlang:get('triagrams'))) of
        true ->
            case ((case erlang:is_map(erlang:get('triagrams')) of true -> maps:get(I_5, erlang:get('triagrams'), nil); _ -> lists:nth(I_5 + 1, erlang:get('triagrams')) end) == Tri) of
        true -> throw({return, string:substr(Alphabet_2, I_5 + 1, ((I_5 + 1) - I_5))});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Alphabet_2, I_6, Tri);
        _ -> {Alphabet_2, I_5, Tri}
    end
end,
{Alphabet_2, I_6, Tri} = Fun_3(Alphabet_2, I_5, Tri),
        ""
    catch {return, Ret} -> Ret end.

encrypt_part(Part, Alphabet_3) ->
    try
        One = "",
        Two = "",
        Three = "",
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Alphabet_3, I_7, One, Part, Three, Two) ->
    case (I_7 < length(Part)) of
        true ->
            Tri_2 = char_to_trigram(string:substr(Part, I_7 + 1, ((I_7 + 1) - I_7)), Alphabet_3),
            One_2 = (One ++ string:substr(Tri_2, 0 + 1, (1 - 0))),
            Two_2 = (Two ++ string:substr(Tri_2, 1 + 1, (2 - 1))),
            Three_2 = (Three ++ string:substr(Tri_2, 2 + 1, (3 - 2))),
            I_8 = (I_7 + 1),
            Fun_4_loop(Alphabet_3, I_8, One_2, Part, Three_2, Two_2);
        _ -> {Alphabet_3, I_7, One, Part, Three, Two}
    end
end,
{Alphabet_3, I_8, One_2, Part, Three_2, Two_2} = Fun_4(Alphabet_3, I_7, One, Part, Three, Two),
        ((One_2 ++ Two_2) ++ Three_2)
    catch {return, Ret} -> Ret end.

encrypt_message(Message, Alphabet_4, Period) ->
    try
        Msg = remove_spaces(Message),
        Alpha = remove_spaces(Alphabet_4),
        case (length(Alpha) /= 27) of
        true -> throw({return, ""});
        _ -> ok
    end,
        Encrypted_numeric = "",
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(Alpha, Alphabet_4, Encrypted_numeric, I_9, Message, Msg, Period) ->
    case (I_9 < length(Msg)) of
        true ->
            End = (I_9 + Period),
            case (End > length(Msg)) of
        true -> End_2 = length(Msg),
            End_3 = End_2;
        _ -> End_3 = End
    end,
            Part_2 = string:substr(Msg, I_9 + 1, (End_3 - I_9)),
            Encrypted_numeric_2 = (Encrypted_numeric ++ encrypt_part(Part_2, Alpha)),
            I_10 = (I_9 + Period),
            Fun_5_loop(Alpha, Alphabet_4, Encrypted_numeric_2, I_10, Message, Msg, Period);
        _ -> {Alpha, Alphabet_4, Encrypted_numeric, I_9, Message, Msg, Period}
    end
end,
{Alpha, Alphabet_4, Encrypted_numeric_2, I_10, Message, Msg, Period} = Fun_5(Alpha, Alphabet_4, Encrypted_numeric, I_9, Message, Msg, Period),
        Encrypted = "",
        J = 0,
        Fun_6 = fun Fun_6_loop(Alpha, Alphabet_4, Encrypted, Encrypted_numeric_2, I_10, J, Message, Msg, Period) ->
    case (J < length(Encrypted_numeric_2)) of
        true ->
            Tri_3 = string:substr(Encrypted_numeric_2, J + 1, ((J + 3) - J)),
            Encrypted_2 = (Encrypted ++ trigram_to_char(Tri_3, Alpha)),
            J_2 = (J + 3),
            Fun_6_loop(Alpha, Alphabet_4, Encrypted_2, Encrypted_numeric_2, I_10, J_2, Message, Msg, Period);
        _ -> {Alpha, Alphabet_4, Encrypted, Encrypted_numeric_2, I_10, J, Message, Msg, Period}
    end
end,
{Alpha, Alphabet_4, Encrypted_2, Encrypted_numeric_2, I_10, J_2, Message, Msg, Period} = Fun_6(Alpha, Alphabet_4, Encrypted, Encrypted_numeric_2, I_10, J, Message, Msg, Period),
        Encrypted_2
    catch {return, Ret} -> Ret end.

decrypt_part(Part_3, Alphabet_5) ->
    try
        Converted = "",
        I_11 = 0,
        Fun_7 = fun Fun_7_loop(Alphabet_5, Converted, I_11, Part_3) ->
    case (I_11 < length(Part_3)) of
        true ->
            Tri_4 = char_to_trigram(string:substr(Part_3, I_11 + 1, ((I_11 + 1) - I_11)), Alphabet_5),
            Converted_2 = (Converted ++ Tri_4),
            I_12 = (I_11 + 1),
            Fun_7_loop(Alphabet_5, Converted_2, I_12, Part_3);
        _ -> {Alphabet_5, Converted, I_11, Part_3}
    end
end,
{Alphabet_5, Converted_2, I_12, Part_3} = Fun_7(Alphabet_5, Converted, I_11, Part_3),
        Result = [],
        Tmp = "",
        J_3 = 0,
        Fun_8 = fun Fun_8_loop(Alphabet_5, Converted_2, I_12, J_3, Part_3, Result, Tmp) ->
    case (J_3 < length(Converted_2)) of
        true ->
            Tmp_2 = (Tmp ++ string:substr(Converted_2, J_3 + 1, ((J_3 + 1) - J_3))),
            case (length(Tmp_2) == length(Part_3)) of
        true -> Result_2 = lists:append(Result, [Tmp_2]),
            Tmp_3 = "",
            Result_3 = Result_2,
            Tmp_4 = Tmp_3;
        _ -> Result_3 = Result,
            Tmp_4 = Tmp_2
    end,
            J_4 = (J_3 + 1),
            Fun_8_loop(Alphabet_5, Converted_2, I_12, J_4, Part_3, Result_3, Tmp_4);
        _ -> {Alphabet_5, Converted_2, I_12, J_3, Part_3, Result, Tmp}
    end
end,
{Alphabet_5, Converted_2, I_12, J_4, Part_3, Result_3, Tmp_4} = Fun_8(Alphabet_5, Converted_2, I_12, J_3, Part_3, Result, Tmp),
        Result_3
    catch {return, Ret} -> Ret end.

decrypt_message(Message_2, Alphabet_6, Period_2) ->
    try
        Msg_2 = remove_spaces(Message_2),
        Alpha_2 = remove_spaces(Alphabet_6),
        case (length(Alpha_2) /= 27) of
        true -> throw({return, ""});
        _ -> ok
    end,
        Decrypted_numeric = [],
        I_13 = 0,
        Fun_10 = fun Fun_10_loop(Alpha_2, Alphabet_6, Decrypted_numeric, I_13, Message_2, Msg_2, Period_2) ->
    case (I_13 < length(Msg_2)) of
        true ->
            End_4 = (I_13 + Period_2),
            case (End_4 > length(Msg_2)) of
        true -> End_5 = length(Msg_2),
            End_6 = End_5;
        _ -> End_6 = End_4
    end,
            Part_4 = string:substr(Msg_2, I_13 + 1, (End_6 - I_13)),
            Groups = decrypt_part(Part_4, Alpha_2),
            K = 0,
            Fun_9 = fun Fun_9_loop(Alpha_2, Alphabet_6, Decrypted_numeric, End_6, Groups, I_13, K, Message_2, Msg_2, Part_4, Period_2) ->
    case (K < length((case erlang:is_map(Groups) of true -> maps:get(0, Groups, nil); _ -> lists:nth(0 + 1, Groups) end))) of
        true ->
            Tri_5 = ((string:substr((case erlang:is_map(Groups) of true -> maps:get(0, Groups, nil); _ -> lists:nth(0 + 1, Groups) end), K + 1, ((K + 1) - K)) ++ string:substr((case erlang:is_map(Groups) of true -> maps:get(1, Groups, nil); _ -> lists:nth(1 + 1, Groups) end), K + 1, ((K + 1) - K))) ++ string:substr((case erlang:is_map(Groups) of true -> maps:get(2, Groups, nil); _ -> lists:nth(2 + 1, Groups) end), K + 1, ((K + 1) - K))),
            Decrypted_numeric_2 = lists:append(Decrypted_numeric, [Tri_5]),
            K_2 = (K + 1),
            Fun_9_loop(Alpha_2, Alphabet_6, Decrypted_numeric_2, End_6, Groups, I_13, K_2, Message_2, Msg_2, Part_4, Period_2);
        _ -> {Alpha_2, Alphabet_6, Decrypted_numeric, End_6, Groups, I_13, K, Message_2, Msg_2, Part_4, Period_2}
    end
end,
{Alpha_2, Alphabet_6, Decrypted_numeric_2, End_6, Groups, I_13, K_2, Message_2, Msg_2, Part_4, Period_2} = Fun_9(Alpha_2, Alphabet_6, Decrypted_numeric, End_6, Groups, I_13, K, Message_2, Msg_2, Part_4, Period_2),
            I_14 = (I_13 + Period_2),
            Fun_10_loop(Alpha_2, Alphabet_6, Decrypted_numeric_2, I_14, Message_2, Msg_2, Period_2);
        _ -> {Alpha_2, Alphabet_6, Decrypted_numeric, I_13, Message_2, Msg_2, Period_2}
    end
end,
{Alpha_2, Alphabet_6, Decrypted_numeric_2, I_14, Message_2, Msg_2, Period_2} = Fun_10(Alpha_2, Alphabet_6, Decrypted_numeric, I_13, Message_2, Msg_2, Period_2),
        Decrypted = "",
        J_5 = 0,
        Fun_11 = fun Fun_11_loop(Alpha_2, Alphabet_6, Decrypted, Decrypted_numeric_2, I_14, J_5, Message_2, Msg_2, Period_2) ->
    case (J_5 < length(Decrypted_numeric_2)) of
        true ->
            Decrypted_2 = (Decrypted ++ trigram_to_char((case erlang:is_map(Decrypted_numeric_2) of true -> maps:get(J_5, Decrypted_numeric_2, nil); _ -> lists:nth(J_5 + 1, Decrypted_numeric_2) end), Alpha_2)),
            J_6 = (J_5 + 1),
            Fun_11_loop(Alpha_2, Alphabet_6, Decrypted_2, Decrypted_numeric_2, I_14, J_6, Message_2, Msg_2, Period_2);
        _ -> {Alpha_2, Alphabet_6, Decrypted, Decrypted_numeric_2, I_14, J_5, Message_2, Msg_2, Period_2}
    end
end,
{Alpha_2, Alphabet_6, Decrypted_2, Decrypted_numeric_2, I_14, J_6, Message_2, Msg_2, Period_2} = Fun_11(Alpha_2, Alphabet_6, Decrypted, Decrypted_numeric_2, I_14, J_5, Message_2, Msg_2, Period_2),
        Decrypted_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Msg_3 = "DEFEND THE EAST WALL OF THE CASTLE.",
        Alphabet_7 = "EPSDUCVWYM.ZLKXNBTFGORIJHAQ",
        Encrypted_3 = encrypt_message("DEFEND THE EAST WALL OF THE CASTLE.", "EPSDUCVWYM.ZLKXNBTFGORIJHAQ", 5),
        Decrypted_3 = decrypt_message(Encrypted_3, "EPSDUCVWYM.ZLKXNBTFGORIJHAQ", 5),
        io:format("~ts~n", [mochi_repr(("Encrypted: " ++ Encrypted_3))]),
        io:format("~ts~n", [mochi_repr(("Decrypted: " ++ Decrypted_3))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('triagrams', ["111", "112", "113", "121", "122", "123", "131", "132", "133", "211", "212", "213", "221", "222", "223", "231", "232", "233", "311", "312", "313", "321", "322", "323", "331", "332", "333"]),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
