#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexofchar/2, ord/1, chr/1, repeat/2, to_binary/2, binary_to_int/1, base32_encode/1, base32_decode/1]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_repeat(S, N) when is_binary(S) ->
    binary:copy(S, mochi_to_int(N));
mochi_repeat(S, N) when is_list(S) ->
    string:copies(S, mochi_to_int(N));
mochi_repeat(_, _) -> [].


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

indexofchar(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, 1) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

ord(Ch_2) ->
    try
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower = "abcdefghijklmnopqrstuvwxyz",
        Digits = "0123456789",
        Idx = indexofchar("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch_2),
        case (Idx >= 0) of
        true -> throw({return, (65 + Idx)});
        _ -> ok
    end,
        Idx_2 = indexofchar("abcdefghijklmnopqrstuvwxyz", Ch_2),
        case (Idx_2 >= 0) of
        true -> throw({return, (97 + Idx_2)});
        _ -> ok
    end,
        Idx_3 = indexofchar("0123456789", Ch_2),
        case (Idx_3 >= 0) of
        true -> throw({return, (48 + Idx_3)});
        _ -> ok
    end,
        case (Ch_2 == " ") of
        true -> throw({return, 32});
        _ -> ok
    end,
        case (Ch_2 == "!") of
        true -> throw({return, 33});
        _ -> ok
    end,
        0
    catch {return, RetCatch} -> RetCatch end.

chr(Code) ->
    try
        Upper_2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower_2 = "abcdefghijklmnopqrstuvwxyz",
        Digits_2 = "0123456789",
        case (Code == 32) of
        true -> throw({return, " "});
        _ -> ok
    end,
        case (Code == 33) of
        true -> throw({return, "!"});
        _ -> ok
    end,
        Idx_4 = (Code - 65),
        case ((Idx_4 >= 0) andalso (Idx_4 < erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ"))) of
        true -> throw({return, string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Idx_4 + 1, 1)});
        _ -> ok
    end,
        Idx_5 = (Code - 97),
        case ((Idx_5 >= 0) andalso (Idx_5 < erlang:length("abcdefghijklmnopqrstuvwxyz"))) of
        true -> throw({return, string:substr("abcdefghijklmnopqrstuvwxyz", Idx_5 + 1, 1)});
        _ -> ok
    end,
        Idx_6 = (Code - 48),
        case ((Idx_6 >= 0) andalso (Idx_6 < erlang:length("0123456789"))) of
        true -> throw({return, string:substr("0123456789", Idx_6 + 1, 1)});
        _ -> ok
    end,
        ""
    catch {return, RetCatch} -> RetCatch end.

repeat(S_2, N) ->
    try
        Out = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, N, Out, S_2) ->
    case (I_3 < N) of
        true ->
            Out_2 = (Out ++ S_2),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, N, Out_2, S_2);
        _ -> {I_3, N, Out, S_2}
    end
end,
{I_4, N, Out_2, S_2} = Fun_2(I_3, N, Out, S_2),
        Out_2
    catch {return, RetCatch} -> RetCatch end.

to_binary(N_2, Bits) ->
    try
        V = N_2,
        Out_3 = "",
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Bits, I_5, N_2, Out_3, V) ->
    case (I_5 < Bits) of
        true ->
            Out_4 = (mochi_str(mochi_mod(V, 2)) ++ Out_3),
            V_2 = (V div 2),
            I_6 = (I_5 + 1),
            Fun_3_loop(Bits, I_6, N_2, Out_4, V_2);
        _ -> {Bits, I_5, N_2, Out_3, V}
    end
end,
{Bits, I_6, N_2, Out_4, V_2} = Fun_3(Bits, I_5, N_2, Out_3, V),
        Out_4
    catch {return, RetCatch} -> RetCatch end.

binary_to_int(Bits_2) ->
    try
        N_3 = 0,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Bits_2, I_7, N_3) ->
    case (I_7 < erlang:length(Bits_2)) of
        true ->
            N_4 = (N_3 * 2),
            case (string:substr(Bits_2, I_7 + 1, 1) == "1") of
        true -> N_5 = (N_4 + 1),
            N_6 = N_5;
        _ -> N_6 = N_4
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(Bits_2, I_8, N_6);
        _ -> {Bits_2, I_7, N_3}
    end
end,
{Bits_2, I_8, N_6} = Fun_4(Bits_2, I_7, N_3),
        N_6
    catch {return, RetCatch} -> RetCatch end.

base32_encode(Data) ->
    try
        Binary_data = "",
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(Binary_data, Data, I_9) ->
    case (I_9 < erlang:length(Data)) of
        true ->
            Binary_data_2 = (Binary_data ++ to_binary(ord(string:substr(Data, I_9 + 1, 1)), 8)),
            I_10 = (I_9 + 1),
            Fun_5_loop(Binary_data_2, Data, I_10);
        _ -> {Binary_data, Data, I_9}
    end
end,
{Binary_data_2, Data, I_10} = Fun_5(Binary_data, Data, I_9),
        Remainder = mochi_mod(erlang:length(Binary_data_2), 5),
        case (Remainder /= 0) of
        true -> Binary_data_3 = (Binary_data_2 ++ mochi_repeat("0", (5 - Remainder))),
            Binary_data_4 = Binary_data_3;
        _ -> Binary_data_4 = Binary_data_2
    end,
        B32_result = "",
        J = 0,
        Fun_6 = fun Fun_6_loop(B32_result, Binary_data_4, Data, I_10, J, Remainder) ->
    case (J < erlang:length(Binary_data_4)) of
        true ->
            Chunk = string:substr(Binary_data_4, J + 1, ((J + 5) - J)),
            Index = binary_to_int(Chunk),
            B32_result_2 = (B32_result ++ string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", Index + 1, 1)),
            J_2 = (J + 5),
            Fun_6_loop(B32_result_2, Binary_data_4, Data, I_10, J_2, Remainder);
        _ -> {B32_result, Binary_data_4, Data, I_10, J, Remainder}
    end
end,
{B32_result_2, Binary_data_4, Data, I_10, J_2, Remainder} = Fun_6(B32_result, Binary_data_4, Data, I_10, J, Remainder),
        Rem = mochi_mod(erlang:length(B32_result_2), 8),
        case (Rem /= 0) of
        true -> B32_result_3 = (B32_result_2 ++ mochi_repeat("=", (8 - Rem))),
            B32_result_4 = B32_result_3;
        _ -> B32_result_4 = B32_result_2
    end,
        B32_result_4
    catch {return, RetCatch} -> RetCatch end.

base32_decode(Data_2) ->
    try
        Clean = "",
        I_11 = 0,
        Fun_7 = fun Fun_7_loop(Clean, Data_2, I_11) ->
    case (I_11 < erlang:length(Data_2)) of
        true ->
            Ch_3 = string:substr(Data_2, I_11 + 1, 1),
            case (Ch_3 /= "=") of
        true -> Clean_2 = (Clean ++ Ch_3),
            Clean_3 = Clean_2;
        _ -> Clean_3 = Clean
    end,
            I_12 = (I_11 + 1),
            Fun_7_loop(Clean_3, Data_2, I_12);
        _ -> {Clean, Data_2, I_11}
    end
end,
{Clean_3, Data_2, I_12} = Fun_7(Clean, Data_2, I_11),
        Binary_chunks = "",
        I_13 = 0,
        Fun_8 = fun Fun_8_loop(Binary_chunks, Clean_3, Data_2, I_13) ->
    case (I_13 < erlang:length(Clean_3)) of
        true ->
            Idx_7 = indexofchar("ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", string:substr(Clean_3, I_13 + 1, 1)),
            Binary_chunks_2 = (Binary_chunks ++ to_binary(Idx_7, 5)),
            I_14 = (I_13 + 1),
            Fun_8_loop(Binary_chunks_2, Clean_3, Data_2, I_14);
        _ -> {Binary_chunks, Clean_3, Data_2, I_13}
    end
end,
{Binary_chunks_2, Clean_3, Data_2, I_14} = Fun_8(Binary_chunks, Clean_3, Data_2, I_13),
        Result = "",
        J_3 = 0,
        Fun_9 = fun Fun_9_loop(Binary_chunks_2, Clean_3, Data_2, I_14, J_3, Result) ->
    case ((J_3 + 8) =< erlang:length(Binary_chunks_2)) of
        true ->
            Byte_bits = string:substr(Binary_chunks_2, J_3 + 1, ((J_3 + 8) - J_3)),
            Code_2 = binary_to_int(Byte_bits),
            Result_2 = (Result ++ chr(Code_2)),
            J_4 = (J_3 + 8),
            Fun_9_loop(Binary_chunks_2, Clean_3, Data_2, I_14, J_4, Result_2);
        _ -> {Binary_chunks_2, Clean_3, Data_2, I_14, J_3, Result}
    end
end,
{Binary_chunks_2, Clean_3, Data_2, I_14, J_4, Result_2} = Fun_9(Binary_chunks_2, Clean_3, Data_2, I_14, J_3, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('B32_CHARSET', "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"),
    io:format("~ts~n", [mochi_repr(base32_encode("Hello World!"))]),
    io:format("~ts~n", [mochi_repr(base32_encode("123456"))]),
    io:format("~ts~n", [mochi_repr(base32_encode("some long complex string"))]),
    io:format("~ts~n", [mochi_repr(base32_decode("JBSWY3DPEBLW64TMMQQQ===="))]),
    io:format("~ts~n", [mochi_repr(base32_decode("GEZDGNBVGY======"))]),
    io:format("~ts~n", [mochi_repr(base32_decode("ONXW2ZJANRXW4ZZAMNXW24DMMV4CA43UOJUW4ZY="))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
