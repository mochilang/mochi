#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, to_upper_char/1, to_upper/1, index_of/2, encrypt/1, split_spaces/1, decrypt/1]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

to_upper_char(C) ->
    try
        case (C == "a") of
        true -> throw({return, "A"});
        _ -> ok
    end,
        case (C == "b") of
        true -> throw({return, "B"});
        _ -> ok
    end,
        case (C == "c") of
        true -> throw({return, "C"});
        _ -> ok
    end,
        case (C == "d") of
        true -> throw({return, "D"});
        _ -> ok
    end,
        case (C == "e") of
        true -> throw({return, "E"});
        _ -> ok
    end,
        case (C == "f") of
        true -> throw({return, "F"});
        _ -> ok
    end,
        case (C == "g") of
        true -> throw({return, "G"});
        _ -> ok
    end,
        case (C == "h") of
        true -> throw({return, "H"});
        _ -> ok
    end,
        case (C == "i") of
        true -> throw({return, "I"});
        _ -> ok
    end,
        case (C == "j") of
        true -> throw({return, "J"});
        _ -> ok
    end,
        case (C == "k") of
        true -> throw({return, "K"});
        _ -> ok
    end,
        case (C == "l") of
        true -> throw({return, "L"});
        _ -> ok
    end,
        case (C == "m") of
        true -> throw({return, "M"});
        _ -> ok
    end,
        case (C == "n") of
        true -> throw({return, "N"});
        _ -> ok
    end,
        case (C == "o") of
        true -> throw({return, "O"});
        _ -> ok
    end,
        case (C == "p") of
        true -> throw({return, "P"});
        _ -> ok
    end,
        case (C == "q") of
        true -> throw({return, "Q"});
        _ -> ok
    end,
        case (C == "r") of
        true -> throw({return, "R"});
        _ -> ok
    end,
        case (C == "s") of
        true -> throw({return, "S"});
        _ -> ok
    end,
        case (C == "t") of
        true -> throw({return, "T"});
        _ -> ok
    end,
        case (C == "u") of
        true -> throw({return, "U"});
        _ -> ok
    end,
        case (C == "v") of
        true -> throw({return, "V"});
        _ -> ok
    end,
        case (C == "w") of
        true -> throw({return, "W"});
        _ -> ok
    end,
        case (C == "x") of
        true -> throw({return, "X"});
        _ -> ok
    end,
        case (C == "y") of
        true -> throw({return, "Y"});
        _ -> ok
    end,
        case (C == "z") of
        true -> throw({return, "Z"});
        _ -> ok
    end,
        C
    catch {return, RetCatch} -> RetCatch end.

to_upper(S) ->
    try
        Res = "",
        I = 0,
        Fun = fun Fun_loop(I, Res, S) ->
    case (I < erlang:length(S)) of
        true ->
            Res_2 = (Res ++ to_upper_char(string:substr(S, I + 1, 1))),
            I_2 = (I + 1),
            Fun_loop(I_2, Res_2, S);
        _ -> {I, Res, S}
    end
end,
{I_2, Res_2, S} = Fun(I, Res, S),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

index_of(Xs, Target) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Target, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end) == Target) of
        true -> throw({return, I_3});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Target, Xs);
        _ -> {I_3, Target, Xs}
    end
end,
{I_4, Target, Xs} = Fun_2(I_3, Target, Xs),
        -1
    catch {return, RetCatch} -> RetCatch end.

encrypt(Message) ->
    try
        Msg = to_upper(Message),
        Res_3 = "",
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Message, Msg, Res_3) ->
    case (I_5 < erlang:length(Msg)) of
        true ->
            C_2 = string:substr(Msg, I_5 + 1, 1),
            Idx = index_of(erlang:get('CHARS'), C_2),
            case (Idx >= 0) of
        true -> case (Res_3 /= "") of
        true -> Res_4 = (Res_3 ++ " "),
            Res_5 = Res_4;
        _ -> Res_5 = Res_3
    end,
            Res_6 = (Res_5 ++ (case erlang:is_map(erlang:get('CODES')) of true -> maps:get(Idx, erlang:get('CODES'), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(erlang:get('CODES')) + Idx + 1, erlang:get('CODES')); _ -> mochi_nth(Idx + 1, erlang:get('CODES')) end end)),
            Res_7 = Res_6;
        _ -> Res_7 = Res_3
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Message, Msg, Res_7);
        _ -> {I_5, Message, Msg, Res_3}
    end
end,
{I_6, Message, Msg, Res_7} = Fun_3(I_5, Message, Msg, Res_3),
        Res_7
    catch {return, RetCatch} -> RetCatch end.

split_spaces(S_2) ->
    try
        Res_8 = [],
        Current = "",
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Current, I_7, Res_8, S_2) ->
    case (I_7 < erlang:length(S_2)) of
        true ->
            Ch = string:substr(S_2, I_7 + 1, 1),
            case (Ch == " ") of
        true -> case (Current /= "") of
        true -> Res_9 = lists:append((case Res_8 of nil -> []; _ -> Res_8 end), [Current]),
            Current_2 = "",
            Current_3 = Current_2,
            Res_10 = Res_9;
        _ -> Current_3 = Current,
            Res_10 = Res_8
    end,
            Current_5 = Current_3,
            Res_11 = Res_10;
        _ -> Current_4 = (Current ++ Ch),
            Current_5 = Current_4,
            Res_11 = Res_8
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(Current_5, I_8, Res_11, S_2);
        _ -> {Current, I_7, Res_8, S_2}
    end
end,
{Current_5, I_8, Res_11, S_2} = Fun_4(Current, I_7, Res_8, S_2),
        case (Current_5 /= "") of
        true -> Res_12 = lists:append((case Res_11 of nil -> []; _ -> Res_11 end), [Current_5]),
            Res_13 = Res_12;
        _ -> Res_13 = Res_11
    end,
        Res_13
    catch {return, RetCatch} -> RetCatch end.

decrypt(Message_2) ->
    try
        Parts = split_spaces(Message_2),
        Res_14 = "",
        Fun_5 = fun Fun_5_loop(List, Message_2, Parts, Res_14) ->
    case List of
        [] -> {Message_2, Parts, Res_14};
        [Code|Code_rest] ->
            Idx_2 = index_of(erlang:get('CODES'), Code),
            case (Idx_2 >= 0) of
        true -> Res_15 = (Res_14 ++ (case erlang:is_map(erlang:get('CHARS')) of true -> maps:get(Idx_2, erlang:get('CHARS'), nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(erlang:get('CHARS')) + Idx_2 + 1, erlang:get('CHARS')); _ -> mochi_nth(Idx_2 + 1, erlang:get('CHARS')) end end)),
            Res_16 = Res_15;
        _ -> Res_16 = Res_14
    end,
            Fun_5_loop(Code_rest, Message_2, Parts, Res_16);
        _ -> {Message_2, Parts, Res_14}
    end
end,
{Message_2, Parts, Res_16} = Fun_5(Parts, Message_2, Parts, Res_14),
        Res_16
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('CHARS', ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "&", "@", ":", ",", ".", "'", "\"", "?", "/", "=", "+", "-", "(", ")", "!", " "]),
    erlang:put('CODES', [".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--..", ".----", "..---", "...--", "....-", ".....", "-....", "--...", "---..", "----.", "-----", ".-...", ".--.-.", "---...", "--..--", ".-.-.-", ".----.", ".-..-.", "..--..", "-..-.", "-...-", ".-.-.", "-....-", "-.--.", "-.--.-", "-.-.--", "/"]),
    erlang:put('msg', "Morse code here!"),
    io:format("~ts~n", [mochi_repr("Morse code here!")]),
    erlang:put('enc', encrypt("Morse code here!")),
    io:format("~ts~n", [mochi_repr(erlang:get('enc'))]),
    erlang:put('dec', decrypt(erlang:get('enc'))),
    io:format("~ts~n", [mochi_repr(erlang:get('dec'))]),
    io:format("~ts~n", [mochi_repr(encrypt("Sos!"))]),
    io:format("~ts~n", [mochi_repr(decrypt("... --- ... -.-.--"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
