#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/2, to_uppercase/1, gronsfeld/2]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

index_of(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        erlang:get('NEG_ONE')
    catch {return, RetCatch} -> RetCatch end.

to_uppercase(S_2) ->
    try
        Result = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Result, S_2) ->
    case (I_3 < erlang:length(S_2)) of
        true ->
            Ch_2 = string:substr(S_2, I_3 + 1, ((I_3 + 1) - I_3)),
            Idx = index_of("abcdefghijklmnopqrstuvwxyz", Ch_2),
            case (Idx == erlang:get('NEG_ONE')) of
        true -> Result_2 = (Result ++ Ch_2),
            Result_4 = Result_2;
        _ -> Result_3 = (Result ++ string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Idx + 1, ((Idx + 1) - Idx))),
            Result_4 = Result_3
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Result_4, S_2);
        _ -> {I_3, Result, S_2}
    end
end,
{I_4, Result_4, S_2} = Fun_2(I_3, Result, S_2),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

gronsfeld(Text, Key) ->
    try
        Ascii_len = erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
        Key_len = erlang:length(Key),
        case (Key_len == 0) of
        true -> erlang:error({panic, "integer modulo by zero"});
        _ -> ok
    end,
        Upper_text = to_uppercase(Text),
        Encrypted = "",
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Ascii_len, Encrypted, I_5, Key, Key_len, Text, Upper_text) ->
    case (I_5 < erlang:length(Upper_text)) of
        true ->
            Ch_3 = string:substr(Upper_text, I_5 + 1, ((I_5 + 1) - I_5)),
            Idx_2 = index_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch_3),
            case (Idx_2 == erlang:get('NEG_ONE')) of
        true -> Encrypted_2 = (Encrypted ++ Ch_3),
            Encrypted_4 = Encrypted_2,
            Key_idx_2 = nil,
            New_position_2 = nil,
            Shift_2 = nil;
        _ -> Key_idx = mochi_mod(I_5, Key_len),
            Shift = mochi_to_int(string:substr(Key, Key_idx + 1, ((Key_idx + 1) - Key_idx))),
            New_position = mochi_mod((Idx_2 + Shift), Ascii_len),
            Encrypted_3 = (Encrypted ++ string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", New_position + 1, ((New_position + 1) - New_position))),
            Encrypted_4 = Encrypted_3,
            Key_idx_2 = Key_idx,
            New_position_2 = New_position,
            Shift_2 = Shift
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Ascii_len, Encrypted_4, I_6, Key, Key_len, Text, Upper_text);
        _ -> {Ascii_len, Encrypted, I_5, Key, Key_len, Text, Upper_text}
    end
end,
{Ascii_len, Encrypted_4, I_6, Key, Key_len, Text, Upper_text} = Fun_3(Ascii_len, Encrypted, I_5, Key, Key_len, Text, Upper_text),
        Encrypted_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ASCII_UPPERCASE', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    erlang:put('ASCII_LOWERCASE', "abcdefghijklmnopqrstuvwxyz"),
    erlang:put('NEG_ONE', (0 - 1)),
    io:format("~ts~n", [mochi_repr(gronsfeld("hello", "412"))]),
    io:format("~ts~n", [mochi_repr(gronsfeld("hello", "123"))]),
    io:format("~ts~n", [mochi_repr(gronsfeld("", "123"))]),
    io:format("~ts~n", [mochi_repr(gronsfeld("yes, ¥€$ - _!@#%?", "0"))]),
    io:format("~ts~n", [mochi_repr(gronsfeld("yes, ¥€$ - _!@#%?", "01"))]),
    io:format("~ts~n", [mochi_repr(gronsfeld("yes, ¥€$ - _!@#%?", "012"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
