#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/2, to_lower_without_spaces/2, letter_to_numbers/1, numbers_to_letter/2, encode/1, decode/1]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

index_of(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, 1) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

to_lower_without_spaces(Message, Replace_j) ->
    try
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower = "abcdefghijklmnopqrstuvwxyz",
        Res = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Lower, Message, Replace_j, Res, Upper) ->
    case (I_3 < erlang:length(Message)) of
        true ->
            Ch_2 = string:substr(Message, I_3 + 1, 1),
            Pos = index_of(Upper, Ch_2),
            case (Pos >= 0) of
        true -> Ch_3 = string:substr(Lower, Pos + 1, 1),
            Ch_4 = Ch_3;
        _ -> Ch_4 = Ch_2
    end,
            case (Ch_4 /= " ") of
        true -> case (Replace_j andalso (Ch_4 == "j")) of
        true -> Ch_5 = "i",
            Ch_6 = Ch_5;
        _ -> Ch_6 = Ch_4
    end,
            Res_2 = (Res ++ Ch_6),
            Ch_7 = Ch_6,
            Res_3 = Res_2;
        _ -> Ch_7 = Ch_4,
            Res_3 = Res
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Lower, Message, Replace_j, Res_3, Upper);
        _ -> {I_3, Lower, Message, Replace_j, Res, Upper}
    end
end,
{I_4, Lower, Message, Replace_j, Res_3, Upper} = Fun_2(I_3, Lower, Message, Replace_j, Res, Upper),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

letter_to_numbers(Letter) ->
    try
        R = 0,
        Fun_4 = fun Fun_4_loop(Letter, R) ->
    case (R < erlang:length(erlang:get('SQUARE'))) of
        true ->
            C = 0,
            Fun_3 = fun Fun_3_loop(C, Letter, R) ->
    case (C < erlang:length((case erlang:is_map(erlang:get('SQUARE')) of true -> maps:get(R, erlang:get('SQUARE'), nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(erlang:get('SQUARE')) + R + 1, erlang:get('SQUARE')); _ -> mochi_nth(R + 1, erlang:get('SQUARE')) end end))) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(erlang:get('SQUARE')) of true -> maps:get(R, erlang:get('SQUARE'), nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(erlang:get('SQUARE')) + R + 1, erlang:get('SQUARE')); _ -> mochi_nth(R + 1, erlang:get('SQUARE')) end end)) of true -> maps:get(C, (case erlang:is_map(erlang:get('SQUARE')) of true -> maps:get(R, erlang:get('SQUARE'), nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(erlang:get('SQUARE')) + R + 1, erlang:get('SQUARE')); _ -> mochi_nth(R + 1, erlang:get('SQUARE')) end end), nil); _ -> case C < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('SQUARE')) of true -> maps:get(R, erlang:get('SQUARE'), nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(erlang:get('SQUARE')) + R + 1, erlang:get('SQUARE')); _ -> mochi_nth(R + 1, erlang:get('SQUARE')) end end)) + C + 1, (case erlang:is_map(erlang:get('SQUARE')) of true -> maps:get(R, erlang:get('SQUARE'), nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(erlang:get('SQUARE')) + R + 1, erlang:get('SQUARE')); _ -> mochi_nth(R + 1, erlang:get('SQUARE')) end end)); _ -> mochi_nth(C + 1, (case erlang:is_map(erlang:get('SQUARE')) of true -> maps:get(R, erlang:get('SQUARE'), nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(erlang:get('SQUARE')) + R + 1, erlang:get('SQUARE')); _ -> mochi_nth(R + 1, erlang:get('SQUARE')) end end)) end end) == Letter) of
        true -> throw({return, [(R + 1), (C + 1)]});
        _ -> ok
    end,
            C_2 = (C + 1),
            Fun_3_loop(C_2, Letter, R);
        _ -> {C, Letter, R}
    end
end,
{C_2, Letter, R} = Fun_3(C, Letter, R),
            R_2 = (R + 1),
            Fun_4_loop(Letter, R_2);
        _ -> {Letter, R}
    end
end,
{Letter, R_2} = Fun_4(Letter, R),
        [0, 0]
    catch {return, RetCatch} -> RetCatch end.

numbers_to_letter(Row, Col) ->
    try
        (case erlang:is_map((case erlang:is_map(erlang:get('SQUARE')) of true -> maps:get((Row - 1), erlang:get('SQUARE'), nil); _ -> case (Row - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('SQUARE')) + (Row - 1) + 1, erlang:get('SQUARE')); _ -> mochi_nth((Row - 1) + 1, erlang:get('SQUARE')) end end)) of true -> maps:get((Col - 1), (case erlang:is_map(erlang:get('SQUARE')) of true -> maps:get((Row - 1), erlang:get('SQUARE'), nil); _ -> case (Row - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('SQUARE')) + (Row - 1) + 1, erlang:get('SQUARE')); _ -> mochi_nth((Row - 1) + 1, erlang:get('SQUARE')) end end), nil); _ -> case (Col - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('SQUARE')) of true -> maps:get((Row - 1), erlang:get('SQUARE'), nil); _ -> case (Row - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('SQUARE')) + (Row - 1) + 1, erlang:get('SQUARE')); _ -> mochi_nth((Row - 1) + 1, erlang:get('SQUARE')) end end)) + (Col - 1) + 1, (case erlang:is_map(erlang:get('SQUARE')) of true -> maps:get((Row - 1), erlang:get('SQUARE'), nil); _ -> case (Row - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('SQUARE')) + (Row - 1) + 1, erlang:get('SQUARE')); _ -> mochi_nth((Row - 1) + 1, erlang:get('SQUARE')) end end)); _ -> mochi_nth((Col - 1) + 1, (case erlang:is_map(erlang:get('SQUARE')) of true -> maps:get((Row - 1), erlang:get('SQUARE'), nil); _ -> case (Row - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('SQUARE')) + (Row - 1) + 1, erlang:get('SQUARE')); _ -> mochi_nth((Row - 1) + 1, erlang:get('SQUARE')) end end)) end end)
    catch {return, RetCatch} -> RetCatch end.

encode(Message_2) ->
    try
        Clean = to_lower_without_spaces(Message_2, true),
        L = erlang:length(Clean),
        Rows = [],
        Cols = [],
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Clean, Cols, I_5, L, Message_2, Rows) ->
    case (I_5 < L) of
        true ->
            Nums = letter_to_numbers(string:substr(Clean, I_5 + 1, 1)),
            Rows_2 = lists:append((case Rows of nil -> []; _ -> Rows end), [(case erlang:is_map(Nums) of true -> maps:get(0, Nums, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Nums) + 0 + 1, Nums); _ -> mochi_nth(0 + 1, Nums) end end)]),
            Cols_2 = lists:append((case Cols of nil -> []; _ -> Cols end), [(case erlang:is_map(Nums) of true -> maps:get(1, Nums, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Nums) + 1 + 1, Nums); _ -> mochi_nth(1 + 1, Nums) end end)]),
            I_6 = (I_5 + 1),
            Fun_5_loop(Clean, Cols_2, I_6, L, Message_2, Rows_2);
        _ -> {Clean, Cols, I_5, L, Message_2, Rows}
    end
end,
{Clean, Cols_2, I_6, L, Message_2, Rows_2} = Fun_5(Clean, Cols, I_5, L, Message_2, Rows),
        Seq = [],
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(Clean, Cols_2, I_7, L, Message_2, Rows_2, Seq) ->
    case (I_7 < L) of
        true ->
            Seq_2 = lists:append((case Seq of nil -> []; _ -> Seq end), [(case erlang:is_map(Rows_2) of true -> maps:get(I_7, Rows_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Rows_2) + I_7 + 1, Rows_2); _ -> mochi_nth(I_7 + 1, Rows_2) end end)]),
            I_8 = (I_7 + 1),
            Fun_6_loop(Clean, Cols_2, I_8, L, Message_2, Rows_2, Seq_2);
        _ -> {Clean, Cols_2, I_7, L, Message_2, Rows_2, Seq}
    end
end,
{Clean, Cols_2, I_8, L, Message_2, Rows_2, Seq_2} = Fun_6(Clean, Cols_2, I_7, L, Message_2, Rows_2, Seq),
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(Clean, Cols_2, I_9, L, Message_2, Rows_2, Seq_2) ->
    case (I_9 < L) of
        true ->
            Seq_3 = lists:append((case Seq_2 of nil -> []; _ -> Seq_2 end), [(case erlang:is_map(Cols_2) of true -> maps:get(I_9, Cols_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Cols_2) + I_9 + 1, Cols_2); _ -> mochi_nth(I_9 + 1, Cols_2) end end)]),
            I_10 = (I_9 + 1),
            Fun_7_loop(Clean, Cols_2, I_10, L, Message_2, Rows_2, Seq_3);
        _ -> {Clean, Cols_2, I_9, L, Message_2, Rows_2, Seq_2}
    end
end,
{Clean, Cols_2, I_10, L, Message_2, Rows_2, Seq_3} = Fun_7(Clean, Cols_2, I_9, L, Message_2, Rows_2, Seq_2),
        Encoded = "",
        I_11 = 0,
        Fun_8 = fun Fun_8_loop(Clean, Cols_2, Encoded, I_11, L, Message_2, Rows_2, Seq_3) ->
    case (I_11 < L) of
        true ->
            R_3 = (case erlang:is_map(Seq_3) of true -> maps:get((2 * I_11), Seq_3, nil); _ -> case (2 * I_11) < 0 of true -> mochi_nth(erlang:length(Seq_3) + (2 * I_11) + 1, Seq_3); _ -> mochi_nth((2 * I_11) + 1, Seq_3) end end),
            C_3 = (case erlang:is_map(Seq_3) of true -> maps:get(((2 * I_11) + 1), Seq_3, nil); _ -> case ((2 * I_11) + 1) < 0 of true -> mochi_nth(erlang:length(Seq_3) + ((2 * I_11) + 1) + 1, Seq_3); _ -> mochi_nth(((2 * I_11) + 1) + 1, Seq_3) end end),
            Encoded_2 = (Encoded ++ numbers_to_letter(R_3, C_3)),
            I_12 = (I_11 + 1),
            Fun_8_loop(Clean, Cols_2, Encoded_2, I_12, L, Message_2, Rows_2, Seq_3);
        _ -> {Clean, Cols_2, Encoded, I_11, L, Message_2, Rows_2, Seq_3}
    end
end,
{Clean, Cols_2, Encoded_2, I_12, L, Message_2, Rows_2, Seq_3} = Fun_8(Clean, Cols_2, Encoded, I_11, L, Message_2, Rows_2, Seq_3),
        Encoded_2
    catch {return, RetCatch} -> RetCatch end.

decode(Message_3) ->
    try
        Clean_2 = to_lower_without_spaces(Message_3, false),
        L_2 = erlang:length(Clean_2),
        First = [],
        I_13 = 0,
        Fun_9 = fun Fun_9_loop(Clean_2, First, I_13, L_2, Message_3) ->
    case (I_13 < L_2) of
        true ->
            Nums_2 = letter_to_numbers(string:substr(Clean_2, I_13 + 1, 1)),
            First_2 = lists:append((case First of nil -> []; _ -> First end), [(case erlang:is_map(Nums_2) of true -> maps:get(0, Nums_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Nums_2) + 0 + 1, Nums_2); _ -> mochi_nth(0 + 1, Nums_2) end end)]),
            First_3 = lists:append((case First_2 of nil -> []; _ -> First_2 end), [(case erlang:is_map(Nums_2) of true -> maps:get(1, Nums_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Nums_2) + 1 + 1, Nums_2); _ -> mochi_nth(1 + 1, Nums_2) end end)]),
            I_14 = (I_13 + 1),
            Fun_9_loop(Clean_2, First_3, I_14, L_2, Message_3);
        _ -> {Clean_2, First, I_13, L_2, Message_3}
    end
end,
{Clean_2, First_3, I_14, L_2, Message_3} = Fun_9(Clean_2, First, I_13, L_2, Message_3),
        Top = [],
        Bottom = [],
        I_15 = 0,
        Fun_10 = fun Fun_10_loop(Bottom, Clean_2, First_3, I_15, L_2, Message_3, Top) ->
    case (I_15 < L_2) of
        true ->
            Top_2 = lists:append((case Top of nil -> []; _ -> Top end), [(case erlang:is_map(First_3) of true -> maps:get(I_15, First_3, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(First_3) + I_15 + 1, First_3); _ -> mochi_nth(I_15 + 1, First_3) end end)]),
            Bottom_2 = lists:append((case Bottom of nil -> []; _ -> Bottom end), [(case erlang:is_map(First_3) of true -> maps:get((I_15 + L_2), First_3, nil); _ -> case (I_15 + L_2) < 0 of true -> mochi_nth(erlang:length(First_3) + (I_15 + L_2) + 1, First_3); _ -> mochi_nth((I_15 + L_2) + 1, First_3) end end)]),
            I_16 = (I_15 + 1),
            Fun_10_loop(Bottom_2, Clean_2, First_3, I_16, L_2, Message_3, Top_2);
        _ -> {Bottom, Clean_2, First_3, I_15, L_2, Message_3, Top}
    end
end,
{Bottom_2, Clean_2, First_3, I_16, L_2, Message_3, Top_2} = Fun_10(Bottom, Clean_2, First_3, I_15, L_2, Message_3, Top),
        Decoded = "",
        I_17 = 0,
        Fun_11 = fun Fun_11_loop(Bottom_2, Clean_2, Decoded, First_3, I_17, L_2, Message_3, Top_2) ->
    case (I_17 < L_2) of
        true ->
            R_4 = (case erlang:is_map(Top_2) of true -> maps:get(I_17, Top_2, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(Top_2) + I_17 + 1, Top_2); _ -> mochi_nth(I_17 + 1, Top_2) end end),
            C_4 = (case erlang:is_map(Bottom_2) of true -> maps:get(I_17, Bottom_2, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(Bottom_2) + I_17 + 1, Bottom_2); _ -> mochi_nth(I_17 + 1, Bottom_2) end end),
            Decoded_2 = (Decoded ++ numbers_to_letter(R_4, C_4)),
            I_18 = (I_17 + 1),
            Fun_11_loop(Bottom_2, Clean_2, Decoded_2, First_3, I_18, L_2, Message_3, Top_2);
        _ -> {Bottom_2, Clean_2, Decoded, First_3, I_17, L_2, Message_3, Top_2}
    end
end,
{Bottom_2, Clean_2, Decoded_2, First_3, I_18, L_2, Message_3, Top_2} = Fun_11(Bottom_2, Clean_2, Decoded, First_3, I_17, L_2, Message_3, Top_2),
        Decoded_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('SQUARE', [["a", "b", "c", "d", "e"], ["f", "g", "h", "i", "k"], ["l", "m", "n", "o", "p"], ["q", "r", "s", "t", "u"], ["v", "w", "x", "y", "z"]]),
    io:format("~ts~n", [mochi_repr(encode("testmessage"))]),
    io:format("~ts~n", [mochi_repr(encode("Test Message"))]),
    io:format("~ts~n", [mochi_repr(encode("test j"))]),
    io:format("~ts~n", [mochi_repr(encode("test i"))]),
    io:format("~ts~n", [mochi_repr(decode("qtltbdxrxlk"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
