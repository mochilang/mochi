#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, mod_pow/3, miller_rabin/2]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

mod_pow(Base, Exp, Mod) ->
    try
        Result = 1,
        B = mochi_mod(Base, Mod),
        E = Exp,
        Fun = fun Fun_loop(B, Base, E, Exp, Mod, Result) ->
    case (E > 0) of
        true ->
            case (mochi_mod(E, 2) == 1) of
        true -> Result_2 = mochi_mod((Result * B), Mod),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            B_2 = mochi_mod((B * B), Mod),
            E_2 = (E div 2),
            Fun_loop(B_2, Base, E_2, Exp, Mod, Result_3);
        _ -> {B, Base, E, Exp, Mod, Result}
    end
end,
{B_2, Base, E_2, Exp, Mod, Result_3} = Fun(B, Base, E, Exp, Mod, Result),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

miller_rabin(N, Allow_probable) ->
    try
        case (N == 2) of
        true -> throw({return, true});
        _ -> ok
    end,
        case ((N < 2) orelse (mochi_mod(N, 2) == 0)) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (N > 5) of
        true -> Last = mochi_mod(N, 10),
            case mochi_not(((((Last == 1) orelse (Last == 3)) orelse (Last == 7)) orelse (Last == 9))) of
        true -> throw({return, false});
        _ -> ok
    end,
            Last_2 = Last;
        _ -> Last_2 = nil
    end,
        Limit = 3825123056546413051,
        case ((N > 3825123056546413051) andalso mochi_not(Allow_probable)) of
        true -> erlang:error({panic, "Warning: upper bound of deterministic test is exceeded. Pass allow_probable=true to allow probabilistic test."});
        _ -> ok
    end,
        Bounds = [2047, 1373653, 25326001, 3215031751, 2152302898747, 3474749660383, 341550071728321, 3825123056546413051],
        Primes = [2, 3, 5, 7, 11, 13, 17, 19],
        I = 0,
        Plist_len = erlang:length(Primes),
        Fun_2 = fun Fun_2_loop(Allow_probable, Bounds, I, Last_2, Limit, N, Plist_len, Primes) ->
    case (I < erlang:length(Bounds)) of
        true ->
            case (N < (case erlang:is_map(Bounds) of true -> maps:get(I, Bounds, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Bounds) + I + 1, Bounds); _ -> mochi_nth(I + 1, Bounds) end end)) of
        true -> Plist_len_2 = (I + 1),
            I_2 = erlang:length(Bounds),
            I_4 = I_2,
            Plist_len_3 = Plist_len_2;
        _ -> I_3 = (I + 1),
            I_4 = I_3,
            Plist_len_3 = Plist_len
    end,
            Fun_2_loop(Allow_probable, Bounds, I_4, Last_2, Limit, N, Plist_len_3, Primes);
        _ -> {Allow_probable, Bounds, I, Last_2, Limit, N, Plist_len, Primes}
    end
end,
{Allow_probable, Bounds, I_4, Last_2, Limit, N, Plist_len_3, Primes} = Fun_2(Allow_probable, Bounds, I, Last_2, Limit, N, Plist_len, Primes),
        D = (N - 1),
        S = 0,
        Fun_3 = fun Fun_3_loop(Allow_probable, Bounds, D, I_4, Last_2, Limit, N, Plist_len_3, Primes, S) ->
    case (mochi_mod(D, 2) == 0) of
        true ->
            D_2 = (D div 2),
            S_2 = (S + 1),
            Fun_3_loop(Allow_probable, Bounds, D_2, I_4, Last_2, Limit, N, Plist_len_3, Primes, S_2);
        _ -> {Allow_probable, Bounds, D, I_4, Last_2, Limit, N, Plist_len_3, Primes, S}
    end
end,
{Allow_probable, Bounds, D_2, I_4, Last_2, Limit, N, Plist_len_3, Primes, S_2} = Fun_3(Allow_probable, Bounds, D, I_4, Last_2, Limit, N, Plist_len_3, Primes, S),
        J = 0,
        Fun_6 = fun Fun_6_loop(Allow_probable, Bounds, D_2, I_4, J, Last_2, Limit, N, Plist_len_3, Primes, S_2) ->
    case (J < Plist_len_3) of
        true ->
            Prime = (case erlang:is_map(Primes) of true -> maps:get(J, Primes, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Primes) + J + 1, Primes); _ -> mochi_nth(J + 1, Primes) end end),
            X = mod_pow(Prime, D_2, N),
            Pr = false,
            case ((X == 1) orelse (X == (N - 1))) of
        true -> Pr_2 = true,
            Fun_5 = Fun_3,
            Pr_5 = Pr_2,
            R_3 = nil,
            X_3 = X;
        _ -> R = 1,
            Fun_4 = fun Fun_4_loop(Allow_probable, Bounds, D_2, I_4, J, Last_2, Limit, N, Plist_len_3, Pr, Prime, Primes, R, S_2, X) ->
    case ((R < S_2) andalso mochi_not(Pr)) of
        true ->
            X_2 = mochi_mod((X * X), N),
            case (X_2 == (N - 1)) of
        true -> Pr_3 = true,
            Pr_4 = Pr_3;
        _ -> Pr_4 = Pr
    end,
            R_2 = (R + 1),
            Fun_4_loop(Allow_probable, Bounds, D_2, I_4, J, Last_2, Limit, N, Plist_len_3, Pr_4, Prime, Primes, R_2, S_2, X_2);
        _ -> {Allow_probable, Bounds, D_2, I_4, J, Last_2, Limit, N, Plist_len_3, Pr, Prime, Primes, R, S_2, X}
    end
end,
{Allow_probable, Bounds, D_2, I_4, J, Last_2, Limit, N, Plist_len_3, Pr_4, Prime, Primes, R_2, S_2, X_2} = Fun_4(Allow_probable, Bounds, D_2, I_4, J, Last_2, Limit, N, Plist_len_3, Pr, Prime, Primes, R, S_2, X),
            Fun_5 = Fun_4,
            Pr_5 = Pr_4,
            R_3 = R_2,
            X_3 = X_2
    end,
            case mochi_not(Pr_5) of
        true -> throw({return, false});
        _ -> ok
    end,
            J_2 = (J + 1),
            Fun_6_loop(Allow_probable, Bounds, D_2, I_4, J_2, Last_2, Limit, N, Plist_len_3, Primes, S_2);
        _ -> {Allow_probable, Bounds, D_2, I_4, J, Last_2, Limit, N, Plist_len_3, Primes, S_2}
    end
end,
{Allow_probable, Bounds, D_2, I_4, J_2, Last_2, Limit, N, Plist_len_3, Primes, S_2} = Fun_6(Allow_probable, Bounds, D_2, I_4, J, Last_2, Limit, N, Plist_len_3, Primes, S_2),
        true
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(miller_rabin(561, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(563, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(838201, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(838207, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(17316001, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(17316017, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(3078386641, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(3078386653, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(1713045574801, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(1713045574819, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(2779799728307, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(2779799728327, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(113850023909441, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(113850023909527, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(1275041018848804351, false))]),
    io:format("~ts~n", [mochi_str(miller_rabin(1275041018848804391, false))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
