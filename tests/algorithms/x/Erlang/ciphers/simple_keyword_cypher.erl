#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_in_string/2, contains_char/2, is_alpha/1, to_upper/1, remove_duplicates/1, create_cipher_map/1, index_in_list/2, encipher/2, decipher/2]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

index_in_string(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, 1) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

contains_char(S_2, Ch_2) ->
    try
        (index_in_string(S_2, Ch_2) >= 0)
    catch {return, RetCatch} -> RetCatch end.

is_alpha(Ch_3) ->
    try
        Lower = "abcdefghijklmnopqrstuvwxyz",
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        (contains_char("abcdefghijklmnopqrstuvwxyz", Ch_3) orelse contains_char("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch_3))
    catch {return, RetCatch} -> RetCatch end.

to_upper(S_3) ->
    try
        Lower_2 = "abcdefghijklmnopqrstuvwxyz",
        Upper_2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Res = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Lower_2, Res, S_3, Upper_2) ->
    case (I_3 < erlang:length(S_3)) of
        true ->
            Ch_4 = string:substr(S_3, I_3 + 1, 1),
            Idx = index_in_string(Lower_2, Ch_4),
            case (Idx >= 0) of
        true -> Res_2 = (Res ++ string:substr(Upper_2, Idx + 1, 1)),
            Res_4 = Res_2;
        _ -> Res_3 = (Res ++ Ch_4),
            Res_4 = Res_3
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Lower_2, Res_4, S_3, Upper_2);
        _ -> {I_3, Lower_2, Res, S_3, Upper_2}
    end
end,
{I_4, Lower_2, Res_4, S_3, Upper_2} = Fun_2(I_3, Lower_2, Res, S_3, Upper_2),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

remove_duplicates(Key) ->
    try
        Res_5 = "",
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Key, Res_5) ->
    case (I_5 < erlang:length(Key)) of
        true ->
            Ch_5 = string:substr(Key, I_5 + 1, 1),
            case ((Ch_5 == " ") orelse (is_alpha(Ch_5) andalso (contains_char(Res_5, Ch_5) == false))) of
        true -> Res_6 = (Res_5 ++ Ch_5),
            Res_7 = Res_6;
        _ -> Res_7 = Res_5
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Key, Res_7);
        _ -> {I_5, Key, Res_5}
    end
end,
{I_6, Key, Res_7} = Fun_3(I_5, Key, Res_5),
        Res_7
    catch {return, RetCatch} -> RetCatch end.

create_cipher_map(Key_2) ->
    try
        Alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Cleaned = remove_duplicates(to_upper(Key_2)),
        Cipher = [],
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Alphabet, Cipher, Cleaned, I_7, Key_2) ->
    case (I_7 < erlang:length(Cleaned)) of
        true ->
            Cipher_2 = lists:append((case Cipher of nil -> []; _ -> Cipher end), [string:substr(Cleaned, I_7 + 1, 1)]),
            I_8 = (I_7 + 1),
            Fun_4_loop(Alphabet, Cipher_2, Cleaned, I_8, Key_2);
        _ -> {Alphabet, Cipher, Cleaned, I_7, Key_2}
    end
end,
{Alphabet, Cipher_2, Cleaned, I_8, Key_2} = Fun_4(Alphabet, Cipher, Cleaned, I_7, Key_2),
        Offset = erlang:length(Cleaned),
        J = erlang:length(Cipher_2),
        Fun_6 = fun Fun_6_loop(Alphabet, Cipher_2, Cleaned, I_8, J, Key_2, Offset) ->
    case (J < 26) of
        true ->
            Char = string:substr(Alphabet, (J - Offset) + 1, 1),
            Fun_5 = fun Fun_5_loop(Alphabet, Char, Cipher_2, Cleaned, I_8, J, Key_2, Offset) ->
    case contains_char(Cleaned, Char) of
        true ->
            Offset_2 = (Offset - 1),
            Char_2 = string:substr(Alphabet, (J - Offset_2) + 1, 1),
            Fun_5_loop(Alphabet, Char_2, Cipher_2, Cleaned, I_8, J, Key_2, Offset_2);
        _ -> {Alphabet, Char, Cipher_2, Cleaned, I_8, J, Key_2, Offset}
    end
end,
{Alphabet, Char_2, Cipher_2, Cleaned, I_8, J, Key_2, Offset_2} = Fun_5(Alphabet, Char, Cipher_2, Cleaned, I_8, J, Key_2, Offset),
            Cipher_3 = lists:append((case Cipher_2 of nil -> []; _ -> Cipher_2 end), [Char_2]),
            J_2 = (J + 1),
            Fun_6_loop(Alphabet, Cipher_3, Cleaned, I_8, J_2, Key_2, Offset_2);
        _ -> {Alphabet, Cipher_2, Cleaned, I_8, J, Key_2, Offset}
    end
end,
{Alphabet, Cipher_3, Cleaned, I_8, J_2, Key_2, Offset_2} = Fun_6(Alphabet, Cipher_2, Cleaned, I_8, J, Key_2, Offset),
        Cipher_3
    catch {return, RetCatch} -> RetCatch end.

index_in_list(Lst, Ch_6) ->
    try
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(Ch_6, I_9, Lst) ->
    case (I_9 < erlang:length(Lst)) of
        true ->
            case ((case erlang:is_map(Lst) of true -> maps:get(I_9, Lst, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Lst) + I_9 + 1, Lst); _ -> mochi_nth(I_9 + 1, Lst) end end) == Ch_6) of
        true -> throw({return, I_9});
        _ -> ok
    end,
            I_10 = (I_9 + 1),
            Fun_7_loop(Ch_6, I_10, Lst);
        _ -> {Ch_6, I_9, Lst}
    end
end,
{Ch_6, I_10, Lst} = Fun_7(Ch_6, I_9, Lst),
        -1
    catch {return, RetCatch} -> RetCatch end.

encipher(Message, Cipher_4) ->
    try
        Alphabet_2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Msg = to_upper(Message),
        Res_8 = "",
        I_11 = 0,
        Fun_8 = fun Fun_8_loop(Alphabet_2, Cipher_4, I_11, Message, Msg, Res_8) ->
    case (I_11 < erlang:length(Msg)) of
        true ->
            Ch_7 = string:substr(Msg, I_11 + 1, 1),
            Idx_2 = index_in_string(Alphabet_2, Ch_7),
            case (Idx_2 >= 0) of
        true -> Res_9 = (Res_8 ++ (case erlang:is_map(Cipher_4) of true -> maps:get(Idx_2, Cipher_4, nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(Cipher_4) + Idx_2 + 1, Cipher_4); _ -> mochi_nth(Idx_2 + 1, Cipher_4) end end)),
            Res_11 = Res_9;
        _ -> Res_10 = (Res_8 ++ Ch_7),
            Res_11 = Res_10
    end,
            I_12 = (I_11 + 1),
            Fun_8_loop(Alphabet_2, Cipher_4, I_12, Message, Msg, Res_11);
        _ -> {Alphabet_2, Cipher_4, I_11, Message, Msg, Res_8}
    end
end,
{Alphabet_2, Cipher_4, I_12, Message, Msg, Res_11} = Fun_8(Alphabet_2, Cipher_4, I_11, Message, Msg, Res_8),
        Res_11
    catch {return, RetCatch} -> RetCatch end.

decipher(Message_2, Cipher_5) ->
    try
        Alphabet_3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Msg_2 = to_upper(Message_2),
        Res_12 = "",
        I_13 = 0,
        Fun_9 = fun Fun_9_loop(Alphabet_3, Cipher_5, I_13, Message_2, Msg_2, Res_12) ->
    case (I_13 < erlang:length(Msg_2)) of
        true ->
            Ch_8 = string:substr(Msg_2, I_13 + 1, 1),
            Idx_3 = index_in_list(Cipher_5, Ch_8),
            case (Idx_3 >= 0) of
        true -> Res_13 = (Res_12 ++ string:substr(Alphabet_3, Idx_3 + 1, 1)),
            Res_15 = Res_13;
        _ -> Res_14 = (Res_12 ++ Ch_8),
            Res_15 = Res_14
    end,
            I_14 = (I_13 + 1),
            Fun_9_loop(Alphabet_3, Cipher_5, I_14, Message_2, Msg_2, Res_15);
        _ -> {Alphabet_3, Cipher_5, I_13, Message_2, Msg_2, Res_12}
    end
end,
{Alphabet_3, Cipher_5, I_14, Message_2, Msg_2, Res_15} = Fun_9(Alphabet_3, Cipher_5, I_13, Message_2, Msg_2, Res_12),
        Res_15
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('cipher_map', create_cipher_map("Goodbye!!")),
    erlang:put('encoded', encipher("Hello World!!", erlang:get('cipher_map'))),
    io:format("~ts~n", [mochi_repr(erlang:get('encoded'))]),
    io:format("~ts~n", [mochi_repr(decipher(erlang:get('encoded'), erlang:get('cipher_map')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
