#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/2, dencrypt/2, main/0]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

index_of(S, C) ->
    try
        I = 0,
        Fun = fun Fun_loop(C, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == C) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(C, I_2, S);
        _ -> {C, I, S}
    end
end,
{C, I_2, S} = Fun(C, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

dencrypt(S_2, N) ->
    try
        Out = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, N, Out, S_2) ->
    case (I_3 < erlang:length(S_2)) of
        true ->
            Ch = string:substr(S_2, I_3 + 1, ((I_3 + 1) - I_3)),
            Idx_u = index_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch),
            case (Idx_u >= 0) of
        true -> New_idx = mochi_mod((Idx_u + N), 26),
            Out_2 = (Out ++ string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", New_idx + 1, ((New_idx + 1) - New_idx))),
            Idx_l_2 = nil,
            New_idx_4 = New_idx,
            Out_6 = Out_2;
        _ -> Idx_l = index_of("abcdefghijklmnopqrstuvwxyz", Ch),
            case (Idx_l >= 0) of
        true -> New_idx_2 = mochi_mod((Idx_l + N), 26),
            Out_3 = (Out ++ string:substr("abcdefghijklmnopqrstuvwxyz", New_idx_2 + 1, ((New_idx_2 + 1) - New_idx_2))),
            New_idx_3 = New_idx_2,
            Out_5 = Out_3;
        _ -> Out_4 = (Out ++ Ch),
            New_idx_3 = nil,
            Out_5 = Out_4
    end,
            Idx_l_2 = Idx_l,
            New_idx_4 = New_idx_3,
            Out_6 = Out_5
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, N, Out_6, S_2);
        _ -> {I_3, N, Out, S_2}
    end
end,
{I_4, N, Out_6, S_2} = Fun_2(I_3, N, Out, S_2),
        Out_6
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Msg = "My secret bank account number is 173-52946 so don't tell anyone!!",
        S_3 = dencrypt("My secret bank account number is 173-52946 so don't tell anyone!!", 13),
        io:format("~ts~n", [mochi_repr(S_3)]),
        io:format("~ts~n", [mochi_str((dencrypt(S_3, 13) == "My secret bank account number is 173-52946 so don't tell anyone!!"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('uppercase', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    erlang:put('lowercase', "abcdefghijklmnopqrstuvwxyz"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
