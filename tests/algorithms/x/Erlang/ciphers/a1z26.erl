#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexof/2, chartonum/1, numtochar/1, encode/1, decode/1, main/0]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] when is_list(C) -> hd(C);
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

indexof(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

chartonum(Ch_2) ->
    try
        Letters = "abcdefghijklmnopqrstuvwxyz",
        Idx = mochi_index_of("abcdefghijklmnopqrstuvwxyz", Ch_2),
        case (Idx >= 0) of
        true -> throw({return, (Idx + 1)});
        _ -> ok
    end,
        0
    catch {return, RetCatch} -> RetCatch end.

numtochar(N) ->
    try
        Letters_2 = "abcdefghijklmnopqrstuvwxyz",
        case ((N >= 1) andalso (N =< 26)) of
        true -> throw({return, string:substr("abcdefghijklmnopqrstuvwxyz", (N - 1) + 1, (N - (N - 1)))});
        _ -> ok
    end,
        "?"
    catch {return, RetCatch} -> RetCatch end.

encode(Plain) ->
    try
        Res = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Plain, Res) ->
    case (I_3 < erlang:length(Plain)) of
        true ->
            Ch_3 = string:to_lower(string:substr(Plain, I_3 + 1, ((I_3 + 1) - I_3))),
            Val = chartonum(Ch_3),
            case (Val > 0) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Val]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Plain, Res_3);
        _ -> {I_3, Plain, Res}
    end
end,
{I_4, Plain, Res_3} = Fun_2(I_3, Plain, Res),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

decode(Encoded) ->
    try
        Out = "",
        Fun_3 = fun Fun_3_loop(List, Encoded, Out) ->
    case List of
        [] -> {Encoded, Out};
        [N_2|N_2_rest] ->
            Out_2 = (Out ++ numtochar(N_2)),
            Fun_3_loop(N_2_rest, Encoded, Out_2);
        _ -> {Encoded, Out}
    end
end,
{Encoded, Out_2} = Fun_3(Encoded, Encoded, Out),
        Out_2
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_repr("-> ")]),
        Text = string:to_lower(((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)())),
        Enc = encode(Text),
        io:format("~ts~n", [mochi_repr(("Encoded: " ++ mochi_str(Enc)))]),
        io:format("~ts~n", [mochi_repr(("Decoded: " ++ decode(Enc)))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
