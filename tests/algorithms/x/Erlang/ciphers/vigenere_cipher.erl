#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, find_index/2, to_upper_char/1, to_lower_char/1, is_upper/1, to_upper_string/1]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

find_index(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < length(S)) of
        true ->
            case (string:substr(S, I + 1, 1) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, Ret} -> Ret end.

to_upper_char(Ch_2) ->
    try
        Idx = find_index("abcdefghijklmnopqrstuvwxyz", Ch_2),
        case (Idx >= 0) of
        true -> throw({return, string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Idx + 1, 1)});
        _ -> ok
    end,
        Ch_2
    catch {return, Ret} -> Ret end.

to_lower_char(Ch_3) ->
    try
        Idx_2 = find_index("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch_3),
        case (Idx_2 >= 0) of
        true -> throw({return, string:substr("abcdefghijklmnopqrstuvwxyz", Idx_2 + 1, 1)});
        _ -> ok
    end,
        Ch_3
    catch {return, Ret} -> Ret end.

is_upper(Ch_4) ->
    try
        (find_index("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch_4) >= 0)
    catch {return, Ret} -> Ret end.

to_upper_string(S_2) ->
    try
        Res = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Res, S_2) ->
    case (I_3 < length(S_2)) of
        true ->
            Res_2 = (Res ++ to_upper_char(string:substr(S_2, I_3 + 1, 1))),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Res_2, S_2);
        _ -> {I_3, Res, S_2}
    end
end,
{I_4, Res_2, S_2} = Fun_2(I_3, Res, S_2),
        Res_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('LETTERS', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    erlang:put('LETTERS_LOWER', "abcdefghijklmnopqrstuvwxyz"),
    erlang:put('key', "HDarji"),
    erlang:put('message', "This is Harshil Darji from Dharmaj."),
    erlang:put('key_up', to_upper_string("HDarji")),
    erlang:put('encrypted', ""),
    erlang:put('key_index', 0),
    erlang:put('i', 0),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('i') < length("This is Harshil Darji from Dharmaj.")) of
        true ->
            Symbol = string:substr("This is Harshil Darji from Dharmaj.", erlang:get('i') + 1, 1),
            Upper_symbol = to_upper_char(Symbol),
            Num = find_index("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Upper_symbol),
            case (Num >= 0) of
        true -> Num_2 = (Num + find_index("ABCDEFGHIJKLMNOPQRSTUVWXYZ", string:substr(erlang:get('key_up'), erlang:get('key_index') + 1, 1))),
            Num_3 = mochi_mod(Num_2, length("ABCDEFGHIJKLMNOPQRSTUVWXYZ")),
            case is_upper(Symbol) of
        true -> erlang:put('encrypted', (erlang:get('encrypted') ++ string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Num_3 + 1, 1)));
        _ -> erlang:put('encrypted', (erlang:get('encrypted') ++ to_lower_char(string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Num_3 + 1, 1))))
    end,
            erlang:put('key_index', (erlang:get('key_index') + 1)),
            case (erlang:get('key_index') == length(erlang:get('key_up'))) of
        true -> erlang:put('key_index', 0);
        _ -> ok
    end,
            Num_4 = Num_3;
        _ -> erlang:put('encrypted', (erlang:get('encrypted') ++ Symbol)),
            Num_4 = Num
    end,
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    io:format("~ts~n", [mochi_repr(erlang:get('encrypted'))]),
    erlang:put('decrypted', ""),
    erlang:put('key_index', 0),
    erlang:put('i', 0),
    Fun_4 = fun Fun_4_loop() ->
    case (erlang:get('i') < length(erlang:get('encrypted'))) of
        true ->
            Symbol_2 = string:substr(erlang:get('encrypted'), erlang:get('i') + 1, 1),
            Upper_symbol_2 = to_upper_char(Symbol_2),
            Num_5 = find_index("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Upper_symbol_2),
            case (Num_5 >= 0) of
        true -> Num_6 = (Num_5 - find_index("ABCDEFGHIJKLMNOPQRSTUVWXYZ", string:substr(erlang:get('key_up'), erlang:get('key_index') + 1, 1))),
            Num_7 = mochi_mod(Num_6, length("ABCDEFGHIJKLMNOPQRSTUVWXYZ")),
            case is_upper(Symbol_2) of
        true -> erlang:put('decrypted', (erlang:get('decrypted') ++ string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Num_7 + 1, 1)));
        _ -> erlang:put('decrypted', (erlang:get('decrypted') ++ to_lower_char(string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Num_7 + 1, 1))))
    end,
            erlang:put('key_index', (erlang:get('key_index') + 1)),
            case (erlang:get('key_index') == length(erlang:get('key_up'))) of
        true -> erlang:put('key_index', 0);
        _ -> ok
    end,
            Num_8 = Num_7;
        _ -> erlang:put('decrypted', (erlang:get('decrypted') ++ Symbol_2)),
            Num_8 = Num_5
    end,
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_4_loop();
        _ -> {}
    end
end,
{} = Fun_4(),
    io:format("~ts~n", [mochi_repr(erlang:get('decrypted'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
