#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, set_seed/1, randint/2, ord/1, chr/1, encrypt/1, decrypt/2]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

set_seed(S) ->
    try
        erlang:put('seed', S),
        nil
    catch {return, Ret} -> Ret end.

randint(A, B) ->
    try
        erlang:put('seed', (((erlang:get('seed') * 1103515245) + 12345) rem 2147483648)),
        ((erlang:get('seed') rem ((B - A) + 1)) + A)
    catch {return, Ret} -> Ret end.

ord(Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I) ->
    case (I < length(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")) of
        true ->
            case (string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", I + 1, 1) == Ch) of
        true -> throw({return, (32 + I)});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2);
        _ -> {Ch, I}
    end
end,
{Ch, I_2} = Fun(Ch, I),
        0
    catch {return, Ret} -> Ret end.

chr(Code) ->
    try
        (case ((Code < 32) orelse (Code > 126)) of
    true -> "";
    _ -> string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", (Code - 32) + 1, 1)
end)
    catch {return, Ret} -> Ret end.

encrypt(Text) ->
    try
        Cipher = [],
        Key = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Cipher, I_3, Key, Text) ->
    case (I_3 < length(Text)) of
        true ->
            P = ord(string:substr(Text, I_3 + 1, 1)),
            K = randint(1, 300),
            C = ((P + K) * K),
            Cipher_2 = lists:append(Cipher, [C]),
            Key_2 = lists:append(Key, [K]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Cipher_2, I_4, Key_2, Text);
        _ -> {Cipher, I_3, Key, Text}
    end
end,
{Cipher_2, I_4, Key_2, Text} = Fun_2(Cipher, I_3, Key, Text),
        Res = #{},
        Res_2 = maps:put("cipher", Cipher_2, Res),
        Res_3 = maps:put("key", Key_2, Res_2),
        Res_3
    catch {return, Ret} -> Ret end.

decrypt(Cipher_3, Key_3) ->
    try
        Plain = "",
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Cipher_3, I_5, Key_3, Plain) ->
    case (I_5 < length(Key_3)) of
        true ->
            P_2 = (((case erlang:is_map(Cipher_3) of true -> maps:get(I_5, Cipher_3, nil); _ -> lists:nth(I_5 + 1, Cipher_3) end) - ((case erlang:is_map(Key_3) of true -> maps:get(I_5, Key_3, nil); _ -> lists:nth(I_5 + 1, Key_3) end) * (case erlang:is_map(Key_3) of true -> maps:get(I_5, Key_3, nil); _ -> lists:nth(I_5 + 1, Key_3) end))) div (case erlang:is_map(Key_3) of true -> maps:get(I_5, Key_3, nil); _ -> lists:nth(I_5 + 1, Key_3) end)),
            Plain_2 = (Plain ++ chr(P_2)),
            I_6 = (I_5 + 1),
            Fun_3_loop(Cipher_3, I_6, Key_3, Plain_2);
        _ -> {Cipher_3, I_5, Key_3, Plain}
    end
end,
{Cipher_3, I_6, Key_3, Plain_2} = Fun_3(Cipher_3, I_5, Key_3, Plain),
        Plain_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    erlang:put('ascii_chars', " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"),
    set_seed(1),
    erlang:put('res', encrypt("Hello")),
    erlang:put('cipher', maps:get("cipher", erlang:get('res'), nil)),
    erlang:put('key', maps:get("key", erlang:get('res'), nil)),
    io:format("~ts~n", [mochi_repr(erlang:get('cipher'))]),
    io:format("~ts~n", [mochi_repr(erlang:get('key'))]),
    io:format("~ts~n", [mochi_repr(decrypt(erlang:get('cipher'), erlang:get('key')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
