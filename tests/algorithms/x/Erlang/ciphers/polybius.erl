#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, letter_to_numbers/1, numbers_to_letter/2, char_to_int/1, encode/1, decode/1]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

letter_to_numbers(Letter) ->
    try
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Letter) ->
    case (I < erlang:length(erlang:get('square'))) of
        true ->
            J = 0,
            Fun = fun Fun_loop(I, J, Letter) ->
    case (J < erlang:length((case erlang:is_map(erlang:get('square')) of true -> maps:get(I, erlang:get('square'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('square')) + I + 1, erlang:get('square')); _ -> mochi_nth(I + 1, erlang:get('square')) end end))) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(erlang:get('square')) of true -> maps:get(I, erlang:get('square'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('square')) + I + 1, erlang:get('square')); _ -> mochi_nth(I + 1, erlang:get('square')) end end)) of true -> maps:get(J, (case erlang:is_map(erlang:get('square')) of true -> maps:get(I, erlang:get('square'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('square')) + I + 1, erlang:get('square')); _ -> mochi_nth(I + 1, erlang:get('square')) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('square')) of true -> maps:get(I, erlang:get('square'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('square')) + I + 1, erlang:get('square')); _ -> mochi_nth(I + 1, erlang:get('square')) end end)) + J + 1, (case erlang:is_map(erlang:get('square')) of true -> maps:get(I, erlang:get('square'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('square')) + I + 1, erlang:get('square')); _ -> mochi_nth(I + 1, erlang:get('square')) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(erlang:get('square')) of true -> maps:get(I, erlang:get('square'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('square')) + I + 1, erlang:get('square')); _ -> mochi_nth(I + 1, erlang:get('square')) end end)) end end) == Letter) of
        true -> throw({return, [(I + 1), (J + 1)]});
        _ -> ok
    end,
            J_2 = (J + 1),
            Fun_loop(I, J_2, Letter);
        _ -> {I, J, Letter}
    end
end,
{I, J_2, Letter} = Fun(I, J, Letter),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Letter);
        _ -> {I, Letter}
    end
end,
{I_2, Letter} = Fun_2(I, Letter),
        [0, 0]
    catch {return, RetCatch} -> RetCatch end.

numbers_to_letter(Index1, Index2) ->
    try
        (case erlang:is_map((case erlang:is_map(erlang:get('square')) of true -> maps:get((Index1 - 1), erlang:get('square'), nil); _ -> case (Index1 - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('square')) + (Index1 - 1) + 1, erlang:get('square')); _ -> mochi_nth((Index1 - 1) + 1, erlang:get('square')) end end)) of true -> maps:get((Index2 - 1), (case erlang:is_map(erlang:get('square')) of true -> maps:get((Index1 - 1), erlang:get('square'), nil); _ -> case (Index1 - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('square')) + (Index1 - 1) + 1, erlang:get('square')); _ -> mochi_nth((Index1 - 1) + 1, erlang:get('square')) end end), nil); _ -> case (Index2 - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('square')) of true -> maps:get((Index1 - 1), erlang:get('square'), nil); _ -> case (Index1 - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('square')) + (Index1 - 1) + 1, erlang:get('square')); _ -> mochi_nth((Index1 - 1) + 1, erlang:get('square')) end end)) + (Index2 - 1) + 1, (case erlang:is_map(erlang:get('square')) of true -> maps:get((Index1 - 1), erlang:get('square'), nil); _ -> case (Index1 - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('square')) + (Index1 - 1) + 1, erlang:get('square')); _ -> mochi_nth((Index1 - 1) + 1, erlang:get('square')) end end)); _ -> mochi_nth((Index2 - 1) + 1, (case erlang:is_map(erlang:get('square')) of true -> maps:get((Index1 - 1), erlang:get('square'), nil); _ -> case (Index1 - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('square')) + (Index1 - 1) + 1, erlang:get('square')); _ -> mochi_nth((Index1 - 1) + 1, erlang:get('square')) end end)) end end)
    catch {return, RetCatch} -> RetCatch end.

char_to_int(Ch) ->
    try
        case (Ch == "1") of
        true -> throw({return, 1});
        _ -> ok
    end,
        case (Ch == "2") of
        true -> throw({return, 2});
        _ -> ok
    end,
        case (Ch == "3") of
        true -> throw({return, 3});
        _ -> ok
    end,
        case (Ch == "4") of
        true -> throw({return, 4});
        _ -> ok
    end,
        case (Ch == "5") of
        true -> throw({return, 5});
        _ -> ok
    end,
        0
    catch {return, RetCatch} -> RetCatch end.

encode(Message) ->
    try
        Message_2 = string:to_lower(Message),
        Encoded = "",
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Encoded, I_3, Message_2) ->
    case (I_3 < erlang:length(Message_2)) of
        true ->
            Ch_2 = string:substr(Message_2, I_3 + 1, 1),
            case (Ch_2 == "j") of
        true -> Ch_3 = "i",
            Ch_4 = Ch_3;
        _ -> Ch_4 = Ch_2
    end,
            case (Ch_4 /= " ") of
        true -> Nums = letter_to_numbers(Ch_4),
            Encoded_2 = ((Encoded ++ mochi_str((case erlang:is_map(Nums) of true -> maps:get(0, Nums, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Nums) + 0 + 1, Nums); _ -> mochi_nth(0 + 1, Nums) end end))) ++ mochi_str((case erlang:is_map(Nums) of true -> maps:get(1, Nums, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Nums) + 1 + 1, Nums); _ -> mochi_nth(1 + 1, Nums) end end))),
            Encoded_4 = Encoded_2,
            Nums_2 = Nums;
        _ -> Encoded_3 = (Encoded ++ " "),
            Encoded_4 = Encoded_3,
            Nums_2 = nil
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(Encoded_4, I_4, Message_2);
        _ -> {Encoded, I_3, Message_2}
    end
end,
{Encoded_4, I_4, Message_2} = Fun_3(Encoded, I_3, Message_2),
        Encoded_4
    catch {return, RetCatch} -> RetCatch end.

decode(Message_3) ->
    try
        Decoded = "",
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Decoded, I_5, Message_3) ->
    case (I_5 < erlang:length(Message_3)) of
        true ->
            case (string:substr(Message_3, I_5 + 1, 1) == " ") of
        true -> Decoded_2 = (Decoded ++ " "),
            I_6 = (I_5 + 1),
            Decoded_4 = Decoded_2,
            I_8 = I_6,
            Index1_3 = nil,
            Index2_3 = nil,
            Letter_3 = nil;
        _ -> Index1_2 = char_to_int(string:substr(Message_3, I_5 + 1, 1)),
            Index2_2 = char_to_int(string:substr(Message_3, (I_5 + 1) + 1, 1)),
            Letter_2 = numbers_to_letter(Index1_2, Index2_2),
            Decoded_3 = (Decoded ++ Letter_2),
            I_7 = (I_5 + 2),
            Decoded_4 = Decoded_3,
            I_8 = I_7,
            Index1_3 = Index1_2,
            Index2_3 = Index2_2,
            Letter_3 = Letter_2
    end,
            Fun_4_loop(Decoded_4, I_8, Message_3);
        _ -> {Decoded, I_5, Message_3}
    end
end,
{Decoded_4, I_8, Message_3} = Fun_4(Decoded, I_5, Message_3),
        Decoded_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('square', [["a", "b", "c", "d", "e"], ["f", "g", "h", "i", "k"], ["l", "m", "n", "o", "p"], ["q", "r", "s", "t", "u"], ["v", "w", "x", "y", "z"]]),
    io:format("~ts~n", [mochi_repr(encode("test message"))]),
    io:format("~ts~n", [mochi_repr(encode("Test Message"))]),
    io:format("~ts~n", [mochi_repr(decode("44154344 32154343112215"))]),
    io:format("~ts~n", [mochi_repr(decode("4415434432154343112215"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
