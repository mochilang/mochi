#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexof/2, ord/1, chr/1, to_binary/2, bin_to_int/1, reverse/1, base10_to_85/1, base85_to_10/1, ascii85_encode/1, ascii85_decode/1]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_index_of(S, Ch) when is_list(S) ->
    Char = case Ch of
        [C|_] when is_list(C) -> hd(C);
        [C|_] -> C;
        <<C,_/binary>> -> C;
        C when is_integer(C) -> C;
        _ -> $\0
    end,
    case string:chr(S, Char) of
        0 -> -1;
        N -> N - 1
    end;
mochi_index_of(_, _) -> -1.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

indexof(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, 1) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

ord(Ch_2) ->
    try
        Idx = mochi_index_of("!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu", Ch_2),
        case (Idx >= 0) of
        true -> throw({return, (33 + Idx)});
        _ -> ok
    end,
        0
    catch {return, RetCatch} -> RetCatch end.

chr(N) ->
    try
        (case ((N >= 33) andalso (N =< 117)) of
    true -> string:substr("!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu", (N - 33) + 1, ((N - 32) - (N - 33)));
    _ -> "?"
end)
    catch {return, RetCatch} -> RetCatch end.

to_binary(N_2, Bits) ->
    try
        B = "",
        Val = N_2,
        Fun_2 = fun Fun_2_loop(B, Bits, N_2, Val) ->
    case (Val > 0) of
        true ->
            B_2 = (mochi_str(mochi_mod(Val, 2)) ++ B),
            Val_2 = (Val div 2),
            Fun_2_loop(B_2, Bits, N_2, Val_2);
        _ -> {B, Bits, N_2, Val}
    end
end,
{B_2, Bits, N_2, Val_2} = Fun_2(B, Bits, N_2, Val),
        Fun_3 = fun Fun_3_loop(B_2, Bits, N_2, Val_2) ->
    case (erlang:length(B_2) < Bits) of
        true ->
            B_3 = ("0" ++ B_2),
            Fun_3_loop(B_3, Bits, N_2, Val_2);
        _ -> {B_2, Bits, N_2, Val_2}
    end
end,
{B_3, Bits, N_2, Val_2} = Fun_3(B_2, Bits, N_2, Val_2),
        case (erlang:length(B_3) == 0) of
        true -> B_4 = "0",
            B_5 = B_4;
        _ -> B_5 = B_3
    end,
        B_5
    catch {return, RetCatch} -> RetCatch end.

bin_to_int(Bits_2) ->
    try
        N_3 = 0,
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Bits_2, I_3, N_3) ->
    case (I_3 < erlang:length(Bits_2)) of
        true ->
            case (string:substr(Bits_2, I_3 + 1, 1) == "1") of
        true -> N_4 = ((N_3 * 2) + 1),
            N_6 = N_4;
        _ -> N_5 = (N_3 * 2),
            N_6 = N_5
    end,
            I_4 = (I_3 + 1),
            Fun_4_loop(Bits_2, I_4, N_6);
        _ -> {Bits_2, I_3, N_3}
    end
end,
{Bits_2, I_4, N_6} = Fun_4(Bits_2, I_3, N_3),
        N_6
    catch {return, RetCatch} -> RetCatch end.

reverse(S_2) ->
    try
        Res = "",
        I_5 = (erlang:length(S_2) - 1),
        Fun_5 = fun Fun_5_loop(I_5, Res, S_2) ->
    case (I_5 >= 0) of
        true ->
            Res_2 = (Res ++ string:substr(S_2, I_5 + 1, 1)),
            I_6 = (I_5 - 1),
            Fun_5_loop(I_6, Res_2, S_2);
        _ -> {I_5, Res, S_2}
    end
end,
{I_6, Res_2, S_2} = Fun_5(I_5, Res, S_2),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

base10_to_85(D) ->
    try
        (case (D > 0) of
    true -> (chr((mochi_mod(D, 85) + 33)) ++ base10_to_85((D div 85)));
    _ -> ""
end)
    catch {return, RetCatch} -> RetCatch end.

base85_to_10(Digits) ->
    try
        Value = 0,
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(Digits, I_7, Value) ->
    case (I_7 < erlang:length(Digits)) of
        true ->
            Value_2 = ((Value * 85) + (ord(string:substr(Digits, I_7 + 1, 1)) - 33)),
            I_8 = (I_7 + 1),
            Fun_6_loop(Digits, I_8, Value_2);
        _ -> {Digits, I_7, Value}
    end
end,
{Digits, I_8, Value_2} = Fun_6(Digits, I_7, Value),
        Value_2
    catch {return, RetCatch} -> RetCatch end.

ascii85_encode(Data) ->
    try
        Binary_data = "",
        Fun_7 = fun Fun_7_loop(List, Binary_data, Data) ->
    case List of
        [] -> {Binary_data, Data};
        [Ch_3|Ch_3_rest] ->
            Binary_data_2 = (Binary_data ++ to_binary(ord(Ch_3), 8)),
            Fun_7_loop(Ch_3_rest, Binary_data_2, Data);
        _ -> {Binary_data, Data}
    end
end,
{Binary_data_2, Data} = Fun_7(Data, Binary_data, Data),
        Null_values = mochi_safe_div((mochi_safe_mul(32, (mochi_safe_div(erlang:length(Binary_data_2), 32) + 1)) - erlang:length(Binary_data_2)), 8),
        Total_bits = mochi_safe_mul(32, (mochi_safe_div(erlang:length(Binary_data_2), 32) + 1)),
        Fun_8 = fun Fun_8_loop(Binary_data_2, Data, Null_values, Total_bits) ->
    case (erlang:length(Binary_data_2) < Total_bits) of
        true ->
            Binary_data_3 = (Binary_data_2 ++ "0"),
            Fun_8_loop(Binary_data_3, Data, Null_values, Total_bits);
        _ -> {Binary_data_2, Data, Null_values, Total_bits}
    end
end,
{Binary_data_3, Data, Null_values, Total_bits} = Fun_8(Binary_data_2, Data, Null_values, Total_bits),
        Result = "",
        I_9 = 0,
        Fun_9 = fun Fun_9_loop(Binary_data_3, Data, I_9, Null_values, Result, Total_bits) ->
    case (I_9 < erlang:length(Binary_data_3)) of
        true ->
            Chunk_bits = string:substr(Binary_data_3, I_9 + 1, ((I_9 + 32) - I_9)),
            Chunk_val = bin_to_int(Chunk_bits),
            Encoded = lists:reverse(base10_to_85(Chunk_val)),
            Result_2 = (Result ++ Encoded),
            I_10 = (I_9 + 32),
            Fun_9_loop(Binary_data_3, Data, I_10, Null_values, Result_2, Total_bits);
        _ -> {Binary_data_3, Data, I_9, Null_values, Result, Total_bits}
    end
end,
{Binary_data_3, Data, I_10, Null_values, Result_2, Total_bits} = Fun_9(Binary_data_3, Data, I_9, Null_values, Result, Total_bits),
        case (mochi_safe_fmod(Null_values, 4) /= 0) of
        true -> Result_3 = string:substr(Result_2, 0 + 1, ((erlang:length(Result_2) - Null_values) - 0)),
            Result_4 = Result_3;
        _ -> Result_4 = Result_2
    end,
        Result_4
    catch {return, RetCatch} -> RetCatch end.

ascii85_decode(Data_2) ->
    try
        Null_values_2 = (mochi_safe_mul(5, (mochi_safe_div(erlang:length(Data_2), 5) + 1)) - erlang:length(Data_2)),
        Binary_data_4 = Data_2,
        I_11 = 0,
        Fun_10 = fun Fun_10_loop(Binary_data_4, Data_2, I_11, Null_values_2) ->
    case (I_11 < Null_values_2) of
        true ->
            Binary_data_5 = (Binary_data_4 ++ "u"),
            I_12 = (I_11 + 1),
            Fun_10_loop(Binary_data_5, Data_2, I_12, Null_values_2);
        _ -> {Binary_data_4, Data_2, I_11, Null_values_2}
    end
end,
{Binary_data_5, Data_2, I_12, Null_values_2} = Fun_10(Binary_data_4, Data_2, I_11, Null_values_2),
        Result_5 = "",
        I_13 = 0,
        Fun_12 = fun Fun_12_loop(Binary_data_5, Data_2, I_13, Null_values_2, Result_5) ->
    case (I_13 < erlang:length(Binary_data_5)) of
        true ->
            Chunk = string:substr(Binary_data_5, I_13 + 1, ((I_13 + 5) - I_13)),
            Value_3 = base85_to_10(Chunk),
            Bits_3 = to_binary(Value_3, 32),
            J = 0,
            Fun_11 = fun Fun_11_loop(Binary_data_5, Bits_3, Chunk, Data_2, I_13, J, Null_values_2, Result_5, Value_3) ->
    case (J < 32) of
        true ->
            Byte_bits = string:substr(Bits_3, J + 1, ((J + 8) - J)),
            C = chr(bin_to_int(Byte_bits)),
            Result_6 = (Result_5 ++ C),
            J_2 = (J + 8),
            Fun_11_loop(Binary_data_5, Bits_3, Chunk, Data_2, I_13, J_2, Null_values_2, Result_6, Value_3);
        _ -> {Binary_data_5, Bits_3, Chunk, Data_2, I_13, J, Null_values_2, Result_5, Value_3}
    end
end,
{Binary_data_5, Bits_3, Chunk, Data_2, I_13, J_2, Null_values_2, Result_6, Value_3} = Fun_11(Binary_data_5, Bits_3, Chunk, Data_2, I_13, J, Null_values_2, Result_5, Value_3),
            I_14 = (I_13 + 5),
            Fun_12_loop(Binary_data_5, Data_2, I_14, Null_values_2, Result_6);
        _ -> {Binary_data_5, Data_2, I_13, Null_values_2, Result_5}
    end
end,
{Binary_data_5, Data_2, I_14, Null_values_2, Result_6} = Fun_12(Binary_data_5, Data_2, I_13, Null_values_2, Result_5),
        Trim = Null_values_2,
        case (mochi_safe_fmod(Null_values_2, 5) == 0) of
        true -> Trim_2 = (Null_values_2 - 1),
            Trim_3 = Trim_2;
        _ -> Trim_3 = Trim
    end,
        string:substr(Result_6, 0 + 1, ((erlang:length(Result_6) - Trim_3) - 0))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ascii85_chars', "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstu"),
    io:format("~ts~n", [mochi_repr(ascii85_encode(""))]),
    io:format("~ts~n", [mochi_repr(ascii85_encode("12345"))]),
    io:format("~ts~n", [mochi_repr(ascii85_encode("base 85"))]),
    io:format("~ts~n", [mochi_repr(ascii85_decode(""))]),
    io:format("~ts~n", [mochi_repr(ascii85_decode("0etOA2#"))]),
    io:format("~ts~n", [mochi_repr(ascii85_decode("@UX=h+?24"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
