#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, join_strings/1, encrypt_message/2, decrypt_message/2, main/0]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

join_strings(Xs) ->
    try
        Res = "",
        I = 0,
        Fun = fun Fun_loop(I, Res, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            Res_2 = (Res ++ (case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)),
            I_2 = (I + 1),
            Fun_loop(I_2, Res_2, Xs);
        _ -> {I, Res, Xs}
    end
end,
{I_2, Res_2, Xs} = Fun(I, Res, Xs),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

encrypt_message(Key, Message) ->
    try
        Result = "",
        Col = 0,
        Fun_3 = fun Fun_3_loop(Col, Key, Message, Result) ->
    case (Col < Key) of
        true ->
            Pointer = Col,
            Fun_2 = fun Fun_2_loop(Col, Key, Message, Pointer, Result) ->
    case (Pointer < erlang:length(Message)) of
        true ->
            Result_2 = (Result ++ string:substr(Message, Pointer + 1, ((Pointer + 1) - Pointer))),
            Pointer_2 = (Pointer + Key),
            Fun_2_loop(Col, Key, Message, Pointer_2, Result_2);
        _ -> {Col, Key, Message, Pointer, Result}
    end
end,
{Col, Key, Message, Pointer_2, Result_2} = Fun_2(Col, Key, Message, Pointer, Result),
            Col_2 = (Col + 1),
            Fun_3_loop(Col_2, Key, Message, Result_2);
        _ -> {Col, Key, Message, Result}
    end
end,
{Col_2, Key, Message, Result_2} = Fun_3(Col, Key, Message, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

decrypt_message(Key_2, Message_2) ->
    try
        Num_cols = mochi_safe_div(((erlang:length(Message_2) + Key_2) - 1), Key_2),
        Num_rows = Key_2,
        Num_shaded_boxes = (mochi_safe_mul(Num_cols, Num_rows) - erlang:length(Message_2)),
        Plain_text = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(I_3, Key_2, Message_2, Num_cols, Num_rows, Num_shaded_boxes, Plain_text) ->
    case (I_3 < Num_cols) of
        true ->
            Plain_text_2 = lists:append((case Plain_text of nil -> []; _ -> Plain_text end), [""]),
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, Key_2, Message_2, Num_cols, Num_rows, Num_shaded_boxes, Plain_text_2);
        _ -> {I_3, Key_2, Message_2, Num_cols, Num_rows, Num_shaded_boxes, Plain_text}
    end
end,
{I_4, Key_2, Message_2, Num_cols, Num_rows, Num_shaded_boxes, Plain_text_2} = Fun_4(I_3, Key_2, Message_2, Num_cols, Num_rows, Num_shaded_boxes, Plain_text),
        Col_3 = 0,
        Row = 0,
        Index = 0,
        Fun_5 = fun Fun_5_loop(Col_3, I_4, Index, Key_2, Message_2, Num_cols, Num_rows, Num_shaded_boxes, Plain_text_2, Row) ->
    case (Index < erlang:length(Message_2)) of
        true ->
            Plain_text_3 = lists:sublist(Plain_text_2, Col_3) ++ [((case erlang:is_map(Plain_text_2) of true -> maps:get(Col_3, Plain_text_2, nil); _ -> case Col_3 < 0 of true -> mochi_nth(erlang:length(Plain_text_2) + Col_3 + 1, Plain_text_2); _ -> mochi_nth(Col_3 + 1, Plain_text_2) end end) ++ string:substr(Message_2, Index + 1, ((Index + 1) - Index)))] ++ lists:nthtail(Col_3 + 1, Plain_text_2),
            Col_4 = (Col_3 + 1),
            case ((Col_4 == Num_cols) orelse ((Col_4 == (Num_cols - 1)) andalso (Row >= (Num_rows - Num_shaded_boxes)))) of
        true -> Col_5 = 0,
            Row_2 = (Row + 1),
            Col_6 = Col_5,
            Row_3 = Row_2;
        _ -> Col_6 = Col_4,
            Row_3 = Row
    end,
            Index_2 = (Index + 1),
            Fun_5_loop(Col_6, I_4, Index_2, Key_2, Message_2, Num_cols, Num_rows, Num_shaded_boxes, Plain_text_3, Row_3);
        _ -> {Col_3, I_4, Index, Key_2, Message_2, Num_cols, Num_rows, Num_shaded_boxes, Plain_text_2, Row}
    end
end,
{Col_6, I_4, Index_2, Key_2, Message_2, Num_cols, Num_rows, Num_shaded_boxes, Plain_text_3, Row_3} = Fun_5(Col_3, I_4, Index, Key_2, Message_2, Num_cols, Num_rows, Num_shaded_boxes, Plain_text_2, Row),
        join_strings(Plain_text_3)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_repr("Enter message: ")]),
        Message_3 = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
        Max_key = (erlang:length(Message_3) - 1),
        io:format("~ts~n", [mochi_repr((("Enter key [2-" ++ mochi_str(Max_key)) ++ "]: "))]),
        Key_3 = mochi_to_int(((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)())),
        io:format("~ts~n", [mochi_repr("Encryption/Decryption [e/d]: ")]),
        Mode = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
        Text = "",
        First = string:substr(Mode, 0 + 1, (1 - 0)),
        case ((First == "e") orelse (First == "E")) of
        true -> Text_2 = encrypt_message(Key_3, Message_3),
            Text_5 = Text_2;
        _ -> case ((First == "d") orelse (First == "D")) of
        true -> Text_3 = decrypt_message(Key_3, Message_3),
            Text_4 = Text_3;
        _ -> Text_4 = Text
    end,
            Text_5 = Text_4
    end,
        io:format("~ts~n", [mochi_repr((("Output:\n" ++ Text_5) ++ "|"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
