#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/2, encrypt/3, decrypt/3, brute_force/2, main/0]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

index_of(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

encrypt(Input_string, Key, Alphabet) ->
    try
        Result = "",
        I_3 = 0,
        N = erlang:length(Alphabet),
        Fun_2 = fun Fun_2_loop(Alphabet, I_3, Input_string, Key, N, Result) ->
    case (I_3 < erlang:length(Input_string)) of
        true ->
            Ch_2 = string:substr(Input_string, I_3 + 1, ((I_3 + 1) - I_3)),
            Idx = index_of(Alphabet, Ch_2),
            case (Idx < 0) of
        true -> Result_2 = (Result ++ Ch_2),
            New_key_4 = nil,
            Result_4 = Result_2;
        _ -> New_key = mochi_mod((Idx + Key), N),
            case (New_key < 0) of
        true -> New_key_2 = (New_key + N),
            New_key_3 = New_key_2;
        _ -> New_key_3 = New_key
    end,
            Result_3 = (Result ++ string:substr(Alphabet, New_key_3 + 1, ((New_key_3 + 1) - New_key_3))),
            New_key_4 = New_key_3,
            Result_4 = Result_3
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Alphabet, I_4, Input_string, Key, N, Result_4);
        _ -> {Alphabet, I_3, Input_string, Key, N, Result}
    end
end,
{Alphabet, I_4, Input_string, Key, N, Result_4} = Fun_2(Alphabet, I_3, Input_string, Key, N, Result),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

decrypt(Input_string_2, Key_2, Alphabet_2) ->
    try
        Result_5 = "",
        I_5 = 0,
        N_2 = erlang:length(Alphabet_2),
        Fun_3 = fun Fun_3_loop(Alphabet_2, I_5, Input_string_2, Key_2, N_2, Result_5) ->
    case (I_5 < erlang:length(Input_string_2)) of
        true ->
            Ch_3 = string:substr(Input_string_2, I_5 + 1, ((I_5 + 1) - I_5)),
            Idx_2 = index_of(Alphabet_2, Ch_3),
            case (Idx_2 < 0) of
        true -> Result_6 = (Result_5 ++ Ch_3),
            New_key_8 = nil,
            Result_8 = Result_6;
        _ -> New_key_5 = mochi_mod((Idx_2 - Key_2), N_2),
            case (New_key_5 < 0) of
        true -> New_key_6 = (New_key_5 + N_2),
            New_key_7 = New_key_6;
        _ -> New_key_7 = New_key_5
    end,
            Result_7 = (Result_5 ++ string:substr(Alphabet_2, New_key_7 + 1, ((New_key_7 + 1) - New_key_7))),
            New_key_8 = New_key_7,
            Result_8 = Result_7
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Alphabet_2, I_6, Input_string_2, Key_2, N_2, Result_8);
        _ -> {Alphabet_2, I_5, Input_string_2, Key_2, N_2, Result_5}
    end
end,
{Alphabet_2, I_6, Input_string_2, Key_2, N_2, Result_8} = Fun_3(Alphabet_2, I_5, Input_string_2, Key_2, N_2, Result_5),
        Result_8
    catch {return, RetCatch} -> RetCatch end.

brute_force(Input_string_3, Alphabet_3) ->
    try
        Results = [],
        Key_3 = 1,
        N_3 = erlang:length(Alphabet_3),
        Fun_4 = fun Fun_4_loop(Alphabet_3, Input_string_3, Key_3, N_3, Results) ->
    case (Key_3 =< N_3) of
        true ->
            Message = decrypt(Input_string_3, Key_3, Alphabet_3),
            Results_2 = lists:append((case Results of nil -> []; _ -> Results end), [Message]),
            Key_4 = (Key_3 + 1),
            Fun_4_loop(Alphabet_3, Input_string_3, Key_4, N_3, Results_2);
        _ -> {Alphabet_3, Input_string_3, Key_3, N_3, Results}
    end
end,
{Alphabet_3, Input_string_3, Key_4, N_3, Results_2} = Fun_4(Alphabet_3, Input_string_3, Key_3, N_3, Results),
        Results_2
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Alpha = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Enc = encrypt("The quick brown fox jumps over the lazy dog", 8, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"),
        io:format("~ts~n", [mochi_repr(Enc)]),
        Dec = decrypt(Enc, 8, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"),
        io:format("~ts~n", [mochi_repr(Dec)]),
        Brute = brute_force("jFyuMy xIH'N vLONy zILwy Gy!", "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"),
        io:format("~ts~n", [mochi_repr((case erlang:is_map(Brute) of true -> maps:get(19, Brute, nil); _ -> case 19 < 0 of true -> mochi_nth(erlang:length(Brute) + 19 + 1, Brute); _ -> mochi_nth(19 + 1, Brute) end end))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('default_alphabet', "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
