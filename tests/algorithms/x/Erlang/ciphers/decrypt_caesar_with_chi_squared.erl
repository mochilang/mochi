#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, default_alphabet/0, default_frequencies/0, index_of/2, count_char/2, decrypt_caesar_with_chi_squared/4]).

% Generated by Mochi transpiler v0.10.59 (857f4cdc6a) on 2025-08-06 21:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

default_alphabet() ->
    try
        ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
    catch {return, Ret} -> Ret end.

default_frequencies() ->
    try
        #{"a" => 0.08497, "b" => 0.01492, "c" => 0.02202, "d" => 0.04253, "e" => 0.11162, "f" => 0.02228, "g" => 0.02015, "h" => 0.06094, "i" => 0.07546, "j" => 0.00153, "k" => 0.01292, "l" => 0.04025, "m" => 0.02406, "n" => 0.06749, "o" => 0.07507, "p" => 0.01929, "q" => 0.00095, "r" => 0.07587, "s" => 0.06327, "t" => 0.09356, "u" => 0.02758, "v" => 0.00978, "w" => 0.0256, "x" => 0.0015, "y" => 0.01994, "z" => 0.00077}
    catch {return, Ret} -> Ret end.

index_of(Xs, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, Xs) ->
    case (I < length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> lists:nth(I + 1, Xs) end) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, Xs);
        _ -> {Ch, I, Xs}
    end
end,
{Ch, I_2, Xs} = Fun(Ch, I, Xs),
        -1
    catch {return, Ret} -> Ret end.

count_char(S, Ch_2) ->
    try
        Count = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Ch_2, Count, I_3, S) ->
    case (I_3 < length(S)) of
        true ->
            case (string:substr(S, I_3 + 1, ((I_3 + 1) - I_3)) == Ch_2) of
        true -> Count_2 = (Count + 1),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Ch_2, Count_3, I_4, S);
        _ -> {Ch_2, Count, I_3, S}
    end
end,
{Ch_2, Count_3, I_4, S} = Fun_2(Ch_2, Count, I_3, S),
        Count_3
    catch {return, Ret} -> Ret end.

decrypt_caesar_with_chi_squared(Ciphertext, Cipher_alphabet, Frequencies_dict, Case_sensitive) ->
    try
        Alphabet_letters = Cipher_alphabet,
        case (length(Alphabet_letters) == 0) of
        true -> Alphabet_letters_2 = default_alphabet(),
            Alphabet_letters_3 = Alphabet_letters_2;
        _ -> Alphabet_letters_3 = Alphabet_letters
    end,
        Frequencies = Frequencies_dict,
        case (maps:size(Frequencies) == 0) of
        true -> Frequencies_2 = default_frequencies(),
            Frequencies_3 = Frequencies_2;
        _ -> Frequencies_3 = Frequencies
    end,
        case mochi_not(Case_sensitive) of
        true -> Ciphertext_2 = string:to_lower(Ciphertext),
            Ciphertext_3 = Ciphertext_2;
        _ -> Ciphertext_3 = Ciphertext
    end,
        Best_shift = 0,
        Best_chi = 0,
        Best_text = "",
        Shift = 0,
        Fun_5 = fun Fun_5_loop(Alphabet_letters_3, Best_chi, Best_shift, Best_text, Case_sensitive, Cipher_alphabet, Ciphertext_3, Frequencies_3, Frequencies_dict, Shift) ->
    case (Shift < length(Alphabet_letters_3)) of
        true ->
            Decrypted = "",
            I_5 = 0,
            Fun_3 = fun Fun_3_loop(Alphabet_letters_3, Best_chi, Best_shift, Best_text, Case_sensitive, Cipher_alphabet, Ciphertext_3, Decrypted, Frequencies_3, Frequencies_dict, I_5, Shift) ->
    case (I_5 < length(Ciphertext_3)) of
        true ->
            Ch_3 = string:substr(Ciphertext_3, I_5 + 1, ((I_5 + 1) - I_5)),
            Idx = index_of(Alphabet_letters_3, string:to_lower(Ch_3)),
            case (Idx >= 0) of
        true -> M = length(Alphabet_letters_3),
            New_idx = ((Idx - Shift) rem M),
            case (New_idx < 0) of
        true -> New_idx_2 = (New_idx + M),
            New_idx_3 = New_idx_2;
        _ -> New_idx_3 = New_idx
    end,
            New_char = (case erlang:is_map(Alphabet_letters_3) of true -> maps:get(New_idx_3, Alphabet_letters_3, nil); _ -> lists:nth(New_idx_3 + 1, Alphabet_letters_3) end),
            case (Case_sensitive andalso (Ch_3 /= string:to_lower(Ch_3))) of
        true -> Decrypted_2 = (Decrypted ++ string:to_upper(New_char)),
            Decrypted_4 = Decrypted_2;
        _ -> Decrypted_3 = (Decrypted ++ New_char),
            Decrypted_4 = Decrypted_3
    end,
            Decrypted_6 = Decrypted_4,
            M_2 = M,
            New_char_2 = New_char,
            New_idx_4 = New_idx_3;
        _ -> Decrypted_5 = (Decrypted ++ Ch_3),
            Decrypted_6 = Decrypted_5,
            M_2 = nil,
            New_char_2 = nil,
            New_idx_4 = nil
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Alphabet_letters_3, Best_chi, Best_shift, Best_text, Case_sensitive, Cipher_alphabet, Ciphertext_3, Decrypted_6, Frequencies_3, Frequencies_dict, I_6, Shift);
        _ -> {Alphabet_letters_3, Best_chi, Best_shift, Best_text, Case_sensitive, Cipher_alphabet, Ciphertext_3, Decrypted, Frequencies_3, Frequencies_dict, I_5, Shift}
    end
end,
{Alphabet_letters_3, Best_chi, Best_shift, Best_text, Case_sensitive, Cipher_alphabet, Ciphertext_3, Decrypted_6, Frequencies_3, Frequencies_dict, I_6, Shift} = Fun_3(Alphabet_letters_3, Best_chi, Best_shift, Best_text, Case_sensitive, Cipher_alphabet, Ciphertext_3, Decrypted, Frequencies_3, Frequencies_dict, I_5, Shift),
            Chi = 0,
            Lowered = (case Case_sensitive of
    true -> string:to_lower(Decrypted_6);
    _ -> Decrypted_6
end),
            J = 0,
            Fun_4 = fun Fun_4_loop(Alphabet_letters_3, Best_chi, Best_shift, Best_text, Case_sensitive, Chi, Cipher_alphabet, Ciphertext_3, Decrypted_6, Frequencies_3, Frequencies_dict, I_6, J, Lowered, Shift) ->
    case (J < length(Alphabet_letters_3)) of
        true ->
            Letter = (case erlang:is_map(Alphabet_letters_3) of true -> maps:get(J, Alphabet_letters_3, nil); _ -> lists:nth(J + 1, Alphabet_letters_3) end),
            Occ = count_char(Lowered, Letter),
            case (Occ > 0) of
        true -> Occf = float(Occ),
            Expected = mochi_safe_mul(maps:get(Letter, Frequencies_3, nil), Occf),
            Diff = (Occf - Expected),
            Chi_2 = (Chi + mochi_safe_mul(mochi_safe_div(mochi_safe_mul(Diff, Diff), Expected), Occf)),
            Chi_3 = Chi_2,
            Diff_2 = Diff,
            Expected_2 = Expected,
            Occf_2 = Occf;
        _ -> Chi_3 = Chi,
            Diff_2 = nil,
            Expected_2 = nil,
            Occf_2 = nil
    end,
            J_2 = (J + 1),
            Fun_4_loop(Alphabet_letters_3, Best_chi, Best_shift, Best_text, Case_sensitive, Chi_3, Cipher_alphabet, Ciphertext_3, Decrypted_6, Frequencies_3, Frequencies_dict, I_6, J_2, Lowered, Shift);
        _ -> {Alphabet_letters_3, Best_chi, Best_shift, Best_text, Case_sensitive, Chi, Cipher_alphabet, Ciphertext_3, Decrypted_6, Frequencies_3, Frequencies_dict, I_6, J, Lowered, Shift}
    end
end,
{Alphabet_letters_3, Best_chi, Best_shift, Best_text, Case_sensitive, Chi_3, Cipher_alphabet, Ciphertext_3, Decrypted_6, Frequencies_3, Frequencies_dict, I_6, J_2, Lowered, Shift} = Fun_4(Alphabet_letters_3, Best_chi, Best_shift, Best_text, Case_sensitive, Chi, Cipher_alphabet, Ciphertext_3, Decrypted_6, Frequencies_3, Frequencies_dict, I_6, J, Lowered, Shift),
            case ((Shift == 0) orelse (Chi_3 < Best_chi)) of
        true -> Best_shift_2 = Shift,
            Best_chi_2 = Chi_3,
            Best_text_2 = Decrypted_6,
            Best_chi_3 = Best_chi_2,
            Best_shift_3 = Best_shift_2,
            Best_text_3 = Best_text_2;
        _ -> Best_chi_3 = Best_chi,
            Best_shift_3 = Best_shift,
            Best_text_3 = Best_text
    end,
            Shift_2 = (Shift + 1),
            Fun_5_loop(Alphabet_letters_3, Best_chi_3, Best_shift_3, Best_text_3, Case_sensitive, Cipher_alphabet, Ciphertext_3, Frequencies_3, Frequencies_dict, Shift_2);
        _ -> {Alphabet_letters_3, Best_chi, Best_shift, Best_text, Case_sensitive, Cipher_alphabet, Ciphertext_3, Frequencies_3, Frequencies_dict, Shift}
    end
end,
{Alphabet_letters_3, Best_chi_3, Best_shift_3, Best_text_3, Case_sensitive, Cipher_alphabet, Ciphertext_3, Frequencies_3, Frequencies_dict, Shift_2} = Fun_5(Alphabet_letters_3, Best_chi, Best_shift, Best_text, Case_sensitive, Cipher_alphabet, Ciphertext_3, Frequencies_3, Frequencies_dict, Shift),
        #{"shift" => Best_shift_3, "chi" => Best_chi_3, "decoded" => Best_text_3}
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('r1', decrypt_caesar_with_chi_squared("dof pz aol jhlzhy jpwoly zv wvwbshy? pa pz avv lhzf av jyhjr!", [], #{}, false)),
    io:format("~ts~n", [mochi_repr(((((mochi_str(maps:get("shift", erlang:get('r1'), nil)) ++ ", ") ++ mochi_str(maps:get("chi", erlang:get('r1'), nil))) ++ ", ") ++ maps:get("decoded", erlang:get('r1'), nil)))]),
    erlang:put('r2', decrypt_caesar_with_chi_squared("crybd cdbsxq", [], #{}, false)),
    io:format("~ts~n", [mochi_repr(((((mochi_str(maps:get("shift", erlang:get('r2'), nil)) ++ ", ") ++ mochi_str(maps:get("chi", erlang:get('r2'), nil))) ++ ", ") ++ maps:get("decoded", erlang:get('r2'), nil)))]),
    erlang:put('r3', decrypt_caesar_with_chi_squared("Crybd Cdbsxq", [], #{}, true)),
    io:format("~ts~n", [mochi_repr(((((mochi_str(maps:get("shift", erlang:get('r3'), nil)) ++ ", ") ++ mochi_str(maps:get("chi", erlang:get('r3'), nil))) ++ ", ") ++ maps:get("decoded", erlang:get('r3'), nil)))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
