#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, mod36/1, gcd/2, replace_letters/1, replace_digits/1, to_upper/1, process_text/2, matrix_minor/3, determinant/1, cofactor_matrix/1, transpose/1, matrix_mod/1, scalar_matrix_mult/2, adjugate/1, multiply_matrix_vector/2, inverse_key/1, hill_encrypt/2, hill_decrypt/2]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

mod36(N) ->
    try
        R = mochi_mod(N, 36),
        case (R < 0) of
        true -> R_2 = (R + 36),
            R_3 = R_2;
        _ -> R_3 = R
    end,
        R_3
    catch {return, RetCatch} -> RetCatch end.

gcd(A, B) ->
    try
        X = A,
        Y = B,
        Fun = fun Fun_loop(A, B, X, Y) ->
    case (Y /= 0) of
        true ->
            T = Y,
            Y_2 = mochi_mod(X, Y),
            X_2 = T,
            Fun_loop(A, B, X_2, Y_2);
        _ -> {A, B, X, Y}
    end
end,
{A, B, X_2, Y_2} = Fun(A, B, X, Y),
        case (X_2 < 0) of
        true -> X_3 = -X_2,
            X_4 = X_3;
        _ -> X_4 = X_2
    end,
        X_4
    catch {return, RetCatch} -> RetCatch end.

replace_letters(Letter) ->
    try
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Letter) ->
    case (I < erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")) of
        true ->
            case (string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", I + 1, 1) == Letter) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_2_loop(I_2, Letter);
        _ -> {I, Letter}
    end
end,
{I_2, Letter} = Fun_2(I, Letter),
        0
    catch {return, RetCatch} -> RetCatch end.

replace_digits(Num) ->
    try
        Idx = mod36(Num),
        string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", Idx + 1, 1)
    catch {return, RetCatch} -> RetCatch end.

to_upper(C) ->
    try
        Lower = "abcdefghijklmnopqrstuvwxyz",
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(C, I_3, Lower, Upper) ->
    case (I_3 < erlang:length(Lower)) of
        true ->
            case (C == string:substr(Lower, I_3 + 1, 1)) of
        true -> throw({return, string:substr(Upper, I_3 + 1, 1)});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(C, I_4, Lower, Upper);
        _ -> {C, I_3, Lower, Upper}
    end
end,
{C, I_4, Lower, Upper} = Fun_3(C, I_3, Lower, Upper),
        C
    catch {return, RetCatch} -> RetCatch end.

process_text(Text, Break_key) ->
    try
        Chars = [],
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Break_key, Chars, I_5, Text) ->
    case (I_5 < erlang:length(Text)) of
        true ->
            try
                C_2 = to_upper(string:substr(Text, I_5 + 1, 1)),
                J = 0,
                Ok = false,
                Fun_4 = fun Fun_4_loop(Break_key, C_2, Chars, I_5, J, Ok, Text) ->
    case (J < erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789")) of
        true ->
            try
                case (string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789", J + 1, 1) == C_2) of
        true -> Ok_2 = true,
            throw({break, Break_key, C_2, Chars, I_5, J, Ok_2, Text}),
            Ok_3 = Ok_2;
        _ -> Ok_3 = Ok
    end,
                J_2 = (J + 1),
                Fun_4_loop(Break_key, C_2, Chars, I_5, J_2, Ok_3, Text)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_4_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {Break_key, C_2, Chars, I_5, J, Ok, Text}
    end
end,
{Break_key, C_2, Chars, I_5, J_2, Ok_3, Text} = Fun_4(Break_key, C_2, Chars, I_5, J, Ok, Text),
                case (Ok_3 /= nil) of
        true -> Chars_2 = lists:append((case Chars of nil -> []; _ -> Chars end), [C_2]),
            Chars_3 = Chars_2;
        _ -> Chars_3 = Chars
    end,
                I_6 = (I_5 + 1),
                Fun_5_loop(Break_key, Chars_3, I_6, Text)
            catch
                {continue, C0, C1, C2, C3} -> Fun_5_loop(C0, C1, C2, C3);
                {break, B0, B1, B2, B3} -> {B0, B1, B2, B3}
            end;
        _ -> {Break_key, Chars, I_5, Text}
    end
end,
{Break_key, Chars_3, I_6, Text} = Fun_5(Break_key, Chars, I_5, Text),
        case (erlang:length(Chars_3) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        Last = (case erlang:is_map(Chars_3) of true -> maps:get((erlang:length(Chars_3) - 1), Chars_3, nil); _ -> case (erlang:length(Chars_3) - 1) < 0 of true -> mochi_nth(erlang:length(Chars_3) + (erlang:length(Chars_3) - 1) + 1, Chars_3); _ -> mochi_nth((erlang:length(Chars_3) - 1) + 1, Chars_3) end end),
        Fun_6 = fun Fun_6_loop(Break_key, Chars_3, I_6, Last, Text) ->
    case (mochi_mod(erlang:length(Chars_3), Break_key) /= 0) of
        true ->
            Chars_4 = lists:append((case Chars_3 of nil -> []; _ -> Chars_3 end), [Last]),
            Fun_6_loop(Break_key, Chars_4, I_6, Last, Text);
        _ -> {Break_key, Chars_3, I_6, Last, Text}
    end
end,
{Break_key, Chars_4, I_6, Last, Text} = Fun_6(Break_key, Chars_3, I_6, Last, Text),
        Res = "",
        K = 0,
        Fun_7 = fun Fun_7_loop(Break_key, Chars_4, I_6, K, Last, Res, Text) ->
    case (K < erlang:length(Chars_4)) of
        true ->
            Res_2 = (Res ++ (case erlang:is_map(Chars_4) of true -> maps:get(K, Chars_4, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Chars_4) + K + 1, Chars_4); _ -> mochi_nth(K + 1, Chars_4) end end)),
            K_2 = (K + 1),
            Fun_7_loop(Break_key, Chars_4, I_6, K_2, Last, Res_2, Text);
        _ -> {Break_key, Chars_4, I_6, K, Last, Res, Text}
    end
end,
{Break_key, Chars_4, I_6, K_2, Last, Res_2, Text} = Fun_7(Break_key, Chars_4, I_6, K, Last, Res, Text),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

matrix_minor(M, Row, Col) ->
    try
        Res_3 = [],
        I_7 = 0,
        Fun_10 = fun Fun_10_loop(Col, I_7, M, Res_3, Row) ->
    case (I_7 < erlang:length(M)) of
        true ->
            case (I_7 /= Row) of
        true -> R_4 = [],
            J_3 = 0,
            Fun_8 = fun Fun_8_loop(Col, I_7, J_3, M, R_4, Res_3, Row) ->
    case (J_3 < erlang:length((case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end))) of
        true ->
            case (J_3 /= Col) of
        true -> R_5 = lists:append((case R_4 of nil -> []; _ -> R_4 end), [(case erlang:is_map((case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end)) of true -> maps:get(J_3, (case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end)) + J_3 + 1, (case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end)) end end)]),
            R_6 = R_5;
        _ -> R_6 = R_4
    end,
            J_4 = (J_3 + 1),
            Fun_8_loop(Col, I_7, J_4, M, R_6, Res_3, Row);
        _ -> {Col, I_7, J_3, M, R_4, Res_3, Row}
    end
end,
{Col, I_7, J_4, M, R_6, Res_3, Row} = Fun_8(Col, I_7, J_3, M, R_4, Res_3, Row),
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [R_6]),
            Fun_9 = Fun_8,
            J_5 = J_4,
            R_7 = R_6,
            Res_5 = Res_4;
        _ -> Fun_9 = nil,
            J_5 = nil,
            R_7 = nil,
            Res_5 = Res_3
    end,
            I_8 = (I_7 + 1),
            Fun_10_loop(Col, I_8, M, Res_5, Row);
        _ -> {Col, I_7, M, Res_3, Row}
    end
end,
{Col, I_8, M, Res_5, Row} = Fun_10(Col, I_7, M, Res_3, Row),
        Res_5
    catch {return, RetCatch} -> RetCatch end.

determinant(M_2) ->
    try
        N_2 = erlang:length(M_2),
        case (N_2 == 1) of
        true -> throw({return, (case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)) of true -> maps:get(0, (case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)) + 0 + 1, (case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)) end end)});
        _ -> ok
    end,
        case (N_2 == 2) of
        true -> throw({return, (((case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)) of true -> maps:get(0, (case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)) + 0 + 1, (case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)) end end) * (case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(1, M_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_2) + 1 + 1, M_2); _ -> mochi_nth(1 + 1, M_2) end end)) of true -> maps:get(1, (case erlang:is_map(M_2) of true -> maps:get(1, M_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_2) + 1 + 1, M_2); _ -> mochi_nth(1 + 1, M_2) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(1, M_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_2) + 1 + 1, M_2); _ -> mochi_nth(1 + 1, M_2) end end)) + 1 + 1, (case erlang:is_map(M_2) of true -> maps:get(1, M_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_2) + 1 + 1, M_2); _ -> mochi_nth(1 + 1, M_2) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(M_2) of true -> maps:get(1, M_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_2) + 1 + 1, M_2); _ -> mochi_nth(1 + 1, M_2) end end)) end end)) - ((case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)) of true -> maps:get(1, (case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)) + 1 + 1, (case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)) end end) * (case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(1, M_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_2) + 1 + 1, M_2); _ -> mochi_nth(1 + 1, M_2) end end)) of true -> maps:get(0, (case erlang:is_map(M_2) of true -> maps:get(1, M_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_2) + 1 + 1, M_2); _ -> mochi_nth(1 + 1, M_2) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(1, M_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_2) + 1 + 1, M_2); _ -> mochi_nth(1 + 1, M_2) end end)) + 0 + 1, (case erlang:is_map(M_2) of true -> maps:get(1, M_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_2) + 1 + 1, M_2); _ -> mochi_nth(1 + 1, M_2) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(M_2) of true -> maps:get(1, M_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(M_2) + 1 + 1, M_2); _ -> mochi_nth(1 + 1, M_2) end end)) end end)))});
        _ -> ok
    end,
        Det = 0,
        Col_2 = 0,
        Fun_11 = fun Fun_11_loop(Col_2, Det, M_2, N_2) ->
    case (Col_2 < N_2) of
        true ->
            Minor_mat = matrix_minor(M_2, 0, Col_2),
            Sign = 1,
            case (mochi_mod(Col_2, 2) == 1) of
        true -> Sign_2 = -1,
            Sign_3 = Sign_2;
        _ -> Sign_3 = Sign
    end,
            Det_2 = (Det + ((Sign_3 * (case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)) of true -> maps:get(Col_2, (case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end), nil); _ -> case Col_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)) + Col_2 + 1, (case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)); _ -> mochi_nth(Col_2 + 1, (case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)) end end)) * determinant(Minor_mat))),
            Col_3 = (Col_2 + 1),
            Fun_11_loop(Col_3, Det_2, M_2, N_2);
        _ -> {Col_2, Det, M_2, N_2}
    end
end,
{Col_3, Det_2, M_2, N_2} = Fun_11(Col_2, Det, M_2, N_2),
        Det_2
    catch {return, RetCatch} -> RetCatch end.

cofactor_matrix(M_3) ->
    try
        N_3 = erlang:length(M_3),
        Res_6 = [],
        I_9 = 0,
        Fun_13 = fun Fun_13_loop(I_9, M_3, N_3, Res_6) ->
    case (I_9 < N_3) of
        true ->
            Row_2 = [],
            J_6 = 0,
            Fun_12 = fun Fun_12_loop(I_9, J_6, M_3, N_3, Res_6, Row_2) ->
    case (J_6 < N_3) of
        true ->
            Minor_mat_2 = matrix_minor(M_3, I_9, J_6),
            Det_minor = determinant(Minor_mat_2),
            Sign_4 = 1,
            case (mochi_mod((I_9 + J_6), 2) == 1) of
        true -> Sign_5 = -1,
            Sign_6 = Sign_5;
        _ -> Sign_6 = Sign_4
    end,
            Row_3 = lists:append((case Row_2 of nil -> []; _ -> Row_2 end), [(Sign_6 * Det_minor)]),
            J_7 = (J_6 + 1),
            Fun_12_loop(I_9, J_7, M_3, N_3, Res_6, Row_3);
        _ -> {I_9, J_6, M_3, N_3, Res_6, Row_2}
    end
end,
{I_9, J_7, M_3, N_3, Res_6, Row_3} = Fun_12(I_9, J_6, M_3, N_3, Res_6, Row_2),
            Res_7 = lists:append((case Res_6 of nil -> []; _ -> Res_6 end), [Row_3]),
            I_10 = (I_9 + 1),
            Fun_13_loop(I_10, M_3, N_3, Res_7);
        _ -> {I_9, M_3, N_3, Res_6}
    end
end,
{I_10, M_3, N_3, Res_7} = Fun_13(I_9, M_3, N_3, Res_6),
        Res_7
    catch {return, RetCatch} -> RetCatch end.

transpose(M_4) ->
    try
        Rows = erlang:length(M_4),
        Cols = erlang:length((case erlang:is_map(M_4) of true -> maps:get(0, M_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_4) + 0 + 1, M_4); _ -> mochi_nth(0 + 1, M_4) end end)),
        Res_8 = [],
        J_8 = 0,
        Fun_15 = fun Fun_15_loop(Cols, J_8, M_4, Res_8, Rows) ->
    case (J_8 < Cols) of
        true ->
            Row_4 = [],
            I_11 = 0,
            Fun_14 = fun Fun_14_loop(Cols, I_11, J_8, M_4, Res_8, Row_4, Rows) ->
    case (I_11 < Rows) of
        true ->
            Row_5 = lists:append((case Row_4 of nil -> []; _ -> Row_4 end), [(case erlang:is_map((case erlang:is_map(M_4) of true -> maps:get(I_11, M_4, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(M_4) + I_11 + 1, M_4); _ -> mochi_nth(I_11 + 1, M_4) end end)) of true -> maps:get(J_8, (case erlang:is_map(M_4) of true -> maps:get(I_11, M_4, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(M_4) + I_11 + 1, M_4); _ -> mochi_nth(I_11 + 1, M_4) end end), nil); _ -> case J_8 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_4) of true -> maps:get(I_11, M_4, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(M_4) + I_11 + 1, M_4); _ -> mochi_nth(I_11 + 1, M_4) end end)) + J_8 + 1, (case erlang:is_map(M_4) of true -> maps:get(I_11, M_4, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(M_4) + I_11 + 1, M_4); _ -> mochi_nth(I_11 + 1, M_4) end end)); _ -> mochi_nth(J_8 + 1, (case erlang:is_map(M_4) of true -> maps:get(I_11, M_4, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(M_4) + I_11 + 1, M_4); _ -> mochi_nth(I_11 + 1, M_4) end end)) end end)]),
            I_12 = (I_11 + 1),
            Fun_14_loop(Cols, I_12, J_8, M_4, Res_8, Row_5, Rows);
        _ -> {Cols, I_11, J_8, M_4, Res_8, Row_4, Rows}
    end
end,
{Cols, I_12, J_8, M_4, Res_8, Row_5, Rows} = Fun_14(Cols, I_11, J_8, M_4, Res_8, Row_4, Rows),
            Res_9 = lists:append((case Res_8 of nil -> []; _ -> Res_8 end), [Row_5]),
            J_9 = (J_8 + 1),
            Fun_15_loop(Cols, J_9, M_4, Res_9, Rows);
        _ -> {Cols, J_8, M_4, Res_8, Rows}
    end
end,
{Cols, J_9, M_4, Res_9, Rows} = Fun_15(Cols, J_8, M_4, Res_8, Rows),
        Res_9
    catch {return, RetCatch} -> RetCatch end.

matrix_mod(M_5) ->
    try
        Res_10 = [],
        I_13 = 0,
        Fun_17 = fun Fun_17_loop(I_13, M_5, Res_10) ->
    case (I_13 < erlang:length(M_5)) of
        true ->
            Row_6 = [],
            J_10 = 0,
            Fun_16 = fun Fun_16_loop(I_13, J_10, M_5, Res_10, Row_6) ->
    case (J_10 < erlang:length((case erlang:is_map(M_5) of true -> maps:get(I_13, M_5, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(M_5) + I_13 + 1, M_5); _ -> mochi_nth(I_13 + 1, M_5) end end))) of
        true ->
            Row_7 = lists:append((case Row_6 of nil -> []; _ -> Row_6 end), [mod36((case erlang:is_map((case erlang:is_map(M_5) of true -> maps:get(I_13, M_5, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(M_5) + I_13 + 1, M_5); _ -> mochi_nth(I_13 + 1, M_5) end end)) of true -> maps:get(J_10, (case erlang:is_map(M_5) of true -> maps:get(I_13, M_5, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(M_5) + I_13 + 1, M_5); _ -> mochi_nth(I_13 + 1, M_5) end end), nil); _ -> case J_10 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_5) of true -> maps:get(I_13, M_5, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(M_5) + I_13 + 1, M_5); _ -> mochi_nth(I_13 + 1, M_5) end end)) + J_10 + 1, (case erlang:is_map(M_5) of true -> maps:get(I_13, M_5, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(M_5) + I_13 + 1, M_5); _ -> mochi_nth(I_13 + 1, M_5) end end)); _ -> mochi_nth(J_10 + 1, (case erlang:is_map(M_5) of true -> maps:get(I_13, M_5, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(M_5) + I_13 + 1, M_5); _ -> mochi_nth(I_13 + 1, M_5) end end)) end end))]),
            J_11 = (J_10 + 1),
            Fun_16_loop(I_13, J_11, M_5, Res_10, Row_7);
        _ -> {I_13, J_10, M_5, Res_10, Row_6}
    end
end,
{I_13, J_11, M_5, Res_10, Row_7} = Fun_16(I_13, J_10, M_5, Res_10, Row_6),
            Res_11 = lists:append((case Res_10 of nil -> []; _ -> Res_10 end), [Row_7]),
            I_14 = (I_13 + 1),
            Fun_17_loop(I_14, M_5, Res_11);
        _ -> {I_13, M_5, Res_10}
    end
end,
{I_14, M_5, Res_11} = Fun_17(I_13, M_5, Res_10),
        Res_11
    catch {return, RetCatch} -> RetCatch end.

scalar_matrix_mult(S, M_6) ->
    try
        Res_12 = [],
        I_15 = 0,
        Fun_19 = fun Fun_19_loop(I_15, M_6, Res_12, S) ->
    case (I_15 < erlang:length(M_6)) of
        true ->
            Row_8 = [],
            J_12 = 0,
            Fun_18 = fun Fun_18_loop(I_15, J_12, M_6, Res_12, Row_8, S) ->
    case (J_12 < erlang:length((case erlang:is_map(M_6) of true -> maps:get(I_15, M_6, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(M_6) + I_15 + 1, M_6); _ -> mochi_nth(I_15 + 1, M_6) end end))) of
        true ->
            Row_9 = lists:append((case Row_8 of nil -> []; _ -> Row_8 end), [mod36((S * (case erlang:is_map((case erlang:is_map(M_6) of true -> maps:get(I_15, M_6, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(M_6) + I_15 + 1, M_6); _ -> mochi_nth(I_15 + 1, M_6) end end)) of true -> maps:get(J_12, (case erlang:is_map(M_6) of true -> maps:get(I_15, M_6, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(M_6) + I_15 + 1, M_6); _ -> mochi_nth(I_15 + 1, M_6) end end), nil); _ -> case J_12 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_6) of true -> maps:get(I_15, M_6, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(M_6) + I_15 + 1, M_6); _ -> mochi_nth(I_15 + 1, M_6) end end)) + J_12 + 1, (case erlang:is_map(M_6) of true -> maps:get(I_15, M_6, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(M_6) + I_15 + 1, M_6); _ -> mochi_nth(I_15 + 1, M_6) end end)); _ -> mochi_nth(J_12 + 1, (case erlang:is_map(M_6) of true -> maps:get(I_15, M_6, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(M_6) + I_15 + 1, M_6); _ -> mochi_nth(I_15 + 1, M_6) end end)) end end)))]),
            J_13 = (J_12 + 1),
            Fun_18_loop(I_15, J_13, M_6, Res_12, Row_9, S);
        _ -> {I_15, J_12, M_6, Res_12, Row_8, S}
    end
end,
{I_15, J_13, M_6, Res_12, Row_9, S} = Fun_18(I_15, J_12, M_6, Res_12, Row_8, S),
            Res_13 = lists:append((case Res_12 of nil -> []; _ -> Res_12 end), [Row_9]),
            I_16 = (I_15 + 1),
            Fun_19_loop(I_16, M_6, Res_13, S);
        _ -> {I_15, M_6, Res_12, S}
    end
end,
{I_16, M_6, Res_13, S} = Fun_19(I_15, M_6, Res_12, S),
        Res_13
    catch {return, RetCatch} -> RetCatch end.

adjugate(M_7) ->
    try
        Cof = cofactor_matrix(M_7),
        N_4 = erlang:length(Cof),
        Res_14 = [],
        I_17 = 0,
        Fun_21 = fun Fun_21_loop(Cof, I_17, M_7, N_4, Res_14) ->
    case (I_17 < N_4) of
        true ->
            Row_10 = [],
            J_14 = 0,
            Fun_20 = fun Fun_20_loop(Cof, I_17, J_14, M_7, N_4, Res_14, Row_10) ->
    case (J_14 < N_4) of
        true ->
            Row_11 = lists:append((case Row_10 of nil -> []; _ -> Row_10 end), [(case erlang:is_map((case erlang:is_map(Cof) of true -> maps:get(J_14, Cof, nil); _ -> case J_14 < 0 of true -> mochi_nth(erlang:length(Cof) + J_14 + 1, Cof); _ -> mochi_nth(J_14 + 1, Cof) end end)) of true -> maps:get(I_17, (case erlang:is_map(Cof) of true -> maps:get(J_14, Cof, nil); _ -> case J_14 < 0 of true -> mochi_nth(erlang:length(Cof) + J_14 + 1, Cof); _ -> mochi_nth(J_14 + 1, Cof) end end), nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Cof) of true -> maps:get(J_14, Cof, nil); _ -> case J_14 < 0 of true -> mochi_nth(erlang:length(Cof) + J_14 + 1, Cof); _ -> mochi_nth(J_14 + 1, Cof) end end)) + I_17 + 1, (case erlang:is_map(Cof) of true -> maps:get(J_14, Cof, nil); _ -> case J_14 < 0 of true -> mochi_nth(erlang:length(Cof) + J_14 + 1, Cof); _ -> mochi_nth(J_14 + 1, Cof) end end)); _ -> mochi_nth(I_17 + 1, (case erlang:is_map(Cof) of true -> maps:get(J_14, Cof, nil); _ -> case J_14 < 0 of true -> mochi_nth(erlang:length(Cof) + J_14 + 1, Cof); _ -> mochi_nth(J_14 + 1, Cof) end end)) end end)]),
            J_15 = (J_14 + 1),
            Fun_20_loop(Cof, I_17, J_15, M_7, N_4, Res_14, Row_11);
        _ -> {Cof, I_17, J_14, M_7, N_4, Res_14, Row_10}
    end
end,
{Cof, I_17, J_15, M_7, N_4, Res_14, Row_11} = Fun_20(Cof, I_17, J_14, M_7, N_4, Res_14, Row_10),
            Res_15 = lists:append((case Res_14 of nil -> []; _ -> Res_14 end), [Row_11]),
            I_18 = (I_17 + 1),
            Fun_21_loop(Cof, I_18, M_7, N_4, Res_15);
        _ -> {Cof, I_17, M_7, N_4, Res_14}
    end
end,
{Cof, I_18, M_7, N_4, Res_15} = Fun_21(Cof, I_17, M_7, N_4, Res_14),
        Res_15
    catch {return, RetCatch} -> RetCatch end.

multiply_matrix_vector(M_8, V) ->
    try
        N_5 = erlang:length(M_8),
        Res_16 = [],
        I_19 = 0,
        Fun_23 = fun Fun_23_loop(I_19, M_8, N_5, Res_16, V) ->
    case (I_19 < N_5) of
        true ->
            Sum = 0,
            J_16 = 0,
            Fun_22 = fun Fun_22_loop(I_19, J_16, M_8, N_5, Res_16, Sum, V) ->
    case (J_16 < N_5) of
        true ->
            Sum_2 = (Sum + ((case erlang:is_map((case erlang:is_map(M_8) of true -> maps:get(I_19, M_8, nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(M_8) + I_19 + 1, M_8); _ -> mochi_nth(I_19 + 1, M_8) end end)) of true -> maps:get(J_16, (case erlang:is_map(M_8) of true -> maps:get(I_19, M_8, nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(M_8) + I_19 + 1, M_8); _ -> mochi_nth(I_19 + 1, M_8) end end), nil); _ -> case J_16 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_8) of true -> maps:get(I_19, M_8, nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(M_8) + I_19 + 1, M_8); _ -> mochi_nth(I_19 + 1, M_8) end end)) + J_16 + 1, (case erlang:is_map(M_8) of true -> maps:get(I_19, M_8, nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(M_8) + I_19 + 1, M_8); _ -> mochi_nth(I_19 + 1, M_8) end end)); _ -> mochi_nth(J_16 + 1, (case erlang:is_map(M_8) of true -> maps:get(I_19, M_8, nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(M_8) + I_19 + 1, M_8); _ -> mochi_nth(I_19 + 1, M_8) end end)) end end) * (case erlang:is_map(V) of true -> maps:get(J_16, V, nil); _ -> case J_16 < 0 of true -> mochi_nth(erlang:length(V) + J_16 + 1, V); _ -> mochi_nth(J_16 + 1, V) end end))),
            J_17 = (J_16 + 1),
            Fun_22_loop(I_19, J_17, M_8, N_5, Res_16, Sum_2, V);
        _ -> {I_19, J_16, M_8, N_5, Res_16, Sum, V}
    end
end,
{I_19, J_17, M_8, N_5, Res_16, Sum_2, V} = Fun_22(I_19, J_16, M_8, N_5, Res_16, Sum, V),
            Res_17 = lists:append((case Res_16 of nil -> []; _ -> Res_16 end), [mod36(Sum_2)]),
            I_20 = (I_19 + 1),
            Fun_23_loop(I_20, M_8, N_5, Res_17, V);
        _ -> {I_19, M_8, N_5, Res_16, V}
    end
end,
{I_20, M_8, N_5, Res_17, V} = Fun_23(I_19, M_8, N_5, Res_16, V),
        Res_17
    catch {return, RetCatch} -> RetCatch end.

inverse_key(Key) ->
    try
        Det_val = determinant(Key),
        Det_mod = mod36(Det_val),
        Det_inv = 0,
        I_21 = 0,
        Fun_24 = fun Fun_24_loop(Det_inv, Det_mod, Det_val, I_21, Key) ->
    case (I_21 < 36) of
        true ->
            try
                case (mochi_mod((Det_mod * I_21), 36) == 1) of
        true -> Det_inv_2 = I_21,
            throw({break, Det_inv_2, Det_mod, Det_val, I_21, Key}),
            Det_inv_3 = Det_inv_2;
        _ -> Det_inv_3 = Det_inv
    end,
                I_22 = (I_21 + 1),
                Fun_24_loop(Det_inv_3, Det_mod, Det_val, I_22, Key)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_24_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Det_inv, Det_mod, Det_val, I_21, Key}
    end
end,
{Det_inv_3, Det_mod, Det_val, I_22, Key} = Fun_24(Det_inv, Det_mod, Det_val, I_21, Key),
        Adj = adjugate(Key),
        Tmp = scalar_matrix_mult(Det_inv_3, Adj),
        Res_18 = matrix_mod(Tmp),
        Res_18
    catch {return, RetCatch} -> RetCatch end.

hill_encrypt(Key_2, Text_2) ->
    try
        Break_key_2 = erlang:length(Key_2),
        Processed = process_text(Text_2, Break_key_2),
        Encrypted = "",
        I_23 = 0,
        Fun_27 = fun Fun_27_loop(Break_key_2, Encrypted, I_23, Key_2, Processed, Text_2) ->
    case (I_23 < erlang:length(Processed)) of
        true ->
            Vec = [],
            J_18 = 0,
            Fun_25 = fun Fun_25_loop(Break_key_2, Encrypted, I_23, J_18, Key_2, Processed, Text_2, Vec) ->
    case (J_18 < Break_key_2) of
        true ->
            Vec_2 = lists:append((case Vec of nil -> []; _ -> Vec end), [replace_letters(string:substr(Processed, (I_23 + J_18) + 1, 1))]),
            J_19 = (J_18 + 1),
            Fun_25_loop(Break_key_2, Encrypted, I_23, J_19, Key_2, Processed, Text_2, Vec_2);
        _ -> {Break_key_2, Encrypted, I_23, J_18, Key_2, Processed, Text_2, Vec}
    end
end,
{Break_key_2, Encrypted, I_23, J_19, Key_2, Processed, Text_2, Vec_2} = Fun_25(Break_key_2, Encrypted, I_23, J_18, Key_2, Processed, Text_2, Vec),
            Enc_vec = multiply_matrix_vector(Key_2, Vec_2),
            K_3 = 0,
            Fun_26 = fun Fun_26_loop(Break_key_2, Enc_vec, Encrypted, I_23, J_19, K_3, Key_2, Processed, Text_2, Vec_2) ->
    case (K_3 < Break_key_2) of
        true ->
            Encrypted_2 = (Encrypted ++ replace_digits((case erlang:is_map(Enc_vec) of true -> maps:get(K_3, Enc_vec, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Enc_vec) + K_3 + 1, Enc_vec); _ -> mochi_nth(K_3 + 1, Enc_vec) end end))),
            K_4 = (K_3 + 1),
            Fun_26_loop(Break_key_2, Enc_vec, Encrypted_2, I_23, J_19, K_4, Key_2, Processed, Text_2, Vec_2);
        _ -> {Break_key_2, Enc_vec, Encrypted, I_23, J_19, K_3, Key_2, Processed, Text_2, Vec_2}
    end
end,
{Break_key_2, Enc_vec, Encrypted_2, I_23, J_19, K_4, Key_2, Processed, Text_2, Vec_2} = Fun_26(Break_key_2, Enc_vec, Encrypted, I_23, J_19, K_3, Key_2, Processed, Text_2, Vec_2),
            I_24 = (I_23 + Break_key_2),
            Fun_27_loop(Break_key_2, Encrypted_2, I_24, Key_2, Processed, Text_2);
        _ -> {Break_key_2, Encrypted, I_23, Key_2, Processed, Text_2}
    end
end,
{Break_key_2, Encrypted_2, I_24, Key_2, Processed, Text_2} = Fun_27(Break_key_2, Encrypted, I_23, Key_2, Processed, Text_2),
        Encrypted_2
    catch {return, RetCatch} -> RetCatch end.

hill_decrypt(Key_3, Text_3) ->
    try
        Break_key_3 = erlang:length(Key_3),
        Decrypt_key = inverse_key(Key_3),
        Processed_2 = process_text(Text_3, Break_key_3),
        Decrypted = "",
        I_25 = 0,
        Fun_30 = fun Fun_30_loop(Break_key_3, Decrypt_key, Decrypted, I_25, Key_3, Processed_2, Text_3) ->
    case (I_25 < erlang:length(Processed_2)) of
        true ->
            Vec_3 = [],
            J_20 = 0,
            Fun_28 = fun Fun_28_loop(Break_key_3, Decrypt_key, Decrypted, I_25, J_20, Key_3, Processed_2, Text_3, Vec_3) ->
    case (J_20 < Break_key_3) of
        true ->
            Vec_4 = lists:append((case Vec_3 of nil -> []; _ -> Vec_3 end), [replace_letters(string:substr(Processed_2, (I_25 + J_20) + 1, 1))]),
            J_21 = (J_20 + 1),
            Fun_28_loop(Break_key_3, Decrypt_key, Decrypted, I_25, J_21, Key_3, Processed_2, Text_3, Vec_4);
        _ -> {Break_key_3, Decrypt_key, Decrypted, I_25, J_20, Key_3, Processed_2, Text_3, Vec_3}
    end
end,
{Break_key_3, Decrypt_key, Decrypted, I_25, J_21, Key_3, Processed_2, Text_3, Vec_4} = Fun_28(Break_key_3, Decrypt_key, Decrypted, I_25, J_20, Key_3, Processed_2, Text_3, Vec_3),
            Dec_vec = multiply_matrix_vector(Decrypt_key, Vec_4),
            K_5 = 0,
            Fun_29 = fun Fun_29_loop(Break_key_3, Dec_vec, Decrypt_key, Decrypted, I_25, J_21, K_5, Key_3, Processed_2, Text_3, Vec_4) ->
    case (K_5 < Break_key_3) of
        true ->
            Decrypted_2 = (Decrypted ++ replace_digits((case erlang:is_map(Dec_vec) of true -> maps:get(K_5, Dec_vec, nil); _ -> case K_5 < 0 of true -> mochi_nth(erlang:length(Dec_vec) + K_5 + 1, Dec_vec); _ -> mochi_nth(K_5 + 1, Dec_vec) end end))),
            K_6 = (K_5 + 1),
            Fun_29_loop(Break_key_3, Dec_vec, Decrypt_key, Decrypted_2, I_25, J_21, K_6, Key_3, Processed_2, Text_3, Vec_4);
        _ -> {Break_key_3, Dec_vec, Decrypt_key, Decrypted, I_25, J_21, K_5, Key_3, Processed_2, Text_3, Vec_4}
    end
end,
{Break_key_3, Dec_vec, Decrypt_key, Decrypted_2, I_25, J_21, K_6, Key_3, Processed_2, Text_3, Vec_4} = Fun_29(Break_key_3, Dec_vec, Decrypt_key, Decrypted, I_25, J_21, K_5, Key_3, Processed_2, Text_3, Vec_4),
            I_26 = (I_25 + Break_key_3),
            Fun_30_loop(Break_key_3, Decrypt_key, Decrypted_2, I_26, Key_3, Processed_2, Text_3);
        _ -> {Break_key_3, Decrypt_key, Decrypted, I_25, Key_3, Processed_2, Text_3}
    end
end,
{Break_key_3, Decrypt_key, Decrypted_2, I_26, Key_3, Processed_2, Text_3} = Fun_30(Break_key_3, Decrypt_key, Decrypted, I_25, Key_3, Processed_2, Text_3),
        Decrypted_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('KEY_STRING', "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"),
    erlang:put('key', [[2, 5], [1, 6]]),
    io:format("~ts~n", [mochi_repr(hill_encrypt(erlang:get('key'), "testing hill cipher"))]),
    io:format("~ts~n", [mochi_repr(hill_encrypt(erlang:get('key'), "hello"))]),
    io:format("~ts~n", [mochi_repr(hill_decrypt(erlang:get('key'), "WHXYJOLM9C6XT085LL"))]),
    io:format("~ts~n", [mochi_repr(hill_decrypt(erlang:get('key'), "85FF00"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
