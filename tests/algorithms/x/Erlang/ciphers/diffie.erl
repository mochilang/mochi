#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, mod_pow/3, contains/2, find_primitive/1]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

mod_pow(Base, Exp, Mod) ->
    try
        Result = 1,
        B = mochi_mod(Base, Mod),
        E = Exp,
        Fun = fun Fun_loop(B, Base, E, Exp, Mod, Result) ->
    case (E > 0) of
        true ->
            case (mochi_mod(E, 2) == 1) of
        true -> Result_2 = mochi_mod((Result * B), Mod),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            E_2 = (E div 2),
            B_2 = mochi_mod((B * B), Mod),
            Fun_loop(B_2, Base, E_2, Exp, Mod, Result_3);
        _ -> {B, Base, E, Exp, Mod, Result}
    end
end,
{B_2, Base, E_2, Exp, Mod, Result_3} = Fun(B, Base, E, Exp, Mod, Result),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

contains(Xs, Val) ->
    try
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Val, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) == Val) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_2_loop(I_2, Val, Xs);
        _ -> {I, Val, Xs}
    end
end,
{I_2, Val, Xs} = Fun_2(I, Val, Xs),
        false
    catch {return, RetCatch} -> RetCatch end.

find_primitive(Modulus) ->
    try
        R = 1,
        Fun_4 = fun Fun_4_loop(Modulus, R) ->
    case (R < Modulus) of
        true ->
            Li = [],
            X = 0,
            Valid = true,
            Fun_3 = fun Fun_3_loop(Li, Modulus, R, Valid, X) ->
    case ((X < (Modulus - 1)) andalso Valid) of
        true ->
            Value = mod_pow(R, X, Modulus),
            case mochi_member(Value, Li) of
        true -> Valid_2 = false,
            Li_3 = Li,
            Valid_3 = Valid_2,
            X_3 = X;
        _ -> Li_2 = lists:append((case Li of nil -> []; _ -> Li end), [Value]),
            X_2 = (X + 1),
            Li_3 = Li_2,
            Valid_3 = Valid,
            X_3 = X_2
    end,
            Fun_3_loop(Li_3, Modulus, R, Valid_3, X_3);
        _ -> {Li, Modulus, R, Valid, X}
    end
end,
{Li_3, Modulus, R, Valid_3, X_3} = Fun_3(Li, Modulus, R, Valid, X),
            case (Valid_3 /= nil) of
        true -> throw({return, R});
        _ -> ok
    end,
            R_2 = (R + 1),
            Fun_4_loop(Modulus, R_2);
        _ -> {Modulus, R}
    end
end,
{Modulus, R_2} = Fun_4(Modulus, R),
        -1
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(find_primitive(7))]),
    io:format("~ts~n", [mochi_repr(find_primitive(11))]),
    io:format("~ts~n", [mochi_repr(find_primitive(8))]),
    erlang:put('prime', 23),
    erlang:put('primitive_root', find_primitive(23)),
    case (erlang:get('primitive_root') == (0 - 1)) of
        true -> io:format("~ts~n", [mochi_repr("Cannot find the primitive for the value: -1")]),
            A_private_2 = nil,
            A_public_2 = nil,
            A_secret_2 = nil,
            B_private_2 = nil,
            B_public_2 = nil,
            B_secret_2 = nil;
        _ -> A_private = 6,
            B_private = 15,
            A_public = mod_pow(erlang:get('primitive_root'), 6, 23),
            B_public = mod_pow(erlang:get('primitive_root'), 15, 23),
            A_secret = mod_pow(B_public, 6, 23),
            B_secret = mod_pow(A_public, 15, 23),
            io:format("~ts~n", [mochi_repr(("The key value generated by A is: " ++ mochi_str(A_secret)))]),
            io:format("~ts~n", [mochi_repr(("The key value generated by B is: " ++ mochi_str(B_secret)))]),
            A_private_2 = A_private,
            A_public_2 = A_public,
            A_secret_2 = A_secret,
            B_private_2 = B_private,
            B_public_2 = B_public,
            B_secret_2 = B_secret
    end,
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
