#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/2, decrypt/1]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

index_of(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        (0 - 1)
    catch {return, RetCatch} -> RetCatch end.

decrypt(Message) ->
    try
        Fun_2 = fun Fun_2_loop(List, Message) ->
    case List of
        [] -> {Message};
        [Key|Key_rest] ->
            Translated = "",
            Fun_3 = fun Fun_3_loop(List, Key, Message, Translated) ->
    case List of
        [] -> {Key, Message, Translated};
        [I_3|I_3_rest] ->
            Symbol = string:substr(Message, I_3 + 1, ((I_3 + 1) - I_3)),
            Idx = index_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Symbol),
            case (Idx /= (0 - 1)) of
        true -> Num = (Idx - Key),
            case (Num < 0) of
        true -> Num_2 = (Num + erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ")),
            Num_3 = Num_2;
        _ -> Num_3 = Num
    end,
            Translated_2 = (Translated ++ string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Num_3 + 1, ((Num_3 + 1) - Num_3))),
            Num_4 = Num_3,
            Translated_4 = Translated_2;
        _ -> Translated_3 = (Translated ++ Symbol),
            Num_4 = nil,
            Translated_4 = Translated_3
    end,
            Fun_3_loop(I_3_rest, Key, Message, Translated_4);
        _ -> {Key, Message, Translated}
    end
end,
{Key, Message, Translated_4} = Fun_3(lists:seq(0, (erlang:length(Message)) - 1), Key, Message, Translated),
            io:format("~ts~n", [mochi_repr(((("Decryption using Key #" ++ mochi_str(Key)) ++ ": ") ++ Translated_4))]),
            Fun_2_loop(Key_rest, Message);
        _ -> {Message}
    end
end,
{Message} = Fun_2(lists:seq(0, (erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ")) - 1), Message),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('LETTERS', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    decrypt("TMDETUX PMDVU"),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
