#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, base16_encode/1, base16_decode/1]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

base16_encode(Data) ->
    try
        Digits = "0123456789ABCDEF",
        Res = "",
        I = 0,
        Fun = fun Fun_loop(Data, Digits, I, Res) ->
    case (I < erlang:length(Data)) of
        true ->
            B = (case erlang:is_map(Data) of true -> maps:get(I, Data, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Data) + I + 1, Data); _ -> mochi_nth(I + 1, Data) end end),
            case ((B < 0) orelse (B > 255)) of
        true -> erlang:error({panic, "byte out of range"});
        _ -> ok
    end,
            Hi = (B div 16),
            Lo = mochi_mod(B, 16),
            Res_2 = ((Res ++ string:substr(Digits, Hi + 1, ((Hi + 1) - Hi))) ++ string:substr(Digits, Lo + 1, ((Lo + 1) - Lo))),
            I_2 = (I + 1),
            Fun_loop(Data, Digits, I_2, Res_2);
        _ -> {Data, Digits, I, Res}
    end
end,
{Data, Digits, I_2, Res_2} = Fun(Data, Digits, I, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

base16_decode(Data_2) ->
    try
        Digits_2 = "0123456789ABCDEF",
        case (mochi_mod(erlang:length(Data_2), 2) /= 0) of
        true -> erlang:error({panic, "Base16 encoded data is invalid: Data does not have an even number of hex digits."});
        _ -> ok
    end,
        Hex_value = fun Hex_value(Ch) ->
    try
        J = 0,
        Fun_2 = fun Fun_2_loop(Ch, Data_2, Digits_2, Hex_value, J) ->
    case (J < 16) of
        true ->
            case (string:substr(Digits_2, J + 1, ((J + 1) - J)) == Ch) of
        true -> throw({return, J});
        _ -> ok
    end,
            J_2 = (J + 1),
            Fun_2_loop(Ch, Data_2, Digits_2, Hex_value, J_2);
        _ -> {Ch, Data_2, Digits_2, Hex_value, J}
    end
end,
{Ch, Data_2, Digits_2, Hex_value, J_2} = Fun_2(Ch, Data_2, Digits_2, Hex_value, J),
        -1
    catch {return, RetCatch} -> RetCatch end
end,
        Out = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Data_2, Digits_2, Hex_value, I_3, Out) ->
    case (I_3 < erlang:length(Data_2)) of
        true ->
            Hi_char = string:substr(Data_2, I_3 + 1, ((I_3 + 1) - I_3)),
            Lo_char = string:substr(Data_2, (I_3 + 1) + 1, ((I_3 + 2) - (I_3 + 1))),
            Hi_2 = Hex_value(Hi_char),
            Lo_2 = Hex_value(Lo_char),
            case ((Hi_2 < 0) orelse (Lo_2 < 0)) of
        true -> erlang:error({panic, "Base16 encoded data is invalid: Data is not uppercase hex or it contains invalid characters."});
        _ -> ok
    end,
            Out_2 = lists:append((case Out of nil -> []; _ -> Out end), [((Hi_2 * 16) + Lo_2)]),
            I_4 = (I_3 + 2),
            Fun_3_loop(Data_2, Digits_2, Hex_value, I_4, Out_2);
        _ -> {Data_2, Digits_2, Hex_value, I_3, Out}
    end
end,
{Data_2, Digits_2, Hex_value, I_4, Out_2} = Fun_3(Data_2, Digits_2, Hex_value, I_3, Out),
        Out_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('example1', [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100, 33]),
    erlang:put('example2', [72, 69, 76, 76, 79, 32, 87, 79, 82, 76, 68, 33]),
    io:format("~ts~n", [mochi_repr(base16_encode(erlang:get('example1')))]),
    io:format("~ts~n", [mochi_repr(base16_encode(erlang:get('example2')))]),
    io:format("~ts~n", [mochi_repr(base16_encode([]))]),
    io:format("~ts~n", [mochi_str(base16_decode("48656C6C6F20576F726C6421"))]),
    io:format("~ts~n", [mochi_str(base16_decode("48454C4C4F20574F524C4421"))]),
    io:format("~ts~n", [mochi_str(base16_decode(""))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
