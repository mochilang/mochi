#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, gcd/2, mod_inverse/2, find_symbol/1, check_keys/3, encrypt_message/2, decrypt_message/2, main/0]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

gcd(A, B) ->
    try
        X = A,
        Y = B,
        Fun = fun Fun_loop(A, B, X, Y) ->
    case (Y /= 0) of
        true ->
            Temp = mochi_mod(X, Y),
            X_2 = Y,
            Y_2 = Temp,
            Fun_loop(A, B, X_2, Y_2);
        _ -> {A, B, X, Y}
    end
end,
{A, B, X_2, Y_2} = Fun(A, B, X, Y),
        X_2
    catch {return, RetCatch} -> RetCatch end.

mod_inverse(A_2, M) ->
    try
        case (gcd(A_2, M) /= 1) of
        true -> erlang:error({panic, (((("mod inverse of " ++ mochi_str(A_2)) ++ " and ") ++ mochi_str(M)) ++ " does not exist")});
        _ -> ok
    end,
        U1 = 1,
        U2 = 0,
        U3 = A_2,
        V1 = 0,
        V2 = 1,
        V3 = M,
        Fun_2 = fun Fun_2_loop(A_2, M, U1, U2, U3, V1, V2, V3) ->
    case (V3 /= 0) of
        true ->
            Q = (U3 div V3),
            T1 = (U1 - (Q * V1)),
            T2 = (U2 - (Q * V2)),
            T3 = (U3 - (Q * V3)),
            U1_2 = V1,
            U2_2 = V2,
            U3_2 = V3,
            V1_2 = T1,
            V2_2 = T2,
            V3_2 = T3,
            Fun_2_loop(A_2, M, U1_2, U2_2, U3_2, V1_2, V2_2, V3_2);
        _ -> {A_2, M, U1, U2, U3, V1, V2, V3}
    end
end,
{A_2, M, U1_2, U2_2, U3_2, V1_2, V2_2, V3_2} = Fun_2(A_2, M, U1, U2, U3, V1, V2, V3),
        Res = mochi_mod(U1_2, M),
        case (Res < 0) of
        true -> throw({return, (Res + M)});
        _ -> ok
    end,
        Res
    catch {return, RetCatch} -> RetCatch end.

find_symbol(Ch) ->
    try
        I = 0,
        Fun_3 = fun Fun_3_loop(Ch, I) ->
    case (I < erlang:length(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")) of
        true ->
            case (string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", I + 1, 1) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_3_loop(Ch, I_2);
        _ -> {Ch, I}
    end
end,
{Ch, I_2} = Fun_3(Ch, I),
        -1
    catch {return, RetCatch} -> RetCatch end.

check_keys(Key_a, Key_b, Mode) ->
    try
        M_2 = erlang:length(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"),
        case (Mode == "encrypt") of
        true -> case (Key_a == 1) of
        true -> erlang:error({panic, "The affine cipher becomes weak when key A is set to 1. Choose different key"});
        _ -> ok
    end,
            case (Key_b == 0) of
        true -> erlang:error({panic, "The affine cipher becomes weak when key B is set to 0. Choose different key"});
        _ -> ok
    end;
        _ -> ok
    end,
        case (((Key_a < 0) orelse (Key_b < 0)) orelse (Key_b > (M_2 - 1))) of
        true -> erlang:error({panic, ("Key A must be greater than 0 and key B must be between 0 and " ++ mochi_str((M_2 - 1)))});
        _ -> ok
    end,
        case (gcd(Key_a, M_2) /= 1) of
        true -> erlang:error({panic, (((("Key A " ++ mochi_str(Key_a)) ++ " and the symbol set size ") ++ mochi_str(M_2)) ++ " are not relatively prime. Choose a different key.")});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

encrypt_message(Key, Message) ->
    try
        M_3 = erlang:length(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"),
        Key_a_2 = (Key div M_3),
        Key_b_2 = mochi_mod(Key, M_3),
        check_keys(Key_a_2, Key_b_2, "encrypt"),
        Cipher_text = "",
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Cipher_text, I_3, Key, Key_a_2, Key_b_2, M_3, Message) ->
    case (I_3 < erlang:length(Message)) of
        true ->
            Ch_2 = string:substr(Message, I_3 + 1, 1),
            Index = find_symbol(Ch_2),
            case (Index >= 0) of
        true -> Cipher_text_2 = (Cipher_text ++ string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", mochi_mod(((Index * Key_a_2) + Key_b_2), M_3) + 1, 1)),
            Cipher_text_4 = Cipher_text_2;
        _ -> Cipher_text_3 = (Cipher_text ++ Ch_2),
            Cipher_text_4 = Cipher_text_3
    end,
            I_4 = (I_3 + 1),
            Fun_4_loop(Cipher_text_4, I_4, Key, Key_a_2, Key_b_2, M_3, Message);
        _ -> {Cipher_text, I_3, Key, Key_a_2, Key_b_2, M_3, Message}
    end
end,
{Cipher_text_4, I_4, Key, Key_a_2, Key_b_2, M_3, Message} = Fun_4(Cipher_text, I_3, Key, Key_a_2, Key_b_2, M_3, Message),
        Cipher_text_4
    catch {return, RetCatch} -> RetCatch end.

decrypt_message(Key_2, Message_2) ->
    try
        M_4 = erlang:length(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"),
        Key_a_3 = (Key_2 div M_4),
        Key_b_3 = mochi_mod(Key_2, M_4),
        check_keys(Key_a_3, Key_b_3, "decrypt"),
        Inv = mod_inverse(Key_a_3, M_4),
        Plain_text = "",
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(I_5, Inv, Key_2, Key_a_3, Key_b_3, M_4, Message_2, Plain_text) ->
    case (I_5 < erlang:length(Message_2)) of
        true ->
            Ch_3 = string:substr(Message_2, I_5 + 1, 1),
            Index_2 = find_symbol(Ch_3),
            case (Index_2 >= 0) of
        true -> N = ((Index_2 - Key_b_3) * Inv),
            Pos = mochi_mod(N, M_4),
            Final = (case (Pos < 0) of
    true -> (Pos + M_4);
    _ -> Pos
end),
            Plain_text_2 = (Plain_text ++ string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", Final + 1, 1)),
            Final_2 = Final,
            N_2 = N,
            Plain_text_4 = Plain_text_2,
            Pos_2 = Pos;
        _ -> Plain_text_3 = (Plain_text ++ Ch_3),
            Final_2 = nil,
            N_2 = nil,
            Plain_text_4 = Plain_text_3,
            Pos_2 = nil
    end,
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, Inv, Key_2, Key_a_3, Key_b_3, M_4, Message_2, Plain_text_4);
        _ -> {I_5, Inv, Key_2, Key_a_3, Key_b_3, M_4, Message_2, Plain_text}
    end
end,
{I_6, Inv, Key_2, Key_a_3, Key_b_3, M_4, Message_2, Plain_text_4} = Fun_5(I_5, Inv, Key_2, Key_a_3, Key_b_3, M_4, Message_2, Plain_text),
        Plain_text_4
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Key_3 = 4545,
        Msg = "The affine cipher is a type of monoalphabetic substitution cipher.",
        Enc = encrypt_message(4545, "The affine cipher is a type of monoalphabetic substitution cipher."),
        io:format("~ts~n", [mochi_repr(Enc)]),
        io:format("~ts~n", [mochi_repr(decrypt_message(4545, Enc))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('SYMBOLS', " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
