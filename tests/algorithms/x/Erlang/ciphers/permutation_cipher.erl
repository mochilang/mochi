#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rand/1, generate_valid_block_size/1, generate_permutation_key/1, encrypt/3, repeat_string/1, decrypt/2]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

rand(Max) ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483647)),
        mochi_mod(erlang:get('seed'), Max)
    catch {return, RetCatch} -> RetCatch end.

generate_valid_block_size(Message_length) ->
    try
        Factors = [],
        I = 2,
        Fun = fun Fun_loop(Factors, I, Message_length) ->
    case (I =< Message_length) of
        true ->
            case (mochi_mod(Message_length, I) == 0) of
        true -> Factors_2 = lists:append((case Factors of nil -> []; _ -> Factors end), [I]),
            Factors_3 = Factors_2;
        _ -> Factors_3 = Factors
    end,
            I_2 = (I + 1),
            Fun_loop(Factors_3, I_2, Message_length);
        _ -> {Factors, I, Message_length}
    end
end,
{Factors_3, I_2, Message_length} = Fun(Factors, I, Message_length),
        Idx = rand(erlang:length(Factors_3)),
        (case erlang:is_map(Factors_3) of true -> maps:get(Idx, Factors_3, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Factors_3) + Idx + 1, Factors_3); _ -> mochi_nth(Idx + 1, Factors_3) end end)
    catch {return, RetCatch} -> RetCatch end.

generate_permutation_key(Block_size) ->
    try
        Digits = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Block_size, Digits, I_3) ->
    case (I_3 < Block_size) of
        true ->
            Digits_2 = lists:append((case Digits of nil -> []; _ -> Digits end), [I_3]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Block_size, Digits_2, I_4);
        _ -> {Block_size, Digits, I_3}
    end
end,
{Block_size, Digits_2, I_4} = Fun_2(Block_size, Digits, I_3),
        J = (Block_size - 1),
        Fun_3 = fun Fun_3_loop(Block_size, Digits_2, I_4, J) ->
    case (J > 0) of
        true ->
            K = rand((J + 1)),
            Temp = (case erlang:is_map(Digits_2) of true -> maps:get(J, Digits_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Digits_2) + J + 1, Digits_2); _ -> mochi_nth(J + 1, Digits_2) end end),
            Digits_3 = lists:sublist(Digits_2, J) ++ [(case erlang:is_map(Digits_2) of true -> maps:get(K, Digits_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Digits_2) + K + 1, Digits_2); _ -> mochi_nth(K + 1, Digits_2) end end)] ++ lists:nthtail(J + 1, Digits_2),
            Digits_4 = lists:sublist(Digits_3, K) ++ [Temp] ++ lists:nthtail(K + 1, Digits_3),
            J_2 = (J - 1),
            Fun_3_loop(Block_size, Digits_4, I_4, J_2);
        _ -> {Block_size, Digits_2, I_4, J}
    end
end,
{Block_size, Digits_4, I_4, J_2} = Fun_3(Block_size, Digits_2, I_4, J),
        Digits_4
    catch {return, RetCatch} -> RetCatch end.

encrypt(Message, Key, Block_size_2) ->
    try
        Encrypted = "",
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Block_size_2, Encrypted, I_5, Key, Message) ->
    case (I_5 < erlang:length(Message)) of
        true ->
            Block = string:substr(Message, I_5 + 1, ((I_5 + Block_size_2) - I_5)),
            J_3 = 0,
            Fun_4 = fun Fun_4_loop(Block, Block_size_2, Encrypted, I_5, J_3, Key, Message) ->
    case (J_3 < Block_size_2) of
        true ->
            Encrypted_2 = (Encrypted ++ string:substr(Block, (case erlang:is_map(Key) of true -> maps:get(J_3, Key, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Key) + J_3 + 1, Key); _ -> mochi_nth(J_3 + 1, Key) end end) + 1, (((case erlang:is_map(Key) of true -> maps:get(J_3, Key, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Key) + J_3 + 1, Key); _ -> mochi_nth(J_3 + 1, Key) end end) + 1) - (case erlang:is_map(Key) of true -> maps:get(J_3, Key, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Key) + J_3 + 1, Key); _ -> mochi_nth(J_3 + 1, Key) end end)))),
            J_4 = (J_3 + 1),
            Fun_4_loop(Block, Block_size_2, Encrypted_2, I_5, J_4, Key, Message);
        _ -> {Block, Block_size_2, Encrypted, I_5, J_3, Key, Message}
    end
end,
{Block, Block_size_2, Encrypted_2, I_5, J_4, Key, Message} = Fun_4(Block, Block_size_2, Encrypted, I_5, J_3, Key, Message),
            I_6 = (I_5 + Block_size_2),
            Fun_5_loop(Block_size_2, Encrypted_2, I_6, Key, Message);
        _ -> {Block_size_2, Encrypted, I_5, Key, Message}
    end
end,
{Block_size_2, Encrypted_2, I_6, Key, Message} = Fun_5(Block_size_2, Encrypted, I_5, Key, Message),
        Encrypted_2
    catch {return, RetCatch} -> RetCatch end.

repeat_string(Times) ->
    try
        Res = [],
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(I_7, Res, Times) ->
    case (I_7 < Times) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [""]),
            I_8 = (I_7 + 1),
            Fun_6_loop(I_8, Res_2, Times);
        _ -> {I_7, Res, Times}
    end
end,
{I_8, Res_2, Times} = Fun_6(I_7, Res, Times),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

decrypt(Encrypted_3, Key_2) ->
    try
        Klen = erlang:length(Key_2),
        Decrypted = "",
        I_9 = 0,
        Fun_9 = fun Fun_9_loop(Decrypted, Encrypted_3, I_9, Key_2, Klen) ->
    case (I_9 < erlang:length(Encrypted_3)) of
        true ->
            Block_2 = string:substr(Encrypted_3, I_9 + 1, ((I_9 + Klen) - I_9)),
            Original = repeat_string(Klen),
            J_5 = 0,
            Fun_7 = fun Fun_7_loop(Block_2, Decrypted, Encrypted_3, I_9, J_5, Key_2, Klen, Original) ->
    case (J_5 < Klen) of
        true ->
            Original_2 = lists:sublist(Original, (case erlang:is_map(Key_2) of true -> maps:get(J_5, Key_2, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Key_2) + J_5 + 1, Key_2); _ -> mochi_nth(J_5 + 1, Key_2) end end)) ++ [string:substr(Block_2, J_5 + 1, ((J_5 + 1) - J_5))] ++ lists:nthtail((case erlang:is_map(Key_2) of true -> maps:get(J_5, Key_2, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Key_2) + J_5 + 1, Key_2); _ -> mochi_nth(J_5 + 1, Key_2) end end) + 1, Original),
            J_6 = (J_5 + 1),
            Fun_7_loop(Block_2, Decrypted, Encrypted_3, I_9, J_6, Key_2, Klen, Original_2);
        _ -> {Block_2, Decrypted, Encrypted_3, I_9, J_5, Key_2, Klen, Original}
    end
end,
{Block_2, Decrypted, Encrypted_3, I_9, J_6, Key_2, Klen, Original_2} = Fun_7(Block_2, Decrypted, Encrypted_3, I_9, J_5, Key_2, Klen, Original),
            J_7 = 0,
            Fun_8 = fun Fun_8_loop(Block_2, Decrypted, Encrypted_3, I_9, J_7, Key_2, Klen, Original_2) ->
    case (J_7 < Klen) of
        true ->
            Decrypted_2 = (Decrypted ++ (case erlang:is_map(Original_2) of true -> maps:get(J_7, Original_2, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Original_2) + J_7 + 1, Original_2); _ -> mochi_nth(J_7 + 1, Original_2) end end)),
            J_8 = (J_7 + 1),
            Fun_8_loop(Block_2, Decrypted_2, Encrypted_3, I_9, J_8, Key_2, Klen, Original_2);
        _ -> {Block_2, Decrypted, Encrypted_3, I_9, J_7, Key_2, Klen, Original_2}
    end
end,
{Block_2, Decrypted_2, Encrypted_3, I_9, J_8, Key_2, Klen, Original_2} = Fun_8(Block_2, Decrypted, Encrypted_3, I_9, J_7, Key_2, Klen, Original_2),
            I_10 = (I_9 + Klen),
            Fun_9_loop(Decrypted_2, Encrypted_3, I_10, Key_2, Klen);
        _ -> {Decrypted, Encrypted_3, I_9, Key_2, Klen}
    end
end,
{Decrypted_2, Encrypted_3, I_10, Key_2, Klen} = Fun_9(Decrypted, Encrypted_3, I_9, Key_2, Klen),
        Decrypted_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    erlang:put('message', "HELLO WORLD"),
    erlang:put('block_size', generate_valid_block_size(erlang:length("HELLO WORLD"))),
    erlang:put('key', generate_permutation_key(erlang:get('block_size'))),
    erlang:put('encrypted', encrypt("HELLO WORLD", erlang:get('key'), erlang:get('block_size'))),
    erlang:put('decrypted', decrypt(erlang:get('encrypted'), erlang:get('key'))),
    io:format("~ts~n", [mochi_repr(("Block size: " ++ mochi_str(erlang:get('block_size'))))]),
    io:format("~ts~n", [mochi_repr(("Key: " ++ mochi_str(erlang:get('key'))))]),
    io:format("~ts~n", [mochi_repr(("Encrypted: " ++ erlang:get('encrypted')))]),
    io:format("~ts~n", [mochi_repr(("Decrypted: " ++ erlang:get('decrypted')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
