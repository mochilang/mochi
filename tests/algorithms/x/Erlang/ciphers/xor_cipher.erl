#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, xor_fn/2, ord/1, chr/1, normalize_key/1, encrypt/2, encrypt_string/2]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

xor_fn(A, B) ->
    try
        Res = 0,
        Bit = 1,
        X = A,
        Y = B,
        Fun = fun Fun_loop(A, B, Bit, Res, X, Y) ->
    case ((X > 0) orelse (Y > 0)) of
        true ->
            Abit = mochi_mod(X, 2),
            Bbit = mochi_mod(Y, 2),
            case (Abit /= Bbit) of
        true -> Res_2 = (Res + Bit),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            X_2 = (X div 2),
            Y_2 = (Y div 2),
            Bit_2 = (Bit * 2),
            Fun_loop(A, B, Bit_2, Res_3, X_2, Y_2);
        _ -> {A, B, Bit, Res, X, Y}
    end
end,
{A, B, Bit_2, Res_3, X_2, Y_2} = Fun(A, B, Bit, Res, X, Y),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

ord(Ch) ->
    try
        I = 0,
        Fun_2 = fun Fun_2_loop(Ch, I) ->
    case (I < erlang:length(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")) of
        true ->
            case (string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, (32 + I)});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_2_loop(Ch, I_2);
        _ -> {Ch, I}
    end
end,
{Ch, I_2} = Fun_2(Ch, I),
        0
    catch {return, RetCatch} -> RetCatch end.

chr(N) ->
    try
        (case ((N >= 32) andalso (N < 127)) of
    true -> string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", (N - 32) + 1, ((N - 31) - (N - 32)));
    _ -> ""
end)
    catch {return, RetCatch} -> RetCatch end.

normalize_key(Key) ->
    try
        K = Key,
        case (K == 0) of
        true -> K_2 = 1,
            K_3 = K_2;
        _ -> K_3 = K
    end,
        K_4 = mochi_mod(K_3, 256),
        case (K_4 < 0) of
        true -> K_5 = (K_4 + 256),
            K_6 = K_5;
        _ -> K_6 = K_4
    end,
        K_6
    catch {return, RetCatch} -> RetCatch end.

encrypt(Content, Key_2) ->
    try
        K_7 = normalize_key(Key_2),
        Result = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Content, I_3, K_7, Key_2, Result) ->
    case (I_3 < erlang:length(Content)) of
        true ->
            C = ord(string:substr(Content, I_3 + 1, ((I_3 + 1) - I_3))),
            E = xor_fn(C, K_7),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [chr(E)]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Content, I_4, K_7, Key_2, Result_2);
        _ -> {Content, I_3, K_7, Key_2, Result}
    end
end,
{Content, I_4, K_7, Key_2, Result_2} = Fun_3(Content, I_3, K_7, Key_2, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

encrypt_string(Content_2, Key_3) ->
    try
        Chars = encrypt(Content_2, Key_3),
        Out = "",
        Fun_4 = fun Fun_4_loop(List, Chars, Content_2, Key_3, Out) ->
    case List of
        [] -> {Chars, Content_2, Key_3, Out};
        [Ch_2|Ch_2_rest] ->
            Out_2 = (Out ++ Ch_2),
            Fun_4_loop(Ch_2_rest, Chars, Content_2, Key_3, Out_2);
        _ -> {Chars, Content_2, Key_3, Out}
    end
end,
{Chars, Content_2, Key_3, Out_2} = Fun_4(Chars, Chars, Content_2, Key_3, Out),
        Out_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ascii', " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"),
    erlang:put('sample', "hallo welt"),
    erlang:put('enc', encrypt_string("hallo welt", 1)),
    erlang:put('dec', encrypt_string(erlang:get('enc'), 1)),
    io:format("~ts~n", [mochi_str(encrypt("hallo welt", 1))]),
    io:format("~ts~n", [mochi_repr(erlang:get('enc'))]),
    io:format("~ts~n", [mochi_repr(erlang:get('dec'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
