#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, gcd/2, find_mod_inverse/2]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

gcd(A, B) ->
    try
        X = (case (A < 0) of
    true -> -A;
    _ -> A
end),
        Y = (case (B < 0) of
    true -> -B;
    _ -> B
end),
        Fun = fun Fun_loop(A, B, X, Y) ->
    case (Y /= 0) of
        true ->
            T = mochi_mod(X, Y),
            X_2 = Y,
            Y_2 = T,
            Fun_loop(A, B, X_2, Y_2);
        _ -> {A, B, X, Y}
    end
end,
{A, B, X_2, Y_2} = Fun(A, B, X, Y),
        X_2
    catch {return, RetCatch} -> RetCatch end.

find_mod_inverse(A_2, M) ->
    try
        case (gcd(A_2, M) /= 1) of
        true -> error((((("mod inverse of " ++ mochi_str(A_2)) ++ " and ") ++ mochi_str(M)) ++ " does not exist"));
        _ -> ok
    end,
        U1 = 1,
        U2 = 0,
        U3 = A_2,
        V1 = 0,
        V2 = 1,
        V3 = M,
        Fun_2 = fun Fun_2_loop(A_2, M, U1, U2, U3, V1, V2, V3) ->
    case (V3 /= 0) of
        true ->
            Q = (U3 div V3),
            T1 = (U1 - (Q * V1)),
            T2 = (U2 - (Q * V2)),
            T3 = (U3 - (Q * V3)),
            U1_2 = V1,
            U2_2 = V2,
            U3_2 = V3,
            V1_2 = T1,
            V2_2 = T2,
            V3_2 = T3,
            Fun_2_loop(A_2, M, U1_2, U2_2, U3_2, V1_2, V2_2, V3_2);
        _ -> {A_2, M, U1, U2, U3, V1, V2, V3}
    end
end,
{A_2, M, U1_2, U2_2, U3_2, V1_2, V2_2, V3_2} = Fun_2(A_2, M, U1, U2, U3, V1, V2, V3),
        Res = mochi_mod(U1_2, M),
        case (Res < 0) of
        true -> Res_2 = (Res + M),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
        Res_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(find_mod_inverse(3, 11))]),
    io:format("~ts~n", [mochi_str(find_mod_inverse(7, 26))]),
    io:format("~ts~n", [mochi_str(find_mod_inverse(11, 26))]),
    io:format("~ts~n", [mochi_str(find_mod_inverse(17, 43))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
