#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, encrypt_message/2, decrypt_message/2]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

encrypt_message(Key, Message) ->
    try
        Result = "",
        Col = 0,
        Fun_2 = fun Fun_2_loop(Col, Key, Message, Result) ->
    case (Col < Key) of
        true ->
            Pointer = Col,
            Fun = fun Fun_loop(Col, Key, Message, Pointer, Result) ->
    case (Pointer < erlang:length(Message)) of
        true ->
            Result_2 = (Result ++ string:substr(Message, Pointer + 1, 1)),
            Pointer_2 = (Pointer + Key),
            Fun_loop(Col, Key, Message, Pointer_2, Result_2);
        _ -> {Col, Key, Message, Pointer, Result}
    end
end,
{Col, Key, Message, Pointer_2, Result_2} = Fun(Col, Key, Message, Pointer, Result),
            Col_2 = (Col + 1),
            Fun_2_loop(Col_2, Key, Message, Result_2);
        _ -> {Col, Key, Message, Result}
    end
end,
{Col_2, Key, Message, Result_2} = Fun_2(Col, Key, Message, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

decrypt_message(Key_2, Message_2) ->
    try
        Msg_len = erlang:length(Message_2),
        Num_cols = (Msg_len div Key_2),
        case (mochi_mod(Msg_len, Key_2) /= 0) of
        true -> Num_cols_2 = (Num_cols + 1),
            Num_cols_3 = Num_cols_2;
        _ -> Num_cols_3 = Num_cols
    end,
        Num_rows = Key_2,
        Num_shaded_boxes = ((Num_cols_3 * Num_rows) - Msg_len),
        Plain = [],
        I = 0,
        Fun_3 = fun Fun_3_loop(I, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain) ->
    case (I < Num_cols_3) of
        true ->
            Plain_2 = lists:append((case Plain of nil -> []; _ -> Plain end), [""]),
            I_2 = (I + 1),
            Fun_3_loop(I_2, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain_2);
        _ -> {I, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain}
    end
end,
{I_2, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain_2} = Fun_3(I, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain),
        Col_3 = 0,
        Row = 0,
        Idx = 0,
        Fun_4 = fun Fun_4_loop(Col_3, I_2, Idx, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain_2, Row) ->
    case (Idx < Msg_len) of
        true ->
            Ch = string:substr(Message_2, Idx + 1, 1),
            Plain_3 = lists:sublist(Plain_2, Col_3) ++ [((case erlang:is_map(Plain_2) of true -> maps:get(Col_3, Plain_2, nil); _ -> case Col_3 < 0 of true -> mochi_nth(erlang:length(Plain_2) + Col_3 + 1, Plain_2); _ -> mochi_nth(Col_3 + 1, Plain_2) end end) ++ Ch)] ++ lists:nthtail(Col_3 + 1, Plain_2),
            Col_4 = (Col_3 + 1),
            case ((Col_4 == Num_cols_3) orelse ((Col_4 == (Num_cols_3 - 1)) andalso (Row >= (Num_rows - Num_shaded_boxes)))) of
        true -> Col_5 = 0,
            Row_2 = (Row + 1),
            Col_6 = Col_5,
            Row_3 = Row_2;
        _ -> Col_6 = Col_4,
            Row_3 = Row
    end,
            Idx_2 = (Idx + 1),
            Fun_4_loop(Col_6, I_2, Idx_2, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain_3, Row_3);
        _ -> {Col_3, I_2, Idx, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain_2, Row}
    end
end,
{Col_6, I_2, Idx_2, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain_3, Row_3} = Fun_4(Col_3, I_2, Idx, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain_2, Row),
        Result_3 = "",
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(Col_6, I_3, Idx_2, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain_3, Result_3, Row_3) ->
    case (I_3 < Num_cols_3) of
        true ->
            Result_4 = (Result_3 ++ (case erlang:is_map(Plain_3) of true -> maps:get(I_3, Plain_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Plain_3) + I_3 + 1, Plain_3); _ -> mochi_nth(I_3 + 1, Plain_3) end end)),
            I_4 = (I_3 + 1),
            Fun_5_loop(Col_6, I_4, Idx_2, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain_3, Result_4, Row_3);
        _ -> {Col_6, I_3, Idx_2, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain_3, Result_3, Row_3}
    end
end,
{Col_6, I_4, Idx_2, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain_3, Result_4, Row_3} = Fun_5(Col_6, I_3, Idx_2, Key_2, Message_2, Msg_len, Num_cols_3, Num_rows, Num_shaded_boxes, Plain_3, Result_3, Row_3),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('key', 6),
    erlang:put('message', "Harshil Darji"),
    erlang:put('encrypted', encrypt_message(6, "Harshil Darji")),
    io:format("~ts~n", [mochi_repr(erlang:get('encrypted'))]),
    erlang:put('decrypted', decrypt_message(6, erlang:get('encrypted'))),
    io:format("~ts~n", [mochi_repr(erlang:get('decrypted'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
