#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, palindromic_string/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

palindromic_string(Input_string) ->
    try
        Max_length = 0,
        New_input_string = "",
        Output_string = "",
        N = erlang:length(Input_string),
        I = 0,
        Fun = fun Fun_loop(I, Input_string, Max_length, N, New_input_string, Output_string) ->
    case (I < (N - 1)) of
        true ->
            New_input_string_2 = ((New_input_string ++ string:substr(Input_string, I + 1, ((I + 1) - I))) ++ "|"),
            I_2 = (I + 1),
            Fun_loop(I_2, Input_string, Max_length, N, New_input_string_2, Output_string);
        _ -> {I, Input_string, Max_length, N, New_input_string, Output_string}
    end
end,
{I_2, Input_string, Max_length, N, New_input_string_2, Output_string} = Fun(I, Input_string, Max_length, N, New_input_string, Output_string),
        New_input_string_3 = (New_input_string_2 ++ string:substr(Input_string, (N - 1) + 1, (N - (N - 1)))),
        Left = 0,
        Right = 0,
        Length = [],
        I_3 = 0,
        M = erlang:length(New_input_string_3),
        Fun_2 = fun Fun_2_loop(I_3, Input_string, Left, Length, M, Max_length, N, New_input_string_3, Output_string, Right) ->
    case (I_3 < M) of
        true ->
            Length_2 = lists:append((case Length of nil -> []; _ -> Length end), [1]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Input_string, Left, Length_2, M, Max_length, N, New_input_string_3, Output_string, Right);
        _ -> {I_3, Input_string, Left, Length, M, Max_length, N, New_input_string_3, Output_string, Right}
    end
end,
{I_4, Input_string, Left, Length_2, M, Max_length, N, New_input_string_3, Output_string, Right} = Fun_2(I_3, Input_string, Left, Length, M, Max_length, N, New_input_string_3, Output_string, Right),
        Start = 0,
        J = 0,
        Fun_4 = fun Fun_4_loop(I_4, Input_string, J, Left, Length_2, M, Max_length, N, New_input_string_3, Output_string, Right, Start) ->
    case (J < M) of
        true ->
            K = 1,
            case (J =< Right) of
        true -> Mirror = ((Left + Right) - J),
            K_2 = mochi_safe_div((case erlang:is_map(Length_2) of true -> maps:get(Mirror, Length_2, nil); _ -> case Mirror < 0 of true -> mochi_nth(erlang:length(Length_2) + Mirror + 1, Length_2); _ -> mochi_nth(Mirror + 1, Length_2) end end), 2),
            Diff = ((Right - J) + 1),
            case (Diff < K_2) of
        true -> K_3 = Diff,
            K_4 = K_3;
        _ -> K_4 = K_2
    end,
            case (K_4 < 1) of
        true -> K_5 = 1,
            K_6 = K_5;
        _ -> K_6 = K_4
    end,
            Diff_2 = Diff,
            K_7 = K_6,
            Mirror_2 = Mirror;
        _ -> Diff_2 = nil,
            K_7 = K,
            Mirror_2 = nil
    end,
            Fun_3 = fun Fun_3_loop(Diff_2, I_4, Input_string, J, K_7, Left, Length_2, M, Max_length, Mirror_2, N, New_input_string_3, Output_string, Right, Start) ->
    case ((((J - K_7) >= 0) andalso ((J + K_7) < M)) andalso (string:substr(New_input_string_3, (J + K_7) + 1, (((J + K_7) + 1) - (J + K_7))) == string:substr(New_input_string_3, (J - K_7) + 1, (((J - K_7) + 1) - (J - K_7))))) of
        true ->
            K_8 = (K_7 + 1),
            Fun_3_loop(Diff_2, I_4, Input_string, J, K_8, Left, Length_2, M, Max_length, Mirror_2, N, New_input_string_3, Output_string, Right, Start);
        _ -> {Diff_2, I_4, Input_string, J, K_7, Left, Length_2, M, Max_length, Mirror_2, N, New_input_string_3, Output_string, Right, Start}
    end
end,
{Diff_2, I_4, Input_string, J, K_8, Left, Length_2, M, Max_length, Mirror_2, N, New_input_string_3, Output_string, Right, Start} = Fun_3(Diff_2, I_4, Input_string, J, K_7, Left, Length_2, M, Max_length, Mirror_2, N, New_input_string_3, Output_string, Right, Start),
            Length_3 = lists:sublist(Length_2, J) ++ [((2 * K_8) - 1)] ++ lists:nthtail(J + 1, Length_2),
            case (((J + K_8) - 1) > Right) of
        true -> Left_2 = ((J - K_8) + 1),
            Right_2 = ((J + K_8) - 1),
            Left_3 = Left_2,
            Right_3 = Right_2;
        _ -> Left_3 = Left,
            Right_3 = Right
    end,
            case ((case erlang:is_map(Length_3) of true -> maps:get(J, Length_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Length_3) + J + 1, Length_3); _ -> mochi_nth(J + 1, Length_3) end end) > Max_length) of
        true -> Max_length_2 = (case erlang:is_map(Length_3) of true -> maps:get(J, Length_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Length_3) + J + 1, Length_3); _ -> mochi_nth(J + 1, Length_3) end end),
            Start_2 = J,
            Max_length_3 = Max_length_2,
            Start_3 = Start_2;
        _ -> Max_length_3 = Max_length,
            Start_3 = Start
    end,
            J_2 = (J + 1),
            Fun_4_loop(I_4, Input_string, J_2, Left_3, Length_3, M, Max_length_3, N, New_input_string_3, Output_string, Right_3, Start_3);
        _ -> {I_4, Input_string, J, Left, Length_2, M, Max_length, N, New_input_string_3, Output_string, Right, Start}
    end
end,
{I_4, Input_string, J_2, Left_3, Length_3, M, Max_length_3, N, New_input_string_3, Output_string, Right_3, Start_3} = Fun_4(I_4, Input_string, J, Left, Length_2, M, Max_length, N, New_input_string_3, Output_string, Right, Start),
        S = string:substr(New_input_string_3, (Start_3 - mochi_safe_div(Max_length_3, 2)) + 1, (((Start_3 + mochi_safe_div(Max_length_3, 2)) + 1) - (Start_3 - mochi_safe_div(Max_length_3, 2)))),
        Idx = 0,
        Fun_5 = fun Fun_5_loop(I_4, Idx, Input_string, J_2, Left_3, Length_3, M, Max_length_3, N, New_input_string_3, Output_string, Right_3, S, Start_3) ->
    case (Idx < erlang:length(S)) of
        true ->
            Ch = string:substr(S, Idx + 1, ((Idx + 1) - Idx)),
            case (Ch /= "|") of
        true -> Output_string_2 = (Output_string ++ Ch),
            Output_string_3 = Output_string_2;
        _ -> Output_string_3 = Output_string
    end,
            Idx_2 = (Idx + 1),
            Fun_5_loop(I_4, Idx_2, Input_string, J_2, Left_3, Length_3, M, Max_length_3, N, New_input_string_3, Output_string_3, Right_3, S, Start_3);
        _ -> {I_4, Idx, Input_string, J_2, Left_3, Length_3, M, Max_length_3, N, New_input_string_3, Output_string, Right_3, S, Start_3}
    end
end,
{I_4, Idx_2, Input_string, J_2, Left_3, Length_3, M, Max_length_3, N, New_input_string_3, Output_string_3, Right_3, S, Start_3} = Fun_5(I_4, Idx, Input_string, J_2, Left_3, Length_3, M, Max_length_3, N, New_input_string_3, Output_string, Right_3, S, Start_3),
        Output_string_3
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(palindromic_string("abbbaba"))]),
        io:format("~ts~n", [mochi_repr(palindromic_string("ababa"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
