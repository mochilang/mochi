#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/2, to_title_case/1, split_words/1, sentence_to_title_case/1]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

index_of(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, 1) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

to_title_case(Word) ->
    try
        case (erlang:length(Word) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        First = string:substr(Word, 0 + 1, (1 - 0)),
        Idx = index_of("abcdefghijklmnopqrstuvwxyz", First),
        Result = (case (Idx >= 0) of
    true -> string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Idx + 1, ((Idx + 1) - Idx));
    _ -> First
end),
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(First, I_3, Idx, Result, Word) ->
    case (I_3 < erlang:length(Word)) of
        true ->
            Ch_2 = string:substr(Word, I_3 + 1, ((I_3 + 1) - I_3)),
            Uidx = index_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch_2),
            case (Uidx >= 0) of
        true -> Result_2 = (Result ++ string:substr("abcdefghijklmnopqrstuvwxyz", Uidx + 1, ((Uidx + 1) - Uidx))),
            Result_4 = Result_2;
        _ -> Result_3 = (Result ++ Ch_2),
            Result_4 = Result_3
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(First, I_4, Idx, Result_4, Word);
        _ -> {First, I_3, Idx, Result, Word}
    end
end,
{First, I_4, Idx, Result_4, Word} = Fun_2(First, I_3, Idx, Result, Word),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

split_words(S_2) ->
    try
        Words = [],
        Current = "",
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Current, I_5, S_2, Words) ->
    case (I_5 < erlang:length(S_2)) of
        true ->
            Ch_3 = string:substr(S_2, I_5 + 1, 1),
            case (Ch_3 == " ") of
        true -> case (erlang:length(Current) > 0) of
        true -> Words_2 = lists:append((case Words of nil -> []; _ -> Words end), [Current]),
            Current_2 = "",
            Current_3 = Current_2,
            Words_3 = Words_2;
        _ -> Current_3 = Current,
            Words_3 = Words
    end,
            Current_5 = Current_3,
            Words_4 = Words_3;
        _ -> Current_4 = (Current ++ Ch_3),
            Current_5 = Current_4,
            Words_4 = Words
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Current_5, I_6, S_2, Words_4);
        _ -> {Current, I_5, S_2, Words}
    end
end,
{Current_5, I_6, S_2, Words_4} = Fun_3(Current, I_5, S_2, Words),
        case (erlang:length(Current_5) > 0) of
        true -> Words_5 = lists:append((case Words_4 of nil -> []; _ -> Words_4 end), [Current_5]),
            Words_6 = Words_5;
        _ -> Words_6 = Words_4
    end,
        Words_6
    catch {return, RetCatch} -> RetCatch end.

sentence_to_title_case(Sentence) ->
    try
        Words_7 = split_words(Sentence),
        Res = "",
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(I_7, Res, Sentence, Words_7) ->
    case (I_7 < erlang:length(Words_7)) of
        true ->
            Res_2 = (Res ++ to_title_case((case erlang:is_map(Words_7) of true -> maps:get(I_7, Words_7, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Words_7) + I_7 + 1, Words_7); _ -> mochi_nth(I_7 + 1, Words_7) end end))),
            case ((I_7 + 1) < erlang:length(Words_7)) of
        true -> Res_3 = (Res_2 ++ " "),
            Res_4 = Res_3;
        _ -> Res_4 = Res_2
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(I_8, Res_4, Sentence, Words_7);
        _ -> {I_7, Res, Sentence, Words_7}
    end
end,
{I_8, Res_4, Sentence, Words_7} = Fun_4(I_7, Res, Sentence, Words_7),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('lower', "abcdefghijklmnopqrstuvwxyz"),
    erlang:put('upper', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    io:format("~ts~n", [mochi_repr(to_title_case("Aakash"))]),
    io:format("~ts~n", [mochi_repr(to_title_case("aakash"))]),
    io:format("~ts~n", [mochi_repr(to_title_case("AAKASH"))]),
    io:format("~ts~n", [mochi_repr(to_title_case("aAkAsH"))]),
    io:format("~ts~n", [mochi_repr(sentence_to_title_case("Aakash Giri"))]),
    io:format("~ts~n", [mochi_repr(sentence_to_title_case("aakash giri"))]),
    io:format("~ts~n", [mochi_repr(sentence_to_title_case("AAKASH GIRI"))]),
    io:format("~ts~n", [mochi_repr(sentence_to_title_case("aAkAsH gIrI"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
