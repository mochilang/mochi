#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, split/2, join_with_space/1, reverse_str/1, reverse_letters/2, test_reverse_letters/0, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

split(S, Sep) ->
    try
        Res = [],
        Current = "",
        I = 0,
        Fun = fun Fun_loop(Current, I, Res, S, Sep) ->
    case (I < erlang:length(S)) of
        true ->
            Ch = string:substr(S, I + 1, 1),
            case (Ch == Sep) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Current]),
            Current_2 = "",
            Current_4 = Current_2,
            Res_3 = Res_2;
        _ -> Current_3 = (Current ++ Ch),
            Current_4 = Current_3,
            Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_loop(Current_4, I_2, Res_3, S, Sep);
        _ -> {Current, I, Res, S, Sep}
    end
end,
{Current_4, I_2, Res_3, S, Sep} = Fun(Current, I, Res, S, Sep),
        Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Current_4]),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

join_with_space(Xs) ->
    try
        S_2 = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, S_2, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            S_3 = (S_2 ++ (case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end)),
            case ((I_3 + 1) < erlang:length(Xs)) of
        true -> S_4 = (S_3 ++ " "),
            S_5 = S_4;
        _ -> S_5 = S_3
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, S_5, Xs);
        _ -> {I_3, S_2, Xs}
    end
end,
{I_4, S_5, Xs} = Fun_2(I_3, S_2, Xs),
        S_5
    catch {return, RetCatch} -> RetCatch end.

reverse_str(S_6) ->
    try
        Res_5 = "",
        I_5 = (erlang:length(S_6) - 1),
        Fun_3 = fun Fun_3_loop(I_5, Res_5, S_6) ->
    case (I_5 >= 0) of
        true ->
            Res_6 = (Res_5 ++ string:substr(S_6, I_5 + 1, 1)),
            I_6 = (I_5 - 1),
            Fun_3_loop(I_6, Res_6, S_6);
        _ -> {I_5, Res_5, S_6}
    end
end,
{I_6, Res_6, S_6} = Fun_3(I_5, Res_5, S_6),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

reverse_letters(Sentence, Length) ->
    try
        Words = string:tokens(Sentence, " "),
        Result = [],
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(I_7, Length, Result, Sentence, Words) ->
    case (I_7 < erlang:length(Words)) of
        true ->
            Word = string:substr(Words, I_7 + 1, 1),
            case (erlang:length(Word) > Length) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [reverse_str(Word)]),
            Result_4 = Result_2;
        _ -> Result_3 = lists:append((case Result of nil -> []; _ -> Result end), [Word]),
            Result_4 = Result_3
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(I_8, Length, Result_4, Sentence, Words);
        _ -> {I_7, Length, Result, Sentence, Words}
    end
end,
{I_8, Length, Result_4, Sentence, Words} = Fun_4(I_7, Length, Result, Sentence, Words),
        join_with_space(Result_4)
    catch {return, RetCatch} -> RetCatch end.

test_reverse_letters() ->
    try
        case (reverse_letters("Hey wollef sroirraw", 3) /= "Hey fellow warriors") of
        true -> erlang:error({panic, "test1 failed"});
        _ -> ok
    end,
        case (reverse_letters("nohtyP is nohtyP", 2) /= "Python is Python") of
        true -> erlang:error({panic, "test2 failed"});
        _ -> ok
    end,
        case (reverse_letters("1 12 123 1234 54321 654321", 0) /= "1 21 321 4321 12345 123456") of
        true -> erlang:error({panic, "test3 failed"});
        _ -> ok
    end,
        case (reverse_letters("racecar", 0) /= "racecar") of
        true -> erlang:error({panic, "test4 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_reverse_letters(),
        io:format("~ts~n", [mochi_repr(reverse_letters("Hey wollef sroirraw", 3))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
