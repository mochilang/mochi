#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_pangram/1, is_pangram_faster/1, is_pangram_fastest/1]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

is_pangram(Input_str) ->
    try
        Letters = [],
        I = 0,
        Fun = fun Fun_loop(I, Input_str, Letters) ->
    case (I < erlang:length(Input_str)) of
        true ->
            C = string:to_lower(string:substr(Input_str, I + 1, 1)),
            Is_new = mochi_not(mochi_member(C, Letters)),
            case ((((C /= " ") andalso ("a" =< C)) andalso (C =< "z")) andalso Is_new) of
        true -> Letters_2 = lists:append((case Letters of nil -> []; _ -> Letters end), [C]),
            Letters_3 = Letters_2;
        _ -> Letters_3 = Letters
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Input_str, Letters_3);
        _ -> {I, Input_str, Letters}
    end
end,
{I_2, Input_str, Letters_3} = Fun(I, Input_str, Letters),
        (erlang:length(Letters_3) == 26)
    catch {return, RetCatch} -> RetCatch end.

is_pangram_faster(Input_str_2) ->
    try
        Alphabet = "abcdefghijklmnopqrstuvwxyz",
        Flag = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Alphabet, Flag, I_3, Input_str_2) ->
    case (I_3 < 26) of
        true ->
            Flag_2 = lists:append((case Flag of nil -> []; _ -> Flag end), [false]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Alphabet, Flag_2, I_4, Input_str_2);
        _ -> {Alphabet, Flag, I_3, Input_str_2}
    end
end,
{Alphabet, Flag_2, I_4, Input_str_2} = Fun_2(Alphabet, Flag, I_3, Input_str_2),
        J = 0,
        Fun_4 = fun Fun_4_loop(Alphabet, Flag_2, I_4, Input_str_2, J) ->
    case (J < erlang:length(Input_str_2)) of
        true ->
            try
                C_2 = string:to_lower(string:substr(Input_str_2, J + 1, 1)),
                K = 0,
                Fun_3 = fun Fun_3_loop(Alphabet, C_2, Flag_2, I_4, Input_str_2, J, K) ->
    case (K < 26) of
        true ->
            try
                case (string:substr(Alphabet, K + 1, 1) == C_2) of
        true -> Flag_3 = lists:sublist(Flag_2, K) ++ [true] ++ lists:nthtail(K + 1, Flag_2),
            throw({break, Alphabet, C_2, Flag_3, I_4, Input_str_2, J, K}),
            Flag_4 = Flag_3;
        _ -> Flag_4 = Flag_2
    end,
                K_2 = (K + 1),
                Fun_3_loop(Alphabet, C_2, Flag_4, I_4, Input_str_2, J, K_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {Alphabet, C_2, Flag_2, I_4, Input_str_2, J, K}
    end
end,
{Alphabet, C_2, Flag_4, I_4, Input_str_2, J, K_2} = Fun_3(Alphabet, C_2, Flag_2, I_4, Input_str_2, J, K),
                J_2 = (J + 1),
                Fun_4_loop(Alphabet, Flag_4, I_4, Input_str_2, J_2)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_4_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Alphabet, Flag_2, I_4, Input_str_2, J}
    end
end,
{Alphabet, Flag_4, I_4, Input_str_2, J_2} = Fun_4(Alphabet, Flag_2, I_4, Input_str_2, J),
        T = 0,
        Fun_5 = fun Fun_5_loop(Alphabet, Flag_4, I_4, Input_str_2, J_2, T) ->
    case (T < 26) of
        true ->
            case mochi_not((case erlang:is_map(Flag_4) of true -> maps:get(T, Flag_4, nil); _ -> case T < 0 of true -> mochi_nth(erlang:length(Flag_4) + T + 1, Flag_4); _ -> mochi_nth(T + 1, Flag_4) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            T_2 = (T + 1),
            Fun_5_loop(Alphabet, Flag_4, I_4, Input_str_2, J_2, T_2);
        _ -> {Alphabet, Flag_4, I_4, Input_str_2, J_2, T}
    end
end,
{Alphabet, Flag_4, I_4, Input_str_2, J_2, T_2} = Fun_5(Alphabet, Flag_4, I_4, Input_str_2, J_2, T),
        true
    catch {return, RetCatch} -> RetCatch end.

is_pangram_fastest(Input_str_3) ->
    try
        S = string:to_lower(Input_str_3),
        Alphabet_2 = "abcdefghijklmnopqrstuvwxyz",
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(Alphabet_2, I_5, Input_str_3, S) ->
    case (I_5 < erlang:length(Alphabet_2)) of
        true ->
            Letter = string:substr(Alphabet_2, I_5 + 1, 1),
            case mochi_not((string:str(S, Letter) /= 0)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_6_loop(Alphabet_2, I_6, Input_str_3, S);
        _ -> {Alphabet_2, I_5, Input_str_3, S}
    end
end,
{Alphabet_2, I_6, Input_str_3, S} = Fun_6(Alphabet_2, I_5, Input_str_3, S),
        true
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('s1', "The quick brown fox jumps over the lazy dog"),
    erlang:put('s2', "My name is Unknown"),
    io:format("~ts~n", [mochi_str(is_pangram("The quick brown fox jumps over the lazy dog"))]),
    io:format("~ts~n", [mochi_str(is_pangram("My name is Unknown"))]),
    io:format("~ts~n", [mochi_str(is_pangram_faster("The quick brown fox jumps over the lazy dog"))]),
    io:format("~ts~n", [mochi_str(is_pangram_faster("My name is Unknown"))]),
    io:format("~ts~n", [mochi_str(is_pangram_fastest("The quick brown fox jumps over the lazy dog"))]),
    io:format("~ts~n", [mochi_str(is_pangram_fastest("My name is Unknown"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
