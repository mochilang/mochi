#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of_char/2, ord/1, rabin_karp/2, test_rabin_karp/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

index_of_char(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, 1) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

ord(Ch_2) ->
    try
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower = "abcdefghijklmnopqrstuvwxyz",
        Digits = "0123456789",
        Idx = index_of_char("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch_2),
        case (Idx >= 0) of
        true -> throw({return, (65 + Idx)});
        _ -> ok
    end,
        Idx_2 = index_of_char("abcdefghijklmnopqrstuvwxyz", Ch_2),
        case (Idx_2 >= 0) of
        true -> throw({return, (97 + Idx_2)});
        _ -> ok
    end,
        Idx_3 = index_of_char("0123456789", Ch_2),
        case (Idx_3 >= 0) of
        true -> throw({return, (48 + Idx_3)});
        _ -> ok
    end,
        case (Ch_2 == "ü") of
        true -> throw({return, 252});
        _ -> ok
    end,
        case (Ch_2 == "Ü") of
        true -> throw({return, 220});
        _ -> ok
    end,
        case (Ch_2 == " ") of
        true -> throw({return, 32});
        _ -> ok
    end,
        0
    catch {return, RetCatch} -> RetCatch end.

rabin_karp(Pattern, Text) ->
    try
        P_len = erlang:length(Pattern),
        T_len = erlang:length(Text),
        case (P_len > T_len) of
        true -> throw({return, false});
        _ -> ok
    end,
        P_hash = 0,
        T_hash = 0,
        Modulus_power = 1,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Modulus_power, P_hash, P_len, Pattern, T_hash, T_len, Text) ->
    case (I_3 < P_len) of
        true ->
            P_hash_2 = mochi_mod((ord(string:substr(Pattern, I_3 + 1, 1)) + (P_hash * 256)), 1000003),
            T_hash_2 = mochi_mod((ord(string:substr(Text, I_3 + 1, 1)) + (T_hash * 256)), 1000003),
            case (I_3 /= (P_len - 1)) of
        true -> Modulus_power_2 = mochi_mod((Modulus_power * 256), 1000003),
            Modulus_power_3 = Modulus_power_2;
        _ -> Modulus_power_3 = Modulus_power
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Modulus_power_3, P_hash_2, P_len, Pattern, T_hash_2, T_len, Text);
        _ -> {I_3, Modulus_power, P_hash, P_len, Pattern, T_hash, T_len, Text}
    end
end,
{I_4, Modulus_power_3, P_hash_2, P_len, Pattern, T_hash_2, T_len, Text} = Fun_2(I_3, Modulus_power, P_hash, P_len, Pattern, T_hash, T_len, Text),
        J = 0,
        Fun_3 = fun Fun_3_loop(I_4, J, Modulus_power_3, P_hash_2, P_len, Pattern, T_hash_2, T_len, Text) ->
    case (J =< (T_len - P_len)) of
        true ->
            try
                case ((T_hash_2 == P_hash_2) andalso (string:substr(Text, J + 1, ((J + P_len) - J)) == Pattern)) of
        true -> throw({return, true});
        _ -> ok
    end,
                case (J == (T_len - P_len)) of
        true -> J_2 = (J + 1),
            throw({continue, I_4, J_2, Modulus_power_3, P_hash_2, P_len, Pattern, T_hash_2, T_len, Text}),
            J_3 = J_2;
        _ -> J_3 = J
    end,
                T_hash_3 = mochi_mod((((T_hash_2 - (ord(string:substr(Text, J_3 + 1, 1)) * Modulus_power_3)) * 256) + ord(string:substr(Text, (J_3 + P_len) + 1, 1))), 1000003),
                case (T_hash_3 < 0) of
        true -> T_hash_4 = (T_hash_3 + 1000003),
            T_hash_5 = T_hash_4;
        _ -> T_hash_5 = T_hash_3
    end,
                J_4 = (J_3 + 1),
                Fun_3_loop(I_4, J_4, Modulus_power_3, P_hash_2, P_len, Pattern, T_hash_5, T_len, Text)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8}
            end;
        _ -> {I_4, J, Modulus_power_3, P_hash_2, P_len, Pattern, T_hash_2, T_len, Text}
    end
end,
{I_4, J_4, Modulus_power_3, P_hash_2, P_len, Pattern, T_hash_5, T_len, Text} = Fun_3(I_4, J, Modulus_power_3, P_hash_2, P_len, Pattern, T_hash_2, T_len, Text),
        false
    catch {return, RetCatch} -> RetCatch end.

test_rabin_karp() ->
    try
        Pattern1 = "abc1abc12",
        Text1 = "alskfjaldsabc1abc1abc12k23adsfabcabc",
        Text2 = "alskfjaldsk23adsfabcabc",
        case (mochi_not(rabin_karp("abc1abc12", "alskfjaldsabc1abc1abc12k23adsfabcabc")) orelse rabin_karp("abc1abc12", "alskfjaldsk23adsfabcabc")) of
        true -> io:format("~ts~n", [mochi_repr("Failure")]),
            throw({return, nil});
        _ -> ok
    end,
        Pattern2 = "ABABX",
        Text3 = "ABABZABABYABABX",
        case mochi_not(rabin_karp("ABABX", "ABABZABABYABABX")) of
        true -> io:format("~ts~n", [mochi_repr("Failure")]),
            throw({return, nil});
        _ -> ok
    end,
        Pattern3 = "AAAB",
        Text4 = "ABAAAAAB",
        case mochi_not(rabin_karp("AAAB", "ABAAAAAB")) of
        true -> io:format("~ts~n", [mochi_repr("Failure")]),
            throw({return, nil});
        _ -> ok
    end,
        Pattern4 = "abcdabcy",
        Text5 = "abcxabcdabxabcdabcdabcy",
        case mochi_not(rabin_karp("abcdabcy", "abcxabcdabxabcdabcdabcy")) of
        true -> io:format("~ts~n", [mochi_repr("Failure")]),
            throw({return, nil});
        _ -> ok
    end,
        Pattern5 = "Lü",
        Text6 = "Lüsai",
        case mochi_not(rabin_karp("Lü", "Lüsai")) of
        true -> io:format("~ts~n", [mochi_repr("Failure")]),
            throw({return, nil});
        _ -> ok
    end,
        Pattern6 = "Lue",
        case rabin_karp("Lue", "Lüsai") of
        true -> io:format("~ts~n", [mochi_repr("Failure")]),
            throw({return, nil});
        _ -> ok
    end,
        io:format("~ts~n", [mochi_repr("Success.")]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('alphabet_size', 256),
    erlang:put('modulus', 1000003),
    test_rabin_karp(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
