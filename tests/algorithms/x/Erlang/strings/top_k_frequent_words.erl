#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, heapify/3, build_max_heap/1, top_k_frequent_words/2, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

heapify(Arr, Index, Heap_size) ->
    try
        Largest = Index,
        Left = ((2 * Index) + 1),
        Right = ((2 * Index) + 2),
        case (Left < Heap_size) of
        true -> Left_item = (case erlang:is_map(Arr) of true -> maps:get(Left, Arr, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Arr) + Left + 1, Arr); _ -> mochi_nth(Left + 1, Arr) end end),
            Largest_item = (case erlang:is_map(Arr) of true -> maps:get(Largest, Arr, nil); _ -> case Largest < 0 of true -> mochi_nth(erlang:length(Arr) + Largest + 1, Arr); _ -> mochi_nth(Largest + 1, Arr) end end),
            case (maps:get("count", Left_item, nil) > maps:get("count", Largest_item, nil)) of
        true -> Largest_2 = Left,
            Largest_3 = Largest_2;
        _ -> Largest_3 = Largest
    end,
            Largest_4 = Largest_3,
            Largest_item_2 = Largest_item,
            Left_item_2 = Left_item;
        _ -> Largest_4 = Largest,
            Largest_item_2 = nil,
            Left_item_2 = nil
    end,
        case (Right < Heap_size) of
        true -> Right_item = (case erlang:is_map(Arr) of true -> maps:get(Right, Arr, nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(Arr) + Right + 1, Arr); _ -> mochi_nth(Right + 1, Arr) end end),
            Largest_item2 = (case erlang:is_map(Arr) of true -> maps:get(Largest_4, Arr, nil); _ -> case Largest_4 < 0 of true -> mochi_nth(erlang:length(Arr) + Largest_4 + 1, Arr); _ -> mochi_nth(Largest_4 + 1, Arr) end end),
            case (maps:get("count", Right_item, nil) > maps:get("count", Largest_item2, nil)) of
        true -> Largest_5 = Right,
            Largest_6 = Largest_5;
        _ -> Largest_6 = Largest_4
    end,
            Largest_7 = Largest_6,
            Largest_item2_2 = Largest_item2,
            Right_item_2 = Right_item;
        _ -> Largest_7 = Largest_4,
            Largest_item2_2 = nil,
            Right_item_2 = nil
    end,
        case (Largest_7 /= Index) of
        true -> Temp = (case erlang:is_map(Arr) of true -> maps:get(Largest_7, Arr, nil); _ -> case Largest_7 < 0 of true -> mochi_nth(erlang:length(Arr) + Largest_7 + 1, Arr); _ -> mochi_nth(Largest_7 + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, Largest_7) ++ [(case erlang:is_map(Arr) of true -> maps:get(Index, Arr, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Arr) + Index + 1, Arr); _ -> mochi_nth(Index + 1, Arr) end end)] ++ lists:nthtail(Largest_7 + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, Index) ++ [Temp] ++ lists:nthtail(Index + 1, Arr_2),
            heapify(Arr_3, Largest_7, Heap_size),
            Arr_4 = Arr_3,
            Temp_2 = Temp;
        _ -> Arr_4 = Arr,
            Temp_2 = nil
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

build_max_heap(Arr_5) ->
    try
        I = (mochi_safe_div(erlang:length(Arr_5), 2) - 1),
        Fun = fun Fun_loop(Arr_5, I) ->
    case (I >= 0) of
        true ->
            heapify(Arr_5, I, erlang:length(Arr_5)),
            I_2 = (I - 1),
            Fun_loop(Arr_5, I_2);
        _ -> {Arr_5, I}
    end
end,
{Arr_5, I_2} = Fun(Arr_5, I),
        nil
    catch {return, RetCatch} -> RetCatch end.

top_k_frequent_words(Words, K_value) ->
    try
        erlang:put('freq_map', #{}),
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, K_value, Words) ->
    case (I_3 < erlang:length(Words)) of
        true ->
            W = (case erlang:is_map(Words) of true -> maps:get(I_3, Words, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Words) + I_3 + 1, Words); _ -> mochi_nth(I_3 + 1, Words) end end),
            case maps:is_key(W, erlang:get('freq_map')) of
        true -> Freq_map_tmp = lists:sublist(erlang:get('freq_map'), W) ++ [(maps:get(W, erlang:get('freq_map'), nil) + 1)] ++ lists:nthtail(W + 1, erlang:get('freq_map')),
            erlang:put('freq_map', Freq_map_tmp),
            Freq_map_tmp_3 = Freq_map_tmp;
        _ -> Freq_map_tmp_2 = lists:sublist(erlang:get('freq_map'), W) ++ [1] ++ lists:nthtail(W + 1, erlang:get('freq_map')),
            erlang:put('freq_map', Freq_map_tmp_2),
            Freq_map_tmp_3 = Freq_map_tmp_2
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, K_value, Words);
        _ -> {I_3, K_value, Words}
    end
end,
{I_4, K_value, Words} = Fun_2(I_3, K_value, Words),
        Heap = [],
        Fun_3 = fun Fun_3_loop(List, Heap, I_4, K_value, Words) ->
    case List of
        [] -> {Heap, I_4, K_value, Words};
        [W_2|W_2_rest] ->
            Heap_2 = lists:append((case Heap of nil -> []; _ -> Heap end), [#{"word" => W_2, "count" => maps:get(W_2, erlang:get('freq_map'), nil)}]),
            Fun_3_loop(W_2_rest, Heap_2, I_4, K_value, Words);
        _ -> {Heap, I_4, K_value, Words}
    end
end,
{Heap_2, I_4, K_value, Words} = Fun_3(maps:keys(erlang:get('freq_map')), Heap, I_4, K_value, Words),
        build_max_heap(Heap_2),
        Result = [],
        Heap_size_2 = erlang:length(Heap_2),
        Limit = K_value,
        case (Limit > Heap_size_2) of
        true -> Limit_2 = Heap_size_2,
            Limit_3 = Limit_2;
        _ -> Limit_3 = Limit
    end,
        J = 0,
        Fun_4 = fun Fun_4_loop(Heap_2, Heap_size_2, I_4, J, K_value, Limit_3, Result, Words) ->
    case (J < Limit_3) of
        true ->
            Item = (case erlang:is_map(Heap_2) of true -> maps:get(0, Heap_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Heap_2) + 0 + 1, Heap_2); _ -> mochi_nth(0 + 1, Heap_2) end end),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [maps:get("word", Item, nil)]),
            Heap_3 = lists:sublist(Heap_2, 0) ++ [(case erlang:is_map(Heap_2) of true -> maps:get((Heap_size_2 - 1), Heap_2, nil); _ -> case (Heap_size_2 - 1) < 0 of true -> mochi_nth(erlang:length(Heap_2) + (Heap_size_2 - 1) + 1, Heap_2); _ -> mochi_nth((Heap_size_2 - 1) + 1, Heap_2) end end)] ++ lists:nthtail(0 + 1, Heap_2),
            Heap_4 = lists:sublist(Heap_3, (Heap_size_2 - 1)) ++ [Item] ++ lists:nthtail((Heap_size_2 - 1) + 1, Heap_3),
            Heap_size_3 = (Heap_size_2 - 1),
            heapify(Heap_4, 0, Heap_size_3),
            J_2 = (J + 1),
            Fun_4_loop(Heap_4, Heap_size_3, I_4, J_2, K_value, Limit_3, Result_2, Words);
        _ -> {Heap_2, Heap_size_2, I_4, J, K_value, Limit_3, Result, Words}
    end
end,
{Heap_4, Heap_size_3, I_4, J_2, K_value, Limit_3, Result_2, Words} = Fun_4(Heap_2, Heap_size_2, I_4, J, K_value, Limit_3, Result, Words),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Sample = ["a", "b", "c", "a", "c", "c"],
        io:format("~ts~n", [mochi_repr(top_k_frequent_words(Sample, 3))]),
        io:format("~ts~n", [mochi_repr(top_k_frequent_words(Sample, 2))]),
        io:format("~ts~n", [mochi_repr(top_k_frequent_words(Sample, 1))]),
        io:format("~ts~n", [mochi_repr(top_k_frequent_words(Sample, 0))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('freq_map', #{}),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
