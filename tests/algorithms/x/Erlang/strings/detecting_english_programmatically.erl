#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, to_upper/1, char_in/2, remove_non_letters/1, split_spaces/1, load_dictionary/0, get_english_count/1, is_english/3]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

to_upper(S) ->
    try
        Res = "",
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Res, S) ->
    case (I < erlang:length(S)) of
        true ->
            try
                C = string:substr(S, I + 1, ((I + 1) - I)),
                J = 0,
                Up = C,
                Fun = fun Fun_loop(C, I, J, Res, S, Up) ->
    case (J < erlang:length("abcdefghijklmnopqrstuvwxyz")) of
        true ->
            try
                case (C == string:substr("abcdefghijklmnopqrstuvwxyz", J + 1, ((J + 1) - J))) of
        true -> Up_2 = string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", J + 1, ((J + 1) - J)),
            throw({break, C, I, J, Res, S, Up_2}),
            Up_3 = Up_2;
        _ -> Up_3 = Up
    end,
                J_2 = (J + 1),
                Fun_loop(C, I, J_2, Res, S, Up_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_loop(C0, C1, C2, C3, C4, C5);
                {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5}
            end;
        _ -> {C, I, J, Res, S, Up}
    end
end,
{C, I, J_2, Res, S, Up_3} = Fun(C, I, J, Res, S, Up),
                Res_2 = (Res ++ Up_3),
                I_2 = (I + 1),
                Fun_2_loop(I_2, Res_2, S)
            catch
                {continue, C0, C1, C2} -> Fun_2_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {I, Res, S}
    end
end,
{I_2, Res_2, S} = Fun_2(I, Res, S),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

char_in(Chars, C_2) ->
    try
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(C_2, Chars, I_3) ->
    case (I_3 < erlang:length(Chars)) of
        true ->
            case (string:substr(Chars, I_3 + 1, ((I_3 + 1) - I_3)) == C_2) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(C_2, Chars, I_4);
        _ -> {C_2, Chars, I_3}
    end
end,
{C_2, Chars, I_4} = Fun_3(C_2, Chars, I_3),
        false
    catch {return, RetCatch} -> RetCatch end.

remove_non_letters(Message) ->
    try
        Res_3 = "",
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, Message, Res_3) ->
    case (I_5 < erlang:length(Message)) of
        true ->
            Ch = string:substr(Message, I_5 + 1, ((I_5 + 1) - I_5)),
            case char_in("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \t\n", Ch) of
        true -> Res_4 = (Res_3 ++ Ch),
            Res_5 = Res_4;
        _ -> Res_5 = Res_3
    end,
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Message, Res_5);
        _ -> {I_5, Message, Res_3}
    end
end,
{I_6, Message, Res_5} = Fun_4(I_5, Message, Res_3),
        Res_5
    catch {return, RetCatch} -> RetCatch end.

split_spaces(Text) ->
    try
        Res_6 = [],
        Current = "",
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(Current, I_7, Res_6, Text) ->
    case (I_7 < erlang:length(Text)) of
        true ->
            Ch_2 = string:substr(Text, I_7 + 1, ((I_7 + 1) - I_7)),
            case (Ch_2 == " ") of
        true -> Res_7 = lists:append((case Res_6 of nil -> []; _ -> Res_6 end), [Current]),
            Current_2 = "",
            Current_4 = Current_2,
            Res_8 = Res_7;
        _ -> Current_3 = (Current ++ Ch_2),
            Current_4 = Current_3,
            Res_8 = Res_6
    end,
            I_8 = (I_7 + 1),
            Fun_5_loop(Current_4, I_8, Res_8, Text);
        _ -> {Current, I_7, Res_6, Text}
    end
end,
{Current_4, I_8, Res_8, Text} = Fun_5(Current, I_7, Res_6, Text),
        Res_9 = lists:append((case Res_8 of nil -> []; _ -> Res_8 end), [Current_4]),
        Res_9
    catch {return, RetCatch} -> RetCatch end.

load_dictionary() ->
    try
        Words = ["HELLO", "WORLD", "HOW", "ARE", "YOU", "THE", "QUICK", "BROWN", "FOX", "JUMPS", "OVER", "LAZY", "DOG"],
        Dict = #{},
        Fun_6 = fun Fun_6_loop(List, Dict, Words) ->
    case List of
        [] -> {Dict, Words};
        [W|W_rest] ->
            Dict_2 = maps:put(W, true, Dict),
            Fun_6_loop(W_rest, Dict_2, Words);
        _ -> {Dict, Words}
    end
end,
{Dict_2, Words} = Fun_6(Words, Dict, Words),
        Dict_2
    catch {return, RetCatch} -> RetCatch end.

get_english_count(Message_2) ->
    try
        Upper = to_upper(Message_2),
        Cleaned = remove_non_letters(Upper),
        Possible = split_spaces(Cleaned),
        Matches = 0,
        Total = 0,
        Fun_7 = fun Fun_7_loop(List, Cleaned, Matches, Message_2, Possible, Total, Upper) ->
    case List of
        [] -> {Cleaned, Matches, Message_2, Possible, Total, Upper};
        [W_2|W_2_rest] ->
            case (W_2 /= "") of
        true -> Total_2 = (Total + 1),
            case maps:is_key(W_2, erlang:get('ENGLISH_WORDS')) of
        true -> Matches_2 = (Matches + 1),
            Matches_3 = Matches_2;
        _ -> Matches_3 = Matches
    end,
            Matches_4 = Matches_3,
            Total_3 = Total_2;
        _ -> Matches_4 = Matches,
            Total_3 = Total
    end,
            Fun_7_loop(W_2_rest, Cleaned, Matches_4, Message_2, Possible, Total_3, Upper);
        _ -> {Cleaned, Matches, Message_2, Possible, Total, Upper}
    end
end,
{Cleaned, Matches_4, Message_2, Possible, Total_3, Upper} = Fun_7(Possible, Cleaned, Matches, Message_2, Possible, Total, Upper),
        case (Total_3 == 0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_div(float(Matches_4), float(Total_3))
    catch {return, RetCatch} -> RetCatch end.

is_english(Message_3, Word_percentage, Letter_percentage) ->
    try
        Words_match = (mochi_safe_mul(get_english_count(Message_3), 100.0) >= float(Word_percentage)),
        Num_letters = erlang:length(remove_non_letters(Message_3)),
        Letters_pct = (case (erlang:length(Message_3) == 0) of
    true -> 0.0;
    _ -> mochi_safe_mul(mochi_safe_div(float(Num_letters), float(erlang:length(Message_3))), 100.0)
end),
        Letters_match = (Letters_pct >= float(Letter_percentage)),
        (Words_match andalso Letters_match)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('LETTERS_AND_SPACE', "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz \t\n"),
    erlang:put('LOWER', "abcdefghijklmnopqrstuvwxyz"),
    erlang:put('UPPER', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    erlang:put('ENGLISH_WORDS', load_dictionary()),
    io:format("~ts~n", [mochi_str(is_english("Hello World", 20, 85))]),
    io:format("~ts~n", [mochi_str(is_english("llold HorWd", 20, 85))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
