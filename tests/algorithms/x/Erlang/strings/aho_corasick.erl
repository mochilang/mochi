#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, search_all/2]).

% Generated by Mochi transpiler v0.10.63 (7038541cc1) on 2025-08-11 16:51 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

search_all(Text, Keywords) ->
    try
        Result = #{},
        Fun = fun Fun_loop(List, Keywords, Result, Text) ->
    case List of
        [] -> {Keywords, Result, Text};
        [Word|Word_rest] ->
            Positions = [],
            M = erlang:length(Word),
            I = 0,
            Fun_2 = fun Fun_2_loop(I, Keywords, M, Positions, Result, Text, Word) ->
    case (I =< (erlang:length(Text) - M)) of
        true ->
            case (string:substr(Text, I + 1, ((I + M) - I)) == Word) of
        true -> Positions_2 = lists:append((case Positions of nil -> []; _ -> Positions end), [I]),
            Positions_3 = Positions_2;
        _ -> Positions_3 = Positions
    end,
            I_2 = (I + 1),
            Fun_2_loop(I_2, Keywords, M, Positions_3, Result, Text, Word);
        _ -> {I, Keywords, M, Positions, Result, Text, Word}
    end
end,
{I_2, Keywords, M, Positions_3, Result, Text, Word} = Fun_2(I, Keywords, M, Positions, Result, Text, Word),
            case (erlang:length(Positions_3) > 0) of
        true -> Result_2 = maps:put(Word, Positions_3, Result),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            Fun_loop(Word_rest, Keywords, Result_3, Text);
        _ -> {Keywords, Result, Text}
    end
end,
{Keywords, Result_3, Text} = Fun(Keywords, Keywords, Result, Text),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('text', "whatever, err ... , wherever"),
    erlang:put('keywords', ["what", "hat", "ver", "er"]),
    io:format("~ts~n", [mochi_repr(search_all("whatever, err ... , wherever", erlang:get('keywords')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
