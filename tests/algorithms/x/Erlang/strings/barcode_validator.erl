#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, has_alpha/1, parse_decimal/1, get_barcode/1, get_check_digit/1, is_valid/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

has_alpha(S) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, S) ->
    case (I < erlang:length(S)) of
        true ->
            C = string:substr(S, I + 1, 1),
            case (((C >= "a") andalso (C =< "z")) orelse ((C >= "A") andalso (C =< "Z"))) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, S);
        _ -> {I, S}
    end
end,
{I_2, S} = Fun(I, S),
        false
    catch {return, RetCatch} -> RetCatch end.

parse_decimal(S_2) ->
    try
        Value = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, S_2, Value) ->
    case (I_3 < erlang:length(S_2)) of
        true ->
            C_2 = string:substr(S_2, I_3 + 1, 1),
            case ((C_2 < "0") orelse (C_2 > "9")) of
        true -> erlang:error({panic, "Non-digit character encountered"});
        _ -> ok
    end,
            Value_2 = ((Value * 10) + mochi_to_int(C_2)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, S_2, Value_2);
        _ -> {I_3, S_2, Value}
    end
end,
{I_4, S_2, Value_2} = Fun_2(I_3, S_2, Value),
        Value_2
    catch {return, RetCatch} -> RetCatch end.

get_barcode(Barcode) ->
    try
        case has_alpha(Barcode) of
        true -> erlang:error({panic, (("Barcode '" ++ Barcode) ++ "' has alphabetic characters.")});
        _ -> ok
    end,
        case ((erlang:length(Barcode) > 0) andalso (string:substr(Barcode, 0 + 1, 1) == "-")) of
        true -> erlang:error({panic, "The entered barcode has a negative value. Try again."});
        _ -> ok
    end,
        parse_decimal(Barcode)
    catch {return, RetCatch} -> RetCatch end.

get_check_digit(Barcode_2) ->
    try
        Num = (Barcode_2 div 10),
        S_3 = 0,
        Position = 0,
        Fun_3 = fun Fun_3_loop(Barcode_2, Num, Position, S_3) ->
    case (Num /= 0) of
        true ->
            Mult = (case (mochi_mod(Position, 2) == 0) of
    true -> 3;
    _ -> 1
end),
            S_4 = (S_3 + (Mult * mochi_mod(Num, 10))),
            Num_2 = (Num div 10),
            Position_2 = (Position + 1),
            Fun_3_loop(Barcode_2, Num_2, Position_2, S_4);
        _ -> {Barcode_2, Num, Position, S_3}
    end
end,
{Barcode_2, Num_2, Position_2, S_4} = Fun_3(Barcode_2, Num, Position, S_3),
        mochi_mod((10 - mochi_mod(S_4, 10)), 10)
    catch {return, RetCatch} -> RetCatch end.

is_valid(Barcode_3) ->
    try
        ((erlang:length(mochi_str(Barcode_3)) == 13) andalso (get_check_digit(Barcode_3) == mochi_mod(Barcode_3, 10)))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(get_check_digit(8718452538119))]),
    io:format("~ts~n", [mochi_str(get_check_digit(87184523))]),
    io:format("~ts~n", [mochi_str(get_check_digit(87193425381086))]),
    erlang:put('res', []),
    erlang:put('x', 0),
    Fun_4 = fun Fun_4_loop() ->
    case (erlang:get('x') < 100) of
        true ->
            erlang:put('res', lists:append((case erlang:get('res') of nil -> []; _ -> erlang:get('res') end), [get_check_digit(erlang:get('x'))])),
            erlang:put('x', (erlang:get('x') + 10)),
            Fun_4_loop();
        _ -> {}
    end
end,
{} = Fun_4(),
    io:format("~ts~n", [mochi_repr(erlang:get('res'))]),
    io:format("~ts~n", [mochi_str(is_valid(8718452538119))]),
    io:format("~ts~n", [mochi_str(is_valid(87184525))]),
    io:format("~ts~n", [mochi_str(is_valid(87193425381089))]),
    io:format("~ts~n", [mochi_str(is_valid(0))]),
    io:format("~ts~n", [mochi_str(get_barcode("8718452538119"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
