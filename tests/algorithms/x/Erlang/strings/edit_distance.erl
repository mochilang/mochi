#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, min3/3, edit_distance/2, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

min3(A, B, C) ->
    try
        M = A,
        case (B < M) of
        true -> M_2 = B,
            M_3 = M_2;
        _ -> M_3 = M
    end,
        case (C < M_3) of
        true -> M_4 = C,
            M_5 = M_4;
        _ -> M_5 = M_3
    end,
        M_5
    catch {return, RetCatch} -> RetCatch end.

edit_distance(Source, Target) ->
    try
        case (erlang:length(Source) == 0) of
        true -> throw({return, erlang:length(Target)});
        _ -> ok
    end,
        case (erlang:length(Target) == 0) of
        true -> throw({return, erlang:length(Source)});
        _ -> ok
    end,
        Last_source = string:substr(Source, (erlang:length(Source) - 1) + 1, (erlang:length(Source) - (erlang:length(Source) - 1))),
        Last_target = string:substr(Target, (erlang:length(Target) - 1) + 1, (erlang:length(Target) - (erlang:length(Target) - 1))),
        Delta = (case (Last_source == Last_target) of
    true -> 0;
    _ -> 1
end),
        Delete_cost = (edit_distance(string:substr(Source, 0 + 1, ((erlang:length(Source) - 1) - 0)), Target) + 1),
        Insert_cost = (edit_distance(Source, string:substr(Target, 0 + 1, ((erlang:length(Target) - 1) - 0))) + 1),
        Replace_cost = (edit_distance(string:substr(Source, 0 + 1, ((erlang:length(Source) - 1) - 0)), string:substr(Target, 0 + 1, ((erlang:length(Target) - 1) - 0))) + Delta),
        min3(Delete_cost, Insert_cost, Replace_cost)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Result = edit_distance("ATCGCTG", "TAGCTAA"),
        io:format("~ts~n", [mochi_str(Result)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
