#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, get_failure_array/1, knuth_morris_pratt/2]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

get_failure_array(Pattern) ->
    try
        Failure = [0],
        I = 0,
        J = 1,
        Fun = fun Fun_loop(Failure, I, J, Pattern) ->
    case (J < erlang:length(Pattern)) of
        true ->
            try
                case (string:substr(Pattern, I + 1, ((I + 1) - I)) == string:substr(Pattern, J + 1, ((J + 1) - J))) of
        true -> I_2 = (I + 1),
            I_5 = I_2;
        _ -> case (I > 0) of
        true -> I_3 = (case erlang:is_map(Failure) of true -> maps:get((I - 1), Failure, nil); _ -> case (I - 1) < 0 of true -> mochi_nth(erlang:length(Failure) + (I - 1) + 1, Failure); _ -> mochi_nth((I - 1) + 1, Failure) end end),
            throw({continue, Failure, I_3, J, Pattern}),
            I_4 = I_3;
        _ -> I_4 = I
    end,
            I_5 = I_4
    end,
                J_2 = (J + 1),
                Failure_2 = lists:append((case Failure of nil -> []; _ -> Failure end), [I_5]),
                Fun_loop(Failure_2, I_5, J_2, Pattern)
            catch
                {continue, C0, C1, C2, C3} -> Fun_loop(C0, C1, C2, C3);
                {break, B0, B1, B2, B3} -> {B0, B1, B2, B3}
            end;
        _ -> {Failure, I, J, Pattern}
    end
end,
{Failure_2, I_5, J_2, Pattern} = Fun(Failure, I, J, Pattern),
        Failure_2
    catch {return, RetCatch} -> RetCatch end.

knuth_morris_pratt(Text, Pattern_2) ->
    try
        Failure_3 = get_failure_array(Pattern_2),
        I_6 = 0,
        J_3 = 0,
        Fun_2 = fun Fun_2_loop(Failure_3, I_6, J_3, Pattern_2, Text) ->
    case (I_6 < erlang:length(Text)) of
        true ->
            try
                case (string:substr(Pattern_2, J_3 + 1, ((J_3 + 1) - J_3)) == string:substr(Text, I_6 + 1, ((I_6 + 1) - I_6))) of
        true -> case (J_3 == (erlang:length(Pattern_2) - 1)) of
        true -> throw({return, (I_6 - J_3)});
        _ -> ok
    end,
            J_4 = (J_3 + 1),
            J_7 = J_4;
        _ -> case (J_3 > 0) of
        true -> J_5 = (case erlang:is_map(Failure_3) of true -> maps:get((J_3 - 1), Failure_3, nil); _ -> case (J_3 - 1) < 0 of true -> mochi_nth(erlang:length(Failure_3) + (J_3 - 1) + 1, Failure_3); _ -> mochi_nth((J_3 - 1) + 1, Failure_3) end end),
            throw({continue, Failure_3, I_6, J_5, Pattern_2, Text}),
            J_6 = J_5;
        _ -> J_6 = J_3
    end,
            J_7 = J_6
    end,
                I_7 = (I_6 + 1),
                Fun_2_loop(Failure_3, I_7, J_7, Pattern_2, Text)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_2_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Failure_3, I_6, J_3, Pattern_2, Text}
    end
end,
{Failure_3, I_7, J_7, Pattern_2, Text} = Fun_2(Failure_3, I_6, J_3, Pattern_2, Text),
        -1
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('text', "abcxabcdabxabcdabcdabcy"),
    erlang:put('pattern', "abcdabcy"),
    io:format("~ts~n", [mochi_repr(knuth_morris_pratt("abcxabcdabxabcdabcdabcy", "abcdabcy"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
