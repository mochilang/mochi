#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow2/1, bit_and/2, bit_or/2, char_to_index/1, bitap_string_match/2, main/0]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

pow2(N) ->
    try
        Res = 1,
        I = 0,
        Fun = fun Fun_loop(I, N, Res) ->
    case (I < N) of
        true ->
            Res_2 = (Res * 2),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Res_2);
        _ -> {I, N, Res}
    end
end,
{I_2, N, Res_2} = Fun(I, N, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

bit_and(A, B) ->
    try
        X = A,
        Y = B,
        Res_3 = 0,
        Bit = 1,
        Fun_2 = fun Fun_2_loop(A, B, Bit, Res_3, X, Y) ->
    case ((X > 0) orelse (Y > 0)) of
        true ->
            case ((mochi_mod(X, 2) == 1) andalso (mochi_mod(Y, 2) == 1)) of
        true -> Res_4 = (Res_3 + Bit),
            Res_5 = Res_4;
        _ -> Res_5 = Res_3
    end,
            X_2 = mochi_to_int((X div 2)),
            Y_2 = mochi_to_int((Y div 2)),
            Bit_2 = (Bit * 2),
            Fun_2_loop(A, B, Bit_2, Res_5, X_2, Y_2);
        _ -> {A, B, Bit, Res_3, X, Y}
    end
end,
{A, B, Bit_2, Res_5, X_2, Y_2} = Fun_2(A, B, Bit, Res_3, X, Y),
        Res_5
    catch {return, RetCatch} -> RetCatch end.

bit_or(A_2, B_2) ->
    try
        X_3 = A_2,
        Y_3 = B_2,
        Res_6 = 0,
        Bit_3 = 1,
        Fun_3 = fun Fun_3_loop(A_2, B_2, Bit_3, Res_6, X_3, Y_3) ->
    case ((X_3 > 0) orelse (Y_3 > 0)) of
        true ->
            case ((mochi_mod(X_3, 2) == 1) orelse (mochi_mod(Y_3, 2) == 1)) of
        true -> Res_7 = (Res_6 + Bit_3),
            Res_8 = Res_7;
        _ -> Res_8 = Res_6
    end,
            X_4 = mochi_to_int((X_3 div 2)),
            Y_4 = mochi_to_int((Y_3 div 2)),
            Bit_4 = (Bit_3 * 2),
            Fun_3_loop(A_2, B_2, Bit_4, Res_8, X_4, Y_4);
        _ -> {A_2, B_2, Bit_3, Res_6, X_3, Y_3}
    end
end,
{A_2, B_2, Bit_4, Res_8, X_4, Y_4} = Fun_3(A_2, B_2, Bit_3, Res_6, X_3, Y_3),
        Res_8
    catch {return, RetCatch} -> RetCatch end.

char_to_index(Ch) ->
    try
        Letters = "abcdefghijklmnopqrstuvwxyz",
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Ch, I_3, Letters) ->
    case (I_3 < erlang:length(Letters)) of
        true ->
            case (string:substr(Letters, I_3 + 1, ((I_3 + 1) - I_3)) == Ch) of
        true -> throw({return, I_3});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_4_loop(Ch, I_4, Letters);
        _ -> {Ch, I_3, Letters}
    end
end,
{Ch, I_4, Letters} = Fun_4(Ch, I_3, Letters),
        26
    catch {return, RetCatch} -> RetCatch end.

bitap_string_match(Text, Pattern) ->
    try
        case (Pattern == "") of
        true -> throw({return, 0});
        _ -> ok
    end,
        M = erlang:length(Pattern),
        case (M > erlang:length(Text)) of
        true -> throw({return, -1});
        _ -> ok
    end,
        Limit = pow2((M + 1)),
        All_ones = (Limit - 1),
        Pattern_mask = [],
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(All_ones, I_5, Limit, M, Pattern, Pattern_mask, Text) ->
    case (I_5 < 27) of
        true ->
            Pattern_mask_2 = lists:append((case Pattern_mask of nil -> []; _ -> Pattern_mask end), [All_ones]),
            I_6 = (I_5 + 1),
            Fun_5_loop(All_ones, I_6, Limit, M, Pattern, Pattern_mask_2, Text);
        _ -> {All_ones, I_5, Limit, M, Pattern, Pattern_mask, Text}
    end
end,
{All_ones, I_6, Limit, M, Pattern, Pattern_mask_2, Text} = Fun_5(All_ones, I_5, Limit, M, Pattern, Pattern_mask, Text),
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(All_ones, I_7, Limit, M, Pattern, Pattern_mask_2, Text) ->
    case (I_7 < M) of
        true ->
            Ch_2 = string:substr(Pattern, I_7 + 1, ((I_7 + 1) - I_7)),
            Idx = char_to_index(Ch_2),
            Pattern_mask_3 = lists:sublist(Pattern_mask_2, Idx) ++ [bit_and((case erlang:is_map(Pattern_mask_2) of true -> maps:get(Idx, Pattern_mask_2, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Pattern_mask_2) + Idx + 1, Pattern_mask_2); _ -> mochi_nth(Idx + 1, Pattern_mask_2) end end), (All_ones - pow2(I_7)))] ++ lists:nthtail(Idx + 1, Pattern_mask_2),
            I_8 = (I_7 + 1),
            Fun_6_loop(All_ones, I_8, Limit, M, Pattern, Pattern_mask_3, Text);
        _ -> {All_ones, I_7, Limit, M, Pattern, Pattern_mask_2, Text}
    end
end,
{All_ones, I_8, Limit, M, Pattern, Pattern_mask_3, Text} = Fun_6(All_ones, I_7, Limit, M, Pattern, Pattern_mask_2, Text),
        State = (All_ones - 1),
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(All_ones, I_9, Limit, M, Pattern, Pattern_mask_3, State, Text) ->
    case (I_9 < erlang:length(Text)) of
        true ->
            Ch_3 = string:substr(Text, I_9 + 1, ((I_9 + 1) - I_9)),
            Idx_2 = char_to_index(Ch_3),
            State_2 = bit_or(State, (case erlang:is_map(Pattern_mask_3) of true -> maps:get(Idx_2, Pattern_mask_3, nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(Pattern_mask_3) + Idx_2 + 1, Pattern_mask_3); _ -> mochi_nth(Idx_2 + 1, Pattern_mask_3) end end)),
            State_3 = mochi_mod((State_2 * 2), Limit),
            case (bit_and(State_3, pow2(M)) == 0) of
        true -> throw({return, ((I_9 - M) + 1)});
        _ -> ok
    end,
            I_10 = (I_9 + 1),
            Fun_7_loop(All_ones, I_10, Limit, M, Pattern, Pattern_mask_3, State_3, Text);
        _ -> {All_ones, I_9, Limit, M, Pattern, Pattern_mask_3, State, Text}
    end
end,
{All_ones, I_10, Limit, M, Pattern, Pattern_mask_3, State_3, Text} = Fun_7(All_ones, I_9, Limit, M, Pattern, Pattern_mask_3, State, Text),
        -1
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_str(bitap_string_match("abdabababc", "ababc"))]),
        io:format("~ts~n", [mochi_str(bitap_string_match("abdabababc", ""))]),
        io:format("~ts~n", [mochi_str(bitap_string_match("abdabababc", "c"))]),
        io:format("~ts~n", [mochi_str(bitap_string_match("abdabababc", "fofosdfo"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
