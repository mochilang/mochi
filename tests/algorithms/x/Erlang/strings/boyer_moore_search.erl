#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, match_in_pattern/2, mismatch_in_text/3, bad_character_heuristic/2]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

match_in_pattern(Pat, Ch) ->
    try
        I = (erlang:length(Pat) - 1),
        Fun = fun Fun_loop(Ch, I, Pat) ->
    case (I >= 0) of
        true ->
            case (string:substr(Pat, I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I - 1),
            Fun_loop(Ch, I_2, Pat);
        _ -> {Ch, I, Pat}
    end
end,
{Ch, I_2, Pat} = Fun(Ch, I, Pat),
        -1
    catch {return, RetCatch} -> RetCatch end.

mismatch_in_text(Text, Pat_2, Current_pos) ->
    try
        I_3 = (erlang:length(Pat_2) - 1),
        Fun_2 = fun Fun_2_loop(Current_pos, I_3, Pat_2, Text) ->
    case (I_3 >= 0) of
        true ->
            case (string:substr(Pat_2, I_3 + 1, ((I_3 + 1) - I_3)) /= string:substr(Text, (Current_pos + I_3) + 1, (((Current_pos + I_3) + 1) - (Current_pos + I_3)))) of
        true -> throw({return, (Current_pos + I_3)});
        _ -> ok
    end,
            I_4 = (I_3 - 1),
            Fun_2_loop(Current_pos, I_4, Pat_2, Text);
        _ -> {Current_pos, I_3, Pat_2, Text}
    end
end,
{Current_pos, I_4, Pat_2, Text} = Fun_2(Current_pos, I_3, Pat_2, Text),
        -1
    catch {return, RetCatch} -> RetCatch end.

bad_character_heuristic(Text_2, Pat_3) ->
    try
        TextLen = erlang:length(Text_2),
        PatLen = erlang:length(Pat_3),
        Positions = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Pat_3, PatLen, Positions, Text_2, TextLen) ->
    case (I_5 =< (TextLen - PatLen)) of
        true ->
            Mismatch_index = mismatch_in_text(Text_2, Pat_3, I_5),
            case (Mismatch_index < 0) of
        true -> Positions_2 = lists:append((case Positions of nil -> []; _ -> Positions end), [I_5]),
            I_6 = (I_5 + 1),
            Ch_3 = nil,
            I_10 = I_6,
            Match_index_2 = nil,
            Positions_3 = Positions_2;
        _ -> Ch_2 = string:substr(Text_2, Mismatch_index + 1, ((Mismatch_index + 1) - Mismatch_index)),
            Match_index = match_in_pattern(Pat_3, Ch_2),
            case (Match_index < 0) of
        true -> I_7 = (Mismatch_index + 1),
            I_9 = I_7;
        _ -> I_8 = (Mismatch_index - Match_index),
            I_9 = I_8
    end,
            Ch_3 = Ch_2,
            I_10 = I_9,
            Match_index_2 = Match_index,
            Positions_3 = Positions
    end,
            Fun_3_loop(I_10, Pat_3, PatLen, Positions_3, Text_2, TextLen);
        _ -> {I_5, Pat_3, PatLen, Positions, Text_2, TextLen}
    end
end,
{I_10, Pat_3, PatLen, Positions_3, Text_2, TextLen} = Fun_3(I_5, Pat_3, PatLen, Positions, Text_2, TextLen),
        Positions_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
