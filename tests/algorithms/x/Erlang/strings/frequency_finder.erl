#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, etaoin_index/1, get_letter_count/1, get_frequency_order/1, english_freq_match_score/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

etaoin_index(Letter) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, Letter) ->
    case (I < erlang:length("ETAOINSHRDLCUMWFGYPBVKJXQZ")) of
        true ->
            case (string:substr("ETAOINSHRDLCUMWFGYPBVKJXQZ", I + 1, ((I + 1) - I)) == Letter) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Letter);
        _ -> {I, Letter}
    end
end,
{I_2, Letter} = Fun(I, Letter),
        erlang:length("ETAOINSHRDLCUMWFGYPBVKJXQZ")
    catch {return, RetCatch} -> RetCatch end.

get_letter_count(Message) ->
    try
        Letter_count = #{},
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Letter_count, Message) ->
    case (I_3 < erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ")) of
        true ->
            C = string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", I_3 + 1, ((I_3 + 1) - I_3)),
            Letter_count_2 = maps:put(C, 0, Letter_count),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Letter_count_2, Message);
        _ -> {I_3, Letter_count, Message}
    end
end,
{I_4, Letter_count_2, Message} = Fun_2(I_3, Letter_count, Message),
        Msg = string:to_upper(Message),
        J = 0,
        Fun_3 = fun Fun_3_loop(I_4, J, Letter_count_2, Message, Msg) ->
    case (J < erlang:length(Msg)) of
        true ->
            Ch = string:substr(Msg, J + 1, ((J + 1) - J)),
            case (string:str("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch) /= 0) of
        true -> Letter_count_3 = maps:put(Ch, (maps:get(Ch, Letter_count_2, nil) + 1), Letter_count_2),
            Letter_count_4 = Letter_count_3;
        _ -> Letter_count_4 = Letter_count_2
    end,
            J_2 = (J + 1),
            Fun_3_loop(I_4, J_2, Letter_count_4, Message, Msg);
        _ -> {I_4, J, Letter_count_2, Message, Msg}
    end
end,
{I_4, J_2, Letter_count_4, Message, Msg} = Fun_3(I_4, J, Letter_count_2, Message, Msg),
        Letter_count_4
    catch {return, RetCatch} -> RetCatch end.

get_frequency_order(Message_2) ->
    try
        Letter_to_freq = get_letter_count(Message_2),
        Max_freq = 0,
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, Letter_to_freq, Max_freq, Message_2) ->
    case (I_5 < erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ")) of
        true ->
            Letter_2 = string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", I_5 + 1, ((I_5 + 1) - I_5)),
            F = maps:get(Letter_2, Letter_to_freq, nil),
            case (F > Max_freq) of
        true -> Max_freq_2 = F,
            Max_freq_3 = Max_freq_2;
        _ -> Max_freq_3 = Max_freq
    end,
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Letter_to_freq, Max_freq_3, Message_2);
        _ -> {I_5, Letter_to_freq, Max_freq, Message_2}
    end
end,
{I_6, Letter_to_freq, Max_freq_3, Message_2} = Fun_4(I_5, Letter_to_freq, Max_freq, Message_2),
        Result = "",
        Freq = Max_freq_3,
        Fun_9 = fun Fun_9_loop(Freq, I_6, Letter_to_freq, Max_freq_3, Message_2, Result) ->
    case (Freq >= 0) of
        true ->
            Group = [],
            J_3 = 0,
            Fun_5 = fun Fun_5_loop(Freq, Group, I_6, J_3, Letter_to_freq, Max_freq_3, Message_2, Result) ->
    case (J_3 < erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ")) of
        true ->
            Letter_3 = string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", J_3 + 1, ((J_3 + 1) - J_3)),
            case (maps:get(Letter_3, Letter_to_freq, nil) == Freq) of
        true -> Group_2 = lists:append((case Group of nil -> []; _ -> Group end), [Letter_3]),
            Group_3 = Group_2;
        _ -> Group_3 = Group
    end,
            J_4 = (J_3 + 1),
            Fun_5_loop(Freq, Group_3, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result);
        _ -> {Freq, Group, I_6, J_3, Letter_to_freq, Max_freq_3, Message_2, Result}
    end
end,
{Freq, Group_3, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result} = Fun_5(Freq, Group, I_6, J_3, Letter_to_freq, Max_freq_3, Message_2, Result),
            G_len = erlang:length(Group_3),
            A = 0,
            Fun_7 = fun Fun_7_loop(A, Freq, G_len, Group_3, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result) ->
    case (A < G_len) of
        true ->
            B = 0,
            Fun_6 = fun Fun_6_loop(A, B, Freq, G_len, Group_3, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result) ->
    case (B < ((G_len - A) - 1)) of
        true ->
            G1 = (case erlang:is_map(Group_3) of true -> maps:get(B, Group_3, nil); _ -> case B < 0 of true -> mochi_nth(erlang:length(Group_3) + B + 1, Group_3); _ -> mochi_nth(B + 1, Group_3) end end),
            G2 = (case erlang:is_map(Group_3) of true -> maps:get((B + 1), Group_3, nil); _ -> case (B + 1) < 0 of true -> mochi_nth(erlang:length(Group_3) + (B + 1) + 1, Group_3); _ -> mochi_nth((B + 1) + 1, Group_3) end end),
            Idx1 = etaoin_index(G1),
            Idx2 = etaoin_index(G2),
            case (Idx1 < Idx2) of
        true -> Tmp = (case erlang:is_map(Group_3) of true -> maps:get(B, Group_3, nil); _ -> case B < 0 of true -> mochi_nth(erlang:length(Group_3) + B + 1, Group_3); _ -> mochi_nth(B + 1, Group_3) end end),
            Group_4 = lists:sublist(Group_3, B) ++ [(case erlang:is_map(Group_3) of true -> maps:get((B + 1), Group_3, nil); _ -> case (B + 1) < 0 of true -> mochi_nth(erlang:length(Group_3) + (B + 1) + 1, Group_3); _ -> mochi_nth((B + 1) + 1, Group_3) end end)] ++ lists:nthtail(B + 1, Group_3),
            Group_5 = lists:sublist(Group_4, (B + 1)) ++ [Tmp] ++ lists:nthtail((B + 1) + 1, Group_4),
            Group_6 = Group_5,
            Tmp_2 = Tmp;
        _ -> Group_6 = Group_3,
            Tmp_2 = nil
    end,
            B_2 = (B + 1),
            Fun_6_loop(A, B_2, Freq, G_len, Group_6, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result);
        _ -> {A, B, Freq, G_len, Group_3, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result}
    end
end,
{A, B_2, Freq, G_len, Group_6, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result} = Fun_6(A, B, Freq, G_len, Group_3, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result),
            A_2 = (A + 1),
            Fun_7_loop(A_2, Freq, G_len, Group_6, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result);
        _ -> {A, Freq, G_len, Group_3, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result}
    end
end,
{A_2, Freq, G_len, Group_6, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result} = Fun_7(A, Freq, G_len, Group_3, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result),
            G = 0,
            Fun_8 = fun Fun_8_loop(A_2, Freq, G, G_len, Group_6, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result) ->
    case (G < erlang:length(Group_6)) of
        true ->
            Result_2 = (Result ++ (case erlang:is_map(Group_6) of true -> maps:get(G, Group_6, nil); _ -> case G < 0 of true -> mochi_nth(erlang:length(Group_6) + G + 1, Group_6); _ -> mochi_nth(G + 1, Group_6) end end)),
            G_2 = (G + 1),
            Fun_8_loop(A_2, Freq, G_2, G_len, Group_6, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result_2);
        _ -> {A_2, Freq, G, G_len, Group_6, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result}
    end
end,
{A_2, Freq, G_2, G_len, Group_6, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result_2} = Fun_8(A_2, Freq, G, G_len, Group_6, I_6, J_4, Letter_to_freq, Max_freq_3, Message_2, Result),
            Freq_2 = (Freq - 1),
            Fun_9_loop(Freq_2, I_6, Letter_to_freq, Max_freq_3, Message_2, Result_2);
        _ -> {Freq, I_6, Letter_to_freq, Max_freq_3, Message_2, Result}
    end
end,
{Freq_2, I_6, Letter_to_freq, Max_freq_3, Message_2, Result_2} = Fun_9(Freq, I_6, Letter_to_freq, Max_freq_3, Message_2, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

english_freq_match_score(Message_3) ->
    try
        Freq_order = get_frequency_order(Message_3),
        Top = string:substr(Freq_order, 0 + 1, (6 - 0)),
        Bottom = string:substr(Freq_order, (erlang:length(Freq_order) - 6) + 1, (erlang:length(Freq_order) - (erlang:length(Freq_order) - 6))),
        Score = 0,
        I_7 = 0,
        Fun_10 = fun Fun_10_loop(Bottom, Freq_order, I_7, Message_3, Score, Top) ->
    case (I_7 < 6) of
        true ->
            C_2 = string:substr("ETAOINSHRDLCUMWFGYPBVKJXQZ", I_7 + 1, ((I_7 + 1) - I_7)),
            case (string:str(Top, C_2) /= 0) of
        true -> Score_2 = (Score + 1),
            Score_3 = Score_2;
        _ -> Score_3 = Score
    end,
            I_8 = (I_7 + 1),
            Fun_10_loop(Bottom, Freq_order, I_8, Message_3, Score_3, Top);
        _ -> {Bottom, Freq_order, I_7, Message_3, Score, Top}
    end
end,
{Bottom, Freq_order, I_8, Message_3, Score_3, Top} = Fun_10(Bottom, Freq_order, I_7, Message_3, Score, Top),
        J_5 = (erlang:length("ETAOINSHRDLCUMWFGYPBVKJXQZ") - 6),
        Fun_11 = fun Fun_11_loop(Bottom, Freq_order, I_8, J_5, Message_3, Score_3, Top) ->
    case (J_5 < erlang:length("ETAOINSHRDLCUMWFGYPBVKJXQZ")) of
        true ->
            C_3 = string:substr("ETAOINSHRDLCUMWFGYPBVKJXQZ", J_5 + 1, ((J_5 + 1) - J_5)),
            case (string:str(Bottom, C_3) /= 0) of
        true -> Score_4 = (Score_3 + 1),
            Score_5 = Score_4;
        _ -> Score_5 = Score_3
    end,
            J_6 = (J_5 + 1),
            Fun_11_loop(Bottom, Freq_order, I_8, J_6, Message_3, Score_5, Top);
        _ -> {Bottom, Freq_order, I_8, J_5, Message_3, Score_3, Top}
    end
end,
{Bottom, Freq_order, I_8, J_6, Message_3, Score_5, Top} = Fun_11(Bottom, Freq_order, I_8, J_5, Message_3, Score_3, Top),
        Score_5
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(get_frequency_order("Hello World"))]),
        io:format("~ts~n", [mochi_repr(english_freq_match_score("Hello World"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ETAOIN', "ETAOINSHRDLCUMWFGYPBVKJXQZ"),
    erlang:put('LETTERS', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
