#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, count_char/2, char_in/2, starts_with_char/2, ends_with_char/2, contains_double_dot/1, is_valid_email_address/1]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

count_char(S, Target) ->
    try
        Cnt = 0,
        I = 0,
        Fun = fun Fun_loop(Cnt, I, S, Target) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) == Target) of
        true -> Cnt_2 = (Cnt + 1),
            Cnt_3 = Cnt_2;
        _ -> Cnt_3 = Cnt
    end,
            I_2 = (I + 1),
            Fun_loop(Cnt_3, I_2, S, Target);
        _ -> {Cnt, I, S, Target}
    end
end,
{Cnt_3, I_2, S, Target} = Fun(Cnt, I, S, Target),
        Cnt_3
    catch {return, RetCatch} -> RetCatch end.

char_in(C, Allowed) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Allowed, C, I_3) ->
    case (I_3 < erlang:length(Allowed)) of
        true ->
            case (string:substr(Allowed, I_3 + 1, ((I_3 + 1) - I_3)) == C) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Allowed, C, I_4);
        _ -> {Allowed, C, I_3}
    end
end,
{Allowed, C, I_4} = Fun_2(Allowed, C, I_3),
        false
    catch {return, RetCatch} -> RetCatch end.

starts_with_char(S_2, C_2) ->
    try
        ((erlang:length(S_2) > 0) andalso (string:substr(S_2, 0 + 1, (1 - 0)) == C_2))
    catch {return, RetCatch} -> RetCatch end.

ends_with_char(S_3, C_3) ->
    try
        ((erlang:length(S_3) > 0) andalso (string:substr(S_3, (erlang:length(S_3) - 1) + 1, (erlang:length(S_3) - (erlang:length(S_3) - 1))) == C_3))
    catch {return, RetCatch} -> RetCatch end.

contains_double_dot(S_4) ->
    try
        case (erlang:length(S_4) < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, S_4) ->
    case (I_5 < (erlang:length(S_4) - 1)) of
        true ->
            case (string:substr(S_4, I_5 + 1, ((I_5 + 2) - I_5)) == "..") of
        true -> throw({return, true});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, S_4);
        _ -> {I_5, S_4}
    end
end,
{I_6, S_4} = Fun_3(I_5, S_4),
        false
    catch {return, RetCatch} -> RetCatch end.

is_valid_email_address(Email) ->
    try
        case (count_char(Email, "@") /= 1) of
        true -> throw({return, false});
        _ -> ok
    end,
        At_idx = 0,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(At_idx, Email, I_7) ->
    case (I_7 < erlang:length(Email)) of
        true ->
            try
                case (string:substr(Email, I_7 + 1, ((I_7 + 1) - I_7)) == "@") of
        true -> At_idx_2 = I_7,
            throw({break, At_idx_2, Email, I_7}),
            At_idx_3 = At_idx_2;
        _ -> At_idx_3 = At_idx
    end,
                I_8 = (I_7 + 1),
                Fun_4_loop(At_idx_3, Email, I_8)
            catch
                {continue, C0, C1, C2} -> Fun_4_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {At_idx, Email, I_7}
    end
end,
{At_idx_3, Email, I_8} = Fun_4(At_idx, Email, I_7),
        Local_part = string:substr(Email, 0 + 1, (At_idx_3 - 0)),
        Domain = string:substr(Email, (At_idx_3 + 1) + 1, (erlang:length(Email) - (At_idx_3 + 1))),
        case ((erlang:length(Local_part) > 64) orelse (erlang:length(Domain) > 255)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(At_idx_3, Domain, Email, I_9, Local_part) ->
    case (I_9 < erlang:length(Local_part)) of
        true ->
            Ch = string:substr(Local_part, I_9 + 1, ((I_9 + 1) - I_9)),
            case mochi_not(char_in(Ch, (("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" ++ "0123456789") ++ ".(!#$%&'*+-/=?^_`{|}~)"))) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_10 = (I_9 + 1),
            Fun_5_loop(At_idx_3, Domain, Email, I_10, Local_part);
        _ -> {At_idx_3, Domain, Email, I_9, Local_part}
    end
end,
{At_idx_3, Domain, Email, I_10, Local_part} = Fun_5(At_idx_3, Domain, Email, I_9, Local_part),
        case ((starts_with_char(Local_part, ".") orelse ends_with_char(Local_part, ".")) orelse contains_double_dot(Local_part)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_11 = 0,
        Fun_6 = fun Fun_6_loop(At_idx_3, Domain, Email, I_11, Local_part) ->
    case (I_11 < erlang:length(Domain)) of
        true ->
            Ch_2 = string:substr(Domain, I_11 + 1, ((I_11 + 1) - I_11)),
            case mochi_not(char_in(Ch_2, (("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ" ++ "0123456789") ++ ".-"))) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_12 = (I_11 + 1),
            Fun_6_loop(At_idx_3, Domain, Email, I_12, Local_part);
        _ -> {At_idx_3, Domain, Email, I_11, Local_part}
    end
end,
{At_idx_3, Domain, Email, I_12, Local_part} = Fun_6(At_idx_3, Domain, Email, I_11, Local_part),
        case (starts_with_char(Domain, "-") orelse ends_with_char(Domain, ".")) of
        true -> throw({return, false});
        _ -> ok
    end,
        case ((starts_with_char(Domain, ".") orelse ends_with_char(Domain, ".")) orelse contains_double_dot(Domain)) of
        true -> throw({return, false});
        _ -> ok
    end,
        true
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('MAX_LOCAL_PART_OCTETS', 64),
    erlang:put('MAX_DOMAIN_OCTETS', 255),
    erlang:put('ASCII_LETTERS', "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    erlang:put('DIGITS', "0123456789"),
    erlang:put('LOCAL_EXTRA', ".(!#$%&'*+-/=?^_`{|}~)"),
    erlang:put('DOMAIN_EXTRA', ".-"),
    erlang:put('email_tests', ["simple@example.com", "very.common@example.com", "disposable.style.email.with+symbol@example.com", "other-email-with-hyphen@and.subdomains.example.com", "fully-qualified-domain@example.com", "user.name+tag+sorting@example.com", "x@example.com", "example-indeed@strange-example.com", "test/test@test.com", "123456789012345678901234567890123456789012345678901234567890123@example.com", "admin@mailserver1", "example@s.example", "Abc.example.com", "A@b@c@example.com", "abc@example..com", "a(c)d,e:f;g<h>i[j\\k]l@example.com", "12345678901234567890123456789012345678901234567890123456789012345@example.com", "i.like.underscores@but_its_not_allowed_in_this_part", ""]),
    erlang:put('idx', 0),
    Fun_7 = fun Fun_7_loop() ->
    case (erlang:get('idx') < erlang:length(erlang:get('email_tests'))) of
        true ->
            Email_2 = (case erlang:is_map(erlang:get('email_tests')) of true -> maps:get(erlang:get('idx'), erlang:get('email_tests'), nil); _ -> case erlang:get('idx') < 0 of true -> mochi_nth(erlang:length(erlang:get('email_tests')) + erlang:get('idx') + 1, erlang:get('email_tests')); _ -> mochi_nth(erlang:get('idx') + 1, erlang:get('email_tests')) end end),
            io:format("~ts~n", [mochi_str(is_valid_email_address(Email_2))]),
            erlang:put('idx', (erlang:get('idx') + 1)),
            Fun_7_loop();
        _ -> {}
    end
end,
{} = Fun_7(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
