#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, strip/1, is_vowel/1, pig_latin/1]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

strip(S) ->
    try
        Start = 0,
        End = erlang:length(S),
        Fun = fun Fun_loop(End, S, Start) ->
    case ((Start < End) andalso (string:substr(S, Start + 1, ((Start + 1) - Start)) == " ")) of
        true ->
            Start_2 = (Start + 1),
            Fun_loop(End, S, Start_2);
        _ -> {End, S, Start}
    end
end,
{End, S, Start_2} = Fun(End, S, Start),
        Fun_2 = fun Fun_2_loop(End, S, Start_2) ->
    case ((End > Start_2) andalso (string:substr(S, (End - 1) + 1, (End - (End - 1))) == " ")) of
        true ->
            End_2 = (End - 1),
            Fun_2_loop(End_2, S, Start_2);
        _ -> {End, S, Start_2}
    end
end,
{End_2, S, Start_2} = Fun_2(End, S, Start_2),
        string:substr(S, Start_2 + 1, (End_2 - Start_2))
    catch {return, RetCatch} -> RetCatch end.

is_vowel(C) ->
    try
        I = 0,
        Fun_3 = fun Fun_3_loop(C, I) ->
    case (I < erlang:length("aeiou")) of
        true ->
            case (C == string:substr("aeiou", I + 1, ((I + 1) - I))) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_3_loop(C, I_2);
        _ -> {C, I}
    end
end,
{C, I_2} = Fun_3(C, I),
        false
    catch {return, RetCatch} -> RetCatch end.

pig_latin(Word) ->
    try
        Trimmed = strip(Word),
        case (erlang:length(Trimmed) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        W = string:to_lower(Trimmed),
        First = string:substr(W, 0 + 1, (1 - 0)),
        case is_vowel(First) of
        true -> throw({return, (W ++ "way")});
        _ -> ok
    end,
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(First, I_3, Trimmed, W, Word) ->
    case (I_3 < erlang:length(W)) of
        true ->
            try
                Ch = string:substr(W, I_3 + 1, ((I_3 + 1) - I_3)),
                case is_vowel(Ch) of
        true -> throw({break, First, I_3, Trimmed, W, Word});
        _ -> ok
    end,
                I_4 = (I_3 + 1),
                Fun_4_loop(First, I_4, Trimmed, W, Word)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_4_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {First, I_3, Trimmed, W, Word}
    end
end,
{First, I_4, Trimmed, W, Word} = Fun_4(First, I_3, Trimmed, W, Word),
        ((string:substr(W, I_4 + 1, (erlang:length(W) - I_4)) ++ string:substr(W, 0 + 1, (I_4 - 0))) ++ "ay")
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('VOWELS', "aeiou"),
    io:format("~ts~n", [mochi_repr(("pig_latin('friends') = " ++ pig_latin("friends")))]),
    io:format("~ts~n", [mochi_repr(("pig_latin('smile') = " ++ pig_latin("smile")))]),
    io:format("~ts~n", [mochi_repr(("pig_latin('eat') = " ++ pig_latin("eat")))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
