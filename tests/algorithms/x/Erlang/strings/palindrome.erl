#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, reverse/1, is_palindrome/1, is_palindrome_traversal/1, is_palindrome_recursive/1, is_palindrome_slice/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

reverse(S) ->
    try
        Res = "",
        I = (erlang:length(S) - 1),
        Fun = fun Fun_loop(I, Res, S) ->
    case (I >= 0) of
        true ->
            Res_2 = (Res ++ string:substr(S, I + 1, 1)),
            I_2 = (I - 1),
            Fun_loop(I_2, Res_2, S);
        _ -> {I, Res, S}
    end
end,
{I_2, Res_2, S} = Fun(I, Res, S),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

is_palindrome(S_2) ->
    try
        Start_i = 0,
        End_i = (erlang:length(S_2) - 1),
        Fun_2 = fun Fun_2_loop(End_i, S_2, Start_i) ->
    case (Start_i < End_i) of
        true ->
            case (string:substr(S_2, Start_i + 1, 1) == string:substr(S_2, End_i + 1, 1)) of
        true -> Start_i_2 = (Start_i + 1),
            End_i_2 = (End_i - 1),
            End_i_3 = End_i_2,
            Start_i_3 = Start_i_2;
        _ -> throw({return, false}),
            End_i_3 = End_i,
            Start_i_3 = Start_i
    end,
            Fun_2_loop(End_i_3, S_2, Start_i_3);
        _ -> {End_i, S_2, Start_i}
    end
end,
{End_i_3, S_2, Start_i_3} = Fun_2(End_i, S_2, Start_i),
        true
    catch {return, RetCatch} -> RetCatch end.

is_palindrome_traversal(S_3) ->
    try
        End = mochi_safe_div(erlang:length(S_3), 2),
        N = erlang:length(S_3),
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(End, I_3, N, S_3) ->
    case (I_3 < End) of
        true ->
            case (string:substr(S_3, I_3 + 1, 1) /= string:substr(S_3, ((N - I_3) - 1) + 1, 1)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(End, I_4, N, S_3);
        _ -> {End, I_3, N, S_3}
    end
end,
{End, I_4, N, S_3} = Fun_3(End, I_3, N, S_3),
        true
    catch {return, RetCatch} -> RetCatch end.

is_palindrome_recursive(S_4) ->
    try
        case (erlang:length(S_4) =< 1) of
        true -> throw({return, true});
        _ -> ok
    end,
        case (string:substr(S_4, 0 + 1, 1) == string:substr(S_4, (erlang:length(S_4) - 1) + 1, 1)) of
        true -> throw({return, is_palindrome_recursive(string:substr(S_4, 1 + 1, ((erlang:length(S_4) - 1) - 1)))});
        _ -> ok
    end,
        false
    catch {return, RetCatch} -> RetCatch end.

is_palindrome_slice(S_5) ->
    try
        (S_5 == lists:reverse(S_5))
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Fun_4 = fun Fun_4_loop(List) ->
    case List of
        [] -> {};
        [T|T_rest] ->
            S_6 = maps:get("text", T, nil),
            Expected = maps:get("expected", T, nil),
            R1 = is_palindrome(S_6),
            R2 = is_palindrome_traversal(S_6),
            R3 = is_palindrome_recursive(S_6),
            R4 = is_palindrome_slice(S_6),
            case ((((R1 /= Expected) orelse (R2 /= Expected)) orelse (R3 /= Expected)) orelse (R4 /= Expected)) of
        true -> erlang:error({panic, "algorithm mismatch"});
        _ -> ok
    end,
            io:format("~ts~n", [mochi_repr(((S_6 ++ " ") ++ mochi_str(Expected)))]),
            Fun_4_loop(T_rest);
        _ -> {}
    end
end,
{} = Fun_4(erlang:get('test_data')),
        io:format("~ts~n", [mochi_repr("a man a plan a canal panama")]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('test_data', [#{"text" => "MALAYALAM", "expected" => true}, #{"text" => "String", "expected" => false}, #{"text" => "rotor", "expected" => true}, #{"text" => "level", "expected" => true}, #{"text" => "A", "expected" => true}, #{"text" => "BB", "expected" => true}, #{"text" => "ABC", "expected" => false}, #{"text" => "amanaplanacanalpanama", "expected" => true}]),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
