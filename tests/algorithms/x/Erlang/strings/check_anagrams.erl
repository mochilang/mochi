#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, strip_and_remove_spaces/1, check_anagrams/2, print_bool/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

strip_and_remove_spaces(S) ->
    try
        Start = 0,
        End = (erlang:length(S) - 1),
        Fun = fun Fun_loop(End, S, Start) ->
    case ((Start < erlang:length(S)) andalso (string:substr(S, Start + 1, 1) == " ")) of
        true ->
            Start_2 = (Start + 1),
            Fun_loop(End, S, Start_2);
        _ -> {End, S, Start}
    end
end,
{End, S, Start_2} = Fun(End, S, Start),
        Fun_2 = fun Fun_2_loop(End, S, Start_2) ->
    case ((End >= Start_2) andalso (string:substr(S, End + 1, 1) == " ")) of
        true ->
            End_2 = (End - 1),
            Fun_2_loop(End_2, S, Start_2);
        _ -> {End, S, Start_2}
    end
end,
{End_2, S, Start_2} = Fun_2(End, S, Start_2),
        Res = "",
        I = Start_2,
        Fun_3 = fun Fun_3_loop(End_2, I, Res, S, Start_2) ->
    case (I =< End_2) of
        true ->
            Ch = string:substr(S, I + 1, 1),
            case (Ch /= " ") of
        true -> Res_2 = (Res ++ Ch),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_3_loop(End_2, I_2, Res_3, S, Start_2);
        _ -> {End_2, I, Res, S, Start_2}
    end
end,
{End_2, I_2, Res_3, S, Start_2} = Fun_3(End_2, I, Res, S, Start_2),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

check_anagrams(A, B) ->
    try
        S1 = string:to_lower(A),
        S2 = string:to_lower(B),
        S1_2 = strip_and_remove_spaces(S1),
        S2_2 = strip_and_remove_spaces(S2),
        case (erlang:length(S1_2) /= erlang:length(S2_2)) of
        true -> throw({return, false});
        _ -> ok
    end,
        Count = #{},
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(A, B, Count, I_3, S1_2, S2_2) ->
    case (I_3 < erlang:length(S1_2)) of
        true ->
            C1 = string:substr(S1_2, I_3 + 1, 1),
            C2 = string:substr(S2_2, I_3 + 1, 1),
            case maps:is_key(C1, Count) of
        true -> Count_2 = maps:put(C1, (maps:get(C1, Count, nil) + 1), Count),
            Count_4 = Count_2;
        _ -> Count_3 = maps:put(C1, 1, Count),
            Count_4 = Count_3
    end,
            case maps:is_key(C2, Count_4) of
        true -> Count_5 = maps:put(C2, (maps:get(C2, Count_4, nil) - 1), Count_4),
            Count_7 = Count_5;
        _ -> Count_6 = maps:put(C2, -1, Count_4),
            Count_7 = Count_6
    end,
            I_4 = (I_3 + 1),
            Fun_4_loop(A, B, Count_7, I_4, S1_2, S2_2);
        _ -> {A, B, Count, I_3, S1_2, S2_2}
    end
end,
{A, B, Count_7, I_4, S1_2, S2_2} = Fun_4(A, B, Count, I_3, S1_2, S2_2),
        Fun_5 = fun Fun_5_loop(List, A, B, Count_7, I_4, S1_2, S2_2) ->
    case List of
        [] -> {A, B, Count_7, I_4, S1_2, S2_2};
        [Ch_2|Ch_2_rest] ->
            case ((case erlang:is_map(Count_7) of true -> maps:get(Ch_2, Count_7, nil); _ -> case Ch_2 < 0 of true -> mochi_nth(erlang:length(Count_7) + Ch_2 + 1, Count_7); _ -> mochi_nth(Ch_2 + 1, Count_7) end end) /= 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            Fun_5_loop(Ch_2_rest, A, B, Count_7, I_4, S1_2, S2_2);
        _ -> {A, B, Count_7, I_4, S1_2, S2_2}
    end
end,
{A, B, Count_7, I_4, S1_2, S2_2} = Fun_5(maps:keys(Count_7), A, B, Count_7, I_4, S1_2, S2_2),
        true
    catch {return, RetCatch} -> RetCatch end.

print_bool(B_2) ->
    try
        case B_2 of
        true -> io:format("~ts~n", [mochi_repr(true)]);
        _ -> io:format("~ts~n", [mochi_repr(false)])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    print_bool(check_anagrams("Silent", "Listen")),
    print_bool(check_anagrams("This is a string", "Is this a string")),
    print_bool(check_anagrams("This is    a      string", "Is     this a string")),
    print_bool(check_anagrams("There", "Their")),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
