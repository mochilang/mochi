#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, range_list/1, min3/3, levenshtein_distance/2, levenshtein_distance_optimized/2, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

range_list(N) ->
    try
        Lst = [],
        I = 0,
        Fun = fun Fun_loop(I, Lst, N) ->
    case (I < N) of
        true ->
            Lst_2 = lists:append((case Lst of nil -> []; _ -> Lst end), [I]),
            I_2 = (I + 1),
            Fun_loop(I_2, Lst_2, N);
        _ -> {I, Lst, N}
    end
end,
{I_2, Lst_2, N} = Fun(I, Lst, N),
        Lst_2
    catch {return, RetCatch} -> RetCatch end.

min3(A, B, C) ->
    try
        M = A,
        case (B < M) of
        true -> M_2 = B,
            M_3 = M_2;
        _ -> M_3 = M
    end,
        case (C < M_3) of
        true -> M_4 = C,
            M_5 = M_4;
        _ -> M_5 = M_3
    end,
        M_5
    catch {return, RetCatch} -> RetCatch end.

levenshtein_distance(First_word, Second_word) ->
    try
        case (erlang:length(First_word) < erlang:length(Second_word)) of
        true -> throw({return, levenshtein_distance(Second_word, First_word)});
        _ -> ok
    end,
        case (erlang:length(Second_word) == 0) of
        true -> throw({return, erlang:length(First_word)});
        _ -> ok
    end,
        Previous_row = range_list((erlang:length(Second_word) + 1)),
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(First_word, I_3, Previous_row, Second_word) ->
    case (I_3 < erlang:length(First_word)) of
        true ->
            C1 = string:substr(First_word, I_3 + 1, 1),
            Current_row = [],
            Current_row_2 = lists:append((case Current_row of nil -> []; _ -> Current_row end), [(I_3 + 1)]),
            J = 0,
            Fun_2 = fun Fun_2_loop(C1, Current_row_2, First_word, I_3, J, Previous_row, Second_word) ->
    case (J < erlang:length(Second_word)) of
        true ->
            C2 = string:substr(Second_word, J + 1, 1),
            Insertions = ((case erlang:is_map(Previous_row) of true -> maps:get((J + 1), Previous_row, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Previous_row) + (J + 1) + 1, Previous_row); _ -> mochi_nth((J + 1) + 1, Previous_row) end end) + 1),
            Deletions = ((case erlang:is_map(Current_row_2) of true -> maps:get(J, Current_row_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Current_row_2) + J + 1, Current_row_2); _ -> mochi_nth(J + 1, Current_row_2) end end) + 1),
            Substitutions = ((case erlang:is_map(Previous_row) of true -> maps:get(J, Previous_row, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Previous_row) + J + 1, Previous_row); _ -> mochi_nth(J + 1, Previous_row) end end) + (case (C1 == C2) of
    true -> 0;
    _ -> 1
end)),
            Min_val = min3(Insertions, Deletions, Substitutions),
            Current_row_3 = lists:append((case Current_row_2 of nil -> []; _ -> Current_row_2 end), [Min_val]),
            J_2 = (J + 1),
            Fun_2_loop(C1, Current_row_3, First_word, I_3, J_2, Previous_row, Second_word);
        _ -> {C1, Current_row_2, First_word, I_3, J, Previous_row, Second_word}
    end
end,
{C1, Current_row_3, First_word, I_3, J_2, Previous_row, Second_word} = Fun_2(C1, Current_row_2, First_word, I_3, J, Previous_row, Second_word),
            Previous_row_2 = Current_row_3,
            I_4 = (I_3 + 1),
            Fun_3_loop(First_word, I_4, Previous_row_2, Second_word);
        _ -> {First_word, I_3, Previous_row, Second_word}
    end
end,
{First_word, I_4, Previous_row_2, Second_word} = Fun_3(First_word, I_3, Previous_row, Second_word),
        (case erlang:is_map(Previous_row_2) of true -> maps:get((erlang:length(Previous_row_2) - 1), Previous_row_2, nil); _ -> case (erlang:length(Previous_row_2) - 1) < 0 of true -> mochi_nth(erlang:length(Previous_row_2) + (erlang:length(Previous_row_2) - 1) + 1, Previous_row_2); _ -> mochi_nth((erlang:length(Previous_row_2) - 1) + 1, Previous_row_2) end end)
    catch {return, RetCatch} -> RetCatch end.

levenshtein_distance_optimized(First_word_2, Second_word_2) ->
    try
        case (erlang:length(First_word_2) < erlang:length(Second_word_2)) of
        true -> throw({return, levenshtein_distance_optimized(Second_word_2, First_word_2)});
        _ -> ok
    end,
        case (erlang:length(Second_word_2) == 0) of
        true -> throw({return, erlang:length(First_word_2)});
        _ -> ok
    end,
        Previous_row_3 = range_list((erlang:length(Second_word_2) + 1)),
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(First_word_2, I_5, Previous_row_3, Second_word_2) ->
    case (I_5 < erlang:length(First_word_2)) of
        true ->
            C1_2 = string:substr(First_word_2, I_5 + 1, 1),
            Current_row_4 = [],
            Current_row_5 = lists:append((case Current_row_4 of nil -> []; _ -> Current_row_4 end), [(I_5 + 1)]),
            K = 0,
            Fun_4 = fun Fun_4_loop(C1_2, Current_row_5, First_word_2, I_5, K, Previous_row_3, Second_word_2) ->
    case (K < erlang:length(Second_word_2)) of
        true ->
            Current_row_6 = lists:append((case Current_row_5 of nil -> []; _ -> Current_row_5 end), [0]),
            K_2 = (K + 1),
            Fun_4_loop(C1_2, Current_row_6, First_word_2, I_5, K_2, Previous_row_3, Second_word_2);
        _ -> {C1_2, Current_row_5, First_word_2, I_5, K, Previous_row_3, Second_word_2}
    end
end,
{C1_2, Current_row_6, First_word_2, I_5, K_2, Previous_row_3, Second_word_2} = Fun_4(C1_2, Current_row_5, First_word_2, I_5, K, Previous_row_3, Second_word_2),
            J_3 = 0,
            Fun_5 = fun Fun_5_loop(C1_2, Current_row_6, First_word_2, I_5, J_3, K_2, Previous_row_3, Second_word_2) ->
    case (J_3 < erlang:length(Second_word_2)) of
        true ->
            C2_2 = string:substr(Second_word_2, J_3 + 1, 1),
            Insertions_2 = ((case erlang:is_map(Previous_row_3) of true -> maps:get((J_3 + 1), Previous_row_3, nil); _ -> case (J_3 + 1) < 0 of true -> mochi_nth(erlang:length(Previous_row_3) + (J_3 + 1) + 1, Previous_row_3); _ -> mochi_nth((J_3 + 1) + 1, Previous_row_3) end end) + 1),
            Deletions_2 = ((case erlang:is_map(Current_row_6) of true -> maps:get(J_3, Current_row_6, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Current_row_6) + J_3 + 1, Current_row_6); _ -> mochi_nth(J_3 + 1, Current_row_6) end end) + 1),
            Substitutions_2 = ((case erlang:is_map(Previous_row_3) of true -> maps:get(J_3, Previous_row_3, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Previous_row_3) + J_3 + 1, Previous_row_3); _ -> mochi_nth(J_3 + 1, Previous_row_3) end end) + (case (C1_2 == C2_2) of
    true -> 0;
    _ -> 1
end)),
            Min_val_2 = min3(Insertions_2, Deletions_2, Substitutions_2),
            Current_row_7 = lists:sublist(Current_row_6, (J_3 + 1)) ++ [Min_val_2] ++ lists:nthtail((J_3 + 1) + 1, Current_row_6),
            J_4 = (J_3 + 1),
            Fun_5_loop(C1_2, Current_row_7, First_word_2, I_5, J_4, K_2, Previous_row_3, Second_word_2);
        _ -> {C1_2, Current_row_6, First_word_2, I_5, J_3, K_2, Previous_row_3, Second_word_2}
    end
end,
{C1_2, Current_row_7, First_word_2, I_5, J_4, K_2, Previous_row_3, Second_word_2} = Fun_5(C1_2, Current_row_6, First_word_2, I_5, J_3, K_2, Previous_row_3, Second_word_2),
            Previous_row_4 = Current_row_7,
            I_6 = (I_5 + 1),
            Fun_6_loop(First_word_2, I_6, Previous_row_4, Second_word_2);
        _ -> {First_word_2, I_5, Previous_row_3, Second_word_2}
    end
end,
{First_word_2, I_6, Previous_row_4, Second_word_2} = Fun_6(First_word_2, I_5, Previous_row_3, Second_word_2),
        (case erlang:is_map(Previous_row_4) of true -> maps:get((erlang:length(Previous_row_4) - 1), Previous_row_4, nil); _ -> case (erlang:length(Previous_row_4) - 1) < 0 of true -> mochi_nth(erlang:length(Previous_row_4) + (erlang:length(Previous_row_4) - 1) + 1, Previous_row_4); _ -> mochi_nth((erlang:length(Previous_row_4) - 1) + 1, Previous_row_4) end end)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        A_2 = "kitten",
        B_2 = "sitting",
        io:format("~ts~n", [mochi_str(levenshtein_distance("kitten", "sitting"))]),
        io:format("~ts~n", [mochi_str(levenshtein_distance_optimized("kitten", "sitting"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
