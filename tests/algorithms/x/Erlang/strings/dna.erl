#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_valid/1, dna/1]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

is_valid(Strand) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, Strand) ->
    case (I < erlang:length(Strand)) of
        true ->
            Ch = string:substr(Strand, I + 1, ((I + 1) - I)),
            case ((((Ch /= "A") andalso (Ch /= "T")) andalso (Ch /= "C")) andalso (Ch /= "G")) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Strand);
        _ -> {I, Strand}
    end
end,
{I_2, Strand} = Fun(I, Strand),
        true
    catch {return, RetCatch} -> RetCatch end.

dna(Strand_2) ->
    try
        case mochi_not(is_valid(Strand_2)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: Invalid Strand")]),
            throw({return, ""});
        _ -> ok
    end,
        Result = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Result, Strand_2) ->
    case (I_3 < erlang:length(Strand_2)) of
        true ->
            Ch_2 = string:substr(Strand_2, I_3 + 1, ((I_3 + 1) - I_3)),
            case (Ch_2 == "A") of
        true -> Result_2 = (Result ++ "T"),
            Result_8 = Result_2;
        _ -> case (Ch_2 == "T") of
        true -> Result_3 = (Result ++ "A"),
            Result_7 = Result_3;
        _ -> case (Ch_2 == "C") of
        true -> Result_4 = (Result ++ "G"),
            Result_6 = Result_4;
        _ -> Result_5 = (Result ++ "C"),
            Result_6 = Result_5
    end,
            Result_7 = Result_6
    end,
            Result_8 = Result_7
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Result_8, Strand_2);
        _ -> {I_3, Result, Strand_2}
    end
end,
{I_4, Result_8, Strand_2} = Fun_2(I_3, Result, Strand_2),
        Result_8
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(dna("GCTA"))]),
    io:format("~ts~n", [mochi_repr(dna("ATGC"))]),
    io:format("~ts~n", [mochi_repr(dna("CTGA"))]),
    io:format("~ts~n", [mochi_repr(dna("GFGG"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
