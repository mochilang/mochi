#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, split_ws/1, contains/2, unique/1, insertion_sort/1, join_with_space/1, remove_duplicates/1]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

split_ws(S) ->
    try
        Res = [],
        Word = "",
        I = 0,
        Fun = fun Fun_loop(I, Res, S, Word) ->
    case (I < erlang:length(S)) of
        true ->
            Ch = string:substr(S, I + 1, ((I + 1) - I)),
            case (Ch == " ") of
        true -> case (Word /= "") of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Word]),
            Word_2 = "",
            Res_3 = Res_2,
            Word_3 = Word_2;
        _ -> Res_3 = Res,
            Word_3 = Word
    end,
            Res_4 = Res_3,
            Word_5 = Word_3;
        _ -> Word_4 = (Word ++ Ch),
            Res_4 = Res,
            Word_5 = Word_4
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Res_4, S, Word_5);
        _ -> {I, Res, S, Word}
    end
end,
{I_2, Res_4, S, Word_5} = Fun(I, Res, S, Word),
        case (Word_5 /= "") of
        true -> Res_5 = lists:append((case Res_4 of nil -> []; _ -> Res_4 end), [Word_5]),
            Res_6 = Res_5;
        _ -> Res_6 = Res_4
    end,
        Res_6
    catch {return, RetCatch} -> RetCatch end.

contains(Xs, X) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, X, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end) == X) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, X, Xs);
        _ -> {I_3, X, Xs}
    end
end,
{I_4, X, Xs} = Fun_2(I_3, X, Xs),
        false
    catch {return, RetCatch} -> RetCatch end.

unique(Xs_2) ->
    try
        Res_7 = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Res_7, Xs_2) ->
    case (I_5 < erlang:length(Xs_2)) of
        true ->
            W = (case erlang:is_map(Xs_2) of true -> maps:get(I_5, Xs_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_5 + 1, Xs_2); _ -> mochi_nth(I_5 + 1, Xs_2) end end),
            case mochi_not(mochi_member(W, Res_7)) of
        true -> Res_8 = lists:append((case Res_7 of nil -> []; _ -> Res_7 end), [W]),
            Res_9 = Res_8;
        _ -> Res_9 = Res_7
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Res_9, Xs_2);
        _ -> {I_5, Res_7, Xs_2}
    end
end,
{I_6, Res_9, Xs_2} = Fun_3(I_5, Res_7, Xs_2),
        Res_9
    catch {return, RetCatch} -> RetCatch end.

insertion_sort(Arr) ->
    try
        A = Arr,
        I_7 = 1,
        Fun_5 = fun Fun_5_loop(A, Arr, I_7) ->
    case (I_7 < erlang:length(A)) of
        true ->
            Key = (case erlang:is_map(A) of true -> maps:get(I_7, A, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A) + I_7 + 1, A); _ -> mochi_nth(I_7 + 1, A) end end),
            J = (I_7 - 1),
            Fun_4 = fun Fun_4_loop(A, Arr, I_7, J, Key) ->
    case ((J >= 0) andalso ((case erlang:is_map(A) of true -> maps:get(J, A, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(A) + J + 1, A); _ -> mochi_nth(J + 1, A) end end) > Key)) of
        true ->
            A_2 = lists:sublist(A, (J + 1)) ++ [(case erlang:is_map(A) of true -> maps:get(J, A, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(A) + J + 1, A); _ -> mochi_nth(J + 1, A) end end)] ++ lists:nthtail((J + 1) + 1, A),
            J_2 = (J - 1),
            Fun_4_loop(A_2, Arr, I_7, J_2, Key);
        _ -> {A, Arr, I_7, J, Key}
    end
end,
{A_2, Arr, I_7, J_2, Key} = Fun_4(A, Arr, I_7, J, Key),
            A_3 = lists:sublist(A_2, (J_2 + 1)) ++ [Key] ++ lists:nthtail((J_2 + 1) + 1, A_2),
            I_8 = (I_7 + 1),
            Fun_5_loop(A_3, Arr, I_8);
        _ -> {A, Arr, I_7}
    end
end,
{A_3, Arr, I_8} = Fun_5(A, Arr, I_7),
        A_3
    catch {return, RetCatch} -> RetCatch end.

join_with_space(Xs_3) ->
    try
        S_2 = "",
        I_9 = 0,
        Fun_6 = fun Fun_6_loop(I_9, S_2, Xs_3) ->
    case (I_9 < erlang:length(Xs_3)) of
        true ->
            case (I_9 > 0) of
        true -> S_3 = (S_2 ++ " "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            S_5 = (S_4 ++ (case erlang:is_map(Xs_3) of true -> maps:get(I_9, Xs_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Xs_3) + I_9 + 1, Xs_3); _ -> mochi_nth(I_9 + 1, Xs_3) end end)),
            I_10 = (I_9 + 1),
            Fun_6_loop(I_10, S_5, Xs_3);
        _ -> {I_9, S_2, Xs_3}
    end
end,
{I_10, S_5, Xs_3} = Fun_6(I_9, S_2, Xs_3),
        S_5
    catch {return, RetCatch} -> RetCatch end.

remove_duplicates(Sentence) ->
    try
        Words = split_ws(Sentence),
        Uniq = unique(Words),
        Sorted_words = insertion_sort(Uniq),
        join_with_space(Sorted_words)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(remove_duplicates("Python is great and Java is also great"))]),
    io:format("~ts~n", [mochi_repr(remove_duplicates("Python   is      great and Java is also great"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
