#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, split/2, capitalize/1, snake_to_camel_case/2]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

split(S, Sep) ->
    try
        Res = [],
        Current = "",
        I = 0,
        Fun = fun Fun_loop(Current, I, Res, S, Sep) ->
    case (I < erlang:length(S)) of
        true ->
            Ch = string:substr(S, I + 1, ((I + 1) - I)),
            case (Ch == Sep) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Current]),
            Current_2 = "",
            Current_4 = Current_2,
            Res_3 = Res_2;
        _ -> Current_3 = (Current ++ Ch),
            Current_4 = Current_3,
            Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_loop(Current_4, I_2, Res_3, S, Sep);
        _ -> {Current, I, Res, S, Sep}
    end
end,
{Current_4, I_2, Res_3, S, Sep} = Fun(Current, I, Res, S, Sep),
        Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Current_4]),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

capitalize(Word) ->
    try
        case (erlang:length(Word) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        First = string:to_upper(string:substr(Word, 0 + 1, (1 - 0))),
        Rest = string:substr(Word, 1 + 1, (erlang:length(Word) - 1)),
        (First ++ Rest)
    catch {return, RetCatch} -> RetCatch end.

snake_to_camel_case(Input_str, Use_pascal) ->
    try
        Words = string:tokens(Input_str, "_"),
        Result = "",
        Index = 0,
        case mochi_not(Use_pascal) of
        true -> case (erlang:length(Words) > 0) of
        true -> Result_2 = string:substr(Words, 0 + 1, 1),
            Index_2 = 1,
            Index_3 = Index_2,
            Result_3 = Result_2;
        _ -> Index_3 = Index,
            Result_3 = Result
    end,
            Index_4 = Index_3,
            Result_4 = Result_3;
        _ -> Index_4 = Index,
            Result_4 = Result
    end,
        Fun_2 = fun Fun_2_loop(Index_4, Input_str, Result_4, Use_pascal, Words) ->
    case (Index_4 < erlang:length(Words)) of
        true ->
            Word_2 = string:substr(Words, Index_4 + 1, 1),
            Result_5 = (Result_4 ++ capitalize(Word_2)),
            Index_5 = (Index_4 + 1),
            Fun_2_loop(Index_5, Input_str, Result_5, Use_pascal, Words);
        _ -> {Index_4, Input_str, Result_4, Use_pascal, Words}
    end
end,
{Index_5, Input_str, Result_5, Use_pascal, Words} = Fun_2(Index_4, Input_str, Result_4, Use_pascal, Words),
        Result_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(snake_to_camel_case("some_random_string", false))]),
    io:format("~ts~n", [mochi_repr(snake_to_camel_case("some_random_string", true))]),
    io:format("~ts~n", [mochi_repr(snake_to_camel_case("some_random_string_with_numbers_123", false))]),
    io:format("~ts~n", [mochi_repr(snake_to_camel_case("some_random_string_with_numbers_123", true))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
