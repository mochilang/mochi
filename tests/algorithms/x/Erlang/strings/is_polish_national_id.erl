#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parse_int/1, is_polish_national_id/1]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

parse_int(S) ->
    try
        Value = 0,
        I = 0,
        Fun = fun Fun_loop(I, S, Value) ->
    case (I < erlang:length(S)) of
        true ->
            C = string:substr(S, I + 1, 1),
            Value_2 = ((Value * 10) + mochi_to_int(C)),
            I_2 = (I + 1),
            Fun_loop(I_2, S, Value_2);
        _ -> {I, S, Value}
    end
end,
{I_2, S, Value_2} = Fun(I, S, Value),
        Value_2
    catch {return, RetCatch} -> RetCatch end.

is_polish_national_id(Id) ->
    try
        case (erlang:length(Id) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (string:substr(Id, 0 + 1, (1 - 0)) == "-") of
        true -> throw({return, false});
        _ -> ok
    end,
        Input_int = parse_int(Id),
        case ((Input_int < 10100000) orelse (Input_int > 99923199999)) of
        true -> throw({return, false});
        _ -> ok
    end,
        Month = parse_int(string:substr(Id, 2 + 1, (4 - 2))),
        case mochi_not(((((((Month >= 1) andalso (Month =< 12)) orelse ((Month >= 21) andalso (Month =< 32))) orelse ((Month >= 41) andalso (Month =< 52))) orelse ((Month >= 61) andalso (Month =< 72))) orelse ((Month >= 81) andalso (Month =< 92)))) of
        true -> throw({return, false});
        _ -> ok
    end,
        Day = parse_int(string:substr(Id, 4 + 1, (6 - 4))),
        case ((Day < 1) orelse (Day > 31)) of
        true -> throw({return, false});
        _ -> ok
    end,
        Multipliers = [1, 3, 7, 9, 1, 3, 7, 9, 1, 3],
        Subtotal = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Day, I_3, Id, Input_int, Month, Multipliers, Subtotal) ->
    case (I_3 < erlang:length(Multipliers)) of
        true ->
            Digit = parse_int(string:substr(Id, I_3 + 1, ((I_3 + 1) - I_3))),
            Subtotal_2 = (Subtotal + mochi_mod((Digit * (case erlang:is_map(Multipliers) of true -> maps:get(I_3, Multipliers, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Multipliers) + I_3 + 1, Multipliers); _ -> mochi_nth(I_3 + 1, Multipliers) end end)), 10)),
            I_4 = (I_3 + 1),
            Fun_2_loop(Day, I_4, Id, Input_int, Month, Multipliers, Subtotal_2);
        _ -> {Day, I_3, Id, Input_int, Month, Multipliers, Subtotal}
    end
end,
{Day, I_4, Id, Input_int, Month, Multipliers, Subtotal_2} = Fun_2(Day, I_3, Id, Input_int, Month, Multipliers, Subtotal),
        Checksum = (10 - mochi_mod(Subtotal_2, 10)),
        (Checksum == mochi_mod(Input_int, 10))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(is_polish_national_id("02070803628"))]),
    io:format("~ts~n", [mochi_str(is_polish_national_id("02150803629"))]),
    io:format("~ts~n", [mochi_str(is_polish_national_id("02075503622"))]),
    io:format("~ts~n", [mochi_str(is_polish_national_id("-99012212349"))]),
    io:format("~ts~n", [mochi_str(is_polish_national_id("990122123499999"))]),
    io:format("~ts~n", [mochi_str(is_polish_national_id("02070803621"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
