#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_vowel/1, count_vowels/1, show/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

is_vowel(C) ->
    try
        I = 0,
        Fun = fun Fun_loop(C, I) ->
    case (I < erlang:length("aeiouAEIOU")) of
        true ->
            case (string:substr("aeiouAEIOU", I + 1, 1) == C) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(C, I_2);
        _ -> {C, I}
    end
end,
{C, I_2} = Fun(C, I),
        false
    catch {return, RetCatch} -> RetCatch end.

count_vowels(S) ->
    try
        Count = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Count, I_3, S) ->
    case (I_3 < erlang:length(S)) of
        true ->
            Ch = string:substr(S, I_3 + 1, 1),
            case is_vowel(Ch) of
        true -> Count_2 = (Count + 1),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Count_3, I_4, S);
        _ -> {Count, I_3, S}
    end
end,
{Count_3, I_4, S} = Fun_2(Count, I_3, S),
        Count_3
    catch {return, RetCatch} -> RetCatch end.

show(S_2) ->
    try
        io:format("~ts~n", [mochi_str(count_vowels(S_2))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('vowels', "aeiouAEIOU"),
    show("hello world"),
    show("HELLO WORLD"),
    show("123 hello world"),
    show(""),
    show("a quick brown fox"),
    show("the quick BROWN fox"),
    show("PYTHON"),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
