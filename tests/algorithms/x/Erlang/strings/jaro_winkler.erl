#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, min_int/2, max_int/2, repeat_bool/2, set_bool/3, jaro_winkler/2]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

min_int(A, B) ->
    try
        case (A < B) of
        true -> throw({return, A});
        _ -> throw({return, B})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

max_int(A_2, B_2) ->
    try
        case (A_2 > B_2) of
        true -> throw({return, A_2});
        _ -> throw({return, B_2})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

repeat_bool(N, Value) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, N, Res, Value) ->
    case (I < N) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Value]),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Res_2, Value);
        _ -> {I, N, Res, Value}
    end
end,
{I_2, N, Res_2, Value} = Fun(I, N, Res, Value),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

set_bool(Xs, Idx, Value_2) ->
    try
        Res_3 = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Idx, Res_3, Value_2, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            case (I_3 == Idx) of
        true -> Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Value_2]),
            Res_6 = Res_4;
        _ -> Res_5 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [(case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end)]),
            Res_6 = Res_5
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Idx, Res_6, Value_2, Xs);
        _ -> {I_3, Idx, Res_3, Value_2, Xs}
    end
end,
{I_4, Idx, Res_6, Value_2, Xs} = Fun_2(I_3, Idx, Res_3, Value_2, Xs),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

jaro_winkler(S1, S2) ->
    try
        Len1 = erlang:length(S1),
        Len2 = erlang:length(S2),
        Limit = (min_int(Len1, Len2) div 2),
        Match1 = repeat_bool(Len1, false),
        Match2 = repeat_bool(Len2, false),
        Matches = 0,
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, Len1, Len2, Limit, Match1, Match2, Matches, S1, S2) ->
    case (I_5 < Len1) of
        true ->
            try
                Start = max_int(0, (I_5 - Limit)),
                End = min_int(((I_5 + Limit) + 1), Len2),
                J = Start,
                Fun_3 = fun Fun_3_loop(End, I_5, J, Len1, Len2, Limit, Match1, Match2, Matches, S1, S2, Start) ->
    case (J < End) of
        true ->
            try
                case (mochi_not((case erlang:is_map(Match2) of true -> maps:get(J, Match2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Match2) + J + 1, Match2); _ -> mochi_nth(J + 1, Match2) end end)) andalso (string:substr(S1, I_5 + 1, ((I_5 + 1) - I_5)) == string:substr(S2, J + 1, ((J + 1) - J)))) of
        true -> Match1_2 = set_bool(Match1, I_5, true),
            Match2_2 = set_bool(Match2, J, true),
            Matches_2 = (Matches + 1),
            throw({break, End, I_5, J, Len1, Len2, Limit, Match1_2, Match2_2, Matches_2, S1, S2, Start}),
            Match1_3 = Match1_2,
            Match2_3 = Match2_2,
            Matches_3 = Matches_2;
        _ -> Match1_3 = Match1,
            Match2_3 = Match2,
            Matches_3 = Matches
    end,
                J_2 = (J + 1),
                Fun_3_loop(End, I_5, J_2, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2, Start)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11}
            end;
        _ -> {End, I_5, J, Len1, Len2, Limit, Match1, Match2, Matches, S1, S2, Start}
    end
end,
{End, I_5, J_2, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2, Start} = Fun_3(End, I_5, J, Len1, Len2, Limit, Match1, Match2, Matches, S1, S2, Start),
                I_6 = (I_5 + 1),
                Fun_4_loop(I_6, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8} -> Fun_4_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8}
            end;
        _ -> {I_5, Len1, Len2, Limit, Match1, Match2, Matches, S1, S2}
    end
end,
{I_6, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2} = Fun_4(I_5, Len1, Len2, Limit, Match1, Match2, Matches, S1, S2),
        case (Matches_3 == 0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Transpositions = 0,
        K = 0,
        I_7 = 0,
        Fun_7 = fun Fun_7_loop(I_7, K, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2, Transpositions) ->
    case (I_7 < Len1) of
        true ->
            case (case erlang:is_map(Match1_3) of true -> maps:get(I_7, Match1_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Match1_3) + I_7 + 1, Match1_3); _ -> mochi_nth(I_7 + 1, Match1_3) end end) of
        true -> Fun_5 = fun Fun_5_loop(I_7, K, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2, Transpositions) ->
    case mochi_not((case erlang:is_map(Match2_3) of true -> maps:get(K, Match2_3, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Match2_3) + K + 1, Match2_3); _ -> mochi_nth(K + 1, Match2_3) end end)) of
        true ->
            K_2 = (K + 1),
            Fun_5_loop(I_7, K_2, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2, Transpositions);
        _ -> {I_7, K, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2, Transpositions}
    end
end,
{I_7, K_2, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2, Transpositions} = Fun_5(I_7, K, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2, Transpositions),
            case (string:substr(S1, I_7 + 1, ((I_7 + 1) - I_7)) /= string:substr(S2, K_2 + 1, ((K_2 + 1) - K_2))) of
        true -> Transpositions_2 = (Transpositions + 1),
            Transpositions_3 = Transpositions_2;
        _ -> Transpositions_3 = Transpositions
    end,
            K_3 = (K_2 + 1),
            Fun_6 = Fun_5,
            K_4 = K_3,
            Transpositions_4 = Transpositions_3;
        _ -> Fun_6 = Fun_4,
            K_4 = K,
            Transpositions_4 = Transpositions
    end,
            I_8 = (I_7 + 1),
            Fun_7_loop(I_8, K_4, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2, Transpositions_4);
        _ -> {I_7, K, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2, Transpositions}
    end
end,
{I_8, K_4, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2, Transpositions_4} = Fun_7(I_7, K, Len1, Len2, Limit, Match1_3, Match2_3, Matches_3, S1, S2, Transpositions),
        M = float(Matches_3),
        Jaro = mochi_safe_div(((mochi_safe_div(M, float(Len1)) + mochi_safe_div(M, float(Len2))) + mochi_safe_div((M - mochi_safe_div(float(Transpositions_4), 2.0)), M)), 3.0),
        Prefix_len = 0,
        I_9 = 0,
        Fun_8 = fun Fun_8_loop(I_9, Jaro, K_4, Len1, Len2, Limit, M, Match1_3, Match2_3, Matches_3, Prefix_len, S1, S2, Transpositions_4) ->
    case (((I_9 < 4) andalso (I_9 < Len1)) andalso (I_9 < Len2)) of
        true ->
            try
                case (string:substr(S1, I_9 + 1, ((I_9 + 1) - I_9)) == string:substr(S2, I_9 + 1, ((I_9 + 1) - I_9))) of
        true -> Prefix_len_2 = (Prefix_len + 1),
            Prefix_len_3 = Prefix_len_2;
        _ -> throw({break, I_9, Jaro, K_4, Len1, Len2, Limit, M, Match1_3, Match2_3, Matches_3, Prefix_len, S1, S2, Transpositions_4}),
            Prefix_len_3 = Prefix_len
    end,
                I_10 = (I_9 + 1),
                Fun_8_loop(I_10, Jaro, K_4, Len1, Len2, Limit, M, Match1_3, Match2_3, Matches_3, Prefix_len_3, S1, S2, Transpositions_4)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13} -> Fun_8_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13}
            end;
        _ -> {I_9, Jaro, K_4, Len1, Len2, Limit, M, Match1_3, Match2_3, Matches_3, Prefix_len, S1, S2, Transpositions_4}
    end
end,
{I_10, Jaro, K_4, Len1, Len2, Limit, M, Match1_3, Match2_3, Matches_3, Prefix_len_3, S1, S2, Transpositions_4} = Fun_8(I_9, Jaro, K_4, Len1, Len2, Limit, M, Match1_3, Match2_3, Matches_3, Prefix_len, S1, S2, Transpositions_4),
        (Jaro + mochi_safe_mul(mochi_safe_mul(0.1, float(Prefix_len_3)), (1.0 - Jaro)))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(jaro_winkler("hello", "world"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
