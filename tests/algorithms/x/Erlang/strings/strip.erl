#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, contains/2, substring/3, strip_chars/2, strip/1, test_strip/0, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

contains(Chars, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, Chars, I) ->
    case (I < erlang:length(Chars)) of
        true ->
            case (string:substr(Chars, I + 1, 1) == Ch) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, Chars, I_2);
        _ -> {Ch, Chars, I}
    end
end,
{Ch, Chars, I_2} = Fun(Ch, Chars, I),
        false
    catch {return, RetCatch} -> RetCatch end.

substring(S, Start, End) ->
    try
        Res = "",
        I_3 = Start,
        Fun_2 = fun Fun_2_loop(End, I_3, Res, S, Start) ->
    case (I_3 < End) of
        true ->
            Res_2 = (Res ++ string:substr(S, I_3 + 1, 1)),
            I_4 = (I_3 + 1),
            Fun_2_loop(End, I_4, Res_2, S, Start);
        _ -> {End, I_3, Res, S, Start}
    end
end,
{End, I_4, Res_2, S, Start} = Fun_2(End, I_3, Res, S, Start),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

strip_chars(User_string, Characters) ->
    try
        Start_2 = 0,
        End_2 = erlang:length(User_string),
        Fun_3 = fun Fun_3_loop(Characters, End_2, Start_2, User_string) ->
    case ((Start_2 < End_2) andalso (string:str(Characters, string:substr(User_string, Start_2 + 1, 1)) =/= 0)) of
        true ->
            Start_3 = (Start_2 + 1),
            Fun_3_loop(Characters, End_2, Start_3, User_string);
        _ -> {Characters, End_2, Start_2, User_string}
    end
end,
{Characters, End_2, Start_3, User_string} = Fun_3(Characters, End_2, Start_2, User_string),
        Fun_4 = fun Fun_4_loop(Characters, End_2, Start_3, User_string) ->
    case ((End_2 > Start_3) andalso (string:str(Characters, string:substr(User_string, (End_2 - 1) + 1, 1)) =/= 0)) of
        true ->
            End_3 = (End_2 - 1),
            Fun_4_loop(Characters, End_3, Start_3, User_string);
        _ -> {Characters, End_2, Start_3, User_string}
    end
end,
{Characters, End_3, Start_3, User_string} = Fun_4(Characters, End_2, Start_3, User_string),
        string:substr(User_string, Start_3 + 1, (End_3 - Start_3))
    catch {return, RetCatch} -> RetCatch end.

strip(User_string_2) ->
    try
        strip_chars(User_string_2, " \t\n\r")
    catch {return, RetCatch} -> RetCatch end.

test_strip() ->
    try
        case (strip("   hello   ") /= "hello") of
        true -> erlang:error({panic, "test1 failed"});
        _ -> ok
    end,
        case (strip_chars("...world...", ".") /= "world") of
        true -> erlang:error({panic, "test2 failed"});
        _ -> ok
    end,
        case (strip_chars("123hello123", "123") /= "hello") of
        true -> erlang:error({panic, "test3 failed"});
        _ -> ok
    end,
        case (strip("") /= "") of
        true -> erlang:error({panic, "test4 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_strip(),
        io:format("~ts~n", [mochi_repr(strip("   hello   "))]),
        io:format("~ts~n", [mochi_repr(strip_chars("...world...", "."))]),
        io:format("~ts~n", [mochi_repr(strip_chars("123hello123", "123"))]),
        io:format("~ts~n", [mochi_repr(strip(""))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
