#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, validate_initial_digits/1, luhn_validation/1, is_digit_string/1, validate_credit_card_number/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

validate_initial_digits(Cc) ->
    try
        ((((((string:substr(Cc, 0 + 1, (2 - 0)) == "34") orelse (string:substr(Cc, 0 + 1, (2 - 0)) == "35")) orelse (string:substr(Cc, 0 + 1, (2 - 0)) == "37")) orelse (string:substr(Cc, 0 + 1, (1 - 0)) == "4")) orelse (string:substr(Cc, 0 + 1, (1 - 0)) == "5")) orelse (string:substr(Cc, 0 + 1, (1 - 0)) == "6"))
    catch {return, RetCatch} -> RetCatch end.

luhn_validation(Cc_2) ->
    try
        Sum = 0,
        Double_digit = false,
        I = (erlang:length(Cc_2) - 1),
        Fun = fun Fun_loop(Cc_2, Double_digit, I, Sum) ->
    case (I >= 0) of
        true ->
            N = mochi_to_int(string:substr(Cc_2, I + 1, ((I + 1) - I))),
            case Double_digit of
        true -> N_2 = (N * 2),
            case (N_2 > 9) of
        true -> N_3 = (N_2 - 9),
            N_4 = N_3;
        _ -> N_4 = N_2
    end,
            N_5 = N_4;
        _ -> N_5 = N
    end,
            Sum_2 = (Sum + N_5),
            Double_digit_2 = mochi_not(Double_digit),
            I_2 = (I - 1),
            Fun_loop(Cc_2, Double_digit_2, I_2, Sum_2);
        _ -> {Cc_2, Double_digit, I, Sum}
    end
end,
{Cc_2, Double_digit_2, I_2, Sum_2} = Fun(Cc_2, Double_digit, I, Sum),
        (mochi_mod(Sum_2, 10) == 0)
    catch {return, RetCatch} -> RetCatch end.

is_digit_string(S) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, S) ->
    case (I_3 < erlang:length(S)) of
        true ->
            C = string:substr(S, I_3 + 1, ((I_3 + 1) - I_3)),
            case ((C < "0") orelse (C > "9")) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, S);
        _ -> {I_3, S}
    end
end,
{I_4, S} = Fun_2(I_3, S),
        true
    catch {return, RetCatch} -> RetCatch end.

validate_credit_card_number(Cc_3) ->
    try
        Error_message = (Cc_3 ++ " is an invalid credit card number because"),
        case mochi_not(is_digit_string(Cc_3)) of
        true -> io:format("~ts~n", [mochi_repr((Error_message ++ " it has nonnumerical characters."))]),
            throw({return, false});
        _ -> ok
    end,
        case mochi_not(((erlang:length(Cc_3) >= 13) andalso (erlang:length(Cc_3) =< 16))) of
        true -> io:format("~ts~n", [mochi_repr((Error_message ++ " of its length."))]),
            throw({return, false});
        _ -> ok
    end,
        case mochi_not(validate_initial_digits(Cc_3)) of
        true -> io:format("~ts~n", [mochi_repr((Error_message ++ " of its first two digits."))]),
            throw({return, false});
        _ -> ok
    end,
        case mochi_not(luhn_validation(Cc_3)) of
        true -> io:format("~ts~n", [mochi_repr((Error_message ++ " it fails the Luhn check."))]),
            throw({return, false});
        _ -> ok
    end,
        io:format("~ts~n", [mochi_repr((Cc_3 ++ " is a valid credit card number."))]),
        true
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        validate_credit_card_number("4111111111111111"),
        validate_credit_card_number("32323"),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
