#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, split_words/1, is_alnum/1, split_input/1, capitalize/1, to_simple_case/1, to_complex_case/3, to_pascal_case/1, to_camel_case/1, to_snake_case/2, to_kebab_case/2]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

split_words(S) ->
    try
        Words = [],
        Current = "",
        Fun = fun Fun_loop(List, Current, S, Words) ->
    case List of
        [] -> {Current, S, Words};
        [Ch|Ch_rest] ->
            case (Ch == " ") of
        true -> case (Current /= "") of
        true -> Words_2 = lists:append((case Words of nil -> []; _ -> Words end), [Current]),
            Current_2 = "",
            Current_3 = Current_2,
            Words_3 = Words_2;
        _ -> Current_3 = Current,
            Words_3 = Words
    end,
            Current_5 = Current_3,
            Words_4 = Words_3;
        _ -> Current_4 = (Current ++ Ch),
            Current_5 = Current_4,
            Words_4 = Words
    end,
            Fun_loop(Ch_rest, Current_5, S, Words_4);
        _ -> {Current, S, Words}
    end
end,
{Current_5, S, Words_4} = Fun(S, Current, S, Words),
        case (Current_5 /= "") of
        true -> Words_5 = lists:append((case Words_4 of nil -> []; _ -> Words_4 end), [Current_5]),
            Words_6 = Words_5;
        _ -> Words_6 = Words_4
    end,
        Words_6
    catch {return, RetCatch} -> RetCatch end.

is_alnum(C) ->
    try
        ((((string:str("0123456789", C) /= 0) orelse (string:str("abcdefghijklmnopqrstuvwxyz", C) /= 0)) orelse (string:str("ABCDEFGHIJKLMNOPQRSTUVWXYZ", C) /= 0)) orelse (C == " "))
    catch {return, RetCatch} -> RetCatch end.

split_input(Text) ->
    try
        Result = [],
        Current_6 = "",
        Fun_2 = fun Fun_2_loop(List, Current_6, Result, Text) ->
    case List of
        [] -> {Current_6, Result, Text};
        [Ch_2|Ch_2_rest] ->
            case is_alnum(Ch_2) of
        true -> Current_7 = (Current_6 ++ Ch_2),
            Current_10 = Current_7,
            Result_4 = Result;
        _ -> case (Current_6 /= "") of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [split_words(Current_6)]),
            Current_8 = "",
            Current_9 = Current_8,
            Result_3 = Result_2;
        _ -> Current_9 = Current_6,
            Result_3 = Result
    end,
            Current_10 = Current_9,
            Result_4 = Result_3
    end,
            Fun_2_loop(Ch_2_rest, Current_10, Result_4, Text);
        _ -> {Current_6, Result, Text}
    end
end,
{Current_10, Result_4, Text} = Fun_2(Text, Current_6, Result, Text),
        case (Current_10 /= "") of
        true -> Result_5 = lists:append((case Result_4 of nil -> []; _ -> Result_4 end), [split_words(Current_10)]),
            Result_6 = Result_5;
        _ -> Result_6 = Result_4
    end,
        Result_6
    catch {return, RetCatch} -> RetCatch end.

capitalize(Word) ->
    try
        case (erlang:length(Word) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        case (erlang:length(Word) == 1) of
        true -> throw({return, string:to_upper(Word)});
        _ -> ok
    end,
        (string:to_upper(string:substr(Word, 0 + 1, (1 - 0))) ++ string:to_lower(string:substr(Word, 1 + 1, length(Word) - 1)))
    catch {return, RetCatch} -> RetCatch end.

to_simple_case(Text_2) ->
    try
        Parts = split_input(Text_2),
        Res = "",
        Fun_3 = fun Fun_3_loop(List, Parts, Res, Text_2) ->
    case List of
        [] -> {Parts, Res, Text_2};
        [Sub|Sub_rest] ->
            Fun_4 = fun Fun_4_loop(List, Parts, Res, Sub, Text_2) ->
    case List of
        [] -> {Parts, Res, Sub, Text_2};
        [W|W_rest] ->
            Res_2 = (Res ++ capitalize(W)),
            Fun_4_loop(W_rest, Parts, Res_2, Sub, Text_2);
        _ -> {Parts, Res, Sub, Text_2}
    end
end,
{Parts, Res_2, Sub, Text_2} = Fun_4(Sub, Parts, Res, Sub, Text_2),
            Fun_3_loop(Sub_rest, Parts, Res_2, Text_2);
        _ -> {Parts, Res, Text_2}
    end
end,
{Parts, Res_2, Text_2} = Fun_3(Parts, Parts, Res, Text_2),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

to_complex_case(Text_3, Upper_flag, Sep) ->
    try
        Parts_2 = split_input(Text_3),
        Res_3 = "",
        Fun_5 = fun Fun_5_loop(List, Parts_2, Res_3, Sep, Text_3, Upper_flag) ->
    case List of
        [] -> {Parts_2, Res_3, Sep, Text_3, Upper_flag};
        [Sub_2|Sub_2_rest] ->
            First = true,
            Fun_6 = fun Fun_6_loop(List, First, Parts_2, Res_3, Sep, Sub_2, Text_3, Upper_flag) ->
    case List of
        [] -> {First, Parts_2, Res_3, Sep, Sub_2, Text_3, Upper_flag};
        [W_2|W_2_rest] ->
            Word_2 = (case Upper_flag of
    true -> string:to_upper(W_2);
    _ -> string:to_lower(W_2)
end),
            case First of
        true -> Res_4 = (Res_3 ++ Word_2),
            First_2 = false,
            First_3 = First_2,
            Res_6 = Res_4;
        _ -> Res_5 = ((Res_3 ++ Sep) ++ Word_2),
            First_3 = First,
            Res_6 = Res_5
    end,
            Fun_6_loop(W_2_rest, First_3, Parts_2, Res_6, Sep, Sub_2, Text_3, Upper_flag);
        _ -> {First, Parts_2, Res_3, Sep, Sub_2, Text_3, Upper_flag}
    end
end,
{First_3, Parts_2, Res_6, Sep, Sub_2, Text_3, Upper_flag} = Fun_6(Sub_2, First, Parts_2, Res_3, Sep, Sub_2, Text_3, Upper_flag),
            Fun_5_loop(Sub_2_rest, Parts_2, Res_6, Sep, Text_3, Upper_flag);
        _ -> {Parts_2, Res_3, Sep, Text_3, Upper_flag}
    end
end,
{Parts_2, Res_6, Sep, Text_3, Upper_flag} = Fun_5(Parts_2, Parts_2, Res_3, Sep, Text_3, Upper_flag),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

to_pascal_case(Text_4) ->
    try
        to_simple_case(Text_4)
    catch {return, RetCatch} -> RetCatch end.

to_camel_case(Text_5) ->
    try
        S_2 = to_simple_case(Text_5),
        case (erlang:length(S_2) == 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        (string:to_lower(string:substr(S_2, 0 + 1, (1 - 0))) ++ string:substr(S_2, 1 + 1, length(S_2) - 1))
    catch {return, RetCatch} -> RetCatch end.

to_snake_case(Text_6, Upper_flag_2) ->
    try
        to_complex_case(Text_6, Upper_flag_2, "_")
    catch {return, RetCatch} -> RetCatch end.

to_kebab_case(Text_7, Upper_flag_3) ->
    try
        to_complex_case(Text_7, Upper_flag_3, "-")
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(to_pascal_case("one two 31235three4four"))]),
    io:format("~ts~n", [mochi_repr(to_camel_case("one two 31235three4four"))]),
    io:format("~ts~n", [mochi_repr(to_snake_case("one two 31235three4four", true))]),
    io:format("~ts~n", [mochi_repr(to_snake_case("one two 31235three4four", false))]),
    io:format("~ts~n", [mochi_repr(to_kebab_case("one two 31235three4four", true))]),
    io:format("~ts~n", [mochi_repr(to_kebab_case("one two 31235three4four", false))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
