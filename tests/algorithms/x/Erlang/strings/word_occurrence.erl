#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, word_occurrence/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

word_occurrence(Sentence) ->
    try
        Occurrence = #{},
        Word = "",
        I = 0,
        Fun = fun Fun_loop(I, Occurrence, Sentence, Word) ->
    case (I < erlang:length(Sentence)) of
        true ->
            Ch = string:substr(Sentence, I + 1, ((I + 1) - I)),
            case (Ch == " ") of
        true -> case (Word /= "") of
        true -> case maps:is_key(Word, Occurrence) of
        true -> Occurrence_2 = maps:put(Word, (maps:get(Word, Occurrence, nil) + 1), Occurrence),
            Occurrence_4 = Occurrence_2;
        _ -> Occurrence_3 = maps:put(Word, 1, Occurrence),
            Occurrence_4 = Occurrence_3
    end,
            Word_2 = "",
            Occurrence_5 = Occurrence_4,
            Word_3 = Word_2;
        _ -> Occurrence_5 = Occurrence,
            Word_3 = Word
    end,
            Occurrence_6 = Occurrence_5,
            Word_5 = Word_3;
        _ -> Word_4 = (Word ++ Ch),
            Occurrence_6 = Occurrence,
            Word_5 = Word_4
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Occurrence_6, Sentence, Word_5);
        _ -> {I, Occurrence, Sentence, Word}
    end
end,
{I_2, Occurrence_6, Sentence, Word_5} = Fun(I, Occurrence, Sentence, Word),
        case (Word_5 /= "") of
        true -> case mochi_member(Word_5, Occurrence_6) of
        true -> Occurrence_7 = maps:put(Word_5, (maps:get(Word_5, Occurrence_6, nil) + 1), Occurrence_6),
            Occurrence_9 = Occurrence_7;
        _ -> Occurrence_8 = maps:put(Word_5, 1, Occurrence_6),
            Occurrence_9 = Occurrence_8
    end,
            Occurrence_10 = Occurrence_9;
        _ -> Occurrence_10 = Occurrence_6
    end,
        Occurrence_10
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Result = word_occurrence("INPUT STRING"),
        Fun_2 = fun Fun_2_loop(List, Result) ->
    case List of
        [] -> {Result};
        [W|W_rest] ->
            io:format("~ts~n", [mochi_repr(((W ++ ": ") ++ mochi_str(maps:get(W, Result, nil))))]),
            Fun_2_loop(W_rest, Result);
        _ -> {Result}
    end
end,
{Result} = Fun_2(maps:keys(Result), Result),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
