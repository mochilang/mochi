#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, damerau_levenshtein_distance/2]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

damerau_levenshtein_distance(First_string, Second_string) ->
    try
        Len1 = erlang:length(First_string),
        Len2 = erlang:length(Second_string),
        Dp_matrix = [],
        Fun = fun Fun_loop(List, Dp_matrix, First_string, Len1, Len2, Second_string) ->
    case List of
        [] -> {Dp_matrix, First_string, Len1, Len2, Second_string};
        [_|__rest] ->
            Row = [],
            Fun_2 = fun Fun_2_loop(List, Dp_matrix, First_string, Len1, Len2, Row, Second_string) ->
    case List of
        [] -> {Dp_matrix, First_string, Len1, Len2, Row, Second_string};
        [_2|_2_rest] ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            Fun_2_loop(_2_rest, Dp_matrix, First_string, Len1, Len2, Row_2, Second_string);
        _ -> {Dp_matrix, First_string, Len1, Len2, Row, Second_string}
    end
end,
{Dp_matrix, First_string, Len1, Len2, Row_2, Second_string} = Fun_2(lists:seq(0, ((Len2 + 1)) - 1), Dp_matrix, First_string, Len1, Len2, Row, Second_string),
            Dp_matrix_2 = lists:append((case Dp_matrix of nil -> []; _ -> Dp_matrix end), [Row_2]),
            Fun_loop(__rest, Dp_matrix_2, First_string, Len1, Len2, Second_string);
        _ -> {Dp_matrix, First_string, Len1, Len2, Second_string}
    end
end,
{Dp_matrix_2, First_string, Len1, Len2, Second_string} = Fun(lists:seq(0, ((Len1 + 1)) - 1), Dp_matrix, First_string, Len1, Len2, Second_string),
        Fun_3 = fun Fun_3_loop(List, Dp_matrix_2, First_string, Len1, Len2, Second_string) ->
    case List of
        [] -> {Dp_matrix_2, First_string, Len1, Len2, Second_string};
        [I|I_rest] ->
            Row_3 = (case erlang:is_map(Dp_matrix_2) of true -> maps:get(I, Dp_matrix_2, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Dp_matrix_2) + I + 1, Dp_matrix_2); _ -> mochi_nth(I + 1, Dp_matrix_2) end end),
            Row_4 = lists:sublist(Row_3, 0) ++ [I] ++ lists:nthtail(0 + 1, Row_3),
            Dp_matrix_3 = lists:sublist(Dp_matrix_2, I) ++ [Row_4] ++ lists:nthtail(I + 1, Dp_matrix_2),
            Fun_3_loop(I_rest, Dp_matrix_3, First_string, Len1, Len2, Second_string);
        _ -> {Dp_matrix_2, First_string, Len1, Len2, Second_string}
    end
end,
{Dp_matrix_3, First_string, Len1, Len2, Second_string} = Fun_3(lists:seq(0, ((Len1 + 1)) - 1), Dp_matrix_2, First_string, Len1, Len2, Second_string),
        First_row = (case erlang:is_map(Dp_matrix_3) of true -> maps:get(0, Dp_matrix_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Dp_matrix_3) + 0 + 1, Dp_matrix_3); _ -> mochi_nth(0 + 1, Dp_matrix_3) end end),
        Fun_4 = fun Fun_4_loop(List, Dp_matrix_3, First_row, First_string, Len1, Len2, Second_string) ->
    case List of
        [] -> {Dp_matrix_3, First_row, First_string, Len1, Len2, Second_string};
        [J|J_rest] ->
            First_row_2 = lists:sublist(First_row, J) ++ [J] ++ lists:nthtail(J + 1, First_row),
            Fun_4_loop(J_rest, Dp_matrix_3, First_row_2, First_string, Len1, Len2, Second_string);
        _ -> {Dp_matrix_3, First_row, First_string, Len1, Len2, Second_string}
    end
end,
{Dp_matrix_3, First_row_2, First_string, Len1, Len2, Second_string} = Fun_4(lists:seq(0, ((Len2 + 1)) - 1), Dp_matrix_3, First_row, First_string, Len1, Len2, Second_string),
        Dp_matrix_4 = lists:sublist(Dp_matrix_3, 0) ++ [First_row_2] ++ lists:nthtail(0 + 1, Dp_matrix_3),
        Fun_5 = fun Fun_5_loop(List, Dp_matrix_4, First_row_2, First_string, Len1, Len2, Second_string) ->
    case List of
        [] -> {Dp_matrix_4, First_row_2, First_string, Len1, Len2, Second_string};
        [I_2|I_2_rest] ->
            Row_5 = (case erlang:is_map(Dp_matrix_4) of true -> maps:get(I_2, Dp_matrix_4, nil); _ -> case I_2 < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + I_2 + 1, Dp_matrix_4); _ -> mochi_nth(I_2 + 1, Dp_matrix_4) end end),
            First_char = string:substr(First_string, (I_2 - 1) + 1, (I_2 - (I_2 - 1))),
            Fun_6 = fun Fun_6_loop(List, Dp_matrix_4, First_char, First_row_2, First_string, I_2, Len1, Len2, Row_5, Second_string) ->
    case List of
        [] -> {Dp_matrix_4, First_char, First_row_2, First_string, I_2, Len1, Len2, Row_5, Second_string};
        [J_2|J_2_rest] ->
            Second_char = string:substr(Second_string, (J_2 - 1) + 1, (J_2 - (J_2 - 1))),
            Cost = (case (First_char == Second_char) of
    true -> 0;
    _ -> 1
end),
            Value = ((case erlang:is_map((case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 1), Dp_matrix_4, nil); _ -> case (I_2 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 1) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 1) + 1, Dp_matrix_4) end end)) of true -> maps:get(J_2, (case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 1), Dp_matrix_4, nil); _ -> case (I_2 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 1) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 1) + 1, Dp_matrix_4) end end), nil); _ -> case J_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 1), Dp_matrix_4, nil); _ -> case (I_2 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 1) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 1) + 1, Dp_matrix_4) end end)) + J_2 + 1, (case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 1), Dp_matrix_4, nil); _ -> case (I_2 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 1) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 1) + 1, Dp_matrix_4) end end)); _ -> mochi_nth(J_2 + 1, (case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 1), Dp_matrix_4, nil); _ -> case (I_2 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 1) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 1) + 1, Dp_matrix_4) end end)) end end) + 1),
            Insertion = ((case erlang:is_map(Row_5) of true -> maps:get((J_2 - 1), Row_5, nil); _ -> case (J_2 - 1) < 0 of true -> mochi_nth(erlang:length(Row_5) + (J_2 - 1) + 1, Row_5); _ -> mochi_nth((J_2 - 1) + 1, Row_5) end end) + 1),
            case (Insertion < Value) of
        true -> Value_2 = Insertion,
            Value_3 = Value_2;
        _ -> Value_3 = Value
    end,
            Substitution = ((case erlang:is_map((case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 1), Dp_matrix_4, nil); _ -> case (I_2 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 1) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 1) + 1, Dp_matrix_4) end end)) of true -> maps:get((J_2 - 1), (case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 1), Dp_matrix_4, nil); _ -> case (I_2 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 1) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 1) + 1, Dp_matrix_4) end end), nil); _ -> case (J_2 - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 1), Dp_matrix_4, nil); _ -> case (I_2 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 1) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 1) + 1, Dp_matrix_4) end end)) + (J_2 - 1) + 1, (case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 1), Dp_matrix_4, nil); _ -> case (I_2 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 1) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 1) + 1, Dp_matrix_4) end end)); _ -> mochi_nth((J_2 - 1) + 1, (case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 1), Dp_matrix_4, nil); _ -> case (I_2 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 1) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 1) + 1, Dp_matrix_4) end end)) end end) + Cost),
            case (Substitution < Value_3) of
        true -> Value_4 = Substitution,
            Value_5 = Value_4;
        _ -> Value_5 = Value_3
    end,
            Row_6 = lists:sublist(Row_5, J_2) ++ [Value_5] ++ lists:nthtail(J_2 + 1, Row_5),
            case ((((I_2 > 1) andalso (J_2 > 1)) andalso (string:substr(First_string, (I_2 - 1) + 1, (I_2 - (I_2 - 1))) == string:substr(Second_string, (J_2 - 2) + 1, ((J_2 - 1) - (J_2 - 2))))) andalso (string:substr(First_string, (I_2 - 2) + 1, ((I_2 - 1) - (I_2 - 2))) == string:substr(Second_string, (J_2 - 1) + 1, (J_2 - (J_2 - 1))))) of
        true -> Transposition = ((case erlang:is_map((case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 2), Dp_matrix_4, nil); _ -> case (I_2 - 2) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 2) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 2) + 1, Dp_matrix_4) end end)) of true -> maps:get((J_2 - 2), (case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 2), Dp_matrix_4, nil); _ -> case (I_2 - 2) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 2) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 2) + 1, Dp_matrix_4) end end), nil); _ -> case (J_2 - 2) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 2), Dp_matrix_4, nil); _ -> case (I_2 - 2) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 2) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 2) + 1, Dp_matrix_4) end end)) + (J_2 - 2) + 1, (case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 2), Dp_matrix_4, nil); _ -> case (I_2 - 2) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 2) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 2) + 1, Dp_matrix_4) end end)); _ -> mochi_nth((J_2 - 2) + 1, (case erlang:is_map(Dp_matrix_4) of true -> maps:get((I_2 - 2), Dp_matrix_4, nil); _ -> case (I_2 - 2) < 0 of true -> mochi_nth(erlang:length(Dp_matrix_4) + (I_2 - 2) + 1, Dp_matrix_4); _ -> mochi_nth((I_2 - 2) + 1, Dp_matrix_4) end end)) end end) + Cost),
            case (Transposition < (case erlang:is_map(Row_6) of true -> maps:get(J_2, Row_6, nil); _ -> case J_2 < 0 of true -> mochi_nth(erlang:length(Row_6) + J_2 + 1, Row_6); _ -> mochi_nth(J_2 + 1, Row_6) end end)) of
        true -> Row_7 = lists:sublist(Row_6, J_2) ++ [Transposition] ++ lists:nthtail(J_2 + 1, Row_6),
            Row_8 = Row_7;
        _ -> Row_8 = Row_6
    end,
            Row_9 = Row_8,
            Transposition_2 = Transposition;
        _ -> Row_9 = Row_6,
            Transposition_2 = nil
    end,
            Fun_6_loop(J_2_rest, Dp_matrix_4, First_char, First_row_2, First_string, I_2, Len1, Len2, Row_9, Second_string);
        _ -> {Dp_matrix_4, First_char, First_row_2, First_string, I_2, Len1, Len2, Row_5, Second_string}
    end
end,
{Dp_matrix_4, First_char, First_row_2, First_string, I_2, Len1, Len2, Row_9, Second_string} = Fun_6(lists:seq(1, ((Len2 + 1)) - 1), Dp_matrix_4, First_char, First_row_2, First_string, I_2, Len1, Len2, Row_5, Second_string),
            Dp_matrix_5 = lists:sublist(Dp_matrix_4, I_2) ++ [Row_9] ++ lists:nthtail(I_2 + 1, Dp_matrix_4),
            Fun_5_loop(I_2_rest, Dp_matrix_5, First_row_2, First_string, Len1, Len2, Second_string);
        _ -> {Dp_matrix_4, First_row_2, First_string, Len1, Len2, Second_string}
    end
end,
{Dp_matrix_5, First_row_2, First_string, Len1, Len2, Second_string} = Fun_5(lists:seq(1, ((Len1 + 1)) - 1), Dp_matrix_4, First_row_2, First_string, Len1, Len2, Second_string),
        (case erlang:is_map((case erlang:is_map(Dp_matrix_5) of true -> maps:get(Len1, Dp_matrix_5, nil); _ -> case Len1 < 0 of true -> mochi_nth(erlang:length(Dp_matrix_5) + Len1 + 1, Dp_matrix_5); _ -> mochi_nth(Len1 + 1, Dp_matrix_5) end end)) of true -> maps:get(Len2, (case erlang:is_map(Dp_matrix_5) of true -> maps:get(Len1, Dp_matrix_5, nil); _ -> case Len1 < 0 of true -> mochi_nth(erlang:length(Dp_matrix_5) + Len1 + 1, Dp_matrix_5); _ -> mochi_nth(Len1 + 1, Dp_matrix_5) end end), nil); _ -> case Len2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_matrix_5) of true -> maps:get(Len1, Dp_matrix_5, nil); _ -> case Len1 < 0 of true -> mochi_nth(erlang:length(Dp_matrix_5) + Len1 + 1, Dp_matrix_5); _ -> mochi_nth(Len1 + 1, Dp_matrix_5) end end)) + Len2 + 1, (case erlang:is_map(Dp_matrix_5) of true -> maps:get(Len1, Dp_matrix_5, nil); _ -> case Len1 < 0 of true -> mochi_nth(erlang:length(Dp_matrix_5) + Len1 + 1, Dp_matrix_5); _ -> mochi_nth(Len1 + 1, Dp_matrix_5) end end)); _ -> mochi_nth(Len2 + 1, (case erlang:is_map(Dp_matrix_5) of true -> maps:get(Len1, Dp_matrix_5, nil); _ -> case Len1 < 0 of true -> mochi_nth(erlang:length(Dp_matrix_5) + Len1 + 1, Dp_matrix_5); _ -> mochi_nth(Len1 + 1, Dp_matrix_5) end end)) end end)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(damerau_levenshtein_distance("cat", "cut"))]),
    io:format("~ts~n", [mochi_str(damerau_levenshtein_distance("kitten", "sitting"))]),
    io:format("~ts~n", [mochi_str(damerau_levenshtein_distance("hello", "world"))]),
    io:format("~ts~n", [mochi_str(damerau_levenshtein_distance("book", "back"))]),
    io:format("~ts~n", [mochi_str(damerau_levenshtein_distance("container", "containment"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
