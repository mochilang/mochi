#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, naive_string_search/2]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

naive_string_search(Text, Pattern) ->
    try
        Pat_len = erlang:length(Pattern),
        Positions = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Pat_len, Pattern, Positions, Text) ->
    case (I =< (erlang:length(Text) - Pat_len)) of
        true ->
            try
                Match_found = true,
                J = 0,
                Fun = fun Fun_loop(I, J, Match_found, Pat_len, Pattern, Positions, Text) ->
    case (J < Pat_len) of
        true ->
            try
                case (string:substr(Text, (I + J) + 1, 1) /= string:substr(Pattern, J + 1, 1)) of
        true -> Match_found_2 = false,
            throw({break, I, J, Match_found_2, Pat_len, Pattern, Positions, Text}),
            Match_found_3 = Match_found_2;
        _ -> Match_found_3 = Match_found
    end,
                J_2 = (J + 1),
                Fun_loop(I, J_2, Match_found_3, Pat_len, Pattern, Positions, Text)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {I, J, Match_found, Pat_len, Pattern, Positions, Text}
    end
end,
{I, J_2, Match_found_3, Pat_len, Pattern, Positions, Text} = Fun(I, J, Match_found, Pat_len, Pattern, Positions, Text),
                case (Match_found_3 /= nil) of
        true -> Positions_2 = lists:append((case Positions of nil -> []; _ -> Positions end), [I]),
            Positions_3 = Positions_2;
        _ -> Positions_3 = Positions
    end,
                I_2 = (I + 1),
                Fun_2_loop(I_2, Pat_len, Pattern, Positions_3, Text)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_2_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {I, Pat_len, Pattern, Positions, Text}
    end
end,
{I_2, Pat_len, Pattern, Positions_3, Text} = Fun_2(I, Pat_len, Pattern, Positions, Text),
        Positions_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(naive_string_search("ABAAABCDBBABCDDEBCABC", "ABC"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
