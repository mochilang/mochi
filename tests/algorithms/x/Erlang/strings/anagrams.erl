#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, split/2, insertion_sort/1, sort_chars/1, unique_sorted/1, build_map/1, anagram/1, main/0]).

% Generated by Mochi transpiler v0.10.67 (c7612b9c83)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_read_file(Path) ->
    case file:read_file(Path) of
        {ok, Bin} -> binary_to_list(Bin);
        _ -> ""
    end.

split(S, Sep) ->
    try
        Res = [],
        Current = "",
        I = 0,
        Fun = fun Fun_loop(Current, I, Res, S, Sep) ->
    case (I < erlang:length(S)) of
        true ->
            Ch = string:substr(S, I + 1, ((I + 1) - I)),
            Res_3 = (case (Ch == Sep) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Current]),
            Current_2 = "",
            Current_4 = Current_2,
            Res_2;
        _ -> Current_3 = (Current ++ Ch),
            Current_4 = Current_3,
            Res
    end),
            I_2 = (I + 1),
            Fun_loop(Current_4, I_2, Res_3, S, Sep);
        _ -> {Current, I, Res, S, Sep}
    end
end,
{Current_4, I_2, Res_3, S, Sep} = Fun(Current, I, Res, S, Sep),
        Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Current_4]),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

insertion_sort(Arr) ->
    try
        A = Arr,
        I_3 = 1,
        Fun_3 = fun Fun_3_loop(A, Arr, I_3) ->
    case (I_3 < erlang:length(A)) of
        true ->
            Key = (case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end),
            J = (I_3 - 1),
            Fun_2 = fun Fun_2_loop(A, Arr, I_3, J, Key) ->
    case ((J >= 0) andalso ((case erlang:is_map(A) of true -> maps:get(J, A, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(A) + J + 1, A); _ -> mochi_nth(J + 1, A) end end) > Key)) of
        true ->
            A_2 = lists:sublist(A, (J + 1)) ++ [(case erlang:is_map(A) of true -> maps:get(J, A, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(A) + J + 1, A); _ -> mochi_nth(J + 1, A) end end)] ++ lists:nthtail((J + 1) + 1, A),
            J_2 = (J - 1),
            Fun_2_loop(A_2, Arr, I_3, J_2, Key);
        _ -> {A, Arr, I_3, J, Key}
    end
end,
{A_2, Arr, I_3, J_2, Key} = Fun_2(A, Arr, I_3, J, Key),
            A_3 = lists:sublist(A_2, (J_2 + 1)) ++ [Key] ++ lists:nthtail((J_2 + 1) + 1, A_2),
            I_4 = (I_3 + 1),
            Fun_3_loop(A_3, Arr, I_4);
        _ -> {A, Arr, I_3}
    end
end,
{A_3, Arr, I_4} = Fun_3(A, Arr, I_3),
        A_3
    catch {return, RetCatch} -> RetCatch end.

sort_chars(Word) ->
    try
        Chars = [],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Chars, I_5, Word) ->
    case (I_5 < erlang:length(Word)) of
        true ->
            Chars_2 = lists:append((case Chars of nil -> []; _ -> Chars end), [string:substr(Word, I_5 + 1, ((I_5 + 1) - I_5))]),
            I_6 = (I_5 + 1),
            Fun_4_loop(Chars_2, I_6, Word);
        _ -> {Chars, I_5, Word}
    end
end,
{Chars_2, I_6, Word} = Fun_4(Chars, I_5, Word),
        Chars_3 = insertion_sort(Chars_2),
        Res_5 = "",
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(Chars_3, I_7, Res_5, Word) ->
    case (I_7 < erlang:length(Chars_3)) of
        true ->
            Res_6 = (Res_5 ++ (case erlang:is_map(Chars_3) of true -> maps:get(I_7, Chars_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Chars_3) + I_7 + 1, Chars_3); _ -> mochi_nth(I_7 + 1, Chars_3) end end)),
            I_8 = (I_7 + 1),
            Fun_5_loop(Chars_3, I_8, Res_6, Word);
        _ -> {Chars_3, I_7, Res_5, Word}
    end
end,
{Chars_3, I_8, Res_6, Word} = Fun_5(Chars_3, I_7, Res_5, Word),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

unique_sorted(Words) ->
    try
        Seen = #{},
        Res_7 = [],
        Fun_6 = fun Fun_6_loop(List, Res_7, Seen, Words) ->
    case List of
        [] -> {Res_7, Seen, Words};
        [W|W_rest] ->
            Seen_3 = (case ((W /= "") andalso not(maps:is_key(W, Seen))) of
        true -> Res_8 = lists:append((case Res_7 of nil -> []; _ -> Res_7 end), [W]),
            Seen_2 = maps:put(W, true, Seen),
            Res_9 = Res_8,
            Seen_2;
        _ -> Res_9 = Res_7,
            Seen
    end),
            Fun_6_loop(W_rest, Res_9, Seen_3, Words);
        _ -> {Res_7, Seen, Words}
    end
end,
{Res_9, Seen_3, Words} = Fun_6(Words, Res_7, Seen, Words),
        Res_10 = insertion_sort(Res_9),
        Res_10
    catch {return, RetCatch} -> RetCatch end.

build_map(Words_2) ->
    try
        Fun_7 = fun Fun_7_loop(List, Words_2) ->
    case List of
        [] -> {Words_2};
        [W_2|W_2_rest] ->
            Sig = sort_chars(W_2),
            Arr_2 = [],
            Arr_4 = (case maps:is_key(Sig, erlang:get('word_by_signature')) of
        true -> Arr_3 = maps:get(Sig, erlang:get('word_by_signature'), nil),
            Arr_3;
        _ -> Arr_2
    end),
            Arr_5 = lists:append((case Arr_4 of nil -> []; _ -> Arr_4 end), [W_2]),
            Word_by_signature_tmp = lists:sublist(erlang:get('word_by_signature'), Sig) ++ [Arr_5] ++ lists:nthtail(Sig + 1, erlang:get('word_by_signature')),
            erlang:put('word_by_signature', Word_by_signature_tmp),
            Fun_7_loop(W_2_rest, Words_2);
        _ -> {Words_2}
    end
end,
{Words_2} = Fun_7(Words_2, Words_2),
        nil
    catch {return, RetCatch} -> RetCatch end.

anagram(My_word) ->
    try
        Sig_2 = sort_chars(My_word),
        case maps:is_key(Sig_2, erlang:get('word_by_signature')) of
        true -> throw({return, maps:get(Sig_2, erlang:get('word_by_signature'), nil)});
        _ -> ok
    end,
        []
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Text = mochi_read_file("words.txt"),
        Lines = string:tokens(Text, "\n"),
        Words_3 = unique_sorted(Lines),
        build_map(Words_3),
        Fun_8 = fun Fun_8_loop(List, Lines, Text, Words_3) ->
    case List of
        [] -> {Lines, Text, Words_3};
        [W_3|W_3_rest] ->
            Anas = anagram(W_3),
            Line_5 = (case (erlang:length(Anas) > 1) of
        true -> Line = (W_3 ++ ":"),
            I_9 = 0,
            Fun_9 = fun Fun_9_loop(Anas, I_9, Line, Lines, Text, W_3, Words_3) ->
    case (I_9 < erlang:length(Anas)) of
        true ->
            Line_3 = (case (I_9 > 0) of
        true -> Line_2 = (Line ++ ","),
            Line_2;
        _ -> Line
    end),
            Line_4 = (Line_3 ++ (case erlang:is_map(Anas) of true -> maps:get(I_9, Anas, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Anas) + I_9 + 1, Anas); _ -> mochi_nth(I_9 + 1, Anas) end end)),
            I_10 = (I_9 + 1),
            Fun_9_loop(Anas, I_10, Line_4, Lines, Text, W_3, Words_3);
        _ -> {Anas, I_9, Line, Lines, Text, W_3, Words_3}
    end
end,
{Anas, I_10, Line_4, Lines, Text, W_3, Words_3} = Fun_9(Anas, I_9, Line, Lines, Text, W_3, Words_3),
            io:format("~ts~n", [mochi_repr(Line_4)]),
            Fun_10 = Fun_9,
            I_11 = I_10,
            Line_4;
        _ -> Fun_10 = nil,
            I_11 = nil,
            nil
    end),
            Fun_8_loop(W_3_rest, Lines, Text, Words_3);
        _ -> {Lines, Text, Words_3}
    end
end,
{Lines, Text, Words_3} = Fun_8(Words_3, Lines, Text, Words_3),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('word_by_signature', #{}),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
