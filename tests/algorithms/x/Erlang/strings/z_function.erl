#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, z_function/1, go_next/3, find_pattern/2, list_eq_int/2, test_z_function/0, test_find_pattern/0, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

z_function(S) ->
    try
        Z = [],
        I = 0,
        Fun = fun Fun_loop(I, S, Z) ->
    case (I < erlang:length(S)) of
        true ->
            Z_2 = lists:append((case Z of nil -> []; _ -> Z end), [0]),
            I_2 = (I + 1),
            Fun_loop(I_2, S, Z_2);
        _ -> {I, S, Z}
    end
end,
{I_2, S, Z_2} = Fun(I, S, Z),
        L = 0,
        R = 0,
        I_3 = 1,
        Fun_3 = fun Fun_3_loop(I_3, L, R, S, Z_2) ->
    case (I_3 < erlang:length(S)) of
        true ->
            case (I_3 =< R) of
        true -> Min_edge = ((R - I_3) + 1),
            Zi = (case erlang:is_map(Z_2) of true -> maps:get((I_3 - L), Z_2, nil); _ -> case (I_3 - L) < 0 of true -> mochi_nth(erlang:length(Z_2) + (I_3 - L) + 1, Z_2); _ -> mochi_nth((I_3 - L) + 1, Z_2) end end),
            case (Zi < Min_edge) of
        true -> Min_edge_2 = Zi,
            Min_edge_3 = Min_edge_2;
        _ -> Min_edge_3 = Min_edge
    end,
            Z_3 = lists:sublist(Z_2, I_3) ++ [Min_edge_3] ++ lists:nthtail(I_3 + 1, Z_2),
            Min_edge_4 = Min_edge_3,
            Z_4 = Z_3,
            Zi_2 = Zi;
        _ -> Min_edge_4 = nil,
            Z_4 = Z_2,
            Zi_2 = nil
    end,
            Fun_2 = fun Fun_2_loop(I_3, L, Min_edge_4, R, S, Z_4, Zi_2) ->
    case go_next(I_3, Z_4, S) of
        true ->
            Z_5 = lists:sublist(Z_4, I_3) ++ [((case erlang:is_map(Z_4) of true -> maps:get(I_3, Z_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Z_4) + I_3 + 1, Z_4); _ -> mochi_nth(I_3 + 1, Z_4) end end) + 1)] ++ lists:nthtail(I_3 + 1, Z_4),
            Fun_2_loop(I_3, L, Min_edge_4, R, S, Z_5, Zi_2);
        _ -> {I_3, L, Min_edge_4, R, S, Z_4, Zi_2}
    end
end,
{I_3, L, Min_edge_4, R, S, Z_5, Zi_2} = Fun_2(I_3, L, Min_edge_4, R, S, Z_4, Zi_2),
            case (((I_3 + (case erlang:is_map(Z_5) of true -> maps:get(I_3, Z_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Z_5) + I_3 + 1, Z_5); _ -> mochi_nth(I_3 + 1, Z_5) end end)) - 1) > R) of
        true -> L_2 = I_3,
            R_2 = ((I_3 + (case erlang:is_map(Z_5) of true -> maps:get(I_3, Z_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Z_5) + I_3 + 1, Z_5); _ -> mochi_nth(I_3 + 1, Z_5) end end)) - 1),
            L_3 = L_2,
            R_3 = R_2;
        _ -> L_3 = L,
            R_3 = R
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, L_3, R_3, S, Z_5);
        _ -> {I_3, L, R, S, Z_2}
    end
end,
{I_4, L_3, R_3, S, Z_5} = Fun_3(I_3, L, R, S, Z_2),
        Z_5
    catch {return, RetCatch} -> RetCatch end.

go_next(I_5, Z_6, S_2) ->
    try
        (((I_5 + (case erlang:is_map(Z_6) of true -> maps:get(I_5, Z_6, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Z_6) + I_5 + 1, Z_6); _ -> mochi_nth(I_5 + 1, Z_6) end end)) < erlang:length(S_2)) andalso (string:substr(S_2, (case erlang:is_map(Z_6) of true -> maps:get(I_5, Z_6, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Z_6) + I_5 + 1, Z_6); _ -> mochi_nth(I_5 + 1, Z_6) end end) + 1, 1) == string:substr(S_2, (I_5 + (case erlang:is_map(Z_6) of true -> maps:get(I_5, Z_6, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Z_6) + I_5 + 1, Z_6); _ -> mochi_nth(I_5 + 1, Z_6) end end)) + 1, 1)))
    catch {return, RetCatch} -> RetCatch end.

find_pattern(Pattern, Input_str) ->
    try
        Answer = 0,
        Z_res = z_function((Pattern ++ Input_str)),
        I_6 = 0,
        Fun_4 = fun Fun_4_loop(Answer, I_6, Input_str, Pattern, Z_res) ->
    case (I_6 < erlang:length(Z_res)) of
        true ->
            case ((case erlang:is_map(Z_res) of true -> maps:get(I_6, Z_res, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Z_res) + I_6 + 1, Z_res); _ -> mochi_nth(I_6 + 1, Z_res) end end) >= erlang:length(Pattern)) of
        true -> Answer_2 = (Answer + 1),
            Answer_3 = Answer_2;
        _ -> Answer_3 = Answer
    end,
            I_7 = (I_6 + 1),
            Fun_4_loop(Answer_3, I_7, Input_str, Pattern, Z_res);
        _ -> {Answer, I_6, Input_str, Pattern, Z_res}
    end
end,
{Answer_3, I_7, Input_str, Pattern, Z_res} = Fun_4(Answer, I_6, Input_str, Pattern, Z_res),
        Answer_3
    catch {return, RetCatch} -> RetCatch end.

list_eq_int(A, B) ->
    try
        case (erlang:length(A) /= erlang:length(B)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_8 = 0,
        Fun_5 = fun Fun_5_loop(A, B, I_8) ->
    case (I_8 < erlang:length(A)) of
        true ->
            case ((case erlang:is_map(A) of true -> maps:get(I_8, A, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(A) + I_8 + 1, A); _ -> mochi_nth(I_8 + 1, A) end end) /= (case erlang:is_map(B) of true -> maps:get(I_8, B, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(B) + I_8 + 1, B); _ -> mochi_nth(I_8 + 1, B) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_9 = (I_8 + 1),
            Fun_5_loop(A, B, I_9);
        _ -> {A, B, I_8}
    end
end,
{A, B, I_9} = Fun_5(A, B, I_8),
        true
    catch {return, RetCatch} -> RetCatch end.

test_z_function() ->
    try
        S1 = "abracadabra",
        Expected1 = [0, 0, 0, 1, 0, 1, 0, 4, 0, 0, 1],
        R1 = z_function("abracadabra"),
        case mochi_not(list_eq_int(R1, Expected1)) of
        true -> erlang:error({panic, "z_function abracadabra failed"});
        _ -> ok
    end,
        S2 = "aaaa",
        Expected2 = [0, 3, 2, 1],
        R2 = z_function("aaaa"),
        case mochi_not(list_eq_int(R2, Expected2)) of
        true -> erlang:error({panic, "z_function aaaa failed"});
        _ -> ok
    end,
        S3 = "zxxzxxz",
        Expected3 = [0, 0, 0, 4, 0, 0, 1],
        R3 = z_function("zxxzxxz"),
        case mochi_not(list_eq_int(R3, Expected3)) of
        true -> erlang:error({panic, "z_function zxxzxxz failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

test_find_pattern() ->
    try
        case (find_pattern("abr", "abracadabra") /= 2) of
        true -> erlang:error({panic, "find_pattern abr failed"});
        _ -> ok
    end,
        case (find_pattern("a", "aaaa") /= 4) of
        true -> erlang:error({panic, "find_pattern aaaa failed"});
        _ -> ok
    end,
        case (find_pattern("xz", "zxxzxxz") /= 2) of
        true -> erlang:error({panic, "find_pattern xz failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_z_function(),
        test_find_pattern(),
        R1_2 = z_function("abracadabra"),
        R2_2 = z_function("aaaa"),
        R3_2 = z_function("zxxzxxz"),
        io:format("~ts~n", [mochi_str(R1_2)]),
        io:format("~ts~n", [mochi_str(R2_2)]),
        io:format("~ts~n", [mochi_str(R3_2)]),
        io:format("~ts~n", [mochi_str(find_pattern("abr", "abracadabra"))]),
        io:format("~ts~n", [mochi_str(find_pattern("a", "aaaa"))]),
        io:format("~ts~n", [mochi_str(find_pattern("xz", "zxxzxxz"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
