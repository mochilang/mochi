#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, all_digits/1, indian_phone_validator/1]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

all_digits(S) ->
    try
        case (erlang:length(S) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        I = 0,
        Fun = fun Fun_loop(I, S) ->
    case (I < erlang:length(S)) of
        true ->
            C = string:substr(S, I + 1, 1),
            case ((C < "0") orelse (C > "9")) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, S);
        _ -> {I, S}
    end
end,
{I_2, S} = Fun(I, S),
        true
    catch {return, RetCatch} -> RetCatch end.

indian_phone_validator(Phone) ->
    try
        S_2 = Phone,
        case ((erlang:length(S_2) >= 3) andalso (string:substr(S_2, 0 + 1, (3 - 0)) == "+91")) of
        true -> S_3 = string:substr(S_2, 3 + 1, (erlang:length(S_2) - 3)),
            case (erlang:length(S_3) > 0) of
        true -> C_2 = string:substr(S_3, 0 + 1, 1),
            case ((C_2 == "-") orelse (C_2 == " ")) of
        true -> S_4 = string:substr(S_3, 1 + 1, (erlang:length(S_3) - 1)),
            S_5 = S_4;
        _ -> S_5 = S_3
    end,
            C_3 = C_2,
            S_6 = S_5;
        _ -> C_3 = nil,
            S_6 = S_3
    end,
            C_4 = C_3,
            S_7 = S_6;
        _ -> C_4 = nil,
            S_7 = S_2
    end,
        case ((erlang:length(S_7) > 0) andalso (string:substr(S_7, 0 + 1, 1) == "0")) of
        true -> S_8 = string:substr(S_7, 1 + 1, (erlang:length(S_7) - 1)),
            S_9 = S_8;
        _ -> S_9 = S_7
    end,
        case ((erlang:length(S_9) >= 2) andalso (string:substr(S_9, 0 + 1, (2 - 0)) == "91")) of
        true -> S_10 = string:substr(S_9, 2 + 1, (erlang:length(S_9) - 2)),
            S_11 = S_10;
        _ -> S_11 = S_9
    end,
        case (erlang:length(S_11) /= 10) of
        true -> throw({return, false});
        _ -> ok
    end,
        First = string:substr(S_11, 0 + 1, 1),
        case mochi_not((((First == "7") orelse (First == "8")) orelse (First == "9"))) of
        true -> throw({return, false});
        _ -> ok
    end,
        case mochi_not(all_digits(S_11)) of
        true -> throw({return, false});
        _ -> ok
    end,
        true
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(indian_phone_validator("+91123456789"))]),
    io:format("~ts~n", [mochi_str(indian_phone_validator("+919876543210"))]),
    io:format("~ts~n", [mochi_str(indian_phone_validator("01234567896"))]),
    io:format("~ts~n", [mochi_str(indian_phone_validator("919876543218"))]),
    io:format("~ts~n", [mochi_str(indian_phone_validator("+91-1234567899"))]),
    io:format("~ts~n", [mochi_str(indian_phone_validator("+91-9876543218"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
