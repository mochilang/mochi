#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, join/2, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

join(Separator, Separated) ->
    try
        Joined = "",
        Last_index = (erlang:length(Separated) - 1),
        I = 0,
        Fun = fun Fun_loop(I, Joined, Last_index, Separated, Separator) ->
    case (I < erlang:length(Separated)) of
        true ->
            Joined_2 = (Joined ++ (case erlang:is_map(Separated) of true -> maps:get(I, Separated, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Separated) + I + 1, Separated); _ -> mochi_nth(I + 1, Separated) end end)),
            case (I < Last_index) of
        true -> Joined_3 = (Joined_2 ++ Separator),
            Joined_4 = Joined_3;
        _ -> Joined_4 = Joined_2
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Joined_4, Last_index, Separated, Separator);
        _ -> {I, Joined, Last_index, Separated, Separator}
    end
end,
{I_2, Joined_4, Last_index, Separated, Separator} = Fun(I, Joined, Last_index, Separated, Separator),
        Joined_4
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(join("", ["a", "b", "c", "d"]))]),
        io:format("~ts~n", [mochi_repr(join("#", ["a", "b", "c", "d"]))]),
        io:format("~ts~n", [mochi_repr(join("#", ["a"]))]),
        io:format("~ts~n", [mochi_repr(join(" ", ["You", "are", "amazing!"]))]),
        io:format("~ts~n", [mochi_repr(join(",", ["", "", ""]))]),
        io:format("~ts~n", [mochi_repr(join("-", ["apple", "banana", "cherry"]))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
