#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, create_ngram/2]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

create_ngram(Sentence, Ngram_size) ->
    try
        Res = [],
        Bound = ((erlang:length(Sentence) - Ngram_size) + 1),
        case (Bound =< 0) of
        true -> throw({return, Res});
        _ -> ok
    end,
        I = 0,
        Fun = fun Fun_loop(Bound, I, Ngram_size, Res, Sentence) ->
    case (I < Bound) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [string:substr(Sentence, I + 1, ((I + Ngram_size) - I))]),
            I_2 = (I + 1),
            Fun_loop(Bound, I_2, Ngram_size, Res_2, Sentence);
        _ -> {Bound, I, Ngram_size, Res, Sentence}
    end
end,
{Bound, I_2, Ngram_size, Res_2, Sentence} = Fun(Bound, I, Ngram_size, Res, Sentence),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('example1', "I am a sentence"),
    io:format("~ts~n", [mochi_repr(create_ngram("I am a sentence", 2))]),
    erlang:put('example2', "I am an NLPer"),
    io:format("~ts~n", [mochi_repr(create_ngram("I am an NLPer", 2))]),
    erlang:put('example3', "This is short"),
    io:format("~ts~n", [mochi_repr(create_ngram("This is short", 50))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
