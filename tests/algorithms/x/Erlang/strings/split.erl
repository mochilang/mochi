#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, split_with_sep/2, split/1]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

split_with_sep(S, Sep) ->
    try
        Parts = [],
        Last = 0,
        I = 0,
        Fun = fun Fun_loop(I, Last, Parts, S, Sep) ->
    case (I < erlang:length(S)) of
        true ->
            Ch = string:substr(S, I + 1, ((I + 1) - I)),
            case (Ch == Sep) of
        true -> Parts_2 = lists:append((case Parts of nil -> []; _ -> Parts end), [string:substr(S, Last + 1, (I - Last))]),
            Last_2 = (I + 1),
            Last_3 = Last_2,
            Parts_3 = Parts_2;
        _ -> Last_3 = Last,
            Parts_3 = Parts
    end,
            case ((I + 1) == erlang:length(S)) of
        true -> Parts_4 = lists:append((case Parts_3 of nil -> []; _ -> Parts_3 end), [string:substr(S, Last_3 + 1, ((I + 1) - Last_3))]),
            Parts_5 = Parts_4;
        _ -> Parts_5 = Parts_3
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Last_3, Parts_5, S, Sep);
        _ -> {I, Last, Parts, S, Sep}
    end
end,
{I_2, Last_3, Parts_5, S, Sep} = Fun(I, Last, Parts, S, Sep),
        Parts_5
    catch {return, RetCatch} -> RetCatch end.

split(S_2) ->
    try
        split_with_sep(S_2, " ")
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(split_with_sep("apple#banana#cherry#orange", "#"))]),
    io:format("~ts~n", [mochi_str(split("Hello there"))]),
    io:format("~ts~n", [mochi_str(split_with_sep("11/22/63", "/"))]),
    io:format("~ts~n", [mochi_str(split_with_sep("12:43:39", ":"))]),
    io:format("~ts~n", [mochi_str(split_with_sep(";abbb;;c;", ";"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
