#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_lower/1, is_upper/1, is_digit/1, is_alpha/1, is_alnum/1, to_lower/1, camel_to_snake_case/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

is_lower(Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I) ->
    case (I < erlang:length("abcdefghijklmnopqrstuvwxyz")) of
        true ->
            case (string:substr("abcdefghijklmnopqrstuvwxyz", I + 1, 1) == Ch) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2);
        _ -> {Ch, I}
    end
end,
{Ch, I_2} = Fun(Ch, I),
        false
    catch {return, RetCatch} -> RetCatch end.

is_upper(Ch_2) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Ch_2, I_3) ->
    case (I_3 < erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ")) of
        true ->
            case (string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", I_3 + 1, 1) == Ch_2) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Ch_2, I_4);
        _ -> {Ch_2, I_3}
    end
end,
{Ch_2, I_4} = Fun_2(Ch_2, I_3),
        false
    catch {return, RetCatch} -> RetCatch end.

is_digit(Ch_3) ->
    try
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Ch_3, I_5) ->
    case (I_5 < erlang:length("0123456789")) of
        true ->
            case (string:substr("0123456789", I_5 + 1, 1) == Ch_3) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Ch_3, I_6);
        _ -> {Ch_3, I_5}
    end
end,
{Ch_3, I_6} = Fun_3(Ch_3, I_5),
        false
    catch {return, RetCatch} -> RetCatch end.

is_alpha(Ch_4) ->
    try
        case is_lower(Ch_4) of
        true -> throw({return, true});
        _ -> ok
    end,
        case is_upper(Ch_4) of
        true -> throw({return, true});
        _ -> ok
    end,
        false
    catch {return, RetCatch} -> RetCatch end.

is_alnum(Ch_5) ->
    try
        case is_alpha(Ch_5) of
        true -> throw({return, true});
        _ -> ok
    end,
        case is_digit(Ch_5) of
        true -> throw({return, true});
        _ -> ok
    end,
        false
    catch {return, RetCatch} -> RetCatch end.

to_lower(Ch_6) ->
    try
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Ch_6, I_7) ->
    case (I_7 < erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ")) of
        true ->
            case (string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", I_7 + 1, 1) == Ch_6) of
        true -> throw({return, string:substr("abcdefghijklmnopqrstuvwxyz", I_7 + 1, 1)});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(Ch_6, I_8);
        _ -> {Ch_6, I_7}
    end
end,
{Ch_6, I_8} = Fun_4(Ch_6, I_7),
        Ch_6
    catch {return, RetCatch} -> RetCatch end.

camel_to_snake_case(Input_str) ->
    try
        Snake_str = "",
        I_9 = 0,
        Prev_is_digit = false,
        Prev_is_alpha = false,
        Fun_5 = fun Fun_5_loop(I_9, Input_str, Prev_is_alpha, Prev_is_digit, Snake_str) ->
    case (I_9 < erlang:length(Input_str)) of
        true ->
            Ch_7 = string:substr(Input_str, I_9 + 1, 1),
            case is_upper(Ch_7) of
        true -> Snake_str_2 = ((Snake_str ++ "_") ++ to_lower(Ch_7)),
            Snake_str_10 = Snake_str_2;
        _ -> case (Prev_is_digit andalso is_lower(Ch_7)) of
        true -> Snake_str_3 = ((Snake_str ++ "_") ++ Ch_7),
            Snake_str_9 = Snake_str_3;
        _ -> case (Prev_is_alpha andalso is_digit(Ch_7)) of
        true -> Snake_str_4 = ((Snake_str ++ "_") ++ Ch_7),
            Snake_str_8 = Snake_str_4;
        _ -> case mochi_not(is_alnum(Ch_7)) of
        true -> Snake_str_5 = (Snake_str ++ "_"),
            Snake_str_7 = Snake_str_5;
        _ -> Snake_str_6 = (Snake_str ++ Ch_7),
            Snake_str_7 = Snake_str_6
    end,
            Snake_str_8 = Snake_str_7
    end,
            Snake_str_9 = Snake_str_8
    end,
            Snake_str_10 = Snake_str_9
    end,
            Prev_is_digit_2 = is_digit(Ch_7),
            Prev_is_alpha_2 = is_alpha(Ch_7),
            I_10 = (I_9 + 1),
            Fun_5_loop(I_10, Input_str, Prev_is_alpha_2, Prev_is_digit_2, Snake_str_10);
        _ -> {I_9, Input_str, Prev_is_alpha, Prev_is_digit, Snake_str}
    end
end,
{I_10, Input_str, Prev_is_alpha_2, Prev_is_digit_2, Snake_str_10} = Fun_5(I_9, Input_str, Prev_is_alpha, Prev_is_digit, Snake_str),
        case ((erlang:length(Snake_str_10) > 0) andalso (string:substr(Snake_str_10, 0 + 1, 1) == "_")) of
        true -> Snake_str_11 = string:substr(Snake_str_10, 1 + 1, (erlang:length(Snake_str_10) - 1)),
            Snake_str_12 = Snake_str_11;
        _ -> Snake_str_12 = Snake_str_10
    end,
        Snake_str_12
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(camel_to_snake_case("someRandomString"))]),
        io:format("~ts~n", [mochi_repr(camel_to_snake_case("SomeRandomStr#ng"))]),
        io:format("~ts~n", [mochi_repr(camel_to_snake_case("123SomeRandom123String123"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('LOWER', "abcdefghijklmnopqrstuvwxyz"),
    erlang:put('UPPER', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    erlang:put('DIGITS', "0123456789"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
