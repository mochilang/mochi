#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, alternative_string_arrange/2]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

alternative_string_arrange(First_str, Second_str) ->
    try
        Len1 = erlang:length(First_str),
        Len2 = erlang:length(Second_str),
        Res = "",
        I = 0,
        Fun = fun Fun_loop(First_str, I, Len1, Len2, Res, Second_str) ->
    case ((I < Len1) orelse (I < Len2)) of
        true ->
            case (I < Len1) of
        true -> Res_2 = (Res ++ string:substr(First_str, I + 1, 1)),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            case (I < Len2) of
        true -> Res_4 = (Res_3 ++ string:substr(Second_str, I + 1, 1)),
            Res_5 = Res_4;
        _ -> Res_5 = Res_3
    end,
            I_2 = (I + 1),
            Fun_loop(First_str, I_2, Len1, Len2, Res_5, Second_str);
        _ -> {First_str, I, Len1, Len2, Res, Second_str}
    end
end,
{First_str, I_2, Len1, Len2, Res_5, Second_str} = Fun(First_str, I, Len1, Len2, Res, Second_str),
        Res_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(alternative_string_arrange("ABCD", "XY"))]),
    io:format("~ts~n", [mochi_repr(alternative_string_arrange("XY", "ABCD"))]),
    io:format("~ts~n", [mochi_repr(alternative_string_arrange("AB", "XYZ"))]),
    io:format("~ts~n", [mochi_repr(alternative_string_arrange("ABC", ""))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
