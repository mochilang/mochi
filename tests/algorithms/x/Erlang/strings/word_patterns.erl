#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, find_index/2, get_word_pattern/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

find_index(Xs, X) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, X, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) == X) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, X, Xs);
        _ -> {I, X, Xs}
    end
end,
{I_2, X, Xs} = Fun(I, X, Xs),
        -1
    catch {return, RetCatch} -> RetCatch end.

get_word_pattern(Word) ->
    try
        W = string:to_upper(Word),
        Letters = [],
        Numbers = [],
        Next_num = 0,
        Res = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Letters, Next_num, Numbers, Res, W, Word) ->
    case (I_3 < erlang:length(W)) of
        true ->
            Ch = string:substr(W, I_3 + 1, 1),
            Idx = find_index(Letters, Ch),
            Num_str = nil,
            case (Idx >= 0) of
        true -> Num_str_2 = (case erlang:is_map(Numbers) of true -> maps:get(Idx, Numbers, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Numbers) + Idx + 1, Numbers); _ -> mochi_nth(Idx + 1, Numbers) end end),
            Letters_3 = Letters,
            Next_num_3 = Next_num,
            Num_str_4 = Num_str_2,
            Numbers_3 = Numbers;
        _ -> Num_str_3 = mochi_str(Next_num),
            Letters_2 = lists:append((case Letters of nil -> []; _ -> Letters end), [Ch]),
            Numbers_2 = lists:append((case Numbers of nil -> []; _ -> Numbers end), [Num_str_3]),
            Next_num_2 = (Next_num + 1),
            Letters_3 = Letters_2,
            Next_num_3 = Next_num_2,
            Num_str_4 = Num_str_3,
            Numbers_3 = Numbers_2
    end,
            case (I_3 > 0) of
        true -> Res_2 = (Res ++ "."),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            Res_4 = (Res_3 ++ Num_str_4),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Letters_3, Next_num_3, Numbers_3, Res_4, W, Word);
        _ -> {I_3, Letters, Next_num, Numbers, Res, W, Word}
    end
end,
{I_4, Letters_3, Next_num_3, Numbers_3, Res_4, W, Word} = Fun_2(I_3, Letters, Next_num, Numbers, Res, W, Word),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(get_word_pattern(""))]),
        io:format("~ts~n", [mochi_repr(get_word_pattern(" "))]),
        io:format("~ts~n", [mochi_repr(get_word_pattern("pattern"))]),
        io:format("~ts~n", [mochi_repr(get_word_pattern("word pattern"))]),
        io:format("~ts~n", [mochi_repr(get_word_pattern("get word pattern"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
