#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, to_upper/1, is_digit/1, clean_id/1, is_spain_national_id/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

to_upper(S) ->
    try
        Res = "",
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Res, S) ->
    case (I < erlang:length(S)) of
        true ->
            try
                Ch = string:substr(S, I + 1, 1),
                J = 0,
                Converted = Ch,
                Fun = fun Fun_loop(Ch, Converted, I, J, Res, S) ->
    case (J < erlang:length("abcdefghijklmnopqrstuvwxyz")) of
        true ->
            try
                case (string:substr("abcdefghijklmnopqrstuvwxyz", J + 1, 1) == Ch) of
        true -> Converted_2 = string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", J + 1, 1),
            throw({break, Ch, Converted_2, I, J, Res, S}),
            Converted_3 = Converted_2;
        _ -> Converted_3 = Converted
    end,
                J_2 = (J + 1),
                Fun_loop(Ch, Converted_3, I, J_2, Res, S)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_loop(C0, C1, C2, C3, C4, C5);
                {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5}
            end;
        _ -> {Ch, Converted, I, J, Res, S}
    end
end,
{Ch, Converted_3, I, J_2, Res, S} = Fun(Ch, Converted, I, J, Res, S),
                Res_2 = (Res ++ Converted_3),
                I_2 = (I + 1),
                Fun_2_loop(I_2, Res_2, S)
            catch
                {continue, C0, C1, C2} -> Fun_2_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {I, Res, S}
    end
end,
{I_2, Res_2, S} = Fun_2(I, Res, S),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

is_digit(Ch_2) ->
    try
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Ch_2, I_3) ->
    case (I_3 < erlang:length("0123456789")) of
        true ->
            case (string:substr("0123456789", I_3 + 1, 1) == Ch_2) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(Ch_2, I_4);
        _ -> {Ch_2, I_3}
    end
end,
{Ch_2, I_4} = Fun_3(Ch_2, I_3),
        false
    catch {return, RetCatch} -> RetCatch end.

clean_id(Spanish_id) ->
    try
        Upper_id = to_upper(Spanish_id),
        Cleaned = "",
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Cleaned, I_5, Spanish_id, Upper_id) ->
    case (I_5 < erlang:length(Upper_id)) of
        true ->
            Ch_3 = string:substr(Upper_id, I_5 + 1, 1),
            case (Ch_3 /= "-") of
        true -> Cleaned_2 = (Cleaned ++ Ch_3),
            Cleaned_3 = Cleaned_2;
        _ -> Cleaned_3 = Cleaned
    end,
            I_6 = (I_5 + 1),
            Fun_4_loop(Cleaned_3, I_6, Spanish_id, Upper_id);
        _ -> {Cleaned, I_5, Spanish_id, Upper_id}
    end
end,
{Cleaned_3, I_6, Spanish_id, Upper_id} = Fun_4(Cleaned, I_5, Spanish_id, Upper_id),
        Cleaned_3
    catch {return, RetCatch} -> RetCatch end.

is_spain_national_id(Spanish_id_2) ->
    try
        Sid = clean_id(Spanish_id_2),
        case (erlang:length(Sid) /= 9) of
        true -> erlang:error({panic, "Input must be a string of 8 numbers plus letter"});
        _ -> ok
    end,
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(I_7, Sid, Spanish_id_2) ->
    case (I_7 < 8) of
        true ->
            case mochi_not(is_digit(string:substr(Sid, I_7 + 1, 1))) of
        true -> erlang:error({panic, "Input must be a string of 8 numbers plus letter"});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_5_loop(I_8, Sid, Spanish_id_2);
        _ -> {I_7, Sid, Spanish_id_2}
    end
end,
{I_8, Sid, Spanish_id_2} = Fun_5(I_7, Sid, Spanish_id_2),
        Number = mochi_to_int(string:substr(Sid, 0 + 1, (8 - 0))),
        Letter = string:substr(Sid, 8 + 1, 1),
        case is_digit(Letter) of
        true -> erlang:error({panic, "Input must be a string of 8 numbers plus letter"});
        _ -> ok
    end,
        Expected = string:substr("TRWAGMYFPDXBNJZSQVHLCKE", mochi_mod(Number, 23) + 1, 1),
        (Letter == Expected)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(is_spain_national_id("12345678Z"))]),
        io:format("~ts~n", [mochi_repr(is_spain_national_id("12345678z"))]),
        io:format("~ts~n", [mochi_repr(is_spain_national_id("12345678x"))]),
        io:format("~ts~n", [mochi_repr(is_spain_national_id("12345678I"))]),
        io:format("~ts~n", [mochi_repr(is_spain_national_id("12345678-Z"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('DIGITS', "0123456789"),
    erlang:put('UPPER', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    erlang:put('LOWER', "abcdefghijklmnopqrstuvwxyz"),
    erlang:put('LOOKUP_LETTERS', "TRWAGMYFPDXBNJZSQVHLCKE"),
    erlang:put('ERROR_MSG', "Input must be a string of 8 numbers plus letter"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
