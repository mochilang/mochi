#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, char_to_lower/1, normalize/1, can_string_be_rearranged_as_palindrome_counter/1, can_string_be_rearranged_as_palindrome/1]).

% Generated by Mochi transpiler v0.10.61 (a59522f233) on 2025-08-08 19:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

char_to_lower(C) ->
    try
        I = 0,
        Fun = fun Fun_loop(C, I) ->
    case (I < erlang:length("ABCDEFGHIJKLMNOPQRSTUVWXYZ")) of
        true ->
            case (C == string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", I + 1, ((I + 1) - I))) of
        true -> throw({return, string:substr("abcdefghijklmnopqrstuvwxyz", I + 1, ((I + 1) - I))});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(C, I_2);
        _ -> {C, I}
    end
end,
{C, I_2} = Fun(C, I),
        C
    catch {return, RetCatch} -> RetCatch end.

normalize(Input_str) ->
    try
        Res = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Input_str, Res) ->
    case (I_3 < erlang:length(Input_str)) of
        true ->
            Ch = string:substr(Input_str, I_3 + 1, ((I_3 + 1) - I_3)),
            Lc = char_to_lower(Ch),
            case ((Lc >= "a") andalso (Lc =< "z")) of
        true -> Res_2 = (Res ++ Lc),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Input_str, Res_3);
        _ -> {I_3, Input_str, Res}
    end
end,
{I_4, Input_str, Res_3} = Fun_2(I_3, Input_str, Res),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

can_string_be_rearranged_as_palindrome_counter(Input_str_2) ->
    try
        S = normalize(Input_str_2),
        Freq = #{},
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Freq, I_5, Input_str_2, S) ->
    case (I_5 < erlang:length(S)) of
        true ->
            Ch_2 = string:substr(S, I_5 + 1, ((I_5 + 1) - I_5)),
            case maps:is_key(Ch_2, Freq) of
        true -> Freq_2 = maps:put(Ch_2, (maps:get(Ch_2, Freq, nil) + 1), Freq),
            Freq_4 = Freq_2;
        _ -> Freq_3 = maps:put(Ch_2, 1, Freq),
            Freq_4 = Freq_3
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Freq_4, I_6, Input_str_2, S);
        _ -> {Freq, I_5, Input_str_2, S}
    end
end,
{Freq_4, I_6, Input_str_2, S} = Fun_3(Freq, I_5, Input_str_2, S),
        Odd = 0,
        Fun_4 = fun Fun_4_loop(List, Freq_4, I_6, Input_str_2, Odd, S) ->
    case List of
        [] -> {Freq_4, I_6, Input_str_2, Odd, S};
        [Key|Key_rest] ->
            case (mochi_mod((case erlang:is_map(Freq_4) of true -> maps:get(Key, Freq_4, nil); _ -> case Key < 0 of true -> mochi_nth(erlang:length(Freq_4) + Key + 1, Freq_4); _ -> mochi_nth(Key + 1, Freq_4) end end), 2) /= 0) of
        true -> Odd_2 = (Odd + 1),
            Odd_3 = Odd_2;
        _ -> Odd_3 = Odd
    end,
            Fun_4_loop(Key_rest, Freq_4, I_6, Input_str_2, Odd_3, S);
        _ -> {Freq_4, I_6, Input_str_2, Odd, S}
    end
end,
{Freq_4, I_6, Input_str_2, Odd_3, S} = Fun_4(maps:keys(Freq_4), Freq_4, I_6, Input_str_2, Odd, S),
        (Odd_3 < 2)
    catch {return, RetCatch} -> RetCatch end.

can_string_be_rearranged_as_palindrome(Input_str_3) ->
    try
        S_2 = normalize(Input_str_3),
        case (erlang:length(S_2) == 0) of
        true -> throw({return, true});
        _ -> ok
    end,
        Character_freq_dict = #{},
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(Character_freq_dict, I_7, Input_str_3, S_2) ->
    case (I_7 < erlang:length(S_2)) of
        true ->
            Character = string:substr(S_2, I_7 + 1, ((I_7 + 1) - I_7)),
            case maps:is_key(Character, Character_freq_dict) of
        true -> Character_freq_dict_2 = maps:put(Character, (maps:get(Character, Character_freq_dict, nil) + 1), Character_freq_dict),
            Character_freq_dict_4 = Character_freq_dict_2;
        _ -> Character_freq_dict_3 = maps:put(Character, 1, Character_freq_dict),
            Character_freq_dict_4 = Character_freq_dict_3
    end,
            I_8 = (I_7 + 1),
            Fun_5_loop(Character_freq_dict_4, I_8, Input_str_3, S_2);
        _ -> {Character_freq_dict, I_7, Input_str_3, S_2}
    end
end,
{Character_freq_dict_4, I_8, Input_str_3, S_2} = Fun_5(Character_freq_dict, I_7, Input_str_3, S_2),
        Odd_char = 0,
        Fun_6 = fun Fun_6_loop(List, Character_freq_dict_4, I_8, Input_str_3, Odd_char, S_2) ->
    case List of
        [] -> {Character_freq_dict_4, I_8, Input_str_3, Odd_char, S_2};
        [Character_key|Character_key_rest] ->
            Character_count = (case erlang:is_map(Character_freq_dict_4) of true -> maps:get(Character_key, Character_freq_dict_4, nil); _ -> case Character_key < 0 of true -> mochi_nth(erlang:length(Character_freq_dict_4) + Character_key + 1, Character_freq_dict_4); _ -> mochi_nth(Character_key + 1, Character_freq_dict_4) end end),
            case (mochi_mod(Character_count, 2) /= 0) of
        true -> Odd_char_2 = (Odd_char + 1),
            Odd_char_3 = Odd_char_2;
        _ -> Odd_char_3 = Odd_char
    end,
            Fun_6_loop(Character_key_rest, Character_freq_dict_4, I_8, Input_str_3, Odd_char_3, S_2);
        _ -> {Character_freq_dict_4, I_8, Input_str_3, Odd_char, S_2}
    end
end,
{Character_freq_dict_4, I_8, Input_str_3, Odd_char_3, S_2} = Fun_6(maps:keys(Character_freq_dict_4), Character_freq_dict_4, I_8, Input_str_3, Odd_char, S_2),
        mochi_not((Odd_char_3 > 1))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('LETTERS', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    erlang:put('LOWERCASE', "abcdefghijklmnopqrstuvwxyz"),
    io:format("~ts~n", [mochi_repr(can_string_be_rearranged_as_palindrome_counter("Momo"))]),
    io:format("~ts~n", [mochi_repr(can_string_be_rearranged_as_palindrome_counter("Mother"))]),
    io:format("~ts~n", [mochi_repr(can_string_be_rearranged_as_palindrome("Momo"))]),
    io:format("~ts~n", [mochi_repr(can_string_be_rearranged_as_palindrome("Mother"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
