#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, starts_with/2, all_digits/1, is_sri_lankan_phone_number/1]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

starts_with(S, Prefix) ->
    try
        (case (erlang:length(S) < erlang:length(Prefix)) of
    true -> false;
    _ -> (string:substr(S, 0 + 1, (erlang:length(Prefix) - 0)) == Prefix)
end)
    catch {return, RetCatch} -> RetCatch end.

all_digits(S_2) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, S_2) ->
    case (I < erlang:length(S_2)) of
        true ->
            C = string:substr(S_2, I + 1, 1),
            case ((C < "0") orelse (C > "9")) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, S_2);
        _ -> {I, S_2}
    end
end,
{I_2, S_2} = Fun(I, S_2),
        true
    catch {return, RetCatch} -> RetCatch end.

is_sri_lankan_phone_number(Phone) ->
    try
        P = Phone,
        case starts_with(P, "+94") of
        true -> P_2 = string:substr(P, 3 + 1, (erlang:length(P) - 3)),
            P_9 = P_2;
        _ -> case starts_with(P, "0094") of
        true -> P_3 = string:substr(P, 4 + 1, (erlang:length(P) - 4)),
            P_8 = P_3;
        _ -> case starts_with(P, "94") of
        true -> P_4 = string:substr(P, 2 + 1, (erlang:length(P) - 2)),
            P_7 = P_4;
        _ -> case starts_with(P, "0") of
        true -> P_5 = string:substr(P, 1 + 1, (erlang:length(P) - 1)),
            P_6 = P_5;
        _ -> throw({return, false}),
            P_6 = P
    end,
            P_7 = P_6
    end,
            P_8 = P_7
    end,
            P_9 = P_8
    end,
        case ((erlang:length(P_9) /= 9) andalso (erlang:length(P_9) /= 10)) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (string:substr(P_9, 0 + 1, 1) /= "7") of
        true -> throw({return, false});
        _ -> ok
    end,
        Second = string:substr(P_9, 1 + 1, 1),
        Allowed = ["0", "1", "2", "4", "5", "6", "7", "8"],
        case mochi_not(mochi_member(Second, Allowed)) of
        true -> throw({return, false});
        _ -> ok
    end,
        Idx = 2,
        case (erlang:length(P_9) == 10) of
        true -> Sep = string:substr(P_9, 2 + 1, 1),
            case ((Sep /= "-") andalso (Sep /= " ")) of
        true -> throw({return, false});
        _ -> ok
    end,
            Idx_2 = 3,
            Idx_3 = Idx_2,
            Sep_2 = Sep;
        _ -> Idx_3 = Idx,
            Sep_2 = nil
    end,
        case ((erlang:length(P_9) - Idx_3) /= 7) of
        true -> throw({return, false});
        _ -> ok
    end,
        Rest = string:substr(P_9, Idx_3 + 1, (erlang:length(P_9) - Idx_3)),
        all_digits(Rest)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('phone', "0094702343221"),
    io:format("~ts~n", [mochi_str(is_sri_lankan_phone_number("0094702343221"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
