#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, prefix_function/1, longest_prefix/1, list_eq_int/2, test_prefix_function/0, test_longest_prefix/0, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

prefix_function(S) ->
    try
        Pi = [],
        I = 0,
        Fun = fun Fun_loop(I, Pi, S) ->
    case (I < erlang:length(S)) of
        true ->
            Pi_2 = lists:append((case Pi of nil -> []; _ -> Pi end), [0]),
            I_2 = (I + 1),
            Fun_loop(I_2, Pi_2, S);
        _ -> {I, Pi, S}
    end
end,
{I_2, Pi_2, S} = Fun(I, Pi, S),
        I_3 = 1,
        Fun_3 = fun Fun_3_loop(I_3, Pi_2, S) ->
    case (I_3 < erlang:length(S)) of
        true ->
            J = (case erlang:is_map(Pi_2) of true -> maps:get((I_3 - 1), Pi_2, nil); _ -> case (I_3 - 1) < 0 of true -> mochi_nth(erlang:length(Pi_2) + (I_3 - 1) + 1, Pi_2); _ -> mochi_nth((I_3 - 1) + 1, Pi_2) end end),
            Fun_2 = fun Fun_2_loop(I_3, J, Pi_2, S) ->
    case ((J > 0) andalso (string:substr(S, I_3 + 1, 1) /= string:substr(S, J + 1, 1))) of
        true ->
            J_2 = (case erlang:is_map(Pi_2) of true -> maps:get((J - 1), Pi_2, nil); _ -> case (J - 1) < 0 of true -> mochi_nth(erlang:length(Pi_2) + (J - 1) + 1, Pi_2); _ -> mochi_nth((J - 1) + 1, Pi_2) end end),
            Fun_2_loop(I_3, J_2, Pi_2, S);
        _ -> {I_3, J, Pi_2, S}
    end
end,
{I_3, J_2, Pi_2, S} = Fun_2(I_3, J, Pi_2, S),
            case (string:substr(S, I_3 + 1, 1) == string:substr(S, J_2 + 1, 1)) of
        true -> J_3 = (J_2 + 1),
            J_4 = J_3;
        _ -> J_4 = J_2
    end,
            Pi_3 = lists:sublist(Pi_2, I_3) ++ [J_4] ++ lists:nthtail(I_3 + 1, Pi_2),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Pi_3, S);
        _ -> {I_3, Pi_2, S}
    end
end,
{I_4, Pi_3, S} = Fun_3(I_3, Pi_2, S),
        Pi_3
    catch {return, RetCatch} -> RetCatch end.

longest_prefix(S_2) ->
    try
        Pi_4 = prefix_function(S_2),
        Max_val = 0,
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, Max_val, Pi_4, S_2) ->
    case (I_5 < erlang:length(Pi_4)) of
        true ->
            case ((case erlang:is_map(Pi_4) of true -> maps:get(I_5, Pi_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Pi_4) + I_5 + 1, Pi_4); _ -> mochi_nth(I_5 + 1, Pi_4) end end) > Max_val) of
        true -> Max_val_2 = (case erlang:is_map(Pi_4) of true -> maps:get(I_5, Pi_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Pi_4) + I_5 + 1, Pi_4); _ -> mochi_nth(I_5 + 1, Pi_4) end end),
            Max_val_3 = Max_val_2;
        _ -> Max_val_3 = Max_val
    end,
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Max_val_3, Pi_4, S_2);
        _ -> {I_5, Max_val, Pi_4, S_2}
    end
end,
{I_6, Max_val_3, Pi_4, S_2} = Fun_4(I_5, Max_val, Pi_4, S_2),
        Max_val_3
    catch {return, RetCatch} -> RetCatch end.

list_eq_int(A, B) ->
    try
        case (erlang:length(A) /= erlang:length(B)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(A, B, I_7) ->
    case (I_7 < erlang:length(A)) of
        true ->
            case ((case erlang:is_map(A) of true -> maps:get(I_7, A, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A) + I_7 + 1, A); _ -> mochi_nth(I_7 + 1, A) end end) /= (case erlang:is_map(B) of true -> maps:get(I_7, B, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B) + I_7 + 1, B); _ -> mochi_nth(I_7 + 1, B) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_5_loop(A, B, I_8);
        _ -> {A, B, I_7}
    end
end,
{A, B, I_8} = Fun_5(A, B, I_7),
        true
    catch {return, RetCatch} -> RetCatch end.

test_prefix_function() ->
    try
        S1 = "aabcdaabc",
        Expected1 = [0, 1, 0, 0, 0, 1, 2, 3, 4],
        R1 = prefix_function("aabcdaabc"),
        case mochi_not(list_eq_int(R1, Expected1)) of
        true -> erlang:error({panic, "prefix_function aabcdaabc failed"});
        _ -> ok
    end,
        S2 = "asdasdad",
        Expected2 = [0, 0, 0, 1, 2, 3, 4, 0],
        R2 = prefix_function("asdasdad"),
        case mochi_not(list_eq_int(R2, Expected2)) of
        true -> erlang:error({panic, "prefix_function asdasdad failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

test_longest_prefix() ->
    try
        case (longest_prefix("aabcdaabc") /= 4) of
        true -> erlang:error({panic, "longest_prefix example1 failed"});
        _ -> ok
    end,
        case (longest_prefix("asdasdad") /= 4) of
        true -> erlang:error({panic, "longest_prefix example2 failed"});
        _ -> ok
    end,
        case (longest_prefix("abcab") /= 2) of
        true -> erlang:error({panic, "longest_prefix example3 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_prefix_function(),
        test_longest_prefix(),
        R1_2 = prefix_function("aabcdaabc"),
        R2_2 = prefix_function("asdasdad"),
        io:format("~ts~n", [mochi_str(R1_2)]),
        io:format("~ts~n", [mochi_str(R2_2)]),
        io:format("~ts~n", [mochi_str(longest_prefix("aabcdaabc"))]),
        io:format("~ts~n", [mochi_str(longest_prefix("abcab"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
