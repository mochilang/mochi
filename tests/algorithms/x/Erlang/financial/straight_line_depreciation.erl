#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, straight_line_depreciation/3]).

% Generated by Mochi transpiler v0.10.64 (2a849c314b) on 2025-08-13 15:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

straight_line_depreciation(Useful_years, Purchase_value, Residual_value) ->
    try
        case (Useful_years < 1) of
        true -> erlang:error({panic, "Useful years cannot be less than 1"});
        _ -> ok
    end,
        case (Purchase_value < 0.0) of
        true -> erlang:error({panic, "Purchase value cannot be less than zero"});
        _ -> ok
    end,
        case (Purchase_value < Residual_value) of
        true -> erlang:error({panic, "Purchase value cannot be less than residual value"});
        _ -> ok
    end,
        Depreciable_cost = (Purchase_value - Residual_value),
        Annual_expense = mochi_safe_div(Depreciable_cost, mochi_safe_mul(1.0, Useful_years)),
        Expenses = [],
        Accumulated = 0.0,
        Period = 0,
        Fun = fun Fun_loop(Accumulated, Annual_expense, Depreciable_cost, Expenses, Period, Purchase_value, Residual_value, Useful_years) ->
    case (Period < Useful_years) of
        true ->
            case (Period /= (Useful_years - 1)) of
        true -> Accumulated_2 = (Accumulated + Annual_expense),
            Expenses_2 = lists:append((case Expenses of nil -> []; _ -> Expenses end), [Annual_expense]),
            Accumulated_3 = Accumulated_2,
            End_year_expense_2 = nil,
            Expenses_4 = Expenses_2;
        _ -> End_year_expense = (Depreciable_cost - Accumulated),
            Expenses_3 = lists:append((case Expenses of nil -> []; _ -> Expenses end), [End_year_expense]),
            Accumulated_3 = Accumulated,
            End_year_expense_2 = End_year_expense,
            Expenses_4 = Expenses_3
    end,
            Period_2 = (Period + 1),
            Fun_loop(Accumulated_3, Annual_expense, Depreciable_cost, Expenses_4, Period_2, Purchase_value, Residual_value, Useful_years);
        _ -> {Accumulated, Annual_expense, Depreciable_cost, Expenses, Period, Purchase_value, Residual_value, Useful_years}
    end
end,
{Accumulated_3, Annual_expense, Depreciable_cost, Expenses_4, Period_2, Purchase_value, Residual_value, Useful_years} = Fun(Accumulated, Annual_expense, Depreciable_cost, Expenses, Period, Purchase_value, Residual_value, Useful_years),
        Expenses_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(straight_line_depreciation(10, 1100.0, 100.0))]),
    io:format("~ts~n", [mochi_str(straight_line_depreciation(6, 1250.0, 50.0))]),
    io:format("~ts~n", [mochi_str(straight_line_depreciation(4, 1001.0, 0.0))]),
    io:format("~ts~n", [mochi_str(straight_line_depreciation(11, 380.0, 50.0))]),
    io:format("~ts~n", [mochi_str(straight_line_depreciation(1, 4985.0, 100.0))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
