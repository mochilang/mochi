#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, powf/2, round2/1, present_value/2]).

% Generated by Mochi transpiler v0.10.64 (2a849c314b) on 2025-08-13 15:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

powf(Base, Exponent) ->
    try
        Result = 1.0,
        I = 0,
        Fun = fun Fun_loop(Base, Exponent, I, Result) ->
    case (I < Exponent) of
        true ->
            Result_2 = mochi_safe_mul(Result, Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exponent, I_2, Result_2);
        _ -> {Base, Exponent, I, Result}
    end
end,
{Base, Exponent, I_2, Result_2} = Fun(Base, Exponent, I, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

round2(Value) ->
    try
        case (Value >= 0.0) of
        true -> Scaled = mochi_to_int((mochi_safe_mul(Value, 100.0) + 0.5)),
            throw({return, mochi_safe_div(float(Scaled), 100.0)}),
            Scaled_2 = Scaled;
        _ -> Scaled_2 = nil
    end,
        Scaled_3 = mochi_to_int((mochi_safe_mul(Value, 100.0) - 0.5)),
        mochi_safe_div(float(Scaled_3), 100.0)
    catch {return, RetCatch} -> RetCatch end.

present_value(Discount_rate, Cash_flows) ->
    try
        case (Discount_rate < 0.0) of
        true -> erlang:error({panic, "Discount rate cannot be negative"});
        _ -> ok
    end,
        case (erlang:length(Cash_flows) == 0) of
        true -> erlang:error({panic, "Cash flows list cannot be empty"});
        _ -> ok
    end,
        Pv = 0.0,
        I_3 = 0,
        Factor = (1.0 + Discount_rate),
        Fun_2 = fun Fun_2_loop(Cash_flows, Discount_rate, Factor, I_3, Pv) ->
    case (I_3 < erlang:length(Cash_flows)) of
        true ->
            Cf = (case erlang:is_map(Cash_flows) of true -> maps:get(I_3, Cash_flows, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Cash_flows) + I_3 + 1, Cash_flows); _ -> mochi_nth(I_3 + 1, Cash_flows) end end),
            Pv_2 = (Pv + mochi_safe_div(Cf, powf(Factor, I_3))),
            I_4 = (I_3 + 1),
            Fun_2_loop(Cash_flows, Discount_rate, Factor, I_4, Pv_2);
        _ -> {Cash_flows, Discount_rate, Factor, I_3, Pv}
    end
end,
{Cash_flows, Discount_rate, Factor, I_4, Pv_2} = Fun_2(Cash_flows, Discount_rate, Factor, I_3, Pv),
        round2(Pv_2)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(present_value(0.13, [10.0, 20.7, -293.0, 297.0]))]),
    io:format("~ts~n", [mochi_str(present_value(0.07, [-109129.39, 30923.23, 15098.93, 29734.0, 39.0]))]),
    io:format("~ts~n", [mochi_str(present_value(0.07, [109129.39, 30923.23, 15098.93, 29734.0, 39.0]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
