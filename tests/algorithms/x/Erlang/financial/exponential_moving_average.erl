#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, exponential_moving_average/2]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

exponential_moving_average(Stock_prices, Window_size) ->
    try
        case (Window_size =< 0) of
        true -> erlang:error("window_size must be > 0");
        _ -> ok
    end,
        Alpha = mochi_safe_div(2, (1 + float(Window_size))),
        Moving_average = 0,
        Result = [],
        I = 0,
        Fun = fun Fun_loop(Alpha, I, Moving_average, Result, Stock_prices, Window_size) ->
    case (I < erlang:length(Stock_prices)) of
        true ->
            Price = (case erlang:is_map(Stock_prices) of true -> maps:get(I, Stock_prices, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Stock_prices) + I + 1, Stock_prices); _ -> lists:nth(I + 1, Stock_prices) end end),
            case (I =< Window_size) of
        true -> case (I == 0) of
        true -> Moving_average_2 = Price,
            Moving_average_4 = Moving_average_2;
        _ -> Moving_average_3 = mochi_safe_mul((Moving_average + Price), 0.5),
            Moving_average_4 = Moving_average_3
    end,
            Moving_average_6 = Moving_average_4;
        _ -> Moving_average_5 = (mochi_safe_mul(Alpha, Price) + mochi_safe_mul((1 - Alpha), Moving_average)),
            Moving_average_6 = Moving_average_5
    end,
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Moving_average_6]),
            I_2 = (I + 1),
            Fun_loop(Alpha, I_2, Moving_average_6, Result_2, Stock_prices, Window_size);
        _ -> {Alpha, I, Moving_average, Result, Stock_prices, Window_size}
    end
end,
{Alpha, I_2, Moving_average_6, Result_2, Stock_prices, Window_size} = Fun(Alpha, I, Moving_average, Result, Stock_prices, Window_size),
        Result_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('stock_prices', [2, 5, 3, 8.2, 6, 9, 10]),
    erlang:put('window_size', 3),
    erlang:put('result', exponential_moving_average(erlang:get('stock_prices'), 3)),
    io:format("~ts~n", [mochi_str(erlang:get('result'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
