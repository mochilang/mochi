#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, simple_moving_average/2]).

% Generated by Mochi transpiler v0.10.64 (2a849c314b) on 2025-08-13 15:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

simple_moving_average(Data, Window_size) ->
    try
        case (Window_size < 1) of
        true -> erlang:error({panic, "Window size must be a positive integer"});
        _ -> ok
    end,
        Result = [],
        Window_sum = 0.0,
        I = 0,
        Fun = fun Fun_loop(Data, I, Result, Window_size, Window_sum) ->
    case (I < erlang:length(Data)) of
        true ->
            Window_sum_2 = (Window_sum + (case erlang:is_map(Data) of true -> maps:get(I, Data, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Data) + I + 1, Data); _ -> mochi_nth(I + 1, Data) end end)),
            case (I >= Window_size) of
        true -> Window_sum_3 = (Window_sum_2 - (case erlang:is_map(Data) of true -> maps:get((I - Window_size), Data, nil); _ -> case (I - Window_size) < 0 of true -> mochi_nth(erlang:length(Data) + (I - Window_size) + 1, Data); _ -> mochi_nth((I - Window_size) + 1, Data) end end)),
            Window_sum_4 = Window_sum_3;
        _ -> Window_sum_4 = Window_sum_2
    end,
            case (I >= (Window_size - 1)) of
        true -> Avg = mochi_safe_div(Window_sum_4, Window_size),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [#{"value" => Avg, "ok" => true}]),
            Avg_2 = Avg,
            Result_4 = Result_2;
        _ -> Result_3 = lists:append((case Result of nil -> []; _ -> Result end), [#{"value" => 0.0, "ok" => false}]),
            Avg_2 = nil,
            Result_4 = Result_3
    end,
            I_2 = (I + 1),
            Fun_loop(Data, I_2, Result_4, Window_size, Window_sum_4);
        _ -> {Data, I, Result, Window_size, Window_sum}
    end
end,
{Data, I_2, Result_4, Window_size, Window_sum_4} = Fun(Data, I, Result, Window_size, Window_sum),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('data', [10.0, 12.0, 15.0, 13.0, 14.0, 16.0, 18.0, 17.0, 19.0, 21.0]),
    erlang:put('window_size', 3),
    erlang:put('sma_values', simple_moving_average(erlang:get('data'), 3)),
    erlang:put('idx', 0),
    Fun_2 = fun Fun_2_loop() ->
    case (erlang:get('idx') < erlang:length(erlang:get('sma_values'))) of
        true ->
            Item = (case erlang:is_map(erlang:get('sma_values')) of true -> maps:get(erlang:get('idx'), erlang:get('sma_values'), nil); _ -> case erlang:get('idx') < 0 of true -> mochi_nth(erlang:length(erlang:get('sma_values')) + erlang:get('idx') + 1, erlang:get('sma_values')); _ -> mochi_nth(erlang:get('idx') + 1, erlang:get('sma_values')) end end),
            case maps:get("ok", Item, nil) of
        true -> io:format("~ts~n", [mochi_repr(((("Day " ++ mochi_str((erlang:get('idx') + 1))) ++ ": ") ++ mochi_str(maps:get("value", Item, nil))))]);
        _ -> io:format("~ts~n", [mochi_repr((("Day " ++ mochi_str((erlang:get('idx') + 1))) ++ ": Not enough data for SMA"))])
    end,
            erlang:put('idx', (erlang:get('idx') + 1)),
            Fun_2_loop();
        _ -> {}
    end
end,
{} = Fun_2(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
