#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, panic/1, powf/2, simple_interest/3, compound_interest/3, apr_interest/3, main/0]).

% Generated by Mochi transpiler v0.10.64 (25cf3a3e28) on 2025-08-13 12:32 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

panic(Msg) ->
    try
        io:format("~ts~n", [mochi_repr(Msg)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

powf(Base, Exp) ->
    try
        Result = 1.0,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < mochi_to_int(Exp)) of
        true ->
            Result_2 = mochi_safe_mul(Result, Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

simple_interest(Principal, Daily_rate, Days) ->
    try
        case (Days =< 0.0) of
        true -> erlang:error({panic, "days_between_payments must be > 0"}),
            throw({return, 0.0});
        _ -> ok
    end,
        case (Daily_rate < 0.0) of
        true -> erlang:error({panic, "daily_interest_rate must be >= 0"}),
            throw({return, 0.0});
        _ -> ok
    end,
        case (Principal =< 0.0) of
        true -> erlang:error({panic, "principal must be > 0"}),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(mochi_safe_mul(Principal, Daily_rate), Days)
    catch {return, RetCatch} -> RetCatch end.

compound_interest(Principal_2, Nominal_rate, Periods) ->
    try
        case (Periods =< 0.0) of
        true -> erlang:error({panic, "number_of_compounding_periods must be > 0"}),
            throw({return, 0.0});
        _ -> ok
    end,
        case (Nominal_rate < 0.0) of
        true -> erlang:error({panic, "nominal_annual_interest_rate_percentage must be >= 0"}),
            throw({return, 0.0});
        _ -> ok
    end,
        case (Principal_2 =< 0.0) of
        true -> erlang:error({panic, "principal must be > 0"}),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(Principal_2, (powf((1.0 + Nominal_rate), Periods) - 1.0))
    catch {return, RetCatch} -> RetCatch end.

apr_interest(Principal_3, Apr, Years) ->
    try
        case (Years =< 0.0) of
        true -> erlang:error({panic, "number_of_years must be > 0"}),
            throw({return, 0.0});
        _ -> ok
    end,
        case (Apr < 0.0) of
        true -> erlang:error({panic, "nominal_annual_percentage_rate must be >= 0"}),
            throw({return, 0.0});
        _ -> ok
    end,
        case (Principal_3 =< 0.0) of
        true -> erlang:error({panic, "principal must be > 0"}),
            throw({return, 0.0});
        _ -> ok
    end,
        compound_interest(Principal_3, mochi_safe_div(Apr, 365.0), mochi_safe_mul(Years, 365.0))
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_str(simple_interest(18000.0, 0.06, 3.0))]),
        io:format("~ts~n", [mochi_str(simple_interest(0.5, 0.06, 3.0))]),
        io:format("~ts~n", [mochi_str(simple_interest(18000.0, 0.01, 10.0))]),
        io:format("~ts~n", [mochi_str(compound_interest(10000.0, 0.05, 3.0))]),
        io:format("~ts~n", [mochi_str(compound_interest(10000.0, 0.05, 1.0))]),
        io:format("~ts~n", [mochi_str(apr_interest(10000.0, 0.05, 3.0))]),
        io:format("~ts~n", [mochi_str(apr_interest(10000.0, 0.05, 1.0))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
