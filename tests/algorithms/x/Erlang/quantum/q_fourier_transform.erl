#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, to_bits/2, quantum_fourier_transform/1]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

to_bits(N, Width) ->
    try
        Res = "",
        Num = N,
        W = Width,
        Fun = fun Fun_loop(N, Num, Res, W, Width) ->
    case (W > 0) of
        true ->
            Res_2 = (mochi_str(mochi_mod(Num, 2)) ++ Res),
            Num_2 = (Num div 2),
            W_2 = (W - 1),
            Fun_loop(N, Num_2, Res_2, W_2, Width);
        _ -> {N, Num, Res, W, Width}
    end
end,
{N, Num_2, Res_2, W_2, Width} = Fun(N, Num, Res, W, Width),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

quantum_fourier_transform(Number_of_qubits) ->
    try
        case (Number_of_qubits =< 0) of
        true -> erlang:error({panic, "number of qubits must be > 0."});
        _ -> ok
    end,
        case (Number_of_qubits > 10) of
        true -> erlang:error({panic, "number of qubits too large to simulate(>10)."});
        _ -> ok
    end,
        Shots = 10000,
        States = 1,
        P = 0,
        Fun_2 = fun Fun_2_loop(Number_of_qubits, P, Shots, States) ->
    case (P < Number_of_qubits) of
        true ->
            States_2 = (States * 2),
            P_2 = (P + 1),
            Fun_2_loop(Number_of_qubits, P_2, Shots, States_2);
        _ -> {Number_of_qubits, P, Shots, States}
    end
end,
{Number_of_qubits, P_2, Shots, States_2} = Fun_2(Number_of_qubits, P, Shots, States),
        Per_state = mochi_safe_div(Shots, States_2),
        Counts = #{},
        I = 0,
        Fun_3 = fun Fun_3_loop(Counts, I, Number_of_qubits, P_2, Per_state, Shots, States_2) ->
    case (I < States_2) of
        true ->
            Counts_2 = maps:put(to_bits(I, Number_of_qubits), Per_state, Counts),
            I_2 = (I + 1),
            Fun_3_loop(Counts_2, I_2, Number_of_qubits, P_2, Per_state, Shots, States_2);
        _ -> {Counts, I, Number_of_qubits, P_2, Per_state, Shots, States_2}
    end
end,
{Counts_2, I_2, Number_of_qubits, P_2, Per_state, Shots, States_2} = Fun_3(Counts, I, Number_of_qubits, P_2, Per_state, Shots, States_2),
        Counts_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(("Total count for quantum fourier transform state is: " ++ mochi_str(quantum_fourier_transform(3))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
