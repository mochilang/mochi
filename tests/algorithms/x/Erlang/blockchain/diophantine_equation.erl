#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, gcd/2, extended_gcd/2, diophantine/3, diophantine_all_soln/4]).

% Generated by Mochi transpiler v0.10.59 (f521f86a07) on 2025-08-06 21:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

gcd(A, B) ->
    try
        X = (case (A < 0) of
    true -> -A;
    _ -> A
end),
        Y = (case (B < 0) of
    true -> -B;
    _ -> B
end),
        Fun = fun Fun_loop(A, B, X, Y) ->
    case (Y /= 0) of
        true ->
            T = (X rem Y),
            X_2 = Y,
            Y_2 = T,
            Fun_loop(A, B, X_2, Y_2);
        _ -> {A, B, X, Y}
    end
end,
{A, B, X_2, Y_2} = Fun(A, B, X, Y),
        X_2
    catch {return, Ret} -> Ret end.

extended_gcd(A_2, B_2) ->
    try
        case (B_2 == 0) of
        true -> throw({return, [A_2, 1, 0]});
        _ -> ok
    end,
        Res = extended_gcd(B_2, (A_2 rem B_2)),
        D = (case erlang:is_map(Res) of true -> maps:get(0, Res, nil); _ -> lists:nth(0 + 1, Res) end),
        P = (case erlang:is_map(Res) of true -> maps:get(1, Res, nil); _ -> lists:nth(1 + 1, Res) end),
        Q = (case erlang:is_map(Res) of true -> maps:get(2, Res, nil); _ -> lists:nth(2 + 1, Res) end),
        X_3 = Q,
        Y_3 = (P - (Q * (A_2 div B_2))),
        [D, X_3, Y_3]
    catch {return, Ret} -> Ret end.

diophantine(A_3, B_3, C) ->
    try
        D_2 = gcd(A_3, B_3),
        case ((C rem D_2) /= 0) of
        true -> erlang:error("No solution");
        _ -> ok
    end,
        Eg = extended_gcd(A_3, B_3),
        R = (C div D_2),
        X_4 = ((case erlang:is_map(Eg) of true -> maps:get(1, Eg, nil); _ -> lists:nth(1 + 1, Eg) end) * R),
        Y_4 = ((case erlang:is_map(Eg) of true -> maps:get(2, Eg, nil); _ -> lists:nth(2 + 1, Eg) end) * R),
        [X_4, Y_4]
    catch {return, Ret} -> Ret end.

diophantine_all_soln(A_4, B_4, C_2, N) ->
    try
        Base = diophantine(A_4, B_4, C_2),
        X0 = (case erlang:is_map(Base) of true -> maps:get(0, Base, nil); _ -> lists:nth(0 + 1, Base) end),
        Y0 = (case erlang:is_map(Base) of true -> maps:get(1, Base, nil); _ -> lists:nth(1 + 1, Base) end),
        D_3 = gcd(A_4, B_4),
        P_2 = (A_4 div D_3),
        Q_2 = (B_4 div D_3),
        Sols = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(A_4, B_4, Base, C_2, D_3, I, N, P_2, Q_2, Sols, X0, Y0) ->
    case (I < N) of
        true ->
            X_5 = (X0 + (I * Q_2)),
            Y_5 = (Y0 - (I * P_2)),
            Sols_2 = lists:append(Sols, [[X_5, Y_5]]),
            I_2 = (I + 1),
            Fun_2_loop(A_4, B_4, Base, C_2, D_3, I_2, N, P_2, Q_2, Sols_2, X0, Y0);
        _ -> {A_4, B_4, Base, C_2, D_3, I, N, P_2, Q_2, Sols, X0, Y0}
    end
end,
{A_4, B_4, Base, C_2, D_3, I_2, N, P_2, Q_2, Sols_2, X0, Y0} = Fun_2(A_4, B_4, Base, C_2, D_3, I, N, P_2, Q_2, Sols, X0, Y0),
        Sols_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('s1', diophantine(10, 6, 14)),
    io:format("~ts~n", [mochi_str(erlang:get('s1'))]),
    erlang:put('sols', diophantine_all_soln(10, 6, 14, 4)),
    erlang:put('j', 0),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('j') < length(erlang:get('sols'))) of
        true ->
            io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('sols')) of true -> maps:get(erlang:get('j'), erlang:get('sols'), nil); _ -> lists:nth(erlang:get('j') + 1, erlang:get('sols')) end))]),
            erlang:put('j', (erlang:get('j') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    io:format("~ts~n", [mochi_str(diophantine(391, 299, -69))]),
    io:format("~ts~n", [mochi_str(extended_gcd(10, 6))]),
    io:format("~ts~n", [mochi_str(extended_gcd(7, 5))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
