#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_matrix/1, dfs/4, check_circuit_or_path/2, check_euler/2]).

% Generated by Mochi transpiler v0.10.65 (428ea06e9a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

make_matrix(N) ->
    try
        Matrix = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Matrix, N) ->
    case (I =< N) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(I, J, Matrix, N, Row) ->
    case (J =< N) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [false]),
            J_2 = (J + 1),
            Fun_loop(I, J_2, Matrix, N, Row_2);
        _ -> {I, J, Matrix, N, Row}
    end
end,
{I, J_2, Matrix, N, Row_2} = Fun(I, J, Matrix, N, Row),
            Matrix_2 = lists:append((case Matrix of nil -> []; _ -> Matrix end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Matrix_2, N);
        _ -> {I, Matrix, N}
    end
end,
{I_2, Matrix_2, N} = Fun_2(I, Matrix, N),
        Matrix_2
    catch {return, RetCatch} -> RetCatch end.

dfs(U, Graph, Visited_edge, Path) ->
    try
        Path_2 = lists:append((case Path of nil -> []; _ -> Path end), [U]),
        case maps:is_key(U, Graph) of
        true -> Neighbors = maps:get(U, Graph, nil),
            I_3 = 0,
            Fun_3 = fun Fun_3_loop(Graph, I_3, Neighbors, Path_2, U, Visited_edge) ->
    case (I_3 < erlang:length(Neighbors)) of
        true ->
            V = (case erlang:is_map(Neighbors) of true -> maps:get(I_3, Neighbors, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Neighbors) + I_3 + 1, Neighbors); _ -> mochi_nth(I_3 + 1, Neighbors) end end),
            case ((case erlang:is_map((case erlang:is_map(Visited_edge) of true -> maps:get(U, Visited_edge, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Visited_edge) + U + 1, Visited_edge); _ -> mochi_nth(U + 1, Visited_edge) end end)) of true -> maps:get(V, (case erlang:is_map(Visited_edge) of true -> maps:get(U, Visited_edge, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Visited_edge) + U + 1, Visited_edge); _ -> mochi_nth(U + 1, Visited_edge) end end), nil); _ -> case V < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Visited_edge) of true -> maps:get(U, Visited_edge, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Visited_edge) + U + 1, Visited_edge); _ -> mochi_nth(U + 1, Visited_edge) end end)) + V + 1, (case erlang:is_map(Visited_edge) of true -> maps:get(U, Visited_edge, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Visited_edge) + U + 1, Visited_edge); _ -> mochi_nth(U + 1, Visited_edge) end end)); _ -> mochi_nth(V + 1, (case erlang:is_map(Visited_edge) of true -> maps:get(U, Visited_edge, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Visited_edge) + U + 1, Visited_edge); _ -> mochi_nth(U + 1, Visited_edge) end end)) end end) == false) of
        true -> Visited_edge_2 = lists:sublist(Visited_edge, U) ++ [lists:sublist(lists:nth(U + 1, Visited_edge), V) ++ [true] ++ lists:nthtail(V + 1, lists:nth(U + 1, Visited_edge))] ++ lists:nthtail(U + 1, Visited_edge),
            Visited_edge_3 = lists:sublist(Visited_edge_2, V) ++ [lists:sublist(lists:nth(V + 1, Visited_edge_2), U) ++ [true] ++ lists:nthtail(U + 1, lists:nth(V + 1, Visited_edge_2))] ++ lists:nthtail(V + 1, Visited_edge_2),
            Path_3 = dfs(V, Graph, Visited_edge_3, Path_2),
            Path_4 = Path_3,
            Visited_edge_4 = Visited_edge_3;
        _ -> Path_4 = Path_2,
            Visited_edge_4 = Visited_edge
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(Graph, I_4, Neighbors, Path_4, U, Visited_edge_4);
        _ -> {Graph, I_3, Neighbors, Path_2, U, Visited_edge}
    end
end,
{Graph, I_4, Neighbors, Path_4, U, Visited_edge_4} = Fun_3(Graph, I_3, Neighbors, Path_2, U, Visited_edge),
            Fun_4 = Fun_3,
            I_5 = I_4,
            Neighbors_2 = Neighbors,
            Path_5 = Path_4,
            Visited_edge_5 = Visited_edge_4;
        _ -> Fun_4 = nil,
            I_5 = nil,
            Neighbors_2 = nil,
            Path_5 = Path_2,
            Visited_edge_5 = Visited_edge
    end,
        Path_5
    catch {return, RetCatch} -> RetCatch end.

check_circuit_or_path(Graph_2, Max_node) ->
    try
        Odd_degree_nodes = 0,
        Odd_node = -1,
        I_6 = 0,
        Fun_5 = fun Fun_5_loop(Graph_2, I_6, Max_node, Odd_degree_nodes, Odd_node) ->
    case (I_6 < Max_node) of
        true ->
            case maps:is_key(I_6, Graph_2) of
        true -> case (mochi_mod(erlang:length(maps:get(I_6, Graph_2, nil)), 2) == 1) of
        true -> Odd_degree_nodes_2 = (Odd_degree_nodes + 1),
            Odd_node_2 = I_6,
            Odd_degree_nodes_3 = Odd_degree_nodes_2,
            Odd_node_3 = Odd_node_2;
        _ -> Odd_degree_nodes_3 = Odd_degree_nodes,
            Odd_node_3 = Odd_node
    end,
            Odd_degree_nodes_4 = Odd_degree_nodes_3,
            Odd_node_4 = Odd_node_3;
        _ -> Odd_degree_nodes_4 = Odd_degree_nodes,
            Odd_node_4 = Odd_node
    end,
            I_7 = (I_6 + 1),
            Fun_5_loop(Graph_2, I_7, Max_node, Odd_degree_nodes_4, Odd_node_4);
        _ -> {Graph_2, I_6, Max_node, Odd_degree_nodes, Odd_node}
    end
end,
{Graph_2, I_7, Max_node, Odd_degree_nodes_4, Odd_node_4} = Fun_5(Graph_2, I_6, Max_node, Odd_degree_nodes, Odd_node),
        case (Odd_degree_nodes_4 == 0) of
        true -> throw({return, #{"status" => 1, "odd_node" => Odd_node_4}});
        _ -> ok
    end,
        case (Odd_degree_nodes_4 == 2) of
        true -> throw({return, #{"status" => 2, "odd_node" => Odd_node_4}});
        _ -> ok
    end,
        #{"status" => 3, "odd_node" => Odd_node_4}
    catch {return, RetCatch} -> RetCatch end.

check_euler(Graph_3, Max_node_2) ->
    try
        Visited_edge_6 = make_matrix(Max_node_2),
        Res = check_circuit_or_path(Graph_3, Max_node_2),
        case (maps:get("status", Res, nil) == 3) of
        true -> io:format("~ts~n", [mochi_repr("graph is not Eulerian")]),
            io:format("~ts~n", [mochi_repr("no path")]),
            throw({return, nil});
        _ -> ok
    end,
        Start_node = 1,
        case (maps:get("status", Res, nil) == 2) of
        true -> Start_node_2 = maps:get("odd_node", Res, nil),
            io:format("~ts~n", [mochi_repr("graph has a Euler path")]),
            Start_node_3 = Start_node_2;
        _ -> Start_node_3 = Start_node
    end,
        case (maps:get("status", Res, nil) == 1) of
        true -> io:format("~ts~n", [mochi_repr("graph has a Euler cycle")]);
        _ -> ok
    end,
        Path_6 = dfs(Start_node_3, Graph_3, Visited_edge_6, []),
        io:format("~ts~n", [mochi_str(Path_6)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('g1', #{1 => [2, 3, 4], 2 => [1, 3], 3 => [1, 2], 4 => [1, 5], 5 => [4]}),
    erlang:put('g2', #{1 => [2, 3, 4, 5], 2 => [1, 3], 3 => [1, 2], 4 => [1, 5], 5 => [1, 4]}),
    erlang:put('g3', #{1 => [2, 3, 4], 2 => [1, 3, 4], 3 => [1, 2], 4 => [1, 2, 5], 5 => [4]}),
    erlang:put('g4', #{1 => [2, 3], 2 => [1, 3], 3 => [1, 2]}),
    erlang:put('g5', #{1 => [], 2 => []}),
    erlang:put('max_node', 10),
    check_euler(erlang:get('g1'), 10),
    check_euler(erlang:get('g2'), 10),
    check_euler(erlang:get('g3'), 10),
    check_euler(erlang:get('g4'), 10),
    check_euler(erlang:get('g5'), 10),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
