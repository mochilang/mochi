#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_graph/1, contains_vertex/2, add_edge/3, graph_to_string/1]).

% Generated by Mochi transpiler v0.10.65 (428ea06e9a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

make_graph(Directed) ->
    try
        M = #{},
        #{"adj_list" => M, "directed" => Directed}
    catch {return, RetCatch} -> RetCatch end.

contains_vertex(M_2, V) ->
    try
        maps:is_key(V, M_2)
    catch {return, RetCatch} -> RetCatch end.

add_edge(G, S, D) ->
    try
        Adj = maps:get("adj_list", G, nil),
        case mochi_not(maps:get("directed", G, nil)) of
        true -> case (contains_vertex(Adj, S) andalso contains_vertex(Adj, D)) of
        true -> Adj_2 = maps:put(S, lists:append((case maps:get(S, Adj, nil) of nil -> []; _ -> maps:get(S, Adj, nil) end), [D]), Adj),
            Adj_3 = maps:put(D, lists:append((case maps:get(D, Adj_2, nil) of nil -> []; _ -> maps:get(D, Adj_2, nil) end), [S]), Adj_2),
            Adj_12 = Adj_3;
        _ -> case contains_vertex(Adj, S) of
        true -> Adj_4 = maps:put(S, lists:append((case maps:get(S, Adj, nil) of nil -> []; _ -> maps:get(S, Adj, nil) end), [D]), Adj),
            Adj_5 = maps:put(D, [S], Adj_4),
            Adj_11 = Adj_5;
        _ -> case contains_vertex(Adj, D) of
        true -> Adj_6 = maps:put(D, lists:append((case maps:get(D, Adj, nil) of nil -> []; _ -> maps:get(D, Adj, nil) end), [S]), Adj),
            Adj_7 = maps:put(S, [D], Adj_6),
            Adj_10 = Adj_7;
        _ -> Adj_8 = maps:put(S, [D], Adj),
            Adj_9 = maps:put(D, [S], Adj_8),
            Adj_10 = Adj_9
    end,
            Adj_11 = Adj_10
    end,
            Adj_12 = Adj_11
    end,
            Adj_22 = Adj_12;
        _ -> case (contains_vertex(Adj, S) andalso contains_vertex(Adj, D)) of
        true -> Adj_13 = maps:put(S, lists:append((case maps:get(S, Adj, nil) of nil -> []; _ -> maps:get(S, Adj, nil) end), [D]), Adj),
            Adj_21 = Adj_13;
        _ -> case contains_vertex(Adj, S) of
        true -> Adj_14 = maps:put(S, lists:append((case maps:get(S, Adj, nil) of nil -> []; _ -> maps:get(S, Adj, nil) end), [D]), Adj),
            Adj_15 = maps:put(D, [], Adj_14),
            Adj_20 = Adj_15;
        _ -> case contains_vertex(Adj, D) of
        true -> Adj_16 = maps:put(S, [D], Adj),
            Adj_19 = Adj_16;
        _ -> Adj_17 = maps:put(S, [D], Adj),
            Adj_18 = maps:put(D, [], Adj_17),
            Adj_19 = Adj_18
    end,
            Adj_20 = Adj_19
    end,
            Adj_21 = Adj_20
    end,
            Adj_22 = Adj_21
    end,
        G_2 = maps:put("adj_list", Adj_22, G),
        G_2
    catch {return, RetCatch} -> RetCatch end.

graph_to_string(G_3) ->
    try
        mochi_str(maps:get("adj_list", G_3, nil))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('d_graph', make_graph(true)),
    erlang:put('d_graph', add_edge(erlang:get('d_graph'), mochi_str(0), mochi_str(1))),
    io:format("~ts~n", [mochi_repr(graph_to_string(erlang:get('d_graph')))]),
    erlang:put('d_graph', add_edge(erlang:get('d_graph'), mochi_str(1), mochi_str(2))),
    erlang:put('d_graph', add_edge(erlang:get('d_graph'), mochi_str(1), mochi_str(4))),
    erlang:put('d_graph', add_edge(erlang:get('d_graph'), mochi_str(1), mochi_str(5))),
    io:format("~ts~n", [mochi_repr(graph_to_string(erlang:get('d_graph')))]),
    erlang:put('d_graph', add_edge(erlang:get('d_graph'), mochi_str(2), mochi_str(0))),
    erlang:put('d_graph', add_edge(erlang:get('d_graph'), mochi_str(2), mochi_str(6))),
    erlang:put('d_graph', add_edge(erlang:get('d_graph'), mochi_str(2), mochi_str(7))),
    io:format("~ts~n", [mochi_repr(graph_to_string(erlang:get('d_graph')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
