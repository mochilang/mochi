#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, floyd_warshall/1, print_dist/1]).

% Generated by Mochi transpiler v0.10.65 (428ea06e9a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

floyd_warshall(Graph) ->
    try
        V = erlang:length(Graph),
        Dist = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Dist, Graph, I, V) ->
    case (I < V) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(Dist, Graph, I, J, Row, V) ->
    case (J < V) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [(case erlang:is_map((case erlang:is_map(Graph) of true -> maps:get(I, Graph, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Graph) + I + 1, Graph); _ -> mochi_nth(I + 1, Graph) end end)) of true -> maps:get(J, (case erlang:is_map(Graph) of true -> maps:get(I, Graph, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Graph) + I + 1, Graph); _ -> mochi_nth(I + 1, Graph) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Graph) of true -> maps:get(I, Graph, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Graph) + I + 1, Graph); _ -> mochi_nth(I + 1, Graph) end end)) + J + 1, (case erlang:is_map(Graph) of true -> maps:get(I, Graph, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Graph) + I + 1, Graph); _ -> mochi_nth(I + 1, Graph) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Graph) of true -> maps:get(I, Graph, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Graph) + I + 1, Graph); _ -> mochi_nth(I + 1, Graph) end end)) end end)]),
            J_2 = (J + 1),
            Fun_loop(Dist, Graph, I, J_2, Row_2, V);
        _ -> {Dist, Graph, I, J, Row, V}
    end
end,
{Dist, Graph, I, J_2, Row_2, V} = Fun(Dist, Graph, I, J, Row, V),
            Dist_2 = lists:append((case Dist of nil -> []; _ -> Dist end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Dist_2, Graph, I_2, V);
        _ -> {Dist, Graph, I, V}
    end
end,
{Dist_2, Graph, I_2, V} = Fun_2(Dist, Graph, I, V),
        K = 0,
        Fun_5 = fun Fun_5_loop(Dist_2, Graph, I_2, K, V) ->
    case (K < V) of
        true ->
            I_3 = 0,
            Fun_4 = fun Fun_4_loop(Dist_2, Graph, I_3, K, V) ->
    case (I_3 < V) of
        true ->
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(Dist_2, Graph, I_3, J_3, K, V) ->
    case (J_3 < V) of
        true ->
            case ((((case erlang:is_map((case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)) of true -> maps:get(K, (case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)) + K + 1, (case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)) end end) < 1000000000.0) andalso ((case erlang:is_map((case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end)) + J_3 + 1, (case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end)) end end) < 1000000000.0)) andalso (((case erlang:is_map((case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)) of true -> maps:get(K, (case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)) + K + 1, (case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)) end end) + (case erlang:is_map((case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end)) + J_3 + 1, (case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end)) end end)) < (case erlang:is_map((case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)) + J_3 + 1, (case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)) end end))) of
        true -> Dist_3 = lists:sublist(Dist_2, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Dist_2), J_3) ++ [((case erlang:is_map((case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)) of true -> maps:get(K, (case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)) + K + 1, (case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(Dist_2) of true -> maps:get(I_3, Dist_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_3 + 1, Dist_2); _ -> mochi_nth(I_3 + 1, Dist_2) end end)) end end) + (case erlang:is_map((case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end)) + J_3 + 1, (case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Dist_2) of true -> maps:get(K, Dist_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Dist_2) + K + 1, Dist_2); _ -> mochi_nth(K + 1, Dist_2) end end)) end end))] ++ lists:nthtail(J_3 + 1, lists:nth(I_3 + 1, Dist_2))] ++ lists:nthtail(I_3 + 1, Dist_2),
            Dist_4 = Dist_3;
        _ -> Dist_4 = Dist_2
    end,
            J_4 = (J_3 + 1),
            Fun_3_loop(Dist_4, Graph, I_3, J_4, K, V);
        _ -> {Dist_2, Graph, I_3, J_3, K, V}
    end
end,
{Dist_4, Graph, I_3, J_4, K, V} = Fun_3(Dist_2, Graph, I_3, J_3, K, V),
            I_4 = (I_3 + 1),
            Fun_4_loop(Dist_4, Graph, I_4, K, V);
        _ -> {Dist_2, Graph, I_3, K, V}
    end
end,
{Dist_4, Graph, I_4, K, V} = Fun_4(Dist_2, Graph, I_3, K, V),
            K_2 = (K + 1),
            Fun_5_loop(Dist_4, Graph, I_4, K_2, V);
        _ -> {Dist_2, Graph, I_2, K, V}
    end
end,
{Dist_4, Graph, I_4, K_2, V} = Fun_5(Dist_2, Graph, I_2, K, V),
        Dist_4
    catch {return, RetCatch} -> RetCatch end.

print_dist(Dist_5) ->
    try
        io:format("~ts~n", [mochi_repr("\nThe shortest path matrix using Floyd Warshall algorithm\n")]),
        I_5 = 0,
        Fun_7 = fun Fun_7_loop(Dist_5, I_5) ->
    case (I_5 < erlang:length(Dist_5)) of
        true ->
            J_5 = 0,
            Line = "",
            Fun_6 = fun Fun_6_loop(Dist_5, I_5, J_5, Line) ->
    case (J_5 < erlang:length((case erlang:is_map(Dist_5) of true -> maps:get(I_5, Dist_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dist_5) + I_5 + 1, Dist_5); _ -> mochi_nth(I_5 + 1, Dist_5) end end))) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(Dist_5) of true -> maps:get(I_5, Dist_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dist_5) + I_5 + 1, Dist_5); _ -> mochi_nth(I_5 + 1, Dist_5) end end)) of true -> maps:get(J_5, (case erlang:is_map(Dist_5) of true -> maps:get(I_5, Dist_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dist_5) + I_5 + 1, Dist_5); _ -> mochi_nth(I_5 + 1, Dist_5) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dist_5) of true -> maps:get(I_5, Dist_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dist_5) + I_5 + 1, Dist_5); _ -> mochi_nth(I_5 + 1, Dist_5) end end)) + J_5 + 1, (case erlang:is_map(Dist_5) of true -> maps:get(I_5, Dist_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dist_5) + I_5 + 1, Dist_5); _ -> mochi_nth(I_5 + 1, Dist_5) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(Dist_5) of true -> maps:get(I_5, Dist_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dist_5) + I_5 + 1, Dist_5); _ -> mochi_nth(I_5 + 1, Dist_5) end end)) end end) >= mochi_safe_div(1000000000.0, 2.0)) of
        true -> Line_2 = (Line ++ "INF\t"),
            Line_4 = Line_2;
        _ -> Line_3 = ((Line ++ mochi_str(mochi_to_int((case erlang:is_map((case erlang:is_map(Dist_5) of true -> maps:get(I_5, Dist_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dist_5) + I_5 + 1, Dist_5); _ -> mochi_nth(I_5 + 1, Dist_5) end end)) of true -> maps:get(J_5, (case erlang:is_map(Dist_5) of true -> maps:get(I_5, Dist_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dist_5) + I_5 + 1, Dist_5); _ -> mochi_nth(I_5 + 1, Dist_5) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dist_5) of true -> maps:get(I_5, Dist_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dist_5) + I_5 + 1, Dist_5); _ -> mochi_nth(I_5 + 1, Dist_5) end end)) + J_5 + 1, (case erlang:is_map(Dist_5) of true -> maps:get(I_5, Dist_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dist_5) + I_5 + 1, Dist_5); _ -> mochi_nth(I_5 + 1, Dist_5) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(Dist_5) of true -> maps:get(I_5, Dist_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dist_5) + I_5 + 1, Dist_5); _ -> mochi_nth(I_5 + 1, Dist_5) end end)) end end)))) ++ "\t"),
            Line_4 = Line_3
    end,
            J_6 = (J_5 + 1),
            Fun_6_loop(Dist_5, I_5, J_6, Line_4);
        _ -> {Dist_5, I_5, J_5, Line}
    end
end,
{Dist_5, I_5, J_6, Line_4} = Fun_6(Dist_5, I_5, J_5, Line),
            io:format("~ts~n", [mochi_repr(Line_4)]),
            I_6 = (I_5 + 1),
            Fun_7_loop(Dist_5, I_6);
        _ -> {Dist_5, I_5}
    end
end,
{Dist_5, I_6} = Fun_7(Dist_5, I_5),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('INF', 1000000000.0),
    erlang:put('graph', [[0.0, 5.0, 1000000000.0, 10.0], [1000000000.0, 0.0, 3.0, 1000000000.0], [1000000000.0, 1000000000.0, 0.0, 1.0], [1000000000.0, 1000000000.0, 1000000000.0, 0.0]]),
    erlang:put('result', floyd_warshall(erlang:get('graph'))),
    print_dist(erlang:get('result')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
