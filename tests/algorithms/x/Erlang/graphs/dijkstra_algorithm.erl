#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_int_list/2, make_bool_list/1, dijkstra/2]).

% Generated by Mochi transpiler v0.10.65 (f942880281) on 2025-08-13 16:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

make_int_list(N, Value) ->
    try
        Lst = [],
        I = 0,
        Fun = fun Fun_loop(I, Lst, N, Value) ->
    case (I < N) of
        true ->
            Lst_2 = lists:append((case Lst of nil -> []; _ -> Lst end), [Value]),
            I_2 = (I + 1),
            Fun_loop(I_2, Lst_2, N, Value);
        _ -> {I, Lst, N, Value}
    end
end,
{I_2, Lst_2, N, Value} = Fun(I, Lst, N, Value),
        Lst_2
    catch {return, RetCatch} -> RetCatch end.

make_bool_list(N_2) ->
    try
        Lst_3 = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Lst_3, N_2) ->
    case (I_3 < N_2) of
        true ->
            Lst_4 = lists:append((case Lst_3 of nil -> []; _ -> Lst_3 end), [false]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Lst_4, N_2);
        _ -> {I_3, Lst_3, N_2}
    end
end,
{I_4, Lst_4, N_2} = Fun_2(I_3, Lst_3, N_2),
        Lst_4
    catch {return, RetCatch} -> RetCatch end.

dijkstra(Graph, Src) ->
    try
        N_3 = erlang:length(Graph),
        Dist = make_int_list(N_3, 1000000000),
        Visited = make_bool_list(N_3),
        Dist_2 = lists:sublist(Dist, Src) ++ [0] ++ lists:nthtail(Src + 1, Dist),
        Count = 0,
        Fun_5 = fun Fun_5_loop(Count, Dist_2, Graph, N_3, Src, Visited) ->
    case (Count < N_3) of
        true ->
            try
                U = -1,
                Min_dist = 1000000000,
                I_5 = 0,
                Fun_3 = fun Fun_3_loop(Count, Dist_2, Graph, I_5, Min_dist, N_3, Src, U, Visited) ->
    case (I_5 < N_3) of
        true ->
            case (mochi_not((case erlang:is_map(Visited) of true -> maps:get(I_5, Visited, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Visited) + I_5 + 1, Visited); _ -> mochi_nth(I_5 + 1, Visited) end end)) andalso ((case erlang:is_map(Dist_2) of true -> maps:get(I_5, Dist_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_5 + 1, Dist_2); _ -> mochi_nth(I_5 + 1, Dist_2) end end) < Min_dist)) of
        true -> Min_dist_2 = (case erlang:is_map(Dist_2) of true -> maps:get(I_5, Dist_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dist_2) + I_5 + 1, Dist_2); _ -> mochi_nth(I_5 + 1, Dist_2) end end),
            U_2 = I_5,
            Min_dist_3 = Min_dist_2,
            U_3 = U_2;
        _ -> Min_dist_3 = Min_dist,
            U_3 = U
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Count, Dist_2, Graph, I_6, Min_dist_3, N_3, Src, U_3, Visited);
        _ -> {Count, Dist_2, Graph, I_5, Min_dist, N_3, Src, U, Visited}
    end
end,
{Count, Dist_2, Graph, I_6, Min_dist_3, N_3, Src, U_3, Visited} = Fun_3(Count, Dist_2, Graph, I_5, Min_dist, N_3, Src, U, Visited),
                case (U_3 < 0) of
        true -> throw({break, Count, Dist_2, Graph, N_3, Src, Visited});
        _ -> ok
    end,
                Visited_2 = lists:sublist(Visited, U_3) ++ [true] ++ lists:nthtail(U_3 + 1, Visited),
                J = 0,
                Fun_4 = fun Fun_4_loop(Count, Dist_2, Graph, I_6, J, Min_dist_3, N_3, Src, U_3, Visited_2) ->
    case (J < erlang:length((case erlang:is_map(Graph) of true -> maps:get(U_3, Graph, nil); _ -> case U_3 < 0 of true -> mochi_nth(erlang:length(Graph) + U_3 + 1, Graph); _ -> mochi_nth(U_3 + 1, Graph) end end))) of
        true ->
            E = (case erlang:is_map((case erlang:is_map(Graph) of true -> maps:get(U_3, Graph, nil); _ -> case U_3 < 0 of true -> mochi_nth(erlang:length(Graph) + U_3 + 1, Graph); _ -> mochi_nth(U_3 + 1, Graph) end end)) of true -> maps:get(J, (case erlang:is_map(Graph) of true -> maps:get(U_3, Graph, nil); _ -> case U_3 < 0 of true -> mochi_nth(erlang:length(Graph) + U_3 + 1, Graph); _ -> mochi_nth(U_3 + 1, Graph) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Graph) of true -> maps:get(U_3, Graph, nil); _ -> case U_3 < 0 of true -> mochi_nth(erlang:length(Graph) + U_3 + 1, Graph); _ -> mochi_nth(U_3 + 1, Graph) end end)) + J + 1, (case erlang:is_map(Graph) of true -> maps:get(U_3, Graph, nil); _ -> case U_3 < 0 of true -> mochi_nth(erlang:length(Graph) + U_3 + 1, Graph); _ -> mochi_nth(U_3 + 1, Graph) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Graph) of true -> maps:get(U_3, Graph, nil); _ -> case U_3 < 0 of true -> mochi_nth(erlang:length(Graph) + U_3 + 1, Graph); _ -> mochi_nth(U_3 + 1, Graph) end end)) end end),
            V = maps:get("node", E, nil),
            W = maps:get("weight", E, nil),
            case mochi_not((case erlang:is_map(Visited_2) of true -> maps:get(V, Visited_2, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Visited_2) + V + 1, Visited_2); _ -> mochi_nth(V + 1, Visited_2) end end)) of
        true -> New_dist = ((case erlang:is_map(Dist_2) of true -> maps:get(U_3, Dist_2, nil); _ -> case U_3 < 0 of true -> mochi_nth(erlang:length(Dist_2) + U_3 + 1, Dist_2); _ -> mochi_nth(U_3 + 1, Dist_2) end end) + W),
            case (New_dist < (case erlang:is_map(Dist_2) of true -> maps:get(V, Dist_2, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Dist_2) + V + 1, Dist_2); _ -> mochi_nth(V + 1, Dist_2) end end)) of
        true -> Dist_3 = lists:sublist(Dist_2, V) ++ [New_dist] ++ lists:nthtail(V + 1, Dist_2),
            Dist_4 = Dist_3;
        _ -> Dist_4 = Dist_2
    end,
            Dist_5 = Dist_4,
            New_dist_2 = New_dist;
        _ -> Dist_5 = Dist_2,
            New_dist_2 = nil
    end,
            J_2 = (J + 1),
            Fun_4_loop(Count, Dist_5, Graph, I_6, J_2, Min_dist_3, N_3, Src, U_3, Visited_2);
        _ -> {Count, Dist_2, Graph, I_6, J, Min_dist_3, N_3, Src, U_3, Visited_2}
    end
end,
{Count, Dist_5, Graph, I_6, J_2, Min_dist_3, N_3, Src, U_3, Visited_2} = Fun_4(Count, Dist_2, Graph, I_6, J, Min_dist_3, N_3, Src, U_3, Visited_2),
                Count_2 = (Count + 1),
                Fun_5_loop(Count_2, Dist_5, Graph, N_3, Src, Visited_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_5_loop(C0, C1, C2, C3, C4, C5);
                {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5}
            end;
        _ -> {Count, Dist_2, Graph, N_3, Src, Visited}
    end
end,
{Count_2, Dist_5, Graph, N_3, Src, Visited_2} = Fun_5(Count, Dist_2, Graph, N_3, Src, Visited),
        Dist_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('graph', [[#{"node" => 1, "weight" => 10}, #{"node" => 3, "weight" => 5}], [#{"node" => 2, "weight" => 1}, #{"node" => 3, "weight" => 2}], [#{"node" => 4, "weight" => 4}], [#{"node" => 1, "weight" => 3}, #{"node" => 2, "weight" => 9}, #{"node" => 4, "weight" => 2}], [#{"node" => 0, "weight" => 7}, #{"node" => 2, "weight" => 6}]]),
    erlang:put('dist', dijkstra(erlang:get('graph'), 0)),
    io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('dist')) of true -> maps:get(0, erlang:get('dist'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('dist')) + 0 + 1, erlang:get('dist')); _ -> mochi_nth(0 + 1, erlang:get('dist')) end end))]),
    io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('dist')) of true -> maps:get(1, erlang:get('dist'), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(erlang:get('dist')) + 1 + 1, erlang:get('dist')); _ -> mochi_nth(1 + 1, erlang:get('dist')) end end))]),
    io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('dist')) of true -> maps:get(2, erlang:get('dist'), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(erlang:get('dist')) + 2 + 1, erlang:get('dist')); _ -> mochi_nth(2 + 1, erlang:get('dist')) end end))]),
    io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('dist')) of true -> maps:get(3, erlang:get('dist'), nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(erlang:get('dist')) + 3 + 1, erlang:get('dist')); _ -> mochi_nth(3 + 1, erlang:get('dist')) end end))]),
    io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('dist')) of true -> maps:get(4, erlang:get('dist'), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(erlang:get('dist')) + 4 + 1, erlang:get('dist')); _ -> mochi_nth(4 + 1, erlang:get('dist')) end end))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
