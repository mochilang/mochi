#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, rand/0, random/0, get_nodes/1, transition/2, get_transitions/3, main/0]).

% Generated by Mochi transpiler v0.10.65 (5cabcd7927)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

rand() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        erlang:get('seed')
    catch {return, RetCatch} -> RetCatch end.

random() ->
    try
        mochi_safe_div(mochi_safe_mul(1.0, rand()), 2147483648.0)
    catch {return, RetCatch} -> RetCatch end.

get_nodes(Trans) ->
    try
        Seen = #{},
        Fun = fun Fun_loop(List, Seen, Trans) ->
    case List of
        [] -> {Seen, Trans};
        [T|T_rest] ->
            Seen_2 = maps:put(maps:get("src", T, nil), true, Seen),
            Seen_3 = maps:put(maps:get("dst", T, nil), true, Seen_2),
            Fun_loop(T_rest, Seen_3, Trans);
        _ -> {Seen, Trans}
    end
end,
{Seen_3, Trans} = Fun(Trans, Seen, Trans),
        Nodes = [],
        Fun_2 = fun Fun_2_loop(List, Nodes, Seen_3, Trans) ->
    case List of
        [] -> {Nodes, Seen_3, Trans};
        [K|K_rest] ->
            Nodes_2 = lists:append((case Nodes of nil -> []; _ -> Nodes end), [K]),
            Fun_2_loop(K_rest, Nodes_2, Seen_3, Trans);
        _ -> {Nodes, Seen_3, Trans}
    end
end,
{Nodes_2, Seen_3, Trans} = Fun_2(maps:keys(Seen_3), Nodes, Seen_3, Trans),
        Nodes_2
    catch {return, RetCatch} -> RetCatch end.

transition(Current, Trans_2) ->
    try
        Current_probability = 0.0,
        Random_value = random(),
        Fun_3 = fun Fun_3_loop(List, Current, Current_probability, Random_value, Trans_2) ->
    case List of
        [] -> {Current, Current_probability, Random_value, Trans_2};
        [T_2|T_2_rest] ->
            case (maps:get("src", T_2, nil) == Current) of
        true -> Current_probability_2 = (Current_probability + maps:get("prob", T_2, nil)),
            case (Current_probability_2 > Random_value) of
        true -> throw({return, maps:get("dst", T_2, nil)});
        _ -> ok
    end,
            Current_probability_3 = Current_probability_2;
        _ -> Current_probability_3 = Current_probability
    end,
            Fun_3_loop(T_2_rest, Current, Current_probability_3, Random_value, Trans_2);
        _ -> {Current, Current_probability, Random_value, Trans_2}
    end
end,
{Current, Current_probability_3, Random_value, Trans_2} = Fun_3(Trans_2, Current, Current_probability, Random_value, Trans_2),
        ""
    catch {return, RetCatch} -> RetCatch end.

get_transitions(Start, Trans_3, Steps) ->
    try
        Visited = #{},
        Fun_4 = fun Fun_4_loop(List, Start, Steps, Trans_3, Visited) ->
    case List of
        [] -> {Start, Steps, Trans_3, Visited};
        [Node|Node_rest] ->
            One = 1,
            Visited_2 = maps:put(Node, One, Visited),
            Fun_4_loop(Node_rest, Start, Steps, Trans_3, Visited_2);
        _ -> {Start, Steps, Trans_3, Visited}
    end
end,
{Start, Steps, Trans_3, Visited_2} = Fun_4(get_nodes(Trans_3), Start, Steps, Trans_3, Visited),
        Node_2 = Start,
        I = 0,
        Fun_5 = fun Fun_5_loop(I, Node_2, Start, Steps, Trans_3, Visited_2) ->
    case (I < Steps) of
        true ->
            Node_3 = transition(Node_2, Trans_3),
            Count = maps:get(Node_3, Visited_2, nil),
            Count_2 = (Count + 1),
            Visited_3 = maps:put(Node_3, Count_2, Visited_2),
            I_2 = (I + 1),
            Fun_5_loop(I_2, Node_3, Start, Steps, Trans_3, Visited_3);
        _ -> {I, Node_2, Start, Steps, Trans_3, Visited_2}
    end
end,
{I_2, Node_3, Start, Steps, Trans_3, Visited_3} = Fun_5(I, Node_2, Start, Steps, Trans_3, Visited_2),
        Visited_3
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Transitions = [#{"src" => "a", "dst" => "a", "prob" => 0.9}, #{"src" => "a", "dst" => "b", "prob" => 0.075}, #{"src" => "a", "dst" => "c", "prob" => 0.025}, #{"src" => "b", "dst" => "a", "prob" => 0.15}, #{"src" => "b", "dst" => "b", "prob" => 0.8}, #{"src" => "b", "dst" => "c", "prob" => 0.05}, #{"src" => "c", "dst" => "a", "prob" => 0.25}, #{"src" => "c", "dst" => "b", "prob" => 0.25}, #{"src" => "c", "dst" => "c", "prob" => 0.5}],
        Result = get_transitions("a", Transitions, 5000),
        io:format("~ts~n", [mochi_repr(((((mochi_str(maps:get("a", Result, nil)) ++ " ") ++ mochi_str(maps:get("b", Result, nil))) ++ " ") ++ mochi_str(maps:get("c", Result, nil))))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
