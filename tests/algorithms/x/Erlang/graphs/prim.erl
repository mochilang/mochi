#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, connect/4, in_list/2, prim/3, sort_heap/2, prim_heap/3, print_edges/1, test_vector/0]).

% Generated by Mochi transpiler v0.10.66 (8fdd1fe3d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

connect(Graph, A, B, W) ->
    try
        U = (A - 1),
        V = (B - 1),
        G = Graph,
        G_2 = maps:put(U, lists:append((case maps:get(U, G, nil) of nil -> []; _ -> maps:get(U, G, nil) end), [[V, W]]), G),
        G_3 = maps:put(V, lists:append((case maps:get(V, G_2, nil) of nil -> []; _ -> maps:get(V, G_2, nil) end), [[U, W]]), G_2),
        G_3
    catch {return, RetCatch} -> RetCatch end.

in_list(Arr, X) ->
    try
        I = 0,
        Fun = fun Fun_loop(Arr, I, X) ->
    case (I < erlang:length(Arr)) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end) == X) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Arr, I_2, X);
        _ -> {Arr, I, X}
    end
end,
{Arr, I_2, X} = Fun(Arr, I, X),
        false
    catch {return, RetCatch} -> RetCatch end.

prim(Graph_2, S, N) ->
    try
        Dist = #{},
        Parent = #{},
        Dist_2 = maps:put(S, 0, Dist),
        Parent_2 = maps:put(S, -1, Parent),
        Known = [],
        Keys = [S],
        Fun_4 = fun Fun_4_loop(Dist_2, Graph_2, Keys, Known, N, Parent_2, S) ->
    case (erlang:length(Known) < N) of
        true ->
            Mini = 1000000000,
            U_2 = -1,
            I_3 = 0,
            Fun_2 = fun Fun_2_loop(Dist_2, Graph_2, I_3, Keys, Known, Mini, N, Parent_2, S, U_2) ->
    case (I_3 < erlang:length(Keys)) of
        true ->
            K = (case erlang:is_map(Keys) of true -> maps:get(I_3, Keys, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Keys) + I_3 + 1, Keys); _ -> mochi_nth(I_3 + 1, Keys) end end),
            D = maps:get(K, Dist_2, nil),
            case (mochi_not(in_list(Known, K)) andalso (D < Mini)) of
        true -> Mini_2 = D,
            U_3 = K,
            Mini_3 = Mini_2,
            U_4 = U_3;
        _ -> Mini_3 = Mini,
            U_4 = U_2
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Dist_2, Graph_2, I_4, Keys, Known, Mini_3, N, Parent_2, S, U_4);
        _ -> {Dist_2, Graph_2, I_3, Keys, Known, Mini, N, Parent_2, S, U_2}
    end
end,
{Dist_2, Graph_2, I_4, Keys, Known, Mini_3, N, Parent_2, S, U_4} = Fun_2(Dist_2, Graph_2, I_3, Keys, Known, Mini, N, Parent_2, S, U_2),
            Known_2 = lists:append((case Known of nil -> []; _ -> Known end), [U_4]),
            Fun_3 = fun Fun_3_loop(List, Dist_2, Graph_2, I_4, Keys, Known_2, Mini_3, N, Parent_2, S, U_4) ->
    case List of
        [] -> {Dist_2, Graph_2, I_4, Keys, Known_2, Mini_3, N, Parent_2, S, U_4};
        [E|E_rest] ->
            V_2 = (case erlang:is_map(E) of true -> maps:get(0, E, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(E) + 0 + 1, E); _ -> mochi_nth(0 + 1, E) end end),
            W_2 = (case erlang:is_map(E) of true -> maps:get(1, E, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(E) + 1 + 1, E); _ -> mochi_nth(1 + 1, E) end end),
            case mochi_not(in_list(Keys, V_2)) of
        true -> Keys_2 = lists:append((case Keys of nil -> []; _ -> Keys end), [V_2]),
            Keys_3 = Keys_2;
        _ -> Keys_3 = Keys
    end,
            Cur = (case maps:is_key(V_2, Dist_2) of
    true -> maps:get(V_2, Dist_2, nil);
    _ -> 1000000000
end),
            case (mochi_not(in_list(Known_2, V_2)) andalso (W_2 < Cur)) of
        true -> Dist_3 = maps:put(V_2, W_2, Dist_2),
            Parent_3 = maps:put(V_2, U_4, Parent_2),
            Dist_4 = Dist_3,
            Parent_4 = Parent_3;
        _ -> Dist_4 = Dist_2,
            Parent_4 = Parent_2
    end,
            Fun_3_loop(E_rest, Dist_4, Graph_2, I_4, Keys_3, Known_2, Mini_3, N, Parent_4, S, U_4);
        _ -> {Dist_2, Graph_2, I_4, Keys, Known_2, Mini_3, N, Parent_2, S, U_4}
    end
end,
{Dist_4, Graph_2, I_4, Keys_3, Known_2, Mini_3, N, Parent_4, S, U_4} = Fun_3(maps:get(U_4, Graph_2, nil), Dist_2, Graph_2, I_4, Keys, Known_2, Mini_3, N, Parent_2, S, U_4),
            Fun_4_loop(Dist_4, Graph_2, Keys_3, Known_2, N, Parent_4, S);
        _ -> {Dist_2, Graph_2, Keys, Known, N, Parent_2, S}
    end
end,
{Dist_4, Graph_2, Keys_3, Known_2, N, Parent_4, S} = Fun_4(Dist_2, Graph_2, Keys, Known, N, Parent_2, S),
        Edges = [],
        J = 0,
        Fun_5 = fun Fun_5_loop(Dist_4, Edges, Graph_2, J, Keys_3, Known_2, N, Parent_4, S) ->
    case (J < erlang:length(Keys_3)) of
        true ->
            V_3 = (case erlang:is_map(Keys_3) of true -> maps:get(J, Keys_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Keys_3) + J + 1, Keys_3); _ -> mochi_nth(J + 1, Keys_3) end end),
            case (V_3 /= S) of
        true -> Edges_2 = lists:append((case Edges of nil -> []; _ -> Edges end), [[(V_3 + 1), ((case erlang:is_map(Parent_4) of true -> maps:get(V_3, Parent_4, nil); _ -> case V_3 < 0 of true -> mochi_nth(erlang:length(Parent_4) + V_3 + 1, Parent_4); _ -> mochi_nth(V_3 + 1, Parent_4) end end) + 1)]]),
            Edges_3 = Edges_2;
        _ -> Edges_3 = Edges
    end,
            J_2 = (J + 1),
            Fun_5_loop(Dist_4, Edges_3, Graph_2, J_2, Keys_3, Known_2, N, Parent_4, S);
        _ -> {Dist_4, Edges, Graph_2, J, Keys_3, Known_2, N, Parent_4, S}
    end
end,
{Dist_4, Edges_3, Graph_2, J_2, Keys_3, Known_2, N, Parent_4, S} = Fun_5(Dist_4, Edges, Graph_2, J, Keys_3, Known_2, N, Parent_4, S),
        Edges_3
    catch {return, RetCatch} -> RetCatch end.

sort_heap(H, Dist_5) ->
    try
        A_2 = H,
        I_5 = 0,
        Fun_7 = fun Fun_7_loop(A_2, Dist_5, H, I_5) ->
    case (I_5 < erlang:length(A_2)) of
        true ->
            J_3 = 0,
            Fun_6 = fun Fun_6_loop(A_2, Dist_5, H, I_5, J_3) ->
    case (J_3 < ((erlang:length(A_2) - I_5) - 1)) of
        true ->
            Dj = (case maps:is_key((case erlang:is_map(A_2) of true -> maps:get(J_3, A_2, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(A_2) + J_3 + 1, A_2); _ -> mochi_nth(J_3 + 1, A_2) end end), Dist_5) of
    true -> maps:get((case erlang:is_map(A_2) of true -> maps:get(J_3, A_2, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(A_2) + J_3 + 1, A_2); _ -> mochi_nth(J_3 + 1, A_2) end end), Dist_5, nil);
    _ -> 1000000000
end),
            Dj1 = (case maps:is_key((case erlang:is_map(A_2) of true -> maps:get((J_3 + 1), A_2, nil); _ -> case (J_3 + 1) < 0 of true -> mochi_nth(erlang:length(A_2) + (J_3 + 1) + 1, A_2); _ -> mochi_nth((J_3 + 1) + 1, A_2) end end), Dist_5) of
    true -> maps:get((case erlang:is_map(A_2) of true -> maps:get((J_3 + 1), A_2, nil); _ -> case (J_3 + 1) < 0 of true -> mochi_nth(erlang:length(A_2) + (J_3 + 1) + 1, A_2); _ -> mochi_nth((J_3 + 1) + 1, A_2) end end), Dist_5, nil);
    _ -> 1000000000
end),
            case (Dj > Dj1) of
        true -> T = (case erlang:is_map(A_2) of true -> maps:get(J_3, A_2, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(A_2) + J_3 + 1, A_2); _ -> mochi_nth(J_3 + 1, A_2) end end),
            A_3 = lists:sublist(A_2, J_3) ++ [(case erlang:is_map(A_2) of true -> maps:get((J_3 + 1), A_2, nil); _ -> case (J_3 + 1) < 0 of true -> mochi_nth(erlang:length(A_2) + (J_3 + 1) + 1, A_2); _ -> mochi_nth((J_3 + 1) + 1, A_2) end end)] ++ lists:nthtail(J_3 + 1, A_2),
            A_4 = lists:sublist(A_3, (J_3 + 1)) ++ [T] ++ lists:nthtail((J_3 + 1) + 1, A_3),
            A_5 = A_4,
            T_2 = T;
        _ -> A_5 = A_2,
            T_2 = nil
    end,
            J_4 = (J_3 + 1),
            Fun_6_loop(A_5, Dist_5, H, I_5, J_4);
        _ -> {A_2, Dist_5, H, I_5, J_3}
    end
end,
{A_5, Dist_5, H, I_5, J_4} = Fun_6(A_2, Dist_5, H, I_5, J_3),
            I_6 = (I_5 + 1),
            Fun_7_loop(A_5, Dist_5, H, I_6);
        _ -> {A_2, Dist_5, H, I_5}
    end
end,
{A_5, Dist_5, H, I_6} = Fun_7(A_2, Dist_5, H, I_5),
        A_5
    catch {return, RetCatch} -> RetCatch end.

prim_heap(Graph_3, S_2, N_2) ->
    try
        Dist_6 = #{},
        Parent_5 = #{},
        Dist_7 = maps:put(S_2, 0, Dist_6),
        Parent_6 = maps:put(S_2, -1, Parent_5),
        H_2 = [],
        I_7 = 0,
        Fun_8 = fun Fun_8_loop(Dist_7, Graph_3, H_2, I_7, N_2, Parent_6, S_2) ->
    case (I_7 < N_2) of
        true ->
            H_3 = lists:append((case H_2 of nil -> []; _ -> H_2 end), [I_7]),
            I_8 = (I_7 + 1),
            Fun_8_loop(Dist_7, Graph_3, H_3, I_8, N_2, Parent_6, S_2);
        _ -> {Dist_7, Graph_3, H_2, I_7, N_2, Parent_6, S_2}
    end
end,
{Dist_7, Graph_3, H_3, I_8, N_2, Parent_6, S_2} = Fun_8(Dist_7, Graph_3, H_2, I_7, N_2, Parent_6, S_2),
        H_4 = sort_heap(H_3, Dist_7),
        Known_3 = [],
        Fun_10 = fun Fun_10_loop(Dist_7, Graph_3, H_4, I_8, Known_3, N_2, Parent_6, S_2) ->
    case (erlang:length(H_4) > 0) of
        true ->
            U_5 = (case erlang:is_map(H_4) of true -> maps:get(0, H_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(H_4) + 0 + 1, H_4); _ -> mochi_nth(0 + 1, H_4) end end),
            H_5 = (case erlang:is_binary(H_4) of true -> string:substr(H_4, 1 + 1, (erlang:length(H_4) - 1)); _ -> lists:sublist(H_4, (1 + 1), (erlang:length(H_4) - 1)) end),
            Known_4 = lists:append((case Known_3 of nil -> []; _ -> Known_3 end), [U_5]),
            Fun_9 = fun Fun_9_loop(List, Dist_7, Graph_3, H_5, I_8, Known_4, N_2, Parent_6, S_2, U_5) ->
    case List of
        [] -> {Dist_7, Graph_3, H_5, I_8, Known_4, N_2, Parent_6, S_2, U_5};
        [E_2|E_2_rest] ->
            V_4 = (case erlang:is_map(E_2) of true -> maps:get(0, E_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(E_2) + 0 + 1, E_2); _ -> mochi_nth(0 + 1, E_2) end end),
            W_3 = (case erlang:is_map(E_2) of true -> maps:get(1, E_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(E_2) + 1 + 1, E_2); _ -> mochi_nth(1 + 1, E_2) end end),
            Cur_2 = (case maps:is_key(V_4, Dist_7) of
    true -> maps:get(V_4, Dist_7, nil);
    _ -> 1000000000
end),
            case (mochi_not(in_list(Known_4, V_4)) andalso (W_3 < Cur_2)) of
        true -> Dist_8 = maps:put(V_4, W_3, Dist_7),
            Parent_7 = maps:put(V_4, U_5, Parent_6),
            Dist_9 = Dist_8,
            Parent_8 = Parent_7;
        _ -> Dist_9 = Dist_7,
            Parent_8 = Parent_6
    end,
            Fun_9_loop(E_2_rest, Dist_9, Graph_3, H_5, I_8, Known_4, N_2, Parent_8, S_2, U_5);
        _ -> {Dist_7, Graph_3, H_5, I_8, Known_4, N_2, Parent_6, S_2, U_5}
    end
end,
{Dist_9, Graph_3, H_5, I_8, Known_4, N_2, Parent_8, S_2, U_5} = Fun_9(maps:get(U_5, Graph_3, nil), Dist_7, Graph_3, H_5, I_8, Known_4, N_2, Parent_6, S_2, U_5),
            H_6 = sort_heap(H_5, Dist_9),
            Fun_10_loop(Dist_9, Graph_3, H_6, I_8, Known_4, N_2, Parent_8, S_2);
        _ -> {Dist_7, Graph_3, H_4, I_8, Known_3, N_2, Parent_6, S_2}
    end
end,
{Dist_9, Graph_3, H_6, I_8, Known_4, N_2, Parent_8, S_2} = Fun_10(Dist_7, Graph_3, H_4, I_8, Known_3, N_2, Parent_6, S_2),
        Edges_4 = [],
        J_5 = 0,
        Fun_11 = fun Fun_11_loop(Dist_9, Edges_4, Graph_3, H_6, I_8, J_5, Known_4, N_2, Parent_8, S_2) ->
    case (J_5 < N_2) of
        true ->
            case (J_5 /= S_2) of
        true -> Edges_5 = lists:append((case Edges_4 of nil -> []; _ -> Edges_4 end), [[(J_5 + 1), ((case erlang:is_map(Parent_8) of true -> maps:get(J_5, Parent_8, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Parent_8) + J_5 + 1, Parent_8); _ -> mochi_nth(J_5 + 1, Parent_8) end end) + 1)]]),
            Edges_6 = Edges_5;
        _ -> Edges_6 = Edges_4
    end,
            J_6 = (J_5 + 1),
            Fun_11_loop(Dist_9, Edges_6, Graph_3, H_6, I_8, J_6, Known_4, N_2, Parent_8, S_2);
        _ -> {Dist_9, Edges_4, Graph_3, H_6, I_8, J_5, Known_4, N_2, Parent_8, S_2}
    end
end,
{Dist_9, Edges_6, Graph_3, H_6, I_8, J_6, Known_4, N_2, Parent_8, S_2} = Fun_11(Dist_9, Edges_4, Graph_3, H_6, I_8, J_5, Known_4, N_2, Parent_8, S_2),
        Edges_6
    catch {return, RetCatch} -> RetCatch end.

print_edges(Edges_7) ->
    try
        I_9 = 0,
        Fun_12 = fun Fun_12_loop(Edges_7, I_9) ->
    case (I_9 < erlang:length(Edges_7)) of
        true ->
            E_3 = (case erlang:is_map(Edges_7) of true -> maps:get(I_9, Edges_7, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Edges_7) + I_9 + 1, Edges_7); _ -> mochi_nth(I_9 + 1, Edges_7) end end),
            io:format("~ts~n", [mochi_repr((((("(" ++ mochi_str((case erlang:is_map(E_3) of true -> maps:get(0, E_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(E_3) + 0 + 1, E_3); _ -> mochi_nth(0 + 1, E_3) end end))) ++ ", ") ++ mochi_str((case erlang:is_map(E_3) of true -> maps:get(1, E_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(E_3) + 1 + 1, E_3); _ -> mochi_nth(1 + 1, E_3) end end))) ++ ")"))]),
            I_10 = (I_9 + 1),
            Fun_12_loop(Edges_7, I_10);
        _ -> {Edges_7, I_9}
    end
end,
{Edges_7, I_10} = Fun_12(Edges_7, I_9),
        nil
    catch {return, RetCatch} -> RetCatch end.

test_vector() ->
    try
        X_2 = 5,
        G = #{},
        I_11 = 0,
        Fun_13 = fun Fun_13_loop(G, I_11, X_2) ->
    case (I_11 < X_2) of
        true ->
            G_2 = maps:put(I_11, [], G),
            I_12 = (I_11 + 1),
            Fun_13_loop(G_2, I_12, X_2);
        _ -> {G, I_11, X_2}
    end
end,
{G_2, I_12, X_2} = Fun_13(G, I_11, X_2),
        G_3 = connect(G_2, 1, 2, 15),
        G_4 = connect(G_3, 1, 3, 12),
        G_5 = connect(G_4, 2, 4, 13),
        G_6 = connect(G_5, 2, 5, 5),
        G_7 = connect(G_6, 3, 2, 6),
        G_8 = connect(G_7, 3, 4, 6),
        Mst = prim(G_8, 0, X_2),
        print_edges(Mst),
        Mst_heap = prim_heap(G_8, 0, X_2),
        print_edges(Mst_heap),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('INF', 1000000000),
    test_vector(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
