#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, sort_edges/1, find/2, kruskal/2, edges_equal/2, main/0]).

% Generated by Mochi transpiler v0.10.66 (8fdd1fe3d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

sort_edges(Edges) ->
    try
        Es = Edges,
        I = 0,
        Fun_2 = fun Fun_2_loop(Edges, Es, I) ->
    case (I < erlang:length(Es)) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Edges, Es, I, J) ->
    case (J < ((erlang:length(Es) - I) - 1)) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(Es) of true -> maps:get(J, Es, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Es) + J + 1, Es); _ -> mochi_nth(J + 1, Es) end end)) of true -> maps:get(2, (case erlang:is_map(Es) of true -> maps:get(J, Es, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Es) + J + 1, Es); _ -> mochi_nth(J + 1, Es) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Es) of true -> maps:get(J, Es, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Es) + J + 1, Es); _ -> mochi_nth(J + 1, Es) end end)) + 2 + 1, (case erlang:is_map(Es) of true -> maps:get(J, Es, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Es) + J + 1, Es); _ -> mochi_nth(J + 1, Es) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Es) of true -> maps:get(J, Es, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Es) + J + 1, Es); _ -> mochi_nth(J + 1, Es) end end)) end end) > (case erlang:is_map((case erlang:is_map(Es) of true -> maps:get((J + 1), Es, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Es) + (J + 1) + 1, Es); _ -> mochi_nth((J + 1) + 1, Es) end end)) of true -> maps:get(2, (case erlang:is_map(Es) of true -> maps:get((J + 1), Es, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Es) + (J + 1) + 1, Es); _ -> mochi_nth((J + 1) + 1, Es) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Es) of true -> maps:get((J + 1), Es, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Es) + (J + 1) + 1, Es); _ -> mochi_nth((J + 1) + 1, Es) end end)) + 2 + 1, (case erlang:is_map(Es) of true -> maps:get((J + 1), Es, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Es) + (J + 1) + 1, Es); _ -> mochi_nth((J + 1) + 1, Es) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Es) of true -> maps:get((J + 1), Es, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Es) + (J + 1) + 1, Es); _ -> mochi_nth((J + 1) + 1, Es) end end)) end end)) of
        true -> Tmp = (case erlang:is_map(Es) of true -> maps:get(J, Es, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Es) + J + 1, Es); _ -> mochi_nth(J + 1, Es) end end),
            Es_2 = lists:sublist(Es, J) ++ [(case erlang:is_map(Es) of true -> maps:get((J + 1), Es, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Es) + (J + 1) + 1, Es); _ -> mochi_nth((J + 1) + 1, Es) end end)] ++ lists:nthtail(J + 1, Es),
            Es_3 = lists:sublist(Es_2, (J + 1)) ++ [Tmp] ++ lists:nthtail((J + 1) + 1, Es_2),
            Es_4 = Es_3,
            Tmp_2 = Tmp;
        _ -> Es_4 = Es,
            Tmp_2 = nil
    end,
            J_2 = (J + 1),
            Fun_loop(Edges, Es_4, I, J_2);
        _ -> {Edges, Es, I, J}
    end
end,
{Edges, Es_4, I, J_2} = Fun(Edges, Es, I, J),
            I_2 = (I + 1),
            Fun_2_loop(Edges, Es_4, I_2);
        _ -> {Edges, Es, I}
    end
end,
{Edges, Es_4, I_2} = Fun_2(Edges, Es, I),
        Es_4
    catch {return, RetCatch} -> RetCatch end.

find(Parent, X) ->
    try
        R = X,
        Fun_3 = fun Fun_3_loop(Parent, R, X) ->
    case ((case erlang:is_map(Parent) of true -> maps:get(R, Parent, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Parent) + R + 1, Parent); _ -> mochi_nth(R + 1, Parent) end end) /= R) of
        true ->
            R_2 = (case erlang:is_map(Parent) of true -> maps:get(R, Parent, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Parent) + R + 1, Parent); _ -> mochi_nth(R + 1, Parent) end end),
            Fun_3_loop(Parent, R_2, X);
        _ -> {Parent, R, X}
    end
end,
{Parent, R_2, X} = Fun_3(Parent, R, X),
        R_2
    catch {return, RetCatch} -> RetCatch end.

kruskal(N, Edges_2) ->
    try
        Parent_2 = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Edges_2, I_3, N, Parent_2) ->
    case (I_3 < N) of
        true ->
            Parent_3 = lists:append((case Parent_2 of nil -> []; _ -> Parent_2 end), [I_3]),
            I_4 = (I_3 + 1),
            Fun_4_loop(Edges_2, I_4, N, Parent_3);
        _ -> {Edges_2, I_3, N, Parent_2}
    end
end,
{Edges_2, I_4, N, Parent_3} = Fun_4(Edges_2, I_3, N, Parent_2),
        Sorted = sort_edges(Edges_2),
        Mst = [],
        E = 0,
        Fun_5 = fun Fun_5_loop(E, Edges_2, I_4, Mst, N, Parent_3, Sorted) ->
    case (E < erlang:length(Sorted)) of
        true ->
            try
                case (erlang:length(Mst) == (N - 1)) of
        true -> throw({break, E, Edges_2, I_4, Mst, N, Parent_3, Sorted});
        _ -> ok
    end,
                Edge = (case erlang:is_map(Sorted) of true -> maps:get(E, Sorted, nil); _ -> case E < 0 of true -> mochi_nth(erlang:length(Sorted) + E + 1, Sorted); _ -> mochi_nth(E + 1, Sorted) end end),
                E_2 = (E + 1),
                U = (case erlang:is_map(Edge) of true -> maps:get(0, Edge, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Edge) + 0 + 1, Edge); _ -> mochi_nth(0 + 1, Edge) end end),
                V = (case erlang:is_map(Edge) of true -> maps:get(1, Edge, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Edge) + 1 + 1, Edge); _ -> mochi_nth(1 + 1, Edge) end end),
                W = (case erlang:is_map(Edge) of true -> maps:get(2, Edge, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Edge) + 2 + 1, Edge); _ -> mochi_nth(2 + 1, Edge) end end),
                Ru = find(Parent_3, U),
                Rv = find(Parent_3, V),
                case (Ru /= Rv) of
        true -> Parent_4 = lists:sublist(Parent_3, Ru) ++ [Rv] ++ lists:nthtail(Ru + 1, Parent_3),
            Mst_2 = lists:append((case Mst of nil -> []; _ -> Mst end), [[U, V, W]]),
            Mst_3 = Mst_2,
            Parent_5 = Parent_4;
        _ -> Mst_3 = Mst,
            Parent_5 = Parent_3
    end,
                Fun_5_loop(E_2, Edges_2, I_4, Mst_3, N, Parent_5, Sorted)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_5_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {E, Edges_2, I_4, Mst, N, Parent_3, Sorted}
    end
end,
{E_2, Edges_2, I_4, Mst_3, N, Parent_5, Sorted} = Fun_5(E, Edges_2, I_4, Mst, N, Parent_3, Sorted),
        Mst_3
    catch {return, RetCatch} -> RetCatch end.

edges_equal(A, B) ->
    try
        case (erlang:length(A) /= erlang:length(B)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(A, B, I_5) ->
    case (I_5 < erlang:length(A)) of
        true ->
            E1 = (case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end),
            E2 = (case erlang:is_map(B) of true -> maps:get(I_5, B, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(B) + I_5 + 1, B); _ -> mochi_nth(I_5 + 1, B) end end),
            case ((((case erlang:is_map(E1) of true -> maps:get(0, E1, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(E1) + 0 + 1, E1); _ -> mochi_nth(0 + 1, E1) end end) /= (case erlang:is_map(E2) of true -> maps:get(0, E2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(E2) + 0 + 1, E2); _ -> mochi_nth(0 + 1, E2) end end)) orelse ((case erlang:is_map(E1) of true -> maps:get(1, E1, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(E1) + 1 + 1, E1); _ -> mochi_nth(1 + 1, E1) end end) /= (case erlang:is_map(E2) of true -> maps:get(1, E2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(E2) + 1 + 1, E2); _ -> mochi_nth(1 + 1, E2) end end))) orelse ((case erlang:is_map(E1) of true -> maps:get(2, E1, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(E1) + 2 + 1, E1); _ -> mochi_nth(2 + 1, E1) end end) /= (case erlang:is_map(E2) of true -> maps:get(2, E2, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(E2) + 2 + 1, E2); _ -> mochi_nth(2 + 1, E2) end end))) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_6_loop(A, B, I_6);
        _ -> {A, B, I_5}
    end
end,
{A, B, I_6} = Fun_6(A, B, I_5),
        true
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Num_nodes = 9,
        Edges_3 = [[0, 1, 4], [0, 7, 8], [1, 2, 8], [7, 8, 7], [7, 6, 1], [2, 8, 2], [8, 6, 6], [2, 3, 7], [2, 5, 4], [6, 5, 2], [3, 5, 14], [3, 4, 9], [5, 4, 10], [1, 7, 11]],
        Expected = [[7, 6, 1], [2, 8, 2], [6, 5, 2], [0, 1, 4], [2, 5, 4], [2, 3, 7], [0, 7, 8], [3, 4, 9]],
        Result = kruskal(9, Edges_3),
        Sorted_result = sort_edges(Result),
        Sorted_expected = sort_edges(Expected),
        io:format("~ts~n", [mochi_str(Sorted_result)]),
        case edges_equal(Sorted_expected, Sorted_result) of
        true -> io:format("~ts~n", [mochi_repr(true)]);
        _ -> io:format("~ts~n", [mochi_repr(false)])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
