#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, prims_algorithm/1, test_prim_successful_result/0]).

% Generated by Mochi transpiler v0.10.66 (8fdd1fe3d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

prims_algorithm(Adjacency) ->
    try
        Visited = #{},
        Visited_2 = maps:put(0, true, Visited),
        Mst = [],
        Count = 1,
        Total = 0,
        Fun = fun Fun_loop(List, Adjacency, Count, Mst, Total, Visited_2) ->
    case List of
        [] -> {Adjacency, Count, Mst, Total, Visited_2};
        [K|K_rest] ->
            Total_2 = (Total + 1),
            Fun_loop(K_rest, Adjacency, Count, Mst, Total_2, Visited_2);
        _ -> {Adjacency, Count, Mst, Total, Visited_2}
    end
end,
{Adjacency, Count, Mst, Total_2, Visited_2} = Fun(maps:keys(Adjacency), Adjacency, Count, Mst, Total, Visited_2),
        Fun_5 = fun Fun_5_loop(Adjacency, Count, Mst, Total_2, Visited_2) ->
    case (Count < Total_2) of
        true ->
            Best_u = 0,
            Best_v = 0,
            Best_cost = 2147483647,
            Fun_2 = fun Fun_2_loop(List, Adjacency, Best_cost, Best_u, Best_v, Count, Mst, Total_2, Visited_2) ->
    case List of
        [] -> {Adjacency, Best_cost, Best_u, Best_v, Count, Mst, Total_2, Visited_2};
        [U_str|U_str_rest] ->
            U = mochi_to_int(U_str),
            case maps:get(U, Visited_2, nil) of
        true -> Fun_3 = fun Fun_3_loop(List, Adjacency, Best_cost, Best_u, Best_v, Count, Mst, Total_2, U, U_str, Visited_2) ->
    case List of
        [] -> {Adjacency, Best_cost, Best_u, Best_v, Count, Mst, Total_2, U, U_str, Visited_2};
        [N|N_rest] ->
            case (mochi_not(maps:get(maps:get("node", N, nil), Visited_2, nil)) andalso (maps:get("cost", N, nil) < Best_cost)) of
        true -> Best_cost_2 = maps:get("cost", N, nil),
            Best_u_2 = U,
            Best_v_2 = maps:get("node", N, nil),
            Best_cost_3 = Best_cost_2,
            Best_u_3 = Best_u_2,
            Best_v_3 = Best_v_2;
        _ -> Best_cost_3 = Best_cost,
            Best_u_3 = Best_u,
            Best_v_3 = Best_v
    end,
            Fun_3_loop(N_rest, Adjacency, Best_cost_3, Best_u_3, Best_v_3, Count, Mst, Total_2, U, U_str, Visited_2);
        _ -> {Adjacency, Best_cost, Best_u, Best_v, Count, Mst, Total_2, U, U_str, Visited_2}
    end
end,
{Adjacency, Best_cost_3, Best_u_3, Best_v_3, Count, Mst, Total_2, U, U_str, Visited_2} = Fun_3(maps:get(U, Adjacency, nil), Adjacency, Best_cost, Best_u, Best_v, Count, Mst, Total_2, U, U_str, Visited_2),
            Best_cost_4 = Best_cost_3,
            Best_u_4 = Best_u_3,
            Best_v_4 = Best_v_3,
            Fun_4 = Fun_3;
        _ -> Best_cost_4 = Best_cost,
            Best_u_4 = Best_u,
            Best_v_4 = Best_v,
            Fun_4 = Fun
    end,
            Fun_2_loop(U_str_rest, Adjacency, Best_cost_4, Best_u_4, Best_v_4, Count, Mst, Total_2, Visited_2);
        _ -> {Adjacency, Best_cost, Best_u, Best_v, Count, Mst, Total_2, Visited_2}
    end
end,
{Adjacency, Best_cost_4, Best_u_4, Best_v_4, Count, Mst, Total_2, Visited_2} = Fun_2(maps:keys(Adjacency), Adjacency, Best_cost, Best_u, Best_v, Count, Mst, Total_2, Visited_2),
            Visited_3 = maps:put(Best_v_4, true, Visited_2),
            Mst_2 = lists:append((case Mst of nil -> []; _ -> Mst end), [#{"u" => Best_u_4, "v" => Best_v_4}]),
            Count_2 = (Count + 1),
            Fun_5_loop(Adjacency, Count_2, Mst_2, Total_2, Visited_3);
        _ -> {Adjacency, Count, Mst, Total_2, Visited_2}
    end
end,
{Adjacency, Count_2, Mst_2, Total_2, Visited_3} = Fun_5(Adjacency, Count, Mst, Total_2, Visited_2),
        Mst_2
    catch {return, RetCatch} -> RetCatch end.

test_prim_successful_result() ->
    try
        Edges = [[0, 1, 4], [0, 7, 8], [1, 2, 8], [7, 8, 7], [7, 6, 1], [2, 8, 2], [8, 6, 6], [2, 3, 7], [2, 5, 4], [6, 5, 2], [3, 5, 14], [3, 4, 9], [5, 4, 10], [1, 7, 11]],
        Adjacency_2 = #{},
        Fun_6 = fun Fun_6_loop(List, Adjacency_2, Edges) ->
    case List of
        [] -> {Adjacency_2, Edges};
        [E|E_rest] ->
            U_2 = (case erlang:is_map(E) of true -> maps:get(0, E, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(E) + 0 + 1, E); _ -> mochi_nth(0 + 1, E) end end),
            V = (case erlang:is_map(E) of true -> maps:get(1, E, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(E) + 1 + 1, E); _ -> mochi_nth(1 + 1, E) end end),
            W = (case erlang:is_map(E) of true -> maps:get(2, E, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(E) + 2 + 1, E); _ -> mochi_nth(2 + 1, E) end end),
            case mochi_not(maps:is_key(U_2, Adjacency_2)) of
        true -> Adjacency_3 = maps:put(U_2, [], Adjacency_2),
            Adjacency_4 = Adjacency_3;
        _ -> Adjacency_4 = Adjacency_2
    end,
            case mochi_not(maps:is_key(V, Adjacency_4)) of
        true -> Adjacency_5 = maps:put(V, [], Adjacency_4),
            Adjacency_6 = Adjacency_5;
        _ -> Adjacency_6 = Adjacency_4
    end,
            Adjacency_7 = maps:put(U_2, lists:append((case maps:get(U_2, Adjacency_6, nil) of nil -> []; _ -> maps:get(U_2, Adjacency_6, nil) end), [#{"node" => V, "cost" => W}]), Adjacency_6),
            Adjacency_8 = maps:put(V, lists:append((case maps:get(V, Adjacency_7, nil) of nil -> []; _ -> maps:get(V, Adjacency_7, nil) end), [#{"node" => U_2, "cost" => W}]), Adjacency_7),
            Fun_6_loop(E_rest, Adjacency_8, Edges);
        _ -> {Adjacency_2, Edges}
    end
end,
{Adjacency_8, Edges} = Fun_6(Edges, Adjacency_2, Edges),
        Result = prims_algorithm(Adjacency_8),
        Seen = #{},
        Fun_7 = fun Fun_7_loop(List, Adjacency_8, Edges, Result, Seen) ->
    case List of
        [] -> {Adjacency_8, Edges, Result, Seen};
        [E_2|E_2_rest] ->
            Key1 = ((mochi_str(maps:get("u", E_2, nil)) ++ ",") ++ mochi_str(maps:get("v", E_2, nil))),
            Key2 = ((mochi_str(maps:get("v", E_2, nil)) ++ ",") ++ mochi_str(maps:get("u", E_2, nil))),
            Seen_2 = maps:put(Key1, true, Seen),
            Seen_3 = maps:put(Key2, true, Seen_2),
            Fun_7_loop(E_2_rest, Adjacency_8, Edges, Result, Seen_3);
        _ -> {Adjacency_8, Edges, Result, Seen}
    end
end,
{Adjacency_8, Edges, Result, Seen_3} = Fun_7(Result, Adjacency_8, Edges, Result, Seen),
        Expected = [[7, 6, 1], [2, 8, 2], [6, 5, 2], [0, 1, 4], [2, 5, 4], [2, 3, 7], [0, 7, 8], [3, 4, 9]],
        Fun_8 = fun Fun_8_loop(List, Adjacency_8, Edges, Expected, Result, Seen_3) ->
    case List of
        [] -> {Adjacency_8, Edges, Expected, Result, Seen_3};
        [Ans|Ans_rest] ->
            Key = ((mochi_str((case erlang:is_map(Ans) of true -> maps:get(0, Ans, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Ans) + 0 + 1, Ans); _ -> mochi_nth(0 + 1, Ans) end end)) ++ ",") ++ mochi_str((case erlang:is_map(Ans) of true -> maps:get(1, Ans, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Ans) + 1 + 1, Ans); _ -> mochi_nth(1 + 1, Ans) end end))),
            case mochi_not(maps:get(Key, Seen_3, nil)) of
        true -> throw({return, false});
        _ -> ok
    end,
            Fun_8_loop(Ans_rest, Adjacency_8, Edges, Expected, Result, Seen_3);
        _ -> {Adjacency_8, Edges, Expected, Result, Seen_3}
    end
end,
{Adjacency_8, Edges, Expected, Result, Seen_3} = Fun_8(Expected, Adjacency_8, Edges, Expected, Result, Seen_3),
        true
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(test_prim_successful_result())]),
    io:format("~ts~n", [mochi_repr(true)]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
