#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, dfs/2, even_tree/0, main/0]).

% Generated by Mochi transpiler v0.10.65 (428ea06e9a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

dfs(Start, Visited) ->
    try
        Size = 1,
        Cuts = 0,
        Visited_2 = maps:put(Start, true, Visited),
        Fun = fun Fun_loop(List, Cuts, Size, Start, Visited_2) ->
    case List of
        [] -> {Cuts, Size, Start, Visited_2};
        [V|V_rest] ->
            case mochi_not(maps:is_key(V, Visited_2)) of
        true -> Res = dfs(V, Visited_2),
            Size_2 = (Size + (case erlang:is_map(Res) of true -> maps:get(0, Res, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res) + 0 + 1, Res); _ -> mochi_nth(0 + 1, Res) end end)),
            Cuts_2 = (Cuts + (case erlang:is_map(Res) of true -> maps:get(1, Res, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Res) + 1 + 1, Res); _ -> mochi_nth(1 + 1, Res) end end)),
            Cuts_3 = Cuts_2,
            Res_2 = Res,
            Size_3 = Size_2;
        _ -> Cuts_3 = Cuts,
            Res_2 = nil,
            Size_3 = Size
    end,
            Fun_loop(V_rest, Cuts_3, Size_3, Start, Visited_2);
        _ -> {Cuts, Size, Start, Visited_2}
    end
end,
{Cuts_3, Size_3, Start, Visited_2} = Fun(maps:get(Start, erlang:get('tree'), nil), Cuts, Size, Start, Visited_2),
        case (mochi_mod(Size_3, 2) == 0) of
        true -> Cuts_4 = (Cuts_3 + 1),
            Cuts_5 = Cuts_4;
        _ -> Cuts_5 = Cuts_3
    end,
        [Size_3, Cuts_5]
    catch {return, RetCatch} -> RetCatch end.

even_tree() ->
    try
        Visited_3 = #{},
        Res_3 = dfs(1, Visited_3),
        ((case erlang:is_map(Res_3) of true -> maps:get(1, Res_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Res_3) + 1 + 1, Res_3); _ -> mochi_nth(1 + 1, Res_3) end end) - 1)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Edges = [[2, 1], [3, 1], [4, 3], [5, 2], [6, 1], [7, 2], [8, 6], [9, 8], [10, 8]],
        I = 0,
        Fun_2 = fun Fun_2_loop(Edges, I) ->
    case (I < erlang:length(Edges)) of
        true ->
            U = (case erlang:is_map((case erlang:is_map(Edges) of true -> maps:get(I, Edges, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Edges) + I + 1, Edges); _ -> mochi_nth(I + 1, Edges) end end)) of true -> maps:get(0, (case erlang:is_map(Edges) of true -> maps:get(I, Edges, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Edges) + I + 1, Edges); _ -> mochi_nth(I + 1, Edges) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Edges) of true -> maps:get(I, Edges, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Edges) + I + 1, Edges); _ -> mochi_nth(I + 1, Edges) end end)) + 0 + 1, (case erlang:is_map(Edges) of true -> maps:get(I, Edges, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Edges) + I + 1, Edges); _ -> mochi_nth(I + 1, Edges) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Edges) of true -> maps:get(I, Edges, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Edges) + I + 1, Edges); _ -> mochi_nth(I + 1, Edges) end end)) end end),
            V_2 = (case erlang:is_map((case erlang:is_map(Edges) of true -> maps:get(I, Edges, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Edges) + I + 1, Edges); _ -> mochi_nth(I + 1, Edges) end end)) of true -> maps:get(1, (case erlang:is_map(Edges) of true -> maps:get(I, Edges, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Edges) + I + 1, Edges); _ -> mochi_nth(I + 1, Edges) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Edges) of true -> maps:get(I, Edges, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Edges) + I + 1, Edges); _ -> mochi_nth(I + 1, Edges) end end)) + 1 + 1, (case erlang:is_map(Edges) of true -> maps:get(I, Edges, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Edges) + I + 1, Edges); _ -> mochi_nth(I + 1, Edges) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Edges) of true -> maps:get(I, Edges, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Edges) + I + 1, Edges); _ -> mochi_nth(I + 1, Edges) end end)) end end),
            case mochi_not(maps:is_key(U, erlang:get('tree'))) of
        true -> Tree_tmp = lists:sublist(erlang:get('tree'), U) ++ [[]] ++ lists:nthtail(U + 1, erlang:get('tree')),
            erlang:put('tree', Tree_tmp),
            Tree_tmp_2 = Tree_tmp;
        _ -> Tree_tmp_2 = nil
    end,
            case mochi_not(maps:is_key(V_2, erlang:get('tree'))) of
        true -> Tree_tmp_3 = lists:sublist(erlang:get('tree'), V_2) ++ [[]] ++ lists:nthtail(V_2 + 1, erlang:get('tree')),
            erlang:put('tree', Tree_tmp_3),
            Tree_tmp_4 = Tree_tmp_3;
        _ -> Tree_tmp_4 = Tree_tmp_2
    end,
            Tree_tmp_5 = lists:sublist(erlang:get('tree'), U) ++ [lists:append((case maps:get(U, erlang:get('tree'), nil) of nil -> []; _ -> maps:get(U, erlang:get('tree'), nil) end), [V_2])] ++ lists:nthtail(U + 1, erlang:get('tree')),
            erlang:put('tree', Tree_tmp_5),
            Tree_tmp_6 = lists:sublist(erlang:get('tree'), V_2) ++ [lists:append((case maps:get(V_2, erlang:get('tree'), nil) of nil -> []; _ -> maps:get(V_2, erlang:get('tree'), nil) end), [U])] ++ lists:nthtail(V_2 + 1, erlang:get('tree')),
            erlang:put('tree', Tree_tmp_6),
            I_2 = (I + 1),
            Fun_2_loop(Edges, I_2);
        _ -> {Edges, I}
    end
end,
{Edges, I_2} = Fun_2(Edges, I),
        io:format("~ts~n", [mochi_str(even_tree())]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('tree', #{}),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
