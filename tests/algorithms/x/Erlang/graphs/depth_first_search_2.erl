#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, add_edge/3, list_to_string/1, list_to_arrow/1, print_graph/1, dfs_recursive/4, dfs/1]).

% Generated by Mochi transpiler v0.10.73 (56e75d8a7a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

add_edge(G, From_vertex, To_vertex) ->
    try
        V = maps:get("vertex", G, nil),
        V_4 = (case maps:is_key(From_vertex, V) of
        true -> Lst = maps:get(From_vertex, V, nil),
            Lst_2 = lists:append((case Lst of nil -> []; _ -> Lst end), [To_vertex]),
            V_2 = maps:put(From_vertex, Lst_2, V),
            Lst_3 = Lst_2,
            V_2;
        _ -> V_3 = maps:put(From_vertex, [To_vertex], V),
            Lst_3 = nil,
            V_3
    end),
        G_2 = maps:put("vertex", V_4, G),
        G_4 = (case ((From_vertex + 1) > maps:get("size", G_2, nil)) of
        true -> G_3 = maps:put("size", (From_vertex + 1), G_2),
            G_3;
        _ -> G_2
    end),
        G_6 = (case ((To_vertex + 1) > maps:get("size", G_4, nil)) of
        true -> G_5 = maps:put("size", (To_vertex + 1), G_4),
            G_5;
        _ -> G_4
    end),
        G_6
    catch {return, RetCatch} -> RetCatch end.

list_to_string(Lst_4) ->
    try
        Res = "",
        I = 0,
        Fun = fun Fun_loop(I, Lst_4, Res) ->
    case (I < erlang:length(Lst_4)) of
        true ->
            Res_2 = (Res ++ mochi_str((case erlang:is_map(Lst_4) of true -> maps:get(I, Lst_4, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Lst_4) + I + 1, Lst_4); _ -> mochi_nth(I + 1, Lst_4) end end))),
            Res_4 = (case (I < (erlang:length(Lst_4) - 1)) of
        true -> Res_3 = (Res_2 ++ " "),
            Res_3;
        _ -> Res_2
    end),
            I_2 = (I + 1),
            Fun_loop(I_2, Lst_4, Res_4);
        _ -> {I, Lst_4, Res}
    end
end,
{I_2, Lst_4, Res_4} = Fun(I, Lst_4, Res),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

list_to_arrow(Lst_5) ->
    try
        Res_5 = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Lst_5, Res_5) ->
    case (I_3 < erlang:length(Lst_5)) of
        true ->
            Res_6 = (Res_5 ++ mochi_str((case erlang:is_map(Lst_5) of true -> maps:get(I_3, Lst_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Lst_5) + I_3 + 1, Lst_5); _ -> mochi_nth(I_3 + 1, Lst_5) end end))),
            Res_8 = (case (I_3 < (erlang:length(Lst_5) - 1)) of
        true -> Res_7 = (Res_6 ++ " -> "),
            Res_7;
        _ -> Res_6
    end),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Lst_5, Res_8);
        _ -> {I_3, Lst_5, Res_5}
    end
end,
{I_4, Lst_5, Res_8} = Fun_2(I_3, Lst_5, Res_5),
        Res_8
    catch {return, RetCatch} -> RetCatch end.

print_graph(G_7) ->
    try
        io:format("~s~n", [mochi_str(maps:get("vertex", G_7, nil))]),
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(G_7, I_5) ->
    case (I_5 < maps:get("size", G_7, nil)) of
        true ->
            Edges = [],
            Edges_3 = (case maps:is_key(I_5, maps:get("vertex", G_7, nil)) of
        true -> Edges_2 = maps:get(I_5, maps:get("vertex", G_7, nil), nil),
            Edges_2;
        _ -> Edges
    end),
            Line = ((mochi_str(I_5) ++ "  ->  ") ++ list_to_arrow(Edges_3)),
            io:format("~s~n", [mochi_format(Line)]),
            I_6 = (I_5 + 1),
            Fun_3_loop(G_7, I_6);
        _ -> {G_7, I_5}
    end
end,
{G_7, I_6} = Fun_3(G_7, I_5),
        nil
    catch {return, RetCatch} -> RetCatch end.

dfs_recursive(G_8, Start_vertex, Visited, Order) ->
    try
        Visited_2 = lists:sublist(Visited, Start_vertex) ++ [true] ++ lists:nthtail(Start_vertex + 1, Visited),
        Order_2 = lists:append((case Order of nil -> []; _ -> Order end), [Start_vertex]),
        Order_5 = (case maps:is_key(Start_vertex, maps:get("vertex", G_8, nil)) of
        true -> Neighbors = maps:get(Start_vertex, maps:get("vertex", G_8, nil), nil),
            I_7 = 0,
            Fun_4 = fun Fun_4_loop(G_8, I_7, Neighbors, Order_2, Start_vertex, Visited_2) ->
    case (I_7 < maps:size(Neighbors)) of
        true ->
            Nb = maps:get(I_7, Neighbors, nil),
            Order_4 = (case mochi_not((case erlang:is_map(Visited_2) of true -> maps:get(Nb, Visited_2, nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length(Visited_2) + Nb + 1, Visited_2); _ -> mochi_nth(Nb + 1, Visited_2) end end)) of
        true -> Order_3 = dfs_recursive(G_8, Nb, Visited_2, Order_2),
            Order_3;
        _ -> Order_2
    end),
            I_8 = (I_7 + 1),
            Fun_4_loop(G_8, I_8, Neighbors, Order_4, Start_vertex, Visited_2);
        _ -> {G_8, I_7, Neighbors, Order_2, Start_vertex, Visited_2}
    end
end,
{G_8, I_8, Neighbors, Order_4, Start_vertex, Visited_2} = Fun_4(G_8, I_7, Neighbors, Order_2, Start_vertex, Visited_2),
            Fun_5 = Fun_4,
            I_9 = I_8,
            Neighbors_2 = Neighbors,
            Order_4;
        _ -> Fun_5 = nil,
            I_9 = nil,
            Neighbors_2 = nil,
            Order_2
    end),
        Order_5
    catch {return, RetCatch} -> RetCatch end.

dfs(G_9) ->
    try
        N = maps:get("size", G_9, nil),
        Visited_3 = [],
        I_10 = 0,
        Fun_6 = fun Fun_6_loop(G_9, I_10, N, Visited_3) ->
    case (I_10 < N) of
        true ->
            Visited_4 = lists:append((case Visited_3 of nil -> []; _ -> Visited_3 end), [false]),
            I_11 = (I_10 + 1),
            Fun_6_loop(G_9, I_11, N, Visited_4);
        _ -> {G_9, I_10, N, Visited_3}
    end
end,
{G_9, I_11, N, Visited_4} = Fun_6(G_9, I_10, N, Visited_3),
        Order_6 = [],
        I_12 = 0,
        Fun_7 = fun Fun_7_loop(G_9, I_12, N, Order_6, Visited_4) ->
    case (I_12 < N) of
        true ->
            Order_8 = (case mochi_not((case erlang:is_map(Visited_4) of true -> maps:get(I_12, Visited_4, nil); _ -> case I_12 < 0 of true -> mochi_nth(erlang:length(Visited_4) + I_12 + 1, Visited_4); _ -> mochi_nth(I_12 + 1, Visited_4) end end)) of
        true -> Order_7 = dfs_recursive(G_9, I_12, Visited_4, Order_6),
            Order_7;
        _ -> Order_6
    end),
            I_13 = (I_12 + 1),
            Fun_7_loop(G_9, I_13, N, Order_8, Visited_4);
        _ -> {G_9, I_12, N, Order_6, Visited_4}
    end
end,
{G_9, I_13, N, Order_8, Visited_4} = Fun_7(G_9, I_12, N, Order_6, Visited_4),
        Order_8
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('g', #{"vertex" => #{}, "size" => 0}),
    erlang:put('g', add_edge(erlang:get('g'), 0, 1)),
    erlang:put('g', add_edge(erlang:get('g'), 0, 2)),
    erlang:put('g', add_edge(erlang:get('g'), 1, 2)),
    erlang:put('g', add_edge(erlang:get('g'), 2, 0)),
    erlang:put('g', add_edge(erlang:get('g'), 2, 3)),
    erlang:put('g', add_edge(erlang:get('g'), 3, 3)),
    print_graph(erlang:get('g')),
    io:format("~s~n", [mochi_format("DFS:")]),
    io:format("~s~n", [mochi_format(list_to_string(dfs(erlang:get('g'))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
