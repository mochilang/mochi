#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, dfs/3, connected_components/1]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

dfs(Graph, Vert, Visited) ->
    try
        Visited_2 = lists:sublist(Visited, Vert) ++ [true] ++ lists:nthtail(Vert + 1, Visited),
        Connected_verts = [],
        Fun = fun Fun_loop(List, Connected_verts, Graph, Vert, Visited_2) ->
    case List of
        [] -> {Connected_verts, Graph, Vert, Visited_2};
        [Neighbour|Neighbour_rest] ->
            case mochi_not((case erlang:is_map(Visited_2) of true -> maps:get(Neighbour, Visited_2, nil); _ -> case Neighbour < 0 of true -> lists:nth(erlang:length(Visited_2) + Neighbour + 1, Visited_2); _ -> lists:nth(Neighbour + 1, Visited_2) end end)) of
        true -> Connected_verts_2 = lists:append(Connected_verts, dfs(Graph, Neighbour, Visited_2)),
            Connected_verts_3 = Connected_verts_2;
        _ -> Connected_verts_3 = Connected_verts
    end,
            Fun_loop(Neighbour_rest, Connected_verts_3, Graph, Vert, Visited_2);
        _ -> {Connected_verts, Graph, Vert, Visited_2}
    end
end,
{Connected_verts_3, Graph, Vert, Visited_2} = Fun(maps:get(Vert, Graph, nil), Connected_verts, Graph, Vert, Visited_2),
        lists:append([Vert], Connected_verts_3)
    catch {return, Ret} -> Ret end.

connected_components(Graph_2) ->
    try
        Graph_size = maps:size(Graph_2),
        Visited_3 = [],
        Fun_2 = fun Fun_2_loop(List, Graph_2, Graph_size, Visited_3) ->
    case List of
        [] -> {Graph_2, Graph_size, Visited_3};
        [_|__rest] ->
            Visited_4 = lists:append((case Visited_3 of nil -> []; _ -> Visited_3 end), [false]),
            Fun_2_loop(__rest, Graph_2, Graph_size, Visited_4);
        _ -> {Graph_2, Graph_size, Visited_3}
    end
end,
{Graph_2, Graph_size, Visited_4} = Fun_2(lists:seq(0, (Graph_size) - 1), Graph_2, Graph_size, Visited_3),
        Components_list = [],
        Fun_3 = fun Fun_3_loop(List, Components_list, Graph_2, Graph_size, Visited_4) ->
    case List of
        [] -> {Components_list, Graph_2, Graph_size, Visited_4};
        [I|I_rest] ->
            case mochi_not((case erlang:is_map(Visited_4) of true -> maps:get(I, Visited_4, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Visited_4) + I + 1, Visited_4); _ -> lists:nth(I + 1, Visited_4) end end)) of
        true -> Component = dfs(Graph_2, I, Visited_4),
            Components_list_2 = lists:append((case Components_list of nil -> []; _ -> Components_list end), [Component]),
            Component_2 = Component,
            Components_list_3 = Components_list_2;
        _ -> Component_2 = nil,
            Components_list_3 = Components_list
    end,
            Fun_3_loop(I_rest, Components_list_3, Graph_2, Graph_size, Visited_4);
        _ -> {Components_list, Graph_2, Graph_size, Visited_4}
    end
end,
{Components_list_3, Graph_2, Graph_size, Visited_4} = Fun_3(lists:seq(0, (Graph_size) - 1), Components_list, Graph_2, Graph_size, Visited_4),
        Components_list_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('test_graph_1', #{0 => [1, 2], 1 => [0, 3], 2 => [0], 3 => [1], 4 => [5, 6], 5 => [4, 6], 6 => [4, 5]}),
    erlang:put('test_graph_2', #{0 => [1, 2, 3], 1 => [0, 3], 2 => [0], 3 => [0, 1], 4 => [], 5 => []}),
    io:format("~ts~n", [mochi_str(connected_components(erlang:get('test_graph_1')))]),
    io:format("~ts~n", [mochi_str(connected_components(erlang:get('test_graph_2')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
