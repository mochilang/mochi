#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, remove_value/2, greedy_min_vertex_cover/1]).

% Generated by Mochi transpiler v0.10.65 (f942880281) on 2025-08-13 16:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

remove_value(Lst, Val) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, Lst, Res, Val) ->
    case (I < erlang:length(Lst)) of
        true ->
            case ((case erlang:is_map(Lst) of true -> maps:get(I, Lst, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Lst) + I + 1, Lst); _ -> mochi_nth(I + 1, Lst) end end) /= Val) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Lst) of true -> maps:get(I, Lst, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Lst) + I + 1, Lst); _ -> mochi_nth(I + 1, Lst) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Lst, Res_3, Val);
        _ -> {I, Lst, Res, Val}
    end
end,
{I_2, Lst, Res_3, Val} = Fun(I, Lst, Res, Val),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

greedy_min_vertex_cover(Graph) ->
    try
        G = Graph,
        Cover = [],
        Fun_4 = fun Fun_4_loop(Cover, G, Graph) ->
    case true of
        true ->
            try
                Max_v = 0,
                Max_deg = 0,
                Fun_2 = fun Fun_2_loop(List, Cover, G, Graph, Max_deg, Max_v) ->
    case List of
        [] -> {Cover, G, Graph, Max_deg, Max_v};
        [V|V_rest] ->
            Key = mochi_to_int(V),
            Deg = erlang:length(maps:get(Key, G, nil)),
            case (Deg > Max_deg) of
        true -> Max_deg_2 = Deg,
            Max_v_2 = Key,
            Max_deg_3 = Max_deg_2,
            Max_v_3 = Max_v_2;
        _ -> Max_deg_3 = Max_deg,
            Max_v_3 = Max_v
    end,
            Fun_2_loop(V_rest, Cover, G, Graph, Max_deg_3, Max_v_3);
        _ -> {Cover, G, Graph, Max_deg, Max_v}
    end
end,
{Cover, G, Graph, Max_deg_3, Max_v_3} = Fun_2(maps:keys(G), Cover, G, Graph, Max_deg, Max_v),
                case (Max_deg_3 == 0) of
        true -> throw({break, Cover, G, Graph});
        _ -> ok
    end,
                Cover_2 = lists:append((case Cover of nil -> []; _ -> Cover end), [Max_v_3]),
                Neighbors = maps:get(Max_v_3, G, nil),
                I_3 = 0,
                Fun_3 = fun Fun_3_loop(Cover_2, G, Graph, I_3, Max_deg_3, Max_v_3, Neighbors) ->
    case (I_3 < erlang:length(Neighbors)) of
        true ->
            N = (case erlang:is_map(Neighbors) of true -> maps:get(I_3, Neighbors, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Neighbors) + I_3 + 1, Neighbors); _ -> mochi_nth(I_3 + 1, Neighbors) end end),
            G_2 = maps:put(N, remove_value(maps:get(N, G, nil), Max_v_3), G),
            I_4 = (I_3 + 1),
            Fun_3_loop(Cover_2, G_2, Graph, I_4, Max_deg_3, Max_v_3, Neighbors);
        _ -> {Cover_2, G, Graph, I_3, Max_deg_3, Max_v_3, Neighbors}
    end
end,
{Cover_2, G_2, Graph, I_4, Max_deg_3, Max_v_3, Neighbors} = Fun_3(Cover_2, G, Graph, I_3, Max_deg_3, Max_v_3, Neighbors),
                G_3 = maps:put(Max_v_3, [], G_2),
                Fun_4_loop(Cover_2, G_3, Graph)
            catch
                {continue, C0, C1, C2} -> Fun_4_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Cover, G, Graph}
    end
end,
{Cover_2, G_3, Graph} = Fun_4(Cover, G, Graph),
        Cover_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('graph', #{0 => [1, 3], 1 => [0, 3], 2 => [0, 3, 4], 3 => [0, 1, 2], 4 => [2, 3]}),
    io:format("~ts~n", [mochi_repr(greedy_min_vertex_cover(erlang:get('graph')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
