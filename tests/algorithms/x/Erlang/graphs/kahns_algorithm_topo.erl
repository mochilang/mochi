#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, topological_sort/1, main/0]).

% Generated by Mochi transpiler v0.10.65 (5cabcd7927)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

topological_sort(Graph) ->
    try
        Indegree = [],
        I = 0,
        Fun = fun Fun_loop(Graph, I, Indegree) ->
    case (I < maps:size(Graph)) of
        true ->
            Indegree_2 = lists:append((case Indegree of nil -> []; _ -> Indegree end), [0]),
            I_2 = (I + 1),
            Fun_loop(Graph, I_2, Indegree_2);
        _ -> {Graph, I, Indegree}
    end
end,
{Graph, I_2, Indegree_2} = Fun(Graph, I, Indegree),
        Fun_2 = fun Fun_2_loop(List, Graph, I_2, Indegree_2) ->
    case List of
        [] -> {Graph, I_2, Indegree_2};
        [Edges|Edges_rest] ->
            J = 0,
            Fun_3 = fun Fun_3_loop(Edges, Graph, I_2, Indegree_2, J) ->
    case (J < erlang:length(Edges)) of
        true ->
            V = (case erlang:is_map(Edges) of true -> maps:get(J, Edges, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Edges) + J + 1, Edges); _ -> mochi_nth(J + 1, Edges) end end),
            Indegree_3 = lists:sublist(Indegree_2, V) ++ [((case erlang:is_map(Indegree_2) of true -> maps:get(V, Indegree_2, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Indegree_2) + V + 1, Indegree_2); _ -> mochi_nth(V + 1, Indegree_2) end end) + 1)] ++ lists:nthtail(V + 1, Indegree_2),
            J_2 = (J + 1),
            Fun_3_loop(Edges, Graph, I_2, Indegree_3, J_2);
        _ -> {Edges, Graph, I_2, Indegree_2, J}
    end
end,
{Edges, Graph, I_2, Indegree_3, J_2} = Fun_3(Edges, Graph, I_2, Indegree_2, J),
            Fun_2_loop(Edges_rest, Graph, I_2, Indegree_3);
        _ -> {Graph, I_2, Indegree_2}
    end
end,
{Graph, I_2, Indegree_3} = Fun_2(maps:values(Graph), Graph, I_2, Indegree_2),
        Queue = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Graph, I_3, Indegree_3, Queue) ->
    case (I_3 < erlang:length(Indegree_3)) of
        true ->
            case ((case erlang:is_map(Indegree_3) of true -> maps:get(I_3, Indegree_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Indegree_3) + I_3 + 1, Indegree_3); _ -> mochi_nth(I_3 + 1, Indegree_3) end end) == 0) of
        true -> Queue_2 = lists:append((case Queue of nil -> []; _ -> Queue end), [I_3]),
            Queue_3 = Queue_2;
        _ -> Queue_3 = Queue
    end,
            I_4 = (I_3 + 1),
            Fun_4_loop(Graph, I_4, Indegree_3, Queue_3);
        _ -> {Graph, I_3, Indegree_3, Queue}
    end
end,
{Graph, I_4, Indegree_3, Queue_3} = Fun_4(Graph, I_3, Indegree_3, Queue),
        Order = [],
        Head = 0,
        Processed = 0,
        Fun_6 = fun Fun_6_loop(Graph, Head, I_4, Indegree_3, Order, Processed, Queue_3) ->
    case (Head < erlang:length(Queue_3)) of
        true ->
            V_2 = (case erlang:is_map(Queue_3) of true -> maps:get(Head, Queue_3, nil); _ -> case Head < 0 of true -> mochi_nth(erlang:length(Queue_3) + Head + 1, Queue_3); _ -> mochi_nth(Head + 1, Queue_3) end end),
            Head_2 = (Head + 1),
            Processed_2 = (Processed + 1),
            Order_2 = lists:append((case Order of nil -> []; _ -> Order end), [V_2]),
            Neighbors = maps:get(V_2, Graph, nil),
            K = 0,
            Fun_5 = fun Fun_5_loop(Graph, Head_2, I_4, Indegree_3, K, Neighbors, Order_2, Processed_2, Queue_3, V_2) ->
    case (K < erlang:length(Neighbors)) of
        true ->
            Nb = (case erlang:is_map(Neighbors) of true -> maps:get(K, Neighbors, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Neighbors) + K + 1, Neighbors); _ -> mochi_nth(K + 1, Neighbors) end end),
            Indegree_4 = lists:sublist(Indegree_3, Nb) ++ [((case erlang:is_map(Indegree_3) of true -> maps:get(Nb, Indegree_3, nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length(Indegree_3) + Nb + 1, Indegree_3); _ -> mochi_nth(Nb + 1, Indegree_3) end end) - 1)] ++ lists:nthtail(Nb + 1, Indegree_3),
            case ((case erlang:is_map(Indegree_4) of true -> maps:get(Nb, Indegree_4, nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length(Indegree_4) + Nb + 1, Indegree_4); _ -> mochi_nth(Nb + 1, Indegree_4) end end) == 0) of
        true -> Queue_4 = lists:append((case Queue_3 of nil -> []; _ -> Queue_3 end), [Nb]),
            Queue_5 = Queue_4;
        _ -> Queue_5 = Queue_3
    end,
            K_2 = (K + 1),
            Fun_5_loop(Graph, Head_2, I_4, Indegree_4, K_2, Neighbors, Order_2, Processed_2, Queue_5, V_2);
        _ -> {Graph, Head_2, I_4, Indegree_3, K, Neighbors, Order_2, Processed_2, Queue_3, V_2}
    end
end,
{Graph, Head_2, I_4, Indegree_4, K_2, Neighbors, Order_2, Processed_2, Queue_5, V_2} = Fun_5(Graph, Head_2, I_4, Indegree_3, K, Neighbors, Order_2, Processed_2, Queue_3, V_2),
            Fun_6_loop(Graph, Head_2, I_4, Indegree_4, Order_2, Processed_2, Queue_5);
        _ -> {Graph, Head, I_4, Indegree_3, Order, Processed, Queue_3}
    end
end,
{Graph, Head_2, I_4, Indegree_4, Order_2, Processed_2, Queue_5} = Fun_6(Graph, Head, I_4, Indegree_3, Order, Processed, Queue_3),
        case (Processed_2 /= maps:size(Graph)) of
        true -> throw({return, nil});
        _ -> ok
    end,
        Order_2
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Graph_2 = #{0 => [1, 2], 1 => [3], 2 => [3], 3 => [4, 5], 4 => [], 5 => []},
        io:format("~ts~n", [mochi_repr(topological_sort(Graph_2))]),
        Cyclic = #{0 => [1], 1 => [2], 2 => [0]},
        io:format("~ts~n", [mochi_repr(topological_sort(Cyclic))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
