#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, list_to_string/1, check_negative_cycle/3, bellman_ford/4]).

% Generated by Mochi transpiler v0.10.65 (f942880281) on 2025-08-13 16:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

list_to_string(Arr) ->
    try
        S = "[",
        I = 0,
        Fun = fun Fun_loop(Arr, I, S) ->
    case (I < erlang:length(Arr)) of
        true ->
            S_2 = (S ++ mochi_str((case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end))),
            case (I < (erlang:length(Arr) - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_2 = (I + 1),
            Fun_loop(Arr, I_2, S_4);
        _ -> {Arr, I, S}
    end
end,
{Arr, I_2, S_4} = Fun(Arr, I, S),
        (S_4 ++ "]")
    catch {return, RetCatch} -> RetCatch end.

check_negative_cycle(Graph, Distance, Edge_count) ->
    try
        J = 0,
        Fun_2 = fun Fun_2_loop(Distance, Edge_count, Graph, J) ->
    case (J < Edge_count) of
        true ->
            E = (case erlang:is_map(Graph) of true -> maps:get(J, Graph, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Graph) + J + 1, Graph); _ -> mochi_nth(J + 1, Graph) end end),
            U = maps:get("src", E, nil),
            V = maps:get("dst", E, nil),
            W = float(maps:get("weight", E, nil)),
            case (((case erlang:is_map(Distance) of true -> maps:get(U, Distance, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Distance) + U + 1, Distance); _ -> mochi_nth(U + 1, Distance) end end) < 1000000000.0) andalso (((case erlang:is_map(Distance) of true -> maps:get(U, Distance, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Distance) + U + 1, Distance); _ -> mochi_nth(U + 1, Distance) end end) + W) < (case erlang:is_map(Distance) of true -> maps:get(V, Distance, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Distance) + V + 1, Distance); _ -> mochi_nth(V + 1, Distance) end end))) of
        true -> throw({return, true});
        _ -> ok
    end,
            J_2 = (J + 1),
            Fun_2_loop(Distance, Edge_count, Graph, J_2);
        _ -> {Distance, Edge_count, Graph, J}
    end
end,
{Distance, Edge_count, Graph, J_2} = Fun_2(Distance, Edge_count, Graph, J),
        false
    catch {return, RetCatch} -> RetCatch end.

bellman_ford(Graph_2, Vertex_count, Edge_count_2, Src) ->
    try
        Distance_2 = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Distance_2, Edge_count_2, Graph_2, I_3, Src, Vertex_count) ->
    case (I_3 < Vertex_count) of
        true ->
            Distance_3 = lists:append((case Distance_2 of nil -> []; _ -> Distance_2 end), [1000000000.0]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Distance_3, Edge_count_2, Graph_2, I_4, Src, Vertex_count);
        _ -> {Distance_2, Edge_count_2, Graph_2, I_3, Src, Vertex_count}
    end
end,
{Distance_3, Edge_count_2, Graph_2, I_4, Src, Vertex_count} = Fun_3(Distance_2, Edge_count_2, Graph_2, I_3, Src, Vertex_count),
        Distance_4 = lists:sublist(Distance_3, Src) ++ [0.0] ++ lists:nthtail(Src + 1, Distance_3),
        K = 0,
        Fun_5 = fun Fun_5_loop(Distance_4, Edge_count_2, Graph_2, I_4, K, Src, Vertex_count) ->
    case (K < (Vertex_count - 1)) of
        true ->
            J_3 = 0,
            Fun_4 = fun Fun_4_loop(Distance_4, Edge_count_2, Graph_2, I_4, J_3, K, Src, Vertex_count) ->
    case (J_3 < Edge_count_2) of
        true ->
            E_2 = (case erlang:is_map(Graph_2) of true -> maps:get(J_3, Graph_2, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Graph_2) + J_3 + 1, Graph_2); _ -> mochi_nth(J_3 + 1, Graph_2) end end),
            U_2 = maps:get("src", E_2, nil),
            V_2 = maps:get("dst", E_2, nil),
            W_2 = float(maps:get("weight", E_2, nil)),
            case (((case erlang:is_map(Distance_4) of true -> maps:get(U_2, Distance_4, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(Distance_4) + U_2 + 1, Distance_4); _ -> mochi_nth(U_2 + 1, Distance_4) end end) < 1000000000.0) andalso (((case erlang:is_map(Distance_4) of true -> maps:get(U_2, Distance_4, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(Distance_4) + U_2 + 1, Distance_4); _ -> mochi_nth(U_2 + 1, Distance_4) end end) + W_2) < (case erlang:is_map(Distance_4) of true -> maps:get(V_2, Distance_4, nil); _ -> case V_2 < 0 of true -> mochi_nth(erlang:length(Distance_4) + V_2 + 1, Distance_4); _ -> mochi_nth(V_2 + 1, Distance_4) end end))) of
        true -> Distance_5 = lists:sublist(Distance_4, V_2) ++ [((case erlang:is_map(Distance_4) of true -> maps:get(U_2, Distance_4, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(Distance_4) + U_2 + 1, Distance_4); _ -> mochi_nth(U_2 + 1, Distance_4) end end) + W_2)] ++ lists:nthtail(V_2 + 1, Distance_4),
            Distance_6 = Distance_5;
        _ -> Distance_6 = Distance_4
    end,
            J_4 = (J_3 + 1),
            Fun_4_loop(Distance_6, Edge_count_2, Graph_2, I_4, J_4, K, Src, Vertex_count);
        _ -> {Distance_4, Edge_count_2, Graph_2, I_4, J_3, K, Src, Vertex_count}
    end
end,
{Distance_6, Edge_count_2, Graph_2, I_4, J_4, K, Src, Vertex_count} = Fun_4(Distance_4, Edge_count_2, Graph_2, I_4, J_3, K, Src, Vertex_count),
            K_2 = (K + 1),
            Fun_5_loop(Distance_6, Edge_count_2, Graph_2, I_4, K_2, Src, Vertex_count);
        _ -> {Distance_4, Edge_count_2, Graph_2, I_4, K, Src, Vertex_count}
    end
end,
{Distance_6, Edge_count_2, Graph_2, I_4, K_2, Src, Vertex_count} = Fun_5(Distance_4, Edge_count_2, Graph_2, I_4, K, Src, Vertex_count),
        case check_negative_cycle(Graph_2, Distance_6, Edge_count_2) of
        true -> erlang:error({panic, "Negative cycle found"});
        _ -> ok
    end,
        Distance_6
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('INF', 1000000000.0),
    erlang:put('edges', [#{"src" => 2, "dst" => 1, "weight" => -10}, #{"src" => 3, "dst" => 2, "weight" => 3}, #{"src" => 0, "dst" => 3, "weight" => 5}, #{"src" => 0, "dst" => 1, "weight" => 4}]),
    erlang:put('distances', bellman_ford(erlang:get('edges'), 4, erlang:length(erlang:get('edges')), 0)),
    io:format("~ts~n", [mochi_repr(list_to_string(erlang:get('distances')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
