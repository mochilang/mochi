#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_graph/3, contains_vertex/2, add_vertex/2, remove_key/2, decrement_indices/2, remove_vertex/2, add_edge/3, remove_edge/3, contains_edge/3, clear_graph/1]).

% Generated by Mochi transpiler v0.10.66 (951718e85a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

make_graph(Vertices, Edges, Directed) ->
    try
        G = #{"directed" => Directed, "vertex_to_index" => #{}, "adj_matrix" => []},
        I = 0,
        Fun = fun Fun_loop(Directed, Edges, G, I, Vertices) ->
    case (I < erlang:length(Vertices)) of
        true ->
            add_vertex(G, (case erlang:is_map(Vertices) of true -> maps:get(I, Vertices, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Vertices) + I + 1, Vertices); _ -> mochi_nth(I + 1, Vertices) end end)),
            I_2 = (I + 1),
            Fun_loop(Directed, Edges, G, I_2, Vertices);
        _ -> {Directed, Edges, G, I, Vertices}
    end
end,
{Directed, Edges, G, I_2, Vertices} = Fun(Directed, Edges, G, I, Vertices),
        J = 0,
        Fun_2 = fun Fun_2_loop(Directed, Edges, G, I_2, J, Vertices) ->
    case (J < erlang:length(Edges)) of
        true ->
            E = (case erlang:is_map(Edges) of true -> maps:get(J, Edges, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Edges) + J + 1, Edges); _ -> mochi_nth(J + 1, Edges) end end),
            add_edge(G, (case erlang:is_map(E) of true -> maps:get(0, E, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(E) + 0 + 1, E); _ -> mochi_nth(0 + 1, E) end end), (case erlang:is_map(E) of true -> maps:get(1, E, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(E) + 1 + 1, E); _ -> mochi_nth(1 + 1, E) end end)),
            J_2 = (J + 1),
            Fun_2_loop(Directed, Edges, G, I_2, J_2, Vertices);
        _ -> {Directed, Edges, G, I_2, J, Vertices}
    end
end,
{Directed, Edges, G, I_2, J_2, Vertices} = Fun_2(Directed, Edges, G, I_2, J, Vertices),
        G
    catch {return, RetCatch} -> RetCatch end.

contains_vertex(G_2, V) ->
    try
        maps:is_key(V, maps:get("vertex_to_index", G_2, nil))
    catch {return, RetCatch} -> RetCatch end.

add_vertex(G_3, V_2) ->
    try
        case contains_vertex(G_3, V_2) of
        true -> erlang:error({panic, "vertex already exists"});
        _ -> ok
    end,
        Matrix = maps:get("adj_matrix", G_3, nil),
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(G_3, I_3, Matrix, V_2) ->
    case (I_3 < erlang:length(Matrix)) of
        true ->
            Matrix_2 = lists:sublist(Matrix, I_3) ++ [lists:append((case (case erlang:is_map(Matrix) of true -> maps:get(I_3, Matrix, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix) + I_3 + 1, Matrix); _ -> mochi_nth(I_3 + 1, Matrix) end end) of nil -> []; _ -> (case erlang:is_map(Matrix) of true -> maps:get(I_3, Matrix, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix) + I_3 + 1, Matrix); _ -> mochi_nth(I_3 + 1, Matrix) end end) end), [0])] ++ lists:nthtail(I_3 + 1, Matrix),
            I_4 = (I_3 + 1),
            Fun_3_loop(G_3, I_4, Matrix_2, V_2);
        _ -> {G_3, I_3, Matrix, V_2}
    end
end,
{G_3, I_4, Matrix_2, V_2} = Fun_3(G_3, I_3, Matrix, V_2),
        Row = [],
        J_3 = 0,
        Fun_4 = fun Fun_4_loop(G_3, I_4, J_3, Matrix_2, Row, V_2) ->
    case (J_3 < (erlang:length(Matrix_2) + 1)) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            J_4 = (J_3 + 1),
            Fun_4_loop(G_3, I_4, J_4, Matrix_2, Row_2, V_2);
        _ -> {G_3, I_4, J_3, Matrix_2, Row, V_2}
    end
end,
{G_3, I_4, J_4, Matrix_2, Row_2, V_2} = Fun_4(G_3, I_4, J_3, Matrix_2, Row, V_2),
        Matrix_3 = lists:append((case Matrix_2 of nil -> []; _ -> Matrix_2 end), [Row_2]),
        G_4 = maps:put("adj_matrix", Matrix_3, G_3),
        Idx_map = maps:get("vertex_to_index", G_4, nil),
        Idx_map_2 = maps:put(V_2, (erlang:length(Matrix_3) - 1), Idx_map),
        G_5 = maps:put("vertex_to_index", Idx_map_2, G_4),
        {nil, G_5}
    catch {return, RetCatch} -> RetCatch end.

remove_key(M, K) ->
    try
        Out = #{},
        Fun_5 = fun Fun_5_loop(List, K, M, Out) ->
    case List of
        [] -> {K, M, Out};
        [Key|Key_rest] ->
            case (Key /= K) of
        true -> Out_2 = maps:put(Key, maps:get(Key, M, nil), Out),
            Out_3 = Out_2;
        _ -> Out_3 = Out
    end,
            Fun_5_loop(Key_rest, K, M, Out_3);
        _ -> {K, M, Out}
    end
end,
{K, M, Out_3} = Fun_5(maps:keys(M), K, M, Out),
        Out_3
    catch {return, RetCatch} -> RetCatch end.

decrement_indices(M_2, Start) ->
    try
        Out_4 = #{},
        Fun_6 = fun Fun_6_loop(List, M_2, Out_4, Start) ->
    case List of
        [] -> {M_2, Out_4, Start};
        [Key_2|Key_2_rest] ->
            Idx = maps:get(Key_2, M_2, nil),
            case (Idx > Start) of
        true -> Out_5 = maps:put(Key_2, (Idx - 1), Out_4),
            Out_7 = Out_5;
        _ -> Out_6 = maps:put(Key_2, Idx, Out_4),
            Out_7 = Out_6
    end,
            Fun_6_loop(Key_2_rest, M_2, Out_7, Start);
        _ -> {M_2, Out_4, Start}
    end
end,
{M_2, Out_7, Start} = Fun_6(maps:keys(M_2), M_2, Out_4, Start),
        Out_7
    catch {return, RetCatch} -> RetCatch end.

remove_vertex(G_6, V_3) ->
    try
        case mochi_not(contains_vertex(G_6, V_3)) of
        true -> erlang:error({panic, "vertex does not exist"});
        _ -> ok
    end,
        Idx_2 = maps:get(V_3, maps:get("vertex_to_index", G_6, nil), nil),
        New_matrix = [],
        I_5 = 0,
        Fun_9 = fun Fun_9_loop(G_6, I_5, Idx_2, New_matrix, V_3) ->
    case (I_5 < erlang:length(maps:get("adj_matrix", G_6, nil))) of
        true ->
            case (I_5 /= Idx_2) of
        true -> Row_3 = (case erlang:is_map(maps:get("adj_matrix", G_6, nil)) of true -> maps:get(I_5, maps:get("adj_matrix", G_6, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("adj_matrix", G_6, nil)) + I_5 + 1, maps:get("adj_matrix", G_6, nil)); _ -> mochi_nth(I_5 + 1, maps:get("adj_matrix", G_6, nil)) end end),
            New_row = [],
            J_5 = 0,
            Fun_7 = fun Fun_7_loop(G_6, I_5, Idx_2, J_5, New_matrix, New_row, Row_3, V_3) ->
    case (J_5 < erlang:length(Row_3)) of
        true ->
            case (J_5 /= Idx_2) of
        true -> New_row_2 = lists:append((case New_row of nil -> []; _ -> New_row end), [(case erlang:is_map(Row_3) of true -> maps:get(J_5, Row_3, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Row_3) + J_5 + 1, Row_3); _ -> mochi_nth(J_5 + 1, Row_3) end end)]),
            New_row_3 = New_row_2;
        _ -> New_row_3 = New_row
    end,
            J_6 = (J_5 + 1),
            Fun_7_loop(G_6, I_5, Idx_2, J_6, New_matrix, New_row_3, Row_3, V_3);
        _ -> {G_6, I_5, Idx_2, J_5, New_matrix, New_row, Row_3, V_3}
    end
end,
{G_6, I_5, Idx_2, J_6, New_matrix, New_row_3, Row_3, V_3} = Fun_7(G_6, I_5, Idx_2, J_5, New_matrix, New_row, Row_3, V_3),
            New_matrix_2 = lists:append((case New_matrix of nil -> []; _ -> New_matrix end), [New_row_3]),
            Fun_8 = Fun_7,
            J_7 = J_6,
            New_matrix_3 = New_matrix_2,
            New_row_4 = New_row_3,
            Row_4 = Row_3;
        _ -> Fun_8 = nil,
            J_7 = nil,
            New_matrix_3 = New_matrix,
            New_row_4 = nil,
            Row_4 = nil
    end,
            I_6 = (I_5 + 1),
            Fun_9_loop(G_6, I_6, Idx_2, New_matrix_3, V_3);
        _ -> {G_6, I_5, Idx_2, New_matrix, V_3}
    end
end,
{G_6, I_6, Idx_2, New_matrix_3, V_3} = Fun_9(G_6, I_5, Idx_2, New_matrix, V_3),
        G_7 = maps:put("adj_matrix", New_matrix_3, G_6),
        M_3 = remove_key(maps:get("vertex_to_index", G_7, nil), V_3),
        G_8 = maps:put("vertex_to_index", decrement_indices(M_3, Idx_2), G_7),
        {nil, G_8}
    catch {return, RetCatch} -> RetCatch end.

add_edge(G_9, U, V_4) ->
    try
        case mochi_not((contains_vertex(G_9, U) andalso contains_vertex(G_9, V_4))) of
        true -> erlang:error({panic, "missing vertex"});
        _ -> ok
    end,
        I_7 = maps:get(U, maps:get("vertex_to_index", G_9, nil), nil),
        J_8 = maps:get(V_4, maps:get("vertex_to_index", G_9, nil), nil),
        Matrix_4 = maps:get("adj_matrix", G_9, nil),
        Matrix_5 = lists:sublist(Matrix_4, I_7) ++ [lists:sublist(lists:nth(I_7 + 1, Matrix_4), J_8) ++ [1] ++ lists:nthtail(J_8 + 1, lists:nth(I_7 + 1, Matrix_4))] ++ lists:nthtail(I_7 + 1, Matrix_4),
        case mochi_not(maps:get("directed", G_9, nil)) of
        true -> Matrix_6 = lists:sublist(Matrix_5, J_8) ++ [lists:sublist(lists:nth(J_8 + 1, Matrix_5), I_7) ++ [1] ++ lists:nthtail(I_7 + 1, lists:nth(J_8 + 1, Matrix_5))] ++ lists:nthtail(J_8 + 1, Matrix_5),
            Matrix_7 = Matrix_6;
        _ -> Matrix_7 = Matrix_5
    end,
        G_10 = maps:put("adj_matrix", Matrix_7, G_9),
        {nil, G_10}
    catch {return, RetCatch} -> RetCatch end.

remove_edge(G_11, U_2, V_5) ->
    try
        case mochi_not((contains_vertex(G_11, U_2) andalso contains_vertex(G_11, V_5))) of
        true -> erlang:error({panic, "missing vertex"});
        _ -> ok
    end,
        I_8 = maps:get(U_2, maps:get("vertex_to_index", G_11, nil), nil),
        J_9 = maps:get(V_5, maps:get("vertex_to_index", G_11, nil), nil),
        Matrix_8 = maps:get("adj_matrix", G_11, nil),
        Matrix_9 = lists:sublist(Matrix_8, I_8) ++ [lists:sublist(lists:nth(I_8 + 1, Matrix_8), J_9) ++ [0] ++ lists:nthtail(J_9 + 1, lists:nth(I_8 + 1, Matrix_8))] ++ lists:nthtail(I_8 + 1, Matrix_8),
        case mochi_not(maps:get("directed", G_11, nil)) of
        true -> Matrix_10 = lists:sublist(Matrix_9, J_9) ++ [lists:sublist(lists:nth(J_9 + 1, Matrix_9), I_8) ++ [0] ++ lists:nthtail(I_8 + 1, lists:nth(J_9 + 1, Matrix_9))] ++ lists:nthtail(J_9 + 1, Matrix_9),
            Matrix_11 = Matrix_10;
        _ -> Matrix_11 = Matrix_9
    end,
        G_12 = maps:put("adj_matrix", Matrix_11, G_11),
        {nil, G_12}
    catch {return, RetCatch} -> RetCatch end.

contains_edge(G_13, U_3, V_6) ->
    try
        case mochi_not((contains_vertex(G_13, U_3) andalso contains_vertex(G_13, V_6))) of
        true -> erlang:error({panic, "missing vertex"});
        _ -> ok
    end,
        I_9 = maps:get(U_3, maps:get("vertex_to_index", G_13, nil), nil),
        J_10 = maps:get(V_6, maps:get("vertex_to_index", G_13, nil), nil),
        Matrix_12 = maps:get("adj_matrix", G_13, nil),
        ((case erlang:is_map((case erlang:is_map(Matrix_12) of true -> maps:get(I_9, Matrix_12, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Matrix_12) + I_9 + 1, Matrix_12); _ -> mochi_nth(I_9 + 1, Matrix_12) end end)) of true -> maps:get(J_10, (case erlang:is_map(Matrix_12) of true -> maps:get(I_9, Matrix_12, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Matrix_12) + I_9 + 1, Matrix_12); _ -> mochi_nth(I_9 + 1, Matrix_12) end end), nil); _ -> case J_10 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_12) of true -> maps:get(I_9, Matrix_12, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Matrix_12) + I_9 + 1, Matrix_12); _ -> mochi_nth(I_9 + 1, Matrix_12) end end)) + J_10 + 1, (case erlang:is_map(Matrix_12) of true -> maps:get(I_9, Matrix_12, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Matrix_12) + I_9 + 1, Matrix_12); _ -> mochi_nth(I_9 + 1, Matrix_12) end end)); _ -> mochi_nth(J_10 + 1, (case erlang:is_map(Matrix_12) of true -> maps:get(I_9, Matrix_12, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Matrix_12) + I_9 + 1, Matrix_12); _ -> mochi_nth(I_9 + 1, Matrix_12) end end)) end end) == 1)
    catch {return, RetCatch} -> RetCatch end.

clear_graph(G_14) ->
    try
        G_15 = maps:put("vertex_to_index", #{}, G_14),
        G_16 = maps:put("adj_matrix", [], G_15),
        {nil, G_16}
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('g', make_graph([1, 2, 3], [[1, 2], [2, 3]], false)),
    io:format("~ts~n", [mochi_str(maps:get("adj_matrix", erlang:get('g'), nil))]),
    io:format("~ts~n", [mochi_str(contains_edge(erlang:get('g'), 1, 2))]),
    io:format("~ts~n", [mochi_str(contains_edge(erlang:get('g'), 2, 1))]),
    {_, G_17} = remove_edge(erlang:get('g'), 1, 2),
    erlang:put('g', G_17),
    io:format("~ts~n", [mochi_str(contains_edge(erlang:get('g'), 1, 2))]),
    {_, G_18} = remove_vertex(erlang:get('g'), 2),
    erlang:put('g', G_18),
    io:format("~ts~n", [mochi_str(maps:get("adj_matrix", erlang:get('g'), nil))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
