#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, fill_row/2, min_path_sum/1]).

% Generated by Mochi transpiler v0.10.65 (5cabcd7927)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

fill_row(Current_row, Row_above) ->
    try
        Current_row_2 = lists:sublist(Current_row, 0) ++ [((case erlang:is_map(Current_row) of true -> maps:get(0, Current_row, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Current_row) + 0 + 1, Current_row); _ -> mochi_nth(0 + 1, Current_row) end end) + (case erlang:is_map(Row_above) of true -> maps:get(0, Row_above, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Row_above) + 0 + 1, Row_above); _ -> mochi_nth(0 + 1, Row_above) end end))] ++ lists:nthtail(0 + 1, Current_row),
        Cell_n = 1,
        Fun = fun Fun_loop(Cell_n, Current_row_2, Row_above) ->
    case (Cell_n < erlang:length(Current_row_2)) of
        true ->
            Left = (case erlang:is_map(Current_row_2) of true -> maps:get((Cell_n - 1), Current_row_2, nil); _ -> case (Cell_n - 1) < 0 of true -> mochi_nth(erlang:length(Current_row_2) + (Cell_n - 1) + 1, Current_row_2); _ -> mochi_nth((Cell_n - 1) + 1, Current_row_2) end end),
            Up = (case erlang:is_map(Row_above) of true -> maps:get(Cell_n, Row_above, nil); _ -> case Cell_n < 0 of true -> mochi_nth(erlang:length(Row_above) + Cell_n + 1, Row_above); _ -> mochi_nth(Cell_n + 1, Row_above) end end),
            case (Left < Up) of
        true -> Current_row_3 = lists:sublist(Current_row_2, Cell_n) ++ [((case erlang:is_map(Current_row_2) of true -> maps:get(Cell_n, Current_row_2, nil); _ -> case Cell_n < 0 of true -> mochi_nth(erlang:length(Current_row_2) + Cell_n + 1, Current_row_2); _ -> mochi_nth(Cell_n + 1, Current_row_2) end end) + Left)] ++ lists:nthtail(Cell_n + 1, Current_row_2),
            Current_row_5 = Current_row_3;
        _ -> Current_row_4 = lists:sublist(Current_row_2, Cell_n) ++ [((case erlang:is_map(Current_row_2) of true -> maps:get(Cell_n, Current_row_2, nil); _ -> case Cell_n < 0 of true -> mochi_nth(erlang:length(Current_row_2) + Cell_n + 1, Current_row_2); _ -> mochi_nth(Cell_n + 1, Current_row_2) end end) + Up)] ++ lists:nthtail(Cell_n + 1, Current_row_2),
            Current_row_5 = Current_row_4
    end,
            Cell_n_2 = (Cell_n + 1),
            Fun_loop(Cell_n_2, Current_row_5, Row_above);
        _ -> {Cell_n, Current_row_2, Row_above}
    end
end,
{Cell_n_2, Current_row_5, Row_above} = Fun(Cell_n, Current_row_2, Row_above),
        Current_row_5
    catch {return, RetCatch} -> RetCatch end.

min_path_sum(Grid) ->
    try
        case ((erlang:length(Grid) == 0) orelse (erlang:length((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)) == 0)) of
        true -> error("The grid does not contain the appropriate information");
        _ -> ok
    end,
        Cell_n_3 = 1,
        Fun_2 = fun Fun_2_loop(Cell_n_3, Grid) ->
    case (Cell_n_3 < erlang:length((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end))) of
        true ->
            Grid_2 = lists:sublist(Grid, 0) ++ [lists:sublist(lists:nth(0 + 1, Grid), Cell_n_3) ++ [((case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)) of true -> maps:get(Cell_n_3, (case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end), nil); _ -> case Cell_n_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)) + Cell_n_3 + 1, (case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)); _ -> mochi_nth(Cell_n_3 + 1, (case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)) end end) + (case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)) of true -> maps:get((Cell_n_3 - 1), (case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end), nil); _ -> case (Cell_n_3 - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)) + (Cell_n_3 - 1) + 1, (case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)); _ -> mochi_nth((Cell_n_3 - 1) + 1, (case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)) end end))] ++ lists:nthtail(Cell_n_3 + 1, lists:nth(0 + 1, Grid))] ++ lists:nthtail(0 + 1, Grid),
            Cell_n_4 = (Cell_n_3 + 1),
            Fun_2_loop(Cell_n_4, Grid_2);
        _ -> {Cell_n_3, Grid}
    end
end,
{Cell_n_4, Grid_2} = Fun_2(Cell_n_3, Grid),
        Row_above_2 = (case erlang:is_map(Grid_2) of true -> maps:get(0, Grid_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid_2) + 0 + 1, Grid_2); _ -> mochi_nth(0 + 1, Grid_2) end end),
        Row_n = 1,
        Fun_3 = fun Fun_3_loop(Cell_n_4, Grid_2, Row_above_2, Row_n) ->
    case (Row_n < erlang:length(Grid_2)) of
        true ->
            Current_row_6 = (case erlang:is_map(Grid_2) of true -> maps:get(Row_n, Grid_2, nil); _ -> case Row_n < 0 of true -> mochi_nth(erlang:length(Grid_2) + Row_n + 1, Grid_2); _ -> mochi_nth(Row_n + 1, Grid_2) end end),
            Grid_3 = lists:sublist(Grid_2, Row_n) ++ [fill_row(Current_row_6, Row_above_2)] ++ lists:nthtail(Row_n + 1, Grid_2),
            Row_above_3 = (case erlang:is_map(Grid_3) of true -> maps:get(Row_n, Grid_3, nil); _ -> case Row_n < 0 of true -> mochi_nth(erlang:length(Grid_3) + Row_n + 1, Grid_3); _ -> mochi_nth(Row_n + 1, Grid_3) end end),
            Row_n_2 = (Row_n + 1),
            Fun_3_loop(Cell_n_4, Grid_3, Row_above_3, Row_n_2);
        _ -> {Cell_n_4, Grid_2, Row_above_2, Row_n}
    end
end,
{Cell_n_4, Grid_3, Row_above_3, Row_n_2} = Fun_3(Cell_n_4, Grid_2, Row_above_2, Row_n),
        (case erlang:is_map((case erlang:is_map(Grid_3) of true -> maps:get((erlang:length(Grid_3) - 1), Grid_3, nil); _ -> case (erlang:length(Grid_3) - 1) < 0 of true -> mochi_nth(erlang:length(Grid_3) + (erlang:length(Grid_3) - 1) + 1, Grid_3); _ -> mochi_nth((erlang:length(Grid_3) - 1) + 1, Grid_3) end end)) of true -> maps:get((erlang:length((case erlang:is_map(Grid_3) of true -> maps:get(0, Grid_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid_3) + 0 + 1, Grid_3); _ -> mochi_nth(0 + 1, Grid_3) end end)) - 1), (case erlang:is_map(Grid_3) of true -> maps:get((erlang:length(Grid_3) - 1), Grid_3, nil); _ -> case (erlang:length(Grid_3) - 1) < 0 of true -> mochi_nth(erlang:length(Grid_3) + (erlang:length(Grid_3) - 1) + 1, Grid_3); _ -> mochi_nth((erlang:length(Grid_3) - 1) + 1, Grid_3) end end), nil); _ -> case (erlang:length((case erlang:is_map(Grid_3) of true -> maps:get(0, Grid_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid_3) + 0 + 1, Grid_3); _ -> mochi_nth(0 + 1, Grid_3) end end)) - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid_3) of true -> maps:get((erlang:length(Grid_3) - 1), Grid_3, nil); _ -> case (erlang:length(Grid_3) - 1) < 0 of true -> mochi_nth(erlang:length(Grid_3) + (erlang:length(Grid_3) - 1) + 1, Grid_3); _ -> mochi_nth((erlang:length(Grid_3) - 1) + 1, Grid_3) end end)) + (erlang:length((case erlang:is_map(Grid_3) of true -> maps:get(0, Grid_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid_3) + 0 + 1, Grid_3); _ -> mochi_nth(0 + 1, Grid_3) end end)) - 1) + 1, (case erlang:is_map(Grid_3) of true -> maps:get((erlang:length(Grid_3) - 1), Grid_3, nil); _ -> case (erlang:length(Grid_3) - 1) < 0 of true -> mochi_nth(erlang:length(Grid_3) + (erlang:length(Grid_3) - 1) + 1, Grid_3); _ -> mochi_nth((erlang:length(Grid_3) - 1) + 1, Grid_3) end end)); _ -> mochi_nth((erlang:length((case erlang:is_map(Grid_3) of true -> maps:get(0, Grid_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid_3) + 0 + 1, Grid_3); _ -> mochi_nth(0 + 1, Grid_3) end end)) - 1) + 1, (case erlang:is_map(Grid_3) of true -> maps:get((erlang:length(Grid_3) - 1), Grid_3, nil); _ -> case (erlang:length(Grid_3) - 1) < 0 of true -> mochi_nth(erlang:length(Grid_3) + (erlang:length(Grid_3) - 1) + 1, Grid_3); _ -> mochi_nth((erlang:length(Grid_3) - 1) + 1, Grid_3) end end)) end end)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('grid1', [[1, 3, 1], [1, 5, 1], [4, 2, 1]]),
    io:format("~ts~n", [mochi_str(min_path_sum(erlang:get('grid1')))]),
    erlang:put('grid2', [[1, 0, 5, 6, 7], [8, 9, 0, 4, 2], [4, 4, 4, 5, 1], [9, 6, 3, 1, 0], [8, 4, 3, 2, 7]]),
    io:format("~ts~n", [mochi_str(min_path_sum(erlang:get('grid2')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
