#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, iabs/1, search/5, main/0]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

iabs(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

search(Grid, Init, Goal, Cost, Heuristic) ->
    try
        Closed = [],
        R = 0,
        Fun_2 = fun Fun_2_loop(Closed, Cost, Goal, Grid, Heuristic, Init, R) ->
    case (R < erlang:length(Grid)) of
        true ->
            Row = [],
            C = 0,
            Fun = fun Fun_loop(C, Closed, Cost, Goal, Grid, Heuristic, Init, R, Row) ->
    case (C < erlang:length((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Grid) + 0 + 1, Grid); _ -> lists:nth(0 + 1, Grid) end end))) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            C_2 = (C + 1),
            Fun_loop(C_2, Closed, Cost, Goal, Grid, Heuristic, Init, R, Row_2);
        _ -> {C, Closed, Cost, Goal, Grid, Heuristic, Init, R, Row}
    end
end,
{C_2, Closed, Cost, Goal, Grid, Heuristic, Init, R, Row_2} = Fun(C, Closed, Cost, Goal, Grid, Heuristic, Init, R, Row),
            Closed_2 = lists:append((case Closed of nil -> []; _ -> Closed end), [Row_2]),
            R_2 = (R + 1),
            Fun_2_loop(Closed_2, Cost, Goal, Grid, Heuristic, Init, R_2);
        _ -> {Closed, Cost, Goal, Grid, Heuristic, Init, R}
    end
end,
{Closed_2, Cost, Goal, Grid, Heuristic, Init, R_2} = Fun_2(Closed, Cost, Goal, Grid, Heuristic, Init, R),
        Closed_3 = lists:sublist(Closed_2, (case erlang:is_map(Init) of true -> maps:get(0, Init, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Init) + 0 + 1, Init); _ -> lists:nth(0 + 1, Init) end end)) ++ [lists:sublist(lists:nth((case erlang:is_map(Init) of true -> maps:get(0, Init, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Init) + 0 + 1, Init); _ -> lists:nth(0 + 1, Init) end end) + 1, Closed_2), (case erlang:is_map(Init) of true -> maps:get(1, Init, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Init) + 1 + 1, Init); _ -> lists:nth(1 + 1, Init) end end)) ++ [1] ++ lists:nthtail((case erlang:is_map(Init) of true -> maps:get(1, Init, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Init) + 1 + 1, Init); _ -> lists:nth(1 + 1, Init) end end) + 1, lists:nth((case erlang:is_map(Init) of true -> maps:get(0, Init, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Init) + 0 + 1, Init); _ -> lists:nth(0 + 1, Init) end end) + 1, Closed_2))] ++ lists:nthtail((case erlang:is_map(Init) of true -> maps:get(0, Init, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Init) + 0 + 1, Init); _ -> lists:nth(0 + 1, Init) end end) + 1, Closed_2),
        Action = [],
        R_3 = 0,
        Fun_4 = fun Fun_4_loop(Action, Closed_3, Cost, Goal, Grid, Heuristic, Init, R_3) ->
    case (R_3 < erlang:length(Grid)) of
        true ->
            Row_3 = [],
            C_3 = 0,
            Fun_3 = fun Fun_3_loop(Action, C_3, Closed_3, Cost, Goal, Grid, Heuristic, Init, R_3, Row_3) ->
    case (C_3 < erlang:length((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Grid) + 0 + 1, Grid); _ -> lists:nth(0 + 1, Grid) end end))) of
        true ->
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [0]),
            C_4 = (C_3 + 1),
            Fun_3_loop(Action, C_4, Closed_3, Cost, Goal, Grid, Heuristic, Init, R_3, Row_4);
        _ -> {Action, C_3, Closed_3, Cost, Goal, Grid, Heuristic, Init, R_3, Row_3}
    end
end,
{Action, C_4, Closed_3, Cost, Goal, Grid, Heuristic, Init, R_3, Row_4} = Fun_3(Action, C_3, Closed_3, Cost, Goal, Grid, Heuristic, Init, R_3, Row_3),
            Action_2 = lists:append((case Action of nil -> []; _ -> Action end), [Row_4]),
            R_4 = (R_3 + 1),
            Fun_4_loop(Action_2, Closed_3, Cost, Goal, Grid, Heuristic, Init, R_4);
        _ -> {Action, Closed_3, Cost, Goal, Grid, Heuristic, Init, R_3}
    end
end,
{Action_2, Closed_3, Cost, Goal, Grid, Heuristic, Init, R_4} = Fun_4(Action, Closed_3, Cost, Goal, Grid, Heuristic, Init, R_3),
        X_2 = (case erlang:is_map(Init) of true -> maps:get(0, Init, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Init) + 0 + 1, Init); _ -> lists:nth(0 + 1, Init) end end),
        Y = (case erlang:is_map(Init) of true -> maps:get(1, Init, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Init) + 1 + 1, Init); _ -> lists:nth(1 + 1, Init) end end),
        G = 0,
        F = (G + (case erlang:is_map((case erlang:is_map(Heuristic) of true -> maps:get(X_2, Heuristic, nil); _ -> case X_2 < 0 of true -> lists:nth(erlang:length(Heuristic) + X_2 + 1, Heuristic); _ -> lists:nth(X_2 + 1, Heuristic) end end)) of true -> maps:get(Y, (case erlang:is_map(Heuristic) of true -> maps:get(X_2, Heuristic, nil); _ -> case X_2 < 0 of true -> lists:nth(erlang:length(Heuristic) + X_2 + 1, Heuristic); _ -> lists:nth(X_2 + 1, Heuristic) end end), nil); _ -> case Y < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Heuristic) of true -> maps:get(X_2, Heuristic, nil); _ -> case X_2 < 0 of true -> lists:nth(erlang:length(Heuristic) + X_2 + 1, Heuristic); _ -> lists:nth(X_2 + 1, Heuristic) end end)) + Y + 1, (case erlang:is_map(Heuristic) of true -> maps:get(X_2, Heuristic, nil); _ -> case X_2 < 0 of true -> lists:nth(erlang:length(Heuristic) + X_2 + 1, Heuristic); _ -> lists:nth(X_2 + 1, Heuristic) end end)); _ -> lists:nth(Y + 1, (case erlang:is_map(Heuristic) of true -> maps:get(X_2, Heuristic, nil); _ -> case X_2 < 0 of true -> lists:nth(erlang:length(Heuristic) + X_2 + 1, Heuristic); _ -> lists:nth(X_2 + 1, Heuristic) end end)) end end)),
        Cell = [[F, G, X_2, Y]],
        Found = false,
        Resign = false,
        Fun_10 = fun Fun_10_loop(Action_2, Cell, Closed_3, Cost, F, Found, G, Goal, Grid, Heuristic, Init, R_4, Resign, X_2, Y) ->
    case (mochi_not(Found) andalso mochi_not(Resign)) of
        true ->
            case (erlang:length(Cell) == 0) of
        true -> erlang:error("Algorithm is unable to find solution"),
            Action_6 = Action_2,
            Best_f_4 = nil,
            Best_i_4 = nil,
            Cell_6 = Cell,
            Closed_7 = Closed_3,
            D_4 = nil,
            Found_4 = Found,
            Fun_9 = Fun_4,
            G_3 = G,
            I_5 = nil,
            New_cell_4 = nil,
            Next_cell_2 = nil,
            X_4 = X_2,
            Y_3 = Y;
        _ -> Best_i = 0,
            Best_f = (case erlang:is_map((case erlang:is_map(Cell) of true -> maps:get(0, Cell, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Cell) + 0 + 1, Cell); _ -> lists:nth(0 + 1, Cell) end end)) of true -> maps:get(0, (case erlang:is_map(Cell) of true -> maps:get(0, Cell, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Cell) + 0 + 1, Cell); _ -> lists:nth(0 + 1, Cell) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Cell) of true -> maps:get(0, Cell, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Cell) + 0 + 1, Cell); _ -> lists:nth(0 + 1, Cell) end end)) + 0 + 1, (case erlang:is_map(Cell) of true -> maps:get(0, Cell, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Cell) + 0 + 1, Cell); _ -> lists:nth(0 + 1, Cell) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(Cell) of true -> maps:get(0, Cell, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Cell) + 0 + 1, Cell); _ -> lists:nth(0 + 1, Cell) end end)) end end),
            I = 1,
            Fun_5 = fun Fun_5_loop(Action_2, Best_f, Best_i, Cell, Closed_3, Cost, F, Found, G, Goal, Grid, Heuristic, I, Init, R_4, Resign, X_2, Y) ->
    case (I < erlang:length(Cell)) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(Cell) of true -> maps:get(I, Cell, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cell) + I + 1, Cell); _ -> lists:nth(I + 1, Cell) end end)) of true -> maps:get(0, (case erlang:is_map(Cell) of true -> maps:get(I, Cell, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cell) + I + 1, Cell); _ -> lists:nth(I + 1, Cell) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Cell) of true -> maps:get(I, Cell, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cell) + I + 1, Cell); _ -> lists:nth(I + 1, Cell) end end)) + 0 + 1, (case erlang:is_map(Cell) of true -> maps:get(I, Cell, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cell) + I + 1, Cell); _ -> lists:nth(I + 1, Cell) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(Cell) of true -> maps:get(I, Cell, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cell) + I + 1, Cell); _ -> lists:nth(I + 1, Cell) end end)) end end) < Best_f) of
        true -> Best_f_2 = (case erlang:is_map((case erlang:is_map(Cell) of true -> maps:get(I, Cell, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cell) + I + 1, Cell); _ -> lists:nth(I + 1, Cell) end end)) of true -> maps:get(0, (case erlang:is_map(Cell) of true -> maps:get(I, Cell, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cell) + I + 1, Cell); _ -> lists:nth(I + 1, Cell) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Cell) of true -> maps:get(I, Cell, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cell) + I + 1, Cell); _ -> lists:nth(I + 1, Cell) end end)) + 0 + 1, (case erlang:is_map(Cell) of true -> maps:get(I, Cell, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cell) + I + 1, Cell); _ -> lists:nth(I + 1, Cell) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(Cell) of true -> maps:get(I, Cell, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cell) + I + 1, Cell); _ -> lists:nth(I + 1, Cell) end end)) end end),
            Best_i_2 = I,
            Best_f_3 = Best_f_2,
            Best_i_3 = Best_i_2;
        _ -> Best_f_3 = Best_f,
            Best_i_3 = Best_i
    end,
            I_2 = (I + 1),
            Fun_5_loop(Action_2, Best_f_3, Best_i_3, Cell, Closed_3, Cost, F, Found, G, Goal, Grid, Heuristic, I_2, Init, R_4, Resign, X_2, Y);
        _ -> {Action_2, Best_f, Best_i, Cell, Closed_3, Cost, F, Found, G, Goal, Grid, Heuristic, I, Init, R_4, Resign, X_2, Y}
    end
end,
{Action_2, Best_f_3, Best_i_3, Cell, Closed_3, Cost, F, Found, G, Goal, Grid, Heuristic, I_2, Init, R_4, Resign, X_2, Y} = Fun_5(Action_2, Best_f, Best_i, Cell, Closed_3, Cost, F, Found, G, Goal, Grid, Heuristic, I, Init, R_4, Resign, X_2, Y),
            Next_cell = (case erlang:is_map(Cell) of true -> maps:get(Best_i_3, Cell, nil); _ -> case Best_i_3 < 0 of true -> lists:nth(erlang:length(Cell) + Best_i_3 + 1, Cell); _ -> lists:nth(Best_i_3 + 1, Cell) end end),
            New_cell = [],
            I_3 = 0,
            Fun_6 = fun Fun_6_loop(Action_2, Best_f_3, Best_i_3, Cell, Closed_3, Cost, F, Found, G, Goal, Grid, Heuristic, I_3, Init, New_cell, Next_cell, R_4, Resign, X_2, Y) ->
    case (I_3 < erlang:length(Cell)) of
        true ->
            case (I_3 /= Best_i_3) of
        true -> New_cell_2 = lists:append((case New_cell of nil -> []; _ -> New_cell end), [(case erlang:is_map(Cell) of true -> maps:get(I_3, Cell, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Cell) + I_3 + 1, Cell); _ -> lists:nth(I_3 + 1, Cell) end end)]),
            New_cell_3 = New_cell_2;
        _ -> New_cell_3 = New_cell
    end,
            I_4 = (I_3 + 1),
            Fun_6_loop(Action_2, Best_f_3, Best_i_3, Cell, Closed_3, Cost, F, Found, G, Goal, Grid, Heuristic, I_4, Init, New_cell_3, Next_cell, R_4, Resign, X_2, Y);
        _ -> {Action_2, Best_f_3, Best_i_3, Cell, Closed_3, Cost, F, Found, G, Goal, Grid, Heuristic, I_3, Init, New_cell, Next_cell, R_4, Resign, X_2, Y}
    end
end,
{Action_2, Best_f_3, Best_i_3, Cell, Closed_3, Cost, F, Found, G, Goal, Grid, Heuristic, I_4, Init, New_cell_3, Next_cell, R_4, Resign, X_2, Y} = Fun_6(Action_2, Best_f_3, Best_i_3, Cell, Closed_3, Cost, F, Found, G, Goal, Grid, Heuristic, I_3, Init, New_cell, Next_cell, R_4, Resign, X_2, Y),
            Cell_2 = New_cell_3,
            X_3 = (case erlang:is_map(Next_cell) of true -> maps:get(2, Next_cell, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Next_cell) + 2 + 1, Next_cell); _ -> lists:nth(2 + 1, Next_cell) end end),
            Y_2 = (case erlang:is_map(Next_cell) of true -> maps:get(3, Next_cell, nil); _ -> case 3 < 0 of true -> lists:nth(erlang:length(Next_cell) + 3 + 1, Next_cell); _ -> lists:nth(3 + 1, Next_cell) end end),
            G_2 = (case erlang:is_map(Next_cell) of true -> maps:get(1, Next_cell, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Next_cell) + 1 + 1, Next_cell); _ -> lists:nth(1 + 1, Next_cell) end end),
            case ((X_3 == (case erlang:is_map(Goal) of true -> maps:get(0, Goal, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Goal) + 0 + 1, Goal); _ -> lists:nth(0 + 1, Goal) end end)) andalso (Y_2 == (case erlang:is_map(Goal) of true -> maps:get(1, Goal, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Goal) + 1 + 1, Goal); _ -> lists:nth(1 + 1, Goal) end end))) of
        true -> Found_2 = true,
            Action_5 = Action_2,
            Cell_5 = Cell_2,
            Closed_6 = Closed_3,
            D_3 = nil,
            Found_3 = Found_2,
            Fun_8 = Fun_6;
        _ -> D = 0,
            Fun_7 = fun Fun_7_loop(Action_2, Best_f_3, Best_i_3, Cell_2, Closed_3, Cost, D, F, Found, G_2, Goal, Grid, Heuristic, I_4, Init, New_cell_3, Next_cell, R_4, Resign, X_3, Y_2) ->
    case (D < erlang:length(erlang:get('DIRECTIONS'))) of
        true ->
            X2 = (X_3 + (case erlang:is_map((case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(D, erlang:get('DIRECTIONS'), nil); _ -> case D < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + D + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(D + 1, erlang:get('DIRECTIONS')) end end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(D, erlang:get('DIRECTIONS'), nil); _ -> case D < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + D + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(D + 1, erlang:get('DIRECTIONS')) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(D, erlang:get('DIRECTIONS'), nil); _ -> case D < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + D + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(D + 1, erlang:get('DIRECTIONS')) end end)) + 0 + 1, (case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(D, erlang:get('DIRECTIONS'), nil); _ -> case D < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + D + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(D + 1, erlang:get('DIRECTIONS')) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(D, erlang:get('DIRECTIONS'), nil); _ -> case D < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + D + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(D + 1, erlang:get('DIRECTIONS')) end end)) end end)),
            Y2 = (Y_2 + (case erlang:is_map((case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(D, erlang:get('DIRECTIONS'), nil); _ -> case D < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + D + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(D + 1, erlang:get('DIRECTIONS')) end end)) of true -> maps:get(1, (case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(D, erlang:get('DIRECTIONS'), nil); _ -> case D < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + D + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(D + 1, erlang:get('DIRECTIONS')) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(D, erlang:get('DIRECTIONS'), nil); _ -> case D < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + D + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(D + 1, erlang:get('DIRECTIONS')) end end)) + 1 + 1, (case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(D, erlang:get('DIRECTIONS'), nil); _ -> case D < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + D + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(D + 1, erlang:get('DIRECTIONS')) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(D, erlang:get('DIRECTIONS'), nil); _ -> case D < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + D + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(D + 1, erlang:get('DIRECTIONS')) end end)) end end)),
            case ((((((X2 >= 0) andalso (X2 < erlang:length(Grid))) andalso (Y2 >= 0)) andalso (Y2 < erlang:length((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Grid) + 0 + 1, Grid); _ -> lists:nth(0 + 1, Grid) end end)))) andalso ((case erlang:is_map((case erlang:is_map(Closed_3) of true -> maps:get(X2, Closed_3, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Closed_3) + X2 + 1, Closed_3); _ -> lists:nth(X2 + 1, Closed_3) end end)) of true -> maps:get(Y2, (case erlang:is_map(Closed_3) of true -> maps:get(X2, Closed_3, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Closed_3) + X2 + 1, Closed_3); _ -> lists:nth(X2 + 1, Closed_3) end end), nil); _ -> case Y2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Closed_3) of true -> maps:get(X2, Closed_3, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Closed_3) + X2 + 1, Closed_3); _ -> lists:nth(X2 + 1, Closed_3) end end)) + Y2 + 1, (case erlang:is_map(Closed_3) of true -> maps:get(X2, Closed_3, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Closed_3) + X2 + 1, Closed_3); _ -> lists:nth(X2 + 1, Closed_3) end end)); _ -> lists:nth(Y2 + 1, (case erlang:is_map(Closed_3) of true -> maps:get(X2, Closed_3, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Closed_3) + X2 + 1, Closed_3); _ -> lists:nth(X2 + 1, Closed_3) end end)) end end) == 0)) andalso ((case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(X2, Grid, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Grid) + X2 + 1, Grid); _ -> lists:nth(X2 + 1, Grid) end end)) of true -> maps:get(Y2, (case erlang:is_map(Grid) of true -> maps:get(X2, Grid, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Grid) + X2 + 1, Grid); _ -> lists:nth(X2 + 1, Grid) end end), nil); _ -> case Y2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get(X2, Grid, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Grid) + X2 + 1, Grid); _ -> lists:nth(X2 + 1, Grid) end end)) + Y2 + 1, (case erlang:is_map(Grid) of true -> maps:get(X2, Grid, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Grid) + X2 + 1, Grid); _ -> lists:nth(X2 + 1, Grid) end end)); _ -> lists:nth(Y2 + 1, (case erlang:is_map(Grid) of true -> maps:get(X2, Grid, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Grid) + X2 + 1, Grid); _ -> lists:nth(X2 + 1, Grid) end end)) end end) == 0)) of
        true -> G2 = (G_2 + Cost),
            F2 = (G2 + (case erlang:is_map((case erlang:is_map(Heuristic) of true -> maps:get(X2, Heuristic, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Heuristic) + X2 + 1, Heuristic); _ -> lists:nth(X2 + 1, Heuristic) end end)) of true -> maps:get(Y2, (case erlang:is_map(Heuristic) of true -> maps:get(X2, Heuristic, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Heuristic) + X2 + 1, Heuristic); _ -> lists:nth(X2 + 1, Heuristic) end end), nil); _ -> case Y2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Heuristic) of true -> maps:get(X2, Heuristic, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Heuristic) + X2 + 1, Heuristic); _ -> lists:nth(X2 + 1, Heuristic) end end)) + Y2 + 1, (case erlang:is_map(Heuristic) of true -> maps:get(X2, Heuristic, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Heuristic) + X2 + 1, Heuristic); _ -> lists:nth(X2 + 1, Heuristic) end end)); _ -> lists:nth(Y2 + 1, (case erlang:is_map(Heuristic) of true -> maps:get(X2, Heuristic, nil); _ -> case X2 < 0 of true -> lists:nth(erlang:length(Heuristic) + X2 + 1, Heuristic); _ -> lists:nth(X2 + 1, Heuristic) end end)) end end)),
            Cell_3 = lists:append((case Cell_2 of nil -> []; _ -> Cell_2 end), [[F2, G2, X2, Y2]]),
            Closed_4 = lists:sublist(Closed_3, X2) ++ [lists:sublist(lists:nth(X2 + 1, Closed_3), Y2) ++ [1] ++ lists:nthtail(Y2 + 1, lists:nth(X2 + 1, Closed_3))] ++ lists:nthtail(X2 + 1, Closed_3),
            Action_3 = lists:sublist(Action_2, X2) ++ [lists:sublist(lists:nth(X2 + 1, Action_2), Y2) ++ [D] ++ lists:nthtail(Y2 + 1, lists:nth(X2 + 1, Action_2))] ++ lists:nthtail(X2 + 1, Action_2),
            Action_4 = Action_3,
            Cell_4 = Cell_3,
            Closed_5 = Closed_4,
            F2_2 = F2,
            G2_2 = G2;
        _ -> Action_4 = Action_2,
            Cell_4 = Cell_2,
            Closed_5 = Closed_3,
            F2_2 = nil,
            G2_2 = nil
    end,
            D_2 = (D + 1),
            Fun_7_loop(Action_4, Best_f_3, Best_i_3, Cell_4, Closed_5, Cost, D_2, F, Found, G_2, Goal, Grid, Heuristic, I_4, Init, New_cell_3, Next_cell, R_4, Resign, X_3, Y_2);
        _ -> {Action_2, Best_f_3, Best_i_3, Cell_2, Closed_3, Cost, D, F, Found, G_2, Goal, Grid, Heuristic, I_4, Init, New_cell_3, Next_cell, R_4, Resign, X_3, Y_2}
    end
end,
{Action_4, Best_f_3, Best_i_3, Cell_4, Closed_5, Cost, D_2, F, Found, G_2, Goal, Grid, Heuristic, I_4, Init, New_cell_3, Next_cell, R_4, Resign, X_3, Y_2} = Fun_7(Action_2, Best_f_3, Best_i_3, Cell_2, Closed_3, Cost, D, F, Found, G_2, Goal, Grid, Heuristic, I_4, Init, New_cell_3, Next_cell, R_4, Resign, X_3, Y_2),
            Action_5 = Action_4,
            Cell_5 = Cell_4,
            Closed_6 = Closed_5,
            D_3 = D_2,
            Found_3 = Found,
            Fun_8 = Fun_7
    end,
            Action_6 = Action_5,
            Best_f_4 = Best_f_3,
            Best_i_4 = Best_i_3,
            Cell_6 = Cell_5,
            Closed_7 = Closed_6,
            D_4 = D_3,
            Found_4 = Found_3,
            Fun_9 = Fun_8,
            G_3 = G_2,
            I_5 = I_4,
            New_cell_4 = New_cell_3,
            Next_cell_2 = Next_cell,
            X_4 = X_3,
            Y_3 = Y_2
    end,
            Fun_10_loop(Action_6, Cell_6, Closed_7, Cost, F, Found_4, G_3, Goal, Grid, Heuristic, Init, R_4, Resign, X_4, Y_3);
        _ -> {Action_2, Cell, Closed_3, Cost, F, Found, G, Goal, Grid, Heuristic, Init, R_4, Resign, X_2, Y}
    end
end,
{Action_6, Cell_6, Closed_7, Cost, F, Found_4, G_3, Goal, Grid, Heuristic, Init, R_4, Resign, X_4, Y_3} = Fun_10(Action_2, Cell, Closed_3, Cost, F, Found, G, Goal, Grid, Heuristic, Init, R_4, Resign, X_2, Y),
        Invpath = [],
        X_5 = (case erlang:is_map(Goal) of true -> maps:get(0, Goal, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Goal) + 0 + 1, Goal); _ -> lists:nth(0 + 1, Goal) end end),
        Y_4 = (case erlang:is_map(Goal) of true -> maps:get(1, Goal, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Goal) + 1 + 1, Goal); _ -> lists:nth(1 + 1, Goal) end end),
        Invpath_2 = lists:append((case Invpath of nil -> []; _ -> Invpath end), [[X_5, Y_4]]),
        Fun_11 = fun Fun_11_loop(Action_6, Cell_6, Closed_7, Cost, F, Found_4, G_3, Goal, Grid, Heuristic, Init, Invpath_2, R_4, Resign, X_5, Y_4) ->
    case ((X_5 /= (case erlang:is_map(Init) of true -> maps:get(0, Init, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Init) + 0 + 1, Init); _ -> lists:nth(0 + 1, Init) end end)) orelse (Y_4 /= (case erlang:is_map(Init) of true -> maps:get(1, Init, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Init) + 1 + 1, Init); _ -> lists:nth(1 + 1, Init) end end))) of
        true ->
            Dir = (case erlang:is_map((case erlang:is_map(Action_6) of true -> maps:get(X_5, Action_6, nil); _ -> case X_5 < 0 of true -> lists:nth(erlang:length(Action_6) + X_5 + 1, Action_6); _ -> lists:nth(X_5 + 1, Action_6) end end)) of true -> maps:get(Y_4, (case erlang:is_map(Action_6) of true -> maps:get(X_5, Action_6, nil); _ -> case X_5 < 0 of true -> lists:nth(erlang:length(Action_6) + X_5 + 1, Action_6); _ -> lists:nth(X_5 + 1, Action_6) end end), nil); _ -> case Y_4 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Action_6) of true -> maps:get(X_5, Action_6, nil); _ -> case X_5 < 0 of true -> lists:nth(erlang:length(Action_6) + X_5 + 1, Action_6); _ -> lists:nth(X_5 + 1, Action_6) end end)) + Y_4 + 1, (case erlang:is_map(Action_6) of true -> maps:get(X_5, Action_6, nil); _ -> case X_5 < 0 of true -> lists:nth(erlang:length(Action_6) + X_5 + 1, Action_6); _ -> lists:nth(X_5 + 1, Action_6) end end)); _ -> lists:nth(Y_4 + 1, (case erlang:is_map(Action_6) of true -> maps:get(X_5, Action_6, nil); _ -> case X_5 < 0 of true -> lists:nth(erlang:length(Action_6) + X_5 + 1, Action_6); _ -> lists:nth(X_5 + 1, Action_6) end end)) end end),
            X2_2 = (X_5 - (case erlang:is_map((case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(Dir, erlang:get('DIRECTIONS'), nil); _ -> case Dir < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + Dir + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(Dir + 1, erlang:get('DIRECTIONS')) end end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(Dir, erlang:get('DIRECTIONS'), nil); _ -> case Dir < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + Dir + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(Dir + 1, erlang:get('DIRECTIONS')) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(Dir, erlang:get('DIRECTIONS'), nil); _ -> case Dir < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + Dir + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(Dir + 1, erlang:get('DIRECTIONS')) end end)) + 0 + 1, (case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(Dir, erlang:get('DIRECTIONS'), nil); _ -> case Dir < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + Dir + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(Dir + 1, erlang:get('DIRECTIONS')) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(Dir, erlang:get('DIRECTIONS'), nil); _ -> case Dir < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + Dir + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(Dir + 1, erlang:get('DIRECTIONS')) end end)) end end)),
            Y2_2 = (Y_4 - (case erlang:is_map((case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(Dir, erlang:get('DIRECTIONS'), nil); _ -> case Dir < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + Dir + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(Dir + 1, erlang:get('DIRECTIONS')) end end)) of true -> maps:get(1, (case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(Dir, erlang:get('DIRECTIONS'), nil); _ -> case Dir < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + Dir + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(Dir + 1, erlang:get('DIRECTIONS')) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(Dir, erlang:get('DIRECTIONS'), nil); _ -> case Dir < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + Dir + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(Dir + 1, erlang:get('DIRECTIONS')) end end)) + 1 + 1, (case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(Dir, erlang:get('DIRECTIONS'), nil); _ -> case Dir < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + Dir + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(Dir + 1, erlang:get('DIRECTIONS')) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(erlang:get('DIRECTIONS')) of true -> maps:get(Dir, erlang:get('DIRECTIONS'), nil); _ -> case Dir < 0 of true -> lists:nth(erlang:length(erlang:get('DIRECTIONS')) + Dir + 1, erlang:get('DIRECTIONS')); _ -> lists:nth(Dir + 1, erlang:get('DIRECTIONS')) end end)) end end)),
            X_6 = X2_2,
            Y_5 = Y2_2,
            Invpath_3 = lists:append((case Invpath_2 of nil -> []; _ -> Invpath_2 end), [[X_6, Y_5]]),
            Fun_11_loop(Action_6, Cell_6, Closed_7, Cost, F, Found_4, G_3, Goal, Grid, Heuristic, Init, Invpath_3, R_4, Resign, X_6, Y_5);
        _ -> {Action_6, Cell_6, Closed_7, Cost, F, Found_4, G_3, Goal, Grid, Heuristic, Init, Invpath_2, R_4, Resign, X_5, Y_4}
    end
end,
{Action_6, Cell_6, Closed_7, Cost, F, Found_4, G_3, Goal, Grid, Heuristic, Init, Invpath_3, R_4, Resign, X_6, Y_5} = Fun_11(Action_6, Cell_6, Closed_7, Cost, F, Found_4, G_3, Goal, Grid, Heuristic, Init, Invpath_2, R_4, Resign, X_5, Y_4),
        Path = [],
        Idx = (erlang:length(Invpath_3) - 1),
        Fun_12 = fun Fun_12_loop(Action_6, Cell_6, Closed_7, Cost, F, Found_4, G_3, Goal, Grid, Heuristic, Idx, Init, Invpath_3, Path, R_4, Resign, X_6, Y_5) ->
    case (Idx >= 0) of
        true ->
            Path_2 = lists:append((case Path of nil -> []; _ -> Path end), [(case erlang:is_map(Invpath_3) of true -> maps:get(Idx, Invpath_3, nil); _ -> case Idx < 0 of true -> lists:nth(erlang:length(Invpath_3) + Idx + 1, Invpath_3); _ -> lists:nth(Idx + 1, Invpath_3) end end)]),
            Idx_2 = (Idx - 1),
            Fun_12_loop(Action_6, Cell_6, Closed_7, Cost, F, Found_4, G_3, Goal, Grid, Heuristic, Idx_2, Init, Invpath_3, Path_2, R_4, Resign, X_6, Y_5);
        _ -> {Action_6, Cell_6, Closed_7, Cost, F, Found_4, G_3, Goal, Grid, Heuristic, Idx, Init, Invpath_3, Path, R_4, Resign, X_6, Y_5}
    end
end,
{Action_6, Cell_6, Closed_7, Cost, F, Found_4, G_3, Goal, Grid, Heuristic, Idx_2, Init, Invpath_3, Path_2, R_4, Resign, X_6, Y_5} = Fun_12(Action_6, Cell_6, Closed_7, Cost, F, Found_4, G_3, Goal, Grid, Heuristic, Idx, Init, Invpath_3, Path, R_4, Resign, X_6, Y_5),
        #{"path" => Path_2, "action" => Action_6}
    catch {return, Ret} -> Ret end.

main() ->
    try
        Grid_2 = [[0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0], [0, 1, 0, 0, 1, 0], [0, 0, 0, 0, 1, 0]],
        Init_2 = [0, 0],
        Goal_2 = [(erlang:length(Grid_2) - 1), (erlang:length((case erlang:is_map(Grid_2) of true -> maps:get(0, Grid_2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Grid_2) + 0 + 1, Grid_2); _ -> lists:nth(0 + 1, Grid_2) end end)) - 1)],
        Cost_2 = 1,
        Heuristic_2 = [],
        I_6 = 0,
        Fun_14 = fun Fun_14_loop(Cost_2, Goal_2, Grid_2, Heuristic_2, I_6, Init_2) ->
    case (I_6 < erlang:length(Grid_2)) of
        true ->
            Row_5 = [],
            J = 0,
            Fun_13 = fun Fun_13_loop(Cost_2, Goal_2, Grid_2, Heuristic_2, I_6, Init_2, J, Row_5) ->
    case (J < erlang:length((case erlang:is_map(Grid_2) of true -> maps:get(0, Grid_2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Grid_2) + 0 + 1, Grid_2); _ -> lists:nth(0 + 1, Grid_2) end end))) of
        true ->
            H = (iabs((I_6 - (case erlang:is_map(Goal_2) of true -> maps:get(0, Goal_2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Goal_2) + 0 + 1, Goal_2); _ -> lists:nth(0 + 1, Goal_2) end end))) + iabs((J - (case erlang:is_map(Goal_2) of true -> maps:get(1, Goal_2, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Goal_2) + 1 + 1, Goal_2); _ -> lists:nth(1 + 1, Goal_2) end end)))),
            case ((case erlang:is_map((case erlang:is_map(Grid_2) of true -> maps:get(I_6, Grid_2, nil); _ -> case I_6 < 0 of true -> lists:nth(erlang:length(Grid_2) + I_6 + 1, Grid_2); _ -> lists:nth(I_6 + 1, Grid_2) end end)) of true -> maps:get(J, (case erlang:is_map(Grid_2) of true -> maps:get(I_6, Grid_2, nil); _ -> case I_6 < 0 of true -> lists:nth(erlang:length(Grid_2) + I_6 + 1, Grid_2); _ -> lists:nth(I_6 + 1, Grid_2) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Grid_2) of true -> maps:get(I_6, Grid_2, nil); _ -> case I_6 < 0 of true -> lists:nth(erlang:length(Grid_2) + I_6 + 1, Grid_2); _ -> lists:nth(I_6 + 1, Grid_2) end end)) + J + 1, (case erlang:is_map(Grid_2) of true -> maps:get(I_6, Grid_2, nil); _ -> case I_6 < 0 of true -> lists:nth(erlang:length(Grid_2) + I_6 + 1, Grid_2); _ -> lists:nth(I_6 + 1, Grid_2) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Grid_2) of true -> maps:get(I_6, Grid_2, nil); _ -> case I_6 < 0 of true -> lists:nth(erlang:length(Grid_2) + I_6 + 1, Grid_2); _ -> lists:nth(I_6 + 1, Grid_2) end end)) end end) == 1) of
        true -> Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [99]),
            Row_8 = Row_6;
        _ -> Row_7 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [H]),
            Row_8 = Row_7
    end,
            J_2 = (J + 1),
            Fun_13_loop(Cost_2, Goal_2, Grid_2, Heuristic_2, I_6, Init_2, J_2, Row_8);
        _ -> {Cost_2, Goal_2, Grid_2, Heuristic_2, I_6, Init_2, J, Row_5}
    end
end,
{Cost_2, Goal_2, Grid_2, Heuristic_2, I_6, Init_2, J_2, Row_8} = Fun_13(Cost_2, Goal_2, Grid_2, Heuristic_2, I_6, Init_2, J, Row_5),
            Heuristic_3 = lists:append((case Heuristic_2 of nil -> []; _ -> Heuristic_2 end), [Row_8]),
            I_7 = (I_6 + 1),
            Fun_14_loop(Cost_2, Goal_2, Grid_2, Heuristic_3, I_7, Init_2);
        _ -> {Cost_2, Goal_2, Grid_2, Heuristic_2, I_6, Init_2}
    end
end,
{Cost_2, Goal_2, Grid_2, Heuristic_3, I_7, Init_2} = Fun_14(Cost_2, Goal_2, Grid_2, Heuristic_2, I_6, Init_2),
        Result = search(Grid_2, Init_2, Goal_2, Cost_2, Heuristic_3),
        io:format("~ts~n", [mochi_repr("ACTION MAP")]),
        Rr = 0,
        Fun_15 = fun Fun_15_loop(Cost_2, Goal_2, Grid_2, Heuristic_3, I_7, Init_2, Result, Rr) ->
    case (Rr < erlang:length(maps:get("action", Result, nil))) of
        true ->
            io:format("~ts~n", [mochi_repr((case erlang:is_map(maps:get("action", Result, nil)) of true -> maps:get(Rr, maps:get("action", Result, nil), nil); _ -> case Rr < 0 of true -> lists:nth(erlang:length(maps:get("action", Result, nil)) + Rr + 1, maps:get("action", Result, nil)); _ -> lists:nth(Rr + 1, maps:get("action", Result, nil)) end end))]),
            Rr_2 = (Rr + 1),
            Fun_15_loop(Cost_2, Goal_2, Grid_2, Heuristic_3, I_7, Init_2, Result, Rr_2);
        _ -> {Cost_2, Goal_2, Grid_2, Heuristic_3, I_7, Init_2, Result, Rr}
    end
end,
{Cost_2, Goal_2, Grid_2, Heuristic_3, I_7, Init_2, Result, Rr_2} = Fun_15(Cost_2, Goal_2, Grid_2, Heuristic_3, I_7, Init_2, Result, Rr),
        P = 0,
        Fun_16 = fun Fun_16_loop(Cost_2, Goal_2, Grid_2, Heuristic_3, I_7, Init_2, P, Result, Rr_2) ->
    case (P < erlang:length(maps:get("path", Result, nil))) of
        true ->
            io:format("~ts~n", [mochi_repr((case erlang:is_map(maps:get("path", Result, nil)) of true -> maps:get(P, maps:get("path", Result, nil), nil); _ -> case P < 0 of true -> lists:nth(erlang:length(maps:get("path", Result, nil)) + P + 1, maps:get("path", Result, nil)); _ -> lists:nth(P + 1, maps:get("path", Result, nil)) end end))]),
            P_2 = (P + 1),
            Fun_16_loop(Cost_2, Goal_2, Grid_2, Heuristic_3, I_7, Init_2, P_2, Result, Rr_2);
        _ -> {Cost_2, Goal_2, Grid_2, Heuristic_3, I_7, Init_2, P, Result, Rr_2}
    end
end,
{Cost_2, Goal_2, Grid_2, Heuristic_3, I_7, Init_2, P_2, Result, Rr_2} = Fun_16(Cost_2, Goal_2, Grid_2, Heuristic_3, I_7, Init_2, P, Result, Rr_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('DIRECTIONS', [[-1, 0], [0, -1], [1, 0], [0, 1]]),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
