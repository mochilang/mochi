#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, dfs_skip/4, articulation_points/1, main/0]).

% Generated by Mochi transpiler v0.10.73 (56e75d8a7a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> case V of
                true -> 1;
                false -> 0;
                _ -> list_to_integer(V)
            end
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


mochi_format(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false ->
            S = lists:flatten(io_lib:format("~.15f", [V])),
            re:replace(S, "\\.?0+$", "", [global, {return, list}])
    end;
mochi_format(V) when is_integer(V) -> integer_to_list(V);
mochi_format(V) when is_binary(V) -> V;
mochi_format(V) when is_list(V) -> mochi_str(V);
mochi_format(V) -> lists:flatten(io_lib:format("~p", [V])).


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_list(V) ->
    case io_lib:printable_list(V) of
        true -> V;
        false -> "[" ++ string:join([mochi_str(E) || E <- V], " ") ++ "]"
    end;
mochi_str(V) when is_float(V) ->
    I = trunc(V),
    case V == I of
        true -> integer_to_list(I);
        false -> erlang:float_to_list(V, [short])
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

dfs_skip(Graph, Visited, Skip, At) ->
    try
        Visited_2 = lists:sublist(Visited, At) ++ [true] ++ lists:nthtail(At + 1, Visited),
        Count = 1,
        Fun = fun Fun_loop(List, At, Count, Graph, Skip, Visited_2) ->
    case List of
        [] -> {At, Count, Graph, Skip, Visited_2};
        [To|To_rest] ->
        try
            case (To == Skip) of
        true -> throw({continue, At, Count, Graph, Skip, Visited_2});
        _ -> ok
    end,
            Count_3 = (case ((case erlang:is_map(Visited_2) of true -> maps:get(To, Visited_2, nil); _ -> case To < 0 of true -> mochi_nth(erlang:length(Visited_2) + To + 1, Visited_2); _ -> mochi_nth(To + 1, Visited_2) end end) == false) of
        true -> Count_2 = (Count + dfs_skip(Graph, Visited_2, Skip, To)),
            Count_2;
        _ -> Count
    end),
            Fun_loop(To_rest, At, Count_3, Graph, Skip, Visited_2)
        catch
            {continue, C0, C1, C2, C3, C4} -> Fun_loop(To_rest, C0, C1, C2, C3, C4);
            {break, Bs} -> Bs;
            break -> {At, Count, Graph, Skip, Visited_2}
        end;
        _ -> {At, Count, Graph, Skip, Visited_2}
    end
end,
{At, Count_3, Graph, Skip, Visited_2} = Fun((case erlang:is_map(Graph) of true -> maps:get(At, Graph, nil); _ -> case At < 0 of true -> mochi_nth(erlang:length(Graph) + At + 1, Graph); _ -> mochi_nth(At + 1, Graph) end end), At, Count, Graph, Skip, Visited_2),
        Count_3
    catch {return, RetCatch} -> RetCatch end.

articulation_points(Graph_2) ->
    try
        N = erlang:length(Graph_2),
        Result = [],
        V = 0,
        Fun_4 = fun Fun_4_loop(Graph_2, N, Result, V) ->
    case (V < N) of
        true ->
            Visited_3 = [],
            I = 0,
            Fun_2 = fun Fun_2_loop(Graph_2, I, N, Result, V, Visited_3) ->
    case (I < N) of
        true ->
            Visited_4 = lists:append((case Visited_3 of nil -> []; _ -> Visited_3 end), [false]),
            I_2 = (I + 1),
            Fun_2_loop(Graph_2, I_2, N, Result, V, Visited_4);
        _ -> {Graph_2, I, N, Result, V, Visited_3}
    end
end,
{Graph_2, I_2, N, Result, V, Visited_4} = Fun_2(Graph_2, I, N, Result, V, Visited_3),
            Start = 0,
            Fun_3 = fun Fun_3_loop(Graph_2, I_2, N, Result, Start, V, Visited_4) ->
    case ((Start == V) andalso (Start < N)) of
        true ->
            Start_2 = (Start + 1),
            Fun_3_loop(Graph_2, I_2, N, Result, Start_2, V, Visited_4);
        _ -> {Graph_2, I_2, N, Result, Start, V, Visited_4}
    end
end,
{Graph_2, I_2, N, Result, Start_2, V, Visited_4} = Fun_3(Graph_2, I_2, N, Result, Start, V, Visited_4),
            Reach = dfs_skip(Graph_2, Visited_4, V, Start_2),
            Result_3 = (case (Reach < (N - 1)) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [V]),
            io:format("~s~n", [mochi_format(V)]),
            Result_2;
        _ -> Result
    end),
            V_2 = (V + 1),
            Fun_4_loop(Graph_2, N, Result_3, V_2);
        _ -> {Graph_2, N, Result, V}
    end
end,
{Graph_2, N, Result_3, V_2} = Fun_4(Graph_2, N, Result, V),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Graph_3 = [[1, 2], [0, 2], [0, 1, 3, 5], [2, 4], [3], [2, 6, 8], [5, 7], [6, 8], [5, 7]],
        articulation_points(Graph_3),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
