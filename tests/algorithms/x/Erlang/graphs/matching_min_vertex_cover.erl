#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, contains/2, get_edges/1, matching_min_vertex_cover/1]).

% Generated by Mochi transpiler v0.10.65 (365e579019) on 2025-08-13 16:57 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

contains(Xs, V) ->
    try
        Fun = fun Fun_loop(List, V, Xs) ->
    case List of
        [] -> {V, Xs};
        [X|X_rest] ->
            case (X == V) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_loop(X_rest, V, Xs);
        _ -> {V, Xs}
    end
end,
{V, Xs} = Fun(Xs, V, Xs),
        false
    catch {return, RetCatch} -> RetCatch end.

get_edges(Graph) ->
    try
        N = maps:size(Graph),
        Edges = [],
        Fun_2 = fun Fun_2_loop(List, Edges, Graph, N) ->
    case List of
        [] -> {Edges, Graph, N};
        [I|I_rest] ->
            Fun_3 = fun Fun_3_loop(List, Edges, Graph, I, N) ->
    case List of
        [] -> {Edges, Graph, I, N};
        [J|J_rest] ->
            Edges_2 = lists:append((case Edges of nil -> []; _ -> Edges end), [[I, J]]),
            Fun_3_loop(J_rest, Edges_2, Graph, I, N);
        _ -> {Edges, Graph, I, N}
    end
end,
{Edges_2, Graph, I, N} = Fun_3(maps:get(I, Graph, nil), Edges, Graph, I, N),
            Fun_2_loop(I_rest, Edges_2, Graph, N);
        _ -> {Edges, Graph, N}
    end
end,
{Edges_2, Graph, N} = Fun_2(lists:seq(0, (N) - 1), Edges, Graph, N),
        Edges_2
    catch {return, RetCatch} -> RetCatch end.

matching_min_vertex_cover(Graph_2) ->
    try
        Chosen = [],
        Edges_3 = get_edges(Graph_2),
        Fun_5 = fun Fun_5_loop(Chosen, Edges_3, Graph_2) ->
    case (erlang:length(Edges_3) > 0) of
        true ->
            Idx = (erlang:length(Edges_3) - 1),
            E = (case erlang:is_map(Edges_3) of true -> maps:get(Idx, Edges_3, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Edges_3) + Idx + 1, Edges_3); _ -> mochi_nth(Idx + 1, Edges_3) end end),
            Edges_4 = (case erlang:is_binary(Edges_3) of true -> string:substr(Edges_3, 0 + 1, (Idx - 0)); _ -> lists:sublist(Edges_3, (0 + 1), (Idx - 0)) end),
            U = (case erlang:is_map(E) of true -> maps:get(0, E, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(E) + 0 + 1, E); _ -> mochi_nth(0 + 1, E) end end),
            V_2 = (case erlang:is_map(E) of true -> maps:get(1, E, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(E) + 1 + 1, E); _ -> mochi_nth(1 + 1, E) end end),
            case mochi_not(mochi_member(U, Chosen)) of
        true -> Chosen_2 = lists:append((case Chosen of nil -> []; _ -> Chosen end), [U]),
            Chosen_3 = Chosen_2;
        _ -> Chosen_3 = Chosen
    end,
            case mochi_not(mochi_member(V_2, Chosen_3)) of
        true -> Chosen_4 = lists:append((case Chosen_3 of nil -> []; _ -> Chosen_3 end), [V_2]),
            Chosen_5 = Chosen_4;
        _ -> Chosen_5 = Chosen_3
    end,
            Filtered = [],
            Fun_4 = fun Fun_4_loop(List, Chosen_5, E, Edges_4, Filtered, Graph_2, Idx, U, V_2) ->
    case List of
        [] -> {Chosen_5, E, Edges_4, Filtered, Graph_2, Idx, U, V_2};
        [Edge|Edge_rest] ->
            A = (case erlang:is_map(Edge) of true -> maps:get(0, Edge, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Edge) + 0 + 1, Edge); _ -> mochi_nth(0 + 1, Edge) end end),
            B = (case erlang:is_map(Edge) of true -> maps:get(1, Edge, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Edge) + 1 + 1, Edge); _ -> mochi_nth(1 + 1, Edge) end end),
            case ((((A /= U) andalso (B /= U)) andalso (A /= V_2)) andalso (B /= V_2)) of
        true -> Filtered_2 = lists:append((case Filtered of nil -> []; _ -> Filtered end), [Edge]),
            Filtered_3 = Filtered_2;
        _ -> Filtered_3 = Filtered
    end,
            Fun_4_loop(Edge_rest, Chosen_5, E, Edges_4, Filtered_3, Graph_2, Idx, U, V_2);
        _ -> {Chosen_5, E, Edges_4, Filtered, Graph_2, Idx, U, V_2}
    end
end,
{Chosen_5, E, Edges_4, Filtered_3, Graph_2, Idx, U, V_2} = Fun_4(Edges_4, Chosen_5, E, Edges_4, Filtered, Graph_2, Idx, U, V_2),
            Edges_5 = Filtered_3,
            Fun_5_loop(Chosen_5, Edges_5, Graph_2);
        _ -> {Chosen, Edges_3, Graph_2}
    end
end,
{Chosen_5, Edges_5, Graph_2} = Fun_5(Chosen, Edges_3, Graph_2),
        Chosen_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('graph', #{0 => [1, 3], 1 => [0, 3], 2 => [0, 3, 4], 3 => [0, 1, 2], 4 => [2, 3]}),
    erlang:put('cover', matching_min_vertex_cover(erlang:get('graph'))),
    io:format("~ts~n", [mochi_str(erlang:get('cover'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
