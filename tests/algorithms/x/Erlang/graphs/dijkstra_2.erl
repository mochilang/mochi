#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, print_dist/1, min_dist/2, dijkstra/2, main/0]).

% Generated by Mochi transpiler v0.10.65 (428ea06e9a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

print_dist(Dist) ->
    try
        io:format("~ts~n", [mochi_repr("Vertex Distance")]),
        I = 0,
        Fun = fun Fun_loop(Dist, I) ->
    case (I < erlang:length(Dist)) of
        true ->
            case ((case erlang:is_map(Dist) of true -> maps:get(I, Dist, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Dist) + I + 1, Dist); _ -> mochi_nth(I + 1, Dist) end end) >= 1000000000.0) of
        true -> io:format("~ts ~ts~n", [mochi_repr(I), mochi_repr("\tINF")]);
        _ -> io:format("~ts ~ts ~ts~n", [mochi_repr(I), mochi_repr("\t"), mochi_repr(mochi_to_int((case erlang:is_map(Dist) of true -> maps:get(I, Dist, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Dist) + I + 1, Dist); _ -> mochi_nth(I + 1, Dist) end end)))])
    end,
            I_2 = (I + 1),
            Fun_loop(Dist, I_2);
        _ -> {Dist, I}
    end
end,
{Dist, I_2} = Fun(Dist, I),
        nil
    catch {return, RetCatch} -> RetCatch end.

min_dist(Mdist, Vset) ->
    try
        Min_val = 1000000000.0,
        Min_ind = -1,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Mdist, Min_ind, Min_val, Vset) ->
    case (I_3 < erlang:length(Mdist)) of
        true ->
            case (mochi_not((case erlang:is_map(Vset) of true -> maps:get(I_3, Vset, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Vset) + I_3 + 1, Vset); _ -> mochi_nth(I_3 + 1, Vset) end end)) andalso ((case erlang:is_map(Mdist) of true -> maps:get(I_3, Mdist, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mdist) + I_3 + 1, Mdist); _ -> mochi_nth(I_3 + 1, Mdist) end end) < Min_val)) of
        true -> Min_val_2 = (case erlang:is_map(Mdist) of true -> maps:get(I_3, Mdist, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mdist) + I_3 + 1, Mdist); _ -> mochi_nth(I_3 + 1, Mdist) end end),
            Min_ind_2 = I_3,
            Min_ind_3 = Min_ind_2,
            Min_val_3 = Min_val_2;
        _ -> Min_ind_3 = Min_ind,
            Min_val_3 = Min_val
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Mdist, Min_ind_3, Min_val_3, Vset);
        _ -> {I_3, Mdist, Min_ind, Min_val, Vset}
    end
end,
{I_4, Mdist, Min_ind_3, Min_val_3, Vset} = Fun_2(I_3, Mdist, Min_ind, Min_val, Vset),
        Min_ind_3
    catch {return, RetCatch} -> RetCatch end.

dijkstra(Graph, Src) ->
    try
        V = erlang:length(Graph),
        Mdist_2 = [],
        Vset_2 = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Graph, I_5, Mdist_2, Src, V, Vset_2) ->
    case (I_5 < V) of
        true ->
            Mdist_3 = lists:append((case Mdist_2 of nil -> []; _ -> Mdist_2 end), [1000000000.0]),
            Vset_3 = lists:append((case Vset_2 of nil -> []; _ -> Vset_2 end), [false]),
            I_6 = (I_5 + 1),
            Fun_3_loop(Graph, I_6, Mdist_3, Src, V, Vset_3);
        _ -> {Graph, I_5, Mdist_2, Src, V, Vset_2}
    end
end,
{Graph, I_6, Mdist_3, Src, V, Vset_3} = Fun_3(Graph, I_5, Mdist_2, Src, V, Vset_2),
        Mdist_4 = lists:sublist(Mdist_3, Src) ++ [0.0] ++ lists:nthtail(Src + 1, Mdist_3),
        Count = 0,
        Fun_5 = fun Fun_5_loop(Count, Graph, I_6, Mdist_4, Src, V, Vset_3) ->
    case (Count < (V - 1)) of
        true ->
            U = min_dist(Mdist_4, Vset_3),
            Vset_4 = lists:sublist(Vset_3, U) ++ [true] ++ lists:nthtail(U + 1, Vset_3),
            I_7 = 0,
            Fun_4 = fun Fun_4_loop(Count, Graph, I_7, Mdist_4, Src, U, V, Vset_4) ->
    case (I_7 < V) of
        true ->
            Alt = ((case erlang:is_map(Mdist_4) of true -> maps:get(U, Mdist_4, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Mdist_4) + U + 1, Mdist_4); _ -> mochi_nth(U + 1, Mdist_4) end end) + (case erlang:is_map((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) of true -> maps:get(I_7, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) + I_7 + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)); _ -> mochi_nth(I_7 + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) end end)),
            case ((mochi_not((case erlang:is_map(Vset_4) of true -> maps:get(I_7, Vset_4, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Vset_4) + I_7 + 1, Vset_4); _ -> mochi_nth(I_7 + 1, Vset_4) end end)) andalso ((case erlang:is_map((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) of true -> maps:get(I_7, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) + I_7 + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)); _ -> mochi_nth(I_7 + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) end end) < 1000000000.0)) andalso (Alt < (case erlang:is_map(Mdist_4) of true -> maps:get(I_7, Mdist_4, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Mdist_4) + I_7 + 1, Mdist_4); _ -> mochi_nth(I_7 + 1, Mdist_4) end end))) of
        true -> Mdist_5 = lists:sublist(Mdist_4, I_7) ++ [Alt] ++ lists:nthtail(I_7 + 1, Mdist_4),
            Mdist_6 = Mdist_5;
        _ -> Mdist_6 = Mdist_4
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(Count, Graph, I_8, Mdist_6, Src, U, V, Vset_4);
        _ -> {Count, Graph, I_7, Mdist_4, Src, U, V, Vset_4}
    end
end,
{Count, Graph, I_8, Mdist_6, Src, U, V, Vset_4} = Fun_4(Count, Graph, I_7, Mdist_4, Src, U, V, Vset_4),
            Count_2 = (Count + 1),
            Fun_5_loop(Count_2, Graph, I_8, Mdist_6, Src, V, Vset_4);
        _ -> {Count, Graph, I_6, Mdist_4, Src, V, Vset_3}
    end
end,
{Count_2, Graph, I_8, Mdist_6, Src, V, Vset_4} = Fun_5(Count, Graph, I_6, Mdist_4, Src, V, Vset_3),
        Mdist_6
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Graph_2 = [[0.0, 10.0, 1000000000.0, 1000000000.0, 5.0], [1000000000.0, 0.0, 1.0, 1000000000.0, 2.0], [1000000000.0, 1000000000.0, 0.0, 4.0, 1000000000.0], [1000000000.0, 1000000000.0, 6.0, 0.0, 1000000000.0], [1000000000.0, 3.0, 9.0, 2.0, 0.0]],
        Dist_2 = dijkstra(Graph_2, 0),
        print_dist(Dist_2),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('INF', 1000000000.0),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
