#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, is_bipartite_bfs/1]).

% Generated by Mochi transpiler v0.10.65 (5cabcd7927)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

is_bipartite_bfs(Graph) ->
    try
        Visited = #{},
        Fun = fun Fun_loop(List, Graph, Visited) ->
    case List of
        [] -> {Graph, Visited};
        [Node|Node_rest] ->
            case mochi_not(maps:is_key(Node, Visited)) of
        true -> Queue = [],
            Queue_2 = lists:append((case Queue of nil -> []; _ -> Queue end), [Node]),
            Visited_2 = maps:put(Node, 0, Visited),
            Fun_3 = fun Fun_3_loop(Graph, Node, Queue_2, Visited_2) ->
    case (erlang:length(Queue_2) > 0) of
        true ->
            Curr = (case erlang:is_map(Queue_2) of true -> maps:get(0, Queue_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Queue_2) + 0 + 1, Queue_2); _ -> mochi_nth(0 + 1, Queue_2) end end),
            Queue_3 = lists:sublist(Queue_2, 1 + 1, (erlang:length(Queue_2) - 1)),
            Fun_2 = fun Fun_2_loop(List, Curr, Graph, Node, Queue_3, Visited_2) ->
    case List of
        [] -> {Curr, Graph, Node, Queue_3, Visited_2};
        [Neighbor|Neighbor_rest] ->
            case mochi_not(maps:is_key(Neighbor, Visited_2)) of
        true -> Visited_3 = maps:put(Neighbor, (1 - maps:get(Curr, Visited_2, nil)), Visited_2),
            Queue_4 = lists:append((case Queue_3 of nil -> []; _ -> Queue_3 end), [Neighbor]),
            Queue_5 = Queue_4,
            Visited_4 = Visited_3;
        _ -> case (maps:get(Neighbor, Visited_2, nil) == maps:get(Curr, Visited_2, nil)) of
        true -> throw({return, false});
        _ -> ok
    end,
            Queue_5 = Queue_3,
            Visited_4 = Visited_2
    end,
            Fun_2_loop(Neighbor_rest, Curr, Graph, Node, Queue_5, Visited_4);
        _ -> {Curr, Graph, Node, Queue_3, Visited_2}
    end
end,
{Curr, Graph, Node, Queue_5, Visited_4} = Fun_2(maps:get(Curr, Graph, nil), Curr, Graph, Node, Queue_3, Visited_2),
            Fun_3_loop(Graph, Node, Queue_5, Visited_4);
        _ -> {Graph, Node, Queue_2, Visited_2}
    end
end,
{Graph, Node, Queue_5, Visited_4} = Fun_3(Graph, Node, Queue_2, Visited_2),
            Fun_4 = Fun_3,
            Queue_6 = Queue_5,
            Visited_5 = Visited_4;
        _ -> Fun_4 = nil,
            Queue_6 = nil,
            Visited_5 = Visited
    end,
            Fun_loop(Node_rest, Graph, Visited_5);
        _ -> {Graph, Visited}
    end
end,
{Graph, Visited_5} = Fun(maps:keys(Graph), Graph, Visited),
        true
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('graph', #{0 => [1, 3], 1 => [0, 2], 2 => [1, 3], 3 => [0, 2]}),
    io:format("~ts~n", [mochi_str(is_bipartite_bfs(erlang:get('graph')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
