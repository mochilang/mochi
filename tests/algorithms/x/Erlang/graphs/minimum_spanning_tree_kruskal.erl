#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, sort_edges/1, find_parent/2, kruskal/2, edges_to_string/1]).

% Generated by Mochi transpiler v0.10.66 (8fdd1fe3d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

sort_edges(Edges) ->
    try
        Es = Edges,
        I = 0,
        Fun_2 = fun Fun_2_loop(Edges, Es, I) ->
    case (I < erlang:length(Es)) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Edges, Es, I, J) ->
    case (J < ((erlang:length(Es) - I) - 1)) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(Es) of true -> maps:get(J, Es, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Es) + J + 1, Es); _ -> mochi_nth(J + 1, Es) end end)) of true -> maps:get(2, (case erlang:is_map(Es) of true -> maps:get(J, Es, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Es) + J + 1, Es); _ -> mochi_nth(J + 1, Es) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Es) of true -> maps:get(J, Es, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Es) + J + 1, Es); _ -> mochi_nth(J + 1, Es) end end)) + 2 + 1, (case erlang:is_map(Es) of true -> maps:get(J, Es, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Es) + J + 1, Es); _ -> mochi_nth(J + 1, Es) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Es) of true -> maps:get(J, Es, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Es) + J + 1, Es); _ -> mochi_nth(J + 1, Es) end end)) end end) > (case erlang:is_map((case erlang:is_map(Es) of true -> maps:get((J + 1), Es, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Es) + (J + 1) + 1, Es); _ -> mochi_nth((J + 1) + 1, Es) end end)) of true -> maps:get(2, (case erlang:is_map(Es) of true -> maps:get((J + 1), Es, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Es) + (J + 1) + 1, Es); _ -> mochi_nth((J + 1) + 1, Es) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Es) of true -> maps:get((J + 1), Es, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Es) + (J + 1) + 1, Es); _ -> mochi_nth((J + 1) + 1, Es) end end)) + 2 + 1, (case erlang:is_map(Es) of true -> maps:get((J + 1), Es, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Es) + (J + 1) + 1, Es); _ -> mochi_nth((J + 1) + 1, Es) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Es) of true -> maps:get((J + 1), Es, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Es) + (J + 1) + 1, Es); _ -> mochi_nth((J + 1) + 1, Es) end end)) end end)) of
        true -> Temp = (case erlang:is_map(Es) of true -> maps:get(J, Es, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Es) + J + 1, Es); _ -> mochi_nth(J + 1, Es) end end),
            Es_2 = lists:sublist(Es, J) ++ [(case erlang:is_map(Es) of true -> maps:get((J + 1), Es, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Es) + (J + 1) + 1, Es); _ -> mochi_nth((J + 1) + 1, Es) end end)] ++ lists:nthtail(J + 1, Es),
            Es_3 = lists:sublist(Es_2, (J + 1)) ++ [Temp] ++ lists:nthtail((J + 1) + 1, Es_2),
            Es_4 = Es_3,
            Temp_2 = Temp;
        _ -> Es_4 = Es,
            Temp_2 = nil
    end,
            J_2 = (J + 1),
            Fun_loop(Edges, Es_4, I, J_2);
        _ -> {Edges, Es, I, J}
    end
end,
{Edges, Es_4, I, J_2} = Fun(Edges, Es, I, J),
            I_2 = (I + 1),
            Fun_2_loop(Edges, Es_4, I_2);
        _ -> {Edges, Es, I}
    end
end,
{Edges, Es_4, I_2} = Fun_2(Edges, Es, I),
        Es_4
    catch {return, RetCatch} -> RetCatch end.

find_parent(Parent, I_3) ->
    try
        case ((case erlang:is_map(Parent) of true -> maps:get(I_3, Parent, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Parent) + I_3 + 1, Parent); _ -> mochi_nth(I_3 + 1, Parent) end end) /= I_3) of
        true -> Parent_2 = lists:sublist(Parent, I_3) ++ [find_parent(Parent, (case erlang:is_map(Parent) of true -> maps:get(I_3, Parent, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Parent) + I_3 + 1, Parent); _ -> mochi_nth(I_3 + 1, Parent) end end))] ++ lists:nthtail(I_3 + 1, Parent),
            Parent_3 = Parent_2;
        _ -> Parent_3 = Parent
    end,
        (case erlang:is_map(Parent_3) of true -> maps:get(I_3, Parent_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Parent_3) + I_3 + 1, Parent_3); _ -> mochi_nth(I_3 + 1, Parent_3) end end)
    catch {return, RetCatch} -> RetCatch end.

kruskal(Num_nodes, Edges_2) ->
    try
        Es_5 = sort_edges(Edges_2),
        Parent_4 = [],
        I_4 = 0,
        Fun_3 = fun Fun_3_loop(Edges_2, Es_5, I_4, Num_nodes, Parent_4) ->
    case (I_4 < Num_nodes) of
        true ->
            Parent_5 = lists:append((case Parent_4 of nil -> []; _ -> Parent_4 end), [I_4]),
            I_5 = (I_4 + 1),
            Fun_3_loop(Edges_2, Es_5, I_5, Num_nodes, Parent_5);
        _ -> {Edges_2, Es_5, I_4, Num_nodes, Parent_4}
    end
end,
{Edges_2, Es_5, I_5, Num_nodes, Parent_5} = Fun_3(Edges_2, Es_5, I_4, Num_nodes, Parent_4),
        Mst = [],
        Idx = 0,
        Fun_4 = fun Fun_4_loop(Edges_2, Es_5, I_5, Idx, Mst, Num_nodes, Parent_5) ->
    case (Idx < erlang:length(Es_5)) of
        true ->
            E = (case erlang:is_map(Es_5) of true -> maps:get(Idx, Es_5, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Es_5) + Idx + 1, Es_5); _ -> mochi_nth(Idx + 1, Es_5) end end),
            Pa = find_parent(Parent_5, (case erlang:is_map(E) of true -> maps:get(0, E, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(E) + 0 + 1, E); _ -> mochi_nth(0 + 1, E) end end)),
            Pb = find_parent(Parent_5, (case erlang:is_map(E) of true -> maps:get(1, E, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(E) + 1 + 1, E); _ -> mochi_nth(1 + 1, E) end end)),
            case (Pa /= Pb) of
        true -> Mst_2 = lists:append((case Mst of nil -> []; _ -> Mst end), [E]),
            Parent_6 = lists:sublist(Parent_5, Pa) ++ [Pb] ++ lists:nthtail(Pa + 1, Parent_5),
            Mst_3 = Mst_2,
            Parent_7 = Parent_6;
        _ -> Mst_3 = Mst,
            Parent_7 = Parent_5
    end,
            Idx_2 = (Idx + 1),
            Fun_4_loop(Edges_2, Es_5, I_5, Idx_2, Mst_3, Num_nodes, Parent_7);
        _ -> {Edges_2, Es_5, I_5, Idx, Mst, Num_nodes, Parent_5}
    end
end,
{Edges_2, Es_5, I_5, Idx_2, Mst_3, Num_nodes, Parent_7} = Fun_4(Edges_2, Es_5, I_5, Idx, Mst, Num_nodes, Parent_5),
        Mst_3
    catch {return, RetCatch} -> RetCatch end.

edges_to_string(Es_6) ->
    try
        S = "[",
        I_6 = 0,
        Fun_5 = fun Fun_5_loop(Es_6, I_6, S) ->
    case (I_6 < erlang:length(Es_6)) of
        true ->
            E_2 = (case erlang:is_map(Es_6) of true -> maps:get(I_6, Es_6, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Es_6) + I_6 + 1, Es_6); _ -> mochi_nth(I_6 + 1, Es_6) end end),
            S_2 = (((((((S ++ "(") ++ mochi_str((case erlang:is_map(E_2) of true -> maps:get(0, E_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(E_2) + 0 + 1, E_2); _ -> mochi_nth(0 + 1, E_2) end end))) ++ ", ") ++ mochi_str((case erlang:is_map(E_2) of true -> maps:get(1, E_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(E_2) + 1 + 1, E_2); _ -> mochi_nth(1 + 1, E_2) end end))) ++ ", ") ++ mochi_str((case erlang:is_map(E_2) of true -> maps:get(2, E_2, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(E_2) + 2 + 1, E_2); _ -> mochi_nth(2 + 1, E_2) end end))) ++ ")"),
            case (I_6 < (erlang:length(Es_6) - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_7 = (I_6 + 1),
            Fun_5_loop(Es_6, I_7, S_4);
        _ -> {Es_6, I_6, S}
    end
end,
{Es_6, I_7, S_4} = Fun_5(Es_6, I_6, S),
        S_5 = (S_4 ++ "]"),
        S_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('edges1', [[0, 1, 3], [1, 2, 5], [2, 3, 1]]),
    io:format("~ts~n", [mochi_repr(edges_to_string(kruskal(4, erlang:get('edges1'))))]),
    erlang:put('edges2', [[0, 1, 3], [1, 2, 5], [2, 3, 1], [0, 2, 1], [0, 3, 2]]),
    io:format("~ts~n", [mochi_repr(edges_to_string(kruskal(4, erlang:get('edges2'))))]),
    erlang:put('edges3', [[0, 1, 3], [1, 2, 5], [2, 3, 1], [0, 2, 1], [0, 3, 2], [2, 1, 1]]),
    io:format("~ts~n", [mochi_repr(edges_to_string(kruskal(4, erlang:get('edges3'))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
