#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, key/2, parse_int/1, parse_key/1, neighbors/1, reverse_list/1, bfs/2, bidirectional_bfs/2, path_to_string/1]).

% Generated by Mochi transpiler v0.10.65 (428ea06e9a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) ->
                K = case Key of
                    <<_/binary>> -> Key;
                    _ when is_integer(Key) -> <<Key>>;
                    _ -> list_to_binary(Key)
                end,
                binary:match(Coll, K) /= nomatch;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

key(Y, X) ->
    try
        ((mochi_str(Y) ++ ",") ++ mochi_str(X))
    catch {return, RetCatch} -> RetCatch end.

parse_int(S) ->
    try
        Value = 0,
        I = 0,
        Fun = fun Fun_loop(I, S, Value) ->
    case (I < erlang:length(S)) of
        true ->
            C = string:substr(S, I + 1, 1),
            Value_2 = ((Value * 10) + mochi_to_int(C)),
            I_2 = (I + 1),
            Fun_loop(I_2, S, Value_2);
        _ -> {I, S, Value}
    end
end,
{I_2, S, Value_2} = Fun(I, S, Value),
        Value_2
    catch {return, RetCatch} -> RetCatch end.

parse_key(K) ->
    try
        Idx = 0,
        Fun_2 = fun Fun_2_loop(Idx, K) ->
    case ((Idx < erlang:length(K)) andalso (string:substr(K, Idx + 1, ((Idx + 1) - Idx)) /= ",")) of
        true ->
            Idx_2 = (Idx + 1),
            Fun_2_loop(Idx_2, K);
        _ -> {Idx, K}
    end
end,
{Idx_2, K} = Fun_2(Idx, K),
        Y_2 = parse_int(string:substr(K, 0 + 1, (Idx_2 - 0))),
        X_2 = parse_int(string:substr(K, (Idx_2 + 1) + 1, (erlang:length(K) - (Idx_2 + 1)))),
        [Y_2, X_2]
    catch {return, RetCatch} -> RetCatch end.

neighbors(Pos) ->
    try
        Coords = parse_key(Pos),
        Y_3 = (case erlang:is_map(Coords) of true -> maps:get(0, Coords, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Coords) + 0 + 1, Coords); _ -> mochi_nth(0 + 1, Coords) end end),
        X_3 = (case erlang:is_map(Coords) of true -> maps:get(1, Coords, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Coords) + 1 + 1, Coords); _ -> mochi_nth(1 + 1, Coords) end end),
        Res = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Coords, I_3, Pos, Res, X_3, Y_3) ->
    case (I_3 < erlang:length(erlang:get('delta'))) of
        true ->
            Ny = (Y_3 + (case erlang:is_map((case erlang:is_map(erlang:get('delta')) of true -> maps:get(I_3, erlang:get('delta'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('delta')) + I_3 + 1, erlang:get('delta')); _ -> mochi_nth(I_3 + 1, erlang:get('delta')) end end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('delta')) of true -> maps:get(I_3, erlang:get('delta'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('delta')) + I_3 + 1, erlang:get('delta')); _ -> mochi_nth(I_3 + 1, erlang:get('delta')) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('delta')) of true -> maps:get(I_3, erlang:get('delta'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('delta')) + I_3 + 1, erlang:get('delta')); _ -> mochi_nth(I_3 + 1, erlang:get('delta')) end end)) + 0 + 1, (case erlang:is_map(erlang:get('delta')) of true -> maps:get(I_3, erlang:get('delta'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('delta')) + I_3 + 1, erlang:get('delta')); _ -> mochi_nth(I_3 + 1, erlang:get('delta')) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(erlang:get('delta')) of true -> maps:get(I_3, erlang:get('delta'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('delta')) + I_3 + 1, erlang:get('delta')); _ -> mochi_nth(I_3 + 1, erlang:get('delta')) end end)) end end)),
            Nx = (X_3 + (case erlang:is_map((case erlang:is_map(erlang:get('delta')) of true -> maps:get(I_3, erlang:get('delta'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('delta')) + I_3 + 1, erlang:get('delta')); _ -> mochi_nth(I_3 + 1, erlang:get('delta')) end end)) of true -> maps:get(1, (case erlang:is_map(erlang:get('delta')) of true -> maps:get(I_3, erlang:get('delta'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('delta')) + I_3 + 1, erlang:get('delta')); _ -> mochi_nth(I_3 + 1, erlang:get('delta')) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('delta')) of true -> maps:get(I_3, erlang:get('delta'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('delta')) + I_3 + 1, erlang:get('delta')); _ -> mochi_nth(I_3 + 1, erlang:get('delta')) end end)) + 1 + 1, (case erlang:is_map(erlang:get('delta')) of true -> maps:get(I_3, erlang:get('delta'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('delta')) + I_3 + 1, erlang:get('delta')); _ -> mochi_nth(I_3 + 1, erlang:get('delta')) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(erlang:get('delta')) of true -> maps:get(I_3, erlang:get('delta'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('delta')) + I_3 + 1, erlang:get('delta')); _ -> mochi_nth(I_3 + 1, erlang:get('delta')) end end)) end end)),
            case ((((Ny >= 0) andalso (Ny < erlang:length(erlang:get('grid')))) andalso (Nx >= 0)) andalso (Nx < erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get(0, erlang:get('grid'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + 0 + 1, erlang:get('grid')); _ -> mochi_nth(0 + 1, erlang:get('grid')) end end)))) of
        true -> case ((case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get(Ny, erlang:get('grid'), nil); _ -> case Ny < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + Ny + 1, erlang:get('grid')); _ -> mochi_nth(Ny + 1, erlang:get('grid')) end end)) of true -> maps:get(Nx, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(Ny, erlang:get('grid'), nil); _ -> case Ny < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + Ny + 1, erlang:get('grid')); _ -> mochi_nth(Ny + 1, erlang:get('grid')) end end), nil); _ -> case Nx < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get(Ny, erlang:get('grid'), nil); _ -> case Ny < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + Ny + 1, erlang:get('grid')); _ -> mochi_nth(Ny + 1, erlang:get('grid')) end end)) + Nx + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(Ny, erlang:get('grid'), nil); _ -> case Ny < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + Ny + 1, erlang:get('grid')); _ -> mochi_nth(Ny + 1, erlang:get('grid')) end end)); _ -> mochi_nth(Nx + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(Ny, erlang:get('grid'), nil); _ -> case Ny < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + Ny + 1, erlang:get('grid')); _ -> mochi_nth(Ny + 1, erlang:get('grid')) end end)) end end) == 0) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [key(Ny, Nx)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            Res_4 = Res_3;
        _ -> Res_4 = Res
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(Coords, I_4, Pos, Res_4, X_3, Y_3);
        _ -> {Coords, I_3, Pos, Res, X_3, Y_3}
    end
end,
{Coords, I_4, Pos, Res_4, X_3, Y_3} = Fun_3(Coords, I_3, Pos, Res, X_3, Y_3),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

reverse_list(Lst) ->
    try
        Res_5 = [],
        I_5 = (erlang:length(Lst) - 1),
        Fun_4 = fun Fun_4_loop(I_5, Lst, Res_5) ->
    case (I_5 >= 0) of
        true ->
            Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [(case erlang:is_map(Lst) of true -> maps:get(I_5, Lst, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Lst) + I_5 + 1, Lst); _ -> mochi_nth(I_5 + 1, Lst) end end)]),
            I_6 = (I_5 - 1),
            Fun_4_loop(I_6, Lst, Res_6);
        _ -> {I_5, Lst, Res_5}
    end
end,
{I_6, Lst, Res_6} = Fun_4(I_5, Lst, Res_5),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

bfs(Start, Goal) ->
    try
        Queue = [],
        Queue_2 = lists:append((case Queue of nil -> []; _ -> Queue end), [#{"pos" => Start, "path" => [Start]}]),
        Head = 0,
        Visited = #{"start" => true},
        Fun_6 = fun Fun_6_loop(Goal, Head, Queue_2, Start, Visited) ->
    case (Head < erlang:length(Queue_2)) of
        true ->
            Node = (case erlang:is_map(Queue_2) of true -> maps:get(Head, Queue_2, nil); _ -> case Head < 0 of true -> mochi_nth(erlang:length(Queue_2) + Head + 1, Queue_2); _ -> mochi_nth(Head + 1, Queue_2) end end),
            Head_2 = (Head + 1),
            case (maps:get("pos", Node, nil) == Goal) of
        true -> throw({return, maps:get("path", Node, nil)});
        _ -> ok
    end,
            Neigh = neighbors(maps:get("pos", Node, nil)),
            I_7 = 0,
            Fun_5 = fun Fun_5_loop(Goal, Head_2, I_7, Neigh, Node, Queue_2, Start, Visited) ->
    case (I_7 < erlang:length(Neigh)) of
        true ->
            Npos = (case erlang:is_map(Neigh) of true -> maps:get(I_7, Neigh, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Neigh) + I_7 + 1, Neigh); _ -> mochi_nth(I_7 + 1, Neigh) end end),
            case mochi_not(maps:is_key(Npos, Visited)) of
        true -> Visited_2 = maps:put(Npos, true, Visited),
            New_path = lists:append((case maps:get("path", Node, nil) of nil -> []; _ -> maps:get("path", Node, nil) end), [Npos]),
            Queue_3 = lists:append((case Queue_2 of nil -> []; _ -> Queue_2 end), [#{"pos" => Npos, "path" => New_path}]),
            New_path_2 = New_path,
            Queue_4 = Queue_3,
            Visited_3 = Visited_2;
        _ -> New_path_2 = nil,
            Queue_4 = Queue_2,
            Visited_3 = Visited
    end,
            I_8 = (I_7 + 1),
            Fun_5_loop(Goal, Head_2, I_8, Neigh, Node, Queue_4, Start, Visited_3);
        _ -> {Goal, Head_2, I_7, Neigh, Node, Queue_2, Start, Visited}
    end
end,
{Goal, Head_2, I_8, Neigh, Node, Queue_4, Start, Visited_3} = Fun_5(Goal, Head_2, I_7, Neigh, Node, Queue_2, Start, Visited),
            Fun_6_loop(Goal, Head_2, Queue_4, Start, Visited_3);
        _ -> {Goal, Head, Queue_2, Start, Visited}
    end
end,
{Goal, Head_2, Queue_4, Start, Visited_3} = Fun_6(Goal, Head, Queue_2, Start, Visited),
        []
    catch {return, RetCatch} -> RetCatch end.

bidirectional_bfs(Start_2, Goal_2) ->
    try
        Queue_f = [],
        Queue_b = [],
        Queue_f_2 = lists:append((case Queue_f of nil -> []; _ -> Queue_f end), [#{"pos" => Start_2, "path" => [Start_2]}]),
        Queue_b_2 = lists:append((case Queue_b of nil -> []; _ -> Queue_b end), [#{"pos" => Goal_2, "path" => [Goal_2]}]),
        Head_f = 0,
        Head_b = 0,
        Visited_f = #{"start" => [Start_2]},
        Visited_b = #{"goal" => [Goal_2]},
        Fun_15 = fun Fun_15_loop(Goal_2, Head_b, Head_f, Queue_b_2, Queue_f_2, Start_2, Visited_b, Visited_f) ->
    case ((Head_f < erlang:length(Queue_f_2)) andalso (Head_b < erlang:length(Queue_b_2))) of
        true ->
            Node_f = (case erlang:is_map(Queue_f_2) of true -> maps:get(Head_f, Queue_f_2, nil); _ -> case Head_f < 0 of true -> mochi_nth(erlang:length(Queue_f_2) + Head_f + 1, Queue_f_2); _ -> mochi_nth(Head_f + 1, Queue_f_2) end end),
            Head_f_2 = (Head_f + 1),
            Neigh_f = neighbors(maps:get("pos", Node_f, nil)),
            I_9 = 0,
            Fun_10 = fun Fun_10_loop(Goal_2, Head_b, Head_f_2, I_9, Neigh_f, Node_f, Queue_b_2, Queue_f_2, Start_2, Visited_b, Visited_f) ->
    case (I_9 < erlang:length(Neigh_f)) of
        true ->
            Npos_2 = (case erlang:is_map(Neigh_f) of true -> maps:get(I_9, Neigh_f, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Neigh_f) + I_9 + 1, Neigh_f); _ -> mochi_nth(I_9 + 1, Neigh_f) end end),
            case mochi_not(maps:is_key(Npos_2, Visited_f)) of
        true -> New_path_3 = lists:append((case maps:get("path", Node_f, nil) of nil -> []; _ -> maps:get("path", Node_f, nil) end), [Npos_2]),
            Visited_f_2 = maps:put(Npos_2, New_path_3, Visited_f),
            case maps:is_key(Npos_2, Visited_b) of
        true -> Rev = reverse_list(maps:get(Npos_2, Visited_b, nil)),
            J = 1,
            Fun_7 = fun Fun_7_loop(Goal_2, Head_b, Head_f_2, I_9, J, Neigh_f, New_path_3, Node_f, Npos_2, Queue_b_2, Queue_f_2, Rev, Start_2, Visited_b, Visited_f_2) ->
    case (J < erlang:length(Rev)) of
        true ->
            New_path_4 = lists:append((case New_path_3 of nil -> []; _ -> New_path_3 end), [(case erlang:is_map(Rev) of true -> maps:get(J, Rev, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Rev) + J + 1, Rev); _ -> mochi_nth(J + 1, Rev) end end)]),
            J_2 = (J + 1),
            Fun_7_loop(Goal_2, Head_b, Head_f_2, I_9, J_2, Neigh_f, New_path_4, Node_f, Npos_2, Queue_b_2, Queue_f_2, Rev, Start_2, Visited_b, Visited_f_2);
        _ -> {Goal_2, Head_b, Head_f_2, I_9, J, Neigh_f, New_path_3, Node_f, Npos_2, Queue_b_2, Queue_f_2, Rev, Start_2, Visited_b, Visited_f_2}
    end
end,
{Goal_2, Head_b, Head_f_2, I_9, J_2, Neigh_f, New_path_4, Node_f, Npos_2, Queue_b_2, Queue_f_2, Rev, Start_2, Visited_b, Visited_f_2} = Fun_7(Goal_2, Head_b, Head_f_2, I_9, J, Neigh_f, New_path_3, Node_f, Npos_2, Queue_b_2, Queue_f_2, Rev, Start_2, Visited_b, Visited_f_2),
            throw({return, New_path_4}),
            Fun_8 = Fun_7,
            J_3 = J_2,
            New_path_5 = New_path_4,
            Rev_2 = Rev;
        _ -> Fun_8 = nil,
            J_3 = nil,
            New_path_5 = New_path_3,
            Rev_2 = nil
    end,
            Queue_f_3 = lists:append((case Queue_f_2 of nil -> []; _ -> Queue_f_2 end), [#{"pos" => Npos_2, "path" => New_path_5}]),
            Fun_9 = Fun_8,
            J_4 = J_3,
            New_path_6 = New_path_5,
            Queue_f_4 = Queue_f_3,
            Rev_3 = Rev_2,
            Visited_f_3 = Visited_f_2;
        _ -> Fun_9 = nil,
            J_4 = nil,
            New_path_6 = nil,
            Queue_f_4 = Queue_f_2,
            Rev_3 = nil,
            Visited_f_3 = Visited_f
    end,
            I_10 = (I_9 + 1),
            Fun_10_loop(Goal_2, Head_b, Head_f_2, I_10, Neigh_f, Node_f, Queue_b_2, Queue_f_4, Start_2, Visited_b, Visited_f_3);
        _ -> {Goal_2, Head_b, Head_f_2, I_9, Neigh_f, Node_f, Queue_b_2, Queue_f_2, Start_2, Visited_b, Visited_f}
    end
end,
{Goal_2, Head_b, Head_f_2, I_10, Neigh_f, Node_f, Queue_b_2, Queue_f_4, Start_2, Visited_b, Visited_f_3} = Fun_10(Goal_2, Head_b, Head_f_2, I_9, Neigh_f, Node_f, Queue_b_2, Queue_f_2, Start_2, Visited_b, Visited_f),
            Node_b = (case erlang:is_map(Queue_b_2) of true -> maps:get(Head_b, Queue_b_2, nil); _ -> case Head_b < 0 of true -> mochi_nth(erlang:length(Queue_b_2) + Head_b + 1, Queue_b_2); _ -> mochi_nth(Head_b + 1, Queue_b_2) end end),
            Head_b_2 = (Head_b + 1),
            Neigh_b = neighbors(maps:get("pos", Node_b, nil)),
            J_5 = 0,
            Fun_14 = fun Fun_14_loop(Goal_2, Head_b_2, Head_f_2, I_10, J_5, Neigh_b, Neigh_f, Node_b, Node_f, Queue_b_2, Queue_f_4, Start_2, Visited_b, Visited_f_3) ->
    case (J_5 < erlang:length(Neigh_b)) of
        true ->
            Nposb = (case erlang:is_map(Neigh_b) of true -> maps:get(J_5, Neigh_b, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Neigh_b) + J_5 + 1, Neigh_b); _ -> mochi_nth(J_5 + 1, Neigh_b) end end),
            case mochi_not(maps:is_key(Nposb, Visited_b)) of
        true -> New_path_b = lists:append((case maps:get("path", Node_b, nil) of nil -> []; _ -> maps:get("path", Node_b, nil) end), [Nposb]),
            Visited_b_2 = maps:put(Nposb, New_path_b, Visited_b),
            case mochi_member(Nposb, Visited_f_3) of
        true -> Path_f = maps:get(Nposb, Visited_f_3, nil),
            New_path_b_2 = reverse_list(New_path_b),
            T = 1,
            Fun_11 = fun Fun_11_loop(Goal_2, Head_b_2, Head_f_2, I_10, J_5, Neigh_b, Neigh_f, New_path_b_2, Node_b, Node_f, Nposb, Path_f, Queue_b_2, Queue_f_4, Start_2, T, Visited_b_2, Visited_f_3) ->
    case (T < erlang:length(New_path_b_2)) of
        true ->
            Path_f_2 = lists:append((case Path_f of nil -> []; _ -> Path_f end), [(case erlang:is_map(New_path_b_2) of true -> maps:get(T, New_path_b_2, nil); _ -> case T < 0 of true -> mochi_nth(erlang:length(New_path_b_2) + T + 1, New_path_b_2); _ -> mochi_nth(T + 1, New_path_b_2) end end)]),
            T_2 = (T + 1),
            Fun_11_loop(Goal_2, Head_b_2, Head_f_2, I_10, J_5, Neigh_b, Neigh_f, New_path_b_2, Node_b, Node_f, Nposb, Path_f_2, Queue_b_2, Queue_f_4, Start_2, T_2, Visited_b_2, Visited_f_3);
        _ -> {Goal_2, Head_b_2, Head_f_2, I_10, J_5, Neigh_b, Neigh_f, New_path_b_2, Node_b, Node_f, Nposb, Path_f, Queue_b_2, Queue_f_4, Start_2, T, Visited_b_2, Visited_f_3}
    end
end,
{Goal_2, Head_b_2, Head_f_2, I_10, J_5, Neigh_b, Neigh_f, New_path_b_2, Node_b, Node_f, Nposb, Path_f_2, Queue_b_2, Queue_f_4, Start_2, T_2, Visited_b_2, Visited_f_3} = Fun_11(Goal_2, Head_b_2, Head_f_2, I_10, J_5, Neigh_b, Neigh_f, New_path_b_2, Node_b, Node_f, Nposb, Path_f, Queue_b_2, Queue_f_4, Start_2, T, Visited_b_2, Visited_f_3),
            throw({return, Path_f_2}),
            Fun_12 = Fun_11,
            New_path_b_3 = New_path_b_2,
            Path_f_3 = Path_f_2,
            T_3 = T_2;
        _ -> Fun_12 = Fun_10,
            New_path_b_3 = New_path_b,
            Path_f_3 = nil,
            T_3 = nil
    end,
            Queue_b_3 = lists:append((case Queue_b_2 of nil -> []; _ -> Queue_b_2 end), [#{"pos" => Nposb, "path" => New_path_b_3}]),
            Fun_13 = Fun_12,
            New_path_b_4 = New_path_b_3,
            Path_f_4 = Path_f_3,
            Queue_b_4 = Queue_b_3,
            T_4 = T_3,
            Visited_b_3 = Visited_b_2;
        _ -> Fun_13 = Fun_10,
            New_path_b_4 = nil,
            Path_f_4 = nil,
            Queue_b_4 = Queue_b_2,
            T_4 = nil,
            Visited_b_3 = Visited_b
    end,
            J_6 = (J_5 + 1),
            Fun_14_loop(Goal_2, Head_b_2, Head_f_2, I_10, J_6, Neigh_b, Neigh_f, Node_b, Node_f, Queue_b_4, Queue_f_4, Start_2, Visited_b_3, Visited_f_3);
        _ -> {Goal_2, Head_b_2, Head_f_2, I_10, J_5, Neigh_b, Neigh_f, Node_b, Node_f, Queue_b_2, Queue_f_4, Start_2, Visited_b, Visited_f_3}
    end
end,
{Goal_2, Head_b_2, Head_f_2, I_10, J_6, Neigh_b, Neigh_f, Node_b, Node_f, Queue_b_4, Queue_f_4, Start_2, Visited_b_3, Visited_f_3} = Fun_14(Goal_2, Head_b_2, Head_f_2, I_10, J_5, Neigh_b, Neigh_f, Node_b, Node_f, Queue_b_2, Queue_f_4, Start_2, Visited_b, Visited_f_3),
            Fun_15_loop(Goal_2, Head_b_2, Head_f_2, Queue_b_4, Queue_f_4, Start_2, Visited_b_3, Visited_f_3);
        _ -> {Goal_2, Head_b, Head_f, Queue_b_2, Queue_f_2, Start_2, Visited_b, Visited_f}
    end
end,
{Goal_2, Head_b_2, Head_f_2, Queue_b_4, Queue_f_4, Start_2, Visited_b_3, Visited_f_3} = Fun_15(Goal_2, Head_b, Head_f, Queue_b_2, Queue_f_2, Start_2, Visited_b, Visited_f),
        [Start_2]
    catch {return, RetCatch} -> RetCatch end.

path_to_string(Path) ->
    try
        case (erlang:length(Path) == 0) of
        true -> throw({return, "[]"});
        _ -> ok
    end,
        First = parse_key((case erlang:is_map(Path) of true -> maps:get(0, Path, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Path) + 0 + 1, Path); _ -> mochi_nth(0 + 1, Path) end end)),
        S_2 = (((("[(" ++ mochi_str((case erlang:is_map(First) of true -> maps:get(0, First, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(First) + 0 + 1, First); _ -> mochi_nth(0 + 1, First) end end))) ++ ", ") ++ mochi_str((case erlang:is_map(First) of true -> maps:get(1, First, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(First) + 1 + 1, First); _ -> mochi_nth(1 + 1, First) end end))) ++ ")"),
        I_11 = 1,
        Fun_16 = fun Fun_16_loop(First, I_11, Path, S_2) ->
    case (I_11 < erlang:length(Path)) of
        true ->
            C_2 = parse_key((case erlang:is_map(Path) of true -> maps:get(I_11, Path, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Path) + I_11 + 1, Path); _ -> mochi_nth(I_11 + 1, Path) end end)),
            S_3 = (((((S_2 ++ ", (") ++ mochi_str((case erlang:is_map(C_2) of true -> maps:get(0, C_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(C_2) + 0 + 1, C_2); _ -> mochi_nth(0 + 1, C_2) end end))) ++ ", ") ++ mochi_str((case erlang:is_map(C_2) of true -> maps:get(1, C_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(C_2) + 1 + 1, C_2); _ -> mochi_nth(1 + 1, C_2) end end))) ++ ")"),
            I_12 = (I_11 + 1),
            Fun_16_loop(First, I_12, Path, S_3);
        _ -> {First, I_11, Path, S_2}
    end
end,
{First, I_12, Path, S_3} = Fun_16(First, I_11, Path, S_2),
        S_4 = (S_3 ++ "]"),
        S_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('grid', [[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]]),
    erlang:put('delta', [[-1, 0], [0, -1], [1, 0], [0, 1]]),
    erlang:put('start', key(0, 0)),
    erlang:put('goal', key((erlang:length(erlang:get('grid')) - 1), (erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get(0, erlang:get('grid'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + 0 + 1, erlang:get('grid')); _ -> mochi_nth(0 + 1, erlang:get('grid')) end end)) - 1))),
    erlang:put('path1', bfs(erlang:get('start'), erlang:get('goal'))),
    io:format("~ts~n", [mochi_repr(path_to_string(erlang:get('path1')))]),
    erlang:put('path2', bidirectional_bfs(erlang:get('start'), erlang:get('goal'))),
    io:format("~ts~n", [mochi_repr(path_to_string(erlang:get('path2')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
