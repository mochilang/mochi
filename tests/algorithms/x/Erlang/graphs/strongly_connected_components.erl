#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, topology_sort/3, find_component/3, strongly_connected_components/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

topology_sort(Graph, Vert, Visited) ->
    try
        Visited_2 = lists:sublist(Visited, Vert) ++ [true] ++ lists:nthtail(Vert + 1, Visited),
        Order = [],
        Fun = fun Fun_loop(List, Graph, Order, Vert, Visited_2) ->
    case List of
        [] -> {Graph, Order, Vert, Visited_2};
        [Neighbour|Neighbour_rest] ->
            case mochi_not((case erlang:is_map(Visited_2) of true -> maps:get(Neighbour, Visited_2, nil); _ -> case Neighbour < 0 of true -> lists:nth(erlang:length(Visited_2) + Neighbour + 1, Visited_2); _ -> lists:nth(Neighbour + 1, Visited_2) end end)) of
        true -> Order_2 = lists:append(Order, topology_sort(Graph, Neighbour, Visited_2)),
            Order_3 = Order_2;
        _ -> Order_3 = Order
    end,
            Fun_loop(Neighbour_rest, Graph, Order_3, Vert, Visited_2);
        _ -> {Graph, Order, Vert, Visited_2}
    end
end,
{Graph, Order_3, Vert, Visited_2} = Fun((case erlang:is_map(Graph) of true -> maps:get(Vert, Graph, nil); _ -> case Vert < 0 of true -> lists:nth(erlang:length(Graph) + Vert + 1, Graph); _ -> lists:nth(Vert + 1, Graph) end end), Graph, Order, Vert, Visited_2),
        Order_4 = lists:append((case Order_3 of nil -> []; _ -> Order_3 end), [Vert]),
        Order_4
    catch {return, Ret} -> Ret end.

find_component(Graph_2, Vert_2, Visited_3) ->
    try
        Visited_4 = lists:sublist(Visited_3, Vert_2) ++ [true] ++ lists:nthtail(Vert_2 + 1, Visited_3),
        Comp = [Vert_2],
        Fun_2 = fun Fun_2_loop(List, Comp, Graph_2, Vert_2, Visited_4) ->
    case List of
        [] -> {Comp, Graph_2, Vert_2, Visited_4};
        [Neighbour_2|Neighbour_2_rest] ->
            case mochi_not((case erlang:is_map(Visited_4) of true -> maps:get(Neighbour_2, Visited_4, nil); _ -> case Neighbour_2 < 0 of true -> lists:nth(erlang:length(Visited_4) + Neighbour_2 + 1, Visited_4); _ -> lists:nth(Neighbour_2 + 1, Visited_4) end end)) of
        true -> Comp_2 = lists:append(Comp, find_component(Graph_2, Neighbour_2, Visited_4)),
            Comp_3 = Comp_2;
        _ -> Comp_3 = Comp
    end,
            Fun_2_loop(Neighbour_2_rest, Comp_3, Graph_2, Vert_2, Visited_4);
        _ -> {Comp, Graph_2, Vert_2, Visited_4}
    end
end,
{Comp_3, Graph_2, Vert_2, Visited_4} = Fun_2((case erlang:is_map(Graph_2) of true -> maps:get(Vert_2, Graph_2, nil); _ -> case Vert_2 < 0 of true -> lists:nth(erlang:length(Graph_2) + Vert_2 + 1, Graph_2); _ -> lists:nth(Vert_2 + 1, Graph_2) end end), Comp, Graph_2, Vert_2, Visited_4),
        Comp_3
    catch {return, Ret} -> Ret end.

strongly_connected_components(Graph_3) ->
    try
        N = erlang:length(Graph_3),
        Visited_5 = [],
        Fun_3 = fun Fun_3_loop(List, Graph_3, N, Visited_5) ->
    case List of
        [] -> {Graph_3, N, Visited_5};
        [_|__rest] ->
            Visited_6 = lists:append((case Visited_5 of nil -> []; _ -> Visited_5 end), [false]),
            Fun_3_loop(__rest, Graph_3, N, Visited_6);
        _ -> {Graph_3, N, Visited_5}
    end
end,
{Graph_3, N, Visited_6} = Fun_3(lists:seq(0, (N) - 1), Graph_3, N, Visited_5),
        Reversed = [],
        Fun_4 = fun Fun_4_loop(List, Graph_3, N, Reversed, Visited_6) ->
    case List of
        [] -> {Graph_3, N, Reversed, Visited_6};
        [_|__rest] ->
            Reversed_2 = lists:append((case Reversed of nil -> []; _ -> Reversed end), [[]]),
            Fun_4_loop(__rest, Graph_3, N, Reversed_2, Visited_6);
        _ -> {Graph_3, N, Reversed, Visited_6}
    end
end,
{Graph_3, N, Reversed_2, Visited_6} = Fun_4(lists:seq(0, (N) - 1), Graph_3, N, Reversed, Visited_6),
        Fun_5 = fun Fun_5_loop(List, Graph_3, N, Reversed_2, Visited_6) ->
    case List of
        [] -> {Graph_3, N, Reversed_2, Visited_6};
        [I|I_rest] ->
            Fun_6 = fun Fun_6_loop(List, Graph_3, I, N, Reversed_2, Visited_6) ->
    case List of
        [] -> {Graph_3, I, N, Reversed_2, Visited_6};
        [Neighbour_3|Neighbour_3_rest] ->
            Reversed_3 = lists:sublist(Reversed_2, Neighbour_3) ++ [lists:append((case (case erlang:is_map(Reversed_2) of true -> maps:get(Neighbour_3, Reversed_2, nil); _ -> case Neighbour_3 < 0 of true -> lists:nth(erlang:length(Reversed_2) + Neighbour_3 + 1, Reversed_2); _ -> lists:nth(Neighbour_3 + 1, Reversed_2) end end) of nil -> []; _ -> (case erlang:is_map(Reversed_2) of true -> maps:get(Neighbour_3, Reversed_2, nil); _ -> case Neighbour_3 < 0 of true -> lists:nth(erlang:length(Reversed_2) + Neighbour_3 + 1, Reversed_2); _ -> lists:nth(Neighbour_3 + 1, Reversed_2) end end) end), [I])] ++ lists:nthtail(Neighbour_3 + 1, Reversed_2),
            Fun_6_loop(Neighbour_3_rest, Graph_3, I, N, Reversed_3, Visited_6);
        _ -> {Graph_3, I, N, Reversed_2, Visited_6}
    end
end,
{Graph_3, I, N, Reversed_3, Visited_6} = Fun_6((case erlang:is_map(Graph_3) of true -> maps:get(I, Graph_3, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Graph_3) + I + 1, Graph_3); _ -> lists:nth(I + 1, Graph_3) end end), Graph_3, I, N, Reversed_2, Visited_6),
            Fun_5_loop(I_rest, Graph_3, N, Reversed_3, Visited_6);
        _ -> {Graph_3, N, Reversed_2, Visited_6}
    end
end,
{Graph_3, N, Reversed_3, Visited_6} = Fun_5(lists:seq(0, (N) - 1), Graph_3, N, Reversed_2, Visited_6),
        Order_5 = [],
        Fun_7 = fun Fun_7_loop(List, Graph_3, N, Order_5, Reversed_3, Visited_6) ->
    case List of
        [] -> {Graph_3, N, Order_5, Reversed_3, Visited_6};
        [I_2|I_2_rest] ->
            case mochi_not((case erlang:is_map(Visited_6) of true -> maps:get(I_2, Visited_6, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(Visited_6) + I_2 + 1, Visited_6); _ -> lists:nth(I_2 + 1, Visited_6) end end)) of
        true -> Order_6 = lists:append(Order_5, topology_sort(Graph_3, I_2, Visited_6)),
            Order_7 = Order_6;
        _ -> Order_7 = Order_5
    end,
            Fun_7_loop(I_2_rest, Graph_3, N, Order_7, Reversed_3, Visited_6);
        _ -> {Graph_3, N, Order_5, Reversed_3, Visited_6}
    end
end,
{Graph_3, N, Order_7, Reversed_3, Visited_6} = Fun_7(lists:seq(0, (N) - 1), Graph_3, N, Order_5, Reversed_3, Visited_6),
        Visited_7 = [],
        Fun_8 = fun Fun_8_loop(List, Graph_3, N, Order_7, Reversed_3, Visited_7) ->
    case List of
        [] -> {Graph_3, N, Order_7, Reversed_3, Visited_7};
        [_|__rest] ->
            Visited_8 = lists:append((case Visited_7 of nil -> []; _ -> Visited_7 end), [false]),
            Fun_8_loop(__rest, Graph_3, N, Order_7, Reversed_3, Visited_8);
        _ -> {Graph_3, N, Order_7, Reversed_3, Visited_7}
    end
end,
{Graph_3, N, Order_7, Reversed_3, Visited_8} = Fun_8(lists:seq(0, (N) - 1), Graph_3, N, Order_7, Reversed_3, Visited_7),
        Components = [],
        I_3 = 0,
        Fun_9 = fun Fun_9_loop(Components, Graph_3, I_3, N, Order_7, Reversed_3, Visited_8) ->
    case (I_3 < N) of
        true ->
            V = (case erlang:is_map(Order_7) of true -> maps:get(((N - I_3) - 1), Order_7, nil); _ -> case ((N - I_3) - 1) < 0 of true -> lists:nth(erlang:length(Order_7) + ((N - I_3) - 1) + 1, Order_7); _ -> lists:nth(((N - I_3) - 1) + 1, Order_7) end end),
            case mochi_not((case erlang:is_map(Visited_8) of true -> maps:get(V, Visited_8, nil); _ -> case V < 0 of true -> lists:nth(erlang:length(Visited_8) + V + 1, Visited_8); _ -> lists:nth(V + 1, Visited_8) end end)) of
        true -> Comp_4 = find_component(Reversed_3, V, Visited_8),
            Components_2 = lists:append((case Components of nil -> []; _ -> Components end), [Comp_4]),
            Comp_5 = Comp_4,
            Components_3 = Components_2;
        _ -> Comp_5 = nil,
            Components_3 = Components
    end,
            I_4 = (I_3 + 1),
            Fun_9_loop(Components_3, Graph_3, I_4, N, Order_7, Reversed_3, Visited_8);
        _ -> {Components, Graph_3, I_3, N, Order_7, Reversed_3, Visited_8}
    end
end,
{Components_3, Graph_3, I_4, N, Order_7, Reversed_3, Visited_8} = Fun_9(Components, Graph_3, I_3, N, Order_7, Reversed_3, Visited_8),
        Components_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        Test_graph_1 = [[2, 3], [0], [1], [4], []],
        Test_graph_2 = [[1, 2, 3], [2], [0], [4], [5], [3]],
        io:format("~ts~n", [mochi_str(strongly_connected_components(Test_graph_1))]),
        io:format("~ts~n", [mochi_str(strongly_connected_components(Test_graph_2))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
