#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, node_to_string/1, page_rank/3]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

node_to_string(N) ->
    try
        (((((("<node=" ++ maps:get("name", N, nil)) ++ " inbound=") ++ maps:get("inbound", N, nil)) ++ " outbound=") ++ maps:get("outbound", N, nil)) ++ ">")
    catch {return, Ret} -> Ret end.

page_rank(Nodes, Limit, D) ->
    try
        Ranks = #{},
        Fun = fun Fun_loop(List, D, Limit, Nodes, Ranks) ->
    case List of
        [] -> {D, Limit, Nodes, Ranks};
        [N_2|N_2_rest] ->
            Ranks_2 = maps:put(maps:get("name", N_2, nil), 1, Ranks),
            Fun_loop(N_2_rest, D, Limit, Nodes, Ranks_2);
        _ -> {D, Limit, Nodes, Ranks}
    end
end,
{D, Limit, Nodes, Ranks_2} = Fun(Nodes, D, Limit, Nodes, Ranks),
        Outbounds = #{},
        Fun_2 = fun Fun_2_loop(List, D, Limit, Nodes, Outbounds, Ranks_2) ->
    case List of
        [] -> {D, Limit, Nodes, Outbounds, Ranks_2};
        [N_3|N_3_rest] ->
            Outbounds_2 = maps:put(maps:get("name", N_3, nil), mochi_safe_mul(1, erlang:length(maps:get("outbound", N_3, nil))), Outbounds),
            Fun_2_loop(N_3_rest, D, Limit, Nodes, Outbounds_2, Ranks_2);
        _ -> {D, Limit, Nodes, Outbounds, Ranks_2}
    end
end,
{D, Limit, Nodes, Outbounds_2, Ranks_2} = Fun_2(Nodes, D, Limit, Nodes, Outbounds, Ranks_2),
        I = 0,
        Fun_5 = fun Fun_5_loop(D, I, Limit, Nodes, Outbounds_2, Ranks_2) ->
    case (I < Limit) of
        true ->
            io:format("~ts~n", [mochi_repr((("======= Iteration " ++ mochi_str((I + 1))) ++ " ======="))]),
            Fun_3 = fun Fun_3_loop(List, D, I, Limit, Nodes, Outbounds_2, Ranks_2) ->
    case List of
        [] -> {D, I, Limit, Nodes, Outbounds_2, Ranks_2};
        [N_4|N_4_rest] ->
            Sum_val = 0,
            Fun_4 = fun Fun_4_loop(List, D, I, Limit, N_4, Nodes, Outbounds_2, Ranks_2, Sum_val) ->
    case List of
        [] -> {D, I, Limit, N_4, Nodes, Outbounds_2, Ranks_2, Sum_val};
        [Ib|Ib_rest] ->
            Sum_val_2 = (Sum_val + mochi_safe_div(maps:get(Ib, Ranks_2, nil), maps:get(Ib, Outbounds_2, nil))),
            Fun_4_loop(Ib_rest, D, I, Limit, N_4, Nodes, Outbounds_2, Ranks_2, Sum_val_2);
        _ -> {D, I, Limit, N_4, Nodes, Outbounds_2, Ranks_2, Sum_val}
    end
end,
{D, I, Limit, N_4, Nodes, Outbounds_2, Ranks_2, Sum_val_2} = Fun_4(maps:get("inbound", N_4, nil), D, I, Limit, N_4, Nodes, Outbounds_2, Ranks_2, Sum_val),
            Ranks_3 = maps:put(maps:get("name", N_4, nil), ((1 - D) + mochi_safe_mul(D, Sum_val_2)), Ranks_2),
            Fun_3_loop(N_4_rest, D, I, Limit, Nodes, Outbounds_2, Ranks_3);
        _ -> {D, I, Limit, Nodes, Outbounds_2, Ranks_2}
    end
end,
{D, I, Limit, Nodes, Outbounds_2, Ranks_3} = Fun_3(Nodes, D, I, Limit, Nodes, Outbounds_2, Ranks_2),
            io:format("~ts~n", [mochi_repr(Ranks_3)]),
            I_2 = (I + 1),
            Fun_5_loop(D, I_2, Limit, Nodes, Outbounds_2, Ranks_3);
        _ -> {D, I, Limit, Nodes, Outbounds_2, Ranks_2}
    end
end,
{D, I_2, Limit, Nodes, Outbounds_2, Ranks_3} = Fun_5(D, I, Limit, Nodes, Outbounds_2, Ranks_2),
        Ranks_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('names', ["A", "B", "C"]),
    erlang:put('graph', [[0, 1, 1], [0, 0, 1], [1, 0, 0]]),
    erlang:put('nodes', []),
    Fun_6 = fun Fun_6_loop(List) ->
    case List of
        [] -> {};
        [Name|Name_rest] ->
            erlang:put('nodes', lists:append((case erlang:get('nodes') of nil -> []; _ -> erlang:get('nodes') end), [#{"name" => Name, "inbound" => [], "outbound" => []}])),
            Fun_6_loop(Name_rest);
        _ -> {}
    end
end,
{} = Fun_6(erlang:get('names')),
    erlang:put('ri', 0),
    Fun_8 = fun Fun_8_loop() ->
    case (erlang:get('ri') < erlang:length(erlang:get('graph'))) of
        true ->
            Row = (case erlang:is_map(erlang:get('graph')) of true -> maps:get(erlang:get('ri'), erlang:get('graph'), nil); _ -> case erlang:get('ri') < 0 of true -> lists:nth(erlang:length(erlang:get('graph')) + erlang:get('ri') + 1, erlang:get('graph')); _ -> lists:nth(erlang:get('ri') + 1, erlang:get('graph')) end end),
            Ci = 0,
            Fun_7 = fun Fun_7_loop(Ci, Row) ->
    case (Ci < erlang:length(Row)) of
        true ->
            case ((case erlang:is_map(Row) of true -> maps:get(Ci, Row, nil); _ -> case Ci < 0 of true -> lists:nth(erlang:length(Row) + Ci + 1, Row); _ -> lists:nth(Ci + 1, Row) end end) == 1) of
        true -> N_in = (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(Ci, erlang:get('nodes'), nil); _ -> case Ci < 0 of true -> lists:nth(erlang:length(erlang:get('nodes')) + Ci + 1, erlang:get('nodes')); _ -> lists:nth(Ci + 1, erlang:get('nodes')) end end),
            N_in_2 = maps:put("inbound", lists:append((case maps:get("inbound", N_in, nil) of nil -> []; _ -> maps:get("inbound", N_in, nil) end), [(case erlang:is_map(erlang:get('names')) of true -> maps:get(erlang:get('ri'), erlang:get('names'), nil); _ -> case erlang:get('ri') < 0 of true -> lists:nth(erlang:length(erlang:get('names')) + erlang:get('ri') + 1, erlang:get('names')); _ -> lists:nth(erlang:get('ri') + 1, erlang:get('names')) end end)]), N_in),
            Nodes_tmp = lists:sublist(erlang:get('nodes'), Ci) ++ [N_in_2] ++ lists:nthtail(Ci + 1, erlang:get('nodes')),
            erlang:put('nodes', Nodes_tmp),
            N_out = (case erlang:is_map(erlang:get('nodes')) of true -> maps:get(erlang:get('ri'), erlang:get('nodes'), nil); _ -> case erlang:get('ri') < 0 of true -> lists:nth(erlang:length(erlang:get('nodes')) + erlang:get('ri') + 1, erlang:get('nodes')); _ -> lists:nth(erlang:get('ri') + 1, erlang:get('nodes')) end end),
            N_out_2 = maps:put("outbound", lists:append((case maps:get("outbound", N_out, nil) of nil -> []; _ -> maps:get("outbound", N_out, nil) end), [(case erlang:is_map(erlang:get('names')) of true -> maps:get(Ci, erlang:get('names'), nil); _ -> case Ci < 0 of true -> lists:nth(erlang:length(erlang:get('names')) + Ci + 1, erlang:get('names')); _ -> lists:nth(Ci + 1, erlang:get('names')) end end)]), N_out),
            Nodes_tmp_2 = lists:sublist(erlang:get('nodes'), erlang:get('ri')) ++ [N_out_2] ++ lists:nthtail(erlang:get('ri') + 1, erlang:get('nodes')),
            erlang:put('nodes', Nodes_tmp_2),
            N_in_3 = N_in_2,
            N_out_3 = N_out_2,
            Nodes_tmp_3 = Nodes_tmp_2;
        _ -> N_in_3 = nil,
            N_out_3 = nil,
            Nodes_tmp_3 = nil
    end,
            Ci_2 = (Ci + 1),
            Fun_7_loop(Ci_2, Row);
        _ -> {Ci, Row}
    end
end,
{Ci_2, Row} = Fun_7(Ci, Row),
            erlang:put('ri', (erlang:get('ri') + 1)),
            Fun_8_loop();
        _ -> {}
    end
end,
{} = Fun_8(),
    io:format("~ts~n", [mochi_repr("======= Nodes =======")]),
    Fun_9 = fun Fun_9_loop(List) ->
    case List of
        [] -> {};
        [N_5|N_5_rest] ->
            io:format("~ts~n", [mochi_repr(N_5)]),
            Fun_9_loop(N_5_rest);
        _ -> {}
    end
end,
{} = Fun_9(erlang:get('nodes')),
    page_rank(erlang:get('nodes'), 3, 0.85),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
