#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, longest_distance/1]).

% Generated by Mochi transpiler v0.10.65 (f942880281) on 2025-08-13 16:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

longest_distance(Graph) ->
    try
        N = erlang:length(Graph),
        Indegree = [],
        I = 0,
        Fun = fun Fun_loop(Graph, I, Indegree, N) ->
    case (I < N) of
        true ->
            Indegree_2 = lists:append((case Indegree of nil -> []; _ -> Indegree end), [0]),
            I_2 = (I + 1),
            Fun_loop(Graph, I_2, Indegree_2, N);
        _ -> {Graph, I, Indegree, N}
    end
end,
{Graph, I_2, Indegree_2, N} = Fun(Graph, I, Indegree, N),
        Long_dist = [],
        J = 0,
        Fun_2 = fun Fun_2_loop(Graph, I_2, Indegree_2, J, Long_dist, N) ->
    case (J < N) of
        true ->
            Long_dist_2 = lists:append((case Long_dist of nil -> []; _ -> Long_dist end), [1]),
            J_2 = (J + 1),
            Fun_2_loop(Graph, I_2, Indegree_2, J_2, Long_dist_2, N);
        _ -> {Graph, I_2, Indegree_2, J, Long_dist, N}
    end
end,
{Graph, I_2, Indegree_2, J_2, Long_dist_2, N} = Fun_2(Graph, I_2, Indegree_2, J, Long_dist, N),
        U = 0,
        Fun_4 = fun Fun_4_loop(Graph, I_2, Indegree_2, J_2, Long_dist_2, N, U) ->
    case (U < N) of
        true ->
            Fun_3 = fun Fun_3_loop(List, Graph, I_2, Indegree_2, J_2, Long_dist_2, N, U) ->
    case List of
        [] -> {Graph, I_2, Indegree_2, J_2, Long_dist_2, N, U};
        [V|V_rest] ->
            Indegree_3 = lists:sublist(Indegree_2, V) ++ [((case erlang:is_map(Indegree_2) of true -> maps:get(V, Indegree_2, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Indegree_2) + V + 1, Indegree_2); _ -> mochi_nth(V + 1, Indegree_2) end end) + 1)] ++ lists:nthtail(V + 1, Indegree_2),
            Fun_3_loop(V_rest, Graph, I_2, Indegree_3, J_2, Long_dist_2, N, U);
        _ -> {Graph, I_2, Indegree_2, J_2, Long_dist_2, N, U}
    end
end,
{Graph, I_2, Indegree_3, J_2, Long_dist_2, N, U} = Fun_3((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end), Graph, I_2, Indegree_2, J_2, Long_dist_2, N, U),
            U_2 = (U + 1),
            Fun_4_loop(Graph, I_2, Indegree_3, J_2, Long_dist_2, N, U_2);
        _ -> {Graph, I_2, Indegree_2, J_2, Long_dist_2, N, U}
    end
end,
{Graph, I_2, Indegree_3, J_2, Long_dist_2, N, U_2} = Fun_4(Graph, I_2, Indegree_2, J_2, Long_dist_2, N, U),
        Queue = [],
        Head = 0,
        K = 0,
        Fun_5 = fun Fun_5_loop(Graph, Head, I_2, Indegree_3, J_2, K, Long_dist_2, N, Queue, U_2) ->
    case (K < N) of
        true ->
            case ((case erlang:is_map(Indegree_3) of true -> maps:get(K, Indegree_3, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Indegree_3) + K + 1, Indegree_3); _ -> mochi_nth(K + 1, Indegree_3) end end) == 0) of
        true -> Queue_2 = lists:append((case Queue of nil -> []; _ -> Queue end), [K]),
            Queue_3 = Queue_2;
        _ -> Queue_3 = Queue
    end,
            K_2 = (K + 1),
            Fun_5_loop(Graph, Head, I_2, Indegree_3, J_2, K_2, Long_dist_2, N, Queue_3, U_2);
        _ -> {Graph, Head, I_2, Indegree_3, J_2, K, Long_dist_2, N, Queue, U_2}
    end
end,
{Graph, Head, I_2, Indegree_3, J_2, K_2, Long_dist_2, N, Queue_3, U_2} = Fun_5(Graph, Head, I_2, Indegree_3, J_2, K, Long_dist_2, N, Queue, U_2),
        Fun_7 = fun Fun_7_loop(Graph, Head, I_2, Indegree_3, J_2, K_2, Long_dist_2, N, Queue_3, U_2) ->
    case (Head < erlang:length(Queue_3)) of
        true ->
            Vertex = (case erlang:is_map(Queue_3) of true -> maps:get(Head, Queue_3, nil); _ -> case Head < 0 of true -> mochi_nth(erlang:length(Queue_3) + Head + 1, Queue_3); _ -> mochi_nth(Head + 1, Queue_3) end end),
            Head_2 = (Head + 1),
            Fun_6 = fun Fun_6_loop(List, Graph, Head_2, I_2, Indegree_3, J_2, K_2, Long_dist_2, N, Queue_3, U_2, Vertex) ->
    case List of
        [] -> {Graph, Head_2, I_2, Indegree_3, J_2, K_2, Long_dist_2, N, Queue_3, U_2, Vertex};
        [X|X_rest] ->
            Indegree_4 = lists:sublist(Indegree_3, X) ++ [((case erlang:is_map(Indegree_3) of true -> maps:get(X, Indegree_3, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(Indegree_3) + X + 1, Indegree_3); _ -> mochi_nth(X + 1, Indegree_3) end end) - 1)] ++ lists:nthtail(X + 1, Indegree_3),
            New_dist = ((case erlang:is_map(Long_dist_2) of true -> maps:get(Vertex, Long_dist_2, nil); _ -> case Vertex < 0 of true -> mochi_nth(erlang:length(Long_dist_2) + Vertex + 1, Long_dist_2); _ -> mochi_nth(Vertex + 1, Long_dist_2) end end) + 1),
            case (New_dist > (case erlang:is_map(Long_dist_2) of true -> maps:get(X, Long_dist_2, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(Long_dist_2) + X + 1, Long_dist_2); _ -> mochi_nth(X + 1, Long_dist_2) end end)) of
        true -> Long_dist_3 = lists:sublist(Long_dist_2, X) ++ [New_dist] ++ lists:nthtail(X + 1, Long_dist_2),
            Long_dist_4 = Long_dist_3;
        _ -> Long_dist_4 = Long_dist_2
    end,
            case ((case erlang:is_map(Indegree_4) of true -> maps:get(X, Indegree_4, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(Indegree_4) + X + 1, Indegree_4); _ -> mochi_nth(X + 1, Indegree_4) end end) == 0) of
        true -> Queue_4 = lists:append((case Queue_3 of nil -> []; _ -> Queue_3 end), [X]),
            Queue_5 = Queue_4;
        _ -> Queue_5 = Queue_3
    end,
            Fun_6_loop(X_rest, Graph, Head_2, I_2, Indegree_4, J_2, K_2, Long_dist_4, N, Queue_5, U_2, Vertex);
        _ -> {Graph, Head_2, I_2, Indegree_3, J_2, K_2, Long_dist_2, N, Queue_3, U_2, Vertex}
    end
end,
{Graph, Head_2, I_2, Indegree_4, J_2, K_2, Long_dist_4, N, Queue_5, U_2, Vertex} = Fun_6((case erlang:is_map(Graph) of true -> maps:get(Vertex, Graph, nil); _ -> case Vertex < 0 of true -> mochi_nth(erlang:length(Graph) + Vertex + 1, Graph); _ -> mochi_nth(Vertex + 1, Graph) end end), Graph, Head_2, I_2, Indegree_3, J_2, K_2, Long_dist_2, N, Queue_3, U_2, Vertex),
            Fun_7_loop(Graph, Head_2, I_2, Indegree_4, J_2, K_2, Long_dist_4, N, Queue_5, U_2);
        _ -> {Graph, Head, I_2, Indegree_3, J_2, K_2, Long_dist_2, N, Queue_3, U_2}
    end
end,
{Graph, Head_2, I_2, Indegree_4, J_2, K_2, Long_dist_4, N, Queue_5, U_2} = Fun_7(Graph, Head, I_2, Indegree_3, J_2, K_2, Long_dist_2, N, Queue_3, U_2),
        Max_len = (case erlang:is_map(Long_dist_4) of true -> maps:get(0, Long_dist_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Long_dist_4) + 0 + 1, Long_dist_4); _ -> mochi_nth(0 + 1, Long_dist_4) end end),
        M = 1,
        Fun_8 = fun Fun_8_loop(Graph, Head_2, I_2, Indegree_4, J_2, K_2, Long_dist_4, M, Max_len, N, Queue_5, U_2) ->
    case (M < N) of
        true ->
            case ((case erlang:is_map(Long_dist_4) of true -> maps:get(M, Long_dist_4, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Long_dist_4) + M + 1, Long_dist_4); _ -> mochi_nth(M + 1, Long_dist_4) end end) > Max_len) of
        true -> Max_len_2 = (case erlang:is_map(Long_dist_4) of true -> maps:get(M, Long_dist_4, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Long_dist_4) + M + 1, Long_dist_4); _ -> mochi_nth(M + 1, Long_dist_4) end end),
            Max_len_3 = Max_len_2;
        _ -> Max_len_3 = Max_len
    end,
            M_2 = (M + 1),
            Fun_8_loop(Graph, Head_2, I_2, Indegree_4, J_2, K_2, Long_dist_4, M_2, Max_len_3, N, Queue_5, U_2);
        _ -> {Graph, Head_2, I_2, Indegree_4, J_2, K_2, Long_dist_4, M, Max_len, N, Queue_5, U_2}
    end
end,
{Graph, Head_2, I_2, Indegree_4, J_2, K_2, Long_dist_4, M_2, Max_len_3, N, Queue_5, U_2} = Fun_8(Graph, Head_2, I_2, Indegree_4, J_2, K_2, Long_dist_4, M, Max_len, N, Queue_5, U_2),
        Max_len_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('graph', [[2, 3, 4], [2, 7], [5], [5, 7], [7], [6], [7], []]),
    io:format("~ts~n", [mochi_repr(longest_distance(erlang:get('graph')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
