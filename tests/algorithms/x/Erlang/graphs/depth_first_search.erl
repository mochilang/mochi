#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, contains/2, depth_first_search/2]).

% Generated by Mochi transpiler v0.10.65 (f942880281) on 2025-08-13 16:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

contains(Lst, V) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, Lst, V) ->
    case (I < erlang:length(Lst)) of
        true ->
            case ((case erlang:is_map(Lst) of true -> maps:get(I, Lst, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Lst) + I + 1, Lst); _ -> mochi_nth(I + 1, Lst) end end) == V) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Lst, V);
        _ -> {I, Lst, V}
    end
end,
{I_2, Lst, V} = Fun(I, Lst, V),
        false
    catch {return, RetCatch} -> RetCatch end.

depth_first_search(Graph, Start) ->
    try
        Explored = [],
        Stack = [],
        Stack_2 = lists:append((case Stack of nil -> []; _ -> Stack end), [Start]),
        Explored_2 = lists:append((case Explored of nil -> []; _ -> Explored end), [Start]),
        Fun_3 = fun Fun_3_loop(Explored_2, Graph, Stack_2, Start) ->
    case (erlang:length(Stack_2) > 0) of
        true ->
            Idx = (erlang:length(Stack_2) - 1),
            V_2 = (case erlang:is_map(Stack_2) of true -> maps:get(Idx, Stack_2, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Stack_2) + Idx + 1, Stack_2); _ -> mochi_nth(Idx + 1, Stack_2) end end),
            Stack_3 = (case erlang:is_binary(Stack_2) of true -> string:substr(Stack_2, 0 + 1, (Idx - 0)); _ -> lists:sublist(Stack_2, (0 + 1), (Idx - 0)) end),
            Neighbors = maps:get(V_2, Graph, nil),
            I_3 = (erlang:length(Neighbors) - 1),
            Fun_2 = fun Fun_2_loop(Explored_2, Graph, I_3, Idx, Neighbors, Stack_3, Start, V_2) ->
    case (I_3 >= 0) of
        true ->
            Adj = (case erlang:is_map(Neighbors) of true -> maps:get(I_3, Neighbors, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Neighbors) + I_3 + 1, Neighbors); _ -> mochi_nth(I_3 + 1, Neighbors) end end),
            case mochi_not(mochi_member(Adj, Explored_2)) of
        true -> Explored_3 = lists:append((case Explored_2 of nil -> []; _ -> Explored_2 end), [Adj]),
            Stack_4 = lists:append((case Stack_3 of nil -> []; _ -> Stack_3 end), [Adj]),
            Explored_4 = Explored_3,
            Stack_5 = Stack_4;
        _ -> Explored_4 = Explored_2,
            Stack_5 = Stack_3
    end,
            I_4 = (I_3 - 1),
            Fun_2_loop(Explored_4, Graph, I_4, Idx, Neighbors, Stack_5, Start, V_2);
        _ -> {Explored_2, Graph, I_3, Idx, Neighbors, Stack_3, Start, V_2}
    end
end,
{Explored_4, Graph, I_4, Idx, Neighbors, Stack_5, Start, V_2} = Fun_2(Explored_2, Graph, I_3, Idx, Neighbors, Stack_3, Start, V_2),
            Fun_3_loop(Explored_4, Graph, Stack_5, Start);
        _ -> {Explored_2, Graph, Stack_2, Start}
    end
end,
{Explored_4, Graph, Stack_5, Start} = Fun_3(Explored_2, Graph, Stack_2, Start),
        Explored_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('G', #{"A" => ["B", "C", "D"], "B" => ["A", "D", "E"], "C" => ["A", "F"], "D" => ["B", "D"], "E" => ["B", "F"], "F" => ["C", "E", "G"], "G" => ["F"]}),
    erlang:put('result', depth_first_search(erlang:get('G'), "A")),
    io:format("~ts~n", [mochi_repr(erlang:get('result'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
