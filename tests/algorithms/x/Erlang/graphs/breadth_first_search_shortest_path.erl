#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, newgraph/2, breath_first_search/1, shortest_path/2]).

% Generated by Mochi transpiler v0.10.65 (5cabcd7927)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

newgraph(G, S) ->
    try
        #{"graph" => G, "parent" => #{}, "source" => S}
    catch {return, RetCatch} -> RetCatch end.

breath_first_search(G_2) ->
    try
        Parent = maps:get("parent", G_2, nil),
        Parent_2 = maps:put(maps:get("source", G_2, nil), maps:get("source", G_2, nil), Parent),
        Queue = [maps:get("source", G_2, nil)],
        Idx = 0,
        Fun_2 = fun Fun_2_loop(G_2, Idx, Parent_2, Queue) ->
    case (Idx < erlang:length(Queue)) of
        true ->
            Vertex = (case erlang:is_map(Queue) of true -> maps:get(Idx, Queue, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Queue) + Idx + 1, Queue); _ -> mochi_nth(Idx + 1, Queue) end end),
            Fun = fun Fun_loop(List, G_2, Idx, Parent_2, Queue, Vertex) ->
    case List of
        [] -> {G_2, Idx, Parent_2, Queue, Vertex};
        [Adj|Adj_rest] ->
            case mochi_not(maps:is_key(Adj, Parent_2)) of
        true -> Parent_3 = maps:put(Adj, Vertex, Parent_2),
            Queue_2 = lists:append((case Queue of nil -> []; _ -> Queue end), [Adj]),
            Parent_4 = Parent_3,
            Queue_3 = Queue_2;
        _ -> Parent_4 = Parent_2,
            Queue_3 = Queue
    end,
            Fun_loop(Adj_rest, G_2, Idx, Parent_4, Queue_3, Vertex);
        _ -> {G_2, Idx, Parent_2, Queue, Vertex}
    end
end,
{G_2, Idx, Parent_4, Queue_3, Vertex} = Fun(maps:keys(maps:get(Vertex, maps:get("graph", G_2, nil), nil)), G_2, Idx, Parent_2, Queue, Vertex),
            Idx_2 = (Idx + 1),
            Fun_2_loop(G_2, Idx_2, Parent_4, Queue_3);
        _ -> {G_2, Idx, Parent_2, Queue}
    end
end,
{G_2, Idx_2, Parent_4, Queue_3} = Fun_2(G_2, Idx, Parent_2, Queue),
        G_3 = maps:put("parent", Parent_4, G_2),
        G_3
    catch {return, RetCatch} -> RetCatch end.

shortest_path(G_4, Target) ->
    try
        case (Target == maps:get("source", G_4, nil)) of
        true -> throw({return, maps:get("source", G_4, nil)});
        _ -> ok
    end,
        case mochi_not(maps:is_key(Target, maps:get("parent", G_4, nil))) of
        true -> throw({return, ((("No path from vertex: " ++ maps:get("source", G_4, nil)) ++ " to vertex: ") ++ Target)});
        _ -> ok
    end,
        P = maps:get(Target, maps:get("parent", G_4, nil), nil),
        ((shortest_path(G_4, P) ++ "->") ++ Target)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('graph', #{"A" => ["B", "C", "E"], "B" => ["A", "D", "E"], "C" => ["A", "F", "G"], "D" => ["B"], "E" => ["A", "B", "D"], "F" => ["C"], "G" => ["C"]}),
    erlang:put('g', newgraph(erlang:get('graph'), "G")),
    erlang:put('g', breath_first_search(erlang:get('g'))),
    io:format("~ts~n", [mochi_repr(shortest_path(erlang:get('g'), "D"))]),
    io:format("~ts~n", [mochi_repr(shortest_path(erlang:get('g'), "G"))]),
    io:format("~ts~n", [mochi_repr(shortest_path(erlang:get('g'), "Foo"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
