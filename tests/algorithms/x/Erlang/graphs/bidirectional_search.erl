#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, expand_search/6, construct_path/2, reverse_list/1, bidirectional_search/3, is_edge/3, path_exists/2, print_path/3, main/0]).

% Generated by Mochi transpiler v0.10.65 (5cabcd7927)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

expand_search(Graph, Queue, Head, Parents, Visited, Opposite_visited) ->
    try
        case (Head >= erlang:length(Queue)) of
        true -> throw({return, #{"queue" => Queue, "head" => Head, "parents" => Parents, "visited" => Visited, "intersection" => (0 - 1), "found" => false}});
        _ -> ok
    end,
        Current = (case erlang:is_map(Queue) of true -> maps:get(Head, Queue, nil); _ -> case Head < 0 of true -> mochi_nth(erlang:length(Queue) + Head + 1, Queue); _ -> mochi_nth(Head + 1, Queue) end end),
        Head_2 = (Head + 1),
        Neighbors = maps:get(Current, Graph, nil),
        Q = Queue,
        P = Parents,
        V = Visited,
        I = 0,
        Fun = fun Fun_loop(Current, Graph, Head_2, I, Neighbors, Opposite_visited, P, Parents, Q, Queue, V, Visited) ->
    case (I < erlang:length(Neighbors)) of
        true ->
            try
                Neighbor = (case erlang:is_map(Neighbors) of true -> maps:get(I, Neighbors, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Neighbors) + I + 1, Neighbors); _ -> mochi_nth(I + 1, Neighbors) end end),
                case maps:get(Neighbor, V, nil) of
        true -> I_2 = (I + 1),
            throw({continue, Current, Graph, Head_2, I_2, Neighbors, Opposite_visited, P, Parents, Q, Queue, V, Visited}),
            I_3 = I_2;
        _ -> I_3 = I
    end,
                V_2 = maps:put(Neighbor, true, V),
                P_2 = maps:put(Neighbor, Current, P),
                Q_2 = lists:append((case Q of nil -> []; _ -> Q end), [Neighbor]),
                case maps:get(Neighbor, Opposite_visited, nil) of
        true -> throw({return, #{"queue" => Q_2, "head" => Head_2, "parents" => P_2, "visited" => V_2, "intersection" => Neighbor, "found" => true}});
        _ -> ok
    end,
                I_4 = (I_3 + 1),
                Fun_loop(Current, Graph, Head_2, I_4, Neighbors, Opposite_visited, P_2, Parents, Q_2, Queue, V_2, Visited)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11} -> Fun_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11}
            end;
        _ -> {Current, Graph, Head_2, I, Neighbors, Opposite_visited, P, Parents, Q, Queue, V, Visited}
    end
end,
{Current, Graph, Head_2, I_4, Neighbors, Opposite_visited, P_2, Parents, Q_2, Queue, V_2, Visited} = Fun(Current, Graph, Head_2, I, Neighbors, Opposite_visited, P, Parents, Q, Queue, V, Visited),
        #{"queue" => Q_2, "head" => Head_2, "parents" => P_2, "visited" => V_2, "intersection" => (0 - 1), "found" => false}
    catch {return, RetCatch} -> RetCatch end.

construct_path(Current_2, Parents_2) ->
    try
        Path = [],
        Node = Current_2,
        Fun_2 = fun Fun_2_loop(Current_2, Node, Parents_2, Path) ->
    case (Node /= (0 - 1)) of
        true ->
            Path_2 = lists:append((case Path of nil -> []; _ -> Path end), [Node]),
            Node_2 = maps:get(Node, Parents_2, nil),
            Fun_2_loop(Current_2, Node_2, Parents_2, Path_2);
        _ -> {Current_2, Node, Parents_2, Path}
    end
end,
{Current_2, Node_2, Parents_2, Path_2} = Fun_2(Current_2, Node, Parents_2, Path),
        Path_2
    catch {return, RetCatch} -> RetCatch end.

reverse_list(Xs) ->
    try
        Res = [],
        I_5 = erlang:length(Xs),
        Fun_3 = fun Fun_3_loop(I_5, Res, Xs) ->
    case (I_5 > 0) of
        true ->
            I_6 = (I_5 - 1),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I_6, Xs, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Xs) + I_6 + 1, Xs); _ -> mochi_nth(I_6 + 1, Xs) end end)]),
            Fun_3_loop(I_6, Res_2, Xs);
        _ -> {I_5, Res, Xs}
    end
end,
{I_6, Res_2, Xs} = Fun_3(I_5, Res, Xs),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

bidirectional_search(G, Start, Goal) ->
    try
        case (Start == Goal) of
        true -> throw({return, #{"path" => [Start], "ok" => true}});
        _ -> ok
    end,
        Forward_parents = #{},
        Forward_parents_2 = maps:put(Start, (0 - 1), Forward_parents),
        Backward_parents = #{},
        Backward_parents_2 = maps:put(Goal, (0 - 1), Backward_parents),
        Forward_visited = #{},
        Forward_visited_2 = maps:put(Start, true, Forward_visited),
        Backward_visited = #{},
        Backward_visited_2 = maps:put(Goal, true, Backward_visited),
        Forward_queue = [Start],
        Backward_queue = [Goal],
        Forward_head = 0,
        Backward_head = 0,
        Intersection = (0 - 1),
        Fun_4 = fun Fun_4_loop(Backward_head, Backward_parents_2, Backward_queue, Backward_visited_2, Forward_head, Forward_parents_2, Forward_queue, Forward_visited_2, G, Goal, Intersection, Start) ->
    case (((Forward_head < erlang:length(Forward_queue)) andalso (Backward_head < erlang:length(Backward_queue))) andalso (Intersection == (0 - 1))) of
        true ->
            try
                Res_3 = expand_search(G, Forward_queue, Forward_head, Forward_parents_2, Forward_visited_2, Backward_visited_2),
                Forward_queue_2 = maps:get("queue", Res_3, nil),
                Forward_head_2 = maps:get("head", Res_3, nil),
                Forward_parents_3 = maps:get("parents", Res_3, nil),
                Forward_visited_3 = maps:get("visited", Res_3, nil),
                case maps:get("found", Res_3, nil) of
        true -> Intersection_2 = maps:get("intersection", Res_3, nil),
            throw({break, Backward_head, Backward_parents_2, Backward_queue, Backward_visited_2, Forward_head_2, Forward_parents_3, Forward_queue_2, Forward_visited_3, G, Goal, Intersection_2, Start}),
            Intersection_3 = Intersection_2;
        _ -> Intersection_3 = Intersection
    end,
                Res_4 = expand_search(G, Backward_queue, Backward_head, Backward_parents_2, Backward_visited_2, Forward_visited_3),
                Backward_queue_2 = maps:get("queue", Res_4, nil),
                Backward_head_2 = maps:get("head", Res_4, nil),
                Backward_parents_3 = maps:get("parents", Res_4, nil),
                Backward_visited_3 = maps:get("visited", Res_4, nil),
                case maps:get("found", Res_4, nil) of
        true -> Intersection_4 = maps:get("intersection", Res_4, nil),
            throw({break, Backward_head_2, Backward_parents_3, Backward_queue_2, Backward_visited_3, Forward_head_2, Forward_parents_3, Forward_queue_2, Forward_visited_3, G, Goal, Intersection_4, Start}),
            Intersection_5 = Intersection_4;
        _ -> Intersection_5 = Intersection_3
    end,
                Fun_4_loop(Backward_head_2, Backward_parents_3, Backward_queue_2, Backward_visited_3, Forward_head_2, Forward_parents_3, Forward_queue_2, Forward_visited_3, G, Goal, Intersection_5, Start)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11} -> Fun_4_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11}
            end;
        _ -> {Backward_head, Backward_parents_2, Backward_queue, Backward_visited_2, Forward_head, Forward_parents_2, Forward_queue, Forward_visited_2, G, Goal, Intersection, Start}
    end
end,
{Backward_head_2, Backward_parents_3, Backward_queue_2, Backward_visited_3, Forward_head_2, Forward_parents_3, Forward_queue_2, Forward_visited_3, G, Goal, Intersection_5, Start} = Fun_4(Backward_head, Backward_parents_2, Backward_queue, Backward_visited_2, Forward_head, Forward_parents_2, Forward_queue, Forward_visited_2, G, Goal, Intersection, Start),
        case (Intersection_5 == (0 - 1)) of
        true -> throw({return, #{"path" => [], "ok" => false}});
        _ -> ok
    end,
        Forward_path = construct_path(Intersection_5, Forward_parents_3),
        Forward_path_2 = reverse_list(Forward_path),
        Back_start = (case erlang:is_map(Backward_parents_3) of true -> maps:get(Intersection_5, Backward_parents_3, nil); _ -> case Intersection_5 < 0 of true -> mochi_nth(erlang:length(Backward_parents_3) + Intersection_5 + 1, Backward_parents_3); _ -> mochi_nth(Intersection_5 + 1, Backward_parents_3) end end),
        Backward_path = construct_path(Back_start, Backward_parents_3),
        Result = Forward_path_2,
        J = 0,
        Fun_5 = fun Fun_5_loop(Back_start, Backward_head_2, Backward_parents_3, Backward_path, Backward_queue_2, Backward_visited_3, Forward_head_2, Forward_parents_3, Forward_path_2, Forward_queue_2, Forward_visited_3, G, Goal, Intersection_5, J, Result, Start) ->
    case (J < erlang:length(Backward_path)) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Backward_path) of true -> maps:get(J, Backward_path, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Backward_path) + J + 1, Backward_path); _ -> mochi_nth(J + 1, Backward_path) end end)]),
            J_2 = (J + 1),
            Fun_5_loop(Back_start, Backward_head_2, Backward_parents_3, Backward_path, Backward_queue_2, Backward_visited_3, Forward_head_2, Forward_parents_3, Forward_path_2, Forward_queue_2, Forward_visited_3, G, Goal, Intersection_5, J_2, Result_2, Start);
        _ -> {Back_start, Backward_head_2, Backward_parents_3, Backward_path, Backward_queue_2, Backward_visited_3, Forward_head_2, Forward_parents_3, Forward_path_2, Forward_queue_2, Forward_visited_3, G, Goal, Intersection_5, J, Result, Start}
    end
end,
{Back_start, Backward_head_2, Backward_parents_3, Backward_path, Backward_queue_2, Backward_visited_3, Forward_head_2, Forward_parents_3, Forward_path_2, Forward_queue_2, Forward_visited_3, G, Goal, Intersection_5, J_2, Result_2, Start} = Fun_5(Back_start, Backward_head_2, Backward_parents_3, Backward_path, Backward_queue_2, Backward_visited_3, Forward_head_2, Forward_parents_3, Forward_path_2, Forward_queue_2, Forward_visited_3, G, Goal, Intersection_5, J, Result, Start),
        #{"path" => Result_2, "ok" => true}
    catch {return, RetCatch} -> RetCatch end.

is_edge(G_2, U, V_3) ->
    try
        Neighbors_2 = maps:get(U, G_2, nil),
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(G_2, I_7, Neighbors_2, U, V_3) ->
    case (I_7 < erlang:length(Neighbors_2)) of
        true ->
            case ((case erlang:is_map(Neighbors_2) of true -> maps:get(I_7, Neighbors_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Neighbors_2) + I_7 + 1, Neighbors_2); _ -> mochi_nth(I_7 + 1, Neighbors_2) end end) == V_3) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_6_loop(G_2, I_8, Neighbors_2, U, V_3);
        _ -> {G_2, I_7, Neighbors_2, U, V_3}
    end
end,
{G_2, I_8, Neighbors_2, U, V_3} = Fun_6(G_2, I_7, Neighbors_2, U, V_3),
        false
    catch {return, RetCatch} -> RetCatch end.

path_exists(G_3, Path_3) ->
    try
        case (erlang:length(Path_3) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(G_3, I_9, Path_3) ->
    case ((I_9 + 1) < erlang:length(Path_3)) of
        true ->
            case mochi_not(is_edge(G_3, (case erlang:is_map(Path_3) of true -> maps:get(I_9, Path_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Path_3) + I_9 + 1, Path_3); _ -> mochi_nth(I_9 + 1, Path_3) end end), (case erlang:is_map(Path_3) of true -> maps:get((I_9 + 1), Path_3, nil); _ -> case (I_9 + 1) < 0 of true -> mochi_nth(erlang:length(Path_3) + (I_9 + 1) + 1, Path_3); _ -> mochi_nth((I_9 + 1) + 1, Path_3) end end))) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_10 = (I_9 + 1),
            Fun_7_loop(G_3, I_10, Path_3);
        _ -> {G_3, I_9, Path_3}
    end
end,
{G_3, I_10, Path_3} = Fun_7(G_3, I_9, Path_3),
        true
    catch {return, RetCatch} -> RetCatch end.

print_path(G_4, S, T) ->
    try
        Res_5 = bidirectional_search(G_4, S, T),
        case (maps:get("ok", Res_5, nil) andalso path_exists(G_4, maps:get("path", Res_5, nil))) of
        true -> io:format("~ts~n", [mochi_repr(((((("Path from " ++ mochi_str(S)) ++ " to ") ++ mochi_str(T)) ++ ": ") ++ mochi_str(maps:get("path", Res_5, nil))))]);
        _ -> io:format("~ts~n", [mochi_repr((((("Path from " ++ mochi_str(S)) ++ " to ") ++ mochi_str(T)) ++ ": None"))])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Graph_2 = #{0 => [1, 2], 1 => [0, 3, 4], 2 => [0, 5, 6], 3 => [1, 7], 4 => [1, 8], 5 => [2, 9], 6 => [2, 10], 7 => [3, 11], 8 => [4, 11], 9 => [5, 11], 10 => [6, 11], 11 => [7, 8, 9, 10]},
        print_path(Graph_2, 0, 11),
        print_path(Graph_2, 5, 5),
        Disconnected = #{0 => [1, 2], 1 => [0], 2 => [0], 3 => [4], 4 => [3]},
        print_path(Disconnected, 0, 3),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
