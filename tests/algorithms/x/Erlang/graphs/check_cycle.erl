#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, depth_first_search/4, check_cycle/1, print_bool/1]).

% Generated by Mochi transpiler v0.10.65 (5cabcd7927)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

depth_first_search(Graph, Vertex, Visited, Rec_stk) ->
    try
        Visited_2 = lists:sublist(Visited, Vertex) ++ [true] ++ lists:nthtail(Vertex + 1, Visited),
        Rec_stk_2 = lists:sublist(Rec_stk, Vertex) ++ [true] ++ lists:nthtail(Vertex + 1, Rec_stk),
        Fun = fun Fun_loop(List, Graph, Rec_stk_2, Vertex, Visited_2) ->
    case List of
        [] -> {Graph, Rec_stk_2, Vertex, Visited_2};
        [Node|Node_rest] ->
            case mochi_not((case erlang:is_map(Visited_2) of true -> maps:get(Node, Visited_2, nil); _ -> case Node < 0 of true -> mochi_nth(erlang:length(Visited_2) + Node + 1, Visited_2); _ -> mochi_nth(Node + 1, Visited_2) end end)) of
        true -> case depth_first_search(Graph, Node, Visited_2, Rec_stk_2) of
        true -> throw({return, true});
        _ -> ok
    end;
        _ -> case (case erlang:is_map(Rec_stk_2) of true -> maps:get(Node, Rec_stk_2, nil); _ -> case Node < 0 of true -> mochi_nth(erlang:length(Rec_stk_2) + Node + 1, Rec_stk_2); _ -> mochi_nth(Node + 1, Rec_stk_2) end end) of
        true -> throw({return, true});
        _ -> ok
    end
    end,
            Fun_loop(Node_rest, Graph, Rec_stk_2, Vertex, Visited_2);
        _ -> {Graph, Rec_stk_2, Vertex, Visited_2}
    end
end,
{Graph, Rec_stk_2, Vertex, Visited_2} = Fun((case erlang:is_map(Graph) of true -> maps:get(Vertex, Graph, nil); _ -> case Vertex < 0 of true -> mochi_nth(erlang:length(Graph) + Vertex + 1, Graph); _ -> mochi_nth(Vertex + 1, Graph) end end), Graph, Rec_stk_2, Vertex, Visited_2),
        Rec_stk_3 = lists:sublist(Rec_stk_2, Vertex) ++ [false] ++ lists:nthtail(Vertex + 1, Rec_stk_2),
        false
    catch {return, RetCatch} -> RetCatch end.

check_cycle(Graph_2) ->
    try
        N = erlang:length(Graph_2),
        Visited_3 = [],
        Rec_stk_4 = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Graph_2, I, N, Rec_stk_4, Visited_3) ->
    case (I < N) of
        true ->
            Visited_4 = lists:append((case Visited_3 of nil -> []; _ -> Visited_3 end), [false]),
            Rec_stk_5 = lists:append((case Rec_stk_4 of nil -> []; _ -> Rec_stk_4 end), [false]),
            I_2 = (I + 1),
            Fun_2_loop(Graph_2, I_2, N, Rec_stk_5, Visited_4);
        _ -> {Graph_2, I, N, Rec_stk_4, Visited_3}
    end
end,
{Graph_2, I_2, N, Rec_stk_5, Visited_4} = Fun_2(Graph_2, I, N, Rec_stk_4, Visited_3),
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Graph_2, I_3, N, Rec_stk_5, Visited_4) ->
    case (I_3 < N) of
        true ->
            case mochi_not((case erlang:is_map(Visited_4) of true -> maps:get(I_3, Visited_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Visited_4) + I_3 + 1, Visited_4); _ -> mochi_nth(I_3 + 1, Visited_4) end end)) of
        true -> case depth_first_search(Graph_2, I_3, Visited_4, Rec_stk_5) of
        true -> throw({return, true});
        _ -> ok
    end;
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(Graph_2, I_4, N, Rec_stk_5, Visited_4);
        _ -> {Graph_2, I_3, N, Rec_stk_5, Visited_4}
    end
end,
{Graph_2, I_4, N, Rec_stk_5, Visited_4} = Fun_3(Graph_2, I_3, N, Rec_stk_5, Visited_4),
        false
    catch {return, RetCatch} -> RetCatch end.

print_bool(B) ->
    try
        case B of
        true -> io:format("~ts~n", [mochi_repr(true)]);
        _ -> io:format("~ts~n", [mochi_repr(false)])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('g1', [[], [0, 3], [0, 4], [5], [5], []]),
    print_bool(check_cycle(erlang:get('g1'))),
    erlang:put('g2', [[1, 2], [2], [0, 3], [3]]),
    print_bool(check_cycle(erlang:get('g2'))),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
