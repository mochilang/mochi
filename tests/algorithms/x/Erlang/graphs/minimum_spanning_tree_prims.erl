#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, pairs_to_string/1, prim_mst/1]).

% Generated by Mochi transpiler v0.10.65 (5cabcd7927)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

pairs_to_string(Edges) ->
    try
        S = "[",
        I = 0,
        Fun = fun Fun_loop(Edges, I, S) ->
    case (I < erlang:length(Edges)) of
        true ->
            E = (case erlang:is_map(Edges) of true -> maps:get(I, Edges, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Edges) + I + 1, Edges); _ -> mochi_nth(I + 1, Edges) end end),
            S_2 = (((((S ++ "(") ++ mochi_str(maps:get("u", E, nil))) ++ ", ") ++ mochi_str(maps:get("v", E, nil))) ++ ")"),
            case (I < (erlang:length(Edges) - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_2 = (I + 1),
            Fun_loop(Edges, I_2, S_4);
        _ -> {Edges, I, S}
    end
end,
{Edges, I_2, S_4} = Fun(Edges, I, S),
        (S_4 ++ "]")
    catch {return, RetCatch} -> RetCatch end.

prim_mst(Graph) ->
    try
        N = erlang:length(Graph),
        Visited = [],
        Dist = [],
        Parent = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Dist, Graph, I_3, N, Parent, Visited) ->
    case (I_3 < N) of
        true ->
            Visited_2 = lists:append((case Visited of nil -> []; _ -> Visited end), [false]),
            Dist_2 = lists:append((case Dist of nil -> []; _ -> Dist end), [1000000000]),
            Parent_2 = lists:append((case Parent of nil -> []; _ -> Parent end), [-1]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Dist_2, Graph, I_4, N, Parent_2, Visited_2);
        _ -> {Dist, Graph, I_3, N, Parent, Visited}
    end
end,
{Dist_2, Graph, I_4, N, Parent_2, Visited_2} = Fun_2(Dist, Graph, I_3, N, Parent, Visited),
        Dist_3 = lists:sublist(Dist_2, 0) ++ [0] ++ lists:nthtail(0 + 1, Dist_2),
        Result = [],
        Count = 0,
        Fun_5 = fun Fun_5_loop(Count, Dist_3, Graph, I_4, N, Parent_2, Result, Visited_2) ->
    case (Count < N) of
        true ->
            try
                Min_val = 1000000000,
                U = 0,
                V = 0,
                Fun_3 = fun Fun_3_loop(Count, Dist_3, Graph, I_4, Min_val, N, Parent_2, Result, U, V, Visited_2) ->
    case (V < N) of
        true ->
            case (((case erlang:is_map(Visited_2) of true -> maps:get(V, Visited_2, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Visited_2) + V + 1, Visited_2); _ -> mochi_nth(V + 1, Visited_2) end end) == false) andalso ((case erlang:is_map(Dist_3) of true -> maps:get(V, Dist_3, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Dist_3) + V + 1, Dist_3); _ -> mochi_nth(V + 1, Dist_3) end end) < Min_val)) of
        true -> Min_val_2 = (case erlang:is_map(Dist_3) of true -> maps:get(V, Dist_3, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Dist_3) + V + 1, Dist_3); _ -> mochi_nth(V + 1, Dist_3) end end),
            U_2 = V,
            Min_val_3 = Min_val_2,
            U_3 = U_2;
        _ -> Min_val_3 = Min_val,
            U_3 = U
    end,
            V_2 = (V + 1),
            Fun_3_loop(Count, Dist_3, Graph, I_4, Min_val_3, N, Parent_2, Result, U_3, V_2, Visited_2);
        _ -> {Count, Dist_3, Graph, I_4, Min_val, N, Parent_2, Result, U, V, Visited_2}
    end
end,
{Count, Dist_3, Graph, I_4, Min_val_3, N, Parent_2, Result, U_3, V_2, Visited_2} = Fun_3(Count, Dist_3, Graph, I_4, Min_val, N, Parent_2, Result, U, V, Visited_2),
                case (Min_val_3 == 1000000000) of
        true -> throw({break, Count, Dist_3, Graph, I_4, N, Parent_2, Result, Visited_2});
        _ -> ok
    end,
                Visited_3 = lists:sublist(Visited_2, U_3) ++ [true] ++ lists:nthtail(U_3 + 1, Visited_2),
                case (U_3 /= 0) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [#{"u" => (case erlang:is_map(Parent_2) of true -> maps:get(U_3, Parent_2, nil); _ -> case U_3 < 0 of true -> mochi_nth(erlang:length(Parent_2) + U_3 + 1, Parent_2); _ -> mochi_nth(U_3 + 1, Parent_2) end end), "v" => U_3}]),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
                Fun_4 = fun Fun_4_loop(List, Count, Dist_3, Graph, I_4, Min_val_3, N, Parent_2, Result_3, U_3, V_2, Visited_3) ->
    case List of
        [] -> {Count, Dist_3, Graph, I_4, Min_val_3, N, Parent_2, Result_3, U_3, V_2, Visited_3};
        [E_2|E_2_rest] ->
            case (((case erlang:is_map(Visited_3) of true -> maps:get(maps:get("to", E_2, nil), Visited_3, nil); _ -> case maps:get("to", E_2, nil) < 0 of true -> mochi_nth(erlang:length(Visited_3) + maps:get("to", E_2, nil) + 1, Visited_3); _ -> mochi_nth(maps:get("to", E_2, nil) + 1, Visited_3) end end) == false) andalso (maps:get("weight", E_2, nil) < (case erlang:is_map(Dist_3) of true -> maps:get(maps:get("to", E_2, nil), Dist_3, nil); _ -> case maps:get("to", E_2, nil) < 0 of true -> mochi_nth(erlang:length(Dist_3) + maps:get("to", E_2, nil) + 1, Dist_3); _ -> mochi_nth(maps:get("to", E_2, nil) + 1, Dist_3) end end))) of
        true -> Dist_4 = lists:sublist(Dist_3, maps:get("to", E_2, nil)) ++ [maps:get("weight", E_2, nil)] ++ lists:nthtail(maps:get("to", E_2, nil) + 1, Dist_3),
            Parent_3 = lists:sublist(Parent_2, maps:get("to", E_2, nil)) ++ [U_3] ++ lists:nthtail(maps:get("to", E_2, nil) + 1, Parent_2),
            Dist_5 = Dist_4,
            Parent_4 = Parent_3;
        _ -> Dist_5 = Dist_3,
            Parent_4 = Parent_2
    end,
            Fun_4_loop(E_2_rest, Count, Dist_5, Graph, I_4, Min_val_3, N, Parent_4, Result_3, U_3, V_2, Visited_3);
        _ -> {Count, Dist_3, Graph, I_4, Min_val_3, N, Parent_2, Result_3, U_3, V_2, Visited_3}
    end
end,
{Count, Dist_5, Graph, I_4, Min_val_3, N, Parent_4, Result_3, U_3, V_2, Visited_3} = Fun_4((case erlang:is_map(Graph) of true -> maps:get(U_3, Graph, nil); _ -> case U_3 < 0 of true -> mochi_nth(erlang:length(Graph) + U_3 + 1, Graph); _ -> mochi_nth(U_3 + 1, Graph) end end), Count, Dist_3, Graph, I_4, Min_val_3, N, Parent_2, Result_3, U_3, V_2, Visited_3),
                Count_2 = (Count + 1),
                Fun_5_loop(Count_2, Dist_5, Graph, I_4, N, Parent_4, Result_3, Visited_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7} -> Fun_5_loop(C0, C1, C2, C3, C4, C5, C6, C7);
                {break, B0, B1, B2, B3, B4, B5, B6, B7} -> {B0, B1, B2, B3, B4, B5, B6, B7}
            end;
        _ -> {Count, Dist_3, Graph, I_4, N, Parent_2, Result, Visited_2}
    end
end,
{Count_2, Dist_5, Graph, I_4, N, Parent_4, Result_3, Visited_3} = Fun_5(Count, Dist_3, Graph, I_4, N, Parent_2, Result, Visited_2),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('INF', 1000000000),
    erlang:put('adjacency_list', [[#{"to" => 1, "weight" => 1}, #{"to" => 3, "weight" => 3}], [#{"to" => 0, "weight" => 1}, #{"to" => 2, "weight" => 6}, #{"to" => 3, "weight" => 5}, #{"to" => 4, "weight" => 1}], [#{"to" => 1, "weight" => 6}, #{"to" => 4, "weight" => 5}, #{"to" => 5, "weight" => 2}], [#{"to" => 0, "weight" => 3}, #{"to" => 1, "weight" => 5}, #{"to" => 4, "weight" => 1}], [#{"to" => 1, "weight" => 1}, #{"to" => 2, "weight" => 5}, #{"to" => 3, "weight" => 1}, #{"to" => 5, "weight" => 4}], [#{"to" => 2, "weight" => 2}, #{"to" => 4, "weight" => 4}]]),
    erlang:put('mst_edges', prim_mst(erlang:get('adjacency_list'))),
    io:format("~ts~n", [mochi_repr(pairs_to_string(erlang:get('mst_edges')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
