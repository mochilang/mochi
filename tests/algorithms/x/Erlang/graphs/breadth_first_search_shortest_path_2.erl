#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, contains/2, contains_key/2, bfs_shortest_path/3, bfs_shortest_path_distance/3]).

% Generated by Mochi transpiler v0.10.65 (f942880281) on 2025-08-13 16:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

contains(Xs, X) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, X, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) == X) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, X, Xs);
        _ -> {I, X, Xs}
    end
end,
{I_2, X, Xs} = Fun(I, X, Xs),
        false
    catch {return, RetCatch} -> RetCatch end.

contains_key(M, Key) ->
    try
        Fun_2 = fun Fun_2_loop(List, Key, M) ->
    case List of
        [] -> {Key, M};
        [K|K_rest] ->
            case (K == Key) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_2_loop(K_rest, Key, M);
        _ -> {Key, M}
    end
end,
{Key, M} = Fun_2(maps:keys(M), Key, M),
        false
    catch {return, RetCatch} -> RetCatch end.

bfs_shortest_path(Graph, Start, Goal) ->
    try
        Explored = [],
        Queue = [[Start]],
        case (Start == Goal) of
        true -> throw({return, [Start]});
        _ -> ok
    end,
        Fun_5 = fun Fun_5_loop(Explored, Goal, Graph, Queue, Start) ->
    case (erlang:length(Queue) > 0) of
        true ->
            Path = (case erlang:is_map(Queue) of true -> maps:get(0, Queue, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Queue) + 0 + 1, Queue); _ -> mochi_nth(0 + 1, Queue) end end),
            Queue_2 = (case erlang:is_binary(Queue) of true -> string:substr(Queue, 1 + 1, (erlang:length(Queue) - 1)); _ -> lists:sublist(Queue, (1 + 1), (erlang:length(Queue) - 1)) end),
            Node = (case erlang:is_map(Path) of true -> maps:get((erlang:length(Path) - 1), Path, nil); _ -> case (erlang:length(Path) - 1) < 0 of true -> mochi_nth(erlang:length(Path) + (erlang:length(Path) - 1) + 1, Path); _ -> mochi_nth((erlang:length(Path) - 1) + 1, Path) end end),
            case mochi_not(mochi_member(Node, Explored)) of
        true -> Neighbours = maps:get(Node, Graph, nil),
            I_3 = 0,
            Fun_3 = fun Fun_3_loop(Explored, Goal, Graph, I_3, Neighbours, Node, Path, Queue_2, Start) ->
    case (I_3 < erlang:length(Neighbours)) of
        true ->
            Neighbour = (case erlang:is_map(Neighbours) of true -> maps:get(I_3, Neighbours, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Neighbours) + I_3 + 1, Neighbours); _ -> mochi_nth(I_3 + 1, Neighbours) end end),
            New_path = Path,
            New_path_2 = lists:append((case New_path of nil -> []; _ -> New_path end), [Neighbour]),
            Queue_3 = lists:append((case Queue_2 of nil -> []; _ -> Queue_2 end), [New_path_2]),
            case (Neighbour == Goal) of
        true -> throw({return, New_path_2});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(Explored, Goal, Graph, I_4, Neighbours, Node, Path, Queue_3, Start);
        _ -> {Explored, Goal, Graph, I_3, Neighbours, Node, Path, Queue_2, Start}
    end
end,
{Explored, Goal, Graph, I_4, Neighbours, Node, Path, Queue_3, Start} = Fun_3(Explored, Goal, Graph, I_3, Neighbours, Node, Path, Queue_2, Start),
            Explored_2 = lists:append((case Explored of nil -> []; _ -> Explored end), [Node]),
            Explored_3 = Explored_2,
            Fun_4 = Fun_3,
            I_5 = I_4,
            Neighbours_2 = Neighbours,
            Queue_4 = Queue_3;
        _ -> Explored_3 = Explored,
            Fun_4 = nil,
            I_5 = nil,
            Neighbours_2 = nil,
            Queue_4 = Queue_2
    end,
            Fun_5_loop(Explored_3, Goal, Graph, Queue_4, Start);
        _ -> {Explored, Goal, Graph, Queue, Start}
    end
end,
{Explored_3, Goal, Graph, Queue_4, Start} = Fun_5(Explored, Goal, Graph, Queue, Start),
        []
    catch {return, RetCatch} -> RetCatch end.

bfs_shortest_path_distance(Graph_2, Start_2, Target) ->
    try
        case ((contains_key(Graph_2, Start_2) == false) orelse (contains_key(Graph_2, Target) == false)) of
        true -> throw({return, -1});
        _ -> ok
    end,
        case (Start_2 == Target) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Queue_5 = [Start_2],
        Visited = [Start_2],
        Dist = #{},
        Dist_2 = maps:put(Start_2, 0, Dist),
        Dist_3 = maps:put(Target, -1, Dist_2),
        Fun_7 = fun Fun_7_loop(Dist_3, Graph_2, Queue_5, Start_2, Target, Visited) ->
    case (erlang:length(Queue_5) > 0) of
        true ->
            Node_2 = (case erlang:is_map(Queue_5) of true -> maps:get(0, Queue_5, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Queue_5) + 0 + 1, Queue_5); _ -> mochi_nth(0 + 1, Queue_5) end end),
            Queue_6 = (case erlang:is_binary(Queue_5) of true -> string:substr(Queue_5, 1 + 1, (erlang:length(Queue_5) - 1)); _ -> lists:sublist(Queue_5, (1 + 1), (erlang:length(Queue_5) - 1)) end),
            case (Node_2 == Target) of
        true -> case ((maps:get(Target, Dist_3, nil) == -1) orelse (maps:get(Node_2, Dist_3, nil) < maps:get(Target, Dist_3, nil))) of
        true -> Dist_4 = maps:put(Target, maps:get(Node_2, Dist_3, nil), Dist_3),
            Dist_5 = Dist_4;
        _ -> Dist_5 = Dist_3
    end,
            Dist_6 = Dist_5;
        _ -> Dist_6 = Dist_3
    end,
            Adj = maps:get(Node_2, Graph_2, nil),
            I_6 = 0,
            Fun_6 = fun Fun_6_loop(Adj, Dist_6, Graph_2, I_6, Node_2, Queue_6, Start_2, Target, Visited) ->
    case (I_6 < erlang:length(Adj)) of
        true ->
            Next = (case erlang:is_map(Adj) of true -> maps:get(I_6, Adj, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Adj) + I_6 + 1, Adj); _ -> mochi_nth(I_6 + 1, Adj) end end),
            case mochi_not(mochi_member(Next, Visited)) of
        true -> Visited_2 = lists:append((case Visited of nil -> []; _ -> Visited end), [Next]),
            Queue_7 = lists:append((case Queue_6 of nil -> []; _ -> Queue_6 end), [Next]),
            Dist_7 = maps:put(Next, (maps:get(Node_2, Dist_6, nil) + 1), Dist_6),
            Dist_8 = Dist_7,
            Queue_8 = Queue_7,
            Visited_3 = Visited_2;
        _ -> Dist_8 = Dist_6,
            Queue_8 = Queue_6,
            Visited_3 = Visited
    end,
            I_7 = (I_6 + 1),
            Fun_6_loop(Adj, Dist_8, Graph_2, I_7, Node_2, Queue_8, Start_2, Target, Visited_3);
        _ -> {Adj, Dist_6, Graph_2, I_6, Node_2, Queue_6, Start_2, Target, Visited}
    end
end,
{Adj, Dist_8, Graph_2, I_7, Node_2, Queue_8, Start_2, Target, Visited_3} = Fun_6(Adj, Dist_6, Graph_2, I_6, Node_2, Queue_6, Start_2, Target, Visited),
            Fun_7_loop(Dist_8, Graph_2, Queue_8, Start_2, Target, Visited_3);
        _ -> {Dist_3, Graph_2, Queue_5, Start_2, Target, Visited}
    end
end,
{Dist_8, Graph_2, Queue_8, Start_2, Target, Visited_3} = Fun_7(Dist_3, Graph_2, Queue_5, Start_2, Target, Visited),
        maps:get(Target, Dist_8, nil)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('demo_graph', #{"A" => ["B", "C", "E"], "B" => ["A", "D", "E"], "C" => ["A", "F", "G"], "D" => ["B"], "E" => ["A", "B", "D"], "F" => ["C"], "G" => ["C"]}),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
