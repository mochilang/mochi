#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, sqrtapprox/1, rand_float/0, pow_float/2, distance/2, choose_weighted/2, city_select/6, pheromone_update/5, remove_value/2, ant_colony/7]).

% Generated by Mochi transpiler v0.10.64 (9e806895eb) on 2025-08-13 16:13 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

sqrtapprox(X) ->
    try
        Guess = mochi_safe_div(X, 2.0),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

rand_float() ->
    try
        mochi_safe_div(float(mochi_mod(mochi_now(), 1000000)), 1000000.0)
    catch {return, RetCatch} -> RetCatch end.

pow_float(Base, Exp) ->
    try
        Result = 1.0,
        I_3 = 0,
        E = mochi_to_int(Exp),
        Fun_2 = fun Fun_2_loop(Base, E, Exp, I_3, Result) ->
    case (I_3 < E) of
        true ->
            Result_2 = mochi_safe_mul(Result, Base),
            I_4 = (I_3 + 1),
            Fun_2_loop(Base, E, Exp, I_4, Result_2);
        _ -> {Base, E, Exp, I_3, Result}
    end
end,
{Base, E, Exp, I_4, Result_2} = Fun_2(Base, E, Exp, I_3, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

distance(City1, City2) ->
    try
        Dx = float(((case erlang:is_map(City1) of true -> maps:get(0, City1, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(City1) + 0 + 1, City1); _ -> mochi_nth(0 + 1, City1) end end) - (case erlang:is_map(City2) of true -> maps:get(0, City2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(City2) + 0 + 1, City2); _ -> mochi_nth(0 + 1, City2) end end))),
        Dy = float(((case erlang:is_map(City1) of true -> maps:get(1, City1, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(City1) + 1 + 1, City1); _ -> mochi_nth(1 + 1, City1) end end) - (case erlang:is_map(City2) of true -> maps:get(1, City2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(City2) + 1 + 1, City2); _ -> mochi_nth(1 + 1, City2) end end))),
        sqrtapprox((mochi_safe_mul(Dx, Dx) + mochi_safe_mul(Dy, Dy)))
    catch {return, RetCatch} -> RetCatch end.

choose_weighted(Options, Weights) ->
    try
        Total = 0.0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Options, Total, Weights) ->
    case (I_5 < erlang:length(Weights)) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Weights) of true -> maps:get(I_5, Weights, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Weights) + I_5 + 1, Weights); _ -> mochi_nth(I_5 + 1, Weights) end end)),
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Options, Total_2, Weights);
        _ -> {I_5, Options, Total, Weights}
    end
end,
{I_6, Options, Total_2, Weights} = Fun_3(I_5, Options, Total, Weights),
        R = mochi_safe_mul(rand_float(), Total_2),
        Accum = 0.0,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Accum, I_7, Options, R, Total_2, Weights) ->
    case (I_7 < erlang:length(Weights)) of
        true ->
            Accum_2 = (Accum + (case erlang:is_map(Weights) of true -> maps:get(I_7, Weights, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Weights) + I_7 + 1, Weights); _ -> mochi_nth(I_7 + 1, Weights) end end)),
            case (R =< Accum_2) of
        true -> throw({return, (case erlang:is_map(Options) of true -> maps:get(I_7, Options, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Options) + I_7 + 1, Options); _ -> mochi_nth(I_7 + 1, Options) end end)});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(Accum_2, I_8, Options, R, Total_2, Weights);
        _ -> {Accum, I_7, Options, R, Total_2, Weights}
    end
end,
{Accum_2, I_8, Options, R, Total_2, Weights} = Fun_4(Accum, I_7, Options, R, Total_2, Weights),
        (case erlang:is_map(Options) of true -> maps:get((erlang:length(Options) - 1), Options, nil); _ -> case (erlang:length(Options) - 1) < 0 of true -> mochi_nth(erlang:length(Options) + (erlang:length(Options) - 1) + 1, Options); _ -> mochi_nth((erlang:length(Options) - 1) + 1, Options) end end)
    catch {return, RetCatch} -> RetCatch end.

city_select(Pheromone, Current, Unvisited, Alpha, Beta, Cities) ->
    try
        Probs = [],
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(Alpha, Beta, Cities, Current, I_9, Pheromone, Probs, Unvisited) ->
    case (I_9 < erlang:length(Unvisited)) of
        true ->
            City = (case erlang:is_map(Unvisited) of true -> maps:get(I_9, Unvisited, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Unvisited) + I_9 + 1, Unvisited); _ -> mochi_nth(I_9 + 1, Unvisited) end end),
            Dist = distance(maps:get(City, Cities, nil), maps:get(Current, Cities, nil)),
            Trail = (case erlang:is_map((case erlang:is_map(Pheromone) of true -> maps:get(City, Pheromone, nil); _ -> case City < 0 of true -> mochi_nth(erlang:length(Pheromone) + City + 1, Pheromone); _ -> mochi_nth(City + 1, Pheromone) end end)) of true -> maps:get(Current, (case erlang:is_map(Pheromone) of true -> maps:get(City, Pheromone, nil); _ -> case City < 0 of true -> mochi_nth(erlang:length(Pheromone) + City + 1, Pheromone); _ -> mochi_nth(City + 1, Pheromone) end end), nil); _ -> case Current < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Pheromone) of true -> maps:get(City, Pheromone, nil); _ -> case City < 0 of true -> mochi_nth(erlang:length(Pheromone) + City + 1, Pheromone); _ -> mochi_nth(City + 1, Pheromone) end end)) + Current + 1, (case erlang:is_map(Pheromone) of true -> maps:get(City, Pheromone, nil); _ -> case City < 0 of true -> mochi_nth(erlang:length(Pheromone) + City + 1, Pheromone); _ -> mochi_nth(City + 1, Pheromone) end end)); _ -> mochi_nth(Current + 1, (case erlang:is_map(Pheromone) of true -> maps:get(City, Pheromone, nil); _ -> case City < 0 of true -> mochi_nth(erlang:length(Pheromone) + City + 1, Pheromone); _ -> mochi_nth(City + 1, Pheromone) end end)) end end),
            Prob = mochi_safe_mul(pow_float(Trail, Alpha), pow_float(mochi_safe_div(1.0, Dist), Beta)),
            Probs_2 = lists:append((case Probs of nil -> []; _ -> Probs end), [Prob]),
            I_10 = (I_9 + 1),
            Fun_5_loop(Alpha, Beta, Cities, Current, I_10, Pheromone, Probs_2, Unvisited);
        _ -> {Alpha, Beta, Cities, Current, I_9, Pheromone, Probs, Unvisited}
    end
end,
{Alpha, Beta, Cities, Current, I_10, Pheromone, Probs_2, Unvisited} = Fun_5(Alpha, Beta, Cities, Current, I_9, Pheromone, Probs, Unvisited),
        choose_weighted(Unvisited, Probs_2)
    catch {return, RetCatch} -> RetCatch end.

pheromone_update(Pheromone_2, Cities_2, Evaporation, Ants_route, Q) ->
    try
        N = erlang:length(Pheromone_2),
        I_11 = 0,
        Fun_7 = fun Fun_7_loop(Ants_route, Cities_2, Evaporation, I_11, N, Pheromone_2, Q) ->
    case (I_11 < N) of
        true ->
            J = 0,
            Fun_6 = fun Fun_6_loop(Ants_route, Cities_2, Evaporation, I_11, J, N, Pheromone_2, Q) ->
    case (J < N) of
        true ->
            Pheromone_3 = lists:sublist(Pheromone_2, I_11) ++ [lists:sublist(lists:nth(I_11 + 1, Pheromone_2), J) ++ [mochi_safe_mul((case erlang:is_map((case erlang:is_map(Pheromone_2) of true -> maps:get(I_11, Pheromone_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Pheromone_2) + I_11 + 1, Pheromone_2); _ -> mochi_nth(I_11 + 1, Pheromone_2) end end)) of true -> maps:get(J, (case erlang:is_map(Pheromone_2) of true -> maps:get(I_11, Pheromone_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Pheromone_2) + I_11 + 1, Pheromone_2); _ -> mochi_nth(I_11 + 1, Pheromone_2) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Pheromone_2) of true -> maps:get(I_11, Pheromone_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Pheromone_2) + I_11 + 1, Pheromone_2); _ -> mochi_nth(I_11 + 1, Pheromone_2) end end)) + J + 1, (case erlang:is_map(Pheromone_2) of true -> maps:get(I_11, Pheromone_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Pheromone_2) + I_11 + 1, Pheromone_2); _ -> mochi_nth(I_11 + 1, Pheromone_2) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Pheromone_2) of true -> maps:get(I_11, Pheromone_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Pheromone_2) + I_11 + 1, Pheromone_2); _ -> mochi_nth(I_11 + 1, Pheromone_2) end end)) end end), Evaporation)] ++ lists:nthtail(J + 1, lists:nth(I_11 + 1, Pheromone_2))] ++ lists:nthtail(I_11 + 1, Pheromone_2),
            J_2 = (J + 1),
            Fun_6_loop(Ants_route, Cities_2, Evaporation, I_11, J_2, N, Pheromone_3, Q);
        _ -> {Ants_route, Cities_2, Evaporation, I_11, J, N, Pheromone_2, Q}
    end
end,
{Ants_route, Cities_2, Evaporation, I_11, J_2, N, Pheromone_3, Q} = Fun_6(Ants_route, Cities_2, Evaporation, I_11, J, N, Pheromone_2, Q),
            I_12 = (I_11 + 1),
            Fun_7_loop(Ants_route, Cities_2, Evaporation, I_12, N, Pheromone_3, Q);
        _ -> {Ants_route, Cities_2, Evaporation, I_11, N, Pheromone_2, Q}
    end
end,
{Ants_route, Cities_2, Evaporation, I_12, N, Pheromone_3, Q} = Fun_7(Ants_route, Cities_2, Evaporation, I_11, N, Pheromone_2, Q),
        A = 0,
        Fun_10 = fun Fun_10_loop(A, Ants_route, Cities_2, Evaporation, I_12, N, Pheromone_3, Q) ->
    case (A < erlang:length(Ants_route)) of
        true ->
            Route = (case erlang:is_map(Ants_route) of true -> maps:get(A, Ants_route, nil); _ -> case A < 0 of true -> mochi_nth(erlang:length(Ants_route) + A + 1, Ants_route); _ -> mochi_nth(A + 1, Ants_route) end end),
            Total_3 = 0.0,
            R_2 = 0,
            Fun_8 = fun Fun_8_loop(A, Ants_route, Cities_2, Evaporation, I_12, N, Pheromone_3, Q, R_2, Route, Total_3) ->
    case (R_2 < (erlang:length(Route) - 1)) of
        true ->
            Total_4 = (Total_3 + distance(maps:get((case erlang:is_map(Route) of true -> maps:get(R_2, Route, nil); _ -> case R_2 < 0 of true -> mochi_nth(erlang:length(Route) + R_2 + 1, Route); _ -> mochi_nth(R_2 + 1, Route) end end), Cities_2, nil), maps:get((case erlang:is_map(Route) of true -> maps:get((R_2 + 1), Route, nil); _ -> case (R_2 + 1) < 0 of true -> mochi_nth(erlang:length(Route) + (R_2 + 1) + 1, Route); _ -> mochi_nth((R_2 + 1) + 1, Route) end end), Cities_2, nil))),
            R_3 = (R_2 + 1),
            Fun_8_loop(A, Ants_route, Cities_2, Evaporation, I_12, N, Pheromone_3, Q, R_3, Route, Total_4);
        _ -> {A, Ants_route, Cities_2, Evaporation, I_12, N, Pheromone_3, Q, R_2, Route, Total_3}
    end
end,
{A, Ants_route, Cities_2, Evaporation, I_12, N, Pheromone_3, Q, R_3, Route, Total_4} = Fun_8(A, Ants_route, Cities_2, Evaporation, I_12, N, Pheromone_3, Q, R_2, Route, Total_3),
            Delta = mochi_safe_div(Q, Total_4),
            R_4 = 0,
            Fun_9 = fun Fun_9_loop(A, Ants_route, Cities_2, Delta, Evaporation, I_12, N, Pheromone_3, Q, R_4, Route, Total_4) ->
    case (R_4 < (erlang:length(Route) - 1)) of
        true ->
            U = (case erlang:is_map(Route) of true -> maps:get(R_4, Route, nil); _ -> case R_4 < 0 of true -> mochi_nth(erlang:length(Route) + R_4 + 1, Route); _ -> mochi_nth(R_4 + 1, Route) end end),
            V = (case erlang:is_map(Route) of true -> maps:get((R_4 + 1), Route, nil); _ -> case (R_4 + 1) < 0 of true -> mochi_nth(erlang:length(Route) + (R_4 + 1) + 1, Route); _ -> mochi_nth((R_4 + 1) + 1, Route) end end),
            Pheromone_4 = lists:sublist(Pheromone_3, U) ++ [lists:sublist(lists:nth(U + 1, Pheromone_3), V) ++ [((case erlang:is_map((case erlang:is_map(Pheromone_3) of true -> maps:get(U, Pheromone_3, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Pheromone_3) + U + 1, Pheromone_3); _ -> mochi_nth(U + 1, Pheromone_3) end end)) of true -> maps:get(V, (case erlang:is_map(Pheromone_3) of true -> maps:get(U, Pheromone_3, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Pheromone_3) + U + 1, Pheromone_3); _ -> mochi_nth(U + 1, Pheromone_3) end end), nil); _ -> case V < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Pheromone_3) of true -> maps:get(U, Pheromone_3, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Pheromone_3) + U + 1, Pheromone_3); _ -> mochi_nth(U + 1, Pheromone_3) end end)) + V + 1, (case erlang:is_map(Pheromone_3) of true -> maps:get(U, Pheromone_3, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Pheromone_3) + U + 1, Pheromone_3); _ -> mochi_nth(U + 1, Pheromone_3) end end)); _ -> mochi_nth(V + 1, (case erlang:is_map(Pheromone_3) of true -> maps:get(U, Pheromone_3, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Pheromone_3) + U + 1, Pheromone_3); _ -> mochi_nth(U + 1, Pheromone_3) end end)) end end) + Delta)] ++ lists:nthtail(V + 1, lists:nth(U + 1, Pheromone_3))] ++ lists:nthtail(U + 1, Pheromone_3),
            Pheromone_5 = lists:sublist(Pheromone_4, V) ++ [lists:sublist(lists:nth(V + 1, Pheromone_4), U) ++ [(case erlang:is_map((case erlang:is_map(Pheromone_4) of true -> maps:get(U, Pheromone_4, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Pheromone_4) + U + 1, Pheromone_4); _ -> mochi_nth(U + 1, Pheromone_4) end end)) of true -> maps:get(V, (case erlang:is_map(Pheromone_4) of true -> maps:get(U, Pheromone_4, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Pheromone_4) + U + 1, Pheromone_4); _ -> mochi_nth(U + 1, Pheromone_4) end end), nil); _ -> case V < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Pheromone_4) of true -> maps:get(U, Pheromone_4, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Pheromone_4) + U + 1, Pheromone_4); _ -> mochi_nth(U + 1, Pheromone_4) end end)) + V + 1, (case erlang:is_map(Pheromone_4) of true -> maps:get(U, Pheromone_4, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Pheromone_4) + U + 1, Pheromone_4); _ -> mochi_nth(U + 1, Pheromone_4) end end)); _ -> mochi_nth(V + 1, (case erlang:is_map(Pheromone_4) of true -> maps:get(U, Pheromone_4, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Pheromone_4) + U + 1, Pheromone_4); _ -> mochi_nth(U + 1, Pheromone_4) end end)) end end)] ++ lists:nthtail(U + 1, lists:nth(V + 1, Pheromone_4))] ++ lists:nthtail(V + 1, Pheromone_4),
            R_5 = (R_4 + 1),
            Fun_9_loop(A, Ants_route, Cities_2, Delta, Evaporation, I_12, N, Pheromone_5, Q, R_5, Route, Total_4);
        _ -> {A, Ants_route, Cities_2, Delta, Evaporation, I_12, N, Pheromone_3, Q, R_4, Route, Total_4}
    end
end,
{A, Ants_route, Cities_2, Delta, Evaporation, I_12, N, Pheromone_5, Q, R_5, Route, Total_4} = Fun_9(A, Ants_route, Cities_2, Delta, Evaporation, I_12, N, Pheromone_3, Q, R_4, Route, Total_4),
            A_2 = (A + 1),
            Fun_10_loop(A_2, Ants_route, Cities_2, Evaporation, I_12, N, Pheromone_5, Q);
        _ -> {A, Ants_route, Cities_2, Evaporation, I_12, N, Pheromone_3, Q}
    end
end,
{A_2, Ants_route, Cities_2, Evaporation, I_12, N, Pheromone_5, Q} = Fun_10(A, Ants_route, Cities_2, Evaporation, I_12, N, Pheromone_3, Q),
        Pheromone_5
    catch {return, RetCatch} -> RetCatch end.

remove_value(Lst, Val) ->
    try
        Res = [],
        I_13 = 0,
        Fun_11 = fun Fun_11_loop(I_13, Lst, Res, Val) ->
    case (I_13 < erlang:length(Lst)) of
        true ->
            case ((case erlang:is_map(Lst) of true -> maps:get(I_13, Lst, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Lst) + I_13 + 1, Lst); _ -> mochi_nth(I_13 + 1, Lst) end end) /= Val) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Lst) of true -> maps:get(I_13, Lst, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Lst) + I_13 + 1, Lst); _ -> mochi_nth(I_13 + 1, Lst) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_14 = (I_13 + 1),
            Fun_11_loop(I_14, Lst, Res_3, Val);
        _ -> {I_13, Lst, Res, Val}
    end
end,
{I_14, Lst, Res_3, Val} = Fun_11(I_13, Lst, Res, Val),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

ant_colony(Cities_3, Ants_num, Iterations, Evaporation_2, Alpha_2, Beta_2, Q_2) ->
    try
        N_2 = maps:size(Cities_3),
        Pheromone_6 = [],
        I_15 = 0,
        Fun_13 = fun Fun_13_loop(Alpha_2, Ants_num, Beta_2, Cities_3, Evaporation_2, I_15, Iterations, N_2, Pheromone_6, Q_2) ->
    case (I_15 < N_2) of
        true ->
            Row = [],
            J_3 = 0,
            Fun_12 = fun Fun_12_loop(Alpha_2, Ants_num, Beta_2, Cities_3, Evaporation_2, I_15, Iterations, J_3, N_2, Pheromone_6, Q_2, Row) ->
    case (J_3 < N_2) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [1.0]),
            J_4 = (J_3 + 1),
            Fun_12_loop(Alpha_2, Ants_num, Beta_2, Cities_3, Evaporation_2, I_15, Iterations, J_4, N_2, Pheromone_6, Q_2, Row_2);
        _ -> {Alpha_2, Ants_num, Beta_2, Cities_3, Evaporation_2, I_15, Iterations, J_3, N_2, Pheromone_6, Q_2, Row}
    end
end,
{Alpha_2, Ants_num, Beta_2, Cities_3, Evaporation_2, I_15, Iterations, J_4, N_2, Pheromone_6, Q_2, Row_2} = Fun_12(Alpha_2, Ants_num, Beta_2, Cities_3, Evaporation_2, I_15, Iterations, J_3, N_2, Pheromone_6, Q_2, Row),
            Pheromone_7 = lists:append((case Pheromone_6 of nil -> []; _ -> Pheromone_6 end), [Row_2]),
            I_16 = (I_15 + 1),
            Fun_13_loop(Alpha_2, Ants_num, Beta_2, Cities_3, Evaporation_2, I_16, Iterations, N_2, Pheromone_7, Q_2);
        _ -> {Alpha_2, Ants_num, Beta_2, Cities_3, Evaporation_2, I_15, Iterations, N_2, Pheromone_6, Q_2}
    end
end,
{Alpha_2, Ants_num, Beta_2, Cities_3, Evaporation_2, I_16, Iterations, N_2, Pheromone_7, Q_2} = Fun_13(Alpha_2, Ants_num, Beta_2, Cities_3, Evaporation_2, I_15, Iterations, N_2, Pheromone_6, Q_2),
        Best_path = [],
        Best_distance = 1000000000.0,
        Iter = 0,
        Fun_19 = fun Fun_19_loop(Alpha_2, Ants_num, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, N_2, Pheromone_7, Q_2) ->
    case (Iter < Iterations) of
        true ->
            Ants_route_2 = [],
            K = 0,
            Fun_16 = fun Fun_16_loop(Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2) ->
    case (K < Ants_num) of
        true ->
            Route_2 = [0],
            Unvisited_2 = [],
            Fun_14 = fun Fun_14_loop(List, Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2, Route_2, Unvisited_2) ->
    case List of
        [] -> {Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2, Route_2, Unvisited_2};
        [Key|Key_rest] ->
            case (Key /= 0) of
        true -> Unvisited_3 = lists:append((case Unvisited_2 of nil -> []; _ -> Unvisited_2 end), [Key]),
            Unvisited_4 = Unvisited_3;
        _ -> Unvisited_4 = Unvisited_2
    end,
            Fun_14_loop(Key_rest, Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2, Route_2, Unvisited_4);
        _ -> {Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2, Route_2, Unvisited_2}
    end
end,
{Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2, Route_2, Unvisited_4} = Fun_14(maps:keys(Cities_3), Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2, Route_2, Unvisited_2),
            Current_2 = 0,
            Fun_15 = fun Fun_15_loop(Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Current_2, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2, Route_2, Unvisited_4) ->
    case (erlang:length(Unvisited_4) > 0) of
        true ->
            Next_city = city_select(Pheromone_7, Current_2, Unvisited_4, Alpha_2, Beta_2, Cities_3),
            Route_3 = lists:append((case Route_2 of nil -> []; _ -> Route_2 end), [Next_city]),
            Unvisited_5 = remove_value(Unvisited_4, Next_city),
            Current_3 = Next_city,
            Fun_15_loop(Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Current_3, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2, Route_3, Unvisited_5);
        _ -> {Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Current_2, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2, Route_2, Unvisited_4}
    end
end,
{Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Current_3, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2, Route_3, Unvisited_5} = Fun_15(Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Current_2, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2, Route_2, Unvisited_4),
            Route_4 = lists:append((case Route_3 of nil -> []; _ -> Route_3 end), [0]),
            Ants_route_3 = lists:append((case Ants_route_2 of nil -> []; _ -> Ants_route_2 end), [Route_4]),
            K_2 = (K + 1),
            Fun_16_loop(Alpha_2, Ants_num, Ants_route_3, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K_2, N_2, Pheromone_7, Q_2);
        _ -> {Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2}
    end
end,
{Alpha_2, Ants_num, Ants_route_3, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K_2, N_2, Pheromone_7, Q_2} = Fun_16(Alpha_2, Ants_num, Ants_route_2, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K, N_2, Pheromone_7, Q_2),
            Pheromone_8 = pheromone_update(Pheromone_7, Cities_3, Evaporation_2, Ants_route_3, Q_2),
            A_3 = 0,
            Fun_18 = fun Fun_18_loop(A_3, Alpha_2, Ants_num, Ants_route_3, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K_2, N_2, Pheromone_8, Q_2) ->
    case (A_3 < erlang:length(Ants_route_3)) of
        true ->
            Route_5 = (case erlang:is_map(Ants_route_3) of true -> maps:get(A_3, Ants_route_3, nil); _ -> case A_3 < 0 of true -> mochi_nth(erlang:length(Ants_route_3) + A_3 + 1, Ants_route_3); _ -> mochi_nth(A_3 + 1, Ants_route_3) end end),
            Dist_2 = 0.0,
            R_6 = 0,
            Fun_17 = fun Fun_17_loop(A_3, Alpha_2, Ants_num, Ants_route_3, Best_distance, Best_path, Beta_2, Cities_3, Dist_2, Evaporation_2, I_16, Iter, Iterations, K_2, N_2, Pheromone_8, Q_2, R_6, Route_5) ->
    case (R_6 < (erlang:length(Route_5) - 1)) of
        true ->
            Dist_3 = (Dist_2 + distance(maps:get((case erlang:is_map(Route_5) of true -> maps:get(R_6, Route_5, nil); _ -> case R_6 < 0 of true -> mochi_nth(erlang:length(Route_5) + R_6 + 1, Route_5); _ -> mochi_nth(R_6 + 1, Route_5) end end), Cities_3, nil), maps:get((case erlang:is_map(Route_5) of true -> maps:get((R_6 + 1), Route_5, nil); _ -> case (R_6 + 1) < 0 of true -> mochi_nth(erlang:length(Route_5) + (R_6 + 1) + 1, Route_5); _ -> mochi_nth((R_6 + 1) + 1, Route_5) end end), Cities_3, nil))),
            R_7 = (R_6 + 1),
            Fun_17_loop(A_3, Alpha_2, Ants_num, Ants_route_3, Best_distance, Best_path, Beta_2, Cities_3, Dist_3, Evaporation_2, I_16, Iter, Iterations, K_2, N_2, Pheromone_8, Q_2, R_7, Route_5);
        _ -> {A_3, Alpha_2, Ants_num, Ants_route_3, Best_distance, Best_path, Beta_2, Cities_3, Dist_2, Evaporation_2, I_16, Iter, Iterations, K_2, N_2, Pheromone_8, Q_2, R_6, Route_5}
    end
end,
{A_3, Alpha_2, Ants_num, Ants_route_3, Best_distance, Best_path, Beta_2, Cities_3, Dist_3, Evaporation_2, I_16, Iter, Iterations, K_2, N_2, Pheromone_8, Q_2, R_7, Route_5} = Fun_17(A_3, Alpha_2, Ants_num, Ants_route_3, Best_distance, Best_path, Beta_2, Cities_3, Dist_2, Evaporation_2, I_16, Iter, Iterations, K_2, N_2, Pheromone_8, Q_2, R_6, Route_5),
            case (Dist_3 < Best_distance) of
        true -> Best_distance_2 = Dist_3,
            Best_path_2 = Route_5,
            Best_distance_3 = Best_distance_2,
            Best_path_3 = Best_path_2;
        _ -> Best_distance_3 = Best_distance,
            Best_path_3 = Best_path
    end,
            A_4 = (A_3 + 1),
            Fun_18_loop(A_4, Alpha_2, Ants_num, Ants_route_3, Best_distance_3, Best_path_3, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K_2, N_2, Pheromone_8, Q_2);
        _ -> {A_3, Alpha_2, Ants_num, Ants_route_3, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K_2, N_2, Pheromone_8, Q_2}
    end
end,
{A_4, Alpha_2, Ants_num, Ants_route_3, Best_distance_3, Best_path_3, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K_2, N_2, Pheromone_8, Q_2} = Fun_18(A_3, Alpha_2, Ants_num, Ants_route_3, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, K_2, N_2, Pheromone_8, Q_2),
            Iter_2 = (Iter + 1),
            Fun_19_loop(Alpha_2, Ants_num, Best_distance_3, Best_path_3, Beta_2, Cities_3, Evaporation_2, I_16, Iter_2, Iterations, N_2, Pheromone_8, Q_2);
        _ -> {Alpha_2, Ants_num, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, N_2, Pheromone_7, Q_2}
    end
end,
{Alpha_2, Ants_num, Best_distance_3, Best_path_3, Beta_2, Cities_3, Evaporation_2, I_16, Iter_2, Iterations, N_2, Pheromone_8, Q_2} = Fun_19(Alpha_2, Ants_num, Best_distance, Best_path, Beta_2, Cities_3, Evaporation_2, I_16, Iter, Iterations, N_2, Pheromone_7, Q_2),
        io:format("~ts~n", [mochi_repr(("best_path = " ++ mochi_str(Best_path_3)))]),
        io:format("~ts~n", [mochi_repr(("best_distance = " ++ mochi_str(Best_distance_3)))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('cities', #{0 => [0, 0], 1 => [0, 5], 2 => [3, 8], 3 => [8, 10], 4 => [12, 8], 5 => [12, 4], 6 => [8, 0], 7 => [6, 2]}),
    ant_colony(erlang:get('cities'), 10, 20, 0.7, 1.0, 5.0, 10.0),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
