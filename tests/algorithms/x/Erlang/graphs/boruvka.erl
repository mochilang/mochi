#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, new_graph/1, add_edge/4, find_component/2, set_component/2, union/4, create_empty_edges/1, boruvka/1, main/0]).

% Generated by Mochi transpiler v0.10.65 (428ea06e9a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

new_graph(Num_nodes) ->
    try
        #{"num_nodes" => Num_nodes, "edges" => [], "component" => #{}}
    catch {return, RetCatch} -> RetCatch end.

add_edge(G, U, V, W) ->
    try
        Es = maps:get("edges", G, nil),
        Es_2 = lists:append((case Es of nil -> []; _ -> Es end), [#{"u" => U, "v" => V, "w" => W}]),
        #{"num_nodes" => maps:get("num_nodes", G, nil), "edges" => Es_2, "component" => maps:get("component", G, nil)}
    catch {return, RetCatch} -> RetCatch end.

find_component(G_2, Node) ->
    try
        (case (maps:get(Node, maps:get("component", G_2, nil), nil) == Node) of
    true -> Node;
    _ -> find_component(G_2, maps:get(Node, maps:get("component", G_2, nil), nil))
end)
    catch {return, RetCatch} -> RetCatch end.

set_component(G_3, Node_2) ->
    try
        case (maps:get(Node_2, maps:get("component", G_3, nil), nil) /= Node_2) of
        true -> Comp = maps:get("component", G_3, nil),
            K = 0,
            Fun = fun Fun_loop(Comp, G_3, K, Node_2) ->
    case (K < maps:get("num_nodes", G_3, nil)) of
        true ->
            Comp_2 = maps:put(K, find_component(G_3, K), Comp),
            K_2 = (K + 1),
            Fun_loop(Comp_2, G_3, K_2, Node_2);
        _ -> {Comp, G_3, K, Node_2}
    end
end,
{Comp_2, G_3, K_2, Node_2} = Fun(Comp, G_3, K, Node_2),
            G_4 = #{"num_nodes" => maps:get("num_nodes", G_3, nil), "edges" => maps:get("edges", G_3, nil), "component" => Comp_2},
            Comp_3 = Comp_2,
            Fun_2 = Fun,
            G_5 = G_4,
            K_3 = K_2;
        _ -> Comp_3 = nil,
            Fun_2 = nil,
            G_5 = G_3,
            K_3 = nil
    end,
        G_5
    catch {return, RetCatch} -> RetCatch end.

union(G_6, Component_size, U_2, V_2) ->
    try
        Comp_size = Component_size,
        Comp_4 = maps:get("component", G_6, nil),
        case ((case erlang:is_map(Comp_size) of true -> maps:get(U_2, Comp_size, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(Comp_size) + U_2 + 1, Comp_size); _ -> mochi_nth(U_2 + 1, Comp_size) end end) =< (case erlang:is_map(Comp_size) of true -> maps:get(V_2, Comp_size, nil); _ -> case V_2 < 0 of true -> mochi_nth(erlang:length(Comp_size) + V_2 + 1, Comp_size); _ -> mochi_nth(V_2 + 1, Comp_size) end end)) of
        true -> Comp_5 = maps:put(U_2, V_2, Comp_4),
            Comp_size_2 = lists:sublist(Comp_size, V_2) ++ [((case erlang:is_map(Comp_size) of true -> maps:get(V_2, Comp_size, nil); _ -> case V_2 < 0 of true -> mochi_nth(erlang:length(Comp_size) + V_2 + 1, Comp_size); _ -> mochi_nth(V_2 + 1, Comp_size) end end) + (case erlang:is_map(Comp_size) of true -> maps:get(U_2, Comp_size, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(Comp_size) + U_2 + 1, Comp_size); _ -> mochi_nth(U_2 + 1, Comp_size) end end))] ++ lists:nthtail(V_2 + 1, Comp_size),
            G_7 = #{"num_nodes" => maps:get("num_nodes", G_6, nil), "edges" => maps:get("edges", G_6, nil), "component" => Comp_5},
            G_8 = set_component(G_7, U_2),
            Comp_7 = Comp_5,
            Comp_size_4 = Comp_size_2,
            G_11 = G_8;
        _ -> Comp_6 = maps:put(V_2, U_2, Comp_4),
            Comp_size_3 = lists:sublist(Comp_size, U_2) ++ [((case erlang:is_map(Comp_size) of true -> maps:get(U_2, Comp_size, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(Comp_size) + U_2 + 1, Comp_size); _ -> mochi_nth(U_2 + 1, Comp_size) end end) + (case erlang:is_map(Comp_size) of true -> maps:get(V_2, Comp_size, nil); _ -> case V_2 < 0 of true -> mochi_nth(erlang:length(Comp_size) + V_2 + 1, Comp_size); _ -> mochi_nth(V_2 + 1, Comp_size) end end))] ++ lists:nthtail(U_2 + 1, Comp_size),
            G_9 = #{"num_nodes" => maps:get("num_nodes", G_6, nil), "edges" => maps:get("edges", G_6, nil), "component" => Comp_6},
            G_10 = set_component(G_9, V_2),
            Comp_7 = Comp_6,
            Comp_size_4 = Comp_size_3,
            G_11 = G_10
    end,
        #{"graph" => G_11, "component_size" => Comp_size_4}
    catch {return, RetCatch} -> RetCatch end.

create_empty_edges(N) ->
    try
        Res = [],
        I = 0,
        Fun_3 = fun Fun_3_loop(I, N, Res) ->
    case (I < N) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [#{"u" => (0 - 1), "v" => (0 - 1), "w" => (0 - 1)}]),
            I_2 = (I + 1),
            Fun_3_loop(I_2, N, Res_2);
        _ -> {I, N, Res}
    end
end,
{I_2, N, Res_2} = Fun_3(I, N, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

boruvka(G_12) ->
    try
        Component_size_2 = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Component_size_2, G_12, I_3) ->
    case (I_3 < maps:get("num_nodes", G_12, nil)) of
        true ->
            Component_size_3 = lists:append((case Component_size_2 of nil -> []; _ -> Component_size_2 end), [1]),
            Comp_8 = maps:get("component", G_12, nil),
            Comp_9 = maps:put(I_3, I_3, Comp_8),
            G_13 = #{"num_nodes" => maps:get("num_nodes", G_12, nil), "edges" => maps:get("edges", G_12, nil), "component" => Comp_9},
            I_4 = (I_3 + 1),
            Fun_4_loop(Component_size_3, G_13, I_4);
        _ -> {Component_size_2, G_12, I_3}
    end
end,
{Component_size_3, G_13, I_4} = Fun_4(Component_size_2, G_12, I_3),
        Mst_weight = 0,
        Num_components = maps:get("num_nodes", G_13, nil),
        Minimum_weight_edge = create_empty_edges(maps:get("num_nodes", G_13, nil)),
        Fun_7 = fun Fun_7_loop(Component_size_3, G_13, I_4, Minimum_weight_edge, Mst_weight, Num_components) ->
    case (Num_components > 1) of
        true ->
            Fun_5 = fun Fun_5_loop(List, Component_size_3, G_13, I_4, Minimum_weight_edge, Mst_weight, Num_components) ->
    case List of
        [] -> {Component_size_3, G_13, I_4, Minimum_weight_edge, Mst_weight, Num_components};
        [E|E_rest] ->
            U_3 = maps:get("u", E, nil),
            V_3 = maps:get("v", E, nil),
            W_2 = maps:get("w", E, nil),
            U_comp = (case erlang:is_map(maps:get("component", G_13, nil)) of true -> maps:get(U_3, maps:get("component", G_13, nil), nil); _ -> case U_3 < 0 of true -> mochi_nth(erlang:length(maps:get("component", G_13, nil)) + U_3 + 1, maps:get("component", G_13, nil)); _ -> mochi_nth(U_3 + 1, maps:get("component", G_13, nil)) end end),
            V_comp = (case erlang:is_map(maps:get("component", G_13, nil)) of true -> maps:get(V_3, maps:get("component", G_13, nil), nil); _ -> case V_3 < 0 of true -> mochi_nth(erlang:length(maps:get("component", G_13, nil)) + V_3 + 1, maps:get("component", G_13, nil)); _ -> mochi_nth(V_3 + 1, maps:get("component", G_13, nil)) end end),
            case (U_comp /= V_comp) of
        true -> Current_u = (case erlang:is_map(Minimum_weight_edge) of true -> maps:get(U_comp, Minimum_weight_edge, nil); _ -> case U_comp < 0 of true -> mochi_nth(erlang:length(Minimum_weight_edge) + U_comp + 1, Minimum_weight_edge); _ -> mochi_nth(U_comp + 1, Minimum_weight_edge) end end),
            case ((maps:get("u", Current_u, nil) == (0 - 1)) orelse (maps:get("w", Current_u, nil) > W_2)) of
        true -> Minimum_weight_edge_2 = lists:sublist(Minimum_weight_edge, U_comp) ++ [#{"u" => U_3, "v" => V_3, "w" => W_2}] ++ lists:nthtail(U_comp + 1, Minimum_weight_edge),
            Minimum_weight_edge_3 = Minimum_weight_edge_2;
        _ -> Minimum_weight_edge_3 = Minimum_weight_edge
    end,
            Current_v = (case erlang:is_map(Minimum_weight_edge_3) of true -> maps:get(V_comp, Minimum_weight_edge_3, nil); _ -> case V_comp < 0 of true -> mochi_nth(erlang:length(Minimum_weight_edge_3) + V_comp + 1, Minimum_weight_edge_3); _ -> mochi_nth(V_comp + 1, Minimum_weight_edge_3) end end),
            case ((maps:get("u", Current_v, nil) == (0 - 1)) orelse (maps:get("w", Current_v, nil) > W_2)) of
        true -> Minimum_weight_edge_4 = lists:sublist(Minimum_weight_edge_3, V_comp) ++ [#{"u" => U_3, "v" => V_3, "w" => W_2}] ++ lists:nthtail(V_comp + 1, Minimum_weight_edge_3),
            Minimum_weight_edge_5 = Minimum_weight_edge_4;
        _ -> Minimum_weight_edge_5 = Minimum_weight_edge_3
    end,
            Current_u_2 = Current_u,
            Current_v_2 = Current_v,
            Minimum_weight_edge_6 = Minimum_weight_edge_5;
        _ -> Current_u_2 = nil,
            Current_v_2 = nil,
            Minimum_weight_edge_6 = Minimum_weight_edge
    end,
            Fun_5_loop(E_rest, Component_size_3, G_13, I_4, Minimum_weight_edge_6, Mst_weight, Num_components);
        _ -> {Component_size_3, G_13, I_4, Minimum_weight_edge, Mst_weight, Num_components}
    end
end,
{Component_size_3, G_13, I_4, Minimum_weight_edge_6, Mst_weight, Num_components} = Fun_5(maps:get("edges", G_13, nil), Component_size_3, G_13, I_4, Minimum_weight_edge, Mst_weight, Num_components),
            Fun_6 = fun Fun_6_loop(List, Component_size_3, G_13, I_4, Minimum_weight_edge_6, Mst_weight, Num_components) ->
    case List of
        [] -> {Component_size_3, G_13, I_4, Minimum_weight_edge_6, Mst_weight, Num_components};
        [E_2|E_2_rest] ->
            case (maps:get("u", E_2, nil) /= (0 - 1)) of
        true -> U_4 = maps:get("u", E_2, nil),
            V_4 = maps:get("v", E_2, nil),
            W_3 = maps:get("w", E_2, nil),
            U_comp_2 = maps:get(U_4, maps:get("component", G_13, nil), nil),
            V_comp_2 = maps:get(V_4, maps:get("component", G_13, nil), nil),
            case (U_comp_2 /= V_comp_2) of
        true -> Mst_weight_2 = (Mst_weight + W_3),
            Res_3 = union(G_13, Component_size_3, U_comp_2, V_comp_2),
            G_14 = maps:get("graph", Res_3, nil),
            Component_size_4 = maps:get("component_size", Res_3, nil),
            io:format("~ts~n", [mochi_repr((((("Added edge [" ++ mochi_str(U_4)) ++ " - ") ++ mochi_str(V_4)) ++ "]"))]),
            io:format("~ts~n", [mochi_repr(("Added weight: " ++ mochi_str(W_3)))]),
            io:format("~ts~n", [mochi_repr("")]),
            Num_components_2 = (Num_components - 1),
            Component_size_5 = Component_size_4,
            G_15 = G_14,
            Mst_weight_3 = Mst_weight_2,
            Num_components_3 = Num_components_2,
            Res_4 = Res_3;
        _ -> Component_size_5 = Component_size_3,
            G_15 = G_13,
            Mst_weight_3 = Mst_weight,
            Num_components_3 = Num_components,
            Res_4 = nil
    end,
            Component_size_6 = Component_size_5,
            G_16 = G_15,
            Mst_weight_4 = Mst_weight_3,
            Num_components_4 = Num_components_3,
            Res_5 = Res_4,
            U_5 = U_4,
            U_comp_3 = U_comp_2,
            V_5 = V_4,
            V_comp_3 = V_comp_2,
            W_4 = W_3;
        _ -> Component_size_6 = Component_size_3,
            G_16 = G_13,
            Mst_weight_4 = Mst_weight,
            Num_components_4 = Num_components,
            Res_5 = nil,
            U_5 = nil,
            U_comp_3 = nil,
            V_5 = nil,
            V_comp_3 = nil,
            W_4 = nil
    end,
            Fun_6_loop(E_2_rest, Component_size_6, G_16, I_4, Minimum_weight_edge_6, Mst_weight_4, Num_components_4);
        _ -> {Component_size_3, G_13, I_4, Minimum_weight_edge_6, Mst_weight, Num_components}
    end
end,
{Component_size_6, G_16, I_4, Minimum_weight_edge_6, Mst_weight_4, Num_components_4} = Fun_6(Minimum_weight_edge_6, Component_size_3, G_13, I_4, Minimum_weight_edge_6, Mst_weight, Num_components),
            Minimum_weight_edge_7 = create_empty_edges(maps:get("num_nodes", G_16, nil)),
            Fun_7_loop(Component_size_6, G_16, I_4, Minimum_weight_edge_7, Mst_weight_4, Num_components_4);
        _ -> {Component_size_3, G_13, I_4, Minimum_weight_edge, Mst_weight, Num_components}
    end
end,
{Component_size_6, G_16, I_4, Minimum_weight_edge_7, Mst_weight_4, Num_components_4} = Fun_7(Component_size_3, G_13, I_4, Minimum_weight_edge, Mst_weight, Num_components),
        io:format("~ts~n", [mochi_repr(("The total weight of the minimal spanning tree is: " ++ mochi_str(Mst_weight_4)))]),
        Mst_weight_4
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        G_17 = new_graph(8),
        Edges = [[0, 1, 10], [0, 2, 6], [0, 3, 5], [1, 3, 15], [2, 3, 4], [3, 4, 8], [4, 5, 10], [4, 6, 6], [4, 7, 5], [5, 7, 15], [6, 7, 4]],
        Fun_8 = fun Fun_8_loop(List, Edges, G_17) ->
    case List of
        [] -> {Edges, G_17};
        [E_3|E_3_rest] ->
            G_18 = add_edge(G_17, (case erlang:is_map(E_3) of true -> maps:get(0, E_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(E_3) + 0 + 1, E_3); _ -> mochi_nth(0 + 1, E_3) end end), (case erlang:is_map(E_3) of true -> maps:get(1, E_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(E_3) + 1 + 1, E_3); _ -> mochi_nth(1 + 1, E_3) end end), (case erlang:is_map(E_3) of true -> maps:get(2, E_3, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(E_3) + 2 + 1, E_3); _ -> mochi_nth(2 + 1, E_3) end end)),
            Fun_8_loop(E_3_rest, Edges, G_18);
        _ -> {Edges, G_17}
    end
end,
{Edges, G_18} = Fun_8(Edges, Edges, G_17),
        boruvka(G_18),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
