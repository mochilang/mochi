#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, depth_first_search/4, topological_sort/1, print_stack/2, format_list/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

depth_first_search(U, Visited, Graph, Stack) ->
    try
        Visited_2 = lists:sublist(Visited, U) ++ [true] ++ lists:nthtail(U + 1, Visited),
        I = 0,
        Fun = fun Fun_loop(Graph, I, Stack, U, Visited_2) ->
    case (I < erlang:length((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> lists:nth(erlang:length(Graph) + U + 1, Graph); _ -> lists:nth(U + 1, Graph) end end))) of
        true ->
            V = (case erlang:is_map((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> lists:nth(erlang:length(Graph) + U + 1, Graph); _ -> lists:nth(U + 1, Graph) end end)) of true -> maps:get(I, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> lists:nth(erlang:length(Graph) + U + 1, Graph); _ -> lists:nth(U + 1, Graph) end end), nil); _ -> case I < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> lists:nth(erlang:length(Graph) + U + 1, Graph); _ -> lists:nth(U + 1, Graph) end end)) + I + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> lists:nth(erlang:length(Graph) + U + 1, Graph); _ -> lists:nth(U + 1, Graph) end end)); _ -> lists:nth(I + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> lists:nth(erlang:length(Graph) + U + 1, Graph); _ -> lists:nth(U + 1, Graph) end end)) end end),
            case mochi_not((case erlang:is_map(Visited_2) of true -> maps:get(V, Visited_2, nil); _ -> case V < 0 of true -> lists:nth(erlang:length(Visited_2) + V + 1, Visited_2); _ -> lists:nth(V + 1, Visited_2) end end)) of
        true -> Stack_2 = depth_first_search(V, Visited_2, Graph, Stack),
            Stack_3 = Stack_2;
        _ -> Stack_3 = Stack
    end,
            I_2 = (I + 1),
            Fun_loop(Graph, I_2, Stack_3, U, Visited_2);
        _ -> {Graph, I, Stack, U, Visited_2}
    end
end,
{Graph, I_2, Stack_3, U, Visited_2} = Fun(Graph, I, Stack, U, Visited_2),
        Stack_4 = lists:append((case Stack_3 of nil -> []; _ -> Stack_3 end), [U]),
        Stack_4
    catch {return, Ret} -> Ret end.

topological_sort(Graph_2) ->
    try
        Visited_3 = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Graph_2, I_3, Visited_3) ->
    case (I_3 < erlang:length(Graph_2)) of
        true ->
            Visited_4 = lists:append((case Visited_3 of nil -> []; _ -> Visited_3 end), [false]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Graph_2, I_4, Visited_4);
        _ -> {Graph_2, I_3, Visited_3}
    end
end,
{Graph_2, I_4, Visited_4} = Fun_2(Graph_2, I_3, Visited_3),
        Stack_5 = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Graph_2, I_5, Stack_5, Visited_4) ->
    case (I_5 < erlang:length(Graph_2)) of
        true ->
            case mochi_not((case erlang:is_map(Visited_4) of true -> maps:get(I_5, Visited_4, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Visited_4) + I_5 + 1, Visited_4); _ -> lists:nth(I_5 + 1, Visited_4) end end)) of
        true -> Stack_6 = depth_first_search(I_5, Visited_4, Graph_2, Stack_5),
            Stack_7 = Stack_6;
        _ -> Stack_7 = Stack_5
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Graph_2, I_6, Stack_7, Visited_4);
        _ -> {Graph_2, I_5, Stack_5, Visited_4}
    end
end,
{Graph_2, I_6, Stack_7, Visited_4} = Fun_3(Graph_2, I_5, Stack_5, Visited_4),
        Stack_7
    catch {return, Ret} -> Ret end.

print_stack(Stack_8, Clothes) ->
    try
        Order = 1,
        S = Stack_8,
        Fun_4 = fun Fun_4_loop(Clothes, Order, S, Stack_8) ->
    case (erlang:length(S) > 0) of
        true ->
            Idx = (case erlang:is_map(S) of true -> maps:get((erlang:length(S) - 1), S, nil); _ -> case (erlang:length(S) - 1) < 0 of true -> lists:nth(erlang:length(S) + (erlang:length(S) - 1) + 1, S); _ -> lists:nth((erlang:length(S) - 1) + 1, S) end end),
            S_2 = lists:sublist(S, 0 + 1, ((erlang:length(S) - 1) - 0)),
            io:format("~ts~n", [mochi_repr(((mochi_str(Order) ++ " ") ++ maps:get(Idx, Clothes, nil)))]),
            Order_2 = (Order + 1),
            Fun_4_loop(Clothes, Order_2, S_2, Stack_8);
        _ -> {Clothes, Order, S, Stack_8}
    end
end,
{Clothes, Order_2, S_2, Stack_8} = Fun_4(Clothes, Order, S, Stack_8),
        nil
    catch {return, Ret} -> Ret end.

format_list(Xs) ->
    try
        Res = "[",
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(I_7, Res, Xs) ->
    case (I_7 < erlang:length(Xs)) of
        true ->
            Res_2 = (Res ++ mochi_str((case erlang:is_map(Xs) of true -> maps:get(I_7, Xs, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(Xs) + I_7 + 1, Xs); _ -> lists:nth(I_7 + 1, Xs) end end))),
            case (I_7 < (erlang:length(Xs) - 1)) of
        true -> Res_3 = (Res_2 ++ ", "),
            Res_4 = Res_3;
        _ -> Res_4 = Res_2
    end,
            I_8 = (I_7 + 1),
            Fun_5_loop(I_8, Res_4, Xs);
        _ -> {I_7, Res, Xs}
    end
end,
{I_8, Res_4, Xs} = Fun_5(I_7, Res, Xs),
        Res_5 = (Res_4 ++ "]"),
        Res_5
    catch {return, Ret} -> Ret end.

main() ->
    try
        Clothes_2 = #{0 => "underwear", 1 => "pants", 2 => "belt", 3 => "suit", 4 => "shoe", 5 => "socks", 6 => "shirt", 7 => "tie", 8 => "watch"},
        Graph_3 = [[1, 4], [2, 4], [3], [], [], [4], [2, 7], [3], []],
        Stack_9 = topological_sort(Graph_3),
        io:format("~ts~n", [mochi_repr(format_list(Stack_9))]),
        print_stack(Stack_9, Clothes_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
