#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rand/0, random/0, complete_graph/1, random_graph/3, main/0]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

rand() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        erlang:get('seed')
    catch {return, Ret} -> Ret end.

random() ->
    try
        mochi_safe_div(mochi_safe_mul(1, rand()), 2.147483648e+09)
    catch {return, Ret} -> Ret end.

complete_graph(Vertices_number) ->
    try
        Graph = #{},
        I = 0,
        Fun_2 = fun Fun_2_loop(Graph, I, Vertices_number) ->
    case (I < Vertices_number) of
        true ->
            Neighbors = [],
            J = 0,
            Fun = fun Fun_loop(Graph, I, J, Neighbors, Vertices_number) ->
    case (J < Vertices_number) of
        true ->
            case (J /= I) of
        true -> Neighbors_2 = lists:append((case Neighbors of nil -> []; _ -> Neighbors end), [J]),
            Neighbors_3 = Neighbors_2;
        _ -> Neighbors_3 = Neighbors
    end,
            J_2 = (J + 1),
            Fun_loop(Graph, I, J_2, Neighbors_3, Vertices_number);
        _ -> {Graph, I, J, Neighbors, Vertices_number}
    end
end,
{Graph, I, J_2, Neighbors_3, Vertices_number} = Fun(Graph, I, J, Neighbors, Vertices_number),
            Graph_2 = maps:put(I, Neighbors_3, Graph),
            I_2 = (I + 1),
            Fun_2_loop(Graph_2, I_2, Vertices_number);
        _ -> {Graph, I, Vertices_number}
    end
end,
{Graph_2, I_2, Vertices_number} = Fun_2(Graph, I, Vertices_number),
        Graph_2
    catch {return, Ret} -> Ret end.

random_graph(Vertices_number_2, Probability, Directed) ->
    try
        Graph_3 = #{},
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Directed, Graph_3, I_3, Probability, Vertices_number_2) ->
    case (I_3 < Vertices_number_2) of
        true ->
            Graph_4 = maps:put(I_3, [], Graph_3),
            I_4 = (I_3 + 1),
            Fun_3_loop(Directed, Graph_4, I_4, Probability, Vertices_number_2);
        _ -> {Directed, Graph_3, I_3, Probability, Vertices_number_2}
    end
end,
{Directed, Graph_4, I_4, Probability, Vertices_number_2} = Fun_3(Directed, Graph_3, I_3, Probability, Vertices_number_2),
        case (Probability >= 1) of
        true -> throw({return, complete_graph(Vertices_number_2)});
        _ -> ok
    end,
        case (Probability =< 0) of
        true -> throw({return, Graph_4});
        _ -> ok
    end,
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Directed, Graph_4, I_5, Probability, Vertices_number_2) ->
    case (I_5 < Vertices_number_2) of
        true ->
            J_3 = (I_5 + 1),
            Fun_4 = fun Fun_4_loop(Directed, Graph_4, I_5, J_3, Probability, Vertices_number_2) ->
    case (J_3 < Vertices_number_2) of
        true ->
            case (random() < Probability) of
        true -> Graph_5 = maps:put(I_5, lists:append((case (case erlang:is_map(Graph_4) of true -> maps:get(I_5, Graph_4, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Graph_4) + I_5 + 1, Graph_4); _ -> lists:nth(I_5 + 1, Graph_4) end end) of nil -> []; _ -> (case erlang:is_map(Graph_4) of true -> maps:get(I_5, Graph_4, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Graph_4) + I_5 + 1, Graph_4); _ -> lists:nth(I_5 + 1, Graph_4) end end) end), [J_3]), Graph_4),
            case mochi_not(Directed) of
        true -> Graph_6 = maps:put(J_3, lists:append((case maps:get(J_3, Graph_5, nil) of nil -> []; _ -> maps:get(J_3, Graph_5, nil) end), [I_5]), Graph_5),
            Graph_7 = Graph_6;
        _ -> Graph_7 = Graph_5
    end,
            Graph_8 = Graph_7;
        _ -> Graph_8 = Graph_4
    end,
            J_4 = (J_3 + 1),
            Fun_4_loop(Directed, Graph_8, I_5, J_4, Probability, Vertices_number_2);
        _ -> {Directed, Graph_4, I_5, J_3, Probability, Vertices_number_2}
    end
end,
{Directed, Graph_8, I_5, J_4, Probability, Vertices_number_2} = Fun_4(Directed, Graph_4, I_5, J_3, Probability, Vertices_number_2),
            I_6 = (I_5 + 1),
            Fun_5_loop(Directed, Graph_8, I_6, Probability, Vertices_number_2);
        _ -> {Directed, Graph_4, I_5, Probability, Vertices_number_2}
    end
end,
{Directed, Graph_8, I_6, Probability, Vertices_number_2} = Fun_5(Directed, Graph_4, I_5, Probability, Vertices_number_2),
        Graph_8
    catch {return, Ret} -> Ret end.

main() ->
    try
        erlang:put('seed', 1),
        G1 = random_graph(4, 0.5, false),
        io:format("~ts~n", [mochi_repr(G1)]),
        erlang:put('seed', 1),
        G2 = random_graph(4, 0.5, true),
        io:format("~ts~n", [mochi_repr(G2)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
