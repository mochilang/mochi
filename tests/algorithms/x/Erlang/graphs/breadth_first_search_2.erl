#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, join/1, breadth_first_search/2, breadth_first_search_with_deque/2]).

% Generated by Mochi transpiler v0.10.65 (f942880281) on 2025-08-13 16:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

join(Xs) ->
    try
        S = "",
        I = 0,
        Fun = fun Fun_loop(I, S, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            S_2 = (S ++ (case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)),
            I_2 = (I + 1),
            Fun_loop(I_2, S_2, Xs);
        _ -> {I, S, Xs}
    end
end,
{I_2, S_2, Xs} = Fun(I, S, Xs),
        S_2
    catch {return, RetCatch} -> RetCatch end.

breadth_first_search(Graph, Start) ->
    try
        Explored = #{},
        Explored_2 = maps:put(Start, true, Explored),
        Result = [Start],
        Queue = [Start],
        Fun_3 = fun Fun_3_loop(Explored_2, Graph, Queue, Result, Start) ->
    case (erlang:length(Queue) > 0) of
        true ->
            V = (case erlang:is_map(Queue) of true -> maps:get(0, Queue, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Queue) + 0 + 1, Queue); _ -> mochi_nth(0 + 1, Queue) end end),
            Queue_2 = lists:sublist(Queue, 1 + 1, (erlang:length(Queue) - 1)),
            Children = maps:get(V, Graph, nil),
            I_3 = 0,
            Fun_2 = fun Fun_2_loop(Children, Explored_2, Graph, I_3, Queue_2, Result, Start, V) ->
    case (I_3 < erlang:length(Children)) of
        true ->
            W = (case erlang:is_map(Children) of true -> maps:get(I_3, Children, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Children) + I_3 + 1, Children); _ -> mochi_nth(I_3 + 1, Children) end end),
            case mochi_not(maps:is_key(W, Explored_2)) of
        true -> Explored_3 = maps:put(W, true, Explored_2),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [W]),
            Queue_3 = lists:append((case Queue_2 of nil -> []; _ -> Queue_2 end), [W]),
            Explored_4 = Explored_3,
            Queue_4 = Queue_3,
            Result_3 = Result_2;
        _ -> Explored_4 = Explored_2,
            Queue_4 = Queue_2,
            Result_3 = Result
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Children, Explored_4, Graph, I_4, Queue_4, Result_3, Start, V);
        _ -> {Children, Explored_2, Graph, I_3, Queue_2, Result, Start, V}
    end
end,
{Children, Explored_4, Graph, I_4, Queue_4, Result_3, Start, V} = Fun_2(Children, Explored_2, Graph, I_3, Queue_2, Result, Start, V),
            Fun_3_loop(Explored_4, Graph, Queue_4, Result_3, Start);
        _ -> {Explored_2, Graph, Queue, Result, Start}
    end
end,
{Explored_4, Graph, Queue_4, Result_3, Start} = Fun_3(Explored_2, Graph, Queue, Result, Start),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

breadth_first_search_with_deque(Graph_2, Start_2) ->
    try
        Visited = #{},
        Visited_2 = maps:put(Start_2, true, Visited),
        Result_4 = [Start_2],
        Queue_5 = [Start_2],
        Head = 0,
        Fun_5 = fun Fun_5_loop(Graph_2, Head, Queue_5, Result_4, Start_2, Visited_2) ->
    case (Head < erlang:length(Queue_5)) of
        true ->
            V_2 = (case erlang:is_map(Queue_5) of true -> maps:get(Head, Queue_5, nil); _ -> case Head < 0 of true -> mochi_nth(erlang:length(Queue_5) + Head + 1, Queue_5); _ -> mochi_nth(Head + 1, Queue_5) end end),
            Head_2 = (Head + 1),
            Children_2 = maps:get(V_2, Graph_2, nil),
            I_5 = 0,
            Fun_4 = fun Fun_4_loop(Children_2, Graph_2, Head_2, I_5, Queue_5, Result_4, Start_2, V_2, Visited_2) ->
    case (I_5 < erlang:length(Children_2)) of
        true ->
            Child = (case erlang:is_map(Children_2) of true -> maps:get(I_5, Children_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Children_2) + I_5 + 1, Children_2); _ -> mochi_nth(I_5 + 1, Children_2) end end),
            case mochi_not(maps:is_key(Child, Visited_2)) of
        true -> Visited_3 = maps:put(Child, true, Visited_2),
            Result_5 = lists:append((case Result_4 of nil -> []; _ -> Result_4 end), [Child]),
            Queue_6 = lists:append((case Queue_5 of nil -> []; _ -> Queue_5 end), [Child]),
            Queue_7 = Queue_6,
            Result_6 = Result_5,
            Visited_4 = Visited_3;
        _ -> Queue_7 = Queue_5,
            Result_6 = Result_4,
            Visited_4 = Visited_2
    end,
            I_6 = (I_5 + 1),
            Fun_4_loop(Children_2, Graph_2, Head_2, I_6, Queue_7, Result_6, Start_2, V_2, Visited_4);
        _ -> {Children_2, Graph_2, Head_2, I_5, Queue_5, Result_4, Start_2, V_2, Visited_2}
    end
end,
{Children_2, Graph_2, Head_2, I_6, Queue_7, Result_6, Start_2, V_2, Visited_4} = Fun_4(Children_2, Graph_2, Head_2, I_5, Queue_5, Result_4, Start_2, V_2, Visited_2),
            Fun_5_loop(Graph_2, Head_2, Queue_7, Result_6, Start_2, Visited_4);
        _ -> {Graph_2, Head, Queue_5, Result_4, Start_2, Visited_2}
    end
end,
{Graph_2, Head_2, Queue_7, Result_6, Start_2, Visited_4} = Fun_5(Graph_2, Head, Queue_5, Result_4, Start_2, Visited_2),
        Result_6
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('G', #{"A" => ["B", "C"], "B" => ["A", "D", "E"], "C" => ["A", "F"], "D" => ["B"], "E" => ["B", "F"], "F" => ["C", "E"]}),
    io:format("~ts~n", [mochi_repr(join(breadth_first_search(erlang:get('G'), "A")))]),
    io:format("~ts~n", [mochi_repr(join(breadth_first_search_with_deque(erlang:get('G'), "A")))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
