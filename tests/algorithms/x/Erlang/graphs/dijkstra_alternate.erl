#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, minimum_distance/2, dijkstra/2, print_solution/1]).

% Generated by Mochi transpiler v0.10.65 (f942880281) on 2025-08-13 16:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

minimum_distance(Distances, Visited) ->
    try
        Minimum = 10000000,
        Min_index = 0,
        Vertex = 0,
        Fun = fun Fun_loop(Distances, Min_index, Minimum, Vertex, Visited) ->
    case (Vertex < erlang:length(Distances)) of
        true ->
            case (((case erlang:is_map(Distances) of true -> maps:get(Vertex, Distances, nil); _ -> case Vertex < 0 of true -> mochi_nth(erlang:length(Distances) + Vertex + 1, Distances); _ -> mochi_nth(Vertex + 1, Distances) end end) < Minimum) andalso ((case erlang:is_map(Visited) of true -> maps:get(Vertex, Visited, nil); _ -> case Vertex < 0 of true -> mochi_nth(erlang:length(Visited) + Vertex + 1, Visited); _ -> mochi_nth(Vertex + 1, Visited) end end) == false)) of
        true -> Minimum_2 = (case erlang:is_map(Distances) of true -> maps:get(Vertex, Distances, nil); _ -> case Vertex < 0 of true -> mochi_nth(erlang:length(Distances) + Vertex + 1, Distances); _ -> mochi_nth(Vertex + 1, Distances) end end),
            Min_index_2 = Vertex,
            Min_index_3 = Min_index_2,
            Minimum_3 = Minimum_2;
        _ -> Min_index_3 = Min_index,
            Minimum_3 = Minimum
    end,
            Vertex_2 = (Vertex + 1),
            Fun_loop(Distances, Min_index_3, Minimum_3, Vertex_2, Visited);
        _ -> {Distances, Min_index, Minimum, Vertex, Visited}
    end
end,
{Distances, Min_index_3, Minimum_3, Vertex_2, Visited} = Fun(Distances, Min_index, Minimum, Vertex, Visited),
        Min_index_3
    catch {return, RetCatch} -> RetCatch end.

dijkstra(Graph, Source) ->
    try
        Vertices = erlang:length(Graph),
        Distances_2 = nil,
        I = 0,
        Fun_2 = fun Fun_2_loop(Distances_2, Graph, I, Source, Vertices) ->
    case (I < Vertices) of
        true ->
            Distances_3 = lists:append((case Distances_2 of nil -> []; _ -> Distances_2 end), [10000000]),
            I_2 = (I + 1),
            Fun_2_loop(Distances_3, Graph, I_2, Source, Vertices);
        _ -> {Distances_2, Graph, I, Source, Vertices}
    end
end,
{Distances_3, Graph, I_2, Source, Vertices} = Fun_2(Distances_2, Graph, I, Source, Vertices),
        Distances_4 = lists:sublist(Distances_3, Source) ++ [0] ++ lists:nthtail(Source + 1, Distances_3),
        Visited_2 = nil,
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Distances_4, Graph, I_3, Source, Vertices, Visited_2) ->
    case (I_3 < Vertices) of
        true ->
            Visited_3 = lists:append((case Visited_2 of nil -> []; _ -> Visited_2 end), [false]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Distances_4, Graph, I_4, Source, Vertices, Visited_3);
        _ -> {Distances_4, Graph, I_3, Source, Vertices, Visited_2}
    end
end,
{Distances_4, Graph, I_4, Source, Vertices, Visited_3} = Fun_3(Distances_4, Graph, I_3, Source, Vertices, Visited_2),
        Count = 0,
        Fun_5 = fun Fun_5_loop(Count, Distances_4, Graph, I_4, Source, Vertices, Visited_3) ->
    case (Count < Vertices) of
        true ->
            U = minimum_distance(Distances_4, Visited_3),
            Visited_4 = lists:sublist(Visited_3, U) ++ [true] ++ lists:nthtail(U + 1, Visited_3),
            V = 0,
            Fun_4 = fun Fun_4_loop(Count, Distances_4, Graph, I_4, Source, U, V, Vertices, Visited_4) ->
    case (V < Vertices) of
        true ->
            case ((((case erlang:is_map((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) of true -> maps:get(V, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end), nil); _ -> case V < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) + V + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)); _ -> mochi_nth(V + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) end end) > 0) andalso ((case erlang:is_map(Visited_4) of true -> maps:get(V, Visited_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Visited_4) + V + 1, Visited_4); _ -> mochi_nth(V + 1, Visited_4) end end) == false)) andalso ((case erlang:is_map(Distances_4) of true -> maps:get(V, Distances_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Distances_4) + V + 1, Distances_4); _ -> mochi_nth(V + 1, Distances_4) end end) > ((case erlang:is_map(Distances_4) of true -> maps:get(U, Distances_4, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Distances_4) + U + 1, Distances_4); _ -> mochi_nth(U + 1, Distances_4) end end) + (case erlang:is_map((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) of true -> maps:get(V, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end), nil); _ -> case V < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) + V + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)); _ -> mochi_nth(V + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) end end)))) of
        true -> Distances_5 = lists:sublist(Distances_4, V) ++ [((case erlang:is_map(Distances_4) of true -> maps:get(U, Distances_4, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Distances_4) + U + 1, Distances_4); _ -> mochi_nth(U + 1, Distances_4) end end) + (case erlang:is_map((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) of true -> maps:get(V, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end), nil); _ -> case V < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) + V + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)); _ -> mochi_nth(V + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) end end))] ++ lists:nthtail(V + 1, Distances_4),
            Distances_6 = Distances_5;
        _ -> Distances_6 = Distances_4
    end,
            V_2 = (V + 1),
            Fun_4_loop(Count, Distances_6, Graph, I_4, Source, U, V_2, Vertices, Visited_4);
        _ -> {Count, Distances_4, Graph, I_4, Source, U, V, Vertices, Visited_4}
    end
end,
{Count, Distances_6, Graph, I_4, Source, U, V_2, Vertices, Visited_4} = Fun_4(Count, Distances_4, Graph, I_4, Source, U, V, Vertices, Visited_4),
            Count_2 = (Count + 1),
            Fun_5_loop(Count_2, Distances_6, Graph, I_4, Source, Vertices, Visited_4);
        _ -> {Count, Distances_4, Graph, I_4, Source, Vertices, Visited_3}
    end
end,
{Count_2, Distances_6, Graph, I_4, Source, Vertices, Visited_4} = Fun_5(Count, Distances_4, Graph, I_4, Source, Vertices, Visited_3),
        Distances_6
    catch {return, RetCatch} -> RetCatch end.

print_solution(Distances_7) ->
    try
        io:format("~ts~n", [mochi_repr("Vertex \t Distance from Source")]),
        V_3 = 0,
        Fun_6 = fun Fun_6_loop(Distances_7, V_3) ->
    case (V_3 < erlang:length(Distances_7)) of
        true ->
            io:format("~ts~n", [mochi_repr(((mochi_str(V_3) ++ "\t\t") ++ mochi_str((case erlang:is_map(Distances_7) of true -> maps:get(V_3, Distances_7, nil); _ -> case V_3 < 0 of true -> mochi_nth(erlang:length(Distances_7) + V_3 + 1, Distances_7); _ -> mochi_nth(V_3 + 1, Distances_7) end end))))]),
            V_4 = (V_3 + 1),
            Fun_6_loop(Distances_7, V_4);
        _ -> {Distances_7, V_3}
    end
end,
{Distances_7, V_4} = Fun_6(Distances_7, V_3),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('graph', [[0, 4, 0, 0, 0, 0, 0, 8, 0], [4, 0, 8, 0, 0, 0, 0, 11, 0], [0, 8, 0, 7, 0, 4, 0, 0, 2], [0, 0, 7, 0, 9, 14, 0, 0, 0], [0, 0, 0, 9, 0, 10, 0, 0, 0], [0, 0, 4, 14, 10, 0, 2, 0, 0], [0, 0, 0, 0, 0, 2, 0, 1, 6], [8, 11, 0, 0, 0, 0, 1, 0, 7], [0, 0, 2, 0, 0, 0, 6, 7, 0]]),
    erlang:put('distances', dijkstra(erlang:get('graph'), 0)),
    print_solution(erlang:get('distances')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
