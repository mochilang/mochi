#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, push_relabel_max_flow/3]).

% Generated by Mochi transpiler v0.10.65 (f942880281) on 2025-08-13 16:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

push_relabel_max_flow(Graph, Sources, Sinks) ->
    try
        case ((erlang:length(Sources) == 0) orelse (erlang:length(Sinks) == 0)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        G = Graph,
        Source_index = (case erlang:is_map(Sources) of true -> maps:get(0, Sources, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Sources) + 0 + 1, Sources); _ -> mochi_nth(0 + 1, Sources) end end),
        Sink_index = (case erlang:is_map(Sinks) of true -> maps:get(0, Sinks, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Sinks) + 0 + 1, Sinks); _ -> mochi_nth(0 + 1, Sinks) end end),
        case ((erlang:length(Sources) > 1) orelse (erlang:length(Sinks) > 1)) of
        true -> Max_input_flow = 0,
            I = 0,
            Fun_2 = fun Fun_2_loop(G, Graph, I, Max_input_flow, Sink_index, Sinks, Source_index, Sources) ->
    case (I < erlang:length(Sources)) of
        true ->
            J = 0,
            Fun = fun Fun_loop(G, Graph, I, J, Max_input_flow, Sink_index, Sinks, Source_index, Sources) ->
    case (J < erlang:length((case erlang:is_map(G) of true -> maps:get((case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end), G, nil); _ -> case (case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) < 0 of true -> mochi_nth(erlang:length(G) + (case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) + 1, G); _ -> mochi_nth((case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) + 1, G) end end))) of
        true ->
            Max_input_flow_2 = (Max_input_flow + (case erlang:is_map((case erlang:is_map(G) of true -> maps:get((case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end), G, nil); _ -> case (case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) < 0 of true -> mochi_nth(erlang:length(G) + (case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) + 1, G); _ -> mochi_nth((case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) + 1, G) end end)) of true -> maps:get(J, (case erlang:is_map(G) of true -> maps:get((case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end), G, nil); _ -> case (case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) < 0 of true -> mochi_nth(erlang:length(G) + (case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) + 1, G); _ -> mochi_nth((case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) + 1, G) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(G) of true -> maps:get((case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end), G, nil); _ -> case (case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) < 0 of true -> mochi_nth(erlang:length(G) + (case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) + 1, G); _ -> mochi_nth((case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) + 1, G) end end)) + J + 1, (case erlang:is_map(G) of true -> maps:get((case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end), G, nil); _ -> case (case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) < 0 of true -> mochi_nth(erlang:length(G) + (case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) + 1, G); _ -> mochi_nth((case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) + 1, G) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(G) of true -> maps:get((case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end), G, nil); _ -> case (case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) < 0 of true -> mochi_nth(erlang:length(G) + (case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) + 1, G); _ -> mochi_nth((case erlang:is_map(Sources) of true -> maps:get(I, Sources, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sources) + I + 1, Sources); _ -> mochi_nth(I + 1, Sources) end end) + 1, G) end end)) end end)),
            J_2 = (J + 1),
            Fun_loop(G, Graph, I, J_2, Max_input_flow_2, Sink_index, Sinks, Source_index, Sources);
        _ -> {G, Graph, I, J, Max_input_flow, Sink_index, Sinks, Source_index, Sources}
    end
end,
{G, Graph, I, J_2, Max_input_flow_2, Sink_index, Sinks, Source_index, Sources} = Fun(G, Graph, I, J, Max_input_flow, Sink_index, Sinks, Source_index, Sources),
            I_2 = (I + 1),
            Fun_2_loop(G, Graph, I_2, Max_input_flow_2, Sink_index, Sinks, Source_index, Sources);
        _ -> {G, Graph, I, Max_input_flow, Sink_index, Sinks, Source_index, Sources}
    end
end,
{G, Graph, I_2, Max_input_flow_2, Sink_index, Sinks, Source_index, Sources} = Fun_2(G, Graph, I, Max_input_flow, Sink_index, Sinks, Source_index, Sources),
            Size = (erlang:length(G) + 1),
            New_graph = [],
            Zero_row = [],
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(G, Graph, I_2, J_3, Max_input_flow_2, New_graph, Sink_index, Sinks, Size, Source_index, Sources, Zero_row) ->
    case (J_3 < Size) of
        true ->
            Zero_row_2 = lists:append((case Zero_row of nil -> []; _ -> Zero_row end), [0]),
            J_4 = (J_3 + 1),
            Fun_3_loop(G, Graph, I_2, J_4, Max_input_flow_2, New_graph, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2);
        _ -> {G, Graph, I_2, J_3, Max_input_flow_2, New_graph, Sink_index, Sinks, Size, Source_index, Sources, Zero_row}
    end
end,
{G, Graph, I_2, J_4, Max_input_flow_2, New_graph, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2} = Fun_3(G, Graph, I_2, J_3, Max_input_flow_2, New_graph, Sink_index, Sinks, Size, Source_index, Sources, Zero_row),
            New_graph_2 = lists:append((case New_graph of nil -> []; _ -> New_graph end), [Zero_row_2]),
            R = 0,
            Fun_5 = fun Fun_5_loop(G, Graph, I_2, J_4, Max_input_flow_2, New_graph_2, R, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2) ->
    case (R < erlang:length(G)) of
        true ->
            Row = [0],
            C = 0,
            Fun_4 = fun Fun_4_loop(C, G, Graph, I_2, J_4, Max_input_flow_2, New_graph_2, R, Row, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2) ->
    case (C < erlang:length((case erlang:is_map(G) of true -> maps:get(R, G, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(G) + R + 1, G); _ -> mochi_nth(R + 1, G) end end))) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [(case erlang:is_map((case erlang:is_map(G) of true -> maps:get(R, G, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(G) + R + 1, G); _ -> mochi_nth(R + 1, G) end end)) of true -> maps:get(C, (case erlang:is_map(G) of true -> maps:get(R, G, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(G) + R + 1, G); _ -> mochi_nth(R + 1, G) end end), nil); _ -> case C < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(G) of true -> maps:get(R, G, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(G) + R + 1, G); _ -> mochi_nth(R + 1, G) end end)) + C + 1, (case erlang:is_map(G) of true -> maps:get(R, G, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(G) + R + 1, G); _ -> mochi_nth(R + 1, G) end end)); _ -> mochi_nth(C + 1, (case erlang:is_map(G) of true -> maps:get(R, G, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(G) + R + 1, G); _ -> mochi_nth(R + 1, G) end end)) end end)]),
            C_2 = (C + 1),
            Fun_4_loop(C_2, G, Graph, I_2, J_4, Max_input_flow_2, New_graph_2, R, Row_2, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2);
        _ -> {C, G, Graph, I_2, J_4, Max_input_flow_2, New_graph_2, R, Row, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2}
    end
end,
{C_2, G, Graph, I_2, J_4, Max_input_flow_2, New_graph_2, R, Row_2, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2} = Fun_4(C, G, Graph, I_2, J_4, Max_input_flow_2, New_graph_2, R, Row, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2),
            New_graph_3 = lists:append((case New_graph_2 of nil -> []; _ -> New_graph_2 end), [Row_2]),
            R_2 = (R + 1),
            Fun_5_loop(G, Graph, I_2, J_4, Max_input_flow_2, New_graph_3, R_2, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2);
        _ -> {G, Graph, I_2, J_4, Max_input_flow_2, New_graph_2, R, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2}
    end
end,
{G, Graph, I_2, J_4, Max_input_flow_2, New_graph_3, R_2, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2} = Fun_5(G, Graph, I_2, J_4, Max_input_flow_2, New_graph_2, R, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2),
            G_2 = New_graph_3,
            I_3 = 0,
            Fun_6 = fun Fun_6_loop(G_2, Graph, I_3, J_4, Max_input_flow_2, New_graph_3, R_2, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2) ->
    case (I_3 < erlang:length(Sources)) of
        true ->
            G_3 = lists:sublist(G_2, 0) ++ [lists:sublist(lists:nth(0 + 1, G_2), ((case erlang:is_map(Sources) of true -> maps:get(I_3, Sources, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Sources) + I_3 + 1, Sources); _ -> mochi_nth(I_3 + 1, Sources) end end) + 1)) ++ [Max_input_flow_2] ++ lists:nthtail(((case erlang:is_map(Sources) of true -> maps:get(I_3, Sources, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Sources) + I_3 + 1, Sources); _ -> mochi_nth(I_3 + 1, Sources) end end) + 1) + 1, lists:nth(0 + 1, G_2))] ++ lists:nthtail(0 + 1, G_2),
            I_4 = (I_3 + 1),
            Fun_6_loop(G_3, Graph, I_4, J_4, Max_input_flow_2, New_graph_3, R_2, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2);
        _ -> {G_2, Graph, I_3, J_4, Max_input_flow_2, New_graph_3, R_2, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2}
    end
end,
{G_3, Graph, I_4, J_4, Max_input_flow_2, New_graph_3, R_2, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2} = Fun_6(G_2, Graph, I_3, J_4, Max_input_flow_2, New_graph_3, R_2, Sink_index, Sinks, Size, Source_index, Sources, Zero_row_2),
            Source_index_2 = 0,
            Size_2 = (erlang:length(G_3) + 1),
            New_graph_4 = [],
            R_3 = 0,
            Fun_7 = fun Fun_7_loop(G_3, Graph, I_4, J_4, Max_input_flow_2, New_graph_4, R_3, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2) ->
    case (R_3 < erlang:length(G_3)) of
        true ->
            Row2 = (case erlang:is_map(G_3) of true -> maps:get(R_3, G_3, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(G_3) + R_3 + 1, G_3); _ -> mochi_nth(R_3 + 1, G_3) end end),
            Row2_2 = lists:append((case Row2 of nil -> []; _ -> Row2 end), [0]),
            New_graph_5 = lists:append((case New_graph_4 of nil -> []; _ -> New_graph_4 end), [Row2_2]),
            R_4 = (R_3 + 1),
            Fun_7_loop(G_3, Graph, I_4, J_4, Max_input_flow_2, New_graph_5, R_4, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2);
        _ -> {G_3, Graph, I_4, J_4, Max_input_flow_2, New_graph_4, R_3, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2}
    end
end,
{G_3, Graph, I_4, J_4, Max_input_flow_2, New_graph_5, R_4, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2} = Fun_7(G_3, Graph, I_4, J_4, Max_input_flow_2, New_graph_4, R_3, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2),
            Last_row = [],
            J_5 = 0,
            Fun_8 = fun Fun_8_loop(G_3, Graph, I_4, J_5, Last_row, Max_input_flow_2, New_graph_5, R_4, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2) ->
    case (J_5 < Size_2) of
        true ->
            Last_row_2 = lists:append((case Last_row of nil -> []; _ -> Last_row end), [0]),
            J_6 = (J_5 + 1),
            Fun_8_loop(G_3, Graph, I_4, J_6, Last_row_2, Max_input_flow_2, New_graph_5, R_4, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2);
        _ -> {G_3, Graph, I_4, J_5, Last_row, Max_input_flow_2, New_graph_5, R_4, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2}
    end
end,
{G_3, Graph, I_4, J_6, Last_row_2, Max_input_flow_2, New_graph_5, R_4, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2} = Fun_8(G_3, Graph, I_4, J_5, Last_row, Max_input_flow_2, New_graph_5, R_4, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2),
            New_graph_6 = lists:append((case New_graph_5 of nil -> []; _ -> New_graph_5 end), [Last_row_2]),
            G_4 = New_graph_6,
            I_5 = 0,
            Fun_9 = fun Fun_9_loop(G_4, Graph, I_5, J_6, Last_row_2, Max_input_flow_2, New_graph_6, R_4, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2) ->
    case (I_5 < erlang:length(Sinks)) of
        true ->
            G_5 = lists:sublist(G_4, ((case erlang:is_map(Sinks) of true -> maps:get(I_5, Sinks, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Sinks) + I_5 + 1, Sinks); _ -> mochi_nth(I_5 + 1, Sinks) end end) + 1)) ++ [lists:sublist(lists:nth(((case erlang:is_map(Sinks) of true -> maps:get(I_5, Sinks, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Sinks) + I_5 + 1, Sinks); _ -> mochi_nth(I_5 + 1, Sinks) end end) + 1) + 1, G_4), (Size_2 - 1)) ++ [Max_input_flow_2] ++ lists:nthtail((Size_2 - 1) + 1, lists:nth(((case erlang:is_map(Sinks) of true -> maps:get(I_5, Sinks, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Sinks) + I_5 + 1, Sinks); _ -> mochi_nth(I_5 + 1, Sinks) end end) + 1) + 1, G_4))] ++ lists:nthtail(((case erlang:is_map(Sinks) of true -> maps:get(I_5, Sinks, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Sinks) + I_5 + 1, Sinks); _ -> mochi_nth(I_5 + 1, Sinks) end end) + 1) + 1, G_4),
            I_6 = (I_5 + 1),
            Fun_9_loop(G_5, Graph, I_6, J_6, Last_row_2, Max_input_flow_2, New_graph_6, R_4, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2);
        _ -> {G_4, Graph, I_5, J_6, Last_row_2, Max_input_flow_2, New_graph_6, R_4, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2}
    end
end,
{G_5, Graph, I_6, J_6, Last_row_2, Max_input_flow_2, New_graph_6, R_4, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2} = Fun_9(G_4, Graph, I_5, J_6, Last_row_2, Max_input_flow_2, New_graph_6, R_4, Sink_index, Sinks, Size_2, Source_index_2, Sources, Zero_row_2),
            Sink_index_2 = (Size_2 - 1),
            Fun_10 = Fun_9,
            G_6 = G_5,
            I_7 = I_6,
            J_7 = J_6,
            Last_row_3 = Last_row_2,
            Max_input_flow_3 = Max_input_flow_2,
            New_graph_7 = New_graph_6,
            R_5 = R_4,
            Sink_index_3 = Sink_index_2,
            Size_3 = Size_2,
            Source_index_3 = Source_index_2,
            Zero_row_3 = Zero_row_2;
        _ -> Fun_10 = nil,
            G_6 = G,
            I_7 = nil,
            J_7 = nil,
            Last_row_3 = nil,
            Max_input_flow_3 = nil,
            New_graph_7 = nil,
            R_5 = nil,
            Sink_index_3 = Sink_index,
            Size_3 = nil,
            Source_index_3 = Source_index,
            Zero_row_3 = nil
    end,
        N = erlang:length(G_6),
        Preflow = [],
        I_8 = 0,
        Fun_12 = fun Fun_12_loop(G_6, Graph, I_8, J_7, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3) ->
    case (I_8 < N) of
        true ->
            Row_3 = [],
            J_8 = 0,
            Fun_11 = fun Fun_11_loop(G_6, Graph, I_8, J_8, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow, R_5, Row_3, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3) ->
    case (J_8 < N) of
        true ->
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [0]),
            J_9 = (J_8 + 1),
            Fun_11_loop(G_6, Graph, I_8, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow, R_5, Row_4, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3);
        _ -> {G_6, Graph, I_8, J_8, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow, R_5, Row_3, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3}
    end
end,
{G_6, Graph, I_8, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow, R_5, Row_4, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3} = Fun_11(G_6, Graph, I_8, J_8, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow, R_5, Row_3, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3),
            Preflow_2 = lists:append((case Preflow of nil -> []; _ -> Preflow end), [Row_4]),
            I_9 = (I_8 + 1),
            Fun_12_loop(G_6, Graph, I_9, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3);
        _ -> {G_6, Graph, I_8, J_7, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3}
    end
end,
{G_6, Graph, I_9, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3} = Fun_12(G_6, Graph, I_8, J_7, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3),
        Heights = [],
        I_10 = 0,
        Fun_13 = fun Fun_13_loop(G_6, Graph, Heights, I_10, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3) ->
    case (I_10 < N) of
        true ->
            Heights_2 = lists:append((case Heights of nil -> []; _ -> Heights end), [0]),
            I_11 = (I_10 + 1),
            Fun_13_loop(G_6, Graph, Heights_2, I_11, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3);
        _ -> {G_6, Graph, Heights, I_10, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3}
    end
end,
{G_6, Graph, Heights_2, I_11, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3} = Fun_13(G_6, Graph, Heights, I_10, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3),
        Excesses = [],
        I_12 = 0,
        Fun_14 = fun Fun_14_loop(Excesses, G_6, Graph, Heights_2, I_12, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3) ->
    case (I_12 < N) of
        true ->
            Excesses_2 = lists:append((case Excesses of nil -> []; _ -> Excesses end), [0]),
            I_13 = (I_12 + 1),
            Fun_14_loop(Excesses_2, G_6, Graph, Heights_2, I_13, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3);
        _ -> {Excesses, G_6, Graph, Heights_2, I_12, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3}
    end
end,
{Excesses_2, G_6, Graph, Heights_2, I_13, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3} = Fun_14(Excesses, G_6, Graph, Heights_2, I_12, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3),
        Heights_3 = lists:sublist(Heights_2, Source_index_3) ++ [N] ++ lists:nthtail(Source_index_3 + 1, Heights_2),
        I_14 = 0,
        Fun_15 = fun Fun_15_loop(Excesses_2, G_6, Graph, Heights_3, I_14, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3) ->
    case (I_14 < N) of
        true ->
            Bandwidth = (case erlang:is_map((case erlang:is_map(G_6) of true -> maps:get(Source_index_3, G_6, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(G_6) + Source_index_3 + 1, G_6); _ -> mochi_nth(Source_index_3 + 1, G_6) end end)) of true -> maps:get(I_14, (case erlang:is_map(G_6) of true -> maps:get(Source_index_3, G_6, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(G_6) + Source_index_3 + 1, G_6); _ -> mochi_nth(Source_index_3 + 1, G_6) end end), nil); _ -> case I_14 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(G_6) of true -> maps:get(Source_index_3, G_6, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(G_6) + Source_index_3 + 1, G_6); _ -> mochi_nth(Source_index_3 + 1, G_6) end end)) + I_14 + 1, (case erlang:is_map(G_6) of true -> maps:get(Source_index_3, G_6, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(G_6) + Source_index_3 + 1, G_6); _ -> mochi_nth(Source_index_3 + 1, G_6) end end)); _ -> mochi_nth(I_14 + 1, (case erlang:is_map(G_6) of true -> maps:get(Source_index_3, G_6, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(G_6) + Source_index_3 + 1, G_6); _ -> mochi_nth(Source_index_3 + 1, G_6) end end)) end end),
            Preflow_3 = lists:sublist(Preflow_2, Source_index_3) ++ [lists:sublist(lists:nth(Source_index_3 + 1, Preflow_2), I_14) ++ [((case erlang:is_map((case erlang:is_map(Preflow_2) of true -> maps:get(Source_index_3, Preflow_2, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(Preflow_2) + Source_index_3 + 1, Preflow_2); _ -> mochi_nth(Source_index_3 + 1, Preflow_2) end end)) of true -> maps:get(I_14, (case erlang:is_map(Preflow_2) of true -> maps:get(Source_index_3, Preflow_2, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(Preflow_2) + Source_index_3 + 1, Preflow_2); _ -> mochi_nth(Source_index_3 + 1, Preflow_2) end end), nil); _ -> case I_14 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Preflow_2) of true -> maps:get(Source_index_3, Preflow_2, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(Preflow_2) + Source_index_3 + 1, Preflow_2); _ -> mochi_nth(Source_index_3 + 1, Preflow_2) end end)) + I_14 + 1, (case erlang:is_map(Preflow_2) of true -> maps:get(Source_index_3, Preflow_2, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(Preflow_2) + Source_index_3 + 1, Preflow_2); _ -> mochi_nth(Source_index_3 + 1, Preflow_2) end end)); _ -> mochi_nth(I_14 + 1, (case erlang:is_map(Preflow_2) of true -> maps:get(Source_index_3, Preflow_2, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(Preflow_2) + Source_index_3 + 1, Preflow_2); _ -> mochi_nth(Source_index_3 + 1, Preflow_2) end end)) end end) + Bandwidth)] ++ lists:nthtail(I_14 + 1, lists:nth(Source_index_3 + 1, Preflow_2))] ++ lists:nthtail(Source_index_3 + 1, Preflow_2),
            Preflow_4 = lists:sublist(Preflow_3, I_14) ++ [lists:sublist(lists:nth(I_14 + 1, Preflow_3), Source_index_3) ++ [((case erlang:is_map((case erlang:is_map(Preflow_3) of true -> maps:get(I_14, Preflow_3, nil); _ -> case I_14 < 0 of true -> mochi_nth(erlang:length(Preflow_3) + I_14 + 1, Preflow_3); _ -> mochi_nth(I_14 + 1, Preflow_3) end end)) of true -> maps:get(Source_index_3, (case erlang:is_map(Preflow_3) of true -> maps:get(I_14, Preflow_3, nil); _ -> case I_14 < 0 of true -> mochi_nth(erlang:length(Preflow_3) + I_14 + 1, Preflow_3); _ -> mochi_nth(I_14 + 1, Preflow_3) end end), nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Preflow_3) of true -> maps:get(I_14, Preflow_3, nil); _ -> case I_14 < 0 of true -> mochi_nth(erlang:length(Preflow_3) + I_14 + 1, Preflow_3); _ -> mochi_nth(I_14 + 1, Preflow_3) end end)) + Source_index_3 + 1, (case erlang:is_map(Preflow_3) of true -> maps:get(I_14, Preflow_3, nil); _ -> case I_14 < 0 of true -> mochi_nth(erlang:length(Preflow_3) + I_14 + 1, Preflow_3); _ -> mochi_nth(I_14 + 1, Preflow_3) end end)); _ -> mochi_nth(Source_index_3 + 1, (case erlang:is_map(Preflow_3) of true -> maps:get(I_14, Preflow_3, nil); _ -> case I_14 < 0 of true -> mochi_nth(erlang:length(Preflow_3) + I_14 + 1, Preflow_3); _ -> mochi_nth(I_14 + 1, Preflow_3) end end)) end end) - Bandwidth)] ++ lists:nthtail(Source_index_3 + 1, lists:nth(I_14 + 1, Preflow_3))] ++ lists:nthtail(I_14 + 1, Preflow_3),
            Excesses_3 = lists:sublist(Excesses_2, I_14) ++ [((case erlang:is_map(Excesses_2) of true -> maps:get(I_14, Excesses_2, nil); _ -> case I_14 < 0 of true -> mochi_nth(erlang:length(Excesses_2) + I_14 + 1, Excesses_2); _ -> mochi_nth(I_14 + 1, Excesses_2) end end) + Bandwidth)] ++ lists:nthtail(I_14 + 1, Excesses_2),
            I_15 = (I_14 + 1),
            Fun_15_loop(Excesses_3, G_6, Graph, Heights_3, I_15, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_4, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3);
        _ -> {Excesses_2, G_6, Graph, Heights_3, I_14, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3}
    end
end,
{Excesses_3, G_6, Graph, Heights_3, I_15, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_4, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3} = Fun_15(Excesses_2, G_6, Graph, Heights_3, I_14, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_2, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Zero_row_3),
        Vertices_list = [],
        I_16 = 0,
        Fun_16 = fun Fun_16_loop(Excesses_3, G_6, Graph, Heights_3, I_16, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_4, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list, Zero_row_3) ->
    case (I_16 < N) of
        true ->
            case ((I_16 /= Source_index_3) andalso (I_16 /= Sink_index_3)) of
        true -> Vertices_list_2 = lists:append((case Vertices_list of nil -> []; _ -> Vertices_list end), [I_16]),
            Vertices_list_3 = Vertices_list_2;
        _ -> Vertices_list_3 = Vertices_list
    end,
            I_17 = (I_16 + 1),
            Fun_16_loop(Excesses_3, G_6, Graph, Heights_3, I_17, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_4, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list_3, Zero_row_3);
        _ -> {Excesses_3, G_6, Graph, Heights_3, I_16, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_4, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list, Zero_row_3}
    end
end,
{Excesses_3, G_6, Graph, Heights_3, I_17, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_4, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list_3, Zero_row_3} = Fun_16(Excesses_3, G_6, Graph, Heights_3, I_16, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_4, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list, Zero_row_3),
        Idx = 0,
        Fun_22 = fun Fun_22_loop(Excesses_3, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_4, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list_3, Zero_row_3) ->
    case (Idx < erlang:length(Vertices_list_3)) of
        true ->
            try
                V = (case erlang:is_map(Vertices_list_3) of true -> maps:get(Idx, Vertices_list_3, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Vertices_list_3) + Idx + 1, Vertices_list_3); _ -> mochi_nth(Idx + 1, Vertices_list_3) end end),
                Prev_height = (case erlang:is_map(Heights_3) of true -> maps:get(V, Heights_3, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Heights_3) + V + 1, Heights_3); _ -> mochi_nth(V + 1, Heights_3) end end),
                Fun_19 = fun Fun_19_loop(Excesses_3, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_4, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3) ->
    case ((case erlang:is_map(Excesses_3) of true -> maps:get(V, Excesses_3, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Excesses_3) + V + 1, Excesses_3); _ -> mochi_nth(V + 1, Excesses_3) end end) > 0) of
        true ->
            try
                Nb = 0,
                Fun_17 = fun Fun_17_loop(Excesses_3, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, Nb, New_graph_7, Preflow_4, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3) ->
    case (Nb < N) of
        true ->
            case ((((case erlang:is_map((case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end)) of true -> maps:get(Nb, (case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end), nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end)) + Nb + 1, (case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end)); _ -> mochi_nth(Nb + 1, (case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end)) end end) - (case erlang:is_map((case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end)) of true -> maps:get(Nb, (case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end), nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end)) + Nb + 1, (case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end)); _ -> mochi_nth(Nb + 1, (case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end)) end end)) > 0) andalso ((case erlang:is_map(Heights_3) of true -> maps:get(V, Heights_3, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Heights_3) + V + 1, Heights_3); _ -> mochi_nth(V + 1, Heights_3) end end) > (case erlang:is_map(Heights_3) of true -> maps:get(Nb, Heights_3, nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length(Heights_3) + Nb + 1, Heights_3); _ -> mochi_nth(Nb + 1, Heights_3) end end))) of
        true -> Delta = (case erlang:is_map(Excesses_3) of true -> maps:get(V, Excesses_3, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Excesses_3) + V + 1, Excesses_3); _ -> mochi_nth(V + 1, Excesses_3) end end),
            Capacity = ((case erlang:is_map((case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end)) of true -> maps:get(Nb, (case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end), nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end)) + Nb + 1, (case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end)); _ -> mochi_nth(Nb + 1, (case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end)) end end) - (case erlang:is_map((case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end)) of true -> maps:get(Nb, (case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end), nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end)) + Nb + 1, (case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end)); _ -> mochi_nth(Nb + 1, (case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end)) end end)),
            case (Delta > Capacity) of
        true -> Delta_2 = Capacity,
            Delta_3 = Delta_2;
        _ -> Delta_3 = Delta
    end,
            Preflow_5 = lists:sublist(Preflow_4, V) ++ [lists:sublist(lists:nth(V + 1, Preflow_4), Nb) ++ [((case erlang:is_map((case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end)) of true -> maps:get(Nb, (case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end), nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end)) + Nb + 1, (case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end)); _ -> mochi_nth(Nb + 1, (case erlang:is_map(Preflow_4) of true -> maps:get(V, Preflow_4, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_4) + V + 1, Preflow_4); _ -> mochi_nth(V + 1, Preflow_4) end end)) end end) + Delta_3)] ++ lists:nthtail(Nb + 1, lists:nth(V + 1, Preflow_4))] ++ lists:nthtail(V + 1, Preflow_4),
            Preflow_6 = lists:sublist(Preflow_5, Nb) ++ [lists:sublist(lists:nth(Nb + 1, Preflow_5), V) ++ [((case erlang:is_map((case erlang:is_map(Preflow_5) of true -> maps:get(Nb, Preflow_5, nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length(Preflow_5) + Nb + 1, Preflow_5); _ -> mochi_nth(Nb + 1, Preflow_5) end end)) of true -> maps:get(V, (case erlang:is_map(Preflow_5) of true -> maps:get(Nb, Preflow_5, nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length(Preflow_5) + Nb + 1, Preflow_5); _ -> mochi_nth(Nb + 1, Preflow_5) end end), nil); _ -> case V < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Preflow_5) of true -> maps:get(Nb, Preflow_5, nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length(Preflow_5) + Nb + 1, Preflow_5); _ -> mochi_nth(Nb + 1, Preflow_5) end end)) + V + 1, (case erlang:is_map(Preflow_5) of true -> maps:get(Nb, Preflow_5, nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length(Preflow_5) + Nb + 1, Preflow_5); _ -> mochi_nth(Nb + 1, Preflow_5) end end)); _ -> mochi_nth(V + 1, (case erlang:is_map(Preflow_5) of true -> maps:get(Nb, Preflow_5, nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length(Preflow_5) + Nb + 1, Preflow_5); _ -> mochi_nth(Nb + 1, Preflow_5) end end)) end end) - Delta_3)] ++ lists:nthtail(V + 1, lists:nth(Nb + 1, Preflow_5))] ++ lists:nthtail(Nb + 1, Preflow_5),
            Excesses_4 = lists:sublist(Excesses_3, V) ++ [((case erlang:is_map(Excesses_3) of true -> maps:get(V, Excesses_3, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Excesses_3) + V + 1, Excesses_3); _ -> mochi_nth(V + 1, Excesses_3) end end) - Delta_3)] ++ lists:nthtail(V + 1, Excesses_3),
            Excesses_5 = lists:sublist(Excesses_4, Nb) ++ [((case erlang:is_map(Excesses_4) of true -> maps:get(Nb, Excesses_4, nil); _ -> case Nb < 0 of true -> mochi_nth(erlang:length(Excesses_4) + Nb + 1, Excesses_4); _ -> mochi_nth(Nb + 1, Excesses_4) end end) + Delta_3)] ++ lists:nthtail(Nb + 1, Excesses_4),
            Capacity_2 = Capacity,
            Delta_4 = Delta_3,
            Excesses_6 = Excesses_5,
            Preflow_7 = Preflow_6;
        _ -> Capacity_2 = nil,
            Delta_4 = nil,
            Excesses_6 = Excesses_3,
            Preflow_7 = Preflow_4
    end,
            Nb_2 = (Nb + 1),
            Fun_17_loop(Excesses_6, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, Nb_2, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3);
        _ -> {Excesses_3, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, Nb, New_graph_7, Preflow_4, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3}
    end
end,
{Excesses_6, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, Nb_2, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3} = Fun_17(Excesses_3, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, Nb, New_graph_7, Preflow_4, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3),
                Min_height = -1,
                Nb_3 = 0,
                Fun_18 = fun Fun_18_loop(Excesses_6, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, Min_height, N, Nb_3, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3) ->
    case (Nb_3 < N) of
        true ->
            case (((case erlang:is_map((case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end)) of true -> maps:get(Nb_3, (case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end), nil); _ -> case Nb_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end)) + Nb_3 + 1, (case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end)); _ -> mochi_nth(Nb_3 + 1, (case erlang:is_map(G_6) of true -> maps:get(V, G_6, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_6) + V + 1, G_6); _ -> mochi_nth(V + 1, G_6) end end)) end end) - (case erlang:is_map((case erlang:is_map(Preflow_7) of true -> maps:get(V, Preflow_7, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_7) + V + 1, Preflow_7); _ -> mochi_nth(V + 1, Preflow_7) end end)) of true -> maps:get(Nb_3, (case erlang:is_map(Preflow_7) of true -> maps:get(V, Preflow_7, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_7) + V + 1, Preflow_7); _ -> mochi_nth(V + 1, Preflow_7) end end), nil); _ -> case Nb_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Preflow_7) of true -> maps:get(V, Preflow_7, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_7) + V + 1, Preflow_7); _ -> mochi_nth(V + 1, Preflow_7) end end)) + Nb_3 + 1, (case erlang:is_map(Preflow_7) of true -> maps:get(V, Preflow_7, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_7) + V + 1, Preflow_7); _ -> mochi_nth(V + 1, Preflow_7) end end)); _ -> mochi_nth(Nb_3 + 1, (case erlang:is_map(Preflow_7) of true -> maps:get(V, Preflow_7, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Preflow_7) + V + 1, Preflow_7); _ -> mochi_nth(V + 1, Preflow_7) end end)) end end)) > 0) of
        true -> case ((Min_height == -1) orelse ((case erlang:is_map(Heights_3) of true -> maps:get(Nb_3, Heights_3, nil); _ -> case Nb_3 < 0 of true -> mochi_nth(erlang:length(Heights_3) + Nb_3 + 1, Heights_3); _ -> mochi_nth(Nb_3 + 1, Heights_3) end end) < Min_height)) of
        true -> Min_height_2 = (case erlang:is_map(Heights_3) of true -> maps:get(Nb_3, Heights_3, nil); _ -> case Nb_3 < 0 of true -> mochi_nth(erlang:length(Heights_3) + Nb_3 + 1, Heights_3); _ -> mochi_nth(Nb_3 + 1, Heights_3) end end),
            Min_height_3 = Min_height_2;
        _ -> Min_height_3 = Min_height
    end,
            Min_height_4 = Min_height_3;
        _ -> Min_height_4 = Min_height
    end,
            Nb_4 = (Nb_3 + 1),
            Fun_18_loop(Excesses_6, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, Min_height_4, N, Nb_4, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3);
        _ -> {Excesses_6, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, Min_height, N, Nb_3, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3}
    end
end,
{Excesses_6, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, Min_height_4, N, Nb_4, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3} = Fun_18(Excesses_6, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, Min_height, N, Nb_3, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3),
                case (Min_height_4 /= -1) of
        true -> Heights_4 = lists:sublist(Heights_3, V) ++ [(Min_height_4 + 1)] ++ lists:nthtail(V + 1, Heights_3),
            Heights_5 = Heights_4;
        _ -> throw({break, Excesses_6, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3}),
            Heights_5 = Heights_3
    end,
                Fun_19_loop(Excesses_6, G_6, Graph, Heights_5, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21} -> Fun_19_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19, C20, C21);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21}
            end;
        _ -> {Excesses_3, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_4, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3}
    end
end,
{Excesses_6, G_6, Graph, Heights_5, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3} = Fun_19(Excesses_3, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_4, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertices_list_3, Zero_row_3),
                case ((case erlang:is_map(Heights_5) of true -> maps:get(V, Heights_5, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Heights_5) + V + 1, Heights_5); _ -> mochi_nth(V + 1, Heights_5) end end) > Prev_height) of
        true -> Vertex = (case erlang:is_map(Vertices_list_3) of true -> maps:get(Idx, Vertices_list_3, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Vertices_list_3) + Idx + 1, Vertices_list_3); _ -> mochi_nth(Idx + 1, Vertices_list_3) end end),
            J_10 = Idx,
            Fun_20 = fun Fun_20_loop(Excesses_6, G_6, Graph, Heights_5, I_17, Idx, J_10, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertex, Vertices_list_3, Zero_row_3) ->
    case (J_10 > 0) of
        true ->
            Vertices_list_4 = lists:sublist(Vertices_list_3, J_10) ++ [(case erlang:is_map(Vertices_list_3) of true -> maps:get((J_10 - 1), Vertices_list_3, nil); _ -> case (J_10 - 1) < 0 of true -> mochi_nth(erlang:length(Vertices_list_3) + (J_10 - 1) + 1, Vertices_list_3); _ -> mochi_nth((J_10 - 1) + 1, Vertices_list_3) end end)] ++ lists:nthtail(J_10 + 1, Vertices_list_3),
            J_11 = (J_10 - 1),
            Fun_20_loop(Excesses_6, G_6, Graph, Heights_5, I_17, Idx, J_11, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertex, Vertices_list_4, Zero_row_3);
        _ -> {Excesses_6, G_6, Graph, Heights_5, I_17, Idx, J_10, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertex, Vertices_list_3, Zero_row_3}
    end
end,
{Excesses_6, G_6, Graph, Heights_5, I_17, Idx, J_11, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertex, Vertices_list_4, Zero_row_3} = Fun_20(Excesses_6, G_6, Graph, Heights_5, I_17, Idx, J_10, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, Prev_height, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, V, Vertex, Vertices_list_3, Zero_row_3),
            Vertices_list_5 = lists:sublist(Vertices_list_4, 0) ++ [Vertex] ++ lists:nthtail(0 + 1, Vertices_list_4),
            Idx_2 = 0,
            Fun_21 = Fun_20,
            Idx_4 = Idx_2,
            J_12 = J_11,
            Vertex_2 = Vertex,
            Vertices_list_6 = Vertices_list_5;
        _ -> Idx_3 = (Idx + 1),
            Fun_21 = Fun_19,
            Idx_4 = Idx_3,
            J_12 = J_9,
            Vertex_2 = nil,
            Vertices_list_6 = Vertices_list_3
    end,
                Fun_22_loop(Excesses_6, G_6, Graph, Heights_5, I_17, Idx_4, J_12, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list_6, Zero_row_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19} -> Fun_22_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14, C15, C16, C17, C18, C19);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19}
            end;
        _ -> {Excesses_3, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_4, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list_3, Zero_row_3}
    end
end,
{Excesses_6, G_6, Graph, Heights_5, I_17, Idx_4, J_12, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list_6, Zero_row_3} = Fun_22(Excesses_3, G_6, Graph, Heights_3, I_17, Idx, J_9, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_4, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list_3, Zero_row_3),
        Flow = 0,
        I_18 = 0,
        Fun_23 = fun Fun_23_loop(Excesses_6, Flow, G_6, Graph, Heights_5, I_18, Idx_4, J_12, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list_6, Zero_row_3) ->
    case (I_18 < N) of
        true ->
            Flow_2 = (Flow + (case erlang:is_map((case erlang:is_map(Preflow_7) of true -> maps:get(Source_index_3, Preflow_7, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(Preflow_7) + Source_index_3 + 1, Preflow_7); _ -> mochi_nth(Source_index_3 + 1, Preflow_7) end end)) of true -> maps:get(I_18, (case erlang:is_map(Preflow_7) of true -> maps:get(Source_index_3, Preflow_7, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(Preflow_7) + Source_index_3 + 1, Preflow_7); _ -> mochi_nth(Source_index_3 + 1, Preflow_7) end end), nil); _ -> case I_18 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Preflow_7) of true -> maps:get(Source_index_3, Preflow_7, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(Preflow_7) + Source_index_3 + 1, Preflow_7); _ -> mochi_nth(Source_index_3 + 1, Preflow_7) end end)) + I_18 + 1, (case erlang:is_map(Preflow_7) of true -> maps:get(Source_index_3, Preflow_7, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(Preflow_7) + Source_index_3 + 1, Preflow_7); _ -> mochi_nth(Source_index_3 + 1, Preflow_7) end end)); _ -> mochi_nth(I_18 + 1, (case erlang:is_map(Preflow_7) of true -> maps:get(Source_index_3, Preflow_7, nil); _ -> case Source_index_3 < 0 of true -> mochi_nth(erlang:length(Preflow_7) + Source_index_3 + 1, Preflow_7); _ -> mochi_nth(Source_index_3 + 1, Preflow_7) end end)) end end)),
            I_19 = (I_18 + 1),
            Fun_23_loop(Excesses_6, Flow_2, G_6, Graph, Heights_5, I_19, Idx_4, J_12, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list_6, Zero_row_3);
        _ -> {Excesses_6, Flow, G_6, Graph, Heights_5, I_18, Idx_4, J_12, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list_6, Zero_row_3}
    end
end,
{Excesses_6, Flow_2, G_6, Graph, Heights_5, I_19, Idx_4, J_12, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list_6, Zero_row_3} = Fun_23(Excesses_6, Flow, G_6, Graph, Heights_5, I_18, Idx_4, J_12, Last_row_3, Max_input_flow_3, N, New_graph_7, Preflow_7, R_5, Sink_index_3, Sinks, Size_3, Source_index_3, Sources, Vertices_list_6, Zero_row_3),
        case (Flow_2 < 0) of
        true -> Flow_3 = -Flow_2,
            Flow_4 = Flow_3;
        _ -> Flow_4 = Flow_2
    end,
        Flow_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('graph', [[0, 7, 0, 0], [0, 0, 6, 0], [0, 0, 0, 8], [9, 0, 0, 0]]),
    erlang:put('sources', [0]),
    erlang:put('sinks', [3]),
    erlang:put('result', push_relabel_max_flow(erlang:get('graph'), erlang:get('sources'), erlang:get('sinks'))),
    io:format("~ts~n", [mochi_repr(("maximum flow is " ++ mochi_str(erlang:get('result'))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
