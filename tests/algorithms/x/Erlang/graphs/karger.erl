#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, rand_int/1, contains/2, remove_all/2, partition_graph/1, cut_to_string/1]).

% Generated by Mochi transpiler v0.10.65 (428ea06e9a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) ->
                K = case Key of
                    <<_/binary>> -> Key;
                    _ when is_integer(Key) -> <<Key>>;
                    _ -> list_to_binary(Key)
                end,
                binary:match(Coll, K) /= nomatch;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

rand_int(N) ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        mochi_mod(erlang:get('seed'), N)
    catch {return, RetCatch} -> RetCatch end.

contains(List, Value) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, List, Value) ->
    case (I < erlang:length(List)) of
        true ->
            case ((case erlang:is_map(List) of true -> maps:get(I, List, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(List) + I + 1, List); _ -> mochi_nth(I + 1, List) end end) == Value) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, List, Value);
        _ -> {I, List, Value}
    end
end,
{I_2, List, Value} = Fun(I, List, Value),
        false
    catch {return, RetCatch} -> RetCatch end.

remove_all(List_2, Value_2) ->
    try
        Res = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, List_2, Res, Value_2) ->
    case (I_3 < erlang:length(List_2)) of
        true ->
            case ((case erlang:is_map(List_2) of true -> maps:get(I_3, List_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(List_2) + I_3 + 1, List_2); _ -> mochi_nth(I_3 + 1, List_2) end end) /= Value_2) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(List_2) of true -> maps:get(I_3, List_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(List_2) + I_3 + 1, List_2); _ -> mochi_nth(I_3 + 1, List_2) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, List_2, Res_3, Value_2);
        _ -> {I_3, List_2, Res, Value_2}
    end
end,
{I_4, List_2, Res_3, Value_2} = Fun_2(I_3, List_2, Res, Value_2),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

partition_graph(Graph) ->
    try
        Contracted = #{},
        Fun_3 = fun Fun_3_loop(List, Contracted, Graph) ->
    case List of
        [] -> {Contracted, Graph};
        [Node|Node_rest] ->
            Contracted_2 = maps:put(Node, [Node], Contracted),
            Fun_3_loop(Node_rest, Contracted_2, Graph);
        _ -> {Contracted, Graph}
    end
end,
{Contracted_2, Graph} = Fun_3(maps:keys(Graph), Contracted, Graph),
        Graph_copy = #{},
        Fun_4 = fun Fun_4_loop(List, Contracted_2, Graph, Graph_copy) ->
    case List of
        [] -> {Contracted_2, Graph, Graph_copy};
        [Node_2|Node_2_rest] ->
            Lst = [],
            Neigh = maps:get(Node_2, Graph, nil),
            I_5 = 0,
            Fun_5 = fun Fun_5_loop(Contracted_2, Graph, Graph_copy, I_5, Lst, Neigh, Node_2) ->
    case (I_5 < erlang:length(Neigh)) of
        true ->
            Lst_2 = lists:append((case Lst of nil -> []; _ -> Lst end), [(case erlang:is_map(Neigh) of true -> maps:get(I_5, Neigh, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Neigh) + I_5 + 1, Neigh); _ -> mochi_nth(I_5 + 1, Neigh) end end)]),
            I_6 = (I_5 + 1),
            Fun_5_loop(Contracted_2, Graph, Graph_copy, I_6, Lst_2, Neigh, Node_2);
        _ -> {Contracted_2, Graph, Graph_copy, I_5, Lst, Neigh, Node_2}
    end
end,
{Contracted_2, Graph, Graph_copy, I_6, Lst_2, Neigh, Node_2} = Fun_5(Contracted_2, Graph, Graph_copy, I_5, Lst, Neigh, Node_2),
            Graph_copy_2 = maps:put(Node_2, Lst_2, Graph_copy),
            Fun_4_loop(Node_2_rest, Contracted_2, Graph, Graph_copy_2);
        _ -> {Contracted_2, Graph, Graph_copy}
    end
end,
{Contracted_2, Graph, Graph_copy_2} = Fun_4(maps:keys(Graph), Contracted_2, Graph, Graph_copy),
        Nodes = maps:keys(Graph_copy_2),
        Fun_11 = fun Fun_11_loop(Contracted_2, Graph, Graph_copy_2, Nodes) ->
    case (erlang:length(Nodes) > 2) of
        true ->
            U = (case erlang:is_map(Nodes) of true -> maps:get(rand_int(erlang:length(Nodes)), Nodes, nil); _ -> case rand_int(erlang:length(Nodes)) < 0 of true -> mochi_nth(erlang:length(Nodes) + rand_int(erlang:length(Nodes)) + 1, Nodes); _ -> mochi_nth(rand_int(erlang:length(Nodes)) + 1, Nodes) end end),
            U_neighbors = maps:get(U, Graph_copy_2, nil),
            V = (case erlang:is_map(U_neighbors) of true -> maps:get(rand_int(erlang:length(U_neighbors)), U_neighbors, nil); _ -> case rand_int(erlang:length(U_neighbors)) < 0 of true -> mochi_nth(erlang:length(U_neighbors) + rand_int(erlang:length(U_neighbors)) + 1, U_neighbors); _ -> mochi_nth(rand_int(erlang:length(U_neighbors)) + 1, U_neighbors) end end),
            Uv = (U ++ V),
            Uv_neighbors = [],
            I_7 = 0,
            Fun_6 = fun Fun_6_loop(Contracted_2, Graph, Graph_copy_2, I_7, Nodes, U, U_neighbors, Uv, Uv_neighbors, V) ->
    case (I_7 < erlang:length(maps:get(U, Graph_copy_2, nil))) of
        true ->
            N_2 = (case erlang:is_map(maps:get(U, Graph_copy_2, nil)) of true -> maps:get(I_7, maps:get(U, Graph_copy_2, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get(U, Graph_copy_2, nil)) + I_7 + 1, maps:get(U, Graph_copy_2, nil)); _ -> mochi_nth(I_7 + 1, maps:get(U, Graph_copy_2, nil)) end end),
            case (((N_2 /= U) andalso (N_2 /= V)) andalso (mochi_member(N_2, Uv_neighbors) == false)) of
        true -> Uv_neighbors_2 = lists:append((case Uv_neighbors of nil -> []; _ -> Uv_neighbors end), [N_2]),
            Uv_neighbors_3 = Uv_neighbors_2;
        _ -> Uv_neighbors_3 = Uv_neighbors
    end,
            I_8 = (I_7 + 1),
            Fun_6_loop(Contracted_2, Graph, Graph_copy_2, I_8, Nodes, U, U_neighbors, Uv, Uv_neighbors_3, V);
        _ -> {Contracted_2, Graph, Graph_copy_2, I_7, Nodes, U, U_neighbors, Uv, Uv_neighbors, V}
    end
end,
{Contracted_2, Graph, Graph_copy_2, I_8, Nodes, U, U_neighbors, Uv, Uv_neighbors_3, V} = Fun_6(Contracted_2, Graph, Graph_copy_2, I_7, Nodes, U, U_neighbors, Uv, Uv_neighbors, V),
            I_9 = 0,
            Fun_7 = fun Fun_7_loop(Contracted_2, Graph, Graph_copy_2, I_9, Nodes, U, U_neighbors, Uv, Uv_neighbors_3, V) ->
    case (I_9 < erlang:length(maps:get(V, Graph_copy_2, nil))) of
        true ->
            N_3 = (case erlang:is_map(maps:get(V, Graph_copy_2, nil)) of true -> maps:get(I_9, maps:get(V, Graph_copy_2, nil), nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(maps:get(V, Graph_copy_2, nil)) + I_9 + 1, maps:get(V, Graph_copy_2, nil)); _ -> mochi_nth(I_9 + 1, maps:get(V, Graph_copy_2, nil)) end end),
            case (((N_3 /= U) andalso (N_3 /= V)) andalso (mochi_member(N_3, Uv_neighbors_3) == false)) of
        true -> Uv_neighbors_4 = lists:append((case Uv_neighbors_3 of nil -> []; _ -> Uv_neighbors_3 end), [N_3]),
            Uv_neighbors_5 = Uv_neighbors_4;
        _ -> Uv_neighbors_5 = Uv_neighbors_3
    end,
            I_10 = (I_9 + 1),
            Fun_7_loop(Contracted_2, Graph, Graph_copy_2, I_10, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V);
        _ -> {Contracted_2, Graph, Graph_copy_2, I_9, Nodes, U, U_neighbors, Uv, Uv_neighbors_3, V}
    end
end,
{Contracted_2, Graph, Graph_copy_2, I_10, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V} = Fun_7(Contracted_2, Graph, Graph_copy_2, I_9, Nodes, U, U_neighbors, Uv, Uv_neighbors_3, V),
            Graph_copy_3 = maps:put(Uv, Uv_neighbors_5, Graph_copy_2),
            K = 0,
            Fun_8 = fun Fun_8_loop(Contracted_2, Graph, Graph_copy_3, I_10, K, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V) ->
    case (K < erlang:length(Uv_neighbors_5)) of
        true ->
            Nb = (case erlang:is_map(Uv_neighbors_5) of true -> maps:get(K, Uv_neighbors_5, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Uv_neighbors_5) + K + 1, Uv_neighbors_5); _ -> mochi_nth(K + 1, Uv_neighbors_5) end end),
            Graph_copy_4 = maps:put(Nb, lists:append((case maps:get(Nb, Graph_copy_3, nil) of nil -> []; _ -> maps:get(Nb, Graph_copy_3, nil) end), [Uv]), Graph_copy_3),
            Graph_copy_5 = maps:put(Nb, remove_all(maps:get(Nb, Graph_copy_4, nil), U), Graph_copy_4),
            Graph_copy_6 = maps:put(Nb, remove_all(maps:get(Nb, Graph_copy_5, nil), V), Graph_copy_5),
            K_2 = (K + 1),
            Fun_8_loop(Contracted_2, Graph, Graph_copy_6, I_10, K_2, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V);
        _ -> {Contracted_2, Graph, Graph_copy_3, I_10, K, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V}
    end
end,
{Contracted_2, Graph, Graph_copy_6, I_10, K_2, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V} = Fun_8(Contracted_2, Graph, Graph_copy_3, I_10, K, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V),
            Group = [],
            I_11 = 0,
            Fun_9 = fun Fun_9_loop(Contracted_2, Graph, Graph_copy_6, Group, I_11, K_2, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V) ->
    case (I_11 < erlang:length(maps:get(U, Contracted_2, nil))) of
        true ->
            Group_2 = lists:append((case Group of nil -> []; _ -> Group end), [(case erlang:is_map(maps:get(U, Contracted_2, nil)) of true -> maps:get(I_11, maps:get(U, Contracted_2, nil), nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(maps:get(U, Contracted_2, nil)) + I_11 + 1, maps:get(U, Contracted_2, nil)); _ -> mochi_nth(I_11 + 1, maps:get(U, Contracted_2, nil)) end end)]),
            I_12 = (I_11 + 1),
            Fun_9_loop(Contracted_2, Graph, Graph_copy_6, Group_2, I_12, K_2, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V);
        _ -> {Contracted_2, Graph, Graph_copy_6, Group, I_11, K_2, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V}
    end
end,
{Contracted_2, Graph, Graph_copy_6, Group_2, I_12, K_2, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V} = Fun_9(Contracted_2, Graph, Graph_copy_6, Group, I_11, K_2, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V),
            I_13 = 0,
            Fun_10 = fun Fun_10_loop(Contracted_2, Graph, Graph_copy_6, Group_2, I_13, K_2, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V) ->
    case (I_13 < erlang:length(maps:get(V, Contracted_2, nil))) of
        true ->
            Val = (case erlang:is_map(maps:get(V, Contracted_2, nil)) of true -> maps:get(I_13, maps:get(V, Contracted_2, nil), nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(maps:get(V, Contracted_2, nil)) + I_13 + 1, maps:get(V, Contracted_2, nil)); _ -> mochi_nth(I_13 + 1, maps:get(V, Contracted_2, nil)) end end),
            case (mochi_member(Val, Group_2) == false) of
        true -> Group_3 = lists:append((case Group_2 of nil -> []; _ -> Group_2 end), [Val]),
            Group_4 = Group_3;
        _ -> Group_4 = Group_2
    end,
            I_14 = (I_13 + 1),
            Fun_10_loop(Contracted_2, Graph, Graph_copy_6, Group_4, I_14, K_2, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V);
        _ -> {Contracted_2, Graph, Graph_copy_6, Group_2, I_13, K_2, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V}
    end
end,
{Contracted_2, Graph, Graph_copy_6, Group_4, I_14, K_2, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V} = Fun_10(Contracted_2, Graph, Graph_copy_6, Group_2, I_13, K_2, Nodes, U, U_neighbors, Uv, Uv_neighbors_5, V),
            Contracted_3 = maps:put(Uv, Group_4, Contracted_2),
            Nodes_2 = remove_all(Nodes, U),
            Nodes_3 = remove_all(Nodes_2, V),
            Nodes_4 = lists:append((case Nodes_3 of nil -> []; _ -> Nodes_3 end), [Uv]),
            Fun_11_loop(Contracted_3, Graph, Graph_copy_6, Nodes_4);
        _ -> {Contracted_2, Graph, Graph_copy_2, Nodes}
    end
end,
{Contracted_3, Graph, Graph_copy_6, Nodes_4} = Fun_11(Contracted_2, Graph, Graph_copy_2, Nodes),
        Groups = [],
        J = 0,
        Fun_12 = fun Fun_12_loop(Contracted_3, Graph, Graph_copy_6, Groups, J, Nodes_4) ->
    case (J < erlang:length(Nodes_4)) of
        true ->
            N_4 = (case erlang:is_map(Nodes_4) of true -> maps:get(J, Nodes_4, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Nodes_4) + J + 1, Nodes_4); _ -> mochi_nth(J + 1, Nodes_4) end end),
            Groups_2 = lists:append((case Groups of nil -> []; _ -> Groups end), [maps:get(N_4, Contracted_3, nil)]),
            J_2 = (J + 1),
            Fun_12_loop(Contracted_3, Graph, Graph_copy_6, Groups_2, J_2, Nodes_4);
        _ -> {Contracted_3, Graph, Graph_copy_6, Groups, J, Nodes_4}
    end
end,
{Contracted_3, Graph, Graph_copy_6, Groups_2, J_2, Nodes_4} = Fun_12(Contracted_3, Graph, Graph_copy_6, Groups, J, Nodes_4),
        GroupA = (case erlang:is_map(Groups_2) of true -> maps:get(0, Groups_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Groups_2) + 0 + 1, Groups_2); _ -> mochi_nth(0 + 1, Groups_2) end end),
        GroupB = (case erlang:is_map(Groups_2) of true -> maps:get(1, Groups_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Groups_2) + 1 + 1, Groups_2); _ -> mochi_nth(1 + 1, Groups_2) end end),
        Cut = [],
        J_3 = 0,
        Fun_14 = fun Fun_14_loop(Contracted_3, Cut, Graph, Graph_copy_6, GroupA, GroupB, Groups_2, J_3, Nodes_4) ->
    case (J_3 < erlang:length(GroupA)) of
        true ->
            Node_3 = (case erlang:is_map(GroupA) of true -> maps:get(J_3, GroupA, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(GroupA) + J_3 + 1, GroupA); _ -> mochi_nth(J_3 + 1, GroupA) end end),
            Neigh_2 = maps:get(Node_3, Graph, nil),
            L = 0,
            Fun_13 = fun Fun_13_loop(Contracted_3, Cut, Graph, Graph_copy_6, GroupA, GroupB, Groups_2, J_3, L, Neigh_2, Node_3, Nodes_4) ->
    case (L < erlang:length(Neigh_2)) of
        true ->
            Nb_2 = (case erlang:is_map(Neigh_2) of true -> maps:get(L, Neigh_2, nil); _ -> case L < 0 of true -> mochi_nth(erlang:length(Neigh_2) + L + 1, Neigh_2); _ -> mochi_nth(L + 1, Neigh_2) end end),
            case mochi_member(Nb_2, GroupB) of
        true -> Cut_2 = lists:append((case Cut of nil -> []; _ -> Cut end), [#{"a" => Node_3, "b" => Nb_2}]),
            Cut_3 = Cut_2;
        _ -> Cut_3 = Cut
    end,
            L_2 = (L + 1),
            Fun_13_loop(Contracted_3, Cut_3, Graph, Graph_copy_6, GroupA, GroupB, Groups_2, J_3, L_2, Neigh_2, Node_3, Nodes_4);
        _ -> {Contracted_3, Cut, Graph, Graph_copy_6, GroupA, GroupB, Groups_2, J_3, L, Neigh_2, Node_3, Nodes_4}
    end
end,
{Contracted_3, Cut_3, Graph, Graph_copy_6, GroupA, GroupB, Groups_2, J_3, L_2, Neigh_2, Node_3, Nodes_4} = Fun_13(Contracted_3, Cut, Graph, Graph_copy_6, GroupA, GroupB, Groups_2, J_3, L, Neigh_2, Node_3, Nodes_4),
            J_4 = (J_3 + 1),
            Fun_14_loop(Contracted_3, Cut_3, Graph, Graph_copy_6, GroupA, GroupB, Groups_2, J_4, Nodes_4);
        _ -> {Contracted_3, Cut, Graph, Graph_copy_6, GroupA, GroupB, Groups_2, J_3, Nodes_4}
    end
end,
{Contracted_3, Cut_3, Graph, Graph_copy_6, GroupA, GroupB, Groups_2, J_4, Nodes_4} = Fun_14(Contracted_3, Cut, Graph, Graph_copy_6, GroupA, GroupB, Groups_2, J_3, Nodes_4),
        Cut_3
    catch {return, RetCatch} -> RetCatch end.

cut_to_string(Cut_4) ->
    try
        S = "{",
        I_15 = 0,
        Fun_15 = fun Fun_15_loop(Cut_4, I_15, S) ->
    case (I_15 < erlang:length(Cut_4)) of
        true ->
            P = (case erlang:is_map(Cut_4) of true -> maps:get(I_15, Cut_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Cut_4) + I_15 + 1, Cut_4); _ -> mochi_nth(I_15 + 1, Cut_4) end end),
            S_2 = (((((S ++ "(") ++ maps:get("a", P, nil)) ++ ", ") ++ maps:get("b", P, nil)) ++ ")"),
            case (I_15 < (erlang:length(Cut_4) - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_16 = (I_15 + 1),
            Fun_15_loop(Cut_4, I_16, S_4);
        _ -> {Cut_4, I_15, S}
    end
end,
{Cut_4, I_16, S_4} = Fun_15(Cut_4, I_15, S),
        S_5 = (S_4 ++ "}"),
        S_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    erlang:put('TEST_GRAPH', #{"1" => ["2", "3", "4", "5"], "2" => ["1", "3", "4", "5"], "3" => ["1", "2", "4", "5", "10"], "4" => ["1", "2", "3", "5", "6"], "5" => ["1", "2", "3", "4", "7"], "6" => ["7", "8", "9", "10", "4"], "7" => ["6", "8", "9", "10", "5"], "8" => ["6", "7", "9", "10"], "9" => ["6", "7", "8", "10"], "10" => ["6", "7", "8", "9", "3"]}),
    erlang:put('result', partition_graph(erlang:get('TEST_GRAPH'))),
    io:format("~ts~n", [mochi_repr(cut_to_string(erlang:get('result')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
