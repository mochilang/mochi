#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1]).

% Generated by Mochi transpiler v0.10.65 (f942880281) on 2025-08-13 16:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('G', #{"A" => #{"B" => 2, "C" => 5}, "B" => #{"A" => 2, "D" => 3, "E" => 1, "F" => 1}, "C" => #{"A" => 5, "F" => 3}, "D" => #{"B" => 3}, "E" => #{"B" => 4, "F" => 3}, "F" => #{"C" => 3, "E" => 3}}),
    erlang:put('heap', [#{"node" => "E", "cost" => 0}]),
    erlang:put('visited', #{}),
    erlang:put('result', -1),
    Fun_4 = fun Fun_4_loop() ->
    case (erlang:length(erlang:get('heap')) > 0) of
        true ->
            try
                Best_idx = 0,
                I = 1,
                Fun = fun Fun_loop(Best_idx, I) ->
    case (I < erlang:length(erlang:get('heap'))) of
        true ->
            case (maps:get("cost", (case erlang:is_map(erlang:get('heap')) of true -> maps:get(I, erlang:get('heap'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + I + 1, erlang:get('heap')); _ -> mochi_nth(I + 1, erlang:get('heap')) end end), nil) < maps:get("cost", (case erlang:is_map(erlang:get('heap')) of true -> maps:get(Best_idx, erlang:get('heap'), nil); _ -> case Best_idx < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + Best_idx + 1, erlang:get('heap')); _ -> mochi_nth(Best_idx + 1, erlang:get('heap')) end end), nil)) of
        true -> Best_idx_2 = I,
            Best_idx_3 = Best_idx_2;
        _ -> Best_idx_3 = Best_idx
    end,
            I_2 = (I + 1),
            Fun_loop(Best_idx_3, I_2);
        _ -> {Best_idx, I}
    end
end,
{Best_idx_3, I_2} = Fun(Best_idx, I),
                Best = (case erlang:is_map(erlang:get('heap')) of true -> maps:get(Best_idx_3, erlang:get('heap'), nil); _ -> case Best_idx_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + Best_idx_3 + 1, erlang:get('heap')); _ -> mochi_nth(Best_idx_3 + 1, erlang:get('heap')) end end),
                New_heap = [],
                J = 0,
                Fun_2 = fun Fun_2_loop(Best, Best_idx_3, I_2, J, New_heap) ->
    case (J < erlang:length(erlang:get('heap'))) of
        true ->
            case (J /= Best_idx_3) of
        true -> New_heap_2 = lists:append((case New_heap of nil -> []; _ -> New_heap end), [(case erlang:is_map(erlang:get('heap')) of true -> maps:get(J, erlang:get('heap'), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(erlang:get('heap')) + J + 1, erlang:get('heap')); _ -> mochi_nth(J + 1, erlang:get('heap')) end end)]),
            New_heap_3 = New_heap_2;
        _ -> New_heap_3 = New_heap
    end,
            J_2 = (J + 1),
            Fun_2_loop(Best, Best_idx_3, I_2, J_2, New_heap_3);
        _ -> {Best, Best_idx_3, I_2, J, New_heap}
    end
end,
{Best, Best_idx_3, I_2, J_2, New_heap_3} = Fun_2(Best, Best_idx_3, I_2, J, New_heap),
                erlang:put('heap', New_heap_3),
                U = maps:get("node", Best, nil),
                Cost = maps:get("cost", Best, nil),
                case maps:is_key(U, erlang:get('visited')) of
        true -> throw({continue});
        _ -> ok
    end,
                Visited_tmp = lists:sublist(erlang:get('visited'), U) ++ [true] ++ lists:nthtail(U + 1, erlang:get('visited')),
                erlang:put('visited', Visited_tmp),
                case (U == "C") of
        true -> erlang:put('result', Cost),
            throw(break);
        _ -> ok
    end,
                Fun_3 = fun Fun_3_loop(List, Best, Best_idx_3, Cost, I_2, J_2, New_heap_3, U, Visited_tmp) ->
    case List of
        [] -> {Best, Best_idx_3, Cost, I_2, J_2, New_heap_3, U, Visited_tmp};
        [V|V_rest] ->
        try
            case maps:is_key(V, erlang:get('visited')) of
        true -> throw({continue, Best, Best_idx_3, Cost, I_2, J_2, New_heap_3, U, Visited_tmp});
        _ -> ok
    end,
            Next_cost = (Cost + maps:get(V, maps:get(U, erlang:get('G'), nil), nil)),
            erlang:put('heap', lists:append((case erlang:get('heap') of nil -> []; _ -> erlang:get('heap') end), [#{"node" => V, "cost" => Next_cost}])),
            Fun_3_loop(V_rest, Best, Best_idx_3, Cost, I_2, J_2, New_heap_3, U, Visited_tmp)
        catch
            {continue, C0, C1, C2, C3, C4, C5, C6, C7} -> Fun_3_loop(V_rest, C0, C1, C2, C3, C4, C5, C6, C7);
            {break, B0, B1, B2, B3, B4, B5, B6, B7} -> {B0, B1, B2, B3, B4, B5, B6, B7};
            break -> {Best, Best_idx_3, Cost, I_2, J_2, New_heap_3, U, Visited_tmp}
        end;
        _ -> {Best, Best_idx_3, Cost, I_2, J_2, New_heap_3, U, Visited_tmp}
    end
end,
{Best, Best_idx_3, Cost, I_2, J_2, New_heap_3, U, Visited_tmp} = Fun_3(maps:keys(maps:get(U, erlang:get('G'), nil)), Best, Best_idx_3, Cost, I_2, J_2, New_heap_3, U, Visited_tmp),
                Fun_4_loop()
            catch
                {continue} -> Fun_4_loop();
                {break} -> {}
            end;
        _ -> {}
    end
end,
{} = Fun_4(),
    io:format("~ts~n", [mochi_repr(erlang:get('result'))]),
    erlang:put('G2', #{"B" => #{"C" => 1}, "C" => #{"D" => 1}, "D" => #{"F" => 1}, "E" => #{"B" => 1, "F" => 3}, "F" => #{}}),
    erlang:put('heap2', [#{"node" => "E", "cost" => 0}]),
    erlang:put('visited2', #{}),
    erlang:put('result2', -1),
    Fun_8 = fun Fun_8_loop() ->
    case (erlang:length(erlang:get('heap2')) > 0) of
        true ->
            try
                Best2_idx = 0,
                I2 = 1,
                Fun_5 = fun Fun_5_loop(Best2_idx, I2) ->
    case (I2 < erlang:length(erlang:get('heap2'))) of
        true ->
            case (maps:get("cost", (case erlang:is_map(erlang:get('heap2')) of true -> maps:get(I2, erlang:get('heap2'), nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(erlang:get('heap2')) + I2 + 1, erlang:get('heap2')); _ -> mochi_nth(I2 + 1, erlang:get('heap2')) end end), nil) < maps:get("cost", (case erlang:is_map(erlang:get('heap2')) of true -> maps:get(Best2_idx, erlang:get('heap2'), nil); _ -> case Best2_idx < 0 of true -> mochi_nth(erlang:length(erlang:get('heap2')) + Best2_idx + 1, erlang:get('heap2')); _ -> mochi_nth(Best2_idx + 1, erlang:get('heap2')) end end), nil)) of
        true -> Best2_idx_2 = I2,
            Best2_idx_3 = Best2_idx_2;
        _ -> Best2_idx_3 = Best2_idx
    end,
            I2_2 = (I2 + 1),
            Fun_5_loop(Best2_idx_3, I2_2);
        _ -> {Best2_idx, I2}
    end
end,
{Best2_idx_3, I2_2} = Fun_5(Best2_idx, I2),
                Best2 = (case erlang:is_map(erlang:get('heap2')) of true -> maps:get(Best2_idx_3, erlang:get('heap2'), nil); _ -> case Best2_idx_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('heap2')) + Best2_idx_3 + 1, erlang:get('heap2')); _ -> mochi_nth(Best2_idx_3 + 1, erlang:get('heap2')) end end),
                New_heap2 = [],
                J2 = 0,
                Fun_6 = fun Fun_6_loop(Best2, Best2_idx_3, I2_2, J2, New_heap2) ->
    case (J2 < erlang:length(erlang:get('heap2'))) of
        true ->
            case (J2 /= Best2_idx_3) of
        true -> New_heap2_2 = lists:append((case New_heap2 of nil -> []; _ -> New_heap2 end), [(case erlang:is_map(erlang:get('heap2')) of true -> maps:get(J2, erlang:get('heap2'), nil); _ -> case J2 < 0 of true -> mochi_nth(erlang:length(erlang:get('heap2')) + J2 + 1, erlang:get('heap2')); _ -> mochi_nth(J2 + 1, erlang:get('heap2')) end end)]),
            New_heap2_3 = New_heap2_2;
        _ -> New_heap2_3 = New_heap2
    end,
            J2_2 = (J2 + 1),
            Fun_6_loop(Best2, Best2_idx_3, I2_2, J2_2, New_heap2_3);
        _ -> {Best2, Best2_idx_3, I2_2, J2, New_heap2}
    end
end,
{Best2, Best2_idx_3, I2_2, J2_2, New_heap2_3} = Fun_6(Best2, Best2_idx_3, I2_2, J2, New_heap2),
                erlang:put('heap2', New_heap2_3),
                U2 = maps:get("node", Best2, nil),
                Cost2 = maps:get("cost", Best2, nil),
                case maps:is_key(U2, erlang:get('visited2')) of
        true -> throw({continue});
        _ -> ok
    end,
                Visited2_tmp = lists:sublist(erlang:get('visited2'), U2) ++ [true] ++ lists:nthtail(U2 + 1, erlang:get('visited2')),
                erlang:put('visited2', Visited2_tmp),
                case (U2 == "F") of
        true -> erlang:put('result2', Cost2),
            throw(break);
        _ -> ok
    end,
                Fun_7 = fun Fun_7_loop(List, Best2, Best2_idx_3, Cost2, I2_2, J2_2, New_heap2_3, U2, Visited2_tmp) ->
    case List of
        [] -> {Best2, Best2_idx_3, Cost2, I2_2, J2_2, New_heap2_3, U2, Visited2_tmp};
        [V2|V2_rest] ->
        try
            case maps:is_key(V2, erlang:get('visited2')) of
        true -> throw({continue, Best2, Best2_idx_3, Cost2, I2_2, J2_2, New_heap2_3, U2, Visited2_tmp});
        _ -> ok
    end,
            Next_cost2 = (Cost2 + maps:get(V2, maps:get(U2, erlang:get('G2'), nil), nil)),
            erlang:put('heap2', lists:append((case erlang:get('heap2') of nil -> []; _ -> erlang:get('heap2') end), [#{"node" => V2, "cost" => Next_cost2}])),
            Fun_7_loop(V2_rest, Best2, Best2_idx_3, Cost2, I2_2, J2_2, New_heap2_3, U2, Visited2_tmp)
        catch
            {continue, C0, C1, C2, C3, C4, C5, C6, C7} -> Fun_7_loop(V2_rest, C0, C1, C2, C3, C4, C5, C6, C7);
            {break, B0, B1, B2, B3, B4, B5, B6, B7} -> {B0, B1, B2, B3, B4, B5, B6, B7};
            break -> {Best2, Best2_idx_3, Cost2, I2_2, J2_2, New_heap2_3, U2, Visited2_tmp}
        end;
        _ -> {Best2, Best2_idx_3, Cost2, I2_2, J2_2, New_heap2_3, U2, Visited2_tmp}
    end
end,
{Best2, Best2_idx_3, Cost2, I2_2, J2_2, New_heap2_3, U2, Visited2_tmp} = Fun_7(maps:keys(maps:get(U2, erlang:get('G2'), nil)), Best2, Best2_idx_3, Cost2, I2_2, J2_2, New_heap2_3, U2, Visited2_tmp),
                Fun_8_loop()
            catch
                {continue} -> Fun_8_loop();
                {break} -> {}
            end;
        _ -> {}
    end
end,
{} = Fun_8(),
    io:format("~ts~n", [mochi_repr(erlang:get('result2'))]),
    erlang:put('G3', #{"B" => #{"C" => 1}, "C" => #{"D" => 1}, "D" => #{"F" => 1}, "E" => #{"B" => 1, "G" => 2}, "F" => #{}, "G" => #{"F" => 1}}),
    erlang:put('heap3', [#{"node" => "E", "cost" => 0}]),
    erlang:put('visited3', #{}),
    erlang:put('result3', -1),
    Fun_12 = fun Fun_12_loop() ->
    case (erlang:length(erlang:get('heap3')) > 0) of
        true ->
            try
                Best3_idx = 0,
                I3 = 1,
                Fun_9 = fun Fun_9_loop(Best3_idx, I3) ->
    case (I3 < erlang:length(erlang:get('heap3'))) of
        true ->
            case (maps:get("cost", (case erlang:is_map(erlang:get('heap3')) of true -> maps:get(I3, erlang:get('heap3'), nil); _ -> case I3 < 0 of true -> mochi_nth(erlang:length(erlang:get('heap3')) + I3 + 1, erlang:get('heap3')); _ -> mochi_nth(I3 + 1, erlang:get('heap3')) end end), nil) < maps:get("cost", (case erlang:is_map(erlang:get('heap3')) of true -> maps:get(Best3_idx, erlang:get('heap3'), nil); _ -> case Best3_idx < 0 of true -> mochi_nth(erlang:length(erlang:get('heap3')) + Best3_idx + 1, erlang:get('heap3')); _ -> mochi_nth(Best3_idx + 1, erlang:get('heap3')) end end), nil)) of
        true -> Best3_idx_2 = I3,
            Best3_idx_3 = Best3_idx_2;
        _ -> Best3_idx_3 = Best3_idx
    end,
            I3_2 = (I3 + 1),
            Fun_9_loop(Best3_idx_3, I3_2);
        _ -> {Best3_idx, I3}
    end
end,
{Best3_idx_3, I3_2} = Fun_9(Best3_idx, I3),
                Best3 = (case erlang:is_map(erlang:get('heap3')) of true -> maps:get(Best3_idx_3, erlang:get('heap3'), nil); _ -> case Best3_idx_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('heap3')) + Best3_idx_3 + 1, erlang:get('heap3')); _ -> mochi_nth(Best3_idx_3 + 1, erlang:get('heap3')) end end),
                New_heap3 = [],
                J3 = 0,
                Fun_10 = fun Fun_10_loop(Best3, Best3_idx_3, I3_2, J3, New_heap3) ->
    case (J3 < erlang:length(erlang:get('heap3'))) of
        true ->
            case (J3 /= Best3_idx_3) of
        true -> New_heap3_2 = lists:append((case New_heap3 of nil -> []; _ -> New_heap3 end), [(case erlang:is_map(erlang:get('heap3')) of true -> maps:get(J3, erlang:get('heap3'), nil); _ -> case J3 < 0 of true -> mochi_nth(erlang:length(erlang:get('heap3')) + J3 + 1, erlang:get('heap3')); _ -> mochi_nth(J3 + 1, erlang:get('heap3')) end end)]),
            New_heap3_3 = New_heap3_2;
        _ -> New_heap3_3 = New_heap3
    end,
            J3_2 = (J3 + 1),
            Fun_10_loop(Best3, Best3_idx_3, I3_2, J3_2, New_heap3_3);
        _ -> {Best3, Best3_idx_3, I3_2, J3, New_heap3}
    end
end,
{Best3, Best3_idx_3, I3_2, J3_2, New_heap3_3} = Fun_10(Best3, Best3_idx_3, I3_2, J3, New_heap3),
                erlang:put('heap3', New_heap3_3),
                U3 = maps:get("node", Best3, nil),
                Cost3 = maps:get("cost", Best3, nil),
                case maps:is_key(U3, erlang:get('visited3')) of
        true -> throw({continue});
        _ -> ok
    end,
                Visited3_tmp = lists:sublist(erlang:get('visited3'), U3) ++ [true] ++ lists:nthtail(U3 + 1, erlang:get('visited3')),
                erlang:put('visited3', Visited3_tmp),
                case (U3 == "F") of
        true -> erlang:put('result3', Cost3),
            throw(break);
        _ -> ok
    end,
                Fun_11 = fun Fun_11_loop(List, Best3, Best3_idx_3, Cost3, I3_2, J3_2, New_heap3_3, U3, Visited3_tmp) ->
    case List of
        [] -> {Best3, Best3_idx_3, Cost3, I3_2, J3_2, New_heap3_3, U3, Visited3_tmp};
        [V3|V3_rest] ->
        try
            case maps:is_key(V3, erlang:get('visited3')) of
        true -> throw({continue, Best3, Best3_idx_3, Cost3, I3_2, J3_2, New_heap3_3, U3, Visited3_tmp});
        _ -> ok
    end,
            Next_cost3 = (Cost3 + maps:get(V3, maps:get(U3, erlang:get('G3'), nil), nil)),
            erlang:put('heap3', lists:append((case erlang:get('heap3') of nil -> []; _ -> erlang:get('heap3') end), [#{"node" => V3, "cost" => Next_cost3}])),
            Fun_11_loop(V3_rest, Best3, Best3_idx_3, Cost3, I3_2, J3_2, New_heap3_3, U3, Visited3_tmp)
        catch
            {continue, C0, C1, C2, C3, C4, C5, C6, C7} -> Fun_11_loop(V3_rest, C0, C1, C2, C3, C4, C5, C6, C7);
            {break, B0, B1, B2, B3, B4, B5, B6, B7} -> {B0, B1, B2, B3, B4, B5, B6, B7};
            break -> {Best3, Best3_idx_3, Cost3, I3_2, J3_2, New_heap3_3, U3, Visited3_tmp}
        end;
        _ -> {Best3, Best3_idx_3, Cost3, I3_2, J3_2, New_heap3_3, U3, Visited3_tmp}
    end
end,
{Best3, Best3_idx_3, Cost3, I3_2, J3_2, New_heap3_3, U3, Visited3_tmp} = Fun_11(maps:keys(maps:get(U3, erlang:get('G3'), nil)), Best3, Best3_idx_3, Cost3, I3_2, J3_2, New_heap3_3, U3, Visited3_tmp),
                Fun_12_loop()
            catch
                {continue} -> Fun_12_loop();
                {break} -> {}
            end;
        _ -> {}
    end
end,
{} = Fun_12(),
    io:format("~ts~n", [mochi_repr(erlang:get('result3'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
