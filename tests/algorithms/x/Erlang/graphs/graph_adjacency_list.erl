#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, create_graph/3, add_vertex/2, remove_from_list/2, remove_key/2, add_edge/3, remove_edge/3, remove_vertex/2, contains_vertex/2, contains_edge/3, clear_graph/1, to_string/1, main/0]).

% Generated by Mochi transpiler v0.10.66 (951718e85a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

create_graph(Vertices, Edges, Directed) ->
    try
        Adj = #{},
        Fun = fun Fun_loop(List, Adj, Directed, Edges, Vertices) ->
    case List of
        [] -> {Adj, Directed, Edges, Vertices};
        [V|V_rest] ->
            Adj_2 = maps:put(V, [], Adj),
            Fun_loop(V_rest, Adj_2, Directed, Edges, Vertices);
        _ -> {Adj, Directed, Edges, Vertices}
    end
end,
{Adj_2, Directed, Edges, Vertices} = Fun(Vertices, Adj, Directed, Edges, Vertices),
        Fun_2 = fun Fun_2_loop(List, Adj_2, Directed, Edges, Vertices) ->
    case List of
        [] -> {Adj_2, Directed, Edges, Vertices};
        [E|E_rest] ->
            S = (case erlang:is_map(E) of true -> maps:get(0, E, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(E) + 0 + 1, E); _ -> mochi_nth(0 + 1, E) end end),
            D = (case erlang:is_map(E) of true -> maps:get(1, E, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(E) + 1 + 1, E); _ -> mochi_nth(1 + 1, E) end end),
            case mochi_not(maps:is_key(S, Adj_2)) of
        true -> Adj_3 = maps:put(S, [], Adj_2),
            Adj_4 = Adj_3;
        _ -> Adj_4 = Adj_2
    end,
            case mochi_not(maps:is_key(D, Adj_4)) of
        true -> Adj_5 = maps:put(D, [], Adj_4),
            Adj_6 = Adj_5;
        _ -> Adj_6 = Adj_4
    end,
            Adj_7 = maps:put(S, lists:append((case maps:get(S, Adj_6, nil) of nil -> []; _ -> maps:get(S, Adj_6, nil) end), [D]), Adj_6),
            case mochi_not(Directed) of
        true -> Adj_8 = maps:put(D, lists:append((case maps:get(D, Adj_7, nil) of nil -> []; _ -> maps:get(D, Adj_7, nil) end), [S]), Adj_7),
            Adj_9 = Adj_8;
        _ -> Adj_9 = Adj_7
    end,
            Fun_2_loop(E_rest, Adj_9, Directed, Edges, Vertices);
        _ -> {Adj_2, Directed, Edges, Vertices}
    end
end,
{Adj_9, Directed, Edges, Vertices} = Fun_2(Edges, Adj_2, Directed, Edges, Vertices),
        #{"adj" => Adj_9, "directed" => Directed}
    catch {return, RetCatch} -> RetCatch end.

add_vertex(Graph, V_2) ->
    try
        case maps:is_key(V_2, maps:get("adj", Graph, nil)) of
        true -> erlang:error({panic, "vertex exists"});
        _ -> ok
    end,
        Adj_10 = #{},
        Fun_3 = fun Fun_3_loop(List, Adj_10, Graph, V_2) ->
    case List of
        [] -> {Adj_10, Graph, V_2};
        [K|K_rest] ->
            Adj_11 = maps:put(K, maps:get(K, maps:get("adj", Graph, nil), nil), Adj_10),
            Fun_3_loop(K_rest, Adj_11, Graph, V_2);
        _ -> {Adj_10, Graph, V_2}
    end
end,
{Adj_11, Graph, V_2} = Fun_3(maps:keys(maps:get("adj", Graph, nil)), Adj_10, Graph, V_2),
        Adj_12 = maps:put(V_2, [], Adj_11),
        #{"adj" => Adj_12, "directed" => maps:get("directed", Graph, nil)}
    catch {return, RetCatch} -> RetCatch end.

remove_from_list(Lst, Value) ->
    try
        Res = [],
        I = 0,
        Fun_4 = fun Fun_4_loop(I, Lst, Res, Value) ->
    case (I < erlang:length(Lst)) of
        true ->
            case ((case erlang:is_map(Lst) of true -> maps:get(I, Lst, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Lst) + I + 1, Lst); _ -> mochi_nth(I + 1, Lst) end end) /= Value) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Lst) of true -> maps:get(I, Lst, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Lst) + I + 1, Lst); _ -> mochi_nth(I + 1, Lst) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_4_loop(I_2, Lst, Res_3, Value);
        _ -> {I, Lst, Res, Value}
    end
end,
{I_2, Lst, Res_3, Value} = Fun_4(I, Lst, Res, Value),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

remove_key(M, Key) ->
    try
        Res_4 = #{},
        Fun_5 = fun Fun_5_loop(List, Key, M, Res_4) ->
    case List of
        [] -> {Key, M, Res_4};
        [K_2|K_2_rest] ->
            case (K_2 /= Key) of
        true -> Res_5 = maps:put(K_2, maps:get(K_2, M, nil), Res_4),
            Res_6 = Res_5;
        _ -> Res_6 = Res_4
    end,
            Fun_5_loop(K_2_rest, Key, M, Res_6);
        _ -> {Key, M, Res_4}
    end
end,
{Key, M, Res_6} = Fun_5(maps:keys(M), Key, M, Res_4),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

add_edge(Graph_2, S_2, D_2) ->
    try
        case (mochi_not(maps:is_key(S_2, maps:get("adj", Graph_2, nil))) orelse mochi_not(maps:is_key(D_2, maps:get("adj", Graph_2, nil)))) of
        true -> erlang:error({panic, "vertex missing"});
        _ -> ok
    end,
        case contains_edge(Graph_2, S_2, D_2) of
        true -> erlang:error({panic, "edge exists"});
        _ -> ok
    end,
        Adj_13 = #{},
        Fun_6 = fun Fun_6_loop(List, Adj_13, D_2, Graph_2, S_2) ->
    case List of
        [] -> {Adj_13, D_2, Graph_2, S_2};
        [K_3|K_3_rest] ->
            Adj_14 = maps:put(K_3, maps:get(K_3, maps:get("adj", Graph_2, nil), nil), Adj_13),
            Fun_6_loop(K_3_rest, Adj_14, D_2, Graph_2, S_2);
        _ -> {Adj_13, D_2, Graph_2, S_2}
    end
end,
{Adj_14, D_2, Graph_2, S_2} = Fun_6(maps:keys(maps:get("adj", Graph_2, nil)), Adj_13, D_2, Graph_2, S_2),
        List_s = maps:get(S_2, Adj_14, nil),
        List_s_2 = lists:append((case List_s of nil -> []; _ -> List_s end), [D_2]),
        Adj_15 = maps:put(S_2, List_s_2, Adj_14),
        case mochi_not(maps:get("directed", Graph_2, nil)) of
        true -> List_d = maps:get(D_2, Adj_15, nil),
            List_d_2 = lists:append((case List_d of nil -> []; _ -> List_d end), [S_2]),
            Adj_16 = maps:put(D_2, List_d_2, Adj_15),
            Adj_17 = Adj_16,
            List_d_3 = List_d_2;
        _ -> Adj_17 = Adj_15,
            List_d_3 = nil
    end,
        #{"adj" => Adj_17, "directed" => maps:get("directed", Graph_2, nil)}
    catch {return, RetCatch} -> RetCatch end.

remove_edge(Graph_3, S_3, D_3) ->
    try
        case (mochi_not(maps:is_key(S_3, maps:get("adj", Graph_3, nil))) orelse mochi_not(maps:is_key(D_3, maps:get("adj", Graph_3, nil)))) of
        true -> erlang:error({panic, "vertex missing"});
        _ -> ok
    end,
        case mochi_not(contains_edge(Graph_3, S_3, D_3)) of
        true -> erlang:error({panic, "edge missing"});
        _ -> ok
    end,
        Adj_18 = #{},
        Fun_7 = fun Fun_7_loop(List, Adj_18, D_3, Graph_3, S_3) ->
    case List of
        [] -> {Adj_18, D_3, Graph_3, S_3};
        [K_4|K_4_rest] ->
            Adj_19 = maps:put(K_4, maps:get(K_4, maps:get("adj", Graph_3, nil), nil), Adj_18),
            Fun_7_loop(K_4_rest, Adj_19, D_3, Graph_3, S_3);
        _ -> {Adj_18, D_3, Graph_3, S_3}
    end
end,
{Adj_19, D_3, Graph_3, S_3} = Fun_7(maps:keys(maps:get("adj", Graph_3, nil)), Adj_18, D_3, Graph_3, S_3),
        Adj_20 = maps:put(S_3, remove_from_list(maps:get(S_3, Adj_19, nil), D_3), Adj_19),
        case mochi_not(maps:get("directed", Graph_3, nil)) of
        true -> Adj_21 = maps:put(D_3, remove_from_list(maps:get(D_3, Adj_20, nil), S_3), Adj_20),
            Adj_22 = Adj_21;
        _ -> Adj_22 = Adj_20
    end,
        #{"adj" => Adj_22, "directed" => maps:get("directed", Graph_3, nil)}
    catch {return, RetCatch} -> RetCatch end.

remove_vertex(Graph_4, V_3) ->
    try
        case mochi_not(maps:is_key(V_3, maps:get("adj", Graph_4, nil))) of
        true -> erlang:error({panic, "vertex missing"});
        _ -> ok
    end,
        Adj_23 = #{},
        Fun_8 = fun Fun_8_loop(List, Adj_23, Graph_4, V_3) ->
    case List of
        [] -> {Adj_23, Graph_4, V_3};
        [K_5|K_5_rest] ->
            case (K_5 /= V_3) of
        true -> Adj_24 = maps:put(K_5, remove_from_list(maps:get(K_5, maps:get("adj", Graph_4, nil), nil), V_3), Adj_23),
            Adj_25 = Adj_24;
        _ -> Adj_25 = Adj_23
    end,
            Fun_8_loop(K_5_rest, Adj_25, Graph_4, V_3);
        _ -> {Adj_23, Graph_4, V_3}
    end
end,
{Adj_25, Graph_4, V_3} = Fun_8(maps:keys(maps:get("adj", Graph_4, nil)), Adj_23, Graph_4, V_3),
        #{"adj" => Adj_25, "directed" => maps:get("directed", Graph_4, nil)}
    catch {return, RetCatch} -> RetCatch end.

contains_vertex(Graph_5, V_4) ->
    try
        maps:is_key(V_4, maps:get("adj", Graph_5, nil))
    catch {return, RetCatch} -> RetCatch end.

contains_edge(Graph_6, S_4, D_4) ->
    try
        case (mochi_not(maps:is_key(S_4, maps:get("adj", Graph_6, nil))) orelse mochi_not(maps:is_key(D_4, maps:get("adj", Graph_6, nil)))) of
        true -> erlang:error({panic, "vertex missing"});
        _ -> ok
    end,
        Fun_9 = fun Fun_9_loop(List, D_4, Graph_6, S_4) ->
    case List of
        [] -> {D_4, Graph_6, S_4};
        [X|X_rest] ->
            case (X == D_4) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_9_loop(X_rest, D_4, Graph_6, S_4);
        _ -> {D_4, Graph_6, S_4}
    end
end,
{D_4, Graph_6, S_4} = Fun_9(maps:keys(maps:get(S_4, maps:get("adj", Graph_6, nil), nil)), D_4, Graph_6, S_4),
        false
    catch {return, RetCatch} -> RetCatch end.

clear_graph(Graph_7) ->
    try
        #{"adj" => #{}, "directed" => maps:get("directed", Graph_7, nil)}
    catch {return, RetCatch} -> RetCatch end.

to_string(Graph_8) ->
    try
        mochi_str(maps:get("adj", Graph_8, nil))
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Vertices_2 = ["1", "2", "3", "4"],
        Edges_2 = [["1", "2"], ["2", "3"], ["3", "4"]],
        G = create_graph(Vertices_2, Edges_2, false),
        io:format("~ts~n", [mochi_repr(to_string(G))]),
        G_2 = add_vertex(G, "5"),
        G_3 = add_edge(G_2, "4", "5"),
        io:format("~ts~n", [mochi_str(contains_edge(G_3, "4", "5"))]),
        G_4 = remove_edge(G_3, "1", "2"),
        G_5 = remove_vertex(G_4, "3"),
        io:format("~ts~n", [mochi_repr(to_string(G_5))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
