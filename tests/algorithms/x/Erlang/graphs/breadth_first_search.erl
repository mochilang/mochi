#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, add_edge/3, print_graph/1, bfs/2]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

add_edge(Graph, From, To) ->
    try
        case maps:is_key(From, Graph) of
        true -> Graph_2 = maps:put(From, lists:append((case maps:get(From, Graph, nil) of nil -> []; _ -> maps:get(From, Graph, nil) end), [To]), Graph),
            Graph_4 = Graph_2;
        _ -> Graph_3 = maps:put(From, [To], Graph),
            Graph_4 = Graph_3
    end,
        nil
    catch {return, Ret} -> Ret end.

print_graph(Graph_5) ->
    try
        Fun = fun Fun_loop(List, Graph_5) ->
    case List of
        [] -> {Graph_5};
        [V|V_rest] ->
            Adj = maps:get(V, Graph_5, nil),
            Line = (mochi_str(V) ++ "  :  "),
            I = 0,
            Fun_2 = fun Fun_2_loop(Adj, Graph_5, I, Line, V) ->
    case (I < erlang:length(Adj)) of
        true ->
            Line_2 = (Line ++ mochi_str((case erlang:is_map(Adj) of true -> maps:get(I, Adj, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Adj) + I + 1, Adj); _ -> lists:nth(I + 1, Adj) end end))),
            case (I < (erlang:length(Adj) - 1)) of
        true -> Line_3 = (Line_2 ++ " -> "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            I_2 = (I + 1),
            Fun_2_loop(Adj, Graph_5, I_2, Line_4, V);
        _ -> {Adj, Graph_5, I, Line, V}
    end
end,
{Adj, Graph_5, I_2, Line_4, V} = Fun_2(Adj, Graph_5, I, Line, V),
            io:format("~ts~n", [mochi_repr(Line_4)]),
            Fun_loop(V_rest, Graph_5);
        _ -> {Graph_5}
    end
end,
{Graph_5} = Fun(maps:keys(Graph_5), Graph_5),
        nil
    catch {return, Ret} -> Ret end.

bfs(Graph_6, Start) ->
    try
        Visited = #{},
        Queue = [],
        Order = [],
        Queue_2 = lists:append((case Queue of nil -> []; _ -> Queue end), [Start]),
        Visited_2 = maps:put(Start, true, Visited),
        Head = 0,
        Fun_4 = fun Fun_4_loop(Graph_6, Head, Order, Queue_2, Start, Visited_2) ->
    case (Head < erlang:length(Queue_2)) of
        true ->
            Vertex = (case erlang:is_map(Queue_2) of true -> maps:get(Head, Queue_2, nil); _ -> case Head < 0 of true -> lists:nth(erlang:length(Queue_2) + Head + 1, Queue_2); _ -> lists:nth(Head + 1, Queue_2) end end),
            Head_2 = (Head + 1),
            Order_2 = lists:append((case Order of nil -> []; _ -> Order end), [Vertex]),
            Neighbors = maps:get(Vertex, Graph_6, nil),
            I_3 = 0,
            Fun_3 = fun Fun_3_loop(Graph_6, Head_2, I_3, Neighbors, Order_2, Queue_2, Start, Vertex, Visited_2) ->
    case (I_3 < erlang:length(Neighbors)) of
        true ->
            Neighbor = (case erlang:is_map(Neighbors) of true -> maps:get(I_3, Neighbors, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Neighbors) + I_3 + 1, Neighbors); _ -> lists:nth(I_3 + 1, Neighbors) end end),
            case mochi_not(maps:is_key(Neighbor, Visited_2)) of
        true -> Visited_3 = maps:put(Neighbor, true, Visited_2),
            Queue_3 = lists:append((case Queue_2 of nil -> []; _ -> Queue_2 end), [Neighbor]),
            Queue_4 = Queue_3,
            Visited_4 = Visited_3;
        _ -> Queue_4 = Queue_2,
            Visited_4 = Visited_2
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(Graph_6, Head_2, I_4, Neighbors, Order_2, Queue_4, Start, Vertex, Visited_4);
        _ -> {Graph_6, Head_2, I_3, Neighbors, Order_2, Queue_2, Start, Vertex, Visited_2}
    end
end,
{Graph_6, Head_2, I_4, Neighbors, Order_2, Queue_4, Start, Vertex, Visited_4} = Fun_3(Graph_6, Head_2, I_3, Neighbors, Order_2, Queue_2, Start, Vertex, Visited_2),
            Fun_4_loop(Graph_6, Head_2, Order_2, Queue_4, Start, Visited_4);
        _ -> {Graph_6, Head, Order, Queue_2, Start, Visited_2}
    end
end,
{Graph_6, Head_2, Order_2, Queue_4, Start, Visited_4} = Fun_4(Graph_6, Head, Order, Queue_2, Start, Visited_2),
        Order_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('g', #{}),
    add_edge(erlang:get('g'), 0, 1),
    add_edge(erlang:get('g'), 0, 2),
    add_edge(erlang:get('g'), 1, 2),
    add_edge(erlang:get('g'), 2, 0),
    add_edge(erlang:get('g'), 2, 3),
    add_edge(erlang:get('g'), 3, 3),
    print_graph(erlang:get('g')),
    io:format("~ts~n", [mochi_repr(bfs(erlang:get('g'), 2))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
