#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, abs/1, manhattan/4, clone_path/1, make_node/6, node_equal/2, contains/2, sort_nodes/1, get_successors/3, greedy_best_first/3, print_grid/1, main/0]).

% Generated by Mochi transpiler v0.10.65 (428ea06e9a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) ->
                K = case Key of
                    <<_/binary>> -> Key;
                    _ when is_integer(Key) -> <<Key>>;
                    _ -> list_to_binary(Key)
                end,
                binary:match(Coll, K) /= nomatch;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

abs(X) ->
    try
        (case (X < 0) of
    true -> (0 - X);
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

manhattan(X1, Y1, X2, Y2) ->
    try
        (erlang:abs((X1 - X2)) + erlang:abs((Y1 - Y2)))
    catch {return, RetCatch} -> RetCatch end.

clone_path(P) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, P, Res) ->
    case (I < erlang:length(P)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(P) of true -> maps:get(I, P, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(P) + I + 1, P); _ -> mochi_nth(I + 1, P) end end)]),
            I_2 = (I + 1),
            Fun_loop(I_2, P, Res_2);
        _ -> {I, P, Res}
    end
end,
{I_2, P, Res_2} = Fun(I, P, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

make_node(Pos_x, Pos_y, Goal_x, Goal_y, G_cost, Path) ->
    try
        F = manhattan(Pos_x, Pos_y, Goal_x, Goal_y),
        #{"pos_x" => Pos_x, "pos_y" => Pos_y, "goal_x" => Goal_x, "goal_y" => Goal_y, "g_cost" => G_cost, "f_cost" => F, "path" => Path}
    catch {return, RetCatch} -> RetCatch end.

node_equal(A, B) ->
    try
        ((maps:get("pos_x", A, nil) == maps:get("pos_x", B, nil)) andalso (maps:get("pos_y", A, nil) == maps:get("pos_y", B, nil)))
    catch {return, RetCatch} -> RetCatch end.

contains(Nodes, Node) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Node, Nodes) ->
    case (I_3 < erlang:length(Nodes)) of
        true ->
            case node_equal((case erlang:is_map(Nodes) of true -> maps:get(I_3, Nodes, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Nodes) + I_3 + 1, Nodes); _ -> mochi_nth(I_3 + 1, Nodes) end end), Node) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Node, Nodes);
        _ -> {I_3, Node, Nodes}
    end
end,
{I_4, Node, Nodes} = Fun_2(I_3, Node, Nodes),
        false
    catch {return, RetCatch} -> RetCatch end.

sort_nodes(Nodes_2) ->
    try
        Arr = Nodes_2,
        I_5 = 1,
        Fun_4 = fun Fun_4_loop(Arr, I_5, Nodes_2) ->
    case (I_5 < erlang:length(Arr)) of
        true ->
            try
                Key_node = (case erlang:is_map(Arr) of true -> maps:get(I_5, Arr, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Arr) + I_5 + 1, Arr); _ -> mochi_nth(I_5 + 1, Arr) end end),
                J = (I_5 - 1),
                Fun_3 = fun Fun_3_loop(Arr, I_5, J, Key_node, Nodes_2) ->
    case (J >= 0) of
        true ->
            try
                Temp = (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end),
                case (maps:get("f_cost", Temp, nil) > maps:get("f_cost", Key_node, nil)) of
        true -> Arr_2 = lists:sublist(Arr, (J + 1)) ++ [Temp] ++ lists:nthtail((J + 1) + 1, Arr),
            J_2 = (J - 1),
            Arr_3 = Arr_2,
            J_3 = J_2;
        _ -> throw({break, Arr, I_5, J, Key_node, Nodes_2}),
            Arr_3 = Arr,
            J_3 = J
    end,
                Fun_3_loop(Arr_3, I_5, J_3, Key_node, Nodes_2)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_3_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Arr, I_5, J, Key_node, Nodes_2}
    end
end,
{Arr_3, I_5, J_3, Key_node, Nodes_2} = Fun_3(Arr, I_5, J, Key_node, Nodes_2),
                Arr_4 = lists:sublist(Arr_3, (J_3 + 1)) ++ [Key_node] ++ lists:nthtail((J_3 + 1) + 1, Arr_3),
                I_6 = (I_5 + 1),
                Fun_4_loop(Arr_4, I_6, Nodes_2)
            catch
                {continue, C0, C1, C2} -> Fun_4_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Arr, I_5, Nodes_2}
    end
end,
{Arr_4, I_6, Nodes_2} = Fun_4(Arr, I_5, Nodes_2),
        Arr_4
    catch {return, RetCatch} -> RetCatch end.

get_successors(Grid, Parent, Target) ->
    try
        Res_3 = [],
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(Grid, I_7, Parent, Res_3, Target) ->
    case (I_7 < erlang:length(erlang:get('delta'))) of
        true ->
            D = (case erlang:is_map(erlang:get('delta')) of true -> maps:get(I_7, erlang:get('delta'), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(erlang:get('delta')) + I_7 + 1, erlang:get('delta')); _ -> mochi_nth(I_7 + 1, erlang:get('delta')) end end),
            Pos_x_2 = (maps:get("pos_x", Parent, nil) + maps:get("x", D, nil)),
            Pos_y_2 = (maps:get("pos_y", Parent, nil) + maps:get("y", D, nil)),
            case (((((Pos_x_2 >= 0) andalso (Pos_x_2 < erlang:length((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)))) andalso (Pos_y_2 >= 0)) andalso (Pos_y_2 < erlang:length(Grid))) andalso ((case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(Pos_y_2, Grid, nil); _ -> case Pos_y_2 < 0 of true -> mochi_nth(erlang:length(Grid) + Pos_y_2 + 1, Grid); _ -> mochi_nth(Pos_y_2 + 1, Grid) end end)) of true -> maps:get(Pos_x_2, (case erlang:is_map(Grid) of true -> maps:get(Pos_y_2, Grid, nil); _ -> case Pos_y_2 < 0 of true -> mochi_nth(erlang:length(Grid) + Pos_y_2 + 1, Grid); _ -> mochi_nth(Pos_y_2 + 1, Grid) end end), nil); _ -> case Pos_x_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get(Pos_y_2, Grid, nil); _ -> case Pos_y_2 < 0 of true -> mochi_nth(erlang:length(Grid) + Pos_y_2 + 1, Grid); _ -> mochi_nth(Pos_y_2 + 1, Grid) end end)) + Pos_x_2 + 1, (case erlang:is_map(Grid) of true -> maps:get(Pos_y_2, Grid, nil); _ -> case Pos_y_2 < 0 of true -> mochi_nth(erlang:length(Grid) + Pos_y_2 + 1, Grid); _ -> mochi_nth(Pos_y_2 + 1, Grid) end end)); _ -> mochi_nth(Pos_x_2 + 1, (case erlang:is_map(Grid) of true -> maps:get(Pos_y_2, Grid, nil); _ -> case Pos_y_2 < 0 of true -> mochi_nth(erlang:length(Grid) + Pos_y_2 + 1, Grid); _ -> mochi_nth(Pos_y_2 + 1, Grid) end end)) end end) == 0)) of
        true -> New_path = clone_path(maps:get("path", Parent, nil)),
            New_path_2 = lists:append((case New_path of nil -> []; _ -> New_path end), [#{"y" => Pos_y_2, "x" => Pos_x_2}]),
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [make_node(Pos_x_2, Pos_y_2, maps:get("x", Target, nil), maps:get("y", Target, nil), (maps:get("g_cost", Parent, nil) + 1), New_path_2)]),
            New_path_3 = New_path_2,
            Res_5 = Res_4;
        _ -> New_path_3 = nil,
            Res_5 = Res_3
    end,
            I_8 = (I_7 + 1),
            Fun_5_loop(Grid, I_8, Parent, Res_5, Target);
        _ -> {Grid, I_7, Parent, Res_3, Target}
    end
end,
{Grid, I_8, Parent, Res_5, Target} = Fun_5(Grid, I_7, Parent, Res_3, Target),
        Res_5
    catch {return, RetCatch} -> RetCatch end.

greedy_best_first(Grid_2, Init, Goal) ->
    try
        Start_path = [Init],
        Start = make_node(maps:get("x", Init, nil), maps:get("y", Init, nil), maps:get("x", Goal, nil), maps:get("y", Goal, nil), 0, Start_path),
        Open_nodes = [Start],
        Closed_nodes = [],
        Fun_8 = fun Fun_8_loop(Closed_nodes, Goal, Grid_2, Init, Open_nodes, Start, Start_path) ->
    case (erlang:length(Open_nodes) > 0) of
        true ->
            Open_nodes_2 = sort_nodes(Open_nodes),
            Current = (case erlang:is_map(Open_nodes_2) of true -> maps:get(0, Open_nodes_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Open_nodes_2) + 0 + 1, Open_nodes_2); _ -> mochi_nth(0 + 1, Open_nodes_2) end end),
            New_open = [],
            Idx = 1,
            Fun_6 = fun Fun_6_loop(Closed_nodes, Current, Goal, Grid_2, Idx, Init, New_open, Open_nodes_2, Start, Start_path) ->
    case (Idx < erlang:length(Open_nodes_2)) of
        true ->
            New_open_2 = lists:append((case New_open of nil -> []; _ -> New_open end), [(case erlang:is_map(Open_nodes_2) of true -> maps:get(Idx, Open_nodes_2, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Open_nodes_2) + Idx + 1, Open_nodes_2); _ -> mochi_nth(Idx + 1, Open_nodes_2) end end)]),
            Idx_2 = (Idx + 1),
            Fun_6_loop(Closed_nodes, Current, Goal, Grid_2, Idx_2, Init, New_open_2, Open_nodes_2, Start, Start_path);
        _ -> {Closed_nodes, Current, Goal, Grid_2, Idx, Init, New_open, Open_nodes_2, Start, Start_path}
    end
end,
{Closed_nodes, Current, Goal, Grid_2, Idx_2, Init, New_open_2, Open_nodes_2, Start, Start_path} = Fun_6(Closed_nodes, Current, Goal, Grid_2, Idx, Init, New_open, Open_nodes_2, Start, Start_path),
            Open_nodes_3 = New_open_2,
            case ((maps:get("pos_x", Current, nil) == maps:get("x", Goal, nil)) andalso (maps:get("pos_y", Current, nil) == maps:get("y", Goal, nil))) of
        true -> throw({return, maps:get("path", Current, nil)});
        _ -> ok
    end,
            Closed_nodes_2 = lists:append((case Closed_nodes of nil -> []; _ -> Closed_nodes end), [Current]),
            Successors = get_successors(Grid_2, Current, Goal),
            I_9 = 0,
            Fun_7 = fun Fun_7_loop(Closed_nodes_2, Current, Goal, Grid_2, I_9, Idx_2, Init, New_open_2, Open_nodes_3, Start, Start_path, Successors) ->
    case (I_9 < erlang:length(Successors)) of
        true ->
            Child = (case erlang:is_map(Successors) of true -> maps:get(I_9, Successors, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Successors) + I_9 + 1, Successors); _ -> mochi_nth(I_9 + 1, Successors) end end),
            case (mochi_not(mochi_member(Child, Closed_nodes_2)) andalso mochi_not(mochi_member(Child, Open_nodes_3))) of
        true -> Open_nodes_4 = lists:append((case Open_nodes_3 of nil -> []; _ -> Open_nodes_3 end), [Child]),
            Open_nodes_5 = Open_nodes_4;
        _ -> Open_nodes_5 = Open_nodes_3
    end,
            I_10 = (I_9 + 1),
            Fun_7_loop(Closed_nodes_2, Current, Goal, Grid_2, I_10, Idx_2, Init, New_open_2, Open_nodes_5, Start, Start_path, Successors);
        _ -> {Closed_nodes_2, Current, Goal, Grid_2, I_9, Idx_2, Init, New_open_2, Open_nodes_3, Start, Start_path, Successors}
    end
end,
{Closed_nodes_2, Current, Goal, Grid_2, I_10, Idx_2, Init, New_open_2, Open_nodes_5, Start, Start_path, Successors} = Fun_7(Closed_nodes_2, Current, Goal, Grid_2, I_9, Idx_2, Init, New_open_2, Open_nodes_3, Start, Start_path, Successors),
            Fun_8_loop(Closed_nodes_2, Goal, Grid_2, Init, Open_nodes_5, Start, Start_path);
        _ -> {Closed_nodes, Goal, Grid_2, Init, Open_nodes, Start, Start_path}
    end
end,
{Closed_nodes_2, Goal, Grid_2, Init, Open_nodes_5, Start, Start_path} = Fun_8(Closed_nodes, Goal, Grid_2, Init, Open_nodes, Start, Start_path),
        R = [Init],
        R
    catch {return, RetCatch} -> RetCatch end.

print_grid(Grid_3) ->
    try
        I_11 = 0,
        Fun_9 = fun Fun_9_loop(Grid_3, I_11) ->
    case (I_11 < erlang:length(Grid_3)) of
        true ->
            io:format("~ts~n", [mochi_str((case erlang:is_map(Grid_3) of true -> maps:get(I_11, Grid_3, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Grid_3) + I_11 + 1, Grid_3); _ -> mochi_nth(I_11 + 1, Grid_3) end end))]),
            I_12 = (I_11 + 1),
            Fun_9_loop(Grid_3, I_12);
        _ -> {Grid_3, I_11}
    end
end,
{Grid_3, I_12} = Fun_9(Grid_3, I_11),
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Idx_3 = 0,
        Fun_11 = fun Fun_11_loop(Idx_3) ->
    case (Idx_3 < erlang:length(erlang:get('TEST_GRIDS'))) of
        true ->
            io:format("~ts~n", [mochi_repr((("==grid-" ++ mochi_str((Idx_3 + 1))) ++ "=="))]),
            Grid_4 = (case erlang:is_map(erlang:get('TEST_GRIDS')) of true -> maps:get(Idx_3, erlang:get('TEST_GRIDS'), nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('TEST_GRIDS')) + Idx_3 + 1, erlang:get('TEST_GRIDS')); _ -> mochi_nth(Idx_3 + 1, erlang:get('TEST_GRIDS')) end end),
            Init_2 = #{"y" => 0, "x" => 0},
            Goal_2 = #{"y" => (erlang:length(Grid_4) - 1), "x" => (erlang:length((case erlang:is_map(Grid_4) of true -> maps:get(0, Grid_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid_4) + 0 + 1, Grid_4); _ -> mochi_nth(0 + 1, Grid_4) end end)) - 1)},
            print_grid(Grid_4),
            io:format("~ts~n", [mochi_repr("------")]),
            Path_2 = greedy_best_first(Grid_4, Init_2, Goal_2),
            J_4 = 0,
            Fun_10 = fun Fun_10_loop(Goal_2, Grid_4, Idx_3, Init_2, J_4, Path_2) ->
    case (J_4 < erlang:length(Path_2)) of
        true ->
            P_2 = (case erlang:is_map(Path_2) of true -> maps:get(J_4, Path_2, nil); _ -> case J_4 < 0 of true -> mochi_nth(erlang:length(Path_2) + J_4 + 1, Path_2); _ -> mochi_nth(J_4 + 1, Path_2) end end),
            Grid_5 = lists:sublist(Grid_4, maps:get("y", P_2, nil)) ++ [lists:sublist(lists:nth(maps:get("y", P_2, nil) + 1, Grid_4), maps:get("x", P_2, nil)) ++ [2] ++ lists:nthtail(maps:get("x", P_2, nil) + 1, lists:nth(maps:get("y", P_2, nil) + 1, Grid_4))] ++ lists:nthtail(maps:get("y", P_2, nil) + 1, Grid_4),
            J_5 = (J_4 + 1),
            Fun_10_loop(Goal_2, Grid_5, Idx_3, Init_2, J_5, Path_2);
        _ -> {Goal_2, Grid_4, Idx_3, Init_2, J_4, Path_2}
    end
end,
{Goal_2, Grid_5, Idx_3, Init_2, J_5, Path_2} = Fun_10(Goal_2, Grid_4, Idx_3, Init_2, J_4, Path_2),
            print_grid(Grid_5),
            Idx_4 = (Idx_3 + 1),
            Fun_11_loop(Idx_4);
        _ -> {Idx_3}
    end
end,
{Idx_4} = Fun_11(Idx_3),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('delta', [#{"y" => -1, "x" => 0}, #{"y" => 0, "x" => -1}, #{"y" => 1, "x" => 0}, #{"y" => 0, "x" => 1}]),
    erlang:put('TEST_GRIDS', [[[0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0]], [[0, 0, 0, 1, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0], [0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 1, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0]]]),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
