#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, dfs/4, dfs2/4, kosaraju/1, main/0]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

dfs(U, Graph, Visit, Stack) ->
    try
        case (case erlang:is_map(Visit) of true -> maps:get(U, Visit, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Visit) + U + 1, Visit); _ -> mochi_nth(U + 1, Visit) end end) of
        true -> throw({return, Stack});
        _ -> ok
    end,
        Visit_2 = lists:sublist(Visit, U) ++ [true] ++ lists:nthtail(U + 1, Visit),
        Fun = fun Fun_loop(List, Graph, Stack, U, Visit_2) ->
    case List of
        [] -> {Graph, Stack, U, Visit_2};
        [V|V_rest] ->
            Stack_2 = dfs(V, Graph, Visit_2, Stack),
            Fun_loop(V_rest, Graph, Stack_2, U, Visit_2);
        _ -> {Graph, Stack, U, Visit_2}
    end
end,
{Graph, Stack_2, U, Visit_2} = Fun((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end), Graph, Stack, U, Visit_2),
        Stack_3 = lists:append((case Stack_2 of nil -> []; _ -> Stack_2 end), [U]),
        Stack_3
    catch {return, RetCatch} -> RetCatch end.

dfs2(U_2, Reversed_graph, Visit_3, Component) ->
    try
        case (case erlang:is_map(Visit_3) of true -> maps:get(U_2, Visit_3, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(Visit_3) + U_2 + 1, Visit_3); _ -> mochi_nth(U_2 + 1, Visit_3) end end) of
        true -> throw({return, Component});
        _ -> ok
    end,
        Visit_4 = lists:sublist(Visit_3, U_2) ++ [true] ++ lists:nthtail(U_2 + 1, Visit_3),
        Component_2 = lists:append((case Component of nil -> []; _ -> Component end), [U_2]),
        Fun_2 = fun Fun_2_loop(List, Component_2, Reversed_graph, U_2, Visit_4) ->
    case List of
        [] -> {Component_2, Reversed_graph, U_2, Visit_4};
        [V_2|V_2_rest] ->
            Component_3 = dfs2(V_2, Reversed_graph, Visit_4, Component_2),
            Fun_2_loop(V_2_rest, Component_3, Reversed_graph, U_2, Visit_4);
        _ -> {Component_2, Reversed_graph, U_2, Visit_4}
    end
end,
{Component_3, Reversed_graph, U_2, Visit_4} = Fun_2((case erlang:is_map(Reversed_graph) of true -> maps:get(U_2, Reversed_graph, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(Reversed_graph) + U_2 + 1, Reversed_graph); _ -> mochi_nth(U_2 + 1, Reversed_graph) end end), Component_2, Reversed_graph, U_2, Visit_4),
        Component_3
    catch {return, RetCatch} -> RetCatch end.

kosaraju(Graph_2) ->
    try
        N = erlang:length(Graph_2),
        Reversed_graph_2 = [],
        I = 0,
        Fun_3 = fun Fun_3_loop(Graph_2, I, N, Reversed_graph_2) ->
    case (I < N) of
        true ->
            Reversed_graph_3 = lists:append((case Reversed_graph_2 of nil -> []; _ -> Reversed_graph_2 end), [[]]),
            I_2 = (I + 1),
            Fun_3_loop(Graph_2, I_2, N, Reversed_graph_3);
        _ -> {Graph_2, I, N, Reversed_graph_2}
    end
end,
{Graph_2, I_2, N, Reversed_graph_3} = Fun_3(Graph_2, I, N, Reversed_graph_2),
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(Graph_2, I_3, N, Reversed_graph_3) ->
    case (I_3 < N) of
        true ->
            Fun_4 = fun Fun_4_loop(List, Graph_2, I_3, N, Reversed_graph_3) ->
    case List of
        [] -> {Graph_2, I_3, N, Reversed_graph_3};
        [V_3|V_3_rest] ->
            Reversed_graph_4 = lists:sublist(Reversed_graph_3, V_3) ++ [lists:append((case (case erlang:is_map(Reversed_graph_3) of true -> maps:get(V_3, Reversed_graph_3, nil); _ -> case V_3 < 0 of true -> mochi_nth(erlang:length(Reversed_graph_3) + V_3 + 1, Reversed_graph_3); _ -> mochi_nth(V_3 + 1, Reversed_graph_3) end end) of nil -> []; _ -> (case erlang:is_map(Reversed_graph_3) of true -> maps:get(V_3, Reversed_graph_3, nil); _ -> case V_3 < 0 of true -> mochi_nth(erlang:length(Reversed_graph_3) + V_3 + 1, Reversed_graph_3); _ -> mochi_nth(V_3 + 1, Reversed_graph_3) end end) end), [I_3])] ++ lists:nthtail(V_3 + 1, Reversed_graph_3),
            Fun_4_loop(V_3_rest, Graph_2, I_3, N, Reversed_graph_4);
        _ -> {Graph_2, I_3, N, Reversed_graph_3}
    end
end,
{Graph_2, I_3, N, Reversed_graph_4} = Fun_4((case erlang:is_map(Graph_2) of true -> maps:get(I_3, Graph_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Graph_2) + I_3 + 1, Graph_2); _ -> mochi_nth(I_3 + 1, Graph_2) end end), Graph_2, I_3, N, Reversed_graph_3),
            I_4 = (I_3 + 1),
            Fun_5_loop(Graph_2, I_4, N, Reversed_graph_4);
        _ -> {Graph_2, I_3, N, Reversed_graph_3}
    end
end,
{Graph_2, I_4, N, Reversed_graph_4} = Fun_5(Graph_2, I_3, N, Reversed_graph_3),
        Visit_5 = [],
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(Graph_2, I_5, N, Reversed_graph_4, Visit_5) ->
    case (I_5 < N) of
        true ->
            Visit_6 = lists:append((case Visit_5 of nil -> []; _ -> Visit_5 end), [false]),
            I_6 = (I_5 + 1),
            Fun_6_loop(Graph_2, I_6, N, Reversed_graph_4, Visit_6);
        _ -> {Graph_2, I_5, N, Reversed_graph_4, Visit_5}
    end
end,
{Graph_2, I_6, N, Reversed_graph_4, Visit_6} = Fun_6(Graph_2, I_5, N, Reversed_graph_4, Visit_5),
        Stack_4 = [],
        I_7 = 0,
        Fun_7 = fun Fun_7_loop(Graph_2, I_7, N, Reversed_graph_4, Stack_4, Visit_6) ->
    case (I_7 < N) of
        true ->
            case ((case erlang:is_map(Visit_6) of true -> maps:get(I_7, Visit_6, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Visit_6) + I_7 + 1, Visit_6); _ -> mochi_nth(I_7 + 1, Visit_6) end end) == false) of
        true -> Stack_5 = dfs(I_7, Graph_2, Visit_6, Stack_4),
            Stack_6 = Stack_5;
        _ -> Stack_6 = Stack_4
    end,
            I_8 = (I_7 + 1),
            Fun_7_loop(Graph_2, I_8, N, Reversed_graph_4, Stack_6, Visit_6);
        _ -> {Graph_2, I_7, N, Reversed_graph_4, Stack_4, Visit_6}
    end
end,
{Graph_2, I_8, N, Reversed_graph_4, Stack_6, Visit_6} = Fun_7(Graph_2, I_7, N, Reversed_graph_4, Stack_4, Visit_6),
        I_9 = 0,
        Fun_8 = fun Fun_8_loop(Graph_2, I_9, N, Reversed_graph_4, Stack_6, Visit_6) ->
    case (I_9 < N) of
        true ->
            Visit_7 = lists:sublist(Visit_6, I_9) ++ [false] ++ lists:nthtail(I_9 + 1, Visit_6),
            I_10 = (I_9 + 1),
            Fun_8_loop(Graph_2, I_10, N, Reversed_graph_4, Stack_6, Visit_7);
        _ -> {Graph_2, I_9, N, Reversed_graph_4, Stack_6, Visit_6}
    end
end,
{Graph_2, I_10, N, Reversed_graph_4, Stack_6, Visit_7} = Fun_8(Graph_2, I_9, N, Reversed_graph_4, Stack_6, Visit_6),
        Scc = [],
        Idx = (erlang:length(Stack_6) - 1),
        Fun_9 = fun Fun_9_loop(Graph_2, I_10, Idx, N, Reversed_graph_4, Scc, Stack_6, Visit_7) ->
    case (Idx >= 0) of
        true ->
            Node = (case erlang:is_map(Stack_6) of true -> maps:get(Idx, Stack_6, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Stack_6) + Idx + 1, Stack_6); _ -> mochi_nth(Idx + 1, Stack_6) end end),
            case ((case erlang:is_map(Visit_7) of true -> maps:get(Node, Visit_7, nil); _ -> case Node < 0 of true -> mochi_nth(erlang:length(Visit_7) + Node + 1, Visit_7); _ -> mochi_nth(Node + 1, Visit_7) end end) == false) of
        true -> Component_4 = [],
            Component_5 = dfs2(Node, Reversed_graph_4, Visit_7, Component_4),
            Scc_2 = lists:append((case Scc of nil -> []; _ -> Scc end), [Component_5]),
            Component_6 = Component_5,
            Scc_3 = Scc_2;
        _ -> Component_6 = nil,
            Scc_3 = Scc
    end,
            Idx_2 = (Idx - 1),
            Fun_9_loop(Graph_2, I_10, Idx_2, N, Reversed_graph_4, Scc_3, Stack_6, Visit_7);
        _ -> {Graph_2, I_10, Idx, N, Reversed_graph_4, Scc, Stack_6, Visit_7}
    end
end,
{Graph_2, I_10, Idx_2, N, Reversed_graph_4, Scc_3, Stack_6, Visit_7} = Fun_9(Graph_2, I_10, Idx, N, Reversed_graph_4, Scc, Stack_6, Visit_7),
        Scc_3
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Graph_3 = [[1], [2], [0, 3], [4], []],
        Comps = kosaraju(Graph_3),
        I_11 = 0,
        Fun_10 = fun Fun_10_loop(Comps, Graph_3, I_11) ->
    case (I_11 < erlang:length(Comps)) of
        true ->
            io:format("~ts~n", [mochi_repr((case erlang:is_map(Comps) of true -> maps:get(I_11, Comps, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Comps) + I_11 + 1, Comps); _ -> mochi_nth(I_11 + 1, Comps) end end))]),
            I_12 = (I_11 + 1),
            Fun_10_loop(Comps, Graph_3, I_12);
        _ -> {Comps, Graph_3, I_11}
    end
end,
{Comps, Graph_3, I_12} = Fun_10(Comps, Graph_3, I_11),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
