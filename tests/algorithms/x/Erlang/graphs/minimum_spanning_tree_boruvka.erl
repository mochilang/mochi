#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, uf_make/1, uf_find/2, uf_union/3, boruvka/2, main/0]).

% Generated by Mochi transpiler v0.10.65 (5cabcd7927)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

uf_make(N) ->
    try
        P = [],
        R = [],
        I = 0,
        Fun = fun Fun_loop(I, N, P, R) ->
    case (I < N) of
        true ->
            P_2 = lists:append((case P of nil -> []; _ -> P end), [I]),
            R_2 = lists:append((case R of nil -> []; _ -> R end), [0]),
            I_2 = (I + 1),
            Fun_loop(I_2, N, P_2, R_2);
        _ -> {I, N, P, R}
    end
end,
{I_2, N, P_2, R_2} = Fun(I, N, P, R),
        #{"parent" => P_2, "rank" => R_2}
    catch {return, RetCatch} -> RetCatch end.

uf_find(Uf, X) ->
    try
        P_3 = maps:get("parent", Uf, nil),
        case ((case erlang:is_map(P_3) of true -> maps:get(X, P_3, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(P_3) + X + 1, P_3); _ -> mochi_nth(X + 1, P_3) end end) /= X) of
        true -> Res = uf_find(#{"parent" => P_3, "rank" => maps:get("rank", Uf, nil)}, (case erlang:is_map(P_3) of true -> maps:get(X, P_3, nil); _ -> case X < 0 of true -> mochi_nth(erlang:length(P_3) + X + 1, P_3); _ -> mochi_nth(X + 1, P_3) end end)),
            P_4 = maps:get("parent", maps:get("uf", Res, nil), nil),
            P_5 = lists:sublist(P_4, X) ++ [maps:get("root", Res, nil)] ++ lists:nthtail(X + 1, P_4),
            throw({return, #{"root" => maps:get("root", Res, nil), "uf" => #{"parent" => P_5, "rank" => maps:get("rank", maps:get("uf", Res, nil), nil)}}}),
            P_6 = P_5,
            Res_2 = Res;
        _ -> P_6 = P_3,
            Res_2 = nil
    end,
        #{"root" => X, "uf" => Uf}
    catch {return, RetCatch} -> RetCatch end.

uf_union(Uf_2, X_2, Y) ->
    try
        Fr1 = uf_find(Uf_2, X_2),
        Uf1 = maps:get("uf", Fr1, nil),
        Root1 = maps:get("root", Fr1, nil),
        Fr2 = uf_find(Uf1, Y),
        Uf1_2 = maps:get("uf", Fr2, nil),
        Root2 = maps:get("root", Fr2, nil),
        case (Root1 == Root2) of
        true -> throw({return, Uf1_2});
        _ -> ok
    end,
        P_7 = maps:get("parent", Uf1_2, nil),
        R_3 = maps:get("rank", Uf1_2, nil),
        case ((case erlang:is_map(R_3) of true -> maps:get(Root1, R_3, nil); _ -> case Root1 < 0 of true -> mochi_nth(erlang:length(R_3) + Root1 + 1, R_3); _ -> mochi_nth(Root1 + 1, R_3) end end) > (case erlang:is_map(R_3) of true -> maps:get(Root2, R_3, nil); _ -> case Root2 < 0 of true -> mochi_nth(erlang:length(R_3) + Root2 + 1, R_3); _ -> mochi_nth(Root2 + 1, R_3) end end)) of
        true -> P_8 = lists:sublist(P_7, Root2) ++ [Root1] ++ lists:nthtail(Root2 + 1, P_7),
            P_12 = P_8,
            R_6 = R_3;
        _ -> case ((case erlang:is_map(R_3) of true -> maps:get(Root1, R_3, nil); _ -> case Root1 < 0 of true -> mochi_nth(erlang:length(R_3) + Root1 + 1, R_3); _ -> mochi_nth(Root1 + 1, R_3) end end) < (case erlang:is_map(R_3) of true -> maps:get(Root2, R_3, nil); _ -> case Root2 < 0 of true -> mochi_nth(erlang:length(R_3) + Root2 + 1, R_3); _ -> mochi_nth(Root2 + 1, R_3) end end)) of
        true -> P_9 = lists:sublist(P_7, Root1) ++ [Root2] ++ lists:nthtail(Root1 + 1, P_7),
            P_11 = P_9,
            R_5 = R_3;
        _ -> P_10 = lists:sublist(P_7, Root2) ++ [Root1] ++ lists:nthtail(Root2 + 1, P_7),
            R_4 = lists:sublist(R_3, Root1) ++ [((case erlang:is_map(R_3) of true -> maps:get(Root1, R_3, nil); _ -> case Root1 < 0 of true -> mochi_nth(erlang:length(R_3) + Root1 + 1, R_3); _ -> mochi_nth(Root1 + 1, R_3) end end) + 1)] ++ lists:nthtail(Root1 + 1, R_3),
            P_11 = P_10,
            R_5 = R_4
    end,
            P_12 = P_11,
            R_6 = R_5
    end,
        #{"parent" => P_12, "rank" => R_6}
    catch {return, RetCatch} -> RetCatch end.

boruvka(N_2, Edges) ->
    try
        Uf_3 = uf_make(N_2),
        Num_components = N_2,
        Mst = [],
        Fun_5 = fun Fun_5_loop(Edges, Mst, N_2, Num_components, Uf_3) ->
    case (Num_components > 1) of
        true ->
            Cheap = [],
            I_3 = 0,
            Fun_2 = fun Fun_2_loop(Cheap, Edges, I_3, Mst, N_2, Num_components, Uf_3) ->
    case (I_3 < N_2) of
        true ->
            Cheap_2 = lists:append((case Cheap of nil -> []; _ -> Cheap end), [(0 - 1)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Cheap_2, Edges, I_4, Mst, N_2, Num_components, Uf_3);
        _ -> {Cheap, Edges, I_3, Mst, N_2, Num_components, Uf_3}
    end
end,
{Cheap_2, Edges, I_4, Mst, N_2, Num_components, Uf_3} = Fun_2(Cheap, Edges, I_3, Mst, N_2, Num_components, Uf_3),
            Idx = 0,
            Fun_3 = fun Fun_3_loop(Cheap_2, Edges, I_4, Idx, Mst, N_2, Num_components, Uf_3) ->
    case (Idx < erlang:length(Edges)) of
        true ->
            E = (case erlang:is_map(Edges) of true -> maps:get(Idx, Edges, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Edges) + Idx + 1, Edges); _ -> mochi_nth(Idx + 1, Edges) end end),
            Fr1_2 = uf_find(Uf_3, maps:get("u", E, nil)),
            Uf_4 = maps:get("uf", Fr1_2, nil),
            Set1 = maps:get("root", Fr1_2, nil),
            Fr2_2 = uf_find(Uf_4, maps:get("v", E, nil)),
            Uf_5 = maps:get("uf", Fr2_2, nil),
            Set2 = maps:get("root", Fr2_2, nil),
            case (Set1 /= Set2) of
        true -> case (((case erlang:is_map(Cheap_2) of true -> maps:get(Set1, Cheap_2, nil); _ -> case Set1 < 0 of true -> mochi_nth(erlang:length(Cheap_2) + Set1 + 1, Cheap_2); _ -> mochi_nth(Set1 + 1, Cheap_2) end end) == (0 - 1)) orelse (maps:get("w", (case erlang:is_map(Edges) of true -> maps:get((case erlang:is_map(Cheap_2) of true -> maps:get(Set1, Cheap_2, nil); _ -> case Set1 < 0 of true -> mochi_nth(erlang:length(Cheap_2) + Set1 + 1, Cheap_2); _ -> mochi_nth(Set1 + 1, Cheap_2) end end), Edges, nil); _ -> case (case erlang:is_map(Cheap_2) of true -> maps:get(Set1, Cheap_2, nil); _ -> case Set1 < 0 of true -> mochi_nth(erlang:length(Cheap_2) + Set1 + 1, Cheap_2); _ -> mochi_nth(Set1 + 1, Cheap_2) end end) < 0 of true -> mochi_nth(erlang:length(Edges) + (case erlang:is_map(Cheap_2) of true -> maps:get(Set1, Cheap_2, nil); _ -> case Set1 < 0 of true -> mochi_nth(erlang:length(Cheap_2) + Set1 + 1, Cheap_2); _ -> mochi_nth(Set1 + 1, Cheap_2) end end) + 1, Edges); _ -> mochi_nth((case erlang:is_map(Cheap_2) of true -> maps:get(Set1, Cheap_2, nil); _ -> case Set1 < 0 of true -> mochi_nth(erlang:length(Cheap_2) + Set1 + 1, Cheap_2); _ -> mochi_nth(Set1 + 1, Cheap_2) end end) + 1, Edges) end end), nil) > maps:get("w", E, nil))) of
        true -> Cheap_3 = lists:sublist(Cheap_2, Set1) ++ [Idx] ++ lists:nthtail(Set1 + 1, Cheap_2),
            Cheap_4 = Cheap_3;
        _ -> Cheap_4 = Cheap_2
    end,
            case (((case erlang:is_map(Cheap_4) of true -> maps:get(Set2, Cheap_4, nil); _ -> case Set2 < 0 of true -> mochi_nth(erlang:length(Cheap_4) + Set2 + 1, Cheap_4); _ -> mochi_nth(Set2 + 1, Cheap_4) end end) == (0 - 1)) orelse (maps:get("w", (case erlang:is_map(Edges) of true -> maps:get((case erlang:is_map(Cheap_4) of true -> maps:get(Set2, Cheap_4, nil); _ -> case Set2 < 0 of true -> mochi_nth(erlang:length(Cheap_4) + Set2 + 1, Cheap_4); _ -> mochi_nth(Set2 + 1, Cheap_4) end end), Edges, nil); _ -> case (case erlang:is_map(Cheap_4) of true -> maps:get(Set2, Cheap_4, nil); _ -> case Set2 < 0 of true -> mochi_nth(erlang:length(Cheap_4) + Set2 + 1, Cheap_4); _ -> mochi_nth(Set2 + 1, Cheap_4) end end) < 0 of true -> mochi_nth(erlang:length(Edges) + (case erlang:is_map(Cheap_4) of true -> maps:get(Set2, Cheap_4, nil); _ -> case Set2 < 0 of true -> mochi_nth(erlang:length(Cheap_4) + Set2 + 1, Cheap_4); _ -> mochi_nth(Set2 + 1, Cheap_4) end end) + 1, Edges); _ -> mochi_nth((case erlang:is_map(Cheap_4) of true -> maps:get(Set2, Cheap_4, nil); _ -> case Set2 < 0 of true -> mochi_nth(erlang:length(Cheap_4) + Set2 + 1, Cheap_4); _ -> mochi_nth(Set2 + 1, Cheap_4) end end) + 1, Edges) end end), nil) > maps:get("w", E, nil))) of
        true -> Cheap_5 = lists:sublist(Cheap_4, Set2) ++ [Idx] ++ lists:nthtail(Set2 + 1, Cheap_4),
            Cheap_6 = Cheap_5;
        _ -> Cheap_6 = Cheap_4
    end,
            Cheap_7 = Cheap_6;
        _ -> Cheap_7 = Cheap_2
    end,
            Idx_2 = (Idx + 1),
            Fun_3_loop(Cheap_7, Edges, I_4, Idx_2, Mst, N_2, Num_components, Uf_5);
        _ -> {Cheap_2, Edges, I_4, Idx, Mst, N_2, Num_components, Uf_3}
    end
end,
{Cheap_7, Edges, I_4, Idx_2, Mst, N_2, Num_components, Uf_5} = Fun_3(Cheap_2, Edges, I_4, Idx, Mst, N_2, Num_components, Uf_3),
            V = 0,
            Fun_4 = fun Fun_4_loop(Cheap_7, Edges, I_4, Idx_2, Mst, N_2, Num_components, Uf_5, V) ->
    case (V < N_2) of
        true ->
            Idxe = (case erlang:is_map(Cheap_7) of true -> maps:get(V, Cheap_7, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Cheap_7) + V + 1, Cheap_7); _ -> mochi_nth(V + 1, Cheap_7) end end),
            case (Idxe /= (0 - 1)) of
        true -> E_2 = (case erlang:is_map(Edges) of true -> maps:get(Idxe, Edges, nil); _ -> case Idxe < 0 of true -> mochi_nth(erlang:length(Edges) + Idxe + 1, Edges); _ -> mochi_nth(Idxe + 1, Edges) end end),
            Fr1_3 = uf_find(Uf_5, maps:get("u", E_2, nil)),
            Uf_6 = maps:get("uf", Fr1_3, nil),
            Set1_2 = maps:get("root", Fr1_3, nil),
            Fr2_3 = uf_find(Uf_6, maps:get("v", E_2, nil)),
            Uf_7 = maps:get("uf", Fr2_3, nil),
            Set2_2 = maps:get("root", Fr2_3, nil),
            case (Set1_2 /= Set2_2) of
        true -> Mst_2 = lists:append((case Mst of nil -> []; _ -> Mst end), [E_2]),
            Uf_8 = uf_union(Uf_7, Set1_2, Set2_2),
            Num_components_2 = (Num_components - 1),
            Mst_3 = Mst_2,
            Num_components_3 = Num_components_2,
            Uf_9 = Uf_8;
        _ -> Mst_3 = Mst,
            Num_components_3 = Num_components,
            Uf_9 = Uf_7
    end,
            E_3 = E_2,
            Fr1_4 = Fr1_3,
            Fr2_4 = Fr2_3,
            Mst_4 = Mst_3,
            Num_components_4 = Num_components_3,
            Set1_3 = Set1_2,
            Set2_3 = Set2_2,
            Uf_10 = Uf_9;
        _ -> E_3 = nil,
            Fr1_4 = nil,
            Fr2_4 = nil,
            Mst_4 = Mst,
            Num_components_4 = Num_components,
            Set1_3 = nil,
            Set2_3 = nil,
            Uf_10 = Uf_5
    end,
            V_2 = (V + 1),
            Fun_4_loop(Cheap_7, Edges, I_4, Idx_2, Mst_4, N_2, Num_components_4, Uf_10, V_2);
        _ -> {Cheap_7, Edges, I_4, Idx_2, Mst, N_2, Num_components, Uf_5, V}
    end
end,
{Cheap_7, Edges, I_4, Idx_2, Mst_4, N_2, Num_components_4, Uf_10, V_2} = Fun_4(Cheap_7, Edges, I_4, Idx_2, Mst, N_2, Num_components, Uf_5, V),
            Fun_5_loop(Edges, Mst_4, N_2, Num_components_4, Uf_10);
        _ -> {Edges, Mst, N_2, Num_components, Uf_3}
    end
end,
{Edges, Mst_4, N_2, Num_components_4, Uf_10} = Fun_5(Edges, Mst, N_2, Num_components, Uf_3),
        Mst_4
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Edges_2 = [#{"u" => 0, "v" => 1, "w" => 1}, #{"u" => 0, "v" => 2, "w" => 2}, #{"u" => 2, "v" => 3, "w" => 3}],
        Mst_5 = boruvka(4, Edges_2),
        Fun_6 = fun Fun_6_loop(List, Edges_2, Mst_5) ->
    case List of
        [] -> {Edges_2, Mst_5};
        [E_4|E_4_rest] ->
            io:format("~ts~n", [mochi_repr(((((mochi_str(maps:get("u", E_4, nil)) ++ " - ") ++ mochi_str(maps:get("v", E_4, nil))) ++ " : ") ++ mochi_str(maps:get("w", E_4, nil))))]),
            Fun_6_loop(E_4_rest, Edges_2, Mst_5);
        _ -> {Edges_2, Mst_5}
    end
end,
{Edges_2, Mst_5} = Fun_6(Mst_5, Edges_2, Mst_5),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
