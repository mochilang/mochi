#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, dfs/8, compute_bridges/1, get_demo_graph/1]).

% Generated by Mochi transpiler v0.10.65 (5cabcd7927)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

dfs(Graph, At, Parent, Visited, Ids, Low, Id, Bridges) ->
    try
        Visited_2 = lists:sublist(Visited, At) ++ [true] ++ lists:nthtail(At + 1, Visited),
        Ids_2 = lists:sublist(Ids, At) ++ [Id] ++ lists:nthtail(At + 1, Ids),
        Low_2 = lists:sublist(Low, At) ++ [Id] ++ lists:nthtail(At + 1, Low),
        Current_id = (Id + 1),
        Res_bridges = Bridges,
        Fun = fun Fun_loop(List, At, Bridges, Current_id, Graph, Id, Ids_2, Low_2, Parent, Res_bridges, Visited_2) ->
    case List of
        [] -> {At, Bridges, Current_id, Graph, Id, Ids_2, Low_2, Parent, Res_bridges, Visited_2};
        [To|To_rest] ->
        try
            case (To == Parent) of
        true -> throw({continue, At, Bridges, Current_id, Graph, Id, Ids_2, Low_2, Parent, Res_bridges, Visited_2}),
            Current_id_4 = Current_id,
            Edge_4 = nil,
            Low_8 = Low_2,
            Res_bridges_6 = Res_bridges,
            Result_3 = nil;
        _ -> case mochi_not((case erlang:is_map(Visited_2) of true -> maps:get(To, Visited_2, nil); _ -> case To < 0 of true -> mochi_nth(erlang:length(Visited_2) + To + 1, Visited_2); _ -> mochi_nth(To + 1, Visited_2) end end)) of
        true -> Result = dfs(Graph, To, At, Visited_2, Ids_2, Low_2, Current_id, Res_bridges),
            Current_id_2 = maps:get("id", Result, nil),
            Res_bridges_2 = maps:get("bridges", Result, nil),
            case ((case erlang:is_map(Low_2) of true -> maps:get(At, Low_2, nil); _ -> case At < 0 of true -> mochi_nth(erlang:length(Low_2) + At + 1, Low_2); _ -> mochi_nth(At + 1, Low_2) end end) > (case erlang:is_map(Low_2) of true -> maps:get(To, Low_2, nil); _ -> case To < 0 of true -> mochi_nth(erlang:length(Low_2) + To + 1, Low_2); _ -> mochi_nth(To + 1, Low_2) end end)) of
        true -> Low_3 = lists:sublist(Low_2, At) ++ [(case erlang:is_map(Low_2) of true -> maps:get(To, Low_2, nil); _ -> case To < 0 of true -> mochi_nth(erlang:length(Low_2) + To + 1, Low_2); _ -> mochi_nth(To + 1, Low_2) end end)] ++ lists:nthtail(At + 1, Low_2),
            Low_4 = Low_3;
        _ -> Low_4 = Low_2
    end,
            case ((case erlang:is_map(Ids_2) of true -> maps:get(At, Ids_2, nil); _ -> case At < 0 of true -> mochi_nth(erlang:length(Ids_2) + At + 1, Ids_2); _ -> mochi_nth(At + 1, Ids_2) end end) < (case erlang:is_map(Low_4) of true -> maps:get(To, Low_4, nil); _ -> case To < 0 of true -> mochi_nth(erlang:length(Low_4) + To + 1, Low_4); _ -> mochi_nth(To + 1, Low_4) end end)) of
        true -> Edge = (case (At < To) of
    true -> [At, To];
    _ -> [To, At]
end),
            Res_bridges_3 = lists:append((case Res_bridges_2 of nil -> []; _ -> Res_bridges_2 end), [Edge]),
            Edge_2 = Edge,
            Res_bridges_4 = Res_bridges_3;
        _ -> Edge_2 = nil,
            Res_bridges_4 = Res_bridges_2
    end,
            Current_id_3 = Current_id_2,
            Edge_3 = Edge_2,
            Low_7 = Low_4,
            Res_bridges_5 = Res_bridges_4,
            Result_2 = Result;
        _ -> case ((case erlang:is_map(Low_2) of true -> maps:get(At, Low_2, nil); _ -> case At < 0 of true -> mochi_nth(erlang:length(Low_2) + At + 1, Low_2); _ -> mochi_nth(At + 1, Low_2) end end) > (case erlang:is_map(Ids_2) of true -> maps:get(To, Ids_2, nil); _ -> case To < 0 of true -> mochi_nth(erlang:length(Ids_2) + To + 1, Ids_2); _ -> mochi_nth(To + 1, Ids_2) end end)) of
        true -> Low_5 = lists:sublist(Low_2, At) ++ [(case erlang:is_map(Ids_2) of true -> maps:get(To, Ids_2, nil); _ -> case To < 0 of true -> mochi_nth(erlang:length(Ids_2) + To + 1, Ids_2); _ -> mochi_nth(To + 1, Ids_2) end end)] ++ lists:nthtail(At + 1, Low_2),
            Low_6 = Low_5;
        _ -> Low_6 = Low_2
    end,
            Current_id_3 = Current_id,
            Edge_3 = nil,
            Low_7 = Low_6,
            Res_bridges_5 = Res_bridges,
            Result_2 = nil
    end,
            Current_id_4 = Current_id_3,
            Edge_4 = Edge_3,
            Low_8 = Low_7,
            Res_bridges_6 = Res_bridges_5,
            Result_3 = Result_2
    end,
            Fun_loop(To_rest, At, Bridges, Current_id_4, Graph, Id, Ids_2, Low_8, Parent, Res_bridges_6, Visited_2)
        catch
            {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9} -> Fun_loop(To_rest, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9);
            {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9};
            break -> {At, Bridges, Current_id, Graph, Id, Ids_2, Low_2, Parent, Res_bridges, Visited_2}
        end;
        _ -> {At, Bridges, Current_id, Graph, Id, Ids_2, Low_2, Parent, Res_bridges, Visited_2}
    end
end,
{At, Bridges, Current_id_4, Graph, Id, Ids_2, Low_8, Parent, Res_bridges_6, Visited_2} = Fun(maps:get(At, Graph, nil), At, Bridges, Current_id, Graph, Id, Ids_2, Low_2, Parent, Res_bridges, Visited_2),
        #{"id" => Current_id_4, "bridges" => Res_bridges_6}
    catch {return, RetCatch} -> RetCatch end.

compute_bridges(Graph_2) ->
    try
        N = maps:size(Graph_2),
        Visited_3 = [],
        Ids_3 = [],
        Low_9 = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Graph_2, I, Ids_3, Low_9, N, Visited_3) ->
    case (I < N) of
        true ->
            Visited_4 = lists:append((case Visited_3 of nil -> []; _ -> Visited_3 end), [false]),
            Ids_4 = lists:append((case Ids_3 of nil -> []; _ -> Ids_3 end), [0]),
            Low_10 = lists:append((case Low_9 of nil -> []; _ -> Low_9 end), [0]),
            I_2 = (I + 1),
            Fun_2_loop(Graph_2, I_2, Ids_4, Low_10, N, Visited_4);
        _ -> {Graph_2, I, Ids_3, Low_9, N, Visited_3}
    end
end,
{Graph_2, I_2, Ids_4, Low_10, N, Visited_4} = Fun_2(Graph_2, I, Ids_3, Low_9, N, Visited_3),
        Bridges_2 = [],
        Id_2 = 0,
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Bridges_2, Graph_2, I_3, Id_2, Ids_4, Low_10, N, Visited_4) ->
    case (I_3 < N) of
        true ->
            case mochi_not((case erlang:is_map(Visited_4) of true -> maps:get(I_3, Visited_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Visited_4) + I_3 + 1, Visited_4); _ -> mochi_nth(I_3 + 1, Visited_4) end end)) of
        true -> Result_4 = dfs(Graph_2, I_3, -1, Visited_4, Ids_4, Low_10, Id_2, Bridges_2),
            Id_3 = maps:get("id", Result_4, nil),
            Bridges_3 = maps:get("bridges", Result_4, nil),
            Bridges_4 = Bridges_3,
            Id_4 = Id_3,
            Result_5 = Result_4;
        _ -> Bridges_4 = Bridges_2,
            Id_4 = Id_2,
            Result_5 = nil
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(Bridges_4, Graph_2, I_4, Id_4, Ids_4, Low_10, N, Visited_4);
        _ -> {Bridges_2, Graph_2, I_3, Id_2, Ids_4, Low_10, N, Visited_4}
    end
end,
{Bridges_4, Graph_2, I_4, Id_4, Ids_4, Low_10, N, Visited_4} = Fun_3(Bridges_2, Graph_2, I_3, Id_2, Ids_4, Low_10, N, Visited_4),
        Bridges_4
    catch {return, RetCatch} -> RetCatch end.

get_demo_graph(Index) ->
    try
        case (Index == 0) of
        true -> throw({return, #{0 => [1, 2], 1 => [0, 2], 2 => [0, 1, 3, 5], 3 => [2, 4], 4 => [3], 5 => [2, 6, 8], 6 => [5, 7], 7 => [6, 8], 8 => [5, 7]}});
        _ -> ok
    end,
        case (Index == 1) of
        true -> throw({return, #{0 => [6], 1 => [9], 2 => [4, 5], 3 => [4], 4 => [2, 3], 5 => [2], 6 => [0, 7], 7 => [6], 8 => [], 9 => [1]}});
        _ -> ok
    end,
        case (Index == 2) of
        true -> throw({return, #{0 => [4], 1 => [6], 2 => [], 3 => [5, 6, 7], 4 => [0, 6], 5 => [3, 8, 9], 6 => [1, 3, 4, 7], 7 => [3, 6, 8, 9], 8 => [5, 7], 9 => [5, 7]}});
        _ -> ok
    end,
        #{0 => [1, 3], 1 => [0, 2, 4], 2 => [1, 3, 4], 3 => [0, 2, 4], 4 => [1, 2, 3]}
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(compute_bridges(get_demo_graph(0)))]),
    io:format("~ts~n", [mochi_repr(compute_bridges(get_demo_graph(1)))]),
    io:format("~ts~n", [mochi_repr(compute_bridges(get_demo_graph(2)))]),
    io:format("~ts~n", [mochi_repr(compute_bridges(get_demo_graph(3)))]),
    io:format("~ts~n", [mochi_repr(compute_bridges(#{}))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
