#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, index_of/2, remove_item/2, stable_matching/2]).

% Generated by Mochi transpiler v0.10.65 (5cabcd7927)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

index_of(Xs, X) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, X, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) == X) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, X, Xs);
        _ -> {I, X, Xs}
    end
end,
{I_2, X, Xs} = Fun(I, X, Xs),
        -1
    catch {return, RetCatch} -> RetCatch end.

remove_item(Xs_2, X_2) ->
    try
        Res = [],
        Removed = false,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Removed, Res, X_2, Xs_2) ->
    case (I_3 < erlang:length(Xs_2)) of
        true ->
            case (mochi_not(Removed) andalso ((case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_3 + 1, Xs_2); _ -> mochi_nth(I_3 + 1, Xs_2) end end) == X_2)) of
        true -> Removed_2 = true,
            Removed_3 = Removed_2,
            Res_3 = Res;
        _ -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_3 + 1, Xs_2); _ -> mochi_nth(I_3 + 1, Xs_2) end end)]),
            Removed_3 = Removed,
            Res_3 = Res_2
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Removed_3, Res_3, X_2, Xs_2);
        _ -> {I_3, Removed, Res, X_2, Xs_2}
    end
end,
{I_4, Removed_3, Res_3, X_2, Xs_2} = Fun_2(I_3, Removed, Res, X_2, Xs_2),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

stable_matching(Donor_pref, Recipient_pref) ->
    try
        case (erlang:length(Donor_pref) /= erlang:length(Recipient_pref)) of
        true -> erlang:error({panic, "unequal groups"});
        _ -> ok
    end,
        N = erlang:length(Donor_pref),
        Unmatched = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Donor_pref, I_5, N, Recipient_pref, Unmatched) ->
    case (I_5 < N) of
        true ->
            Unmatched_2 = lists:append((case Unmatched of nil -> []; _ -> Unmatched end), [I_5]),
            I_6 = (I_5 + 1),
            Fun_3_loop(Donor_pref, I_6, N, Recipient_pref, Unmatched_2);
        _ -> {Donor_pref, I_5, N, Recipient_pref, Unmatched}
    end
end,
{Donor_pref, I_6, N, Recipient_pref, Unmatched_2} = Fun_3(Donor_pref, I_5, N, Recipient_pref, Unmatched),
        Donor_record = [],
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Donor_pref, Donor_record, I_7, N, Recipient_pref, Unmatched_2) ->
    case (I_7 < N) of
        true ->
            Donor_record_2 = lists:append((case Donor_record of nil -> []; _ -> Donor_record end), [-1]),
            I_8 = (I_7 + 1),
            Fun_4_loop(Donor_pref, Donor_record_2, I_8, N, Recipient_pref, Unmatched_2);
        _ -> {Donor_pref, Donor_record, I_7, N, Recipient_pref, Unmatched_2}
    end
end,
{Donor_pref, Donor_record_2, I_8, N, Recipient_pref, Unmatched_2} = Fun_4(Donor_pref, Donor_record, I_7, N, Recipient_pref, Unmatched_2),
        Rec_record = [],
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(Donor_pref, Donor_record_2, I_9, N, Rec_record, Recipient_pref, Unmatched_2) ->
    case (I_9 < N) of
        true ->
            Rec_record_2 = lists:append((case Rec_record of nil -> []; _ -> Rec_record end), [-1]),
            I_10 = (I_9 + 1),
            Fun_5_loop(Donor_pref, Donor_record_2, I_10, N, Rec_record_2, Recipient_pref, Unmatched_2);
        _ -> {Donor_pref, Donor_record_2, I_9, N, Rec_record, Recipient_pref, Unmatched_2}
    end
end,
{Donor_pref, Donor_record_2, I_10, N, Rec_record_2, Recipient_pref, Unmatched_2} = Fun_5(Donor_pref, Donor_record_2, I_9, N, Rec_record, Recipient_pref, Unmatched_2),
        Num_donations = [],
        I_11 = 0,
        Fun_6 = fun Fun_6_loop(Donor_pref, Donor_record_2, I_11, N, Num_donations, Rec_record_2, Recipient_pref, Unmatched_2) ->
    case (I_11 < N) of
        true ->
            Num_donations_2 = lists:append((case Num_donations of nil -> []; _ -> Num_donations end), [0]),
            I_12 = (I_11 + 1),
            Fun_6_loop(Donor_pref, Donor_record_2, I_12, N, Num_donations_2, Rec_record_2, Recipient_pref, Unmatched_2);
        _ -> {Donor_pref, Donor_record_2, I_11, N, Num_donations, Rec_record_2, Recipient_pref, Unmatched_2}
    end
end,
{Donor_pref, Donor_record_2, I_12, N, Num_donations_2, Rec_record_2, Recipient_pref, Unmatched_2} = Fun_6(Donor_pref, Donor_record_2, I_11, N, Num_donations, Rec_record_2, Recipient_pref, Unmatched_2),
        Fun_7 = fun Fun_7_loop(Donor_pref, Donor_record_2, I_12, N, Num_donations_2, Rec_record_2, Recipient_pref, Unmatched_2) ->
    case (erlang:length(Unmatched_2) > 0) of
        true ->
            Donor = (case erlang:is_map(Unmatched_2) of true -> maps:get(0, Unmatched_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Unmatched_2) + 0 + 1, Unmatched_2); _ -> mochi_nth(0 + 1, Unmatched_2) end end),
            Donor_preference = (case erlang:is_map(Donor_pref) of true -> maps:get(Donor, Donor_pref, nil); _ -> case Donor < 0 of true -> mochi_nth(erlang:length(Donor_pref) + Donor + 1, Donor_pref); _ -> mochi_nth(Donor + 1, Donor_pref) end end),
            Recipient = (case erlang:is_map(Donor_preference) of true -> maps:get((case erlang:is_map(Num_donations_2) of true -> maps:get(Donor, Num_donations_2, nil); _ -> case Donor < 0 of true -> mochi_nth(erlang:length(Num_donations_2) + Donor + 1, Num_donations_2); _ -> mochi_nth(Donor + 1, Num_donations_2) end end), Donor_preference, nil); _ -> case (case erlang:is_map(Num_donations_2) of true -> maps:get(Donor, Num_donations_2, nil); _ -> case Donor < 0 of true -> mochi_nth(erlang:length(Num_donations_2) + Donor + 1, Num_donations_2); _ -> mochi_nth(Donor + 1, Num_donations_2) end end) < 0 of true -> mochi_nth(erlang:length(Donor_preference) + (case erlang:is_map(Num_donations_2) of true -> maps:get(Donor, Num_donations_2, nil); _ -> case Donor < 0 of true -> mochi_nth(erlang:length(Num_donations_2) + Donor + 1, Num_donations_2); _ -> mochi_nth(Donor + 1, Num_donations_2) end end) + 1, Donor_preference); _ -> mochi_nth((case erlang:is_map(Num_donations_2) of true -> maps:get(Donor, Num_donations_2, nil); _ -> case Donor < 0 of true -> mochi_nth(erlang:length(Num_donations_2) + Donor + 1, Num_donations_2); _ -> mochi_nth(Donor + 1, Num_donations_2) end end) + 1, Donor_preference) end end),
            Num_donations_3 = lists:sublist(Num_donations_2, Donor) ++ [((case erlang:is_map(Num_donations_2) of true -> maps:get(Donor, Num_donations_2, nil); _ -> case Donor < 0 of true -> mochi_nth(erlang:length(Num_donations_2) + Donor + 1, Num_donations_2); _ -> mochi_nth(Donor + 1, Num_donations_2) end end) + 1)] ++ lists:nthtail(Donor + 1, Num_donations_2),
            Rec_preference = (case erlang:is_map(Recipient_pref) of true -> maps:get(Recipient, Recipient_pref, nil); _ -> case Recipient < 0 of true -> mochi_nth(erlang:length(Recipient_pref) + Recipient + 1, Recipient_pref); _ -> mochi_nth(Recipient + 1, Recipient_pref) end end),
            Prev_donor = (case erlang:is_map(Rec_record_2) of true -> maps:get(Recipient, Rec_record_2, nil); _ -> case Recipient < 0 of true -> mochi_nth(erlang:length(Rec_record_2) + Recipient + 1, Rec_record_2); _ -> mochi_nth(Recipient + 1, Rec_record_2) end end),
            case (Prev_donor /= (0 - 1)) of
        true -> Prev_index = index_of(Rec_preference, Prev_donor),
            New_index = index_of(Rec_preference, Donor),
            case (Prev_index > New_index) of
        true -> Rec_record_3 = lists:sublist(Rec_record_2, Recipient) ++ [Donor] ++ lists:nthtail(Recipient + 1, Rec_record_2),
            Donor_record_3 = lists:sublist(Donor_record_2, Donor) ++ [Recipient] ++ lists:nthtail(Donor + 1, Donor_record_2),
            Unmatched_3 = lists:append((case Unmatched_2 of nil -> []; _ -> Unmatched_2 end), [Prev_donor]),
            Unmatched_4 = remove_item(Unmatched_3, Donor),
            Donor_record_4 = Donor_record_3,
            Rec_record_4 = Rec_record_3,
            Unmatched_5 = Unmatched_4;
        _ -> Donor_record_4 = Donor_record_2,
            Rec_record_4 = Rec_record_2,
            Unmatched_5 = Unmatched_2
    end,
            Donor_record_6 = Donor_record_4,
            New_index_2 = New_index,
            Prev_index_2 = Prev_index,
            Rec_record_6 = Rec_record_4,
            Unmatched_7 = Unmatched_5;
        _ -> Rec_record_5 = lists:sublist(Rec_record_2, Recipient) ++ [Donor] ++ lists:nthtail(Recipient + 1, Rec_record_2),
            Donor_record_5 = lists:sublist(Donor_record_2, Donor) ++ [Recipient] ++ lists:nthtail(Donor + 1, Donor_record_2),
            Unmatched_6 = remove_item(Unmatched_2, Donor),
            Donor_record_6 = Donor_record_5,
            New_index_2 = nil,
            Prev_index_2 = nil,
            Rec_record_6 = Rec_record_5,
            Unmatched_7 = Unmatched_6
    end,
            Fun_7_loop(Donor_pref, Donor_record_6, I_12, N, Num_donations_3, Rec_record_6, Recipient_pref, Unmatched_7);
        _ -> {Donor_pref, Donor_record_2, I_12, N, Num_donations_2, Rec_record_2, Recipient_pref, Unmatched_2}
    end
end,
{Donor_pref, Donor_record_6, I_12, N, Num_donations_3, Rec_record_6, Recipient_pref, Unmatched_7} = Fun_7(Donor_pref, Donor_record_2, I_12, N, Num_donations_2, Rec_record_2, Recipient_pref, Unmatched_2),
        Donor_record_6
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('donor_pref', [[0, 1, 3, 2], [0, 2, 3, 1], [1, 0, 2, 3], [0, 3, 1, 2]]),
    erlang:put('recipient_pref', [[3, 1, 2, 0], [3, 1, 0, 2], [0, 3, 1, 2], [1, 0, 3, 2]]),
    io:format("~ts~n", [mochi_str(stable_matching(erlang:get('donor_pref'), erlang:get('recipient_pref')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
