#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, new_graph/0, add_edge/4, make_ds/1, find_set/2, union_set/3, sort_edges/1, kruskal/1, print_mst/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

new_graph() ->
    try
        #{"edges" => [], "num_nodes" => 0}
    catch {return, Ret} -> Ret end.

add_edge(G, U, V, W) ->
    try
        Es = maps:get("edges", G, nil),
        Es_2 = lists:append((case Es of nil -> []; _ -> Es end), [#{"u" => U, "v" => V, "w" => W}]),
        N = maps:get("num_nodes", G, nil),
        case (U > N) of
        true -> N_2 = U,
            N_3 = N_2;
        _ -> N_3 = N
    end,
        case (V > N_3) of
        true -> N_4 = V,
            N_5 = N_4;
        _ -> N_5 = N_3
    end,
        #{"edges" => Es_2, "num_nodes" => N_5}
    catch {return, Ret} -> Ret end.

make_ds(N_6) ->
    try
        Parent = [],
        Rank = [],
        I = 0,
        Fun = fun Fun_loop(I, N_6, Parent, Rank) ->
    case (I =< N_6) of
        true ->
            Parent_2 = lists:append((case Parent of nil -> []; _ -> Parent end), [I]),
            Rank_2 = lists:append((case Rank of nil -> []; _ -> Rank end), [0]),
            I_2 = (I + 1),
            Fun_loop(I_2, N_6, Parent_2, Rank_2);
        _ -> {I, N_6, Parent, Rank}
    end
end,
{I_2, N_6, Parent_2, Rank_2} = Fun(I, N_6, Parent, Rank),
        #{"parent" => Parent_2, "rank" => Rank_2}
    catch {return, Ret} -> Ret end.

find_set(Ds, X) ->
    try
        case ((case erlang:is_map(maps:get("parent", Ds, nil)) of true -> maps:get(X, maps:get("parent", Ds, nil), nil); _ -> case X < 0 of true -> lists:nth(erlang:length(maps:get("parent", Ds, nil)) + X + 1, maps:get("parent", Ds, nil)); _ -> lists:nth(X + 1, maps:get("parent", Ds, nil)) end end) == X) of
        true -> throw({return, #{"ds" => Ds, "root" => X}});
        _ -> ok
    end,
        Res = find_set(Ds, (case erlang:is_map(maps:get("parent", Ds, nil)) of true -> maps:get(X, maps:get("parent", Ds, nil), nil); _ -> case X < 0 of true -> lists:nth(erlang:length(maps:get("parent", Ds, nil)) + X + 1, maps:get("parent", Ds, nil)); _ -> lists:nth(X + 1, maps:get("parent", Ds, nil)) end end)),
        P = maps:get("parent", maps:get("ds", Res, nil), nil),
        P_2 = lists:sublist(P, X) ++ [maps:get("root", Res, nil)] ++ lists:nthtail(X + 1, P),
        #{"ds" => #{"parent" => P_2, "rank" => maps:get("rank", maps:get("ds", Res, nil), nil)}, "root" => maps:get("root", Res, nil)}
    catch {return, Ret} -> Ret end.

union_set(Ds_2, X_2, Y) ->
    try
        Fx = find_set(Ds_2, X_2),
        Ds1 = maps:get("ds", Fx, nil),
        X_root = maps:get("root", Fx, nil),
        Fy = find_set(Ds1, Y),
        Ds2 = maps:get("ds", Fy, nil),
        Y_root = maps:get("root", Fy, nil),
        case (X_root == Y_root) of
        true -> throw({return, Ds2});
        _ -> ok
    end,
        P_3 = maps:get("parent", Ds2, nil),
        R = maps:get("rank", Ds2, nil),
        case ((case erlang:is_map(R) of true -> maps:get(X_root, R, nil); _ -> case X_root < 0 of true -> lists:nth(erlang:length(R) + X_root + 1, R); _ -> lists:nth(X_root + 1, R) end end) > (case erlang:is_map(R) of true -> maps:get(Y_root, R, nil); _ -> case Y_root < 0 of true -> lists:nth(erlang:length(R) + Y_root + 1, R); _ -> lists:nth(Y_root + 1, R) end end)) of
        true -> P_4 = lists:sublist(P_3, Y_root) ++ [X_root] ++ lists:nthtail(Y_root + 1, P_3),
            P_6 = P_4,
            R_4 = R;
        _ -> P_5 = lists:sublist(P_3, X_root) ++ [Y_root] ++ lists:nthtail(X_root + 1, P_3),
            case ((case erlang:is_map(R) of true -> maps:get(X_root, R, nil); _ -> case X_root < 0 of true -> lists:nth(erlang:length(R) + X_root + 1, R); _ -> lists:nth(X_root + 1, R) end end) == (case erlang:is_map(R) of true -> maps:get(Y_root, R, nil); _ -> case Y_root < 0 of true -> lists:nth(erlang:length(R) + Y_root + 1, R); _ -> lists:nth(Y_root + 1, R) end end)) of
        true -> R_2 = lists:sublist(R, Y_root) ++ [((case erlang:is_map(R) of true -> maps:get(Y_root, R, nil); _ -> case Y_root < 0 of true -> lists:nth(erlang:length(R) + Y_root + 1, R); _ -> lists:nth(Y_root + 1, R) end end) + 1)] ++ lists:nthtail(Y_root + 1, R),
            R_3 = R_2;
        _ -> R_3 = R
    end,
            P_6 = P_5,
            R_4 = R_3
    end,
        #{"parent" => P_6, "rank" => R_4}
    catch {return, Ret} -> Ret end.

sort_edges(Edges) ->
    try
        Arr = Edges,
        I_3 = 1,
        Fun_3 = fun Fun_3_loop(Arr, Edges, I_3) ->
    case (I_3 < erlang:length(Arr)) of
        true ->
            try
                Key = (case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Arr) + I_3 + 1, Arr); _ -> lists:nth(I_3 + 1, Arr) end end),
                J = (I_3 - 1),
                Fun_2 = fun Fun_2_loop(Arr, Edges, I_3, J, Key) ->
    case (J >= 0) of
        true ->
            try
                Temp = (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Arr) + J + 1, Arr); _ -> lists:nth(J + 1, Arr) end end),
                case ((maps:get("w", Temp, nil) > maps:get("w", Key, nil)) orelse ((maps:get("w", Temp, nil) == maps:get("w", Key, nil)) andalso ((maps:get("u", Temp, nil) > maps:get("u", Key, nil)) orelse ((maps:get("u", Temp, nil) == maps:get("u", Key, nil)) andalso (maps:get("v", Temp, nil) > maps:get("v", Key, nil)))))) of
        true -> Arr_2 = lists:sublist(Arr, (J + 1)) ++ [Temp] ++ lists:nthtail((J + 1) + 1, Arr),
            J_2 = (J - 1),
            Arr_3 = Arr_2,
            J_3 = J_2;
        _ -> throw({break, Arr, Edges, I_3, J, Key}),
            Arr_3 = Arr,
            J_3 = J
    end,
                Fun_2_loop(Arr_3, Edges, I_3, J_3, Key)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_2_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Arr, Edges, I_3, J, Key}
    end
end,
{Arr_3, Edges, I_3, J_3, Key} = Fun_2(Arr, Edges, I_3, J, Key),
                Arr_4 = lists:sublist(Arr_3, (J_3 + 1)) ++ [Key] ++ lists:nthtail((J_3 + 1) + 1, Arr_3),
                I_4 = (I_3 + 1),
                Fun_3_loop(Arr_4, Edges, I_4)
            catch
                {continue, C0, C1, C2} -> Fun_3_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Arr, Edges, I_3}
    end
end,
{Arr_4, Edges, I_4} = Fun_3(Arr, Edges, I_3),
        Arr_4
    catch {return, Ret} -> Ret end.

kruskal(G_2) ->
    try
        Edges_2 = sort_edges(maps:get("edges", G_2, nil)),
        Ds_3 = make_ds(maps:get("num_nodes", G_2, nil)),
        Mst_edges = [],
        I_5 = 0,
        Added = 0,
        Fun_4 = fun Fun_4_loop(Added, Ds_3, Edges_2, G_2, I_5, Mst_edges) ->
    case ((Added < (maps:get("num_nodes", G_2, nil) - 1)) andalso (I_5 < erlang:length(Edges_2))) of
        true ->
            E = (case erlang:is_map(Edges_2) of true -> maps:get(I_5, Edges_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Edges_2) + I_5 + 1, Edges_2); _ -> lists:nth(I_5 + 1, Edges_2) end end),
            I_6 = (I_5 + 1),
            Fu = find_set(Ds_3, maps:get("u", E, nil)),
            Ds_4 = maps:get("ds", Fu, nil),
            Ru = maps:get("root", Fu, nil),
            Fv = find_set(Ds_4, maps:get("v", E, nil)),
            Ds_5 = maps:get("ds", Fv, nil),
            Rv = maps:get("root", Fv, nil),
            case (Ru /= Rv) of
        true -> Mst_edges_2 = lists:append((case Mst_edges of nil -> []; _ -> Mst_edges end), [E]),
            Added_2 = (Added + 1),
            Ds_6 = union_set(Ds_5, Ru, Rv),
            Added_3 = Added_2,
            Ds_7 = Ds_6,
            Mst_edges_3 = Mst_edges_2;
        _ -> Added_3 = Added,
            Ds_7 = Ds_5,
            Mst_edges_3 = Mst_edges
    end,
            Fun_4_loop(Added_3, Ds_7, Edges_2, G_2, I_6, Mst_edges_3);
        _ -> {Added, Ds_3, Edges_2, G_2, I_5, Mst_edges}
    end
end,
{Added_3, Ds_7, Edges_2, G_2, I_6, Mst_edges_3} = Fun_4(Added, Ds_3, Edges_2, G_2, I_5, Mst_edges),
        #{"edges" => Mst_edges_3, "num_nodes" => maps:get("num_nodes", G_2, nil)}
    catch {return, Ret} -> Ret end.

print_mst(G_3) ->
    try
        Es_3 = sort_edges(maps:get("edges", G_3, nil)),
        Fun_5 = fun Fun_5_loop(List, Es_3, G_3) ->
    case List of
        [] -> {Es_3, G_3};
        [E_2|E_2_rest] ->
            io:format("~ts~n", [mochi_repr(((((mochi_str(maps:get("u", E_2, nil)) ++ "-") ++ mochi_str(maps:get("v", E_2, nil))) ++ ":") ++ mochi_str(maps:get("w", E_2, nil))))]),
            Fun_5_loop(E_2_rest, Es_3, G_3);
        _ -> {Es_3, G_3}
    end
end,
{Es_3, G_3} = Fun_5(Es_3, Es_3, G_3),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        G_4 = new_graph(),
        G_5 = add_edge(G_4, 1, 2, 1),
        G_6 = add_edge(G_5, 2, 3, 2),
        G_7 = add_edge(G_6, 3, 4, 1),
        G_8 = add_edge(G_7, 3, 5, 100),
        G_9 = add_edge(G_8, 4, 5, 5),
        Mst = kruskal(G_9),
        print_mst(Mst),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
