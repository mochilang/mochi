#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_conn_mock/0, conn_recv/2, conn_send/2, conn_close/1, make_socket_mock/1, socket_bind/1, socket_listen/1, socket_accept/1, socket_shutdown/1, socket_close/1, make_file_mock/1, file_read/2, file_open/0, send_file/2, test_send_file_running_as_expected/0]).

% Generated by Mochi transpiler v0.10.64 (25cf3a3e28) on 2025-08-13 12:32 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_conn_mock() ->
    try
        #{"recv_called" => 0, "send_called" => 0, "close_called" => 0}
    catch {return, RetCatch} -> RetCatch end.

conn_recv(Conn, Size) ->
    try
        Conn_2 = maps:put("recv_called", (maps:get("recv_called", Conn, nil) + 1), Conn),
        {nil, Conn_2}
    catch {return, RetCatch} -> RetCatch end.

conn_send(Conn_3, Data) ->
    try
        Conn_4 = maps:put("send_called", (maps:get("send_called", Conn_3, nil) + 1), Conn_3),
        {nil, Conn_4}
    catch {return, RetCatch} -> RetCatch end.

conn_close(Conn_5) ->
    try
        Conn_6 = maps:put("close_called", (maps:get("close_called", Conn_5, nil) + 1), Conn_5),
        {nil, Conn_6}
    catch {return, RetCatch} -> RetCatch end.

make_socket_mock(Conn_7) ->
    try
        #{"bind_called" => 0, "listen_called" => 0, "accept_called" => 0, "shutdown_called" => 0, "close_called" => 0, "conn" => Conn_7}
    catch {return, RetCatch} -> RetCatch end.

socket_bind(Sock) ->
    try
        Sock_2 = maps:put("bind_called", (maps:get("bind_called", Sock, nil) + 1), Sock),
        {nil, Sock_2}
    catch {return, RetCatch} -> RetCatch end.

socket_listen(Sock_3) ->
    try
        Sock_4 = maps:put("listen_called", (maps:get("listen_called", Sock_3, nil) + 1), Sock_3),
        {nil, Sock_4}
    catch {return, RetCatch} -> RetCatch end.

socket_accept(Sock_5) ->
    try
        Sock_6 = maps:put("accept_called", (maps:get("accept_called", Sock_5, nil) + 1), Sock_5),
        maps:get("conn", Sock_6, nil)
    catch {return, RetCatch} -> RetCatch end.

socket_shutdown(Sock_7) ->
    try
        Sock_8 = maps:put("shutdown_called", (maps:get("shutdown_called", Sock_7, nil) + 1), Sock_7),
        {nil, Sock_8}
    catch {return, RetCatch} -> RetCatch end.

socket_close(Sock_9) ->
    try
        Sock_10 = maps:put("close_called", (maps:get("close_called", Sock_9, nil) + 1), Sock_9),
        {nil, Sock_10}
    catch {return, RetCatch} -> RetCatch end.

make_file_mock(Values) ->
    try
        #{"read_called" => 0, "data" => Values}
    catch {return, RetCatch} -> RetCatch end.

file_read(F, Size_2) ->
    try
        case (maps:get("read_called", F, nil) < erlang:length(maps:get("data", F, nil))) of
        true -> Value = (case erlang:is_map(maps:get("data", F, nil)) of true -> maps:get(maps:get("read_called", F, nil), maps:get("data", F, nil), nil); _ -> case maps:get("read_called", F, nil) < 0 of true -> mochi_nth(erlang:length(maps:get("data", F, nil)) + maps:get("read_called", F, nil) + 1, maps:get("data", F, nil)); _ -> mochi_nth(maps:get("read_called", F, nil) + 1, maps:get("data", F, nil)) end end),
            F_2 = maps:put("read_called", (maps:get("read_called", F, nil) + 1), F),
            throw({return, Value}),
            F_3 = F_2,
            Value_2 = Value;
        _ -> F_3 = F,
            Value_2 = nil
    end,
        F_4 = maps:put("read_called", (maps:get("read_called", F_3, nil) + 1), F_3),
        {nil, F_4}
    catch {return, RetCatch} -> RetCatch end.

file_open() ->
    try
        make_file_mock([1, 0])
    catch {return, RetCatch} -> RetCatch end.

send_file(Sock_11, F_5) ->
    try
        Sock_res = socket_bind(Sock_11),
        Sock_tmp = element(2, Sock_res),
        Sock_11 = Sock_tmp,
        Sock_res_2 = socket_listen(Sock_11),
        Sock_tmp_2 = element(2, Sock_res_2),
        Sock_11 = Sock_tmp_2,
        Conn_8 = socket_accept(Sock_11),
        _ = conn_recv(Conn_8, 1024),
        {Data_2, F_6} = file_read(F_5, 1024),
        Fun = fun Fun_loop(Conn_8, Data_2, F_6, Sock_11, Sock_res_2, Sock_tmp_2) ->
    case (Data_2 /= 0) of
        true ->
            Conn_res = conn_send(Conn_8, Data_2),
            Conn_tmp = element(2, Conn_res),
            Conn_8 = Conn_tmp,
            {Data_3, F_7} = file_read(F_6, 1024),
            Fun_loop(Conn_8, Data_3, F_7, Sock_11, Sock_res_2, Sock_tmp_2);
        _ -> {Conn_8, Data_2, F_6, Sock_11, Sock_res_2, Sock_tmp_2}
    end
end,
{Conn_8, Data_3, F_7, Sock_11, Sock_res_2, Sock_tmp_2} = Fun(Conn_8, Data_2, F_6, Sock_11, Sock_res_2, Sock_tmp_2),
        Conn_res_2 = conn_close(Conn_8),
        Conn_tmp_2 = element(2, Conn_res_2),
        Conn_8 = Conn_tmp_2,
        Sock_res_3 = socket_shutdown(Sock_11),
        Sock_tmp_3 = element(2, Sock_res_3),
        Sock_11 = Sock_tmp_3,
        Sock_res_4 = socket_close(Sock_11),
        Sock_tmp_4 = element(2, Sock_res_4),
        Sock_11 = Sock_tmp_4,
        nil
    catch {return, RetCatch} -> RetCatch end.

test_send_file_running_as_expected() ->
    try
        Conn_9 = make_conn_mock(),
        Sock_12 = make_socket_mock(Conn_9),
        F_8 = file_open(),
        send_file(Sock_12, F_8),
        case (((((((((maps:get("bind_called", Sock_12, nil) == 1) andalso (maps:get("listen_called", Sock_12, nil) == 1)) andalso (maps:get("accept_called", Sock_12, nil) == 1)) andalso (maps:get("recv_called", Conn_9, nil) == 1)) andalso (maps:get("read_called", F_8, nil) >= 1)) andalso (maps:get("send_called", Conn_9, nil) == 1)) andalso (maps:get("close_called", Conn_9, nil) == 1)) andalso (maps:get("shutdown_called", Sock_12, nil) == 1)) andalso (maps:get("close_called", Sock_12, nil) == 1)) of
        true -> throw({return, "pass"});
        _ -> ok
    end,
        "fail"
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(test_send_file_running_as_expected())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
