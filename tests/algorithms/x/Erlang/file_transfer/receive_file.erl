#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, receive_file/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

receive_file(Chunks) ->
    try
        Out = "",
        I = 0,
        io:format("~ts~n", [mochi_repr("File opened")]),
        io:format("~ts~n", [mochi_repr("Receiving data...")]),
        Fun = fun Fun_loop(Chunks, I, Out) ->
    case (I < erlang:length(Chunks)) of
        true ->
            try
                Data = (case erlang:is_map(Chunks) of true -> maps:get(I, Chunks, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Chunks) + I + 1, Chunks); _ -> lists:nth(I + 1, Chunks) end end),
                case (Data == "") of
        true -> throw({break, Chunks, I, Out});
        _ -> ok
    end,
                Out_2 = (Out ++ Data),
                I_2 = (I + 1),
                Fun_loop(Chunks, I_2, Out_2)
            catch
                {continue, C0, C1, C2} -> Fun_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Chunks, I, Out}
    end
end,
{Chunks, I_2, Out_2} = Fun(Chunks, I, Out),
        io:format("~ts~n", [mochi_repr("Successfully received the file")]),
        io:format("~ts~n", [mochi_repr("Connection closed")]),
        Out_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Incoming = ["Hello ", "from ", "server"],
        Received = receive_file(Incoming),
        io:format("~ts~n", [mochi_repr(Received)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
