#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, longest_subsequence/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

longest_subsequence(Xs) ->
    try
        N = erlang:length(Xs),
        case (N =< 1) of
        true -> throw({return, Xs});
        _ -> ok
    end,
        Pivot = (case erlang:is_map(Xs) of true -> maps:get(0, Xs, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Xs) + 0 + 1, Xs); _ -> lists:nth(0 + 1, Xs) end end),
        Is_found = false,
        I = 1,
        Longest_subseq = [],
        Fun = fun Fun_loop(I, Is_found, Longest_subseq, N, Pivot, Xs) ->
    case (mochi_not(Is_found) andalso (I < N)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Xs) + I + 1, Xs); _ -> lists:nth(I + 1, Xs) end end) < Pivot) of
        true -> Is_found_2 = true,
            Temp_array = (case erlang:is_binary(Xs) of true -> string:substr(Xs, I + 1, (N - I)); _ -> lists:sublist(Xs, (I + 1), (N - I)) end),
            Temp_array_2 = longest_subsequence(Temp_array),
            case (erlang:length(Temp_array_2) > erlang:length(Longest_subseq)) of
        true -> Longest_subseq_2 = Temp_array_2,
            Longest_subseq_3 = Longest_subseq_2;
        _ -> Longest_subseq_3 = Longest_subseq
    end,
            I_3 = I,
            Is_found_3 = Is_found_2,
            Longest_subseq_4 = Longest_subseq_3,
            Temp_array_3 = Temp_array_2;
        _ -> I_2 = (I + 1),
            I_3 = I_2,
            Is_found_3 = Is_found,
            Longest_subseq_4 = Longest_subseq,
            Temp_array_3 = nil
    end,
            Fun_loop(I_3, Is_found_3, Longest_subseq_4, N, Pivot, Xs);
        _ -> {I, Is_found, Longest_subseq, N, Pivot, Xs}
    end
end,
{I_3, Is_found_3, Longest_subseq_4, N, Pivot, Xs} = Fun(I, Is_found, Longest_subseq, N, Pivot, Xs),
        Filtered = [],
        J = 1,
        Fun_2 = fun Fun_2_loop(Filtered, I_3, Is_found_3, J, Longest_subseq_4, N, Pivot, Xs) ->
    case (J < N) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(J, Xs, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Xs) + J + 1, Xs); _ -> lists:nth(J + 1, Xs) end end) >= Pivot) of
        true -> Filtered_2 = lists:append((case Filtered of nil -> []; _ -> Filtered end), [(case erlang:is_map(Xs) of true -> maps:get(J, Xs, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Xs) + J + 1, Xs); _ -> lists:nth(J + 1, Xs) end end)]),
            Filtered_3 = Filtered_2;
        _ -> Filtered_3 = Filtered
    end,
            J_2 = (J + 1),
            Fun_2_loop(Filtered_3, I_3, Is_found_3, J_2, Longest_subseq_4, N, Pivot, Xs);
        _ -> {Filtered, I_3, Is_found_3, J, Longest_subseq_4, N, Pivot, Xs}
    end
end,
{Filtered_3, I_3, Is_found_3, J_2, Longest_subseq_4, N, Pivot, Xs} = Fun_2(Filtered, I_3, Is_found_3, J, Longest_subseq_4, N, Pivot, Xs),
        Candidate = [],
        Candidate_2 = lists:append((case Candidate of nil -> []; _ -> Candidate end), [Pivot]),
        Candidate_3 = lists:append(Candidate_2, longest_subsequence(Filtered_3)),
        case (erlang:length(Candidate_3) > erlang:length(Longest_subseq_4)) of
        true -> throw({return, Candidate_3});
        _ -> throw({return, Longest_subseq_4})
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
