#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, copy_list/1, subset_combinations/2]).

% Generated by Mochi transpiler v0.10.64 (25cf3a3e28) on 2025-08-13 12:32 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

copy_list(Src) ->
    try
        Result = [],
        I = 0,
        Fun = fun Fun_loop(I, Result, Src) ->
    case (I < erlang:length(Src)) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Src) of true -> maps:get(I, Src, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Src) + I + 1, Src); _ -> mochi_nth(I + 1, Src) end end)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Result_2, Src);
        _ -> {I, Result, Src}
    end
end,
{I_2, Result_2, Src} = Fun(I, Result, Src),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

subset_combinations(Elements, N) ->
    try
        R = erlang:length(Elements),
        case (N > R) of
        true -> throw({return, []});
        _ -> ok
    end,
        Dp = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Dp, Elements, I_3, N, R) ->
    case (I_3 =< R) of
        true ->
            Dp_2 = lists:append((case Dp of nil -> []; _ -> Dp end), [[]]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Dp_2, Elements, I_4, N, R);
        _ -> {Dp, Elements, I_3, N, R}
    end
end,
{Dp_2, Elements, I_4, N, R} = Fun_2(Dp, Elements, I_3, N, R),
        Dp_3 = lists:sublist(Dp_2, 0) ++ [lists:append((case (case erlang:is_map(Dp_2) of true -> maps:get(0, Dp_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Dp_2) + 0 + 1, Dp_2); _ -> mochi_nth(0 + 1, Dp_2) end end) of nil -> []; _ -> (case erlang:is_map(Dp_2) of true -> maps:get(0, Dp_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Dp_2) + 0 + 1, Dp_2); _ -> mochi_nth(0 + 1, Dp_2) end end) end), [[]])] ++ lists:nthtail(0 + 1, Dp_2),
        I_5 = 1,
        Fun_5 = fun Fun_5_loop(Dp_3, Elements, I_5, N, R) ->
    case (I_5 =< R) of
        true ->
            J = I_5,
            Fun_4 = fun Fun_4_loop(Dp_3, Elements, I_5, J, N, R) ->
    case (J > 0) of
        true ->
            Prevs = (case erlang:is_map(Dp_3) of true -> maps:get((J - 1), Dp_3, nil); _ -> case (J - 1) < 0 of true -> mochi_nth(erlang:length(Dp_3) + (J - 1) + 1, Dp_3); _ -> mochi_nth((J - 1) + 1, Dp_3) end end),
            K = 0,
            Fun_3 = fun Fun_3_loop(Dp_3, Elements, I_5, J, K, N, Prevs, R) ->
    case (K < erlang:length(Prevs)) of
        true ->
            Prev = (case erlang:is_map(Prevs) of true -> maps:get(K, Prevs, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Prevs) + K + 1, Prevs); _ -> mochi_nth(K + 1, Prevs) end end),
            Comb = copy_list(Prev),
            Comb_2 = lists:append((case Comb of nil -> []; _ -> Comb end), [(case erlang:is_map(Elements) of true -> maps:get((I_5 - 1), Elements, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Elements) + (I_5 - 1) + 1, Elements); _ -> mochi_nth((I_5 - 1) + 1, Elements) end end)]),
            Dp_4 = lists:sublist(Dp_3, J) ++ [lists:append((case (case erlang:is_map(Dp_3) of true -> maps:get(J, Dp_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Dp_3) + J + 1, Dp_3); _ -> mochi_nth(J + 1, Dp_3) end end) of nil -> []; _ -> (case erlang:is_map(Dp_3) of true -> maps:get(J, Dp_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Dp_3) + J + 1, Dp_3); _ -> mochi_nth(J + 1, Dp_3) end end) end), [Comb_2])] ++ lists:nthtail(J + 1, Dp_3),
            K_2 = (K + 1),
            Fun_3_loop(Dp_4, Elements, I_5, J, K_2, N, Prevs, R);
        _ -> {Dp_3, Elements, I_5, J, K, N, Prevs, R}
    end
end,
{Dp_4, Elements, I_5, J, K_2, N, Prevs, R} = Fun_3(Dp_3, Elements, I_5, J, K, N, Prevs, R),
            J_2 = (J - 1),
            Fun_4_loop(Dp_4, Elements, I_5, J_2, N, R);
        _ -> {Dp_3, Elements, I_5, J, N, R}
    end
end,
{Dp_4, Elements, I_5, J_2, N, R} = Fun_4(Dp_3, Elements, I_5, J, N, R),
            I_6 = (I_5 + 1),
            Fun_5_loop(Dp_4, Elements, I_6, N, R);
        _ -> {Dp_3, Elements, I_5, N, R}
    end
end,
{Dp_4, Elements, I_6, N, R} = Fun_5(Dp_3, Elements, I_5, N, R),
        (case erlang:is_map(Dp_4) of true -> maps:get(N, Dp_4, nil); _ -> case N < 0 of true -> mochi_nth(erlang:length(Dp_4) + N + 1, Dp_4); _ -> mochi_nth(N + 1, Dp_4) end end)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(subset_combinations([10, 20, 30, 40], 2))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
