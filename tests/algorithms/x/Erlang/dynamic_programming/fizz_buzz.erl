#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, fizz_buzz/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

fizz_buzz(Number, Iterations) ->
    try
        case (Number < 1) of
        true -> erlang:error("starting number must be an integer and be more than 0");
        _ -> ok
    end,
        case (Iterations < 1) of
        true -> erlang:error("Iterations must be done more than 0 times to play FizzBuzz");
        _ -> ok
    end,
        Out = "",
        N = Number,
        Fun = fun Fun_loop(Iterations, N, Number, Out) ->
    case (N =< Iterations) of
        true ->
            case (mochi_mod(N, 3) == 0) of
        true -> Out_2 = (Out ++ "Fizz"),
            Out_3 = Out_2;
        _ -> Out_3 = Out
    end,
            case (mochi_mod(N, 5) == 0) of
        true -> Out_4 = (Out_3 ++ "Buzz"),
            Out_5 = Out_4;
        _ -> Out_5 = Out_3
    end,
            case ((mochi_mod(N, 3) /= 0) andalso (mochi_mod(N, 5) /= 0)) of
        true -> Out_6 = (Out_5 ++ mochi_str(N)),
            Out_7 = Out_6;
        _ -> Out_7 = Out_5
    end,
            Out_8 = (Out_7 ++ " "),
            N_2 = (N + 1),
            Fun_loop(Iterations, N_2, Number, Out_8);
        _ -> {Iterations, N, Number, Out}
    end
end,
{Iterations, N_2, Number, Out_8} = Fun(Iterations, N, Number, Out),
        Out_8
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(fizz_buzz(1, 7))]),
    io:format("~ts~n", [mochi_repr(fizz_buzz(1, 15))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
