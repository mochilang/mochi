#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ceil_index/4, longest_increasing_subsequence_length/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

ceil_index(V, Left, Right, Key) ->
    try
        L = Left,
        R = Right,
        Fun = fun Fun_loop(Key, L, Left, R, Right, V) ->
    case ((R - L) > 1) of
        true ->
            Middle = ((L + R) div 2),
            case ((case erlang:is_map(V) of true -> maps:get(Middle, V, nil); _ -> case Middle < 0 of true -> lists:nth(erlang:length(V) + Middle + 1, V); _ -> lists:nth(Middle + 1, V) end end) >= Key) of
        true -> R_2 = Middle,
            L_3 = L,
            R_3 = R_2;
        _ -> L_2 = Middle,
            L_3 = L_2,
            R_3 = R
    end,
            Fun_loop(Key, L_3, Left, R_3, Right, V);
        _ -> {Key, L, Left, R, Right, V}
    end
end,
{Key, L_3, Left, R_3, Right, V} = Fun(Key, L, Left, R, Right, V),
        R_3
    catch {return, Ret} -> Ret end.

longest_increasing_subsequence_length(V_2) ->
    try
        case (erlang:length(V_2) == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Tail = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Tail, V_2) ->
    case (I < erlang:length(V_2)) of
        true ->
            Tail_2 = lists:append((case Tail of nil -> []; _ -> Tail end), [0]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Tail_2, V_2);
        _ -> {I, Tail, V_2}
    end
end,
{I_2, Tail_2, V_2} = Fun_2(I, Tail, V_2),
        Length = 1,
        Tail_3 = lists:sublist(Tail_2, 0) ++ [(case erlang:is_map(V_2) of true -> maps:get(0, V_2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(V_2) + 0 + 1, V_2); _ -> lists:nth(0 + 1, V_2) end end)] ++ lists:nthtail(0 + 1, Tail_2),
        J = 1,
        Fun_3 = fun Fun_3_loop(I_2, J, Length, Tail_3, V_2) ->
    case (J < erlang:length(V_2)) of
        true ->
            case ((case erlang:is_map(V_2) of true -> maps:get(J, V_2, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(V_2) + J + 1, V_2); _ -> lists:nth(J + 1, V_2) end end) < (case erlang:is_map(Tail_3) of true -> maps:get(0, Tail_3, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Tail_3) + 0 + 1, Tail_3); _ -> lists:nth(0 + 1, Tail_3) end end)) of
        true -> Tail_4 = lists:sublist(Tail_3, 0) ++ [(case erlang:is_map(V_2) of true -> maps:get(J, V_2, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(V_2) + J + 1, V_2); _ -> lists:nth(J + 1, V_2) end end)] ++ lists:nthtail(0 + 1, Tail_3),
            Idx_3 = nil,
            Length_4 = Length,
            Tail_8 = Tail_4;
        _ -> case ((case erlang:is_map(V_2) of true -> maps:get(J, V_2, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(V_2) + J + 1, V_2); _ -> lists:nth(J + 1, V_2) end end) > (case erlang:is_map(Tail_3) of true -> maps:get((Length - 1), Tail_3, nil); _ -> case (Length - 1) < 0 of true -> lists:nth(erlang:length(Tail_3) + (Length - 1) + 1, Tail_3); _ -> lists:nth((Length - 1) + 1, Tail_3) end end)) of
        true -> Tail_5 = lists:sublist(Tail_3, Length) ++ [(case erlang:is_map(V_2) of true -> maps:get(J, V_2, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(V_2) + J + 1, V_2); _ -> lists:nth(J + 1, V_2) end end)] ++ lists:nthtail(Length + 1, Tail_3),
            Length_2 = (Length + 1),
            Idx_2 = nil,
            Length_3 = Length_2,
            Tail_7 = Tail_5;
        _ -> Idx = ceil_index(Tail_3, -1, (Length - 1), (case erlang:is_map(V_2) of true -> maps:get(J, V_2, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(V_2) + J + 1, V_2); _ -> lists:nth(J + 1, V_2) end end)),
            Tail_6 = lists:sublist(Tail_3, Idx) ++ [(case erlang:is_map(V_2) of true -> maps:get(J, V_2, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(V_2) + J + 1, V_2); _ -> lists:nth(J + 1, V_2) end end)] ++ lists:nthtail(Idx + 1, Tail_3),
            Idx_2 = Idx,
            Length_3 = Length,
            Tail_7 = Tail_6
    end,
            Idx_3 = Idx_2,
            Length_4 = Length_3,
            Tail_8 = Tail_7
    end,
            J_2 = (J + 1),
            Fun_3_loop(I_2, J_2, Length_4, Tail_8, V_2);
        _ -> {I_2, J, Length, Tail_3, V_2}
    end
end,
{I_2, J_2, Length_4, Tail_8, V_2} = Fun_3(I_2, J, Length, Tail_3, V_2),
        Length_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        Example1 = [2, 5, 3, 7, 11, 8, 10, 13, 6],
        Example2 = [],
        Example3 = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15],
        Example4 = [5, 4, 3, 2, 1],
        io:format("~ts~n", [mochi_repr(longest_increasing_subsequence_length(Example1))]),
        io:format("~ts~n", [mochi_repr(longest_increasing_subsequence_length(Example2))]),
        io:format("~ts~n", [mochi_repr(longest_increasing_subsequence_length(Example3))]),
        io:format("~ts~n", [mochi_repr(longest_increasing_subsequence_length(Example4))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
