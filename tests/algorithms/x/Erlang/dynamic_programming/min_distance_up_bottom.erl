#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, min3/3, helper/7, min_distance_up_bottom/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

min3(A, B, C) ->
    try
        M = A,
        case (B < M) of
        true -> M_2 = B,
            M_3 = M_2;
        _ -> M_3 = M
    end,
        case (C < M_3) of
        true -> M_4 = C,
            M_5 = M_4;
        _ -> M_5 = M_3
    end,
        M_5
    catch {return, Ret} -> Ret end.

helper(Word1, Word2, Cache, I, J, Len1, Len2) ->
    try
        case (I >= Len1) of
        true -> throw({return, (Len2 - J)});
        _ -> ok
    end,
        case (J >= Len2) of
        true -> throw({return, (Len1 - I)});
        _ -> ok
    end,
        case ((case erlang:is_map((case erlang:is_map(Cache) of true -> maps:get(I, Cache, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache) + I + 1, Cache); _ -> lists:nth(I + 1, Cache) end end)) of true -> maps:get(J, (case erlang:is_map(Cache) of true -> maps:get(I, Cache, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache) + I + 1, Cache); _ -> lists:nth(I + 1, Cache) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Cache) of true -> maps:get(I, Cache, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache) + I + 1, Cache); _ -> lists:nth(I + 1, Cache) end end)) + J + 1, (case erlang:is_map(Cache) of true -> maps:get(I, Cache, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache) + I + 1, Cache); _ -> lists:nth(I + 1, Cache) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Cache) of true -> maps:get(I, Cache, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache) + I + 1, Cache); _ -> lists:nth(I + 1, Cache) end end)) end end) /= (0 - 1)) of
        true -> throw({return, (case erlang:is_map((case erlang:is_map(Cache) of true -> maps:get(I, Cache, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache) + I + 1, Cache); _ -> lists:nth(I + 1, Cache) end end)) of true -> maps:get(J, (case erlang:is_map(Cache) of true -> maps:get(I, Cache, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache) + I + 1, Cache); _ -> lists:nth(I + 1, Cache) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Cache) of true -> maps:get(I, Cache, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache) + I + 1, Cache); _ -> lists:nth(I + 1, Cache) end end)) + J + 1, (case erlang:is_map(Cache) of true -> maps:get(I, Cache, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache) + I + 1, Cache); _ -> lists:nth(I + 1, Cache) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Cache) of true -> maps:get(I, Cache, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache) + I + 1, Cache); _ -> lists:nth(I + 1, Cache) end end)) end end)});
        _ -> ok
    end,
        Diff = 0,
        case (string:substr(Word1, I + 1, ((I + 1) - I)) /= string:substr(Word2, J + 1, ((J + 1) - J))) of
        true -> Diff_2 = 1,
            Diff_3 = Diff_2;
        _ -> Diff_3 = Diff
    end,
        Delete_cost = (1 + helper(Word1, Word2, Cache, (I + 1), J, Len1, Len2)),
        Insert_cost = (1 + helper(Word1, Word2, Cache, I, (J + 1), Len1, Len2)),
        Replace_cost = (Diff_3 + helper(Word1, Word2, Cache, (I + 1), (J + 1), Len1, Len2)),
        Cache_2 = lists:sublist(Cache, I) ++ [lists:sublist(lists:nth(I + 1, Cache), J) ++ [min3(Delete_cost, Insert_cost, Replace_cost)] ++ lists:nthtail(J + 1, lists:nth(I + 1, Cache))] ++ lists:nthtail(I + 1, Cache),
        (case erlang:is_map((case erlang:is_map(Cache_2) of true -> maps:get(I, Cache_2, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache_2) + I + 1, Cache_2); _ -> lists:nth(I + 1, Cache_2) end end)) of true -> maps:get(J, (case erlang:is_map(Cache_2) of true -> maps:get(I, Cache_2, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache_2) + I + 1, Cache_2); _ -> lists:nth(I + 1, Cache_2) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Cache_2) of true -> maps:get(I, Cache_2, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache_2) + I + 1, Cache_2); _ -> lists:nth(I + 1, Cache_2) end end)) + J + 1, (case erlang:is_map(Cache_2) of true -> maps:get(I, Cache_2, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache_2) + I + 1, Cache_2); _ -> lists:nth(I + 1, Cache_2) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Cache_2) of true -> maps:get(I, Cache_2, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Cache_2) + I + 1, Cache_2); _ -> lists:nth(I + 1, Cache_2) end end)) end end)
    catch {return, Ret} -> Ret end.

min_distance_up_bottom(Word1_2, Word2_2) ->
    try
        Len1_2 = erlang:length(Word1_2),
        Len2_2 = erlang:length(Word2_2),
        Cache_3 = [],
        Fun = fun Fun_loop(List, Cache_3, Len1_2, Len2_2, Word1_2, Word2_2) ->
    case List of
        [] -> {Cache_3, Len1_2, Len2_2, Word1_2, Word2_2};
        [_|__rest] ->
            Row = [],
            Fun_2 = fun Fun_2_loop(List, Cache_3, Len1_2, Len2_2, Row, Word1_2, Word2_2) ->
    case List of
        [] -> {Cache_3, Len1_2, Len2_2, Row, Word1_2, Word2_2};
        [_2|_2_rest] ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [(0 - 1)]),
            Fun_2_loop(_2_rest, Cache_3, Len1_2, Len2_2, Row_2, Word1_2, Word2_2);
        _ -> {Cache_3, Len1_2, Len2_2, Row, Word1_2, Word2_2}
    end
end,
{Cache_3, Len1_2, Len2_2, Row_2, Word1_2, Word2_2} = Fun_2(lists:seq(0, (Len2_2) - 1), Cache_3, Len1_2, Len2_2, Row, Word1_2, Word2_2),
            Cache_4 = lists:append((case Cache_3 of nil -> []; _ -> Cache_3 end), [Row_2]),
            Fun_loop(__rest, Cache_4, Len1_2, Len2_2, Word1_2, Word2_2);
        _ -> {Cache_3, Len1_2, Len2_2, Word1_2, Word2_2}
    end
end,
{Cache_4, Len1_2, Len2_2, Word1_2, Word2_2} = Fun(lists:seq(0, (Len1_2) - 1), Cache_3, Len1_2, Len2_2, Word1_2, Word2_2),
        helper(Word1_2, Word2_2, Cache_4, 0, 0, Len1_2, Len2_2)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(min_distance_up_bottom("intention", "execution"))]),
    io:format("~ts~n", [mochi_str(min_distance_up_bottom("intention", ""))]),
    io:format("~ts~n", [mochi_str(min_distance_up_bottom("", ""))]),
    io:format("~ts~n", [mochi_str(min_distance_up_bottom("zooicoarchaeologist", "zoologist"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
