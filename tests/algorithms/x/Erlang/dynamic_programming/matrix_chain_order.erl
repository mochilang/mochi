#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_2d/1, matrix_chain_order/1, optimal_parenthesization/3, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_2d(N) ->
    try
        Res = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, N, Res) ->
    case (I < N) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(I, J, N, Res, Row) ->
    case (J < N) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            J_2 = (J + 1),
            Fun_loop(I, J_2, N, Res, Row_2);
        _ -> {I, J, N, Res, Row}
    end
end,
{I, J_2, N, Res, Row_2} = Fun(I, J, N, Res, Row),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, N, Res_2);
        _ -> {I, N, Res}
    end
end,
{I_2, N, Res_2} = Fun_2(I, N, Res),
        Res_2
    catch {return, Ret} -> Ret end.

matrix_chain_order(Arr) ->
    try
        N_2 = erlang:length(Arr),
        M = make_2d(N_2),
        S = make_2d(N_2),
        Chain_length = 2,
        Fun_5 = fun Fun_5_loop(Arr, Chain_length, M, N_2, S) ->
    case (Chain_length < N_2) of
        true ->
            A = 1,
            Fun_4 = fun Fun_4_loop(A, Arr, Chain_length, M, N_2, S) ->
    case (A < ((N_2 - Chain_length) + 1)) of
        true ->
            B = ((A + Chain_length) - 1),
            M_2 = lists:sublist(M, A) ++ [lists:sublist(lists:nth(A + 1, M), B) ++ [1000000000] ++ lists:nthtail(B + 1, lists:nth(A + 1, M))] ++ lists:nthtail(A + 1, M),
            C = A,
            Fun_3 = fun Fun_3_loop(A, Arr, B, C, Chain_length, M_2, N_2, S) ->
    case (C < B) of
        true ->
            Cost = (((case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(A, M_2, nil); _ -> case A < 0 of true -> lists:nth(erlang:length(M_2) + A + 1, M_2); _ -> lists:nth(A + 1, M_2) end end)) of true -> maps:get(C, (case erlang:is_map(M_2) of true -> maps:get(A, M_2, nil); _ -> case A < 0 of true -> lists:nth(erlang:length(M_2) + A + 1, M_2); _ -> lists:nth(A + 1, M_2) end end), nil); _ -> case C < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(A, M_2, nil); _ -> case A < 0 of true -> lists:nth(erlang:length(M_2) + A + 1, M_2); _ -> lists:nth(A + 1, M_2) end end)) + C + 1, (case erlang:is_map(M_2) of true -> maps:get(A, M_2, nil); _ -> case A < 0 of true -> lists:nth(erlang:length(M_2) + A + 1, M_2); _ -> lists:nth(A + 1, M_2) end end)); _ -> lists:nth(C + 1, (case erlang:is_map(M_2) of true -> maps:get(A, M_2, nil); _ -> case A < 0 of true -> lists:nth(erlang:length(M_2) + A + 1, M_2); _ -> lists:nth(A + 1, M_2) end end)) end end) + (case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get((C + 1), M_2, nil); _ -> case (C + 1) < 0 of true -> lists:nth(erlang:length(M_2) + (C + 1) + 1, M_2); _ -> lists:nth((C + 1) + 1, M_2) end end)) of true -> maps:get(B, (case erlang:is_map(M_2) of true -> maps:get((C + 1), M_2, nil); _ -> case (C + 1) < 0 of true -> lists:nth(erlang:length(M_2) + (C + 1) + 1, M_2); _ -> lists:nth((C + 1) + 1, M_2) end end), nil); _ -> case B < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get((C + 1), M_2, nil); _ -> case (C + 1) < 0 of true -> lists:nth(erlang:length(M_2) + (C + 1) + 1, M_2); _ -> lists:nth((C + 1) + 1, M_2) end end)) + B + 1, (case erlang:is_map(M_2) of true -> maps:get((C + 1), M_2, nil); _ -> case (C + 1) < 0 of true -> lists:nth(erlang:length(M_2) + (C + 1) + 1, M_2); _ -> lists:nth((C + 1) + 1, M_2) end end)); _ -> lists:nth(B + 1, (case erlang:is_map(M_2) of true -> maps:get((C + 1), M_2, nil); _ -> case (C + 1) < 0 of true -> lists:nth(erlang:length(M_2) + (C + 1) + 1, M_2); _ -> lists:nth((C + 1) + 1, M_2) end end)) end end)) + (((case erlang:is_map(Arr) of true -> maps:get((A - 1), Arr, nil); _ -> case (A - 1) < 0 of true -> lists:nth(erlang:length(Arr) + (A - 1) + 1, Arr); _ -> lists:nth((A - 1) + 1, Arr) end end) * (case erlang:is_map(Arr) of true -> maps:get(C, Arr, nil); _ -> case C < 0 of true -> lists:nth(erlang:length(Arr) + C + 1, Arr); _ -> lists:nth(C + 1, Arr) end end)) * (case erlang:is_map(Arr) of true -> maps:get(B, Arr, nil); _ -> case B < 0 of true -> lists:nth(erlang:length(Arr) + B + 1, Arr); _ -> lists:nth(B + 1, Arr) end end))),
            case (Cost < (case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(A, M_2, nil); _ -> case A < 0 of true -> lists:nth(erlang:length(M_2) + A + 1, M_2); _ -> lists:nth(A + 1, M_2) end end)) of true -> maps:get(B, (case erlang:is_map(M_2) of true -> maps:get(A, M_2, nil); _ -> case A < 0 of true -> lists:nth(erlang:length(M_2) + A + 1, M_2); _ -> lists:nth(A + 1, M_2) end end), nil); _ -> case B < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(A, M_2, nil); _ -> case A < 0 of true -> lists:nth(erlang:length(M_2) + A + 1, M_2); _ -> lists:nth(A + 1, M_2) end end)) + B + 1, (case erlang:is_map(M_2) of true -> maps:get(A, M_2, nil); _ -> case A < 0 of true -> lists:nth(erlang:length(M_2) + A + 1, M_2); _ -> lists:nth(A + 1, M_2) end end)); _ -> lists:nth(B + 1, (case erlang:is_map(M_2) of true -> maps:get(A, M_2, nil); _ -> case A < 0 of true -> lists:nth(erlang:length(M_2) + A + 1, M_2); _ -> lists:nth(A + 1, M_2) end end)) end end)) of
        true -> M_3 = lists:sublist(M_2, A) ++ [lists:sublist(lists:nth(A + 1, M_2), B) ++ [Cost] ++ lists:nthtail(B + 1, lists:nth(A + 1, M_2))] ++ lists:nthtail(A + 1, M_2),
            S_2 = lists:sublist(S, A) ++ [lists:sublist(lists:nth(A + 1, S), B) ++ [C] ++ lists:nthtail(B + 1, lists:nth(A + 1, S))] ++ lists:nthtail(A + 1, S),
            M_4 = M_3,
            S_3 = S_2;
        _ -> M_4 = M_2,
            S_3 = S
    end,
            C_2 = (C + 1),
            Fun_3_loop(A, Arr, B, C_2, Chain_length, M_4, N_2, S_3);
        _ -> {A, Arr, B, C, Chain_length, M_2, N_2, S}
    end
end,
{A, Arr, B, C_2, Chain_length, M_4, N_2, S_3} = Fun_3(A, Arr, B, C, Chain_length, M_2, N_2, S),
            A_2 = (A + 1),
            Fun_4_loop(A_2, Arr, Chain_length, M_4, N_2, S_3);
        _ -> {A, Arr, Chain_length, M, N_2, S}
    end
end,
{A_2, Arr, Chain_length, M_4, N_2, S_3} = Fun_4(A, Arr, Chain_length, M, N_2, S),
            Chain_length_2 = (Chain_length + 1),
            Fun_5_loop(Arr, Chain_length_2, M_4, N_2, S_3);
        _ -> {Arr, Chain_length, M, N_2, S}
    end
end,
{Arr, Chain_length_2, M_4, N_2, S_3} = Fun_5(Arr, Chain_length, M, N_2, S),
        #{"matrix" => M_4, "solution" => S_3}
    catch {return, Ret} -> Ret end.

optimal_parenthesization(S_4, I_3, J_3) ->
    try
        case (I_3 == J_3) of
        true -> throw({return, ("A" ++ mochi_str(I_3))}),
            Left_2 = nil,
            Right_2 = nil;
        _ -> Left = optimal_parenthesization(S_4, I_3, (case erlang:is_map((case erlang:is_map(S_4) of true -> maps:get(I_3, S_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(S_4) + I_3 + 1, S_4); _ -> lists:nth(I_3 + 1, S_4) end end)) of true -> maps:get(J_3, (case erlang:is_map(S_4) of true -> maps:get(I_3, S_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(S_4) + I_3 + 1, S_4); _ -> lists:nth(I_3 + 1, S_4) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(S_4) of true -> maps:get(I_3, S_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(S_4) + I_3 + 1, S_4); _ -> lists:nth(I_3 + 1, S_4) end end)) + J_3 + 1, (case erlang:is_map(S_4) of true -> maps:get(I_3, S_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(S_4) + I_3 + 1, S_4); _ -> lists:nth(I_3 + 1, S_4) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(S_4) of true -> maps:get(I_3, S_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(S_4) + I_3 + 1, S_4); _ -> lists:nth(I_3 + 1, S_4) end end)) end end)),
            Right = optimal_parenthesization(S_4, ((case erlang:is_map((case erlang:is_map(S_4) of true -> maps:get(I_3, S_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(S_4) + I_3 + 1, S_4); _ -> lists:nth(I_3 + 1, S_4) end end)) of true -> maps:get(J_3, (case erlang:is_map(S_4) of true -> maps:get(I_3, S_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(S_4) + I_3 + 1, S_4); _ -> lists:nth(I_3 + 1, S_4) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(S_4) of true -> maps:get(I_3, S_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(S_4) + I_3 + 1, S_4); _ -> lists:nth(I_3 + 1, S_4) end end)) + J_3 + 1, (case erlang:is_map(S_4) of true -> maps:get(I_3, S_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(S_4) + I_3 + 1, S_4); _ -> lists:nth(I_3 + 1, S_4) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(S_4) of true -> maps:get(I_3, S_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(S_4) + I_3 + 1, S_4); _ -> lists:nth(I_3 + 1, S_4) end end)) end end) + 1), J_3),
            throw({return, (((("( " ++ Left) ++ " ") ++ Right) ++ " )")}),
            Left_2 = Left,
            Right_2 = Right
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Arr_2 = [30, 35, 15, 5, 10, 20, 25],
        N_3 = erlang:length(Arr_2),
        Res_3 = matrix_chain_order(Arr_2),
        M_5 = maps:get("matrix", Res_3, nil),
        S_5 = maps:get("solution", Res_3, nil),
        io:format("~ts~n", [mochi_repr(("No. of Operation required: " ++ mochi_str((case erlang:is_map((case erlang:is_map(M_5) of true -> maps:get(1, M_5, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M_5) + 1 + 1, M_5); _ -> lists:nth(1 + 1, M_5) end end)) of true -> maps:get((N_3 - 1), (case erlang:is_map(M_5) of true -> maps:get(1, M_5, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M_5) + 1 + 1, M_5); _ -> lists:nth(1 + 1, M_5) end end), nil); _ -> case (N_3 - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(M_5) of true -> maps:get(1, M_5, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M_5) + 1 + 1, M_5); _ -> lists:nth(1 + 1, M_5) end end)) + (N_3 - 1) + 1, (case erlang:is_map(M_5) of true -> maps:get(1, M_5, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M_5) + 1 + 1, M_5); _ -> lists:nth(1 + 1, M_5) end end)); _ -> lists:nth((N_3 - 1) + 1, (case erlang:is_map(M_5) of true -> maps:get(1, M_5, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(M_5) + 1 + 1, M_5); _ -> lists:nth(1 + 1, M_5) end end)) end end))))]),
        Seq = optimal_parenthesization(S_5, 1, (N_3 - 1)),
        io:format("~ts~n", [mochi_repr(Seq)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
