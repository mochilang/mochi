#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, recursive_match/2, dp_match/2, print_bool/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

recursive_match(Text, Pattern) ->
    try
        case (erlang:length(Pattern) == 0) of
        true -> throw({return, (erlang:length(Text) == 0)});
        _ -> ok
    end,
        case (erlang:length(Text) == 0) of
        true -> case ((erlang:length(Pattern) >= 2) andalso (string:substr(Pattern, (erlang:length(Pattern) - 1) + 1, (erlang:length(Pattern) - (erlang:length(Pattern) - 1))) == "*")) of
        true -> throw({return, recursive_match(Text, string:substr(Pattern, 0 + 1, ((erlang:length(Pattern) - 2) - 0)))});
        _ -> ok
    end,
            throw({return, false});
        _ -> ok
    end,
        Last_text = string:substr(Text, (erlang:length(Text) - 1) + 1, (erlang:length(Text) - (erlang:length(Text) - 1))),
        Last_pattern = string:substr(Pattern, (erlang:length(Pattern) - 1) + 1, (erlang:length(Pattern) - (erlang:length(Pattern) - 1))),
        case ((Last_text == Last_pattern) orelse (Last_pattern == ".")) of
        true -> throw({return, recursive_match(string:substr(Text, 0 + 1, ((erlang:length(Text) - 1) - 0)), string:substr(Pattern, 0 + 1, ((erlang:length(Pattern) - 1) - 0)))});
        _ -> ok
    end,
        case (Last_pattern == "*") of
        true -> case recursive_match(string:substr(Text, 0 + 1, ((erlang:length(Text) - 1) - 0)), Pattern) of
        true -> throw({return, true});
        _ -> ok
    end,
            throw({return, recursive_match(Text, string:substr(Pattern, 0 + 1, ((erlang:length(Pattern) - 2) - 0)))});
        _ -> ok
    end,
        false
    catch {return, Ret} -> Ret end.

dp_match(Text_2, Pattern_2) ->
    try
        M = erlang:length(Text_2),
        N = erlang:length(Pattern_2),
        Dp = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Dp, I, M, N, Pattern_2, Text_2) ->
    case (I =< M) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(Dp, I, J, M, N, Pattern_2, Row, Text_2) ->
    case (J =< N) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [false]),
            J_2 = (J + 1),
            Fun_loop(Dp, I, J_2, M, N, Pattern_2, Row_2, Text_2);
        _ -> {Dp, I, J, M, N, Pattern_2, Row, Text_2}
    end
end,
{Dp, I, J_2, M, N, Pattern_2, Row_2, Text_2} = Fun(Dp, I, J, M, N, Pattern_2, Row, Text_2),
            Dp_2 = lists:append((case Dp of nil -> []; _ -> Dp end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Dp_2, I_2, M, N, Pattern_2, Text_2);
        _ -> {Dp, I, M, N, Pattern_2, Text_2}
    end
end,
{Dp_2, I_2, M, N, Pattern_2, Text_2} = Fun_2(Dp, I, M, N, Pattern_2, Text_2),
        Dp_3 = lists:sublist(Dp_2, 0) ++ [lists:sublist(lists:nth(0 + 1, Dp_2), 0) ++ [true] ++ lists:nthtail(0 + 1, lists:nth(0 + 1, Dp_2))] ++ lists:nthtail(0 + 1, Dp_2),
        J_3 = 1,
        Fun_3 = fun Fun_3_loop(Dp_3, I_2, J_3, M, N, Pattern_2, Text_2) ->
    case (J_3 =< N) of
        true ->
            case ((string:substr(Pattern_2, (J_3 - 1) + 1, (J_3 - (J_3 - 1))) == "*") andalso (J_3 >= 2)) of
        true -> case (case erlang:is_map((case erlang:is_map(Dp_3) of true -> maps:get(0, Dp_3, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Dp_3) + 0 + 1, Dp_3); _ -> lists:nth(0 + 1, Dp_3) end end)) of true -> maps:get((J_3 - 2), (case erlang:is_map(Dp_3) of true -> maps:get(0, Dp_3, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Dp_3) + 0 + 1, Dp_3); _ -> lists:nth(0 + 1, Dp_3) end end), nil); _ -> case (J_3 - 2) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_3) of true -> maps:get(0, Dp_3, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Dp_3) + 0 + 1, Dp_3); _ -> lists:nth(0 + 1, Dp_3) end end)) + (J_3 - 2) + 1, (case erlang:is_map(Dp_3) of true -> maps:get(0, Dp_3, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Dp_3) + 0 + 1, Dp_3); _ -> lists:nth(0 + 1, Dp_3) end end)); _ -> lists:nth((J_3 - 2) + 1, (case erlang:is_map(Dp_3) of true -> maps:get(0, Dp_3, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Dp_3) + 0 + 1, Dp_3); _ -> lists:nth(0 + 1, Dp_3) end end)) end end) of
        true -> Dp_4 = lists:sublist(Dp_3, 0) ++ [lists:sublist(lists:nth(0 + 1, Dp_3), J_3) ++ [true] ++ lists:nthtail(J_3 + 1, lists:nth(0 + 1, Dp_3))] ++ lists:nthtail(0 + 1, Dp_3),
            Dp_5 = Dp_4;
        _ -> Dp_5 = Dp_3
    end,
            Dp_6 = Dp_5;
        _ -> Dp_6 = Dp_3
    end,
            J_4 = (J_3 + 1),
            Fun_3_loop(Dp_6, I_2, J_4, M, N, Pattern_2, Text_2);
        _ -> {Dp_3, I_2, J_3, M, N, Pattern_2, Text_2}
    end
end,
{Dp_6, I_2, J_4, M, N, Pattern_2, Text_2} = Fun_3(Dp_3, I_2, J_3, M, N, Pattern_2, Text_2),
        I_3 = 1,
        Fun_5 = fun Fun_5_loop(Dp_6, I_3, J_4, M, N, Pattern_2, Text_2) ->
    case (I_3 =< M) of
        true ->
            J_5 = 1,
            Fun_4 = fun Fun_4_loop(Dp_6, I_3, J_5, M, N, Pattern_2, Text_2) ->
    case (J_5 =< N) of
        true ->
            P_char = string:substr(Pattern_2, (J_5 - 1) + 1, (J_5 - (J_5 - 1))),
            T_char = string:substr(Text_2, (I_3 - 1) + 1, (I_3 - (I_3 - 1))),
            case ((P_char == ".") orelse (P_char == T_char)) of
        true -> case (case erlang:is_map((case erlang:is_map(Dp_6) of true -> maps:get((I_3 - 1), Dp_6, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp_6) + (I_3 - 1) + 1, Dp_6); _ -> lists:nth((I_3 - 1) + 1, Dp_6) end end)) of true -> maps:get((J_5 - 1), (case erlang:is_map(Dp_6) of true -> maps:get((I_3 - 1), Dp_6, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp_6) + (I_3 - 1) + 1, Dp_6); _ -> lists:nth((I_3 - 1) + 1, Dp_6) end end), nil); _ -> case (J_5 - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_6) of true -> maps:get((I_3 - 1), Dp_6, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp_6) + (I_3 - 1) + 1, Dp_6); _ -> lists:nth((I_3 - 1) + 1, Dp_6) end end)) + (J_5 - 1) + 1, (case erlang:is_map(Dp_6) of true -> maps:get((I_3 - 1), Dp_6, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp_6) + (I_3 - 1) + 1, Dp_6); _ -> lists:nth((I_3 - 1) + 1, Dp_6) end end)); _ -> lists:nth((J_5 - 1) + 1, (case erlang:is_map(Dp_6) of true -> maps:get((I_3 - 1), Dp_6, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp_6) + (I_3 - 1) + 1, Dp_6); _ -> lists:nth((I_3 - 1) + 1, Dp_6) end end)) end end) of
        true -> Dp_7 = lists:sublist(Dp_6, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Dp_6), J_5) ++ [true] ++ lists:nthtail(J_5 + 1, lists:nth(I_3 + 1, Dp_6))] ++ lists:nthtail(I_3 + 1, Dp_6),
            Dp_8 = Dp_7;
        _ -> Dp_8 = Dp_6
    end,
            Dp_17 = Dp_8,
            Prev_p_4 = nil;
        _ -> case (P_char == "*") of
        true -> case (J_5 >= 2) of
        true -> case (case erlang:is_map((case erlang:is_map(Dp_6) of true -> maps:get(I_3, Dp_6, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_6) + I_3 + 1, Dp_6); _ -> lists:nth(I_3 + 1, Dp_6) end end)) of true -> maps:get((J_5 - 2), (case erlang:is_map(Dp_6) of true -> maps:get(I_3, Dp_6, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_6) + I_3 + 1, Dp_6); _ -> lists:nth(I_3 + 1, Dp_6) end end), nil); _ -> case (J_5 - 2) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_6) of true -> maps:get(I_3, Dp_6, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_6) + I_3 + 1, Dp_6); _ -> lists:nth(I_3 + 1, Dp_6) end end)) + (J_5 - 2) + 1, (case erlang:is_map(Dp_6) of true -> maps:get(I_3, Dp_6, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_6) + I_3 + 1, Dp_6); _ -> lists:nth(I_3 + 1, Dp_6) end end)); _ -> lists:nth((J_5 - 2) + 1, (case erlang:is_map(Dp_6) of true -> maps:get(I_3, Dp_6, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_6) + I_3 + 1, Dp_6); _ -> lists:nth(I_3 + 1, Dp_6) end end)) end end) of
        true -> Dp_9 = lists:sublist(Dp_6, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Dp_6), J_5) ++ [true] ++ lists:nthtail(J_5 + 1, lists:nth(I_3 + 1, Dp_6))] ++ lists:nthtail(I_3 + 1, Dp_6),
            Dp_10 = Dp_9;
        _ -> Dp_10 = Dp_6
    end,
            Prev_p = string:substr(Pattern_2, (J_5 - 2) + 1, ((J_5 - 1) - (J_5 - 2))),
            case ((Prev_p == ".") orelse (Prev_p == T_char)) of
        true -> case (case erlang:is_map((case erlang:is_map(Dp_10) of true -> maps:get((I_3 - 1), Dp_10, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp_10) + (I_3 - 1) + 1, Dp_10); _ -> lists:nth((I_3 - 1) + 1, Dp_10) end end)) of true -> maps:get(J_5, (case erlang:is_map(Dp_10) of true -> maps:get((I_3 - 1), Dp_10, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp_10) + (I_3 - 1) + 1, Dp_10); _ -> lists:nth((I_3 - 1) + 1, Dp_10) end end), nil); _ -> case J_5 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_10) of true -> maps:get((I_3 - 1), Dp_10, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp_10) + (I_3 - 1) + 1, Dp_10); _ -> lists:nth((I_3 - 1) + 1, Dp_10) end end)) + J_5 + 1, (case erlang:is_map(Dp_10) of true -> maps:get((I_3 - 1), Dp_10, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp_10) + (I_3 - 1) + 1, Dp_10); _ -> lists:nth((I_3 - 1) + 1, Dp_10) end end)); _ -> lists:nth(J_5 + 1, (case erlang:is_map(Dp_10) of true -> maps:get((I_3 - 1), Dp_10, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp_10) + (I_3 - 1) + 1, Dp_10); _ -> lists:nth((I_3 - 1) + 1, Dp_10) end end)) end end) of
        true -> Dp_11 = lists:sublist(Dp_10, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Dp_10), J_5) ++ [true] ++ lists:nthtail(J_5 + 1, lists:nth(I_3 + 1, Dp_10))] ++ lists:nthtail(I_3 + 1, Dp_10),
            Dp_12 = Dp_11;
        _ -> Dp_12 = Dp_10
    end,
            Dp_13 = Dp_12;
        _ -> Dp_13 = Dp_10
    end,
            Dp_14 = Dp_13,
            Prev_p_2 = Prev_p;
        _ -> Dp_14 = Dp_6,
            Prev_p_2 = nil
    end,
            Dp_16 = Dp_14,
            Prev_p_3 = Prev_p_2;
        _ -> Dp_15 = lists:sublist(Dp_6, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Dp_6), J_5) ++ [false] ++ lists:nthtail(J_5 + 1, lists:nth(I_3 + 1, Dp_6))] ++ lists:nthtail(I_3 + 1, Dp_6),
            Dp_16 = Dp_15,
            Prev_p_3 = nil
    end,
            Dp_17 = Dp_16,
            Prev_p_4 = Prev_p_3
    end,
            J_6 = (J_5 + 1),
            Fun_4_loop(Dp_17, I_3, J_6, M, N, Pattern_2, Text_2);
        _ -> {Dp_6, I_3, J_5, M, N, Pattern_2, Text_2}
    end
end,
{Dp_17, I_3, J_6, M, N, Pattern_2, Text_2} = Fun_4(Dp_6, I_3, J_5, M, N, Pattern_2, Text_2),
            I_4 = (I_3 + 1),
            Fun_5_loop(Dp_17, I_4, J_6, M, N, Pattern_2, Text_2);
        _ -> {Dp_6, I_3, J_4, M, N, Pattern_2, Text_2}
    end
end,
{Dp_17, I_4, J_6, M, N, Pattern_2, Text_2} = Fun_5(Dp_6, I_3, J_4, M, N, Pattern_2, Text_2),
        (case erlang:is_map((case erlang:is_map(Dp_17) of true -> maps:get(M, Dp_17, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Dp_17) + M + 1, Dp_17); _ -> lists:nth(M + 1, Dp_17) end end)) of true -> maps:get(N, (case erlang:is_map(Dp_17) of true -> maps:get(M, Dp_17, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Dp_17) + M + 1, Dp_17); _ -> lists:nth(M + 1, Dp_17) end end), nil); _ -> case N < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_17) of true -> maps:get(M, Dp_17, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Dp_17) + M + 1, Dp_17); _ -> lists:nth(M + 1, Dp_17) end end)) + N + 1, (case erlang:is_map(Dp_17) of true -> maps:get(M, Dp_17, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Dp_17) + M + 1, Dp_17); _ -> lists:nth(M + 1, Dp_17) end end)); _ -> lists:nth(N + 1, (case erlang:is_map(Dp_17) of true -> maps:get(M, Dp_17, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Dp_17) + M + 1, Dp_17); _ -> lists:nth(M + 1, Dp_17) end end)) end end)
    catch {return, Ret} -> Ret end.

print_bool(B) ->
    try
        case B of
        true -> io:format("~ts~n", [mochi_repr(true)]);
        _ -> io:format("~ts~n", [mochi_repr(false)])
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    print_bool(recursive_match("abc", "a.c")),
    print_bool(recursive_match("abc", "af*.c")),
    print_bool(recursive_match("abc", "a.c*")),
    print_bool(recursive_match("abc", "a.c*d")),
    print_bool(recursive_match("aa", ".*")),
    print_bool(dp_match("abc", "a.c")),
    print_bool(dp_match("abc", "af*.c")),
    print_bool(dp_match("abc", "a.c*")),
    print_bool(dp_match("abc", "a.c*d")),
    print_bool(dp_match("aa", ".*")),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
