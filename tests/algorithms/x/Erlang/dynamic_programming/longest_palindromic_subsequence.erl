#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, reverse/1, max_int/2, longest_palindromic_subsequence/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

reverse(S) ->
    try
        Result = "",
        I = (erlang:length(S) - 1),
        Fun = fun Fun_loop(I, Result, S) ->
    case (I >= 0) of
        true ->
            Result_2 = (Result ++ string:substr(S, I + 1, ((I + 1) - I))),
            I_2 = (I - 1),
            Fun_loop(I_2, Result_2, S);
        _ -> {I, Result, S}
    end
end,
{I_2, Result_2, S} = Fun(I, Result, S),
        Result_2
    catch {return, Ret} -> Ret end.

max_int(A, B) ->
    try
        (case (A > B) of
    true -> A;
    _ -> B
end)
    catch {return, Ret} -> Ret end.

longest_palindromic_subsequence(S_2) ->
    try
        Rev = reverse(S_2),
        N = erlang:length(S_2),
        M = erlang:length(Rev),
        Dp = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Dp, I_3, M, N, Rev, S_2) ->
    case (I_3 =< N) of
        true ->
            Row = [],
            J = 0,
            Fun_2 = fun Fun_2_loop(Dp, I_3, J, M, N, Rev, Row, S_2) ->
    case (J =< M) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            J_2 = (J + 1),
            Fun_2_loop(Dp, I_3, J_2, M, N, Rev, Row_2, S_2);
        _ -> {Dp, I_3, J, M, N, Rev, Row, S_2}
    end
end,
{Dp, I_3, J_2, M, N, Rev, Row_2, S_2} = Fun_2(Dp, I_3, J, M, N, Rev, Row, S_2),
            Dp_2 = lists:append((case Dp of nil -> []; _ -> Dp end), [Row_2]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Dp_2, I_4, M, N, Rev, S_2);
        _ -> {Dp, I_3, M, N, Rev, S_2}
    end
end,
{Dp_2, I_4, M, N, Rev, S_2} = Fun_3(Dp, I_3, M, N, Rev, S_2),
        I_5 = 1,
        Fun_5 = fun Fun_5_loop(Dp_2, I_5, M, N, Rev, S_2) ->
    case (I_5 =< N) of
        true ->
            J_3 = 1,
            Fun_4 = fun Fun_4_loop(Dp_2, I_5, J_3, M, N, Rev, S_2) ->
    case (J_3 =< M) of
        true ->
            A_char = string:substr(S_2, (I_5 - 1) + 1, (I_5 - (I_5 - 1))),
            B_char = string:substr(Rev, (J_3 - 1) + 1, (J_3 - (J_3 - 1))),
            case (A_char == B_char) of
        true -> Dp_3 = lists:sublist(Dp_2, I_5) ++ [lists:sublist(lists:nth(I_5 + 1, Dp_2), J_3) ++ [(1 + (case erlang:is_map((case erlang:is_map(Dp_2) of true -> maps:get((I_5 - 1), Dp_2, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (I_5 - 1) + 1, Dp_2); _ -> lists:nth((I_5 - 1) + 1, Dp_2) end end)) of true -> maps:get((J_3 - 1), (case erlang:is_map(Dp_2) of true -> maps:get((I_5 - 1), Dp_2, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (I_5 - 1) + 1, Dp_2); _ -> lists:nth((I_5 - 1) + 1, Dp_2) end end), nil); _ -> case (J_3 - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_2) of true -> maps:get((I_5 - 1), Dp_2, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (I_5 - 1) + 1, Dp_2); _ -> lists:nth((I_5 - 1) + 1, Dp_2) end end)) + (J_3 - 1) + 1, (case erlang:is_map(Dp_2) of true -> maps:get((I_5 - 1), Dp_2, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (I_5 - 1) + 1, Dp_2); _ -> lists:nth((I_5 - 1) + 1, Dp_2) end end)); _ -> lists:nth((J_3 - 1) + 1, (case erlang:is_map(Dp_2) of true -> maps:get((I_5 - 1), Dp_2, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (I_5 - 1) + 1, Dp_2); _ -> lists:nth((I_5 - 1) + 1, Dp_2) end end)) end end))] ++ lists:nthtail(J_3 + 1, lists:nth(I_5 + 1, Dp_2))] ++ lists:nthtail(I_5 + 1, Dp_2),
            Dp_5 = Dp_3;
        _ -> Dp_4 = lists:sublist(Dp_2, I_5) ++ [lists:sublist(lists:nth(I_5 + 1, Dp_2), J_3) ++ [max_int((case erlang:is_map((case erlang:is_map(Dp_2) of true -> maps:get((I_5 - 1), Dp_2, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (I_5 - 1) + 1, Dp_2); _ -> lists:nth((I_5 - 1) + 1, Dp_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Dp_2) of true -> maps:get((I_5 - 1), Dp_2, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (I_5 - 1) + 1, Dp_2); _ -> lists:nth((I_5 - 1) + 1, Dp_2) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_2) of true -> maps:get((I_5 - 1), Dp_2, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (I_5 - 1) + 1, Dp_2); _ -> lists:nth((I_5 - 1) + 1, Dp_2) end end)) + J_3 + 1, (case erlang:is_map(Dp_2) of true -> maps:get((I_5 - 1), Dp_2, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (I_5 - 1) + 1, Dp_2); _ -> lists:nth((I_5 - 1) + 1, Dp_2) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Dp_2) of true -> maps:get((I_5 - 1), Dp_2, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (I_5 - 1) + 1, Dp_2); _ -> lists:nth((I_5 - 1) + 1, Dp_2) end end)) end end), (case erlang:is_map((case erlang:is_map(Dp_2) of true -> maps:get(I_5, Dp_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_5 + 1, Dp_2); _ -> lists:nth(I_5 + 1, Dp_2) end end)) of true -> maps:get((J_3 - 1), (case erlang:is_map(Dp_2) of true -> maps:get(I_5, Dp_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_5 + 1, Dp_2); _ -> lists:nth(I_5 + 1, Dp_2) end end), nil); _ -> case (J_3 - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_2) of true -> maps:get(I_5, Dp_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_5 + 1, Dp_2); _ -> lists:nth(I_5 + 1, Dp_2) end end)) + (J_3 - 1) + 1, (case erlang:is_map(Dp_2) of true -> maps:get(I_5, Dp_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_5 + 1, Dp_2); _ -> lists:nth(I_5 + 1, Dp_2) end end)); _ -> lists:nth((J_3 - 1) + 1, (case erlang:is_map(Dp_2) of true -> maps:get(I_5, Dp_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_5 + 1, Dp_2); _ -> lists:nth(I_5 + 1, Dp_2) end end)) end end))] ++ lists:nthtail(J_3 + 1, lists:nth(I_5 + 1, Dp_2))] ++ lists:nthtail(I_5 + 1, Dp_2),
            Dp_5 = Dp_4
    end,
            J_4 = (J_3 + 1),
            Fun_4_loop(Dp_5, I_5, J_4, M, N, Rev, S_2);
        _ -> {Dp_2, I_5, J_3, M, N, Rev, S_2}
    end
end,
{Dp_5, I_5, J_4, M, N, Rev, S_2} = Fun_4(Dp_2, I_5, J_3, M, N, Rev, S_2),
            I_6 = (I_5 + 1),
            Fun_5_loop(Dp_5, I_6, M, N, Rev, S_2);
        _ -> {Dp_2, I_5, M, N, Rev, S_2}
    end
end,
{Dp_5, I_6, M, N, Rev, S_2} = Fun_5(Dp_2, I_5, M, N, Rev, S_2),
        (case erlang:is_map((case erlang:is_map(Dp_5) of true -> maps:get(N, Dp_5, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Dp_5) + N + 1, Dp_5); _ -> lists:nth(N + 1, Dp_5) end end)) of true -> maps:get(M, (case erlang:is_map(Dp_5) of true -> maps:get(N, Dp_5, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Dp_5) + N + 1, Dp_5); _ -> lists:nth(N + 1, Dp_5) end end), nil); _ -> case M < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_5) of true -> maps:get(N, Dp_5, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Dp_5) + N + 1, Dp_5); _ -> lists:nth(N + 1, Dp_5) end end)) + M + 1, (case erlang:is_map(Dp_5) of true -> maps:get(N, Dp_5, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Dp_5) + N + 1, Dp_5); _ -> lists:nth(N + 1, Dp_5) end end)); _ -> lists:nth(M + 1, (case erlang:is_map(Dp_5) of true -> maps:get(N, Dp_5, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Dp_5) + N + 1, Dp_5); _ -> lists:nth(N + 1, Dp_5) end end)) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(longest_palindromic_subsequence("bbbab"))]),
    io:format("~ts~n", [mochi_str(longest_palindromic_subsequence("bbabcbcab"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
