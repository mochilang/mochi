#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, prefix_sum/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

prefix_sum(Arr, Queries) ->
    try
        Dp = [],
        I = 0,
        Fun = fun Fun_loop(Arr, Dp, I, Queries) ->
    case (I < erlang:length(Arr)) of
        true ->
            case (I == 0) of
        true -> Dp_2 = lists:append((case Dp of nil -> []; _ -> Dp end), [(case erlang:is_map(Arr) of true -> maps:get(0, Arr, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Arr) + 0 + 1, Arr); _ -> lists:nth(0 + 1, Arr) end end)]),
            Dp_4 = Dp_2;
        _ -> Dp_3 = lists:append((case Dp of nil -> []; _ -> Dp end), [((case erlang:is_map(Dp) of true -> maps:get((I - 1), Dp, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I - 1) + 1, Dp); _ -> lists:nth((I - 1) + 1, Dp) end end) + (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Arr) + I + 1, Arr); _ -> lists:nth(I + 1, Arr) end end))]),
            Dp_4 = Dp_3
    end,
            I_2 = (I + 1),
            Fun_loop(Arr, Dp_4, I_2, Queries);
        _ -> {Arr, Dp, I, Queries}
    end
end,
{Arr, Dp_4, I_2, Queries} = Fun(Arr, Dp, I, Queries),
        Result = [],
        J = 0,
        Fun_2 = fun Fun_2_loop(Arr, Dp_4, I_2, J, Queries, Result) ->
    case (J < erlang:length(Queries)) of
        true ->
            Q = (case erlang:is_map(Queries) of true -> maps:get(J, Queries, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Queries) + J + 1, Queries); _ -> lists:nth(J + 1, Queries) end end),
            Sum = (case erlang:is_map(Dp_4) of true -> maps:get(maps:get("right", Q, nil), Dp_4, nil); _ -> case maps:get("right", Q, nil) < 0 of true -> lists:nth(erlang:length(Dp_4) + maps:get("right", Q, nil) + 1, Dp_4); _ -> lists:nth(maps:get("right", Q, nil) + 1, Dp_4) end end),
            case (maps:get("left", Q, nil) > 0) of
        true -> Sum_2 = (Sum - (case erlang:is_map(Dp_4) of true -> maps:get((maps:get("left", Q, nil) - 1), Dp_4, nil); _ -> case (maps:get("left", Q, nil) - 1) < 0 of true -> lists:nth(erlang:length(Dp_4) + (maps:get("left", Q, nil) - 1) + 1, Dp_4); _ -> lists:nth((maps:get("left", Q, nil) - 1) + 1, Dp_4) end end)),
            Sum_3 = Sum_2;
        _ -> Sum_3 = Sum
    end,
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Sum_3]),
            J_2 = (J + 1),
            Fun_2_loop(Arr, Dp_4, I_2, J_2, Queries, Result_2);
        _ -> {Arr, Dp_4, I_2, J, Queries, Result}
    end
end,
{Arr, Dp_4, I_2, J_2, Queries, Result_2} = Fun_2(Arr, Dp_4, I_2, J, Queries, Result),
        Result_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('arr1', [1, 4, 6, 2, 61, 12]),
    erlang:put('queries1', [#{"left" => 2, "right" => 5}, #{"left" => 1, "right" => 5}, #{"left" => 3, "right" => 4}]),
    io:format("~ts~n", [mochi_str(prefix_sum(erlang:get('arr1'), erlang:get('queries1')))]),
    erlang:put('arr2', [4, 2, 1, 6, 3]),
    erlang:put('queries2', [#{"left" => 3, "right" => 4}, #{"left" => 1, "right" => 3}, #{"left" => 0, "right" => 2}]),
    io:format("~ts~n", [mochi_str(prefix_sum(erlang:get('arr2'), erlang:get('queries2')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
