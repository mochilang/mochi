#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, enforce_args/2, bottom_up_cut_rod/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

enforce_args(N, Prices) ->
    try
        case (N < 0) of
        true -> erlang:error("n must be non-negative");
        _ -> ok
    end,
        case (N > erlang:length(Prices)) of
        true -> erlang:error("price list is shorter than n");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

bottom_up_cut_rod(N_2, Prices_2) ->
    try
        enforce_args(N_2, Prices_2),
        Max_rev = nil,
        I = 0,
        Fun = fun Fun_loop(I, Max_rev, N_2, Prices_2) ->
    case (I =< N_2) of
        true ->
            case (I == 0) of
        true -> Max_rev_2 = lists:append((case Max_rev of nil -> []; _ -> Max_rev end), [0]),
            Max_rev_4 = Max_rev_2;
        _ -> Max_rev_3 = lists:append((case Max_rev of nil -> []; _ -> Max_rev end), [-2147483648]),
            Max_rev_4 = Max_rev_3
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Max_rev_4, N_2, Prices_2);
        _ -> {I, Max_rev, N_2, Prices_2}
    end
end,
{I_2, Max_rev_4, N_2, Prices_2} = Fun(I, Max_rev, N_2, Prices_2),
        Length = 1,
        Fun_3 = fun Fun_3_loop(I_2, Length, Max_rev_4, N_2, Prices_2) ->
    case (Length =< N_2) of
        true ->
            Best = (case erlang:is_map(Max_rev_4) of true -> maps:get(Length, Max_rev_4, nil); _ -> case Length < 0 of true -> lists:nth(erlang:length(Max_rev_4) + Length + 1, Max_rev_4); _ -> lists:nth(Length + 1, Max_rev_4) end end),
            J = 1,
            Fun_2 = fun Fun_2_loop(Best, I_2, J, Length, Max_rev_4, N_2, Prices_2) ->
    case (J =< Length) of
        true ->
            Candidate = ((case erlang:is_map(Prices_2) of true -> maps:get((J - 1), Prices_2, nil); _ -> case (J - 1) < 0 of true -> lists:nth(erlang:length(Prices_2) + (J - 1) + 1, Prices_2); _ -> lists:nth((J - 1) + 1, Prices_2) end end) + (case erlang:is_map(Max_rev_4) of true -> maps:get((Length - J), Max_rev_4, nil); _ -> case (Length - J) < 0 of true -> lists:nth(erlang:length(Max_rev_4) + (Length - J) + 1, Max_rev_4); _ -> lists:nth((Length - J) + 1, Max_rev_4) end end)),
            case (Candidate > Best) of
        true -> Best_2 = Candidate,
            Best_3 = Best_2;
        _ -> Best_3 = Best
    end,
            J_2 = (J + 1),
            Fun_2_loop(Best_3, I_2, J_2, Length, Max_rev_4, N_2, Prices_2);
        _ -> {Best, I_2, J, Length, Max_rev_4, N_2, Prices_2}
    end
end,
{Best_3, I_2, J_2, Length, Max_rev_4, N_2, Prices_2} = Fun_2(Best, I_2, J, Length, Max_rev_4, N_2, Prices_2),
            Max_rev_5 = lists:sublist(Max_rev_4, Length) ++ [Best_3] ++ lists:nthtail(Length + 1, Max_rev_4),
            Length_2 = (Length + 1),
            Fun_3_loop(I_2, Length_2, Max_rev_5, N_2, Prices_2);
        _ -> {I_2, Length, Max_rev_4, N_2, Prices_2}
    end
end,
{I_2, Length_2, Max_rev_5, N_2, Prices_2} = Fun_3(I_2, Length, Max_rev_4, N_2, Prices_2),
        (case erlang:is_map(Max_rev_5) of true -> maps:get(N_2, Max_rev_5, nil); _ -> case N_2 < 0 of true -> lists:nth(erlang:length(Max_rev_5) + N_2 + 1, Max_rev_5); _ -> lists:nth(N_2 + 1, Max_rev_5) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('prices', [1, 5, 8, 9, 10, 17, 17, 20, 24, 30]),
    io:format("~ts~n", [mochi_repr(bottom_up_cut_rod(4, erlang:get('prices')))]),
    io:format("~ts~n", [mochi_repr(bottom_up_cut_rod(10, erlang:get('prices')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
