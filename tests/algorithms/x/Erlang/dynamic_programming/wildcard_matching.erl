#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_bool_list/1, make_bool_matrix/2, is_match/2, print_bool/1]).

% Generated by Mochi transpiler v0.10.64 (2a849c314b) on 2025-08-13 15:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_bool_list(N) ->
    try
        Row = [],
        I = 0,
        Fun = fun Fun_loop(I, N, Row) ->
    case (I < N) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [false]),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Row_2);
        _ -> {I, N, Row}
    end
end,
{I_2, N, Row_2} = Fun(I, N, Row),
        Row_2
    catch {return, RetCatch} -> RetCatch end.

make_bool_matrix(Rows, Cols) ->
    try
        Matrix = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Cols, I_3, Matrix, Rows) ->
    case (I_3 < Rows) of
        true ->
            Matrix_2 = lists:append((case Matrix of nil -> []; _ -> Matrix end), [make_bool_list(Cols)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Cols, I_4, Matrix_2, Rows);
        _ -> {Cols, I_3, Matrix, Rows}
    end
end,
{Cols, I_4, Matrix_2, Rows} = Fun_2(Cols, I_3, Matrix, Rows),
        Matrix_2
    catch {return, RetCatch} -> RetCatch end.

is_match(S, P) ->
    try
        N_2 = erlang:length(S),
        M = erlang:length(P),
        Dp = make_bool_matrix((N_2 + 1), (M + 1)),
        Dp_2 = lists:sublist(Dp, 0) ++ [lists:sublist(lists:nth(0 + 1, Dp), 0) ++ [true] ++ lists:nthtail(0 + 1, lists:nth(0 + 1, Dp))] ++ lists:nthtail(0 + 1, Dp),
        J = 1,
        Fun_3 = fun Fun_3_loop(Dp_2, J, M, N_2, P, S) ->
    case (J =< M) of
        true ->
            case (string:substr(P, (J - 1) + 1, (J - (J - 1))) == "*") of
        true -> Dp_3 = lists:sublist(Dp_2, 0) ++ [lists:sublist(lists:nth(0 + 1, Dp_2), J) ++ [(case erlang:is_map((case erlang:is_map(Dp_2) of true -> maps:get(0, Dp_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Dp_2) + 0 + 1, Dp_2); _ -> mochi_nth(0 + 1, Dp_2) end end)) of true -> maps:get((J - 1), (case erlang:is_map(Dp_2) of true -> maps:get(0, Dp_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Dp_2) + 0 + 1, Dp_2); _ -> mochi_nth(0 + 1, Dp_2) end end), nil); _ -> case (J - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_2) of true -> maps:get(0, Dp_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Dp_2) + 0 + 1, Dp_2); _ -> mochi_nth(0 + 1, Dp_2) end end)) + (J - 1) + 1, (case erlang:is_map(Dp_2) of true -> maps:get(0, Dp_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Dp_2) + 0 + 1, Dp_2); _ -> mochi_nth(0 + 1, Dp_2) end end)); _ -> mochi_nth((J - 1) + 1, (case erlang:is_map(Dp_2) of true -> maps:get(0, Dp_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Dp_2) + 0 + 1, Dp_2); _ -> mochi_nth(0 + 1, Dp_2) end end)) end end)] ++ lists:nthtail(J + 1, lists:nth(0 + 1, Dp_2))] ++ lists:nthtail(0 + 1, Dp_2),
            Dp_4 = Dp_3;
        _ -> Dp_4 = Dp_2
    end,
            J_2 = (J + 1),
            Fun_3_loop(Dp_4, J_2, M, N_2, P, S);
        _ -> {Dp_2, J, M, N_2, P, S}
    end
end,
{Dp_4, J_2, M, N_2, P, S} = Fun_3(Dp_2, J, M, N_2, P, S),
        I_5 = 1,
        Fun_5 = fun Fun_5_loop(Dp_4, I_5, J_2, M, N_2, P, S) ->
    case (I_5 =< N_2) of
        true ->
            J2 = 1,
            Fun_4 = fun Fun_4_loop(Dp_4, I_5, J_2, J2, M, N_2, P, S) ->
    case (J2 =< M) of
        true ->
            Pc = string:substr(P, (J2 - 1) + 1, (J2 - (J2 - 1))),
            Sc = string:substr(S, (I_5 - 1) + 1, (I_5 - (I_5 - 1))),
            case ((Pc == Sc) orelse (Pc == "?")) of
        true -> Dp_5 = lists:sublist(Dp_4, I_5) ++ [lists:sublist(lists:nth(I_5 + 1, Dp_4), J2) ++ [(case erlang:is_map((case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> mochi_nth((I_5 - 1) + 1, Dp_4) end end)) of true -> maps:get((J2 - 1), (case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> mochi_nth((I_5 - 1) + 1, Dp_4) end end), nil); _ -> case (J2 - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> mochi_nth((I_5 - 1) + 1, Dp_4) end end)) + (J2 - 1) + 1, (case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> mochi_nth((I_5 - 1) + 1, Dp_4) end end)); _ -> mochi_nth((J2 - 1) + 1, (case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> mochi_nth((I_5 - 1) + 1, Dp_4) end end)) end end)] ++ lists:nthtail(J2 + 1, lists:nth(I_5 + 1, Dp_4))] ++ lists:nthtail(I_5 + 1, Dp_4),
            Dp_9 = Dp_5;
        _ -> case (Pc == "*") of
        true -> case ((case erlang:is_map((case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> mochi_nth((I_5 - 1) + 1, Dp_4) end end)) of true -> maps:get(J2, (case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> mochi_nth((I_5 - 1) + 1, Dp_4) end end), nil); _ -> case J2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> mochi_nth((I_5 - 1) + 1, Dp_4) end end)) + J2 + 1, (case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> mochi_nth((I_5 - 1) + 1, Dp_4) end end)); _ -> mochi_nth(J2 + 1, (case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> mochi_nth((I_5 - 1) + 1, Dp_4) end end)) end end) orelse (case erlang:is_map((case erlang:is_map(Dp_4) of true -> maps:get(I_5, Dp_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dp_4) + I_5 + 1, Dp_4); _ -> mochi_nth(I_5 + 1, Dp_4) end end)) of true -> maps:get((J2 - 1), (case erlang:is_map(Dp_4) of true -> maps:get(I_5, Dp_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dp_4) + I_5 + 1, Dp_4); _ -> mochi_nth(I_5 + 1, Dp_4) end end), nil); _ -> case (J2 - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_4) of true -> maps:get(I_5, Dp_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dp_4) + I_5 + 1, Dp_4); _ -> mochi_nth(I_5 + 1, Dp_4) end end)) + (J2 - 1) + 1, (case erlang:is_map(Dp_4) of true -> maps:get(I_5, Dp_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dp_4) + I_5 + 1, Dp_4); _ -> mochi_nth(I_5 + 1, Dp_4) end end)); _ -> mochi_nth((J2 - 1) + 1, (case erlang:is_map(Dp_4) of true -> maps:get(I_5, Dp_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dp_4) + I_5 + 1, Dp_4); _ -> mochi_nth(I_5 + 1, Dp_4) end end)) end end)) of
        true -> Dp_6 = lists:sublist(Dp_4, I_5) ++ [lists:sublist(lists:nth(I_5 + 1, Dp_4), J2) ++ [true] ++ lists:nthtail(J2 + 1, lists:nth(I_5 + 1, Dp_4))] ++ lists:nthtail(I_5 + 1, Dp_4),
            Dp_7 = Dp_6;
        _ -> Dp_7 = Dp_4
    end,
            Dp_8 = Dp_7;
        _ -> Dp_8 = Dp_4
    end,
            Dp_9 = Dp_8
    end,
            J2_2 = (J2 + 1),
            Fun_4_loop(Dp_9, I_5, J_2, J2_2, M, N_2, P, S);
        _ -> {Dp_4, I_5, J_2, J2, M, N_2, P, S}
    end
end,
{Dp_9, I_5, J_2, J2_2, M, N_2, P, S} = Fun_4(Dp_4, I_5, J_2, J2, M, N_2, P, S),
            I_6 = (I_5 + 1),
            Fun_5_loop(Dp_9, I_6, J_2, M, N_2, P, S);
        _ -> {Dp_4, I_5, J_2, M, N_2, P, S}
    end
end,
{Dp_9, I_6, J_2, M, N_2, P, S} = Fun_5(Dp_4, I_5, J_2, M, N_2, P, S),
        (case erlang:is_map((case erlang:is_map(Dp_9) of true -> maps:get(N_2, Dp_9, nil); _ -> case N_2 < 0 of true -> mochi_nth(erlang:length(Dp_9) + N_2 + 1, Dp_9); _ -> mochi_nth(N_2 + 1, Dp_9) end end)) of true -> maps:get(M, (case erlang:is_map(Dp_9) of true -> maps:get(N_2, Dp_9, nil); _ -> case N_2 < 0 of true -> mochi_nth(erlang:length(Dp_9) + N_2 + 1, Dp_9); _ -> mochi_nth(N_2 + 1, Dp_9) end end), nil); _ -> case M < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_9) of true -> maps:get(N_2, Dp_9, nil); _ -> case N_2 < 0 of true -> mochi_nth(erlang:length(Dp_9) + N_2 + 1, Dp_9); _ -> mochi_nth(N_2 + 1, Dp_9) end end)) + M + 1, (case erlang:is_map(Dp_9) of true -> maps:get(N_2, Dp_9, nil); _ -> case N_2 < 0 of true -> mochi_nth(erlang:length(Dp_9) + N_2 + 1, Dp_9); _ -> mochi_nth(N_2 + 1, Dp_9) end end)); _ -> mochi_nth(M + 1, (case erlang:is_map(Dp_9) of true -> maps:get(N_2, Dp_9, nil); _ -> case N_2 < 0 of true -> mochi_nth(erlang:length(Dp_9) + N_2 + 1, Dp_9); _ -> mochi_nth(N_2 + 1, Dp_9) end end)) end end)
    catch {return, RetCatch} -> RetCatch end.

print_bool(B) ->
    try
        case B of
        true -> io:format("~ts~n", [mochi_repr(true)]);
        _ -> io:format("~ts~n", [mochi_repr(false)])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    print_bool(is_match("abc", "a*c")),
    print_bool(is_match("abc", "a*d")),
    print_bool(is_match("baaabab", "*****ba*****ab")),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
