#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, zeros_matrix/2, longest_common_subsequence/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

zeros_matrix(Rows, Cols) ->
    try
        Matrix = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Cols, I, Matrix, Rows) ->
    case (I =< Rows) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(Cols, I, J, Matrix, Row, Rows) ->
    case (J =< Cols) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            J_2 = (J + 1),
            Fun_loop(Cols, I, J_2, Matrix, Row_2, Rows);
        _ -> {Cols, I, J, Matrix, Row, Rows}
    end
end,
{Cols, I, J_2, Matrix, Row_2, Rows} = Fun(Cols, I, J, Matrix, Row, Rows),
            Matrix_2 = lists:append((case Matrix of nil -> []; _ -> Matrix end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Cols, I_2, Matrix_2, Rows);
        _ -> {Cols, I, Matrix, Rows}
    end
end,
{Cols, I_2, Matrix_2, Rows} = Fun_2(Cols, I, Matrix, Rows),
        Matrix_2
    catch {return, Ret} -> Ret end.

longest_common_subsequence(X, Y) ->
    try
        M = erlang:length(X),
        N = erlang:length(Y),
        Dp = zeros_matrix(M, N),
        I_3 = 1,
        Fun_4 = fun Fun_4_loop(Dp, I_3, M, N, X, Y) ->
    case (I_3 =< M) of
        true ->
            J_3 = 1,
            Fun_3 = fun Fun_3_loop(Dp, I_3, J_3, M, N, X, Y) ->
    case (J_3 =< N) of
        true ->
            case (string:substr(X, (I_3 - 1) + 1, 1) == string:substr(Y, (J_3 - 1) + 1, 1)) of
        true -> Dp_2 = lists:sublist(Dp, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Dp), J_3) ++ [((case erlang:is_map((case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end)) of true -> maps:get((J_3 - 1), (case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end), nil); _ -> case (J_3 - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end)) + (J_3 - 1) + 1, (case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end)); _ -> lists:nth((J_3 - 1) + 1, (case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end)) end end) + 1)] ++ lists:nthtail(J_3 + 1, lists:nth(I_3 + 1, Dp))] ++ lists:nthtail(I_3 + 1, Dp),
            Dp_6 = Dp_2;
        _ -> case ((case erlang:is_map((case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end)) of true -> maps:get(J_3, (case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end)) + J_3 + 1, (case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end)) end end) > (case erlang:is_map((case erlang:is_map(Dp) of true -> maps:get(I_3, Dp, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp) + I_3 + 1, Dp); _ -> lists:nth(I_3 + 1, Dp) end end)) of true -> maps:get((J_3 - 1), (case erlang:is_map(Dp) of true -> maps:get(I_3, Dp, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp) + I_3 + 1, Dp); _ -> lists:nth(I_3 + 1, Dp) end end), nil); _ -> case (J_3 - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp) of true -> maps:get(I_3, Dp, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp) + I_3 + 1, Dp); _ -> lists:nth(I_3 + 1, Dp) end end)) + (J_3 - 1) + 1, (case erlang:is_map(Dp) of true -> maps:get(I_3, Dp, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp) + I_3 + 1, Dp); _ -> lists:nth(I_3 + 1, Dp) end end)); _ -> lists:nth((J_3 - 1) + 1, (case erlang:is_map(Dp) of true -> maps:get(I_3, Dp, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp) + I_3 + 1, Dp); _ -> lists:nth(I_3 + 1, Dp) end end)) end end)) of
        true -> Dp_3 = lists:sublist(Dp, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Dp), J_3) ++ [(case erlang:is_map((case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end)) of true -> maps:get(J_3, (case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end)) + J_3 + 1, (case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Dp) of true -> maps:get((I_3 - 1), Dp, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (I_3 - 1) + 1, Dp); _ -> lists:nth((I_3 - 1) + 1, Dp) end end)) end end)] ++ lists:nthtail(J_3 + 1, lists:nth(I_3 + 1, Dp))] ++ lists:nthtail(I_3 + 1, Dp),
            Dp_5 = Dp_3;
        _ -> Dp_4 = lists:sublist(Dp, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Dp), J_3) ++ [(case erlang:is_map((case erlang:is_map(Dp) of true -> maps:get(I_3, Dp, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp) + I_3 + 1, Dp); _ -> lists:nth(I_3 + 1, Dp) end end)) of true -> maps:get((J_3 - 1), (case erlang:is_map(Dp) of true -> maps:get(I_3, Dp, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp) + I_3 + 1, Dp); _ -> lists:nth(I_3 + 1, Dp) end end), nil); _ -> case (J_3 - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp) of true -> maps:get(I_3, Dp, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp) + I_3 + 1, Dp); _ -> lists:nth(I_3 + 1, Dp) end end)) + (J_3 - 1) + 1, (case erlang:is_map(Dp) of true -> maps:get(I_3, Dp, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp) + I_3 + 1, Dp); _ -> lists:nth(I_3 + 1, Dp) end end)); _ -> lists:nth((J_3 - 1) + 1, (case erlang:is_map(Dp) of true -> maps:get(I_3, Dp, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp) + I_3 + 1, Dp); _ -> lists:nth(I_3 + 1, Dp) end end)) end end)] ++ lists:nthtail(J_3 + 1, lists:nth(I_3 + 1, Dp))] ++ lists:nthtail(I_3 + 1, Dp),
            Dp_5 = Dp_4
    end,
            Dp_6 = Dp_5
    end,
            J_4 = (J_3 + 1),
            Fun_3_loop(Dp_6, I_3, J_4, M, N, X, Y);
        _ -> {Dp, I_3, J_3, M, N, X, Y}
    end
end,
{Dp_6, I_3, J_4, M, N, X, Y} = Fun_3(Dp, I_3, J_3, M, N, X, Y),
            I_4 = (I_3 + 1),
            Fun_4_loop(Dp_6, I_4, M, N, X, Y);
        _ -> {Dp, I_3, M, N, X, Y}
    end
end,
{Dp_6, I_4, M, N, X, Y} = Fun_4(Dp, I_3, M, N, X, Y),
        Seq = "",
        I2 = M,
        J2 = N,
        Fun_5 = fun Fun_5_loop(Dp_6, I_4, I2, J2, M, N, Seq, X, Y) ->
    case ((I2 > 0) andalso (J2 > 0)) of
        true ->
            case (string:substr(X, (I2 - 1) + 1, 1) == string:substr(Y, (J2 - 1) + 1, 1)) of
        true -> Seq_2 = (string:substr(X, (I2 - 1) + 1, 1) ++ Seq),
            I2_2 = (I2 - 1),
            J2_2 = (J2 - 1),
            I2_5 = I2_2,
            J2_5 = J2_2,
            Seq_3 = Seq_2;
        _ -> case ((case erlang:is_map((case erlang:is_map(Dp_6) of true -> maps:get((I2 - 1), Dp_6, nil); _ -> case (I2 - 1) < 0 of true -> lists:nth(erlang:length(Dp_6) + (I2 - 1) + 1, Dp_6); _ -> lists:nth((I2 - 1) + 1, Dp_6) end end)) of true -> maps:get(J2, (case erlang:is_map(Dp_6) of true -> maps:get((I2 - 1), Dp_6, nil); _ -> case (I2 - 1) < 0 of true -> lists:nth(erlang:length(Dp_6) + (I2 - 1) + 1, Dp_6); _ -> lists:nth((I2 - 1) + 1, Dp_6) end end), nil); _ -> case J2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_6) of true -> maps:get((I2 - 1), Dp_6, nil); _ -> case (I2 - 1) < 0 of true -> lists:nth(erlang:length(Dp_6) + (I2 - 1) + 1, Dp_6); _ -> lists:nth((I2 - 1) + 1, Dp_6) end end)) + J2 + 1, (case erlang:is_map(Dp_6) of true -> maps:get((I2 - 1), Dp_6, nil); _ -> case (I2 - 1) < 0 of true -> lists:nth(erlang:length(Dp_6) + (I2 - 1) + 1, Dp_6); _ -> lists:nth((I2 - 1) + 1, Dp_6) end end)); _ -> lists:nth(J2 + 1, (case erlang:is_map(Dp_6) of true -> maps:get((I2 - 1), Dp_6, nil); _ -> case (I2 - 1) < 0 of true -> lists:nth(erlang:length(Dp_6) + (I2 - 1) + 1, Dp_6); _ -> lists:nth((I2 - 1) + 1, Dp_6) end end)) end end) >= (case erlang:is_map((case erlang:is_map(Dp_6) of true -> maps:get(I2, Dp_6, nil); _ -> case I2 < 0 of true -> lists:nth(erlang:length(Dp_6) + I2 + 1, Dp_6); _ -> lists:nth(I2 + 1, Dp_6) end end)) of true -> maps:get((J2 - 1), (case erlang:is_map(Dp_6) of true -> maps:get(I2, Dp_6, nil); _ -> case I2 < 0 of true -> lists:nth(erlang:length(Dp_6) + I2 + 1, Dp_6); _ -> lists:nth(I2 + 1, Dp_6) end end), nil); _ -> case (J2 - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_6) of true -> maps:get(I2, Dp_6, nil); _ -> case I2 < 0 of true -> lists:nth(erlang:length(Dp_6) + I2 + 1, Dp_6); _ -> lists:nth(I2 + 1, Dp_6) end end)) + (J2 - 1) + 1, (case erlang:is_map(Dp_6) of true -> maps:get(I2, Dp_6, nil); _ -> case I2 < 0 of true -> lists:nth(erlang:length(Dp_6) + I2 + 1, Dp_6); _ -> lists:nth(I2 + 1, Dp_6) end end)); _ -> lists:nth((J2 - 1) + 1, (case erlang:is_map(Dp_6) of true -> maps:get(I2, Dp_6, nil); _ -> case I2 < 0 of true -> lists:nth(erlang:length(Dp_6) + I2 + 1, Dp_6); _ -> lists:nth(I2 + 1, Dp_6) end end)) end end)) of
        true -> I2_3 = (I2 - 1),
            I2_4 = I2_3,
            J2_4 = J2;
        _ -> J2_3 = (J2 - 1),
            I2_4 = I2,
            J2_4 = J2_3
    end,
            I2_5 = I2_4,
            J2_5 = J2_4,
            Seq_3 = Seq
    end,
            Fun_5_loop(Dp_6, I_4, I2_5, J2_5, M, N, Seq_3, X, Y);
        _ -> {Dp_6, I_4, I2, J2, M, N, Seq, X, Y}
    end
end,
{Dp_6, I_4, I2_5, J2_5, M, N, Seq_3, X, Y} = Fun_5(Dp_6, I_4, I2, J2, M, N, Seq, X, Y),
        #{"length" => (case erlang:is_map((case erlang:is_map(Dp_6) of true -> maps:get(M, Dp_6, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Dp_6) + M + 1, Dp_6); _ -> lists:nth(M + 1, Dp_6) end end)) of true -> maps:get(N, (case erlang:is_map(Dp_6) of true -> maps:get(M, Dp_6, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Dp_6) + M + 1, Dp_6); _ -> lists:nth(M + 1, Dp_6) end end), nil); _ -> case N < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_6) of true -> maps:get(M, Dp_6, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Dp_6) + M + 1, Dp_6); _ -> lists:nth(M + 1, Dp_6) end end)) + N + 1, (case erlang:is_map(Dp_6) of true -> maps:get(M, Dp_6, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Dp_6) + M + 1, Dp_6); _ -> lists:nth(M + 1, Dp_6) end end)); _ -> lists:nth(N + 1, (case erlang:is_map(Dp_6) of true -> maps:get(M, Dp_6, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Dp_6) + M + 1, Dp_6); _ -> lists:nth(M + 1, Dp_6) end end)) end end), "sequence" => Seq_3}
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('a', "AGGTAB"),
    erlang:put('b', "GXTXAYB"),
    erlang:put('res', longest_common_subsequence("AGGTAB", "GXTXAYB")),
    io:format("~ts~n", [mochi_repr(((("len = " ++ mochi_str(maps:get("length", erlang:get('res'), nil))) ++ ", sub-sequence = ") ++ maps:get("sequence", erlang:get('res'), nil)))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
