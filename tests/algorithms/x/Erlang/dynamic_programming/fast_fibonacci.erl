#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, fib/1, fibonacci/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

fib(N) ->
    try
        case (N == 0) of
        true -> throw({return, #{"fn" => 0, "fn1" => 1}});
        _ -> ok
    end,
        Half = fib((N div 2)),
        A = maps:get("fn", Half, nil),
        B = maps:get("fn1", Half, nil),
        C = (A * ((B * 2) - A)),
        D = ((A * A) + (B * B)),
        case (mochi_mod(N, 2) == 0) of
        true -> throw({return, #{"fn" => C, "fn1" => D}});
        _ -> ok
    end,
        #{"fn" => D, "fn1" => (C + D)}
    catch {return, Ret} -> Ret end.

fibonacci(N_2) ->
    try
        case (N_2 < 0) of
        true -> erlang:error("Negative arguments are not supported");
        _ -> ok
    end,
        Res = fib(N_2),
        maps:get("fn", Res, nil)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('i', 0),
    Fun = fun Fun_loop() ->
    case (erlang:get('i') < 13) of
        true ->
            io:format("~ts~n", [mochi_str(fibonacci(erlang:get('i')))]),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_loop();
        _ -> {}
    end
end,
{} = Fun(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
