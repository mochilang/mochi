#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sort_list/1, largest_divisible_subset/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

sort_list(Nums) ->
    try
        Arr = Nums,
        I = 1,
        Fun_2 = fun Fun_2_loop(Arr, I, Nums) ->
    case (I < erlang:length(Arr)) of
        true ->
            Key = (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Arr) + I + 1, Arr); _ -> lists:nth(I + 1, Arr) end end),
            J = (I - 1),
            Fun = fun Fun_loop(Arr, I, J, Key, Nums) ->
    case ((J >= 0) andalso ((case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Arr) + J + 1, Arr); _ -> lists:nth(J + 1, Arr) end end) > Key)) of
        true ->
            Arr_2 = lists:sublist(Arr, (J + 1)) ++ [(case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Arr) + J + 1, Arr); _ -> lists:nth(J + 1, Arr) end end)] ++ lists:nthtail((J + 1) + 1, Arr),
            J_2 = (J - 1),
            Fun_loop(Arr_2, I, J_2, Key, Nums);
        _ -> {Arr, I, J, Key, Nums}
    end
end,
{Arr_2, I, J_2, Key, Nums} = Fun(Arr, I, J, Key, Nums),
            Arr_3 = lists:sublist(Arr_2, (J_2 + 1)) ++ [Key] ++ lists:nthtail((J_2 + 1) + 1, Arr_2),
            I_2 = (I + 1),
            Fun_2_loop(Arr_3, I_2, Nums);
        _ -> {Arr, I, Nums}
    end
end,
{Arr_3, I_2, Nums} = Fun_2(Arr, I, Nums),
        Arr_3
    catch {return, Ret} -> Ret end.

largest_divisible_subset(Items) ->
    try
        case (erlang:length(Items) == 0) of
        true -> throw({return, []});
        _ -> ok
    end,
        Nums_2 = sort_list(Items),
        N = erlang:length(Nums_2),
        Memo = [],
        Prev = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, Items, Memo, N, Nums_2, Prev) ->
    case (I_3 < N) of
        true ->
            Memo_2 = lists:append((case Memo of nil -> []; _ -> Memo end), [1]),
            Prev_2 = lists:append((case Prev of nil -> []; _ -> Prev end), [I_3]),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Items, Memo_2, N, Nums_2, Prev_2);
        _ -> {I_3, Items, Memo, N, Nums_2, Prev}
    end
end,
{I_4, Items, Memo_2, N, Nums_2, Prev_2} = Fun_3(I_3, Items, Memo, N, Nums_2, Prev),
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(I_5, Items, Memo_2, N, Nums_2, Prev_2) ->
    case (I_5 < N) of
        true ->
            J_3 = 0,
            Fun_4 = fun Fun_4_loop(I_5, Items, J_3, Memo_2, N, Nums_2, Prev_2) ->
    case (J_3 < I_5) of
        true ->
            case ((((case erlang:is_map(Nums_2) of true -> maps:get(J_3, Nums_2, nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length(Nums_2) + J_3 + 1, Nums_2); _ -> lists:nth(J_3 + 1, Nums_2) end end) == 0) orelse (mochi_mod((case erlang:is_map(Nums_2) of true -> maps:get(I_5, Nums_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Nums_2) + I_5 + 1, Nums_2); _ -> lists:nth(I_5 + 1, Nums_2) end end), (case erlang:is_map(Nums_2) of true -> maps:get(J_3, Nums_2, nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length(Nums_2) + J_3 + 1, Nums_2); _ -> lists:nth(J_3 + 1, Nums_2) end end)) == 0)) andalso (((case erlang:is_map(Memo_2) of true -> maps:get(J_3, Memo_2, nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length(Memo_2) + J_3 + 1, Memo_2); _ -> lists:nth(J_3 + 1, Memo_2) end end) + 1) > (case erlang:is_map(Memo_2) of true -> maps:get(I_5, Memo_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Memo_2) + I_5 + 1, Memo_2); _ -> lists:nth(I_5 + 1, Memo_2) end end))) of
        true -> Memo_3 = lists:sublist(Memo_2, I_5) ++ [((case erlang:is_map(Memo_2) of true -> maps:get(J_3, Memo_2, nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length(Memo_2) + J_3 + 1, Memo_2); _ -> lists:nth(J_3 + 1, Memo_2) end end) + 1)] ++ lists:nthtail(I_5 + 1, Memo_2),
            Prev_3 = lists:sublist(Prev_2, I_5) ++ [J_3] ++ lists:nthtail(I_5 + 1, Prev_2),
            Memo_4 = Memo_3,
            Prev_4 = Prev_3;
        _ -> Memo_4 = Memo_2,
            Prev_4 = Prev_2
    end,
            J_4 = (J_3 + 1),
            Fun_4_loop(I_5, Items, J_4, Memo_4, N, Nums_2, Prev_4);
        _ -> {I_5, Items, J_3, Memo_2, N, Nums_2, Prev_2}
    end
end,
{I_5, Items, J_4, Memo_4, N, Nums_2, Prev_4} = Fun_4(I_5, Items, J_3, Memo_2, N, Nums_2, Prev_2),
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, Items, Memo_4, N, Nums_2, Prev_4);
        _ -> {I_5, Items, Memo_2, N, Nums_2, Prev_2}
    end
end,
{I_6, Items, Memo_4, N, Nums_2, Prev_4} = Fun_5(I_5, Items, Memo_2, N, Nums_2, Prev_2),
        Ans = (0 - 1),
        Last_index = (0 - 1),
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(Ans, I_7, Items, Last_index, Memo_4, N, Nums_2, Prev_4) ->
    case (I_7 < N) of
        true ->
            case ((case erlang:is_map(Memo_4) of true -> maps:get(I_7, Memo_4, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(Memo_4) + I_7 + 1, Memo_4); _ -> lists:nth(I_7 + 1, Memo_4) end end) > Ans) of
        true -> Ans_2 = (case erlang:is_map(Memo_4) of true -> maps:get(I_7, Memo_4, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(Memo_4) + I_7 + 1, Memo_4); _ -> lists:nth(I_7 + 1, Memo_4) end end),
            Last_index_2 = I_7,
            Ans_3 = Ans_2,
            Last_index_3 = Last_index_2;
        _ -> Ans_3 = Ans,
            Last_index_3 = Last_index
    end,
            I_8 = (I_7 + 1),
            Fun_6_loop(Ans_3, I_8, Items, Last_index_3, Memo_4, N, Nums_2, Prev_4);
        _ -> {Ans, I_7, Items, Last_index, Memo_4, N, Nums_2, Prev_4}
    end
end,
{Ans_3, I_8, Items, Last_index_3, Memo_4, N, Nums_2, Prev_4} = Fun_6(Ans, I_7, Items, Last_index, Memo_4, N, Nums_2, Prev_4),
        case (Last_index_3 == (0 - 1)) of
        true -> throw({return, []});
        _ -> ok
    end,
        Result = [(case erlang:is_map(Nums_2) of true -> maps:get(Last_index_3, Nums_2, nil); _ -> case Last_index_3 < 0 of true -> lists:nth(erlang:length(Nums_2) + Last_index_3 + 1, Nums_2); _ -> lists:nth(Last_index_3 + 1, Nums_2) end end)],
        Fun_7 = fun Fun_7_loop(Ans_3, I_8, Items, Last_index_3, Memo_4, N, Nums_2, Prev_4, Result) ->
    case ((case erlang:is_map(Prev_4) of true -> maps:get(Last_index_3, Prev_4, nil); _ -> case Last_index_3 < 0 of true -> lists:nth(erlang:length(Prev_4) + Last_index_3 + 1, Prev_4); _ -> lists:nth(Last_index_3 + 1, Prev_4) end end) /= Last_index_3) of
        true ->
            Last_index_4 = (case erlang:is_map(Prev_4) of true -> maps:get(Last_index_3, Prev_4, nil); _ -> case Last_index_3 < 0 of true -> lists:nth(erlang:length(Prev_4) + Last_index_3 + 1, Prev_4); _ -> lists:nth(Last_index_3 + 1, Prev_4) end end),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Nums_2) of true -> maps:get(Last_index_4, Nums_2, nil); _ -> case Last_index_4 < 0 of true -> lists:nth(erlang:length(Nums_2) + Last_index_4 + 1, Nums_2); _ -> lists:nth(Last_index_4 + 1, Nums_2) end end)]),
            Fun_7_loop(Ans_3, I_8, Items, Last_index_4, Memo_4, N, Nums_2, Prev_4, Result_2);
        _ -> {Ans_3, I_8, Items, Last_index_3, Memo_4, N, Nums_2, Prev_4, Result}
    end
end,
{Ans_3, I_8, Items, Last_index_4, Memo_4, N, Nums_2, Prev_4, Result_2} = Fun_7(Ans_3, I_8, Items, Last_index_3, Memo_4, N, Nums_2, Prev_4, Result),
        Result_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Items_2 = [1, 16, 7, 8, 4],
        Subset = largest_divisible_subset(Items_2),
        io:format("~ts~n", [mochi_repr((((("The longest divisible subset of " ++ mochi_str(Items_2)) ++ " is ") ++ mochi_str(Subset)) ++ "."))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
