#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_list/2, trapped_rainwater/1]).

% Generated by Mochi transpiler v0.10.64 (2a849c314b) on 2025-08-13 15:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_list(Len, Value) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, Len, Value) ->
    case (I < Len) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [Value]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, I_2, Len, Value);
        _ -> {Arr, I, Len, Value}
    end
end,
{Arr_2, I_2, Len, Value} = Fun(Arr, I, Len, Value),
        Arr_2
    catch {return, RetCatch} -> RetCatch end.

trapped_rainwater(Heights) ->
    try
        case (erlang:length(Heights) == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Heights, I_3) ->
    case (I_3 < erlang:length(Heights)) of
        true ->
            case ((case erlang:is_map(Heights) of true -> maps:get(I_3, Heights, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Heights) + I_3 + 1, Heights); _ -> mochi_nth(I_3 + 1, Heights) end end) < 0) of
        true -> erlang:error({panic, "No height can be negative"});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Heights, I_4);
        _ -> {Heights, I_3}
    end
end,
{Heights, I_4} = Fun_2(Heights, I_3),
        Length = erlang:length(Heights),
        Left_max = make_list(Length, 0),
        Left_max_2 = lists:sublist(Left_max, 0) ++ [(case erlang:is_map(Heights) of true -> maps:get(0, Heights, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Heights) + 0 + 1, Heights); _ -> mochi_nth(0 + 1, Heights) end end)] ++ lists:nthtail(0 + 1, Left_max),
        I_5 = 1,
        Fun_3 = fun Fun_3_loop(Heights, I_5, Left_max_2, Length) ->
    case (I_5 < Length) of
        true ->
            case ((case erlang:is_map(Heights) of true -> maps:get(I_5, Heights, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Heights) + I_5 + 1, Heights); _ -> mochi_nth(I_5 + 1, Heights) end end) > (case erlang:is_map(Left_max_2) of true -> maps:get((I_5 - 1), Left_max_2, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Left_max_2) + (I_5 - 1) + 1, Left_max_2); _ -> mochi_nth((I_5 - 1) + 1, Left_max_2) end end)) of
        true -> Left_max_3 = lists:sublist(Left_max_2, I_5) ++ [(case erlang:is_map(Heights) of true -> maps:get(I_5, Heights, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Heights) + I_5 + 1, Heights); _ -> mochi_nth(I_5 + 1, Heights) end end)] ++ lists:nthtail(I_5 + 1, Left_max_2),
            Left_max_5 = Left_max_3;
        _ -> Left_max_4 = lists:sublist(Left_max_2, I_5) ++ [(case erlang:is_map(Left_max_2) of true -> maps:get((I_5 - 1), Left_max_2, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Left_max_2) + (I_5 - 1) + 1, Left_max_2); _ -> mochi_nth((I_5 - 1) + 1, Left_max_2) end end)] ++ lists:nthtail(I_5 + 1, Left_max_2),
            Left_max_5 = Left_max_4
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Heights, I_6, Left_max_5, Length);
        _ -> {Heights, I_5, Left_max_2, Length}
    end
end,
{Heights, I_6, Left_max_5, Length} = Fun_3(Heights, I_5, Left_max_2, Length),
        Right_max = make_list(Length, 0),
        Last = (Length - 1),
        Right_max_2 = lists:sublist(Right_max, Last) ++ [(case erlang:is_map(Heights) of true -> maps:get(Last, Heights, nil); _ -> case Last < 0 of true -> mochi_nth(erlang:length(Heights) + Last + 1, Heights); _ -> mochi_nth(Last + 1, Heights) end end)] ++ lists:nthtail(Last + 1, Right_max),
        I_7 = (Last - 1),
        Fun_4 = fun Fun_4_loop(Heights, I_7, Last, Left_max_5, Length, Right_max_2) ->
    case (I_7 >= 0) of
        true ->
            case ((case erlang:is_map(Heights) of true -> maps:get(I_7, Heights, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Heights) + I_7 + 1, Heights); _ -> mochi_nth(I_7 + 1, Heights) end end) > (case erlang:is_map(Right_max_2) of true -> maps:get((I_7 + 1), Right_max_2, nil); _ -> case (I_7 + 1) < 0 of true -> mochi_nth(erlang:length(Right_max_2) + (I_7 + 1) + 1, Right_max_2); _ -> mochi_nth((I_7 + 1) + 1, Right_max_2) end end)) of
        true -> Right_max_3 = lists:sublist(Right_max_2, I_7) ++ [(case erlang:is_map(Heights) of true -> maps:get(I_7, Heights, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Heights) + I_7 + 1, Heights); _ -> mochi_nth(I_7 + 1, Heights) end end)] ++ lists:nthtail(I_7 + 1, Right_max_2),
            Right_max_5 = Right_max_3;
        _ -> Right_max_4 = lists:sublist(Right_max_2, I_7) ++ [(case erlang:is_map(Right_max_2) of true -> maps:get((I_7 + 1), Right_max_2, nil); _ -> case (I_7 + 1) < 0 of true -> mochi_nth(erlang:length(Right_max_2) + (I_7 + 1) + 1, Right_max_2); _ -> mochi_nth((I_7 + 1) + 1, Right_max_2) end end)] ++ lists:nthtail(I_7 + 1, Right_max_2),
            Right_max_5 = Right_max_4
    end,
            I_8 = (I_7 - 1),
            Fun_4_loop(Heights, I_8, Last, Left_max_5, Length, Right_max_5);
        _ -> {Heights, I_7, Last, Left_max_5, Length, Right_max_2}
    end
end,
{Heights, I_8, Last, Left_max_5, Length, Right_max_5} = Fun_4(Heights, I_7, Last, Left_max_5, Length, Right_max_2),
        Total = 0,
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(Heights, I_9, Last, Left_max_5, Length, Right_max_5, Total) ->
    case (I_9 < Length) of
        true ->
            Left = (case erlang:is_map(Left_max_5) of true -> maps:get(I_9, Left_max_5, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Left_max_5) + I_9 + 1, Left_max_5); _ -> mochi_nth(I_9 + 1, Left_max_5) end end),
            Right = (case erlang:is_map(Right_max_5) of true -> maps:get(I_9, Right_max_5, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Right_max_5) + I_9 + 1, Right_max_5); _ -> mochi_nth(I_9 + 1, Right_max_5) end end),
            Smaller = (case (Left < Right) of
    true -> Left;
    _ -> Right
end),
            Total_2 = (Total + (Smaller - (case erlang:is_map(Heights) of true -> maps:get(I_9, Heights, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Heights) + I_9 + 1, Heights); _ -> mochi_nth(I_9 + 1, Heights) end end))),
            I_10 = (I_9 + 1),
            Fun_5_loop(Heights, I_10, Last, Left_max_5, Length, Right_max_5, Total_2);
        _ -> {Heights, I_9, Last, Left_max_5, Length, Right_max_5, Total}
    end
end,
{Heights, I_10, Last, Left_max_5, Length, Right_max_5, Total_2} = Fun_5(Heights, I_9, Last, Left_max_5, Length, Right_max_5, Total),
        Total_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(trapped_rainwater([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]))]),
    io:format("~ts~n", [mochi_str(trapped_rainwater([7, 1, 5, 3, 6, 4]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
