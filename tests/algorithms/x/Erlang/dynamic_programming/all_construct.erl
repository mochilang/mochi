#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, allconstruct/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

allconstruct(Target, WordBank) ->
    try
        TableSize = (erlang:length(Target) + 1),
        Table = [],
        Idx = 0,
        Fun = fun Fun_loop(Idx, Table, TableSize, Target, WordBank) ->
    case (Idx < TableSize) of
        true ->
            Empty = [],
            Table_2 = lists:append((case Table of nil -> []; _ -> Table end), [Empty]),
            Idx_2 = (Idx + 1),
            Fun_loop(Idx_2, Table_2, TableSize, Target, WordBank);
        _ -> {Idx, Table, TableSize, Target, WordBank}
    end
end,
{Idx_2, Table_2, TableSize, Target, WordBank} = Fun(Idx, Table, TableSize, Target, WordBank),
        Base = [],
        Table_3 = lists:sublist(Table_2, 0) ++ [[Base]] ++ lists:nthtail(0 + 1, Table_2),
        I = 0,
        Fun_7 = fun Fun_7_loop(Base, I, Idx_2, Table_3, TableSize, Target, WordBank) ->
    case (I < TableSize) of
        true ->
            case (erlang:length((case erlang:is_map(Table_3) of true -> maps:get(I, Table_3, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Table_3) + I + 1, Table_3); _ -> lists:nth(I + 1, Table_3) end end)) /= 0) of
        true -> W = 0,
            Fun_5 = fun Fun_5_loop(Base, I, Idx_2, Table_3, TableSize, Target, W, WordBank) ->
    case (W < erlang:length(WordBank)) of
        true ->
            Word = (case erlang:is_map(WordBank) of true -> maps:get(W, WordBank, nil); _ -> case W < 0 of true -> lists:nth(erlang:length(WordBank) + W + 1, WordBank); _ -> lists:nth(W + 1, WordBank) end end),
            WordLen = erlang:length(Word),
            case (string:substr(Target, I + 1, ((I + WordLen) - I)) == Word) of
        true -> K = 0,
            Fun_3 = fun Fun_3_loop(Base, I, Idx_2, K, Table_3, TableSize, Target, W, Word, WordBank, WordLen) ->
    case (K < erlang:length((case erlang:is_map(Table_3) of true -> maps:get(I, Table_3, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Table_3) + I + 1, Table_3); _ -> lists:nth(I + 1, Table_3) end end))) of
        true ->
            Way = (case erlang:is_map((case erlang:is_map(Table_3) of true -> maps:get(I, Table_3, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Table_3) + I + 1, Table_3); _ -> lists:nth(I + 1, Table_3) end end)) of true -> maps:get(K, (case erlang:is_map(Table_3) of true -> maps:get(I, Table_3, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Table_3) + I + 1, Table_3); _ -> lists:nth(I + 1, Table_3) end end), nil); _ -> case K < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Table_3) of true -> maps:get(I, Table_3, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Table_3) + I + 1, Table_3); _ -> lists:nth(I + 1, Table_3) end end)) + K + 1, (case erlang:is_map(Table_3) of true -> maps:get(I, Table_3, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Table_3) + I + 1, Table_3); _ -> lists:nth(I + 1, Table_3) end end)); _ -> lists:nth(K + 1, (case erlang:is_map(Table_3) of true -> maps:get(I, Table_3, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Table_3) + I + 1, Table_3); _ -> lists:nth(I + 1, Table_3) end end)) end end),
            Combination = [],
            M = 0,
            Fun_2 = fun Fun_2_loop(Base, Combination, I, Idx_2, K, M, Table_3, TableSize, Target, W, Way, Word, WordBank, WordLen) ->
    case (M < erlang:length(Way)) of
        true ->
            Combination_2 = lists:append((case Combination of nil -> []; _ -> Combination end), [(case erlang:is_map(Way) of true -> maps:get(M, Way, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Way) + M + 1, Way); _ -> lists:nth(M + 1, Way) end end)]),
            M_2 = (M + 1),
            Fun_2_loop(Base, Combination_2, I, Idx_2, K, M_2, Table_3, TableSize, Target, W, Way, Word, WordBank, WordLen);
        _ -> {Base, Combination, I, Idx_2, K, M, Table_3, TableSize, Target, W, Way, Word, WordBank, WordLen}
    end
end,
{Base, Combination_2, I, Idx_2, K, M_2, Table_3, TableSize, Target, W, Way, Word, WordBank, WordLen} = Fun_2(Base, Combination, I, Idx_2, K, M, Table_3, TableSize, Target, W, Way, Word, WordBank, WordLen),
            Combination_3 = lists:append((case Combination_2 of nil -> []; _ -> Combination_2 end), [Word]),
            NextIndex = (I + WordLen),
            Table_4 = lists:sublist(Table_3, NextIndex) ++ [lists:append((case (case erlang:is_map(Table_3) of true -> maps:get(NextIndex, Table_3, nil); _ -> case NextIndex < 0 of true -> lists:nth(erlang:length(Table_3) + NextIndex + 1, Table_3); _ -> lists:nth(NextIndex + 1, Table_3) end end) of nil -> []; _ -> (case erlang:is_map(Table_3) of true -> maps:get(NextIndex, Table_3, nil); _ -> case NextIndex < 0 of true -> lists:nth(erlang:length(Table_3) + NextIndex + 1, Table_3); _ -> lists:nth(NextIndex + 1, Table_3) end end) end), [Combination_3])] ++ lists:nthtail(NextIndex + 1, Table_3),
            K_2 = (K + 1),
            Fun_3_loop(Base, I, Idx_2, K_2, Table_4, TableSize, Target, W, Word, WordBank, WordLen);
        _ -> {Base, I, Idx_2, K, Table_3, TableSize, Target, W, Word, WordBank, WordLen}
    end
end,
{Base, I, Idx_2, K_2, Table_4, TableSize, Target, W, Word, WordBank, WordLen} = Fun_3(Base, I, Idx_2, K, Table_3, TableSize, Target, W, Word, WordBank, WordLen),
            Fun_4 = Fun_3,
            K_3 = K_2,
            Table_5 = Table_4;
        _ -> Fun_4 = Fun,
            K_3 = nil,
            Table_5 = Table_3
    end,
            W_2 = (W + 1),
            Fun_5_loop(Base, I, Idx_2, Table_5, TableSize, Target, W_2, WordBank);
        _ -> {Base, I, Idx_2, Table_3, TableSize, Target, W, WordBank}
    end
end,
{Base, I, Idx_2, Table_5, TableSize, Target, W_2, WordBank} = Fun_5(Base, I, Idx_2, Table_3, TableSize, Target, W, WordBank),
            Fun_6 = Fun_5,
            Table_6 = Table_5,
            W_3 = W_2;
        _ -> Fun_6 = Fun,
            Table_6 = Table_3,
            W_3 = nil
    end,
            I_2 = (I + 1),
            Fun_7_loop(Base, I_2, Idx_2, Table_6, TableSize, Target, WordBank);
        _ -> {Base, I, Idx_2, Table_3, TableSize, Target, WordBank}
    end
end,
{Base, I_2, Idx_2, Table_6, TableSize, Target, WordBank} = Fun_7(Base, I, Idx_2, Table_3, TableSize, Target, WordBank),
        (case erlang:is_map(Table_6) of true -> maps:get(erlang:length(Target), Table_6, nil); _ -> case erlang:length(Target) < 0 of true -> lists:nth(erlang:length(Table_6) + erlang:length(Target) + 1, Table_6); _ -> lists:nth(erlang:length(Target) + 1, Table_6) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(allconstruct("jwajalapa", ["jwa", "j", "w", "a", "la", "lapa"]))]),
    io:format("~ts~n", [mochi_str(allconstruct("rajamati", ["s", "raj", "amat", "raja", "ma", "i", "t"]))]),
    io:format("~ts~n", [mochi_str(allconstruct("hexagonosaurus", ["h", "ex", "hex", "ag", "ago", "ru", "auru", "rus", "go", "no", "o", "s"]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
