#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bitwise_and/2, list_of_submasks/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

bitwise_and(A, B) ->
    try
        Result = 0,
        Bit = 1,
        X = A,
        Y = B,
        Fun = fun Fun_loop(A, B, Bit, Result, X, Y) ->
    case ((X > 0) orelse (Y > 0)) of
        true ->
            Abit = mochi_mod(X, 2),
            Bbit = mochi_mod(Y, 2),
            case ((Abit == 1) andalso (Bbit == 1)) of
        true -> Result_2 = (Result + Bit),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            X_2 = (X div 2),
            Y_2 = (Y div 2),
            Bit_2 = (Bit * 2),
            Fun_loop(A, B, Bit_2, Result_3, X_2, Y_2);
        _ -> {A, B, Bit, Result, X, Y}
    end
end,
{A, B, Bit_2, Result_3, X_2, Y_2} = Fun(A, B, Bit, Result, X, Y),
        Result_3
    catch {return, Ret} -> Ret end.

list_of_submasks(Mask) ->
    try
        case (Mask =< 0) of
        true -> erlang:error(("mask needs to be positive integer, your input " ++ mochi_str(Mask)));
        _ -> ok
    end,
        All_submasks = [],
        Submask = Mask,
        Fun_2 = fun Fun_2_loop(All_submasks, Mask, Submask) ->
    case (Submask /= 0) of
        true ->
            All_submasks_2 = lists:append((case All_submasks of nil -> []; _ -> All_submasks end), [Submask]),
            Submask_2 = bitwise_and((Submask - 1), Mask),
            Fun_2_loop(All_submasks_2, Mask, Submask_2);
        _ -> {All_submasks, Mask, Submask}
    end
end,
{All_submasks_2, Mask, Submask_2} = Fun_2(All_submasks, Mask, Submask),
        All_submasks_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(list_of_submasks(15))]),
    io:format("~ts~n", [mochi_str(list_of_submasks(13))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
