#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_list/2, count_recursive/2, combination_sum_iv/2, count_dp/3, combination_sum_iv_dp_array/2, combination_sum_iv_bottom_up/3]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_list(Len, Value) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, Len, Value) ->
    case (I < Len) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [Value]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, I_2, Len, Value);
        _ -> {Arr, I, Len, Value}
    end
end,
{Arr_2, I_2, Len, Value} = Fun(Arr, I, Len, Value),
        Arr_2
    catch {return, Ret} -> Ret end.

count_recursive(Array, Target) ->
    try
        case (Target < 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case (Target == 0) of
        true -> throw({return, 1});
        _ -> ok
    end,
        Total = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Array, I_3, Target, Total) ->
    case (I_3 < erlang:length(Array)) of
        true ->
            Total_2 = (Total + count_recursive(Array, (Target - (case erlang:is_map(Array) of true -> maps:get(I_3, Array, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Array) + I_3 + 1, Array); _ -> lists:nth(I_3 + 1, Array) end end)))),
            I_4 = (I_3 + 1),
            Fun_2_loop(Array, I_4, Target, Total_2);
        _ -> {Array, I_3, Target, Total}
    end
end,
{Array, I_4, Target, Total_2} = Fun_2(Array, I_3, Target, Total),
        Total_2
    catch {return, Ret} -> Ret end.

combination_sum_iv(Array_2, Target_2) ->
    try
        count_recursive(Array_2, Target_2)
    catch {return, Ret} -> Ret end.

count_dp(Array_3, Target_3, Dp) ->
    try
        case (Target_3 < 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case (Target_3 == 0) of
        true -> throw({return, 1});
        _ -> ok
    end,
        case ((case erlang:is_map(Dp) of true -> maps:get(Target_3, Dp, nil); _ -> case Target_3 < 0 of true -> lists:nth(erlang:length(Dp) + Target_3 + 1, Dp); _ -> lists:nth(Target_3 + 1, Dp) end end) > (0 - 1)) of
        true -> throw({return, (case erlang:is_map(Dp) of true -> maps:get(Target_3, Dp, nil); _ -> case Target_3 < 0 of true -> lists:nth(erlang:length(Dp) + Target_3 + 1, Dp); _ -> lists:nth(Target_3 + 1, Dp) end end)});
        _ -> ok
    end,
        Total_3 = 0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Array_3, Dp, I_5, Target_3, Total_3) ->
    case (I_5 < erlang:length(Array_3)) of
        true ->
            Total_4 = (Total_3 + count_dp(Array_3, (Target_3 - (case erlang:is_map(Array_3) of true -> maps:get(I_5, Array_3, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Array_3) + I_5 + 1, Array_3); _ -> lists:nth(I_5 + 1, Array_3) end end)), Dp)),
            I_6 = (I_5 + 1),
            Fun_3_loop(Array_3, Dp, I_6, Target_3, Total_4);
        _ -> {Array_3, Dp, I_5, Target_3, Total_3}
    end
end,
{Array_3, Dp, I_6, Target_3, Total_4} = Fun_3(Array_3, Dp, I_5, Target_3, Total_3),
        Dp_2 = lists:sublist(Dp, Target_3) ++ [Total_4] ++ lists:nthtail(Target_3 + 1, Dp),
        Total_4
    catch {return, Ret} -> Ret end.

combination_sum_iv_dp_array(Array_4, Target_4) ->
    try
        Dp_3 = make_list((Target_4 + 1), -1),
        count_dp(Array_4, Target_4, Dp_3)
    catch {return, Ret} -> Ret end.

combination_sum_iv_bottom_up(N, Array_5, Target_5) ->
    try
        Dp_4 = make_list((Target_5 + 1), 0),
        Dp_5 = lists:sublist(Dp_4, 0) ++ [1] ++ lists:nthtail(0 + 1, Dp_4),
        I_7 = 1,
        Fun_5 = fun Fun_5_loop(Array_5, Dp_5, I_7, N, Target_5) ->
    case (I_7 =< Target_5) of
        true ->
            J = 0,
            Fun_4 = fun Fun_4_loop(Array_5, Dp_5, I_7, J, N, Target_5) ->
    case (J < N) of
        true ->
            case ((I_7 - (case erlang:is_map(Array_5) of true -> maps:get(J, Array_5, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Array_5) + J + 1, Array_5); _ -> lists:nth(J + 1, Array_5) end end)) >= 0) of
        true -> Dp_6 = lists:sublist(Dp_5, I_7) ++ [((case erlang:is_map(Dp_5) of true -> maps:get(I_7, Dp_5, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(Dp_5) + I_7 + 1, Dp_5); _ -> lists:nth(I_7 + 1, Dp_5) end end) + (case erlang:is_map(Dp_5) of true -> maps:get((I_7 - (case erlang:is_map(Array_5) of true -> maps:get(J, Array_5, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Array_5) + J + 1, Array_5); _ -> lists:nth(J + 1, Array_5) end end)), Dp_5, nil); _ -> case (I_7 - (case erlang:is_map(Array_5) of true -> maps:get(J, Array_5, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Array_5) + J + 1, Array_5); _ -> lists:nth(J + 1, Array_5) end end)) < 0 of true -> lists:nth(erlang:length(Dp_5) + (I_7 - (case erlang:is_map(Array_5) of true -> maps:get(J, Array_5, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Array_5) + J + 1, Array_5); _ -> lists:nth(J + 1, Array_5) end end)) + 1, Dp_5); _ -> lists:nth((I_7 - (case erlang:is_map(Array_5) of true -> maps:get(J, Array_5, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Array_5) + J + 1, Array_5); _ -> lists:nth(J + 1, Array_5) end end)) + 1, Dp_5) end end))] ++ lists:nthtail(I_7 + 1, Dp_5),
            Dp_7 = Dp_6;
        _ -> Dp_7 = Dp_5
    end,
            J_2 = (J + 1),
            Fun_4_loop(Array_5, Dp_7, I_7, J_2, N, Target_5);
        _ -> {Array_5, Dp_5, I_7, J, N, Target_5}
    end
end,
{Array_5, Dp_7, I_7, J_2, N, Target_5} = Fun_4(Array_5, Dp_5, I_7, J, N, Target_5),
            I_8 = (I_7 + 1),
            Fun_5_loop(Array_5, Dp_7, I_8, N, Target_5);
        _ -> {Array_5, Dp_5, I_7, N, Target_5}
    end
end,
{Array_5, Dp_7, I_8, N, Target_5} = Fun_5(Array_5, Dp_5, I_7, N, Target_5),
        (case erlang:is_map(Dp_7) of true -> maps:get(Target_5, Dp_7, nil); _ -> case Target_5 < 0 of true -> lists:nth(erlang:length(Dp_7) + Target_5 + 1, Dp_7); _ -> lists:nth(Target_5 + 1, Dp_7) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(combination_sum_iv([1, 2, 5], 5))]),
    io:format("~ts~n", [mochi_str(combination_sum_iv_dp_array([1, 2, 5], 5))]),
    io:format("~ts~n", [mochi_str(combination_sum_iv_bottom_up(3, [1, 2, 5], 5))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
