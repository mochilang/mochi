#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, panic/1, catalan_numbers/1]).

% Generated by Mochi transpiler v0.10.62 (375502c276) on 2025-08-09 15:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

panic(Msg) ->
    try
        io:format("~ts~n", [mochi_repr(Msg)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

catalan_numbers(Upper_limit) ->
    try
        case (Upper_limit < 0) of
        true -> erlang:error({panic, "Limit for the Catalan sequence must be >= 0"}),
            throw({return, []});
        _ -> ok
    end,
        Catalans = [1],
        N = 1,
        Fun_2 = fun Fun_2_loop(Catalans, N, Upper_limit) ->
    case (N =< Upper_limit) of
        true ->
            Next_val = 0,
            J = 0,
            Fun = fun Fun_loop(Catalans, J, N, Next_val, Upper_limit) ->
    case (J < N) of
        true ->
            Next_val_2 = (Next_val + ((case erlang:is_map(Catalans) of true -> maps:get(J, Catalans, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Catalans) + J + 1, Catalans); _ -> mochi_nth(J + 1, Catalans) end end) * (case erlang:is_map(Catalans) of true -> maps:get(((N - J) - 1), Catalans, nil); _ -> case ((N - J) - 1) < 0 of true -> mochi_nth(erlang:length(Catalans) + ((N - J) - 1) + 1, Catalans); _ -> mochi_nth(((N - J) - 1) + 1, Catalans) end end))),
            J_2 = (J + 1),
            Fun_loop(Catalans, J_2, N, Next_val_2, Upper_limit);
        _ -> {Catalans, J, N, Next_val, Upper_limit}
    end
end,
{Catalans, J_2, N, Next_val_2, Upper_limit} = Fun(Catalans, J, N, Next_val, Upper_limit),
            Catalans_2 = lists:append((case Catalans of nil -> []; _ -> Catalans end), [Next_val_2]),
            N_2 = (N + 1),
            Fun_2_loop(Catalans_2, N_2, Upper_limit);
        _ -> {Catalans, N, Upper_limit}
    end
end,
{Catalans_2, N_2, Upper_limit} = Fun_2(Catalans, N, Upper_limit),
        Catalans_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(catalan_numbers(5))]),
    io:format("~ts~n", [mochi_str(catalan_numbers(2))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
