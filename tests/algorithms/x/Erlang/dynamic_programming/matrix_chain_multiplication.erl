#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, matrix_chain_multiply/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

matrix_chain_multiply(Arr) ->
    try
        case (erlang:length(Arr) < 2) of
        true -> throw({return, 0});
        _ -> ok
    end,
        N = erlang:length(Arr),
        Dp = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Arr, Dp, I, N) ->
    case (I < N) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(Arr, Dp, I, J, N, Row) ->
    case (J < N) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [1000000000]),
            J_2 = (J + 1),
            Fun_loop(Arr, Dp, I, J_2, N, Row_2);
        _ -> {Arr, Dp, I, J, N, Row}
    end
end,
{Arr, Dp, I, J_2, N, Row_2} = Fun(Arr, Dp, I, J, N, Row),
            Dp_2 = lists:append((case Dp of nil -> []; _ -> Dp end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Arr, Dp_2, I_2, N);
        _ -> {Arr, Dp, I, N}
    end
end,
{Arr, Dp_2, I_2, N} = Fun_2(Arr, Dp, I, N),
        I_3 = (N - 1),
        Fun_6 = fun Fun_6_loop(Arr, Dp_2, I_3, N) ->
    case (I_3 > 0) of
        true ->
            J_3 = I_3,
            Fun_5 = fun Fun_5_loop(Arr, Dp_2, I_3, J_3, N) ->
    case (J_3 < N) of
        true ->
            case (I_3 == J_3) of
        true -> Dp_3 = lists:sublist(Dp_2, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Dp_2), J_3) ++ [0] ++ lists:nthtail(J_3 + 1, lists:nth(I_3 + 1, Dp_2))] ++ lists:nthtail(I_3 + 1, Dp_2),
            Dp_6 = Dp_3,
            Fun_4 = Fun_2,
            K_3 = nil;
        _ -> K = I_3,
            Fun_3 = fun Fun_3_loop(Arr, Dp_2, I_3, J_3, K, N) ->
    case (K < J_3) of
        true ->
            Cost = (((case erlang:is_map((case erlang:is_map(Dp_2) of true -> maps:get(I_3, Dp_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_3 + 1, Dp_2); _ -> lists:nth(I_3 + 1, Dp_2) end end)) of true -> maps:get(K, (case erlang:is_map(Dp_2) of true -> maps:get(I_3, Dp_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_3 + 1, Dp_2); _ -> lists:nth(I_3 + 1, Dp_2) end end), nil); _ -> case K < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_2) of true -> maps:get(I_3, Dp_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_3 + 1, Dp_2); _ -> lists:nth(I_3 + 1, Dp_2) end end)) + K + 1, (case erlang:is_map(Dp_2) of true -> maps:get(I_3, Dp_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_3 + 1, Dp_2); _ -> lists:nth(I_3 + 1, Dp_2) end end)); _ -> lists:nth(K + 1, (case erlang:is_map(Dp_2) of true -> maps:get(I_3, Dp_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_3 + 1, Dp_2); _ -> lists:nth(I_3 + 1, Dp_2) end end)) end end) + (case erlang:is_map((case erlang:is_map(Dp_2) of true -> maps:get((K + 1), Dp_2, nil); _ -> case (K + 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (K + 1) + 1, Dp_2); _ -> lists:nth((K + 1) + 1, Dp_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Dp_2) of true -> maps:get((K + 1), Dp_2, nil); _ -> case (K + 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (K + 1) + 1, Dp_2); _ -> lists:nth((K + 1) + 1, Dp_2) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_2) of true -> maps:get((K + 1), Dp_2, nil); _ -> case (K + 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (K + 1) + 1, Dp_2); _ -> lists:nth((K + 1) + 1, Dp_2) end end)) + J_3 + 1, (case erlang:is_map(Dp_2) of true -> maps:get((K + 1), Dp_2, nil); _ -> case (K + 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (K + 1) + 1, Dp_2); _ -> lists:nth((K + 1) + 1, Dp_2) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Dp_2) of true -> maps:get((K + 1), Dp_2, nil); _ -> case (K + 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (K + 1) + 1, Dp_2); _ -> lists:nth((K + 1) + 1, Dp_2) end end)) end end)) + (((case erlang:is_map(Arr) of true -> maps:get((I_3 - 1), Arr, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Arr) + (I_3 - 1) + 1, Arr); _ -> lists:nth((I_3 - 1) + 1, Arr) end end) * (case erlang:is_map(Arr) of true -> maps:get(K, Arr, nil); _ -> case K < 0 of true -> lists:nth(erlang:length(Arr) + K + 1, Arr); _ -> lists:nth(K + 1, Arr) end end)) * (case erlang:is_map(Arr) of true -> maps:get(J_3, Arr, nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length(Arr) + J_3 + 1, Arr); _ -> lists:nth(J_3 + 1, Arr) end end))),
            case (Cost < (case erlang:is_map((case erlang:is_map(Dp_2) of true -> maps:get(I_3, Dp_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_3 + 1, Dp_2); _ -> lists:nth(I_3 + 1, Dp_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Dp_2) of true -> maps:get(I_3, Dp_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_3 + 1, Dp_2); _ -> lists:nth(I_3 + 1, Dp_2) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_2) of true -> maps:get(I_3, Dp_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_3 + 1, Dp_2); _ -> lists:nth(I_3 + 1, Dp_2) end end)) + J_3 + 1, (case erlang:is_map(Dp_2) of true -> maps:get(I_3, Dp_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_3 + 1, Dp_2); _ -> lists:nth(I_3 + 1, Dp_2) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Dp_2) of true -> maps:get(I_3, Dp_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Dp_2) + I_3 + 1, Dp_2); _ -> lists:nth(I_3 + 1, Dp_2) end end)) end end)) of
        true -> Dp_4 = lists:sublist(Dp_2, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Dp_2), J_3) ++ [Cost] ++ lists:nthtail(J_3 + 1, lists:nth(I_3 + 1, Dp_2))] ++ lists:nthtail(I_3 + 1, Dp_2),
            Dp_5 = Dp_4;
        _ -> Dp_5 = Dp_2
    end,
            K_2 = (K + 1),
            Fun_3_loop(Arr, Dp_5, I_3, J_3, K_2, N);
        _ -> {Arr, Dp_2, I_3, J_3, K, N}
    end
end,
{Arr, Dp_5, I_3, J_3, K_2, N} = Fun_3(Arr, Dp_2, I_3, J_3, K, N),
            Dp_6 = Dp_5,
            Fun_4 = Fun_3,
            K_3 = K_2
    end,
            J_4 = (J_3 + 1),
            Fun_5_loop(Arr, Dp_6, I_3, J_4, N);
        _ -> {Arr, Dp_2, I_3, J_3, N}
    end
end,
{Arr, Dp_6, I_3, J_4, N} = Fun_5(Arr, Dp_2, I_3, J_3, N),
            I_4 = (I_3 - 1),
            Fun_6_loop(Arr, Dp_6, I_4, N);
        _ -> {Arr, Dp_2, I_3, N}
    end
end,
{Arr, Dp_6, I_4, N} = Fun_6(Arr, Dp_2, I_3, N),
        (case erlang:is_map((case erlang:is_map(Dp_6) of true -> maps:get(1, Dp_6, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Dp_6) + 1 + 1, Dp_6); _ -> lists:nth(1 + 1, Dp_6) end end)) of true -> maps:get((N - 1), (case erlang:is_map(Dp_6) of true -> maps:get(1, Dp_6, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Dp_6) + 1 + 1, Dp_6); _ -> lists:nth(1 + 1, Dp_6) end end), nil); _ -> case (N - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_6) of true -> maps:get(1, Dp_6, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Dp_6) + 1 + 1, Dp_6); _ -> lists:nth(1 + 1, Dp_6) end end)) + (N - 1) + 1, (case erlang:is_map(Dp_6) of true -> maps:get(1, Dp_6, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Dp_6) + 1 + 1, Dp_6); _ -> lists:nth(1 + 1, Dp_6) end end)); _ -> lists:nth((N - 1) + 1, (case erlang:is_map(Dp_6) of true -> maps:get(1, Dp_6, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Dp_6) + 1 + 1, Dp_6); _ -> lists:nth(1 + 1, Dp_6) end end)) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('INF', 1000000000),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
