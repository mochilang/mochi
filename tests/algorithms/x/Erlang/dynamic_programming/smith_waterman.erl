#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, score_function/5, smith_waterman/5, traceback/6]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

score_function(Source_char, Target_char, Match_score, Mismatch_score, Gap_score) ->
    try
        case ((Source_char == "-") orelse (Target_char == "-")) of
        true -> throw({return, Gap_score});
        _ -> ok
    end,
        case (Source_char == Target_char) of
        true -> throw({return, Match_score});
        _ -> ok
    end,
        Mismatch_score
    catch {return, Ret} -> Ret end.

smith_waterman(Query, Subject, Match_score_2, Mismatch_score_2, Gap_score_2) ->
    try
        Q = string:to_upper(Query),
        S = string:to_upper(Subject),
        M = erlang:length(Q),
        N = erlang:length(S),
        Score = [],
        Fun = fun Fun_loop(List, Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score, Subject) ->
    case List of
        [] -> {Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score, Subject};
        [_|__rest] ->
            Row = [],
            Fun_2 = fun Fun_2_loop(List, Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, Row, S, Score, Subject) ->
    case List of
        [] -> {Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, Row, S, Score, Subject};
        [_2|_2_rest] ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            Fun_2_loop(_2_rest, Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, Row_2, S, Score, Subject);
        _ -> {Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, Row, S, Score, Subject}
    end
end,
{Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, Row_2, S, Score, Subject} = Fun_2(lists:seq(0, ((N + 1)) - 1), Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, Row, S, Score, Subject),
            Score_2 = lists:append((case Score of nil -> []; _ -> Score end), [Row_2]),
            Fun_loop(__rest, Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_2, Subject);
        _ -> {Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score, Subject}
    end
end,
{Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_2, Subject} = Fun(lists:seq(0, ((M + 1)) - 1), Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score, Subject),
        Fun_3 = fun Fun_3_loop(List, Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_2, Subject) ->
    case List of
        [] -> {Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_2, Subject};
        [I|I_rest] ->
            Fun_4 = fun Fun_4_loop(List, Gap_score_2, I, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_2, Subject) ->
    case List of
        [] -> {Gap_score_2, I, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_2, Subject};
        [J|J_rest] ->
            Qc = string:substr(Q, (I - 1) + 1, (I - (I - 1))),
            Sc = string:substr(S, (J - 1) + 1, (J - (J - 1))),
            Diag = ((case erlang:is_map((case erlang:is_map(Score_2) of true -> maps:get((I - 1), Score_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Score_2) + (I - 1) + 1, Score_2); _ -> lists:nth((I - 1) + 1, Score_2) end end)) of true -> maps:get((J - 1), (case erlang:is_map(Score_2) of true -> maps:get((I - 1), Score_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Score_2) + (I - 1) + 1, Score_2); _ -> lists:nth((I - 1) + 1, Score_2) end end), nil); _ -> case (J - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Score_2) of true -> maps:get((I - 1), Score_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Score_2) + (I - 1) + 1, Score_2); _ -> lists:nth((I - 1) + 1, Score_2) end end)) + (J - 1) + 1, (case erlang:is_map(Score_2) of true -> maps:get((I - 1), Score_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Score_2) + (I - 1) + 1, Score_2); _ -> lists:nth((I - 1) + 1, Score_2) end end)); _ -> lists:nth((J - 1) + 1, (case erlang:is_map(Score_2) of true -> maps:get((I - 1), Score_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Score_2) + (I - 1) + 1, Score_2); _ -> lists:nth((I - 1) + 1, Score_2) end end)) end end) + score_function(Qc, Sc, Match_score_2, Mismatch_score_2, Gap_score_2)),
            Delete = ((case erlang:is_map((case erlang:is_map(Score_2) of true -> maps:get((I - 1), Score_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Score_2) + (I - 1) + 1, Score_2); _ -> lists:nth((I - 1) + 1, Score_2) end end)) of true -> maps:get(J, (case erlang:is_map(Score_2) of true -> maps:get((I - 1), Score_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Score_2) + (I - 1) + 1, Score_2); _ -> lists:nth((I - 1) + 1, Score_2) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Score_2) of true -> maps:get((I - 1), Score_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Score_2) + (I - 1) + 1, Score_2); _ -> lists:nth((I - 1) + 1, Score_2) end end)) + J + 1, (case erlang:is_map(Score_2) of true -> maps:get((I - 1), Score_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Score_2) + (I - 1) + 1, Score_2); _ -> lists:nth((I - 1) + 1, Score_2) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Score_2) of true -> maps:get((I - 1), Score_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Score_2) + (I - 1) + 1, Score_2); _ -> lists:nth((I - 1) + 1, Score_2) end end)) end end) + Gap_score_2),
            Insert = ((case erlang:is_map((case erlang:is_map(Score_2) of true -> maps:get(I, Score_2, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Score_2) + I + 1, Score_2); _ -> lists:nth(I + 1, Score_2) end end)) of true -> maps:get((J - 1), (case erlang:is_map(Score_2) of true -> maps:get(I, Score_2, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Score_2) + I + 1, Score_2); _ -> lists:nth(I + 1, Score_2) end end), nil); _ -> case (J - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Score_2) of true -> maps:get(I, Score_2, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Score_2) + I + 1, Score_2); _ -> lists:nth(I + 1, Score_2) end end)) + (J - 1) + 1, (case erlang:is_map(Score_2) of true -> maps:get(I, Score_2, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Score_2) + I + 1, Score_2); _ -> lists:nth(I + 1, Score_2) end end)); _ -> lists:nth((J - 1) + 1, (case erlang:is_map(Score_2) of true -> maps:get(I, Score_2, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Score_2) + I + 1, Score_2); _ -> lists:nth(I + 1, Score_2) end end)) end end) + Gap_score_2),
            Max_val = 0,
            case (Diag > Max_val) of
        true -> Max_val_2 = Diag,
            Max_val_3 = Max_val_2;
        _ -> Max_val_3 = Max_val
    end,
            case (Delete > Max_val_3) of
        true -> Max_val_4 = Delete,
            Max_val_5 = Max_val_4;
        _ -> Max_val_5 = Max_val_3
    end,
            case (Insert > Max_val_5) of
        true -> Max_val_6 = Insert,
            Max_val_7 = Max_val_6;
        _ -> Max_val_7 = Max_val_5
    end,
            Score_3 = lists:sublist(Score_2, I) ++ [lists:sublist(lists:nth(I + 1, Score_2), J) ++ [Max_val_7] ++ lists:nthtail(J + 1, lists:nth(I + 1, Score_2))] ++ lists:nthtail(I + 1, Score_2),
            Fun_4_loop(J_rest, Gap_score_2, I, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_3, Subject);
        _ -> {Gap_score_2, I, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_2, Subject}
    end
end,
{Gap_score_2, I, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_3, Subject} = Fun_4(lists:seq(1, ((N + 1)) - 1), Gap_score_2, I, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_2, Subject),
            Fun_3_loop(I_rest, Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_3, Subject);
        _ -> {Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_2, Subject}
    end
end,
{Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_3, Subject} = Fun_3(lists:seq(1, ((M + 1)) - 1), Gap_score_2, M, Match_score_2, Mismatch_score_2, N, Q, Query, S, Score_2, Subject),
        Score_3
    catch {return, Ret} -> Ret end.

traceback(Score_4, Query_2, Subject_2, Match_score_3, Mismatch_score_3, Gap_score_3) ->
    try
        Q_2 = string:to_upper(Query_2),
        S_2 = string:to_upper(Subject_2),
        Max_value = 0,
        I_max = 0,
        J_max = 0,
        Fun_5 = fun Fun_5_loop(List, Gap_score_3, I_max, J_max, Match_score_3, Max_value, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2) ->
    case List of
        [] -> {Gap_score_3, I_max, J_max, Match_score_3, Max_value, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2};
        [I_2|I_2_rest] ->
            Fun_6 = fun Fun_6_loop(List, Gap_score_3, I_2, I_max, J_max, Match_score_3, Max_value, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2) ->
    case List of
        [] -> {Gap_score_3, I_2, I_max, J_max, Match_score_3, Max_value, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2};
        [J_2|J_2_rest] ->
            case ((case erlang:is_map((case erlang:is_map(Score_4) of true -> maps:get(I_2, Score_4, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(Score_4) + I_2 + 1, Score_4); _ -> lists:nth(I_2 + 1, Score_4) end end)) of true -> maps:get(J_2, (case erlang:is_map(Score_4) of true -> maps:get(I_2, Score_4, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(Score_4) + I_2 + 1, Score_4); _ -> lists:nth(I_2 + 1, Score_4) end end), nil); _ -> case J_2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Score_4) of true -> maps:get(I_2, Score_4, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(Score_4) + I_2 + 1, Score_4); _ -> lists:nth(I_2 + 1, Score_4) end end)) + J_2 + 1, (case erlang:is_map(Score_4) of true -> maps:get(I_2, Score_4, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(Score_4) + I_2 + 1, Score_4); _ -> lists:nth(I_2 + 1, Score_4) end end)); _ -> lists:nth(J_2 + 1, (case erlang:is_map(Score_4) of true -> maps:get(I_2, Score_4, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(Score_4) + I_2 + 1, Score_4); _ -> lists:nth(I_2 + 1, Score_4) end end)) end end) > Max_value) of
        true -> Max_value_2 = (case erlang:is_map((case erlang:is_map(Score_4) of true -> maps:get(I_2, Score_4, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(Score_4) + I_2 + 1, Score_4); _ -> lists:nth(I_2 + 1, Score_4) end end)) of true -> maps:get(J_2, (case erlang:is_map(Score_4) of true -> maps:get(I_2, Score_4, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(Score_4) + I_2 + 1, Score_4); _ -> lists:nth(I_2 + 1, Score_4) end end), nil); _ -> case J_2 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Score_4) of true -> maps:get(I_2, Score_4, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(Score_4) + I_2 + 1, Score_4); _ -> lists:nth(I_2 + 1, Score_4) end end)) + J_2 + 1, (case erlang:is_map(Score_4) of true -> maps:get(I_2, Score_4, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(Score_4) + I_2 + 1, Score_4); _ -> lists:nth(I_2 + 1, Score_4) end end)); _ -> lists:nth(J_2 + 1, (case erlang:is_map(Score_4) of true -> maps:get(I_2, Score_4, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(Score_4) + I_2 + 1, Score_4); _ -> lists:nth(I_2 + 1, Score_4) end end)) end end),
            I_max_2 = I_2,
            J_max_2 = J_2,
            I_max_3 = I_max_2,
            J_max_3 = J_max_2,
            Max_value_3 = Max_value_2;
        _ -> I_max_3 = I_max,
            J_max_3 = J_max,
            Max_value_3 = Max_value
    end,
            Fun_6_loop(J_2_rest, Gap_score_3, I_2, I_max_3, J_max_3, Match_score_3, Max_value_3, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2);
        _ -> {Gap_score_3, I_2, I_max, J_max, Match_score_3, Max_value, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2}
    end
end,
{Gap_score_3, I_2, I_max_3, J_max_3, Match_score_3, Max_value_3, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2} = Fun_6(lists:seq(0, (erlang:length((case erlang:is_map(Score_4) of true -> maps:get(I_2, Score_4, nil); _ -> case I_2 < 0 of true -> lists:nth(erlang:length(Score_4) + I_2 + 1, Score_4); _ -> lists:nth(I_2 + 1, Score_4) end end))) - 1), Gap_score_3, I_2, I_max, J_max, Match_score_3, Max_value, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2),
            Fun_5_loop(I_2_rest, Gap_score_3, I_max_3, J_max_3, Match_score_3, Max_value_3, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2);
        _ -> {Gap_score_3, I_max, J_max, Match_score_3, Max_value, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2}
    end
end,
{Gap_score_3, I_max_3, J_max_3, Match_score_3, Max_value_3, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2} = Fun_5(lists:seq(0, (erlang:length(Score_4)) - 1), Gap_score_3, I_max, J_max, Match_score_3, Max_value, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2),
        I_3 = I_max_3,
        J_3 = J_max_3,
        Align1 = "",
        Align2 = "",
        Gap_penalty = score_function("-", "-", Match_score_3, Mismatch_score_3, Gap_score_3),
        case ((I_3 == 0) orelse (J_3 == 0)) of
        true -> throw({return, ""});
        _ -> ok
    end,
        Fun_7 = fun Fun_7_loop(Align1, Align2, Gap_penalty, Gap_score_3, I_3, I_max_3, J_3, J_max_3, Match_score_3, Max_value_3, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2) ->
    case ((I_3 > 0) andalso (J_3 > 0)) of
        true ->
            Qc_2 = string:substr(Q_2, (I_3 - 1) + 1, (I_3 - (I_3 - 1))),
            Sc_2 = string:substr(S_2, (J_3 - 1) + 1, (J_3 - (J_3 - 1))),
            case ((case erlang:is_map((case erlang:is_map(Score_4) of true -> maps:get(I_3, Score_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Score_4) + I_3 + 1, Score_4); _ -> lists:nth(I_3 + 1, Score_4) end end)) of true -> maps:get(J_3, (case erlang:is_map(Score_4) of true -> maps:get(I_3, Score_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Score_4) + I_3 + 1, Score_4); _ -> lists:nth(I_3 + 1, Score_4) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Score_4) of true -> maps:get(I_3, Score_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Score_4) + I_3 + 1, Score_4); _ -> lists:nth(I_3 + 1, Score_4) end end)) + J_3 + 1, (case erlang:is_map(Score_4) of true -> maps:get(I_3, Score_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Score_4) + I_3 + 1, Score_4); _ -> lists:nth(I_3 + 1, Score_4) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Score_4) of true -> maps:get(I_3, Score_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Score_4) + I_3 + 1, Score_4); _ -> lists:nth(I_3 + 1, Score_4) end end)) end end) == ((case erlang:is_map((case erlang:is_map(Score_4) of true -> maps:get((I_3 - 1), Score_4, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Score_4) + (I_3 - 1) + 1, Score_4); _ -> lists:nth((I_3 - 1) + 1, Score_4) end end)) of true -> maps:get((J_3 - 1), (case erlang:is_map(Score_4) of true -> maps:get((I_3 - 1), Score_4, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Score_4) + (I_3 - 1) + 1, Score_4); _ -> lists:nth((I_3 - 1) + 1, Score_4) end end), nil); _ -> case (J_3 - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Score_4) of true -> maps:get((I_3 - 1), Score_4, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Score_4) + (I_3 - 1) + 1, Score_4); _ -> lists:nth((I_3 - 1) + 1, Score_4) end end)) + (J_3 - 1) + 1, (case erlang:is_map(Score_4) of true -> maps:get((I_3 - 1), Score_4, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Score_4) + (I_3 - 1) + 1, Score_4); _ -> lists:nth((I_3 - 1) + 1, Score_4) end end)); _ -> lists:nth((J_3 - 1) + 1, (case erlang:is_map(Score_4) of true -> maps:get((I_3 - 1), Score_4, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Score_4) + (I_3 - 1) + 1, Score_4); _ -> lists:nth((I_3 - 1) + 1, Score_4) end end)) end end) + score_function(Qc_2, Sc_2, Match_score_3, Mismatch_score_3, Gap_score_3))) of
        true -> Align1_2 = (Qc_2 ++ Align1),
            Align2_2 = (Sc_2 ++ Align2),
            I_4 = (I_3 - 1),
            J_4 = (J_3 - 1),
            Align1_6 = Align1_2,
            Align2_6 = Align2_2,
            I_7 = I_4,
            J_7 = J_4;
        _ -> case ((case erlang:is_map((case erlang:is_map(Score_4) of true -> maps:get(I_3, Score_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Score_4) + I_3 + 1, Score_4); _ -> lists:nth(I_3 + 1, Score_4) end end)) of true -> maps:get(J_3, (case erlang:is_map(Score_4) of true -> maps:get(I_3, Score_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Score_4) + I_3 + 1, Score_4); _ -> lists:nth(I_3 + 1, Score_4) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Score_4) of true -> maps:get(I_3, Score_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Score_4) + I_3 + 1, Score_4); _ -> lists:nth(I_3 + 1, Score_4) end end)) + J_3 + 1, (case erlang:is_map(Score_4) of true -> maps:get(I_3, Score_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Score_4) + I_3 + 1, Score_4); _ -> lists:nth(I_3 + 1, Score_4) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Score_4) of true -> maps:get(I_3, Score_4, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Score_4) + I_3 + 1, Score_4); _ -> lists:nth(I_3 + 1, Score_4) end end)) end end) == ((case erlang:is_map((case erlang:is_map(Score_4) of true -> maps:get((I_3 - 1), Score_4, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Score_4) + (I_3 - 1) + 1, Score_4); _ -> lists:nth((I_3 - 1) + 1, Score_4) end end)) of true -> maps:get(J_3, (case erlang:is_map(Score_4) of true -> maps:get((I_3 - 1), Score_4, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Score_4) + (I_3 - 1) + 1, Score_4); _ -> lists:nth((I_3 - 1) + 1, Score_4) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Score_4) of true -> maps:get((I_3 - 1), Score_4, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Score_4) + (I_3 - 1) + 1, Score_4); _ -> lists:nth((I_3 - 1) + 1, Score_4) end end)) + J_3 + 1, (case erlang:is_map(Score_4) of true -> maps:get((I_3 - 1), Score_4, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Score_4) + (I_3 - 1) + 1, Score_4); _ -> lists:nth((I_3 - 1) + 1, Score_4) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Score_4) of true -> maps:get((I_3 - 1), Score_4, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Score_4) + (I_3 - 1) + 1, Score_4); _ -> lists:nth((I_3 - 1) + 1, Score_4) end end)) end end) + Gap_penalty)) of
        true -> Align1_3 = (Qc_2 ++ Align1),
            Align2_3 = ("-" ++ Align2),
            I_5 = (I_3 - 1),
            Align1_5 = Align1_3,
            Align2_5 = Align2_3,
            I_6 = I_5,
            J_6 = J_3;
        _ -> Align1_4 = ("-" ++ Align1),
            Align2_4 = (Sc_2 ++ Align2),
            J_5 = (J_3 - 1),
            Align1_5 = Align1_4,
            Align2_5 = Align2_4,
            I_6 = I_3,
            J_6 = J_5
    end,
            Align1_6 = Align1_5,
            Align2_6 = Align2_5,
            I_7 = I_6,
            J_7 = J_6
    end,
            Fun_7_loop(Align1_6, Align2_6, Gap_penalty, Gap_score_3, I_7, I_max_3, J_7, J_max_3, Match_score_3, Max_value_3, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2);
        _ -> {Align1, Align2, Gap_penalty, Gap_score_3, I_3, I_max_3, J_3, J_max_3, Match_score_3, Max_value_3, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2}
    end
end,
{Align1_6, Align2_6, Gap_penalty, Gap_score_3, I_7, I_max_3, J_7, J_max_3, Match_score_3, Max_value_3, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2} = Fun_7(Align1, Align2, Gap_penalty, Gap_score_3, I_3, I_max_3, J_3, J_max_3, Match_score_3, Max_value_3, Mismatch_score_3, Q_2, Query_2, S_2, Score_4, Subject_2),
        ((Align1_6 ++ "\n") ++ Align2_6)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('query', "HEAGAWGHEE"),
    erlang:put('subject', "PAWHEAE"),
    erlang:put('score', smith_waterman("HEAGAWGHEE", "PAWHEAE", 1, -1, -2)),
    io:format("~ts~n", [mochi_repr(traceback(erlang:get('score'), "HEAGAWGHEE", "PAWHEAE", 1, -1, -2))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
