#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_list/2, min_int/2, min_steps_to_one/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_list(Len, Value) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, Len, Value) ->
    case (I < Len) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [Value]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, I_2, Len, Value);
        _ -> {Arr, I, Len, Value}
    end
end,
{Arr_2, I_2, Len, Value} = Fun(Arr, I, Len, Value),
        Arr_2
    catch {return, Ret} -> Ret end.

min_int(A, B) ->
    try
        (case (A < B) of
    true -> A;
    _ -> B
end)
    catch {return, Ret} -> Ret end.

min_steps_to_one(Number) ->
    try
        case (Number =< 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Table = make_list((Number + 1), (Number + 1)),
        Table_2 = lists:sublist(Table, 1) ++ [0] ++ lists:nthtail(1 + 1, Table),
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(I_3, Number, Table_2) ->
    case (I_3 < Number) of
        true ->
            Table_3 = lists:sublist(Table_2, (I_3 + 1)) ++ [min_int((case erlang:is_map(Table_2) of true -> maps:get((I_3 + 1), Table_2, nil); _ -> case (I_3 + 1) < 0 of true -> lists:nth(erlang:length(Table_2) + (I_3 + 1) + 1, Table_2); _ -> lists:nth((I_3 + 1) + 1, Table_2) end end), ((case erlang:is_map(Table_2) of true -> maps:get(I_3, Table_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Table_2) + I_3 + 1, Table_2); _ -> lists:nth(I_3 + 1, Table_2) end end) + 1))] ++ lists:nthtail((I_3 + 1) + 1, Table_2),
            case ((I_3 * 2) =< Number) of
        true -> Table_4 = lists:sublist(Table_3, (I_3 * 2)) ++ [min_int((case erlang:is_map(Table_3) of true -> maps:get((I_3 * 2), Table_3, nil); _ -> case (I_3 * 2) < 0 of true -> lists:nth(erlang:length(Table_3) + (I_3 * 2) + 1, Table_3); _ -> lists:nth((I_3 * 2) + 1, Table_3) end end), ((case erlang:is_map(Table_3) of true -> maps:get(I_3, Table_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Table_3) + I_3 + 1, Table_3); _ -> lists:nth(I_3 + 1, Table_3) end end) + 1))] ++ lists:nthtail((I_3 * 2) + 1, Table_3),
            Table_5 = Table_4;
        _ -> Table_5 = Table_3
    end,
            case ((I_3 * 3) =< Number) of
        true -> Table_6 = lists:sublist(Table_5, (I_3 * 3)) ++ [min_int((case erlang:is_map(Table_5) of true -> maps:get((I_3 * 3), Table_5, nil); _ -> case (I_3 * 3) < 0 of true -> lists:nth(erlang:length(Table_5) + (I_3 * 3) + 1, Table_5); _ -> lists:nth((I_3 * 3) + 1, Table_5) end end), ((case erlang:is_map(Table_5) of true -> maps:get(I_3, Table_5, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Table_5) + I_3 + 1, Table_5); _ -> lists:nth(I_3 + 1, Table_5) end end) + 1))] ++ lists:nthtail((I_3 * 3) + 1, Table_5),
            Table_7 = Table_6;
        _ -> Table_7 = Table_5
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Number, Table_7);
        _ -> {I_3, Number, Table_2}
    end
end,
{I_4, Number, Table_7} = Fun_2(I_3, Number, Table_2),
        (case erlang:is_map(Table_7) of true -> maps:get(Number, Table_7, nil); _ -> case Number < 0 of true -> lists:nth(erlang:length(Table_7) + Number + 1, Table_7); _ -> lists:nth(Number + 1, Table_7) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(min_steps_to_one(10))]),
    io:format("~ts~n", [mochi_str(min_steps_to_one(15))]),
    io:format("~ts~n", [mochi_str(min_steps_to_one(6))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
