#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, climb_stairs/1]).

% Generated by Mochi transpiler v0.10.62 (375502c276) on 2025-08-09 15:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

climb_stairs(Number_of_steps) ->
    try
        case (Number_of_steps =< 0) of
        true -> erlang:error({panic, "number_of_steps needs to be positive"});
        _ -> ok
    end,
        case (Number_of_steps == 1) of
        true -> throw({return, 1});
        _ -> ok
    end,
        Previous = 1,
        Current = 1,
        I = 0,
        Fun = fun Fun_loop(Current, I, Number_of_steps, Previous) ->
    case (I < (Number_of_steps - 1)) of
        true ->
            Next = (Current + Previous),
            Previous_2 = Current,
            Current_2 = Next,
            I_2 = (I + 1),
            Fun_loop(Current_2, I_2, Number_of_steps, Previous_2);
        _ -> {Current, I, Number_of_steps, Previous}
    end
end,
{Current_2, I_2, Number_of_steps, Previous_2} = Fun(Current, I, Number_of_steps, Previous),
        Current_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(climb_stairs(3))]),
    io:format("~ts~n", [mochi_repr(climb_stairs(1))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
