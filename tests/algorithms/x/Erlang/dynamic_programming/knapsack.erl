#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, max_int/2, init_f/2, mf_knapsack/4, create_matrix/2, knapsack/4, construct_solution/5, knapsack_with_example_solution/3, format_set/1]).

% Generated by Mochi transpiler v0.10.63 (a8c4f78e65) on 2025-08-11 15:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

max_int(A, B) ->
    try
        case (A > B) of
        true -> throw({return, A});
        _ -> throw({return, B})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

init_f(N, W) ->
    try
        Table = nil,
        I = 0,
        Fun_2 = fun Fun_2_loop(I, N, Table, W) ->
    case (I =< N) of
        true ->
            Row = nil,
            J = 0,
            Fun = fun Fun_loop(I, J, N, Row, Table, W) ->
    case (J =< W) of
        true ->
            case ((I == 0) orelse (J == 0)) of
        true -> Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            Row_4 = Row_2;
        _ -> Row_3 = lists:append((case Row of nil -> []; _ -> Row end), [-1]),
            Row_4 = Row_3
    end,
            J_2 = (J + 1),
            Fun_loop(I, J_2, N, Row_4, Table, W);
        _ -> {I, J, N, Row, Table, W}
    end
end,
{I, J_2, N, Row_4, Table, W} = Fun(I, J, N, Row, Table, W),
            Table_2 = lists:append((case Table of nil -> []; _ -> Table end), [Row_4]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, N, Table_2, W);
        _ -> {I, N, Table, W}
    end
end,
{I_2, N, Table_2, W} = Fun_2(I, N, Table, W),
        Table_2
    catch {return, RetCatch} -> RetCatch end.

mf_knapsack(I_3, Wt, Val, J_3) ->
    try
        case ((case erlang:is_map((case erlang:is_map(erlang:get('f')) of true -> maps:get(I_3, erlang:get('f'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('f')) + I_3 + 1, erlang:get('f')); _ -> mochi_nth(I_3 + 1, erlang:get('f')) end end)) of true -> maps:get(J_3, (case erlang:is_map(erlang:get('f')) of true -> maps:get(I_3, erlang:get('f'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('f')) + I_3 + 1, erlang:get('f')); _ -> mochi_nth(I_3 + 1, erlang:get('f')) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('f')) of true -> maps:get(I_3, erlang:get('f'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('f')) + I_3 + 1, erlang:get('f')); _ -> mochi_nth(I_3 + 1, erlang:get('f')) end end)) + J_3 + 1, (case erlang:is_map(erlang:get('f')) of true -> maps:get(I_3, erlang:get('f'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('f')) + I_3 + 1, erlang:get('f')); _ -> mochi_nth(I_3 + 1, erlang:get('f')) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(erlang:get('f')) of true -> maps:get(I_3, erlang:get('f'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('f')) + I_3 + 1, erlang:get('f')); _ -> mochi_nth(I_3 + 1, erlang:get('f')) end end)) end end) < 0) of
        true -> case (J_3 < (case erlang:is_map(Wt) of true -> maps:get((I_3 - 1), Wt, nil); _ -> case (I_3 - 1) < 0 of true -> mochi_nth(erlang:length(Wt) + (I_3 - 1) + 1, Wt); _ -> mochi_nth((I_3 - 1) + 1, Wt) end end)) of
        true -> F_tmp = lists:sublist(erlang:get('f'), I_3) ++ [lists:sublist(lists:nth(I_3 + 1, erlang:get('f')), J_3) ++ [mf_knapsack((I_3 - 1), Wt, Val, J_3)] ++ lists:nthtail(J_3 + 1, lists:nth(I_3 + 1, erlang:get('f')))] ++ lists:nthtail(I_3 + 1, erlang:get('f')),
            erlang:put('f', F_tmp),
            F_tmp_3 = F_tmp,
            With_item_2 = nil,
            Without_item_2 = nil;
        _ -> Without_item = mf_knapsack((I_3 - 1), Wt, Val, J_3),
            With_item = (mf_knapsack((I_3 - 1), Wt, Val, (J_3 - (case erlang:is_map(Wt) of true -> maps:get((I_3 - 1), Wt, nil); _ -> case (I_3 - 1) < 0 of true -> mochi_nth(erlang:length(Wt) + (I_3 - 1) + 1, Wt); _ -> mochi_nth((I_3 - 1) + 1, Wt) end end))) + (case erlang:is_map(Val) of true -> maps:get((I_3 - 1), Val, nil); _ -> case (I_3 - 1) < 0 of true -> mochi_nth(erlang:length(Val) + (I_3 - 1) + 1, Val); _ -> mochi_nth((I_3 - 1) + 1, Val) end end)),
            F_tmp_2 = lists:sublist(erlang:get('f'), I_3) ++ [lists:sublist(lists:nth(I_3 + 1, erlang:get('f')), J_3) ++ [max_int(Without_item, With_item)] ++ lists:nthtail(J_3 + 1, lists:nth(I_3 + 1, erlang:get('f')))] ++ lists:nthtail(I_3 + 1, erlang:get('f')),
            erlang:put('f', F_tmp_2),
            F_tmp_3 = F_tmp_2,
            With_item_2 = With_item,
            Without_item_2 = Without_item
    end,
            F_tmp_4 = F_tmp_3,
            With_item_3 = With_item_2,
            Without_item_3 = Without_item_2;
        _ -> F_tmp_4 = nil,
            With_item_3 = nil,
            Without_item_3 = nil
    end,
        (case erlang:is_map((case erlang:is_map(erlang:get('f')) of true -> maps:get(I_3, erlang:get('f'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('f')) + I_3 + 1, erlang:get('f')); _ -> mochi_nth(I_3 + 1, erlang:get('f')) end end)) of true -> maps:get(J_3, (case erlang:is_map(erlang:get('f')) of true -> maps:get(I_3, erlang:get('f'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('f')) + I_3 + 1, erlang:get('f')); _ -> mochi_nth(I_3 + 1, erlang:get('f')) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('f')) of true -> maps:get(I_3, erlang:get('f'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('f')) + I_3 + 1, erlang:get('f')); _ -> mochi_nth(I_3 + 1, erlang:get('f')) end end)) + J_3 + 1, (case erlang:is_map(erlang:get('f')) of true -> maps:get(I_3, erlang:get('f'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('f')) + I_3 + 1, erlang:get('f')); _ -> mochi_nth(I_3 + 1, erlang:get('f')) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(erlang:get('f')) of true -> maps:get(I_3, erlang:get('f'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('f')) + I_3 + 1, erlang:get('f')); _ -> mochi_nth(I_3 + 1, erlang:get('f')) end end)) end end)
    catch {return, RetCatch} -> RetCatch end.

create_matrix(Rows, Cols) ->
    try
        Matrix = nil,
        I_4 = 0,
        Fun_4 = fun Fun_4_loop(Cols, I_4, Matrix, Rows) ->
    case (I_4 =< Rows) of
        true ->
            Row_5 = nil,
            J_4 = 0,
            Fun_3 = fun Fun_3_loop(Cols, I_4, J_4, Matrix, Row_5, Rows) ->
    case (J_4 =< Cols) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [0]),
            J_5 = (J_4 + 1),
            Fun_3_loop(Cols, I_4, J_5, Matrix, Row_6, Rows);
        _ -> {Cols, I_4, J_4, Matrix, Row_5, Rows}
    end
end,
{Cols, I_4, J_5, Matrix, Row_6, Rows} = Fun_3(Cols, I_4, J_4, Matrix, Row_5, Rows),
            Matrix_2 = lists:append((case Matrix of nil -> []; _ -> Matrix end), [Row_6]),
            I_5 = (I_4 + 1),
            Fun_4_loop(Cols, I_5, Matrix_2, Rows);
        _ -> {Cols, I_4, Matrix, Rows}
    end
end,
{Cols, I_5, Matrix_2, Rows} = Fun_4(Cols, I_4, Matrix, Rows),
        Matrix_2
    catch {return, RetCatch} -> RetCatch end.

knapsack(W_2, Wt_2, Val_2, N_2) ->
    try
        Dp = create_matrix(N_2, W_2),
        I_6 = 1,
        Fun_6 = fun Fun_6_loop(Dp, I_6, N_2, Val_2, W_2, Wt_2) ->
    case (I_6 =< N_2) of
        true ->
            W_ = 1,
            Fun_5 = fun Fun_5_loop(Dp, I_6, N_2, Val_2, W_2, W_, Wt_2) ->
    case (W_ =< W_2) of
        true ->
            case ((case erlang:is_map(Wt_2) of true -> maps:get((I_6 - 1), Wt_2, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Wt_2) + (I_6 - 1) + 1, Wt_2); _ -> mochi_nth((I_6 - 1) + 1, Wt_2) end end) =< W_) of
        true -> Include = ((case erlang:is_map(Val_2) of true -> maps:get((I_6 - 1), Val_2, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Val_2) + (I_6 - 1) + 1, Val_2); _ -> mochi_nth((I_6 - 1) + 1, Val_2) end end) + (case erlang:is_map((case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end)) of true -> maps:get((W_ - (case erlang:is_map(Wt_2) of true -> maps:get((I_6 - 1), Wt_2, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Wt_2) + (I_6 - 1) + 1, Wt_2); _ -> mochi_nth((I_6 - 1) + 1, Wt_2) end end)), (case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end), nil); _ -> case (W_ - (case erlang:is_map(Wt_2) of true -> maps:get((I_6 - 1), Wt_2, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Wt_2) + (I_6 - 1) + 1, Wt_2); _ -> mochi_nth((I_6 - 1) + 1, Wt_2) end end)) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end)) + (W_ - (case erlang:is_map(Wt_2) of true -> maps:get((I_6 - 1), Wt_2, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Wt_2) + (I_6 - 1) + 1, Wt_2); _ -> mochi_nth((I_6 - 1) + 1, Wt_2) end end)) + 1, (case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end)); _ -> mochi_nth((W_ - (case erlang:is_map(Wt_2) of true -> maps:get((I_6 - 1), Wt_2, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Wt_2) + (I_6 - 1) + 1, Wt_2); _ -> mochi_nth((I_6 - 1) + 1, Wt_2) end end)) + 1, (case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end)) end end)),
            Exclude = (case erlang:is_map((case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end)) of true -> maps:get(W_, (case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end), nil); _ -> case W_ < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end)) + W_ + 1, (case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end)); _ -> mochi_nth(W_ + 1, (case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end)) end end),
            Dp_2 = lists:sublist(Dp, I_6) ++ [lists:sublist(lists:nth(I_6 + 1, Dp), W_) ++ [max_int(Include, Exclude)] ++ lists:nthtail(W_ + 1, lists:nth(I_6 + 1, Dp))] ++ lists:nthtail(I_6 + 1, Dp),
            Dp_4 = Dp_2,
            Exclude_2 = Exclude,
            Include_2 = Include;
        _ -> Dp_3 = lists:sublist(Dp, I_6) ++ [lists:sublist(lists:nth(I_6 + 1, Dp), W_) ++ [(case erlang:is_map((case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end)) of true -> maps:get(W_, (case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end), nil); _ -> case W_ < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end)) + W_ + 1, (case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end)); _ -> mochi_nth(W_ + 1, (case erlang:is_map(Dp) of true -> maps:get((I_6 - 1), Dp, nil); _ -> case (I_6 - 1) < 0 of true -> mochi_nth(erlang:length(Dp) + (I_6 - 1) + 1, Dp); _ -> mochi_nth((I_6 - 1) + 1, Dp) end end)) end end)] ++ lists:nthtail(W_ + 1, lists:nth(I_6 + 1, Dp))] ++ lists:nthtail(I_6 + 1, Dp),
            Dp_4 = Dp_3,
            Exclude_2 = nil,
            Include_2 = nil
    end,
            W__2 = (W_ + 1),
            Fun_5_loop(Dp_4, I_6, N_2, Val_2, W_2, W__2, Wt_2);
        _ -> {Dp, I_6, N_2, Val_2, W_2, W_, Wt_2}
    end
end,
{Dp_4, I_6, N_2, Val_2, W_2, W__2, Wt_2} = Fun_5(Dp, I_6, N_2, Val_2, W_2, W_, Wt_2),
            I_7 = (I_6 + 1),
            Fun_6_loop(Dp_4, I_7, N_2, Val_2, W_2, Wt_2);
        _ -> {Dp, I_6, N_2, Val_2, W_2, Wt_2}
    end
end,
{Dp_4, I_7, N_2, Val_2, W_2, Wt_2} = Fun_6(Dp, I_6, N_2, Val_2, W_2, Wt_2),
        Dp_4
    catch {return, RetCatch} -> RetCatch end.

construct_solution(Dp_5, Wt_3, I_8, J_6, Optimal_set) ->
    try
        case ((I_8 > 0) andalso (J_6 > 0)) of
        true -> case ((case erlang:is_map((case erlang:is_map(Dp_5) of true -> maps:get((I_8 - 1), Dp_5, nil); _ -> case (I_8 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_5) + (I_8 - 1) + 1, Dp_5); _ -> mochi_nth((I_8 - 1) + 1, Dp_5) end end)) of true -> maps:get(J_6, (case erlang:is_map(Dp_5) of true -> maps:get((I_8 - 1), Dp_5, nil); _ -> case (I_8 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_5) + (I_8 - 1) + 1, Dp_5); _ -> mochi_nth((I_8 - 1) + 1, Dp_5) end end), nil); _ -> case J_6 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_5) of true -> maps:get((I_8 - 1), Dp_5, nil); _ -> case (I_8 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_5) + (I_8 - 1) + 1, Dp_5); _ -> mochi_nth((I_8 - 1) + 1, Dp_5) end end)) + J_6 + 1, (case erlang:is_map(Dp_5) of true -> maps:get((I_8 - 1), Dp_5, nil); _ -> case (I_8 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_5) + (I_8 - 1) + 1, Dp_5); _ -> mochi_nth((I_8 - 1) + 1, Dp_5) end end)); _ -> mochi_nth(J_6 + 1, (case erlang:is_map(Dp_5) of true -> maps:get((I_8 - 1), Dp_5, nil); _ -> case (I_8 - 1) < 0 of true -> mochi_nth(erlang:length(Dp_5) + (I_8 - 1) + 1, Dp_5); _ -> mochi_nth((I_8 - 1) + 1, Dp_5) end end)) end end) == (case erlang:is_map((case erlang:is_map(Dp_5) of true -> maps:get(I_8, Dp_5, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Dp_5) + I_8 + 1, Dp_5); _ -> mochi_nth(I_8 + 1, Dp_5) end end)) of true -> maps:get(J_6, (case erlang:is_map(Dp_5) of true -> maps:get(I_8, Dp_5, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Dp_5) + I_8 + 1, Dp_5); _ -> mochi_nth(I_8 + 1, Dp_5) end end), nil); _ -> case J_6 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_5) of true -> maps:get(I_8, Dp_5, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Dp_5) + I_8 + 1, Dp_5); _ -> mochi_nth(I_8 + 1, Dp_5) end end)) + J_6 + 1, (case erlang:is_map(Dp_5) of true -> maps:get(I_8, Dp_5, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Dp_5) + I_8 + 1, Dp_5); _ -> mochi_nth(I_8 + 1, Dp_5) end end)); _ -> mochi_nth(J_6 + 1, (case erlang:is_map(Dp_5) of true -> maps:get(I_8, Dp_5, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Dp_5) + I_8 + 1, Dp_5); _ -> mochi_nth(I_8 + 1, Dp_5) end end)) end end)) of
        true -> throw({return, construct_solution(Dp_5, Wt_3, (I_8 - 1), J_6, Optimal_set)}),
            With_prev_2 = nil;
        _ -> With_prev = construct_solution(Dp_5, Wt_3, (I_8 - 1), (J_6 - (case erlang:is_map(Wt_3) of true -> maps:get((I_8 - 1), Wt_3, nil); _ -> case (I_8 - 1) < 0 of true -> mochi_nth(erlang:length(Wt_3) + (I_8 - 1) + 1, Wt_3); _ -> mochi_nth((I_8 - 1) + 1, Wt_3) end end)), Optimal_set),
            throw({return, lists:append((case With_prev of nil -> []; _ -> With_prev end), [I_8])}),
            With_prev_2 = With_prev
    end,
            With_prev_3 = With_prev_2;
        _ -> With_prev_3 = nil
    end,
        Optimal_set
    catch {return, RetCatch} -> RetCatch end.

knapsack_with_example_solution(W_3, Wt_4, Val_3) ->
    try
        Num_items = erlang:length(Wt_4),
        Dp_table = knapsack(W_3, Wt_4, Val_3, Num_items),
        Optimal_val = (case erlang:is_map((case erlang:is_map(Dp_table) of true -> maps:get(Num_items, Dp_table, nil); _ -> case Num_items < 0 of true -> mochi_nth(erlang:length(Dp_table) + Num_items + 1, Dp_table); _ -> mochi_nth(Num_items + 1, Dp_table) end end)) of true -> maps:get(W_3, (case erlang:is_map(Dp_table) of true -> maps:get(Num_items, Dp_table, nil); _ -> case Num_items < 0 of true -> mochi_nth(erlang:length(Dp_table) + Num_items + 1, Dp_table); _ -> mochi_nth(Num_items + 1, Dp_table) end end), nil); _ -> case W_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_table) of true -> maps:get(Num_items, Dp_table, nil); _ -> case Num_items < 0 of true -> mochi_nth(erlang:length(Dp_table) + Num_items + 1, Dp_table); _ -> mochi_nth(Num_items + 1, Dp_table) end end)) + W_3 + 1, (case erlang:is_map(Dp_table) of true -> maps:get(Num_items, Dp_table, nil); _ -> case Num_items < 0 of true -> mochi_nth(erlang:length(Dp_table) + Num_items + 1, Dp_table); _ -> mochi_nth(Num_items + 1, Dp_table) end end)); _ -> mochi_nth(W_3 + 1, (case erlang:is_map(Dp_table) of true -> maps:get(Num_items, Dp_table, nil); _ -> case Num_items < 0 of true -> mochi_nth(erlang:length(Dp_table) + Num_items + 1, Dp_table); _ -> mochi_nth(Num_items + 1, Dp_table) end end)) end end),
        Subset = construct_solution(Dp_table, Wt_4, Num_items, W_3, []),
        #{"value" => Optimal_val, "subset" => Subset}
    catch {return, RetCatch} -> RetCatch end.

format_set(Xs) ->
    try
        Res = "{",
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(I_9, Res, Xs) ->
    case (I_9 < erlang:length(Xs)) of
        true ->
            Res_2 = (Res ++ mochi_str((case erlang:is_map(Xs) of true -> maps:get(I_9, Xs, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Xs) + I_9 + 1, Xs); _ -> mochi_nth(I_9 + 1, Xs) end end))),
            case ((I_9 + 1) < erlang:length(Xs)) of
        true -> Res_3 = (Res_2 ++ ", "),
            Res_4 = Res_3;
        _ -> Res_4 = Res_2
    end,
            I_10 = (I_9 + 1),
            Fun_7_loop(I_10, Res_4, Xs);
        _ -> {I_9, Res, Xs}
    end
end,
{I_10, Res_4, Xs} = Fun_7(I_9, Res, Xs),
        Res_5 = (Res_4 ++ "}"),
        Res_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('f', nil),
    erlang:put('val_list', [3, 2, 4, 4]),
    erlang:put('wt_list', [4, 3, 2, 3]),
    erlang:put('n', 4),
    erlang:put('w_cap', 6),
    erlang:put('f', init_f(4, 6)),
    erlang:put('dp_table', knapsack(6, erlang:get('wt_list'), erlang:get('val_list'), 4)),
    erlang:put('optimal_solution', (case erlang:is_map((case erlang:is_map(erlang:get('dp_table')) of true -> maps:get(4, erlang:get('dp_table'), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(erlang:get('dp_table')) + 4 + 1, erlang:get('dp_table')); _ -> mochi_nth(4 + 1, erlang:get('dp_table')) end end)) of true -> maps:get(6, (case erlang:is_map(erlang:get('dp_table')) of true -> maps:get(4, erlang:get('dp_table'), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(erlang:get('dp_table')) + 4 + 1, erlang:get('dp_table')); _ -> mochi_nth(4 + 1, erlang:get('dp_table')) end end), nil); _ -> case 6 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('dp_table')) of true -> maps:get(4, erlang:get('dp_table'), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(erlang:get('dp_table')) + 4 + 1, erlang:get('dp_table')); _ -> mochi_nth(4 + 1, erlang:get('dp_table')) end end)) + 6 + 1, (case erlang:is_map(erlang:get('dp_table')) of true -> maps:get(4, erlang:get('dp_table'), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(erlang:get('dp_table')) + 4 + 1, erlang:get('dp_table')); _ -> mochi_nth(4 + 1, erlang:get('dp_table')) end end)); _ -> mochi_nth(6 + 1, (case erlang:is_map(erlang:get('dp_table')) of true -> maps:get(4, erlang:get('dp_table'), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(erlang:get('dp_table')) + 4 + 1, erlang:get('dp_table')); _ -> mochi_nth(4 + 1, erlang:get('dp_table')) end end)) end end)),
    io:format("~ts~n", [mochi_repr(erlang:get('optimal_solution'))]),
    io:format("~ts~n", [mochi_repr(mf_knapsack(4, erlang:get('wt_list'), erlang:get('val_list'), 6))]),
    erlang:put('example', knapsack_with_example_solution(6, erlang:get('wt_list'), erlang:get('val_list'))),
    io:format("~ts~n", [mochi_repr(("optimal_value = " ++ mochi_str(maps:get("value", erlang:get('example'), nil))))]),
    io:format("~ts~n", [mochi_repr(("An optimal subset corresponding to the optimal value " ++ format_set(maps:get("subset", erlang:get('example'), nil))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
