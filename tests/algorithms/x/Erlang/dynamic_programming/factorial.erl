#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, factorial/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

factorial(Num) ->
    try
        case (Num < 0) of
        true -> io:format("~ts~n", [mochi_repr("Number should not be negative.")]),
            throw({return, 0});
        _ -> ok
    end,
        M = erlang:get('memo'),
        I = erlang:length(M),
        Fun = fun Fun_loop(I, M, Num) ->
    case (I =< Num) of
        true ->
            M_2 = lists:append((case M of nil -> []; _ -> M end), [(I * (case erlang:is_map(M) of true -> maps:get((I - 1), M, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(M) + (I - 1) + 1, M); _ -> lists:nth((I - 1) + 1, M) end end))]),
            I_2 = (I + 1),
            Fun_loop(I_2, M_2, Num);
        _ -> {I, M, Num}
    end
end,
{I_2, M_2, Num} = Fun(I, M, Num),
        erlang:put('memo', M_2),
        (case erlang:is_map(M_2) of true -> maps:get(Num, M_2, nil); _ -> case Num < 0 of true -> lists:nth(erlang:length(M_2) + Num + 1, M_2); _ -> lists:nth(Num + 1, M_2) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('memo', [1, 1]),
    io:format("~ts~n", [mochi_str(factorial(7))]),
    factorial(-1),
    erlang:put('results', []),
    Fun_2 = fun Fun_2_loop(List) ->
    case List of
        [] -> {};
        [I_3|I_3_rest] ->
            erlang:put('results', lists:append((case erlang:get('results') of nil -> []; _ -> erlang:get('results') end), [factorial(I_3)])),
            Fun_2_loop(I_3_rest);
        _ -> {}
    end
end,
{} = Fun_2(lists:seq(0, (10) - 1)),
    io:format("~ts~n", [mochi_str(erlang:get('results'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
