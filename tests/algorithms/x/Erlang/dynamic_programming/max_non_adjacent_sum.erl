#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, maximum_non_adjacent_sum/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

maximum_non_adjacent_sum(Nums) ->
    try
        case (erlang:length(Nums) == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Max_including = (case erlang:is_map(Nums) of true -> maps:get(0, Nums, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Nums) + 0 + 1, Nums); _ -> lists:nth(0 + 1, Nums) end end),
        Max_excluding = 0,
        I = 1,
        Fun = fun Fun_loop(I, Max_excluding, Max_including, Nums) ->
    case (I < erlang:length(Nums)) of
        true ->
            Num = (case erlang:is_map(Nums) of true -> maps:get(I, Nums, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Nums) + I + 1, Nums); _ -> lists:nth(I + 1, Nums) end end),
            New_including = (Max_excluding + Num),
            New_excluding = (case (Max_including > Max_excluding) of
    true -> Max_including;
    _ -> Max_excluding
end),
            Max_including_2 = New_including,
            Max_excluding_2 = New_excluding,
            I_2 = (I + 1),
            Fun_loop(I_2, Max_excluding_2, Max_including_2, Nums);
        _ -> {I, Max_excluding, Max_including, Nums}
    end
end,
{I_2, Max_excluding_2, Max_including_2, Nums} = Fun(I, Max_excluding, Max_including, Nums),
        case (Max_including_2 > Max_excluding_2) of
        true -> throw({return, Max_including_2});
        _ -> ok
    end,
        Max_excluding_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(maximum_non_adjacent_sum([1, 2, 3]))]),
    io:format("~ts~n", [mochi_str(maximum_non_adjacent_sum([1, 5, 3, 7, 2, 2, 6]))]),
    io:format("~ts~n", [mochi_str(maximum_non_adjacent_sum([-1, -5, -3, -7, -2, -2, -6]))]),
    io:format("~ts~n", [mochi_str(maximum_non_adjacent_sum([499, 500, -3, -7, -2, -2, -6]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
