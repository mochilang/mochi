#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, max_subarray_sum/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

max_subarray_sum(Nums, Allow_empty) ->
    try
        case (erlang:length(Nums) == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Max_sum = 0,
        Curr_sum = 0,
        case Allow_empty of
        true -> Max_sum_2 = 0,
            Curr_sum_2 = 0,
            I = 0,
            Fun = fun Fun_loop(Allow_empty, Curr_sum_2, I, Max_sum_2, Nums) ->
    case (I < erlang:length(Nums)) of
        true ->
            Num = (case erlang:is_map(Nums) of true -> maps:get(I, Nums, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Nums) + I + 1, Nums); _ -> lists:nth(I + 1, Nums) end end),
            Temp = (Curr_sum_2 + Num),
            Curr_sum_3 = (case (Temp > 0) of
    true -> Temp;
    _ -> 0
end),
            case (Curr_sum_3 > Max_sum_2) of
        true -> Max_sum_3 = Curr_sum_3,
            Max_sum_4 = Max_sum_3;
        _ -> Max_sum_4 = Max_sum_2
    end,
            I_2 = (I + 1),
            Fun_loop(Allow_empty, Curr_sum_3, I_2, Max_sum_4, Nums);
        _ -> {Allow_empty, Curr_sum_2, I, Max_sum_2, Nums}
    end
end,
{Allow_empty, Curr_sum_3, I_2, Max_sum_4, Nums} = Fun(Allow_empty, Curr_sum_2, I, Max_sum_2, Nums),
            Curr_sum_6 = Curr_sum_3,
            Fun_3 = Fun,
            I_5 = I_2,
            Max_sum_8 = Max_sum_4;
        _ -> Max_sum_5 = (case erlang:is_map(Nums) of true -> maps:get(0, Nums, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Nums) + 0 + 1, Nums); _ -> lists:nth(0 + 1, Nums) end end),
            Curr_sum_4 = (case erlang:is_map(Nums) of true -> maps:get(0, Nums, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Nums) + 0 + 1, Nums); _ -> lists:nth(0 + 1, Nums) end end),
            I_3 = 1,
            Fun_2 = fun Fun_2_loop(Allow_empty, Curr_sum_4, I_3, Max_sum_5, Nums) ->
    case (I_3 < erlang:length(Nums)) of
        true ->
            Num_2 = (case erlang:is_map(Nums) of true -> maps:get(I_3, Nums, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Nums) + I_3 + 1, Nums); _ -> lists:nth(I_3 + 1, Nums) end end),
            Temp_2 = (Curr_sum_4 + Num_2),
            Curr_sum_5 = (case (Temp_2 > Num_2) of
    true -> Temp_2;
    _ -> Num_2
end),
            case (Curr_sum_5 > Max_sum_5) of
        true -> Max_sum_6 = Curr_sum_5,
            Max_sum_7 = Max_sum_6;
        _ -> Max_sum_7 = Max_sum_5
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Allow_empty, Curr_sum_5, I_4, Max_sum_7, Nums);
        _ -> {Allow_empty, Curr_sum_4, I_3, Max_sum_5, Nums}
    end
end,
{Allow_empty, Curr_sum_5, I_4, Max_sum_7, Nums} = Fun_2(Allow_empty, Curr_sum_4, I_3, Max_sum_5, Nums),
            Curr_sum_6 = Curr_sum_5,
            Fun_3 = Fun_2,
            I_5 = I_4,
            Max_sum_8 = Max_sum_7
    end,
        Max_sum_8
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(max_subarray_sum([2, 8, 9], false))]),
    io:format("~ts~n", [mochi_str(max_subarray_sum([0, 0], false))]),
    io:format("~ts~n", [mochi_str(max_subarray_sum([-1, 0, 1], false))]),
    io:format("~ts~n", [mochi_str(max_subarray_sum([1, 2, 3, 4, -2], false))]),
    io:format("~ts~n", [mochi_str(max_subarray_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], false))]),
    io:format("~ts~n", [mochi_str(max_subarray_sum([2, 3, -9, 8, -2], false))]),
    io:format("~ts~n", [mochi_str(max_subarray_sum([-2, -3, -1, -4, -6], false))]),
    io:format("~ts~n", [mochi_str(max_subarray_sum([-2, -3, -1, -4, -6], true))]),
    erlang:put('empty', []),
    io:format("~ts~n", [mochi_str(max_subarray_sum(erlang:get('empty'), false))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
