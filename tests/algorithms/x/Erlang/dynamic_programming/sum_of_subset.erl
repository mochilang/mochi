#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, create_bool_matrix/2, is_sum_subset/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

create_bool_matrix(Rows, Cols) ->
    try
        Matrix = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Cols, I, Matrix, Rows) ->
    case (I =< Rows) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(Cols, I, J, Matrix, Row, Rows) ->
    case (J =< Cols) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [false]),
            J_2 = (J + 1),
            Fun_loop(Cols, I, J_2, Matrix, Row_2, Rows);
        _ -> {Cols, I, J, Matrix, Row, Rows}
    end
end,
{Cols, I, J_2, Matrix, Row_2, Rows} = Fun(Cols, I, J, Matrix, Row, Rows),
            Matrix_2 = lists:append((case Matrix of nil -> []; _ -> Matrix end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Cols, I_2, Matrix_2, Rows);
        _ -> {Cols, I, Matrix, Rows}
    end
end,
{Cols, I_2, Matrix_2, Rows} = Fun_2(Cols, I, Matrix, Rows),
        Matrix_2
    catch {return, Ret} -> Ret end.

is_sum_subset(Arr, Required_sum) ->
    try
        Arr_len = erlang:length(Arr),
        Subset = create_bool_matrix(Arr_len, Required_sum),
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Arr, Arr_len, I_3, Required_sum, Subset) ->
    case (I_3 =< Arr_len) of
        true ->
            Subset_2 = lists:sublist(Subset, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Subset), 0) ++ [true] ++ lists:nthtail(0 + 1, lists:nth(I_3 + 1, Subset))] ++ lists:nthtail(I_3 + 1, Subset),
            I_4 = (I_3 + 1),
            Fun_3_loop(Arr, Arr_len, I_4, Required_sum, Subset_2);
        _ -> {Arr, Arr_len, I_3, Required_sum, Subset}
    end
end,
{Arr, Arr_len, I_4, Required_sum, Subset_2} = Fun_3(Arr, Arr_len, I_3, Required_sum, Subset),
        J_3 = 1,
        Fun_4 = fun Fun_4_loop(Arr, Arr_len, I_4, J_3, Required_sum, Subset_2) ->
    case (J_3 =< Required_sum) of
        true ->
            Subset_3 = lists:sublist(Subset_2, 0) ++ [lists:sublist(lists:nth(0 + 1, Subset_2), J_3) ++ [false] ++ lists:nthtail(J_3 + 1, lists:nth(0 + 1, Subset_2))] ++ lists:nthtail(0 + 1, Subset_2),
            J_4 = (J_3 + 1),
            Fun_4_loop(Arr, Arr_len, I_4, J_4, Required_sum, Subset_3);
        _ -> {Arr, Arr_len, I_4, J_3, Required_sum, Subset_2}
    end
end,
{Arr, Arr_len, I_4, J_4, Required_sum, Subset_3} = Fun_4(Arr, Arr_len, I_4, J_3, Required_sum, Subset_2),
        I_5 = 1,
        Fun_6 = fun Fun_6_loop(Arr, Arr_len, I_5, J_4, Required_sum, Subset_3) ->
    case (I_5 =< Arr_len) of
        true ->
            J_5 = 1,
            Fun_5 = fun Fun_5_loop(Arr, Arr_len, I_5, J_5, Required_sum, Subset_3) ->
    case (J_5 =< Required_sum) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get((I_5 - 1), Arr, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Arr) + (I_5 - 1) + 1, Arr); _ -> lists:nth((I_5 - 1) + 1, Arr) end end) > J_5) of
        true -> Subset_4 = lists:sublist(Subset_3, I_5) ++ [lists:sublist(lists:nth(I_5 + 1, Subset_3), J_5) ++ [(case erlang:is_map((case erlang:is_map(Subset_3) of true -> maps:get((I_5 - 1), Subset_3, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_3) + (I_5 - 1) + 1, Subset_3); _ -> lists:nth((I_5 - 1) + 1, Subset_3) end end)) of true -> maps:get(J_5, (case erlang:is_map(Subset_3) of true -> maps:get((I_5 - 1), Subset_3, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_3) + (I_5 - 1) + 1, Subset_3); _ -> lists:nth((I_5 - 1) + 1, Subset_3) end end), nil); _ -> case J_5 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Subset_3) of true -> maps:get((I_5 - 1), Subset_3, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_3) + (I_5 - 1) + 1, Subset_3); _ -> lists:nth((I_5 - 1) + 1, Subset_3) end end)) + J_5 + 1, (case erlang:is_map(Subset_3) of true -> maps:get((I_5 - 1), Subset_3, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_3) + (I_5 - 1) + 1, Subset_3); _ -> lists:nth((I_5 - 1) + 1, Subset_3) end end)); _ -> lists:nth(J_5 + 1, (case erlang:is_map(Subset_3) of true -> maps:get((I_5 - 1), Subset_3, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_3) + (I_5 - 1) + 1, Subset_3); _ -> lists:nth((I_5 - 1) + 1, Subset_3) end end)) end end)] ++ lists:nthtail(J_5 + 1, lists:nth(I_5 + 1, Subset_3))] ++ lists:nthtail(I_5 + 1, Subset_3),
            Subset_5 = Subset_4;
        _ -> Subset_5 = Subset_3
    end,
            case ((case erlang:is_map(Arr) of true -> maps:get((I_5 - 1), Arr, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Arr) + (I_5 - 1) + 1, Arr); _ -> lists:nth((I_5 - 1) + 1, Arr) end end) =< J_5) of
        true -> Subset_6 = lists:sublist(Subset_5, I_5) ++ [lists:sublist(lists:nth(I_5 + 1, Subset_5), J_5) ++ [((case erlang:is_map((case erlang:is_map(Subset_5) of true -> maps:get((I_5 - 1), Subset_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_5) + (I_5 - 1) + 1, Subset_5); _ -> lists:nth((I_5 - 1) + 1, Subset_5) end end)) of true -> maps:get(J_5, (case erlang:is_map(Subset_5) of true -> maps:get((I_5 - 1), Subset_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_5) + (I_5 - 1) + 1, Subset_5); _ -> lists:nth((I_5 - 1) + 1, Subset_5) end end), nil); _ -> case J_5 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Subset_5) of true -> maps:get((I_5 - 1), Subset_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_5) + (I_5 - 1) + 1, Subset_5); _ -> lists:nth((I_5 - 1) + 1, Subset_5) end end)) + J_5 + 1, (case erlang:is_map(Subset_5) of true -> maps:get((I_5 - 1), Subset_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_5) + (I_5 - 1) + 1, Subset_5); _ -> lists:nth((I_5 - 1) + 1, Subset_5) end end)); _ -> lists:nth(J_5 + 1, (case erlang:is_map(Subset_5) of true -> maps:get((I_5 - 1), Subset_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_5) + (I_5 - 1) + 1, Subset_5); _ -> lists:nth((I_5 - 1) + 1, Subset_5) end end)) end end) orelse (case erlang:is_map((case erlang:is_map(Subset_5) of true -> maps:get((I_5 - 1), Subset_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_5) + (I_5 - 1) + 1, Subset_5); _ -> lists:nth((I_5 - 1) + 1, Subset_5) end end)) of true -> maps:get((J_5 - (case erlang:is_map(Arr) of true -> maps:get((I_5 - 1), Arr, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Arr) + (I_5 - 1) + 1, Arr); _ -> lists:nth((I_5 - 1) + 1, Arr) end end)), (case erlang:is_map(Subset_5) of true -> maps:get((I_5 - 1), Subset_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_5) + (I_5 - 1) + 1, Subset_5); _ -> lists:nth((I_5 - 1) + 1, Subset_5) end end), nil); _ -> case (J_5 - (case erlang:is_map(Arr) of true -> maps:get((I_5 - 1), Arr, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Arr) + (I_5 - 1) + 1, Arr); _ -> lists:nth((I_5 - 1) + 1, Arr) end end)) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Subset_5) of true -> maps:get((I_5 - 1), Subset_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_5) + (I_5 - 1) + 1, Subset_5); _ -> lists:nth((I_5 - 1) + 1, Subset_5) end end)) + (J_5 - (case erlang:is_map(Arr) of true -> maps:get((I_5 - 1), Arr, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Arr) + (I_5 - 1) + 1, Arr); _ -> lists:nth((I_5 - 1) + 1, Arr) end end)) + 1, (case erlang:is_map(Subset_5) of true -> maps:get((I_5 - 1), Subset_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_5) + (I_5 - 1) + 1, Subset_5); _ -> lists:nth((I_5 - 1) + 1, Subset_5) end end)); _ -> lists:nth((J_5 - (case erlang:is_map(Arr) of true -> maps:get((I_5 - 1), Arr, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Arr) + (I_5 - 1) + 1, Arr); _ -> lists:nth((I_5 - 1) + 1, Arr) end end)) + 1, (case erlang:is_map(Subset_5) of true -> maps:get((I_5 - 1), Subset_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Subset_5) + (I_5 - 1) + 1, Subset_5); _ -> lists:nth((I_5 - 1) + 1, Subset_5) end end)) end end))] ++ lists:nthtail(J_5 + 1, lists:nth(I_5 + 1, Subset_5))] ++ lists:nthtail(I_5 + 1, Subset_5),
            Subset_7 = Subset_6;
        _ -> Subset_7 = Subset_5
    end,
            J_6 = (J_5 + 1),
            Fun_5_loop(Arr, Arr_len, I_5, J_6, Required_sum, Subset_7);
        _ -> {Arr, Arr_len, I_5, J_5, Required_sum, Subset_3}
    end
end,
{Arr, Arr_len, I_5, J_6, Required_sum, Subset_7} = Fun_5(Arr, Arr_len, I_5, J_5, Required_sum, Subset_3),
            I_6 = (I_5 + 1),
            Fun_6_loop(Arr, Arr_len, I_6, J_6, Required_sum, Subset_7);
        _ -> {Arr, Arr_len, I_5, J_4, Required_sum, Subset_3}
    end
end,
{Arr, Arr_len, I_6, J_6, Required_sum, Subset_7} = Fun_6(Arr, Arr_len, I_5, J_4, Required_sum, Subset_3),
        (case erlang:is_map((case erlang:is_map(Subset_7) of true -> maps:get(Arr_len, Subset_7, nil); _ -> case Arr_len < 0 of true -> lists:nth(erlang:length(Subset_7) + Arr_len + 1, Subset_7); _ -> lists:nth(Arr_len + 1, Subset_7) end end)) of true -> maps:get(Required_sum, (case erlang:is_map(Subset_7) of true -> maps:get(Arr_len, Subset_7, nil); _ -> case Arr_len < 0 of true -> lists:nth(erlang:length(Subset_7) + Arr_len + 1, Subset_7); _ -> lists:nth(Arr_len + 1, Subset_7) end end), nil); _ -> case Required_sum < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Subset_7) of true -> maps:get(Arr_len, Subset_7, nil); _ -> case Arr_len < 0 of true -> lists:nth(erlang:length(Subset_7) + Arr_len + 1, Subset_7); _ -> lists:nth(Arr_len + 1, Subset_7) end end)) + Required_sum + 1, (case erlang:is_map(Subset_7) of true -> maps:get(Arr_len, Subset_7, nil); _ -> case Arr_len < 0 of true -> lists:nth(erlang:length(Subset_7) + Arr_len + 1, Subset_7); _ -> lists:nth(Arr_len + 1, Subset_7) end end)); _ -> lists:nth(Required_sum + 1, (case erlang:is_map(Subset_7) of true -> maps:get(Arr_len, Subset_7, nil); _ -> case Arr_len < 0 of true -> lists:nth(erlang:length(Subset_7) + Arr_len + 1, Subset_7); _ -> lists:nth(Arr_len + 1, Subset_7) end end)) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(is_sum_subset([2, 4, 6, 8], 5))]),
    io:format("~ts~n", [mochi_repr(is_sum_subset([2, 4, 6, 8], 14))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
