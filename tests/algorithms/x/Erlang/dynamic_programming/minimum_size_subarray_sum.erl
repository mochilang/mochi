#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, minimum_subarray_sum/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

minimum_subarray_sum(Target, Numbers) ->
    try
        N = erlang:length(Numbers),
        case (N == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case (Target == 0) of
        true -> I = 0,
            Fun = fun Fun_loop(I, N, Numbers, Target) ->
    case (I < N) of
        true ->
            case ((case erlang:is_map(Numbers) of true -> maps:get(I, Numbers, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Numbers) + I + 1, Numbers); _ -> lists:nth(I + 1, Numbers) end end) == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, N, Numbers, Target);
        _ -> {I, N, Numbers, Target}
    end
end,
{I_2, N, Numbers, Target} = Fun(I, N, Numbers, Target),
            Fun_2 = Fun,
            I_3 = I_2;
        _ -> Fun_2 = nil,
            I_3 = nil
    end,
        Left = 0,
        Right = 0,
        Curr_sum = 0,
        Min_len = (N + 1),
        Fun_4 = fun Fun_4_loop(Curr_sum, I_3, Left, Min_len, N, Numbers, Right, Target) ->
    case (Right < N) of
        true ->
            Curr_sum_2 = (Curr_sum + (case erlang:is_map(Numbers) of true -> maps:get(Right, Numbers, nil); _ -> case Right < 0 of true -> lists:nth(erlang:length(Numbers) + Right + 1, Numbers); _ -> lists:nth(Right + 1, Numbers) end end)),
            Fun_3 = fun Fun_3_loop(Curr_sum_2, I_3, Left, Min_len, N, Numbers, Right, Target) ->
    case ((Curr_sum_2 >= Target) andalso (Left =< Right)) of
        true ->
            Current_len = ((Right - Left) + 1),
            case (Current_len < Min_len) of
        true -> Min_len_2 = Current_len,
            Min_len_3 = Min_len_2;
        _ -> Min_len_3 = Min_len
    end,
            Curr_sum_3 = (Curr_sum_2 - (case erlang:is_map(Numbers) of true -> maps:get(Left, Numbers, nil); _ -> case Left < 0 of true -> lists:nth(erlang:length(Numbers) + Left + 1, Numbers); _ -> lists:nth(Left + 1, Numbers) end end)),
            Left_2 = (Left + 1),
            Fun_3_loop(Curr_sum_3, I_3, Left_2, Min_len_3, N, Numbers, Right, Target);
        _ -> {Curr_sum_2, I_3, Left, Min_len, N, Numbers, Right, Target}
    end
end,
{Curr_sum_3, I_3, Left_2, Min_len_3, N, Numbers, Right, Target} = Fun_3(Curr_sum_2, I_3, Left, Min_len, N, Numbers, Right, Target),
            Right_2 = (Right + 1),
            Fun_4_loop(Curr_sum_3, I_3, Left_2, Min_len_3, N, Numbers, Right_2, Target);
        _ -> {Curr_sum, I_3, Left, Min_len, N, Numbers, Right, Target}
    end
end,
{Curr_sum_3, I_3, Left_2, Min_len_3, N, Numbers, Right_2, Target} = Fun_4(Curr_sum, I_3, Left, Min_len, N, Numbers, Right, Target),
        case (Min_len_3 == (N + 1)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Min_len_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(minimum_subarray_sum(7, [2, 3, 1, 2, 4, 3]))]),
    io:format("~ts~n", [mochi_str(minimum_subarray_sum(7, [2, 3, -1, 2, 4, -3]))]),
    io:format("~ts~n", [mochi_str(minimum_subarray_sum(11, [1, 1, 1, 1, 1, 1, 1, 1]))]),
    io:format("~ts~n", [mochi_str(minimum_subarray_sum(0, [1, 2, 3]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
