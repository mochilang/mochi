#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, partition/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

partition(M) ->
    try
        Memo = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, M, Memo) ->
    case (I < (M + 1)) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(I, J, M, Memo, Row) ->
    case (J < M) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            J_2 = (J + 1),
            Fun_loop(I, J_2, M, Memo, Row_2);
        _ -> {I, J, M, Memo, Row}
    end
end,
{I, J_2, M, Memo, Row_2} = Fun(I, J, M, Memo, Row),
            Memo_2 = lists:append((case Memo of nil -> []; _ -> Memo end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, M, Memo_2);
        _ -> {I, M, Memo}
    end
end,
{I_2, M, Memo_2} = Fun_2(I, M, Memo),
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, M, Memo_2) ->
    case (I_3 < (M + 1)) of
        true ->
            Memo_3 = lists:sublist(Memo_2, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Memo_2), 0) ++ [1] ++ lists:nthtail(0 + 1, lists:nth(I_3 + 1, Memo_2))] ++ lists:nthtail(I_3 + 1, Memo_2),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, M, Memo_3);
        _ -> {I_3, M, Memo_2}
    end
end,
{I_4, M, Memo_3} = Fun_3(I_3, M, Memo_2),
        N = 0,
        Fun_5 = fun Fun_5_loop(I_4, M, Memo_3, N) ->
    case (N < (M + 1)) of
        true ->
            K = 1,
            Fun_4 = fun Fun_4_loop(I_4, K, M, Memo_3, N) ->
    case (K < M) of
        true ->
            Memo_4 = lists:sublist(Memo_3, N) ++ [lists:sublist(lists:nth(N + 1, Memo_3), K) ++ [((case erlang:is_map((case erlang:is_map(Memo_3) of true -> maps:get(N, Memo_3, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_3) + N + 1, Memo_3); _ -> lists:nth(N + 1, Memo_3) end end)) of true -> maps:get(K, (case erlang:is_map(Memo_3) of true -> maps:get(N, Memo_3, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_3) + N + 1, Memo_3); _ -> lists:nth(N + 1, Memo_3) end end), nil); _ -> case K < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Memo_3) of true -> maps:get(N, Memo_3, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_3) + N + 1, Memo_3); _ -> lists:nth(N + 1, Memo_3) end end)) + K + 1, (case erlang:is_map(Memo_3) of true -> maps:get(N, Memo_3, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_3) + N + 1, Memo_3); _ -> lists:nth(N + 1, Memo_3) end end)); _ -> lists:nth(K + 1, (case erlang:is_map(Memo_3) of true -> maps:get(N, Memo_3, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_3) + N + 1, Memo_3); _ -> lists:nth(N + 1, Memo_3) end end)) end end) + (case erlang:is_map((case erlang:is_map(Memo_3) of true -> maps:get(N, Memo_3, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_3) + N + 1, Memo_3); _ -> lists:nth(N + 1, Memo_3) end end)) of true -> maps:get((K - 1), (case erlang:is_map(Memo_3) of true -> maps:get(N, Memo_3, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_3) + N + 1, Memo_3); _ -> lists:nth(N + 1, Memo_3) end end), nil); _ -> case (K - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Memo_3) of true -> maps:get(N, Memo_3, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_3) + N + 1, Memo_3); _ -> lists:nth(N + 1, Memo_3) end end)) + (K - 1) + 1, (case erlang:is_map(Memo_3) of true -> maps:get(N, Memo_3, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_3) + N + 1, Memo_3); _ -> lists:nth(N + 1, Memo_3) end end)); _ -> lists:nth((K - 1) + 1, (case erlang:is_map(Memo_3) of true -> maps:get(N, Memo_3, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_3) + N + 1, Memo_3); _ -> lists:nth(N + 1, Memo_3) end end)) end end))] ++ lists:nthtail(K + 1, lists:nth(N + 1, Memo_3))] ++ lists:nthtail(N + 1, Memo_3),
            case ((N - K) > 0) of
        true -> Memo_5 = lists:sublist(Memo_4, N) ++ [lists:sublist(lists:nth(N + 1, Memo_4), K) ++ [((case erlang:is_map((case erlang:is_map(Memo_4) of true -> maps:get(N, Memo_4, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_4) + N + 1, Memo_4); _ -> lists:nth(N + 1, Memo_4) end end)) of true -> maps:get(K, (case erlang:is_map(Memo_4) of true -> maps:get(N, Memo_4, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_4) + N + 1, Memo_4); _ -> lists:nth(N + 1, Memo_4) end end), nil); _ -> case K < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Memo_4) of true -> maps:get(N, Memo_4, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_4) + N + 1, Memo_4); _ -> lists:nth(N + 1, Memo_4) end end)) + K + 1, (case erlang:is_map(Memo_4) of true -> maps:get(N, Memo_4, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_4) + N + 1, Memo_4); _ -> lists:nth(N + 1, Memo_4) end end)); _ -> lists:nth(K + 1, (case erlang:is_map(Memo_4) of true -> maps:get(N, Memo_4, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Memo_4) + N + 1, Memo_4); _ -> lists:nth(N + 1, Memo_4) end end)) end end) + (case erlang:is_map((case erlang:is_map(Memo_4) of true -> maps:get(((N - K) - 1), Memo_4, nil); _ -> case ((N - K) - 1) < 0 of true -> lists:nth(erlang:length(Memo_4) + ((N - K) - 1) + 1, Memo_4); _ -> lists:nth(((N - K) - 1) + 1, Memo_4) end end)) of true -> maps:get(K, (case erlang:is_map(Memo_4) of true -> maps:get(((N - K) - 1), Memo_4, nil); _ -> case ((N - K) - 1) < 0 of true -> lists:nth(erlang:length(Memo_4) + ((N - K) - 1) + 1, Memo_4); _ -> lists:nth(((N - K) - 1) + 1, Memo_4) end end), nil); _ -> case K < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Memo_4) of true -> maps:get(((N - K) - 1), Memo_4, nil); _ -> case ((N - K) - 1) < 0 of true -> lists:nth(erlang:length(Memo_4) + ((N - K) - 1) + 1, Memo_4); _ -> lists:nth(((N - K) - 1) + 1, Memo_4) end end)) + K + 1, (case erlang:is_map(Memo_4) of true -> maps:get(((N - K) - 1), Memo_4, nil); _ -> case ((N - K) - 1) < 0 of true -> lists:nth(erlang:length(Memo_4) + ((N - K) - 1) + 1, Memo_4); _ -> lists:nth(((N - K) - 1) + 1, Memo_4) end end)); _ -> lists:nth(K + 1, (case erlang:is_map(Memo_4) of true -> maps:get(((N - K) - 1), Memo_4, nil); _ -> case ((N - K) - 1) < 0 of true -> lists:nth(erlang:length(Memo_4) + ((N - K) - 1) + 1, Memo_4); _ -> lists:nth(((N - K) - 1) + 1, Memo_4) end end)) end end))] ++ lists:nthtail(K + 1, lists:nth(N + 1, Memo_4))] ++ lists:nthtail(N + 1, Memo_4),
            Memo_6 = Memo_5;
        _ -> Memo_6 = Memo_4
    end,
            K_2 = (K + 1),
            Fun_4_loop(I_4, K_2, M, Memo_6, N);
        _ -> {I_4, K, M, Memo_3, N}
    end
end,
{I_4, K_2, M, Memo_6, N} = Fun_4(I_4, K, M, Memo_3, N),
            N_2 = (N + 1),
            Fun_5_loop(I_4, M, Memo_6, N_2);
        _ -> {I_4, M, Memo_3, N}
    end
end,
{I_4, M, Memo_6, N_2} = Fun_5(I_4, M, Memo_3, N),
        (case erlang:is_map((case erlang:is_map(Memo_6) of true -> maps:get(M, Memo_6, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Memo_6) + M + 1, Memo_6); _ -> lists:nth(M + 1, Memo_6) end end)) of true -> maps:get((M - 1), (case erlang:is_map(Memo_6) of true -> maps:get(M, Memo_6, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Memo_6) + M + 1, Memo_6); _ -> lists:nth(M + 1, Memo_6) end end), nil); _ -> case (M - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Memo_6) of true -> maps:get(M, Memo_6, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Memo_6) + M + 1, Memo_6); _ -> lists:nth(M + 1, Memo_6) end end)) + (M - 1) + 1, (case erlang:is_map(Memo_6) of true -> maps:get(M, Memo_6, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Memo_6) + M + 1, Memo_6); _ -> lists:nth(M + 1, Memo_6) end end)); _ -> lists:nth((M - 1) + 1, (case erlang:is_map(Memo_6) of true -> maps:get(M, Memo_6, nil); _ -> case M < 0 of true -> lists:nth(erlang:length(Memo_6) + M + 1, Memo_6); _ -> lists:nth(M + 1, Memo_6) end end)) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(partition(5))]),
    io:format("~ts~n", [mochi_repr(partition(7))]),
    io:format("~ts~n", [mochi_repr(partition(100))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
