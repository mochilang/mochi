#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, copy_list/1, longest_subsequence/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

copy_list(Xs) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, Res, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Xs) + I + 1, Xs); _ -> lists:nth(I + 1, Xs) end end)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Res_2, Xs);
        _ -> {I, Res, Xs}
    end
end,
{I_2, Res_2, Xs} = Fun(I, Res, Xs),
        Res_2
    catch {return, Ret} -> Ret end.

longest_subsequence(Arr) ->
    try
        N = erlang:length(Arr),
        Lis = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Arr, I_3, Lis, N) ->
    case (I_3 < N) of
        true ->
            Single = [],
            Single_2 = lists:append((case Single of nil -> []; _ -> Single end), [(case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Arr) + I_3 + 1, Arr); _ -> lists:nth(I_3 + 1, Arr) end end)]),
            Lis_2 = lists:append((case Lis of nil -> []; _ -> Lis end), [Single_2]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr, I_4, Lis_2, N);
        _ -> {Arr, I_3, Lis, N}
    end
end,
{Arr, I_4, Lis_2, N} = Fun_2(Arr, I_3, Lis, N),
        I_5 = 1,
        Fun_4 = fun Fun_4_loop(Arr, I_5, Lis_2, N) ->
    case (I_5 < N) of
        true ->
            Prev = 0,
            Fun_3 = fun Fun_3_loop(Arr, I_5, Lis_2, N, Prev) ->
    case (Prev < I_5) of
        true ->
            case (((case erlang:is_map(Arr) of true -> maps:get(Prev, Arr, nil); _ -> case Prev < 0 of true -> lists:nth(erlang:length(Arr) + Prev + 1, Arr); _ -> lists:nth(Prev + 1, Arr) end end) =< (case erlang:is_map(Arr) of true -> maps:get(I_5, Arr, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Arr) + I_5 + 1, Arr); _ -> lists:nth(I_5 + 1, Arr) end end)) andalso ((erlang:length((case erlang:is_map(Lis_2) of true -> maps:get(Prev, Lis_2, nil); _ -> case Prev < 0 of true -> lists:nth(erlang:length(Lis_2) + Prev + 1, Lis_2); _ -> lists:nth(Prev + 1, Lis_2) end end)) + 1) > erlang:length((case erlang:is_map(Lis_2) of true -> maps:get(I_5, Lis_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Lis_2) + I_5 + 1, Lis_2); _ -> lists:nth(I_5 + 1, Lis_2) end end)))) of
        true -> Temp = copy_list((case erlang:is_map(Lis_2) of true -> maps:get(Prev, Lis_2, nil); _ -> case Prev < 0 of true -> lists:nth(erlang:length(Lis_2) + Prev + 1, Lis_2); _ -> lists:nth(Prev + 1, Lis_2) end end)),
            Temp2 = lists:append((case Temp of nil -> []; _ -> Temp end), [(case erlang:is_map(Arr) of true -> maps:get(I_5, Arr, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Arr) + I_5 + 1, Arr); _ -> lists:nth(I_5 + 1, Arr) end end)]),
            Lis_3 = lists:sublist(Lis_2, I_5) ++ [Temp2] ++ lists:nthtail(I_5 + 1, Lis_2),
            Lis_4 = Lis_3,
            Temp_2 = Temp,
            Temp2_2 = Temp2;
        _ -> Lis_4 = Lis_2,
            Temp_2 = nil,
            Temp2_2 = nil
    end,
            Prev_2 = (Prev + 1),
            Fun_3_loop(Arr, I_5, Lis_4, N, Prev_2);
        _ -> {Arr, I_5, Lis_2, N, Prev}
    end
end,
{Arr, I_5, Lis_4, N, Prev_2} = Fun_3(Arr, I_5, Lis_2, N, Prev),
            I_6 = (I_5 + 1),
            Fun_4_loop(Arr, I_6, Lis_4, N);
        _ -> {Arr, I_5, Lis_2, N}
    end
end,
{Arr, I_6, Lis_4, N} = Fun_4(Arr, I_5, Lis_2, N),
        Result = [],
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(Arr, I_7, Lis_4, N, Result) ->
    case (I_7 < N) of
        true ->
            case (erlang:length((case erlang:is_map(Lis_4) of true -> maps:get(I_7, Lis_4, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(Lis_4) + I_7 + 1, Lis_4); _ -> lists:nth(I_7 + 1, Lis_4) end end)) > erlang:length(Result)) of
        true -> Result_2 = (case erlang:is_map(Lis_4) of true -> maps:get(I_7, Lis_4, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(Lis_4) + I_7 + 1, Lis_4); _ -> lists:nth(I_7 + 1, Lis_4) end end),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            I_8 = (I_7 + 1),
            Fun_5_loop(Arr, I_8, Lis_4, N, Result_3);
        _ -> {Arr, I_7, Lis_4, N, Result}
    end
end,
{Arr, I_8, Lis_4, N, Result_3} = Fun_5(Arr, I_7, Lis_4, N, Result),
        Result_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_str(longest_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]))]),
        io:format("~ts~n", [mochi_str(longest_subsequence([4, 8, 7, 5, 1, 12, 2, 3, 9]))]),
        io:format("~ts~n", [mochi_str(longest_subsequence([9, 8, 7, 6, 5, 7]))]),
        io:format("~ts~n", [mochi_str(longest_subsequence([28, 26, 12, 23, 35, 39]))]),
        io:format("~ts~n", [mochi_str(longest_subsequence([1, 1, 1]))]),
        io:format("~ts~n", [mochi_str(longest_subsequence([]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
