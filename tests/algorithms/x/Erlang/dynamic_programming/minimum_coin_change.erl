#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, dp_count/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

dp_count(S, N) ->
    try
        case (N < 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Table = [],
        I = 0,
        Fun = fun Fun_loop(I, N, S, Table) ->
    case (I =< N) of
        true ->
            Table_2 = lists:append((case Table of nil -> []; _ -> Table end), [0]),
            I_2 = (I + 1),
            Fun_loop(I_2, N, S, Table_2);
        _ -> {I, N, S, Table}
    end
end,
{I_2, N, S, Table_2} = Fun(I, N, S, Table),
        Table_3 = lists:sublist(Table_2, 0) ++ [1] ++ lists:nthtail(0 + 1, Table_2),
        Idx = 0,
        Fun_3 = fun Fun_3_loop(I_2, Idx, N, S, Table_3) ->
    case (Idx < erlang:length(S)) of
        true ->
            Coin_val = (case erlang:is_map(S) of true -> maps:get(Idx, S, nil); _ -> case Idx < 0 of true -> lists:nth(erlang:length(S) + Idx + 1, S); _ -> lists:nth(Idx + 1, S) end end),
            J = Coin_val,
            Fun_2 = fun Fun_2_loop(Coin_val, I_2, Idx, J, N, S, Table_3) ->
    case (J =< N) of
        true ->
            Table_4 = lists:sublist(Table_3, J) ++ [((case erlang:is_map(Table_3) of true -> maps:get(J, Table_3, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Table_3) + J + 1, Table_3); _ -> lists:nth(J + 1, Table_3) end end) + (case erlang:is_map(Table_3) of true -> maps:get((J - Coin_val), Table_3, nil); _ -> case (J - Coin_val) < 0 of true -> lists:nth(erlang:length(Table_3) + (J - Coin_val) + 1, Table_3); _ -> lists:nth((J - Coin_val) + 1, Table_3) end end))] ++ lists:nthtail(J + 1, Table_3),
            J_2 = (J + 1),
            Fun_2_loop(Coin_val, I_2, Idx, J_2, N, S, Table_4);
        _ -> {Coin_val, I_2, Idx, J, N, S, Table_3}
    end
end,
{Coin_val, I_2, Idx, J_2, N, S, Table_4} = Fun_2(Coin_val, I_2, Idx, J, N, S, Table_3),
            Idx_2 = (Idx + 1),
            Fun_3_loop(I_2, Idx_2, N, S, Table_4);
        _ -> {I_2, Idx, N, S, Table_3}
    end
end,
{I_2, Idx_2, N, S, Table_4} = Fun_3(I_2, Idx, N, S, Table_3),
        (case erlang:is_map(Table_4) of true -> maps:get(N, Table_4, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Table_4) + N + 1, Table_4); _ -> lists:nth(N + 1, Table_4) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(dp_count([1, 2, 3], 4))]),
    io:format("~ts~n", [mochi_repr(dp_count([1, 2, 3], 7))]),
    io:format("~ts~n", [mochi_repr(dp_count([2, 5, 3, 6], 10))]),
    io:format("~ts~n", [mochi_repr(dp_count([10], 99))]),
    io:format("~ts~n", [mochi_repr(dp_count([4, 5, 6], 0))]),
    io:format("~ts~n", [mochi_repr(dp_count([1, 2, 3], -5))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
