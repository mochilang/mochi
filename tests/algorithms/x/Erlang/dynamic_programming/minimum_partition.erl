#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, find_min/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

find_min(Numbers) ->
    try
        N = erlang:length(Numbers),
        S = 0,
        Idx = 0,
        Fun = fun Fun_loop(Idx, N, Numbers, S) ->
    case (Idx < N) of
        true ->
            S_2 = (S + (case erlang:is_map(Numbers) of true -> maps:get(Idx, Numbers, nil); _ -> case Idx < 0 of true -> lists:nth(erlang:length(Numbers) + Idx + 1, Numbers); _ -> lists:nth(Idx + 1, Numbers) end end)),
            Idx_2 = (Idx + 1),
            Fun_loop(Idx_2, N, Numbers, S_2);
        _ -> {Idx, N, Numbers, S}
    end
end,
{Idx_2, N, Numbers, S_2} = Fun(Idx, N, Numbers, S),
        Dp = [],
        I = 0,
        Fun_3 = fun Fun_3_loop(Dp, I, Idx_2, N, Numbers, S_2) ->
    case (I =< N) of
        true ->
            Row = [],
            J = 0,
            Fun_2 = fun Fun_2_loop(Dp, I, Idx_2, J, N, Numbers, Row, S_2) ->
    case (J =< S_2) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [false]),
            J_2 = (J + 1),
            Fun_2_loop(Dp, I, Idx_2, J_2, N, Numbers, Row_2, S_2);
        _ -> {Dp, I, Idx_2, J, N, Numbers, Row, S_2}
    end
end,
{Dp, I, Idx_2, J_2, N, Numbers, Row_2, S_2} = Fun_2(Dp, I, Idx_2, J, N, Numbers, Row, S_2),
            Dp_2 = lists:append((case Dp of nil -> []; _ -> Dp end), [Row_2]),
            I_2 = (I + 1),
            Fun_3_loop(Dp_2, I_2, Idx_2, N, Numbers, S_2);
        _ -> {Dp, I, Idx_2, N, Numbers, S_2}
    end
end,
{Dp_2, I_2, Idx_2, N, Numbers, S_2} = Fun_3(Dp, I, Idx_2, N, Numbers, S_2),
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Dp_2, I_3, Idx_2, N, Numbers, S_2) ->
    case (I_3 =< N) of
        true ->
            Dp_3 = lists:sublist(Dp_2, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Dp_2), 0) ++ [true] ++ lists:nthtail(0 + 1, lists:nth(I_3 + 1, Dp_2))] ++ lists:nthtail(I_3 + 1, Dp_2),
            I_4 = (I_3 + 1),
            Fun_4_loop(Dp_3, I_4, Idx_2, N, Numbers, S_2);
        _ -> {Dp_2, I_3, Idx_2, N, Numbers, S_2}
    end
end,
{Dp_3, I_4, Idx_2, N, Numbers, S_2} = Fun_4(Dp_2, I_3, Idx_2, N, Numbers, S_2),
        J_3 = 1,
        Fun_5 = fun Fun_5_loop(Dp_3, I_4, Idx_2, J_3, N, Numbers, S_2) ->
    case (J_3 =< S_2) of
        true ->
            Dp_4 = lists:sublist(Dp_3, 0) ++ [lists:sublist(lists:nth(0 + 1, Dp_3), J_3) ++ [false] ++ lists:nthtail(J_3 + 1, lists:nth(0 + 1, Dp_3))] ++ lists:nthtail(0 + 1, Dp_3),
            J_4 = (J_3 + 1),
            Fun_5_loop(Dp_4, I_4, Idx_2, J_4, N, Numbers, S_2);
        _ -> {Dp_3, I_4, Idx_2, J_3, N, Numbers, S_2}
    end
end,
{Dp_4, I_4, Idx_2, J_4, N, Numbers, S_2} = Fun_5(Dp_3, I_4, Idx_2, J_3, N, Numbers, S_2),
        I_5 = 1,
        Fun_7 = fun Fun_7_loop(Dp_4, I_5, Idx_2, J_4, N, Numbers, S_2) ->
    case (I_5 =< N) of
        true ->
            J_5 = 1,
            Fun_6 = fun Fun_6_loop(Dp_4, I_5, Idx_2, J_5, N, Numbers, S_2) ->
    case (J_5 =< S_2) of
        true ->
            Dp_5 = lists:sublist(Dp_4, I_5) ++ [lists:sublist(lists:nth(I_5 + 1, Dp_4), J_5) ++ [(case erlang:is_map((case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> lists:nth((I_5 - 1) + 1, Dp_4) end end)) of true -> maps:get(J_5, (case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> lists:nth((I_5 - 1) + 1, Dp_4) end end), nil); _ -> case J_5 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> lists:nth((I_5 - 1) + 1, Dp_4) end end)) + J_5 + 1, (case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> lists:nth((I_5 - 1) + 1, Dp_4) end end)); _ -> lists:nth(J_5 + 1, (case erlang:is_map(Dp_4) of true -> maps:get((I_5 - 1), Dp_4, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_4) + (I_5 - 1) + 1, Dp_4); _ -> lists:nth((I_5 - 1) + 1, Dp_4) end end)) end end)] ++ lists:nthtail(J_5 + 1, lists:nth(I_5 + 1, Dp_4))] ++ lists:nthtail(I_5 + 1, Dp_4),
            case ((case erlang:is_map(Numbers) of true -> maps:get((I_5 - 1), Numbers, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Numbers) + (I_5 - 1) + 1, Numbers); _ -> lists:nth((I_5 - 1) + 1, Numbers) end end) =< J_5) of
        true -> case (case erlang:is_map((case erlang:is_map(Dp_5) of true -> maps:get((I_5 - 1), Dp_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_5) + (I_5 - 1) + 1, Dp_5); _ -> lists:nth((I_5 - 1) + 1, Dp_5) end end)) of true -> maps:get((J_5 - (case erlang:is_map(Numbers) of true -> maps:get((I_5 - 1), Numbers, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Numbers) + (I_5 - 1) + 1, Numbers); _ -> lists:nth((I_5 - 1) + 1, Numbers) end end)), (case erlang:is_map(Dp_5) of true -> maps:get((I_5 - 1), Dp_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_5) + (I_5 - 1) + 1, Dp_5); _ -> lists:nth((I_5 - 1) + 1, Dp_5) end end), nil); _ -> case (J_5 - (case erlang:is_map(Numbers) of true -> maps:get((I_5 - 1), Numbers, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Numbers) + (I_5 - 1) + 1, Numbers); _ -> lists:nth((I_5 - 1) + 1, Numbers) end end)) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_5) of true -> maps:get((I_5 - 1), Dp_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_5) + (I_5 - 1) + 1, Dp_5); _ -> lists:nth((I_5 - 1) + 1, Dp_5) end end)) + (J_5 - (case erlang:is_map(Numbers) of true -> maps:get((I_5 - 1), Numbers, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Numbers) + (I_5 - 1) + 1, Numbers); _ -> lists:nth((I_5 - 1) + 1, Numbers) end end)) + 1, (case erlang:is_map(Dp_5) of true -> maps:get((I_5 - 1), Dp_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_5) + (I_5 - 1) + 1, Dp_5); _ -> lists:nth((I_5 - 1) + 1, Dp_5) end end)); _ -> lists:nth((J_5 - (case erlang:is_map(Numbers) of true -> maps:get((I_5 - 1), Numbers, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Numbers) + (I_5 - 1) + 1, Numbers); _ -> lists:nth((I_5 - 1) + 1, Numbers) end end)) + 1, (case erlang:is_map(Dp_5) of true -> maps:get((I_5 - 1), Dp_5, nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length(Dp_5) + (I_5 - 1) + 1, Dp_5); _ -> lists:nth((I_5 - 1) + 1, Dp_5) end end)) end end) of
        true -> Dp_6 = lists:sublist(Dp_5, I_5) ++ [lists:sublist(lists:nth(I_5 + 1, Dp_5), J_5) ++ [true] ++ lists:nthtail(J_5 + 1, lists:nth(I_5 + 1, Dp_5))] ++ lists:nthtail(I_5 + 1, Dp_5),
            Dp_7 = Dp_6;
        _ -> Dp_7 = Dp_5
    end,
            Dp_8 = Dp_7;
        _ -> Dp_8 = Dp_5
    end,
            J_6 = (J_5 + 1),
            Fun_6_loop(Dp_8, I_5, Idx_2, J_6, N, Numbers, S_2);
        _ -> {Dp_4, I_5, Idx_2, J_5, N, Numbers, S_2}
    end
end,
{Dp_8, I_5, Idx_2, J_6, N, Numbers, S_2} = Fun_6(Dp_4, I_5, Idx_2, J_5, N, Numbers, S_2),
            I_6 = (I_5 + 1),
            Fun_7_loop(Dp_8, I_6, Idx_2, J_6, N, Numbers, S_2);
        _ -> {Dp_4, I_5, Idx_2, J_4, N, Numbers, S_2}
    end
end,
{Dp_8, I_6, Idx_2, J_6, N, Numbers, S_2} = Fun_7(Dp_4, I_5, Idx_2, J_4, N, Numbers, S_2),
        Diff = 0,
        J_7 = (S_2 div 2),
        Fun_8 = fun Fun_8_loop(Diff, Dp_8, I_6, Idx_2, J_7, N, Numbers, S_2) ->
    case (J_7 >= 0) of
        true ->
            try
                case (case erlang:is_map((case erlang:is_map(Dp_8) of true -> maps:get(N, Dp_8, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Dp_8) + N + 1, Dp_8); _ -> lists:nth(N + 1, Dp_8) end end)) of true -> maps:get(J_7, (case erlang:is_map(Dp_8) of true -> maps:get(N, Dp_8, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Dp_8) + N + 1, Dp_8); _ -> lists:nth(N + 1, Dp_8) end end), nil); _ -> case J_7 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_8) of true -> maps:get(N, Dp_8, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Dp_8) + N + 1, Dp_8); _ -> lists:nth(N + 1, Dp_8) end end)) + J_7 + 1, (case erlang:is_map(Dp_8) of true -> maps:get(N, Dp_8, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Dp_8) + N + 1, Dp_8); _ -> lists:nth(N + 1, Dp_8) end end)); _ -> lists:nth(J_7 + 1, (case erlang:is_map(Dp_8) of true -> maps:get(N, Dp_8, nil); _ -> case N < 0 of true -> lists:nth(erlang:length(Dp_8) + N + 1, Dp_8); _ -> lists:nth(N + 1, Dp_8) end end)) end end) of
        true -> Diff_2 = (S_2 - (2 * J_7)),
            throw({break, Diff_2, Dp_8, I_6, Idx_2, J_7, N, Numbers, S_2}),
            Diff_3 = Diff_2;
        _ -> Diff_3 = Diff
    end,
                J_8 = (J_7 - 1),
                Fun_8_loop(Diff_3, Dp_8, I_6, Idx_2, J_8, N, Numbers, S_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7} -> Fun_8_loop(C0, C1, C2, C3, C4, C5, C6, C7);
                {break, B0, B1, B2, B3, B4, B5, B6, B7} -> {B0, B1, B2, B3, B4, B5, B6, B7}
            end;
        _ -> {Diff, Dp_8, I_6, Idx_2, J_7, N, Numbers, S_2}
    end
end,
{Diff_3, Dp_8, I_6, Idx_2, J_8, N, Numbers, S_2} = Fun_8(Diff, Dp_8, I_6, Idx_2, J_7, N, Numbers, S_2),
        Diff_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(find_min([1, 2, 3, 4, 5]))]),
    io:format("~ts~n", [mochi_str(find_min([5, 5, 5, 5, 5]))]),
    io:format("~ts~n", [mochi_str(find_min([5, 5, 5, 5]))]),
    io:format("~ts~n", [mochi_str(find_min([3]))]),
    io:format("~ts~n", [mochi_str(find_min([]))]),
    io:format("~ts~n", [mochi_str(find_min([1, 2, 3, 4]))]),
    io:format("~ts~n", [mochi_str(find_min([0, 0, 0, 0]))]),
    io:format("~ts~n", [mochi_str(find_min([-1, -5, 5, 1]))]),
    io:format("~ts~n", [mochi_str(find_min([9, 9, 9, 9, 9]))]),
    io:format("~ts~n", [mochi_str(find_min([1, 5, 10, 3]))]),
    io:format("~ts~n", [mochi_str(find_min([-1, 0, 1]))]),
    io:format("~ts~n", [mochi_str(find_min([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
