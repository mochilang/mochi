#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_list/2, max_int/2, min_int/2, min3/3, minimum_tickets_cost/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_list(Len, Value) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, Len, Value) ->
    case (I < Len) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [Value]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, I_2, Len, Value);
        _ -> {Arr, I, Len, Value}
    end
end,
{Arr_2, I_2, Len, Value} = Fun(Arr, I, Len, Value),
        Arr_2
    catch {return, Ret} -> Ret end.

max_int(A, B) ->
    try
        case (A > B) of
        true -> throw({return, A});
        _ -> throw({return, B})
    end,
        nil
    catch {return, Ret} -> Ret end.

min_int(A_2, B_2) ->
    try
        case (A_2 < B_2) of
        true -> throw({return, A_2});
        _ -> throw({return, B_2})
    end,
        nil
    catch {return, Ret} -> Ret end.

min3(A_3, B_3, C) ->
    try
        min_int(min_int(A_3, B_3), C)
    catch {return, Ret} -> Ret end.

minimum_tickets_cost(Days, Costs) ->
    try
        case (erlang:length(Days) == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Last_day = (case erlang:is_map(Days) of true -> maps:get((erlang:length(Days) - 1), Days, nil); _ -> case (erlang:length(Days) - 1) < 0 of true -> lists:nth(erlang:length(Days) + (erlang:length(Days) - 1) + 1, Days); _ -> lists:nth((erlang:length(Days) - 1) + 1, Days) end end),
        Dp = make_list((Last_day + 1), 0),
        Day_index = 0,
        D = 1,
        Fun_2 = fun Fun_2_loop(Costs, D, Day_index, Days, Dp, Last_day) ->
    case (D =< Last_day) of
        true ->
            case ((Day_index < erlang:length(Days)) andalso (D == (case erlang:is_map(Days) of true -> maps:get(Day_index, Days, nil); _ -> case Day_index < 0 of true -> lists:nth(erlang:length(Days) + Day_index + 1, Days); _ -> lists:nth(Day_index + 1, Days) end end))) of
        true -> Cost1 = ((case erlang:is_map(Dp) of true -> maps:get((D - 1), Dp, nil); _ -> case (D - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (D - 1) + 1, Dp); _ -> lists:nth((D - 1) + 1, Dp) end end) + (case erlang:is_map(Costs) of true -> maps:get(0, Costs, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Costs) + 0 + 1, Costs); _ -> lists:nth(0 + 1, Costs) end end)),
            Cost7 = ((case erlang:is_map(Dp) of true -> maps:get(max_int(0, (D - 7)), Dp, nil); _ -> case max_int(0, (D - 7)) < 0 of true -> lists:nth(erlang:length(Dp) + max_int(0, (D - 7)) + 1, Dp); _ -> lists:nth(max_int(0, (D - 7)) + 1, Dp) end end) + (case erlang:is_map(Costs) of true -> maps:get(1, Costs, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Costs) + 1 + 1, Costs); _ -> lists:nth(1 + 1, Costs) end end)),
            Cost30 = ((case erlang:is_map(Dp) of true -> maps:get(max_int(0, (D - 30)), Dp, nil); _ -> case max_int(0, (D - 30)) < 0 of true -> lists:nth(erlang:length(Dp) + max_int(0, (D - 30)) + 1, Dp); _ -> lists:nth(max_int(0, (D - 30)) + 1, Dp) end end) + (case erlang:is_map(Costs) of true -> maps:get(2, Costs, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Costs) + 2 + 1, Costs); _ -> lists:nth(2 + 1, Costs) end end)),
            Dp_2 = lists:sublist(Dp, D) ++ [min3(Cost1, Cost7, Cost30)] ++ lists:nthtail(D + 1, Dp),
            Day_index_2 = (Day_index + 1),
            Cost1_2 = Cost1,
            Cost30_2 = Cost30,
            Cost7_2 = Cost7,
            Day_index_3 = Day_index_2,
            Dp_4 = Dp_2;
        _ -> Dp_3 = lists:sublist(Dp, D) ++ [(case erlang:is_map(Dp) of true -> maps:get((D - 1), Dp, nil); _ -> case (D - 1) < 0 of true -> lists:nth(erlang:length(Dp) + (D - 1) + 1, Dp); _ -> lists:nth((D - 1) + 1, Dp) end end)] ++ lists:nthtail(D + 1, Dp),
            Cost1_2 = nil,
            Cost30_2 = nil,
            Cost7_2 = nil,
            Day_index_3 = Day_index,
            Dp_4 = Dp_3
    end,
            D_2 = (D + 1),
            Fun_2_loop(Costs, D_2, Day_index_3, Days, Dp_4, Last_day);
        _ -> {Costs, D, Day_index, Days, Dp, Last_day}
    end
end,
{Costs, D_2, Day_index_3, Days, Dp_4, Last_day} = Fun_2(Costs, D, Day_index, Days, Dp, Last_day),
        (case erlang:is_map(Dp_4) of true -> maps:get(Last_day, Dp_4, nil); _ -> case Last_day < 0 of true -> lists:nth(erlang:length(Dp_4) + Last_day + 1, Dp_4); _ -> lists:nth(Last_day + 1, Dp_4) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(minimum_tickets_cost([1, 4, 6, 7, 8, 20], [2, 7, 15]))]),
    io:format("~ts~n", [mochi_str(minimum_tickets_cost([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], [2, 7, 15]))]),
    io:format("~ts~n", [mochi_str(minimum_tickets_cost([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 30, 31], [2, 90, 150]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
