#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, longest_common_substring/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

longest_common_substring(Text1, Text2) ->
    try
        case ((erlang:length(Text1) == 0) orelse (erlang:length(Text2) == 0)) of
        true -> throw({return, ""});
        _ -> ok
    end,
        M = erlang:length(Text1),
        N = erlang:length(Text2),
        Dp = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Dp, I, M, N, Text1, Text2) ->
    case (I < (M + 1)) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(Dp, I, J, M, N, Row, Text1, Text2) ->
    case (J < (N + 1)) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            J_2 = (J + 1),
            Fun_loop(Dp, I, J_2, M, N, Row_2, Text1, Text2);
        _ -> {Dp, I, J, M, N, Row, Text1, Text2}
    end
end,
{Dp, I, J_2, M, N, Row_2, Text1, Text2} = Fun(Dp, I, J, M, N, Row, Text1, Text2),
            Dp_2 = lists:append((case Dp of nil -> []; _ -> Dp end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Dp_2, I_2, M, N, Text1, Text2);
        _ -> {Dp, I, M, N, Text1, Text2}
    end
end,
{Dp_2, I_2, M, N, Text1, Text2} = Fun_2(Dp, I, M, N, Text1, Text2),
        End_pos = 0,
        Max_len = 0,
        Ii = 1,
        Fun_4 = fun Fun_4_loop(Dp_2, End_pos, I_2, Ii, M, Max_len, N, Text1, Text2) ->
    case (Ii =< M) of
        true ->
            Jj = 1,
            Fun_3 = fun Fun_3_loop(Dp_2, End_pos, I_2, Ii, Jj, M, Max_len, N, Text1, Text2) ->
    case (Jj =< N) of
        true ->
            case (string:substr(Text1, (Ii - 1) + 1, (Ii - (Ii - 1))) == string:substr(Text2, (Jj - 1) + 1, (Jj - (Jj - 1)))) of
        true -> Dp_3 = lists:sublist(Dp_2, Ii) ++ [lists:sublist(lists:nth(Ii + 1, Dp_2), Jj) ++ [(1 + (case erlang:is_map((case erlang:is_map(Dp_2) of true -> maps:get((Ii - 1), Dp_2, nil); _ -> case (Ii - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (Ii - 1) + 1, Dp_2); _ -> lists:nth((Ii - 1) + 1, Dp_2) end end)) of true -> maps:get((Jj - 1), (case erlang:is_map(Dp_2) of true -> maps:get((Ii - 1), Dp_2, nil); _ -> case (Ii - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (Ii - 1) + 1, Dp_2); _ -> lists:nth((Ii - 1) + 1, Dp_2) end end), nil); _ -> case (Jj - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_2) of true -> maps:get((Ii - 1), Dp_2, nil); _ -> case (Ii - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (Ii - 1) + 1, Dp_2); _ -> lists:nth((Ii - 1) + 1, Dp_2) end end)) + (Jj - 1) + 1, (case erlang:is_map(Dp_2) of true -> maps:get((Ii - 1), Dp_2, nil); _ -> case (Ii - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (Ii - 1) + 1, Dp_2); _ -> lists:nth((Ii - 1) + 1, Dp_2) end end)); _ -> lists:nth((Jj - 1) + 1, (case erlang:is_map(Dp_2) of true -> maps:get((Ii - 1), Dp_2, nil); _ -> case (Ii - 1) < 0 of true -> lists:nth(erlang:length(Dp_2) + (Ii - 1) + 1, Dp_2); _ -> lists:nth((Ii - 1) + 1, Dp_2) end end)) end end))] ++ lists:nthtail(Jj + 1, lists:nth(Ii + 1, Dp_2))] ++ lists:nthtail(Ii + 1, Dp_2),
            case ((case erlang:is_map((case erlang:is_map(Dp_3) of true -> maps:get(Ii, Dp_3, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Dp_3) + Ii + 1, Dp_3); _ -> lists:nth(Ii + 1, Dp_3) end end)) of true -> maps:get(Jj, (case erlang:is_map(Dp_3) of true -> maps:get(Ii, Dp_3, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Dp_3) + Ii + 1, Dp_3); _ -> lists:nth(Ii + 1, Dp_3) end end), nil); _ -> case Jj < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_3) of true -> maps:get(Ii, Dp_3, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Dp_3) + Ii + 1, Dp_3); _ -> lists:nth(Ii + 1, Dp_3) end end)) + Jj + 1, (case erlang:is_map(Dp_3) of true -> maps:get(Ii, Dp_3, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Dp_3) + Ii + 1, Dp_3); _ -> lists:nth(Ii + 1, Dp_3) end end)); _ -> lists:nth(Jj + 1, (case erlang:is_map(Dp_3) of true -> maps:get(Ii, Dp_3, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Dp_3) + Ii + 1, Dp_3); _ -> lists:nth(Ii + 1, Dp_3) end end)) end end) > Max_len) of
        true -> Max_len_2 = (case erlang:is_map((case erlang:is_map(Dp_3) of true -> maps:get(Ii, Dp_3, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Dp_3) + Ii + 1, Dp_3); _ -> lists:nth(Ii + 1, Dp_3) end end)) of true -> maps:get(Jj, (case erlang:is_map(Dp_3) of true -> maps:get(Ii, Dp_3, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Dp_3) + Ii + 1, Dp_3); _ -> lists:nth(Ii + 1, Dp_3) end end), nil); _ -> case Jj < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Dp_3) of true -> maps:get(Ii, Dp_3, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Dp_3) + Ii + 1, Dp_3); _ -> lists:nth(Ii + 1, Dp_3) end end)) + Jj + 1, (case erlang:is_map(Dp_3) of true -> maps:get(Ii, Dp_3, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Dp_3) + Ii + 1, Dp_3); _ -> lists:nth(Ii + 1, Dp_3) end end)); _ -> lists:nth(Jj + 1, (case erlang:is_map(Dp_3) of true -> maps:get(Ii, Dp_3, nil); _ -> case Ii < 0 of true -> lists:nth(erlang:length(Dp_3) + Ii + 1, Dp_3); _ -> lists:nth(Ii + 1, Dp_3) end end)) end end),
            End_pos_2 = Ii,
            End_pos_3 = End_pos_2,
            Max_len_3 = Max_len_2;
        _ -> End_pos_3 = End_pos,
            Max_len_3 = Max_len
    end,
            Dp_4 = Dp_3,
            End_pos_4 = End_pos_3,
            Max_len_4 = Max_len_3;
        _ -> Dp_4 = Dp_2,
            End_pos_4 = End_pos,
            Max_len_4 = Max_len
    end,
            Jj_2 = (Jj + 1),
            Fun_3_loop(Dp_4, End_pos_4, I_2, Ii, Jj_2, M, Max_len_4, N, Text1, Text2);
        _ -> {Dp_2, End_pos, I_2, Ii, Jj, M, Max_len, N, Text1, Text2}
    end
end,
{Dp_4, End_pos_4, I_2, Ii, Jj_2, M, Max_len_4, N, Text1, Text2} = Fun_3(Dp_2, End_pos, I_2, Ii, Jj, M, Max_len, N, Text1, Text2),
            Ii_2 = (Ii + 1),
            Fun_4_loop(Dp_4, End_pos_4, I_2, Ii_2, M, Max_len_4, N, Text1, Text2);
        _ -> {Dp_2, End_pos, I_2, Ii, M, Max_len, N, Text1, Text2}
    end
end,
{Dp_4, End_pos_4, I_2, Ii_2, M, Max_len_4, N, Text1, Text2} = Fun_4(Dp_2, End_pos, I_2, Ii, M, Max_len, N, Text1, Text2),
        string:substr(Text1, (End_pos_4 - Max_len_4) + 1, (End_pos_4 - (End_pos_4 - Max_len_4)))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(longest_common_substring("abcdef", "xabded"))]),
    io:format("~ts~n", [mochi_repr("\n")]),
    io:format("~ts~n", [mochi_repr(longest_common_substring("zxabcdezy", "yzabcdezx"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
