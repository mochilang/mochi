#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, min_int/2, minimum_cost_path/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

min_int(A, B) ->
    try
        (case (A < B) of
    true -> A;
    _ -> B
end)
    catch {return, Ret} -> Ret end.

minimum_cost_path(Matrix) ->
    try
        Rows = erlang:length(Matrix),
        Cols = erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> lists:nth(0 + 1, Matrix) end end)),
        J = 1,
        Fun = fun Fun_loop(Cols, J, Matrix, Rows) ->
    case (J < Cols) of
        true ->
            Row0 = (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> lists:nth(0 + 1, Matrix) end end),
            Row0_2 = lists:sublist(Row0, J) ++ [((case erlang:is_map(Row0) of true -> maps:get(J, Row0, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Row0) + J + 1, Row0); _ -> lists:nth(J + 1, Row0) end end) + (case erlang:is_map(Row0) of true -> maps:get((J - 1), Row0, nil); _ -> case (J - 1) < 0 of true -> lists:nth(erlang:length(Row0) + (J - 1) + 1, Row0); _ -> lists:nth((J - 1) + 1, Row0) end end))] ++ lists:nthtail(J + 1, Row0),
            Matrix_2 = lists:sublist(Matrix, 0) ++ [Row0_2] ++ lists:nthtail(0 + 1, Matrix),
            J_2 = (J + 1),
            Fun_loop(Cols, J_2, Matrix_2, Rows);
        _ -> {Cols, J, Matrix, Rows}
    end
end,
{Cols, J_2, Matrix_2, Rows} = Fun(Cols, J, Matrix, Rows),
        I = 1,
        Fun_2 = fun Fun_2_loop(Cols, I, J_2, Matrix_2, Rows) ->
    case (I < Rows) of
        true ->
            Row = (case erlang:is_map(Matrix_2) of true -> maps:get(I, Matrix_2, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Matrix_2) + I + 1, Matrix_2); _ -> lists:nth(I + 1, Matrix_2) end end),
            Row_2 = lists:sublist(Row, 0) ++ [((case erlang:is_map(Row) of true -> maps:get(0, Row, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Row) + 0 + 1, Row); _ -> lists:nth(0 + 1, Row) end end) + (case erlang:is_map((case erlang:is_map(Matrix_2) of true -> maps:get((I - 1), Matrix_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Matrix_2) + (I - 1) + 1, Matrix_2); _ -> lists:nth((I - 1) + 1, Matrix_2) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix_2) of true -> maps:get((I - 1), Matrix_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Matrix_2) + (I - 1) + 1, Matrix_2); _ -> lists:nth((I - 1) + 1, Matrix_2) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get((I - 1), Matrix_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Matrix_2) + (I - 1) + 1, Matrix_2); _ -> lists:nth((I - 1) + 1, Matrix_2) end end)) + 0 + 1, (case erlang:is_map(Matrix_2) of true -> maps:get((I - 1), Matrix_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Matrix_2) + (I - 1) + 1, Matrix_2); _ -> lists:nth((I - 1) + 1, Matrix_2) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(Matrix_2) of true -> maps:get((I - 1), Matrix_2, nil); _ -> case (I - 1) < 0 of true -> lists:nth(erlang:length(Matrix_2) + (I - 1) + 1, Matrix_2); _ -> lists:nth((I - 1) + 1, Matrix_2) end end)) end end))] ++ lists:nthtail(0 + 1, Row),
            Matrix_3 = lists:sublist(Matrix_2, I) ++ [Row_2] ++ lists:nthtail(I + 1, Matrix_2),
            I_2 = (I + 1),
            Fun_2_loop(Cols, I_2, J_2, Matrix_3, Rows);
        _ -> {Cols, I, J_2, Matrix_2, Rows}
    end
end,
{Cols, I_2, J_2, Matrix_3, Rows} = Fun_2(Cols, I, J_2, Matrix_2, Rows),
        I_3 = 1,
        Fun_4 = fun Fun_4_loop(Cols, I_3, J_2, Matrix_3, Rows) ->
    case (I_3 < Rows) of
        true ->
            Row_3 = (case erlang:is_map(Matrix_3) of true -> maps:get(I_3, Matrix_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Matrix_3) + I_3 + 1, Matrix_3); _ -> lists:nth(I_3 + 1, Matrix_3) end end),
            J_3 = 1,
            Fun_3 = fun Fun_3_loop(Cols, I_3, J_3, Matrix_3, Row_3, Rows) ->
    case (J_3 < Cols) of
        true ->
            Up = (case erlang:is_map((case erlang:is_map(Matrix_3) of true -> maps:get((I_3 - 1), Matrix_3, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Matrix_3) + (I_3 - 1) + 1, Matrix_3); _ -> lists:nth((I_3 - 1) + 1, Matrix_3) end end)) of true -> maps:get(J_3, (case erlang:is_map(Matrix_3) of true -> maps:get((I_3 - 1), Matrix_3, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Matrix_3) + (I_3 - 1) + 1, Matrix_3); _ -> lists:nth((I_3 - 1) + 1, Matrix_3) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Matrix_3) of true -> maps:get((I_3 - 1), Matrix_3, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Matrix_3) + (I_3 - 1) + 1, Matrix_3); _ -> lists:nth((I_3 - 1) + 1, Matrix_3) end end)) + J_3 + 1, (case erlang:is_map(Matrix_3) of true -> maps:get((I_3 - 1), Matrix_3, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Matrix_3) + (I_3 - 1) + 1, Matrix_3); _ -> lists:nth((I_3 - 1) + 1, Matrix_3) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Matrix_3) of true -> maps:get((I_3 - 1), Matrix_3, nil); _ -> case (I_3 - 1) < 0 of true -> lists:nth(erlang:length(Matrix_3) + (I_3 - 1) + 1, Matrix_3); _ -> lists:nth((I_3 - 1) + 1, Matrix_3) end end)) end end),
            Left = (case erlang:is_map(Row_3) of true -> maps:get((J_3 - 1), Row_3, nil); _ -> case (J_3 - 1) < 0 of true -> lists:nth(erlang:length(Row_3) + (J_3 - 1) + 1, Row_3); _ -> lists:nth((J_3 - 1) + 1, Row_3) end end),
            Best = min_int(Up, Left),
            Row_4 = lists:sublist(Row_3, J_3) ++ [((case erlang:is_map(Row_3) of true -> maps:get(J_3, Row_3, nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length(Row_3) + J_3 + 1, Row_3); _ -> lists:nth(J_3 + 1, Row_3) end end) + Best)] ++ lists:nthtail(J_3 + 1, Row_3),
            J_4 = (J_3 + 1),
            Fun_3_loop(Cols, I_3, J_4, Matrix_3, Row_4, Rows);
        _ -> {Cols, I_3, J_3, Matrix_3, Row_3, Rows}
    end
end,
{Cols, I_3, J_4, Matrix_3, Row_4, Rows} = Fun_3(Cols, I_3, J_3, Matrix_3, Row_3, Rows),
            Matrix_4 = lists:sublist(Matrix_3, I_3) ++ [Row_4] ++ lists:nthtail(I_3 + 1, Matrix_3),
            I_4 = (I_3 + 1),
            Fun_4_loop(Cols, I_4, J_4, Matrix_4, Rows);
        _ -> {Cols, I_3, J_2, Matrix_3, Rows}
    end
end,
{Cols, I_4, J_4, Matrix_4, Rows} = Fun_4(Cols, I_3, J_2, Matrix_3, Rows),
        (case erlang:is_map((case erlang:is_map(Matrix_4) of true -> maps:get((Rows - 1), Matrix_4, nil); _ -> case (Rows - 1) < 0 of true -> lists:nth(erlang:length(Matrix_4) + (Rows - 1) + 1, Matrix_4); _ -> lists:nth((Rows - 1) + 1, Matrix_4) end end)) of true -> maps:get((Cols - 1), (case erlang:is_map(Matrix_4) of true -> maps:get((Rows - 1), Matrix_4, nil); _ -> case (Rows - 1) < 0 of true -> lists:nth(erlang:length(Matrix_4) + (Rows - 1) + 1, Matrix_4); _ -> lists:nth((Rows - 1) + 1, Matrix_4) end end), nil); _ -> case (Cols - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Matrix_4) of true -> maps:get((Rows - 1), Matrix_4, nil); _ -> case (Rows - 1) < 0 of true -> lists:nth(erlang:length(Matrix_4) + (Rows - 1) + 1, Matrix_4); _ -> lists:nth((Rows - 1) + 1, Matrix_4) end end)) + (Cols - 1) + 1, (case erlang:is_map(Matrix_4) of true -> maps:get((Rows - 1), Matrix_4, nil); _ -> case (Rows - 1) < 0 of true -> lists:nth(erlang:length(Matrix_4) + (Rows - 1) + 1, Matrix_4); _ -> lists:nth((Rows - 1) + 1, Matrix_4) end end)); _ -> lists:nth((Cols - 1) + 1, (case erlang:is_map(Matrix_4) of true -> maps:get((Rows - 1), Matrix_4, nil); _ -> case (Rows - 1) < 0 of true -> lists:nth(erlang:length(Matrix_4) + (Rows - 1) + 1, Matrix_4); _ -> lists:nth((Rows - 1) + 1, Matrix_4) end end)) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('m1', [[2, 1], [3, 1], [4, 2]]),
    erlang:put('m2', [[2, 1, 4], [2, 1, 3], [3, 2, 1]]),
    io:format("~ts~n", [mochi_str(minimum_cost_path(erlang:get('m1')))]),
    io:format("~ts~n", [mochi_str(minimum_cost_path(erlang:get('m2')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
