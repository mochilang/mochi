#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, build_set/1, word_break/2, print_bool/1]).

% Generated by Mochi transpiler v0.10.64 (9e806895eb) on 2025-08-13 16:13 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

build_set(Words) ->
    try
        M = #{},
        Fun = fun Fun_loop(List, M, Words) ->
    case List of
        [] -> {M, Words};
        [W|W_rest] ->
            M_2 = maps:put(W, true, M),
            Fun_loop(W_rest, M_2, Words);
        _ -> {M, Words}
    end
end,
{M_2, Words} = Fun(Words, M, Words),
        M_2
    catch {return, RetCatch} -> RetCatch end.

word_break(S, Words_2) ->
    try
        N = erlang:length(S),
        Dict = build_set(Words_2),
        Dp = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Dict, Dp, I, N, S, Words_2) ->
    case (I =< N) of
        true ->
            Dp_2 = lists:append((case Dp of nil -> []; _ -> Dp end), [false]),
            I_2 = (I + 1),
            Fun_2_loop(Dict, Dp_2, I_2, N, S, Words_2);
        _ -> {Dict, Dp, I, N, S, Words_2}
    end
end,
{Dict, Dp_2, I_2, N, S, Words_2} = Fun_2(Dict, Dp, I, N, S, Words_2),
        Dp_3 = lists:sublist(Dp_2, 0) ++ [true] ++ lists:nthtail(0 + 1, Dp_2),
        I_3 = 1,
        Fun_4 = fun Fun_4_loop(Dict, Dp_3, I_3, N, S, Words_2) ->
    case (I_3 =< N) of
        true ->
            J = 0,
            Fun_3 = fun Fun_3_loop(Dict, Dp_3, I_3, J, N, S, Words_2) ->
    case (J < I_3) of
        true ->
            case (case erlang:is_map(Dp_3) of true -> maps:get(J, Dp_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Dp_3) + J + 1, Dp_3); _ -> mochi_nth(J + 1, Dp_3) end end) of
        true -> Sub = string:substr(S, J + 1, (I_3 - J)),
            case maps:is_key(Sub, Dict) of
        true -> Dp_4 = lists:sublist(Dp_3, I_3) ++ [true] ++ lists:nthtail(I_3 + 1, Dp_3),
            J_2 = I_3,
            Dp_5 = Dp_4,
            J_3 = J_2;
        _ -> Dp_5 = Dp_3,
            J_3 = J
    end,
            Dp_6 = Dp_5,
            J_4 = J_3,
            Sub_2 = Sub;
        _ -> Dp_6 = Dp_3,
            J_4 = J,
            Sub_2 = nil
    end,
            J_5 = (J_4 + 1),
            Fun_3_loop(Dict, Dp_6, I_3, J_5, N, S, Words_2);
        _ -> {Dict, Dp_3, I_3, J, N, S, Words_2}
    end
end,
{Dict, Dp_6, I_3, J_5, N, S, Words_2} = Fun_3(Dict, Dp_3, I_3, J, N, S, Words_2),
            I_4 = (I_3 + 1),
            Fun_4_loop(Dict, Dp_6, I_4, N, S, Words_2);
        _ -> {Dict, Dp_3, I_3, N, S, Words_2}
    end
end,
{Dict, Dp_6, I_4, N, S, Words_2} = Fun_4(Dict, Dp_3, I_3, N, S, Words_2),
        (case erlang:is_map(Dp_6) of true -> maps:get(N, Dp_6, nil); _ -> case N < 0 of true -> mochi_nth(erlang:length(Dp_6) + N + 1, Dp_6); _ -> mochi_nth(N + 1, Dp_6) end end)
    catch {return, RetCatch} -> RetCatch end.

print_bool(B) ->
    try
        case B of
        true -> io:format("~ts~n", [mochi_repr(true)]);
        _ -> io:format("~ts~n", [mochi_repr(false)])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    print_bool(word_break("applepenapple", ["apple", "pen"])),
    print_bool(word_break("catsandog", ["cats", "dog", "sand", "and", "cat"])),
    print_bool(word_break("cars", ["car", "ca", "rs"])),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
