#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, count_assignments/3, count_no_of_ways/1, main/0]).

% Generated by Mochi transpiler v0.10.62 (375502c276) on 2025-08-09 15:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

count_assignments(Person, Task_performed, Used) ->
    try
        case (Person == erlang:length(Task_performed)) of
        true -> throw({return, 1});
        _ -> ok
    end,
        Total = 0,
        Tasks = (case erlang:is_map(Task_performed) of true -> maps:get(Person, Task_performed, nil); _ -> case Person < 0 of true -> mochi_nth(erlang:length(Task_performed) + Person + 1, Task_performed); _ -> mochi_nth(Person + 1, Task_performed) end end),
        I = 0,
        Fun = fun Fun_loop(I, Person, Task_performed, Tasks, Total, Used) ->
    case (I < erlang:length(Tasks)) of
        true ->
            T = (case erlang:is_map(Tasks) of true -> maps:get(I, Tasks, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Tasks) + I + 1, Tasks); _ -> mochi_nth(I + 1, Tasks) end end),
            case mochi_not(mochi_member(T, Used)) of
        true -> Total_2 = (Total + count_assignments((Person + 1), Task_performed, lists:append((case Used of nil -> []; _ -> Used end), [T]))),
            Total_3 = Total_2;
        _ -> Total_3 = Total
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Person, Task_performed, Tasks, Total_3, Used);
        _ -> {I, Person, Task_performed, Tasks, Total, Used}
    end
end,
{I_2, Person, Task_performed, Tasks, Total_3, Used} = Fun(I, Person, Task_performed, Tasks, Total, Used),
        Total_3
    catch {return, RetCatch} -> RetCatch end.

count_no_of_ways(Task_performed_2) ->
    try
        count_assignments(0, Task_performed_2, [])
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Task_performed_3 = [[1, 3, 4], [1, 2, 5], [3, 4]],
        io:format("~ts~n", [mochi_str(count_no_of_ways(Task_performed_3))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
