#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, min_partitions/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

min_partitions(S) ->
    try
        N = erlang:length(S),
        Cut = [],
        I = 0,
        Fun = fun Fun_loop(Cut, I, N, S) ->
    case (I < N) of
        true ->
            Cut_2 = lists:append((case Cut of nil -> []; _ -> Cut end), [0]),
            I_2 = (I + 1),
            Fun_loop(Cut_2, I_2, N, S);
        _ -> {Cut, I, N, S}
    end
end,
{Cut_2, I_2, N, S} = Fun(Cut, I, N, S),
        Pal = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Cut_2, I_3, N, Pal, S) ->
    case (I_3 < N) of
        true ->
            Row = [],
            J = 0,
            Fun_2 = fun Fun_2_loop(Cut_2, I_3, J, N, Pal, Row, S) ->
    case (J < N) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [false]),
            J_2 = (J + 1),
            Fun_2_loop(Cut_2, I_3, J_2, N, Pal, Row_2, S);
        _ -> {Cut_2, I_3, J, N, Pal, Row, S}
    end
end,
{Cut_2, I_3, J_2, N, Pal, Row_2, S} = Fun_2(Cut_2, I_3, J, N, Pal, Row, S),
            Pal_2 = lists:append((case Pal of nil -> []; _ -> Pal end), [Row_2]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Cut_2, I_4, N, Pal_2, S);
        _ -> {Cut_2, I_3, N, Pal, S}
    end
end,
{Cut_2, I_4, N, Pal_2, S} = Fun_3(Cut_2, I_3, N, Pal, S),
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Cut_2, I_5, N, Pal_2, S) ->
    case (I_5 < N) of
        true ->
            Mincut = I_5,
            J_3 = 0,
            Fun_4 = fun Fun_4_loop(Cut_2, I_5, J_3, Mincut, N, Pal_2, S) ->
    case (J_3 =< I_5) of
        true ->
            case ((string:substr(S, I_5 + 1, 1) == string:substr(S, J_3 + 1, 1)) andalso (((I_5 - J_3) < 2) orelse (case erlang:is_map((case erlang:is_map(Pal_2) of true -> maps:get((J_3 + 1), Pal_2, nil); _ -> case (J_3 + 1) < 0 of true -> lists:nth(erlang:length(Pal_2) + (J_3 + 1) + 1, Pal_2); _ -> lists:nth((J_3 + 1) + 1, Pal_2) end end)) of true -> maps:get((I_5 - 1), (case erlang:is_map(Pal_2) of true -> maps:get((J_3 + 1), Pal_2, nil); _ -> case (J_3 + 1) < 0 of true -> lists:nth(erlang:length(Pal_2) + (J_3 + 1) + 1, Pal_2); _ -> lists:nth((J_3 + 1) + 1, Pal_2) end end), nil); _ -> case (I_5 - 1) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Pal_2) of true -> maps:get((J_3 + 1), Pal_2, nil); _ -> case (J_3 + 1) < 0 of true -> lists:nth(erlang:length(Pal_2) + (J_3 + 1) + 1, Pal_2); _ -> lists:nth((J_3 + 1) + 1, Pal_2) end end)) + (I_5 - 1) + 1, (case erlang:is_map(Pal_2) of true -> maps:get((J_3 + 1), Pal_2, nil); _ -> case (J_3 + 1) < 0 of true -> lists:nth(erlang:length(Pal_2) + (J_3 + 1) + 1, Pal_2); _ -> lists:nth((J_3 + 1) + 1, Pal_2) end end)); _ -> lists:nth((I_5 - 1) + 1, (case erlang:is_map(Pal_2) of true -> maps:get((J_3 + 1), Pal_2, nil); _ -> case (J_3 + 1) < 0 of true -> lists:nth(erlang:length(Pal_2) + (J_3 + 1) + 1, Pal_2); _ -> lists:nth((J_3 + 1) + 1, Pal_2) end end)) end end))) of
        true -> Pal_3 = lists:sublist(Pal_2, J_3) ++ [lists:sublist(lists:nth(J_3 + 1, Pal_2), I_5) ++ [true] ++ lists:nthtail(I_5 + 1, lists:nth(J_3 + 1, Pal_2))] ++ lists:nthtail(J_3 + 1, Pal_2),
            case (J_3 == 0) of
        true -> Mincut_2 = 0,
            Candidate_2 = nil,
            Mincut_5 = Mincut_2;
        _ -> Candidate = ((case erlang:is_map(Cut_2) of true -> maps:get((J_3 - 1), Cut_2, nil); _ -> case (J_3 - 1) < 0 of true -> lists:nth(erlang:length(Cut_2) + (J_3 - 1) + 1, Cut_2); _ -> lists:nth((J_3 - 1) + 1, Cut_2) end end) + 1),
            case (Candidate < Mincut) of
        true -> Mincut_3 = Candidate,
            Mincut_4 = Mincut_3;
        _ -> Mincut_4 = Mincut
    end,
            Candidate_2 = Candidate,
            Mincut_5 = Mincut_4
    end,
            Candidate_3 = Candidate_2,
            Mincut_6 = Mincut_5,
            Pal_4 = Pal_3;
        _ -> Candidate_3 = nil,
            Mincut_6 = Mincut,
            Pal_4 = Pal_2
    end,
            J_4 = (J_3 + 1),
            Fun_4_loop(Cut_2, I_5, J_4, Mincut_6, N, Pal_4, S);
        _ -> {Cut_2, I_5, J_3, Mincut, N, Pal_2, S}
    end
end,
{Cut_2, I_5, J_4, Mincut_6, N, Pal_4, S} = Fun_4(Cut_2, I_5, J_3, Mincut, N, Pal_2, S),
            Cut_3 = lists:sublist(Cut_2, I_5) ++ [Mincut_6] ++ lists:nthtail(I_5 + 1, Cut_2),
            I_6 = (I_5 + 1),
            Fun_5_loop(Cut_3, I_6, N, Pal_4, S);
        _ -> {Cut_2, I_5, N, Pal_2, S}
    end
end,
{Cut_3, I_6, N, Pal_4, S} = Fun_5(Cut_2, I_5, N, Pal_2, S),
        (case erlang:is_map(Cut_3) of true -> maps:get((N - 1), Cut_3, nil); _ -> case (N - 1) < 0 of true -> lists:nth(erlang:length(Cut_3) + (N - 1) + 1, Cut_3); _ -> lists:nth((N - 1) + 1, Cut_3) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(min_partitions("aab"))]),
    io:format("~ts~n", [mochi_repr(min_partitions("aaa"))]),
    io:format("~ts~n", [mochi_repr(min_partitions("ababbbabbababa"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
