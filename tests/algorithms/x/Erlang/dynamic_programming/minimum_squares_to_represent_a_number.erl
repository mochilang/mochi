#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_list/2, int_sqrt/1, minimum_squares_to_represent_a_number/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

make_list(Len, Value) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, Len, Value) ->
    case (I < Len) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [Value]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, I_2, Len, Value);
        _ -> {Arr, I, Len, Value}
    end
end,
{Arr_2, I_2, Len, Value} = Fun(Arr, I, Len, Value),
        Arr_2
    catch {return, Ret} -> Ret end.

int_sqrt(N) ->
    try
        R = 0,
        Fun_2 = fun Fun_2_loop(N, R) ->
    case (((R + 1) * (R + 1)) =< N) of
        true ->
            R_2 = (R + 1),
            Fun_2_loop(N, R_2);
        _ -> {N, R}
    end
end,
{N, R_2} = Fun_2(N, R),
        R_2
    catch {return, Ret} -> Ret end.

minimum_squares_to_represent_a_number(Number) ->
    try
        case (Number < 0) of
        true -> erlang:error("the value of input must not be a negative number");
        _ -> ok
    end,
        case (Number == 0) of
        true -> throw({return, 1});
        _ -> ok
    end,
        Answers = make_list((Number + 1), -1),
        Answers_2 = lists:sublist(Answers, 0) ++ [0] ++ lists:nthtail(0 + 1, Answers),
        I_3 = 1,
        Fun_4 = fun Fun_4_loop(Answers_2, I_3, Number) ->
    case (I_3 =< Number) of
        true ->
            Answer = I_3,
            Root = int_sqrt(I_3),
            J = 1,
            Fun_3 = fun Fun_3_loop(Answer, Answers_2, I_3, J, Number, Root) ->
    case (J =< Root) of
        true ->
            Current_answer = (1 + (case erlang:is_map(Answers_2) of true -> maps:get((I_3 - (J * J)), Answers_2, nil); _ -> case (I_3 - (J * J)) < 0 of true -> lists:nth(erlang:length(Answers_2) + (I_3 - (J * J)) + 1, Answers_2); _ -> lists:nth((I_3 - (J * J)) + 1, Answers_2) end end)),
            case (Current_answer < Answer) of
        true -> Answer_2 = Current_answer,
            Answer_3 = Answer_2;
        _ -> Answer_3 = Answer
    end,
            J_2 = (J + 1),
            Fun_3_loop(Answer_3, Answers_2, I_3, J_2, Number, Root);
        _ -> {Answer, Answers_2, I_3, J, Number, Root}
    end
end,
{Answer_3, Answers_2, I_3, J_2, Number, Root} = Fun_3(Answer, Answers_2, I_3, J, Number, Root),
            Answers_3 = lists:sublist(Answers_2, I_3) ++ [Answer_3] ++ lists:nthtail(I_3 + 1, Answers_2),
            I_4 = (I_3 + 1),
            Fun_4_loop(Answers_3, I_4, Number);
        _ -> {Answers_2, I_3, Number}
    end
end,
{Answers_3, I_4, Number} = Fun_4(Answers_2, I_3, Number),
        (case erlang:is_map(Answers_3) of true -> maps:get(Number, Answers_3, nil); _ -> case Number < 0 of true -> lists:nth(erlang:length(Answers_3) + Number + 1, Answers_3); _ -> lists:nth(Number + 1, Answers_3) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(minimum_squares_to_represent_a_number(25))]),
    io:format("~ts~n", [mochi_repr(minimum_squares_to_represent_a_number(21))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
