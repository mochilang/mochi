#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, create_fibonacci/0, fib_get/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

create_fibonacci() ->
    try
        #{"sequence" => [0, 1]}
    catch {return, Ret} -> Ret end.

fib_get(F, Index) ->
    try
        Seq = maps:get("sequence", F, nil),
        Fun = fun Fun_loop(F, Index, Seq) ->
    case (erlang:length(Seq) < Index) of
        true ->
            Next = ((case erlang:is_map(Seq) of true -> maps:get((erlang:length(Seq) - 1), Seq, nil); _ -> case (erlang:length(Seq) - 1) < 0 of true -> lists:nth(erlang:length(Seq) + (erlang:length(Seq) - 1) + 1, Seq); _ -> lists:nth((erlang:length(Seq) - 1) + 1, Seq) end end) + (case erlang:is_map(Seq) of true -> maps:get((erlang:length(Seq) - 2), Seq, nil); _ -> case (erlang:length(Seq) - 2) < 0 of true -> lists:nth(erlang:length(Seq) + (erlang:length(Seq) - 2) + 1, Seq); _ -> lists:nth((erlang:length(Seq) - 2) + 1, Seq) end end)),
            Seq_2 = lists:append((case Seq of nil -> []; _ -> Seq end), [Next]),
            Fun_loop(F, Index, Seq_2);
        _ -> {F, Index, Seq}
    end
end,
{F, Index, Seq_2} = Fun(F, Index, Seq),
        F_2 = maps:put("sequence", Seq_2, F),
        Result = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(F_2, I, Index, Result, Seq_2) ->
    case (I < Index) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Seq_2) of true -> maps:get(I, Seq_2, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Seq_2) + I + 1, Seq_2); _ -> lists:nth(I + 1, Seq_2) end end)]),
            I_2 = (I + 1),
            Fun_2_loop(F_2, I_2, Index, Result_2, Seq_2);
        _ -> {F_2, I, Index, Result, Seq_2}
    end
end,
{F_2, I_2, Index, Result_2, Seq_2} = Fun_2(F_2, I, Index, Result, Seq_2),
        #{"fib" => F_2, "values" => Result_2}
    catch {return, Ret} -> Ret end.

main() ->
    try
        Fib = create_fibonacci(),
        Res = fib_get(Fib, 10),
        Fib_2 = maps:get("fib", Res, nil),
        io:format("~ts~n", [mochi_str(maps:get("values", Res, nil))]),
        Res_2 = fib_get(Fib_2, 5),
        Fib_3 = maps:get("fib", Res_2, nil),
        io:format("~ts~n", [mochi_str(maps:get("values", Res_2, nil))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
