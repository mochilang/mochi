#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/2, ord/1, chr/1, to_upper_char/1, is_lower/1, abbr/2, print_bool/1]).

% Generated by Mochi transpiler v0.10.62 (375502c276) on 2025-08-09 15:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

index_of(S, Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I, S) ->
    case (I < erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, 1) == Ch) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2, S);
        _ -> {Ch, I, S}
    end
end,
{Ch, I_2, S} = Fun(Ch, I, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

ord(Ch_2) ->
    try
        Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower = "abcdefghijklmnopqrstuvwxyz",
        Idx = index_of("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Ch_2),
        case (Idx >= 0) of
        true -> throw({return, (65 + Idx)});
        _ -> ok
    end,
        Idx_2 = index_of("abcdefghijklmnopqrstuvwxyz", Ch_2),
        case (Idx_2 >= 0) of
        true -> throw({return, (97 + Idx_2)});
        _ -> ok
    end,
        0
    catch {return, RetCatch} -> RetCatch end.

chr(N) ->
    try
        Upper_2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Lower_2 = "abcdefghijklmnopqrstuvwxyz",
        case ((N >= 65) andalso (N < 91)) of
        true -> throw({return, string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", (N - 65) + 1, ((N - 64) - (N - 65)))});
        _ -> ok
    end,
        case ((N >= 97) andalso (N < 123)) of
        true -> throw({return, string:substr("abcdefghijklmnopqrstuvwxyz", (N - 97) + 1, ((N - 96) - (N - 97)))});
        _ -> ok
    end,
        "?"
    catch {return, RetCatch} -> RetCatch end.

to_upper_char(C) ->
    try
        Code = ord(C),
        case ((Code >= 97) andalso (Code =< 122)) of
        true -> throw({return, chr((Code - 32))});
        _ -> ok
    end,
        C
    catch {return, RetCatch} -> RetCatch end.

is_lower(C_2) ->
    try
        Code_2 = ord(C_2),
        ((Code_2 >= 97) andalso (Code_2 =< 122))
    catch {return, RetCatch} -> RetCatch end.

abbr(A, B) ->
    try
        N_2 = erlang:length(A),
        M = erlang:length(B),
        Dp = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(A, B, Dp, I_3, M, N_2) ->
    case (I_3 =< N_2) of
        true ->
            Row = [],
            J = 0,
            Fun_2 = fun Fun_2_loop(A, B, Dp, I_3, J, M, N_2, Row) ->
    case (J =< M) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [false]),
            J_2 = (J + 1),
            Fun_2_loop(A, B, Dp, I_3, J_2, M, N_2, Row_2);
        _ -> {A, B, Dp, I_3, J, M, N_2, Row}
    end
end,
{A, B, Dp, I_3, J_2, M, N_2, Row_2} = Fun_2(A, B, Dp, I_3, J, M, N_2, Row),
            Dp_2 = lists:append((case Dp of nil -> []; _ -> Dp end), [Row_2]),
            I_4 = (I_3 + 1),
            Fun_3_loop(A, B, Dp_2, I_4, M, N_2);
        _ -> {A, B, Dp, I_3, M, N_2}
    end
end,
{A, B, Dp_2, I_4, M, N_2} = Fun_3(A, B, Dp, I_3, M, N_2),
        Dp_3 = lists:sublist(Dp_2, 0) ++ [lists:sublist(lists:nth(0 + 1, Dp_2), 0) ++ [true] ++ lists:nthtail(0 + 1, lists:nth(0 + 1, Dp_2))] ++ lists:nthtail(0 + 1, Dp_2),
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(A, B, Dp_3, I_5, M, N_2) ->
    case (I_5 < N_2) of
        true ->
            J_3 = 0,
            Fun_4 = fun Fun_4_loop(A, B, Dp_3, I_5, J_3, M, N_2) ->
    case (J_3 =< M) of
        true ->
            case (case erlang:is_map((case erlang:is_map(Dp_3) of true -> maps:get(I_5, Dp_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dp_3) + I_5 + 1, Dp_3); _ -> mochi_nth(I_5 + 1, Dp_3) end end)) of true -> maps:get(J_3, (case erlang:is_map(Dp_3) of true -> maps:get(I_5, Dp_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dp_3) + I_5 + 1, Dp_3); _ -> mochi_nth(I_5 + 1, Dp_3) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_3) of true -> maps:get(I_5, Dp_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dp_3) + I_5 + 1, Dp_3); _ -> mochi_nth(I_5 + 1, Dp_3) end end)) + J_3 + 1, (case erlang:is_map(Dp_3) of true -> maps:get(I_5, Dp_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dp_3) + I_5 + 1, Dp_3); _ -> mochi_nth(I_5 + 1, Dp_3) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Dp_3) of true -> maps:get(I_5, Dp_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Dp_3) + I_5 + 1, Dp_3); _ -> mochi_nth(I_5 + 1, Dp_3) end end)) end end) of
        true -> case ((J_3 < M) andalso (to_upper_char(string:substr(A, I_5 + 1, 1)) == string:substr(B, J_3 + 1, 1))) of
        true -> Dp_4 = lists:sublist(Dp_3, (I_5 + 1)) ++ [lists:sublist(lists:nth((I_5 + 1) + 1, Dp_3), (J_3 + 1)) ++ [true] ++ lists:nthtail((J_3 + 1) + 1, lists:nth((I_5 + 1) + 1, Dp_3))] ++ lists:nthtail((I_5 + 1) + 1, Dp_3),
            Dp_5 = Dp_4;
        _ -> Dp_5 = Dp_3
    end,
            case is_lower(string:substr(A, I_5 + 1, 1)) of
        true -> Dp_6 = lists:sublist(Dp_5, (I_5 + 1)) ++ [lists:sublist(lists:nth((I_5 + 1) + 1, Dp_5), J_3) ++ [true] ++ lists:nthtail(J_3 + 1, lists:nth((I_5 + 1) + 1, Dp_5))] ++ lists:nthtail((I_5 + 1) + 1, Dp_5),
            Dp_7 = Dp_6;
        _ -> Dp_7 = Dp_5
    end,
            Dp_8 = Dp_7;
        _ -> Dp_8 = Dp_3
    end,
            J_4 = (J_3 + 1),
            Fun_4_loop(A, B, Dp_8, I_5, J_4, M, N_2);
        _ -> {A, B, Dp_3, I_5, J_3, M, N_2}
    end
end,
{A, B, Dp_8, I_5, J_4, M, N_2} = Fun_4(A, B, Dp_3, I_5, J_3, M, N_2),
            I_6 = (I_5 + 1),
            Fun_5_loop(A, B, Dp_8, I_6, M, N_2);
        _ -> {A, B, Dp_3, I_5, M, N_2}
    end
end,
{A, B, Dp_8, I_6, M, N_2} = Fun_5(A, B, Dp_3, I_5, M, N_2),
        (case erlang:is_map((case erlang:is_map(Dp_8) of true -> maps:get(N_2, Dp_8, nil); _ -> case N_2 < 0 of true -> mochi_nth(erlang:length(Dp_8) + N_2 + 1, Dp_8); _ -> mochi_nth(N_2 + 1, Dp_8) end end)) of true -> maps:get(M, (case erlang:is_map(Dp_8) of true -> maps:get(N_2, Dp_8, nil); _ -> case N_2 < 0 of true -> mochi_nth(erlang:length(Dp_8) + N_2 + 1, Dp_8); _ -> mochi_nth(N_2 + 1, Dp_8) end end), nil); _ -> case M < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_8) of true -> maps:get(N_2, Dp_8, nil); _ -> case N_2 < 0 of true -> mochi_nth(erlang:length(Dp_8) + N_2 + 1, Dp_8); _ -> mochi_nth(N_2 + 1, Dp_8) end end)) + M + 1, (case erlang:is_map(Dp_8) of true -> maps:get(N_2, Dp_8, nil); _ -> case N_2 < 0 of true -> mochi_nth(erlang:length(Dp_8) + N_2 + 1, Dp_8); _ -> mochi_nth(N_2 + 1, Dp_8) end end)); _ -> mochi_nth(M + 1, (case erlang:is_map(Dp_8) of true -> maps:get(N_2, Dp_8, nil); _ -> case N_2 < 0 of true -> mochi_nth(erlang:length(Dp_8) + N_2 + 1, Dp_8); _ -> mochi_nth(N_2 + 1, Dp_8) end end)) end end)
    catch {return, RetCatch} -> RetCatch end.

print_bool(B_2) ->
    try
        case B_2 of
        true -> io:format("~ts~n", [mochi_repr(true)]);
        _ -> io:format("~ts~n", [mochi_repr(false)])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    print_bool(abbr("daBcd", "ABC")),
    print_bool(abbr("dBcd", "ABC")),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
