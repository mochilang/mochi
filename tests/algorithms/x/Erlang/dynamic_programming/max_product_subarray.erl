#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, max_product_subarray/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

max_product_subarray(Numbers) ->
    try
        case (erlang:length(Numbers) == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Max_till_now = (case erlang:is_map(Numbers) of true -> maps:get(0, Numbers, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Numbers) + 0 + 1, Numbers); _ -> lists:nth(0 + 1, Numbers) end end),
        Min_till_now = (case erlang:is_map(Numbers) of true -> maps:get(0, Numbers, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Numbers) + 0 + 1, Numbers); _ -> lists:nth(0 + 1, Numbers) end end),
        Max_prod = (case erlang:is_map(Numbers) of true -> maps:get(0, Numbers, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Numbers) + 0 + 1, Numbers); _ -> lists:nth(0 + 1, Numbers) end end),
        I = 1,
        Fun = fun Fun_loop(I, Max_prod, Max_till_now, Min_till_now, Numbers) ->
    case (I < erlang:length(Numbers)) of
        true ->
            Number = (case erlang:is_map(Numbers) of true -> maps:get(I, Numbers, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Numbers) + I + 1, Numbers); _ -> lists:nth(I + 1, Numbers) end end),
            case (Number < 0) of
        true -> Temp = Max_till_now,
            Max_till_now_2 = Min_till_now,
            Min_till_now_2 = Temp,
            Max_till_now_3 = Max_till_now_2,
            Min_till_now_3 = Min_till_now_2,
            Temp_2 = Temp;
        _ -> Max_till_now_3 = Max_till_now,
            Min_till_now_3 = Min_till_now,
            Temp_2 = nil
    end,
            Prod_max = (Max_till_now_3 * Number),
            case (Number > Prod_max) of
        true -> Max_till_now_4 = Number,
            Max_till_now_6 = Max_till_now_4;
        _ -> Max_till_now_5 = Prod_max,
            Max_till_now_6 = Max_till_now_5
    end,
            Prod_min = (Min_till_now_3 * Number),
            case (Number < Prod_min) of
        true -> Min_till_now_4 = Number,
            Min_till_now_6 = Min_till_now_4;
        _ -> Min_till_now_5 = Prod_min,
            Min_till_now_6 = Min_till_now_5
    end,
            case (Max_till_now_6 > Max_prod) of
        true -> Max_prod_2 = Max_till_now_6,
            Max_prod_3 = Max_prod_2;
        _ -> Max_prod_3 = Max_prod
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Max_prod_3, Max_till_now_6, Min_till_now_6, Numbers);
        _ -> {I, Max_prod, Max_till_now, Min_till_now, Numbers}
    end
end,
{I_2, Max_prod_3, Max_till_now_6, Min_till_now_6, Numbers} = Fun(I, Max_prod, Max_till_now, Min_till_now, Numbers),
        Max_prod_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(max_product_subarray([2, 3, -2, 4]))]),
    io:format("~ts~n", [mochi_repr(max_product_subarray([-2, 0, -1]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
