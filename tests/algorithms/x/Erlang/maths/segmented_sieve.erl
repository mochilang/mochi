#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, min_int/2, int_sqrt/1, sieve/1, lists_equal/2, test_sieve/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

min_int(A, B) ->
    try
        (case (A < B) of
    true -> A;
    _ -> B
end)
    catch {return, Ret} -> Ret end.

int_sqrt(N) ->
    try
        R = 0,
        Fun = fun Fun_loop(N, R) ->
    case (((R + 1) * (R + 1)) =< N) of
        true ->
            R_2 = (R + 1),
            Fun_loop(N, R_2);
        _ -> {N, R}
    end
end,
{N, R_2} = Fun(N, R),
        R_2
    catch {return, Ret} -> Ret end.

sieve(N_2) ->
    try
        case (N_2 =< 0) of
        true -> erlang:error("Number must instead be a positive integer");
        _ -> ok
    end,
        In_prime = [],
        Start = 2,
        End = int_sqrt(N_2),
        Temp = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(End, I, In_prime, N_2, Start, Temp) ->
    case (I < (End + 1)) of
        true ->
            Temp_2 = lists:append((case Temp of nil -> []; _ -> Temp end), [1]),
            I_2 = (I + 1),
            Fun_2_loop(End, I_2, In_prime, N_2, Start, Temp_2);
        _ -> {End, I, In_prime, N_2, Start, Temp}
    end
end,
{End, I_2, In_prime, N_2, Start, Temp_2} = Fun_2(End, I, In_prime, N_2, Start, Temp),
        Prime = [],
        Fun_5 = fun Fun_5_loop(End, I_2, In_prime, N_2, Prime, Start, Temp_2) ->
    case (Start =< End) of
        true ->
            case ((case erlang:is_map(Temp_2) of true -> maps:get(Start, Temp_2, nil); _ -> case Start < 0 of true -> mochi_nth(erlang:length(Temp_2) + Start + 1, Temp_2); _ -> mochi_nth(Start + 1, Temp_2) end end) == 1) of
        true -> In_prime_2 = lists:append((case In_prime of nil -> []; _ -> In_prime end), [Start]),
            J = (Start * Start),
            Fun_3 = fun Fun_3_loop(End, I_2, In_prime_2, J, N_2, Prime, Start, Temp_2) ->
    case (J =< End) of
        true ->
            Temp_3 = lists:sublist(Temp_2, J) ++ [0] ++ lists:nthtail(J + 1, Temp_2),
            J_2 = (J + Start),
            Fun_3_loop(End, I_2, In_prime_2, J_2, N_2, Prime, Start, Temp_3);
        _ -> {End, I_2, In_prime_2, J, N_2, Prime, Start, Temp_2}
    end
end,
{End, I_2, In_prime_2, J_2, N_2, Prime, Start, Temp_3} = Fun_3(End, I_2, In_prime_2, J, N_2, Prime, Start, Temp_2),
            Fun_4 = Fun_3,
            In_prime_3 = In_prime_2,
            J_3 = J_2,
            Temp_4 = Temp_3;
        _ -> Fun_4 = Fun_2,
            In_prime_3 = In_prime,
            J_3 = nil,
            Temp_4 = Temp_2
    end,
            Start_2 = (Start + 1),
            Fun_5_loop(End, I_2, In_prime_3, N_2, Prime, Start_2, Temp_4);
        _ -> {End, I_2, In_prime, N_2, Prime, Start, Temp_2}
    end
end,
{End, I_2, In_prime_3, N_2, Prime, Start_2, Temp_4} = Fun_5(End, I_2, In_prime, N_2, Prime, Start, Temp_2),
        I_3 = 0,
        Fun_6 = fun Fun_6_loop(End, I_3, In_prime_3, N_2, Prime, Start_2, Temp_4) ->
    case (I_3 < erlang:length(In_prime_3)) of
        true ->
            Prime_2 = lists:append((case Prime of nil -> []; _ -> Prime end), [(case erlang:is_map(In_prime_3) of true -> maps:get(I_3, In_prime_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(In_prime_3) + I_3 + 1, In_prime_3); _ -> mochi_nth(I_3 + 1, In_prime_3) end end)]),
            I_4 = (I_3 + 1),
            Fun_6_loop(End, I_4, In_prime_3, N_2, Prime_2, Start_2, Temp_4);
        _ -> {End, I_3, In_prime_3, N_2, Prime, Start_2, Temp_4}
    end
end,
{End, I_4, In_prime_3, N_2, Prime_2, Start_2, Temp_4} = Fun_6(End, I_3, In_prime_3, N_2, Prime, Start_2, Temp_4),
        Low = (End + 1),
        High = min_int((2 * End), N_2),
        Fun_11 = fun Fun_11_loop(End, High, I_4, In_prime_3, Low, N_2, Prime_2, Start_2, Temp_4) ->
    case (Low =< N_2) of
        true ->
            TempSeg = [],
            Size = ((High - Low) + 1),
            K = 0,
            Fun_7 = fun Fun_7_loop(End, High, I_4, In_prime_3, K, Low, N_2, Prime_2, Size, Start_2, Temp_4, TempSeg) ->
    case (K < Size) of
        true ->
            TempSeg_2 = lists:append((case TempSeg of nil -> []; _ -> TempSeg end), [1]),
            K_2 = (K + 1),
            Fun_7_loop(End, High, I_4, In_prime_3, K_2, Low, N_2, Prime_2, Size, Start_2, Temp_4, TempSeg_2);
        _ -> {End, High, I_4, In_prime_3, K, Low, N_2, Prime_2, Size, Start_2, Temp_4, TempSeg}
    end
end,
{End, High, I_4, In_prime_3, K_2, Low, N_2, Prime_2, Size, Start_2, Temp_4, TempSeg_2} = Fun_7(End, High, I_4, In_prime_3, K, Low, N_2, Prime_2, Size, Start_2, Temp_4, TempSeg),
            Idx = 0,
            Fun_9 = fun Fun_9_loop(End, High, I_4, Idx, In_prime_3, K_2, Low, N_2, Prime_2, Size, Start_2, Temp_4, TempSeg_2) ->
    case (Idx < erlang:length(In_prime_3)) of
        true ->
            Each = (case erlang:is_map(In_prime_3) of true -> maps:get(Idx, In_prime_3, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(In_prime_3) + Idx + 1, In_prime_3); _ -> mochi_nth(Idx + 1, In_prime_3) end end),
            T = ((Low div Each) * Each),
            case (T < Low) of
        true -> T_2 = (T + Each),
            T_3 = T_2;
        _ -> T_3 = T
    end,
            J2 = T_3,
            Fun_8 = fun Fun_8_loop(Each, End, High, I_4, Idx, In_prime_3, J2, K_2, Low, N_2, Prime_2, Size, Start_2, T_3, Temp_4, TempSeg_2) ->
    case (J2 =< High) of
        true ->
            TempSeg_3 = lists:sublist(TempSeg_2, (J2 - Low)) ++ [0] ++ lists:nthtail((J2 - Low) + 1, TempSeg_2),
            J2_2 = (J2 + Each),
            Fun_8_loop(Each, End, High, I_4, Idx, In_prime_3, J2_2, K_2, Low, N_2, Prime_2, Size, Start_2, T_3, Temp_4, TempSeg_3);
        _ -> {Each, End, High, I_4, Idx, In_prime_3, J2, K_2, Low, N_2, Prime_2, Size, Start_2, T_3, Temp_4, TempSeg_2}
    end
end,
{Each, End, High, I_4, Idx, In_prime_3, J2_2, K_2, Low, N_2, Prime_2, Size, Start_2, T_3, Temp_4, TempSeg_3} = Fun_8(Each, End, High, I_4, Idx, In_prime_3, J2, K_2, Low, N_2, Prime_2, Size, Start_2, T_3, Temp_4, TempSeg_2),
            Idx_2 = (Idx + 1),
            Fun_9_loop(End, High, I_4, Idx_2, In_prime_3, K_2, Low, N_2, Prime_2, Size, Start_2, Temp_4, TempSeg_3);
        _ -> {End, High, I_4, Idx, In_prime_3, K_2, Low, N_2, Prime_2, Size, Start_2, Temp_4, TempSeg_2}
    end
end,
{End, High, I_4, Idx_2, In_prime_3, K_2, Low, N_2, Prime_2, Size, Start_2, Temp_4, TempSeg_3} = Fun_9(End, High, I_4, Idx, In_prime_3, K_2, Low, N_2, Prime_2, Size, Start_2, Temp_4, TempSeg_2),
            J3 = 0,
            Fun_10 = fun Fun_10_loop(End, High, I_4, Idx_2, In_prime_3, J3, K_2, Low, N_2, Prime_2, Size, Start_2, Temp_4, TempSeg_3) ->
    case (J3 < erlang:length(TempSeg_3)) of
        true ->
            case ((case erlang:is_map(TempSeg_3) of true -> maps:get(J3, TempSeg_3, nil); _ -> case J3 < 0 of true -> mochi_nth(erlang:length(TempSeg_3) + J3 + 1, TempSeg_3); _ -> mochi_nth(J3 + 1, TempSeg_3) end end) == 1) of
        true -> Prime_3 = lists:append((case Prime_2 of nil -> []; _ -> Prime_2 end), [(J3 + Low)]),
            Prime_4 = Prime_3;
        _ -> Prime_4 = Prime_2
    end,
            J3_2 = (J3 + 1),
            Fun_10_loop(End, High, I_4, Idx_2, In_prime_3, J3_2, K_2, Low, N_2, Prime_4, Size, Start_2, Temp_4, TempSeg_3);
        _ -> {End, High, I_4, Idx_2, In_prime_3, J3, K_2, Low, N_2, Prime_2, Size, Start_2, Temp_4, TempSeg_3}
    end
end,
{End, High, I_4, Idx_2, In_prime_3, J3_2, K_2, Low, N_2, Prime_4, Size, Start_2, Temp_4, TempSeg_3} = Fun_10(End, High, I_4, Idx_2, In_prime_3, J3, K_2, Low, N_2, Prime_2, Size, Start_2, Temp_4, TempSeg_3),
            Low_2 = (High + 1),
            High_2 = min_int((High + End), N_2),
            Fun_11_loop(End, High_2, I_4, In_prime_3, Low_2, N_2, Prime_4, Start_2, Temp_4);
        _ -> {End, High, I_4, In_prime_3, Low, N_2, Prime_2, Start_2, Temp_4}
    end
end,
{End, High_2, I_4, In_prime_3, Low_2, N_2, Prime_4, Start_2, Temp_4} = Fun_11(End, High, I_4, In_prime_3, Low, N_2, Prime_2, Start_2, Temp_4),
        Prime_4
    catch {return, Ret} -> Ret end.

lists_equal(A_2, B_2) ->
    try
        case (erlang:length(A_2) /= erlang:length(B_2)) of
        true -> throw({return, false});
        _ -> ok
    end,
        M = 0,
        Fun_12 = fun Fun_12_loop(A_2, B_2, M) ->
    case (M < erlang:length(A_2)) of
        true ->
            case ((case erlang:is_map(A_2) of true -> maps:get(M, A_2, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(A_2) + M + 1, A_2); _ -> mochi_nth(M + 1, A_2) end end) /= (case erlang:is_map(B_2) of true -> maps:get(M, B_2, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(B_2) + M + 1, B_2); _ -> mochi_nth(M + 1, B_2) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            M_2 = (M + 1),
            Fun_12_loop(A_2, B_2, M_2);
        _ -> {A_2, B_2, M}
    end
end,
{A_2, B_2, M_2} = Fun_12(A_2, B_2, M),
        true
    catch {return, Ret} -> Ret end.

test_sieve() ->
    try
        E1 = sieve(8),
        case mochi_not(lists_equal(E1, [2, 3, 5, 7])) of
        true -> erlang:error("sieve(8) failed");
        _ -> ok
    end,
        E2 = sieve(27),
        case mochi_not(lists_equal(E2, [2, 3, 5, 7, 11, 13, 17, 19, 23])) of
        true -> erlang:error("sieve(27) failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_sieve(),
        io:format("~ts~n", [mochi_str(sieve(30))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
