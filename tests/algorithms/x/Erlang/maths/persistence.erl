#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, multiplicative_persistence/1, additive_persistence/1, test_persistence/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

multiplicative_persistence(Num) ->
    try
        case (Num < 0) of
        true -> erlang:error("multiplicative_persistence() does not accept negative values");
        _ -> ok
    end,
        Steps = 0,
        N = Num,
        Fun_2 = fun Fun_2_loop(N, Num, Steps) ->
    case (N >= 10) of
        true ->
            Product = 1,
            Temp = N,
            Fun = fun Fun_loop(N, Num, Product, Steps, Temp) ->
    case (Temp > 0) of
        true ->
            Digit = mochi_mod(Temp, 10),
            Product_2 = (Product * Digit),
            Temp_2 = (Temp div 10),
            Fun_loop(N, Num, Product_2, Steps, Temp_2);
        _ -> {N, Num, Product, Steps, Temp}
    end
end,
{N, Num, Product_2, Steps, Temp_2} = Fun(N, Num, Product, Steps, Temp),
            N_2 = Product_2,
            Steps_2 = (Steps + 1),
            Fun_2_loop(N_2, Num, Steps_2);
        _ -> {N, Num, Steps}
    end
end,
{N_2, Num, Steps_2} = Fun_2(N, Num, Steps),
        Steps_2
    catch {return, Ret} -> Ret end.

additive_persistence(Num_2) ->
    try
        case (Num_2 < 0) of
        true -> erlang:error("additive_persistence() does not accept negative values");
        _ -> ok
    end,
        Steps_3 = 0,
        N_3 = Num_2,
        Fun_4 = fun Fun_4_loop(N_3, Num_2, Steps_3) ->
    case (N_3 >= 10) of
        true ->
            Total = 0,
            Temp_3 = N_3,
            Fun_3 = fun Fun_3_loop(N_3, Num_2, Steps_3, Temp_3, Total) ->
    case (Temp_3 > 0) of
        true ->
            Digit_2 = mochi_mod(Temp_3, 10),
            Total_2 = (Total + Digit_2),
            Temp_4 = (Temp_3 div 10),
            Fun_3_loop(N_3, Num_2, Steps_3, Temp_4, Total_2);
        _ -> {N_3, Num_2, Steps_3, Temp_3, Total}
    end
end,
{N_3, Num_2, Steps_3, Temp_4, Total_2} = Fun_3(N_3, Num_2, Steps_3, Temp_3, Total),
            N_4 = Total_2,
            Steps_4 = (Steps_3 + 1),
            Fun_4_loop(N_4, Num_2, Steps_4);
        _ -> {N_3, Num_2, Steps_3}
    end
end,
{N_4, Num_2, Steps_4} = Fun_4(N_3, Num_2, Steps_3),
        Steps_4
    catch {return, Ret} -> Ret end.

test_persistence() ->
    try
        case (multiplicative_persistence(217) /= 2) of
        true -> erlang:error("multiplicative_persistence failed");
        _ -> ok
    end,
        case (additive_persistence(199) /= 3) of
        true -> erlang:error("additive_persistence failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_persistence(),
        io:format("~ts~n", [mochi_str(multiplicative_persistence(217))]),
        io:format("~ts~n", [mochi_str(additive_persistence(199))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
