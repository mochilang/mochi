#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, prime_sieve_eratosthenes/1, list_eq/2, test_prime_sieve_eratosthenes/0, main/0]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

prime_sieve_eratosthenes(Num) ->
    try
        case (Num =< 0) of
        true -> erlang:error({panic, "Input must be a positive integer"});
        _ -> ok
    end,
        Primes = [],
        I = 0,
        Fun = fun Fun_loop(I, Num, Primes) ->
    case (I =< Num) of
        true ->
            Primes_2 = lists:append((case Primes of nil -> []; _ -> Primes end), [true]),
            I_2 = (I + 1),
            Fun_loop(I_2, Num, Primes_2);
        _ -> {I, Num, Primes}
    end
end,
{I_2, Num, Primes_2} = Fun(I, Num, Primes),
        P = 2,
        Fun_4 = fun Fun_4_loop(I_2, Num, P, Primes_2) ->
    case ((P * P) =< Num) of
        true ->
            Primes_4 = (case (case erlang:is_map(Primes_2) of true -> maps:get(P, Primes_2, nil); _ -> case P < 0 of true -> mochi_nth(erlang:length(Primes_2) + P + 1, Primes_2); _ -> mochi_nth(P + 1, Primes_2) end end) of
        true -> J = (P * P),
            Fun_2 = fun Fun_2_loop(I_2, J, Num, P, Primes_2) ->
    case (J =< Num) of
        true ->
            Primes_3 = lists:sublist(Primes_2, J) ++ [false] ++ lists:nthtail(J + 1, Primes_2),
            J_2 = (J + P),
            Fun_2_loop(I_2, J_2, Num, P, Primes_3);
        _ -> {I_2, J, Num, P, Primes_2}
    end
end,
{I_2, J_2, Num, P, Primes_3} = Fun_2(I_2, J, Num, P, Primes_2),
            Fun_3 = Fun_2,
            J_3 = J_2,
            Primes_3;
        _ -> Fun_3 = Fun,
            J_3 = nil,
            Primes_2
    end),
            P_2 = (P + 1),
            Fun_4_loop(I_2, Num, P_2, Primes_4);
        _ -> {I_2, Num, P, Primes_2}
    end
end,
{I_2, Num, P_2, Primes_4} = Fun_4(I_2, Num, P, Primes_2),
        Result = [],
        K = 2,
        Fun_5 = fun Fun_5_loop(I_2, K, Num, P_2, Primes_4, Result) ->
    case (K =< Num) of
        true ->
            Result_3 = (case (case erlang:is_map(Primes_4) of true -> maps:get(K, Primes_4, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Primes_4) + K + 1, Primes_4); _ -> mochi_nth(K + 1, Primes_4) end end) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [K]),
            Result_2;
        _ -> Result
    end),
            K_2 = (K + 1),
            Fun_5_loop(I_2, K_2, Num, P_2, Primes_4, Result_3);
        _ -> {I_2, K, Num, P_2, Primes_4, Result}
    end
end,
{I_2, K_2, Num, P_2, Primes_4, Result_3} = Fun_5(I_2, K, Num, P_2, Primes_4, Result),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

list_eq(A, B) ->
    try
        case (erlang:length(A) /= erlang:length(B)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_3 = 0,
        Fun_6 = fun Fun_6_loop(A, B, I_3) ->
    case (I_3 < erlang:length(A)) of
        true ->
            case ((case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end) /= (case erlang:is_map(B) of true -> maps:get(I_3, B, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(B) + I_3 + 1, B); _ -> mochi_nth(I_3 + 1, B) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_6_loop(A, B, I_4);
        _ -> {A, B, I_3}
    end
end,
{A, B, I_4} = Fun_6(A, B, I_3),
        true
    catch {return, RetCatch} -> RetCatch end.

test_prime_sieve_eratosthenes() ->
    try
        case mochi_not(list_eq(prime_sieve_eratosthenes(10), [2, 3, 5, 7])) of
        true -> erlang:error({panic, "test 10 failed"});
        _ -> ok
    end,
        case mochi_not(list_eq(prime_sieve_eratosthenes(20), [2, 3, 5, 7, 11, 13, 17, 19])) of
        true -> erlang:error({panic, "test 20 failed"});
        _ -> ok
    end,
        case mochi_not(list_eq(prime_sieve_eratosthenes(2), [2])) of
        true -> erlang:error({panic, "test 2 failed"});
        _ -> ok
    end,
        case (erlang:length(prime_sieve_eratosthenes(1)) /= 0) of
        true -> erlang:error({panic, "test 1 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_prime_sieve_eratosthenes(),
        io:format("~ts~n", [mochi_str(prime_sieve_eratosthenes(20))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
