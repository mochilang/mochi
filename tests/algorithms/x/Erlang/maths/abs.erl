#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, abs_val/1, abs_min/1, abs_max/1, abs_max_sort/1, test_abs_val/0, main/0]).

% Generated by Mochi transpiler v0.10.67 (24b0b70a80)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

abs_val(Num) ->
    try
        (case (Num < 0.0) of
    true -> -Num;
    _ -> Num
end)
    catch {return, RetCatch} -> RetCatch end.

abs_min(X) ->
    try
        case (erlang:length(X) == 0) of
        true -> erlang:error({panic, "abs_min() arg is an empty sequence"});
        _ -> ok
    end,
        J = (case erlang:is_map(X) of true -> maps:get(0, X, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(X) + 0 + 1, X); _ -> mochi_nth(0 + 1, X) end end),
        Idx = 0,
        Fun = fun Fun_loop(Idx, J, X) ->
    case (Idx < erlang:length(X)) of
        true ->
            I = (case erlang:is_map(X) of true -> maps:get(Idx, X, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(X) + Idx + 1, X); _ -> mochi_nth(Idx + 1, X) end end),
            J_3 = (case (abs_val(float(I)) < abs_val(float(J))) of
        true -> J_2 = I,
            J_2;
        _ -> J
    end),
            Idx_2 = (Idx + 1),
            Fun_loop(Idx_2, J_3, X);
        _ -> {Idx, J, X}
    end
end,
{Idx_2, J_3, X} = Fun(Idx, J, X),
        J_3
    catch {return, RetCatch} -> RetCatch end.

abs_max(X_2) ->
    try
        case (erlang:length(X_2) == 0) of
        true -> erlang:error({panic, "abs_max() arg is an empty sequence"});
        _ -> ok
    end,
        J_4 = (case erlang:is_map(X_2) of true -> maps:get(0, X_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(X_2) + 0 + 1, X_2); _ -> mochi_nth(0 + 1, X_2) end end),
        Idx_3 = 0,
        Fun_2 = fun Fun_2_loop(Idx_3, J_4, X_2) ->
    case (Idx_3 < erlang:length(X_2)) of
        true ->
            I_2 = (case erlang:is_map(X_2) of true -> maps:get(Idx_3, X_2, nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(X_2) + Idx_3 + 1, X_2); _ -> mochi_nth(Idx_3 + 1, X_2) end end),
            J_6 = (case (abs_val(float(I_2)) > abs_val(float(J_4))) of
        true -> J_5 = I_2,
            J_5;
        _ -> J_4
    end),
            Idx_4 = (Idx_3 + 1),
            Fun_2_loop(Idx_4, J_6, X_2);
        _ -> {Idx_3, J_4, X_2}
    end
end,
{Idx_4, J_6, X_2} = Fun_2(Idx_3, J_4, X_2),
        J_6
    catch {return, RetCatch} -> RetCatch end.

abs_max_sort(X_3) ->
    try
        case (erlang:length(X_3) == 0) of
        true -> erlang:error({panic, "abs_max_sort() arg is an empty sequence"});
        _ -> ok
    end,
        Arr = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Arr, I_3, X_3) ->
    case (I_3 < erlang:length(X_3)) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [(case erlang:is_map(X_3) of true -> maps:get(I_3, X_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(X_3) + I_3 + 1, X_3); _ -> mochi_nth(I_3 + 1, X_3) end end)]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Arr_2, I_4, X_3);
        _ -> {Arr, I_3, X_3}
    end
end,
{Arr_2, I_4, X_3} = Fun_3(Arr, I_3, X_3),
        N = erlang:length(Arr_2),
        A = 0,
        Fun_5 = fun Fun_5_loop(A, Arr_2, I_4, N, X_3) ->
    case (A < N) of
        true ->
            B = 0,
            Fun_4 = fun Fun_4_loop(A, Arr_2, B, I_4, N, X_3) ->
    case (B < ((N - A) - 1)) of
        true ->
            Temp_2 = (case (abs_val(float((case erlang:is_map(Arr_2) of true -> maps:get(B, Arr_2, nil); _ -> case B < 0 of true -> mochi_nth(erlang:length(Arr_2) + B + 1, Arr_2); _ -> mochi_nth(B + 1, Arr_2) end end))) > abs_val(float((case erlang:is_map(Arr_2) of true -> maps:get((B + 1), Arr_2, nil); _ -> case (B + 1) < 0 of true -> mochi_nth(erlang:length(Arr_2) + (B + 1) + 1, Arr_2); _ -> mochi_nth((B + 1) + 1, Arr_2) end end)))) of
        true -> Temp = (case erlang:is_map(Arr_2) of true -> maps:get(B, Arr_2, nil); _ -> case B < 0 of true -> mochi_nth(erlang:length(Arr_2) + B + 1, Arr_2); _ -> mochi_nth(B + 1, Arr_2) end end),
            Arr_3 = lists:sublist(Arr_2, B) ++ [(case erlang:is_map(Arr_2) of true -> maps:get((B + 1), Arr_2, nil); _ -> case (B + 1) < 0 of true -> mochi_nth(erlang:length(Arr_2) + (B + 1) + 1, Arr_2); _ -> mochi_nth((B + 1) + 1, Arr_2) end end)] ++ lists:nthtail(B + 1, Arr_2),
            Arr_4 = lists:sublist(Arr_3, (B + 1)) ++ [Temp] ++ lists:nthtail((B + 1) + 1, Arr_3),
            Arr_5 = Arr_4,
            Temp;
        _ -> Arr_5 = Arr_2,
            nil
    end),
            B_2 = (B + 1),
            Fun_4_loop(A, Arr_5, B_2, I_4, N, X_3);
        _ -> {A, Arr_2, B, I_4, N, X_3}
    end
end,
{A, Arr_5, B_2, I_4, N, X_3} = Fun_4(A, Arr_2, B, I_4, N, X_3),
            A_2 = (A + 1),
            Fun_5_loop(A_2, Arr_5, I_4, N, X_3);
        _ -> {A, Arr_2, I_4, N, X_3}
    end
end,
{A_2, Arr_5, I_4, N, X_3} = Fun_5(A, Arr_2, I_4, N, X_3),
        (case erlang:is_map(Arr_5) of true -> maps:get((N - 1), Arr_5, nil); _ -> case (N - 1) < 0 of true -> mochi_nth(erlang:length(Arr_5) + (N - 1) + 1, Arr_5); _ -> mochi_nth((N - 1) + 1, Arr_5) end end)
    catch {return, RetCatch} -> RetCatch end.

test_abs_val() ->
    try
        case (abs_val(0.0) /= 0.0) of
        true -> erlang:error({panic, "abs_val(0) failed"});
        _ -> ok
    end,
        case (abs_val(34.0) /= 34.0) of
        true -> erlang:error({panic, "abs_val(34) failed"});
        _ -> ok
    end,
        case (abs_val(-100000000000.0) /= 100000000000.0) of
        true -> erlang:error({panic, "abs_val large failed"});
        _ -> ok
    end,
        A_3 = [-3, -1, 2, -11],
        case (abs_max(A_3) /= -11) of
        true -> erlang:error({panic, "abs_max failed"});
        _ -> ok
    end,
        case (abs_max_sort(A_3) /= -11) of
        true -> erlang:error({panic, "abs_max_sort failed"});
        _ -> ok
    end,
        case (abs_min(A_3) /= -1) of
        true -> erlang:error({panic, "abs_min failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_abs_val(),
        io:format("~ts~n", [mochi_repr(abs_val(-34.0))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
