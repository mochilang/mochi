#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, abs/1, factorial/1, pow_float/2, binomial_distribution/3]).

% Generated by Mochi transpiler v0.10.66 (fa2dc5e881)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

abs(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

factorial(N) ->
    try
        case (N < 0) of
        true -> erlang:error({panic, "factorial is undefined for negative numbers"});
        _ -> ok
    end,
        Result = 1,
        I = 2,
        Fun = fun Fun_loop(I, N, Result) ->
    case (I =< N) of
        true ->
            Result_2 = (Result * I),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Result_2);
        _ -> {I, N, Result}
    end
end,
{I_2, N, Result_2} = Fun(I, N, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

pow_float(Base, Exp) ->
    try
        Result_3 = 1.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Base, Exp, I_3, Result_3) ->
    case (I_3 < Exp) of
        true ->
            Result_4 = mochi_safe_mul(Result_3, Base),
            I_4 = (I_3 + 1),
            Fun_2_loop(Base, Exp, I_4, Result_4);
        _ -> {Base, Exp, I_3, Result_3}
    end
end,
{Base, Exp, I_4, Result_4} = Fun_2(Base, Exp, I_3, Result_3),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

binomial_distribution(Successes, Trials, Prob) ->
    try
        case (Successes > Trials) of
        true -> erlang:error({panic, "successes must be lower or equal to trials"});
        _ -> ok
    end,
        case ((Trials < 0) orelse (Successes < 0)) of
        true -> erlang:error({panic, "the function is defined for non-negative integers"});
        _ -> ok
    end,
        case mochi_not(((0.0 < Prob) andalso (Prob < 1.0))) of
        true -> erlang:error({panic, "prob has to be in range of 1 - 0"});
        _ -> ok
    end,
        Probability = mochi_safe_mul(pow_float(Prob, Successes), pow_float((1.0 - Prob), (Trials - Successes))),
        Numerator = float(factorial(Trials)),
        Denominator = float((factorial(Successes) * factorial((Trials - Successes)))),
        Coefficient = mochi_safe_div(Numerator, Denominator),
        mochi_safe_mul(Probability, Coefficient)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
