#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, max_sum_sliding_window/2, test_max_sum_sliding_window/0, main/0]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

max_sum_sliding_window(Arr, K) ->
    try
        case ((K < 0) orelse (erlang:length(Arr) < K)) of
        true -> erlang:error("Invalid Input");
        _ -> ok
    end,
        Idx = 0,
        Current_sum = 0,
        Fun = fun Fun_loop(Arr, Current_sum, Idx, K) ->
    case (Idx < K) of
        true ->
            Current_sum_2 = (Current_sum + (case erlang:is_map(Arr) of true -> maps:get(Idx, Arr, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Arr) + Idx + 1, Arr); _ -> mochi_nth(Idx + 1, Arr) end end)),
            Idx_2 = (Idx + 1),
            Fun_loop(Arr, Current_sum_2, Idx_2, K);
        _ -> {Arr, Current_sum, Idx, K}
    end
end,
{Arr, Current_sum_2, Idx_2, K} = Fun(Arr, Current_sum, Idx, K),
        Max_sum = Current_sum_2,
        I = 0,
        Fun_2 = fun Fun_2_loop(Arr, Current_sum_2, I, Idx_2, K, Max_sum) ->
    case (I < (erlang:length(Arr) - K)) of
        true ->
            Current_sum_3 = ((Current_sum_2 - (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end)) + (case erlang:is_map(Arr) of true -> maps:get((I + K), Arr, nil); _ -> case (I + K) < 0 of true -> mochi_nth(erlang:length(Arr) + (I + K) + 1, Arr); _ -> mochi_nth((I + K) + 1, Arr) end end)),
            case (Current_sum_3 > Max_sum) of
        true -> Max_sum_2 = Current_sum_3,
            Max_sum_3 = Max_sum_2;
        _ -> Max_sum_3 = Max_sum
    end,
            I_2 = (I + 1),
            Fun_2_loop(Arr, Current_sum_3, I_2, Idx_2, K, Max_sum_3);
        _ -> {Arr, Current_sum_2, I, Idx_2, K, Max_sum}
    end
end,
{Arr, Current_sum_3, I_2, Idx_2, K, Max_sum_3} = Fun_2(Arr, Current_sum_2, I, Idx_2, K, Max_sum),
        Max_sum_3
    catch {return, Ret} -> Ret end.

test_max_sum_sliding_window() ->
    try
        Arr1 = [1, 4, 2, 10, 2, 3, 1, 0, 20],
        case (max_sum_sliding_window(Arr1, 4) /= 24) of
        true -> erlang:error("test1 failed");
        _ -> ok
    end,
        Arr2 = [1, 4, 2, 10, 2, 13, 1, 0, 2],
        case (max_sum_sliding_window(Arr2, 4) /= 27) of
        true -> erlang:error("test2 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_max_sum_sliding_window(),
        Sample = [1, 4, 2, 10, 2, 3, 1, 0, 20],
        io:format("~ts~n", [mochi_str(max_sum_sliding_window(Sample, 4))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
