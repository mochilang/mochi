#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, allocation_num/2]).

% Generated by Mochi transpiler v0.10.66 (2995f902d7)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

allocation_num(Number_of_bytes, Partitions) ->
    try
        case (Partitions =< 0) of
        true -> erlang:error({panic, "partitions must be a positive number!"});
        _ -> ok
    end,
        case (Partitions > Number_of_bytes) of
        true -> erlang:error({panic, "partitions can not > number_of_bytes!"});
        _ -> ok
    end,
        Bytes_per_partition = (Number_of_bytes div Partitions),
        Allocation_list = [],
        I = 0,
        Fun = fun Fun_loop(Allocation_list, Bytes_per_partition, I, Number_of_bytes, Partitions) ->
    case (I < Partitions) of
        true ->
            Start_bytes = ((I * Bytes_per_partition) + 1),
            End_bytes = (case (I == (Partitions - 1)) of
    true -> Number_of_bytes;
    _ -> ((I + 1) * Bytes_per_partition)
end),
            Allocation_list_2 = lists:append((case Allocation_list of nil -> []; _ -> Allocation_list end), [((mochi_str(Start_bytes) ++ "-") ++ mochi_str(End_bytes))]),
            I_2 = (I + 1),
            Fun_loop(Allocation_list_2, Bytes_per_partition, I_2, Number_of_bytes, Partitions);
        _ -> {Allocation_list, Bytes_per_partition, I, Number_of_bytes, Partitions}
    end
end,
{Allocation_list_2, Bytes_per_partition, I_2, Number_of_bytes, Partitions} = Fun(Allocation_list, Bytes_per_partition, I, Number_of_bytes, Partitions),
        Allocation_list_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(allocation_num(16647, 4))]),
    io:format("~ts~n", [mochi_str(allocation_num(50000, 5))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
