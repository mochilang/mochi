#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bubble_sort/1, sort3/1, triplet_sum1/2, triplet_sum2/2, list_equal/2, test_triplet_sum/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

bubble_sort(Nums) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, Nums) ->
    case (I < erlang:length(Nums)) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [(case erlang:is_map(Nums) of true -> maps:get(I, Nums, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Nums) + I + 1, Nums); _ -> mochi_nth(I + 1, Nums) end end)]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, I_2, Nums);
        _ -> {Arr, I, Nums}
    end
end,
{Arr_2, I_2, Nums} = Fun(Arr, I, Nums),
        N = erlang:length(Arr_2),
        A = 0,
        Fun_3 = fun Fun_3_loop(A, Arr_2, I_2, N, Nums) ->
    case (A < N) of
        true ->
            B = 0,
            Fun_2 = fun Fun_2_loop(A, Arr_2, B, I_2, N, Nums) ->
    case (B < ((N - A) - 1)) of
        true ->
            case ((case erlang:is_map(Arr_2) of true -> maps:get(B, Arr_2, nil); _ -> case B < 0 of true -> mochi_nth(erlang:length(Arr_2) + B + 1, Arr_2); _ -> mochi_nth(B + 1, Arr_2) end end) > (case erlang:is_map(Arr_2) of true -> maps:get((B + 1), Arr_2, nil); _ -> case (B + 1) < 0 of true -> mochi_nth(erlang:length(Arr_2) + (B + 1) + 1, Arr_2); _ -> mochi_nth((B + 1) + 1, Arr_2) end end)) of
        true -> Tmp = (case erlang:is_map(Arr_2) of true -> maps:get(B, Arr_2, nil); _ -> case B < 0 of true -> mochi_nth(erlang:length(Arr_2) + B + 1, Arr_2); _ -> mochi_nth(B + 1, Arr_2) end end),
            Arr_3 = lists:sublist(Arr_2, B) ++ [(case erlang:is_map(Arr_2) of true -> maps:get((B + 1), Arr_2, nil); _ -> case (B + 1) < 0 of true -> mochi_nth(erlang:length(Arr_2) + (B + 1) + 1, Arr_2); _ -> mochi_nth((B + 1) + 1, Arr_2) end end)] ++ lists:nthtail(B + 1, Arr_2),
            Arr_4 = lists:sublist(Arr_3, (B + 1)) ++ [Tmp] ++ lists:nthtail((B + 1) + 1, Arr_3),
            Arr_5 = Arr_4,
            Tmp_2 = Tmp;
        _ -> Arr_5 = Arr_2,
            Tmp_2 = nil
    end,
            B_2 = (B + 1),
            Fun_2_loop(A, Arr_5, B_2, I_2, N, Nums);
        _ -> {A, Arr_2, B, I_2, N, Nums}
    end
end,
{A, Arr_5, B_2, I_2, N, Nums} = Fun_2(A, Arr_2, B, I_2, N, Nums),
            A_2 = (A + 1),
            Fun_3_loop(A_2, Arr_5, I_2, N, Nums);
        _ -> {A, Arr_2, I_2, N, Nums}
    end
end,
{A_2, Arr_5, I_2, N, Nums} = Fun_3(A, Arr_2, I_2, N, Nums),
        Arr_5
    catch {return, Ret} -> Ret end.

sort3(Xs) ->
    try
        Arr_6 = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Arr_6, I_3, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            Arr_7 = lists:append((case Arr_6 of nil -> []; _ -> Arr_6 end), [(case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end)]),
            I_4 = (I_3 + 1),
            Fun_4_loop(Arr_7, I_4, Xs);
        _ -> {Arr_6, I_3, Xs}
    end
end,
{Arr_7, I_4, Xs} = Fun_4(Arr_6, I_3, Xs),
        N_2 = erlang:length(Arr_7),
        A_3 = 0,
        Fun_6 = fun Fun_6_loop(A_3, Arr_7, I_4, N_2, Xs) ->
    case (A_3 < N_2) of
        true ->
            B_3 = 0,
            Fun_5 = fun Fun_5_loop(A_3, Arr_7, B_3, I_4, N_2, Xs) ->
    case (B_3 < ((N_2 - A_3) - 1)) of
        true ->
            case ((case erlang:is_map(Arr_7) of true -> maps:get(B_3, Arr_7, nil); _ -> case B_3 < 0 of true -> mochi_nth(erlang:length(Arr_7) + B_3 + 1, Arr_7); _ -> mochi_nth(B_3 + 1, Arr_7) end end) > (case erlang:is_map(Arr_7) of true -> maps:get((B_3 + 1), Arr_7, nil); _ -> case (B_3 + 1) < 0 of true -> mochi_nth(erlang:length(Arr_7) + (B_3 + 1) + 1, Arr_7); _ -> mochi_nth((B_3 + 1) + 1, Arr_7) end end)) of
        true -> Tmp_3 = (case erlang:is_map(Arr_7) of true -> maps:get(B_3, Arr_7, nil); _ -> case B_3 < 0 of true -> mochi_nth(erlang:length(Arr_7) + B_3 + 1, Arr_7); _ -> mochi_nth(B_3 + 1, Arr_7) end end),
            Arr_8 = lists:sublist(Arr_7, B_3) ++ [(case erlang:is_map(Arr_7) of true -> maps:get((B_3 + 1), Arr_7, nil); _ -> case (B_3 + 1) < 0 of true -> mochi_nth(erlang:length(Arr_7) + (B_3 + 1) + 1, Arr_7); _ -> mochi_nth((B_3 + 1) + 1, Arr_7) end end)] ++ lists:nthtail(B_3 + 1, Arr_7),
            Arr_9 = lists:sublist(Arr_8, (B_3 + 1)) ++ [Tmp_3] ++ lists:nthtail((B_3 + 1) + 1, Arr_8),
            Arr_10 = Arr_9,
            Tmp_4 = Tmp_3;
        _ -> Arr_10 = Arr_7,
            Tmp_4 = nil
    end,
            B_4 = (B_3 + 1),
            Fun_5_loop(A_3, Arr_10, B_4, I_4, N_2, Xs);
        _ -> {A_3, Arr_7, B_3, I_4, N_2, Xs}
    end
end,
{A_3, Arr_10, B_4, I_4, N_2, Xs} = Fun_5(A_3, Arr_7, B_3, I_4, N_2, Xs),
            A_4 = (A_3 + 1),
            Fun_6_loop(A_4, Arr_10, I_4, N_2, Xs);
        _ -> {A_3, Arr_7, I_4, N_2, Xs}
    end
end,
{A_4, Arr_10, I_4, N_2, Xs} = Fun_6(A_3, Arr_7, I_4, N_2, Xs),
        Arr_10
    catch {return, Ret} -> Ret end.

triplet_sum1(Arr_11, Target) ->
    try
        I_5 = 0,
        Fun_9 = fun Fun_9_loop(Arr_11, I_5, Target) ->
    case (I_5 < (erlang:length(Arr_11) - 2)) of
        true ->
            J = (I_5 + 1),
            Fun_8 = fun Fun_8_loop(Arr_11, I_5, J, Target) ->
    case (J < (erlang:length(Arr_11) - 1)) of
        true ->
            K = (J + 1),
            Fun_7 = fun Fun_7_loop(Arr_11, I_5, J, K, Target) ->
    case (K < erlang:length(Arr_11)) of
        true ->
            case ((((case erlang:is_map(Arr_11) of true -> maps:get(I_5, Arr_11, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Arr_11) + I_5 + 1, Arr_11); _ -> mochi_nth(I_5 + 1, Arr_11) end end) + (case erlang:is_map(Arr_11) of true -> maps:get(J, Arr_11, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr_11) + J + 1, Arr_11); _ -> mochi_nth(J + 1, Arr_11) end end)) + (case erlang:is_map(Arr_11) of true -> maps:get(K, Arr_11, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Arr_11) + K + 1, Arr_11); _ -> mochi_nth(K + 1, Arr_11) end end)) == Target) of
        true -> throw({return, sort3([(case erlang:is_map(Arr_11) of true -> maps:get(I_5, Arr_11, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Arr_11) + I_5 + 1, Arr_11); _ -> mochi_nth(I_5 + 1, Arr_11) end end), (case erlang:is_map(Arr_11) of true -> maps:get(J, Arr_11, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr_11) + J + 1, Arr_11); _ -> mochi_nth(J + 1, Arr_11) end end), (case erlang:is_map(Arr_11) of true -> maps:get(K, Arr_11, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Arr_11) + K + 1, Arr_11); _ -> mochi_nth(K + 1, Arr_11) end end)])});
        _ -> ok
    end,
            K_2 = (K + 1),
            Fun_7_loop(Arr_11, I_5, J, K_2, Target);
        _ -> {Arr_11, I_5, J, K, Target}
    end
end,
{Arr_11, I_5, J, K_2, Target} = Fun_7(Arr_11, I_5, J, K, Target),
            J_2 = (J + 1),
            Fun_8_loop(Arr_11, I_5, J_2, Target);
        _ -> {Arr_11, I_5, J, Target}
    end
end,
{Arr_11, I_5, J_2, Target} = Fun_8(Arr_11, I_5, J, Target),
            I_6 = (I_5 + 1),
            Fun_9_loop(Arr_11, I_6, Target);
        _ -> {Arr_11, I_5, Target}
    end
end,
{Arr_11, I_6, Target} = Fun_9(Arr_11, I_5, Target),
        [0, 0, 0]
    catch {return, Ret} -> Ret end.

triplet_sum2(Arr_12, Target_2) ->
    try
        Sorted = bubble_sort(Arr_12),
        N_3 = erlang:length(Sorted),
        I_7 = 0,
        Fun_11 = fun Fun_11_loop(Arr_12, I_7, N_3, Sorted, Target_2) ->
    case (I_7 < (N_3 - 2)) of
        true ->
            Left = (I_7 + 1),
            Right = (N_3 - 1),
            Fun_10 = fun Fun_10_loop(Arr_12, I_7, Left, N_3, Right, Sorted, Target_2) ->
    case (Left < Right) of
        true ->
            S = (((case erlang:is_map(Sorted) of true -> maps:get(I_7, Sorted, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Sorted) + I_7 + 1, Sorted); _ -> mochi_nth(I_7 + 1, Sorted) end end) + (case erlang:is_map(Sorted) of true -> maps:get(Left, Sorted, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Sorted) + Left + 1, Sorted); _ -> mochi_nth(Left + 1, Sorted) end end)) + (case erlang:is_map(Sorted) of true -> maps:get(Right, Sorted, nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(Sorted) + Right + 1, Sorted); _ -> mochi_nth(Right + 1, Sorted) end end)),
            case (S == Target_2) of
        true -> throw({return, [(case erlang:is_map(Sorted) of true -> maps:get(I_7, Sorted, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Sorted) + I_7 + 1, Sorted); _ -> mochi_nth(I_7 + 1, Sorted) end end), (case erlang:is_map(Sorted) of true -> maps:get(Left, Sorted, nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length(Sorted) + Left + 1, Sorted); _ -> mochi_nth(Left + 1, Sorted) end end), (case erlang:is_map(Sorted) of true -> maps:get(Right, Sorted, nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length(Sorted) + Right + 1, Sorted); _ -> mochi_nth(Right + 1, Sorted) end end)]});
        _ -> ok
    end,
            case (S < Target_2) of
        true -> Left_2 = (Left + 1),
            Left_3 = Left_2,
            Right_3 = Right;
        _ -> Right_2 = (Right - 1),
            Left_3 = Left,
            Right_3 = Right_2
    end,
            Fun_10_loop(Arr_12, I_7, Left_3, N_3, Right_3, Sorted, Target_2);
        _ -> {Arr_12, I_7, Left, N_3, Right, Sorted, Target_2}
    end
end,
{Arr_12, I_7, Left_3, N_3, Right_3, Sorted, Target_2} = Fun_10(Arr_12, I_7, Left, N_3, Right, Sorted, Target_2),
            I_8 = (I_7 + 1),
            Fun_11_loop(Arr_12, I_8, N_3, Sorted, Target_2);
        _ -> {Arr_12, I_7, N_3, Sorted, Target_2}
    end
end,
{Arr_12, I_8, N_3, Sorted, Target_2} = Fun_11(Arr_12, I_7, N_3, Sorted, Target_2),
        [0, 0, 0]
    catch {return, Ret} -> Ret end.

list_equal(A_5, B_5) ->
    try
        case (erlang:length(A_5) /= erlang:length(B_5)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_9 = 0,
        Fun_12 = fun Fun_12_loop(A_5, B_5, I_9) ->
    case (I_9 < erlang:length(A_5)) of
        true ->
            case ((case erlang:is_map(A_5) of true -> maps:get(I_9, A_5, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_5) + I_9 + 1, A_5); _ -> mochi_nth(I_9 + 1, A_5) end end) /= (case erlang:is_map(B_5) of true -> maps:get(I_9, B_5, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(B_5) + I_9 + 1, B_5); _ -> mochi_nth(I_9 + 1, B_5) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_10 = (I_9 + 1),
            Fun_12_loop(A_5, B_5, I_10);
        _ -> {A_5, B_5, I_9}
    end
end,
{A_5, B_5, I_10} = Fun_12(A_5, B_5, I_9),
        true
    catch {return, Ret} -> Ret end.

test_triplet_sum() ->
    try
        Arr1 = [13, 29, 7, 23, 5],
        case mochi_not(list_equal(triplet_sum1(Arr1, 35), [5, 7, 23])) of
        true -> erlang:error("ts1 case1 failed");
        _ -> ok
    end,
        case mochi_not(list_equal(triplet_sum2(Arr1, 35), [5, 7, 23])) of
        true -> erlang:error("ts2 case1 failed");
        _ -> ok
    end,
        Arr2 = [37, 9, 19, 50, 44],
        case mochi_not(list_equal(triplet_sum1(Arr2, 65), [9, 19, 37])) of
        true -> erlang:error("ts1 case2 failed");
        _ -> ok
    end,
        case mochi_not(list_equal(triplet_sum2(Arr2, 65), [9, 19, 37])) of
        true -> erlang:error("ts2 case2 failed");
        _ -> ok
    end,
        Arr3 = [6, 47, 27, 1, 15],
        case mochi_not(list_equal(triplet_sum1(Arr3, 11), [0, 0, 0])) of
        true -> erlang:error("ts1 case3 failed");
        _ -> ok
    end,
        case mochi_not(list_equal(triplet_sum2(Arr3, 11), [0, 0, 0])) of
        true -> erlang:error("ts2 case3 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_triplet_sum(),
        Sample = [13, 29, 7, 23, 5],
        Res = triplet_sum2(Sample, 35),
        io:format("~ts~n", [mochi_repr(((((mochi_str((case erlang:is_map(Res) of true -> maps:get(0, Res, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res) + 0 + 1, Res); _ -> mochi_nth(0 + 1, Res) end end)) ++ " ") ++ mochi_str((case erlang:is_map(Res) of true -> maps:get(1, Res, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Res) + 1 + 1, Res); _ -> mochi_nth(1 + 1, Res) end end))) ++ " ") ++ mochi_str((case erlang:is_map(Res) of true -> maps:get(2, Res, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Res) + 2 + 1, Res); _ -> mochi_nth(2 + 1, Res) end end))))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
