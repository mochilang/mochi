#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs_int/1, sum_of_digits/1, sum_of_digits_recursion/1, sum_of_digits_compact/1, test_sum_of_digits/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

abs_int(N) ->
    try
        (case (N < 0) of
    true -> -N;
    _ -> N
end)
    catch {return, Ret} -> Ret end.

sum_of_digits(N_2) ->
    try
        M = abs_int(N_2),
        Res = 0,
        Fun = fun Fun_loop(M, N_2, Res) ->
    case (M > 0) of
        true ->
            Res_2 = (Res + mochi_mod(M, 10)),
            M_2 = (M div 10),
            Fun_loop(M_2, N_2, Res_2);
        _ -> {M, N_2, Res}
    end
end,
{M_2, N_2, Res_2} = Fun(M, N_2, Res),
        Res_2
    catch {return, Ret} -> Ret end.

sum_of_digits_recursion(N_3) ->
    try
        M_3 = abs_int(N_3),
        case (M_3 < 10) of
        true -> throw({return, M_3});
        _ -> ok
    end,
        (mochi_mod(M_3, 10) + sum_of_digits_recursion((M_3 div 10)))
    catch {return, Ret} -> Ret end.

sum_of_digits_compact(N_4) ->
    try
        S = mochi_str(abs_int(N_4)),
        Res_3 = 0,
        I = 0,
        Fun_2 = fun Fun_2_loop(I, N_4, Res_3, S) ->
    case (I < erlang:length(S)) of
        true ->
            Res_4 = (Res_3 + mochi_to_int(string:substr(S, I + 1, 1))),
            I_2 = (I + 1),
            Fun_2_loop(I_2, N_4, Res_4, S);
        _ -> {I, N_4, Res_3, S}
    end
end,
{I_2, N_4, Res_4, S} = Fun_2(I, N_4, Res_3, S),
        Res_4
    catch {return, Ret} -> Ret end.

test_sum_of_digits() ->
    try
        case (sum_of_digits(12345) /= 15) of
        true -> erlang:error("sum_of_digits 12345 failed");
        _ -> ok
    end,
        case (sum_of_digits(123) /= 6) of
        true -> erlang:error("sum_of_digits 123 failed");
        _ -> ok
    end,
        case (sum_of_digits(-123) /= 6) of
        true -> erlang:error("sum_of_digits -123 failed");
        _ -> ok
    end,
        case (sum_of_digits(0) /= 0) of
        true -> erlang:error("sum_of_digits 0 failed");
        _ -> ok
    end,
        case (sum_of_digits_recursion(12345) /= 15) of
        true -> erlang:error("recursion 12345 failed");
        _ -> ok
    end,
        case (sum_of_digits_recursion(123) /= 6) of
        true -> erlang:error("recursion 123 failed");
        _ -> ok
    end,
        case (sum_of_digits_recursion(-123) /= 6) of
        true -> erlang:error("recursion -123 failed");
        _ -> ok
    end,
        case (sum_of_digits_recursion(0) /= 0) of
        true -> erlang:error("recursion 0 failed");
        _ -> ok
    end,
        case (sum_of_digits_compact(12345) /= 15) of
        true -> erlang:error("compact 12345 failed");
        _ -> ok
    end,
        case (sum_of_digits_compact(123) /= 6) of
        true -> erlang:error("compact 123 failed");
        _ -> ok
    end,
        case (sum_of_digits_compact(-123) /= 6) of
        true -> erlang:error("compact -123 failed");
        _ -> ok
    end,
        case (sum_of_digits_compact(0) /= 0) of
        true -> erlang:error("compact 0 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_sum_of_digits(),
        io:format("~ts~n", [mochi_str(sum_of_digits(12345))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
