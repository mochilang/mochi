#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs_int/1, num_digits/1, num_digits_fast/1, num_digits_faster/1, test_num_digits/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

abs_int(N) ->
    try
        (case (N < 0) of
    true -> -N;
    _ -> N
end)
    catch {return, Ret} -> Ret end.

num_digits(N_2) ->
    try
        X = abs_int(N_2),
        Digits = 1,
        Fun = fun Fun_loop(Digits, N_2, X) ->
    case (X >= 10) of
        true ->
            X_2 = (X div 10),
            Digits_2 = (Digits + 1),
            Fun_loop(Digits_2, N_2, X_2);
        _ -> {Digits, N_2, X}
    end
end,
{Digits_2, N_2, X_2} = Fun(Digits, N_2, X),
        Digits_2
    catch {return, Ret} -> Ret end.

num_digits_fast(N_3) ->
    try
        X_3 = abs_int(N_3),
        Digits_3 = 1,
        Power = 10,
        Fun_2 = fun Fun_2_loop(Digits_3, N_3, Power, X_3) ->
    case (X_3 >= Power) of
        true ->
            Power_2 = (Power * 10),
            Digits_4 = (Digits_3 + 1),
            Fun_2_loop(Digits_4, N_3, Power_2, X_3);
        _ -> {Digits_3, N_3, Power, X_3}
    end
end,
{Digits_4, N_3, Power_2, X_3} = Fun_2(Digits_3, N_3, Power, X_3),
        Digits_4
    catch {return, Ret} -> Ret end.

num_digits_faster(N_4) ->
    try
        S = mochi_str(abs_int(N_4)),
        erlang:length(S)
    catch {return, Ret} -> Ret end.

test_num_digits() ->
    try
        case (num_digits(12345) /= 5) of
        true -> erlang:error("num_digits 12345 failed");
        _ -> ok
    end,
        case (num_digits(123) /= 3) of
        true -> erlang:error("num_digits 123 failed");
        _ -> ok
    end,
        case (num_digits(0) /= 1) of
        true -> erlang:error("num_digits 0 failed");
        _ -> ok
    end,
        case (num_digits(-1) /= 1) of
        true -> erlang:error("num_digits -1 failed");
        _ -> ok
    end,
        case (num_digits(-123456) /= 6) of
        true -> erlang:error("num_digits -123456 failed");
        _ -> ok
    end,
        case (num_digits_fast(12345) /= 5) of
        true -> erlang:error("num_digits_fast 12345 failed");
        _ -> ok
    end,
        case (num_digits_fast(123) /= 3) of
        true -> erlang:error("num_digits_fast 123 failed");
        _ -> ok
    end,
        case (num_digits_fast(0) /= 1) of
        true -> erlang:error("num_digits_fast 0 failed");
        _ -> ok
    end,
        case (num_digits_fast(-1) /= 1) of
        true -> erlang:error("num_digits_fast -1 failed");
        _ -> ok
    end,
        case (num_digits_fast(-123456) /= 6) of
        true -> erlang:error("num_digits_fast -123456 failed");
        _ -> ok
    end,
        case (num_digits_faster(12345) /= 5) of
        true -> erlang:error("num_digits_faster 12345 failed");
        _ -> ok
    end,
        case (num_digits_faster(123) /= 3) of
        true -> erlang:error("num_digits_faster 123 failed");
        _ -> ok
    end,
        case (num_digits_faster(0) /= 1) of
        true -> erlang:error("num_digits_faster 0 failed");
        _ -> ok
    end,
        case (num_digits_faster(-1) /= 1) of
        true -> erlang:error("num_digits_faster -1 failed");
        _ -> ok
    end,
        case (num_digits_faster(-123456) /= 6) of
        true -> erlang:error("num_digits_faster -123456 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_num_digits(),
        io:format("~ts~n", [mochi_str(num_digits(12345))]),
        io:format("~ts~n", [mochi_str(num_digits_fast(12345))]),
        io:format("~ts~n", [mochi_str(num_digits_faster(12345))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
