#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, abs_int/1, gcd_iter/2, is_prime/1, sieve_er/1, get_prime_numbers/1, prime_factorization/1, greatest_prime_factor/1, smallest_prime_factor/1, kg_v/2, is_even/1, is_odd/1, goldbach/1, get_prime/1, get_primes_between/2, get_divisors/1, is_perfect_number/1, simplify_fraction/2, factorial/1, fib/1]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

abs_int(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

gcd_iter(A, B) ->
    try
        X_2 = abs_int(A),
        Y = abs_int(B),
        Fun = fun Fun_loop(A, B, X_2, Y) ->
    case (Y /= 0) of
        true ->
            T = Y,
            Y_2 = mochi_mod(X_2, Y),
            X_3 = T,
            Fun_loop(A, B, X_3, Y_2);
        _ -> {A, B, X_2, Y}
    end
end,
{A, B, X_3, Y_2} = Fun(A, B, X_2, Y),
        X_3
    catch {return, RetCatch} -> RetCatch end.

is_prime(N) ->
    try
        case (N =< 1) of
        true -> throw({return, false});
        _ -> ok
    end,
        D = 2,
        Fun_2 = fun Fun_2_loop(D, N) ->
    case ((D * D) =< N) of
        true ->
            case (mochi_mod(N, D) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            D_2 = (D + 1),
            Fun_2_loop(D_2, N);
        _ -> {D, N}
    end
end,
{D_2, N} = Fun_2(D, N),
        true
    catch {return, RetCatch} -> RetCatch end.

sieve_er(N_2) ->
    try
        Nums = [],
        I = 2,
        Fun_3 = fun Fun_3_loop(I, N_2, Nums) ->
    case (I =< N_2) of
        true ->
            Nums_2 = lists:append((case Nums of nil -> []; _ -> Nums end), [I]),
            I_2 = (I + 1),
            Fun_3_loop(I_2, N_2, Nums_2);
        _ -> {I, N_2, Nums}
    end
end,
{I_2, N_2, Nums_2} = Fun_3(I, N_2, Nums),
        Idx = 0,
        Fun_5 = fun Fun_5_loop(I_2, Idx, N_2, Nums_2) ->
    case (Idx < erlang:length(Nums_2)) of
        true ->
            J = (Idx + 1),
            Fun_4 = fun Fun_4_loop(I_2, Idx, J, N_2, Nums_2) ->
    case (J < erlang:length(Nums_2)) of
        true ->
            Nums_5 = (case ((case erlang:is_map(Nums_2) of true -> maps:get(Idx, Nums_2, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Nums_2) + Idx + 1, Nums_2); _ -> mochi_nth(Idx + 1, Nums_2) end end) /= 0) of
        true -> Nums_4 = (case (mochi_mod((case erlang:is_map(Nums_2) of true -> maps:get(J, Nums_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Nums_2) + J + 1, Nums_2); _ -> mochi_nth(J + 1, Nums_2) end end), (case erlang:is_map(Nums_2) of true -> maps:get(Idx, Nums_2, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Nums_2) + Idx + 1, Nums_2); _ -> mochi_nth(Idx + 1, Nums_2) end end)) == 0) of
        true -> Nums_3 = lists:sublist(Nums_2, J) ++ [0] ++ lists:nthtail(J + 1, Nums_2),
            Nums_3;
        _ -> Nums_2
    end),
            Nums_4;
        _ -> Nums_2
    end),
            J_2 = (J + 1),
            Fun_4_loop(I_2, Idx, J_2, N_2, Nums_5);
        _ -> {I_2, Idx, J, N_2, Nums_2}
    end
end,
{I_2, Idx, J_2, N_2, Nums_5} = Fun_4(I_2, Idx, J, N_2, Nums_2),
            Idx_2 = (Idx + 1),
            Fun_5_loop(I_2, Idx_2, N_2, Nums_5);
        _ -> {I_2, Idx, N_2, Nums_2}
    end
end,
{I_2, Idx_2, N_2, Nums_5} = Fun_5(I_2, Idx, N_2, Nums_2),
        Res = [],
        K = 0,
        Fun_6 = fun Fun_6_loop(I_2, Idx_2, K, N_2, Nums_5, Res) ->
    case (K < erlang:length(Nums_5)) of
        true ->
            V = (case erlang:is_map(Nums_5) of true -> maps:get(K, Nums_5, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Nums_5) + K + 1, Nums_5); _ -> mochi_nth(K + 1, Nums_5) end end),
            Res_3 = (case (V /= 0) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [V]),
            Res_2;
        _ -> Res
    end),
            K_2 = (K + 1),
            Fun_6_loop(I_2, Idx_2, K_2, N_2, Nums_5, Res_3);
        _ -> {I_2, Idx_2, K, N_2, Nums_5, Res}
    end
end,
{I_2, Idx_2, K_2, N_2, Nums_5, Res_3} = Fun_6(I_2, Idx_2, K, N_2, Nums_5, Res),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

get_prime_numbers(N_3) ->
    try
        Ans = [],
        Num = 2,
        Fun_7 = fun Fun_7_loop(Ans, N_3, Num) ->
    case (Num =< N_3) of
        true ->
            Ans_3 = (case is_prime(Num) of
        true -> Ans_2 = lists:append((case Ans of nil -> []; _ -> Ans end), [Num]),
            Ans_2;
        _ -> Ans
    end),
            Num_2 = (Num + 1),
            Fun_7_loop(Ans_3, N_3, Num_2);
        _ -> {Ans, N_3, Num}
    end
end,
{Ans_3, N_3, Num_2} = Fun_7(Ans, N_3, Num),
        Ans_3
    catch {return, RetCatch} -> RetCatch end.

prime_factorization(Number) ->
    try
        case (Number == 0) of
        true -> throw({return, [0]});
        _ -> ok
    end,
        case (Number == 1) of
        true -> throw({return, [1]});
        _ -> ok
    end,
        Ans_4 = [],
        Ans_6 = (case is_prime(Number) of
        true -> Ans_5 = lists:append((case Ans_4 of nil -> []; _ -> Ans_4 end), [Number]),
            throw({return, Ans_5}),
            Ans_5;
        _ -> Ans_4
    end),
        Quotient = Number,
        Factor = 2,
        Fun_8 = fun Fun_8_loop(Ans_6, Factor, Number, Quotient) ->
    case (Quotient /= 1) of
        true ->
            Quotient_3 = (case (is_prime(Factor) andalso (mochi_mod(Quotient, Factor) == 0)) of
        true -> Ans_7 = lists:append((case Ans_6 of nil -> []; _ -> Ans_6 end), [Factor]),
            Quotient_2 = mochi_idiv(Quotient, Factor),
            Ans_8 = Ans_7,
            Factor_3 = Factor,
            Quotient_2;
        _ -> Factor_2 = (Factor + 1),
            Ans_8 = Ans_6,
            Factor_3 = Factor_2,
            Quotient
    end),
            Fun_8_loop(Ans_8, Factor_3, Number, Quotient_3);
        _ -> {Ans_6, Factor, Number, Quotient}
    end
end,
{Ans_8, Factor_3, Number, Quotient_3} = Fun_8(Ans_6, Factor, Number, Quotient),
        Ans_8
    catch {return, RetCatch} -> RetCatch end.

greatest_prime_factor(Number_2) ->
    try
        Factors = prime_factorization(Number_2),
        M = (case erlang:is_map(Factors) of true -> maps:get(0, Factors, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Factors) + 0 + 1, Factors); _ -> mochi_nth(0 + 1, Factors) end end),
        I_3 = 1,
        Fun_9 = fun Fun_9_loop(Factors, I_3, M, Number_2) ->
    case (I_3 < erlang:length(Factors)) of
        true ->
            M_3 = (case ((case erlang:is_map(Factors) of true -> maps:get(I_3, Factors, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Factors) + I_3 + 1, Factors); _ -> mochi_nth(I_3 + 1, Factors) end end) > M) of
        true -> M_2 = (case erlang:is_map(Factors) of true -> maps:get(I_3, Factors, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Factors) + I_3 + 1, Factors); _ -> mochi_nth(I_3 + 1, Factors) end end),
            M_2;
        _ -> M
    end),
            I_4 = (I_3 + 1),
            Fun_9_loop(Factors, I_4, M_3, Number_2);
        _ -> {Factors, I_3, M, Number_2}
    end
end,
{Factors, I_4, M_3, Number_2} = Fun_9(Factors, I_3, M, Number_2),
        M_3
    catch {return, RetCatch} -> RetCatch end.

smallest_prime_factor(Number_3) ->
    try
        Factors_2 = prime_factorization(Number_3),
        M_4 = (case erlang:is_map(Factors_2) of true -> maps:get(0, Factors_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Factors_2) + 0 + 1, Factors_2); _ -> mochi_nth(0 + 1, Factors_2) end end),
        I_5 = 1,
        Fun_10 = fun Fun_10_loop(Factors_2, I_5, M_4, Number_3) ->
    case (I_5 < erlang:length(Factors_2)) of
        true ->
            M_6 = (case ((case erlang:is_map(Factors_2) of true -> maps:get(I_5, Factors_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Factors_2) + I_5 + 1, Factors_2); _ -> mochi_nth(I_5 + 1, Factors_2) end end) < M_4) of
        true -> M_5 = (case erlang:is_map(Factors_2) of true -> maps:get(I_5, Factors_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Factors_2) + I_5 + 1, Factors_2); _ -> mochi_nth(I_5 + 1, Factors_2) end end),
            M_5;
        _ -> M_4
    end),
            I_6 = (I_5 + 1),
            Fun_10_loop(Factors_2, I_6, M_6, Number_3);
        _ -> {Factors_2, I_5, M_4, Number_3}
    end
end,
{Factors_2, I_6, M_6, Number_3} = Fun_10(Factors_2, I_5, M_4, Number_3),
        M_6
    catch {return, RetCatch} -> RetCatch end.

kg_v(Number1, Number2) ->
    try
        case ((Number1 < 1) orelse (Number2 < 1)) of
        true -> erlang:error({panic, "numbers must be positive"});
        _ -> ok
    end,
        G = gcd_iter(Number1, Number2),
        (mochi_idiv(Number1, G) * Number2)
    catch {return, RetCatch} -> RetCatch end.

is_even(Number_4) ->
    try
        (mochi_mod(Number_4, 2) == 0)
    catch {return, RetCatch} -> RetCatch end.

is_odd(Number_5) ->
    try
        (mochi_mod(Number_5, 2) /= 0)
    catch {return, RetCatch} -> RetCatch end.

goldbach(Number_6) ->
    try
        case (mochi_not(is_even(Number_6)) orelse (Number_6 =< 2)) of
        true -> erlang:error({panic, "number must be even and > 2"});
        _ -> ok
    end,
        Primes = get_prime_numbers(Number_6),
        I_7 = 0,
        Fun_12 = fun Fun_12_loop(I_7, Number_6, Primes) ->
    case (I_7 < erlang:length(Primes)) of
        true ->
            J_3 = (I_7 + 1),
            Fun_11 = fun Fun_11_loop(I_7, J_3, Number_6, Primes) ->
    case (J_3 < erlang:length(Primes)) of
        true ->
            case (((case erlang:is_map(Primes) of true -> maps:get(I_7, Primes, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Primes) + I_7 + 1, Primes); _ -> mochi_nth(I_7 + 1, Primes) end end) + (case erlang:is_map(Primes) of true -> maps:get(J_3, Primes, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Primes) + J_3 + 1, Primes); _ -> mochi_nth(J_3 + 1, Primes) end end)) == Number_6) of
        true -> throw({return, [(case erlang:is_map(Primes) of true -> maps:get(I_7, Primes, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Primes) + I_7 + 1, Primes); _ -> mochi_nth(I_7 + 1, Primes) end end), (case erlang:is_map(Primes) of true -> maps:get(J_3, Primes, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Primes) + J_3 + 1, Primes); _ -> mochi_nth(J_3 + 1, Primes) end end)]});
        _ -> ok
    end,
            J_4 = (J_3 + 1),
            Fun_11_loop(I_7, J_4, Number_6, Primes);
        _ -> {I_7, J_3, Number_6, Primes}
    end
end,
{I_7, J_4, Number_6, Primes} = Fun_11(I_7, J_3, Number_6, Primes),
            I_8 = (I_7 + 1),
            Fun_12_loop(I_8, Number_6, Primes);
        _ -> {I_7, Number_6, Primes}
    end
end,
{I_8, Number_6, Primes} = Fun_12(I_7, Number_6, Primes),
        []
    catch {return, RetCatch} -> RetCatch end.

get_prime(N_4) ->
    try
        case (N_4 < 0) of
        true -> erlang:error({panic, "n must be non-negative"});
        _ -> ok
    end,
        Index = 0,
        Ans_9 = 2,
        Fun_14 = fun Fun_14_loop(Ans_9, Index, N_4) ->
    case (Index < N_4) of
        true ->
            Index_2 = (Index + 1),
            Ans_10 = (Ans_9 + 1),
            Fun_13 = fun Fun_13_loop(Ans_10, Index_2, N_4) ->
    case mochi_not(is_prime(Ans_10)) of
        true ->
            Ans_11 = (Ans_10 + 1),
            Fun_13_loop(Ans_11, Index_2, N_4);
        _ -> {Ans_10, Index_2, N_4}
    end
end,
{Ans_11, Index_2, N_4} = Fun_13(Ans_10, Index_2, N_4),
            Fun_14_loop(Ans_11, Index_2, N_4);
        _ -> {Ans_9, Index, N_4}
    end
end,
{Ans_11, Index_2, N_4} = Fun_14(Ans_9, Index, N_4),
        Ans_11
    catch {return, RetCatch} -> RetCatch end.

get_primes_between(P1, P2) ->
    try
        Bad1 = mochi_not(is_prime(P1)),
        Bad2 = mochi_not(is_prime(P2)),
        case ((Bad1 orelse Bad2) orelse (P1 >= P2)) of
        true -> erlang:error({panic, "arguments must be prime and p1 < p2"});
        _ -> ok
    end,
        Num_3 = (P1 + 1),
        Fun_15 = fun Fun_15_loop(Bad1, Bad2, Num_3, P1, P2) ->
    case (Num_3 < P2) of
        true ->
            try
                case is_prime(Num_3) of
        true -> throw({break, {Bad1, Bad2, Num_3, P1, P2}});
        _ -> ok
    end,
                Num_4 = (Num_3 + 1),
                Fun_15_loop(Bad1, Bad2, Num_4, P1, P2)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_15_loop(C0, C1, C2, C3, C4);
                {break, Bs} -> Bs
            end;
        _ -> {Bad1, Bad2, Num_3, P1, P2}
    end
end,
{Bad1, Bad2, Num_4, P1, P2} = Fun_15(Bad1, Bad2, Num_3, P1, P2),
        Ans_12 = [],
        Fun_17 = fun Fun_17_loop(Ans_12, Bad1, Bad2, Num_4, P1, P2) ->
    case (Num_4 < P2) of
        true ->
            try
                Ans_13 = lists:append((case Ans_12 of nil -> []; _ -> Ans_12 end), [Num_4]),
                Num_5 = (Num_4 + 1),
                Fun_16 = fun Fun_16_loop(Ans_13, Bad1, Bad2, Num_5, P1, P2) ->
    case (Num_5 < P2) of
        true ->
            try
                case is_prime(Num_5) of
        true -> throw({break, {Ans_13, Bad1, Bad2, Num_5, P1, P2}});
        _ -> ok
    end,
                Num_6 = (Num_5 + 1),
                Fun_16_loop(Ans_13, Bad1, Bad2, Num_6, P1, P2)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_16_loop(C0, C1, C2, C3, C4, C5);
                {break, Bs} -> Bs
            end;
        _ -> {Ans_13, Bad1, Bad2, Num_5, P1, P2}
    end
end,
{Ans_13, Bad1, Bad2, Num_6, P1, P2} = Fun_16(Ans_13, Bad1, Bad2, Num_5, P1, P2),
                Fun_17_loop(Ans_13, Bad1, Bad2, Num_6, P1, P2)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_17_loop(C0, C1, C2, C3, C4, C5);
                {break, Bs} -> Bs
            end;
        _ -> {Ans_12, Bad1, Bad2, Num_4, P1, P2}
    end
end,
{Ans_13, Bad1, Bad2, Num_6, P1, P2} = Fun_17(Ans_12, Bad1, Bad2, Num_4, P1, P2),
        Ans_13
    catch {return, RetCatch} -> RetCatch end.

get_divisors(N_5) ->
    try
        case (N_5 < 1) of
        true -> erlang:error({panic, "n must be >= 1"});
        _ -> ok
    end,
        Ans_14 = [],
        D_3 = 1,
        Fun_18 = fun Fun_18_loop(Ans_14, D_3, N_5) ->
    case (D_3 =< N_5) of
        true ->
            Ans_16 = (case (mochi_mod(N_5, D_3) == 0) of
        true -> Ans_15 = lists:append((case Ans_14 of nil -> []; _ -> Ans_14 end), [D_3]),
            Ans_15;
        _ -> Ans_14
    end),
            D_4 = (D_3 + 1),
            Fun_18_loop(Ans_16, D_4, N_5);
        _ -> {Ans_14, D_3, N_5}
    end
end,
{Ans_16, D_4, N_5} = Fun_18(Ans_14, D_3, N_5),
        Ans_16
    catch {return, RetCatch} -> RetCatch end.

is_perfect_number(Number_7) ->
    try
        case (Number_7 =< 1) of
        true -> erlang:error({panic, "number must be > 1"});
        _ -> ok
    end,
        Divisors = get_divisors(Number_7),
        Sum = 0,
        I_9 = 0,
        Fun_19 = fun Fun_19_loop(Divisors, I_9, Number_7, Sum) ->
    case (I_9 < (erlang:length(Divisors) - 1)) of
        true ->
            Sum_2 = (Sum + (case erlang:is_map(Divisors) of true -> maps:get(I_9, Divisors, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Divisors) + I_9 + 1, Divisors); _ -> mochi_nth(I_9 + 1, Divisors) end end)),
            I_10 = (I_9 + 1),
            Fun_19_loop(Divisors, I_10, Number_7, Sum_2);
        _ -> {Divisors, I_9, Number_7, Sum}
    end
end,
{Divisors, I_10, Number_7, Sum_2} = Fun_19(Divisors, I_9, Number_7, Sum),
        (Sum_2 == Number_7)
    catch {return, RetCatch} -> RetCatch end.

simplify_fraction(Numerator, Denominator) ->
    try
        case (Denominator == 0) of
        true -> erlang:error({panic, "denominator cannot be zero"});
        _ -> ok
    end,
        G_2 = gcd_iter(abs_int(Numerator), abs_int(Denominator)),
        [mochi_idiv(Numerator, G_2), mochi_idiv(Denominator, G_2)]
    catch {return, RetCatch} -> RetCatch end.

factorial(N_6) ->
    try
        case (N_6 < 0) of
        true -> erlang:error({panic, "n must be >= 0"});
        _ -> ok
    end,
        Ans_17 = 1,
        I_11 = 1,
        Fun_20 = fun Fun_20_loop(Ans_17, I_11, N_6) ->
    case (I_11 =< N_6) of
        true ->
            Ans_18 = (Ans_17 * I_11),
            I_12 = (I_11 + 1),
            Fun_20_loop(Ans_18, I_12, N_6);
        _ -> {Ans_17, I_11, N_6}
    end
end,
{Ans_18, I_12, N_6} = Fun_20(Ans_17, I_11, N_6),
        Ans_18
    catch {return, RetCatch} -> RetCatch end.

fib(N_7) ->
    try
        case (N_7 < 0) of
        true -> erlang:error({panic, "n must be >= 0"});
        _ -> ok
    end,
        case (N_7 =< 1) of
        true -> throw({return, 1});
        _ -> ok
    end,
        Tmp = 0,
        Fib1 = 1,
        Ans_19 = 1,
        I_13 = 0,
        Fun_21 = fun Fun_21_loop(Ans_19, Fib1, I_13, N_7, Tmp) ->
    case (I_13 < (N_7 - 1)) of
        true ->
            Tmp_2 = Ans_19,
            Ans_20 = (Ans_19 + Fib1),
            Fib1_2 = Tmp_2,
            I_14 = (I_13 + 1),
            Fun_21_loop(Ans_20, Fib1_2, I_14, N_7, Tmp_2);
        _ -> {Ans_19, Fib1, I_13, N_7, Tmp}
    end
end,
{Ans_20, Fib1_2, I_14, N_7, Tmp_2} = Fun_21(Ans_19, Fib1, I_13, N_7, Tmp),
        Ans_20
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(is_prime(97))]),
    io:format("~ts~n", [mochi_str(sieve_er(20))]),
    io:format("~ts~n", [mochi_str(get_prime_numbers(20))]),
    io:format("~ts~n", [mochi_str(prime_factorization(287))]),
    io:format("~ts~n", [mochi_str(greatest_prime_factor(287))]),
    io:format("~ts~n", [mochi_str(smallest_prime_factor(287))]),
    io:format("~ts~n", [mochi_str(kg_v(8, 10))]),
    io:format("~ts~n", [mochi_str(goldbach(28))]),
    io:format("~ts~n", [mochi_str(get_prime(8))]),
    io:format("~ts~n", [mochi_str(get_primes_between(3, 23))]),
    io:format("~ts~n", [mochi_str(get_divisors(28))]),
    io:format("~ts~n", [mochi_str(is_perfect_number(28))]),
    io:format("~ts~n", [mochi_str(simplify_fraction(10, 20))]),
    io:format("~ts~n", [mochi_str(factorial(5))]),
    io:format("~ts~n", [mochi_str(fib(10))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
