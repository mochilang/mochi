#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, floor/1, test_floor/0, main/0]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

floor(X) ->
    try
        I = mochi_to_int(X),
        case ((X - float(I)) >= 0.0) of
        true -> throw({return, I});
        _ -> ok
    end,
        (I - 1)
    catch {return, Ret} -> Ret end.

test_floor() ->
    try
        Nums = [1.0, -1.0, 0.0, 0.0, 1.1, -1.1, 1.0, -1.0, 1000000000.0],
        Expected = [1, -1, 0, 0, 1, -2, 1, -1, 1000000000],
        Idx = 0,
        Fun = fun Fun_loop(Expected, Idx, Nums) ->
    case (Idx < erlang:length(Nums)) of
        true ->
            case (floor((case erlang:is_map(Nums) of true -> maps:get(Idx, Nums, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Nums) + Idx + 1, Nums); _ -> mochi_nth(Idx + 1, Nums) end end)) /= (case erlang:is_map(Expected) of true -> maps:get(Idx, Expected, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Expected) + Idx + 1, Expected); _ -> mochi_nth(Idx + 1, Expected) end end)) of
        true -> erlang:error("floor test failed");
        _ -> ok
    end,
            Idx_2 = (Idx + 1),
            Fun_loop(Expected, Idx_2, Nums);
        _ -> {Expected, Idx, Nums}
    end
end,
{Expected, Idx_2, Nums} = Fun(Expected, Idx, Nums),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_floor(),
        io:format("~ts~n", [mochi_str(floor(-1.1))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
