#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, gcd/2, lcm_slow/2, lcm_fast/2]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

gcd(A, B) ->
    try
        X = (case (A >= 0) of
    true -> A;
    _ -> -A
end),
        Y = (case (B >= 0) of
    true -> B;
    _ -> -B
end),
        Fun = fun Fun_loop(A, B, X, Y) ->
    case (Y /= 0) of
        true ->
            Temp = mochi_mod(X, Y),
            X_2 = Y,
            Y_2 = Temp,
            Fun_loop(A, B, X_2, Y_2);
        _ -> {A, B, X, Y}
    end
end,
{A, B, X_2, Y_2} = Fun(A, B, X, Y),
        X_2
    catch {return, Ret} -> Ret end.

lcm_slow(A_2, B_2) ->
    try
        Max = (case (A_2 >= B_2) of
    true -> A_2;
    _ -> B_2
end),
        Multiple = Max,
        Fun_2 = fun Fun_2_loop(A_2, B_2, Max, Multiple) ->
    case ((mochi_mod(Multiple, A_2) /= 0) orelse (mochi_mod(Multiple, B_2) /= 0)) of
        true ->
            Multiple_2 = (Multiple + Max),
            Fun_2_loop(A_2, B_2, Max, Multiple_2);
        _ -> {A_2, B_2, Max, Multiple}
    end
end,
{A_2, B_2, Max, Multiple_2} = Fun_2(A_2, B_2, Max, Multiple),
        Multiple_2
    catch {return, Ret} -> Ret end.

lcm_fast(A_3, B_3) ->
    try
        ((A_3 div gcd(A_3, B_3)) * B_3)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(lcm_slow(5, 2))]),
    io:format("~ts~n", [mochi_str(lcm_slow(12, 76))]),
    io:format("~ts~n", [mochi_str(lcm_fast(5, 2))]),
    io:format("~ts~n", [mochi_str(lcm_fast(12, 76))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
