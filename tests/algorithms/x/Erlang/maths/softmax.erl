#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, exp_approx/1, softmax/1, abs_val/1, approx_equal/2, test_softmax/0, main/0]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

exp_approx(X) ->
    try
        Term = 1.0,
        Sum = 1.0,
        I = 1,
        Fun = fun Fun_loop(I, Sum, Term, X) ->
    case (I < 20) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X), float(I)),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, Term_2, X);
        _ -> {I, Sum, Term, X}
    end
end,
{I_2, Sum_2, Term_2, X} = Fun(I, Sum, Term, X),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

softmax(Vec) ->
    try
        Exps = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Exps, I_3, Vec) ->
    case (I_3 < erlang:length(Vec)) of
        true ->
            Exps_2 = lists:append((case Exps of nil -> []; _ -> Exps end), [exp_approx((case erlang:is_map(Vec) of true -> maps:get(I_3, Vec, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Vec) + I_3 + 1, Vec); _ -> mochi_nth(I_3 + 1, Vec) end end))]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Exps_2, I_4, Vec);
        _ -> {Exps, I_3, Vec}
    end
end,
{Exps_2, I_4, Vec} = Fun_2(Exps, I_3, Vec),
        Total = 0.0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Exps_2, I_5, Total, Vec) ->
    case (I_5 < erlang:length(Exps_2)) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Exps_2) of true -> maps:get(I_5, Exps_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Exps_2) + I_5 + 1, Exps_2); _ -> mochi_nth(I_5 + 1, Exps_2) end end)),
            I_6 = (I_5 + 1),
            Fun_3_loop(Exps_2, I_6, Total_2, Vec);
        _ -> {Exps_2, I_5, Total, Vec}
    end
end,
{Exps_2, I_6, Total_2, Vec} = Fun_3(Exps_2, I_5, Total, Vec),
        Result = [],
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Exps_2, I_7, Result, Total_2, Vec) ->
    case (I_7 < erlang:length(Exps_2)) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [mochi_safe_div((case erlang:is_map(Exps_2) of true -> maps:get(I_7, Exps_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Exps_2) + I_7 + 1, Exps_2); _ -> mochi_nth(I_7 + 1, Exps_2) end end), Total_2)]),
            I_8 = (I_7 + 1),
            Fun_4_loop(Exps_2, I_8, Result_2, Total_2, Vec);
        _ -> {Exps_2, I_7, Result, Total_2, Vec}
    end
end,
{Exps_2, I_8, Result_2, Total_2, Vec} = Fun_4(Exps_2, I_7, Result, Total_2, Vec),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

abs_val(X_2) ->
    try
        (case (X_2 < 0.0) of
    true -> -X_2;
    _ -> X_2
end)
    catch {return, RetCatch} -> RetCatch end.

approx_equal(A, B) ->
    try
        (abs_val((A - B)) < 0.0001)
    catch {return, RetCatch} -> RetCatch end.

test_softmax() ->
    try
        S1 = softmax([1.0, 2.0, 3.0, 4.0]),
        Sum1 = 0.0,
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(I_9, S1, Sum1) ->
    case (I_9 < erlang:length(S1)) of
        true ->
            Sum1_2 = (Sum1 + (case erlang:is_map(S1) of true -> maps:get(I_9, S1, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(S1) + I_9 + 1, S1); _ -> mochi_nth(I_9 + 1, S1) end end)),
            I_10 = (I_9 + 1),
            Fun_5_loop(I_10, S1, Sum1_2);
        _ -> {I_9, S1, Sum1}
    end
end,
{I_10, S1, Sum1_2} = Fun_5(I_9, S1, Sum1),
        case mochi_not(approx_equal(Sum1_2, 1.0)) of
        true -> erlang:error({panic, "sum test failed"});
        _ -> ok
    end,
        S2 = softmax([5.0, 5.0]),
        case mochi_not((approx_equal((case erlang:is_map(S2) of true -> maps:get(0, S2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(S2) + 0 + 1, S2); _ -> mochi_nth(0 + 1, S2) end end), 0.5) andalso approx_equal((case erlang:is_map(S2) of true -> maps:get(1, S2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(S2) + 1 + 1, S2); _ -> mochi_nth(1 + 1, S2) end end), 0.5))) of
        true -> erlang:error({panic, "equal elements test failed"});
        _ -> ok
    end,
        S3 = softmax([0.0]),
        case mochi_not(approx_equal((case erlang:is_map(S3) of true -> maps:get(0, S3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(S3) + 0 + 1, S3); _ -> mochi_nth(0 + 1, S3) end end), 1.0)) of
        true -> erlang:error({panic, "zero vector test failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_softmax(),
        io:format("~ts~n", [mochi_str(softmax([1.0, 2.0, 3.0, 4.0]))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
