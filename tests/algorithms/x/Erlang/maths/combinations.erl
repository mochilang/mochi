#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, combinations/2]).

% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

combinations(N, K) ->
    try
        case ((K < 0) orelse (N < K)) of
        true -> erlang:error({panic, "Please enter positive integers for n and k where n >= k"});
        _ -> ok
    end,
        Res = 1,
        I = 0,
        Fun = fun Fun_loop(I, K, N, Res) ->
    case (I < K) of
        true ->
            Res_2 = (Res * (N - I)),
            Res_3 = (Res_2 div (I + 1)),
            I_2 = (I + 1),
            Fun_loop(I_2, K, N, Res_3);
        _ -> {I, K, N, Res}
    end
end,
{I_2, K, N, Res_3} = Fun(I, K, N, Res),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(("The number of five-card hands possible from a standard fifty-two card deck is: " ++ mochi_str(combinations(52, 5))))]),
    io:format("~ts~n", [mochi_repr("")]),
    io:format("~ts~n", [mochi_repr((("If a class of 40 students must be arranged into groups of 4 for group projects, there are " ++ mochi_str(combinations(40, 4))) ++ " ways to arrange them."))]),
    io:format("~ts~n", [mochi_repr("")]),
    io:format("~ts~n", [mochi_repr((("If 10 teams are competing in a Formula One race, there are " ++ mochi_str(combinations(10, 3))) ++ " ways that first, second and third place can be awarded."))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
