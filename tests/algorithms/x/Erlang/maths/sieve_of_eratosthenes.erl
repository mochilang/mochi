#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, isqrt/1, prime_sieve/1]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

isqrt(N) ->
    try
        R = 0,
        Fun = fun Fun_loop(N, R) ->
    case (((R + 1) * (R + 1)) =< N) of
        true ->
            R_2 = (R + 1),
            Fun_loop(N, R_2);
        _ -> {N, R}
    end
end,
{N, R_2} = Fun(N, R),
        R_2
    catch {return, RetCatch} -> RetCatch end.

prime_sieve(Num) ->
    try
        case (Num =< 0) of
        true -> erlang:error({panic, "Invalid input, please enter a positive integer."});
        _ -> ok
    end,
        Sieve = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Num, Sieve) ->
    case (I =< Num) of
        true ->
            Sieve_2 = lists:append((case Sieve of nil -> []; _ -> Sieve end), [true]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Num, Sieve_2);
        _ -> {I, Num, Sieve}
    end
end,
{I_2, Num, Sieve_2} = Fun_2(I, Num, Sieve),
        Prime = [],
        Start = 2,
        End = isqrt(Num),
        Fun_5 = fun Fun_5_loop(End, I_2, Num, Prime, Sieve_2, Start) ->
    case (Start =< End) of
        true ->
            Sieve_5 = (case (case erlang:is_map(Sieve_2) of true -> maps:get(Start, Sieve_2, nil); _ -> case Start < 0 of true -> mochi_nth(erlang:length(Sieve_2) + Start + 1, Sieve_2); _ -> mochi_nth(Start + 1, Sieve_2) end end) of
        true -> Prime_2 = lists:append((case Prime of nil -> []; _ -> Prime end), [Start]),
            J = (Start * Start),
            Fun_3 = fun Fun_3_loop(End, I_2, J, Num, Prime_2, Sieve_2, Start) ->
    case (J =< Num) of
        true ->
            Sieve_4 = (case (case erlang:is_map(Sieve_2) of true -> maps:get(J, Sieve_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Sieve_2) + J + 1, Sieve_2); _ -> mochi_nth(J + 1, Sieve_2) end end) of
        true -> Sieve_3 = lists:sublist(Sieve_2, J) ++ [false] ++ lists:nthtail(J + 1, Sieve_2),
            Sieve_3;
        _ -> Sieve_2
    end),
            J_2 = (J + Start),
            Fun_3_loop(End, I_2, J_2, Num, Prime_2, Sieve_4, Start);
        _ -> {End, I_2, J, Num, Prime_2, Sieve_2, Start}
    end
end,
{End, I_2, J_2, Num, Prime_2, Sieve_4, Start} = Fun_3(End, I_2, J, Num, Prime_2, Sieve_2, Start),
            Fun_4 = Fun_3,
            J_3 = J_2,
            Prime_3 = Prime_2,
            Sieve_4;
        _ -> Fun_4 = Fun_2,
            J_3 = nil,
            Prime_3 = Prime,
            Sieve_2
    end),
            Start_2 = (Start + 1),
            Fun_5_loop(End, I_2, Num, Prime_3, Sieve_5, Start_2);
        _ -> {End, I_2, Num, Prime, Sieve_2, Start}
    end
end,
{End, I_2, Num, Prime_3, Sieve_5, Start_2} = Fun_5(End, I_2, Num, Prime, Sieve_2, Start),
        K = (End + 1),
        Fun_6 = fun Fun_6_loop(End, I_2, K, Num, Prime_3, Sieve_5, Start_2) ->
    case (K =< Num) of
        true ->
            Prime_5 = (case (case erlang:is_map(Sieve_5) of true -> maps:get(K, Sieve_5, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Sieve_5) + K + 1, Sieve_5); _ -> mochi_nth(K + 1, Sieve_5) end end) of
        true -> Prime_4 = lists:append((case Prime_3 of nil -> []; _ -> Prime_3 end), [K]),
            Prime_4;
        _ -> Prime_3
    end),
            K_2 = (K + 1),
            Fun_6_loop(End, I_2, K_2, Num, Prime_5, Sieve_5, Start_2);
        _ -> {End, I_2, K, Num, Prime_3, Sieve_5, Start_2}
    end
end,
{End, I_2, K_2, Num, Prime_5, Sieve_5, Start_2} = Fun_6(End, I_2, K, Num, Prime_3, Sieve_5, Start_2),
        Prime_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(prime_sieve(50))]),
    io:format("~ts~n", [mochi_str(prime_sieve(25))]),
    io:format("~ts~n", [mochi_str(prime_sieve(10))]),
    io:format("~ts~n", [mochi_str(prime_sieve(9))]),
    io:format("~ts~n", [mochi_str(prime_sieve(2))]),
    io:format("~ts~n", [mochi_str(prime_sieve(1))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
