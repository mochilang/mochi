#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, reverse/1, factors_of_a_number/1, run_tests/0, main/0]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

reverse(Xs) ->
    try
        Res = [],
        I = (erlang:length(Xs) - 1),
        Fun = fun Fun_loop(I, Res, Xs) ->
    case (I >= 0) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            I_2 = (I - 1),
            Fun_loop(I_2, Res_2, Xs);
        _ -> {I, Res, Xs}
    end
end,
{I_2, Res_2, Xs} = Fun(I, Res, Xs),
        Res_2
    catch {return, Ret} -> Ret end.

factors_of_a_number(Num) ->
    try
        Facs = [],
        case (Num < 1) of
        true -> throw({return, Facs});
        _ -> ok
    end,
        Small = [],
        Large = [],
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(Facs, I_3, Large, Num, Small) ->
    case ((I_3 * I_3) =< Num) of
        true ->
            case (mochi_mod(Num, I_3) == 0) of
        true -> Small_2 = lists:append((case Small of nil -> []; _ -> Small end), [I_3]),
            D = (Num div I_3),
            case (D /= I_3) of
        true -> Large_2 = lists:append((case Large of nil -> []; _ -> Large end), [D]),
            Large_3 = Large_2;
        _ -> Large_3 = Large
    end,
            D_2 = D,
            Large_4 = Large_3,
            Small_3 = Small_2;
        _ -> D_2 = nil,
            Large_4 = Large,
            Small_3 = Small
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Facs, I_4, Large_4, Num, Small_3);
        _ -> {Facs, I_3, Large, Num, Small}
    end
end,
{Facs, I_4, Large_4, Num, Small_3} = Fun_2(Facs, I_3, Large, Num, Small),
        Facs_2 = lists:append(Small_3, lists:reverse(Large_4)),
        Facs_2
    catch {return, Ret} -> Ret end.

run_tests() ->
    try
        case (factors_of_a_number(1) /= [1]) of
        true -> erlang:error("case1 failed");
        _ -> ok
    end,
        case (factors_of_a_number(5) /= [1, 5]) of
        true -> erlang:error("case2 failed");
        _ -> ok
    end,
        case (factors_of_a_number(24) /= [1, 2, 3, 4, 6, 8, 12, 24]) of
        true -> erlang:error("case3 failed");
        _ -> ok
    end,
        case (factors_of_a_number(-24) /= []) of
        true -> erlang:error("case4 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        run_tests(),
        io:format("~ts~n", [mochi_str(factors_of_a_number(24))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
