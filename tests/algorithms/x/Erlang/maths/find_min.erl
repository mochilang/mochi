#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, find_min_iterative/1, find_min_recursive/3, test_find_min/0, main/0]).

% Generated by Mochi transpiler v0.10.66 (f6dfa6fffe)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

find_min_iterative(Nums) ->
    try
        case (erlang:length(Nums) == 0) of
        true -> erlang:error({panic, "find_min_iterative() arg is an empty sequence"});
        _ -> ok
    end,
        Min_num = (case erlang:is_map(Nums) of true -> maps:get(0, Nums, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Nums) + 0 + 1, Nums); _ -> mochi_nth(0 + 1, Nums) end end),
        I = 0,
        Fun = fun Fun_loop(I, Min_num, Nums) ->
    case (I < erlang:length(Nums)) of
        true ->
            Num = (case erlang:is_map(Nums) of true -> maps:get(I, Nums, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Nums) + I + 1, Nums); _ -> mochi_nth(I + 1, Nums) end end),
            Min_num_3 = (case (Num < Min_num) of
        true -> Min_num_2 = Num,
            Min_num_2;
        _ -> Min_num
    end),
            I_2 = (I + 1),
            Fun_loop(I_2, Min_num_3, Nums);
        _ -> {I, Min_num, Nums}
    end
end,
{I_2, Min_num_3, Nums} = Fun(I, Min_num, Nums),
        Min_num_3
    catch {return, RetCatch} -> RetCatch end.

find_min_recursive(Nums_2, Left, Right) ->
    try
        N = erlang:length(Nums_2),
        case (N == 0) of
        true -> erlang:error({panic, "find_min_recursive() arg is an empty sequence"});
        _ -> ok
    end,
        case ((((Left >= N) orelse (Left < (0 - N))) orelse (Right >= N)) orelse (Right < (0 - N))) of
        true -> erlang:error({panic, "list index out of range"});
        _ -> ok
    end,
        L = Left,
        R = Right,
        L_3 = (case (L < 0) of
        true -> L_2 = (N + L),
            L_2;
        _ -> L
    end),
        R_3 = (case (R < 0) of
        true -> R_2 = (N + R),
            R_2;
        _ -> R
    end),
        case (L_3 == R_3) of
        true -> throw({return, (case erlang:is_map(Nums_2) of true -> maps:get(L_3, Nums_2, nil); _ -> case L_3 < 0 of true -> mochi_nth(erlang:length(Nums_2) + L_3 + 1, Nums_2); _ -> mochi_nth(L_3 + 1, Nums_2) end end)});
        _ -> ok
    end,
        Mid = ((L_3 + R_3) div 2),
        Left_min = find_min_recursive(Nums_2, L_3, Mid),
        Right_min = find_min_recursive(Nums_2, (Mid + 1), R_3),
        case (Left_min =< Right_min) of
        true -> throw({return, Left_min});
        _ -> ok
    end,
        Right_min
    catch {return, RetCatch} -> RetCatch end.

test_find_min() ->
    try
        A = [3.0, 2.0, 1.0],
        case (find_min_iterative(A) /= 1.0) of
        true -> erlang:error({panic, "iterative test1 failed"});
        _ -> ok
    end,
        case (find_min_recursive(A, 0, (erlang:length(A) - 1)) /= 1.0) of
        true -> erlang:error({panic, "recursive test1 failed"});
        _ -> ok
    end,
        B = [-3.0, -2.0, -1.0],
        case (find_min_iterative(B) /= -3.0) of
        true -> erlang:error({panic, "iterative test2 failed"});
        _ -> ok
    end,
        case (find_min_recursive(B, 0, (erlang:length(B) - 1)) /= -3.0) of
        true -> erlang:error({panic, "recursive test2 failed"});
        _ -> ok
    end,
        C = [3.0, -3.0, 0.0],
        case (find_min_iterative(C) /= -3.0) of
        true -> erlang:error({panic, "iterative test3 failed"});
        _ -> ok
    end,
        case (find_min_recursive(C, 0, (erlang:length(C) - 1)) /= -3.0) of
        true -> erlang:error({panic, "recursive test3 failed"});
        _ -> ok
    end,
        D = [1.0, 3.0, 5.0, 7.0, 9.0, 2.0, 4.0, 6.0, 8.0, 10.0],
        case (find_min_recursive(D, (0 - erlang:length(D)), (0 - 1)) /= 1.0) of
        true -> erlang:error({panic, "negative index test failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_find_min(),
        Sample = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0, -3.0, 24.0, -56.0],
        io:format("~ts~n", [mochi_str(find_min_iterative(Sample))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
