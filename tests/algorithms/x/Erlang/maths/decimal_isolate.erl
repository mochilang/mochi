#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, floor/1, pow10/1, round/2, decimal_isolate/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (589dcb03e5) on 2025-08-07 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

floor(X) ->
    try
        I = mochi_to_int(X),
        case (float(I) > X) of
        true -> I_2 = (I - 1),
            I_3 = I_2;
        _ -> I_3 = I
    end,
        float(I_3)
    catch {return, Ret} -> Ret end.

pow10(N) ->
    try
        P = 1.0,
        I_4 = 0,
        Fun = fun Fun_loop(I_4, N, P) ->
    case (I_4 < N) of
        true ->
            P_2 = mochi_safe_mul(P, 10.0),
            I_5 = (I_4 + 1),
            Fun_loop(I_5, N, P_2);
        _ -> {I_4, N, P}
    end
end,
{I_5, N, P_2} = Fun(I_4, N, P),
        P_2
    catch {return, Ret} -> Ret end.

round(X_2, N_2) ->
    try
        M = pow10(N_2),
        mochi_safe_div(floor((mochi_safe_mul(X_2, M) + 0.5)), M)
    catch {return, Ret} -> Ret end.

decimal_isolate(Number, Digit_amount) ->
    try
        Whole = mochi_to_int(Number),
        Frac = (Number - float(Whole)),
        case (Digit_amount > 0) of
        true -> throw({return, round(Frac, Digit_amount)});
        _ -> ok
    end,
        Frac
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_str(decimal_isolate(1.53, 0))]),
        io:format("~ts~n", [mochi_str(decimal_isolate(35.345, 1))]),
        io:format("~ts~n", [mochi_str(decimal_isolate(35.345, 2))]),
        io:format("~ts~n", [mochi_str(decimal_isolate(35.345, 3))]),
        io:format("~ts~n", [mochi_str(decimal_isolate(-14.789, 3))]),
        io:format("~ts~n", [mochi_str(decimal_isolate(0.0, 2))]),
        io:format("~ts~n", [mochi_str(decimal_isolate(-14.123, 1))]),
        io:format("~ts~n", [mochi_str(decimal_isolate(-14.123, 2))]),
        io:format("~ts~n", [mochi_str(decimal_isolate(-14.123, 3))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
