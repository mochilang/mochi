#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, sqrt_approx/1, sign/1, vector_norm/1, identity_matrix/1, copy_matrix/1, matmul/2, qr_decomposition/1, print_matrix/1]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

sqrt_approx(X) ->
    try
        case (X =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

sign(X_2) ->
    try
        case (X_2 >= 0.0) of
        true -> throw({return, 1.0});
        _ -> throw({return, -1.0})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

vector_norm(V) ->
    try
        Sum = 0.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Sum, V) ->
    case (I_3 < erlang:length(V)) of
        true ->
            Sum_2 = (Sum + mochi_safe_mul((case erlang:is_map(V) of true -> maps:get(I_3, V, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(V) + I_3 + 1, V); _ -> mochi_nth(I_3 + 1, V) end end), (case erlang:is_map(V) of true -> maps:get(I_3, V, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(V) + I_3 + 1, V); _ -> mochi_nth(I_3 + 1, V) end end))),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Sum_2, V);
        _ -> {I_3, Sum, V}
    end
end,
{I_4, Sum_2, V} = Fun_2(I_3, Sum, V),
        N = sqrt_approx(Sum_2),
        N
    catch {return, RetCatch} -> RetCatch end.

identity_matrix(N_2) ->
    try
        Mat = [],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, Mat, N_2) ->
    case (I_5 < N_2) of
        true ->
            Row = [],
            J = 0,
            Fun_3 = fun Fun_3_loop(I_5, J, Mat, N_2, Row) ->
    case (J < N_2) of
        true ->
            Row_4 = (case (I_5 == J) of
        true -> Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [1.0]),
            Row_2;
        _ -> Row_3 = lists:append((case Row of nil -> []; _ -> Row end), [0.0]),
            Row_3
    end),
            J_2 = (J + 1),
            Fun_3_loop(I_5, J_2, Mat, N_2, Row_4);
        _ -> {I_5, J, Mat, N_2, Row}
    end
end,
{I_5, J_2, Mat, N_2, Row_4} = Fun_3(I_5, J, Mat, N_2, Row),
            Mat_2 = lists:append((case Mat of nil -> []; _ -> Mat end), [Row_4]),
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Mat_2, N_2);
        _ -> {I_5, Mat, N_2}
    end
end,
{I_6, Mat_2, N_2} = Fun_4(I_5, Mat, N_2),
        Mat_2
    catch {return, RetCatch} -> RetCatch end.

copy_matrix(A) ->
    try
        Mat_3 = [],
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(A, I_7, Mat_3) ->
    case (I_7 < erlang:length(A)) of
        true ->
            Row_5 = [],
            J_3 = 0,
            Fun_5 = fun Fun_5_loop(A, I_7, J_3, Mat_3, Row_5) ->
    case (J_3 < erlang:length((case erlang:is_map(A) of true -> maps:get(I_7, A, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A) + I_7 + 1, A); _ -> mochi_nth(I_7 + 1, A) end end))) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [(case erlang:is_map((case erlang:is_map(A) of true -> maps:get(I_7, A, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A) + I_7 + 1, A); _ -> mochi_nth(I_7 + 1, A) end end)) of true -> maps:get(J_3, (case erlang:is_map(A) of true -> maps:get(I_7, A, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A) + I_7 + 1, A); _ -> mochi_nth(I_7 + 1, A) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(I_7, A, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A) + I_7 + 1, A); _ -> mochi_nth(I_7 + 1, A) end end)) + J_3 + 1, (case erlang:is_map(A) of true -> maps:get(I_7, A, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A) + I_7 + 1, A); _ -> mochi_nth(I_7 + 1, A) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(A) of true -> maps:get(I_7, A, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A) + I_7 + 1, A); _ -> mochi_nth(I_7 + 1, A) end end)) end end)]),
            J_4 = (J_3 + 1),
            Fun_5_loop(A, I_7, J_4, Mat_3, Row_6);
        _ -> {A, I_7, J_3, Mat_3, Row_5}
    end
end,
{A, I_7, J_4, Mat_3, Row_6} = Fun_5(A, I_7, J_3, Mat_3, Row_5),
            Mat_4 = lists:append((case Mat_3 of nil -> []; _ -> Mat_3 end), [Row_6]),
            I_8 = (I_7 + 1),
            Fun_6_loop(A, I_8, Mat_4);
        _ -> {A, I_7, Mat_3}
    end
end,
{A, I_8, Mat_4} = Fun_6(A, I_7, Mat_3),
        Mat_4
    catch {return, RetCatch} -> RetCatch end.

matmul(A_2, B) ->
    try
        M = erlang:length(A_2),
        N_3 = erlang:length((case erlang:is_map(A_2) of true -> maps:get(0, A_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_2) + 0 + 1, A_2); _ -> mochi_nth(0 + 1, A_2) end end)),
        P = erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)),
        Res = [],
        I_9 = 0,
        Fun_9 = fun Fun_9_loop(A_2, B, I_9, M, N_3, P, Res) ->
    case (I_9 < M) of
        true ->
            Row_7 = [],
            J_5 = 0,
            Fun_8 = fun Fun_8_loop(A_2, B, I_9, J_5, M, N_3, P, Res, Row_7) ->
    case (J_5 < P) of
        true ->
            Sum_3 = 0.0,
            K = 0,
            Fun_7 = fun Fun_7_loop(A_2, B, I_9, J_5, K, M, N_3, P, Res, Row_7, Sum_3) ->
    case (K < N_3) of
        true ->
            Sum_4 = (Sum_3 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(A_2) of true -> maps:get(I_9, A_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_2) + I_9 + 1, A_2); _ -> mochi_nth(I_9 + 1, A_2) end end)) of true -> maps:get(K, (case erlang:is_map(A_2) of true -> maps:get(I_9, A_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_2) + I_9 + 1, A_2); _ -> mochi_nth(I_9 + 1, A_2) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_2) of true -> maps:get(I_9, A_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_2) + I_9 + 1, A_2); _ -> mochi_nth(I_9 + 1, A_2) end end)) + K + 1, (case erlang:is_map(A_2) of true -> maps:get(I_9, A_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_2) + I_9 + 1, A_2); _ -> mochi_nth(I_9 + 1, A_2) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(A_2) of true -> maps:get(I_9, A_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(A_2) + I_9 + 1, A_2); _ -> mochi_nth(I_9 + 1, A_2) end end)) end end), (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) of true -> maps:get(J_5, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) + J_5 + 1, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) end end))),
            K_2 = (K + 1),
            Fun_7_loop(A_2, B, I_9, J_5, K_2, M, N_3, P, Res, Row_7, Sum_4);
        _ -> {A_2, B, I_9, J_5, K, M, N_3, P, Res, Row_7, Sum_3}
    end
end,
{A_2, B, I_9, J_5, K_2, M, N_3, P, Res, Row_7, Sum_4} = Fun_7(A_2, B, I_9, J_5, K, M, N_3, P, Res, Row_7, Sum_3),
            Row_8 = lists:append((case Row_7 of nil -> []; _ -> Row_7 end), [Sum_4]),
            J_6 = (J_5 + 1),
            Fun_8_loop(A_2, B, I_9, J_6, M, N_3, P, Res, Row_8);
        _ -> {A_2, B, I_9, J_5, M, N_3, P, Res, Row_7}
    end
end,
{A_2, B, I_9, J_6, M, N_3, P, Res, Row_8} = Fun_8(A_2, B, I_9, J_5, M, N_3, P, Res, Row_7),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Row_8]),
            I_10 = (I_9 + 1),
            Fun_9_loop(A_2, B, I_10, M, N_3, P, Res_2);
        _ -> {A_2, B, I_9, M, N_3, P, Res}
    end
end,
{A_2, B, I_10, M, N_3, P, Res_2} = Fun_9(A_2, B, I_9, M, N_3, P, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

qr_decomposition(A_3) ->
    try
        M_2 = erlang:length(A_3),
        N_4 = erlang:length((case erlang:is_map(A_3) of true -> maps:get(0, A_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_3) + 0 + 1, A_3); _ -> mochi_nth(0 + 1, A_3) end end)),
        T = (case (M_2 < N_4) of
    true -> M_2;
    _ -> N_4
end),
        Q = identity_matrix(M_2),
        R = copy_matrix(A_3),
        K_3 = 0,
        Fun_18 = fun Fun_18_loop(A_3, K_3, M_2, N_4, Q, R, T) ->
    case (K_3 < (T - 1)) of
        true ->
            X_3 = [],
            I_11 = K_3,
            Fun_10 = fun Fun_10_loop(A_3, I_11, K_3, M_2, N_4, Q, R, T, X_3) ->
    case (I_11 < M_2) of
        true ->
            X_4 = lists:append((case X_3 of nil -> []; _ -> X_3 end), [(case erlang:is_map((case erlang:is_map(R) of true -> maps:get(I_11, R, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(R) + I_11 + 1, R); _ -> mochi_nth(I_11 + 1, R) end end)) of true -> maps:get(K_3, (case erlang:is_map(R) of true -> maps:get(I_11, R, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(R) + I_11 + 1, R); _ -> mochi_nth(I_11 + 1, R) end end), nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(R) of true -> maps:get(I_11, R, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(R) + I_11 + 1, R); _ -> mochi_nth(I_11 + 1, R) end end)) + K_3 + 1, (case erlang:is_map(R) of true -> maps:get(I_11, R, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(R) + I_11 + 1, R); _ -> mochi_nth(I_11 + 1, R) end end)); _ -> mochi_nth(K_3 + 1, (case erlang:is_map(R) of true -> maps:get(I_11, R, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(R) + I_11 + 1, R); _ -> mochi_nth(I_11 + 1, R) end end)) end end)]),
            I_12 = (I_11 + 1),
            Fun_10_loop(A_3, I_12, K_3, M_2, N_4, Q, R, T, X_4);
        _ -> {A_3, I_11, K_3, M_2, N_4, Q, R, T, X_3}
    end
end,
{A_3, I_12, K_3, M_2, N_4, Q, R, T, X_4} = Fun_10(A_3, I_11, K_3, M_2, N_4, Q, R, T, X_3),
            E1 = [],
            I_13 = 0,
            Fun_11 = fun Fun_11_loop(A_3, E1, I_13, K_3, M_2, N_4, Q, R, T, X_4) ->
    case (I_13 < erlang:length(X_4)) of
        true ->
            E1_4 = (case (I_13 == 0) of
        true -> E1_2 = lists:append((case E1 of nil -> []; _ -> E1 end), [1.0]),
            E1_2;
        _ -> E1_3 = lists:append((case E1 of nil -> []; _ -> E1 end), [0.0]),
            E1_3
    end),
            I_14 = (I_13 + 1),
            Fun_11_loop(A_3, E1_4, I_14, K_3, M_2, N_4, Q, R, T, X_4);
        _ -> {A_3, E1, I_13, K_3, M_2, N_4, Q, R, T, X_4}
    end
end,
{A_3, E1_4, I_14, K_3, M_2, N_4, Q, R, T, X_4} = Fun_11(A_3, E1, I_13, K_3, M_2, N_4, Q, R, T, X_4),
            Alpha = vector_norm(X_4),
            S = mochi_safe_mul(sign((case erlang:is_map(X_4) of true -> maps:get(0, X_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(X_4) + 0 + 1, X_4); _ -> mochi_nth(0 + 1, X_4) end end)), Alpha),
            V_2 = [],
            I_15 = 0,
            Fun_12 = fun Fun_12_loop(A_3, Alpha, E1_4, I_15, K_3, M_2, N_4, Q, R, S, T, V_2, X_4) ->
    case (I_15 < erlang:length(X_4)) of
        true ->
            V_3 = lists:append((case V_2 of nil -> []; _ -> V_2 end), [((case erlang:is_map(X_4) of true -> maps:get(I_15, X_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(X_4) + I_15 + 1, X_4); _ -> mochi_nth(I_15 + 1, X_4) end end) + mochi_safe_mul(S, (case erlang:is_map(E1_4) of true -> maps:get(I_15, E1_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(E1_4) + I_15 + 1, E1_4); _ -> mochi_nth(I_15 + 1, E1_4) end end)))]),
            I_16 = (I_15 + 1),
            Fun_12_loop(A_3, Alpha, E1_4, I_16, K_3, M_2, N_4, Q, R, S, T, V_3, X_4);
        _ -> {A_3, Alpha, E1_4, I_15, K_3, M_2, N_4, Q, R, S, T, V_2, X_4}
    end
end,
{A_3, Alpha, E1_4, I_16, K_3, M_2, N_4, Q, R, S, T, V_3, X_4} = Fun_12(A_3, Alpha, E1_4, I_15, K_3, M_2, N_4, Q, R, S, T, V_2, X_4),
            Vnorm = vector_norm(V_3),
            I_17 = 0,
            Fun_13 = fun Fun_13_loop(A_3, Alpha, E1_4, I_17, K_3, M_2, N_4, Q, R, S, T, V_3, Vnorm, X_4) ->
    case (I_17 < erlang:length(V_3)) of
        true ->
            V_4 = lists:sublist(V_3, I_17) ++ [mochi_safe_div((case erlang:is_map(V_3) of true -> maps:get(I_17, V_3, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(V_3) + I_17 + 1, V_3); _ -> mochi_nth(I_17 + 1, V_3) end end), Vnorm)] ++ lists:nthtail(I_17 + 1, V_3),
            I_18 = (I_17 + 1),
            Fun_13_loop(A_3, Alpha, E1_4, I_18, K_3, M_2, N_4, Q, R, S, T, V_4, Vnorm, X_4);
        _ -> {A_3, Alpha, E1_4, I_17, K_3, M_2, N_4, Q, R, S, T, V_3, Vnorm, X_4}
    end
end,
{A_3, Alpha, E1_4, I_18, K_3, M_2, N_4, Q, R, S, T, V_4, Vnorm, X_4} = Fun_13(A_3, Alpha, E1_4, I_17, K_3, M_2, N_4, Q, R, S, T, V_3, Vnorm, X_4),
            Size = erlang:length(V_4),
            Qk_small = [],
            I_19 = 0,
            Fun_15 = fun Fun_15_loop(A_3, Alpha, E1_4, I_19, K_3, M_2, N_4, Q, Qk_small, R, S, Size, T, V_4, Vnorm, X_4) ->
    case (I_19 < Size) of
        true ->
            Row_9 = [],
            J_7 = 0,
            Fun_14 = fun Fun_14_loop(A_3, Alpha, E1_4, I_19, J_7, K_3, M_2, N_4, Q, Qk_small, R, Row_9, S, Size, T, V_4, Vnorm, X_4) ->
    case (J_7 < Size) of
        true ->
            Delta = (case (I_19 == J_7) of
    true -> 1.0;
    _ -> 0.0
end),
            Row_10 = lists:append((case Row_9 of nil -> []; _ -> Row_9 end), [(Delta - mochi_safe_mul(mochi_safe_mul(2.0, (case erlang:is_map(V_4) of true -> maps:get(I_19, V_4, nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(V_4) + I_19 + 1, V_4); _ -> mochi_nth(I_19 + 1, V_4) end end)), (case erlang:is_map(V_4) of true -> maps:get(J_7, V_4, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(V_4) + J_7 + 1, V_4); _ -> mochi_nth(J_7 + 1, V_4) end end)))]),
            J_8 = (J_7 + 1),
            Fun_14_loop(A_3, Alpha, E1_4, I_19, J_8, K_3, M_2, N_4, Q, Qk_small, R, Row_10, S, Size, T, V_4, Vnorm, X_4);
        _ -> {A_3, Alpha, E1_4, I_19, J_7, K_3, M_2, N_4, Q, Qk_small, R, Row_9, S, Size, T, V_4, Vnorm, X_4}
    end
end,
{A_3, Alpha, E1_4, I_19, J_8, K_3, M_2, N_4, Q, Qk_small, R, Row_10, S, Size, T, V_4, Vnorm, X_4} = Fun_14(A_3, Alpha, E1_4, I_19, J_7, K_3, M_2, N_4, Q, Qk_small, R, Row_9, S, Size, T, V_4, Vnorm, X_4),
            Qk_small_2 = lists:append((case Qk_small of nil -> []; _ -> Qk_small end), [Row_10]),
            I_20 = (I_19 + 1),
            Fun_15_loop(A_3, Alpha, E1_4, I_20, K_3, M_2, N_4, Q, Qk_small_2, R, S, Size, T, V_4, Vnorm, X_4);
        _ -> {A_3, Alpha, E1_4, I_19, K_3, M_2, N_4, Q, Qk_small, R, S, Size, T, V_4, Vnorm, X_4}
    end
end,
{A_3, Alpha, E1_4, I_20, K_3, M_2, N_4, Q, Qk_small_2, R, S, Size, T, V_4, Vnorm, X_4} = Fun_15(A_3, Alpha, E1_4, I_19, K_3, M_2, N_4, Q, Qk_small, R, S, Size, T, V_4, Vnorm, X_4),
            Qk = identity_matrix(M_2),
            I_21 = 0,
            Fun_17 = fun Fun_17_loop(A_3, Alpha, E1_4, I_21, K_3, M_2, N_4, Q, Qk, Qk_small_2, R, S, Size, T, V_4, Vnorm, X_4) ->
    case (I_21 < Size) of
        true ->
            J_9 = 0,
            Fun_16 = fun Fun_16_loop(A_3, Alpha, E1_4, I_21, J_9, K_3, M_2, N_4, Q, Qk, Qk_small_2, R, S, Size, T, V_4, Vnorm, X_4) ->
    case (J_9 < Size) of
        true ->
            Qk_2 = lists:sublist(Qk, (K_3 + I_21)) ++ [lists:sublist(lists:nth((K_3 + I_21) + 1, Qk), (K_3 + J_9)) ++ [(case erlang:is_map((case erlang:is_map(Qk_small_2) of true -> maps:get(I_21, Qk_small_2, nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(Qk_small_2) + I_21 + 1, Qk_small_2); _ -> mochi_nth(I_21 + 1, Qk_small_2) end end)) of true -> maps:get(J_9, (case erlang:is_map(Qk_small_2) of true -> maps:get(I_21, Qk_small_2, nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(Qk_small_2) + I_21 + 1, Qk_small_2); _ -> mochi_nth(I_21 + 1, Qk_small_2) end end), nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Qk_small_2) of true -> maps:get(I_21, Qk_small_2, nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(Qk_small_2) + I_21 + 1, Qk_small_2); _ -> mochi_nth(I_21 + 1, Qk_small_2) end end)) + J_9 + 1, (case erlang:is_map(Qk_small_2) of true -> maps:get(I_21, Qk_small_2, nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(Qk_small_2) + I_21 + 1, Qk_small_2); _ -> mochi_nth(I_21 + 1, Qk_small_2) end end)); _ -> mochi_nth(J_9 + 1, (case erlang:is_map(Qk_small_2) of true -> maps:get(I_21, Qk_small_2, nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(Qk_small_2) + I_21 + 1, Qk_small_2); _ -> mochi_nth(I_21 + 1, Qk_small_2) end end)) end end)] ++ lists:nthtail((K_3 + J_9) + 1, lists:nth((K_3 + I_21) + 1, Qk))] ++ lists:nthtail((K_3 + I_21) + 1, Qk),
            J_10 = (J_9 + 1),
            Fun_16_loop(A_3, Alpha, E1_4, I_21, J_10, K_3, M_2, N_4, Q, Qk_2, Qk_small_2, R, S, Size, T, V_4, Vnorm, X_4);
        _ -> {A_3, Alpha, E1_4, I_21, J_9, K_3, M_2, N_4, Q, Qk, Qk_small_2, R, S, Size, T, V_4, Vnorm, X_4}
    end
end,
{A_3, Alpha, E1_4, I_21, J_10, K_3, M_2, N_4, Q, Qk_2, Qk_small_2, R, S, Size, T, V_4, Vnorm, X_4} = Fun_16(A_3, Alpha, E1_4, I_21, J_9, K_3, M_2, N_4, Q, Qk, Qk_small_2, R, S, Size, T, V_4, Vnorm, X_4),
            I_22 = (I_21 + 1),
            Fun_17_loop(A_3, Alpha, E1_4, I_22, K_3, M_2, N_4, Q, Qk_2, Qk_small_2, R, S, Size, T, V_4, Vnorm, X_4);
        _ -> {A_3, Alpha, E1_4, I_21, K_3, M_2, N_4, Q, Qk, Qk_small_2, R, S, Size, T, V_4, Vnorm, X_4}
    end
end,
{A_3, Alpha, E1_4, I_22, K_3, M_2, N_4, Q, Qk_2, Qk_small_2, R, S, Size, T, V_4, Vnorm, X_4} = Fun_17(A_3, Alpha, E1_4, I_21, K_3, M_2, N_4, Q, Qk, Qk_small_2, R, S, Size, T, V_4, Vnorm, X_4),
            Q_2 = matmul(Q, Qk_2),
            R_2 = matmul(Qk_2, R),
            K_4 = (K_3 + 1),
            Fun_18_loop(A_3, K_4, M_2, N_4, Q_2, R_2, T);
        _ -> {A_3, K_3, M_2, N_4, Q, R, T}
    end
end,
{A_3, K_4, M_2, N_4, Q_2, R_2, T} = Fun_18(A_3, K_3, M_2, N_4, Q, R, T),
        #{"q" => Q_2, "r" => R_2}
    catch {return, RetCatch} -> RetCatch end.

print_matrix(Mat_5) ->
    try
        I_23 = 0,
        Fun_20 = fun Fun_20_loop(I_23, Mat_5) ->
    case (I_23 < erlang:length(Mat_5)) of
        true ->
            Line = "",
            J_11 = 0,
            Fun_19 = fun Fun_19_loop(I_23, J_11, Line, Mat_5) ->
    case (J_11 < erlang:length((case erlang:is_map(Mat_5) of true -> maps:get(I_23, Mat_5, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_23 + 1, Mat_5); _ -> mochi_nth(I_23 + 1, Mat_5) end end))) of
        true ->
            Line_2 = (Line ++ mochi_str((case erlang:is_map((case erlang:is_map(Mat_5) of true -> maps:get(I_23, Mat_5, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_23 + 1, Mat_5); _ -> mochi_nth(I_23 + 1, Mat_5) end end)) of true -> maps:get(J_11, (case erlang:is_map(Mat_5) of true -> maps:get(I_23, Mat_5, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_23 + 1, Mat_5); _ -> mochi_nth(I_23 + 1, Mat_5) end end), nil); _ -> case J_11 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat_5) of true -> maps:get(I_23, Mat_5, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_23 + 1, Mat_5); _ -> mochi_nth(I_23 + 1, Mat_5) end end)) + J_11 + 1, (case erlang:is_map(Mat_5) of true -> maps:get(I_23, Mat_5, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_23 + 1, Mat_5); _ -> mochi_nth(I_23 + 1, Mat_5) end end)); _ -> mochi_nth(J_11 + 1, (case erlang:is_map(Mat_5) of true -> maps:get(I_23, Mat_5, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_23 + 1, Mat_5); _ -> mochi_nth(I_23 + 1, Mat_5) end end)) end end))),
            Line_4 = (case ((J_11 + 1) < erlang:length((case erlang:is_map(Mat_5) of true -> maps:get(I_23, Mat_5, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_23 + 1, Mat_5); _ -> mochi_nth(I_23 + 1, Mat_5) end end))) of
        true -> Line_3 = (Line_2 ++ " "),
            Line_3;
        _ -> Line_2
    end),
            J_12 = (J_11 + 1),
            Fun_19_loop(I_23, J_12, Line_4, Mat_5);
        _ -> {I_23, J_11, Line, Mat_5}
    end
end,
{I_23, J_12, Line_4, Mat_5} = Fun_19(I_23, J_11, Line, Mat_5),
            io:format("~ts~n", [mochi_repr(Line_4)]),
            I_24 = (I_23 + 1),
            Fun_20_loop(I_24, Mat_5);
        _ -> {I_23, Mat_5}
    end
end,
{I_24, Mat_5} = Fun_20(I_23, Mat_5),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('A', [[12.0, -51.0, 4.0], [6.0, 167.0, -68.0], [-4.0, 24.0, -41.0]]),
    erlang:put('result', qr_decomposition(erlang:get('A'))),
    print_matrix(maps:get("q", erlang:get('result'), nil)),
    print_matrix(maps:get("r", erlang:get('result'), nil)),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
