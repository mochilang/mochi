#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow_float/2, evaluate_poly/2, horner/2, test_polynomial_evaluation/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

pow_float(Base, Exponent) ->
    try
        Exp = Exponent,
        Result = 1.0,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, Exponent, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = mochi_safe_mul(Result, Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, Exponent, I_2, Result_2);
        _ -> {Base, Exp, Exponent, I, Result}
    end
end,
{Base, Exp, Exponent, I_2, Result_2} = Fun(Base, Exp, Exponent, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

evaluate_poly(Poly, X) ->
    try
        Total = 0.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Poly, Total, X) ->
    case (I_3 < erlang:length(Poly)) of
        true ->
            Total_2 = (Total + mochi_safe_mul((case erlang:is_map(Poly) of true -> maps:get(I_3, Poly, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Poly) + I_3 + 1, Poly); _ -> mochi_nth(I_3 + 1, Poly) end end), pow_float(X, I_3))),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Poly, Total_2, X);
        _ -> {I_3, Poly, Total, X}
    end
end,
{I_4, Poly, Total_2, X} = Fun_2(I_3, Poly, Total, X),
        Total_2
    catch {return, Ret} -> Ret end.

horner(Poly_2, X_2) ->
    try
        Result_3 = 0.0,
        I_5 = (erlang:length(Poly_2) - 1),
        Fun_3 = fun Fun_3_loop(I_5, Poly_2, Result_3, X_2) ->
    case (I_5 >= 0) of
        true ->
            Result_4 = (mochi_safe_mul(Result_3, X_2) + (case erlang:is_map(Poly_2) of true -> maps:get(I_5, Poly_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Poly_2) + I_5 + 1, Poly_2); _ -> mochi_nth(I_5 + 1, Poly_2) end end)),
            I_6 = (I_5 - 1),
            Fun_3_loop(I_6, Poly_2, Result_4, X_2);
        _ -> {I_5, Poly_2, Result_3, X_2}
    end
end,
{I_6, Poly_2, Result_4, X_2} = Fun_3(I_5, Poly_2, Result_3, X_2),
        Result_4
    catch {return, Ret} -> Ret end.

test_polynomial_evaluation() ->
    try
        Poly_3 = [0.0, 0.0, 5.0, 9.3, 7.0],
        X_3 = 10.0,
        case (evaluate_poly(Poly_3, 10.0) /= 79800.0) of
        true -> erlang:error("evaluate_poly failed");
        _ -> ok
    end,
        case (horner(Poly_3, 10.0) /= 79800.0) of
        true -> erlang:error("horner failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_polynomial_evaluation(),
        Poly_4 = [0.0, 0.0, 5.0, 9.3, 7.0],
        X_4 = 10.0,
        io:format("~ts~n", [mochi_repr(evaluate_poly(Poly_4, 10.0))]),
        io:format("~ts~n", [mochi_repr(horner(Poly_4, 10.0))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
