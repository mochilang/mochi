#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ln/1, log10/1, absf/1, res/2, test_res/0, compare/4]).

% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

ln(X) ->
    try
        T = mochi_safe_div((X - 1.0), (X + 1.0)),
        Term = T,
        Sum = 0.0,
        K = 1,
        Fun = fun Fun_loop(K, Sum, T, Term, X) ->
    case (K =< 99) of
        true ->
            Sum_2 = (Sum + mochi_safe_div(Term, float(K))),
            Term_2 = mochi_safe_mul(mochi_safe_mul(Term, T), T),
            K_2 = (K + 2),
            Fun_loop(K_2, Sum_2, T, Term_2, X);
        _ -> {K, Sum, T, Term, X}
    end
end,
{K_2, Sum_2, T, Term_2, X} = Fun(K, Sum, T, Term, X),
        mochi_safe_mul(2.0, Sum_2)
    catch {return, RetCatch} -> RetCatch end.

log10(X_2) ->
    try
        mochi_safe_div(ln(X_2), ln(10.0))
    catch {return, RetCatch} -> RetCatch end.

absf(X_3) ->
    try
        (case (X_3 < 0.0) of
    true -> -X_3;
    _ -> X_3
end)
    catch {return, RetCatch} -> RetCatch end.

res(X_4, Y) ->
    try
        case (X_4 == 0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        case (Y == 0) of
        true -> throw({return, 1.0});
        _ -> ok
    end,
        case (X_4 < 0) of
        true -> erlang:error({panic, "math domain error"});
        _ -> ok
    end,
        mochi_safe_mul(float(Y), log10(float(X_4)))
    catch {return, RetCatch} -> RetCatch end.

test_res() ->
    try
        case (absf((res(5, 7) - 4.892790030352132)) > 0.0000001) of
        true -> erlang:error({panic, "res(5,7) failed"});
        _ -> ok
    end,
        case (res(0, 5) /= 0.0) of
        true -> erlang:error({panic, "res(0,5) failed"});
        _ -> ok
    end,
        case (res(3, 0) /= 1.0) of
        true -> erlang:error({panic, "res(3,0) failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

compare(X1, Y1, X2, Y2) ->
    try
        R1 = res(X1, Y1),
        R2 = res(X2, Y2),
        case (R1 > R2) of
        true -> throw({return, ((("Largest number is " ++ mochi_str(X1)) ++ " ^ ") ++ mochi_str(Y1))});
        _ -> ok
    end,
        case (R2 > R1) of
        true -> throw({return, ((("Largest number is " ++ mochi_str(X2)) ++ " ^ ") ++ mochi_str(Y2))});
        _ -> ok
    end,
        "Both are equal"
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    test_res(),
    io:format("~ts~n", [mochi_repr(compare(5, 7, 4, 8))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
