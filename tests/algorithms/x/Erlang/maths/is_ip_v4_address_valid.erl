#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, split_by_dot/1, is_digit_str/1, parse_decimal/1, is_ip_v4_address_valid/1]).

% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

split_by_dot(S) ->
    try
        Res = [],
        Current = "",
        I = 0,
        Fun = fun Fun_loop(Current, I, Res, S) ->
    case (I < erlang:length(S)) of
        true ->
            C = string:substr(S, I + 1, 1),
            case (C == ".") of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Current]),
            Current_2 = "",
            Current_4 = Current_2,
            Res_3 = Res_2;
        _ -> Current_3 = (Current ++ C),
            Current_4 = Current_3,
            Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_loop(Current_4, I_2, Res_3, S);
        _ -> {Current, I, Res, S}
    end
end,
{Current_4, I_2, Res_3, S} = Fun(Current, I, Res, S),
        Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Current_4]),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

is_digit_str(S_2) ->
    try
        case (erlang:length(S_2) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, S_2) ->
    case (I_3 < erlang:length(S_2)) of
        true ->
            C_2 = string:substr(S_2, I_3 + 1, 1),
            case ((C_2 < "0") orelse (C_2 > "9")) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, S_2);
        _ -> {I_3, S_2}
    end
end,
{I_4, S_2} = Fun_2(I_3, S_2),
        true
    catch {return, RetCatch} -> RetCatch end.

parse_decimal(S_3) ->
    try
        Value = 0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, S_3, Value) ->
    case (I_5 < erlang:length(S_3)) of
        true ->
            C_3 = string:substr(S_3, I_5 + 1, 1),
            Value_2 = ((Value * 10) + mochi_to_int(C_3)),
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, S_3, Value_2);
        _ -> {I_5, S_3, Value}
    end
end,
{I_6, S_3, Value_2} = Fun_3(I_5, S_3, Value),
        Value_2
    catch {return, RetCatch} -> RetCatch end.

is_ip_v4_address_valid(Ip) ->
    try
        Octets = split_by_dot(Ip),
        case (erlang:length(Octets) /= 4) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(I_7, Ip, Octets) ->
    case (I_7 < 4) of
        true ->
            Oct = (case erlang:is_map(Octets) of true -> maps:get(I_7, Octets, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Octets) + I_7 + 1, Octets); _ -> mochi_nth(I_7 + 1, Octets) end end),
            case mochi_not(is_digit_str(Oct)) of
        true -> throw({return, false});
        _ -> ok
    end,
            Number = parse_decimal(Oct),
            case (erlang:length(mochi_str(Number)) /= erlang:length(Oct)) of
        true -> throw({return, false});
        _ -> ok
    end,
            case ((Number < 0) orelse (Number > 255)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(I_8, Ip, Octets);
        _ -> {I_7, Ip, Octets}
    end
end,
{I_8, Ip, Octets} = Fun_4(I_7, Ip, Octets),
        true
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(is_ip_v4_address_valid("192.168.0.23"))]),
    io:format("~ts~n", [mochi_str(is_ip_v4_address_valid("192.256.15.8"))]),
    io:format("~ts~n", [mochi_str(is_ip_v4_address_valid("172.100.0.8"))]),
    io:format("~ts~n", [mochi_str(is_ip_v4_address_valid("255.256.0.256"))]),
    io:format("~ts~n", [mochi_str(is_ip_v4_address_valid("1.2.33333333.4"))]),
    io:format("~ts~n", [mochi_str(is_ip_v4_address_valid("1.2.-3.4"))]),
    io:format("~ts~n", [mochi_str(is_ip_v4_address_valid("1.2.3"))]),
    io:format("~ts~n", [mochi_str(is_ip_v4_address_valid("1.2.3.4.5"))]),
    io:format("~ts~n", [mochi_str(is_ip_v4_address_valid("1.2.A.4"))]),
    io:format("~ts~n", [mochi_str(is_ip_v4_address_valid("0.0.0.0"))]),
    io:format("~ts~n", [mochi_str(is_ip_v4_address_valid("1.2.3."))]),
    io:format("~ts~n", [mochi_str(is_ip_v4_address_valid("1.2.3.05"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
