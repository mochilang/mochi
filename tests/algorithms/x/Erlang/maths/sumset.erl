#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, contains/2, sumset/2, main/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

contains(Xs, Value) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, Value, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) == Value) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Value, Xs);
        _ -> {I, Value, Xs}
    end
end,
{I_2, Value, Xs} = Fun(I, Value, Xs),
        false
    catch {return, Ret} -> Ret end.

sumset(Set_a, Set_b) ->
    try
        Result = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, Result, Set_a, Set_b) ->
    case (I_3 < erlang:length(Set_a)) of
        true ->
            J = 0,
            Fun_2 = fun Fun_2_loop(I_3, J, Result, Set_a, Set_b) ->
    case (J < erlang:length(Set_b)) of
        true ->
            S = ((case erlang:is_map(Set_a) of true -> maps:get(I_3, Set_a, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Set_a) + I_3 + 1, Set_a); _ -> mochi_nth(I_3 + 1, Set_a) end end) + (case erlang:is_map(Set_b) of true -> maps:get(J, Set_b, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Set_b) + J + 1, Set_b); _ -> mochi_nth(J + 1, Set_b) end end)),
            case mochi_not(mochi_member(S, Result)) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [S]),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            J_2 = (J + 1),
            Fun_2_loop(I_3, J_2, Result_3, Set_a, Set_b);
        _ -> {I_3, J, Result, Set_a, Set_b}
    end
end,
{I_3, J_2, Result_3, Set_a, Set_b} = Fun_2(I_3, J, Result, Set_a, Set_b),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Result_3, Set_a, Set_b);
        _ -> {I_3, Result, Set_a, Set_b}
    end
end,
{I_4, Result_3, Set_a, Set_b} = Fun_3(I_3, Result, Set_a, Set_b),
        Result_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        Set_a_2 = [1, 2, 3],
        Set_b_2 = [4, 5, 6],
        io:format("~ts~n", [mochi_str(sumset(Set_a_2, Set_b_2))]),
        Set_c = [4, 5, 6, 7],
        io:format("~ts~n", [mochi_str(sumset(Set_a_2, Set_c))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
