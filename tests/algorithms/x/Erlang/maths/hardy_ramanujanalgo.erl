#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, exact_prime_factor_count/1, ln/1, floor/1, round4/1, main/0]).

-compile({no_auto_import,[floor/1]}).
% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

exact_prime_factor_count(N) ->
    try
        Count = 0,
        Num = N,
        case (mochi_mod(Num, 2) == 0) of
        true -> Count_2 = (Count + 1),
            Fun = fun Fun_loop(Count_2, N, Num) ->
    case (mochi_mod(Num, 2) == 0) of
        true ->
            Num_2 = (Num div 2),
            Fun_loop(Count_2, N, Num_2);
        _ -> {Count_2, N, Num}
    end
end,
{Count_2, N, Num_2} = Fun(Count_2, N, Num),
            Count_3 = Count_2,
            Fun_2 = Fun,
            Num_3 = Num_2;
        _ -> Count_3 = Count,
            Fun_2 = nil,
            Num_3 = Num
    end,
        I = 3,
        Fun_5 = fun Fun_5_loop(Count_3, I, N, Num_3) ->
    case ((I * I) =< Num_3) of
        true ->
            case (mochi_mod(Num_3, I) == 0) of
        true -> Count_4 = (Count_3 + 1),
            Fun_3 = fun Fun_3_loop(Count_4, I, N, Num_3) ->
    case (mochi_mod(Num_3, I) == 0) of
        true ->
            Num_4 = (Num_3 div I),
            Fun_3_loop(Count_4, I, N, Num_4);
        _ -> {Count_4, I, N, Num_3}
    end
end,
{Count_4, I, N, Num_4} = Fun_3(Count_4, I, N, Num_3),
            Count_5 = Count_4,
            Fun_4 = Fun_3,
            Num_5 = Num_4;
        _ -> Count_5 = Count_3,
            Fun_4 = Fun_2,
            Num_5 = Num_3
    end,
            I_2 = (I + 2),
            Fun_5_loop(Count_5, I_2, N, Num_5);
        _ -> {Count_3, I, N, Num_3}
    end
end,
{Count_5, I_2, N, Num_5} = Fun_5(Count_3, I, N, Num_3),
        case (Num_5 > 2) of
        true -> Count_6 = (Count_5 + 1),
            Count_7 = Count_6;
        _ -> Count_7 = Count_5
    end,
        Count_7
    catch {return, RetCatch} -> RetCatch end.

ln(X) ->
    try
        Ln2 = 0.6931471805599453,
        Y = X,
        K = 0.0,
        Fun_6 = fun Fun_6_loop(K, Ln2, X, Y) ->
    case (Y > 2.0) of
        true ->
            Y_2 = mochi_safe_div(Y, 2.0),
            K_2 = (K + Ln2),
            Fun_6_loop(K_2, Ln2, X, Y_2);
        _ -> {K, Ln2, X, Y}
    end
end,
{K_2, Ln2, X, Y_2} = Fun_6(K, Ln2, X, Y),
        Fun_7 = fun Fun_7_loop(K_2, Ln2, X, Y_2) ->
    case (Y_2 < 1.0) of
        true ->
            Y_3 = mochi_safe_mul(Y_2, 2.0),
            K_3 = (K_2 - Ln2),
            Fun_7_loop(K_3, Ln2, X, Y_3);
        _ -> {K_2, Ln2, X, Y_2}
    end
end,
{K_3, Ln2, X, Y_3} = Fun_7(K_2, Ln2, X, Y_2),
        T = mochi_safe_div((Y_3 - 1.0), (Y_3 + 1.0)),
        Term = T,
        Sum = 0.0,
        N_2 = 1,
        Fun_8 = fun Fun_8_loop(K_3, Ln2, N_2, Sum, T, Term, X, Y_3) ->
    case (N_2 =< 19) of
        true ->
            Sum_2 = (Sum + mochi_safe_div(Term, float(N_2))),
            Term_2 = mochi_safe_mul(mochi_safe_mul(Term, T), T),
            N_3 = (N_2 + 2),
            Fun_8_loop(K_3, Ln2, N_3, Sum_2, T, Term_2, X, Y_3);
        _ -> {K_3, Ln2, N_2, Sum, T, Term, X, Y_3}
    end
end,
{K_3, Ln2, N_3, Sum_2, T, Term_2, X, Y_3} = Fun_8(K_3, Ln2, N_2, Sum, T, Term, X, Y_3),
        (K_3 + mochi_safe_mul(2.0, Sum_2))
    catch {return, RetCatch} -> RetCatch end.

floor(X_2) ->
    try
        I_3 = mochi_to_int(X_2),
        case (float(I_3) > X_2) of
        true -> I_4 = (I_3 - 1),
            I_5 = I_4;
        _ -> I_5 = I_3
    end,
        float(I_5)
    catch {return, RetCatch} -> RetCatch end.

round4(X_3) ->
    try
        M = 10000.0,
        mochi_safe_div(floor((mochi_safe_mul(X_3, 10000.0) + 0.5)), 10000.0)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        N_4 = 51242183,
        Count_8 = exact_prime_factor_count(51242183),
        io:format("~ts~n", [mochi_repr(("The number of distinct prime factors is/are " ++ mochi_str(Count_8)))]),
        Loglog = ln(ln(float(51242183))),
        io:format("~ts~n", [mochi_repr(("The value of log(log(n)) is " ++ mochi_str(round4(Loglog))))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
