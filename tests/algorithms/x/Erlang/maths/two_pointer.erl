#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, two_pointer/2, test_two_pointer/0, main/0]).

% Generated by Mochi transpiler v0.10.64 (1dced96c32) on 2025-08-12 13:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

two_pointer(Nums, Target) ->
    try
        I = 0,
        J = (erlang:length(Nums) - 1),
        Fun = fun Fun_loop(I, J, Nums, Target) ->
    case (I < J) of
        true ->
            S = ((case erlang:is_map(Nums) of true -> maps:get(I, Nums, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Nums) + I + 1, Nums); _ -> mochi_nth(I + 1, Nums) end end) + (case erlang:is_map(Nums) of true -> maps:get(J, Nums, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Nums) + J + 1, Nums); _ -> mochi_nth(J + 1, Nums) end end)),
            case (S == Target) of
        true -> throw({return, [I, J]});
        _ -> ok
    end,
            case (S < Target) of
        true -> I_2 = (I + 1),
            I_3 = I_2,
            J_3 = J;
        _ -> J_2 = (J - 1),
            I_3 = I,
            J_3 = J_2
    end,
            Fun_loop(I_3, J_3, Nums, Target);
        _ -> {I, J, Nums, Target}
    end
end,
{I_3, J_3, Nums, Target} = Fun(I, J, Nums, Target),
        []
    catch {return, RetCatch} -> RetCatch end.

test_two_pointer() ->
    try
        case (two_pointer([2, 7, 11, 15], 9) /= [0, 1]) of
        true -> erlang:error({panic, "case1"});
        _ -> ok
    end,
        case (two_pointer([2, 7, 11, 15], 17) /= [0, 3]) of
        true -> erlang:error({panic, "case2"});
        _ -> ok
    end,
        case (two_pointer([2, 7, 11, 15], 18) /= [1, 2]) of
        true -> erlang:error({panic, "case3"});
        _ -> ok
    end,
        case (two_pointer([2, 7, 11, 15], 26) /= [2, 3]) of
        true -> erlang:error({panic, "case4"});
        _ -> ok
    end,
        case (two_pointer([1, 3, 3], 6) /= [1, 2]) of
        true -> erlang:error({panic, "case5"});
        _ -> ok
    end,
        case (erlang:length(two_pointer([2, 7, 11, 15], 8)) /= 0) of
        true -> erlang:error({panic, "case6"});
        _ -> ok
    end,
        case (erlang:length(two_pointer([0, 3, 6, 9, 12, 15, 18, 21, 24, 27], 19)) /= 0) of
        true -> erlang:error({panic, "case7"});
        _ -> ok
    end,
        case (erlang:length(two_pointer([1, 2, 3], 6)) /= 0) of
        true -> erlang:error({panic, "case8"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_two_pointer(),
        io:format("~ts~n", [mochi_repr(two_pointer([2, 7, 11, 15], 9))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
