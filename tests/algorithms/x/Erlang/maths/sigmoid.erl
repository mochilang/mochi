#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, exp_approx/1, sigmoid/1]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

exp_approx(X) ->
    try
        Sum = 1.0,
        Term = 1.0,
        I = 1,
        Fun = fun Fun_loop(I, Sum, Term, X) ->
    case (I =< 10) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X), float(I)),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, Term_2, X);
        _ -> {I, Sum, Term, X}
    end
end,
{I_2, Sum_2, Term_2, X} = Fun(I, Sum, Term, X),
        Sum_2
    catch {return, Ret} -> Ret end.

sigmoid(Vector) ->
    try
        Result = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Result, Vector) ->
    case (I_3 < erlang:length(Vector)) of
        true ->
            V = (case erlang:is_map(Vector) of true -> maps:get(I_3, Vector, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Vector) + I_3 + 1, Vector); _ -> mochi_nth(I_3 + 1, Vector) end end),
            S = mochi_safe_div(1.0, (1.0 + exp_approx(-V))),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [S]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Result_2, Vector);
        _ -> {I_3, Result, Vector}
    end
end,
{I_4, Result_2, Vector} = Fun_2(I_3, Result, Vector),
        Result_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(sigmoid([-1.0, 1.0, 2.0]))]),
    io:format("~ts~n", [mochi_str(sigmoid([0.0]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
