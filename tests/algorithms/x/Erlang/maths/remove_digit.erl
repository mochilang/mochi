#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, remove_digit/1, test_remove_digit/0, main/0]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

remove_digit(Num) ->
    try
        N = Num,
        N_3 = (case (N < 0) of
        true -> N_2 = -N,
            N_2;
        _ -> N
    end),
        Max_val = 0,
        Divisor = 1,
        Fun = fun Fun_loop(Divisor, Max_val, N_3, Num) ->
    case (Divisor =< N_3) of
        true ->
            Higher = mochi_idiv(N_3, (Divisor * 10)),
            Lower = mochi_mod(N_3, Divisor),
            Candidate = ((Higher * Divisor) + Lower),
            Max_val_3 = (case (Candidate > Max_val) of
        true -> Max_val_2 = Candidate,
            Max_val_2;
        _ -> Max_val
    end),
            Divisor_2 = (Divisor * 10),
            Fun_loop(Divisor_2, Max_val_3, N_3, Num);
        _ -> {Divisor, Max_val, N_3, Num}
    end
end,
{Divisor_2, Max_val_3, N_3, Num} = Fun(Divisor, Max_val, N_3, Num),
        Max_val_3
    catch {return, RetCatch} -> RetCatch end.

test_remove_digit() ->
    try
        case (remove_digit(152) /= 52) of
        true -> erlang:error({panic, "remove_digit(152) failed"});
        _ -> ok
    end,
        case (remove_digit(6385) /= 685) of
        true -> erlang:error({panic, "remove_digit(6385) failed"});
        _ -> ok
    end,
        case (remove_digit(-11) /= 1) of
        true -> erlang:error({panic, "remove_digit(-11) failed"});
        _ -> ok
    end,
        case (remove_digit(2222222) /= 222222) of
        true -> erlang:error({panic, "remove_digit(2222222) failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_remove_digit(),
        io:format("~ts~n", [mochi_repr(remove_digit(152))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
