#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs_val/1, extended_euclidean_algorithm/2, test_extended_euclidean_algorithm/0, main/0]).

% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

abs_val(N) ->
    try
        (case (N < 0) of
    true -> -N;
    _ -> N
end)
    catch {return, RetCatch} -> RetCatch end.

extended_euclidean_algorithm(A, B) ->
    try
        case (abs_val(A) == 1) of
        true -> throw({return, #{"x" => A, "y" => 0}});
        _ -> ok
    end,
        case (abs_val(B) == 1) of
        true -> throw({return, #{"x" => 0, "y" => B}});
        _ -> ok
    end,
        Old_remainder = A,
        Remainder = B,
        Old_coeff_a = 1,
        Coeff_a = 0,
        Old_coeff_b = 0,
        Coeff_b = 1,
        Fun = fun Fun_loop(A, B, Coeff_a, Coeff_b, Old_coeff_a, Old_coeff_b, Old_remainder, Remainder) ->
    case (Remainder /= 0) of
        true ->
            Quotient = (Old_remainder div Remainder),
            Temp_remainder = (Old_remainder - (Quotient * Remainder)),
            Old_remainder_2 = Remainder,
            Remainder_2 = Temp_remainder,
            Temp_a = (Old_coeff_a - (Quotient * Coeff_a)),
            Old_coeff_a_2 = Coeff_a,
            Coeff_a_2 = Temp_a,
            Temp_b = (Old_coeff_b - (Quotient * Coeff_b)),
            Old_coeff_b_2 = Coeff_b,
            Coeff_b_2 = Temp_b,
            Fun_loop(A, B, Coeff_a_2, Coeff_b_2, Old_coeff_a_2, Old_coeff_b_2, Old_remainder_2, Remainder_2);
        _ -> {A, B, Coeff_a, Coeff_b, Old_coeff_a, Old_coeff_b, Old_remainder, Remainder}
    end
end,
{A, B, Coeff_a_2, Coeff_b_2, Old_coeff_a_2, Old_coeff_b_2, Old_remainder_2, Remainder_2} = Fun(A, B, Coeff_a, Coeff_b, Old_coeff_a, Old_coeff_b, Old_remainder, Remainder),
        case (A < 0) of
        true -> Old_coeff_a_3 = -Old_coeff_a_2,
            Old_coeff_a_4 = Old_coeff_a_3;
        _ -> Old_coeff_a_4 = Old_coeff_a_2
    end,
        case (B < 0) of
        true -> Old_coeff_b_3 = -Old_coeff_b_2,
            Old_coeff_b_4 = Old_coeff_b_3;
        _ -> Old_coeff_b_4 = Old_coeff_b_2
    end,
        #{"x" => Old_coeff_a_4, "y" => Old_coeff_b_4}
    catch {return, RetCatch} -> RetCatch end.

test_extended_euclidean_algorithm() ->
    try
        R1 = extended_euclidean_algorithm(1, 24),
        case ((maps:get("x", R1, nil) /= 1) orelse (maps:get("y", R1, nil) /= 0)) of
        true -> erlang:error({panic, "test1 failed"});
        _ -> ok
    end,
        R2 = extended_euclidean_algorithm(8, 14),
        case ((maps:get("x", R2, nil) /= 2) orelse (maps:get("y", R2, nil) /= -1)) of
        true -> erlang:error({panic, "test2 failed"});
        _ -> ok
    end,
        R3 = extended_euclidean_algorithm(240, 46),
        case ((maps:get("x", R3, nil) /= -9) orelse (maps:get("y", R3, nil) /= 47)) of
        true -> erlang:error({panic, "test3 failed"});
        _ -> ok
    end,
        R4 = extended_euclidean_algorithm(1, -4),
        case ((maps:get("x", R4, nil) /= 1) orelse (maps:get("y", R4, nil) /= 0)) of
        true -> erlang:error({panic, "test4 failed"});
        _ -> ok
    end,
        R5 = extended_euclidean_algorithm(-2, -4),
        case ((maps:get("x", R5, nil) /= -1) orelse (maps:get("y", R5, nil) /= 0)) of
        true -> erlang:error({panic, "test5 failed"});
        _ -> ok
    end,
        R6 = extended_euclidean_algorithm(0, -4),
        case ((maps:get("x", R6, nil) /= 0) orelse (maps:get("y", R6, nil) /= -1)) of
        true -> erlang:error({panic, "test6 failed"});
        _ -> ok
    end,
        R7 = extended_euclidean_algorithm(2, 0),
        case ((maps:get("x", R7, nil) /= 1) orelse (maps:get("y", R7, nil) /= 0)) of
        true -> erlang:error({panic, "test7 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_extended_euclidean_algorithm(),
        Res = extended_euclidean_algorithm(240, 46),
        io:format("~ts~n", [mochi_repr((((("(" ++ mochi_str(maps:get("x", Res, nil))) ++ ", ") ++ mochi_str(maps:get("y", Res, nil))) ++ ")"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
