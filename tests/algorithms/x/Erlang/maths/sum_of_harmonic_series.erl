#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sum_of_harmonic_progression/3, abs_val/1, test_sum_of_harmonic_progression/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

sum_of_harmonic_progression(First_term, Common_difference, Number_of_terms) ->
    try
        Arithmetic_progression = [mochi_safe_div(1.0, First_term)],
        Term = mochi_safe_div(1.0, First_term),
        I = 0,
        Fun = fun Fun_loop(Arithmetic_progression, Common_difference, First_term, I, Number_of_terms, Term) ->
    case (I < (Number_of_terms - 1)) of
        true ->
            Term_2 = (Term + Common_difference),
            Arithmetic_progression_2 = lists:append((case Arithmetic_progression of nil -> []; _ -> Arithmetic_progression end), [Term_2]),
            I_2 = (I + 1),
            Fun_loop(Arithmetic_progression_2, Common_difference, First_term, I_2, Number_of_terms, Term_2);
        _ -> {Arithmetic_progression, Common_difference, First_term, I, Number_of_terms, Term}
    end
end,
{Arithmetic_progression_2, Common_difference, First_term, I_2, Number_of_terms, Term_2} = Fun(Arithmetic_progression, Common_difference, First_term, I, Number_of_terms, Term),
        Total = 0.0,
        J = 0,
        Fun_2 = fun Fun_2_loop(Arithmetic_progression_2, Common_difference, First_term, I_2, J, Number_of_terms, Term_2, Total) ->
    case (J < erlang:length(Arithmetic_progression_2)) of
        true ->
            Total_2 = (Total + mochi_safe_div(1.0, (case erlang:is_map(Arithmetic_progression_2) of true -> maps:get(J, Arithmetic_progression_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arithmetic_progression_2) + J + 1, Arithmetic_progression_2); _ -> mochi_nth(J + 1, Arithmetic_progression_2) end end))),
            J_2 = (J + 1),
            Fun_2_loop(Arithmetic_progression_2, Common_difference, First_term, I_2, J_2, Number_of_terms, Term_2, Total_2);
        _ -> {Arithmetic_progression_2, Common_difference, First_term, I_2, J, Number_of_terms, Term_2, Total}
    end
end,
{Arithmetic_progression_2, Common_difference, First_term, I_2, J_2, Number_of_terms, Term_2, Total_2} = Fun_2(Arithmetic_progression_2, Common_difference, First_term, I_2, J, Number_of_terms, Term_2, Total),
        Total_2
    catch {return, Ret} -> Ret end.

abs_val(Num) ->
    try
        (case (Num < 0.0) of
    true -> -Num;
    _ -> Num
end)
    catch {return, Ret} -> Ret end.

test_sum_of_harmonic_progression() ->
    try
        Result1 = sum_of_harmonic_progression(0.5, 2.0, 2),
        case (abs_val((Result1 - 0.75)) > 0.0000001) of
        true -> erlang:error("test1 failed");
        _ -> ok
    end,
        Result2 = sum_of_harmonic_progression(0.2, 5.0, 5),
        case (abs_val((Result2 - 0.45666666666666667)) > 0.0000001) of
        true -> erlang:error("test2 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_sum_of_harmonic_progression(),
        io:format("~ts~n", [mochi_repr(sum_of_harmonic_progression(0.5, 2.0, 2))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
