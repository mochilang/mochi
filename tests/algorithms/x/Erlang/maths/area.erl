#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, mod/2, sin_approx/1, cos_approx/1, tan_approx/1, sqrt_approx/1, surface_area_cube/1, surface_area_cuboid/3, surface_area_sphere/1, surface_area_hemisphere/1, surface_area_cone/2, surface_area_conical_frustum/3, surface_area_cylinder/2, surface_area_torus/2, area_rectangle/2, area_square/1, area_triangle/2, area_triangle_three_sides/3, area_parallelogram/2, area_trapezium/3, area_circle/1, area_ellipse/2, area_rhombus/2, area_reg_polygon/2]).

% Generated by Mochi transpiler v0.10.66 (fa2dc5e881)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

mod(X, M) ->
    try
        (X - mochi_safe_mul(float(mochi_to_int(mochi_safe_div(X, M))), M))
    catch {return, RetCatch} -> RetCatch end.

sin_approx(X_2) ->
    try
        Y = (mod((X_2 + 3.141592653589793), 6.283185307179586) - 3.141592653589793),
        Y2 = mochi_safe_mul(Y, Y),
        Y3 = mochi_safe_mul(Y2, Y),
        Y5 = mochi_safe_mul(Y3, Y2),
        Y7 = mochi_safe_mul(Y5, Y2),
        (((Y - mochi_safe_div(Y3, 6.0)) + mochi_safe_div(Y5, 120.0)) - mochi_safe_div(Y7, 5040.0))
    catch {return, RetCatch} -> RetCatch end.

cos_approx(X_3) ->
    try
        Y_2 = (mod((X_3 + 3.141592653589793), 6.283185307179586) - 3.141592653589793),
        Y2_2 = mochi_safe_mul(Y_2, Y_2),
        Y4 = mochi_safe_mul(Y2_2, Y2_2),
        Y6 = mochi_safe_mul(Y4, Y2_2),
        (((1.0 - mochi_safe_div(Y2_2, 2.0)) + mochi_safe_div(Y4, 24.0)) - mochi_safe_div(Y6, 720.0))
    catch {return, RetCatch} -> RetCatch end.

tan_approx(X_4) ->
    try
        mochi_safe_div(sin_approx(X_4), cos_approx(X_4))
    catch {return, RetCatch} -> RetCatch end.

sqrt_approx(X_5) ->
    try
        case (X_5 =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = mochi_safe_div(X_5, 2.0),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_5) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_5, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_5);
        _ -> {Guess, I, X_5}
    end
end,
{Guess_2, I_2, X_5} = Fun(Guess, I, X_5),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

surface_area_cube(Side_length) ->
    try
        case (Side_length < 0.0) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: surface_area_cube() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(mochi_safe_mul(6.0, Side_length), Side_length)
    catch {return, RetCatch} -> RetCatch end.

surface_area_cuboid(Length, Breadth, Height) ->
    try
        case (((Length < 0.0) orelse (Breadth < 0.0)) orelse (Height < 0.0)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: surface_area_cuboid() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(2.0, ((mochi_safe_mul(Length, Breadth) + mochi_safe_mul(Breadth, Height)) + mochi_safe_mul(Length, Height)))
    catch {return, RetCatch} -> RetCatch end.

surface_area_sphere(Radius) ->
    try
        case (Radius < 0.0) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: surface_area_sphere() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(4.0, 3.141592653589793), Radius), Radius)
    catch {return, RetCatch} -> RetCatch end.

surface_area_hemisphere(Radius_2) ->
    try
        case (Radius_2 < 0.0) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: surface_area_hemisphere() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(3.0, 3.141592653589793), Radius_2), Radius_2)
    catch {return, RetCatch} -> RetCatch end.

surface_area_cone(Radius_3, Height_2) ->
    try
        case ((Radius_3 < 0.0) orelse (Height_2 < 0.0)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: surface_area_cone() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        Slant = sqrt_approx((mochi_safe_mul(Height_2, Height_2) + mochi_safe_mul(Radius_3, Radius_3))),
        mochi_safe_mul(mochi_safe_mul(3.141592653589793, Radius_3), (Radius_3 + Slant))
    catch {return, RetCatch} -> RetCatch end.

surface_area_conical_frustum(Radius1, Radius2, Height_3) ->
    try
        case (((Radius1 < 0.0) orelse (Radius2 < 0.0)) orelse (Height_3 < 0.0)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: surface_area_conical_frustum() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        Slant_2 = sqrt_approx((mochi_safe_mul(Height_3, Height_3) + mochi_safe_mul((Radius1 - Radius2), (Radius1 - Radius2)))),
        mochi_safe_mul(3.141592653589793, ((mochi_safe_mul(Slant_2, (Radius1 + Radius2)) + mochi_safe_mul(Radius1, Radius1)) + mochi_safe_mul(Radius2, Radius2)))
    catch {return, RetCatch} -> RetCatch end.

surface_area_cylinder(Radius_4, Height_4) ->
    try
        case ((Radius_4 < 0.0) orelse (Height_4 < 0.0)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: surface_area_cylinder() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(2.0, 3.141592653589793), Radius_4), (Height_4 + Radius_4))
    catch {return, RetCatch} -> RetCatch end.

surface_area_torus(Torus_radius, Tube_radius) ->
    try
        case ((Torus_radius < 0.0) orelse (Tube_radius < 0.0)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: surface_area_torus() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        case (Torus_radius < Tube_radius) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: surface_area_torus() does not support spindle or self intersecting tori")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(4.0, 3.141592653589793), 3.141592653589793), Torus_radius), Tube_radius)
    catch {return, RetCatch} -> RetCatch end.

area_rectangle(Length_2, Width) ->
    try
        case ((Length_2 < 0.0) orelse (Width < 0.0)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: area_rectangle() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(Length_2, Width)
    catch {return, RetCatch} -> RetCatch end.

area_square(Side_length_2) ->
    try
        case (Side_length_2 < 0.0) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: area_square() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(Side_length_2, Side_length_2)
    catch {return, RetCatch} -> RetCatch end.

area_triangle(Base, Height_5) ->
    try
        case ((Base < 0.0) orelse (Height_5 < 0.0)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: area_triangle() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_div(mochi_safe_mul(Base, Height_5), 2.0)
    catch {return, RetCatch} -> RetCatch end.

area_triangle_three_sides(Side1, Side2, Side3) ->
    try
        case (((Side1 < 0.0) orelse (Side2 < 0.0)) orelse (Side3 < 0.0)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: area_triangle_three_sides() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        case ((((Side1 + Side2) < Side3) orelse ((Side1 + Side3) < Side2)) orelse ((Side2 + Side3) < Side1)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: Given three sides do not form a triangle")]),
            throw({return, 0.0});
        _ -> ok
    end,
        S = mochi_safe_div(((Side1 + Side2) + Side3), 2.0),
        Prod = mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(S, (S - Side1)), (S - Side2)), (S - Side3)),
        Res = sqrt_approx(Prod),
        Res
    catch {return, RetCatch} -> RetCatch end.

area_parallelogram(Base_2, Height_6) ->
    try
        case ((Base_2 < 0.0) orelse (Height_6 < 0.0)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: area_parallelogram() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(Base_2, Height_6)
    catch {return, RetCatch} -> RetCatch end.

area_trapezium(Base1, Base2, Height_7) ->
    try
        case (((Base1 < 0.0) orelse (Base2 < 0.0)) orelse (Height_7 < 0.0)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: area_trapezium() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(mochi_safe_mul(0.5, (Base1 + Base2)), Height_7)
    catch {return, RetCatch} -> RetCatch end.

area_circle(Radius_5) ->
    try
        case (Radius_5 < 0.0) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: area_circle() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(mochi_safe_mul(3.141592653589793, Radius_5), Radius_5)
    catch {return, RetCatch} -> RetCatch end.

area_ellipse(Radius_x, Radius_y) ->
    try
        case ((Radius_x < 0.0) orelse (Radius_y < 0.0)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: area_ellipse() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(mochi_safe_mul(3.141592653589793, Radius_x), Radius_y)
    catch {return, RetCatch} -> RetCatch end.

area_rhombus(Diagonal1, Diagonal2) ->
    try
        case ((Diagonal1 < 0.0) orelse (Diagonal2 < 0.0)) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: area_rhombus() only accepts non-negative values")]),
            throw({return, 0.0});
        _ -> ok
    end,
        mochi_safe_mul(mochi_safe_mul(0.5, Diagonal1), Diagonal2)
    catch {return, RetCatch} -> RetCatch end.

area_reg_polygon(Sides, Length_3) ->
    try
        case (Sides < 3) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: area_reg_polygon() only accepts integers greater than or equal to three as number of sides")]),
            throw({return, 0.0});
        _ -> ok
    end,
        case (Length_3 < 0.0) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: area_reg_polygon() only accepts non-negative values as length of a side")]),
            throw({return, 0.0});
        _ -> ok
    end,
        N = float(Sides),
        mochi_safe_div(mochi_safe_mul(mochi_safe_mul(N, Length_3), Length_3), mochi_safe_mul(4.0, tan_approx(mochi_safe_div(3.141592653589793, N))))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('TWO_PI', 6.283185307179586),
    io:format("~ts~n", [mochi_repr("[DEMO] Areas of various geometric shapes:")]),
    io:format("~ts~n", [mochi_repr(("Rectangle: " ++ mochi_str(area_rectangle(10.0, 20.0))))]),
    io:format("~ts~n", [mochi_repr(("Square: " ++ mochi_str(area_square(10.0))))]),
    io:format("~ts~n", [mochi_repr(("Triangle: " ++ mochi_str(area_triangle(10.0, 10.0))))]),
    erlang:put('TRI_THREE_SIDES', area_triangle_three_sides(5.0, 12.0, 13.0)),
    io:format("~ts~n", [mochi_repr(("Triangle Three Sides: " ++ mochi_str(erlang:get('TRI_THREE_SIDES'))))]),
    io:format("~ts~n", [mochi_repr(("Parallelogram: " ++ mochi_str(area_parallelogram(10.0, 20.0))))]),
    io:format("~ts~n", [mochi_repr(("Rhombus: " ++ mochi_str(area_rhombus(10.0, 20.0))))]),
    io:format("~ts~n", [mochi_repr(("Trapezium: " ++ mochi_str(area_trapezium(10.0, 20.0, 30.0))))]),
    io:format("~ts~n", [mochi_repr(("Circle: " ++ mochi_str(area_circle(20.0))))]),
    io:format("~ts~n", [mochi_repr(("Ellipse: " ++ mochi_str(area_ellipse(10.0, 20.0))))]),
    io:format("~ts~n", [mochi_repr("")]),
    io:format("~ts~n", [mochi_repr("Surface Areas of various geometric shapes:")]),
    io:format("~ts~n", [mochi_repr(("Cube: " ++ mochi_str(surface_area_cube(20.0))))]),
    io:format("~ts~n", [mochi_repr(("Cuboid: " ++ mochi_str(surface_area_cuboid(10.0, 20.0, 30.0))))]),
    io:format("~ts~n", [mochi_repr(("Sphere: " ++ mochi_str(surface_area_sphere(20.0))))]),
    io:format("~ts~n", [mochi_repr(("Hemisphere: " ++ mochi_str(surface_area_hemisphere(20.0))))]),
    io:format("~ts~n", [mochi_repr(("Cone: " ++ mochi_str(surface_area_cone(10.0, 20.0))))]),
    io:format("~ts~n", [mochi_repr(("Conical Frustum: " ++ mochi_str(surface_area_conical_frustum(10.0, 20.0, 30.0))))]),
    io:format("~ts~n", [mochi_repr(("Cylinder: " ++ mochi_str(surface_area_cylinder(10.0, 20.0))))]),
    io:format("~ts~n", [mochi_repr(("Torus: " ++ mochi_str(surface_area_torus(20.0, 10.0))))]),
    io:format("~ts~n", [mochi_repr(("Equilateral Triangle: " ++ mochi_str(area_reg_polygon(3, 10.0))))]),
    io:format("~ts~n", [mochi_repr(("Square: " ++ mochi_str(area_reg_polygon(4, 10.0))))]),
    io:format("~ts~n", [mochi_repr(("Regular Pentagon: " ++ mochi_str(area_reg_polygon(5, 10.0))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
