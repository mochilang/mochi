#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, create_vector/2, get_3d_vectors_cross/2, pow10/1, round_float/2, is_zero_vector/2, are_collinear/4, test_are_collinear/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

create_vector(P1, P2) ->
    try
        Vx = (maps:get("x", P2, nil) - maps:get("x", P1, nil)),
        Vy = (maps:get("y", P2, nil) - maps:get("y", P1, nil)),
        Vz = (maps:get("z", P2, nil) - maps:get("z", P1, nil)),
        #{"x" => Vx, "y" => Vy, "z" => Vz}
    catch {return, Ret} -> Ret end.

get_3d_vectors_cross(Ab, Ac) ->
    try
        Cx = (mochi_safe_mul(maps:get("y", Ab, nil), maps:get("z", Ac, nil)) - mochi_safe_mul(maps:get("z", Ab, nil), maps:get("y", Ac, nil))),
        Cy = (mochi_safe_mul(maps:get("z", Ab, nil), maps:get("x", Ac, nil)) - mochi_safe_mul(maps:get("x", Ab, nil), maps:get("z", Ac, nil))),
        Cz = (mochi_safe_mul(maps:get("x", Ab, nil), maps:get("y", Ac, nil)) - mochi_safe_mul(maps:get("y", Ab, nil), maps:get("x", Ac, nil))),
        #{"x" => Cx, "y" => Cy, "z" => Cz}
    catch {return, Ret} -> Ret end.

pow10(Exp) ->
    try
        Result = 1.0,
        I = 0,
        Fun = fun Fun_loop(Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = mochi_safe_mul(Result, 10.0),
            I_2 = (I + 1),
            Fun_loop(Exp, I_2, Result_2);
        _ -> {Exp, I, Result}
    end
end,
{Exp, I_2, Result_2} = Fun(Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

round_float(X, Digits) ->
    try
        Factor = pow10(Digits),
        V = mochi_safe_mul(X, Factor),
        case (V >= 0.0) of
        true -> V_2 = (V + 0.5),
            V_4 = V_2;
        _ -> V_3 = (V - 0.5),
            V_4 = V_3
    end,
        T = mochi_to_int(V_4),
        mochi_safe_div(float(T), Factor)
    catch {return, Ret} -> Ret end.

is_zero_vector(V_5, Accuracy) ->
    try
        (((round_float(maps:get("x", V_5, nil), Accuracy) == 0.0) andalso (round_float(maps:get("y", V_5, nil), Accuracy) == 0.0)) andalso (round_float(maps:get("z", V_5, nil), Accuracy) == 0.0))
    catch {return, Ret} -> Ret end.

are_collinear(A, B, C, Accuracy_2) ->
    try
        Ab_2 = create_vector(A, B),
        Ac_2 = create_vector(A, C),
        Cross = get_3d_vectors_cross(Ab_2, Ac_2),
        is_zero_vector(Cross, Accuracy_2)
    catch {return, Ret} -> Ret end.

test_are_collinear() ->
    try
        P1_2 = #{"x" => 0.0, "y" => 0.0, "z" => 0.0},
        P2_2 = #{"x" => 1.0, "y" => 1.0, "z" => 1.0},
        P3 = #{"x" => 2.0, "y" => 2.0, "z" => 2.0},
        case mochi_not(are_collinear(P1_2, P2_2, P3, 10)) of
        true -> erlang:error("collinear test failed");
        _ -> ok
    end,
        Q3 = #{"x" => 1.0, "y" => 2.0, "z" => 3.0},
        case are_collinear(P1_2, P2_2, Q3, 10) of
        true -> erlang:error("non-collinear test failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_are_collinear(),
        A_2 = #{"x" => 4.802293498137402, "y" => 3.536233125455244, "z" => 0.0},
        B_2 = #{"x" => -2.186788107953106, "y" => -9.24561398001649, "z" => 7.141509524846482},
        C_2 = #{"x" => 1.530169574640268, "y" => -2.447927606600034, "z" => 3.343487096469054},
        io:format("~ts~n", [mochi_str(are_collinear(A_2, B_2, C_2, 10))]),
        D = #{"x" => 2.399001826862445, "y" => -2.452009976680793, "z" => 4.464656666157666},
        E = #{"x" => -3.682816335934376, "y" => 5.753788986533145, "z" => 9.490993909044244},
        F = #{"x" => 1.962903518985307, "y" => 3.741415730125627, "z" => 7.0},
        io:format("~ts~n", [mochi_str(are_collinear(D, E, F, 10))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
