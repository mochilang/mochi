#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, double_factorial_recursive/1, double_factorial_iterative/1, test_double_factorial/0, main/0]).

% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

double_factorial_recursive(N) ->
    try
        case (N < 0) of
        true -> erlang:error({panic, "double_factorial_recursive() not defined for negative values"});
        _ -> ok
    end,
        case (N =< 1) of
        true -> throw({return, 1});
        _ -> ok
    end,
        (N * double_factorial_recursive((N - 2)))
    catch {return, RetCatch} -> RetCatch end.

double_factorial_iterative(N_2) ->
    try
        case (N_2 < 0) of
        true -> erlang:error({panic, "double_factorial_iterative() not defined for negative values"});
        _ -> ok
    end,
        Result = 1,
        I = N_2,
        Fun = fun Fun_loop(I, N_2, Result) ->
    case (I > 0) of
        true ->
            Result_2 = (Result * I),
            I_2 = (I - 2),
            Fun_loop(I_2, N_2, Result_2);
        _ -> {I, N_2, Result}
    end
end,
{I_2, N_2, Result_2} = Fun(I, N_2, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

test_double_factorial() ->
    try
        case (double_factorial_recursive(0) /= 1) of
        true -> erlang:error({panic, "0!! recursive failed"});
        _ -> ok
    end,
        case (double_factorial_iterative(0) /= 1) of
        true -> erlang:error({panic, "0!! iterative failed"});
        _ -> ok
    end,
        case (double_factorial_recursive(1) /= 1) of
        true -> erlang:error({panic, "1!! recursive failed"});
        _ -> ok
    end,
        case (double_factorial_iterative(1) /= 1) of
        true -> erlang:error({panic, "1!! iterative failed"});
        _ -> ok
    end,
        case (double_factorial_recursive(5) /= 15) of
        true -> erlang:error({panic, "5!! recursive failed"});
        _ -> ok
    end,
        case (double_factorial_iterative(5) /= 15) of
        true -> erlang:error({panic, "5!! iterative failed"});
        _ -> ok
    end,
        case (double_factorial_recursive(6) /= 48) of
        true -> erlang:error({panic, "6!! recursive failed"});
        _ -> ok
    end,
        case (double_factorial_iterative(6) /= 48) of
        true -> erlang:error({panic, "6!! iterative failed"});
        _ -> ok
    end,
        N_3 = 0,
        Fun_2 = fun Fun_2_loop(N_3) ->
    case (N_3 =< 10) of
        true ->
            case (double_factorial_recursive(N_3) /= double_factorial_iterative(N_3)) of
        true -> erlang:error({panic, "double factorial mismatch"});
        _ -> ok
    end,
            N_4 = (N_3 + 1),
            Fun_2_loop(N_4);
        _ -> {N_3}
    end
end,
{N_4} = Fun_2(N_3),
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_double_factorial(),
        io:format("~ts~n", [mochi_repr(double_factorial_iterative(10))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
