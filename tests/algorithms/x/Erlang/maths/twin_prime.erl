#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, is_prime/1, twin_prime/1, test_twin_prime/0, main/0]).

% Generated by Mochi transpiler v0.10.64 (1dced96c32) on 2025-08-12 13:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

is_prime(N) ->
    try
        case (N < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (mochi_mod(N, 2) == 0) of
        true -> throw({return, (N == 2)});
        _ -> ok
    end,
        I = 3,
        Fun = fun Fun_loop(I, N) ->
    case ((I * I) =< N) of
        true ->
            case (mochi_mod(N, I) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 2),
            Fun_loop(I_2, N);
        _ -> {I, N}
    end
end,
{I_2, N} = Fun(I, N),
        true
    catch {return, RetCatch} -> RetCatch end.

twin_prime(Number) ->
    try
        (case (is_prime(Number) andalso is_prime((Number + 2))) of
    true -> (Number + 2);
    _ -> -1
end)
    catch {return, RetCatch} -> RetCatch end.

test_twin_prime() ->
    try
        case (twin_prime(3) /= 5) of
        true -> erlang:error({panic, "twin_prime(3) failed"});
        _ -> ok
    end,
        case (twin_prime(4) /= -1) of
        true -> erlang:error({panic, "twin_prime(4) failed"});
        _ -> ok
    end,
        case (twin_prime(5) /= 7) of
        true -> erlang:error({panic, "twin_prime(5) failed"});
        _ -> ok
    end,
        case (twin_prime(17) /= 19) of
        true -> erlang:error({panic, "twin_prime(17) failed"});
        _ -> ok
    end,
        case (twin_prime(0) /= -1) of
        true -> erlang:error({panic, "twin_prime(0) failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_twin_prime(),
        io:format("~ts~n", [mochi_repr(twin_prime(3))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
