#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, integer_square_root/1, test_integer_square_root/0, main/0]).

% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

integer_square_root(Num) ->
    try
        case (Num < 0) of
        true -> erlang:error({panic, "num must be non-negative integer"});
        _ -> ok
    end,
        case (Num < 2) of
        true -> throw({return, Num});
        _ -> ok
    end,
        Left_bound = 0,
        Right_bound = (Num div 2),
        Fun = fun Fun_loop(Left_bound, Num, Right_bound) ->
    case (Left_bound =< Right_bound) of
        true ->
            Mid = (Left_bound + ((Right_bound - Left_bound) div 2)),
            Mid_squared = (Mid * Mid),
            case (Mid_squared == Num) of
        true -> throw({return, Mid});
        _ -> ok
    end,
            case (Mid_squared < Num) of
        true -> Left_bound_2 = (Mid + 1),
            Left_bound_3 = Left_bound_2,
            Right_bound_3 = Right_bound;
        _ -> Right_bound_2 = (Mid - 1),
            Left_bound_3 = Left_bound,
            Right_bound_3 = Right_bound_2
    end,
            Fun_loop(Left_bound_3, Num, Right_bound_3);
        _ -> {Left_bound, Num, Right_bound}
    end
end,
{Left_bound_3, Num, Right_bound_3} = Fun(Left_bound, Num, Right_bound),
        Right_bound_3
    catch {return, RetCatch} -> RetCatch end.

test_integer_square_root() ->
    try
        Expected = [0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 4, 4],
        I = 0,
        Fun_2 = fun Fun_2_loop(Expected, I) ->
    case (I < erlang:length(Expected)) of
        true ->
            Result = integer_square_root(I),
            case (Result /= (case erlang:is_map(Expected) of true -> maps:get(I, Expected, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Expected) + I + 1, Expected); _ -> mochi_nth(I + 1, Expected) end end)) of
        true -> erlang:error({panic, ("test failed at index " ++ mochi_str(I))});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_2_loop(Expected, I_2);
        _ -> {Expected, I}
    end
end,
{Expected, I_2} = Fun_2(Expected, I),
        case (integer_square_root(625) /= 25) of
        true -> erlang:error({panic, "sqrt of 625 incorrect"});
        _ -> ok
    end,
        case (integer_square_root(2147483647) /= 46340) of
        true -> erlang:error({panic, "sqrt of max int incorrect"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_integer_square_root(),
        io:format("~ts~n", [mochi_str(integer_square_root(625))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
