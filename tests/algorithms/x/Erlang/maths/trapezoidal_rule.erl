#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, f/1, make_points/3, trapezoidal_rule/2]).

% Generated by Mochi transpiler v0.10.64 (1dced96c32) on 2025-08-12 13:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

f(X) ->
    try
        mochi_safe_mul(X, X)
    catch {return, RetCatch} -> RetCatch end.

make_points(A, B, H) ->
    try
        Xs = [],
        X_2 = (A + H),
        Fun = fun Fun_loop(A, B, H, X_2, Xs) ->
    case (X_2 =< (B - H)) of
        true ->
            Xs_2 = lists:append((case Xs of nil -> []; _ -> Xs end), [X_2]),
            X_3 = (X_2 + H),
            Fun_loop(A, B, H, X_3, Xs_2);
        _ -> {A, B, H, X_2, Xs}
    end
end,
{A, B, H, X_3, Xs_2} = Fun(A, B, H, X_2, Xs),
        Xs_2
    catch {return, RetCatch} -> RetCatch end.

trapezoidal_rule(Boundary, Steps) ->
    try
        H_2 = mochi_safe_div(((case erlang:is_map(Boundary) of true -> maps:get(1, Boundary, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Boundary) + 1 + 1, Boundary); _ -> mochi_nth(1 + 1, Boundary) end end) - (case erlang:is_map(Boundary) of true -> maps:get(0, Boundary, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Boundary) + 0 + 1, Boundary); _ -> mochi_nth(0 + 1, Boundary) end end)), Steps),
        A_2 = (case erlang:is_map(Boundary) of true -> maps:get(0, Boundary, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Boundary) + 0 + 1, Boundary); _ -> mochi_nth(0 + 1, Boundary) end end),
        B_2 = (case erlang:is_map(Boundary) of true -> maps:get(1, Boundary, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Boundary) + 1 + 1, Boundary); _ -> mochi_nth(1 + 1, Boundary) end end),
        Xs_3 = make_points(A_2, B_2, H_2),
        Y = mochi_safe_mul(mochi_safe_div(H_2, 2.0), f(A_2)),
        I = 0,
        Fun_2 = fun Fun_2_loop(A_2, B_2, Boundary, H_2, I, Steps, Xs_3, Y) ->
    case (I < erlang:length(Xs_3)) of
        true ->
            Y_2 = (Y + mochi_safe_mul(H_2, f((case erlang:is_map(Xs_3) of true -> maps:get(I, Xs_3, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs_3) + I + 1, Xs_3); _ -> mochi_nth(I + 1, Xs_3) end end)))),
            I_2 = (I + 1),
            Fun_2_loop(A_2, B_2, Boundary, H_2, I_2, Steps, Xs_3, Y_2);
        _ -> {A_2, B_2, Boundary, H_2, I, Steps, Xs_3, Y}
    end
end,
{A_2, B_2, Boundary, H_2, I_2, Steps, Xs_3, Y_2} = Fun_2(A_2, B_2, Boundary, H_2, I, Steps, Xs_3, Y),
        Y_3 = (Y_2 + mochi_safe_mul(mochi_safe_div(H_2, 2.0), f(B_2))),
        Y_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('a', 0.0),
    erlang:put('b', 1.0),
    erlang:put('steps', 10.0),
    erlang:put('boundary', [0.0, 1.0]),
    erlang:put('y', trapezoidal_rule(erlang:get('boundary'), 10.0)),
    io:format("~ts~n", [mochi_repr(("y = " ++ mochi_str(erlang:get('y'))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
