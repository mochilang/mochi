#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow10/1, gcd/2, parse_decimal/1, reduce/1, decimal_to_fraction_str/1, decimal_to_fraction/1, assert_fraction/4, test_decimal_to_fraction/0, main/0]).

% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

pow10(N) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(I, N, Result) ->
    case (I < N) of
        true ->
            Result_2 = (Result * 10),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Result_2);
        _ -> {I, N, Result}
    end
end,
{I_2, N, Result_2} = Fun(I, N, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

gcd(A, B) ->
    try
        X = A,
        Y = B,
        case (X < 0) of
        true -> X_2 = -X,
            X_3 = X_2;
        _ -> X_3 = X
    end,
        case (Y < 0) of
        true -> Y_2 = -Y,
            Y_3 = Y_2;
        _ -> Y_3 = Y
    end,
        Fun_2 = fun Fun_2_loop(A, B, X_3, Y_3) ->
    case (Y_3 /= 0) of
        true ->
            R = mochi_mod(X_3, Y_3),
            X_4 = Y_3,
            Y_4 = R,
            Fun_2_loop(A, B, X_4, Y_4);
        _ -> {A, B, X_3, Y_3}
    end
end,
{A, B, X_4, Y_4} = Fun_2(A, B, X_3, Y_3),
        X_4
    catch {return, RetCatch} -> RetCatch end.

parse_decimal(S) ->
    try
        case (erlang:length(S) == 0) of
        true -> erlang:error({panic, "invalid number"});
        _ -> ok
    end,
        Idx = 0,
        Sign = 1,
        First = string:substr(S, 0 + 1, (1 - 0)),
        case (First == "-") of
        true -> Sign_2 = -1,
            Idx_2 = 1,
            Idx_5 = Idx_2,
            Sign_3 = Sign_2;
        _ -> case (First == "+") of
        true -> Idx_3 = 1,
            Idx_4 = Idx_3;
        _ -> Idx_4 = Idx
    end,
            Idx_5 = Idx_4,
            Sign_3 = Sign
    end,
        Int_part = "",
        Fun_3 = fun Fun_3_loop(First, Idx_5, Int_part, S, Sign_3) ->
    case (Idx_5 < erlang:length(S)) of
        true ->
            try
                C = string:substr(S, Idx_5 + 1, ((Idx_5 + 1) - Idx_5)),
                case ((C >= "0") andalso (C =< "9")) of
        true -> Int_part_2 = (Int_part ++ C),
            Idx_6 = (Idx_5 + 1),
            Idx_7 = Idx_6,
            Int_part_3 = Int_part_2;
        _ -> throw({break, First, Idx_5, Int_part, S, Sign_3}),
            Idx_7 = Idx_5,
            Int_part_3 = Int_part
    end,
                Fun_3_loop(First, Idx_7, Int_part_3, S, Sign_3)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_3_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {First, Idx_5, Int_part, S, Sign_3}
    end
end,
{First, Idx_7, Int_part_3, S, Sign_3} = Fun_3(First, Idx_5, Int_part, S, Sign_3),
        Frac_part = "",
        case ((Idx_7 < erlang:length(S)) andalso (string:substr(S, Idx_7 + 1, ((Idx_7 + 1) - Idx_7)) == ".")) of
        true -> Idx_8 = (Idx_7 + 1),
            Fun_4 = fun Fun_4_loop(First, Frac_part, Idx_8, Int_part_3, S, Sign_3) ->
    case (Idx_8 < erlang:length(S)) of
        true ->
            try
                C_2 = string:substr(S, Idx_8 + 1, ((Idx_8 + 1) - Idx_8)),
                case ((C_2 >= "0") andalso (C_2 =< "9")) of
        true -> Frac_part_2 = (Frac_part ++ C_2),
            Idx_9 = (Idx_8 + 1),
            Frac_part_3 = Frac_part_2,
            Idx_10 = Idx_9;
        _ -> throw({break, First, Frac_part, Idx_8, Int_part_3, S, Sign_3}),
            Frac_part_3 = Frac_part,
            Idx_10 = Idx_8
    end,
                Fun_4_loop(First, Frac_part_3, Idx_10, Int_part_3, S, Sign_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_4_loop(C0, C1, C2, C3, C4, C5);
                {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5}
            end;
        _ -> {First, Frac_part, Idx_8, Int_part_3, S, Sign_3}
    end
end,
{First, Frac_part_3, Idx_10, Int_part_3, S, Sign_3} = Fun_4(First, Frac_part, Idx_8, Int_part_3, S, Sign_3),
            Frac_part_4 = Frac_part_3,
            Fun_5 = Fun_4,
            Idx_11 = Idx_10;
        _ -> Frac_part_4 = Frac_part,
            Fun_5 = Fun_3,
            Idx_11 = Idx_7
    end,
        Exp = 0,
        case ((Idx_11 < erlang:length(S)) andalso ((string:substr(S, Idx_11 + 1, ((Idx_11 + 1) - Idx_11)) == "e") orelse (string:substr(S, Idx_11 + 1, ((Idx_11 + 1) - Idx_11)) == "E"))) of
        true -> Idx_12 = (Idx_11 + 1),
            Exp_sign = 1,
            case ((Idx_12 < erlang:length(S)) andalso (string:substr(S, Idx_12 + 1, ((Idx_12 + 1) - Idx_12)) == "-")) of
        true -> Exp_sign_2 = -1,
            Idx_13 = (Idx_12 + 1),
            Exp_sign_3 = Exp_sign_2,
            Idx_16 = Idx_13;
        _ -> case ((Idx_12 < erlang:length(S)) andalso (string:substr(S, Idx_12 + 1, ((Idx_12 + 1) - Idx_12)) == "+")) of
        true -> Idx_14 = (Idx_12 + 1),
            Idx_15 = Idx_14;
        _ -> Idx_15 = Idx_12
    end,
            Exp_sign_3 = Exp_sign,
            Idx_16 = Idx_15
    end,
            Exp_str = "",
            Fun_6 = fun Fun_6_loop(Exp, Exp_sign_3, Exp_str, First, Frac_part_4, Idx_16, Int_part_3, S, Sign_3) ->
    case (Idx_16 < erlang:length(S)) of
        true ->
            C_3 = string:substr(S, Idx_16 + 1, ((Idx_16 + 1) - Idx_16)),
            case ((C_3 >= "0") andalso (C_3 =< "9")) of
        true -> Exp_str_2 = (Exp_str ++ C_3),
            Idx_17 = (Idx_16 + 1),
            Exp_str_3 = Exp_str_2,
            Idx_18 = Idx_17;
        _ -> erlang:error({panic, "invalid number"}),
            Exp_str_3 = Exp_str,
            Idx_18 = Idx_16
    end,
            Fun_6_loop(Exp, Exp_sign_3, Exp_str_3, First, Frac_part_4, Idx_18, Int_part_3, S, Sign_3);
        _ -> {Exp, Exp_sign_3, Exp_str, First, Frac_part_4, Idx_16, Int_part_3, S, Sign_3}
    end
end,
{Exp, Exp_sign_3, Exp_str_3, First, Frac_part_4, Idx_18, Int_part_3, S, Sign_3} = Fun_6(Exp, Exp_sign_3, Exp_str, First, Frac_part_4, Idx_16, Int_part_3, S, Sign_3),
            case (erlang:length(Exp_str_3) == 0) of
        true -> erlang:error({panic, "invalid number"});
        _ -> ok
    end,
            Exp_2 = (Exp_sign_3 * mochi_to_int(Exp_str_3)),
            Exp_3 = Exp_2,
            Exp_sign_4 = Exp_sign_3,
            Exp_str_4 = Exp_str_3,
            Fun_7 = Fun_6,
            Idx_19 = Idx_18;
        _ -> Exp_3 = Exp,
            Exp_sign_4 = nil,
            Exp_str_4 = nil,
            Fun_7 = Fun_5,
            Idx_19 = Idx_11
    end,
        case (Idx_19 /= erlang:length(S)) of
        true -> erlang:error({panic, "invalid number"});
        _ -> ok
    end,
        case (erlang:length(Int_part_3) == 0) of
        true -> Int_part_4 = "0",
            Int_part_5 = Int_part_4;
        _ -> Int_part_5 = Int_part_3
    end,
        Num_str = (Int_part_5 ++ Frac_part_4),
        Numerator = mochi_to_int(Num_str),
        case (Sign_3 == (0 - 1)) of
        true -> Numerator_2 = (0 - Numerator),
            Numerator_3 = Numerator_2;
        _ -> Numerator_3 = Numerator
    end,
        Denominator = pow10(erlang:length(Frac_part_4)),
        case (Exp_3 > 0) of
        true -> Numerator_4 = (Numerator_3 * pow10(Exp_3)),
            Denominator_4 = Denominator,
            Numerator_5 = Numerator_4;
        _ -> case (Exp_3 < 0) of
        true -> Denominator_2 = (Denominator * pow10(-Exp_3)),
            Denominator_3 = Denominator_2;
        _ -> Denominator_3 = Denominator
    end,
            Denominator_4 = Denominator_3,
            Numerator_5 = Numerator_3
    end,
        #{"numerator" => Numerator_5, "denominator" => Denominator_4}
    catch {return, RetCatch} -> RetCatch end.

reduce(Fr) ->
    try
        G = gcd(maps:get("numerator", Fr, nil), maps:get("denominator", Fr, nil)),
        #{"numerator" => mochi_safe_div(maps:get("numerator", Fr, nil), G), "denominator" => mochi_safe_div(maps:get("denominator", Fr, nil), G)}
    catch {return, RetCatch} -> RetCatch end.

decimal_to_fraction_str(S_2) ->
    try
        reduce(parse_decimal(S_2))
    catch {return, RetCatch} -> RetCatch end.

decimal_to_fraction(X_5) ->
    try
        decimal_to_fraction_str(mochi_str(X_5))
    catch {return, RetCatch} -> RetCatch end.

assert_fraction(Name, Fr_2, Num, Den) ->
    try
        case ((maps:get("numerator", Fr_2, nil) /= Num) orelse (maps:get("denominator", Fr_2, nil) /= Den)) of
        true -> erlang:error({panic, Name});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

test_decimal_to_fraction() ->
    try
        assert_fraction("case1", decimal_to_fraction(2.0), 2, 1),
        assert_fraction("case2", decimal_to_fraction(89.0), 89, 1),
        assert_fraction("case3", decimal_to_fraction_str("67"), 67, 1),
        assert_fraction("case4", decimal_to_fraction_str("45.0"), 45, 1),
        assert_fraction("case5", decimal_to_fraction(1.5), 3, 2),
        assert_fraction("case6", decimal_to_fraction_str("6.25"), 25, 4),
        assert_fraction("case7", decimal_to_fraction(0.0), 0, 1),
        assert_fraction("case8", decimal_to_fraction(-2.5), -5, 2),
        assert_fraction("case9", decimal_to_fraction(0.125), 1, 8),
        assert_fraction("case10", decimal_to_fraction(1000000.25), 4000001, 4),
        assert_fraction("case11", decimal_to_fraction(1.3333), 13333, 10000),
        assert_fraction("case12", decimal_to_fraction_str("1.23e2"), 123, 1),
        assert_fraction("case13", decimal_to_fraction_str("0.500"), 1, 2),
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_decimal_to_fraction(),
        Fr_3 = decimal_to_fraction(1.5),
        io:format("~ts~n", [mochi_repr(((mochi_str(maps:get("numerator", Fr_3, nil)) ++ "/") ++ mochi_str(maps:get("denominator", Fr_3, nil))))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
