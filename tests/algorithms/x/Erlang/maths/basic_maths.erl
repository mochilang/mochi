#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, pow_int/2, prime_factors/1, number_of_divisors/1, sum_of_divisors/1, contains/2, unique/1, euler_phi/1]).

% Generated by Mochi transpiler v0.10.66 (fa2dc5e881)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) ->
                K = case Key of
                    <<_/binary>> -> Key;
                    _ when is_integer(Key) -> <<Key>>;
                    _ -> list_to_binary(Key)
                end,
                binary:match(Coll, K) /= nomatch;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

pow_int(Base, Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = (Result * Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

prime_factors(N) ->
    try
        case (N =< 0) of
        true -> erlang:error({panic, "Only positive integers have prime factors"});
        _ -> ok
    end,
        Num = N,
        Pf = [],
        Fun_2 = fun Fun_2_loop(N, Num, Pf) ->
    case (mochi_mod(Num, 2) == 0) of
        true ->
            Pf_2 = lists:append((case Pf of nil -> []; _ -> Pf end), [2]),
            Num_2 = (Num div 2),
            Fun_2_loop(N, Num_2, Pf_2);
        _ -> {N, Num, Pf}
    end
end,
{N, Num_2, Pf_2} = Fun_2(N, Num, Pf),
        I_3 = 3,
        Fun_4 = fun Fun_4_loop(I_3, N, Num_2, Pf_2) ->
    case ((I_3 * I_3) =< Num_2) of
        true ->
            Fun_3 = fun Fun_3_loop(I_3, N, Num_2, Pf_2) ->
    case (mochi_mod(Num_2, I_3) == 0) of
        true ->
            Pf_3 = lists:append((case Pf_2 of nil -> []; _ -> Pf_2 end), [I_3]),
            Num_3 = mochi_safe_div(Num_2, I_3),
            Fun_3_loop(I_3, N, Num_3, Pf_3);
        _ -> {I_3, N, Num_2, Pf_2}
    end
end,
{I_3, N, Num_3, Pf_3} = Fun_3(I_3, N, Num_2, Pf_2),
            I_4 = (I_3 + 2),
            Fun_4_loop(I_4, N, Num_3, Pf_3);
        _ -> {I_3, N, Num_2, Pf_2}
    end
end,
{I_4, N, Num_3, Pf_3} = Fun_4(I_3, N, Num_2, Pf_2),
        case (Num_3 > 2) of
        true -> Pf_4 = lists:append((case Pf_3 of nil -> []; _ -> Pf_3 end), [Num_3]),
            Pf_5 = Pf_4;
        _ -> Pf_5 = Pf_3
    end,
        Pf_5
    catch {return, RetCatch} -> RetCatch end.

number_of_divisors(N_2) ->
    try
        case (N_2 =< 0) of
        true -> erlang:error({panic, "Only positive numbers are accepted"});
        _ -> ok
    end,
        Num_4 = N_2,
        Div = 1,
        Temp = 1,
        Fun_5 = fun Fun_5_loop(Div, N_2, Num_4, Temp) ->
    case (mochi_mod(Num_4, 2) == 0) of
        true ->
            Temp_2 = (Temp + 1),
            Num_5 = (Num_4 div 2),
            Fun_5_loop(Div, N_2, Num_5, Temp_2);
        _ -> {Div, N_2, Num_4, Temp}
    end
end,
{Div, N_2, Num_5, Temp_2} = Fun_5(Div, N_2, Num_4, Temp),
        Div_2 = (Div * Temp_2),
        I_5 = 3,
        Fun_7 = fun Fun_7_loop(Div_2, I_5, N_2, Num_5, Temp_2) ->
    case ((I_5 * I_5) =< Num_5) of
        true ->
            Temp_3 = 1,
            Fun_6 = fun Fun_6_loop(Div_2, I_5, N_2, Num_5, Temp_3) ->
    case (mochi_mod(Num_5, I_5) == 0) of
        true ->
            Temp_4 = (Temp_3 + 1),
            Num_6 = mochi_safe_div(Num_5, I_5),
            Fun_6_loop(Div_2, I_5, N_2, Num_6, Temp_4);
        _ -> {Div_2, I_5, N_2, Num_5, Temp_3}
    end
end,
{Div_2, I_5, N_2, Num_6, Temp_4} = Fun_6(Div_2, I_5, N_2, Num_5, Temp_3),
            Div_3 = (Div_2 * Temp_4),
            I_6 = (I_5 + 2),
            Fun_7_loop(Div_3, I_6, N_2, Num_6, Temp_4);
        _ -> {Div_2, I_5, N_2, Num_5, Temp_2}
    end
end,
{Div_3, I_6, N_2, Num_6, Temp_4} = Fun_7(Div_2, I_5, N_2, Num_5, Temp_2),
        case (Num_6 > 1) of
        true -> Div_4 = (Div_3 * 2),
            Div_5 = Div_4;
        _ -> Div_5 = Div_3
    end,
        Div_5
    catch {return, RetCatch} -> RetCatch end.

sum_of_divisors(N_3) ->
    try
        case (N_3 =< 0) of
        true -> erlang:error({panic, "Only positive numbers are accepted"});
        _ -> ok
    end,
        Num_7 = N_3,
        S = 1,
        Temp_5 = 1,
        Fun_8 = fun Fun_8_loop(N_3, Num_7, S, Temp_5) ->
    case (mochi_mod(Num_7, 2) == 0) of
        true ->
            Temp_6 = (Temp_5 + 1),
            Num_8 = (Num_7 div 2),
            Fun_8_loop(N_3, Num_8, S, Temp_6);
        _ -> {N_3, Num_7, S, Temp_5}
    end
end,
{N_3, Num_8, S, Temp_6} = Fun_8(N_3, Num_7, S, Temp_5),
        case (Temp_6 > 1) of
        true -> S_2 = (S * ((pow_int(2, Temp_6) - 1) div (2 - 1))),
            S_3 = S_2;
        _ -> S_3 = S
    end,
        I_7 = 3,
        Fun_10 = fun Fun_10_loop(I_7, N_3, Num_8, S_3, Temp_6) ->
    case ((I_7 * I_7) =< Num_8) of
        true ->
            Temp_7 = 1,
            Fun_9 = fun Fun_9_loop(I_7, N_3, Num_8, S_3, Temp_7) ->
    case (mochi_mod(Num_8, I_7) == 0) of
        true ->
            Temp_8 = (Temp_7 + 1),
            Num_9 = mochi_safe_div(Num_8, I_7),
            Fun_9_loop(I_7, N_3, Num_9, S_3, Temp_8);
        _ -> {I_7, N_3, Num_8, S_3, Temp_7}
    end
end,
{I_7, N_3, Num_9, S_3, Temp_8} = Fun_9(I_7, N_3, Num_8, S_3, Temp_7),
            case (Temp_8 > 1) of
        true -> S_4 = (S_3 * ((pow_int(I_7, Temp_8) - 1) div (I_7 - 1))),
            S_5 = S_4;
        _ -> S_5 = S_3
    end,
            I_8 = (I_7 + 2),
            Fun_10_loop(I_8, N_3, Num_9, S_5, Temp_8);
        _ -> {I_7, N_3, Num_8, S_3, Temp_6}
    end
end,
{I_8, N_3, Num_9, S_5, Temp_8} = Fun_10(I_7, N_3, Num_8, S_3, Temp_6),
        S_5
    catch {return, RetCatch} -> RetCatch end.

contains(Arr, X) ->
    try
        Idx = 0,
        Fun_11 = fun Fun_11_loop(Arr, Idx, X) ->
    case (Idx < erlang:length(Arr)) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(Idx, Arr, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Arr) + Idx + 1, Arr); _ -> mochi_nth(Idx + 1, Arr) end end) == X) of
        true -> throw({return, true});
        _ -> ok
    end,
            Idx_2 = (Idx + 1),
            Fun_11_loop(Arr, Idx_2, X);
        _ -> {Arr, Idx, X}
    end
end,
{Arr, Idx_2, X} = Fun_11(Arr, Idx, X),
        false
    catch {return, RetCatch} -> RetCatch end.

unique(Arr_2) ->
    try
        Result_3 = [],
        Idx_3 = 0,
        Fun_12 = fun Fun_12_loop(Arr_2, Idx_3, Result_3) ->
    case (Idx_3 < erlang:length(Arr_2)) of
        true ->
            V = (case erlang:is_map(Arr_2) of true -> maps:get(Idx_3, Arr_2, nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(Arr_2) + Idx_3 + 1, Arr_2); _ -> mochi_nth(Idx_3 + 1, Arr_2) end end),
            case mochi_not(mochi_member(V, Result_3)) of
        true -> Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [V]),
            Result_5 = Result_4;
        _ -> Result_5 = Result_3
    end,
            Idx_4 = (Idx_3 + 1),
            Fun_12_loop(Arr_2, Idx_4, Result_5);
        _ -> {Arr_2, Idx_3, Result_3}
    end
end,
{Arr_2, Idx_4, Result_5} = Fun_12(Arr_2, Idx_3, Result_3),
        Result_5
    catch {return, RetCatch} -> RetCatch end.

euler_phi(N_4) ->
    try
        case (N_4 =< 0) of
        true -> erlang:error({panic, "Only positive numbers are accepted"});
        _ -> ok
    end,
        S_6 = N_4,
        Factors = unique(prime_factors(N_4)),
        Idx_5 = 0,
        Fun_13 = fun Fun_13_loop(Factors, Idx_5, N_4, S_6) ->
    case (Idx_5 < erlang:length(Factors)) of
        true ->
            X_2 = (case erlang:is_map(Factors) of true -> maps:get(Idx_5, Factors, nil); _ -> case Idx_5 < 0 of true -> mochi_nth(erlang:length(Factors) + Idx_5 + 1, Factors); _ -> mochi_nth(Idx_5 + 1, Factors) end end),
            S_7 = ((S_6 div X_2) * (X_2 - 1)),
            Idx_6 = (Idx_5 + 1),
            Fun_13_loop(Factors, Idx_6, N_4, S_7);
        _ -> {Factors, Idx_5, N_4, S_6}
    end
end,
{Factors, Idx_6, N_4, S_7} = Fun_13(Factors, Idx_5, N_4, S_6),
        S_7
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(prime_factors(100))]),
    io:format("~ts~n", [mochi_str(number_of_divisors(100))]),
    io:format("~ts~n", [mochi_str(sum_of_divisors(100))]),
    io:format("~ts~n", [mochi_str(euler_phi(100))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
