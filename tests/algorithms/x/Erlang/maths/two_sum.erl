#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, two_sum/2]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

two_sum(Nums, Target) ->
    try
        Chk_map = #{},
        Idx = 0,
        Fun = fun Fun_loop(Chk_map, Idx, Nums, Target) ->
    case (Idx < erlang:length(Nums)) of
        true ->
            Val = (case erlang:is_map(Nums) of true -> maps:get(Idx, Nums, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Nums) + Idx + 1, Nums); _ -> mochi_nth(Idx + 1, Nums) end end),
            Compl = (Target - Val),
            case maps:is_key(Compl, Chk_map) of
        true -> throw({return, [(maps:get(Compl, Chk_map, nil) - 1), Idx]});
        _ -> ok
    end,
            Chk_map_2 = maps:put(Val, (Idx + 1), Chk_map),
            Idx_2 = (Idx + 1),
            Fun_loop(Chk_map_2, Idx_2, Nums, Target);
        _ -> {Chk_map, Idx, Nums, Target}
    end
end,
{Chk_map_2, Idx_2, Nums, Target} = Fun(Chk_map, Idx, Nums, Target),
        []
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(two_sum([2, 7, 11, 15], 9))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
