#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, absf/1, sqrt_approx/1, distance/2, point_to_string/1, test_distance/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

absf(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

sqrt_approx(X_2) ->
    try
        case (X_2 =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = mochi_safe_div(X_2, 2.0),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_2, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, Ret} -> Ret end.

distance(A, B) ->
    try
        Dx = (maps:get("x", B, nil) - maps:get("x", A, nil)),
        Dy = (maps:get("y", B, nil) - maps:get("y", A, nil)),
        Dz = (maps:get("z", B, nil) - maps:get("z", A, nil)),
        sqrt_approx(absf(((mochi_safe_mul(Dx, Dx) + mochi_safe_mul(Dy, Dy)) + mochi_safe_mul(Dz, Dz))))
    catch {return, Ret} -> Ret end.

point_to_string(P) ->
    try
        (((((("Point(" ++ mochi_str(maps:get("x", P, nil))) ++ ", ") ++ mochi_str(maps:get("y", P, nil))) ++ ", ") ++ mochi_str(maps:get("z", P, nil))) ++ ")")
    catch {return, Ret} -> Ret end.

test_distance() ->
    try
        P1 = #{"x" => 2.0, "y" => -1.0, "z" => 7.0},
        P2 = #{"x" => 1.0, "y" => -3.0, "z" => 5.0},
        D = distance(P1, P2),
        case (absf((D - 3.0)) > 0.0001) of
        true -> erlang:error("distance test failed");
        _ -> ok
    end,
        io:format("~ts~n", [mochi_repr(((((("Distance from " ++ point_to_string(P1)) ++ " to ") ++ point_to_string(P2)) ++ " is ") ++ mochi_str(D)))]),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_distance(),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
