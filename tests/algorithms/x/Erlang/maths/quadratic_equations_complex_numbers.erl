#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, add/2, sub/2, div_real/2, sqrt_newton/1, sqrt_to_complex/1, quadratic_roots/3, root_str/1, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

add(A, B) ->
    try
        #{"re" => (maps:get("re", A, nil) + maps:get("re", B, nil)), "im" => (maps:get("im", A, nil) + maps:get("im", B, nil))}
    catch {return, Ret} -> Ret end.

sub(A_2, B_2) ->
    try
        #{"re" => (maps:get("re", A_2, nil) - maps:get("re", B_2, nil)), "im" => (maps:get("im", A_2, nil) - maps:get("im", B_2, nil))}
    catch {return, Ret} -> Ret end.

div_real(A_3, R) ->
    try
        #{"re" => mochi_safe_div(maps:get("re", A_3, nil), R), "im" => mochi_safe_div(maps:get("im", A_3, nil), R)}
    catch {return, Ret} -> Ret end.

sqrt_newton(X) ->
    try
        case (X =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = mochi_safe_div(X, 2.0),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, Ret} -> Ret end.

sqrt_to_complex(D) ->
    try
        (case (D >= 0.0) of
    true -> #{"re" => sqrt_newton(D), "im" => 0.0};
    _ -> #{"re" => 0.0, "im" => sqrt_newton(-D)}
end)
    catch {return, Ret} -> Ret end.

quadratic_roots(A_4, B_3, C) ->
    try
        case (A_4 == 0.0) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: coefficient 'a' must not be zero")]),
            throw({return, []});
        _ -> ok
    end,
        Delta = (mochi_safe_mul(B_3, B_3) - mochi_safe_mul(mochi_safe_mul(4.0, A_4), C)),
        Sqrt_d = sqrt_to_complex(Delta),
        Minus_b = #{"re" => -B_3, "im" => 0.0},
        Two_a = mochi_safe_mul(2.0, A_4),
        Root1 = div_real(add(Minus_b, Sqrt_d), Two_a),
        Root2 = div_real(sub(Minus_b, Sqrt_d), Two_a),
        [Root1, Root2]
    catch {return, Ret} -> Ret end.

root_str(R_2) ->
    try
        case (maps:get("im", R_2, nil) == 0.0) of
        true -> throw({return, mochi_str(maps:get("re", R_2, nil))});
        _ -> ok
    end,
        S = mochi_str(maps:get("re", R_2, nil)),
        case (maps:get("im", R_2, nil) >= 0.0) of
        true -> S_2 = (((S ++ "+") ++ mochi_str(maps:get("im", R_2, nil))) ++ "i"),
            S_4 = S_2;
        _ -> S_3 = ((S ++ mochi_str(maps:get("im", R_2, nil))) ++ "i"),
            S_4 = S_3
    end,
        S_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        Roots = quadratic_roots(5.0, 6.0, 1.0),
        case (erlang:length(Roots) == 2) of
        true -> io:format("~ts~n", [mochi_repr(((("The solutions are: " ++ root_str((case erlang:is_map(Roots) of true -> maps:get(0, Roots, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Roots) + 0 + 1, Roots); _ -> mochi_nth(0 + 1, Roots) end end))) ++ " and ") ++ root_str((case erlang:is_map(Roots) of true -> maps:get(1, Roots, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Roots) + 1 + 1, Roots); _ -> mochi_nth(1 + 1, Roots) end end))))]);
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
