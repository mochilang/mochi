#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs_float/1, trapezoidal_area/4, f/1]).

% Generated by Mochi transpiler v0.10.59 (589dcb03e5) on 2025-08-07 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

abs_float(X) ->
    try
        case (X < 0.0) of
        true -> throw({return, -X});
        _ -> throw({return, X})
    end,
        nil
    catch {return, Ret} -> Ret end.

trapezoidal_area(F, X_start, X_end, Steps) ->
    try
        Step = mochi_safe_div((X_end - X_start), float(Steps)),
        X1 = X_start,
        Fx1 = F(X_start),
        Area = 0.0,
        I = 0,
        Fun = fun Fun_loop(Area, F, Fx1, I, Step, Steps, X1, X_end, X_start) ->
    case (I < Steps) of
        true ->
            X2 = (X1 + Step),
            Fx2 = F(X2),
            Area_2 = (Area + mochi_safe_div(mochi_safe_mul(abs_float((Fx2 + Fx1)), Step), 2.0)),
            X1_2 = X2,
            Fx1_2 = Fx2,
            I_2 = (I + 1),
            Fun_loop(Area_2, F, Fx1_2, I_2, Step, Steps, X1_2, X_end, X_start);
        _ -> {Area, F, Fx1, I, Step, Steps, X1, X_end, X_start}
    end
end,
{Area_2, F, Fx1_2, I_2, Step, Steps, X1_2, X_end, X_start} = Fun(Area, F, Fx1, I, Step, Steps, X1, X_end, X_start),
        Area_2
    catch {return, Ret} -> Ret end.

f(X_2) ->
    try
        (mochi_safe_mul(mochi_safe_mul(X_2, X_2), X_2) + mochi_safe_mul(X_2, X_2))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr("f(x) = x^3 + x^2")]),
    io:format("~ts~n", [mochi_repr("The area between the curve, x = -5, x = 5 and the x axis is:")]),
    erlang:put('i', 10),
    Fun_2 = fun Fun_2_loop() ->
    case (erlang:get('i') =< 100000) of
        true ->
            Result = trapezoidal_area(fun f/1, -5.0, 5.0, erlang:get('i')),
            io:format("~ts~n", [mochi_repr(((("with " ++ mochi_str(erlang:get('i'))) ++ " steps: ") ++ mochi_str(Result)))]),
            erlang:put('i', (erlang:get('i') * 10)),
            Fun_2_loop();
        _ -> {}
    end
end,
{} = Fun_2(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
