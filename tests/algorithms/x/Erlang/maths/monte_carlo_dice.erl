#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, lcg_rand/0, roll/0, round2/1, throw_dice/2, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

lcg_rand() ->
    try
        erlang:put('lcg_seed', mochi_mod(((erlang:get('lcg_seed') * 1103515245) + 12345), 2147483648)),
        erlang:get('lcg_seed')
    catch {return, Ret} -> Ret end.

roll() ->
    try
        Rv = float(lcg_rand()),
        R = mochi_safe_div(mochi_safe_mul(Rv, 6.0), 2147483648.0),
        (1 + mochi_to_int(R))
    catch {return, Ret} -> Ret end.

round2(X) ->
    try
        Y = (mochi_safe_mul(X, 100.0) + 0.5),
        Z = mochi_to_int(Y),
        mochi_safe_div(float(Z), 100.0)
    catch {return, Ret} -> Ret end.

throw_dice(Num_throws, Num_dice) ->
    try
        Count_of_sum = [],
        Max_sum = ((Num_dice * 6) + 1),
        I = 0,
        Fun = fun Fun_loop(Count_of_sum, I, Max_sum, Num_dice, Num_throws) ->
    case (I < Max_sum) of
        true ->
            Count_of_sum_2 = lists:append((case Count_of_sum of nil -> []; _ -> Count_of_sum end), [0]),
            I_2 = (I + 1),
            Fun_loop(Count_of_sum_2, I_2, Max_sum, Num_dice, Num_throws);
        _ -> {Count_of_sum, I, Max_sum, Num_dice, Num_throws}
    end
end,
{Count_of_sum_2, I_2, Max_sum, Num_dice, Num_throws} = Fun(Count_of_sum, I, Max_sum, Num_dice, Num_throws),
        T = 0,
        Fun_3 = fun Fun_3_loop(Count_of_sum_2, I_2, Max_sum, Num_dice, Num_throws, T) ->
    case (T < Num_throws) of
        true ->
            S = 0,
            D = 0,
            Fun_2 = fun Fun_2_loop(Count_of_sum_2, D, I_2, Max_sum, Num_dice, Num_throws, S, T) ->
    case (D < Num_dice) of
        true ->
            S_2 = (S + roll()),
            D_2 = (D + 1),
            Fun_2_loop(Count_of_sum_2, D_2, I_2, Max_sum, Num_dice, Num_throws, S_2, T);
        _ -> {Count_of_sum_2, D, I_2, Max_sum, Num_dice, Num_throws, S, T}
    end
end,
{Count_of_sum_2, D_2, I_2, Max_sum, Num_dice, Num_throws, S_2, T} = Fun_2(Count_of_sum_2, D, I_2, Max_sum, Num_dice, Num_throws, S, T),
            Count_of_sum_3 = lists:sublist(Count_of_sum_2, S_2) ++ [((case erlang:is_map(Count_of_sum_2) of true -> maps:get(S_2, Count_of_sum_2, nil); _ -> case S_2 < 0 of true -> mochi_nth(erlang:length(Count_of_sum_2) + S_2 + 1, Count_of_sum_2); _ -> mochi_nth(S_2 + 1, Count_of_sum_2) end end) + 1)] ++ lists:nthtail(S_2 + 1, Count_of_sum_2),
            T_2 = (T + 1),
            Fun_3_loop(Count_of_sum_3, I_2, Max_sum, Num_dice, Num_throws, T_2);
        _ -> {Count_of_sum_2, I_2, Max_sum, Num_dice, Num_throws, T}
    end
end,
{Count_of_sum_3, I_2, Max_sum, Num_dice, Num_throws, T_2} = Fun_3(Count_of_sum_2, I_2, Max_sum, Num_dice, Num_throws, T),
        Probability = [],
        I_3 = Num_dice,
        Fun_4 = fun Fun_4_loop(Count_of_sum_3, I_3, Max_sum, Num_dice, Num_throws, Probability, T_2) ->
    case (I_3 < Max_sum) of
        true ->
            P = mochi_safe_div(mochi_safe_mul(float((case erlang:is_map(Count_of_sum_3) of true -> maps:get(I_3, Count_of_sum_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Count_of_sum_3) + I_3 + 1, Count_of_sum_3); _ -> mochi_nth(I_3 + 1, Count_of_sum_3) end end)), 100.0), float(Num_throws)),
            Probability_2 = lists:append((case Probability of nil -> []; _ -> Probability end), [round2(P)]),
            I_4 = (I_3 + 1),
            Fun_4_loop(Count_of_sum_3, I_4, Max_sum, Num_dice, Num_throws, Probability_2, T_2);
        _ -> {Count_of_sum_3, I_3, Max_sum, Num_dice, Num_throws, Probability, T_2}
    end
end,
{Count_of_sum_3, I_4, Max_sum, Num_dice, Num_throws, Probability_2, T_2} = Fun_4(Count_of_sum_3, I_3, Max_sum, Num_dice, Num_throws, Probability, T_2),
        Probability_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        erlang:put('lcg_seed', 1),
        Result = throw_dice(10000, 2),
        io:format("~ts~n", [mochi_str(Result)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('lcg_seed', 1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
