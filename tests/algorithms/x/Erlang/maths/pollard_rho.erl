#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, gcd/2, rand_fn/3, pollard_rho/4, test_pollard_rho/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

gcd(A, B) ->
    try
        X = (case (A < 0) of
    true -> -A;
    _ -> A
end),
        Y = (case (B < 0) of
    true -> -B;
    _ -> B
end),
        Fun = fun Fun_loop(A, B, X, Y) ->
    case (Y /= 0) of
        true ->
            T = mochi_mod(X, Y),
            X_2 = Y,
            Y_2 = T,
            Fun_loop(A, B, X_2, Y_2);
        _ -> {A, B, X, Y}
    end
end,
{A, B, X_2, Y_2} = Fun(A, B, X, Y),
        X_2
    catch {return, Ret} -> Ret end.

rand_fn(Value, Step, Modulus) ->
    try
        mochi_mod(((Value * Value) + Step), Modulus)
    catch {return, Ret} -> Ret end.

pollard_rho(Num, Seed, Step_2, Attempts) ->
    try
        case (Num < 2) of
        true -> erlang:error("The input value cannot be less than 2");
        _ -> ok
    end,
        case ((Num > 2) andalso (mochi_mod(Num, 2) == 0)) of
        true -> throw({return, #{"factor" => 2, "ok" => true}});
        _ -> ok
    end,
        S = Seed,
        St = Step_2,
        I = 0,
        Fun_3 = fun Fun_3_loop(Attempts, I, Num, S, Seed, St, Step_2) ->
    case (I < Attempts) of
        true ->
            try
                Tortoise = S,
                Hare = S,
                Fun_2 = fun Fun_2_loop(Attempts, Hare, I, Num, S, Seed, St, Step_2, Tortoise) ->
    case true of
        true ->
            try
                Tortoise_2 = rand_fn(Tortoise, St, Num),
                Hare_2 = rand_fn(Hare, St, Num),
                Hare_3 = rand_fn(Hare_2, St, Num),
                Divisor = gcd((Hare_3 - Tortoise_2), Num),
                case (Divisor == 1) of
        true -> throw({continue, Attempts, Hare_3, I, Num, S, Seed, St, Step_2, Tortoise_2});
        _ -> case (Divisor == Num) of
        true -> throw({break, Attempts, Hare_3, I, Num, S, Seed, St, Step_2, Tortoise_2});
        _ -> throw({return, #{"factor" => Divisor, "ok" => true}})
    end
    end,
                Fun_2_loop(Attempts, Hare_3, I, Num, S, Seed, St, Step_2, Tortoise_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8} -> Fun_2_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8}
            end;
        _ -> {Attempts, Hare, I, Num, S, Seed, St, Step_2, Tortoise}
    end
end,
{Attempts, Hare_3, I, Num, S, Seed, St, Step_2, Tortoise_2} = Fun_2(Attempts, Hare, I, Num, S, Seed, St, Step_2, Tortoise),
                S_2 = Hare_3,
                St_2 = (St + 1),
                I_2 = (I + 1),
                Fun_3_loop(Attempts, I_2, Num, S_2, Seed, St_2, Step_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {Attempts, I, Num, S, Seed, St, Step_2}
    end
end,
{Attempts, I_2, Num, S_2, Seed, St_2, Step_2} = Fun_3(Attempts, I, Num, S, Seed, St, Step_2),
        #{"factor" => 0, "ok" => false}
    catch {return, Ret} -> Ret end.

test_pollard_rho() ->
    try
        R1 = pollard_rho(8051, 2, 1, 5),
        case (mochi_not(maps:get("ok", R1, nil)) orelse ((maps:get("factor", R1, nil) /= 83) andalso (maps:get("factor", R1, nil) /= 97))) of
        true -> erlang:error("test1 failed");
        _ -> ok
    end,
        R2 = pollard_rho(10403, 2, 1, 5),
        case (mochi_not(maps:get("ok", R2, nil)) orelse ((maps:get("factor", R2, nil) /= 101) andalso (maps:get("factor", R2, nil) /= 103))) of
        true -> erlang:error("test2 failed");
        _ -> ok
    end,
        R3 = pollard_rho(100, 2, 1, 3),
        case (mochi_not(maps:get("ok", R3, nil)) orelse (maps:get("factor", R3, nil) /= 2)) of
        true -> erlang:error("test3 failed");
        _ -> ok
    end,
        R4 = pollard_rho(17, 2, 1, 3),
        case maps:get("ok", R4, nil) of
        true -> erlang:error("test4 failed");
        _ -> ok
    end,
        R5 = pollard_rho(((17 * 17) * 17), 2, 1, 3),
        case (mochi_not(maps:get("ok", R5, nil)) orelse (maps:get("factor", R5, nil) /= 17)) of
        true -> erlang:error("test5 failed");
        _ -> ok
    end,
        R6 = pollard_rho(((17 * 17) * 17), 2, 1, 1),
        case maps:get("ok", R6, nil) of
        true -> erlang:error("test6 failed");
        _ -> ok
    end,
        R7 = pollard_rho(((3 * 5) * 7), 2, 1, 3),
        case (mochi_not(maps:get("ok", R7, nil)) orelse (maps:get("factor", R7, nil) /= 21)) of
        true -> erlang:error("test7 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_pollard_rho(),
        A_2 = pollard_rho(100, 2, 1, 3),
        case maps:get("ok", A_2, nil) of
        true -> io:format("~ts~n", [mochi_str(maps:get("factor", A_2, nil))]);
        _ -> io:format("~ts~n", [mochi_repr("None")])
    end,
        B_2 = pollard_rho(17, 2, 1, 3),
        case maps:get("ok", B_2, nil) of
        true -> io:format("~ts~n", [mochi_str(maps:get("factor", B_2, nil))]);
        _ -> io:format("~ts~n", [mochi_repr("None")])
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
