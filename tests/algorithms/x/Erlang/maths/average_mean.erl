#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, mean/1]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

mean(Nums) ->
    try
        case (erlang:length(Nums) == 0) of
        true -> erlang:error("List is empty");
        _ -> ok
    end,
        Total = 0.0,
        I = 0,
        Fun = fun Fun_loop(I, Nums, Total) ->
    case (I < erlang:length(Nums)) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Nums) of true -> maps:get(I, Nums, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Nums) + I + 1, Nums); _ -> mochi_nth(I + 1, Nums) end end)),
            I_2 = (I + 1),
            Fun_loop(I_2, Nums, Total_2);
        _ -> {I, Nums, Total}
    end
end,
{I_2, Nums, Total_2} = Fun(I, Nums, Total),
        mochi_safe_div(Total_2, float(erlang:length(Nums)))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(mean([3.0, 6.0, 9.0, 12.0, 15.0, 18.0, 21.0]))]),
    io:format("~ts~n", [mochi_str(mean([5.0, 10.0, 15.0, 20.0, 25.0, 30.0, 35.0]))]),
    io:format("~ts~n", [mochi_str(mean([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
