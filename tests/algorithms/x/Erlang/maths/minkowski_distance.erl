#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs_val/1, pow_float/2, nth_root/2, minkowski_distance/3, test_minkowski/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

abs_val(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

pow_float(Base, Exp) ->
    try
        Result = 1.0,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = mochi_safe_mul(Result, Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

nth_root(Value, N) ->
    try
        case (Value == 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        X_2 = mochi_safe_div(Value, float(N)),
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, N, Value, X_2) ->
    case (I_3 < 20) of
        true ->
            Num = (mochi_safe_mul(float((N - 1)), X_2) + mochi_safe_div(Value, pow_float(X_2, (N - 1)))),
            X_3 = mochi_safe_div(Num, float(N)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, N, Value, X_3);
        _ -> {I_3, N, Value, X_2}
    end
end,
{I_4, N, Value, X_3} = Fun_2(I_3, N, Value, X_2),
        X_3
    catch {return, Ret} -> Ret end.

minkowski_distance(Point_a, Point_b, Order) ->
    try
        case (Order < 1) of
        true -> erlang:error("The order must be greater than or equal to 1.");
        _ -> ok
    end,
        case (erlang:length(Point_a) /= erlang:length(Point_b)) of
        true -> erlang:error("Both points must have the same dimension.");
        _ -> ok
    end,
        Total = 0.0,
        Idx = 0,
        Fun_3 = fun Fun_3_loop(Idx, Order, Point_a, Point_b, Total) ->
    case (Idx < erlang:length(Point_a)) of
        true ->
            Diff = abs_val(((case erlang:is_map(Point_a) of true -> maps:get(Idx, Point_a, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Point_a) + Idx + 1, Point_a); _ -> mochi_nth(Idx + 1, Point_a) end end) - (case erlang:is_map(Point_b) of true -> maps:get(Idx, Point_b, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Point_b) + Idx + 1, Point_b); _ -> mochi_nth(Idx + 1, Point_b) end end))),
            Total_2 = (Total + pow_float(Diff, Order)),
            Idx_2 = (Idx + 1),
            Fun_3_loop(Idx_2, Order, Point_a, Point_b, Total_2);
        _ -> {Idx, Order, Point_a, Point_b, Total}
    end
end,
{Idx_2, Order, Point_a, Point_b, Total_2} = Fun_3(Idx, Order, Point_a, Point_b, Total),
        nth_root(Total_2, Order)
    catch {return, Ret} -> Ret end.

test_minkowski() ->
    try
        case (abs_val((minkowski_distance([1.0, 1.0], [2.0, 2.0], 1) - 2.0)) > 0.0001) of
        true -> erlang:error("minkowski_distance test1 failed");
        _ -> ok
    end,
        case (abs_val((minkowski_distance([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], 2) - 8.0)) > 0.0001) of
        true -> erlang:error("minkowski_distance test2 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_minkowski(),
        io:format("~ts~n", [mochi_repr(minkowski_distance([5.0], [0.0], 3))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
