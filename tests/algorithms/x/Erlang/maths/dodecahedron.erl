#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrtapprox/1, abs_val/1, approx_equal/3, dodecahedron_surface_area/1, dodecahedron_volume/1, test_dodecahedron/0, main/0]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

sqrtapprox(X) ->
    try
        Guess = mochi_safe_div(X, 2.0),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, Ret} -> Ret end.

abs_val(Num) ->
    try
        (case (Num < 0.0) of
    true -> -Num;
    _ -> Num
end)
    catch {return, Ret} -> Ret end.

approx_equal(A, B, Eps) ->
    try
        (abs_val((A - B)) < Eps)
    catch {return, Ret} -> Ret end.

dodecahedron_surface_area(Edge) ->
    try
        case (Edge =< 0) of
        true -> erlang:error("Length must be a positive.");
        _ -> ok
    end,
        Term = sqrtapprox((25.0 + mochi_safe_mul(10.0, sqrtapprox(5.0)))),
        E = float(Edge),
        mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(3.0, Term), E), E)
    catch {return, Ret} -> Ret end.

dodecahedron_volume(Edge_2) ->
    try
        case (Edge_2 =< 0) of
        true -> erlang:error("Length must be a positive.");
        _ -> ok
    end,
        Term_2 = mochi_safe_div((15.0 + mochi_safe_mul(7.0, sqrtapprox(5.0))), 4.0),
        E_2 = float(Edge_2),
        mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(Term_2, E_2), E_2), E_2)
    catch {return, Ret} -> Ret end.

test_dodecahedron() ->
    try
        case mochi_not(approx_equal(dodecahedron_surface_area(5), 516.1432201766901, 0.0001)) of
        true -> erlang:error("surface area 5 failed");
        _ -> ok
    end,
        case mochi_not(approx_equal(dodecahedron_surface_area(10), 2064.5728807067603, 0.0001)) of
        true -> erlang:error("surface area 10 failed");
        _ -> ok
    end,
        case mochi_not(approx_equal(dodecahedron_volume(5), 957.8898700780791, 0.0001)) of
        true -> erlang:error("volume 5 failed");
        _ -> ok
    end,
        case mochi_not(approx_equal(dodecahedron_volume(10), 7663.118960624633, 0.0001)) of
        true -> erlang:error("volume 10 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_dodecahedron(),
        io:format("~ts~n", [mochi_repr(dodecahedron_surface_area(5))]),
        io:format("~ts~n", [mochi_repr(dodecahedron_volume(5))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
