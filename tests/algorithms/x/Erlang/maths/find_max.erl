#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, normalize_index/2, find_max_iterative/1, find_max_recursive/3, test_find_max/0, main/0]).

% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

normalize_index(Index, N) ->
    try
        (case (Index < 0) of
    true -> (N + Index);
    _ -> Index
end)
    catch {return, RetCatch} -> RetCatch end.

find_max_iterative(Nums) ->
    try
        case (erlang:length(Nums) == 0) of
        true -> erlang:error({panic, "find_max_iterative() arg is an empty sequence"});
        _ -> ok
    end,
        Max_num = (case erlang:is_map(Nums) of true -> maps:get(0, Nums, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Nums) + 0 + 1, Nums); _ -> mochi_nth(0 + 1, Nums) end end),
        I = 0,
        Fun = fun Fun_loop(I, Max_num, Nums) ->
    case (I < erlang:length(Nums)) of
        true ->
            X = (case erlang:is_map(Nums) of true -> maps:get(I, Nums, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Nums) + I + 1, Nums); _ -> mochi_nth(I + 1, Nums) end end),
            case (X > Max_num) of
        true -> Max_num_2 = X,
            Max_num_3 = Max_num_2;
        _ -> Max_num_3 = Max_num
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Max_num_3, Nums);
        _ -> {I, Max_num, Nums}
    end
end,
{I_2, Max_num_3, Nums} = Fun(I, Max_num, Nums),
        Max_num_3
    catch {return, RetCatch} -> RetCatch end.

find_max_recursive(Nums_2, Left, Right) ->
    try
        N_2 = erlang:length(Nums_2),
        case (N_2 == 0) of
        true -> erlang:error({panic, "find_max_recursive() arg is an empty sequence"});
        _ -> ok
    end,
        case ((((Left >= N_2) orelse (Left < (0 - N_2))) orelse (Right >= N_2)) orelse (Right < (0 - N_2))) of
        true -> erlang:error({panic, "list index out of range"});
        _ -> ok
    end,
        L = normalize_index(Left, N_2),
        R = normalize_index(Right, N_2),
        case (L == R) of
        true -> throw({return, (case erlang:is_map(Nums_2) of true -> maps:get(L, Nums_2, nil); _ -> case L < 0 of true -> mochi_nth(erlang:length(Nums_2) + L + 1, Nums_2); _ -> mochi_nth(L + 1, Nums_2) end end)});
        _ -> ok
    end,
        Mid = ((L + R) div 2),
        Left_max = find_max_recursive(Nums_2, L, Mid),
        Right_max = find_max_recursive(Nums_2, (Mid + 1), R),
        case (Left_max >= Right_max) of
        true -> throw({return, Left_max});
        _ -> ok
    end,
        Right_max
    catch {return, RetCatch} -> RetCatch end.

test_find_max() ->
    try
        Arr = [2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0],
        case (find_max_iterative(Arr) /= 94.0) of
        true -> erlang:error({panic, "find_max_iterative failed"});
        _ -> ok
    end,
        case (find_max_recursive(Arr, 0, (erlang:length(Arr) - 1)) /= 94.0) of
        true -> erlang:error({panic, "find_max_recursive failed"});
        _ -> ok
    end,
        case (find_max_recursive(Arr, -erlang:length(Arr), -1) /= 94.0) of
        true -> erlang:error({panic, "negative index handling failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_find_max(),
        Nums_3 = [2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0],
        io:format("~ts~n", [mochi_repr(find_max_iterative(Nums_3))]),
        io:format("~ts~n", [mochi_repr(find_max_recursive(Nums_3, 0, (erlang:length(Nums_3) - 1)))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
