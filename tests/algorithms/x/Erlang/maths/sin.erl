#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs/1, floor/1, pow/2, factorial/1, radians/1, taylor_sin/3, test_sin/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

abs(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

floor(X_2) ->
    try
        I = mochi_to_int(X_2),
        case (float(I) > X_2) of
        true -> I_2 = (I - 1),
            I_3 = I_2;
        _ -> I_3 = I
    end,
        float(I_3)
    catch {return, Ret} -> Ret end.

pow(X_3, N) ->
    try
        Result = 1.0,
        I_4 = 0,
        Fun = fun Fun_loop(I_4, N, Result, X_3) ->
    case (I_4 < N) of
        true ->
            Result_2 = mochi_safe_mul(Result, X_3),
            I_5 = (I_4 + 1),
            Fun_loop(I_5, N, Result_2, X_3);
        _ -> {I_4, N, Result, X_3}
    end
end,
{I_5, N, Result_2, X_3} = Fun(I_4, N, Result, X_3),
        Result_2
    catch {return, Ret} -> Ret end.

factorial(N_2) ->
    try
        Result_3 = 1.0,
        I_6 = 2,
        Fun_2 = fun Fun_2_loop(I_6, N_2, Result_3) ->
    case (I_6 =< N_2) of
        true ->
            Result_4 = mochi_safe_mul(Result_3, float(I_6)),
            I_7 = (I_6 + 1),
            Fun_2_loop(I_7, N_2, Result_4);
        _ -> {I_6, N_2, Result_3}
    end
end,
{I_7, N_2, Result_4} = Fun_2(I_6, N_2, Result_3),
        Result_4
    catch {return, Ret} -> Ret end.

radians(Deg) ->
    try
        mochi_safe_div(mochi_safe_mul(Deg, 3.141592653589793), 180.0)
    catch {return, Ret} -> Ret end.

taylor_sin(Angle_in_degrees, Accuracy, Rounded_values_count) ->
    try
        K = floor(mochi_safe_div(Angle_in_degrees, 360.0)),
        Angle = (Angle_in_degrees - mochi_safe_mul(K, 360.0)),
        Angle_in_radians = radians(Angle),
        Result_5 = Angle_in_radians,
        A = 3,
        Sign = -1.0,
        I_8 = 0,
        Fun_3 = fun Fun_3_loop(A, Accuracy, Angle, Angle_in_degrees, Angle_in_radians, I_8, K, Result_5, Rounded_values_count, Sign) ->
    case (I_8 < Accuracy) of
        true ->
            Result_6 = (Result_5 + mochi_safe_div(mochi_safe_mul(Sign, math:pow(Angle_in_radians, A)), factorial(A))),
            Sign_2 = -Sign,
            A_2 = (A + 2),
            I_9 = (I_8 + 1),
            Fun_3_loop(A_2, Accuracy, Angle, Angle_in_degrees, Angle_in_radians, I_9, K, Result_6, Rounded_values_count, Sign_2);
        _ -> {A, Accuracy, Angle, Angle_in_degrees, Angle_in_radians, I_8, K, Result_5, Rounded_values_count, Sign}
    end
end,
{A_2, Accuracy, Angle, Angle_in_degrees, Angle_in_radians, I_9, K, Result_6, Rounded_values_count, Sign_2} = Fun_3(A, Accuracy, Angle, Angle_in_degrees, Angle_in_radians, I_8, K, Result_5, Rounded_values_count, Sign),
        Result_6
    catch {return, Ret} -> Ret end.

test_sin() ->
    try
        Eps = 0.0000001,
        case (erlang:abs((taylor_sin(0.0, 18, 10) - 0.0)) > 0.0000001) of
        true -> erlang:error("sin(0) failed");
        _ -> ok
    end,
        case (erlang:abs((taylor_sin(90.0, 18, 10) - 1.0)) > 0.0000001) of
        true -> erlang:error("sin(90) failed");
        _ -> ok
    end,
        case (erlang:abs((taylor_sin(180.0, 18, 10) - 0.0)) > 0.0000001) of
        true -> erlang:error("sin(180) failed");
        _ -> ok
    end,
        case (erlang:abs((taylor_sin(270.0, 18, 10) - -1.0)) > 0.0000001) of
        true -> erlang:error("sin(270) failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_sin(),
        Res = taylor_sin(64.0, 18, 10),
        io:format("~ts~n", [mochi_repr(Res)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
