#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, binary_multiply/2, binary_mod_multiply/3, main/0]).

% Generated by Mochi transpiler v0.10.66 (f6dfa6fffe)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

binary_multiply(A, B) ->
    try
        X = A,
        Y = B,
        Res = 0,
        Fun = fun Fun_loop(A, B, Res, X, Y) ->
    case (Y > 0) of
        true ->
            Res_3 = (case (mochi_mod(Y, 2) == 1) of
        true -> Res_2 = (Res + X),
            Res_2;
        _ -> Res
    end),
            X_2 = (X + X),
            Y_2 = mochi_to_int((Y div 2)),
            Fun_loop(A, B, Res_3, X_2, Y_2);
        _ -> {A, B, Res, X, Y}
    end
end,
{A, B, Res_3, X_2, Y_2} = Fun(A, B, Res, X, Y),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

binary_mod_multiply(A_2, B_2, Modulus) ->
    try
        X_3 = A_2,
        Y_3 = B_2,
        Res_4 = 0,
        Fun_2 = fun Fun_2_loop(A_2, B_2, Modulus, Res_4, X_3, Y_3) ->
    case (Y_3 > 0) of
        true ->
            Res_6 = (case (mochi_mod(Y_3, 2) == 1) of
        true -> Res_5 = mochi_mod((mochi_mod(Res_4, Modulus) + mochi_mod(X_3, Modulus)), Modulus),
            Res_5;
        _ -> Res_4
    end),
            X_4 = (X_3 + X_3),
            Y_4 = mochi_to_int((Y_3 div 2)),
            Fun_2_loop(A_2, B_2, Modulus, Res_6, X_4, Y_4);
        _ -> {A_2, B_2, Modulus, Res_4, X_3, Y_3}
    end
end,
{A_2, B_2, Modulus, Res_6, X_4, Y_4} = Fun_2(A_2, B_2, Modulus, Res_4, X_3, Y_3),
        mochi_mod(Res_6, Modulus)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_str(binary_multiply(2, 3))]),
        io:format("~ts~n", [mochi_str(binary_multiply(5, 0))]),
        io:format("~ts~n", [mochi_str(binary_mod_multiply(2, 3, 5))]),
        io:format("~ts~n", [mochi_str(binary_mod_multiply(10, 5, 13))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
