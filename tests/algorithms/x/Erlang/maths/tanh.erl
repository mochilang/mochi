#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, expapprox/1, tangent_hyperbolic/1, main/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

expapprox(X) ->
    try
        Neg = false,
        Y = X,
        case (X < 0.0) of
        true -> Neg_2 = true,
            Y_2 = -X,
            Neg_3 = Neg_2,
            Y_3 = Y_2;
        _ -> Neg_3 = Neg,
            Y_3 = Y
    end,
        Term = 1.0,
        Sum = 1.0,
        N = 1,
        Fun = fun Fun_loop(N, Neg_3, Sum, Term, X, Y_3) ->
    case (N < 30) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, Y_3), float(N)),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(N_2, Neg_3, Sum_2, Term_2, X, Y_3);
        _ -> {N, Neg_3, Sum, Term, X, Y_3}
    end
end,
{N_2, Neg_3, Sum_2, Term_2, X, Y_3} = Fun(N, Neg_3, Sum, Term, X, Y_3),
        case Neg_3 of
        true -> throw({return, mochi_safe_div(1.0, Sum_2)});
        _ -> ok
    end,
        Sum_2
    catch {return, Ret} -> Ret end.

tangent_hyperbolic(Vector) ->
    try
        Result = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Result, Vector) ->
    case (I < erlang:length(Vector)) of
        true ->
            X_2 = (case erlang:is_map(Vector) of true -> maps:get(I, Vector, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Vector) + I + 1, Vector); _ -> mochi_nth(I + 1, Vector) end end),
            T = (mochi_safe_div(2.0, (1.0 + expapprox(mochi_safe_mul(-2.0, X_2)))) - 1.0),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [T]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Result_2, Vector);
        _ -> {I, Result, Vector}
    end
end,
{I_2, Result_2, Vector} = Fun_2(I, Result, Vector),
        Result_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        V1 = [1.0, 5.0, 6.0, -0.67],
        V2 = [8.0, 10.0, 2.0, -0.98, 13.0],
        io:format("~ts~n", [mochi_str(tangent_hyperbolic(V1))]),
        io:format("~ts~n", [mochi_str(tangent_hyperbolic(V2))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
