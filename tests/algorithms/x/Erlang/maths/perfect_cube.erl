#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, perfect_cube/1, perfect_cube_binary_search/1]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

perfect_cube(N) ->
    try
        M = N,
        case (M < 0) of
        true -> M_2 = -M,
            M_3 = M_2;
        _ -> M_3 = M
    end,
        I = 0,
        Fun = fun Fun_loop(I, M_3, N) ->
    case (((I * I) * I) < M_3) of
        true ->
            I_2 = (I + 1),
            Fun_loop(I_2, M_3, N);
        _ -> {I, M_3, N}
    end
end,
{I_2, M_3, N} = Fun(I, M_3, N),
        (((I_2 * I_2) * I_2) == M_3)
    catch {return, Ret} -> Ret end.

perfect_cube_binary_search(N_2) ->
    try
        M_4 = N_2,
        case (M_4 < 0) of
        true -> M_5 = -M_4,
            M_6 = M_5;
        _ -> M_6 = M_4
    end,
        Left = 0,
        Right = M_6,
        Fun_2 = fun Fun_2_loop(Left, M_6, N_2, Right) ->
    case (Left =< Right) of
        true ->
            Mid = (Left + ((Right - Left) div 2)),
            Cube = ((Mid * Mid) * Mid),
            case (Cube == M_6) of
        true -> throw({return, true});
        _ -> ok
    end,
            case (Cube < M_6) of
        true -> Left_2 = (Mid + 1),
            Left_3 = Left_2,
            Right_3 = Right;
        _ -> Right_2 = (Mid - 1),
            Left_3 = Left,
            Right_3 = Right_2
    end,
            Fun_2_loop(Left_3, M_6, N_2, Right_3);
        _ -> {Left, M_6, N_2, Right}
    end
end,
{Left_3, M_6, N_2, Right_3} = Fun_2(Left, M_6, N_2, Right),
        false
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(perfect_cube(27))]),
    io:format("~ts~n", [mochi_str(perfect_cube(4))]),
    io:format("~ts~n", [mochi_str(perfect_cube_binary_search(27))]),
    io:format("~ts~n", [mochi_str(perfect_cube_binary_search(64))]),
    io:format("~ts~n", [mochi_str(perfect_cube_binary_search(4))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
