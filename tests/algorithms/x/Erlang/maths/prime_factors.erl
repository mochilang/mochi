#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, prime_factors/1, list_eq/2, test_prime_factors/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

prime_factors(N) ->
    try
        case (N < 2) of
        true -> throw({return, []});
        _ -> ok
    end,
        Num = N,
        I = 2,
        Factors = [],
        Fun = fun Fun_loop(Factors, I, N, Num) ->
    case ((I * I) =< Num) of
        true ->
            case (mochi_mod(Num, I) == 0) of
        true -> Factors_2 = lists:append((case Factors of nil -> []; _ -> Factors end), [I]),
            Num_2 = (Num div I),
            Factors_3 = Factors_2,
            I_3 = I,
            Num_3 = Num_2;
        _ -> I_2 = (I + 1),
            Factors_3 = Factors,
            I_3 = I_2,
            Num_3 = Num
    end,
            Fun_loop(Factors_3, I_3, N, Num_3);
        _ -> {Factors, I, N, Num}
    end
end,
{Factors_3, I_3, N, Num_3} = Fun(Factors, I, N, Num),
        case (Num_3 > 1) of
        true -> Factors_4 = lists:append((case Factors_3 of nil -> []; _ -> Factors_3 end), [Num_3]),
            Factors_5 = Factors_4;
        _ -> Factors_5 = Factors_3
    end,
        Factors_5
    catch {return, Ret} -> Ret end.

list_eq(A, B) ->
    try
        case (erlang:length(A) /= erlang:length(B)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_4 = 0,
        Fun_2 = fun Fun_2_loop(A, B, I_4) ->
    case (I_4 < erlang:length(A)) of
        true ->
            case ((case erlang:is_map(A) of true -> maps:get(I_4, A, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(A) + I_4 + 1, A); _ -> mochi_nth(I_4 + 1, A) end end) /= (case erlang:is_map(B) of true -> maps:get(I_4, B, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(B) + I_4 + 1, B); _ -> mochi_nth(I_4 + 1, B) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_5 = (I_4 + 1),
            Fun_2_loop(A, B, I_5);
        _ -> {A, B, I_4}
    end
end,
{A, B, I_5} = Fun_2(A, B, I_4),
        true
    catch {return, Ret} -> Ret end.

test_prime_factors() ->
    try
        case mochi_not(list_eq(prime_factors(0), [])) of
        true -> erlang:error("prime_factors(0) failed");
        _ -> ok
    end,
        case mochi_not(list_eq(prime_factors(100), [2, 2, 5, 5])) of
        true -> erlang:error("prime_factors(100) failed");
        _ -> ok
    end,
        case mochi_not(list_eq(prime_factors(2560), [2, 2, 2, 2, 2, 2, 2, 2, 2, 5])) of
        true -> erlang:error("prime_factors(2560) failed");
        _ -> ok
    end,
        case mochi_not(list_eq(prime_factors(97), [97])) of
        true -> erlang:error("prime_factors(97) failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_prime_factors(),
        io:format("~ts~n", [mochi_str(prime_factors(100))]),
        io:format("~ts~n", [mochi_str(prime_factors(2560))]),
        io:format("~ts~n", [mochi_str(prime_factors(97))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
