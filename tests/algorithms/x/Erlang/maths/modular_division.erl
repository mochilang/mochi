#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, mod/2, greatest_common_divisor/2, extended_gcd/2, extended_euclid/2, invert_modulo/2, modular_division/3, modular_division2/3, tests/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

mod(A, N) ->
    try
        R = mochi_mod(A, N),
        case (R < 0) of
        true -> throw({return, (R + N)});
        _ -> ok
    end,
        R
    catch {return, Ret} -> Ret end.

greatest_common_divisor(A_2, B) ->
    try
        X = (case (A_2 < 0) of
    true -> -A_2;
    _ -> A_2
end),
        Y = (case (B < 0) of
    true -> -B;
    _ -> B
end),
        Fun = fun Fun_loop(A_2, B, X, Y) ->
    case (Y /= 0) of
        true ->
            T = mochi_mod(X, Y),
            X_2 = Y,
            Y_2 = T,
            Fun_loop(A_2, B, X_2, Y_2);
        _ -> {A_2, B, X, Y}
    end
end,
{A_2, B, X_2, Y_2} = Fun(A_2, B, X, Y),
        X_2
    catch {return, Ret} -> Ret end.

extended_gcd(A_3, B_2) ->
    try
        case (B_2 == 0) of
        true -> throw({return, [A_3, 1, 0]});
        _ -> ok
    end,
        Res = extended_gcd(B_2, mochi_mod(A_3, B_2)),
        D = (case erlang:is_map(Res) of true -> maps:get(0, Res, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res) + 0 + 1, Res); _ -> mochi_nth(0 + 1, Res) end end),
        P = (case erlang:is_map(Res) of true -> maps:get(1, Res, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Res) + 1 + 1, Res); _ -> mochi_nth(1 + 1, Res) end end),
        Q = (case erlang:is_map(Res) of true -> maps:get(2, Res, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Res) + 2 + 1, Res); _ -> mochi_nth(2 + 1, Res) end end),
        X_3 = Q,
        Y_3 = (P - (Q * (A_3 div B_2))),
        [D, X_3, Y_3]
    catch {return, Ret} -> Ret end.

extended_euclid(A_4, B_3) ->
    try
        case (B_3 == 0) of
        true -> throw({return, [1, 0]});
        _ -> ok
    end,
        Res_2 = extended_euclid(B_3, mochi_mod(A_4, B_3)),
        X_4 = (case erlang:is_map(Res_2) of true -> maps:get(1, Res_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Res_2) + 1 + 1, Res_2); _ -> mochi_nth(1 + 1, Res_2) end end),
        Y_4 = ((case erlang:is_map(Res_2) of true -> maps:get(0, Res_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res_2) + 0 + 1, Res_2); _ -> mochi_nth(0 + 1, Res_2) end end) - ((A_4 div B_3) * (case erlang:is_map(Res_2) of true -> maps:get(1, Res_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Res_2) + 1 + 1, Res_2); _ -> mochi_nth(1 + 1, Res_2) end end))),
        [X_4, Y_4]
    catch {return, Ret} -> Ret end.

invert_modulo(A_5, N_2) ->
    try
        Res_3 = extended_euclid(A_5, N_2),
        Inv = (case erlang:is_map(Res_3) of true -> maps:get(0, Res_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res_3) + 0 + 1, Res_3); _ -> mochi_nth(0 + 1, Res_3) end end),
        mod(Inv, N_2)
    catch {return, Ret} -> Ret end.

modular_division(A_6, B_4, N_3) ->
    try
        case (N_3 =< 1) of
        true -> erlang:error("n must be > 1");
        _ -> ok
    end,
        case (A_6 =< 0) of
        true -> erlang:error("a must be > 0");
        _ -> ok
    end,
        case (greatest_common_divisor(A_6, N_3) /= 1) of
        true -> erlang:error("gcd(a,n) != 1");
        _ -> ok
    end,
        Eg = extended_gcd(N_3, A_6),
        S = (case erlang:is_map(Eg) of true -> maps:get(2, Eg, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Eg) + 2 + 1, Eg); _ -> mochi_nth(2 + 1, Eg) end end),
        mod((B_4 * S), N_3)
    catch {return, Ret} -> Ret end.

modular_division2(A_7, B_5, N_4) ->
    try
        S_2 = invert_modulo(A_7, N_4),
        mod((B_5 * S_2), N_4)
    catch {return, Ret} -> Ret end.

tests() ->
    try
        case (modular_division(4, 8, 5) /= 2) of
        true -> erlang:error("md1");
        _ -> ok
    end,
        case (modular_division(3, 8, 5) /= 1) of
        true -> erlang:error("md2");
        _ -> ok
    end,
        case (modular_division(4, 11, 5) /= 4) of
        true -> erlang:error("md3");
        _ -> ok
    end,
        case (modular_division2(4, 8, 5) /= 2) of
        true -> erlang:error("md21");
        _ -> ok
    end,
        case (modular_division2(3, 8, 5) /= 1) of
        true -> erlang:error("md22");
        _ -> ok
    end,
        case (modular_division2(4, 11, 5) /= 4) of
        true -> erlang:error("md23");
        _ -> ok
    end,
        case (invert_modulo(2, 5) /= 3) of
        true -> erlang:error("inv");
        _ -> ok
    end,
        Eg_2 = extended_gcd(10, 6),
        case ((((case erlang:is_map(Eg_2) of true -> maps:get(0, Eg_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Eg_2) + 0 + 1, Eg_2); _ -> mochi_nth(0 + 1, Eg_2) end end) /= 2) orelse ((case erlang:is_map(Eg_2) of true -> maps:get(1, Eg_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Eg_2) + 1 + 1, Eg_2); _ -> mochi_nth(1 + 1, Eg_2) end end) /= -1)) orelse ((case erlang:is_map(Eg_2) of true -> maps:get(2, Eg_2, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Eg_2) + 2 + 1, Eg_2); _ -> mochi_nth(2 + 1, Eg_2) end end) /= 2)) of
        true -> erlang:error("eg");
        _ -> ok
    end,
        Eu = extended_euclid(10, 6),
        case (((case erlang:is_map(Eu) of true -> maps:get(0, Eu, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Eu) + 0 + 1, Eu); _ -> mochi_nth(0 + 1, Eu) end end) /= -1) orelse ((case erlang:is_map(Eu) of true -> maps:get(1, Eu, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Eu) + 1 + 1, Eu); _ -> mochi_nth(1 + 1, Eu) end end) /= 2)) of
        true -> erlang:error("eu");
        _ -> ok
    end,
        case (greatest_common_divisor(121, 11) /= 11) of
        true -> erlang:error("gcd");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        tests(),
        io:format("~ts~n", [mochi_str(modular_division(4, 8, 5))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
