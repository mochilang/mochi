#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, contains_int/2, contains_string/2, count_int/2, count_string/2, sort_int/1, sort_string/1, mode_int/1, mode_string/1]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

contains_int(Xs, X) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, X, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) == X) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, X, Xs);
        _ -> {I, X, Xs}
    end
end,
{I_2, X, Xs} = Fun(I, X, Xs),
        false
    catch {return, Ret} -> Ret end.

contains_string(Xs_2, X_2) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, X_2, Xs_2) ->
    case (I_3 < erlang:length(Xs_2)) of
        true ->
            case ((case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_3 + 1, Xs_2); _ -> mochi_nth(I_3 + 1, Xs_2) end end) == X_2) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, X_2, Xs_2);
        _ -> {I_3, X_2, Xs_2}
    end
end,
{I_4, X_2, Xs_2} = Fun_2(I_3, X_2, Xs_2),
        false
    catch {return, Ret} -> Ret end.

count_int(Xs_3, X_3) ->
    try
        Cnt = 0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Cnt, I_5, X_3, Xs_3) ->
    case (I_5 < erlang:length(Xs_3)) of
        true ->
            case ((case erlang:is_map(Xs_3) of true -> maps:get(I_5, Xs_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Xs_3) + I_5 + 1, Xs_3); _ -> mochi_nth(I_5 + 1, Xs_3) end end) == X_3) of
        true -> Cnt_2 = (Cnt + 1),
            Cnt_3 = Cnt_2;
        _ -> Cnt_3 = Cnt
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Cnt_3, I_6, X_3, Xs_3);
        _ -> {Cnt, I_5, X_3, Xs_3}
    end
end,
{Cnt_3, I_6, X_3, Xs_3} = Fun_3(Cnt, I_5, X_3, Xs_3),
        Cnt_3
    catch {return, Ret} -> Ret end.

count_string(Xs_4, X_4) ->
    try
        Cnt_4 = 0,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Cnt_4, I_7, X_4, Xs_4) ->
    case (I_7 < erlang:length(Xs_4)) of
        true ->
            case ((case erlang:is_map(Xs_4) of true -> maps:get(I_7, Xs_4, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Xs_4) + I_7 + 1, Xs_4); _ -> mochi_nth(I_7 + 1, Xs_4) end end) == X_4) of
        true -> Cnt_5 = (Cnt_4 + 1),
            Cnt_6 = Cnt_5;
        _ -> Cnt_6 = Cnt_4
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(Cnt_6, I_8, X_4, Xs_4);
        _ -> {Cnt_4, I_7, X_4, Xs_4}
    end
end,
{Cnt_6, I_8, X_4, Xs_4} = Fun_4(Cnt_4, I_7, X_4, Xs_4),
        Cnt_6
    catch {return, Ret} -> Ret end.

sort_int(Xs_5) ->
    try
        Arr = Xs_5,
        I_9 = 0,
        Fun_6 = fun Fun_6_loop(Arr, I_9, Xs_5) ->
    case (I_9 < erlang:length(Arr)) of
        true ->
            J = (I_9 + 1),
            Fun_5 = fun Fun_5_loop(Arr, I_9, J, Xs_5) ->
    case (J < erlang:length(Arr)) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end) < (case erlang:is_map(Arr) of true -> maps:get(I_9, Arr, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Arr) + I_9 + 1, Arr); _ -> mochi_nth(I_9 + 1, Arr) end end)) of
        true -> Tmp = (case erlang:is_map(Arr) of true -> maps:get(I_9, Arr, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Arr) + I_9 + 1, Arr); _ -> mochi_nth(I_9 + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, I_9) ++ [(case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end)] ++ lists:nthtail(I_9 + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, J) ++ [Tmp] ++ lists:nthtail(J + 1, Arr_2),
            Arr_4 = Arr_3,
            Tmp_2 = Tmp;
        _ -> Arr_4 = Arr,
            Tmp_2 = nil
    end,
            J_2 = (J + 1),
            Fun_5_loop(Arr_4, I_9, J_2, Xs_5);
        _ -> {Arr, I_9, J, Xs_5}
    end
end,
{Arr_4, I_9, J_2, Xs_5} = Fun_5(Arr, I_9, J, Xs_5),
            I_10 = (I_9 + 1),
            Fun_6_loop(Arr_4, I_10, Xs_5);
        _ -> {Arr, I_9, Xs_5}
    end
end,
{Arr_4, I_10, Xs_5} = Fun_6(Arr, I_9, Xs_5),
        Arr_4
    catch {return, Ret} -> Ret end.

sort_string(Xs_6) ->
    try
        Arr_5 = Xs_6,
        I_11 = 0,
        Fun_8 = fun Fun_8_loop(Arr_5, I_11, Xs_6) ->
    case (I_11 < erlang:length(Arr_5)) of
        true ->
            J_3 = (I_11 + 1),
            Fun_7 = fun Fun_7_loop(Arr_5, I_11, J_3, Xs_6) ->
    case (J_3 < erlang:length(Arr_5)) of
        true ->
            case ((case erlang:is_map(Arr_5) of true -> maps:get(J_3, Arr_5, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Arr_5) + J_3 + 1, Arr_5); _ -> mochi_nth(J_3 + 1, Arr_5) end end) < (case erlang:is_map(Arr_5) of true -> maps:get(I_11, Arr_5, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Arr_5) + I_11 + 1, Arr_5); _ -> mochi_nth(I_11 + 1, Arr_5) end end)) of
        true -> Tmp_3 = (case erlang:is_map(Arr_5) of true -> maps:get(I_11, Arr_5, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Arr_5) + I_11 + 1, Arr_5); _ -> mochi_nth(I_11 + 1, Arr_5) end end),
            Arr_6 = lists:sublist(Arr_5, I_11) ++ [(case erlang:is_map(Arr_5) of true -> maps:get(J_3, Arr_5, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Arr_5) + J_3 + 1, Arr_5); _ -> mochi_nth(J_3 + 1, Arr_5) end end)] ++ lists:nthtail(I_11 + 1, Arr_5),
            Arr_7 = lists:sublist(Arr_6, J_3) ++ [Tmp_3] ++ lists:nthtail(J_3 + 1, Arr_6),
            Arr_8 = Arr_7,
            Tmp_4 = Tmp_3;
        _ -> Arr_8 = Arr_5,
            Tmp_4 = nil
    end,
            J_4 = (J_3 + 1),
            Fun_7_loop(Arr_8, I_11, J_4, Xs_6);
        _ -> {Arr_5, I_11, J_3, Xs_6}
    end
end,
{Arr_8, I_11, J_4, Xs_6} = Fun_7(Arr_5, I_11, J_3, Xs_6),
            I_12 = (I_11 + 1),
            Fun_8_loop(Arr_8, I_12, Xs_6);
        _ -> {Arr_5, I_11, Xs_6}
    end
end,
{Arr_8, I_12, Xs_6} = Fun_8(Arr_5, I_11, Xs_6),
        Arr_8
    catch {return, Ret} -> Ret end.

mode_int(Lst) ->
    try
        case (erlang:length(Lst) == 0) of
        true -> throw({return, []});
        _ -> ok
    end,
        Counts = [],
        I_13 = 0,
        Fun_9 = fun Fun_9_loop(Counts, I_13, Lst) ->
    case (I_13 < erlang:length(Lst)) of
        true ->
            Counts_2 = lists:append((case Counts of nil -> []; _ -> Counts end), [count_int(Lst, (case erlang:is_map(Lst) of true -> maps:get(I_13, Lst, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Lst) + I_13 + 1, Lst); _ -> mochi_nth(I_13 + 1, Lst) end end))]),
            I_14 = (I_13 + 1),
            Fun_9_loop(Counts_2, I_14, Lst);
        _ -> {Counts, I_13, Lst}
    end
end,
{Counts_2, I_14, Lst} = Fun_9(Counts, I_13, Lst),
        Max_count = 0,
        I_15 = 0,
        Fun_10 = fun Fun_10_loop(Counts_2, I_15, Lst, Max_count) ->
    case (I_15 < erlang:length(Counts_2)) of
        true ->
            case ((case erlang:is_map(Counts_2) of true -> maps:get(I_15, Counts_2, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Counts_2) + I_15 + 1, Counts_2); _ -> mochi_nth(I_15 + 1, Counts_2) end end) > Max_count) of
        true -> Max_count_2 = (case erlang:is_map(Counts_2) of true -> maps:get(I_15, Counts_2, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Counts_2) + I_15 + 1, Counts_2); _ -> mochi_nth(I_15 + 1, Counts_2) end end),
            Max_count_3 = Max_count_2;
        _ -> Max_count_3 = Max_count
    end,
            I_16 = (I_15 + 1),
            Fun_10_loop(Counts_2, I_16, Lst, Max_count_3);
        _ -> {Counts_2, I_15, Lst, Max_count}
    end
end,
{Counts_2, I_16, Lst, Max_count_3} = Fun_10(Counts_2, I_15, Lst, Max_count),
        Modes = [],
        I_17 = 0,
        Fun_11 = fun Fun_11_loop(Counts_2, I_17, Lst, Max_count_3, Modes) ->
    case (I_17 < erlang:length(Lst)) of
        true ->
            case ((case erlang:is_map(Counts_2) of true -> maps:get(I_17, Counts_2, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(Counts_2) + I_17 + 1, Counts_2); _ -> mochi_nth(I_17 + 1, Counts_2) end end) == Max_count_3) of
        true -> V = (case erlang:is_map(Lst) of true -> maps:get(I_17, Lst, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(Lst) + I_17 + 1, Lst); _ -> mochi_nth(I_17 + 1, Lst) end end),
            case mochi_not(contains_int(Modes, V)) of
        true -> Modes_2 = lists:append((case Modes of nil -> []; _ -> Modes end), [V]),
            Modes_3 = Modes_2;
        _ -> Modes_3 = Modes
    end,
            Modes_4 = Modes_3,
            V_2 = V;
        _ -> Modes_4 = Modes,
            V_2 = nil
    end,
            I_18 = (I_17 + 1),
            Fun_11_loop(Counts_2, I_18, Lst, Max_count_3, Modes_4);
        _ -> {Counts_2, I_17, Lst, Max_count_3, Modes}
    end
end,
{Counts_2, I_18, Lst, Max_count_3, Modes_4} = Fun_11(Counts_2, I_17, Lst, Max_count_3, Modes),
        sort_int(Modes_4)
    catch {return, Ret} -> Ret end.

mode_string(Lst_2) ->
    try
        case (erlang:length(Lst_2) == 0) of
        true -> throw({return, []});
        _ -> ok
    end,
        Counts_3 = [],
        I_19 = 0,
        Fun_12 = fun Fun_12_loop(Counts_3, I_19, Lst_2) ->
    case (I_19 < erlang:length(Lst_2)) of
        true ->
            Counts_4 = lists:append((case Counts_3 of nil -> []; _ -> Counts_3 end), [count_string(Lst_2, (case erlang:is_map(Lst_2) of true -> maps:get(I_19, Lst_2, nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(Lst_2) + I_19 + 1, Lst_2); _ -> mochi_nth(I_19 + 1, Lst_2) end end))]),
            I_20 = (I_19 + 1),
            Fun_12_loop(Counts_4, I_20, Lst_2);
        _ -> {Counts_3, I_19, Lst_2}
    end
end,
{Counts_4, I_20, Lst_2} = Fun_12(Counts_3, I_19, Lst_2),
        Max_count_4 = 0,
        I_21 = 0,
        Fun_13 = fun Fun_13_loop(Counts_4, I_21, Lst_2, Max_count_4) ->
    case (I_21 < erlang:length(Counts_4)) of
        true ->
            case ((case erlang:is_map(Counts_4) of true -> maps:get(I_21, Counts_4, nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(Counts_4) + I_21 + 1, Counts_4); _ -> mochi_nth(I_21 + 1, Counts_4) end end) > Max_count_4) of
        true -> Max_count_5 = (case erlang:is_map(Counts_4) of true -> maps:get(I_21, Counts_4, nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(Counts_4) + I_21 + 1, Counts_4); _ -> mochi_nth(I_21 + 1, Counts_4) end end),
            Max_count_6 = Max_count_5;
        _ -> Max_count_6 = Max_count_4
    end,
            I_22 = (I_21 + 1),
            Fun_13_loop(Counts_4, I_22, Lst_2, Max_count_6);
        _ -> {Counts_4, I_21, Lst_2, Max_count_4}
    end
end,
{Counts_4, I_22, Lst_2, Max_count_6} = Fun_13(Counts_4, I_21, Lst_2, Max_count_4),
        Modes_5 = [],
        I_23 = 0,
        Fun_14 = fun Fun_14_loop(Counts_4, I_23, Lst_2, Max_count_6, Modes_5) ->
    case (I_23 < erlang:length(Lst_2)) of
        true ->
            case ((case erlang:is_map(Counts_4) of true -> maps:get(I_23, Counts_4, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(Counts_4) + I_23 + 1, Counts_4); _ -> mochi_nth(I_23 + 1, Counts_4) end end) == Max_count_6) of
        true -> V_3 = (case erlang:is_map(Lst_2) of true -> maps:get(I_23, Lst_2, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(Lst_2) + I_23 + 1, Lst_2); _ -> mochi_nth(I_23 + 1, Lst_2) end end),
            case mochi_not(contains_string(Modes_5, V_3)) of
        true -> Modes_6 = lists:append((case Modes_5 of nil -> []; _ -> Modes_5 end), [V_3]),
            Modes_7 = Modes_6;
        _ -> Modes_7 = Modes_5
    end,
            Modes_8 = Modes_7,
            V_4 = V_3;
        _ -> Modes_8 = Modes_5,
            V_4 = nil
    end,
            I_24 = (I_23 + 1),
            Fun_14_loop(Counts_4, I_24, Lst_2, Max_count_6, Modes_8);
        _ -> {Counts_4, I_23, Lst_2, Max_count_6, Modes_5}
    end
end,
{Counts_4, I_24, Lst_2, Max_count_6, Modes_8} = Fun_14(Counts_4, I_23, Lst_2, Max_count_6, Modes_5),
        sort_string(Modes_8)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(mode_int([2, 3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 2, 2, 2]))]),
    io:format("~ts~n", [mochi_repr(mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 2, 2, 2]))]),
    io:format("~ts~n", [mochi_repr(mode_int([3, 4, 5, 3, 4, 2, 5, 2, 2, 4, 4, 4, 2, 2, 4, 2]))]),
    io:format("~ts~n", [mochi_repr(mode_string(["x", "y", "y", "z"]))]),
    io:format("~ts~n", [mochi_repr(mode_string(["x", "x", "y", "y", "z"]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
