#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, remove_at/2, kth_permutation/2, list_equal/2, list_to_string/1, test_kth_permutation/0, main/0]).

% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

remove_at(Xs, Idx) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, Idx, Res, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case (I /= Idx) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Idx, Res_3, Xs);
        _ -> {I, Idx, Res, Xs}
    end
end,
{I_2, Idx, Res_3, Xs} = Fun(I, Idx, Res, Xs),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

kth_permutation(K, N) ->
    try
        case (N =< 0) of
        true -> erlang:error({panic, "n must be positive"});
        _ -> ok
    end,
        Factorials = [1],
        I_3 = 2,
        Fun_2 = fun Fun_2_loop(Factorials, I_3, K, N) ->
    case (I_3 < N) of
        true ->
            Factorials_2 = lists:append((case Factorials of nil -> []; _ -> Factorials end), [((case erlang:is_map(Factorials) of true -> maps:get((erlang:length(Factorials) - 1), Factorials, nil); _ -> case (erlang:length(Factorials) - 1) < 0 of true -> mochi_nth(erlang:length(Factorials) + (erlang:length(Factorials) - 1) + 1, Factorials); _ -> mochi_nth((erlang:length(Factorials) - 1) + 1, Factorials) end end) * I_3)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Factorials_2, I_4, K, N);
        _ -> {Factorials, I_3, K, N}
    end
end,
{Factorials_2, I_4, K, N} = Fun_2(Factorials, I_3, K, N),
        Total = ((case erlang:is_map(Factorials_2) of true -> maps:get((erlang:length(Factorials_2) - 1), Factorials_2, nil); _ -> case (erlang:length(Factorials_2) - 1) < 0 of true -> mochi_nth(erlang:length(Factorials_2) + (erlang:length(Factorials_2) - 1) + 1, Factorials_2); _ -> mochi_nth((erlang:length(Factorials_2) - 1) + 1, Factorials_2) end end) * N),
        case ((K < 0) orelse (K >= Total)) of
        true -> erlang:error({panic, "k out of bounds"});
        _ -> ok
    end,
        Elements = [],
        E = 0,
        Fun_3 = fun Fun_3_loop(E, Elements, Factorials_2, I_4, K, N, Total) ->
    case (E < N) of
        true ->
            Elements_2 = lists:append((case Elements of nil -> []; _ -> Elements end), [E]),
            E_2 = (E + 1),
            Fun_3_loop(E_2, Elements_2, Factorials_2, I_4, K, N, Total);
        _ -> {E, Elements, Factorials_2, I_4, K, N, Total}
    end
end,
{E_2, Elements_2, Factorials_2, I_4, K, N, Total} = Fun_3(E, Elements, Factorials_2, I_4, K, N, Total),
        Permutation = [],
        Idx_2 = (erlang:length(Factorials_2) - 1),
        Fun_4 = fun Fun_4_loop(E_2, Elements_2, Factorials_2, I_4, Idx_2, K, N, Permutation, Total) ->
    case (Idx_2 >= 0) of
        true ->
            Factorial = (case erlang:is_map(Factorials_2) of true -> maps:get(Idx_2, Factorials_2, nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(Factorials_2) + Idx_2 + 1, Factorials_2); _ -> mochi_nth(Idx_2 + 1, Factorials_2) end end),
            Number = (K div Factorial),
            K_2 = mochi_mod(K, Factorial),
            Permutation_2 = lists:append((case Permutation of nil -> []; _ -> Permutation end), [(case erlang:is_map(Elements_2) of true -> maps:get(Number, Elements_2, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Elements_2) + Number + 1, Elements_2); _ -> mochi_nth(Number + 1, Elements_2) end end)]),
            Elements_3 = remove_at(Elements_2, Number),
            Idx_3 = (Idx_2 - 1),
            Fun_4_loop(E_2, Elements_3, Factorials_2, I_4, Idx_3, K_2, N, Permutation_2, Total);
        _ -> {E_2, Elements_2, Factorials_2, I_4, Idx_2, K, N, Permutation, Total}
    end
end,
{E_2, Elements_3, Factorials_2, I_4, Idx_3, K_2, N, Permutation_2, Total} = Fun_4(E_2, Elements_2, Factorials_2, I_4, Idx_2, K, N, Permutation, Total),
        Permutation_3 = lists:append((case Permutation_2 of nil -> []; _ -> Permutation_2 end), [(case erlang:is_map(Elements_3) of true -> maps:get(0, Elements_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Elements_3) + 0 + 1, Elements_3); _ -> mochi_nth(0 + 1, Elements_3) end end)]),
        Permutation_3
    catch {return, RetCatch} -> RetCatch end.

list_equal(A, B) ->
    try
        case (erlang:length(A) /= erlang:length(B)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(A, B, I_5) ->
    case (I_5 < erlang:length(A)) of
        true ->
            case ((case erlang:is_map(A) of true -> maps:get(I_5, A, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A) + I_5 + 1, A); _ -> mochi_nth(I_5 + 1, A) end end) /= (case erlang:is_map(B) of true -> maps:get(I_5, B, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(B) + I_5 + 1, B); _ -> mochi_nth(I_5 + 1, B) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_5_loop(A, B, I_6);
        _ -> {A, B, I_5}
    end
end,
{A, B, I_6} = Fun_5(A, B, I_5),
        true
    catch {return, RetCatch} -> RetCatch end.

list_to_string(Xs_2) ->
    try
        case (erlang:length(Xs_2) == 0) of
        true -> throw({return, "[]"});
        _ -> ok
    end,
        S = ("[" ++ mochi_str((case erlang:is_map(Xs_2) of true -> maps:get(0, Xs_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Xs_2) + 0 + 1, Xs_2); _ -> mochi_nth(0 + 1, Xs_2) end end))),
        I_7 = 1,
        Fun_6 = fun Fun_6_loop(I_7, S, Xs_2) ->
    case (I_7 < erlang:length(Xs_2)) of
        true ->
            S_2 = ((S ++ ", ") ++ mochi_str((case erlang:is_map(Xs_2) of true -> maps:get(I_7, Xs_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_7 + 1, Xs_2); _ -> mochi_nth(I_7 + 1, Xs_2) end end))),
            I_8 = (I_7 + 1),
            Fun_6_loop(I_8, S_2, Xs_2);
        _ -> {I_7, S, Xs_2}
    end
end,
{I_8, S_2, Xs_2} = Fun_6(I_7, S, Xs_2),
        S_3 = (S_2 ++ "]"),
        S_3
    catch {return, RetCatch} -> RetCatch end.

test_kth_permutation() ->
    try
        Expected1 = [0, 1, 2, 3, 4],
        Res1 = kth_permutation(0, 5),
        case mochi_not(list_equal(Res1, Expected1)) of
        true -> erlang:error({panic, "test case 1 failed"});
        _ -> ok
    end,
        Expected2 = [1, 3, 0, 2],
        Res2 = kth_permutation(10, 4),
        case mochi_not(list_equal(Res2, Expected2)) of
        true -> erlang:error({panic, "test case 2 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_kth_permutation(),
        Res_4 = kth_permutation(10, 4),
        io:format("~ts~n", [mochi_repr(list_to_string(Res_4))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
