#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, c_add/2, c_sub/2, c_mul/2, c_mul_scalar/2, c_div_scalar/2, sin_taylor/1, cos_taylor/1, exp_i/1, make_complex_list/2, fft/2, floor/1, pow10/1, round_to/2, list_to_string/1, multiply_poly/2]).

-compile({no_auto_import,[floor/1]}).
% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.

c_add(A, B) ->
    try
        #{"re" => (maps:get("re", A, nil) + maps:get("re", B, nil)), "im" => (maps:get("im", A, nil) + maps:get("im", B, nil))}
    catch {return, RetCatch} -> RetCatch end.

c_sub(A_2, B_2) ->
    try
        #{"re" => (maps:get("re", A_2, nil) - maps:get("re", B_2, nil)), "im" => (maps:get("im", A_2, nil) - maps:get("im", B_2, nil))}
    catch {return, RetCatch} -> RetCatch end.

c_mul(A_3, B_3) ->
    try
        #{"re" => (mochi_safe_mul(maps:get("re", A_3, nil), maps:get("re", B_3, nil)) - mochi_safe_mul(maps:get("im", A_3, nil), maps:get("im", B_3, nil))), "im" => (mochi_safe_mul(maps:get("re", A_3, nil), maps:get("im", B_3, nil)) + mochi_safe_mul(maps:get("im", A_3, nil), maps:get("re", B_3, nil)))}
    catch {return, RetCatch} -> RetCatch end.

c_mul_scalar(A_4, S) ->
    try
        #{"re" => mochi_safe_mul(maps:get("re", A_4, nil), S), "im" => mochi_safe_mul(maps:get("im", A_4, nil), S)}
    catch {return, RetCatch} -> RetCatch end.

c_div_scalar(A_5, S_2) ->
    try
        #{"re" => mochi_safe_div(maps:get("re", A_5, nil), S_2), "im" => mochi_safe_div(maps:get("im", A_5, nil), S_2)}
    catch {return, RetCatch} -> RetCatch end.

sin_taylor(X) ->
    try
        Term = X,
        Sum = X,
        I = 1,
        Fun = fun Fun_loop(I, Sum, Term, X) ->
    case (I < 10) of
        true ->
            K1 = mochi_safe_mul(2.0, float(I)),
            K2 = (K1 + 1.0),
            Term_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term, X), X), mochi_safe_mul(K1, K2)),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, Term_2, X);
        _ -> {I, Sum, Term, X}
    end
end,
{I_2, Sum_2, Term_2, X} = Fun(I, Sum, Term, X),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

cos_taylor(X_2) ->
    try
        Term_3 = 1.0,
        Sum_3 = 1.0,
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(I_3, Sum_3, Term_3, X_2) ->
    case (I_3 < 10) of
        true ->
            K1_2 = (mochi_safe_mul(2.0, float(I_3)) - 1.0),
            K2_2 = mochi_safe_mul(2.0, float(I_3)),
            Term_4 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term_3, X_2), X_2), mochi_safe_mul(K1_2, K2_2)),
            Sum_4 = (Sum_3 + Term_4),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Sum_4, Term_4, X_2);
        _ -> {I_3, Sum_3, Term_3, X_2}
    end
end,
{I_4, Sum_4, Term_4, X_2} = Fun_2(I_3, Sum_3, Term_3, X_2),
        Sum_4
    catch {return, RetCatch} -> RetCatch end.

exp_i(Theta) ->
    try
        #{"re" => cos_taylor(Theta), "im" => sin_taylor(Theta)}
    catch {return, RetCatch} -> RetCatch end.

make_complex_list(N, Value) ->
    try
        Arr = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Arr, I_5, N, Value) ->
    case (I_5 < N) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [Value]),
            I_6 = (I_5 + 1),
            Fun_3_loop(Arr_2, I_6, N, Value);
        _ -> {Arr, I_5, N, Value}
    end
end,
{Arr_2, I_6, N, Value} = Fun_3(Arr, I_5, N, Value),
        Arr_2
    catch {return, RetCatch} -> RetCatch end.

fft(A_6, Invert) ->
    try
        N_2 = erlang:length(A_6),
        case (N_2 == 1) of
        true -> throw({return, [(case erlang:is_map(A_6) of true -> maps:get(0, A_6, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_6) + 0 + 1, A_6); _ -> mochi_nth(0 + 1, A_6) end end)]});
        _ -> ok
    end,
        A0 = [],
        A1 = [],
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(A_6, A0, A1, I_7, Invert, N_2) ->
    case (I_7 < mochi_idiv(N_2, 2)) of
        true ->
            A0_2 = lists:append((case A0 of nil -> []; _ -> A0 end), [(case erlang:is_map(A_6) of true -> maps:get((2 * I_7), A_6, nil); _ -> case (2 * I_7) < 0 of true -> mochi_nth(erlang:length(A_6) + (2 * I_7) + 1, A_6); _ -> mochi_nth((2 * I_7) + 1, A_6) end end)]),
            A1_2 = lists:append((case A1 of nil -> []; _ -> A1 end), [(case erlang:is_map(A_6) of true -> maps:get(((2 * I_7) + 1), A_6, nil); _ -> case ((2 * I_7) + 1) < 0 of true -> mochi_nth(erlang:length(A_6) + ((2 * I_7) + 1) + 1, A_6); _ -> mochi_nth(((2 * I_7) + 1) + 1, A_6) end end)]),
            I_8 = (I_7 + 1),
            Fun_4_loop(A_6, A0_2, A1_2, I_8, Invert, N_2);
        _ -> {A_6, A0, A1, I_7, Invert, N_2}
    end
end,
{A_6, A0_2, A1_2, I_8, Invert, N_2} = Fun_4(A_6, A0, A1, I_7, Invert, N_2),
        Y0 = fft(A0_2, Invert),
        Y1 = fft(A1_2, Invert),
        Angle = mochi_safe_mul(mochi_safe_div(mochi_safe_mul(2.0, 3.141592653589793), float(N_2)), (case Invert of
    true -> -1.0;
    _ -> 1.0
end)),
        W = #{"re" => 1.0, "im" => 0.0},
        Wn = exp_i(Angle),
        Y = make_complex_list(N_2, #{"re" => 0.0, "im" => 0.0}),
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(A_6, A0_2, A1_2, Angle, I_9, Invert, N_2, W, Wn, Y, Y0, Y1) ->
    case (I_9 < mochi_idiv(N_2, 2)) of
        true ->
            T = c_mul(W, (case erlang:is_map(Y1) of true -> maps:get(I_9, Y1, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Y1) + I_9 + 1, Y1); _ -> mochi_nth(I_9 + 1, Y1) end end)),
            U = (case erlang:is_map(Y0) of true -> maps:get(I_9, Y0, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Y0) + I_9 + 1, Y0); _ -> mochi_nth(I_9 + 1, Y0) end end),
            Even = c_add(U, T),
            Odd = c_sub(U, T),
            Odd_3 = (case Invert of
        true -> Even_2 = c_div_scalar(Even, 2.0),
            Odd_2 = c_div_scalar(Odd, 2.0),
            Even_3 = Even_2,
            Odd_2;
        _ -> Even_3 = Even,
            Odd
    end),
            Y_2 = lists:sublist(Y, I_9) ++ [Even_3] ++ lists:nthtail(I_9 + 1, Y),
            Y_3 = lists:sublist(Y_2, (I_9 + mochi_idiv(N_2, 2))) ++ [Odd_3] ++ lists:nthtail((I_9 + mochi_idiv(N_2, 2)) + 1, Y_2),
            W_2 = c_mul(W, Wn),
            I_10 = (I_9 + 1),
            Fun_5_loop(A_6, A0_2, A1_2, Angle, I_10, Invert, N_2, W_2, Wn, Y_3, Y0, Y1);
        _ -> {A_6, A0_2, A1_2, Angle, I_9, Invert, N_2, W, Wn, Y, Y0, Y1}
    end
end,
{A_6, A0_2, A1_2, Angle, I_10, Invert, N_2, W_2, Wn, Y_3, Y0, Y1} = Fun_5(A_6, A0_2, A1_2, Angle, I_9, Invert, N_2, W, Wn, Y, Y0, Y1),
        Y_3
    catch {return, RetCatch} -> RetCatch end.

floor(X_3) ->
    try
        I_11 = mochi_to_int(X_3),
        I_13 = (case (float(I_11) > X_3) of
        true -> I_12 = (I_11 - 1),
            I_12;
        _ -> I_11
    end),
        float(I_13)
    catch {return, RetCatch} -> RetCatch end.

pow10(N_3) ->
    try
        P = 1.0,
        I_14 = 0,
        Fun_6 = fun Fun_6_loop(I_14, N_3, P) ->
    case (I_14 < N_3) of
        true ->
            P_2 = mochi_safe_mul(P, 10.0),
            I_15 = (I_14 + 1),
            Fun_6_loop(I_15, N_3, P_2);
        _ -> {I_14, N_3, P}
    end
end,
{I_15, N_3, P_2} = Fun_6(I_14, N_3, P),
        P_2
    catch {return, RetCatch} -> RetCatch end.

round_to(X_4, Ndigits) ->
    try
        M = pow10(Ndigits),
        mochi_safe_div(math:floor((mochi_safe_mul(X_4, M) + 0.5)), M)
    catch {return, RetCatch} -> RetCatch end.

list_to_string(L) ->
    try
        S_3 = "[",
        I_16 = 0,
        Fun_7 = fun Fun_7_loop(I_16, L, S_3) ->
    case (I_16 < erlang:length(L)) of
        true ->
            S_4 = (S_3 ++ mochi_str((case erlang:is_map(L) of true -> maps:get(I_16, L, nil); _ -> case I_16 < 0 of true -> mochi_nth(erlang:length(L) + I_16 + 1, L); _ -> mochi_nth(I_16 + 1, L) end end))),
            S_6 = (case ((I_16 + 1) < erlang:length(L)) of
        true -> S_5 = (S_4 ++ ", "),
            S_5;
        _ -> S_4
    end),
            I_17 = (I_16 + 1),
            Fun_7_loop(I_17, L, S_6);
        _ -> {I_16, L, S_3}
    end
end,
{I_17, L, S_6} = Fun_7(I_16, L, S_3),
        S_7 = (S_6 ++ "]"),
        S_7
    catch {return, RetCatch} -> RetCatch end.

multiply_poly(A_7, B_4) ->
    try
        N_4 = 1,
        Fun_8 = fun Fun_8_loop(A_7, B_4, N_4) ->
    case (N_4 < ((erlang:length(A_7) + erlang:length(B_4)) - 1)) of
        true ->
            N_5 = (N_4 * 2),
            Fun_8_loop(A_7, B_4, N_5);
        _ -> {A_7, B_4, N_4}
    end
end,
{A_7, B_4, N_5} = Fun_8(A_7, B_4, N_4),
        Fa = make_complex_list(N_5, #{"re" => 0.0, "im" => 0.0}),
        Fb = make_complex_list(N_5, #{"re" => 0.0, "im" => 0.0}),
        I_18 = 0,
        Fun_9 = fun Fun_9_loop(A_7, B_4, Fa, Fb, I_18, N_5) ->
    case (I_18 < erlang:length(A_7)) of
        true ->
            Fa_2 = lists:sublist(Fa, I_18) ++ [#{"re" => (case erlang:is_map(A_7) of true -> maps:get(I_18, A_7, nil); _ -> case I_18 < 0 of true -> mochi_nth(erlang:length(A_7) + I_18 + 1, A_7); _ -> mochi_nth(I_18 + 1, A_7) end end), "im" => 0.0}] ++ lists:nthtail(I_18 + 1, Fa),
            I_19 = (I_18 + 1),
            Fun_9_loop(A_7, B_4, Fa_2, Fb, I_19, N_5);
        _ -> {A_7, B_4, Fa, Fb, I_18, N_5}
    end
end,
{A_7, B_4, Fa_2, Fb, I_19, N_5} = Fun_9(A_7, B_4, Fa, Fb, I_18, N_5),
        I_20 = 0,
        Fun_10 = fun Fun_10_loop(A_7, B_4, Fa_2, Fb, I_20, N_5) ->
    case (I_20 < erlang:length(B_4)) of
        true ->
            Fb_2 = lists:sublist(Fb, I_20) ++ [#{"re" => (case erlang:is_map(B_4) of true -> maps:get(I_20, B_4, nil); _ -> case I_20 < 0 of true -> mochi_nth(erlang:length(B_4) + I_20 + 1, B_4); _ -> mochi_nth(I_20 + 1, B_4) end end), "im" => 0.0}] ++ lists:nthtail(I_20 + 1, Fb),
            I_21 = (I_20 + 1),
            Fun_10_loop(A_7, B_4, Fa_2, Fb_2, I_21, N_5);
        _ -> {A_7, B_4, Fa_2, Fb, I_20, N_5}
    end
end,
{A_7, B_4, Fa_2, Fb_2, I_21, N_5} = Fun_10(A_7, B_4, Fa_2, Fb, I_20, N_5),
        Fa_3 = fft(Fa_2, false),
        Fb_3 = fft(Fb_2, false),
        I_22 = 0,
        Fun_11 = fun Fun_11_loop(A_7, B_4, Fa_3, Fb_3, I_22, N_5) ->
    case (I_22 < N_5) of
        true ->
            Fa_4 = lists:sublist(Fa_3, I_22) ++ [c_mul((case erlang:is_map(Fa_3) of true -> maps:get(I_22, Fa_3, nil); _ -> case I_22 < 0 of true -> mochi_nth(erlang:length(Fa_3) + I_22 + 1, Fa_3); _ -> mochi_nth(I_22 + 1, Fa_3) end end), (case erlang:is_map(Fb_3) of true -> maps:get(I_22, Fb_3, nil); _ -> case I_22 < 0 of true -> mochi_nth(erlang:length(Fb_3) + I_22 + 1, Fb_3); _ -> mochi_nth(I_22 + 1, Fb_3) end end))] ++ lists:nthtail(I_22 + 1, Fa_3),
            I_23 = (I_22 + 1),
            Fun_11_loop(A_7, B_4, Fa_4, Fb_3, I_23, N_5);
        _ -> {A_7, B_4, Fa_3, Fb_3, I_22, N_5}
    end
end,
{A_7, B_4, Fa_4, Fb_3, I_23, N_5} = Fun_11(A_7, B_4, Fa_3, Fb_3, I_22, N_5),
        Fa_5 = fft(Fa_4, true),
        Res = [],
        I_24 = 0,
        Fun_12 = fun Fun_12_loop(A_7, B_4, Fa_5, Fb_3, I_24, N_5, Res) ->
    case (I_24 < ((erlang:length(A_7) + erlang:length(B_4)) - 1)) of
        true ->
            Val = (case erlang:is_map(Fa_5) of true -> maps:get(I_24, Fa_5, nil); _ -> case I_24 < 0 of true -> mochi_nth(erlang:length(Fa_5) + I_24 + 1, Fa_5); _ -> mochi_nth(I_24 + 1, Fa_5) end end),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [round_to(maps:get("re", Val, nil), 8)]),
            I_25 = (I_24 + 1),
            Fun_12_loop(A_7, B_4, Fa_5, Fb_3, I_25, N_5, Res_2);
        _ -> {A_7, B_4, Fa_5, Fb_3, I_24, N_5, Res}
    end
end,
{A_7, B_4, Fa_5, Fb_3, I_25, N_5, Res_2} = Fun_12(A_7, B_4, Fa_5, Fb_3, I_24, N_5, Res),
        Fun_13 = fun Fun_13_loop(A_7, B_4, Fa_5, Fb_3, I_25, N_5, Res_2) ->
    case ((erlang:length(Res_2) > 0) andalso ((case erlang:is_map(Res_2) of true -> maps:get((erlang:length(Res_2) - 1), Res_2, nil); _ -> case (erlang:length(Res_2) - 1) < 0 of true -> mochi_nth(erlang:length(Res_2) + (erlang:length(Res_2) - 1) + 1, Res_2); _ -> mochi_nth((erlang:length(Res_2) - 1) + 1, Res_2) end end) == 0.0)) of
        true ->
            Res_3 = lists:sublist(Res_2, 0 + 1, ((erlang:length(Res_2) - 1) - 0)),
            Fun_13_loop(A_7, B_4, Fa_5, Fb_3, I_25, N_5, Res_3);
        _ -> {A_7, B_4, Fa_5, Fb_3, I_25, N_5, Res_2}
    end
end,
{A_7, B_4, Fa_5, Fb_3, I_25, N_5, Res_3} = Fun_13(A_7, B_4, Fa_5, Fb_3, I_25, N_5, Res_2),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('A', [0.0, 1.0, 0.0, 2.0]),
    erlang:put('B', [2.0, 3.0, 4.0, 0.0]),
    erlang:put('product', multiply_poly(erlang:get('A'), erlang:get('B'))),
    io:format("~ts~n", [mochi_repr(list_to_string(erlang:get('product')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
