#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, slow_primes/1, primes/1, fast_primes/1]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

slow_primes(Max_n) ->
    try
        Result = [],
        I = 2,
        Fun_2 = fun Fun_2_loop(I, Max_n, Result) ->
    case (I =< Max_n) of
        true ->
            try
                J = 2,
                Is_prime = true,
                Fun = fun Fun_loop(I, Is_prime, J, Max_n, Result) ->
    case (J < I) of
        true ->
            try
                Is_prime_3 = (case (mochi_mod(I, J) == 0) of
        true -> Is_prime_2 = false,
            throw({break, {I, Is_prime_2, J, Max_n, Result}}),
            Is_prime_2;
        _ -> Is_prime
    end),
                J_2 = (J + 1),
                Fun_loop(I, Is_prime_3, J_2, Max_n, Result)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_loop(C0, C1, C2, C3, C4);
                {break, Bs} -> Bs
            end;
        _ -> {I, Is_prime, J, Max_n, Result}
    end
end,
{I, Is_prime_3, J_2, Max_n, Result} = Fun(I, Is_prime, J, Max_n, Result),
                Result_3 = (case (Is_prime_3 /= nil) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [I]),
            Result_2;
        _ -> Result
    end),
                I_2 = (I + 1),
                Fun_2_loop(I_2, Max_n, Result_3)
            catch
                {continue, C0, C1, C2} -> Fun_2_loop(C0, C1, C2);
                {break, Bs} -> Bs
            end;
        _ -> {I, Max_n, Result}
    end
end,
{I_2, Max_n, Result_3} = Fun_2(I, Max_n, Result),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

primes(Max_n_2) ->
    try
        Result_4 = [],
        I_3 = 2,
        Fun_4 = fun Fun_4_loop(I_3, Max_n_2, Result_4) ->
    case (I_3 =< Max_n_2) of
        true ->
            try
                J_3 = 2,
                Is_prime_4 = true,
                Fun_3 = fun Fun_3_loop(I_3, Is_prime_4, J_3, Max_n_2, Result_4) ->
    case ((J_3 * J_3) =< I_3) of
        true ->
            try
                Is_prime_6 = (case (mochi_mod(I_3, J_3) == 0) of
        true -> Is_prime_5 = false,
            throw({break, {I_3, Is_prime_5, J_3, Max_n_2, Result_4}}),
            Is_prime_5;
        _ -> Is_prime_4
    end),
                J_4 = (J_3 + 1),
                Fun_3_loop(I_3, Is_prime_6, J_4, Max_n_2, Result_4)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_3_loop(C0, C1, C2, C3, C4);
                {break, Bs} -> Bs
            end;
        _ -> {I_3, Is_prime_4, J_3, Max_n_2, Result_4}
    end
end,
{I_3, Is_prime_6, J_4, Max_n_2, Result_4} = Fun_3(I_3, Is_prime_4, J_3, Max_n_2, Result_4),
                Result_6 = (case (Is_prime_6 /= nil) of
        true -> Result_5 = lists:append((case Result_4 of nil -> []; _ -> Result_4 end), [I_3]),
            Result_5;
        _ -> Result_4
    end),
                I_4 = (I_3 + 1),
                Fun_4_loop(I_4, Max_n_2, Result_6)
            catch
                {continue, C0, C1, C2} -> Fun_4_loop(C0, C1, C2);
                {break, Bs} -> Bs
            end;
        _ -> {I_3, Max_n_2, Result_4}
    end
end,
{I_4, Max_n_2, Result_6} = Fun_4(I_3, Max_n_2, Result_4),
        Result_6
    catch {return, RetCatch} -> RetCatch end.

fast_primes(Max_n_3) ->
    try
        Result_7 = [],
        Result_9 = (case (Max_n_3 >= 2) of
        true -> Result_8 = lists:append((case Result_7 of nil -> []; _ -> Result_7 end), [2]),
            Result_8;
        _ -> Result_7
    end),
        I_5 = 3,
        Fun_6 = fun Fun_6_loop(I_5, Max_n_3, Result_9) ->
    case (I_5 =< Max_n_3) of
        true ->
            try
                J_5 = 3,
                Is_prime_7 = true,
                Fun_5 = fun Fun_5_loop(I_5, Is_prime_7, J_5, Max_n_3, Result_9) ->
    case ((J_5 * J_5) =< I_5) of
        true ->
            try
                Is_prime_9 = (case (mochi_mod(I_5, J_5) == 0) of
        true -> Is_prime_8 = false,
            throw({break, {I_5, Is_prime_8, J_5, Max_n_3, Result_9}}),
            Is_prime_8;
        _ -> Is_prime_7
    end),
                J_6 = (J_5 + 2),
                Fun_5_loop(I_5, Is_prime_9, J_6, Max_n_3, Result_9)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_5_loop(C0, C1, C2, C3, C4);
                {break, Bs} -> Bs
            end;
        _ -> {I_5, Is_prime_7, J_5, Max_n_3, Result_9}
    end
end,
{I_5, Is_prime_9, J_6, Max_n_3, Result_9} = Fun_5(I_5, Is_prime_7, J_5, Max_n_3, Result_9),
                Result_11 = (case (Is_prime_9 /= nil) of
        true -> Result_10 = lists:append((case Result_9 of nil -> []; _ -> Result_9 end), [I_5]),
            Result_10;
        _ -> Result_9
    end),
                I_6 = (I_5 + 2),
                Fun_6_loop(I_6, Max_n_3, Result_11)
            catch
                {continue, C0, C1, C2} -> Fun_6_loop(C0, C1, C2);
                {break, Bs} -> Bs
            end;
        _ -> {I_5, Max_n_3, Result_9}
    end
end,
{I_6, Max_n_3, Result_11} = Fun_6(I_5, Max_n_3, Result_9),
        Result_11
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(slow_primes(25))]),
    io:format("~ts~n", [mochi_str(primes(25))]),
    io:format("~ts~n", [mochi_str(fast_primes(25))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
