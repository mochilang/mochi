#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, floor/1, pow10/1, round/2, clone_matrix/1, solve_simultaneous/1, test_solver/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

floor(X) ->
    try
        I = mochi_to_int(X),
        case (float(I) > X) of
        true -> I_2 = (I - 1),
            I_3 = I_2;
        _ -> I_3 = I
    end,
        float(I_3)
    catch {return, Ret} -> Ret end.

pow10(N) ->
    try
        P = 1.0,
        I_4 = 0,
        Fun = fun Fun_loop(I_4, N, P) ->
    case (I_4 < N) of
        true ->
            P_2 = mochi_safe_mul(P, 10.0),
            I_5 = (I_4 + 1),
            Fun_loop(I_5, N, P_2);
        _ -> {I_4, N, P}
    end
end,
{I_5, N, P_2} = Fun(I_4, N, P),
        P_2
    catch {return, Ret} -> Ret end.

round(X_2, N_2) ->
    try
        M = pow10(N_2),
        mochi_safe_div(floor((mochi_safe_mul(X_2, M) + 0.5)), M)
    catch {return, Ret} -> Ret end.

clone_matrix(Mat) ->
    try
        New_mat = [],
        I_6 = 0,
        Fun_3 = fun Fun_3_loop(I_6, Mat, New_mat) ->
    case (I_6 < erlang:length(Mat)) of
        true ->
            Row = [],
            J = 0,
            Fun_2 = fun Fun_2_loop(I_6, J, Mat, New_mat, Row) ->
    case (J < erlang:length((case erlang:is_map(Mat) of true -> maps:get(I_6, Mat, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Mat) + I_6 + 1, Mat); _ -> mochi_nth(I_6 + 1, Mat) end end))) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [(case erlang:is_map((case erlang:is_map(Mat) of true -> maps:get(I_6, Mat, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Mat) + I_6 + 1, Mat); _ -> mochi_nth(I_6 + 1, Mat) end end)) of true -> maps:get(J, (case erlang:is_map(Mat) of true -> maps:get(I_6, Mat, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Mat) + I_6 + 1, Mat); _ -> mochi_nth(I_6 + 1, Mat) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat) of true -> maps:get(I_6, Mat, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Mat) + I_6 + 1, Mat); _ -> mochi_nth(I_6 + 1, Mat) end end)) + J + 1, (case erlang:is_map(Mat) of true -> maps:get(I_6, Mat, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Mat) + I_6 + 1, Mat); _ -> mochi_nth(I_6 + 1, Mat) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Mat) of true -> maps:get(I_6, Mat, nil); _ -> case I_6 < 0 of true -> mochi_nth(erlang:length(Mat) + I_6 + 1, Mat); _ -> mochi_nth(I_6 + 1, Mat) end end)) end end)]),
            J_2 = (J + 1),
            Fun_2_loop(I_6, J_2, Mat, New_mat, Row_2);
        _ -> {I_6, J, Mat, New_mat, Row}
    end
end,
{I_6, J_2, Mat, New_mat, Row_2} = Fun_2(I_6, J, Mat, New_mat, Row),
            New_mat_2 = lists:append((case New_mat of nil -> []; _ -> New_mat end), [Row_2]),
            I_7 = (I_6 + 1),
            Fun_3_loop(I_7, Mat, New_mat_2);
        _ -> {I_6, Mat, New_mat}
    end
end,
{I_7, Mat, New_mat_2} = Fun_3(I_6, Mat, New_mat),
        New_mat_2
    catch {return, Ret} -> Ret end.

solve_simultaneous(Equations) ->
    try
        N_3 = erlang:length(Equations),
        case (N_3 == 0) of
        true -> erlang:error("solve_simultaneous() requires n lists of length n+1");
        _ -> ok
    end,
        M_2 = (N_3 + 1),
        I_8 = 0,
        Fun_4 = fun Fun_4_loop(Equations, I_8, M_2, N_3) ->
    case (I_8 < N_3) of
        true ->
            case (erlang:length((case erlang:is_map(Equations) of true -> maps:get(I_8, Equations, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Equations) + I_8 + 1, Equations); _ -> mochi_nth(I_8 + 1, Equations) end end)) /= M_2) of
        true -> erlang:error("solve_simultaneous() requires n lists of length n+1");
        _ -> ok
    end,
            I_9 = (I_8 + 1),
            Fun_4_loop(Equations, I_9, M_2, N_3);
        _ -> {Equations, I_8, M_2, N_3}
    end
end,
{Equations, I_9, M_2, N_3} = Fun_4(Equations, I_8, M_2, N_3),
        A = clone_matrix(Equations),
        Row_3 = 0,
        Fun_10 = fun Fun_10_loop(A, Equations, I_9, M_2, N_3, Row_3) ->
    case (Row_3 < N_3) of
        true ->
            Pivot = Row_3,
            Fun_5 = fun Fun_5_loop(A, Equations, I_9, M_2, N_3, Pivot, Row_3) ->
    case ((Pivot < N_3) andalso ((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(Pivot, A, nil); _ -> case Pivot < 0 of true -> mochi_nth(erlang:length(A) + Pivot + 1, A); _ -> mochi_nth(Pivot + 1, A) end end)) of true -> maps:get(Row_3, (case erlang:is_map(A) of true -> maps:get(Pivot, A, nil); _ -> case Pivot < 0 of true -> mochi_nth(erlang:length(A) + Pivot + 1, A); _ -> mochi_nth(Pivot + 1, A) end end), nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(Pivot, A, nil); _ -> case Pivot < 0 of true -> mochi_nth(erlang:length(A) + Pivot + 1, A); _ -> mochi_nth(Pivot + 1, A) end end)) + Row_3 + 1, (case erlang:is_map(A) of true -> maps:get(Pivot, A, nil); _ -> case Pivot < 0 of true -> mochi_nth(erlang:length(A) + Pivot + 1, A); _ -> mochi_nth(Pivot + 1, A) end end)); _ -> mochi_nth(Row_3 + 1, (case erlang:is_map(A) of true -> maps:get(Pivot, A, nil); _ -> case Pivot < 0 of true -> mochi_nth(erlang:length(A) + Pivot + 1, A); _ -> mochi_nth(Pivot + 1, A) end end)) end end) == 0.0)) of
        true ->
            Pivot_2 = (Pivot + 1),
            Fun_5_loop(A, Equations, I_9, M_2, N_3, Pivot_2, Row_3);
        _ -> {A, Equations, I_9, M_2, N_3, Pivot, Row_3}
    end
end,
{A, Equations, I_9, M_2, N_3, Pivot_2, Row_3} = Fun_5(A, Equations, I_9, M_2, N_3, Pivot, Row_3),
            case (Pivot_2 == N_3) of
        true -> erlang:error("solve_simultaneous() requires at least 1 full equation");
        _ -> ok
    end,
            case (Pivot_2 /= Row_3) of
        true -> Temp = (case erlang:is_map(A) of true -> maps:get(Row_3, A, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A) + Row_3 + 1, A); _ -> mochi_nth(Row_3 + 1, A) end end),
            A_2 = lists:sublist(A, Row_3) ++ [(case erlang:is_map(A) of true -> maps:get(Pivot_2, A, nil); _ -> case Pivot_2 < 0 of true -> mochi_nth(erlang:length(A) + Pivot_2 + 1, A); _ -> mochi_nth(Pivot_2 + 1, A) end end)] ++ lists:nthtail(Row_3 + 1, A),
            A_3 = lists:sublist(A_2, Pivot_2) ++ [Temp] ++ lists:nthtail(Pivot_2 + 1, A_2),
            A_4 = A_3,
            Temp_2 = Temp;
        _ -> A_4 = A,
            Temp_2 = nil
    end,
            Pivot_val = (case erlang:is_map((case erlang:is_map(A_4) of true -> maps:get(Row_3, A_4, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_4) + Row_3 + 1, A_4); _ -> mochi_nth(Row_3 + 1, A_4) end end)) of true -> maps:get(Row_3, (case erlang:is_map(A_4) of true -> maps:get(Row_3, A_4, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_4) + Row_3 + 1, A_4); _ -> mochi_nth(Row_3 + 1, A_4) end end), nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_4) of true -> maps:get(Row_3, A_4, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_4) + Row_3 + 1, A_4); _ -> mochi_nth(Row_3 + 1, A_4) end end)) + Row_3 + 1, (case erlang:is_map(A_4) of true -> maps:get(Row_3, A_4, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_4) + Row_3 + 1, A_4); _ -> mochi_nth(Row_3 + 1, A_4) end end)); _ -> mochi_nth(Row_3 + 1, (case erlang:is_map(A_4) of true -> maps:get(Row_3, A_4, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_4) + Row_3 + 1, A_4); _ -> mochi_nth(Row_3 + 1, A_4) end end)) end end),
            Col = 0,
            Fun_6 = fun Fun_6_loop(A_4, Col, Equations, I_9, M_2, N_3, Pivot_2, Pivot_val, Row_3, Temp_2) ->
    case (Col < M_2) of
        true ->
            A_5 = lists:sublist(A_4, Row_3) ++ [lists:sublist(lists:nth(Row_3 + 1, A_4), Col) ++ [mochi_safe_div((case erlang:is_map((case erlang:is_map(A_4) of true -> maps:get(Row_3, A_4, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_4) + Row_3 + 1, A_4); _ -> mochi_nth(Row_3 + 1, A_4) end end)) of true -> maps:get(Col, (case erlang:is_map(A_4) of true -> maps:get(Row_3, A_4, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_4) + Row_3 + 1, A_4); _ -> mochi_nth(Row_3 + 1, A_4) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_4) of true -> maps:get(Row_3, A_4, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_4) + Row_3 + 1, A_4); _ -> mochi_nth(Row_3 + 1, A_4) end end)) + Col + 1, (case erlang:is_map(A_4) of true -> maps:get(Row_3, A_4, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_4) + Row_3 + 1, A_4); _ -> mochi_nth(Row_3 + 1, A_4) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(A_4) of true -> maps:get(Row_3, A_4, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_4) + Row_3 + 1, A_4); _ -> mochi_nth(Row_3 + 1, A_4) end end)) end end), Pivot_val)] ++ lists:nthtail(Col + 1, lists:nth(Row_3 + 1, A_4))] ++ lists:nthtail(Row_3 + 1, A_4),
            Col_2 = (Col + 1),
            Fun_6_loop(A_5, Col_2, Equations, I_9, M_2, N_3, Pivot_2, Pivot_val, Row_3, Temp_2);
        _ -> {A_4, Col, Equations, I_9, M_2, N_3, Pivot_2, Pivot_val, Row_3, Temp_2}
    end
end,
{A_5, Col_2, Equations, I_9, M_2, N_3, Pivot_2, Pivot_val, Row_3, Temp_2} = Fun_6(A_4, Col, Equations, I_9, M_2, N_3, Pivot_2, Pivot_val, Row_3, Temp_2),
            R = 0,
            Fun_9 = fun Fun_9_loop(A_5, Col_2, Equations, I_9, M_2, N_3, Pivot_2, Pivot_val, R, Row_3, Temp_2) ->
    case (R < N_3) of
        true ->
            case (R /= Row_3) of
        true -> Factor = (case erlang:is_map((case erlang:is_map(A_5) of true -> maps:get(R, A_5, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(A_5) + R + 1, A_5); _ -> mochi_nth(R + 1, A_5) end end)) of true -> maps:get(Row_3, (case erlang:is_map(A_5) of true -> maps:get(R, A_5, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(A_5) + R + 1, A_5); _ -> mochi_nth(R + 1, A_5) end end), nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_5) of true -> maps:get(R, A_5, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(A_5) + R + 1, A_5); _ -> mochi_nth(R + 1, A_5) end end)) + Row_3 + 1, (case erlang:is_map(A_5) of true -> maps:get(R, A_5, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(A_5) + R + 1, A_5); _ -> mochi_nth(R + 1, A_5) end end)); _ -> mochi_nth(Row_3 + 1, (case erlang:is_map(A_5) of true -> maps:get(R, A_5, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(A_5) + R + 1, A_5); _ -> mochi_nth(R + 1, A_5) end end)) end end),
            C = 0,
            Fun_7 = fun Fun_7_loop(A_5, C, Col_2, Equations, Factor, I_9, M_2, N_3, Pivot_2, Pivot_val, R, Row_3, Temp_2) ->
    case (C < M_2) of
        true ->
            A_6 = lists:sublist(A_5, R) ++ [lists:sublist(lists:nth(R + 1, A_5), C) ++ [((case erlang:is_map((case erlang:is_map(A_5) of true -> maps:get(R, A_5, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(A_5) + R + 1, A_5); _ -> mochi_nth(R + 1, A_5) end end)) of true -> maps:get(C, (case erlang:is_map(A_5) of true -> maps:get(R, A_5, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(A_5) + R + 1, A_5); _ -> mochi_nth(R + 1, A_5) end end), nil); _ -> case C < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_5) of true -> maps:get(R, A_5, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(A_5) + R + 1, A_5); _ -> mochi_nth(R + 1, A_5) end end)) + C + 1, (case erlang:is_map(A_5) of true -> maps:get(R, A_5, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(A_5) + R + 1, A_5); _ -> mochi_nth(R + 1, A_5) end end)); _ -> mochi_nth(C + 1, (case erlang:is_map(A_5) of true -> maps:get(R, A_5, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(A_5) + R + 1, A_5); _ -> mochi_nth(R + 1, A_5) end end)) end end) - mochi_safe_mul(Factor, (case erlang:is_map((case erlang:is_map(A_5) of true -> maps:get(Row_3, A_5, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_5) + Row_3 + 1, A_5); _ -> mochi_nth(Row_3 + 1, A_5) end end)) of true -> maps:get(C, (case erlang:is_map(A_5) of true -> maps:get(Row_3, A_5, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_5) + Row_3 + 1, A_5); _ -> mochi_nth(Row_3 + 1, A_5) end end), nil); _ -> case C < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_5) of true -> maps:get(Row_3, A_5, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_5) + Row_3 + 1, A_5); _ -> mochi_nth(Row_3 + 1, A_5) end end)) + C + 1, (case erlang:is_map(A_5) of true -> maps:get(Row_3, A_5, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_5) + Row_3 + 1, A_5); _ -> mochi_nth(Row_3 + 1, A_5) end end)); _ -> mochi_nth(C + 1, (case erlang:is_map(A_5) of true -> maps:get(Row_3, A_5, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(A_5) + Row_3 + 1, A_5); _ -> mochi_nth(Row_3 + 1, A_5) end end)) end end)))] ++ lists:nthtail(C + 1, lists:nth(R + 1, A_5))] ++ lists:nthtail(R + 1, A_5),
            C_2 = (C + 1),
            Fun_7_loop(A_6, C_2, Col_2, Equations, Factor, I_9, M_2, N_3, Pivot_2, Pivot_val, R, Row_3, Temp_2);
        _ -> {A_5, C, Col_2, Equations, Factor, I_9, M_2, N_3, Pivot_2, Pivot_val, R, Row_3, Temp_2}
    end
end,
{A_6, C_2, Col_2, Equations, Factor, I_9, M_2, N_3, Pivot_2, Pivot_val, R, Row_3, Temp_2} = Fun_7(A_5, C, Col_2, Equations, Factor, I_9, M_2, N_3, Pivot_2, Pivot_val, R, Row_3, Temp_2),
            A_7 = A_6,
            C_3 = C_2,
            Factor_2 = Factor,
            Fun_8 = Fun_7;
        _ -> A_7 = A_5,
            C_3 = nil,
            Factor_2 = nil,
            Fun_8 = Fun_6
    end,
            R_2 = (R + 1),
            Fun_9_loop(A_7, Col_2, Equations, I_9, M_2, N_3, Pivot_2, Pivot_val, R_2, Row_3, Temp_2);
        _ -> {A_5, Col_2, Equations, I_9, M_2, N_3, Pivot_2, Pivot_val, R, Row_3, Temp_2}
    end
end,
{A_7, Col_2, Equations, I_9, M_2, N_3, Pivot_2, Pivot_val, R_2, Row_3, Temp_2} = Fun_9(A_5, Col_2, Equations, I_9, M_2, N_3, Pivot_2, Pivot_val, R, Row_3, Temp_2),
            Row_4 = (Row_3 + 1),
            Fun_10_loop(A_7, Equations, I_9, M_2, N_3, Row_4);
        _ -> {A, Equations, I_9, M_2, N_3, Row_3}
    end
end,
{A_7, Equations, I_9, M_2, N_3, Row_4} = Fun_10(A, Equations, I_9, M_2, N_3, Row_3),
        Res = [],
        K = 0,
        Fun_11 = fun Fun_11_loop(A_7, Equations, I_9, K, M_2, N_3, Res, Row_4) ->
    case (K < N_3) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [round((case erlang:is_map((case erlang:is_map(A_7) of true -> maps:get(K, A_7, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(A_7) + K + 1, A_7); _ -> mochi_nth(K + 1, A_7) end end)) of true -> maps:get((M_2 - 1), (case erlang:is_map(A_7) of true -> maps:get(K, A_7, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(A_7) + K + 1, A_7); _ -> mochi_nth(K + 1, A_7) end end), nil); _ -> case (M_2 - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_7) of true -> maps:get(K, A_7, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(A_7) + K + 1, A_7); _ -> mochi_nth(K + 1, A_7) end end)) + (M_2 - 1) + 1, (case erlang:is_map(A_7) of true -> maps:get(K, A_7, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(A_7) + K + 1, A_7); _ -> mochi_nth(K + 1, A_7) end end)); _ -> mochi_nth((M_2 - 1) + 1, (case erlang:is_map(A_7) of true -> maps:get(K, A_7, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(A_7) + K + 1, A_7); _ -> mochi_nth(K + 1, A_7) end end)) end end), 5)]),
            K_2 = (K + 1),
            Fun_11_loop(A_7, Equations, I_9, K_2, M_2, N_3, Res_2, Row_4);
        _ -> {A_7, Equations, I_9, K, M_2, N_3, Res, Row_4}
    end
end,
{A_7, Equations, I_9, K_2, M_2, N_3, Res_2, Row_4} = Fun_11(A_7, Equations, I_9, K, M_2, N_3, Res, Row_4),
        Res_2
    catch {return, Ret} -> Ret end.

test_solver() ->
    try
        A_8 = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]],
        R1 = solve_simultaneous(A_8),
        case mochi_not((((erlang:length(R1) == 2) andalso ((case erlang:is_map(R1) of true -> maps:get(0, R1, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(R1) + 0 + 1, R1); _ -> mochi_nth(0 + 1, R1) end end) == (0.0 - 1.0))) andalso ((case erlang:is_map(R1) of true -> maps:get(1, R1, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(R1) + 1 + 1, R1); _ -> mochi_nth(1 + 1, R1) end end) == 2.0))) of
        true -> erlang:error("test1 failed");
        _ -> ok
    end,
        B = [[0.0, (0.0 - 3.0), 1.0, 7.0], [3.0, 2.0, (0.0 - 1.0), 11.0], [5.0, 1.0, (0.0 - 2.0), 12.0]],
        R2 = solve_simultaneous(B),
        case mochi_not(((((erlang:length(R2) == 3) andalso ((case erlang:is_map(R2) of true -> maps:get(0, R2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(R2) + 0 + 1, R2); _ -> mochi_nth(0 + 1, R2) end end) == 6.4)) andalso ((case erlang:is_map(R2) of true -> maps:get(1, R2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(R2) + 1 + 1, R2); _ -> mochi_nth(1 + 1, R2) end end) == 1.2)) andalso ((case erlang:is_map(R2) of true -> maps:get(2, R2, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(R2) + 2 + 1, R2); _ -> mochi_nth(2 + 1, R2) end end) == 10.6))) of
        true -> erlang:error("test2 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_solver(),
        Eq = [[2.0, 1.0, 1.0, 1.0, 1.0, 4.0], [1.0, 2.0, 1.0, 1.0, 1.0, 5.0], [1.0, 1.0, 2.0, 1.0, 1.0, 6.0], [1.0, 1.0, 1.0, 2.0, 1.0, 7.0], [1.0, 1.0, 1.0, 1.0, 2.0, 8.0]],
        io:format("~ts~n", [mochi_str(solve_simultaneous(Eq))]),
        io:format("~ts~n", [mochi_str(solve_simultaneous([[4.0, 2.0]]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
