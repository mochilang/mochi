#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, binomial_coefficient/2]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

binomial_coefficient(N, R) ->
    try
        case ((N < 0) orelse (R < 0)) of
        true -> erlang:error("n and r must be non-negative integers");
        _ -> ok
    end,
        case ((N == 0) orelse (R == 0)) of
        true -> throw({return, 1});
        _ -> ok
    end,
        C = [],
        Fun = fun Fun_loop(List, C, N, R) ->
    case List of
        [] -> {C, N, R};
        [_|__rest] ->
            C_2 = lists:append((case C of nil -> []; _ -> C end), [0]),
            Fun_loop(__rest, C_2, N, R);
        _ -> {C, N, R}
    end
end,
{C_2, N, R} = Fun(lists:seq(0, ((R + 1)) - 1), C, N, R),
        C_3 = lists:sublist(C_2, 0) ++ [1] ++ lists:nthtail(0 + 1, C_2),
        I = 1,
        Fun_3 = fun Fun_3_loop(C_3, I, N, R) ->
    case (I =< N) of
        true ->
            J = (case (I < R) of
    true -> I;
    _ -> R
end),
            Fun_2 = fun Fun_2_loop(C_3, I, J, N, R) ->
    case (J > 0) of
        true ->
            C_4 = lists:sublist(C_3, J) ++ [((case erlang:is_map(C_3) of true -> maps:get(J, C_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(C_3) + J + 1, C_3); _ -> mochi_nth(J + 1, C_3) end end) + (case erlang:is_map(C_3) of true -> maps:get((J - 1), C_3, nil); _ -> case (J - 1) < 0 of true -> mochi_nth(erlang:length(C_3) + (J - 1) + 1, C_3); _ -> mochi_nth((J - 1) + 1, C_3) end end))] ++ lists:nthtail(J + 1, C_3),
            J_2 = (J - 1),
            Fun_2_loop(C_4, I, J_2, N, R);
        _ -> {C_3, I, J, N, R}
    end
end,
{C_4, I, J_2, N, R} = Fun_2(C_3, I, J, N, R),
            I_2 = (I + 1),
            Fun_3_loop(C_4, I_2, N, R);
        _ -> {C_3, I, N, R}
    end
end,
{C_4, I_2, N, R} = Fun_3(C_3, I, N, R),
        (case erlang:is_map(C_4) of true -> maps:get(R, C_4, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(C_4) + R + 1, C_4); _ -> mochi_nth(R + 1, C_4) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(binomial_coefficient(10, 5))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
