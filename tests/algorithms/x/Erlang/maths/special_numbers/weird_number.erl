#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, bubble_sort/1, factors/1, sum_list/1, abundant/1, semi_perfect/1, weird/1, run_tests/0, main/0]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

bubble_sort(Xs) ->
    try
        Arr = Xs,
        N = erlang:length(Arr),
        I = 0,
        Fun_2 = fun Fun_2_loop(Arr, I, N, Xs) ->
    case (I < N) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Arr, I, J, N, Xs) ->
    case (J < ((N - I) - 1)) of
        true ->
            Tmp_2 = (case ((case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end) > (case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> mochi_nth((J + 1) + 1, Arr) end end)) of
        true -> Tmp = (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, J) ++ [(case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> mochi_nth((J + 1) + 1, Arr) end end)] ++ lists:nthtail(J + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, (J + 1)) ++ [Tmp] ++ lists:nthtail((J + 1) + 1, Arr_2),
            Arr_4 = Arr_3,
            Tmp;
        _ -> Arr_4 = Arr,
            nil
    end),
            J_2 = (J + 1),
            Fun_loop(Arr_4, I, J_2, N, Xs);
        _ -> {Arr, I, J, N, Xs}
    end
end,
{Arr_4, I, J_2, N, Xs} = Fun(Arr, I, J, N, Xs),
            I_2 = (I + 1),
            Fun_2_loop(Arr_4, I_2, N, Xs);
        _ -> {Arr, I, N, Xs}
    end
end,
{Arr_4, I_2, N, Xs} = Fun_2(Arr, I, N, Xs),
        Arr_4
    catch {return, RetCatch} -> RetCatch end.

factors(Num) ->
    try
        Values = [1],
        I_3 = 2,
        Fun_3 = fun Fun_3_loop(I_3, Num, Values) ->
    case ((I_3 * I_3) =< Num) of
        true ->
            Values_5 = (case (mochi_mod(Num, I_3) == 0) of
        true -> Values_2 = lists:append((case Values of nil -> []; _ -> Values end), [I_3]),
            D = mochi_idiv(Num, I_3),
            Values_4 = (case (D /= I_3) of
        true -> Values_3 = lists:append((case Values_2 of nil -> []; _ -> Values_2 end), [D]),
            Values_3;
        _ -> Values_2
    end),
            D_2 = D,
            Values_4;
        _ -> D_2 = nil,
            Values
    end),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Num, Values_5);
        _ -> {I_3, Num, Values}
    end
end,
{I_4, Num, Values_5} = Fun_3(I_3, Num, Values),
        bubble_sort(Values_5)
    catch {return, RetCatch} -> RetCatch end.

sum_list(Xs_2) ->
    try
        Total = 0,
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, Total, Xs_2) ->
    case (I_5 < erlang:length(Xs_2)) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Xs_2) of true -> maps:get(I_5, Xs_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_5 + 1, Xs_2); _ -> mochi_nth(I_5 + 1, Xs_2) end end)),
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Total_2, Xs_2);
        _ -> {I_5, Total, Xs_2}
    end
end,
{I_6, Total_2, Xs_2} = Fun_4(I_5, Total, Xs_2),
        Total_2
    catch {return, RetCatch} -> RetCatch end.

abundant(N_2) ->
    try
        (sum_list(factors(N_2)) > N_2)
    catch {return, RetCatch} -> RetCatch end.

semi_perfect(Number) ->
    try
        case (Number =< 0) of
        true -> throw({return, true});
        _ -> ok
    end,
        Values_6 = factors(Number),
        Possible = [],
        J_3 = 0,
        Fun_5 = fun Fun_5_loop(J_3, Number, Possible, Values_6) ->
    case (J_3 =< Number) of
        true ->
            Possible_2 = lists:append((case Possible of nil -> []; _ -> Possible end), [(J_3 == 0)]),
            J_4 = (J_3 + 1),
            Fun_5_loop(J_4, Number, Possible_2, Values_6);
        _ -> {J_3, Number, Possible, Values_6}
    end
end,
{J_4, Number, Possible_2, Values_6} = Fun_5(J_3, Number, Possible, Values_6),
        Idx = 0,
        Fun_7 = fun Fun_7_loop(Idx, J_4, Number, Possible_2, Values_6) ->
    case (Idx < erlang:length(Values_6)) of
        true ->
            V = (case erlang:is_map(Values_6) of true -> maps:get(Idx, Values_6, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Values_6) + Idx + 1, Values_6); _ -> mochi_nth(Idx + 1, Values_6) end end),
            S = Number,
            Fun_6 = fun Fun_6_loop(Idx, J_4, Number, Possible_2, S, V, Values_6) ->
    case (S >= V) of
        true ->
            Possible_4 = (case (case erlang:is_map(Possible_2) of true -> maps:get((S - V), Possible_2, nil); _ -> case (S - V) < 0 of true -> mochi_nth(erlang:length(Possible_2) + (S - V) + 1, Possible_2); _ -> mochi_nth((S - V) + 1, Possible_2) end end) of
        true -> Possible_3 = lists:sublist(Possible_2, S) ++ [true] ++ lists:nthtail(S + 1, Possible_2),
            Possible_3;
        _ -> Possible_2
    end),
            S_2 = (S - 1),
            Fun_6_loop(Idx, J_4, Number, Possible_4, S_2, V, Values_6);
        _ -> {Idx, J_4, Number, Possible_2, S, V, Values_6}
    end
end,
{Idx, J_4, Number, Possible_4, S_2, V, Values_6} = Fun_6(Idx, J_4, Number, Possible_2, S, V, Values_6),
            Idx_2 = (Idx + 1),
            Fun_7_loop(Idx_2, J_4, Number, Possible_4, Values_6);
        _ -> {Idx, J_4, Number, Possible_2, Values_6}
    end
end,
{Idx_2, J_4, Number, Possible_4, Values_6} = Fun_7(Idx, J_4, Number, Possible_2, Values_6),
        (case erlang:is_map(Possible_4) of true -> maps:get(Number, Possible_4, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Possible_4) + Number + 1, Possible_4); _ -> mochi_nth(Number + 1, Possible_4) end end)
    catch {return, RetCatch} -> RetCatch end.

weird(Number_2) ->
    try
        (abundant(Number_2) andalso (semi_perfect(Number_2) == false))
    catch {return, RetCatch} -> RetCatch end.

run_tests() ->
    try
        case (factors(12) /= [1, 2, 3, 4, 6]) of
        true -> erlang:error({panic, "factors 12 failed"});
        _ -> ok
    end,
        case (factors(1) /= [1]) of
        true -> erlang:error({panic, "factors 1 failed"});
        _ -> ok
    end,
        case (factors(100) /= [1, 2, 4, 5, 10, 20, 25, 50]) of
        true -> erlang:error({panic, "factors 100 failed"});
        _ -> ok
    end,
        case (abundant(0) /= true) of
        true -> erlang:error({panic, "abundant 0 failed"});
        _ -> ok
    end,
        case (abundant(1) /= false) of
        true -> erlang:error({panic, "abundant 1 failed"});
        _ -> ok
    end,
        case (abundant(12) /= true) of
        true -> erlang:error({panic, "abundant 12 failed"});
        _ -> ok
    end,
        case (abundant(13) /= false) of
        true -> erlang:error({panic, "abundant 13 failed"});
        _ -> ok
    end,
        case (abundant(20) /= true) of
        true -> erlang:error({panic, "abundant 20 failed"});
        _ -> ok
    end,
        case (semi_perfect(0) /= true) of
        true -> erlang:error({panic, "semi_perfect 0 failed"});
        _ -> ok
    end,
        case (semi_perfect(1) /= true) of
        true -> erlang:error({panic, "semi_perfect 1 failed"});
        _ -> ok
    end,
        case (semi_perfect(12) /= true) of
        true -> erlang:error({panic, "semi_perfect 12 failed"});
        _ -> ok
    end,
        case (semi_perfect(13) /= false) of
        true -> erlang:error({panic, "semi_perfect 13 failed"});
        _ -> ok
    end,
        case (weird(0) /= false) of
        true -> erlang:error({panic, "weird 0 failed"});
        _ -> ok
    end,
        case (weird(70) /= true) of
        true -> erlang:error({panic, "weird 70 failed"});
        _ -> ok
    end,
        case (weird(77) /= false) of
        true -> erlang:error({panic, "weird 77 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        run_tests(),
        Nums = [69, 70, 71],
        I_7 = 0,
        Fun_8 = fun Fun_8_loop(I_7, Nums) ->
    case (I_7 < erlang:length(Nums)) of
        true ->
            N_3 = (case erlang:is_map(Nums) of true -> maps:get(I_7, Nums, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Nums) + I_7 + 1, Nums); _ -> mochi_nth(I_7 + 1, Nums) end end),
            case weird(N_3) of
        true -> io:format("~ts~n", [mochi_repr((mochi_str(N_3) ++ " is weird."))]);
        _ -> io:format("~ts~n", [mochi_repr((mochi_str(N_3) ++ " is not weird."))])
    end,
            I_8 = (I_7 + 1),
            Fun_8_loop(I_8, Nums);
        _ -> {I_7, Nums}
    end
end,
{I_8, Nums} = Fun_8(I_7, Nums),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
