#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, abs_int/1, gcd/2, power/3, is_carmichael_number/1]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

abs_int(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

gcd(A, B) ->
    try
        (case (A == 0) of
    true -> abs_int(B);
    _ -> gcd(mochi_mod(B, A), A)
end)
    catch {return, RetCatch} -> RetCatch end.

power(X_2, Y, M) ->
    try
        case (Y == 0) of
        true -> throw({return, mochi_mod(1, M)});
        _ -> ok
    end,
        Temp = mochi_mod(power(X_2, mochi_idiv(Y, 2), M), M),
        Temp_2 = mochi_mod((Temp * Temp), M),
        Temp_4 = (case (mochi_mod(Y, 2) == 1) of
        true -> Temp_3 = mochi_mod((Temp_2 * X_2), M),
            Temp_3;
        _ -> Temp_2
    end),
        Temp_4
    catch {return, RetCatch} -> RetCatch end.

is_carmichael_number(N) ->
    try
        case (N =< 0) of
        true -> erlang:error({panic, "Number must be positive"});
        _ -> ok
    end,
        B_2 = 2,
        Fun = fun Fun_loop(B_2, N) ->
    case (B_2 < N) of
        true ->
            case (gcd(B_2, N) == 1) of
        true -> case (power(B_2, (N - 1), N) /= 1) of
        true -> throw({return, false});
        _ -> ok
    end;
        _ -> ok
    end,
            B_3 = (B_2 + 1),
            Fun_loop(B_3, N);
        _ -> {B_2, N}
    end
end,
{B_3, N} = Fun(B_2, N),
        true
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(power(2, 15, 3))]),
    io:format("~ts~n", [mochi_str(power(5, 1, 30))]),
    io:format("~ts~n", [mochi_str(is_carmichael_number(4))]),
    io:format("~ts~n", [mochi_str(is_carmichael_number(561))]),
    io:format("~ts~n", [mochi_str(is_carmichael_number(562))]),
    io:format("~ts~n", [mochi_str(is_carmichael_number(1105))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
