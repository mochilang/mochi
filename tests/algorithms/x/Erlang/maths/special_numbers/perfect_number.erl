#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, perfect/1, main/0]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

perfect(N) ->
    try
        case (N =< 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        Limit = mochi_idiv(N, 2),
        Sum = 0,
        I = 1,
        Fun = fun Fun_loop(I, Limit, N, Sum) ->
    case (I =< Limit) of
        true ->
            Sum_3 = (case (mochi_mod(N, I) == 0) of
        true -> Sum_2 = (Sum + I),
            Sum_2;
        _ -> Sum
    end),
            I_2 = (I + 1),
            Fun_loop(I_2, Limit, N, Sum_3);
        _ -> {I, Limit, N, Sum}
    end
end,
{I_2, Limit, N, Sum_3} = Fun(I, Limit, N, Sum),
        (Sum_3 == N)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Numbers = [6, 28, 29, 12, 496, 8128, 0, -1],
        Idx = 0,
        Fun_2 = fun Fun_2_loop(Idx, Numbers) ->
    case (Idx < erlang:length(Numbers)) of
        true ->
            Num = (case erlang:is_map(Numbers) of true -> maps:get(Idx, Numbers, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Numbers) + Idx + 1, Numbers); _ -> mochi_nth(Idx + 1, Numbers) end end),
            case perfect(Num) of
        true -> io:format("~ts~n", [mochi_repr((mochi_str(Num) ++ " is a Perfect Number."))]);
        _ -> io:format("~ts~n", [mochi_repr((mochi_str(Num) ++ " is not a Perfect Number."))])
    end,
            Idx_2 = (Idx + 1),
            Fun_2_loop(Idx_2, Numbers);
        _ -> {Idx, Numbers}
    end
end,
{Idx_2, Numbers} = Fun_2(Idx, Numbers),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
