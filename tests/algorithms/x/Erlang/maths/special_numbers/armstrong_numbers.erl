#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow_int/2, armstrong_number/1, pluperfect_number/1, narcissistic_number/1]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

pow_int(Base, Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = (Result * Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

armstrong_number(N) ->
    try
        case (N < 1) of
        true -> throw({return, false});
        _ -> ok
    end,
        Digits = 0,
        Temp = N,
        Fun_2 = fun Fun_2_loop(Digits, N, Temp) ->
    case (Temp > 0) of
        true ->
            Temp_2 = (Temp div 10),
            Digits_2 = (Digits + 1),
            Fun_2_loop(Digits_2, N, Temp_2);
        _ -> {Digits, N, Temp}
    end
end,
{Digits_2, N, Temp_2} = Fun_2(Digits, N, Temp),
        Total = 0,
        Temp_3 = N,
        Fun_3 = fun Fun_3_loop(Digits_2, N, Temp_3, Total) ->
    case (Temp_3 > 0) of
        true ->
            Rem = mochi_mod(Temp_3, 10),
            Total_2 = (Total + pow_int(Rem, Digits_2)),
            Temp_4 = (Temp_3 div 10),
            Fun_3_loop(Digits_2, N, Temp_4, Total_2);
        _ -> {Digits_2, N, Temp_3, Total}
    end
end,
{Digits_2, N, Temp_4, Total_2} = Fun_3(Digits_2, N, Temp_3, Total),
        (Total_2 == N)
    catch {return, Ret} -> Ret end.

pluperfect_number(N_2) ->
    try
        case (N_2 < 1) of
        true -> throw({return, false});
        _ -> ok
    end,
        Digit_histogram = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Digit_histogram, I_3, N_2) ->
    case (I_3 < 10) of
        true ->
            Digit_histogram_2 = lists:append((case Digit_histogram of nil -> []; _ -> Digit_histogram end), [0]),
            I_4 = (I_3 + 1),
            Fun_4_loop(Digit_histogram_2, I_4, N_2);
        _ -> {Digit_histogram, I_3, N_2}
    end
end,
{Digit_histogram_2, I_4, N_2} = Fun_4(Digit_histogram, I_3, N_2),
        Digit_total = 0,
        Temp_5 = N_2,
        Fun_5 = fun Fun_5_loop(Digit_histogram_2, Digit_total, I_4, N_2, Temp_5) ->
    case (Temp_5 > 0) of
        true ->
            Rem_2 = mochi_mod(Temp_5, 10),
            Digit_histogram_3 = lists:sublist(Digit_histogram_2, Rem_2) ++ [((case erlang:is_map(Digit_histogram_2) of true -> maps:get(Rem_2, Digit_histogram_2, nil); _ -> case Rem_2 < 0 of true -> mochi_nth(erlang:length(Digit_histogram_2) + Rem_2 + 1, Digit_histogram_2); _ -> mochi_nth(Rem_2 + 1, Digit_histogram_2) end end) + 1)] ++ lists:nthtail(Rem_2 + 1, Digit_histogram_2),
            Digit_total_2 = (Digit_total + 1),
            Temp_6 = (Temp_5 div 10),
            Fun_5_loop(Digit_histogram_3, Digit_total_2, I_4, N_2, Temp_6);
        _ -> {Digit_histogram_2, Digit_total, I_4, N_2, Temp_5}
    end
end,
{Digit_histogram_3, Digit_total_2, I_4, N_2, Temp_6} = Fun_5(Digit_histogram_2, Digit_total, I_4, N_2, Temp_5),
        Total_3 = 0,
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(Digit_histogram_3, Digit_total_2, I_5, N_2, Temp_6, Total_3) ->
    case (I_5 < 10) of
        true ->
            case ((case erlang:is_map(Digit_histogram_3) of true -> maps:get(I_5, Digit_histogram_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Digit_histogram_3) + I_5 + 1, Digit_histogram_3); _ -> mochi_nth(I_5 + 1, Digit_histogram_3) end end) > 0) of
        true -> Total_4 = (Total_3 + ((case erlang:is_map(Digit_histogram_3) of true -> maps:get(I_5, Digit_histogram_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Digit_histogram_3) + I_5 + 1, Digit_histogram_3); _ -> mochi_nth(I_5 + 1, Digit_histogram_3) end end) * pow_int(I_5, Digit_total_2))),
            Total_5 = Total_4;
        _ -> Total_5 = Total_3
    end,
            I_6 = (I_5 + 1),
            Fun_6_loop(Digit_histogram_3, Digit_total_2, I_6, N_2, Temp_6, Total_5);
        _ -> {Digit_histogram_3, Digit_total_2, I_5, N_2, Temp_6, Total_3}
    end
end,
{Digit_histogram_3, Digit_total_2, I_6, N_2, Temp_6, Total_5} = Fun_6(Digit_histogram_3, Digit_total_2, I_5, N_2, Temp_6, Total_3),
        (Total_5 == N_2)
    catch {return, Ret} -> Ret end.

narcissistic_number(N_3) ->
    try
        case (N_3 < 1) of
        true -> throw({return, false});
        _ -> ok
    end,
        Digits_3 = 0,
        Temp_7 = N_3,
        Fun_7 = fun Fun_7_loop(Digits_3, N_3, Temp_7) ->
    case (Temp_7 > 0) of
        true ->
            Temp_8 = (Temp_7 div 10),
            Digits_4 = (Digits_3 + 1),
            Fun_7_loop(Digits_4, N_3, Temp_8);
        _ -> {Digits_3, N_3, Temp_7}
    end
end,
{Digits_4, N_3, Temp_8} = Fun_7(Digits_3, N_3, Temp_7),
        Temp_9 = N_3,
        Total_6 = 0,
        Fun_8 = fun Fun_8_loop(Digits_4, N_3, Temp_9, Total_6) ->
    case (Temp_9 > 0) of
        true ->
            Rem_3 = mochi_mod(Temp_9, 10),
            Total_7 = (Total_6 + pow_int(Rem_3, Digits_4)),
            Temp_10 = (Temp_9 div 10),
            Fun_8_loop(Digits_4, N_3, Temp_10, Total_7);
        _ -> {Digits_4, N_3, Temp_9, Total_6}
    end
end,
{Digits_4, N_3, Temp_10, Total_7} = Fun_8(Digits_4, N_3, Temp_9, Total_6),
        (Total_7 == N_3)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(armstrong_number(371))]),
    io:format("~ts~n", [mochi_repr(armstrong_number(200))]),
    io:format("~ts~n", [mochi_repr(pluperfect_number(371))]),
    io:format("~ts~n", [mochi_repr(pluperfect_number(200))]),
    io:format("~ts~n", [mochi_repr(narcissistic_number(371))]),
    io:format("~ts~n", [mochi_repr(narcissistic_number(200))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
