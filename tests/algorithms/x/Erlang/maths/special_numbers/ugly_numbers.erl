#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ugly_numbers/1]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

ugly_numbers(N) ->
    try
        case (N =< 0) of
        true -> throw({return, 1});
        _ -> ok
    end,
        Ugly_nums = [],
        Ugly_nums_2 = lists:append((case Ugly_nums of nil -> []; _ -> Ugly_nums end), [1]),
        I2 = 0,
        I3 = 0,
        I5 = 0,
        Next_2 = 2,
        Next_3 = 3,
        Next_5 = 5,
        Count = 1,
        Fun = fun Fun_loop(Count, I2, I3, I5, N, Next_2, Next_3, Next_5, Ugly_nums_2) ->
    case (Count < N) of
        true ->
            Next_num = (case (Next_2 < Next_3) of
    true -> (case (Next_2 < Next_5) of
    true -> Next_2;
    _ -> Next_5
end);
    _ -> (case (Next_3 < Next_5) of
    true -> Next_3;
    _ -> Next_5
end)
end),
            Ugly_nums_3 = lists:append((case Ugly_nums_2 of nil -> []; _ -> Ugly_nums_2 end), [Next_num]),
            case (Next_num == Next_2) of
        true -> I2_2 = (I2 + 1),
            Next_2_2 = ((case erlang:is_map(Ugly_nums_3) of true -> maps:get(I2_2, Ugly_nums_3, nil); _ -> case I2_2 < 0 of true -> mochi_nth(erlang:length(Ugly_nums_3) + I2_2 + 1, Ugly_nums_3); _ -> mochi_nth(I2_2 + 1, Ugly_nums_3) end end) * 2),
            I2_3 = I2_2,
            Next_2_3 = Next_2_2;
        _ -> I2_3 = I2,
            Next_2_3 = Next_2
    end,
            case (Next_num == Next_3) of
        true -> I3_2 = (I3 + 1),
            Next_3_2 = ((case erlang:is_map(Ugly_nums_3) of true -> maps:get(I3_2, Ugly_nums_3, nil); _ -> case I3_2 < 0 of true -> mochi_nth(erlang:length(Ugly_nums_3) + I3_2 + 1, Ugly_nums_3); _ -> mochi_nth(I3_2 + 1, Ugly_nums_3) end end) * 3),
            I3_3 = I3_2,
            Next_3_3 = Next_3_2;
        _ -> I3_3 = I3,
            Next_3_3 = Next_3
    end,
            case (Next_num == Next_5) of
        true -> I5_2 = (I5 + 1),
            Next_5_2 = ((case erlang:is_map(Ugly_nums_3) of true -> maps:get(I5_2, Ugly_nums_3, nil); _ -> case I5_2 < 0 of true -> mochi_nth(erlang:length(Ugly_nums_3) + I5_2 + 1, Ugly_nums_3); _ -> mochi_nth(I5_2 + 1, Ugly_nums_3) end end) * 5),
            I5_3 = I5_2,
            Next_5_3 = Next_5_2;
        _ -> I5_3 = I5,
            Next_5_3 = Next_5
    end,
            Count_2 = (Count + 1),
            Fun_loop(Count_2, I2_3, I3_3, I5_3, N, Next_2_3, Next_3_3, Next_5_3, Ugly_nums_3);
        _ -> {Count, I2, I3, I5, N, Next_2, Next_3, Next_5, Ugly_nums_2}
    end
end,
{Count_2, I2_3, I3_3, I5_3, N, Next_2_3, Next_3_3, Next_5_3, Ugly_nums_3} = Fun(Count, I2, I3, I5, N, Next_2, Next_3, Next_5, Ugly_nums_2),
        (case erlang:is_map(Ugly_nums_3) of true -> maps:get((erlang:length(Ugly_nums_3) - 1), Ugly_nums_3, nil); _ -> case (erlang:length(Ugly_nums_3) - 1) < 0 of true -> mochi_nth(erlang:length(Ugly_nums_3) + (erlang:length(Ugly_nums_3) - 1) + 1, Ugly_nums_3); _ -> mochi_nth((erlang:length(Ugly_nums_3) - 1) + 1, Ugly_nums_3) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(ugly_numbers(100))]),
    io:format("~ts~n", [mochi_str(ugly_numbers(0))]),
    io:format("~ts~n", [mochi_str(ugly_numbers(20))]),
    io:format("~ts~n", [mochi_str(ugly_numbers(-5))]),
    io:format("~ts~n", [mochi_str(ugly_numbers(200))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
