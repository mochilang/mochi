#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, hamming/1]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

hamming(N) ->
    try
        case (N < 1) of
        true -> erlang:error({panic, "n_element should be a positive number"});
        _ -> ok
    end,
        Hamming_list = [1],
        I = 0,
        J = 0,
        K = 0,
        Index = 1,
        Fun_4 = fun Fun_4_loop(Hamming_list, I, Index, J, K, N) ->
    case (Index < N) of
        true ->
            Fun = fun Fun_loop(Hamming_list, I, Index, J, K, N) ->
    case (((case erlang:is_map(Hamming_list) of true -> maps:get(I, Hamming_list, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Hamming_list) + I + 1, Hamming_list); _ -> mochi_nth(I + 1, Hamming_list) end end) * 2) =< (case erlang:is_map(Hamming_list) of true -> maps:get((erlang:length(Hamming_list) - 1), Hamming_list, nil); _ -> case (erlang:length(Hamming_list) - 1) < 0 of true -> mochi_nth(erlang:length(Hamming_list) + (erlang:length(Hamming_list) - 1) + 1, Hamming_list); _ -> mochi_nth((erlang:length(Hamming_list) - 1) + 1, Hamming_list) end end)) of
        true ->
            I_2 = (I + 1),
            Fun_loop(Hamming_list, I_2, Index, J, K, N);
        _ -> {Hamming_list, I, Index, J, K, N}
    end
end,
{Hamming_list, I_2, Index, J, K, N} = Fun(Hamming_list, I, Index, J, K, N),
            Fun_2 = fun Fun_2_loop(Hamming_list, I_2, Index, J, K, N) ->
    case (((case erlang:is_map(Hamming_list) of true -> maps:get(J, Hamming_list, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Hamming_list) + J + 1, Hamming_list); _ -> mochi_nth(J + 1, Hamming_list) end end) * 3) =< (case erlang:is_map(Hamming_list) of true -> maps:get((erlang:length(Hamming_list) - 1), Hamming_list, nil); _ -> case (erlang:length(Hamming_list) - 1) < 0 of true -> mochi_nth(erlang:length(Hamming_list) + (erlang:length(Hamming_list) - 1) + 1, Hamming_list); _ -> mochi_nth((erlang:length(Hamming_list) - 1) + 1, Hamming_list) end end)) of
        true ->
            J_2 = (J + 1),
            Fun_2_loop(Hamming_list, I_2, Index, J_2, K, N);
        _ -> {Hamming_list, I_2, Index, J, K, N}
    end
end,
{Hamming_list, I_2, Index, J_2, K, N} = Fun_2(Hamming_list, I_2, Index, J, K, N),
            Fun_3 = fun Fun_3_loop(Hamming_list, I_2, Index, J_2, K, N) ->
    case (((case erlang:is_map(Hamming_list) of true -> maps:get(K, Hamming_list, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Hamming_list) + K + 1, Hamming_list); _ -> mochi_nth(K + 1, Hamming_list) end end) * 5) =< (case erlang:is_map(Hamming_list) of true -> maps:get((erlang:length(Hamming_list) - 1), Hamming_list, nil); _ -> case (erlang:length(Hamming_list) - 1) < 0 of true -> mochi_nth(erlang:length(Hamming_list) + (erlang:length(Hamming_list) - 1) + 1, Hamming_list); _ -> mochi_nth((erlang:length(Hamming_list) - 1) + 1, Hamming_list) end end)) of
        true ->
            K_2 = (K + 1),
            Fun_3_loop(Hamming_list, I_2, Index, J_2, K_2, N);
        _ -> {Hamming_list, I_2, Index, J_2, K, N}
    end
end,
{Hamming_list, I_2, Index, J_2, K_2, N} = Fun_3(Hamming_list, I_2, Index, J_2, K, N),
            M1 = ((case erlang:is_map(Hamming_list) of true -> maps:get(I_2, Hamming_list, nil); _ -> case I_2 < 0 of true -> mochi_nth(erlang:length(Hamming_list) + I_2 + 1, Hamming_list); _ -> mochi_nth(I_2 + 1, Hamming_list) end end) * 2),
            M2 = ((case erlang:is_map(Hamming_list) of true -> maps:get(J_2, Hamming_list, nil); _ -> case J_2 < 0 of true -> mochi_nth(erlang:length(Hamming_list) + J_2 + 1, Hamming_list); _ -> mochi_nth(J_2 + 1, Hamming_list) end end) * 3),
            M3 = ((case erlang:is_map(Hamming_list) of true -> maps:get(K_2, Hamming_list, nil); _ -> case K_2 < 0 of true -> mochi_nth(erlang:length(Hamming_list) + K_2 + 1, Hamming_list); _ -> mochi_nth(K_2 + 1, Hamming_list) end end) * 5),
            Next = M1,
            Next_3 = (case (M2 < Next) of
        true -> Next_2 = M2,
            Next_2;
        _ -> Next
    end),
            Next_5 = (case (M3 < Next_3) of
        true -> Next_4 = M3,
            Next_4;
        _ -> Next_3
    end),
            Hamming_list_2 = lists:append((case Hamming_list of nil -> []; _ -> Hamming_list end), [Next_5]),
            Index_2 = (Index + 1),
            Fun_4_loop(Hamming_list_2, I_2, Index_2, J_2, K_2, N);
        _ -> {Hamming_list, I, Index, J, K, N}
    end
end,
{Hamming_list_2, I_2, Index_2, J_2, K_2, N} = Fun_4(Hamming_list, I, Index, J, K, N),
        Hamming_list_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(hamming(5))]),
    io:format("~ts~n", [mochi_repr(hamming(10))]),
    io:format("~ts~n", [mochi_repr(hamming(15))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
