#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, pow2/1, proth/1, main/0]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.

pow2(Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = (Result * 2),
            I_2 = (I + 1),
            Fun_loop(Exp, I_2, Result_2);
        _ -> {Exp, I, Result}
    end
end,
{Exp, I_2, Result_2} = Fun(Exp, I, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

proth(Number) ->
    try
        case (Number < 1) of
        true -> erlang:error({panic, "Input value must be > 0"});
        _ -> ok
    end,
        case (Number == 1) of
        true -> throw({return, 3});
        _ -> ok
    end,
        case (Number == 2) of
        true -> throw({return, 5});
        _ -> ok
    end,
        Temp = mochi_to_int(mochi_idiv(Number, 3)),
        Pow = 1,
        Block_index = 1,
        Fun_2 = fun Fun_2_loop(Block_index, Number, Pow, Temp) ->
    case (Pow =< Temp) of
        true ->
            Pow_2 = (Pow * 2),
            Block_index_2 = (Block_index + 1),
            Fun_2_loop(Block_index_2, Number, Pow_2, Temp);
        _ -> {Block_index, Number, Pow, Temp}
    end
end,
{Block_index_2, Number, Pow_2, Temp} = Fun_2(Block_index, Number, Pow, Temp),
        Proth_list = [3, 5],
        Proth_index = 2,
        Increment = 3,
        Block = 1,
        Fun_4 = fun Fun_4_loop(Block, Block_index_2, Increment, Number, Pow_2, Proth_index, Proth_list, Temp) ->
    case (Block < Block_index_2) of
        true ->
            I_3 = 0,
            Fun_3 = fun Fun_3_loop(Block, Block_index_2, I_3, Increment, Number, Pow_2, Proth_index, Proth_list, Temp) ->
    case (I_3 < Increment) of
        true ->
            Next_val = (pow2((Block + 1)) + (case erlang:is_map(Proth_list) of true -> maps:get((Proth_index - 1), Proth_list, nil); _ -> case (Proth_index - 1) < 0 of true -> mochi_nth(erlang:length(Proth_list) + (Proth_index - 1) + 1, Proth_list); _ -> mochi_nth((Proth_index - 1) + 1, Proth_list) end end)),
            Proth_list_2 = lists:append((case Proth_list of nil -> []; _ -> Proth_list end), [Next_val]),
            Proth_index_2 = (Proth_index + 1),
            I_4 = (I_3 + 1),
            Fun_3_loop(Block, Block_index_2, I_4, Increment, Number, Pow_2, Proth_index_2, Proth_list_2, Temp);
        _ -> {Block, Block_index_2, I_3, Increment, Number, Pow_2, Proth_index, Proth_list, Temp}
    end
end,
{Block, Block_index_2, I_4, Increment, Number, Pow_2, Proth_index_2, Proth_list_2, Temp} = Fun_3(Block, Block_index_2, I_3, Increment, Number, Pow_2, Proth_index, Proth_list, Temp),
            Increment_2 = (Increment * 2),
            Block_2 = (Block + 1),
            Fun_4_loop(Block_2, Block_index_2, Increment_2, Number, Pow_2, Proth_index_2, Proth_list_2, Temp);
        _ -> {Block, Block_index_2, Increment, Number, Pow_2, Proth_index, Proth_list, Temp}
    end
end,
{Block_2, Block_index_2, Increment_2, Number, Pow_2, Proth_index_2, Proth_list_2, Temp} = Fun_4(Block, Block_index_2, Increment, Number, Pow_2, Proth_index, Proth_list, Temp),
        (case erlang:is_map(Proth_list_2) of true -> maps:get((Number - 1), Proth_list_2, nil); _ -> case (Number - 1) < 0 of true -> mochi_nth(erlang:length(Proth_list_2) + (Number - 1) + 1, Proth_list_2); _ -> mochi_nth((Number - 1) + 1, Proth_list_2) end end)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        N = 1,
        Fun_5 = fun Fun_5_loop(N) ->
    case (N =< 10) of
        true ->
            Value = proth(N),
            io:format("~ts~n", [mochi_repr(((("The " ++ mochi_str(N)) ++ "th Proth number: ") ++ mochi_str(Value)))]),
            N_2 = (N + 1),
            Fun_5_loop(N_2);
        _ -> {N}
    end
end,
{N_2} = Fun_5(N),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
