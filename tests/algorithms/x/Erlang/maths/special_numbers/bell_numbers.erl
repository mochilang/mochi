#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, binomial_coefficient/2, bell_numbers/1, main/0]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.

binomial_coefficient(Total_elements, Elements_to_choose) ->
    try
        case ((Elements_to_choose == 0) orelse (Elements_to_choose == Total_elements)) of
        true -> throw({return, 1});
        _ -> ok
    end,
        K = Elements_to_choose,
        K_3 = (case (K > (Total_elements - K)) of
        true -> K_2 = (Total_elements - K),
            K_2;
        _ -> K
    end),
        Coefficient = 1,
        I = 0,
        Fun = fun Fun_loop(Coefficient, Elements_to_choose, I, K_3, Total_elements) ->
    case (I < K_3) of
        true ->
            Coefficient_2 = (Coefficient * (Total_elements - I)),
            Coefficient_3 = mochi_idiv(Coefficient_2, (I + 1)),
            I_2 = (I + 1),
            Fun_loop(Coefficient_3, Elements_to_choose, I_2, K_3, Total_elements);
        _ -> {Coefficient, Elements_to_choose, I, K_3, Total_elements}
    end
end,
{Coefficient_3, Elements_to_choose, I_2, K_3, Total_elements} = Fun(Coefficient, Elements_to_choose, I, K_3, Total_elements),
        Coefficient_3
    catch {return, RetCatch} -> RetCatch end.

bell_numbers(Max_set_length) ->
    try
        case (Max_set_length < 0) of
        true -> erlang:error({panic, "max_set_length must be non-negative"});
        _ -> ok
    end,
        Bell = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Bell, I_3, Max_set_length) ->
    case (I_3 =< Max_set_length) of
        true ->
            Bell_2 = lists:append((case Bell of nil -> []; _ -> Bell end), [0]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Bell_2, I_4, Max_set_length);
        _ -> {Bell, I_3, Max_set_length}
    end
end,
{Bell_2, I_4, Max_set_length} = Fun_2(Bell, I_3, Max_set_length),
        Bell_3 = lists:sublist(Bell_2, 0) ++ [1] ++ lists:nthtail(0 + 1, Bell_2),
        I_5 = 1,
        Fun_4 = fun Fun_4_loop(Bell_3, I_5, Max_set_length) ->
    case (I_5 =< Max_set_length) of
        true ->
            J = 0,
            Fun_3 = fun Fun_3_loop(Bell_3, I_5, J, Max_set_length) ->
    case (J < I_5) of
        true ->
            Bell_4 = lists:sublist(Bell_3, I_5) ++ [((case erlang:is_map(Bell_3) of true -> maps:get(I_5, Bell_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Bell_3) + I_5 + 1, Bell_3); _ -> mochi_nth(I_5 + 1, Bell_3) end end) + (binomial_coefficient((I_5 - 1), J) * (case erlang:is_map(Bell_3) of true -> maps:get(J, Bell_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Bell_3) + J + 1, Bell_3); _ -> mochi_nth(J + 1, Bell_3) end end)))] ++ lists:nthtail(I_5 + 1, Bell_3),
            J_2 = (J + 1),
            Fun_3_loop(Bell_4, I_5, J_2, Max_set_length);
        _ -> {Bell_3, I_5, J, Max_set_length}
    end
end,
{Bell_4, I_5, J_2, Max_set_length} = Fun_3(Bell_3, I_5, J, Max_set_length),
            I_6 = (I_5 + 1),
            Fun_4_loop(Bell_4, I_6, Max_set_length);
        _ -> {Bell_3, I_5, Max_set_length}
    end
end,
{Bell_4, I_6, Max_set_length} = Fun_4(Bell_3, I_5, Max_set_length),
        Bell_4
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_str(bell_numbers(5))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
