#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, panic/1, char_to_value/1, int_to_base/2, base_to_int/2, sum_of_digits/2, harshad_numbers_in_base/2, is_harshad_number_in_base/2, main/0]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

panic(Msg) ->
    try
        nil
    catch {return, RetCatch} -> RetCatch end.

char_to_value(C) ->
    try
        Digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        I = 0,
        Fun = fun Fun_loop(C, Digits, I) ->
    case (I < erlang:length(Digits)) of
        true ->
            case (string:substr(Digits, I + 1, 1) == C) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(C, Digits, I_2);
        _ -> {C, Digits, I}
    end
end,
{C, Digits, I_2} = Fun(C, Digits, I),
        erlang:error({panic, "invalid digit"}),
        nil
    catch {return, RetCatch} -> RetCatch end.

int_to_base(Number, Base) ->
    try
        case ((Base < 2) orelse (Base > 36)) of
        true -> erlang:error({panic, "'base' must be between 2 and 36 inclusive"});
        _ -> ok
    end,
        case (Number < 0) of
        true -> erlang:error({panic, "number must be a positive integer"});
        _ -> ok
    end,
        Digits_2 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        N = Number,
        Result = "",
        Fun_2 = fun Fun_2_loop(Base, Digits_2, N, Number, Result) ->
    case (N > 0) of
        true ->
            Remainder = mochi_mod(N, Base),
            Result_2 = (string:substr(Digits_2, Remainder + 1, 1) ++ Result),
            N_2 = mochi_idiv(N, Base),
            Fun_2_loop(Base, Digits_2, N_2, Number, Result_2);
        _ -> {Base, Digits_2, N, Number, Result}
    end
end,
{Base, Digits_2, N_2, Number, Result_2} = Fun_2(Base, Digits_2, N, Number, Result),
        Result_4 = (case (Result_2 == "") of
        true -> Result_3 = "0",
            Result_3;
        _ -> Result_2
    end),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

base_to_int(Num_str, Base_2) ->
    try
        Value = 0,
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Base_2, I_3, Num_str, Value) ->
    case (I_3 < erlang:length(Num_str)) of
        true ->
            C_2 = string:substr(Num_str, I_3 + 1, 1),
            Value_2 = ((Value * Base_2) + char_to_value(C_2)),
            I_4 = (I_3 + 1),
            Fun_3_loop(Base_2, I_4, Num_str, Value_2);
        _ -> {Base_2, I_3, Num_str, Value}
    end
end,
{Base_2, I_4, Num_str, Value_2} = Fun_3(Base_2, I_3, Num_str, Value),
        Value_2
    catch {return, RetCatch} -> RetCatch end.

sum_of_digits(Num, Base_3) ->
    try
        case ((Base_3 < 2) orelse (Base_3 > 36)) of
        true -> erlang:error({panic, "'base' must be between 2 and 36 inclusive"});
        _ -> ok
    end,
        Num_str_2 = int_to_base(Num, Base_3),
        Total = 0,
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Base_3, I_5, Num, Num_str_2, Total) ->
    case (I_5 < erlang:length(Num_str_2)) of
        true ->
            C_3 = string:substr(Num_str_2, I_5 + 1, 1),
            Total_2 = (Total + char_to_value(C_3)),
            I_6 = (I_5 + 1),
            Fun_4_loop(Base_3, I_6, Num, Num_str_2, Total_2);
        _ -> {Base_3, I_5, Num, Num_str_2, Total}
    end
end,
{Base_3, I_6, Num, Num_str_2, Total_2} = Fun_4(Base_3, I_5, Num, Num_str_2, Total),
        int_to_base(Total_2, Base_3)
    catch {return, RetCatch} -> RetCatch end.

harshad_numbers_in_base(Limit, Base_4) ->
    try
        case ((Base_4 < 2) orelse (Base_4 > 36)) of
        true -> erlang:error({panic, "'base' must be between 2 and 36 inclusive"});
        _ -> ok
    end,
        case (Limit < 0) of
        true -> throw({return, []});
        _ -> ok
    end,
        Numbers = [],
        I_7 = 1,
        Fun_5 = fun Fun_5_loop(Base_4, I_7, Limit, Numbers) ->
    case (I_7 < Limit) of
        true ->
            S = sum_of_digits(I_7, Base_4),
            Divisor = base_to_int(S, Base_4),
            Numbers_3 = (case (mochi_mod(I_7, Divisor) == 0) of
        true -> Numbers_2 = lists:append((case Numbers of nil -> []; _ -> Numbers end), [int_to_base(I_7, Base_4)]),
            Numbers_2;
        _ -> Numbers
    end),
            I_8 = (I_7 + 1),
            Fun_5_loop(Base_4, I_8, Limit, Numbers_3);
        _ -> {Base_4, I_7, Limit, Numbers}
    end
end,
{Base_4, I_8, Limit, Numbers_3} = Fun_5(Base_4, I_7, Limit, Numbers),
        Numbers_3
    catch {return, RetCatch} -> RetCatch end.

is_harshad_number_in_base(Num_2, Base_5) ->
    try
        case ((Base_5 < 2) orelse (Base_5 > 36)) of
        true -> erlang:error({panic, "'base' must be between 2 and 36 inclusive"});
        _ -> ok
    end,
        case (Num_2 < 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        N_3 = int_to_base(Num_2, Base_5),
        D = sum_of_digits(Num_2, Base_5),
        N_val = base_to_int(N_3, Base_5),
        D_val = base_to_int(D, Base_5),
        (mochi_mod(N_val, D_val) == 0)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(int_to_base(0, 21))]),
        io:format("~ts~n", [mochi_repr(int_to_base(23, 2))]),
        io:format("~ts~n", [mochi_repr(int_to_base(58, 5))]),
        io:format("~ts~n", [mochi_repr(int_to_base(167, 16))]),
        io:format("~ts~n", [mochi_repr(sum_of_digits(103, 12))]),
        io:format("~ts~n", [mochi_repr(sum_of_digits(1275, 4))]),
        io:format("~ts~n", [mochi_repr(sum_of_digits(6645, 2))]),
        io:format("~ts~n", [mochi_repr(harshad_numbers_in_base(15, 2))]),
        io:format("~ts~n", [mochi_repr(harshad_numbers_in_base(12, 34))]),
        io:format("~ts~n", [mochi_repr(harshad_numbers_in_base(12, 4))]),
        io:format("~ts~n", [mochi_repr(is_harshad_number_in_base(18, 10))]),
        io:format("~ts~n", [mochi_repr(is_harshad_number_in_base(21, 10))]),
        io:format("~ts~n", [mochi_repr(is_harshad_number_in_base(-21, 5))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
