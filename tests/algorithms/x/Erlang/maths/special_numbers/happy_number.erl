#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, is_happy_number/1, test_is_happy_number/0, main/0]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

is_happy_number(Num) ->
    try
        case (Num =< 0) of
        true -> erlang:error({panic, "num must be a positive integer"});
        _ -> ok
    end,
        Seen = [],
        N = Num,
        Fun_3 = fun Fun_3_loop(N, Num, Seen) ->
    case (N /= 1) of
        true ->
            I = 0,
            Fun = fun Fun_loop(I, N, Num, Seen) ->
    case (I < erlang:length(Seen)) of
        true ->
            case ((case erlang:is_map(Seen) of true -> maps:get(I, Seen, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Seen) + I + 1, Seen); _ -> mochi_nth(I + 1, Seen) end end) == N) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, N, Num, Seen);
        _ -> {I, N, Num, Seen}
    end
end,
{I_2, N, Num, Seen} = Fun(I, N, Num, Seen),
            Seen_2 = lists:append((case Seen of nil -> []; _ -> Seen end), [N]),
            Total = 0,
            Temp = N,
            Fun_2 = fun Fun_2_loop(I_2, N, Num, Seen_2, Temp, Total) ->
    case (Temp > 0) of
        true ->
            Digit = mochi_mod(Temp, 10),
            Total_2 = (Total + (Digit * Digit)),
            Temp_2 = mochi_idiv(Temp, 10),
            Fun_2_loop(I_2, N, Num, Seen_2, Temp_2, Total_2);
        _ -> {I_2, N, Num, Seen_2, Temp, Total}
    end
end,
{I_2, N, Num, Seen_2, Temp_2, Total_2} = Fun_2(I_2, N, Num, Seen_2, Temp, Total),
            N_2 = Total_2,
            Fun_3_loop(N_2, Num, Seen_2);
        _ -> {N, Num, Seen}
    end
end,
{N_2, Num, Seen_2} = Fun_3(N, Num, Seen),
        true
    catch {return, RetCatch} -> RetCatch end.

test_is_happy_number() ->
    try
        case mochi_not(is_happy_number(19)) of
        true -> erlang:error({panic, "19 should be happy"});
        _ -> ok
    end,
        case is_happy_number(2) of
        true -> erlang:error({panic, "2 should be unhappy"});
        _ -> ok
    end,
        case mochi_not(is_happy_number(23)) of
        true -> erlang:error({panic, "23 should be happy"});
        _ -> ok
    end,
        case mochi_not(is_happy_number(1)) of
        true -> erlang:error({panic, "1 should be happy"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_is_happy_number(),
        io:format("~ts~n", [mochi_repr(is_happy_number(19))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
