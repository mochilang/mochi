#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, absf/1, sqrt/1, ln/1, exp_series/1, powf/2, integrand/2, gamma_iterative/1, gamma_recursive/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

absf(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

sqrt(X_2) ->
    try
        case (X_2 < 0.0) of
        true -> erlang:error("sqrt domain error");
        _ -> ok
    end,
        Guess = mochi_safe_div(X_2, 2.0),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_2, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, Ret} -> Ret end.

ln(X_3) ->
    try
        case (X_3 =< 0.0) of
        true -> erlang:error("ln domain error");
        _ -> ok
    end,
        Y = mochi_safe_div((X_3 - 1.0), (X_3 + 1.0)),
        Y2 = mochi_safe_mul(Y, Y),
        Term = Y,
        Sum = 0.0,
        K = 0,
        Fun_2 = fun Fun_2_loop(K, Sum, Term, X_3, Y, Y2) ->
    case (K < 10) of
        true ->
            Denom = float(((2 * K) + 1)),
            Sum_2 = (Sum + mochi_safe_div(Term, Denom)),
            Term_2 = mochi_safe_mul(Term, Y2),
            K_2 = (K + 1),
            Fun_2_loop(K_2, Sum_2, Term_2, X_3, Y, Y2);
        _ -> {K, Sum, Term, X_3, Y, Y2}
    end
end,
{K_2, Sum_2, Term_2, X_3, Y, Y2} = Fun_2(K, Sum, Term, X_3, Y, Y2),
        mochi_safe_mul(2.0, Sum_2)
    catch {return, Ret} -> Ret end.

exp_series(X_4) ->
    try
        Term_3 = 1.0,
        Sum_3 = 1.0,
        N = 1,
        Fun_3 = fun Fun_3_loop(N, Sum_3, Term_3, X_4) ->
    case (N < 20) of
        true ->
            Term_4 = mochi_safe_div(mochi_safe_mul(Term_3, X_4), float(N)),
            Sum_4 = (Sum_3 + Term_4),
            N_2 = (N + 1),
            Fun_3_loop(N_2, Sum_4, Term_4, X_4);
        _ -> {N, Sum_3, Term_3, X_4}
    end
end,
{N_2, Sum_4, Term_4, X_4} = Fun_3(N, Sum_3, Term_3, X_4),
        Sum_4
    catch {return, Ret} -> Ret end.

powf(Base, Exponent) ->
    try
        (case (Base =< 0.0) of
    true -> 0.0;
    _ -> exp_series(mochi_safe_mul(Exponent, ln(Base)))
end)
    catch {return, Ret} -> Ret end.

integrand(X_5, Z) ->
    try
        mochi_safe_mul(powf(X_5, (Z - 1.0)), exp_series(-X_5))
    catch {return, Ret} -> Ret end.

gamma_iterative(Num) ->
    try
        case (Num =< 0.0) of
        true -> erlang:error("math domain error");
        _ -> ok
    end,
        Step = 0.001,
        Limit = 100.0,
        X_6 = 0.001,
        Total = 0.0,
        Fun_4 = fun Fun_4_loop(Limit, Num, Step, Total, X_6) ->
    case (X_6 < Limit) of
        true ->
            Total_2 = (Total + mochi_safe_mul(integrand(X_6, Num), Step)),
            X_7 = (X_6 + Step),
            Fun_4_loop(Limit, Num, Step, Total_2, X_7);
        _ -> {Limit, Num, Step, Total, X_6}
    end
end,
{Limit, Num, Step, Total_2, X_7} = Fun_4(Limit, Num, Step, Total, X_6),
        Total_2
    catch {return, Ret} -> Ret end.

gamma_recursive(Num_2) ->
    try
        case (Num_2 =< 0.0) of
        true -> erlang:error("math domain error");
        _ -> ok
    end,
        case (Num_2 > 171.5) of
        true -> erlang:error("math range error");
        _ -> ok
    end,
        Int_part = mochi_to_int(Num_2),
        Frac = (Num_2 - float(Int_part)),
        case mochi_not(((absf(Frac) < 0.000001) orelse (absf((Frac - 0.5)) < 0.000001))) of
        true -> erlang:error("num must be an integer or a half-integer");
        _ -> ok
    end,
        case (absf((Num_2 - 0.5)) < 0.000001) of
        true -> throw({return, sqrt(3.141592653589793)});
        _ -> ok
    end,
        case (absf((Num_2 - 1.0)) < 0.000001) of
        true -> throw({return, 1.0});
        _ -> ok
    end,
        mochi_safe_mul((Num_2 - 1.0), gamma_recursive((Num_2 - 1.0)))
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(gamma_iterative(5.0))]),
        io:format("~ts~n", [mochi_repr(gamma_recursive(5.0))]),
        io:format("~ts~n", [mochi_repr(gamma_recursive(0.5))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
