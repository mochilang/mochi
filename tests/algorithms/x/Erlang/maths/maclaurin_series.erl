#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, floor/1, pow/2, factorial/1, maclaurin_sin/2, maclaurin_cos/2]).

-compile({no_auto_import,[floor/1]}).
% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

floor(X) ->
    try
        I = mochi_to_int(X),
        case (float(I) > X) of
        true -> I_2 = (I - 1),
            I_3 = I_2;
        _ -> I_3 = I
    end,
        float(I_3)
    catch {return, RetCatch} -> RetCatch end.

pow(X_2, N) ->
    try
        Result = 1.0,
        I_4 = 0,
        Fun = fun Fun_loop(I_4, N, Result, X_2) ->
    case (I_4 < N) of
        true ->
            Result_2 = mochi_safe_mul(Result, X_2),
            I_5 = (I_4 + 1),
            Fun_loop(I_5, N, Result_2, X_2);
        _ -> {I_4, N, Result, X_2}
    end
end,
{I_5, N, Result_2, X_2} = Fun(I_4, N, Result, X_2),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

factorial(N_2) ->
    try
        Result_3 = 1.0,
        I_6 = 2,
        Fun_2 = fun Fun_2_loop(I_6, N_2, Result_3) ->
    case (I_6 =< N_2) of
        true ->
            Result_4 = mochi_safe_mul(Result_3, float(I_6)),
            I_7 = (I_6 + 1),
            Fun_2_loop(I_7, N_2, Result_4);
        _ -> {I_6, N_2, Result_3}
    end
end,
{I_7, N_2, Result_4} = Fun_2(I_6, N_2, Result_3),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

maclaurin_sin(Theta, Accuracy) ->
    try
        T = Theta,
        Div = floor(mochi_safe_div(T, mochi_safe_mul(2.0, 3.141592653589793))),
        T_2 = (T - mochi_safe_mul(mochi_safe_mul(2.0, Div), 3.141592653589793)),
        Sum = 0.0,
        R = 0,
        Fun_3 = fun Fun_3_loop(Accuracy, Div, R, Sum, T_2, Theta) ->
    case (R < Accuracy) of
        true ->
            Power = ((2 * R) + 1),
            Sign = (case (mochi_mod(R, 2) == 0) of
    true -> 1.0;
    _ -> -1.0
end),
            Sum_2 = (Sum + mochi_safe_div(mochi_safe_mul(Sign, math:pow(T_2, Power)), factorial(Power))),
            R_2 = (R + 1),
            Fun_3_loop(Accuracy, Div, R_2, Sum_2, T_2, Theta);
        _ -> {Accuracy, Div, R, Sum, T_2, Theta}
    end
end,
{Accuracy, Div, R_2, Sum_2, T_2, Theta} = Fun_3(Accuracy, Div, R, Sum, T_2, Theta),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

maclaurin_cos(Theta_2, Accuracy_2) ->
    try
        T_3 = Theta_2,
        Div_2 = floor(mochi_safe_div(T_3, mochi_safe_mul(2.0, 3.141592653589793))),
        T_4 = (T_3 - mochi_safe_mul(mochi_safe_mul(2.0, Div_2), 3.141592653589793)),
        Sum_3 = 0.0,
        R_3 = 0,
        Fun_4 = fun Fun_4_loop(Accuracy_2, Div_2, R_3, Sum_3, T_4, Theta_2) ->
    case (R_3 < Accuracy_2) of
        true ->
            Power_2 = (2 * R_3),
            Sign_2 = (case (mochi_mod(R_3, 2) == 0) of
    true -> 1.0;
    _ -> -1.0
end),
            Sum_4 = (Sum_3 + mochi_safe_div(mochi_safe_mul(Sign_2, math:pow(T_4, Power_2)), factorial(Power_2))),
            R_4 = (R_3 + 1),
            Fun_4_loop(Accuracy_2, Div_2, R_4, Sum_4, T_4, Theta_2);
        _ -> {Accuracy_2, Div_2, R_3, Sum_3, T_4, Theta_2}
    end
end,
{Accuracy_2, Div_2, R_4, Sum_4, T_4, Theta_2} = Fun_4(Accuracy_2, Div_2, R_3, Sum_3, T_4, Theta_2),
        Sum_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    io:format("~ts~n", [mochi_str(maclaurin_sin(10.0, 30))]),
    io:format("~ts~n", [mochi_str(maclaurin_sin(-10.0, 30))]),
    io:format("~ts~n", [mochi_str(maclaurin_sin(10.0, 15))]),
    io:format("~ts~n", [mochi_str(maclaurin_sin(-10.0, 15))]),
    io:format("~ts~n", [mochi_str(maclaurin_cos(5.0, 30))]),
    io:format("~ts~n", [mochi_str(maclaurin_cos(-5.0, 30))]),
    io:format("~ts~n", [mochi_str(maclaurin_cos(10.0, 15))]),
    io:format("~ts~n", [mochi_str(maclaurin_cos(-10.0, 15))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
