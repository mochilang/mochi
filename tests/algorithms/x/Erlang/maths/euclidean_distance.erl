#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrtapprox/1, euclidean_distance/2, euclidean_distance_no_np/2, main/0]).

% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

sqrtapprox(X) ->
    try
        case (X =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

euclidean_distance(V1, V2) ->
    try
        Sum = 0.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Sum, V1, V2) ->
    case (I_3 < erlang:length(V1)) of
        true ->
            Diff = ((case erlang:is_map(V1) of true -> maps:get(I_3, V1, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(V1) + I_3 + 1, V1); _ -> mochi_nth(I_3 + 1, V1) end end) - (case erlang:is_map(V2) of true -> maps:get(I_3, V2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(V2) + I_3 + 1, V2); _ -> mochi_nth(I_3 + 1, V2) end end)),
            Sum_2 = (Sum + mochi_safe_mul(Diff, Diff)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Sum_2, V1, V2);
        _ -> {I_3, Sum, V1, V2}
    end
end,
{I_4, Sum_2, V1, V2} = Fun_2(I_3, Sum, V1, V2),
        sqrtapprox(Sum_2)
    catch {return, RetCatch} -> RetCatch end.

euclidean_distance_no_np(V1_2, V2_2) ->
    try
        euclidean_distance(V1_2, V2_2)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_str(euclidean_distance([0.0, 0.0], [2.0, 2.0]))]),
        io:format("~ts~n", [mochi_str(euclidean_distance([0.0, 0.0, 0.0], [2.0, 2.0, 2.0]))]),
        io:format("~ts~n", [mochi_str(euclidean_distance([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0]))]),
        io:format("~ts~n", [mochi_str(euclidean_distance_no_np([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0]))]),
        io:format("~ts~n", [mochi_str(euclidean_distance_no_np([0.0, 0.0], [2.0, 2.0]))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
