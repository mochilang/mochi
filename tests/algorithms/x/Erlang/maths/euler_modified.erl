#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ceil_float/1, exp_approx/1, euler_modified/5, f1/2, f2/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

ceil_float(X) ->
    try
        I = mochi_to_int(X),
        case (X > float(I)) of
        true -> throw({return, (I + 1)});
        _ -> ok
    end,
        I
    catch {return, Ret} -> Ret end.

exp_approx(X_2) ->
    try
        Term = 1.0,
        Sum = 1.0,
        N = 1,
        Fun = fun Fun_loop(N, Sum, Term, X_2) ->
    case (N < 20) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X_2), float(N)),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(N_2, Sum_2, Term_2, X_2);
        _ -> {N, Sum, Term, X_2}
    end
end,
{N_2, Sum_2, Term_2, X_2} = Fun(N, Sum, Term, X_2),
        Sum_2
    catch {return, Ret} -> Ret end.

euler_modified(Ode_func, Y0, X0, Step, X_end) ->
    try
        N_3 = ceil_float(mochi_safe_div((X_end - X0), Step)),
        Y = [Y0],
        X_3 = X0,
        K = 0,
        Fun_2 = fun Fun_2_loop(K, N_3, Ode_func, Step, X_3, X0, X_end, Y, Y0) ->
    case (K < N_3) of
        true ->
            Y_predict = ((case erlang:is_map(Y) of true -> maps:get(K, Y, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Y) + K + 1, Y); _ -> mochi_nth(K + 1, Y) end end) + mochi_safe_mul(Step, Ode_func(X_3, (case erlang:is_map(Y) of true -> maps:get(K, Y, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Y) + K + 1, Y); _ -> mochi_nth(K + 1, Y) end end)))),
            Slope1 = Ode_func(X_3, (case erlang:is_map(Y) of true -> maps:get(K, Y, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Y) + K + 1, Y); _ -> mochi_nth(K + 1, Y) end end)),
            Slope2 = Ode_func((X_3 + Step), Y_predict),
            Y_next = ((case erlang:is_map(Y) of true -> maps:get(K, Y, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Y) + K + 1, Y); _ -> mochi_nth(K + 1, Y) end end) + mochi_safe_mul(mochi_safe_div(Step, 2.0), (Slope1 + Slope2))),
            Y_2 = lists:append((case Y of nil -> []; _ -> Y end), [Y_next]),
            X_4 = (X_3 + Step),
            K_2 = (K + 1),
            Fun_2_loop(K_2, N_3, Ode_func, Step, X_4, X0, X_end, Y_2, Y0);
        _ -> {K, N_3, Ode_func, Step, X_3, X0, X_end, Y, Y0}
    end
end,
{K_2, N_3, Ode_func, Step, X_4, X0, X_end, Y_2, Y0} = Fun_2(K, N_3, Ode_func, Step, X_3, X0, X_end, Y, Y0),
        Y_2
    catch {return, Ret} -> Ret end.

f1(X_5, Y_3) ->
    try
        mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(-2.0, X_5), Y_3), Y_3)
    catch {return, Ret} -> Ret end.

f2(X_6, Y_4) ->
    try
        (mochi_safe_mul(-2.0, Y_4) + mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(X_6, X_6), X_6), exp_approx(mochi_safe_mul(-2.0, X_6))))
    catch {return, Ret} -> Ret end.

main() ->
    try
        Y1 = euler_modified(fun f1/2, 1.0, 0.0, 0.2, 1.0),
        io:format("~ts~n", [mochi_repr((case erlang:is_map(Y1) of true -> maps:get((erlang:length(Y1) - 1), Y1, nil); _ -> case (erlang:length(Y1) - 1) < 0 of true -> mochi_nth(erlang:length(Y1) + (erlang:length(Y1) - 1) + 1, Y1); _ -> mochi_nth((erlang:length(Y1) - 1) + 1, Y1) end end))]),
        Y2 = euler_modified(fun f2/2, 1.0, 0.0, 0.1, 0.3),
        io:format("~ts~n", [mochi_repr((case erlang:is_map(Y2) of true -> maps:get((erlang:length(Y2) - 1), Y2, nil); _ -> case (erlang:length(Y2) - 1) < 0 of true -> mochi_nth(erlang:length(Y2) + (erlang:length(Y2) - 1) + 1, Y2); _ -> mochi_nth((erlang:length(Y2) - 1) + 1, Y2) end end))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
