#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, primefactors/1, issquarefree/1, mobius/1]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

primefactors(N) ->
    try
        I = 2,
        Factors = [],
        Fun = fun Fun_loop(Factors, I, N) ->
    case ((I * I) =< N) of
        true ->
            case (mochi_mod(N, I) == 0) of
        true -> Factors_2 = lists:append((case Factors of nil -> []; _ -> Factors end), [I]),
            N_2 = (N div I),
            Factors_3 = Factors_2,
            I_3 = I,
            N_3 = N_2;
        _ -> I_2 = (I + 1),
            Factors_3 = Factors,
            I_3 = I_2,
            N_3 = N
    end,
            Fun_loop(Factors_3, I_3, N_3);
        _ -> {Factors, I, N}
    end
end,
{Factors_3, I_3, N_3} = Fun(Factors, I, N),
        case (N_3 > 1) of
        true -> Factors_4 = lists:append((case Factors_3 of nil -> []; _ -> Factors_3 end), [N_3]),
            Factors_5 = Factors_4;
        _ -> Factors_5 = Factors_3
    end,
        Factors_5
    catch {return, Ret} -> Ret end.

issquarefree(Factors_6) ->
    try
        Seen = #{},
        Fun_2 = fun Fun_2_loop(List, Factors_6, Seen) ->
    case List of
        [] -> {Factors_6, Seen};
        [F|F_rest] ->
            case maps:is_key(F, Seen) of
        true -> throw({return, false});
        _ -> ok
    end,
            Seen_2 = maps:put(F, true, Seen),
            Fun_2_loop(F_rest, Factors_6, Seen_2);
        _ -> {Factors_6, Seen}
    end
end,
{Factors_6, Seen_2} = Fun_2(Factors_6, Factors_6, Seen),
        true
    catch {return, Ret} -> Ret end.

mobius(N_4) ->
    try
        Factors_7 = primefactors(N_4),
        case issquarefree(Factors_7) of
        true -> throw({return, (case (mochi_mod(erlang:length(Factors_7), 2) == 0) of
    true -> 1;
    _ -> -1
end)});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(mobius(24))]),
    io:format("~ts~n", [mochi_repr(mobius(-1))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
