#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, josephus_recursive/2, find_winner/2, remove_at/2, josephus_iterative/2]).

% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

josephus_recursive(Num_people, Step_size) ->
    try
        case ((Num_people =< 0) orelse (Step_size =< 0)) of
        true -> erlang:error({panic, "num_people or step_size is not a positive integer."});
        _ -> ok
    end,
        case (Num_people == 1) of
        true -> throw({return, 0});
        _ -> ok
    end,
        mochi_mod((josephus_recursive((Num_people - 1), Step_size) + Step_size), Num_people)
    catch {return, RetCatch} -> RetCatch end.

find_winner(Num_people_2, Step_size_2) ->
    try
        (josephus_recursive(Num_people_2, Step_size_2) + 1)
    catch {return, RetCatch} -> RetCatch end.

remove_at(Xs, Idx) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, Idx, Res, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case (I /= Idx) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Idx, Res_3, Xs);
        _ -> {I, Idx, Res, Xs}
    end
end,
{I_2, Idx, Res_3, Xs} = Fun(I, Idx, Res, Xs),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

josephus_iterative(Num_people_3, Step_size_3) ->
    try
        case ((Num_people_3 =< 0) orelse (Step_size_3 =< 0)) of
        true -> erlang:error({panic, "num_people or step_size is not a positive integer."});
        _ -> ok
    end,
        Circle = [],
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(Circle, I_3, Num_people_3, Step_size_3) ->
    case (I_3 =< Num_people_3) of
        true ->
            Circle_2 = lists:append((case Circle of nil -> []; _ -> Circle end), [I_3]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Circle_2, I_4, Num_people_3, Step_size_3);
        _ -> {Circle, I_3, Num_people_3, Step_size_3}
    end
end,
{Circle_2, I_4, Num_people_3, Step_size_3} = Fun_2(Circle, I_3, Num_people_3, Step_size_3),
        Current = 0,
        Fun_3 = fun Fun_3_loop(Circle_2, Current, I_4, Num_people_3, Step_size_3) ->
    case (erlang:length(Circle_2) > 1) of
        true ->
            Current_2 = mochi_mod(((Current + Step_size_3) - 1), erlang:length(Circle_2)),
            Circle_3 = remove_at(Circle_2, Current_2),
            Fun_3_loop(Circle_3, Current_2, I_4, Num_people_3, Step_size_3);
        _ -> {Circle_2, Current, I_4, Num_people_3, Step_size_3}
    end
end,
{Circle_3, Current_2, I_4, Num_people_3, Step_size_3} = Fun_3(Circle_2, Current, I_4, Num_people_3, Step_size_3),
        (case erlang:is_map(Circle_3) of true -> maps:get(0, Circle_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Circle_3) + 0 + 1, Circle_3); _ -> mochi_nth(0 + 1, Circle_3) end end)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('r', josephus_recursive(7, 3)),
    io:format("~ts~n", [mochi_str(erlang:get('r'))]),
    io:format("~ts~n", [mochi_str(find_winner(7, 3))]),
    io:format("~ts~n", [mochi_str(josephus_iterative(7, 3))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
