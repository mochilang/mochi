#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs_float/1, average_absolute_deviation/1]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

abs_float(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

average_absolute_deviation(Nums) ->
    try
        case (erlang:length(Nums) == 0) of
        true -> erlang:error("List is empty");
        _ -> ok
    end,
        Sum = 0,
        Fun = fun Fun_loop(List, Nums, Sum) ->
    case List of
        [] -> {Nums, Sum};
        [X_2|X_2_rest] ->
            Sum_2 = (Sum + X_2),
            Fun_loop(X_2_rest, Nums, Sum_2);
        _ -> {Nums, Sum}
    end
end,
{Nums, Sum_2} = Fun(Nums, Nums, Sum),
        N = float(erlang:length(Nums)),
        Mean = mochi_safe_div(float(Sum_2), N),
        Dev_sum = 0.0,
        Fun_2 = fun Fun_2_loop(List, Dev_sum, Mean, N, Nums, Sum_2) ->
    case List of
        [] -> {Dev_sum, Mean, N, Nums, Sum_2};
        [X_3|X_3_rest] ->
            Dev_sum_2 = (Dev_sum + abs_float((float(X_3) - Mean))),
            Fun_2_loop(X_3_rest, Dev_sum_2, Mean, N, Nums, Sum_2);
        _ -> {Dev_sum, Mean, N, Nums, Sum_2}
    end
end,
{Dev_sum_2, Mean, N, Nums, Sum_2} = Fun_2(Nums, Dev_sum, Mean, N, Nums, Sum_2),
        mochi_safe_div(Dev_sum_2, N)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(average_absolute_deviation([0]))]),
    io:format("~ts~n", [mochi_str(average_absolute_deviation([4, 1, 3, 2]))]),
    io:format("~ts~n", [mochi_str(average_absolute_deviation([2, 70, 6, 50, 20, 8, 4, 0]))]),
    io:format("~ts~n", [mochi_str(average_absolute_deviation([-20, 0, 30, 15]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
