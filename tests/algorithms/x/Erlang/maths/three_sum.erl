#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bubble_sort/1, three_sum/1]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

bubble_sort(Nums) ->
    try
        Arr = Nums,
        N = erlang:length(Arr),
        I = 0,
        Fun_2 = fun Fun_2_loop(Arr, I, N, Nums) ->
    case (I < N) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Arr, I, J, N, Nums) ->
    case (J < (N - 1)) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end) > (case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> mochi_nth((J + 1) + 1, Arr) end end)) of
        true -> Temp = (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, J) ++ [(case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> mochi_nth((J + 1) + 1, Arr) end end)] ++ lists:nthtail(J + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, (J + 1)) ++ [Temp] ++ lists:nthtail((J + 1) + 1, Arr_2),
            Arr_4 = Arr_3,
            Temp_2 = Temp;
        _ -> Arr_4 = Arr,
            Temp_2 = nil
    end,
            J_2 = (J + 1),
            Fun_loop(Arr_4, I, J_2, N, Nums);
        _ -> {Arr, I, J, N, Nums}
    end
end,
{Arr_4, I, J_2, N, Nums} = Fun(Arr, I, J, N, Nums),
            I_2 = (I + 1),
            Fun_2_loop(Arr_4, I_2, N, Nums);
        _ -> {Arr, I, N, Nums}
    end
end,
{Arr_4, I_2, N, Nums} = Fun_2(Arr, I, N, Nums),
        Arr_4
    catch {return, Ret} -> Ret end.

three_sum(Nums_2) ->
    try
        Sorted = bubble_sort(Nums_2),
        Res = [],
        N_2 = erlang:length(Sorted),
        I_3 = 0,
        Fun_8 = fun Fun_8_loop(I_3, N_2, Nums_2, Res, Sorted) ->
    case (I_3 < (N_2 - 2)) of
        true ->
            case ((I_3 == 0) orelse ((case erlang:is_map(Sorted) of true -> maps:get(I_3, Sorted, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Sorted) + I_3 + 1, Sorted); _ -> mochi_nth(I_3 + 1, Sorted) end end) /= (case erlang:is_map(Sorted) of true -> maps:get((I_3 - 1), Sorted, nil); _ -> case (I_3 - 1) < 0 of true -> mochi_nth(erlang:length(Sorted) + (I_3 - 1) + 1, Sorted); _ -> mochi_nth((I_3 - 1) + 1, Sorted) end end))) of
        true -> Low = (I_3 + 1),
            High = (N_2 - 1),
            C = (0 - (case erlang:is_map(Sorted) of true -> maps:get(I_3, Sorted, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Sorted) + I_3 + 1, Sorted); _ -> mochi_nth(I_3 + 1, Sorted) end end)),
            Fun_6 = fun Fun_6_loop(C, High, I_3, Low, N_2, Nums_2, Res, Sorted) ->
    case (Low < High) of
        true ->
            S = ((case erlang:is_map(Sorted) of true -> maps:get(Low, Sorted, nil); _ -> case Low < 0 of true -> mochi_nth(erlang:length(Sorted) + Low + 1, Sorted); _ -> mochi_nth(Low + 1, Sorted) end end) + (case erlang:is_map(Sorted) of true -> maps:get(High, Sorted, nil); _ -> case High < 0 of true -> mochi_nth(erlang:length(Sorted) + High + 1, Sorted); _ -> mochi_nth(High + 1, Sorted) end end)),
            case (S == C) of
        true -> Triple = [(case erlang:is_map(Sorted) of true -> maps:get(I_3, Sorted, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Sorted) + I_3 + 1, Sorted); _ -> mochi_nth(I_3 + 1, Sorted) end end), (case erlang:is_map(Sorted) of true -> maps:get(Low, Sorted, nil); _ -> case Low < 0 of true -> mochi_nth(erlang:length(Sorted) + Low + 1, Sorted); _ -> mochi_nth(Low + 1, Sorted) end end), (case erlang:is_map(Sorted) of true -> maps:get(High, Sorted, nil); _ -> case High < 0 of true -> mochi_nth(erlang:length(Sorted) + High + 1, Sorted); _ -> mochi_nth(High + 1, Sorted) end end)],
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Triple]),
            Fun_3 = fun Fun_3_loop(C, High, I_3, Low, N_2, Nums_2, Res_2, S, Sorted, Triple) ->
    case ((Low < High) andalso ((case erlang:is_map(Sorted) of true -> maps:get(Low, Sorted, nil); _ -> case Low < 0 of true -> mochi_nth(erlang:length(Sorted) + Low + 1, Sorted); _ -> mochi_nth(Low + 1, Sorted) end end) == (case erlang:is_map(Sorted) of true -> maps:get((Low + 1), Sorted, nil); _ -> case (Low + 1) < 0 of true -> mochi_nth(erlang:length(Sorted) + (Low + 1) + 1, Sorted); _ -> mochi_nth((Low + 1) + 1, Sorted) end end))) of
        true ->
            Low_2 = (Low + 1),
            Fun_3_loop(C, High, I_3, Low_2, N_2, Nums_2, Res_2, S, Sorted, Triple);
        _ -> {C, High, I_3, Low, N_2, Nums_2, Res_2, S, Sorted, Triple}
    end
end,
{C, High, I_3, Low_2, N_2, Nums_2, Res_2, S, Sorted, Triple} = Fun_3(C, High, I_3, Low, N_2, Nums_2, Res_2, S, Sorted, Triple),
            Fun_4 = fun Fun_4_loop(C, High, I_3, Low_2, N_2, Nums_2, Res_2, S, Sorted, Triple) ->
    case ((Low_2 < High) andalso ((case erlang:is_map(Sorted) of true -> maps:get(High, Sorted, nil); _ -> case High < 0 of true -> mochi_nth(erlang:length(Sorted) + High + 1, Sorted); _ -> mochi_nth(High + 1, Sorted) end end) == (case erlang:is_map(Sorted) of true -> maps:get((High - 1), Sorted, nil); _ -> case (High - 1) < 0 of true -> mochi_nth(erlang:length(Sorted) + (High - 1) + 1, Sorted); _ -> mochi_nth((High - 1) + 1, Sorted) end end))) of
        true ->
            High_2 = (High - 1),
            Fun_4_loop(C, High_2, I_3, Low_2, N_2, Nums_2, Res_2, S, Sorted, Triple);
        _ -> {C, High, I_3, Low_2, N_2, Nums_2, Res_2, S, Sorted, Triple}
    end
end,
{C, High_2, I_3, Low_2, N_2, Nums_2, Res_2, S, Sorted, Triple} = Fun_4(C, High, I_3, Low_2, N_2, Nums_2, Res_2, S, Sorted, Triple),
            Low_3 = (Low_2 + 1),
            High_3 = (High_2 - 1),
            Fun_5 = Fun_4,
            High_6 = High_3,
            Low_6 = Low_3,
            Res_3 = Res_2,
            Triple_2 = Triple;
        _ -> case (S < C) of
        true -> Low_4 = (Low + 1),
            High_5 = High,
            Low_5 = Low_4;
        _ -> High_4 = (High - 1),
            High_5 = High_4,
            Low_5 = Low
    end,
            Fun_5 = nil,
            High_6 = High_5,
            Low_6 = Low_5,
            Res_3 = Res,
            Triple_2 = nil
    end,
            Fun_6_loop(C, High_6, I_3, Low_6, N_2, Nums_2, Res_3, Sorted);
        _ -> {C, High, I_3, Low, N_2, Nums_2, Res, Sorted}
    end
end,
{C, High_6, I_3, Low_6, N_2, Nums_2, Res_3, Sorted} = Fun_6(C, High, I_3, Low, N_2, Nums_2, Res, Sorted),
            C_2 = C,
            Fun_7 = Fun_6,
            High_7 = High_6,
            Low_7 = Low_6,
            Res_4 = Res_3;
        _ -> C_2 = nil,
            Fun_7 = nil,
            High_7 = nil,
            Low_7 = nil,
            Res_4 = Res
    end,
            I_4 = (I_3 + 1),
            Fun_8_loop(I_4, N_2, Nums_2, Res_4, Sorted);
        _ -> {I_3, N_2, Nums_2, Res, Sorted}
    end
end,
{I_4, N_2, Nums_2, Res_4, Sorted} = Fun_8(I_3, N_2, Nums_2, Res, Sorted),
        Res_4
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(three_sum([-1, 0, 1, 2, -1, -4]))]),
    io:format("~ts~n", [mochi_str(three_sum([1, 2, 3, 4]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
