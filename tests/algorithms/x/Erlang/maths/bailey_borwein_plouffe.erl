#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, mod_pow/3, pow_float/2, hex_digit/1, floor_float/1, subsum/3, bailey_borwein_plouffe/2]).

% Generated by Mochi transpiler v0.10.67 (24b0b70a80)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

mod_pow(Base, Exponent, Modulus) ->
    try
        Result = 1,
        B = mochi_mod(Base, Modulus),
        E = Exponent,
        Fun = fun Fun_loop(B, Base, E, Exponent, Modulus, Result) ->
    case (E > 0) of
        true ->
            Result_3 = (case (mochi_mod(E, 2) == 1) of
        true -> Result_2 = mochi_mod((Result * B), Modulus),
            Result_2;
        _ -> Result
    end),
            B_2 = mochi_mod((B * B), Modulus),
            E_2 = mochi_idiv(E, 2),
            Fun_loop(B_2, Base, E_2, Exponent, Modulus, Result_3);
        _ -> {B, Base, E, Exponent, Modulus, Result}
    end
end,
{B_2, Base, E_2, Exponent, Modulus, Result_3} = Fun(B, Base, E, Exponent, Modulus, Result),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

pow_float(Base_2, Exponent_2) ->
    try
        Exp = Exponent_2,
        Result_4 = 1.0,
        Exp_3 = (case (Exp < 0) of
        true -> Exp_2 = -Exp,
            Exp_2;
        _ -> Exp
    end),
        I = 0,
        Fun_2 = fun Fun_2_loop(Base_2, Exp_3, Exponent_2, I, Result_4) ->
    case (I < Exp_3) of
        true ->
            Result_5 = mochi_safe_mul(Result_4, Base_2),
            I_2 = (I + 1),
            Fun_2_loop(Base_2, Exp_3, Exponent_2, I_2, Result_5);
        _ -> {Base_2, Exp_3, Exponent_2, I, Result_4}
    end
end,
{Base_2, Exp_3, Exponent_2, I_2, Result_5} = Fun_2(Base_2, Exp_3, Exponent_2, I, Result_4),
        Result_7 = (case (Exponent_2 < 0) of
        true -> Result_6 = mochi_safe_div(1.0, Result_5),
            Result_6;
        _ -> Result_5
    end),
        Result_7
    catch {return, RetCatch} -> RetCatch end.

hex_digit(N) ->
    try
        case (N < 10) of
        true -> throw({return, mochi_str(N)});
        _ -> ok
    end,
        Letters = ["a", "b", "c", "d", "e", "f"],
        (case erlang:is_map(Letters) of true -> maps:get((N - 10), Letters, nil); _ -> case (N - 10) < 0 of true -> mochi_nth(erlang:length(Letters) + (N - 10) + 1, Letters); _ -> mochi_nth((N - 10) + 1, Letters) end end)
    catch {return, RetCatch} -> RetCatch end.

floor_float(X) ->
    try
        I_3 = mochi_to_int(X),
        I_5 = (case (float(I_3) > X) of
        true -> I_4 = (I_3 - 1),
            I_4;
        _ -> I_3
    end),
        float(I_5)
    catch {return, RetCatch} -> RetCatch end.

subsum(Digit_pos_to_extract, Denominator_addend, Precision) ->
    try
        Total = 0.0,
        Sum_index = 0,
        Fun_3 = fun Fun_3_loop(Denominator_addend, Digit_pos_to_extract, Precision, Sum_index, Total) ->
    case (Sum_index < (Digit_pos_to_extract + Precision)) of
        true ->
            Denominator = ((8 * Sum_index) + Denominator_addend),
            Total_4 = (case (Sum_index < Digit_pos_to_extract) of
        true -> Exponent_3 = ((Digit_pos_to_extract - 1) - Sum_index),
            Exponential_term = mod_pow(16, Exponent_3, Denominator),
            Total_2 = (Total + mochi_safe_div(float(Exponential_term), float(Denominator))),
            Exponent_5 = Exponent_3,
            Exponential_term_3 = Exponential_term,
            Total_2;
        _ -> Exponent_4 = ((Digit_pos_to_extract - 1) - Sum_index),
            Exponential_term_2 = pow_float(16.0, Exponent_4),
            Total_3 = (Total + mochi_safe_div(Exponential_term_2, float(Denominator))),
            Exponent_5 = Exponent_4,
            Exponential_term_3 = Exponential_term_2,
            Total_3
    end),
            Sum_index_2 = (Sum_index + 1),
            Fun_3_loop(Denominator_addend, Digit_pos_to_extract, Precision, Sum_index_2, Total_4);
        _ -> {Denominator_addend, Digit_pos_to_extract, Precision, Sum_index, Total}
    end
end,
{Denominator_addend, Digit_pos_to_extract, Precision, Sum_index_2, Total_4} = Fun_3(Denominator_addend, Digit_pos_to_extract, Precision, Sum_index, Total),
        Total_4
    catch {return, RetCatch} -> RetCatch end.

bailey_borwein_plouffe(Digit_position, Precision_2) ->
    try
        case (Digit_position =< 0) of
        true -> erlang:error({panic, "Digit position must be a positive integer"});
        _ -> ok
    end,
        case (Precision_2 < 0) of
        true -> erlang:error({panic, "Precision must be a nonnegative integer"});
        _ -> ok
    end,
        Sum_result = (((mochi_safe_mul(4.0, subsum(Digit_position, 1, Precision_2)) - mochi_safe_mul(2.0, subsum(Digit_position, 4, Precision_2))) - mochi_safe_mul(1.0, subsum(Digit_position, 5, Precision_2))) - mochi_safe_mul(1.0, subsum(Digit_position, 6, Precision_2))),
        Fraction = (Sum_result - floor_float(Sum_result)),
        Digit = mochi_to_int(mochi_safe_mul(Fraction, 16.0)),
        Hd = hex_digit(Digit),
        Hd
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('digits', ""),
    erlang:put('i', 1),
    Fun_4 = fun Fun_4_loop() ->
    case (erlang:get('i') =< 10) of
        true ->
            erlang:put('digits', (erlang:get('digits') ++ bailey_borwein_plouffe(erlang:get('i'), 1000))),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_4_loop();
        _ -> {}
    end
end,
{} = Fun_4(),
    io:format("~ts~n", [mochi_repr(erlang:get('digits'))]),
    io:format("~ts~n", [mochi_repr(bailey_borwein_plouffe(5, 10000))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
