#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ucal/2, factorial/1, newton_forward_interpolation/3]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

ucal(U, P) ->
    try
        Temp = U,
        I = 1,
        Fun = fun Fun_loop(I, P, Temp, U) ->
    case (I < P) of
        true ->
            Temp_2 = mochi_safe_mul(Temp, (U - float(I))),
            I_2 = (I + 1),
            Fun_loop(I_2, P, Temp_2, U);
        _ -> {I, P, Temp, U}
    end
end,
{I_2, P, Temp_2, U} = Fun(I, P, Temp, U),
        Temp_2
    catch {return, Ret} -> Ret end.

factorial(N) ->
    try
        Result = 1.0,
        I_3 = 2,
        Fun_2 = fun Fun_2_loop(I_3, N, Result) ->
    case (I_3 =< N) of
        true ->
            Result_2 = mochi_safe_mul(Result, float(I_3)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, N, Result_2);
        _ -> {I_3, N, Result}
    end
end,
{I_4, N, Result_2} = Fun_2(I_3, N, Result),
        Result_2
    catch {return, Ret} -> Ret end.

newton_forward_interpolation(X, Y0, Value) ->
    try
        N_2 = erlang:length(X),
        Y = [],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, N_2, Value, X, Y, Y0) ->
    case (I_5 < N_2) of
        true ->
            Row = [],
            J = 0,
            Fun_3 = fun Fun_3_loop(I_5, J, N_2, Row, Value, X, Y, Y0) ->
    case (J < N_2) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0.0]),
            J_2 = (J + 1),
            Fun_3_loop(I_5, J_2, N_2, Row_2, Value, X, Y, Y0);
        _ -> {I_5, J, N_2, Row, Value, X, Y, Y0}
    end
end,
{I_5, J_2, N_2, Row_2, Value, X, Y, Y0} = Fun_3(I_5, J, N_2, Row, Value, X, Y, Y0),
            Y_2 = lists:append((case Y of nil -> []; _ -> Y end), [Row_2]),
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, N_2, Value, X, Y_2, Y0);
        _ -> {I_5, N_2, Value, X, Y, Y0}
    end
end,
{I_6, N_2, Value, X, Y_2, Y0} = Fun_4(I_5, N_2, Value, X, Y, Y0),
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(I_7, N_2, Value, X, Y_2, Y0) ->
    case (I_7 < N_2) of
        true ->
            Y_3 = lists:sublist(Y_2, I_7) ++ [lists:sublist(lists:nth(I_7 + 1, Y_2), 0) ++ [(case erlang:is_map(Y0) of true -> maps:get(I_7, Y0, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Y0) + I_7 + 1, Y0); _ -> mochi_nth(I_7 + 1, Y0) end end)] ++ lists:nthtail(0 + 1, lists:nth(I_7 + 1, Y_2))] ++ lists:nthtail(I_7 + 1, Y_2),
            I_8 = (I_7 + 1),
            Fun_5_loop(I_8, N_2, Value, X, Y_3, Y0);
        _ -> {I_7, N_2, Value, X, Y_2, Y0}
    end
end,
{I_8, N_2, Value, X, Y_3, Y0} = Fun_5(I_7, N_2, Value, X, Y_2, Y0),
        I1 = 1,
        Fun_7 = fun Fun_7_loop(I_8, I1, N_2, Value, X, Y_3, Y0) ->
    case (I1 < N_2) of
        true ->
            J1 = 0,
            Fun_6 = fun Fun_6_loop(I_8, I1, J1, N_2, Value, X, Y_3, Y0) ->
    case (J1 < (N_2 - I1)) of
        true ->
            Y_4 = lists:sublist(Y_3, J1) ++ [lists:sublist(lists:nth(J1 + 1, Y_3), I1) ++ [((case erlang:is_map((case erlang:is_map(Y_3) of true -> maps:get((J1 + 1), Y_3, nil); _ -> case (J1 + 1) < 0 of true -> mochi_nth(erlang:length(Y_3) + (J1 + 1) + 1, Y_3); _ -> mochi_nth((J1 + 1) + 1, Y_3) end end)) of true -> maps:get((I1 - 1), (case erlang:is_map(Y_3) of true -> maps:get((J1 + 1), Y_3, nil); _ -> case (J1 + 1) < 0 of true -> mochi_nth(erlang:length(Y_3) + (J1 + 1) + 1, Y_3); _ -> mochi_nth((J1 + 1) + 1, Y_3) end end), nil); _ -> case (I1 - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Y_3) of true -> maps:get((J1 + 1), Y_3, nil); _ -> case (J1 + 1) < 0 of true -> mochi_nth(erlang:length(Y_3) + (J1 + 1) + 1, Y_3); _ -> mochi_nth((J1 + 1) + 1, Y_3) end end)) + (I1 - 1) + 1, (case erlang:is_map(Y_3) of true -> maps:get((J1 + 1), Y_3, nil); _ -> case (J1 + 1) < 0 of true -> mochi_nth(erlang:length(Y_3) + (J1 + 1) + 1, Y_3); _ -> mochi_nth((J1 + 1) + 1, Y_3) end end)); _ -> mochi_nth((I1 - 1) + 1, (case erlang:is_map(Y_3) of true -> maps:get((J1 + 1), Y_3, nil); _ -> case (J1 + 1) < 0 of true -> mochi_nth(erlang:length(Y_3) + (J1 + 1) + 1, Y_3); _ -> mochi_nth((J1 + 1) + 1, Y_3) end end)) end end) - (case erlang:is_map((case erlang:is_map(Y_3) of true -> maps:get(J1, Y_3, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Y_3) + J1 + 1, Y_3); _ -> mochi_nth(J1 + 1, Y_3) end end)) of true -> maps:get((I1 - 1), (case erlang:is_map(Y_3) of true -> maps:get(J1, Y_3, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Y_3) + J1 + 1, Y_3); _ -> mochi_nth(J1 + 1, Y_3) end end), nil); _ -> case (I1 - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Y_3) of true -> maps:get(J1, Y_3, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Y_3) + J1 + 1, Y_3); _ -> mochi_nth(J1 + 1, Y_3) end end)) + (I1 - 1) + 1, (case erlang:is_map(Y_3) of true -> maps:get(J1, Y_3, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Y_3) + J1 + 1, Y_3); _ -> mochi_nth(J1 + 1, Y_3) end end)); _ -> mochi_nth((I1 - 1) + 1, (case erlang:is_map(Y_3) of true -> maps:get(J1, Y_3, nil); _ -> case J1 < 0 of true -> mochi_nth(erlang:length(Y_3) + J1 + 1, Y_3); _ -> mochi_nth(J1 + 1, Y_3) end end)) end end))] ++ lists:nthtail(I1 + 1, lists:nth(J1 + 1, Y_3))] ++ lists:nthtail(J1 + 1, Y_3),
            J1_2 = (J1 + 1),
            Fun_6_loop(I_8, I1, J1_2, N_2, Value, X, Y_4, Y0);
        _ -> {I_8, I1, J1, N_2, Value, X, Y_3, Y0}
    end
end,
{I_8, I1, J1_2, N_2, Value, X, Y_4, Y0} = Fun_6(I_8, I1, J1, N_2, Value, X, Y_3, Y0),
            I1_2 = (I1 + 1),
            Fun_7_loop(I_8, I1_2, N_2, Value, X, Y_4, Y0);
        _ -> {I_8, I1, N_2, Value, X, Y_3, Y0}
    end
end,
{I_8, I1_2, N_2, Value, X, Y_4, Y0} = Fun_7(I_8, I1, N_2, Value, X, Y_3, Y0),
        U_2 = mochi_safe_div((Value - (case erlang:is_map(X) of true -> maps:get(0, X, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(X) + 0 + 1, X); _ -> mochi_nth(0 + 1, X) end end)), ((case erlang:is_map(X) of true -> maps:get(1, X, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(X) + 1 + 1, X); _ -> mochi_nth(1 + 1, X) end end) - (case erlang:is_map(X) of true -> maps:get(0, X, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(X) + 0 + 1, X); _ -> mochi_nth(0 + 1, X) end end))),
        Sum = (case erlang:is_map((case erlang:is_map(Y_4) of true -> maps:get(0, Y_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_4) + 0 + 1, Y_4); _ -> mochi_nth(0 + 1, Y_4) end end)) of true -> maps:get(0, (case erlang:is_map(Y_4) of true -> maps:get(0, Y_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_4) + 0 + 1, Y_4); _ -> mochi_nth(0 + 1, Y_4) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Y_4) of true -> maps:get(0, Y_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_4) + 0 + 1, Y_4); _ -> mochi_nth(0 + 1, Y_4) end end)) + 0 + 1, (case erlang:is_map(Y_4) of true -> maps:get(0, Y_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_4) + 0 + 1, Y_4); _ -> mochi_nth(0 + 1, Y_4) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Y_4) of true -> maps:get(0, Y_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_4) + 0 + 1, Y_4); _ -> mochi_nth(0 + 1, Y_4) end end)) end end),
        K = 1,
        Fun_8 = fun Fun_8_loop(I_8, I1_2, K, N_2, Sum, U_2, Value, X, Y_4, Y0) ->
    case (K < N_2) of
        true ->
            Sum_2 = (Sum + mochi_safe_div(mochi_safe_mul(ucal(U_2, K), (case erlang:is_map((case erlang:is_map(Y_4) of true -> maps:get(0, Y_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_4) + 0 + 1, Y_4); _ -> mochi_nth(0 + 1, Y_4) end end)) of true -> maps:get(K, (case erlang:is_map(Y_4) of true -> maps:get(0, Y_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_4) + 0 + 1, Y_4); _ -> mochi_nth(0 + 1, Y_4) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Y_4) of true -> maps:get(0, Y_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_4) + 0 + 1, Y_4); _ -> mochi_nth(0 + 1, Y_4) end end)) + K + 1, (case erlang:is_map(Y_4) of true -> maps:get(0, Y_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_4) + 0 + 1, Y_4); _ -> mochi_nth(0 + 1, Y_4) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(Y_4) of true -> maps:get(0, Y_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_4) + 0 + 1, Y_4); _ -> mochi_nth(0 + 1, Y_4) end end)) end end)), factorial(K))),
            K_2 = (K + 1),
            Fun_8_loop(I_8, I1_2, K_2, N_2, Sum_2, U_2, Value, X, Y_4, Y0);
        _ -> {I_8, I1_2, K, N_2, Sum, U_2, Value, X, Y_4, Y0}
    end
end,
{I_8, I1_2, K_2, N_2, Sum_2, U_2, Value, X, Y_4, Y0} = Fun_8(I_8, I1_2, K, N_2, Sum, U_2, Value, X, Y_4, Y0),
        Sum_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('x_points', [0.0, 1.0, 2.0, 3.0]),
    erlang:put('y_points', [0.0, 1.0, 8.0, 27.0]),
    io:format("~ts~n", [mochi_str(newton_forward_interpolation(erlang:get('x_points'), erlang:get('y_points'), 1.5))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
