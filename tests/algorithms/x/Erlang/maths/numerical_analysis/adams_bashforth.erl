#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs_float/1, validate_inputs/3, list_to_string/1, adams_bashforth_step2/5, adams_bashforth_step3/5, adams_bashforth_step4/5, adams_bashforth_step5/5, f_x/2, f_xy/2]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

abs_float(X) ->
    try
        case (X < 0.0) of
        true -> throw({return, -X});
        _ -> throw({return, X})
    end,
        nil
    catch {return, Ret} -> Ret end.

validate_inputs(X_initials, Step_size, X_final) ->
    try
        case ((case erlang:is_map(X_initials) of true -> maps:get((erlang:length(X_initials) - 1), X_initials, nil); _ -> case (erlang:length(X_initials) - 1) < 0 of true -> mochi_nth(erlang:length(X_initials) + (erlang:length(X_initials) - 1) + 1, X_initials); _ -> mochi_nth((erlang:length(X_initials) - 1) + 1, X_initials) end end) >= X_final) of
        true -> erlang:error("The final value of x must be greater than the initial values of x.");
        _ -> ok
    end,
        case (Step_size =< 0.0) of
        true -> erlang:error("Step size must be positive.");
        _ -> ok
    end,
        I = 0,
        Fun = fun Fun_loop(I, Step_size, X_final, X_initials) ->
    case (I < (erlang:length(X_initials) - 1)) of
        true ->
            Diff = ((case erlang:is_map(X_initials) of true -> maps:get((I + 1), X_initials, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(X_initials) + (I + 1) + 1, X_initials); _ -> mochi_nth((I + 1) + 1, X_initials) end end) - (case erlang:is_map(X_initials) of true -> maps:get(I, X_initials, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(X_initials) + I + 1, X_initials); _ -> mochi_nth(I + 1, X_initials) end end)),
            case (abs_float((Diff - Step_size)) > 0.0000000001) of
        true -> erlang:error("x-values must be equally spaced according to step size.");
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Step_size, X_final, X_initials);
        _ -> {I, Step_size, X_final, X_initials}
    end
end,
{I_2, Step_size, X_final, X_initials} = Fun(I, Step_size, X_final, X_initials),
        nil
    catch {return, Ret} -> Ret end.

list_to_string(Xs) ->
    try
        S = "[",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, S, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            S_2 = (S ++ mochi_str((case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end))),
            case ((I_3 + 1) < erlang:length(Xs)) of
        true -> S_3 = (S_2 ++ ", "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, S_4, Xs);
        _ -> {I_3, S, Xs}
    end
end,
{I_4, S_4, Xs} = Fun_2(I_3, S, Xs),
        S_5 = (S_4 ++ "]"),
        S_5
    catch {return, Ret} -> Ret end.

adams_bashforth_step2(F, X_initials_2, Y_initials, Step_size_2, X_final_2) ->
    try
        validate_inputs(X_initials_2, Step_size_2, X_final_2),
        case ((erlang:length(X_initials_2) /= 2) orelse (erlang:length(Y_initials) /= 2)) of
        true -> erlang:error("Insufficient initial points information.");
        _ -> ok
    end,
        X0 = (case erlang:is_map(X_initials_2) of true -> maps:get(0, X_initials_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(X_initials_2) + 0 + 1, X_initials_2); _ -> mochi_nth(0 + 1, X_initials_2) end end),
        X1 = (case erlang:is_map(X_initials_2) of true -> maps:get(1, X_initials_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(X_initials_2) + 1 + 1, X_initials_2); _ -> mochi_nth(1 + 1, X_initials_2) end end),
        Y = [],
        Y_2 = lists:append((case Y of nil -> []; _ -> Y end), [(case erlang:is_map(Y_initials) of true -> maps:get(0, Y_initials, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_initials) + 0 + 1, Y_initials); _ -> mochi_nth(0 + 1, Y_initials) end end)]),
        Y_3 = lists:append((case Y_2 of nil -> []; _ -> Y_2 end), [(case erlang:is_map(Y_initials) of true -> maps:get(1, Y_initials, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Y_initials) + 1 + 1, Y_initials); _ -> mochi_nth(1 + 1, Y_initials) end end)]),
        N = mochi_to_int(mochi_safe_div((X_final_2 - X1), Step_size_2)),
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(F, I_5, N, Step_size_2, X0, X1, X_final_2, X_initials_2, Y_3, Y_initials) ->
    case (I_5 < N) of
        true ->
            Term = (mochi_safe_mul(3.0, F(X1, (case erlang:is_map(Y_3) of true -> maps:get((I_5 + 1), Y_3, nil); _ -> case (I_5 + 1) < 0 of true -> mochi_nth(erlang:length(Y_3) + (I_5 + 1) + 1, Y_3); _ -> mochi_nth((I_5 + 1) + 1, Y_3) end end))) - F(X0, (case erlang:is_map(Y_3) of true -> maps:get(I_5, Y_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Y_3) + I_5 + 1, Y_3); _ -> mochi_nth(I_5 + 1, Y_3) end end))),
            Y_next = ((case erlang:is_map(Y_3) of true -> maps:get((I_5 + 1), Y_3, nil); _ -> case (I_5 + 1) < 0 of true -> mochi_nth(erlang:length(Y_3) + (I_5 + 1) + 1, Y_3); _ -> mochi_nth((I_5 + 1) + 1, Y_3) end end) + mochi_safe_mul(mochi_safe_div(Step_size_2, 2.0), Term)),
            Y_4 = lists:append((case Y_3 of nil -> []; _ -> Y_3 end), [Y_next]),
            X0_2 = X1,
            X1_2 = (X1 + Step_size_2),
            I_6 = (I_5 + 1),
            Fun_3_loop(F, I_6, N, Step_size_2, X0_2, X1_2, X_final_2, X_initials_2, Y_4, Y_initials);
        _ -> {F, I_5, N, Step_size_2, X0, X1, X_final_2, X_initials_2, Y_3, Y_initials}
    end
end,
{F, I_6, N, Step_size_2, X0_2, X1_2, X_final_2, X_initials_2, Y_4, Y_initials} = Fun_3(F, I_5, N, Step_size_2, X0, X1, X_final_2, X_initials_2, Y_3, Y_initials),
        Y_4
    catch {return, Ret} -> Ret end.

adams_bashforth_step3(F_2, X_initials_3, Y_initials_2, Step_size_3, X_final_3) ->
    try
        validate_inputs(X_initials_3, Step_size_3, X_final_3),
        case ((erlang:length(X_initials_3) /= 3) orelse (erlang:length(Y_initials_2) /= 3)) of
        true -> erlang:error("Insufficient initial points information.");
        _ -> ok
    end,
        X0_3 = (case erlang:is_map(X_initials_3) of true -> maps:get(0, X_initials_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(X_initials_3) + 0 + 1, X_initials_3); _ -> mochi_nth(0 + 1, X_initials_3) end end),
        X1_3 = (case erlang:is_map(X_initials_3) of true -> maps:get(1, X_initials_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(X_initials_3) + 1 + 1, X_initials_3); _ -> mochi_nth(1 + 1, X_initials_3) end end),
        X2 = (case erlang:is_map(X_initials_3) of true -> maps:get(2, X_initials_3, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(X_initials_3) + 2 + 1, X_initials_3); _ -> mochi_nth(2 + 1, X_initials_3) end end),
        Y_5 = [],
        Y_6 = lists:append((case Y_5 of nil -> []; _ -> Y_5 end), [(case erlang:is_map(Y_initials_2) of true -> maps:get(0, Y_initials_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_initials_2) + 0 + 1, Y_initials_2); _ -> mochi_nth(0 + 1, Y_initials_2) end end)]),
        Y_7 = lists:append((case Y_6 of nil -> []; _ -> Y_6 end), [(case erlang:is_map(Y_initials_2) of true -> maps:get(1, Y_initials_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Y_initials_2) + 1 + 1, Y_initials_2); _ -> mochi_nth(1 + 1, Y_initials_2) end end)]),
        Y_8 = lists:append((case Y_7 of nil -> []; _ -> Y_7 end), [(case erlang:is_map(Y_initials_2) of true -> maps:get(2, Y_initials_2, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Y_initials_2) + 2 + 1, Y_initials_2); _ -> mochi_nth(2 + 1, Y_initials_2) end end)]),
        N_2 = mochi_to_int(mochi_safe_div((X_final_3 - X2), Step_size_3)),
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(F_2, I_7, N_2, Step_size_3, X0_3, X1_3, X2, X_final_3, X_initials_3, Y_8, Y_initials_2) ->
    case (I_7 =< N_2) of
        true ->
            Term_2 = ((mochi_safe_mul(23.0, F_2(X2, (case erlang:is_map(Y_8) of true -> maps:get((I_7 + 2), Y_8, nil); _ -> case (I_7 + 2) < 0 of true -> mochi_nth(erlang:length(Y_8) + (I_7 + 2) + 1, Y_8); _ -> mochi_nth((I_7 + 2) + 1, Y_8) end end))) - mochi_safe_mul(16.0, F_2(X1_3, (case erlang:is_map(Y_8) of true -> maps:get((I_7 + 1), Y_8, nil); _ -> case (I_7 + 1) < 0 of true -> mochi_nth(erlang:length(Y_8) + (I_7 + 1) + 1, Y_8); _ -> mochi_nth((I_7 + 1) + 1, Y_8) end end)))) + mochi_safe_mul(5.0, F_2(X0_3, (case erlang:is_map(Y_8) of true -> maps:get(I_7, Y_8, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Y_8) + I_7 + 1, Y_8); _ -> mochi_nth(I_7 + 1, Y_8) end end)))),
            Y_next_2 = ((case erlang:is_map(Y_8) of true -> maps:get((I_7 + 2), Y_8, nil); _ -> case (I_7 + 2) < 0 of true -> mochi_nth(erlang:length(Y_8) + (I_7 + 2) + 1, Y_8); _ -> mochi_nth((I_7 + 2) + 1, Y_8) end end) + mochi_safe_mul(mochi_safe_div(Step_size_3, 12.0), Term_2)),
            Y_9 = lists:append((case Y_8 of nil -> []; _ -> Y_8 end), [Y_next_2]),
            X0_4 = X1_3,
            X1_4 = X2,
            X2_2 = (X2 + Step_size_3),
            I_8 = (I_7 + 1),
            Fun_4_loop(F_2, I_8, N_2, Step_size_3, X0_4, X1_4, X2_2, X_final_3, X_initials_3, Y_9, Y_initials_2);
        _ -> {F_2, I_7, N_2, Step_size_3, X0_3, X1_3, X2, X_final_3, X_initials_3, Y_8, Y_initials_2}
    end
end,
{F_2, I_8, N_2, Step_size_3, X0_4, X1_4, X2_2, X_final_3, X_initials_3, Y_9, Y_initials_2} = Fun_4(F_2, I_7, N_2, Step_size_3, X0_3, X1_3, X2, X_final_3, X_initials_3, Y_8, Y_initials_2),
        Y_9
    catch {return, Ret} -> Ret end.

adams_bashforth_step4(F_3, X_initials_4, Y_initials_3, Step_size_4, X_final_4) ->
    try
        validate_inputs(X_initials_4, Step_size_4, X_final_4),
        case ((erlang:length(X_initials_4) /= 4) orelse (erlang:length(Y_initials_3) /= 4)) of
        true -> erlang:error("Insufficient initial points information.");
        _ -> ok
    end,
        X0_5 = (case erlang:is_map(X_initials_4) of true -> maps:get(0, X_initials_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(X_initials_4) + 0 + 1, X_initials_4); _ -> mochi_nth(0 + 1, X_initials_4) end end),
        X1_5 = (case erlang:is_map(X_initials_4) of true -> maps:get(1, X_initials_4, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(X_initials_4) + 1 + 1, X_initials_4); _ -> mochi_nth(1 + 1, X_initials_4) end end),
        X2_3 = (case erlang:is_map(X_initials_4) of true -> maps:get(2, X_initials_4, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(X_initials_4) + 2 + 1, X_initials_4); _ -> mochi_nth(2 + 1, X_initials_4) end end),
        X3 = (case erlang:is_map(X_initials_4) of true -> maps:get(3, X_initials_4, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(X_initials_4) + 3 + 1, X_initials_4); _ -> mochi_nth(3 + 1, X_initials_4) end end),
        Y_10 = [],
        Y_11 = lists:append((case Y_10 of nil -> []; _ -> Y_10 end), [(case erlang:is_map(Y_initials_3) of true -> maps:get(0, Y_initials_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_initials_3) + 0 + 1, Y_initials_3); _ -> mochi_nth(0 + 1, Y_initials_3) end end)]),
        Y_12 = lists:append((case Y_11 of nil -> []; _ -> Y_11 end), [(case erlang:is_map(Y_initials_3) of true -> maps:get(1, Y_initials_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Y_initials_3) + 1 + 1, Y_initials_3); _ -> mochi_nth(1 + 1, Y_initials_3) end end)]),
        Y_13 = lists:append((case Y_12 of nil -> []; _ -> Y_12 end), [(case erlang:is_map(Y_initials_3) of true -> maps:get(2, Y_initials_3, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Y_initials_3) + 2 + 1, Y_initials_3); _ -> mochi_nth(2 + 1, Y_initials_3) end end)]),
        Y_14 = lists:append((case Y_13 of nil -> []; _ -> Y_13 end), [(case erlang:is_map(Y_initials_3) of true -> maps:get(3, Y_initials_3, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(Y_initials_3) + 3 + 1, Y_initials_3); _ -> mochi_nth(3 + 1, Y_initials_3) end end)]),
        N_3 = mochi_to_int(mochi_safe_div((X_final_4 - X3), Step_size_4)),
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(F_3, I_9, N_3, Step_size_4, X0_5, X1_5, X2_3, X3, X_final_4, X_initials_4, Y_14, Y_initials_3) ->
    case (I_9 < N_3) of
        true ->
            Term_3 = (((mochi_safe_mul(55.0, F_3(X3, (case erlang:is_map(Y_14) of true -> maps:get((I_9 + 3), Y_14, nil); _ -> case (I_9 + 3) < 0 of true -> mochi_nth(erlang:length(Y_14) + (I_9 + 3) + 1, Y_14); _ -> mochi_nth((I_9 + 3) + 1, Y_14) end end))) - mochi_safe_mul(59.0, F_3(X2_3, (case erlang:is_map(Y_14) of true -> maps:get((I_9 + 2), Y_14, nil); _ -> case (I_9 + 2) < 0 of true -> mochi_nth(erlang:length(Y_14) + (I_9 + 2) + 1, Y_14); _ -> mochi_nth((I_9 + 2) + 1, Y_14) end end)))) + mochi_safe_mul(37.0, F_3(X1_5, (case erlang:is_map(Y_14) of true -> maps:get((I_9 + 1), Y_14, nil); _ -> case (I_9 + 1) < 0 of true -> mochi_nth(erlang:length(Y_14) + (I_9 + 1) + 1, Y_14); _ -> mochi_nth((I_9 + 1) + 1, Y_14) end end)))) - mochi_safe_mul(9.0, F_3(X0_5, (case erlang:is_map(Y_14) of true -> maps:get(I_9, Y_14, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Y_14) + I_9 + 1, Y_14); _ -> mochi_nth(I_9 + 1, Y_14) end end)))),
            Y_next_3 = ((case erlang:is_map(Y_14) of true -> maps:get((I_9 + 3), Y_14, nil); _ -> case (I_9 + 3) < 0 of true -> mochi_nth(erlang:length(Y_14) + (I_9 + 3) + 1, Y_14); _ -> mochi_nth((I_9 + 3) + 1, Y_14) end end) + mochi_safe_mul(mochi_safe_div(Step_size_4, 24.0), Term_3)),
            Y_15 = lists:append((case Y_14 of nil -> []; _ -> Y_14 end), [Y_next_3]),
            X0_6 = X1_5,
            X1_6 = X2_3,
            X2_4 = X3,
            X3_2 = (X3 + Step_size_4),
            I_10 = (I_9 + 1),
            Fun_5_loop(F_3, I_10, N_3, Step_size_4, X0_6, X1_6, X2_4, X3_2, X_final_4, X_initials_4, Y_15, Y_initials_3);
        _ -> {F_3, I_9, N_3, Step_size_4, X0_5, X1_5, X2_3, X3, X_final_4, X_initials_4, Y_14, Y_initials_3}
    end
end,
{F_3, I_10, N_3, Step_size_4, X0_6, X1_6, X2_4, X3_2, X_final_4, X_initials_4, Y_15, Y_initials_3} = Fun_5(F_3, I_9, N_3, Step_size_4, X0_5, X1_5, X2_3, X3, X_final_4, X_initials_4, Y_14, Y_initials_3),
        Y_15
    catch {return, Ret} -> Ret end.

adams_bashforth_step5(F_4, X_initials_5, Y_initials_4, Step_size_5, X_final_5) ->
    try
        validate_inputs(X_initials_5, Step_size_5, X_final_5),
        case ((erlang:length(X_initials_5) /= 5) orelse (erlang:length(Y_initials_4) /= 5)) of
        true -> erlang:error("Insufficient initial points information.");
        _ -> ok
    end,
        X0_7 = (case erlang:is_map(X_initials_5) of true -> maps:get(0, X_initials_5, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(X_initials_5) + 0 + 1, X_initials_5); _ -> mochi_nth(0 + 1, X_initials_5) end end),
        X1_7 = (case erlang:is_map(X_initials_5) of true -> maps:get(1, X_initials_5, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(X_initials_5) + 1 + 1, X_initials_5); _ -> mochi_nth(1 + 1, X_initials_5) end end),
        X2_5 = (case erlang:is_map(X_initials_5) of true -> maps:get(2, X_initials_5, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(X_initials_5) + 2 + 1, X_initials_5); _ -> mochi_nth(2 + 1, X_initials_5) end end),
        X3_3 = (case erlang:is_map(X_initials_5) of true -> maps:get(3, X_initials_5, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(X_initials_5) + 3 + 1, X_initials_5); _ -> mochi_nth(3 + 1, X_initials_5) end end),
        X4 = (case erlang:is_map(X_initials_5) of true -> maps:get(4, X_initials_5, nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(X_initials_5) + 4 + 1, X_initials_5); _ -> mochi_nth(4 + 1, X_initials_5) end end),
        Y_16 = [],
        Y_17 = lists:append((case Y_16 of nil -> []; _ -> Y_16 end), [(case erlang:is_map(Y_initials_4) of true -> maps:get(0, Y_initials_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Y_initials_4) + 0 + 1, Y_initials_4); _ -> mochi_nth(0 + 1, Y_initials_4) end end)]),
        Y_18 = lists:append((case Y_17 of nil -> []; _ -> Y_17 end), [(case erlang:is_map(Y_initials_4) of true -> maps:get(1, Y_initials_4, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Y_initials_4) + 1 + 1, Y_initials_4); _ -> mochi_nth(1 + 1, Y_initials_4) end end)]),
        Y_19 = lists:append((case Y_18 of nil -> []; _ -> Y_18 end), [(case erlang:is_map(Y_initials_4) of true -> maps:get(2, Y_initials_4, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Y_initials_4) + 2 + 1, Y_initials_4); _ -> mochi_nth(2 + 1, Y_initials_4) end end)]),
        Y_20 = lists:append((case Y_19 of nil -> []; _ -> Y_19 end), [(case erlang:is_map(Y_initials_4) of true -> maps:get(3, Y_initials_4, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(Y_initials_4) + 3 + 1, Y_initials_4); _ -> mochi_nth(3 + 1, Y_initials_4) end end)]),
        Y_21 = lists:append((case Y_20 of nil -> []; _ -> Y_20 end), [(case erlang:is_map(Y_initials_4) of true -> maps:get(4, Y_initials_4, nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(Y_initials_4) + 4 + 1, Y_initials_4); _ -> mochi_nth(4 + 1, Y_initials_4) end end)]),
        N_4 = mochi_to_int(mochi_safe_div((X_final_5 - X4), Step_size_5)),
        I_11 = 0,
        Fun_6 = fun Fun_6_loop(F_4, I_11, N_4, Step_size_5, X0_7, X1_7, X2_5, X3_3, X4, X_final_5, X_initials_5, Y_21, Y_initials_4) ->
    case (I_11 =< N_4) of
        true ->
            Term_4 = ((((mochi_safe_mul(1901.0, F_4(X4, (case erlang:is_map(Y_21) of true -> maps:get((I_11 + 4), Y_21, nil); _ -> case (I_11 + 4) < 0 of true -> mochi_nth(erlang:length(Y_21) + (I_11 + 4) + 1, Y_21); _ -> mochi_nth((I_11 + 4) + 1, Y_21) end end))) - mochi_safe_mul(2774.0, F_4(X3_3, (case erlang:is_map(Y_21) of true -> maps:get((I_11 + 3), Y_21, nil); _ -> case (I_11 + 3) < 0 of true -> mochi_nth(erlang:length(Y_21) + (I_11 + 3) + 1, Y_21); _ -> mochi_nth((I_11 + 3) + 1, Y_21) end end)))) - mochi_safe_mul(2616.0, F_4(X2_5, (case erlang:is_map(Y_21) of true -> maps:get((I_11 + 2), Y_21, nil); _ -> case (I_11 + 2) < 0 of true -> mochi_nth(erlang:length(Y_21) + (I_11 + 2) + 1, Y_21); _ -> mochi_nth((I_11 + 2) + 1, Y_21) end end)))) - mochi_safe_mul(1274.0, F_4(X1_7, (case erlang:is_map(Y_21) of true -> maps:get((I_11 + 1), Y_21, nil); _ -> case (I_11 + 1) < 0 of true -> mochi_nth(erlang:length(Y_21) + (I_11 + 1) + 1, Y_21); _ -> mochi_nth((I_11 + 1) + 1, Y_21) end end)))) + mochi_safe_mul(251.0, F_4(X0_7, (case erlang:is_map(Y_21) of true -> maps:get(I_11, Y_21, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Y_21) + I_11 + 1, Y_21); _ -> mochi_nth(I_11 + 1, Y_21) end end)))),
            Y_next_4 = ((case erlang:is_map(Y_21) of true -> maps:get((I_11 + 4), Y_21, nil); _ -> case (I_11 + 4) < 0 of true -> mochi_nth(erlang:length(Y_21) + (I_11 + 4) + 1, Y_21); _ -> mochi_nth((I_11 + 4) + 1, Y_21) end end) + mochi_safe_mul(mochi_safe_div(Step_size_5, 720.0), Term_4)),
            Y_22 = lists:append((case Y_21 of nil -> []; _ -> Y_21 end), [Y_next_4]),
            X0_8 = X1_7,
            X1_8 = X2_5,
            X2_6 = X3_3,
            X3_4 = X4,
            X4_2 = (X4 + Step_size_5),
            I_12 = (I_11 + 1),
            Fun_6_loop(F_4, I_12, N_4, Step_size_5, X0_8, X1_8, X2_6, X3_4, X4_2, X_final_5, X_initials_5, Y_22, Y_initials_4);
        _ -> {F_4, I_11, N_4, Step_size_5, X0_7, X1_7, X2_5, X3_3, X4, X_final_5, X_initials_5, Y_21, Y_initials_4}
    end
end,
{F_4, I_12, N_4, Step_size_5, X0_8, X1_8, X2_6, X3_4, X4_2, X_final_5, X_initials_5, Y_22, Y_initials_4} = Fun_6(F_4, I_11, N_4, Step_size_5, X0_7, X1_7, X2_5, X3_3, X4, X_final_5, X_initials_5, Y_21, Y_initials_4),
        Y_22
    catch {return, Ret} -> Ret end.

f_x(X_2, Y_23) ->
    try
        X_2
    catch {return, Ret} -> Ret end.

f_xy(X_3, Y_24) ->
    try
        (X_3 + Y_24)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('y2', adams_bashforth_step2(fun f_x/2, [0.0, 0.2], [0.0, 0.0], 0.2, 1.0)),
    io:format("~ts~n", [mochi_repr(list_to_string(erlang:get('y2')))]),
    erlang:put('y3', adams_bashforth_step3(fun f_xy/2, [0.0, 0.2, 0.4], [0.0, 0.0, 0.04], 0.2, 1.0)),
    io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('y3')) of true -> maps:get(3, erlang:get('y3'), nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(erlang:get('y3')) + 3 + 1, erlang:get('y3')); _ -> mochi_nth(3 + 1, erlang:get('y3')) end end))]),
    erlang:put('y4', adams_bashforth_step4(fun f_xy/2, [0.0, 0.2, 0.4, 0.6], [0.0, 0.0, 0.04, 0.128], 0.2, 1.0)),
    io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('y4')) of true -> maps:get(4, erlang:get('y4'), nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(erlang:get('y4')) + 4 + 1, erlang:get('y4')); _ -> mochi_nth(4 + 1, erlang:get('y4')) end end))]),
    io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('y4')) of true -> maps:get(5, erlang:get('y4'), nil); _ -> case 5 < 0 of true -> mochi_nth(erlang:length(erlang:get('y4')) + 5 + 1, erlang:get('y4')); _ -> mochi_nth(5 + 1, erlang:get('y4')) end end))]),
    erlang:put('y5', adams_bashforth_step5(fun f_xy/2, [0.0, 0.2, 0.4, 0.6, 0.8], [0.0, 0.0214, 0.0214, 0.22211, 0.42536], 0.2, 1.0)),
    io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('y5')) of true -> maps:get((erlang:length(erlang:get('y5')) - 1), erlang:get('y5'), nil); _ -> case (erlang:length(erlang:get('y5')) - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('y5')) + (erlang:length(erlang:get('y5')) - 1) + 1, erlang:get('y5')); _ -> mochi_nth((erlang:length(erlang:get('y5')) - 1) + 1, erlang:get('y5')) end end))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
