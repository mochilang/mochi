#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, equation/1, bisection/2]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

equation(X) ->
    try
        (10.0 - mochi_safe_mul(X, X))
    catch {return, Ret} -> Ret end.

bisection(A, B) ->
    try
        case (mochi_safe_mul(equation(A), equation(B)) >= 0.0) of
        true -> erlang:error("Wrong space!");
        _ -> ok
    end,
        Left = A,
        Right = B,
        C = Left,
        Fun = fun Fun_loop(A, B, C, Left, Right) ->
    case ((Right - Left) >= 0.01) of
        true ->
            try
                C_2 = mochi_safe_div((Left + Right), 2.0),
                case (equation(C_2) == 0.0) of
        true -> throw({break, A, B, C_2, Left, Right});
        _ -> ok
    end,
                case (mochi_safe_mul(equation(C_2), equation(Left)) < 0.0) of
        true -> Right_2 = C_2,
            Left_3 = Left,
            Right_3 = Right_2;
        _ -> Left_2 = C_2,
            Left_3 = Left_2,
            Right_3 = Right
    end,
                Fun_loop(A, B, C_2, Left_3, Right_3)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {A, B, C, Left, Right}
    end
end,
{A, B, C_2, Left_3, Right_3} = Fun(A, B, C, Left, Right),
        C_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(bisection(-2.0, 5.0))]),
    io:format("~ts~n", [mochi_repr(bisection(0.0, 6.0))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
