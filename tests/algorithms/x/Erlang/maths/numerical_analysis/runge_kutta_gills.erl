#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrt/1, runge_kutta_gills/5, f1/2, f2/2]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

sqrt(X) ->
    try
        Guess = (case (X > 1.0) of
    true -> mochi_safe_div(X, 2.0);
    _ -> 1.0
end),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_mul(0.5, (Guess + mochi_safe_div(X, Guess))),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, Ret} -> Ret end.

runge_kutta_gills(Func, X_initial, Y_initial, Step_size, X_final) ->
    try
        case (X_initial >= X_final) of
        true -> erlang:error("The final value of x must be greater than initial value of x.");
        _ -> ok
    end,
        case (Step_size =< 0.0) of
        true -> erlang:error("Step size must be positive.");
        _ -> ok
    end,
        N = mochi_to_int(mochi_safe_div((X_final - X_initial), Step_size)),
        Y = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Func, I_3, N, Step_size, X_final, X_initial, Y, Y_initial) ->
    case (I_3 =< N) of
        true ->
            Y_2 = lists:append((case Y of nil -> []; _ -> Y end), [0.0]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Func, I_4, N, Step_size, X_final, X_initial, Y_2, Y_initial);
        _ -> {Func, I_3, N, Step_size, X_final, X_initial, Y, Y_initial}
    end
end,
{Func, I_4, N, Step_size, X_final, X_initial, Y_2, Y_initial} = Fun_2(Func, I_3, N, Step_size, X_final, X_initial, Y, Y_initial),
        Y_3 = lists:sublist(Y_2, 0) ++ [Y_initial] ++ lists:nthtail(0 + 1, Y_2),
        Xi = X_initial,
        Idx = 0,
        Root2 = sqrt(2.0),
        Fun_3 = fun Fun_3_loop(Func, I_4, Idx, N, Root2, Step_size, X_final, X_initial, Xi, Y_3, Y_initial) ->
    case (Idx < N) of
        true ->
            K1 = mochi_safe_mul(Step_size, Func(Xi, (case erlang:is_map(Y_3) of true -> maps:get(Idx, Y_3, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Y_3) + Idx + 1, Y_3); _ -> mochi_nth(Idx + 1, Y_3) end end))),
            K2 = mochi_safe_mul(Step_size, Func((Xi + mochi_safe_div(Step_size, 2.0)), ((case erlang:is_map(Y_3) of true -> maps:get(Idx, Y_3, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Y_3) + Idx + 1, Y_3); _ -> mochi_nth(Idx + 1, Y_3) end end) + mochi_safe_div(K1, 2.0)))),
            K3 = mochi_safe_mul(Step_size, Func((Xi + mochi_safe_div(Step_size, 2.0)), (((case erlang:is_map(Y_3) of true -> maps:get(Idx, Y_3, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Y_3) + Idx + 1, Y_3); _ -> mochi_nth(Idx + 1, Y_3) end end) + mochi_safe_mul((-0.5 + mochi_safe_div(1.0, Root2)), K1)) + mochi_safe_mul((1.0 - mochi_safe_div(1.0, Root2)), K2)))),
            K4 = mochi_safe_mul(Step_size, Func((Xi + Step_size), (((case erlang:is_map(Y_3) of true -> maps:get(Idx, Y_3, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Y_3) + Idx + 1, Y_3); _ -> mochi_nth(Idx + 1, Y_3) end end) - mochi_safe_mul(mochi_safe_div(1.0, Root2), K2)) + mochi_safe_mul((1.0 + mochi_safe_div(1.0, Root2)), K3)))),
            Y_4 = lists:sublist(Y_3, (Idx + 1)) ++ [((case erlang:is_map(Y_3) of true -> maps:get(Idx, Y_3, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Y_3) + Idx + 1, Y_3); _ -> mochi_nth(Idx + 1, Y_3) end end) + mochi_safe_div((((K1 + mochi_safe_mul((2.0 - Root2), K2)) + mochi_safe_mul((2.0 + Root2), K3)) + K4), 6.0))] ++ lists:nthtail((Idx + 1) + 1, Y_3),
            Xi_2 = (Xi + Step_size),
            Idx_2 = (Idx + 1),
            Fun_3_loop(Func, I_4, Idx_2, N, Root2, Step_size, X_final, X_initial, Xi_2, Y_4, Y_initial);
        _ -> {Func, I_4, Idx, N, Root2, Step_size, X_final, X_initial, Xi, Y_3, Y_initial}
    end
end,
{Func, I_4, Idx_2, N, Root2, Step_size, X_final, X_initial, Xi_2, Y_4, Y_initial} = Fun_3(Func, I_4, Idx, N, Root2, Step_size, X_final, X_initial, Xi, Y_3, Y_initial),
        Y_4
    catch {return, Ret} -> Ret end.

f1(X_2, Y_5) ->
    try
        mochi_safe_div((X_2 - Y_5), 2.0)
    catch {return, Ret} -> Ret end.

f2(X_3, Y_6) ->
    try
        X_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('y1', runge_kutta_gills(fun f1/2, 0.0, 3.0, 0.2, 5.0)),
    io:format("~ts~n", [mochi_str((case erlang:is_map(erlang:get('y1')) of true -> maps:get((erlang:length(erlang:get('y1')) - 1), erlang:get('y1'), nil); _ -> case (erlang:length(erlang:get('y1')) - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('y1')) + (erlang:length(erlang:get('y1')) - 1) + 1, erlang:get('y1')); _ -> mochi_nth((erlang:length(erlang:get('y1')) - 1) + 1, erlang:get('y1')) end end))]),
    erlang:put('y2', runge_kutta_gills(fun f2/2, -1.0, 0.0, 0.2, 0.0)),
    io:format("~ts~n", [mochi_str(erlang:get('y2'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
