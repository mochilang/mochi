#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs_float/1, intersection/3, f/1, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

abs_float(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

intersection(Function, X0, X1) ->
    try
        X_n = X0,
        X_n1 = X1,
        Fun = fun Fun_loop(Function, X0, X1, X_n, X_n1) ->
    case true of
        true ->
            case ((X_n == X_n1) orelse (Function(X_n1) == Function(X_n))) of
        true -> erlang:error("float division by zero, could not find root");
        _ -> ok
    end,
            Numerator = Function(X_n1),
            Denominator = mochi_safe_div((Function(X_n1) - Function(X_n)), (X_n1 - X_n)),
            X_n2 = (X_n1 - mochi_safe_div(Numerator, Denominator)),
            case (abs_float((X_n2 - X_n1)) < 0.00001) of
        true -> throw({return, X_n2});
        _ -> ok
    end,
            X_n_2 = X_n1,
            X_n1_2 = X_n2,
            Fun_loop(Function, X0, X1, X_n_2, X_n1_2);
        _ -> {Function, X0, X1, X_n, X_n1}
    end
end,
{Function, X0, X1, X_n_2, X_n1_2} = Fun(Function, X0, X1, X_n, X_n1),
        nil
    catch {return, Ret} -> Ret end.

f(X_2) ->
    try
        ((mochi_safe_mul(mochi_safe_mul(X_2, X_2), X_2) - mochi_safe_mul(2.0, X_2)) - 5.0)
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_str(intersection(fun f/1, 3.0, 3.5))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
