#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, neville_interpolate/3, test_neville/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

neville_interpolate(X_points, Y_points, X0) ->
    try
        N = erlang:length(X_points),
        Q = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, N, Q, X0, X_points, Y_points) ->
    case (I < N) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(I, J, N, Q, Row, X0, X_points, Y_points) ->
    case (J < N) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0.0]),
            J_2 = (J + 1),
            Fun_loop(I, J_2, N, Q, Row_2, X0, X_points, Y_points);
        _ -> {I, J, N, Q, Row, X0, X_points, Y_points}
    end
end,
{I, J_2, N, Q, Row_2, X0, X_points, Y_points} = Fun(I, J, N, Q, Row, X0, X_points, Y_points),
            Q_2 = lists:append((case Q of nil -> []; _ -> Q end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, N, Q_2, X0, X_points, Y_points);
        _ -> {I, N, Q, X0, X_points, Y_points}
    end
end,
{I_2, N, Q_2, X0, X_points, Y_points} = Fun_2(I, N, Q, X0, X_points, Y_points),
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, N, Q_2, X0, X_points, Y_points) ->
    case (I_3 < N) of
        true ->
            Q_3 = lists:sublist(Q_2, I_3) ++ [lists:sublist(lists:nth(I_3 + 1, Q_2), 1) ++ [(case erlang:is_map(Y_points) of true -> maps:get(I_3, Y_points, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Y_points) + I_3 + 1, Y_points); _ -> mochi_nth(I_3 + 1, Y_points) end end)] ++ lists:nthtail(1 + 1, lists:nth(I_3 + 1, Q_2))] ++ lists:nthtail(I_3 + 1, Q_2),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, N, Q_3, X0, X_points, Y_points);
        _ -> {I_3, N, Q_2, X0, X_points, Y_points}
    end
end,
{I_4, N, Q_3, X0, X_points, Y_points} = Fun_3(I_3, N, Q_2, X0, X_points, Y_points),
        Col = 2,
        Fun_5 = fun Fun_5_loop(Col, I_4, N, Q_3, X0, X_points, Y_points) ->
    case (Col < N) of
        true ->
            Row_idx = Col,
            Fun_4 = fun Fun_4_loop(Col, I_4, N, Q_3, Row_idx, X0, X_points, Y_points) ->
    case (Row_idx < N) of
        true ->
            Q_4 = lists:sublist(Q_3, Row_idx) ++ [lists:sublist(lists:nth(Row_idx + 1, Q_3), Col) ++ [mochi_safe_div((mochi_safe_mul((X0 - (case erlang:is_map(X_points) of true -> maps:get(((Row_idx - Col) + 1), X_points, nil); _ -> case ((Row_idx - Col) + 1) < 0 of true -> mochi_nth(erlang:length(X_points) + ((Row_idx - Col) + 1) + 1, X_points); _ -> mochi_nth(((Row_idx - Col) + 1) + 1, X_points) end end)), (case erlang:is_map((case erlang:is_map(Q_3) of true -> maps:get(Row_idx, Q_3, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Q_3) + Row_idx + 1, Q_3); _ -> mochi_nth(Row_idx + 1, Q_3) end end)) of true -> maps:get((Col - 1), (case erlang:is_map(Q_3) of true -> maps:get(Row_idx, Q_3, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Q_3) + Row_idx + 1, Q_3); _ -> mochi_nth(Row_idx + 1, Q_3) end end), nil); _ -> case (Col - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Q_3) of true -> maps:get(Row_idx, Q_3, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Q_3) + Row_idx + 1, Q_3); _ -> mochi_nth(Row_idx + 1, Q_3) end end)) + (Col - 1) + 1, (case erlang:is_map(Q_3) of true -> maps:get(Row_idx, Q_3, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Q_3) + Row_idx + 1, Q_3); _ -> mochi_nth(Row_idx + 1, Q_3) end end)); _ -> mochi_nth((Col - 1) + 1, (case erlang:is_map(Q_3) of true -> maps:get(Row_idx, Q_3, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(Q_3) + Row_idx + 1, Q_3); _ -> mochi_nth(Row_idx + 1, Q_3) end end)) end end)) - mochi_safe_mul((X0 - (case erlang:is_map(X_points) of true -> maps:get(Row_idx, X_points, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(X_points) + Row_idx + 1, X_points); _ -> mochi_nth(Row_idx + 1, X_points) end end)), (case erlang:is_map((case erlang:is_map(Q_3) of true -> maps:get((Row_idx - 1), Q_3, nil); _ -> case (Row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Q_3) + (Row_idx - 1) + 1, Q_3); _ -> mochi_nth((Row_idx - 1) + 1, Q_3) end end)) of true -> maps:get((Col - 1), (case erlang:is_map(Q_3) of true -> maps:get((Row_idx - 1), Q_3, nil); _ -> case (Row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Q_3) + (Row_idx - 1) + 1, Q_3); _ -> mochi_nth((Row_idx - 1) + 1, Q_3) end end), nil); _ -> case (Col - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Q_3) of true -> maps:get((Row_idx - 1), Q_3, nil); _ -> case (Row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Q_3) + (Row_idx - 1) + 1, Q_3); _ -> mochi_nth((Row_idx - 1) + 1, Q_3) end end)) + (Col - 1) + 1, (case erlang:is_map(Q_3) of true -> maps:get((Row_idx - 1), Q_3, nil); _ -> case (Row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Q_3) + (Row_idx - 1) + 1, Q_3); _ -> mochi_nth((Row_idx - 1) + 1, Q_3) end end)); _ -> mochi_nth((Col - 1) + 1, (case erlang:is_map(Q_3) of true -> maps:get((Row_idx - 1), Q_3, nil); _ -> case (Row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Q_3) + (Row_idx - 1) + 1, Q_3); _ -> mochi_nth((Row_idx - 1) + 1, Q_3) end end)) end end))), ((case erlang:is_map(X_points) of true -> maps:get(Row_idx, X_points, nil); _ -> case Row_idx < 0 of true -> mochi_nth(erlang:length(X_points) + Row_idx + 1, X_points); _ -> mochi_nth(Row_idx + 1, X_points) end end) - (case erlang:is_map(X_points) of true -> maps:get(((Row_idx - Col) + 1), X_points, nil); _ -> case ((Row_idx - Col) + 1) < 0 of true -> mochi_nth(erlang:length(X_points) + ((Row_idx - Col) + 1) + 1, X_points); _ -> mochi_nth(((Row_idx - Col) + 1) + 1, X_points) end end)))] ++ lists:nthtail(Col + 1, lists:nth(Row_idx + 1, Q_3))] ++ lists:nthtail(Row_idx + 1, Q_3),
            Row_idx_2 = (Row_idx + 1),
            Fun_4_loop(Col, I_4, N, Q_4, Row_idx_2, X0, X_points, Y_points);
        _ -> {Col, I_4, N, Q_3, Row_idx, X0, X_points, Y_points}
    end
end,
{Col, I_4, N, Q_4, Row_idx_2, X0, X_points, Y_points} = Fun_4(Col, I_4, N, Q_3, Row_idx, X0, X_points, Y_points),
            Col_2 = (Col + 1),
            Fun_5_loop(Col_2, I_4, N, Q_4, X0, X_points, Y_points);
        _ -> {Col, I_4, N, Q_3, X0, X_points, Y_points}
    end
end,
{Col_2, I_4, N, Q_4, X0, X_points, Y_points} = Fun_5(Col, I_4, N, Q_3, X0, X_points, Y_points),
        #{"value" => (case erlang:is_map((case erlang:is_map(Q_4) of true -> maps:get((N - 1), Q_4, nil); _ -> case (N - 1) < 0 of true -> mochi_nth(erlang:length(Q_4) + (N - 1) + 1, Q_4); _ -> mochi_nth((N - 1) + 1, Q_4) end end)) of true -> maps:get((N - 1), (case erlang:is_map(Q_4) of true -> maps:get((N - 1), Q_4, nil); _ -> case (N - 1) < 0 of true -> mochi_nth(erlang:length(Q_4) + (N - 1) + 1, Q_4); _ -> mochi_nth((N - 1) + 1, Q_4) end end), nil); _ -> case (N - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Q_4) of true -> maps:get((N - 1), Q_4, nil); _ -> case (N - 1) < 0 of true -> mochi_nth(erlang:length(Q_4) + (N - 1) + 1, Q_4); _ -> mochi_nth((N - 1) + 1, Q_4) end end)) + (N - 1) + 1, (case erlang:is_map(Q_4) of true -> maps:get((N - 1), Q_4, nil); _ -> case (N - 1) < 0 of true -> mochi_nth(erlang:length(Q_4) + (N - 1) + 1, Q_4); _ -> mochi_nth((N - 1) + 1, Q_4) end end)); _ -> mochi_nth((N - 1) + 1, (case erlang:is_map(Q_4) of true -> maps:get((N - 1), Q_4, nil); _ -> case (N - 1) < 0 of true -> mochi_nth(erlang:length(Q_4) + (N - 1) + 1, Q_4); _ -> mochi_nth((N - 1) + 1, Q_4) end end)) end end), "table" => Q_4}
    catch {return, Ret} -> Ret end.

test_neville() ->
    try
        Xs = [1.0, 2.0, 3.0, 4.0, 6.0],
        Ys = [6.0, 7.0, 8.0, 9.0, 11.0],
        R1 = neville_interpolate(Xs, Ys, 5.0),
        case (maps:get("value", R1, nil) /= 10.0) of
        true -> erlang:error("neville_interpolate at 5 failed");
        _ -> ok
    end,
        R2 = neville_interpolate(Xs, Ys, 99.0),
        case (maps:get("value", R2, nil) /= 104.0) of
        true -> erlang:error("neville_interpolate at 99 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_neville(),
        Xs_2 = [1.0, 2.0, 3.0, 4.0, 6.0],
        Ys_2 = [6.0, 7.0, 8.0, 9.0, 11.0],
        R = neville_interpolate(Xs_2, Ys_2, 5.0),
        io:format("~ts~n", [mochi_repr(maps:get("value", R, nil))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
