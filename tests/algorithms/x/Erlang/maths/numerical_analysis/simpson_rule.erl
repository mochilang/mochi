#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, f/1, make_points/3, simpson_rule/2]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

f(X) ->
    try
        mochi_safe_mul((X - 0.0), (X - 0.0))
    catch {return, Ret} -> Ret end.

make_points(A, B, H) ->
    try
        Points = [],
        X_2 = (A + H),
        Fun = fun Fun_loop(A, B, H, Points, X_2) ->
    case (X_2 < (B - H)) of
        true ->
            Points_2 = lists:append((case Points of nil -> []; _ -> Points end), [X_2]),
            X_3 = (X_2 + H),
            Fun_loop(A, B, H, Points_2, X_3);
        _ -> {A, B, H, Points, X_2}
    end
end,
{A, B, H, Points_2, X_3} = Fun(A, B, H, Points, X_2),
        Points_2
    catch {return, Ret} -> Ret end.

simpson_rule(Boundary, Steps) ->
    try
        case (Steps =< 0) of
        true -> erlang:error("Number of steps must be greater than zero");
        _ -> ok
    end,
        A_2 = (case erlang:is_map(Boundary) of true -> maps:get(0, Boundary, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Boundary) + 0 + 1, Boundary); _ -> mochi_nth(0 + 1, Boundary) end end),
        B_2 = (case erlang:is_map(Boundary) of true -> maps:get(1, Boundary, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Boundary) + 1 + 1, Boundary); _ -> mochi_nth(1 + 1, Boundary) end end),
        H_2 = mochi_safe_div((B_2 - A_2), float(Steps)),
        Pts = make_points(A_2, B_2, H_2),
        Y = mochi_safe_mul(mochi_safe_div(H_2, 3.0), f(A_2)),
        Cnt = 2,
        I = 0,
        Fun_2 = fun Fun_2_loop(A_2, B_2, Boundary, Cnt, H_2, I, Pts, Steps, Y) ->
    case (I < erlang:length(Pts)) of
        true ->
            Coeff = (4.0 - mochi_safe_mul(2.0, float(mochi_mod(Cnt, 2)))),
            Y_2 = (Y + mochi_safe_mul(mochi_safe_mul(mochi_safe_div(H_2, 3.0), Coeff), f((case erlang:is_map(Pts) of true -> maps:get(I, Pts, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Pts) + I + 1, Pts); _ -> mochi_nth(I + 1, Pts) end end)))),
            Cnt_2 = (Cnt + 1),
            I_2 = (I + 1),
            Fun_2_loop(A_2, B_2, Boundary, Cnt_2, H_2, I_2, Pts, Steps, Y_2);
        _ -> {A_2, B_2, Boundary, Cnt, H_2, I, Pts, Steps, Y}
    end
end,
{A_2, B_2, Boundary, Cnt_2, H_2, I_2, Pts, Steps, Y_2} = Fun_2(A_2, B_2, Boundary, Cnt, H_2, I, Pts, Steps, Y),
        Y_3 = (Y_2 + mochi_safe_mul(mochi_safe_div(H_2, 3.0), f(B_2))),
        Y_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('result', simpson_rule([0.0, 1.0], 10)),
    io:format("~ts~n", [mochi_str(erlang:get('result'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
