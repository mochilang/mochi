#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, runge_kutta_fehlberg_45/5, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

runge_kutta_fehlberg_45(Func, X_initial, Y_initial, Step_size, X_final) ->
    try
        case (X_initial >= X_final) of
        true -> erlang:error("The final value of x must be greater than initial value of x.");
        _ -> ok
    end,
        case (Step_size =< 0.0) of
        true -> erlang:error("Step size must be positive.");
        _ -> ok
    end,
        N = mochi_to_int(mochi_safe_div((X_final - X_initial), Step_size)),
        Ys = [],
        X = X_initial,
        Y = Y_initial,
        Ys_2 = lists:append((case Ys of nil -> []; _ -> Ys end), [Y]),
        I = 0,
        Fun = fun Fun_loop(Func, I, N, Step_size, X, X_final, X_initial, Y, Y_initial, Ys_2) ->
    case (I < N) of
        true ->
            K1 = mochi_safe_mul(Step_size, Func(X, Y)),
            K2 = mochi_safe_mul(Step_size, Func((X + mochi_safe_div(Step_size, 4.0)), (Y + mochi_safe_div(K1, 4.0)))),
            K3 = mochi_safe_mul(Step_size, Func((X + mochi_safe_mul(mochi_safe_div(3.0, 8.0), Step_size)), ((Y + mochi_safe_mul(mochi_safe_div(3.0, 32.0), K1)) + mochi_safe_mul(mochi_safe_div(9.0, 32.0), K2)))),
            K4 = mochi_safe_mul(Step_size, Func((X + mochi_safe_mul(mochi_safe_div(12.0, 13.0), Step_size)), (((Y + mochi_safe_mul(mochi_safe_div(1932.0, 2197.0), K1)) - mochi_safe_mul(mochi_safe_div(7200.0, 2197.0), K2)) + mochi_safe_mul(mochi_safe_div(7296.0, 2197.0), K3)))),
            K5 = mochi_safe_mul(Step_size, Func((X + Step_size), ((((Y + mochi_safe_mul(mochi_safe_div(439.0, 216.0), K1)) - mochi_safe_mul(8.0, K2)) + mochi_safe_mul(mochi_safe_div(3680.0, 513.0), K3)) - mochi_safe_mul(mochi_safe_div(845.0, 4104.0), K4)))),
            K6 = mochi_safe_mul(Step_size, Func((X + mochi_safe_div(Step_size, 2.0)), (((((Y - mochi_safe_mul(mochi_safe_div(8.0, 27.0), K1)) + mochi_safe_mul(2.0, K2)) - mochi_safe_mul(mochi_safe_div(3544.0, 2565.0), K3)) + mochi_safe_mul(mochi_safe_div(1859.0, 4104.0), K4)) - mochi_safe_mul(mochi_safe_div(11.0, 40.0), K5)))),
            Y_2 = (((((Y + mochi_safe_mul(mochi_safe_div(16.0, 135.0), K1)) + mochi_safe_mul(mochi_safe_div(6656.0, 12825.0), K3)) + mochi_safe_mul(mochi_safe_div(28561.0, 56430.0), K4)) - mochi_safe_mul(mochi_safe_div(9.0, 50.0), K5)) + mochi_safe_mul(mochi_safe_div(2.0, 55.0), K6)),
            X_2 = (X + Step_size),
            Ys_3 = lists:append((case Ys_2 of nil -> []; _ -> Ys_2 end), [Y_2]),
            I_2 = (I + 1),
            Fun_loop(Func, I_2, N, Step_size, X_2, X_final, X_initial, Y_2, Y_initial, Ys_3);
        _ -> {Func, I, N, Step_size, X, X_final, X_initial, Y, Y_initial, Ys_2}
    end
end,
{Func, I_2, N, Step_size, X_2, X_final, X_initial, Y_2, Y_initial, Ys_3} = Fun(Func, I, N, Step_size, X, X_final, X_initial, Y, Y_initial, Ys_2),
        Ys_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        F1 = fun F1(X_3, Y_3) ->
    try
        (1.0 + (Y_3 * Y_3))
    catch {return, Ret} -> Ret end
end,
        Y1 = runge_kutta_fehlberg_45(F1, 0.0, 0.0, 0.2, 1.0),
        io:format("~ts~n", [mochi_repr((case erlang:is_map(Y1) of true -> maps:get(1, Y1, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Y1) + 1 + 1, Y1); _ -> mochi_nth(1 + 1, Y1) end end))]),
        F2 = fun F2(X_4, Y_4) ->
    try
        X_4
    catch {return, Ret} -> Ret end
end,
        Y2 = runge_kutta_fehlberg_45(F2, -1.0, 0.0, 0.2, 0.0),
        io:format("~ts~n", [mochi_repr((case erlang:is_map(Y2) of true -> maps:get(1, Y2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Y2) + 1 + 1, Y2); _ -> mochi_nth(1 + 1, Y2) end end))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
