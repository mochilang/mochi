#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs_float/1, fail/1, calc_derivative/3, newton_raphson/6, poly/1]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

abs_float(X) ->
    try
        case (X < 0.0) of
        true -> throw({return, -X});
        _ -> throw({return, X})
    end,
        nil
    catch {return, Ret} -> Ret end.

fail(Msg) ->
    try
        io:format("~ts~n", [mochi_repr(("error: " ++ Msg))]),
        nil
    catch {return, Ret} -> Ret end.

calc_derivative(F, X_2, Delta_x) ->
    try
        mochi_safe_div((F((X_2 + mochi_safe_div(Delta_x, 2.0))) - F((X_2 - mochi_safe_div(Delta_x, 2.0)))), Delta_x)
    catch {return, Ret} -> Ret end.

newton_raphson(F_2, X0, Max_iter, Step, Max_error, Log_steps) ->
    try
        A = X0,
        Steps = [],
        I = 0,
        Fun = fun Fun_loop(A, F_2, I, Log_steps, Max_error, Max_iter, Step, Steps, X0) ->
    case (I < Max_iter) of
        true ->
            case Log_steps of
        true -> Steps_2 = lists:append((case Steps of nil -> []; _ -> Steps end), [A]),
            Steps_3 = Steps_2;
        _ -> Steps_3 = Steps
    end,
            Err = abs_float(F_2(A)),
            case (Err < Max_error) of
        true -> throw({return, #{"root" => A, "error" => Err, "steps" => Steps_3}});
        _ -> ok
    end,
            Der = calc_derivative(F_2, A, Step),
            case (Der == 0.0) of
        true -> fail("No converging solution found, zero derivative"),
            throw({return, #{"root" => A, "error" => Err, "steps" => Steps_3}});
        _ -> ok
    end,
            A_2 = (A - mochi_safe_div(F_2(A), Der)),
            I_2 = (I + 1),
            Fun_loop(A_2, F_2, I_2, Log_steps, Max_error, Max_iter, Step, Steps_3, X0);
        _ -> {A, F_2, I, Log_steps, Max_error, Max_iter, Step, Steps, X0}
    end
end,
{A_2, F_2, I_2, Log_steps, Max_error, Max_iter, Step, Steps_3, X0} = Fun(A, F_2, I, Log_steps, Max_error, Max_iter, Step, Steps, X0),
        fail("No converging solution found, iteration limit reached"),
        #{"root" => A_2, "error" => abs_float(F_2(A_2)), "steps" => Steps_3}
    catch {return, Ret} -> Ret end.

poly(X_3) ->
    try
        ((mochi_safe_mul(X_3, X_3) - mochi_safe_mul(5.0, X_3)) + 2.0)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('result', newton_raphson(fun poly/1, 0.4, 20, 0.000001, 0.000001, false)),
    io:format("~ts~n", [mochi_repr(((("root = " ++ mochi_str(maps:get("root", erlang:get('result'), nil))) ++ ", error = ") ++ mochi_str(maps:get("error", erlang:get('result'), nil))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
