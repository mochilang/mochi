#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, exp_approx/1, f/1, secant_method/3]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

exp_approx(X) ->
    try
        Sum = 1.0,
        Term = 1.0,
        I = 1,
        Fun = fun Fun_loop(I, Sum, Term, X) ->
    case (I =< 20) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X), I),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, Term_2, X);
        _ -> {I, Sum, Term, X}
    end
end,
{I_2, Sum_2, Term_2, X} = Fun(I, Sum, Term, X),
        Sum_2
    catch {return, Ret} -> Ret end.

f(X_2) ->
    try
        (mochi_safe_mul(8.0, X_2) - mochi_safe_mul(2.0, exp_approx(-X_2)))
    catch {return, Ret} -> Ret end.

secant_method(Lower_bound, Upper_bound, Repeats) ->
    try
        X0 = Lower_bound,
        X1 = Upper_bound,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Lower_bound, Repeats, Upper_bound, X0, X1) ->
    case (I_3 < Repeats) of
        true ->
            Fx1 = f(X1),
            Fx0 = f(X0),
            New_x = (X1 - mochi_safe_div(mochi_safe_mul(Fx1, (X1 - X0)), (Fx1 - Fx0))),
            X0_2 = X1,
            X1_2 = New_x,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Lower_bound, Repeats, Upper_bound, X0_2, X1_2);
        _ -> {I_3, Lower_bound, Repeats, Upper_bound, X0, X1}
    end
end,
{I_4, Lower_bound, Repeats, Upper_bound, X0_2, X1_2} = Fun_2(I_3, Lower_bound, Repeats, Upper_bound, X0, X1),
        X1_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(secant_method(1.0, 3.0, 2))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
