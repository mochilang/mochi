#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, fx/2, fx_derivative/1, get_initial_point/1, abs_float/1, square_root_iterative/3]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

fx(X, A) ->
    try
        (mochi_safe_mul(X, X) - A)
    catch {return, Ret} -> Ret end.

fx_derivative(X_2) ->
    try
        mochi_safe_mul(2.0, X_2)
    catch {return, Ret} -> Ret end.

get_initial_point(A_2) ->
    try
        Start = 2.0,
        Fun = fun Fun_loop(A_2, Start) ->
    case (Start =< A_2) of
        true ->
            Start_2 = mochi_safe_mul(Start, Start),
            Fun_loop(A_2, Start_2);
        _ -> {A_2, Start}
    end
end,
{A_2, Start_2} = Fun(A_2, Start),
        Start_2
    catch {return, Ret} -> Ret end.

abs_float(X_3) ->
    try
        (case (X_3 < 0.0) of
    true -> -X_3;
    _ -> X_3
end)
    catch {return, Ret} -> Ret end.

square_root_iterative(A_3, Max_iter, Tolerance) ->
    try
        case (A_3 < 0.0) of
        true -> erlang:error("math domain error");
        _ -> ok
    end,
        Value = get_initial_point(A_3),
        I = 0,
        Fun_2 = fun Fun_2_loop(A_3, I, Max_iter, Tolerance, Value) ->
    case (I < Max_iter) of
        true ->
            Prev_value = Value,
            Value_2 = (Value - mochi_safe_div(fx(Value, A_3), fx_derivative(Value))),
            case (abs_float((Prev_value - Value_2)) < Tolerance) of
        true -> throw({return, Value_2});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_2_loop(A_3, I_2, Max_iter, Tolerance, Value_2);
        _ -> {A_3, I, Max_iter, Tolerance, Value}
    end
end,
{A_3, I_2, Max_iter, Tolerance, Value_2} = Fun_2(A_3, I, Max_iter, Tolerance, Value),
        Value_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('r1', square_root_iterative(4.0, 9999, 0.00000000000001)),
    io:format("~ts~n", [mochi_str(erlang:get('r1'))]),
    erlang:put('r2', square_root_iterative(3.2, 9999, 0.00000000000001)),
    io:format("~ts~n", [mochi_str(erlang:get('r2'))]),
    erlang:put('r3', square_root_iterative(140.0, 9999, 0.00000000000001)),
    io:format("~ts~n", [mochi_str(erlang:get('r3'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
