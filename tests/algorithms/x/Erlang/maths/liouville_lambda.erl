#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, prime_factors/1, liouville_lambda/1]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

prime_factors(N) ->
    try
        I = 2,
        X = N,
        Factors = [],
        Fun = fun Fun_loop(Factors, I, N, X) ->
    case ((I * I) =< X) of
        true ->
            case (mochi_mod(X, I) == 0) of
        true -> Factors_2 = lists:append((case Factors of nil -> []; _ -> Factors end), [I]),
            X_2 = mochi_to_int((X div I)),
            Factors_3 = Factors_2,
            I_3 = I,
            X_3 = X_2;
        _ -> I_2 = (I + 1),
            Factors_3 = Factors,
            I_3 = I_2,
            X_3 = X
    end,
            Fun_loop(Factors_3, I_3, N, X_3);
        _ -> {Factors, I, N, X}
    end
end,
{Factors_3, I_3, N, X_3} = Fun(Factors, I, N, X),
        case (X_3 > 1) of
        true -> Factors_4 = lists:append((case Factors_3 of nil -> []; _ -> Factors_3 end), [X_3]),
            Factors_5 = Factors_4;
        _ -> Factors_5 = Factors_3
    end,
        Factors_5
    catch {return, Ret} -> Ret end.

liouville_lambda(N_2) ->
    try
        case (N_2 < 1) of
        true -> erlang:error("Input must be a positive integer");
        _ -> ok
    end,
        Cnt = erlang:length(prime_factors(N_2)),
        case (mochi_mod(Cnt, 2) == 0) of
        true -> throw({return, 1});
        _ -> ok
    end,
        (0 - 1)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(liouville_lambda(10))]),
    io:format("~ts~n", [mochi_repr(liouville_lambda(11))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
