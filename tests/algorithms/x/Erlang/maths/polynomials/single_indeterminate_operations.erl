#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, copy_list/1, polynomial_new/2, add/2, neg/1, sub/2, mul/2, power/2, evaluate/2, poly_to_string/1, derivative/1, integral/2, equals/2, not_equals/2, test_polynomial/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

copy_list(Xs) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, Res, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Res_2, Xs);
        _ -> {I, Res, Xs}
    end
end,
{I_2, Res_2, Xs} = Fun(I, Res, Xs),
        Res_2
    catch {return, Ret} -> Ret end.

polynomial_new(Degree, Coeffs) ->
    try
        case (erlang:length(Coeffs) /= (Degree + 1)) of
        true -> erlang:error("The number of coefficients should be equal to the degree + 1.");
        _ -> ok
    end,
        #{"degree" => Degree, "coefficients" => copy_list(Coeffs)}
    catch {return, Ret} -> Ret end.

add(P, Q) ->
    try
        case (maps:get("degree", P, nil) > maps:get("degree", Q, nil)) of
        true -> Coeffs_2 = copy_list(maps:get("coefficients", P, nil)),
            I_3 = 0,
            Fun_2 = fun Fun_2_loop(Coeffs_2, I_3, P, Q) ->
    case (I_3 =< maps:get("degree", Q, nil)) of
        true ->
            Coeffs_3 = lists:sublist(Coeffs_2, I_3) ++ [((case erlang:is_map(Coeffs_2) of true -> maps:get(I_3, Coeffs_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Coeffs_2) + I_3 + 1, Coeffs_2); _ -> mochi_nth(I_3 + 1, Coeffs_2) end end) + (case erlang:is_map(maps:get("coefficients", Q, nil)) of true -> maps:get(I_3, maps:get("coefficients", Q, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("coefficients", Q, nil)) + I_3 + 1, maps:get("coefficients", Q, nil)); _ -> mochi_nth(I_3 + 1, maps:get("coefficients", Q, nil)) end end))] ++ lists:nthtail(I_3 + 1, Coeffs_2),
            I_4 = (I_3 + 1),
            Fun_2_loop(Coeffs_3, I_4, P, Q);
        _ -> {Coeffs_2, I_3, P, Q}
    end
end,
{Coeffs_3, I_4, P, Q} = Fun_2(Coeffs_2, I_3, P, Q),
            throw({return, #{"degree" => maps:get("degree", P, nil), "coefficients" => Coeffs_3}}),
            Coeffs_6 = Coeffs_3,
            Fun_4 = Fun_2,
            I_7 = I_4;
        _ -> Coeffs_4 = copy_list(maps:get("coefficients", Q, nil)),
            I_5 = 0,
            Fun_3 = fun Fun_3_loop(Coeffs_4, I_5, P, Q) ->
    case (I_5 =< maps:get("degree", P, nil)) of
        true ->
            Coeffs_5 = lists:sublist(Coeffs_4, I_5) ++ [((case erlang:is_map(Coeffs_4) of true -> maps:get(I_5, Coeffs_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Coeffs_4) + I_5 + 1, Coeffs_4); _ -> mochi_nth(I_5 + 1, Coeffs_4) end end) + (case erlang:is_map(maps:get("coefficients", P, nil)) of true -> maps:get(I_5, maps:get("coefficients", P, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("coefficients", P, nil)) + I_5 + 1, maps:get("coefficients", P, nil)); _ -> mochi_nth(I_5 + 1, maps:get("coefficients", P, nil)) end end))] ++ lists:nthtail(I_5 + 1, Coeffs_4),
            I_6 = (I_5 + 1),
            Fun_3_loop(Coeffs_5, I_6, P, Q);
        _ -> {Coeffs_4, I_5, P, Q}
    end
end,
{Coeffs_5, I_6, P, Q} = Fun_3(Coeffs_4, I_5, P, Q),
            throw({return, #{"degree" => maps:get("degree", Q, nil), "coefficients" => Coeffs_5}}),
            Coeffs_6 = Coeffs_5,
            Fun_4 = Fun_3,
            I_7 = I_6
    end,
        nil
    catch {return, Ret} -> Ret end.

neg(P_2) ->
    try
        Coeffs_7 = [],
        I_8 = 0,
        Fun_5 = fun Fun_5_loop(Coeffs_7, I_8, P_2) ->
    case (I_8 =< maps:get("degree", P_2, nil)) of
        true ->
            Coeffs_8 = lists:append((case Coeffs_7 of nil -> []; _ -> Coeffs_7 end), [-(case erlang:is_map(maps:get("coefficients", P_2, nil)) of true -> maps:get(I_8, maps:get("coefficients", P_2, nil), nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(maps:get("coefficients", P_2, nil)) + I_8 + 1, maps:get("coefficients", P_2, nil)); _ -> mochi_nth(I_8 + 1, maps:get("coefficients", P_2, nil)) end end)]),
            I_9 = (I_8 + 1),
            Fun_5_loop(Coeffs_8, I_9, P_2);
        _ -> {Coeffs_7, I_8, P_2}
    end
end,
{Coeffs_8, I_9, P_2} = Fun_5(Coeffs_7, I_8, P_2),
        #{"degree" => maps:get("degree", P_2, nil), "coefficients" => Coeffs_8}
    catch {return, Ret} -> Ret end.

sub(P_3, Q_2) ->
    try
        add(P_3, neg(Q_2))
    catch {return, Ret} -> Ret end.

mul(P_4, Q_3) ->
    try
        Size = ((maps:get("degree", P_4, nil) + maps:get("degree", Q_3, nil)) + 1),
        Coeffs_9 = [],
        I_10 = 0,
        Fun_6 = fun Fun_6_loop(Coeffs_9, I_10, P_4, Q_3, Size) ->
    case (I_10 < Size) of
        true ->
            Coeffs_10 = lists:append((case Coeffs_9 of nil -> []; _ -> Coeffs_9 end), [0.0]),
            I_11 = (I_10 + 1),
            Fun_6_loop(Coeffs_10, I_11, P_4, Q_3, Size);
        _ -> {Coeffs_9, I_10, P_4, Q_3, Size}
    end
end,
{Coeffs_10, I_11, P_4, Q_3, Size} = Fun_6(Coeffs_9, I_10, P_4, Q_3, Size),
        I_12 = 0,
        Fun_8 = fun Fun_8_loop(Coeffs_10, I_12, P_4, Q_3, Size) ->
    case (I_12 =< maps:get("degree", P_4, nil)) of
        true ->
            J = 0,
            Fun_7 = fun Fun_7_loop(Coeffs_10, I_12, J, P_4, Q_3, Size) ->
    case (J =< maps:get("degree", Q_3, nil)) of
        true ->
            Coeffs_11 = lists:sublist(Coeffs_10, (I_12 + J)) ++ [((case erlang:is_map(Coeffs_10) of true -> maps:get((I_12 + J), Coeffs_10, nil); _ -> case (I_12 + J) < 0 of true -> mochi_nth(erlang:length(Coeffs_10) + (I_12 + J) + 1, Coeffs_10); _ -> mochi_nth((I_12 + J) + 1, Coeffs_10) end end) + mochi_safe_mul((case erlang:is_map(maps:get("coefficients", P_4, nil)) of true -> maps:get(I_12, maps:get("coefficients", P_4, nil), nil); _ -> case I_12 < 0 of true -> mochi_nth(erlang:length(maps:get("coefficients", P_4, nil)) + I_12 + 1, maps:get("coefficients", P_4, nil)); _ -> mochi_nth(I_12 + 1, maps:get("coefficients", P_4, nil)) end end), (case erlang:is_map(maps:get("coefficients", Q_3, nil)) of true -> maps:get(J, maps:get("coefficients", Q_3, nil), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(maps:get("coefficients", Q_3, nil)) + J + 1, maps:get("coefficients", Q_3, nil)); _ -> mochi_nth(J + 1, maps:get("coefficients", Q_3, nil)) end end)))] ++ lists:nthtail((I_12 + J) + 1, Coeffs_10),
            J_2 = (J + 1),
            Fun_7_loop(Coeffs_11, I_12, J_2, P_4, Q_3, Size);
        _ -> {Coeffs_10, I_12, J, P_4, Q_3, Size}
    end
end,
{Coeffs_11, I_12, J_2, P_4, Q_3, Size} = Fun_7(Coeffs_10, I_12, J, P_4, Q_3, Size),
            I_13 = (I_12 + 1),
            Fun_8_loop(Coeffs_11, I_13, P_4, Q_3, Size);
        _ -> {Coeffs_10, I_12, P_4, Q_3, Size}
    end
end,
{Coeffs_11, I_13, P_4, Q_3, Size} = Fun_8(Coeffs_10, I_12, P_4, Q_3, Size),
        #{"degree" => (maps:get("degree", P_4, nil) + maps:get("degree", Q_3, nil)), "coefficients" => Coeffs_11}
    catch {return, Ret} -> Ret end.

power(Base, Exp) ->
    try
        Result = 1.0,
        I_14 = 0,
        Fun_9 = fun Fun_9_loop(Base, Exp, I_14, Result) ->
    case (I_14 < Exp) of
        true ->
            Result_2 = mochi_safe_mul(Result, Base),
            I_15 = (I_14 + 1),
            Fun_9_loop(Base, Exp, I_15, Result_2);
        _ -> {Base, Exp, I_14, Result}
    end
end,
{Base, Exp, I_15, Result_2} = Fun_9(Base, Exp, I_14, Result),
        Result_2
    catch {return, Ret} -> Ret end.

evaluate(P_5, X) ->
    try
        Result_3 = 0.0,
        I_16 = 0,
        Fun_10 = fun Fun_10_loop(I_16, P_5, Result_3, X) ->
    case (I_16 =< maps:get("degree", P_5, nil)) of
        true ->
            Result_4 = (Result_3 + mochi_safe_mul((case erlang:is_map(maps:get("coefficients", P_5, nil)) of true -> maps:get(I_16, maps:get("coefficients", P_5, nil), nil); _ -> case I_16 < 0 of true -> mochi_nth(erlang:length(maps:get("coefficients", P_5, nil)) + I_16 + 1, maps:get("coefficients", P_5, nil)); _ -> mochi_nth(I_16 + 1, maps:get("coefficients", P_5, nil)) end end), power(X, I_16))),
            I_17 = (I_16 + 1),
            Fun_10_loop(I_17, P_5, Result_4, X);
        _ -> {I_16, P_5, Result_3, X}
    end
end,
{I_17, P_5, Result_4, X} = Fun_10(I_16, P_5, Result_3, X),
        Result_4
    catch {return, Ret} -> Ret end.

poly_to_string(P_6) ->
    try
        S = "",
        I_18 = maps:get("degree", P_6, nil),
        Fun_11 = fun Fun_11_loop(I_18, P_6, S) ->
    case (I_18 >= 0) of
        true ->
            Coeff = (case erlang:is_map(maps:get("coefficients", P_6, nil)) of true -> maps:get(I_18, maps:get("coefficients", P_6, nil), nil); _ -> case I_18 < 0 of true -> mochi_nth(erlang:length(maps:get("coefficients", P_6, nil)) + I_18 + 1, maps:get("coefficients", P_6, nil)); _ -> mochi_nth(I_18 + 1, maps:get("coefficients", P_6, nil)) end end),
            case (Coeff /= 0.0) of
        true -> case (erlang:length(S) > 0) of
        true -> case (Coeff > 0.0) of
        true -> S_2 = (S ++ " + "),
            S_4 = S_2;
        _ -> S_3 = (S ++ " - "),
            S_4 = S_3
    end,
            S_7 = S_4;
        _ -> case (Coeff < 0.0) of
        true -> S_5 = (S ++ "-"),
            S_6 = S_5;
        _ -> S_6 = S
    end,
            S_7 = S_6
    end,
            Abs_coeff = (case (Coeff < 0.0) of
    true -> -Coeff;
    _ -> Coeff
end),
            case (I_18 == 0) of
        true -> S_8 = (S_7 ++ mochi_str(Abs_coeff)),
            S_12 = S_8;
        _ -> case (I_18 == 1) of
        true -> S_9 = ((S_7 ++ mochi_str(Abs_coeff)) ++ "x"),
            S_11 = S_9;
        _ -> S_10 = (((S_7 ++ mochi_str(Abs_coeff)) ++ "x^") ++ mochi_str(I_18)),
            S_11 = S_10
    end,
            S_12 = S_11
    end,
            Abs_coeff_2 = Abs_coeff,
            S_13 = S_12;
        _ -> Abs_coeff_2 = nil,
            S_13 = S
    end,
            I_19 = (I_18 - 1),
            Fun_11_loop(I_19, P_6, S_13);
        _ -> {I_18, P_6, S}
    end
end,
{I_19, P_6, S_13} = Fun_11(I_18, P_6, S),
        case (S_13 == "") of
        true -> S_14 = "0",
            S_15 = S_14;
        _ -> S_15 = S_13
    end,
        S_15
    catch {return, Ret} -> Ret end.

derivative(P_7) ->
    try
        case (maps:get("degree", P_7, nil) == 0) of
        true -> throw({return, #{"degree" => 0, "coefficients" => [0.0]}});
        _ -> ok
    end,
        Coeffs_12 = [],
        I_20 = 0,
        Fun_12 = fun Fun_12_loop(Coeffs_12, I_20, P_7) ->
    case (I_20 < maps:get("degree", P_7, nil)) of
        true ->
            Coeffs_13 = lists:append((case Coeffs_12 of nil -> []; _ -> Coeffs_12 end), [mochi_safe_mul((case erlang:is_map(maps:get("coefficients", P_7, nil)) of true -> maps:get((I_20 + 1), maps:get("coefficients", P_7, nil), nil); _ -> case (I_20 + 1) < 0 of true -> mochi_nth(erlang:length(maps:get("coefficients", P_7, nil)) + (I_20 + 1) + 1, maps:get("coefficients", P_7, nil)); _ -> mochi_nth((I_20 + 1) + 1, maps:get("coefficients", P_7, nil)) end end), float((I_20 + 1)))]),
            I_21 = (I_20 + 1),
            Fun_12_loop(Coeffs_13, I_21, P_7);
        _ -> {Coeffs_12, I_20, P_7}
    end
end,
{Coeffs_13, I_21, P_7} = Fun_12(Coeffs_12, I_20, P_7),
        #{"degree" => (maps:get("degree", P_7, nil) - 1), "coefficients" => Coeffs_13}
    catch {return, Ret} -> Ret end.

integral(P_8, Constant) ->
    try
        Coeffs_14 = [Constant],
        I_22 = 0,
        Fun_13 = fun Fun_13_loop(Coeffs_14, Constant, I_22, P_8) ->
    case (I_22 =< maps:get("degree", P_8, nil)) of
        true ->
            Coeffs_15 = lists:append((case Coeffs_14 of nil -> []; _ -> Coeffs_14 end), [mochi_safe_div((case erlang:is_map(maps:get("coefficients", P_8, nil)) of true -> maps:get(I_22, maps:get("coefficients", P_8, nil), nil); _ -> case I_22 < 0 of true -> mochi_nth(erlang:length(maps:get("coefficients", P_8, nil)) + I_22 + 1, maps:get("coefficients", P_8, nil)); _ -> mochi_nth(I_22 + 1, maps:get("coefficients", P_8, nil)) end end), float((I_22 + 1)))]),
            I_23 = (I_22 + 1),
            Fun_13_loop(Coeffs_15, Constant, I_23, P_8);
        _ -> {Coeffs_14, Constant, I_22, P_8}
    end
end,
{Coeffs_15, Constant, I_23, P_8} = Fun_13(Coeffs_14, Constant, I_22, P_8),
        #{"degree" => (maps:get("degree", P_8, nil) + 1), "coefficients" => Coeffs_15}
    catch {return, Ret} -> Ret end.

equals(P_9, Q_4) ->
    try
        case (maps:get("degree", P_9, nil) /= maps:get("degree", Q_4, nil)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_24 = 0,
        Fun_14 = fun Fun_14_loop(I_24, P_9, Q_4) ->
    case (I_24 =< maps:get("degree", P_9, nil)) of
        true ->
            case ((case erlang:is_map(maps:get("coefficients", P_9, nil)) of true -> maps:get(I_24, maps:get("coefficients", P_9, nil), nil); _ -> case I_24 < 0 of true -> mochi_nth(erlang:length(maps:get("coefficients", P_9, nil)) + I_24 + 1, maps:get("coefficients", P_9, nil)); _ -> mochi_nth(I_24 + 1, maps:get("coefficients", P_9, nil)) end end) /= (case erlang:is_map(maps:get("coefficients", Q_4, nil)) of true -> maps:get(I_24, maps:get("coefficients", Q_4, nil), nil); _ -> case I_24 < 0 of true -> mochi_nth(erlang:length(maps:get("coefficients", Q_4, nil)) + I_24 + 1, maps:get("coefficients", Q_4, nil)); _ -> mochi_nth(I_24 + 1, maps:get("coefficients", Q_4, nil)) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_25 = (I_24 + 1),
            Fun_14_loop(I_25, P_9, Q_4);
        _ -> {I_24, P_9, Q_4}
    end
end,
{I_25, P_9, Q_4} = Fun_14(I_24, P_9, Q_4),
        true
    catch {return, Ret} -> Ret end.

not_equals(P_10, Q_5) ->
    try
        mochi_not(equals(P_10, Q_5))
    catch {return, Ret} -> Ret end.

test_polynomial() ->
    try
        P_11 = polynomial_new(2, [1.0, 2.0, 3.0]),
        Q_6 = polynomial_new(2, [1.0, 2.0, 3.0]),
        case (poly_to_string(add(P_11, Q_6)) /= "6x^2 + 4x + 2") of
        true -> erlang:error("add failed");
        _ -> ok
    end,
        case (poly_to_string(sub(P_11, Q_6)) /= "0") of
        true -> erlang:error("sub failed");
        _ -> ok
    end,
        case (evaluate(P_11, 2.0) /= 17.0) of
        true -> erlang:error("evaluate failed");
        _ -> ok
    end,
        case (poly_to_string(derivative(P_11)) /= "6x + 2") of
        true -> erlang:error("derivative failed");
        _ -> ok
    end,
        Integ = poly_to_string(integral(P_11, 0.0)),
        case (Integ /= "1x^3 + 1x^2 + 1x") of
        true -> erlang:error("integral failed");
        _ -> ok
    end,
        case mochi_not(equals(P_11, Q_6)) of
        true -> erlang:error("equals failed");
        _ -> ok
    end,
        case not_equals(P_11, Q_6) of
        true -> erlang:error("not_equals failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_polynomial(),
        P_12 = polynomial_new(2, [1.0, 2.0, 3.0]),
        D = derivative(P_12),
        io:format("~ts~n", [mochi_repr(poly_to_string(D))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
