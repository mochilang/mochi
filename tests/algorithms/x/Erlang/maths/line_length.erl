#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrt_newton/1, hypot/2, line_length/4, f1/1, f2/1, f3/1]).

% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

sqrt_newton(N) ->
    try
        case (N == 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        X = N,
        I = 0,
        Fun = fun Fun_loop(I, N, X) ->
    case (I < 20) of
        true ->
            X_2 = mochi_safe_div((X + mochi_safe_div(N, X)), 2.0),
            I_2 = (I + 1),
            Fun_loop(I_2, N, X_2);
        _ -> {I, N, X}
    end
end,
{I_2, N, X_2} = Fun(I, N, X),
        X_2
    catch {return, RetCatch} -> RetCatch end.

hypot(A, B) ->
    try
        sqrt_newton((mochi_safe_mul(A, A) + mochi_safe_mul(B, B)))
    catch {return, RetCatch} -> RetCatch end.

line_length(Fnc, X_start, X_end, Steps) ->
    try
        X1 = X_start,
        Fx1 = Fnc(X_start),
        Length = 0.0,
        I_3 = 0,
        Step = mochi_safe_div((X_end - X_start), mochi_safe_mul(1.0, Steps)),
        Fun_2 = fun Fun_2_loop(Fnc, Fx1, I_3, Length, Step, Steps, X1, X_end, X_start) ->
    case (I_3 < Steps) of
        true ->
            X2 = (Step + X1),
            Fx2 = Fnc(X2),
            Length_2 = (Length + hypot((X2 - X1), (Fx2 - Fx1))),
            X1_2 = X2,
            Fx1_2 = Fx2,
            I_4 = (I_3 + 1),
            Fun_2_loop(Fnc, Fx1_2, I_4, Length_2, Step, Steps, X1_2, X_end, X_start);
        _ -> {Fnc, Fx1, I_3, Length, Step, Steps, X1, X_end, X_start}
    end
end,
{Fnc, Fx1_2, I_4, Length_2, Step, Steps, X1_2, X_end, X_start} = Fun_2(Fnc, Fx1, I_3, Length, Step, Steps, X1, X_end, X_start),
        Length_2
    catch {return, RetCatch} -> RetCatch end.

f1(X_3) ->
    try
        X_3
    catch {return, RetCatch} -> RetCatch end.

f2(X_4) ->
    try
        1.0
    catch {return, RetCatch} -> RetCatch end.

f3(X_5) ->
    try
        mochi_safe_div(mochi_safe_mul(X_5, X_5), 10.0)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(line_length(fun f1/1, 0.0, 1.0, 10))]),
    io:format("~ts~n", [mochi_repr(line_length(fun f2/1, -5.5, 4.5, 100))]),
    io:format("~ts~n", [mochi_repr(line_length(fun f3/1, 0.0, 10.0, 1000))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
