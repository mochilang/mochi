#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, key/2, joint_probability_distribution/4, expectation/2, variance/2, covariance/4, sqrtapprox/1, standard_deviation/1, main/0]).

% Generated by Mochi transpiler v0.10.63 (b98e5e3988) on 2025-08-12 07:47 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

key(X, Y) ->
    try
        ((mochi_str(X) ++ ",") ++ mochi_str(Y))
    catch {return, RetCatch} -> RetCatch end.

joint_probability_distribution(X_values, Y_values, X_probabilities, Y_probabilities) ->
    try
        Result = #{},
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Result, X_probabilities, X_values, Y_probabilities, Y_values) ->
    case (I < erlang:length(X_values)) of
        true ->
            J = 0,
            Fun = fun Fun_loop(I, J, Result, X_probabilities, X_values, Y_probabilities, Y_values) ->
    case (J < erlang:length(Y_values)) of
        true ->
            K = key((case erlang:is_map(X_values) of true -> maps:get(I, X_values, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(X_values) + I + 1, X_values); _ -> mochi_nth(I + 1, X_values) end end), (case erlang:is_map(Y_values) of true -> maps:get(J, Y_values, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Y_values) + J + 1, Y_values); _ -> mochi_nth(J + 1, Y_values) end end)),
            Result_2 = maps:put(K, mochi_safe_mul((case erlang:is_map(X_probabilities) of true -> maps:get(I, X_probabilities, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(X_probabilities) + I + 1, X_probabilities); _ -> mochi_nth(I + 1, X_probabilities) end end), (case erlang:is_map(Y_probabilities) of true -> maps:get(J, Y_probabilities, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Y_probabilities) + J + 1, Y_probabilities); _ -> mochi_nth(J + 1, Y_probabilities) end end)), Result),
            J_2 = (J + 1),
            Fun_loop(I, J_2, Result_2, X_probabilities, X_values, Y_probabilities, Y_values);
        _ -> {I, J, Result, X_probabilities, X_values, Y_probabilities, Y_values}
    end
end,
{I, J_2, Result_2, X_probabilities, X_values, Y_probabilities, Y_values} = Fun(I, J, Result, X_probabilities, X_values, Y_probabilities, Y_values),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Result_2, X_probabilities, X_values, Y_probabilities, Y_values);
        _ -> {I, Result, X_probabilities, X_values, Y_probabilities, Y_values}
    end
end,
{I_2, Result_2, X_probabilities, X_values, Y_probabilities, Y_values} = Fun_2(I, Result, X_probabilities, X_values, Y_probabilities, Y_values),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

expectation(Values, Probabilities) ->
    try
        Total = 0.0,
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, Probabilities, Total, Values) ->
    case (I_3 < erlang:length(Values)) of
        true ->
            Total_2 = (Total + mochi_safe_mul(float((case erlang:is_map(Values) of true -> maps:get(I_3, Values, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Values) + I_3 + 1, Values); _ -> mochi_nth(I_3 + 1, Values) end end)), (case erlang:is_map(Probabilities) of true -> maps:get(I_3, Probabilities, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Probabilities) + I_3 + 1, Probabilities); _ -> mochi_nth(I_3 + 1, Probabilities) end end))),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Probabilities, Total_2, Values);
        _ -> {I_3, Probabilities, Total, Values}
    end
end,
{I_4, Probabilities, Total_2, Values} = Fun_3(I_3, Probabilities, Total, Values),
        Total_2
    catch {return, RetCatch} -> RetCatch end.

variance(Values_2, Probabilities_2) ->
    try
        Mean = expectation(Values_2, Probabilities_2),
        Total_3 = 0.0,
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, Mean, Probabilities_2, Total_3, Values_2) ->
    case (I_5 < erlang:length(Values_2)) of
        true ->
            Diff = (float((case erlang:is_map(Values_2) of true -> maps:get(I_5, Values_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Values_2) + I_5 + 1, Values_2); _ -> mochi_nth(I_5 + 1, Values_2) end end)) - Mean),
            Total_4 = (Total_3 + mochi_safe_mul(mochi_safe_mul(Diff, Diff), (case erlang:is_map(Probabilities_2) of true -> maps:get(I_5, Probabilities_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Probabilities_2) + I_5 + 1, Probabilities_2); _ -> mochi_nth(I_5 + 1, Probabilities_2) end end))),
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Mean, Probabilities_2, Total_4, Values_2);
        _ -> {I_5, Mean, Probabilities_2, Total_3, Values_2}
    end
end,
{I_6, Mean, Probabilities_2, Total_4, Values_2} = Fun_4(I_5, Mean, Probabilities_2, Total_3, Values_2),
        Total_4
    catch {return, RetCatch} -> RetCatch end.

covariance(X_values_2, Y_values_2, X_probabilities_2, Y_probabilities_2) ->
    try
        Mean_x = expectation(X_values_2, X_probabilities_2),
        Mean_y = expectation(Y_values_2, Y_probabilities_2),
        Total_5 = 0.0,
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(I_7, Mean_x, Mean_y, Total_5, X_probabilities_2, X_values_2, Y_probabilities_2, Y_values_2) ->
    case (I_7 < erlang:length(X_values_2)) of
        true ->
            J_3 = 0,
            Fun_5 = fun Fun_5_loop(I_7, J_3, Mean_x, Mean_y, Total_5, X_probabilities_2, X_values_2, Y_probabilities_2, Y_values_2) ->
    case (J_3 < erlang:length(Y_values_2)) of
        true ->
            Diff_x = (float((case erlang:is_map(X_values_2) of true -> maps:get(I_7, X_values_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(X_values_2) + I_7 + 1, X_values_2); _ -> mochi_nth(I_7 + 1, X_values_2) end end)) - Mean_x),
            Diff_y = (float((case erlang:is_map(Y_values_2) of true -> maps:get(J_3, Y_values_2, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Y_values_2) + J_3 + 1, Y_values_2); _ -> mochi_nth(J_3 + 1, Y_values_2) end end)) - Mean_y),
            Total_6 = (Total_5 + mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(Diff_x, Diff_y), (case erlang:is_map(X_probabilities_2) of true -> maps:get(I_7, X_probabilities_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(X_probabilities_2) + I_7 + 1, X_probabilities_2); _ -> mochi_nth(I_7 + 1, X_probabilities_2) end end)), (case erlang:is_map(Y_probabilities_2) of true -> maps:get(J_3, Y_probabilities_2, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Y_probabilities_2) + J_3 + 1, Y_probabilities_2); _ -> mochi_nth(J_3 + 1, Y_probabilities_2) end end))),
            J_4 = (J_3 + 1),
            Fun_5_loop(I_7, J_4, Mean_x, Mean_y, Total_6, X_probabilities_2, X_values_2, Y_probabilities_2, Y_values_2);
        _ -> {I_7, J_3, Mean_x, Mean_y, Total_5, X_probabilities_2, X_values_2, Y_probabilities_2, Y_values_2}
    end
end,
{I_7, J_4, Mean_x, Mean_y, Total_6, X_probabilities_2, X_values_2, Y_probabilities_2, Y_values_2} = Fun_5(I_7, J_3, Mean_x, Mean_y, Total_5, X_probabilities_2, X_values_2, Y_probabilities_2, Y_values_2),
            I_8 = (I_7 + 1),
            Fun_6_loop(I_8, Mean_x, Mean_y, Total_6, X_probabilities_2, X_values_2, Y_probabilities_2, Y_values_2);
        _ -> {I_7, Mean_x, Mean_y, Total_5, X_probabilities_2, X_values_2, Y_probabilities_2, Y_values_2}
    end
end,
{I_8, Mean_x, Mean_y, Total_6, X_probabilities_2, X_values_2, Y_probabilities_2, Y_values_2} = Fun_6(I_7, Mean_x, Mean_y, Total_5, X_probabilities_2, X_values_2, Y_probabilities_2, Y_values_2),
        Total_6
    catch {return, RetCatch} -> RetCatch end.

sqrtapprox(X_2) ->
    try
        case (X_2 =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = mochi_safe_div(X_2, 2.0),
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(Guess, I_9, X_2) ->
    case (I_9 < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_2, Guess)), 2.0),
            I_10 = (I_9 + 1),
            Fun_7_loop(Guess_2, I_10, X_2);
        _ -> {Guess, I_9, X_2}
    end
end,
{Guess_2, I_10, X_2} = Fun_7(Guess, I_9, X_2),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

standard_deviation(V) ->
    try
        sqrtapprox(V)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        X_values_3 = [1, 2],
        Y_values_3 = [-2, 5, 8],
        X_probabilities_3 = [0.7, 0.3],
        Y_probabilities_3 = [0.3, 0.5, 0.2],
        Jpd = joint_probability_distribution(X_values_3, Y_values_3, X_probabilities_3, Y_probabilities_3),
        I_11 = 0,
        Fun_9 = fun Fun_9_loop(I_11, Jpd, X_probabilities_3, X_values_3, Y_probabilities_3, Y_values_3) ->
    case (I_11 < erlang:length(X_values_3)) of
        true ->
            J_5 = 0,
            Fun_8 = fun Fun_8_loop(I_11, J_5, Jpd, X_probabilities_3, X_values_3, Y_probabilities_3, Y_values_3) ->
    case (J_5 < erlang:length(Y_values_3)) of
        true ->
            K_2 = key((case erlang:is_map(X_values_3) of true -> maps:get(I_11, X_values_3, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(X_values_3) + I_11 + 1, X_values_3); _ -> mochi_nth(I_11 + 1, X_values_3) end end), (case erlang:is_map(Y_values_3) of true -> maps:get(J_5, Y_values_3, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Y_values_3) + J_5 + 1, Y_values_3); _ -> mochi_nth(J_5 + 1, Y_values_3) end end)),
            Prob = maps:get(K_2, Jpd, nil),
            io:format("~ts~n", [mochi_repr(((K_2 ++ "=") ++ mochi_str(Prob)))]),
            J_6 = (J_5 + 1),
            Fun_8_loop(I_11, J_6, Jpd, X_probabilities_3, X_values_3, Y_probabilities_3, Y_values_3);
        _ -> {I_11, J_5, Jpd, X_probabilities_3, X_values_3, Y_probabilities_3, Y_values_3}
    end
end,
{I_11, J_6, Jpd, X_probabilities_3, X_values_3, Y_probabilities_3, Y_values_3} = Fun_8(I_11, J_5, Jpd, X_probabilities_3, X_values_3, Y_probabilities_3, Y_values_3),
            I_12 = (I_11 + 1),
            Fun_9_loop(I_12, Jpd, X_probabilities_3, X_values_3, Y_probabilities_3, Y_values_3);
        _ -> {I_11, Jpd, X_probabilities_3, X_values_3, Y_probabilities_3, Y_values_3}
    end
end,
{I_12, Jpd, X_probabilities_3, X_values_3, Y_probabilities_3, Y_values_3} = Fun_9(I_11, Jpd, X_probabilities_3, X_values_3, Y_probabilities_3, Y_values_3),
        Ex = expectation(X_values_3, X_probabilities_3),
        Ey = expectation(Y_values_3, Y_probabilities_3),
        Vx = variance(X_values_3, X_probabilities_3),
        Vy = variance(Y_values_3, Y_probabilities_3),
        Cov = covariance(X_values_3, Y_values_3, X_probabilities_3, Y_probabilities_3),
        io:format("~ts~n", [mochi_repr(("Ex=" ++ mochi_str(Ex)))]),
        io:format("~ts~n", [mochi_repr(("Ey=" ++ mochi_str(Ey)))]),
        io:format("~ts~n", [mochi_repr(("Vx=" ++ mochi_str(Vx)))]),
        io:format("~ts~n", [mochi_repr(("Vy=" ++ mochi_str(Vy)))]),
        io:format("~ts~n", [mochi_repr(("Cov=" ++ mochi_str(Cov)))]),
        io:format("~ts~n", [mochi_repr(("Sx=" ++ mochi_str(standard_deviation(Vx))))]),
        io:format("~ts~n", [mochi_repr(("Sy=" ++ mochi_str(standard_deviation(Vy))))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
