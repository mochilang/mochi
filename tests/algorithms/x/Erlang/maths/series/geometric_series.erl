#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, geometric_series/3]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

geometric_series(Nth_term, Start_term_a, Common_ratio_r) ->
    try
        N = mochi_to_int(Nth_term),
        case (((N =< 0) orelse (Start_term_a == 0.0)) orelse (Common_ratio_r == 0.0)) of
        true -> throw({return, []});
        _ -> ok
    end,
        Series = [],
        Current = Start_term_a,
        I = 0,
        Fun = fun Fun_loop(Common_ratio_r, Current, I, N, Nth_term, Series, Start_term_a) ->
    case (I < N) of
        true ->
            Series_2 = lists:append((case Series of nil -> []; _ -> Series end), [Current]),
            Current_2 = mochi_safe_mul(Current, Common_ratio_r),
            I_2 = (I + 1),
            Fun_loop(Common_ratio_r, Current_2, I_2, N, Nth_term, Series_2, Start_term_a);
        _ -> {Common_ratio_r, Current, I, N, Nth_term, Series, Start_term_a}
    end
end,
{Common_ratio_r, Current_2, I_2, N, Nth_term, Series_2, Start_term_a} = Fun(Common_ratio_r, Current, I, N, Nth_term, Series, Start_term_a),
        Series_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(geometric_series(4.0, 2.0, 2.0))]),
    io:format("~ts~n", [mochi_repr(geometric_series(4.0, 2.0, -2.0))]),
    io:format("~ts~n", [mochi_repr(geometric_series(4.0, -2.0, 2.0))]),
    io:format("~ts~n", [mochi_repr(geometric_series(-4.0, 2.0, 2.0))]),
    io:format("~ts~n", [mochi_repr(geometric_series(0.0, 100.0, 500.0))]),
    io:format("~ts~n", [mochi_repr(geometric_series(1.0, 1.0, 1.0))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
