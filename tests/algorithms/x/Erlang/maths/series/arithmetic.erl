#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, is_arithmetic_series/1, arithmetic_mean/1]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

is_arithmetic_series(Xs) ->
    try
        case (erlang:length(Xs) == 0) of
        true -> erlang:error({panic, "Input list must be a non empty list"});
        _ -> ok
    end,
        case (erlang:length(Xs) == 1) of
        true -> throw({return, true});
        _ -> ok
    end,
        Diff = ((case erlang:is_map(Xs) of true -> maps:get(1, Xs, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Xs) + 1 + 1, Xs); _ -> mochi_nth(1 + 1, Xs) end end) - (case erlang:is_map(Xs) of true -> maps:get(0, Xs, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Xs) + 0 + 1, Xs); _ -> mochi_nth(0 + 1, Xs) end end)),
        I = 0,
        Fun = fun Fun_loop(Diff, I, Xs) ->
    case (I < (erlang:length(Xs) - 1)) of
        true ->
            case (((case erlang:is_map(Xs) of true -> maps:get((I + 1), Xs, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Xs) + (I + 1) + 1, Xs); _ -> mochi_nth((I + 1) + 1, Xs) end end) - (case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)) /= Diff) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Diff, I_2, Xs);
        _ -> {Diff, I, Xs}
    end
end,
{Diff, I_2, Xs} = Fun(Diff, I, Xs),
        true
    catch {return, RetCatch} -> RetCatch end.

arithmetic_mean(Xs_2) ->
    try
        case (erlang:length(Xs_2) == 0) of
        true -> erlang:error({panic, "Input list must be a non empty list"});
        _ -> ok
    end,
        Total = 0.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Total, Xs_2) ->
    case (I_3 < erlang:length(Xs_2)) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_3 + 1, Xs_2); _ -> mochi_nth(I_3 + 1, Xs_2) end end)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Total_2, Xs_2);
        _ -> {I_3, Total, Xs_2}
    end
end,
{I_4, Total_2, Xs_2} = Fun_2(I_3, Total, Xs_2),
        mochi_safe_div(Total_2, float(erlang:length(Xs_2)))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(is_arithmetic_series([2.0, 4.0, 6.0]))]),
    io:format("~ts~n", [mochi_str(is_arithmetic_series([3.0, 6.0, 12.0, 24.0]))]),
    io:format("~ts~n", [mochi_str(arithmetic_mean([2.0, 4.0, 6.0]))]),
    io:format("~ts~n", [mochi_str(arithmetic_mean([3.0, 6.0, 9.0, 12.0]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
