#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow_string/2, p_series/2]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

pow_string(Base, Exp) ->
    try
        case (Exp >= 0) of
        true -> Res = 1,
            I = 0,
            Fun = fun Fun_loop(Base, Exp, I, Res) ->
    case (I < Exp) of
        true ->
            Res_2 = (Res * Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Res_2);
        _ -> {Base, Exp, I, Res}
    end
end,
{Base, Exp, I_2, Res_2} = Fun(Base, Exp, I, Res),
            throw({return, mochi_str(Res_2)}),
            Fun_2 = Fun,
            I_3 = I_2,
            Res_3 = Res_2;
        _ -> Fun_2 = nil,
            I_3 = nil,
            Res_3 = nil
    end,
        E = -Exp,
        Res_4 = 1.0,
        B = mochi_safe_mul(Base, 1.0),
        I_4 = 0,
        Fun_3 = fun Fun_3_loop(B, Base, E, Exp, I_4, Res_4) ->
    case (I_4 < E) of
        true ->
            Res_5 = mochi_safe_mul(Res_4, B),
            I_5 = (I_4 + 1),
            Fun_3_loop(B, Base, E, Exp, I_5, Res_5);
        _ -> {B, Base, E, Exp, I_4, Res_4}
    end
end,
{B, Base, E, Exp, I_5, Res_5} = Fun_3(B, Base, E, Exp, I_4, Res_4),
        Value = mochi_safe_div(1.0, Res_5),
        mochi_str(Value)
    catch {return, Ret} -> Ret end.

p_series(Nth_term, Power) ->
    try
        Series = [],
        case (Nth_term =< 0) of
        true -> throw({return, Series});
        _ -> ok
    end,
        I_6 = 1,
        Fun_4 = fun Fun_4_loop(I_6, Nth_term, Power, Series) ->
    case (I_6 =< Nth_term) of
        true ->
            case (I_6 == 1) of
        true -> Series_2 = lists:append((case Series of nil -> []; _ -> Series end), ["1"]),
            Series_4 = Series_2;
        _ -> Series_3 = lists:append((case Series of nil -> []; _ -> Series end), [("1 / " ++ pow_string(I_6, Power))]),
            Series_4 = Series_3
    end,
            I_7 = (I_6 + 1),
            Fun_4_loop(I_7, Nth_term, Power, Series_4);
        _ -> {I_6, Nth_term, Power, Series}
    end
end,
{I_7, Nth_term, Power, Series_4} = Fun_4(I_6, Nth_term, Power, Series),
        Series_4
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(p_series(5, 2))]),
    io:format("~ts~n", [mochi_repr(p_series(-5, 2))]),
    io:format("~ts~n", [mochi_repr(p_series(5, -2))]),
    io:format("~ts~n", [mochi_repr(p_series(0, 0))]),
    io:format("~ts~n", [mochi_repr(p_series(1, 1))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
