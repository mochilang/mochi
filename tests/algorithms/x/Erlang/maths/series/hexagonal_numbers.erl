#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, hexagonal_numbers/1, test_hexagonal_numbers/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

hexagonal_numbers(Length) ->
    try
        case (Length =< 0) of
        true -> erlang:error("Length must be a positive integer.");
        _ -> ok
    end,
        Res = [],
        N = 0,
        Fun = fun Fun_loop(Length, N, Res) ->
    case (N < Length) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(N * ((2 * N) - 1))]),
            N_2 = (N + 1),
            Fun_loop(Length, N_2, Res_2);
        _ -> {Length, N, Res}
    end
end,
{Length, N_2, Res_2} = Fun(Length, N, Res),
        Res_2
    catch {return, Ret} -> Ret end.

test_hexagonal_numbers() ->
    try
        Expected5 = [0, 1, 6, 15, 28],
        Result5 = hexagonal_numbers(5),
        case (Result5 /= Expected5) of
        true -> erlang:error("hexagonal_numbers(5) failed");
        _ -> ok
    end,
        Expected10 = [0, 1, 6, 15, 28, 45, 66, 91, 120, 153],
        Result10 = hexagonal_numbers(10),
        case (Result10 /= Expected10) of
        true -> erlang:error("hexagonal_numbers(10) failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    test_hexagonal_numbers(),
    io:format("~ts~n", [mochi_str(hexagonal_numbers(5))]),
    io:format("~ts~n", [mochi_str(hexagonal_numbers(10))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
