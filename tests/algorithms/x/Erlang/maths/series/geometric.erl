#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, is_geometric_series/1, geometric_mean/1, pow_float/2, nth_root/2, test_geometric/0, main/0]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

is_geometric_series(Series) ->
    try
        case (erlang:length(Series) == 0) of
        true -> erlang:error({panic, "Input list must be a non empty list"});
        _ -> ok
    end,
        case (erlang:length(Series) == 1) of
        true -> throw({return, true});
        _ -> ok
    end,
        case ((case erlang:is_map(Series) of true -> maps:get(0, Series, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Series) + 0 + 1, Series); _ -> mochi_nth(0 + 1, Series) end end) == 0.0) of
        true -> throw({return, false});
        _ -> ok
    end,
        Ratio = mochi_safe_div((case erlang:is_map(Series) of true -> maps:get(1, Series, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Series) + 1 + 1, Series); _ -> mochi_nth(1 + 1, Series) end end), (case erlang:is_map(Series) of true -> maps:get(0, Series, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Series) + 0 + 1, Series); _ -> mochi_nth(0 + 1, Series) end end)),
        I = 0,
        Fun = fun Fun_loop(I, Ratio, Series) ->
    case (I < (erlang:length(Series) - 1)) of
        true ->
            case ((case erlang:is_map(Series) of true -> maps:get(I, Series, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Series) + I + 1, Series); _ -> mochi_nth(I + 1, Series) end end) == 0.0) of
        true -> throw({return, false});
        _ -> ok
    end,
            case (mochi_safe_div((case erlang:is_map(Series) of true -> maps:get((I + 1), Series, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Series) + (I + 1) + 1, Series); _ -> mochi_nth((I + 1) + 1, Series) end end), (case erlang:is_map(Series) of true -> maps:get(I, Series, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Series) + I + 1, Series); _ -> mochi_nth(I + 1, Series) end end)) /= Ratio) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Ratio, Series);
        _ -> {I, Ratio, Series}
    end
end,
{I_2, Ratio, Series} = Fun(I, Ratio, Series),
        true
    catch {return, RetCatch} -> RetCatch end.

geometric_mean(Series_2) ->
    try
        case (erlang:length(Series_2) == 0) of
        true -> erlang:error({panic, "Input list must be a non empty list"});
        _ -> ok
    end,
        Product = 1.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Product, Series_2) ->
    case (I_3 < erlang:length(Series_2)) of
        true ->
            Product_2 = mochi_safe_mul(Product, (case erlang:is_map(Series_2) of true -> maps:get(I_3, Series_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Series_2) + I_3 + 1, Series_2); _ -> mochi_nth(I_3 + 1, Series_2) end end)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Product_2, Series_2);
        _ -> {I_3, Product, Series_2}
    end
end,
{I_4, Product_2, Series_2} = Fun_2(I_3, Product, Series_2),
        N = erlang:length(Series_2),
        nth_root(Product_2, N)
    catch {return, RetCatch} -> RetCatch end.

pow_float(Base, Exp) ->
    try
        Result = 1.0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Base, Exp, I_5, Result) ->
    case (I_5 < Exp) of
        true ->
            Result_2 = mochi_safe_mul(Result, Base),
            I_6 = (I_5 + 1),
            Fun_3_loop(Base, Exp, I_6, Result_2);
        _ -> {Base, Exp, I_5, Result}
    end
end,
{Base, Exp, I_6, Result_2} = Fun_3(Base, Exp, I_5, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

nth_root(Value, N_2) ->
    try
        case (Value == 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Low = 0.0,
        High = Value,
        High_3 = (case (Value < 1.0) of
        true -> High_2 = 1.0,
            High_2;
        _ -> High
    end),
        Mid = mochi_safe_div((Low + High_3), 2.0),
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(High_3, I_7, Low, Mid, N_2, Value) ->
    case (I_7 < 40) of
        true ->
            Mp = pow_float(Mid, N_2),
            Low_3 = (case (Mp > Value) of
        true -> High_4 = Mid,
            High_5 = High_4,
            Low;
        _ -> Low_2 = Mid,
            High_5 = High_3,
            Low_2
    end),
            Mid_2 = mochi_safe_div((Low_3 + High_5), 2.0),
            I_8 = (I_7 + 1),
            Fun_4_loop(High_5, I_8, Low_3, Mid_2, N_2, Value);
        _ -> {High_3, I_7, Low, Mid, N_2, Value}
    end
end,
{High_5, I_8, Low_3, Mid_2, N_2, Value} = Fun_4(High_3, I_7, Low, Mid, N_2, Value),
        Mid_2
    catch {return, RetCatch} -> RetCatch end.

test_geometric() ->
    try
        A = [2.0, 4.0, 8.0],
        case mochi_not(is_geometric_series(A)) of
        true -> erlang:error({panic, "expected geometric series"});
        _ -> ok
    end,
        B = [1.0, 2.0, 3.0],
        case is_geometric_series(B) of
        true -> erlang:error({panic, "expected non geometric series"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_geometric(),
        io:format("~ts~n", [mochi_repr(geometric_mean([2.0, 4.0, 8.0]))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
