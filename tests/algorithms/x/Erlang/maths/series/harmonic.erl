#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_harmonic_series/1, harmonic_mean/1]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

is_harmonic_series(Series) ->
    try
        case (erlang:length(Series) == 0) of
        true -> erlang:error("Input list must be a non empty list");
        _ -> ok
    end,
        case (erlang:length(Series) == 1) of
        true -> case ((case erlang:is_map(Series) of true -> maps:get(0, Series, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Series) + 0 + 1, Series); _ -> mochi_nth(0 + 1, Series) end end) == 0.0) of
        true -> erlang:error("Input series cannot have 0 as an element");
        _ -> ok
    end,
            throw({return, true});
        _ -> ok
    end,
        Rec_series = [],
        I = 0,
        Fun = fun Fun_loop(I, Rec_series, Series) ->
    case (I < erlang:length(Series)) of
        true ->
            Val = (case erlang:is_map(Series) of true -> maps:get(I, Series, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Series) + I + 1, Series); _ -> mochi_nth(I + 1, Series) end end),
            case (Val == 0.0) of
        true -> erlang:error("Input series cannot have 0 as an element");
        _ -> ok
    end,
            Rec_series_2 = lists:append((case Rec_series of nil -> []; _ -> Rec_series end), [mochi_safe_div(1.0, Val)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Rec_series_2, Series);
        _ -> {I, Rec_series, Series}
    end
end,
{I_2, Rec_series_2, Series} = Fun(I, Rec_series, Series),
        Common_diff = ((case erlang:is_map(Rec_series_2) of true -> maps:get(1, Rec_series_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Rec_series_2) + 1 + 1, Rec_series_2); _ -> mochi_nth(1 + 1, Rec_series_2) end end) - (case erlang:is_map(Rec_series_2) of true -> maps:get(0, Rec_series_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Rec_series_2) + 0 + 1, Rec_series_2); _ -> mochi_nth(0 + 1, Rec_series_2) end end)),
        Idx = 2,
        Fun_2 = fun Fun_2_loop(Common_diff, I_2, Idx, Rec_series_2, Series) ->
    case (Idx < erlang:length(Rec_series_2)) of
        true ->
            case (((case erlang:is_map(Rec_series_2) of true -> maps:get(Idx, Rec_series_2, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Rec_series_2) + Idx + 1, Rec_series_2); _ -> mochi_nth(Idx + 1, Rec_series_2) end end) - (case erlang:is_map(Rec_series_2) of true -> maps:get((Idx - 1), Rec_series_2, nil); _ -> case (Idx - 1) < 0 of true -> mochi_nth(erlang:length(Rec_series_2) + (Idx - 1) + 1, Rec_series_2); _ -> mochi_nth((Idx - 1) + 1, Rec_series_2) end end)) /= Common_diff) of
        true -> throw({return, false});
        _ -> ok
    end,
            Idx_2 = (Idx + 1),
            Fun_2_loop(Common_diff, I_2, Idx_2, Rec_series_2, Series);
        _ -> {Common_diff, I_2, Idx, Rec_series_2, Series}
    end
end,
{Common_diff, I_2, Idx_2, Rec_series_2, Series} = Fun_2(Common_diff, I_2, Idx, Rec_series_2, Series),
        true
    catch {return, Ret} -> Ret end.

harmonic_mean(Series_2) ->
    try
        case (erlang:length(Series_2) == 0) of
        true -> erlang:error("Input list must be a non empty list");
        _ -> ok
    end,
        Total = 0.0,
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, Series_2, Total) ->
    case (I_3 < erlang:length(Series_2)) of
        true ->
            Total_2 = (Total + mochi_safe_div(1.0, (case erlang:is_map(Series_2) of true -> maps:get(I_3, Series_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Series_2) + I_3 + 1, Series_2); _ -> mochi_nth(I_3 + 1, Series_2) end end))),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Series_2, Total_2);
        _ -> {I_3, Series_2, Total}
    end
end,
{I_4, Series_2, Total_2} = Fun_3(I_3, Series_2, Total),
        mochi_safe_div(float(erlang:length(Series_2)), Total_2)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(is_harmonic_series([1.0, mochi_safe_div(2.0, 3.0), mochi_safe_div(1.0, 2.0), mochi_safe_div(2.0, 5.0), mochi_safe_div(1.0, 3.0)]))]),
    io:format("~ts~n", [mochi_repr(is_harmonic_series([1.0, mochi_safe_div(2.0, 3.0), mochi_safe_div(2.0, 5.0), mochi_safe_div(1.0, 3.0)]))]),
    io:format("~ts~n", [mochi_repr(harmonic_mean([1.0, 4.0, 4.0]))]),
    io:format("~ts~n", [mochi_repr(harmonic_mean([3.0, 6.0, 9.0, 12.0]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
