#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs_int/1, greatest_common_divisor/2, gcd_by_iterative/2]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

abs_int(N) ->
    try
        (case (N < 0) of
    true -> -N;
    _ -> N
end)
    catch {return, Ret} -> Ret end.

greatest_common_divisor(A, B) ->
    try
        X = abs_int(A),
        Y = abs_int(B),
        case (X == 0) of
        true -> throw({return, Y});
        _ -> ok
    end,
        greatest_common_divisor(mochi_mod(Y, X), X)
    catch {return, Ret} -> Ret end.

gcd_by_iterative(X_2, Y_2) ->
    try
        A_2 = abs_int(X_2),
        B_2 = abs_int(Y_2),
        Fun = fun Fun_loop(A_2, B_2, X_2, Y_2) ->
    case (B_2 /= 0) of
        true ->
            Temp = B_2,
            B_3 = mochi_mod(A_2, B_2),
            A_3 = Temp,
            Fun_loop(A_3, B_3, X_2, Y_2);
        _ -> {A_2, B_2, X_2, Y_2}
    end
end,
{A_3, B_3, X_2, Y_2} = Fun(A_2, B_2, X_2, Y_2),
        A_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(greatest_common_divisor(24, 40))]),
    io:format("~ts~n", [mochi_str(greatest_common_divisor(1, 1))]),
    io:format("~ts~n", [mochi_str(greatest_common_divisor(1, 800))]),
    io:format("~ts~n", [mochi_str(greatest_common_divisor(11, 37))]),
    io:format("~ts~n", [mochi_str(greatest_common_divisor(3, 5))]),
    io:format("~ts~n", [mochi_str(greatest_common_divisor(16, 4))]),
    io:format("~ts~n", [mochi_str(greatest_common_divisor(-3, 9))]),
    io:format("~ts~n", [mochi_str(greatest_common_divisor(9, -3))]),
    io:format("~ts~n", [mochi_str(greatest_common_divisor(3, -9))]),
    io:format("~ts~n", [mochi_str(greatest_common_divisor(-3, -9))]),
    io:format("~ts~n", [mochi_str(gcd_by_iterative(24, 40))]),
    io:format("~ts~n", [mochi_str((greatest_common_divisor(24, 40) == gcd_by_iterative(24, 40)))]),
    io:format("~ts~n", [mochi_str(gcd_by_iterative(-3, -9))]),
    io:format("~ts~n", [mochi_str(gcd_by_iterative(3, -9))]),
    io:format("~ts~n", [mochi_str(gcd_by_iterative(1, -800))]),
    io:format("~ts~n", [mochi_str(gcd_by_iterative(11, 37))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
