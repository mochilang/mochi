#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, binary_exp_recursive/2, binary_exp_iterative/2, binary_exp_mod_recursive/3, binary_exp_mod_iterative/3]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

binary_exp_recursive(Base, Exponent) ->
    try
        case (Exponent < 0) of
        true -> erlang:error("exponent must be non-negative");
        _ -> ok
    end,
        case (Exponent == 0) of
        true -> throw({return, 1.0});
        _ -> ok
    end,
        case (mochi_mod(Exponent, 2) == 1) of
        true -> throw({return, mochi_safe_mul(binary_exp_recursive(Base, (Exponent - 1)), Base)});
        _ -> ok
    end,
        Half = binary_exp_recursive(Base, (Exponent div 2)),
        mochi_safe_mul(Half, Half)
    catch {return, Ret} -> Ret end.

binary_exp_iterative(Base_2, Exponent_2) ->
    try
        case (Exponent_2 < 0) of
        true -> erlang:error("exponent must be non-negative");
        _ -> ok
    end,
        Result = 1.0,
        B = Base_2,
        E = Exponent_2,
        Fun = fun Fun_loop(B, Base_2, E, Exponent_2, Result) ->
    case (E > 0) of
        true ->
            case (mochi_mod(E, 2) == 1) of
        true -> Result_2 = mochi_safe_mul(Result, B),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            B_2 = mochi_safe_mul(B, B),
            E_2 = (E div 2),
            Fun_loop(B_2, Base_2, E_2, Exponent_2, Result_3);
        _ -> {B, Base_2, E, Exponent_2, Result}
    end
end,
{B_2, Base_2, E_2, Exponent_2, Result_3} = Fun(B, Base_2, E, Exponent_2, Result),
        Result_3
    catch {return, Ret} -> Ret end.

binary_exp_mod_recursive(Base_3, Exponent_3, Modulus) ->
    try
        case (Exponent_3 < 0) of
        true -> erlang:error("exponent must be non-negative");
        _ -> ok
    end,
        case (Modulus =< 0) of
        true -> erlang:error("modulus must be positive");
        _ -> ok
    end,
        case (Exponent_3 == 0) of
        true -> throw({return, mochi_mod(1, Modulus)});
        _ -> ok
    end,
        case (mochi_mod(Exponent_3, 2) == 1) of
        true -> throw({return, mochi_mod((binary_exp_mod_recursive(Base_3, (Exponent_3 - 1), Modulus) * mochi_mod(Base_3, Modulus)), Modulus)});
        _ -> ok
    end,
        R = binary_exp_mod_recursive(Base_3, (Exponent_3 div 2), Modulus),
        mochi_mod((R * R), Modulus)
    catch {return, Ret} -> Ret end.

binary_exp_mod_iterative(Base_4, Exponent_4, Modulus_2) ->
    try
        case (Exponent_4 < 0) of
        true -> erlang:error("exponent must be non-negative");
        _ -> ok
    end,
        case (Modulus_2 =< 0) of
        true -> erlang:error("modulus must be positive");
        _ -> ok
    end,
        Result_4 = mochi_mod(1, Modulus_2),
        B_3 = mochi_mod(Base_4, Modulus_2),
        E_3 = Exponent_4,
        Fun_2 = fun Fun_2_loop(B_3, Base_4, E_3, Exponent_4, Modulus_2, Result_4) ->
    case (E_3 > 0) of
        true ->
            case (mochi_mod(E_3, 2) == 1) of
        true -> Result_5 = mochi_mod((Result_4 * B_3), Modulus_2),
            Result_6 = Result_5;
        _ -> Result_6 = Result_4
    end,
            B_4 = mochi_mod((B_3 * B_3), Modulus_2),
            E_4 = (E_3 div 2),
            Fun_2_loop(B_4, Base_4, E_4, Exponent_4, Modulus_2, Result_6);
        _ -> {B_3, Base_4, E_3, Exponent_4, Modulus_2, Result_4}
    end
end,
{B_4, Base_4, E_4, Exponent_4, Modulus_2, Result_6} = Fun_2(B_3, Base_4, E_3, Exponent_4, Modulus_2, Result_4),
        Result_6
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(binary_exp_recursive(3.0, 5))]),
    io:format("~ts~n", [mochi_repr(binary_exp_iterative(1.5, 4))]),
    io:format("~ts~n", [mochi_repr(binary_exp_mod_recursive(3, 4, 5))]),
    io:format("~ts~n", [mochi_repr(binary_exp_mod_iterative(11, 13, 7))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
