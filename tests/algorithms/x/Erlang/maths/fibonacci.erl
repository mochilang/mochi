#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrt/1, powf/2, roundf/1, fib_iterative/1, fib_recursive_term/1, fib_recursive/1, fib_recursive_cached_term/1, fib_recursive_cached/1, fib_memoization_term/1, fib_memoization/1, fib_binet/1, matrix_mul/2, matrix_pow/2, fib_matrix/1, run_tests/0]).

% Generated by Mochi transpiler v0.10.59 (589dcb03e5) on 2025-08-07 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

sqrt(X) ->
    try
        case (X =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 10) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, Ret} -> Ret end.

powf(X_2, N) ->
    try
        Res = 1.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, N, Res, X_2) ->
    case (I_3 < N) of
        true ->
            Res_2 = mochi_safe_mul(Res, X_2),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, N, Res_2, X_2);
        _ -> {I_3, N, Res, X_2}
    end
end,
{I_4, N, Res_2, X_2} = Fun_2(I_3, N, Res, X_2),
        Res_2
    catch {return, Ret} -> Ret end.

roundf(X_3) ->
    try
        (case (X_3 >= 0.0) of
    true -> mochi_to_int((X_3 + 0.5));
    _ -> mochi_to_int((X_3 - 0.5))
end)
    catch {return, Ret} -> Ret end.

fib_iterative(N_2) ->
    try
        case (N_2 < 0) of
        true -> erlang:error("n is negative");
        _ -> ok
    end,
        case (N_2 == 0) of
        true -> throw({return, [0]});
        _ -> ok
    end,
        Fib = [0, 1],
        I_5 = 2,
        Fun_3 = fun Fun_3_loop(Fib, I_5, N_2) ->
    case (I_5 =< N_2) of
        true ->
            Fib_2 = lists:append((case Fib of nil -> []; _ -> Fib end), [((case erlang:is_map(Fib) of true -> maps:get((I_5 - 1), Fib, nil); _ -> case (I_5 - 1) < 0 of true -> mochi_nth(erlang:length(Fib) + (I_5 - 1) + 1, Fib); _ -> mochi_nth((I_5 - 1) + 1, Fib) end end) + (case erlang:is_map(Fib) of true -> maps:get((I_5 - 2), Fib, nil); _ -> case (I_5 - 2) < 0 of true -> mochi_nth(erlang:length(Fib) + (I_5 - 2) + 1, Fib); _ -> mochi_nth((I_5 - 2) + 1, Fib) end end))]),
            I_6 = (I_5 + 1),
            Fun_3_loop(Fib_2, I_6, N_2);
        _ -> {Fib, I_5, N_2}
    end
end,
{Fib_2, I_6, N_2} = Fun_3(Fib, I_5, N_2),
        Fib_2
    catch {return, Ret} -> Ret end.

fib_recursive_term(I_7) ->
    try
        case (I_7 < 0) of
        true -> erlang:error("n is negative");
        _ -> ok
    end,
        case (I_7 < 2) of
        true -> throw({return, I_7});
        _ -> ok
    end,
        (fib_recursive_term((I_7 - 1)) + fib_recursive_term((I_7 - 2)))
    catch {return, Ret} -> Ret end.

fib_recursive(N_3) ->
    try
        case (N_3 < 0) of
        true -> erlang:error("n is negative");
        _ -> ok
    end,
        Res_3 = [],
        I_8 = 0,
        Fun_4 = fun Fun_4_loop(I_8, N_3, Res_3) ->
    case (I_8 =< N_3) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [fib_recursive_term(I_8)]),
            I_9 = (I_8 + 1),
            Fun_4_loop(I_9, N_3, Res_4);
        _ -> {I_8, N_3, Res_3}
    end
end,
{I_9, N_3, Res_4} = Fun_4(I_8, N_3, Res_3),
        Res_4
    catch {return, Ret} -> Ret end.

fib_recursive_cached_term(I_10) ->
    try
        case (I_10 < 0) of
        true -> erlang:error("n is negative");
        _ -> ok
    end,
        case (I_10 < 2) of
        true -> throw({return, I_10});
        _ -> ok
    end,
        case maps:is_key(I_10, erlang:get('fib_cache_global')) of
        true -> throw({return, maps:get(I_10, erlang:get('fib_cache_global'), nil)});
        _ -> ok
    end,
        Val = (fib_recursive_cached_term((I_10 - 1)) + fib_recursive_cached_term((I_10 - 2))),
        Fib_cache_global_tmp = lists:sublist(erlang:get('fib_cache_global'), I_10) ++ [Val] ++ lists:nthtail(I_10 + 1, erlang:get('fib_cache_global')),
        erlang:put('fib_cache_global', Fib_cache_global_tmp),
        Val
    catch {return, Ret} -> Ret end.

fib_recursive_cached(N_4) ->
    try
        case (N_4 < 0) of
        true -> erlang:error("n is negative");
        _ -> ok
    end,
        Res_5 = [],
        J = 0,
        Fun_5 = fun Fun_5_loop(J, N_4, Res_5) ->
    case (J =< N_4) of
        true ->
            Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [fib_recursive_cached_term(J)]),
            J_2 = (J + 1),
            Fun_5_loop(J_2, N_4, Res_6);
        _ -> {J, N_4, Res_5}
    end
end,
{J_2, N_4, Res_6} = Fun_5(J, N_4, Res_5),
        Res_6
    catch {return, Ret} -> Ret end.

fib_memoization_term(Num) ->
    try
        case maps:is_key(Num, erlang:get('fib_memo_cache')) of
        true -> throw({return, maps:get(Num, erlang:get('fib_memo_cache'), nil)});
        _ -> ok
    end,
        Value = (fib_memoization_term((Num - 1)) + fib_memoization_term((Num - 2))),
        Fib_memo_cache_tmp = lists:sublist(erlang:get('fib_memo_cache'), Num) ++ [Value] ++ lists:nthtail(Num + 1, erlang:get('fib_memo_cache')),
        erlang:put('fib_memo_cache', Fib_memo_cache_tmp),
        Value
    catch {return, Ret} -> Ret end.

fib_memoization(N_5) ->
    try
        case (N_5 < 0) of
        true -> erlang:error("n is negative");
        _ -> ok
    end,
        Out = [],
        I_11 = 0,
        Fun_6 = fun Fun_6_loop(I_11, N_5, Out) ->
    case (I_11 =< N_5) of
        true ->
            Out_2 = lists:append((case Out of nil -> []; _ -> Out end), [fib_memoization_term(I_11)]),
            I_12 = (I_11 + 1),
            Fun_6_loop(I_12, N_5, Out_2);
        _ -> {I_11, N_5, Out}
    end
end,
{I_12, N_5, Out_2} = Fun_6(I_11, N_5, Out),
        Out_2
    catch {return, Ret} -> Ret end.

fib_binet(N_6) ->
    try
        case (N_6 < 0) of
        true -> erlang:error("n is negative");
        _ -> ok
    end,
        case (N_6 >= 1475) of
        true -> erlang:error("n is too large");
        _ -> ok
    end,
        Sqrt5 = sqrt(5.0),
        Phi = mochi_safe_div((1.0 + Sqrt5), 2.0),
        Res_7 = [],
        I_13 = 0,
        Fun_7 = fun Fun_7_loop(I_13, N_6, Phi, Res_7, Sqrt5) ->
    case (I_13 =< N_6) of
        true ->
            Val_2 = roundf(mochi_safe_div(powf(Phi, I_13), Sqrt5)),
            Res_8 = lists:append((case Res_7 of nil -> []; _ -> Res_7 end), [Val_2]),
            I_14 = (I_13 + 1),
            Fun_7_loop(I_14, N_6, Phi, Res_8, Sqrt5);
        _ -> {I_13, N_6, Phi, Res_7, Sqrt5}
    end
end,
{I_14, N_6, Phi, Res_8, Sqrt5} = Fun_7(I_13, N_6, Phi, Res_7, Sqrt5),
        Res_8
    catch {return, Ret} -> Ret end.

matrix_mul(A, B) ->
    try
        A00 = (((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)) of true -> maps:get(0, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)) + 0 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)) of true -> maps:get(0, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)) + 0 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)) end end)) + ((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)) of true -> maps:get(1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)) + 1 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)) of true -> maps:get(0, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)) + 0 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)) end end))),
        A01 = (((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)) of true -> maps:get(0, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)) + 0 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)) of true -> maps:get(1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)) + 1 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)) end end)) + ((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)) of true -> maps:get(1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)) + 1 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)) of true -> maps:get(1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)) + 1 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)) end end))),
        A10 = (((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)) of true -> maps:get(0, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)) + 0 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)) of true -> maps:get(0, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)) + 0 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)) end end)) + ((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)) of true -> maps:get(1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)) + 1 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)) of true -> maps:get(0, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)) + 0 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)) end end))),
        A11 = (((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)) of true -> maps:get(0, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)) + 0 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)) of true -> maps:get(1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)) + 1 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)) end end)) + ((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)) of true -> maps:get(1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)) + 1 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)) of true -> maps:get(1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)) + 1 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)) end end))),
        [[A00, A01], [A10, A11]]
    catch {return, Ret} -> Ret end.

matrix_pow(M, Power) ->
    try
        case (Power < 0) of
        true -> erlang:error("power is negative");
        _ -> ok
    end,
        Result = [[1, 0], [0, 1]],
        Base = M,
        P = Power,
        Fun_8 = fun Fun_8_loop(Base, M, P, Power, Result) ->
    case (P > 0) of
        true ->
            case (mochi_mod(P, 2) == 1) of
        true -> Result_2 = matrix_mul(Result, Base),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            Base_2 = matrix_mul(Base, Base),
            P_2 = mochi_to_int((P div 2)),
            Fun_8_loop(Base_2, M, P_2, Power, Result_3);
        _ -> {Base, M, P, Power, Result}
    end
end,
{Base_2, M, P_2, Power, Result_3} = Fun_8(Base, M, P, Power, Result),
        Result_3
    catch {return, Ret} -> Ret end.

fib_matrix(N_7) ->
    try
        case (N_7 < 0) of
        true -> erlang:error("n is negative");
        _ -> ok
    end,
        case (N_7 == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        M_2 = [[1, 1], [1, 0]],
        Res_9 = matrix_pow(M_2, (N_7 - 1)),
        (case erlang:is_map((case erlang:is_map(Res_9) of true -> maps:get(0, Res_9, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res_9) + 0 + 1, Res_9); _ -> mochi_nth(0 + 1, Res_9) end end)) of true -> maps:get(0, (case erlang:is_map(Res_9) of true -> maps:get(0, Res_9, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res_9) + 0 + 1, Res_9); _ -> mochi_nth(0 + 1, Res_9) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Res_9) of true -> maps:get(0, Res_9, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res_9) + 0 + 1, Res_9); _ -> mochi_nth(0 + 1, Res_9) end end)) + 0 + 1, (case erlang:is_map(Res_9) of true -> maps:get(0, Res_9, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res_9) + 0 + 1, Res_9); _ -> mochi_nth(0 + 1, Res_9) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Res_9) of true -> maps:get(0, Res_9, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res_9) + 0 + 1, Res_9); _ -> mochi_nth(0 + 1, Res_9) end end)) end end)
    catch {return, Ret} -> Ret end.

run_tests() ->
    try
        Expected = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55],
        It = fib_iterative(10),
        Rec = fib_recursive(10),
        Cache = fib_recursive_cached(10),
        Memo = fib_memoization(10),
        Bin = fib_binet(10),
        M_3 = fib_matrix(10),
        case (It /= Expected) of
        true -> erlang:error("iterative failed");
        _ -> ok
    end,
        case (Rec /= Expected) of
        true -> erlang:error("recursive failed");
        _ -> ok
    end,
        case (Cache /= Expected) of
        true -> erlang:error("cached failed");
        _ -> ok
    end,
        case (Memo /= Expected) of
        true -> erlang:error("memoization failed");
        _ -> ok
    end,
        case (Bin /= Expected) of
        true -> erlang:error("binet failed");
        _ -> ok
    end,
        case (M_3 /= 55) of
        true -> erlang:error("matrix failed");
        _ -> ok
    end,
        M_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('fib_cache_global', #{}),
    erlang:put('fib_memo_cache', #{0 => 0, 1 => 1, 2 => 1}),
    io:format("~ts~n", [mochi_str(run_tests())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
