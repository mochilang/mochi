#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, extended_euclid/2, chinese_remainder_theorem/4, invert_modulo/2, chinese_remainder_theorem2/4]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

extended_euclid(A, B) ->
    try
        case (B == 0) of
        true -> throw({return, #{"x" => 1, "y" => 0}});
        _ -> ok
    end,
        Res = extended_euclid(B, mochi_mod(A, B)),
        K = (A div B),
        #{"x" => maps:get("y", Res, nil), "y" => (maps:get("x", Res, nil) - (K * maps:get("y", Res, nil)))}
    catch {return, Ret} -> Ret end.

chinese_remainder_theorem(N1, R1, N2, R2) ->
    try
        Res_2 = extended_euclid(N1, N2),
        X = maps:get("x", Res_2, nil),
        Y = maps:get("y", Res_2, nil),
        M = (N1 * N2),
        N = (((R2 * X) * N1) + ((R1 * Y) * N2)),
        mochi_mod((mochi_mod(N, M) + M), M)
    catch {return, Ret} -> Ret end.

invert_modulo(A_2, N_2) ->
    try
        Res_3 = extended_euclid(A_2, N_2),
        B_2 = maps:get("x", Res_3, nil),
        case (B_2 < 0) of
        true -> B_3 = mochi_mod((mochi_mod(B_2, N_2) + N_2), N_2),
            B_4 = B_3;
        _ -> B_4 = B_2
    end,
        B_4
    catch {return, Ret} -> Ret end.

chinese_remainder_theorem2(N1_2, R1_2, N2_2, R2_2) ->
    try
        X_2 = invert_modulo(N1_2, N2_2),
        Y_2 = invert_modulo(N2_2, N1_2),
        M_2 = (N1_2 * N2_2),
        N_3 = (((R2_2 * X_2) * N1_2) + ((R1_2 * Y_2) * N2_2)),
        mochi_mod((mochi_mod(N_3, M_2) + M_2), M_2)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('e1', extended_euclid(10, 6)),
    io:format("~ts~n", [mochi_repr(((mochi_str(maps:get("x", erlang:get('e1'), nil)) ++ ",") ++ mochi_str(maps:get("y", erlang:get('e1'), nil))))]),
    erlang:put('e2', extended_euclid(7, 5)),
    io:format("~ts~n", [mochi_repr(((mochi_str(maps:get("x", erlang:get('e2'), nil)) ++ ",") ++ mochi_str(maps:get("y", erlang:get('e2'), nil))))]),
    io:format("~ts~n", [mochi_str(chinese_remainder_theorem(5, 1, 7, 3))]),
    io:format("~ts~n", [mochi_str(chinese_remainder_theorem(6, 1, 4, 3))]),
    io:format("~ts~n", [mochi_str(invert_modulo(2, 5))]),
    io:format("~ts~n", [mochi_str(invert_modulo(8, 7))]),
    io:format("~ts~n", [mochi_str(chinese_remainder_theorem2(5, 1, 7, 3))]),
    io:format("~ts~n", [mochi_str(chinese_remainder_theorem2(6, 1, 4, 3))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
