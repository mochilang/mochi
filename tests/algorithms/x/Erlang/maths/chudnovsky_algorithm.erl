#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrtapprox/1, factorial_float/1, pi/1]).

% Generated by Mochi transpiler v0.10.59 (589dcb03e5) on 2025-08-07 12:04 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

sqrtapprox(X) ->
    try
        case (X =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, Ret} -> Ret end.

factorial_float(N) ->
    try
        Result = 1.0,
        I_3 = 2,
        Fun_2 = fun Fun_2_loop(I_3, N, Result) ->
    case (I_3 =< N) of
        true ->
            Result_2 = mochi_safe_mul(Result, float(I_3)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, N, Result_2);
        _ -> {I_3, N, Result}
    end
end,
{I_4, N, Result_2} = Fun_2(I_3, N, Result),
        Result_2
    catch {return, Ret} -> Ret end.

pi(N_2) ->
    try
        case (N_2 < 1) of
        true -> erlang:error("Undefined for non-natural numbers");
        _ -> ok
    end,
        Iterations = ((N_2 + 13) div 14),
        Constant_term = mochi_safe_mul(426880.0, sqrtapprox(10005.0)),
        Exponential_term = 1.0,
        Linear_term = 13591409.0,
        Partial_sum = Linear_term,
        K = 1,
        Fun_3 = fun Fun_3_loop(Constant_term, Exponential_term, Iterations, K, Linear_term, N_2, Partial_sum) ->
    case (K < Iterations) of
        true ->
            K6 = (6 * K),
            K3 = (3 * K),
            Fact6k = factorial_float(K6),
            Fact3k = factorial_float(K3),
            Factk = factorial_float(K),
            Multinomial = mochi_safe_div(Fact6k, mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(Fact3k, Factk), Factk), Factk)),
            Linear_term_2 = (Linear_term + 545140134.0),
            Exponential_term_2 = mochi_safe_mul(Exponential_term, -262537412640768000.0),
            Partial_sum_2 = (Partial_sum + mochi_safe_div(mochi_safe_mul(Multinomial, Linear_term_2), Exponential_term_2)),
            K_2 = (K + 1),
            Fun_3_loop(Constant_term, Exponential_term_2, Iterations, K_2, Linear_term_2, N_2, Partial_sum_2);
        _ -> {Constant_term, Exponential_term, Iterations, K, Linear_term, N_2, Partial_sum}
    end
end,
{Constant_term, Exponential_term_2, Iterations, K_2, Linear_term_2, N_2, Partial_sum_2} = Fun_3(Constant_term, Exponential_term, Iterations, K, Linear_term, N_2, Partial_sum),
        mochi_safe_div(Constant_term, Partial_sum_2)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('n', 50),
    io:format("~ts~n", [mochi_repr(((("The first " ++ mochi_str(50)) ++ " digits of pi is: ") ++ mochi_str(pi(50))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
