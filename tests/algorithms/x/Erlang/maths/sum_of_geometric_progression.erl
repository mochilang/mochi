#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow_float/2, sum_of_geometric_progression/3, test_sum/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

pow_float(Base, Exp) ->
    try
        Result = 1.0,
        Exponent = Exp,
        case (Exponent < 0) of
        true -> Exponent_2 = -Exponent,
            I = 0,
            Fun = fun Fun_loop(Base, Exp, Exponent_2, I, Result) ->
    case (I < Exponent_2) of
        true ->
            Result_2 = mochi_safe_mul(Result, Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, Exponent_2, I_2, Result_2);
        _ -> {Base, Exp, Exponent_2, I, Result}
    end
end,
{Base, Exp, Exponent_2, I_2, Result_2} = Fun(Base, Exp, Exponent_2, I, Result),
            throw({return, mochi_safe_div(1.0, Result_2)}),
            Exponent_3 = Exponent_2,
            Fun_2 = Fun,
            I_3 = I_2,
            Result_3 = Result_2;
        _ -> Exponent_3 = Exponent,
            Fun_2 = nil,
            I_3 = nil,
            Result_3 = Result
    end,
        I_4 = 0,
        Fun_3 = fun Fun_3_loop(Base, Exp, Exponent_3, I_4, Result_3) ->
    case (I_4 < Exponent_3) of
        true ->
            Result_4 = mochi_safe_mul(Result_3, Base),
            I_5 = (I_4 + 1),
            Fun_3_loop(Base, Exp, Exponent_3, I_5, Result_4);
        _ -> {Base, Exp, Exponent_3, I_4, Result_3}
    end
end,
{Base, Exp, Exponent_3, I_5, Result_4} = Fun_3(Base, Exp, Exponent_3, I_4, Result_3),
        Result_4
    catch {return, Ret} -> Ret end.

sum_of_geometric_progression(First_term, Common_ratio, Num_of_terms) ->
    try
        case (Common_ratio == 1) of
        true -> throw({return, float((Num_of_terms * First_term))});
        _ -> ok
    end,
        A = float(First_term),
        R = float(Common_ratio),
        mochi_safe_mul(mochi_safe_div(A, (1.0 - R)), (1.0 - pow_float(R, Num_of_terms)))
    catch {return, Ret} -> Ret end.

test_sum() ->
    try
        case (sum_of_geometric_progression(1, 2, 10) /= 1023.0) of
        true -> erlang:error("example1 failed");
        _ -> ok
    end,
        case (sum_of_geometric_progression(1, 10, 5) /= 11111.0) of
        true -> erlang:error("example2 failed");
        _ -> ok
    end,
        case (sum_of_geometric_progression(-1, 2, 10) /= -1023.0) of
        true -> erlang:error("example3 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_sum(),
        io:format("~ts~n", [mochi_repr(sum_of_geometric_progression(1, 2, 10))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
