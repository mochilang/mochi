#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ceil_int/1, explicit_euler/5, abs_float/1, test_explicit_euler/0, main/0]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

ceil_int(X) ->
    try
        N = mochi_to_int(X),
        case (float(N) < X) of
        true -> N_2 = (N + 1),
            N_3 = N_2;
        _ -> N_3 = N
    end,
        N_3
    catch {return, Ret} -> Ret end.

explicit_euler(Ode_func, Y0, X0, Step_size, X_end) ->
    try
        N_4 = ceil_int(mochi_safe_div((X_end - X0), Step_size)),
        Y = [],
        I = 0,
        Fun = fun Fun_loop(I, N_4, Ode_func, Step_size, X0, X_end, Y, Y0) ->
    case (I =< N_4) of
        true ->
            Y_2 = lists:append((case Y of nil -> []; _ -> Y end), [0.0]),
            I_2 = (I + 1),
            Fun_loop(I_2, N_4, Ode_func, Step_size, X0, X_end, Y_2, Y0);
        _ -> {I, N_4, Ode_func, Step_size, X0, X_end, Y, Y0}
    end
end,
{I_2, N_4, Ode_func, Step_size, X0, X_end, Y_2, Y0} = Fun(I, N_4, Ode_func, Step_size, X0, X_end, Y, Y0),
        Y_3 = lists:sublist(Y_2, 0) ++ [Y0] ++ lists:nthtail(0 + 1, Y_2),
        X_2 = X0,
        K = 0,
        Fun_2 = fun Fun_2_loop(I_2, K, N_4, Ode_func, Step_size, X_2, X0, X_end, Y_3, Y0) ->
    case (K < N_4) of
        true ->
            Y_4 = lists:sublist(Y_3, (K + 1)) ++ [((case erlang:is_map(Y_3) of true -> maps:get(K, Y_3, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Y_3) + K + 1, Y_3); _ -> mochi_nth(K + 1, Y_3) end end) + mochi_safe_mul(Step_size, Ode_func(X_2, (case erlang:is_map(Y_3) of true -> maps:get(K, Y_3, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Y_3) + K + 1, Y_3); _ -> mochi_nth(K + 1, Y_3) end end))))] ++ lists:nthtail((K + 1) + 1, Y_3),
            X_3 = (X_2 + Step_size),
            K_2 = (K + 1),
            Fun_2_loop(I_2, K_2, N_4, Ode_func, Step_size, X_3, X0, X_end, Y_4, Y0);
        _ -> {I_2, K, N_4, Ode_func, Step_size, X_2, X0, X_end, Y_3, Y0}
    end
end,
{I_2, K_2, N_4, Ode_func, Step_size, X_3, X0, X_end, Y_4, Y0} = Fun_2(I_2, K, N_4, Ode_func, Step_size, X_2, X0, X_end, Y_3, Y0),
        Y_4
    catch {return, Ret} -> Ret end.

abs_float(A) ->
    try
        (case (A < 0.0) of
    true -> -A;
    _ -> A
end)
    catch {return, Ret} -> Ret end.

test_explicit_euler() ->
    try
        F = fun(X_4, Y_5) ->
    try
        Y_5
    catch {return, Ret} -> Ret end
end,
        Ys = explicit_euler(F, 1.0, 0.0, 0.01, 5.0),
        Last = (case erlang:is_map(Ys) of true -> maps:get((erlang:length(Ys) - 1), Ys, nil); _ -> case (erlang:length(Ys) - 1) < 0 of true -> mochi_nth(erlang:length(Ys) + (erlang:length(Ys) - 1) + 1, Ys); _ -> mochi_nth((erlang:length(Ys) - 1) + 1, Ys) end end),
        case (abs_float((Last - 144.77277243257308)) > 0.001) of
        true -> erlang:error("explicit_euler failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_explicit_euler(),
        F_2 = fun(X_5, Y_6) ->
    try
        Y_6
    catch {return, Ret} -> Ret end
end,
        Ys_2 = explicit_euler(F_2, 1.0, 0.0, 0.01, 5.0),
        io:format("~ts~n", [mochi_repr((case erlang:is_map(Ys_2) of true -> maps:get((erlang:length(Ys_2) - 1), Ys_2, nil); _ -> case (erlang:length(Ys_2) - 1) < 0 of true -> mochi_nth(erlang:length(Ys_2) + (erlang:length(Ys_2) - 1) + 1, Ys_2); _ -> mochi_nth((erlang:length(Ys_2) - 1) + 1, Ys_2) end end))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
