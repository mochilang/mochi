#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs/1, pow_int/2, nth_root/2, round_nearest/1, compute_geometric_mean/1, test_compute_geometric_mean/0, main/0]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

abs(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

pow_int(Base, Exp) ->
    try
        Result = 1.0,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = mochi_safe_mul(Result, Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

nth_root(X_2, N) ->
    try
        case (X_2 == 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X_2,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Guess, I_3, N, X_2) ->
    case (I_3 < 10) of
        true ->
            Denom = pow_int(Guess, (N - 1)),
            Guess_2 = mochi_safe_div((mochi_safe_mul(float((N - 1)), Guess) + mochi_safe_div(X_2, Denom)), float(N)),
            I_4 = (I_3 + 1),
            Fun_2_loop(Guess_2, I_4, N, X_2);
        _ -> {Guess, I_3, N, X_2}
    end
end,
{Guess_2, I_4, N, X_2} = Fun_2(Guess, I_3, N, X_2),
        Guess_2
    catch {return, Ret} -> Ret end.

round_nearest(X_3) ->
    try
        case (X_3 >= 0.0) of
        true -> N_2 = mochi_to_int((X_3 + 0.5)),
            throw({return, float(N_2)}),
            N_3 = N_2;
        _ -> N_3 = nil
    end,
        N_4 = mochi_to_int((X_3 - 0.5)),
        float(N_4)
    catch {return, Ret} -> Ret end.

compute_geometric_mean(Nums) ->
    try
        case (erlang:length(Nums) == 0) of
        true -> erlang:error("no numbers");
        _ -> ok
    end,
        Product = 1.0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Nums, Product) ->
    case (I_5 < erlang:length(Nums)) of
        true ->
            Product_2 = mochi_safe_mul(Product, (case erlang:is_map(Nums) of true -> maps:get(I_5, Nums, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Nums) + I_5 + 1, Nums); _ -> mochi_nth(I_5 + 1, Nums) end end)),
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Nums, Product_2);
        _ -> {I_5, Nums, Product}
    end
end,
{I_6, Nums, Product_2} = Fun_3(I_5, Nums, Product),
        case ((Product_2 < 0.0) andalso (mochi_mod(erlang:length(Nums), 2) == 0)) of
        true -> erlang:error("Cannot Compute Geometric Mean for these numbers.");
        _ -> ok
    end,
        Mean = nth_root(erlang:abs(Product_2), erlang:length(Nums)),
        case (Product_2 < 0.0) of
        true -> Mean_2 = -Mean,
            Mean_3 = Mean_2;
        _ -> Mean_3 = Mean
    end,
        Possible = round_nearest(Mean_3),
        case (pow_int(Possible, erlang:length(Nums)) == Product_2) of
        true -> Mean_4 = Possible,
            Mean_5 = Mean_4;
        _ -> Mean_5 = Mean_3
    end,
        Mean_5
    catch {return, Ret} -> Ret end.

test_compute_geometric_mean() ->
    try
        Eps = 0.0001,
        M1 = compute_geometric_mean([2.0, 8.0]),
        case (erlang:abs((M1 - 4.0)) > 0.0001) of
        true -> erlang:error("test1 failed");
        _ -> ok
    end,
        M2 = compute_geometric_mean([5.0, 125.0]),
        case (erlang:abs((M2 - 25.0)) > 0.0001) of
        true -> erlang:error("test2 failed");
        _ -> ok
    end,
        M3 = compute_geometric_mean([1.0, 0.0]),
        case (erlang:abs((M3 - 0.0)) > 0.0001) of
        true -> erlang:error("test3 failed");
        _ -> ok
    end,
        M4 = compute_geometric_mean([1.0, 5.0, 25.0, 5.0]),
        case (erlang:abs((M4 - 5.0)) > 0.0001) of
        true -> erlang:error("test4 failed");
        _ -> ok
    end,
        M5 = compute_geometric_mean([-5.0, 25.0, 1.0]),
        case (erlang:abs((M5 + 5.0)) > 0.0001) of
        true -> erlang:error("test5 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_compute_geometric_mean(),
        io:format("~ts~n", [mochi_repr(compute_geometric_mean([-3.0, -27.0]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
