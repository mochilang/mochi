#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, identity/1, matrix_mul/2, matrix_pow/2, fibonacci_with_matrix_exponentiation/3, simple_fibonacci/3]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

identity(N) ->
    try
        I = 0,
        Mat = [],
        Fun_2 = fun Fun_2_loop(I, Mat, N) ->
    case (I < N) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(I, J, Mat, N, Row) ->
    case (J < N) of
        true ->
            case (I == J) of
        true -> Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [1]),
            Row_4 = Row_2;
        _ -> Row_3 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            Row_4 = Row_3
    end,
            J_2 = (J + 1),
            Fun_loop(I, J_2, Mat, N, Row_4);
        _ -> {I, J, Mat, N, Row}
    end
end,
{I, J_2, Mat, N, Row_4} = Fun(I, J, Mat, N, Row),
            Mat_2 = lists:append((case Mat of nil -> []; _ -> Mat end), [Row_4]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Mat_2, N);
        _ -> {I, Mat, N}
    end
end,
{I_2, Mat_2, N} = Fun_2(I, Mat, N),
        Mat_2
    catch {return, Ret} -> Ret end.

matrix_mul(A, B) ->
    try
        N_2 = erlang:length(A),
        Result = [],
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(A, B, I_3, N_2, Result) ->
    case (I_3 < N_2) of
        true ->
            Row_5 = [],
            J_3 = 0,
            Fun_4 = fun Fun_4_loop(A, B, I_3, J_3, N_2, Result, Row_5) ->
    case (J_3 < N_2) of
        true ->
            Cell = 0,
            K = 0,
            Fun_3 = fun Fun_3_loop(A, B, Cell, I_3, J_3, K, N_2, Result, Row_5) ->
    case (K < N_2) of
        true ->
            Cell_2 = (Cell + ((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end)) of true -> maps:get(K, (case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end)) + K + 1, (case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) of true -> maps:get(J_3, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) + J_3 + 1, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) end end))),
            K_2 = (K + 1),
            Fun_3_loop(A, B, Cell_2, I_3, J_3, K_2, N_2, Result, Row_5);
        _ -> {A, B, Cell, I_3, J_3, K, N_2, Result, Row_5}
    end
end,
{A, B, Cell_2, I_3, J_3, K_2, N_2, Result, Row_5} = Fun_3(A, B, Cell, I_3, J_3, K, N_2, Result, Row_5),
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [Cell_2]),
            J_4 = (J_3 + 1),
            Fun_4_loop(A, B, I_3, J_4, N_2, Result, Row_6);
        _ -> {A, B, I_3, J_3, N_2, Result, Row_5}
    end
end,
{A, B, I_3, J_4, N_2, Result, Row_6} = Fun_4(A, B, I_3, J_3, N_2, Result, Row_5),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_6]),
            I_4 = (I_3 + 1),
            Fun_5_loop(A, B, I_4, N_2, Result_2);
        _ -> {A, B, I_3, N_2, Result}
    end
end,
{A, B, I_4, N_2, Result_2} = Fun_5(A, B, I_3, N_2, Result),
        Result_2
    catch {return, Ret} -> Ret end.

matrix_pow(Base, Exp) ->
    try
        Result_3 = identity(erlang:length(Base)),
        B_2 = Base,
        E = Exp,
        Fun_6 = fun Fun_6_loop(B_2, Base, E, Exp, Result_3) ->
    case (E > 0) of
        true ->
            case (mochi_mod(E, 2) == 1) of
        true -> Result_4 = matrix_mul(Result_3, B_2),
            Result_5 = Result_4;
        _ -> Result_5 = Result_3
    end,
            B_3 = matrix_mul(B_2, B_2),
            E_2 = (E div 2),
            Fun_6_loop(B_3, Base, E_2, Exp, Result_5);
        _ -> {B_2, Base, E, Exp, Result_3}
    end
end,
{B_3, Base, E_2, Exp, Result_5} = Fun_6(B_2, Base, E, Exp, Result_3),
        Result_5
    catch {return, Ret} -> Ret end.

fibonacci_with_matrix_exponentiation(N_3, F1, F2) ->
    try
        case (N_3 == 1) of
        true -> throw({return, F1});
        _ -> ok
    end,
        case (N_3 == 2) of
        true -> throw({return, F2});
        _ -> ok
    end,
        Base_2 = [[1, 1], [1, 0]],
        M = matrix_pow(Base_2, (N_3 - 2)),
        ((F2 * (case erlang:is_map((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end)) of true -> maps:get(0, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end)) + 0 + 1, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end)) end end)) + (F1 * (case erlang:is_map((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end)) of true -> maps:get(1, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end)) + 1 + 1, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end)) end end)))
    catch {return, Ret} -> Ret end.

simple_fibonacci(N_4, F1_2, F2_2) ->
    try
        case (N_4 == 1) of
        true -> throw({return, F1_2});
        _ -> ok
    end,
        case (N_4 == 2) of
        true -> throw({return, F2_2});
        _ -> ok
    end,
        A_2 = F1_2,
        B_4 = F2_2,
        Count = (N_4 - 2),
        Fun_7 = fun Fun_7_loop(A_2, B_4, Count, F1_2, F2_2, N_4) ->
    case (Count > 0) of
        true ->
            Tmp = (A_2 + B_4),
            A_3 = B_4,
            B_5 = Tmp,
            Count_2 = (Count - 1),
            Fun_7_loop(A_3, B_5, Count_2, F1_2, F2_2, N_4);
        _ -> {A_2, B_4, Count, F1_2, F2_2, N_4}
    end
end,
{A_3, B_5, Count_2, F1_2, F2_2, N_4} = Fun_7(A_2, B_4, Count, F1_2, F2_2, N_4),
        B_5
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(fibonacci_with_matrix_exponentiation(1, 5, 6))]),
    io:format("~ts~n", [mochi_str(fibonacci_with_matrix_exponentiation(2, 10, 11))]),
    io:format("~ts~n", [mochi_str(fibonacci_with_matrix_exponentiation(13, 0, 1))]),
    io:format("~ts~n", [mochi_str(fibonacci_with_matrix_exponentiation(10, 5, 9))]),
    io:format("~ts~n", [mochi_str(fibonacci_with_matrix_exponentiation(9, 2, 3))]),
    io:format("~ts~n", [mochi_str(simple_fibonacci(1, 5, 6))]),
    io:format("~ts~n", [mochi_str(simple_fibonacci(2, 10, 11))]),
    io:format("~ts~n", [mochi_str(simple_fibonacci(13, 0, 1))]),
    io:format("~ts~n", [mochi_str(simple_fibonacci(10, 5, 9))]),
    io:format("~ts~n", [mochi_str(simple_fibonacci(9, 2, 3))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
