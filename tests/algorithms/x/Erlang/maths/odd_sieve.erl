#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, odd_sieve/1]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

odd_sieve(Num) ->
    try
        case (Num =< 2) of
        true -> throw({return, []});
        _ -> ok
    end,
        case (Num == 3) of
        true -> throw({return, [2]});
        _ -> ok
    end,
        Size = ((Num div 2) - 1),
        Sieve = [],
        Idx = 0,
        Fun = fun Fun_loop(Idx, Num, Sieve, Size) ->
    case (Idx < Size) of
        true ->
            Sieve_2 = lists:append((case Sieve of nil -> []; _ -> Sieve end), [true]),
            Idx_2 = (Idx + 1),
            Fun_loop(Idx_2, Num, Sieve_2, Size);
        _ -> {Idx, Num, Sieve, Size}
    end
end,
{Idx_2, Num, Sieve_2, Size} = Fun(Idx, Num, Sieve, Size),
        I = 3,
        Fun_4 = fun Fun_4_loop(I, Idx_2, Num, Sieve_2, Size) ->
    case ((I * I) =< Num) of
        true ->
            S_idx = ((I div 2) - 1),
            case (case erlang:is_map(Sieve_2) of true -> maps:get(S_idx, Sieve_2, nil); _ -> case S_idx < 0 of true -> mochi_nth(erlang:length(Sieve_2) + S_idx + 1, Sieve_2); _ -> mochi_nth(S_idx + 1, Sieve_2) end end) of
        true -> J = (I * I),
            Fun_2 = fun Fun_2_loop(I, Idx_2, J, Num, S_idx, Sieve_2, Size) ->
    case (J < Num) of
        true ->
            J_idx = ((J div 2) - 1),
            Sieve_3 = lists:sublist(Sieve_2, J_idx) ++ [false] ++ lists:nthtail(J_idx + 1, Sieve_2),
            J_2 = (J + (2 * I)),
            Fun_2_loop(I, Idx_2, J_2, Num, S_idx, Sieve_3, Size);
        _ -> {I, Idx_2, J, Num, S_idx, Sieve_2, Size}
    end
end,
{I, Idx_2, J_2, Num, S_idx, Sieve_3, Size} = Fun_2(I, Idx_2, J, Num, S_idx, Sieve_2, Size),
            Fun_3 = Fun_2,
            J_3 = J_2,
            Sieve_4 = Sieve_3;
        _ -> Fun_3 = Fun,
            J_3 = nil,
            Sieve_4 = Sieve_2
    end,
            I_2 = (I + 2),
            Fun_4_loop(I_2, Idx_2, Num, Sieve_4, Size);
        _ -> {I, Idx_2, Num, Sieve_2, Size}
    end
end,
{I_2, Idx_2, Num, Sieve_4, Size} = Fun_4(I, Idx_2, Num, Sieve_2, Size),
        Primes = [2],
        N = 3,
        K = 0,
        Fun_5 = fun Fun_5_loop(I_2, Idx_2, K, N, Num, Primes, Sieve_4, Size) ->
    case (N < Num) of
        true ->
            case (case erlang:is_map(Sieve_4) of true -> maps:get(K, Sieve_4, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Sieve_4) + K + 1, Sieve_4); _ -> mochi_nth(K + 1, Sieve_4) end end) of
        true -> Primes_2 = lists:append((case Primes of nil -> []; _ -> Primes end), [N]),
            Primes_3 = Primes_2;
        _ -> Primes_3 = Primes
    end,
            N_2 = (N + 2),
            K_2 = (K + 1),
            Fun_5_loop(I_2, Idx_2, K_2, N_2, Num, Primes_3, Sieve_4, Size);
        _ -> {I_2, Idx_2, K, N, Num, Primes, Sieve_4, Size}
    end
end,
{I_2, Idx_2, K_2, N_2, Num, Primes_3, Sieve_4, Size} = Fun_5(I_2, Idx_2, K, N, Num, Primes, Sieve_4, Size),
        Primes_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(odd_sieve(2))]),
    io:format("~ts~n", [mochi_repr(odd_sieve(3))]),
    io:format("~ts~n", [mochi_repr(odd_sieve(10))]),
    io:format("~ts~n", [mochi_repr(odd_sieve(20))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
