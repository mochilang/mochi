#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, int_pow/2, karatsuba/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

int_pow(Base, Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = (Result * Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

karatsuba(A, B) ->
    try
        case ((erlang:length(mochi_str(A)) == 1) orelse (erlang:length(mochi_str(B)) == 1)) of
        true -> throw({return, (A * B)});
        _ -> ok
    end,
        M1 = erlang:length(mochi_str(A)),
        Lb = erlang:length(mochi_str(B)),
        case (Lb > M1) of
        true -> M1_2 = Lb,
            M1_3 = M1_2;
        _ -> M1_3 = M1
    end,
        M2 = (M1_3 div 2),
        Power = int_pow(10, M2),
        A1 = (A div Power),
        A2 = mochi_mod(A, Power),
        B1 = (B div Power),
        B2 = mochi_mod(B, Power),
        X = karatsuba(A2, B2),
        Y = karatsuba((A1 + A2), (B1 + B2)),
        Z = karatsuba(A1, B1),
        Result_3 = (((Z * int_pow(10, (2 * M2))) + (((Y - Z) - X) * Power)) + X),
        Result_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_str(karatsuba(15463, 23489))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
