#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, recursive_lucas_number/1, dynamic_lucas_number/1]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

recursive_lucas_number(N) ->
    try
        case (N == 0) of
        true -> throw({return, 2});
        _ -> ok
    end,
        case (N == 1) of
        true -> throw({return, 1});
        _ -> ok
    end,
        (recursive_lucas_number((N - 1)) + recursive_lucas_number((N - 2)))
    catch {return, Ret} -> Ret end.

dynamic_lucas_number(N_2) ->
    try
        A = 2,
        B = 1,
        I = 0,
        Fun = fun Fun_loop(A, B, I, N_2) ->
    case (I < N_2) of
        true ->
            Next = (A + B),
            A_2 = B,
            B_2 = Next,
            I_2 = (I + 1),
            Fun_loop(A_2, B_2, I_2, N_2);
        _ -> {A, B, I, N_2}
    end
end,
{A_2, B_2, I_2, N_2} = Fun(A, B, I, N_2),
        A_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(recursive_lucas_number(1))]),
    io:format("~ts~n", [mochi_str(recursive_lucas_number(20))]),
    io:format("~ts~n", [mochi_str(recursive_lucas_number(0))]),
    io:format("~ts~n", [mochi_str(recursive_lucas_number(5))]),
    io:format("~ts~n", [mochi_str(dynamic_lucas_number(1))]),
    io:format("~ts~n", [mochi_str(dynamic_lucas_number(20))]),
    io:format("~ts~n", [mochi_str(dynamic_lucas_number(0))]),
    io:format("~ts~n", [mochi_str(dynamic_lucas_number(25))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
