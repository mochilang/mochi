#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, bubble_sort/1, median/1]).

% Generated by Mochi transpiler v0.10.66 (fa2dc5e881)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

bubble_sort(Nums) ->
    try
        Arr = Nums,
        N = erlang:length(Arr),
        I = 0,
        Fun_2 = fun Fun_2_loop(Arr, I, N, Nums) ->
    case (I < N) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Arr, I, J, N, Nums) ->
    case (J < (N - 1)) of
        true ->
            A = (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end),
            B = (case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> mochi_nth((J + 1) + 1, Arr) end end),
            case (A > B) of
        true -> Arr_2 = lists:sublist(Arr, J) ++ [B] ++ lists:nthtail(J + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, (J + 1)) ++ [A] ++ lists:nthtail((J + 1) + 1, Arr_2),
            Arr_4 = Arr_3;
        _ -> Arr_4 = Arr
    end,
            J_2 = (J + 1),
            Fun_loop(Arr_4, I, J_2, N, Nums);
        _ -> {Arr, I, J, N, Nums}
    end
end,
{Arr_4, I, J_2, N, Nums} = Fun(Arr, I, J, N, Nums),
            I_2 = (I + 1),
            Fun_2_loop(Arr_4, I_2, N, Nums);
        _ -> {Arr, I, N, Nums}
    end
end,
{Arr_4, I_2, N, Nums} = Fun_2(Arr, I, N, Nums),
        Arr_4
    catch {return, RetCatch} -> RetCatch end.

median(Nums_2) ->
    try
        Sorted_list = bubble_sort(Nums_2),
        Length = erlang:length(Sorted_list),
        Mid_index = (Length div 2),
        case (mochi_mod(Length, 2) == 0) of
        true -> throw({return, mochi_safe_div(float(((case erlang:is_map(Sorted_list) of true -> maps:get(Mid_index, Sorted_list, nil); _ -> case Mid_index < 0 of true -> mochi_nth(erlang:length(Sorted_list) + Mid_index + 1, Sorted_list); _ -> mochi_nth(Mid_index + 1, Sorted_list) end end) + (case erlang:is_map(Sorted_list) of true -> maps:get((Mid_index - 1), Sorted_list, nil); _ -> case (Mid_index - 1) < 0 of true -> mochi_nth(erlang:length(Sorted_list) + (Mid_index - 1) + 1, Sorted_list); _ -> mochi_nth((Mid_index - 1) + 1, Sorted_list) end end))), 2.0)});
        _ -> throw({return, float((case erlang:is_map(Sorted_list) of true -> maps:get(Mid_index, Sorted_list, nil); _ -> case Mid_index < 0 of true -> mochi_nth(erlang:length(Sorted_list) + Mid_index + 1, Sorted_list); _ -> mochi_nth(Mid_index + 1, Sorted_list) end end))})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(median([0]))]),
    io:format("~ts~n", [mochi_str(median([4, 1, 3, 2]))]),
    io:format("~ts~n", [mochi_str(median([2, 70, 6, 50, 20, 8, 4]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
