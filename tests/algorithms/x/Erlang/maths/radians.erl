#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, radians/1, abs_float/1, almost_equal/2, test_radians/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

radians(Degree) ->
    try
        mochi_safe_div(Degree, mochi_safe_div(180.0, 3.141592653589793))
    catch {return, Ret} -> Ret end.

abs_float(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

almost_equal(A, B) ->
    try
        (abs_float((A - B)) =< 0.00000001)
    catch {return, Ret} -> Ret end.

test_radians() ->
    try
        case mochi_not(almost_equal(radians(180.0), 3.141592653589793)) of
        true -> erlang:error("radians 180 failed");
        _ -> ok
    end,
        case mochi_not(almost_equal(radians(92.0), 1.6057029118347832)) of
        true -> erlang:error("radians 92 failed");
        _ -> ok
    end,
        case mochi_not(almost_equal(radians(274.0), 4.782202150464463)) of
        true -> erlang:error("radians 274 failed");
        _ -> ok
    end,
        case mochi_not(almost_equal(radians(109.82), 1.9167205845401725)) of
        true -> erlang:error("radians 109.82 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_radians(),
        io:format("~ts~n", [mochi_str(radians(180.0))]),
        io:format("~ts~n", [mochi_str(radians(92.0))]),
        io:format("~ts~n", [mochi_str(radians(274.0))]),
        io:format("~ts~n", [mochi_str(radians(109.82))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
