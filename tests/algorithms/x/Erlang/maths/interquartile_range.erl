#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, bubble_sort/1, find_median/1, interquartile_range/1, absf/1, float_equal/2, test_interquartile_range/0, main/0]).

% Generated by Mochi transpiler v0.10.67 (a456897e5c)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

bubble_sort(Nums) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, Nums) ->
    case (I < erlang:length(Nums)) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [(case erlang:is_map(Nums) of true -> maps:get(I, Nums, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Nums) + I + 1, Nums); _ -> mochi_nth(I + 1, Nums) end end)]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, I_2, Nums);
        _ -> {Arr, I, Nums}
    end
end,
{Arr_2, I_2, Nums} = Fun(Arr, I, Nums),
        N = erlang:length(Arr_2),
        A = 0,
        Fun_3 = fun Fun_3_loop(A, Arr_2, I_2, N, Nums) ->
    case (A < N) of
        true ->
            B = 0,
            Fun_2 = fun Fun_2_loop(A, Arr_2, B, I_2, N, Nums) ->
    case (B < ((N - A) - 1)) of
        true ->
            Temp_2 = (case ((case erlang:is_map(Arr_2) of true -> maps:get(B, Arr_2, nil); _ -> case B < 0 of true -> mochi_nth(erlang:length(Arr_2) + B + 1, Arr_2); _ -> mochi_nth(B + 1, Arr_2) end end) > (case erlang:is_map(Arr_2) of true -> maps:get((B + 1), Arr_2, nil); _ -> case (B + 1) < 0 of true -> mochi_nth(erlang:length(Arr_2) + (B + 1) + 1, Arr_2); _ -> mochi_nth((B + 1) + 1, Arr_2) end end)) of
        true -> Temp = (case erlang:is_map(Arr_2) of true -> maps:get(B, Arr_2, nil); _ -> case B < 0 of true -> mochi_nth(erlang:length(Arr_2) + B + 1, Arr_2); _ -> mochi_nth(B + 1, Arr_2) end end),
            Arr_3 = lists:sublist(Arr_2, B) ++ [(case erlang:is_map(Arr_2) of true -> maps:get((B + 1), Arr_2, nil); _ -> case (B + 1) < 0 of true -> mochi_nth(erlang:length(Arr_2) + (B + 1) + 1, Arr_2); _ -> mochi_nth((B + 1) + 1, Arr_2) end end)] ++ lists:nthtail(B + 1, Arr_2),
            Arr_4 = lists:sublist(Arr_3, (B + 1)) ++ [Temp] ++ lists:nthtail((B + 1) + 1, Arr_3),
            Arr_5 = Arr_4,
            Temp;
        _ -> Arr_5 = Arr_2,
            nil
    end),
            B_2 = (B + 1),
            Fun_2_loop(A, Arr_5, B_2, I_2, N, Nums);
        _ -> {A, Arr_2, B, I_2, N, Nums}
    end
end,
{A, Arr_5, B_2, I_2, N, Nums} = Fun_2(A, Arr_2, B, I_2, N, Nums),
            A_2 = (A + 1),
            Fun_3_loop(A_2, Arr_5, I_2, N, Nums);
        _ -> {A, Arr_2, I_2, N, Nums}
    end
end,
{A_2, Arr_5, I_2, N, Nums} = Fun_3(A, Arr_2, I_2, N, Nums),
        Arr_5
    catch {return, RetCatch} -> RetCatch end.

find_median(Nums_2) ->
    try
        Length = erlang:length(Nums_2),
        Div = mochi_idiv(Length, 2),
        Mod = mochi_mod(Length, 2),
        case (Mod /= 0) of
        true -> throw({return, (case erlang:is_map(Nums_2) of true -> maps:get(Div, Nums_2, nil); _ -> case Div < 0 of true -> mochi_nth(erlang:length(Nums_2) + Div + 1, Nums_2); _ -> mochi_nth(Div + 1, Nums_2) end end)});
        _ -> ok
    end,
        mochi_safe_div(((case erlang:is_map(Nums_2) of true -> maps:get(Div, Nums_2, nil); _ -> case Div < 0 of true -> mochi_nth(erlang:length(Nums_2) + Div + 1, Nums_2); _ -> mochi_nth(Div + 1, Nums_2) end end) + (case erlang:is_map(Nums_2) of true -> maps:get((Div - 1), Nums_2, nil); _ -> case (Div - 1) < 0 of true -> mochi_nth(erlang:length(Nums_2) + (Div - 1) + 1, Nums_2); _ -> mochi_nth((Div - 1) + 1, Nums_2) end end)), 2.0)
    catch {return, RetCatch} -> RetCatch end.

interquartile_range(Nums_3) ->
    try
        case (erlang:length(Nums_3) == 0) of
        true -> erlang:error({panic, "The list is empty. Provide a non-empty list."});
        _ -> ok
    end,
        Sorted = bubble_sort(Nums_3),
        Length_2 = erlang:length(Sorted),
        Div_2 = mochi_idiv(Length_2, 2),
        Mod_2 = mochi_mod(Length_2, 2),
        Lower = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Div_2, I_3, Length_2, Lower, Mod_2, Nums_3, Sorted) ->
    case (I_3 < Div_2) of
        true ->
            Lower_2 = lists:append((case Lower of nil -> []; _ -> Lower end), [(case erlang:is_map(Sorted) of true -> maps:get(I_3, Sorted, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Sorted) + I_3 + 1, Sorted); _ -> mochi_nth(I_3 + 1, Sorted) end end)]),
            I_4 = (I_3 + 1),
            Fun_4_loop(Div_2, I_4, Length_2, Lower_2, Mod_2, Nums_3, Sorted);
        _ -> {Div_2, I_3, Length_2, Lower, Mod_2, Nums_3, Sorted}
    end
end,
{Div_2, I_4, Length_2, Lower_2, Mod_2, Nums_3, Sorted} = Fun_4(Div_2, I_3, Length_2, Lower, Mod_2, Nums_3, Sorted),
        Upper = [],
        J = (Div_2 + Mod_2),
        Fun_5 = fun Fun_5_loop(Div_2, I_4, J, Length_2, Lower_2, Mod_2, Nums_3, Sorted, Upper) ->
    case (J < Length_2) of
        true ->
            Upper_2 = lists:append((case Upper of nil -> []; _ -> Upper end), [(case erlang:is_map(Sorted) of true -> maps:get(J, Sorted, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Sorted) + J + 1, Sorted); _ -> mochi_nth(J + 1, Sorted) end end)]),
            J_2 = (J + 1),
            Fun_5_loop(Div_2, I_4, J_2, Length_2, Lower_2, Mod_2, Nums_3, Sorted, Upper_2);
        _ -> {Div_2, I_4, J, Length_2, Lower_2, Mod_2, Nums_3, Sorted, Upper}
    end
end,
{Div_2, I_4, J_2, Length_2, Lower_2, Mod_2, Nums_3, Sorted, Upper_2} = Fun_5(Div_2, I_4, J, Length_2, Lower_2, Mod_2, Nums_3, Sorted, Upper),
        Q1 = find_median(Lower_2),
        Q3 = find_median(Upper_2),
        (Q3 - Q1)
    catch {return, RetCatch} -> RetCatch end.

absf(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

float_equal(A_3, B_3) ->
    try
        Diff = absf((A_3 - B_3)),
        (Diff < 0.0000001)
    catch {return, RetCatch} -> RetCatch end.

test_interquartile_range() ->
    try
        case mochi_not(float_equal(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0]), 2.0)) of
        true -> erlang:error({panic, "interquartile_range case1 failed"});
        _ -> ok
    end,
        case mochi_not(float_equal(interquartile_range([-2.0, -7.0, -10.0, 9.0, 8.0, 4.0, -67.0, 45.0]), 17.0)) of
        true -> erlang:error({panic, "interquartile_range case2 failed"});
        _ -> ok
    end,
        case mochi_not(float_equal(interquartile_range([-2.1, -7.1, -10.1, 9.1, 8.1, 4.1, -67.1, 45.1]), 17.2)) of
        true -> erlang:error({panic, "interquartile_range case3 failed"});
        _ -> ok
    end,
        case mochi_not(float_equal(interquartile_range([0.0, 0.0, 0.0, 0.0, 0.0]), 0.0)) of
        true -> erlang:error({panic, "interquartile_range case4 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_interquartile_range(),
        io:format("~ts~n", [mochi_str(interquartile_range([4.0, 1.0, 2.0, 3.0, 2.0]))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
