#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sock_merchant/1, test_sock_merchant/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

sock_merchant(Colors) ->
    try
        Arr = [],
        I = 0,
        Fun = fun Fun_loop(Arr, Colors, I) ->
    case (I < erlang:length(Colors)) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [(case erlang:is_map(Colors) of true -> maps:get(I, Colors, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Colors) + I + 1, Colors); _ -> mochi_nth(I + 1, Colors) end end)]),
            I_2 = (I + 1),
            Fun_loop(Arr_2, Colors, I_2);
        _ -> {Arr, Colors, I}
    end
end,
{Arr_2, Colors, I_2} = Fun(Arr, Colors, I),
        N = erlang:length(Arr_2),
        A = 0,
        Fun_3 = fun Fun_3_loop(A, Arr_2, Colors, I_2, N) ->
    case (A < N) of
        true ->
            Min_idx = A,
            B = (A + 1),
            Fun_2 = fun Fun_2_loop(A, Arr_2, B, Colors, I_2, Min_idx, N) ->
    case (B < N) of
        true ->
            case ((case erlang:is_map(Arr_2) of true -> maps:get(B, Arr_2, nil); _ -> case B < 0 of true -> mochi_nth(erlang:length(Arr_2) + B + 1, Arr_2); _ -> mochi_nth(B + 1, Arr_2) end end) < (case erlang:is_map(Arr_2) of true -> maps:get(Min_idx, Arr_2, nil); _ -> case Min_idx < 0 of true -> mochi_nth(erlang:length(Arr_2) + Min_idx + 1, Arr_2); _ -> mochi_nth(Min_idx + 1, Arr_2) end end)) of
        true -> Min_idx_2 = B,
            Min_idx_3 = Min_idx_2;
        _ -> Min_idx_3 = Min_idx
    end,
            B_2 = (B + 1),
            Fun_2_loop(A, Arr_2, B_2, Colors, I_2, Min_idx_3, N);
        _ -> {A, Arr_2, B, Colors, I_2, Min_idx, N}
    end
end,
{A, Arr_2, B_2, Colors, I_2, Min_idx_3, N} = Fun_2(A, Arr_2, B, Colors, I_2, Min_idx, N),
            Temp = (case erlang:is_map(Arr_2) of true -> maps:get(A, Arr_2, nil); _ -> case A < 0 of true -> mochi_nth(erlang:length(Arr_2) + A + 1, Arr_2); _ -> mochi_nth(A + 1, Arr_2) end end),
            Arr_3 = lists:sublist(Arr_2, A) ++ [(case erlang:is_map(Arr_2) of true -> maps:get(Min_idx_3, Arr_2, nil); _ -> case Min_idx_3 < 0 of true -> mochi_nth(erlang:length(Arr_2) + Min_idx_3 + 1, Arr_2); _ -> mochi_nth(Min_idx_3 + 1, Arr_2) end end)] ++ lists:nthtail(A + 1, Arr_2),
            Arr_4 = lists:sublist(Arr_3, Min_idx_3) ++ [Temp] ++ lists:nthtail(Min_idx_3 + 1, Arr_3),
            A_2 = (A + 1),
            Fun_3_loop(A_2, Arr_4, Colors, I_2, N);
        _ -> {A, Arr_2, Colors, I_2, N}
    end
end,
{A_2, Arr_4, Colors, I_2, N} = Fun_3(A, Arr_2, Colors, I_2, N),
        Pairs = 0,
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(A_2, Arr_4, Colors, I_3, N, Pairs) ->
    case (I_3 < N) of
        true ->
            Count = 1,
            Fun_4 = fun Fun_4_loop(A_2, Arr_4, Colors, Count, I_3, N, Pairs) ->
    case (((I_3 + 1) < N) andalso ((case erlang:is_map(Arr_4) of true -> maps:get(I_3, Arr_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr_4) + I_3 + 1, Arr_4); _ -> mochi_nth(I_3 + 1, Arr_4) end end) == (case erlang:is_map(Arr_4) of true -> maps:get((I_3 + 1), Arr_4, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(Arr_4) + (I_3 + 1) + 1, Arr_4); _ -> mochi_nth((I_3 + 1) + 1, Arr_4) end end))) of
        true ->
            Count_2 = (Count + 1),
            I_4 = (I_3 + 1),
            Fun_4_loop(A_2, Arr_4, Colors, Count_2, I_4, N, Pairs);
        _ -> {A_2, Arr_4, Colors, Count, I_3, N, Pairs}
    end
end,
{A_2, Arr_4, Colors, Count_2, I_4, N, Pairs} = Fun_4(A_2, Arr_4, Colors, Count, I_3, N, Pairs),
            Pairs_2 = (Pairs + mochi_safe_div(Count_2, 2)),
            I_5 = (I_4 + 1),
            Fun_5_loop(A_2, Arr_4, Colors, I_5, N, Pairs_2);
        _ -> {A_2, Arr_4, Colors, I_3, N, Pairs}
    end
end,
{A_2, Arr_4, Colors, I_5, N, Pairs_2} = Fun_5(A_2, Arr_4, Colors, I_3, N, Pairs),
        Pairs_2
    catch {return, Ret} -> Ret end.

test_sock_merchant() ->
    try
        Example1 = [10, 20, 20, 10, 10, 30, 50, 10, 20],
        case (sock_merchant(Example1) /= 3) of
        true -> erlang:error("example1 failed");
        _ -> ok
    end,
        Example2 = [1, 1, 3, 3],
        case (sock_merchant(Example2) /= 2) of
        true -> erlang:error("example2 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_sock_merchant(),
        Example1_2 = [10, 20, 20, 10, 10, 30, 50, 10, 20],
        io:format("~ts~n", [mochi_str(sock_merchant(Example1_2))]),
        Example2_2 = [1, 1, 3, 3],
        io:format("~ts~n", [mochi_str(sock_merchant(Example2_2))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
