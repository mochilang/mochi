#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, set_seed/1, randint/2, jacobi_symbol/2, pow_mod/3, solovay_strassen/2, main/0]).

% Generated by Mochi transpiler v0.10.67 (dc9a001850)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

set_seed(S) ->
    try
        erlang:put('seed', S),
        nil
    catch {return, RetCatch} -> RetCatch end.

randint(A, B) ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        (mochi_mod(erlang:get('seed'), ((B - A) + 1)) + A)
    catch {return, RetCatch} -> RetCatch end.

jacobi_symbol(Random_a, Number) ->
    try
        case ((Random_a == 0) orelse (Random_a == 1)) of
        true -> throw({return, Random_a});
        _ -> ok
    end,
        Random_a_2 = mochi_mod(Random_a, Number),
        T = 1,
        Fun_2 = fun Fun_2_loop(Number, Random_a_2, T) ->
    case (Random_a_2 /= 0) of
        true ->
            Fun = fun Fun_loop(Number, Random_a_2, T) ->
    case (mochi_mod(Random_a_2, 2) == 0) of
        true ->
            Random_a_3 = mochi_idiv(Random_a_2, 2),
            R = mochi_mod(Number, 8),
            T_3 = (case ((R == 3) orelse (R == 5)) of
        true -> T_2 = -T,
            T_2;
        _ -> T
    end),
            Fun_loop(Number, Random_a_3, T_3);
        _ -> {Number, Random_a_2, T}
    end
end,
{Number, Random_a_3, T_3} = Fun(Number, Random_a_2, T),
            Temp = Random_a_3,
            Random_a_4 = Number,
            Number_2 = Temp,
            T_5 = (case ((mochi_mod(Random_a_4, 4) == 3) andalso (mochi_mod(Number_2, 4) == 3)) of
        true -> T_4 = -T_3,
            T_4;
        _ -> T_3
    end),
            Random_a_5 = mochi_mod(Random_a_4, Number_2),
            Fun_2_loop(Number_2, Random_a_5, T_5);
        _ -> {Number, Random_a_2, T}
    end
end,
{Number_2, Random_a_5, T_5} = Fun_2(Number, Random_a_2, T),
        case (Number_2 == 1) of
        true -> throw({return, T_5});
        _ -> ok
    end,
        0
    catch {return, RetCatch} -> RetCatch end.

pow_mod(Base, Exp, Mod) ->
    try
        Result = 1,
        B_2 = mochi_mod(Base, Mod),
        E = Exp,
        Fun_3 = fun Fun_3_loop(B_2, Base, E, Exp, Mod, Result) ->
    case (E > 0) of
        true ->
            Result_3 = (case (mochi_mod(E, 2) == 1) of
        true -> Result_2 = mochi_mod((Result * B_2), Mod),
            Result_2;
        _ -> Result
    end),
            B_3 = mochi_mod((B_2 * B_2), Mod),
            E_2 = mochi_idiv(E, 2),
            Fun_3_loop(B_3, Base, E_2, Exp, Mod, Result_3);
        _ -> {B_2, Base, E, Exp, Mod, Result}
    end
end,
{B_3, Base, E_2, Exp, Mod, Result_3} = Fun_3(B_2, Base, E, Exp, Mod, Result),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

solovay_strassen(Number_3, Iterations) ->
    try
        case (Number_3 =< 1) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (Number_3 =< 3) of
        true -> throw({return, true});
        _ -> ok
    end,
        I = 0,
        Fun_4 = fun Fun_4_loop(I, Iterations, Number_3) ->
    case (I < Iterations) of
        true ->
            A_2 = randint(2, (Number_3 - 2)),
            X = jacobi_symbol(A_2, Number_3),
            Y = pow_mod(A_2, mochi_idiv((Number_3 - 1), 2), Number_3),
            Mod_x = mochi_mod(X, Number_3),
            Mod_x_3 = (case (Mod_x < 0) of
        true -> Mod_x_2 = (Mod_x + Number_3),
            Mod_x_2;
        _ -> Mod_x
    end),
            case ((X == 0) orelse (Y /= Mod_x_3)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_4_loop(I_2, Iterations, Number_3);
        _ -> {I, Iterations, Number_3}
    end
end,
{I_2, Iterations, Number_3} = Fun_4(I, Iterations, Number_3),
        true
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        set_seed(10),
        io:format("~ts~n", [mochi_str(solovay_strassen(13, 5))]),
        io:format("~ts~n", [mochi_str(solovay_strassen(9, 10))]),
        io:format("~ts~n", [mochi_str(solovay_strassen(17, 15))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
