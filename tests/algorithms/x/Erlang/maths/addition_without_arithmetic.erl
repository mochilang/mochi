#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, to_unsigned/1, from_unsigned/1, bit_and/2, bit_xor/2, lshift1/1, add/2]).

% Generated by Mochi transpiler v0.10.67 (24b0b70a80)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

to_unsigned(N) ->
    try
        (case (N < 0) of
    true -> (4294967296 + N);
    _ -> N
end)
    catch {return, RetCatch} -> RetCatch end.

from_unsigned(N_2) ->
    try
        (case (N_2 >= 2147483648) of
    true -> (N_2 - 4294967296);
    _ -> N_2
end)
    catch {return, RetCatch} -> RetCatch end.

bit_and(A, B) ->
    try
        X = A,
        Y = B,
        Res = 0,
        Bit = 1,
        I = 0,
        Fun = fun Fun_loop(A, B, Bit, I, Res, X, Y) ->
    case (I < 32) of
        true ->
            Res_3 = (case ((mochi_mod(X, 2) == 1) andalso (mochi_mod(Y, 2) == 1)) of
        true -> Res_2 = (Res + Bit),
            Res_2;
        _ -> Res
    end),
            X_2 = mochi_idiv(X, 2),
            Y_2 = mochi_idiv(Y, 2),
            Bit_2 = (Bit * 2),
            I_2 = (I + 1),
            Fun_loop(A, B, Bit_2, I_2, Res_3, X_2, Y_2);
        _ -> {A, B, Bit, I, Res, X, Y}
    end
end,
{A, B, Bit_2, I_2, Res_3, X_2, Y_2} = Fun(A, B, Bit, I, Res, X, Y),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

bit_xor(A_2, B_2) ->
    try
        X_3 = A_2,
        Y_3 = B_2,
        Res_4 = 0,
        Bit_3 = 1,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(A_2, B_2, Bit_3, I_3, Res_4, X_3, Y_3) ->
    case (I_3 < 32) of
        true ->
            Abit = mochi_mod(X_3, 2),
            Bbit = mochi_mod(Y_3, 2),
            Res_6 = (case (mochi_mod((Abit + Bbit), 2) == 1) of
        true -> Res_5 = (Res_4 + Bit_3),
            Res_5;
        _ -> Res_4
    end),
            X_4 = mochi_idiv(X_3, 2),
            Y_4 = mochi_idiv(Y_3, 2),
            Bit_4 = (Bit_3 * 2),
            I_4 = (I_3 + 1),
            Fun_2_loop(A_2, B_2, Bit_4, I_4, Res_6, X_4, Y_4);
        _ -> {A_2, B_2, Bit_3, I_3, Res_4, X_3, Y_3}
    end
end,
{A_2, B_2, Bit_4, I_4, Res_6, X_4, Y_4} = Fun_2(A_2, B_2, Bit_3, I_3, Res_4, X_3, Y_3),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

lshift1(Num) ->
    try
        mochi_mod((Num * 2), 4294967296)
    catch {return, RetCatch} -> RetCatch end.

add(A_3, B_3) ->
    try
        First = to_unsigned(A_3),
        Second = to_unsigned(B_3),
        Fun_3 = fun Fun_3_loop(A_3, B_3, First, Second) ->
    case (Second /= 0) of
        true ->
            Carry = bit_and(First, Second),
            First_2 = bit_xor(First, Second),
            Second_2 = lshift1(Carry),
            Fun_3_loop(A_3, B_3, First_2, Second_2);
        _ -> {A_3, B_3, First, Second}
    end
end,
{A_3, B_3, First_2, Second_2} = Fun_3(A_3, B_3, First, Second),
        Result = from_unsigned(First_2),
        Result
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('MAX', 4294967296),
    erlang:put('HALF', 2147483648),
    io:format("~ts~n", [mochi_str(add(3, 5))]),
    io:format("~ts~n", [mochi_str(add(13, 5))]),
    io:format("~ts~n", [mochi_str(add(-7, 2))]),
    io:format("~ts~n", [mochi_str(add(0, -7))]),
    io:format("~ts~n", [mochi_str(add(-321, 0))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
