#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_dual/2, dual_from_list/2, dual_add/2, dual_add_real/2, dual_mul/2, dual_mul_real/2, dual_pow/2, factorial/1, differentiate/3, test_differentiate/0, main/0]).

% Generated by Mochi transpiler v0.10.66 (f6dfa6fffe)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

make_dual(Real, Rank) ->
    try
        Ds = [],
        I = 0,
        Fun = fun Fun_loop(Ds, I, Rank, Real) ->
    case (I < Rank) of
        true ->
            Ds_2 = lists:append((case Ds of nil -> []; _ -> Ds end), [1.0]),
            I_2 = (I + 1),
            Fun_loop(Ds_2, I_2, Rank, Real);
        _ -> {Ds, I, Rank, Real}
    end
end,
{Ds_2, I_2, Rank, Real} = Fun(Ds, I, Rank, Real),
        #{"real" => Real, "duals" => Ds_2}
    catch {return, RetCatch} -> RetCatch end.

dual_from_list(Real_2, Ds_3) ->
    try
        #{"real" => Real_2, "duals" => Ds_3}
    catch {return, RetCatch} -> RetCatch end.

dual_add(A, B) ->
    try
        S_dual = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(A, B, I_3, S_dual) ->
    case (I_3 < erlang:length(maps:get("duals", A, nil))) of
        true ->
            S_dual_2 = lists:append((case S_dual of nil -> []; _ -> S_dual end), [(case erlang:is_map(maps:get("duals", A, nil)) of true -> maps:get(I_3, maps:get("duals", A, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("duals", A, nil)) + I_3 + 1, maps:get("duals", A, nil)); _ -> mochi_nth(I_3 + 1, maps:get("duals", A, nil)) end end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(A, B, I_4, S_dual_2);
        _ -> {A, B, I_3, S_dual}
    end
end,
{A, B, I_4, S_dual_2} = Fun_2(A, B, I_3, S_dual),
        O_dual = [],
        J = 0,
        Fun_3 = fun Fun_3_loop(A, B, I_4, J, O_dual, S_dual_2) ->
    case (J < erlang:length(maps:get("duals", B, nil))) of
        true ->
            O_dual_2 = lists:append((case O_dual of nil -> []; _ -> O_dual end), [(case erlang:is_map(maps:get("duals", B, nil)) of true -> maps:get(J, maps:get("duals", B, nil), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(maps:get("duals", B, nil)) + J + 1, maps:get("duals", B, nil)); _ -> mochi_nth(J + 1, maps:get("duals", B, nil)) end end)]),
            J_2 = (J + 1),
            Fun_3_loop(A, B, I_4, J_2, O_dual_2, S_dual_2);
        _ -> {A, B, I_4, J, O_dual, S_dual_2}
    end
end,
{A, B, I_4, J_2, O_dual_2, S_dual_2} = Fun_3(A, B, I_4, J, O_dual, S_dual_2),
        S_dual_5 = (case (erlang:length(S_dual_2) > erlang:length(O_dual_2)) of
        true -> Diff = (erlang:length(S_dual_2) - erlang:length(O_dual_2)),
            K = 0,
            Fun_4 = fun Fun_4_loop(A, B, Diff, I_4, J_2, K, O_dual_2, S_dual_2) ->
    case (K < Diff) of
        true ->
            O_dual_3 = lists:append((case O_dual_2 of nil -> []; _ -> O_dual_2 end), [1.0]),
            K_2 = (K + 1),
            Fun_4_loop(A, B, Diff, I_4, J_2, K_2, O_dual_3, S_dual_2);
        _ -> {A, B, Diff, I_4, J_2, K, O_dual_2, S_dual_2}
    end
end,
{A, B, Diff, I_4, J_2, K_2, O_dual_3, S_dual_2} = Fun_4(A, B, Diff, I_4, J_2, K, O_dual_2, S_dual_2),
            Diff_2 = Diff,
            Diff2_3 = nil,
            Fun_7 = Fun_4,
            K_3 = K_2,
            K2_4 = nil,
            O_dual_4 = O_dual_3,
            S_dual_2;
        _ -> S_dual_4 = (case (erlang:length(S_dual_2) < erlang:length(O_dual_2)) of
        true -> Diff2 = (erlang:length(O_dual_2) - erlang:length(S_dual_2)),
            K2 = 0,
            Fun_5 = fun Fun_5_loop(A, B, Diff2, I_4, J_2, K2, O_dual_2, S_dual_2) ->
    case (K2 < Diff2) of
        true ->
            S_dual_3 = lists:append((case S_dual_2 of nil -> []; _ -> S_dual_2 end), [1.0]),
            K2_2 = (K2 + 1),
            Fun_5_loop(A, B, Diff2, I_4, J_2, K2_2, O_dual_2, S_dual_3);
        _ -> {A, B, Diff2, I_4, J_2, K2, O_dual_2, S_dual_2}
    end
end,
{A, B, Diff2, I_4, J_2, K2_2, O_dual_2, S_dual_3} = Fun_5(A, B, Diff2, I_4, J_2, K2, O_dual_2, S_dual_2),
            Diff2_2 = Diff2,
            Fun_6 = Fun_5,
            K2_3 = K2_2,
            S_dual_3;
        _ -> Diff2_2 = nil,
            Fun_6 = Fun_3,
            K2_3 = nil,
            S_dual_2
    end),
            Diff_2 = nil,
            Diff2_3 = Diff2_2,
            Fun_7 = Fun_6,
            K_3 = nil,
            K2_4 = K2_3,
            O_dual_4 = O_dual_2,
            S_dual_4
    end),
        New_duals = [],
        Idx = 0,
        Fun_8 = fun Fun_8_loop(A, B, Diff_2, Diff2_3, I_4, Idx, J_2, K_3, K2_4, New_duals, O_dual_4, S_dual_5) ->
    case (Idx < erlang:length(S_dual_5)) of
        true ->
            New_duals_2 = lists:append((case New_duals of nil -> []; _ -> New_duals end), [((case erlang:is_map(S_dual_5) of true -> maps:get(Idx, S_dual_5, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(S_dual_5) + Idx + 1, S_dual_5); _ -> mochi_nth(Idx + 1, S_dual_5) end end) + (case erlang:is_map(O_dual_4) of true -> maps:get(Idx, O_dual_4, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(O_dual_4) + Idx + 1, O_dual_4); _ -> mochi_nth(Idx + 1, O_dual_4) end end))]),
            Idx_2 = (Idx + 1),
            Fun_8_loop(A, B, Diff_2, Diff2_3, I_4, Idx_2, J_2, K_3, K2_4, New_duals_2, O_dual_4, S_dual_5);
        _ -> {A, B, Diff_2, Diff2_3, I_4, Idx, J_2, K_3, K2_4, New_duals, O_dual_4, S_dual_5}
    end
end,
{A, B, Diff_2, Diff2_3, I_4, Idx_2, J_2, K_3, K2_4, New_duals_2, O_dual_4, S_dual_5} = Fun_8(A, B, Diff_2, Diff2_3, I_4, Idx, J_2, K_3, K2_4, New_duals, O_dual_4, S_dual_5),
        #{"real" => (maps:get("real", A, nil) + maps:get("real", B, nil)), "duals" => New_duals_2}
    catch {return, RetCatch} -> RetCatch end.

dual_add_real(A_2, B_2) ->
    try
        Ds_4 = [],
        I_5 = 0,
        Fun_9 = fun Fun_9_loop(A_2, B_2, Ds_4, I_5) ->
    case (I_5 < erlang:length(maps:get("duals", A_2, nil))) of
        true ->
            Ds_5 = lists:append((case Ds_4 of nil -> []; _ -> Ds_4 end), [(case erlang:is_map(maps:get("duals", A_2, nil)) of true -> maps:get(I_5, maps:get("duals", A_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("duals", A_2, nil)) + I_5 + 1, maps:get("duals", A_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("duals", A_2, nil)) end end)]),
            I_6 = (I_5 + 1),
            Fun_9_loop(A_2, B_2, Ds_5, I_6);
        _ -> {A_2, B_2, Ds_4, I_5}
    end
end,
{A_2, B_2, Ds_5, I_6} = Fun_9(A_2, B_2, Ds_4, I_5),
        #{"real" => (maps:get("real", A_2, nil) + B_2), "duals" => Ds_5}
    catch {return, RetCatch} -> RetCatch end.

dual_mul(A_3, B_3) ->
    try
        New_len = ((erlang:length(maps:get("duals", A_3, nil)) + erlang:length(maps:get("duals", B_3, nil))) + 1),
        New_duals_3 = [],
        Idx_3 = 0,
        Fun_10 = fun Fun_10_loop(A_3, B_3, Idx_3, New_duals_3, New_len) ->
    case (Idx_3 < New_len) of
        true ->
            New_duals_4 = lists:append((case New_duals_3 of nil -> []; _ -> New_duals_3 end), [0.0]),
            Idx_4 = (Idx_3 + 1),
            Fun_10_loop(A_3, B_3, Idx_4, New_duals_4, New_len);
        _ -> {A_3, B_3, Idx_3, New_duals_3, New_len}
    end
end,
{A_3, B_3, Idx_4, New_duals_4, New_len} = Fun_10(A_3, B_3, Idx_3, New_duals_3, New_len),
        I_7 = 0,
        Fun_12 = fun Fun_12_loop(A_3, B_3, I_7, Idx_4, New_duals_4, New_len) ->
    case (I_7 < erlang:length(maps:get("duals", A_3, nil))) of
        true ->
            J_3 = 0,
            Fun_11 = fun Fun_11_loop(A_3, B_3, I_7, Idx_4, J_3, New_duals_4, New_len) ->
    case (J_3 < erlang:length(maps:get("duals", B_3, nil))) of
        true ->
            Pos = ((I_7 + J_3) + 1),
            Val = ((case erlang:is_map(New_duals_4) of true -> maps:get(Pos, New_duals_4, nil); _ -> case Pos < 0 of true -> mochi_nth(erlang:length(New_duals_4) + Pos + 1, New_duals_4); _ -> mochi_nth(Pos + 1, New_duals_4) end end) + mochi_safe_mul((case erlang:is_map(maps:get("duals", A_3, nil)) of true -> maps:get(I_7, maps:get("duals", A_3, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("duals", A_3, nil)) + I_7 + 1, maps:get("duals", A_3, nil)); _ -> mochi_nth(I_7 + 1, maps:get("duals", A_3, nil)) end end), (case erlang:is_map(maps:get("duals", B_3, nil)) of true -> maps:get(J_3, maps:get("duals", B_3, nil), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(maps:get("duals", B_3, nil)) + J_3 + 1, maps:get("duals", B_3, nil)); _ -> mochi_nth(J_3 + 1, maps:get("duals", B_3, nil)) end end))),
            New_duals_5 = lists:sublist(New_duals_4, Pos) ++ [Val] ++ lists:nthtail(Pos + 1, New_duals_4),
            J_4 = (J_3 + 1),
            Fun_11_loop(A_3, B_3, I_7, Idx_4, J_4, New_duals_5, New_len);
        _ -> {A_3, B_3, I_7, Idx_4, J_3, New_duals_4, New_len}
    end
end,
{A_3, B_3, I_7, Idx_4, J_4, New_duals_5, New_len} = Fun_11(A_3, B_3, I_7, Idx_4, J_3, New_duals_4, New_len),
            I_8 = (I_7 + 1),
            Fun_12_loop(A_3, B_3, I_8, Idx_4, New_duals_5, New_len);
        _ -> {A_3, B_3, I_7, Idx_4, New_duals_4, New_len}
    end
end,
{A_3, B_3, I_8, Idx_4, New_duals_5, New_len} = Fun_12(A_3, B_3, I_7, Idx_4, New_duals_4, New_len),
        K_4 = 0,
        Fun_13 = fun Fun_13_loop(A_3, B_3, I_8, Idx_4, K_4, New_duals_5, New_len) ->
    case (K_4 < erlang:length(maps:get("duals", A_3, nil))) of
        true ->
            Val_2 = ((case erlang:is_map(New_duals_5) of true -> maps:get(K_4, New_duals_5, nil); _ -> case K_4 < 0 of true -> mochi_nth(erlang:length(New_duals_5) + K_4 + 1, New_duals_5); _ -> mochi_nth(K_4 + 1, New_duals_5) end end) + mochi_safe_mul((case erlang:is_map(maps:get("duals", A_3, nil)) of true -> maps:get(K_4, maps:get("duals", A_3, nil), nil); _ -> case K_4 < 0 of true -> mochi_nth(erlang:length(maps:get("duals", A_3, nil)) + K_4 + 1, maps:get("duals", A_3, nil)); _ -> mochi_nth(K_4 + 1, maps:get("duals", A_3, nil)) end end), maps:get("real", B_3, nil))),
            New_duals_6 = lists:sublist(New_duals_5, K_4) ++ [Val_2] ++ lists:nthtail(K_4 + 1, New_duals_5),
            K_5 = (K_4 + 1),
            Fun_13_loop(A_3, B_3, I_8, Idx_4, K_5, New_duals_6, New_len);
        _ -> {A_3, B_3, I_8, Idx_4, K_4, New_duals_5, New_len}
    end
end,
{A_3, B_3, I_8, Idx_4, K_5, New_duals_6, New_len} = Fun_13(A_3, B_3, I_8, Idx_4, K_4, New_duals_5, New_len),
        L = 0,
        Fun_14 = fun Fun_14_loop(A_3, B_3, I_8, Idx_4, K_5, L, New_duals_6, New_len) ->
    case (L < erlang:length(maps:get("duals", B_3, nil))) of
        true ->
            Val_3 = ((case erlang:is_map(New_duals_6) of true -> maps:get(L, New_duals_6, nil); _ -> case L < 0 of true -> mochi_nth(erlang:length(New_duals_6) + L + 1, New_duals_6); _ -> mochi_nth(L + 1, New_duals_6) end end) + mochi_safe_mul((case erlang:is_map(maps:get("duals", B_3, nil)) of true -> maps:get(L, maps:get("duals", B_3, nil), nil); _ -> case L < 0 of true -> mochi_nth(erlang:length(maps:get("duals", B_3, nil)) + L + 1, maps:get("duals", B_3, nil)); _ -> mochi_nth(L + 1, maps:get("duals", B_3, nil)) end end), maps:get("real", A_3, nil))),
            New_duals_7 = lists:sublist(New_duals_6, L) ++ [Val_3] ++ lists:nthtail(L + 1, New_duals_6),
            L_2 = (L + 1),
            Fun_14_loop(A_3, B_3, I_8, Idx_4, K_5, L_2, New_duals_7, New_len);
        _ -> {A_3, B_3, I_8, Idx_4, K_5, L, New_duals_6, New_len}
    end
end,
{A_3, B_3, I_8, Idx_4, K_5, L_2, New_duals_7, New_len} = Fun_14(A_3, B_3, I_8, Idx_4, K_5, L, New_duals_6, New_len),
        #{"real" => mochi_safe_mul(maps:get("real", A_3, nil), maps:get("real", B_3, nil)), "duals" => New_duals_7}
    catch {return, RetCatch} -> RetCatch end.

dual_mul_real(A_4, B_4) ->
    try
        Ds_6 = [],
        I_9 = 0,
        Fun_15 = fun Fun_15_loop(A_4, B_4, Ds_6, I_9) ->
    case (I_9 < erlang:length(maps:get("duals", A_4, nil))) of
        true ->
            Ds_7 = lists:append((case Ds_6 of nil -> []; _ -> Ds_6 end), [mochi_safe_mul((case erlang:is_map(maps:get("duals", A_4, nil)) of true -> maps:get(I_9, maps:get("duals", A_4, nil), nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(maps:get("duals", A_4, nil)) + I_9 + 1, maps:get("duals", A_4, nil)); _ -> mochi_nth(I_9 + 1, maps:get("duals", A_4, nil)) end end), B_4)]),
            I_10 = (I_9 + 1),
            Fun_15_loop(A_4, B_4, Ds_7, I_10);
        _ -> {A_4, B_4, Ds_6, I_9}
    end
end,
{A_4, B_4, Ds_7, I_10} = Fun_15(A_4, B_4, Ds_6, I_9),
        #{"real" => mochi_safe_mul(maps:get("real", A_4, nil), B_4), "duals" => Ds_7}
    catch {return, RetCatch} -> RetCatch end.

dual_pow(X, N) ->
    try
        case (N < 0) of
        true -> erlang:error({panic, "power must be a positive integer"});
        _ -> ok
    end,
        case (N == 0) of
        true -> throw({return, #{"real" => 1.0, "duals" => []}});
        _ -> ok
    end,
        Res = X,
        I_11 = 1,
        Fun_16 = fun Fun_16_loop(I_11, N, Res, X) ->
    case (I_11 < N) of
        true ->
            Res_2 = dual_mul(Res, X),
            I_12 = (I_11 + 1),
            Fun_16_loop(I_12, N, Res_2, X);
        _ -> {I_11, N, Res, X}
    end
end,
{I_12, N, Res_2, X} = Fun_16(I_11, N, Res, X),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

factorial(N_2) ->
    try
        Res_3 = 1.0,
        I_13 = 2,
        Fun_17 = fun Fun_17_loop(I_13, N_2, Res_3) ->
    case (I_13 =< N_2) of
        true ->
            Res_4 = mochi_safe_mul(Res_3, float(I_13)),
            I_14 = (I_13 + 1),
            Fun_17_loop(I_14, N_2, Res_4);
        _ -> {I_13, N_2, Res_3}
    end
end,
{I_14, N_2, Res_4} = Fun_17(I_13, N_2, Res_3),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

differentiate(Func, Position, Order) ->
    try
        D = make_dual(Position, 1),
        Result = Func(D),
        case (Order == 0) of
        true -> throw({return, maps:get("real", Result, nil)});
        _ -> ok
    end,
        mochi_safe_mul((case erlang:is_map(maps:get("duals", Result, nil)) of true -> maps:get((Order - 1), maps:get("duals", Result, nil), nil); _ -> case (Order - 1) < 0 of true -> mochi_nth(erlang:length(maps:get("duals", Result, nil)) + (Order - 1) + 1, maps:get("duals", Result, nil)); _ -> mochi_nth((Order - 1) + 1, maps:get("duals", Result, nil)) end end), factorial(Order))
    catch {return, RetCatch} -> RetCatch end.

test_differentiate() ->
    try
        F1 = fun F1(X_2) ->
    try
        dual_pow(X_2, 2)
    catch {return, RetCatch} -> RetCatch end
end,
        case (differentiate(F1, 2.0, 2) /= 2.0) of
        true -> erlang:error({panic, "f1 failed"});
        _ -> ok
    end,
        F2 = fun F2(X_3) ->
    try
        dual_mul(dual_pow(X_3, 2), dual_pow(X_3, 4))
    catch {return, RetCatch} -> RetCatch end
end,
        case (differentiate(F2, 9.0, 2) /= 196830.0) of
        true -> erlang:error({panic, "f2 failed"});
        _ -> ok
    end,
        F3 = fun F3(Y) ->
    try
        dual_mul_real(dual_pow(dual_add_real(Y, 3.0), 6), 0.5)
    catch {return, RetCatch} -> RetCatch end
end,
        case (differentiate(F3, 3.5, 4) /= 7605.0) of
        true -> erlang:error({panic, "f3 failed"});
        _ -> ok
    end,
        F4 = fun F4(Y_2) ->
    try
        dual_pow(Y_2, 2)
    catch {return, RetCatch} -> RetCatch end
end,
        case (differentiate(F4, 4.0, 3) /= 0.0) of
        true -> erlang:error({panic, "f4 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_differentiate(),
        F = fun F(Y_3) ->
    try
        dual_mul(dual_pow(Y_3, 2), dual_pow(Y_3, 4))
    catch {return, RetCatch} -> RetCatch end
end,
        Res_5 = differentiate(F, 9.0, 2),
        io:format("~ts~n", [mochi_repr(Res_5)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
