#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parse_decimal/1, zeller_day/1, zeller/1, test_zeller/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

parse_decimal(S) ->
    try
        Value = 0,
        I = 0,
        Fun = fun Fun_loop(I, S, Value) ->
    case (I < erlang:length(S)) of
        true ->
            C = string:substr(S, I + 1, 1),
            case ((C < "0") orelse (C > "9")) of
        true -> erlang:error("invalid literal");
        _ -> ok
    end,
            Value_2 = ((Value * 10) + mochi_to_int(C)),
            I_2 = (I + 1),
            Fun_loop(I_2, S, Value_2);
        _ -> {I, S, Value}
    end
end,
{I_2, S, Value_2} = Fun(I, S, Value),
        Value_2
    catch {return, Ret} -> Ret end.

zeller_day(Date_input) ->
    try
        Days = #{0 => "Sunday", 1 => "Monday", 2 => "Tuesday", 3 => "Wednesday", 4 => "Thursday", 5 => "Friday", 6 => "Saturday"},
        case (erlang:length(Date_input) /= 10) of
        true -> erlang:error("Must be 10 characters long");
        _ -> ok
    end,
        M = parse_decimal(string:substr(Date_input, 0 + 1, (2 - 0))),
        case ((M =< 0) orelse (M >= 13)) of
        true -> erlang:error("Month must be between 1 - 12");
        _ -> ok
    end,
        Sep1 = string:substr(Date_input, 2 + 1, 1),
        case ((Sep1 /= "-") andalso (Sep1 /= "/")) of
        true -> erlang:error("Date separator must be '-' or '/'");
        _ -> ok
    end,
        D = parse_decimal(string:substr(Date_input, 3 + 1, (5 - 3))),
        case ((D =< 0) orelse (D >= 32)) of
        true -> erlang:error("Date must be between 1 - 31");
        _ -> ok
    end,
        Sep2 = string:substr(Date_input, 5 + 1, 1),
        case ((Sep2 /= "-") andalso (Sep2 /= "/")) of
        true -> erlang:error("Date separator must be '-' or '/'");
        _ -> ok
    end,
        Y = parse_decimal(string:substr(Date_input, 6 + 1, (10 - 6))),
        case ((Y =< 45) orelse (Y >= 8500)) of
        true -> erlang:error("Year out of range. There has to be some sort of limit...right?");
        _ -> ok
    end,
        Year = Y,
        Month = M,
        case (Month =< 2) of
        true -> Year_2 = (Year - 1),
            Month_2 = (Month + 12),
            Month_3 = Month_2,
            Year_3 = Year_2;
        _ -> Month_3 = Month,
            Year_3 = Year
    end,
        C_2 = (Year_3 div 100),
        K = mochi_mod(Year_3, 100),
        T = mochi_to_int((mochi_safe_mul(2.6, float(Month_3)) - 5.39)),
        U = (C_2 div 4),
        V = (K div 4),
        X = (D + K),
        Z = (((T + U) + V) + X),
        W = (Z - (2 * C_2)),
        F = mochi_mod(W, 7),
        case (F < 0) of
        true -> F_2 = (F + 7),
            F_3 = F_2;
        _ -> F_3 = F
    end,
        maps:get(F_3, Days, nil)
    catch {return, Ret} -> Ret end.

zeller(Date_input_2) ->
    try
        Day = zeller_day(Date_input_2),
        (((("Your date " ++ Date_input_2) ++ ", is a ") ++ Day) ++ "!")
    catch {return, Ret} -> Ret end.

test_zeller() ->
    try
        Inputs = ["01-31-2010", "02-01-2010", "11-26-2024", "07-04-1776"],
        Expected = ["Sunday", "Monday", "Tuesday", "Thursday"],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Expected, I_3, Inputs) ->
    case (I_3 < erlang:length(Inputs)) of
        true ->
            Res = zeller_day((case erlang:is_map(Inputs) of true -> maps:get(I_3, Inputs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Inputs) + I_3 + 1, Inputs); _ -> mochi_nth(I_3 + 1, Inputs) end end)),
            case (Res /= (case erlang:is_map(Expected) of true -> maps:get(I_3, Expected, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Expected) + I_3 + 1, Expected); _ -> mochi_nth(I_3 + 1, Expected) end end)) of
        true -> erlang:error("zeller test failed");
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Expected, I_4, Inputs);
        _ -> {Expected, I_3, Inputs}
    end
end,
{Expected, I_4, Inputs} = Fun_2(Expected, I_3, Inputs),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_zeller(),
        io:format("~ts~n", [mochi_repr(zeller("01-31-2010"))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
