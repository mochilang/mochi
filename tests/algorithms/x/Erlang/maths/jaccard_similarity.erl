#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, contains/2, jaccard_similarity/3, main/0]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

contains(Xs, Value) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, Value, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) == Value) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Value, Xs);
        _ -> {I, Value, Xs}
    end
end,
{I_2, Value, Xs} = Fun(I, Value, Xs),
        false
    catch {return, Ret} -> Ret end.

jaccard_similarity(Set_a, Set_b, Alternative_union) ->
    try
        Intersection_len = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Alternative_union, I_3, Intersection_len, Set_a, Set_b) ->
    case (I_3 < erlang:length(Set_a)) of
        true ->
            case mochi_member((case erlang:is_map(Set_a) of true -> maps:get(I_3, Set_a, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Set_a) + I_3 + 1, Set_a); _ -> mochi_nth(I_3 + 1, Set_a) end end), Set_b) of
        true -> Intersection_len_2 = (Intersection_len + 1),
            Intersection_len_3 = Intersection_len_2;
        _ -> Intersection_len_3 = Intersection_len
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Alternative_union, I_4, Intersection_len_3, Set_a, Set_b);
        _ -> {Alternative_union, I_3, Intersection_len, Set_a, Set_b}
    end
end,
{Alternative_union, I_4, Intersection_len_3, Set_a, Set_b} = Fun_2(Alternative_union, I_3, Intersection_len, Set_a, Set_b),
        Union_len = 0,
        case Alternative_union of
        true -> Union_len_2 = (erlang:length(Set_a) + erlang:length(Set_b)),
            Fun_5 = Fun_2,
            I_9 = I_4,
            Union_len_4 = Union_len_2,
            Union_list_6 = nil;
        _ -> Union_list = [],
            I_5 = 0,
            Fun_3 = fun Fun_3_loop(Alternative_union, I_5, Intersection_len_3, Set_a, Set_b, Union_len, Union_list) ->
    case (I_5 < erlang:length(Set_a)) of
        true ->
            Val_a = (case erlang:is_map(Set_a) of true -> maps:get(I_5, Set_a, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Set_a) + I_5 + 1, Set_a); _ -> mochi_nth(I_5 + 1, Set_a) end end),
            case mochi_not(mochi_member(Val_a, Union_list)) of
        true -> Union_list_2 = lists:append((case Union_list of nil -> []; _ -> Union_list end), [Val_a]),
            Union_list_3 = Union_list_2;
        _ -> Union_list_3 = Union_list
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Alternative_union, I_6, Intersection_len_3, Set_a, Set_b, Union_len, Union_list_3);
        _ -> {Alternative_union, I_5, Intersection_len_3, Set_a, Set_b, Union_len, Union_list}
    end
end,
{Alternative_union, I_6, Intersection_len_3, Set_a, Set_b, Union_len, Union_list_3} = Fun_3(Alternative_union, I_5, Intersection_len_3, Set_a, Set_b, Union_len, Union_list),
            I_7 = 0,
            Fun_4 = fun Fun_4_loop(Alternative_union, I_7, Intersection_len_3, Set_a, Set_b, Union_len, Union_list_3) ->
    case (I_7 < erlang:length(Set_b)) of
        true ->
            Val_b = (case erlang:is_map(Set_b) of true -> maps:get(I_7, Set_b, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Set_b) + I_7 + 1, Set_b); _ -> mochi_nth(I_7 + 1, Set_b) end end),
            case mochi_not(mochi_member(Val_b, Union_list_3)) of
        true -> Union_list_4 = lists:append((case Union_list_3 of nil -> []; _ -> Union_list_3 end), [Val_b]),
            Union_list_5 = Union_list_4;
        _ -> Union_list_5 = Union_list_3
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(Alternative_union, I_8, Intersection_len_3, Set_a, Set_b, Union_len, Union_list_5);
        _ -> {Alternative_union, I_7, Intersection_len_3, Set_a, Set_b, Union_len, Union_list_3}
    end
end,
{Alternative_union, I_8, Intersection_len_3, Set_a, Set_b, Union_len, Union_list_5} = Fun_4(Alternative_union, I_7, Intersection_len_3, Set_a, Set_b, Union_len, Union_list_3),
            Union_len_3 = erlang:length(Union_list_5),
            Fun_5 = Fun_4,
            I_9 = I_8,
            Union_len_4 = Union_len_3,
            Union_list_6 = Union_list_5
    end,
        mochi_safe_div(mochi_safe_mul(1.0, Intersection_len_3), Union_len_4)
    catch {return, Ret} -> Ret end.

main() ->
    try
        Set_a_2 = ["a", "b", "c", "d", "e"],
        Set_b_2 = ["c", "d", "e", "f", "h", "i"],
        io:format("~ts~n", [mochi_repr(jaccard_similarity(Set_a_2, Set_b_2, false))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
