#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, assign_ranks/1, calculate_spearman_rank_correlation/2, test_spearman/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

assign_ranks(Data) ->
    try
        Ranks = [],
        N = erlang:length(Data),
        I = 0,
        Fun_2 = fun Fun_2_loop(Data, I, N, Ranks) ->
    case (I < N) of
        true ->
            Rank = 1,
            J = 0,
            Fun = fun Fun_loop(Data, I, J, N, Rank, Ranks) ->
    case (J < N) of
        true ->
            case (((case erlang:is_map(Data) of true -> maps:get(J, Data, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Data) + J + 1, Data); _ -> mochi_nth(J + 1, Data) end end) < (case erlang:is_map(Data) of true -> maps:get(I, Data, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Data) + I + 1, Data); _ -> mochi_nth(I + 1, Data) end end)) orelse (((case erlang:is_map(Data) of true -> maps:get(J, Data, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Data) + J + 1, Data); _ -> mochi_nth(J + 1, Data) end end) == (case erlang:is_map(Data) of true -> maps:get(I, Data, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Data) + I + 1, Data); _ -> mochi_nth(I + 1, Data) end end)) andalso (J < I))) of
        true -> Rank_2 = (Rank + 1),
            Rank_3 = Rank_2;
        _ -> Rank_3 = Rank
    end,
            J_2 = (J + 1),
            Fun_loop(Data, I, J_2, N, Rank_3, Ranks);
        _ -> {Data, I, J, N, Rank, Ranks}
    end
end,
{Data, I, J_2, N, Rank_3, Ranks} = Fun(Data, I, J, N, Rank, Ranks),
            Ranks_2 = lists:append((case Ranks of nil -> []; _ -> Ranks end), [Rank_3]),
            I_2 = (I + 1),
            Fun_2_loop(Data, I_2, N, Ranks_2);
        _ -> {Data, I, N, Ranks}
    end
end,
{Data, I_2, N, Ranks_2} = Fun_2(Data, I, N, Ranks),
        Ranks_2
    catch {return, Ret} -> Ret end.

calculate_spearman_rank_correlation(Var1, Var2) ->
    try
        case (erlang:length(Var1) /= erlang:length(Var2)) of
        true -> erlang:error("Lists must have equal length");
        _ -> ok
    end,
        N_2 = erlang:length(Var1),
        Rank1 = assign_ranks(Var1),
        Rank2 = assign_ranks(Var2),
        I_3 = 0,
        D_sq = 0.0,
        Fun_3 = fun Fun_3_loop(D_sq, I_3, N_2, Rank1, Rank2, Var1, Var2) ->
    case (I_3 < N_2) of
        true ->
            Diff = float(((case erlang:is_map(Rank1) of true -> maps:get(I_3, Rank1, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Rank1) + I_3 + 1, Rank1); _ -> mochi_nth(I_3 + 1, Rank1) end end) - (case erlang:is_map(Rank2) of true -> maps:get(I_3, Rank2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Rank2) + I_3 + 1, Rank2); _ -> mochi_nth(I_3 + 1, Rank2) end end))),
            D_sq_2 = (D_sq + mochi_safe_mul(Diff, Diff)),
            I_4 = (I_3 + 1),
            Fun_3_loop(D_sq_2, I_4, N_2, Rank1, Rank2, Var1, Var2);
        _ -> {D_sq, I_3, N_2, Rank1, Rank2, Var1, Var2}
    end
end,
{D_sq_2, I_4, N_2, Rank1, Rank2, Var1, Var2} = Fun_3(D_sq, I_3, N_2, Rank1, Rank2, Var1, Var2),
        N_f = float(N_2),
        (1.0 - mochi_safe_div(mochi_safe_mul(6.0, D_sq_2), mochi_safe_mul(N_f, (mochi_safe_mul(N_f, N_f) - 1.0))))
    catch {return, Ret} -> Ret end.

test_spearman() ->
    try
        X = [1.0, 2.0, 3.0, 4.0, 5.0],
        Y_inc = [2.0, 4.0, 6.0, 8.0, 10.0],
        case (calculate_spearman_rank_correlation(X, Y_inc) /= 1.0) of
        true -> erlang:error("case1");
        _ -> ok
    end,
        Y_dec = [5.0, 4.0, 3.0, 2.0, 1.0],
        case (calculate_spearman_rank_correlation(X, Y_dec) /= -1.0) of
        true -> erlang:error("case2");
        _ -> ok
    end,
        Y_mix = [5.0, 1.0, 2.0, 9.0, 5.0],
        case (calculate_spearman_rank_correlation(X, Y_mix) /= 0.6) of
        true -> erlang:error("case3");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_spearman(),
        io:format("~ts~n", [mochi_str(calculate_spearman_rank_correlation([1.0, 2.0, 3.0, 4.0, 5.0], [2.0, 4.0, 6.0, 8.0, 10.0]))]),
        io:format("~ts~n", [mochi_str(calculate_spearman_rank_correlation([1.0, 2.0, 3.0, 4.0, 5.0], [5.0, 4.0, 3.0, 2.0, 1.0]))]),
        io:format("~ts~n", [mochi_str(calculate_spearman_rank_correlation([1.0, 2.0, 3.0, 4.0, 5.0], [5.0, 1.0, 2.0, 9.0, 5.0]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
