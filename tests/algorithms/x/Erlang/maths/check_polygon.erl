#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, check_polygon/1]).

% Generated by Mochi transpiler v0.10.66 (f6dfa6fffe)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

check_polygon(Nums) ->
    try
        case (erlang:length(Nums) < 2) of
        true -> error("Monogons and Digons are not polygons in the Euclidean space");
        _ -> ok
    end,
        I = 0,
        Fun = fun Fun_loop(I, Nums) ->
    case (I < erlang:length(Nums)) of
        true ->
            case ((case erlang:is_map(Nums) of true -> maps:get(I, Nums, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Nums) + I + 1, Nums); _ -> mochi_nth(I + 1, Nums) end end) =< 0.0) of
        true -> error("All values must be greater than 0");
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Nums);
        _ -> {I, Nums}
    end
end,
{I_2, Nums} = Fun(I, Nums),
        Total = 0.0,
        Max_side = 0.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Max_side, Nums, Total) ->
    case (I_3 < erlang:length(Nums)) of
        true ->
            V = (case erlang:is_map(Nums) of true -> maps:get(I_3, Nums, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Nums) + I_3 + 1, Nums); _ -> mochi_nth(I_3 + 1, Nums) end end),
            Total_2 = (Total + V),
            Max_side_3 = (case (V > Max_side) of
        true -> Max_side_2 = V,
            Max_side_2;
        _ -> Max_side
    end),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Max_side_3, Nums, Total_2);
        _ -> {I_3, Max_side, Nums, Total}
    end
end,
{I_4, Max_side_3, Nums, Total_2} = Fun_2(I_3, Max_side, Nums, Total),
        (Max_side_3 < (Total_2 - Max_side_3))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(check_polygon([6.0, 10.0, 5.0]))]),
    io:format("~ts~n", [mochi_str(check_polygon([3.0, 7.0, 13.0, 2.0]))]),
    io:format("~ts~n", [mochi_str(check_polygon([1.0, 4.3, 5.2, 12.2]))]),
    erlang:put('nums', [3.0, 7.0, 13.0, 2.0]),
    erlang:put('_', check_polygon(erlang:get('nums'))),
    io:format("~ts~n", [mochi_str(erlang:get('nums'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
