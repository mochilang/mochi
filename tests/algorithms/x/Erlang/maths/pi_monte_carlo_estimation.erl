#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, next_seed/1, rand_unit/0, is_in_unit_circle/1, random_unit_square/0, estimate_pi/1, abs_float/1, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

next_seed(X) ->
    try
        mochi_mod(((X * 1103515245) + 12345), 2147483648)
    catch {return, Ret} -> Ret end.

rand_unit() ->
    try
        erlang:put('seed', next_seed(erlang:get('seed'))),
        mochi_safe_div(float(erlang:get('seed')), 2147483648.0)
    catch {return, Ret} -> Ret end.

is_in_unit_circle(P) ->
    try
        ((mochi_safe_mul(maps:get("x", P, nil), maps:get("x", P, nil)) + mochi_safe_mul(maps:get("y", P, nil), maps:get("y", P, nil))) =< 1.0)
    catch {return, Ret} -> Ret end.

random_unit_square() ->
    try
        #{"x" => rand_unit(), "y" => rand_unit()}
    catch {return, Ret} -> Ret end.

estimate_pi(Simulations) ->
    try
        case (Simulations < 1) of
        true -> erlang:error("At least one simulation is necessary to estimate PI.");
        _ -> ok
    end,
        Inside = 0,
        I = 0,
        Fun = fun Fun_loop(I, Inside, Simulations) ->
    case (I < Simulations) of
        true ->
            P_2 = random_unit_square(),
            case is_in_unit_circle(P_2) of
        true -> Inside_2 = (Inside + 1),
            Inside_3 = Inside_2;
        _ -> Inside_3 = Inside
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Inside_3, Simulations);
        _ -> {I, Inside, Simulations}
    end
end,
{I_2, Inside_3, Simulations} = Fun(I, Inside, Simulations),
        mochi_safe_div(mochi_safe_mul(4.0, float(Inside_3)), float(Simulations))
    catch {return, Ret} -> Ret end.

abs_float(X_2) ->
    try
        (case (X_2 < 0.0) of
    true -> -X_2;
    _ -> X_2
end)
    catch {return, Ret} -> Ret end.

main() ->
    try
        N = 10000,
        My_pi = estimate_pi(10000),
        Error = abs_float((My_pi - 3.141592653589793)),
        io:format("~ts~n", [mochi_repr(((("An estimate of PI is " ++ mochi_str(My_pi)) ++ " with an error of ") ++ mochi_str(Error)))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('seed', 1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
