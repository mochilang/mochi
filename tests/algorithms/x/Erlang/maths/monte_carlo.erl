#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rand_float/0, rand_range/2, abs_float/1, sqrtapprox/1, pi_estimator/1, area_under_curve_estimator/4, area_under_line_estimator_check/3, pi_estimator_using_area_under_curve/1, main/0]).

% Generated by Mochi transpiler v0.10.60 (c3816b866e) on 2025-08-07 15:40 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

rand_float() ->
    try
        erlang:put('rand_seed', mochi_mod(((1103515245 * erlang:get('rand_seed')) + 12345), 2147483648)),
        mochi_safe_div(float(erlang:get('rand_seed')), 2147483648.0)
    catch {return, Ret} -> Ret end.

rand_range(Min_val, Max_val) ->
    try
        (mochi_safe_mul(rand_float(), (Max_val - Min_val)) + Min_val)
    catch {return, Ret} -> Ret end.

abs_float(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

sqrtapprox(X_2) ->
    try
        case (X_2 == 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = mochi_safe_div(X_2, 2.0),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_2, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, Ret} -> Ret end.

pi_estimator(Iterations) ->
    try
        Inside = 0.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Inside, Iterations) ->
    case (I_3 < Iterations) of
        true ->
            X_3 = rand_range(-1.0, 1.0),
            Y = rand_range(-1.0, 1.0),
            case ((mochi_safe_mul(X_3, X_3) + mochi_safe_mul(Y, Y)) =< 1.0) of
        true -> Inside_2 = (Inside + 1.0),
            Inside_3 = Inside_2;
        _ -> Inside_3 = Inside
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Inside_3, Iterations);
        _ -> {I_3, Inside, Iterations}
    end
end,
{I_4, Inside_3, Iterations} = Fun_2(I_3, Inside, Iterations),
        Proportion = mochi_safe_div(Inside_3, float(Iterations)),
        Pi_estimate = mochi_safe_mul(Proportion, 4.0),
        io:format("~ts ~ts~n", [mochi_repr("The estimated value of pi is"), mochi_repr(Pi_estimate)]),
        io:format("~ts ~ts~n", [mochi_repr("The numpy value of pi is"), mochi_repr(3.141592653589793)]),
        io:format("~ts ~ts~n", [mochi_repr("The total error is"), mochi_repr(abs_float((3.141592653589793 - Pi_estimate)))]),
        nil
    catch {return, Ret} -> Ret end.

area_under_curve_estimator(Iterations_2, F, Min_value, Max_value) ->
    try
        Sum = 0.0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(F, I_5, Iterations_2, Max_value, Min_value, Sum) ->
    case (I_5 < Iterations_2) of
        true ->
            X_4 = rand_range(Min_value, Max_value),
            Sum_2 = (Sum + F(X_4)),
            I_6 = (I_5 + 1),
            Fun_3_loop(F, I_6, Iterations_2, Max_value, Min_value, Sum_2);
        _ -> {F, I_5, Iterations_2, Max_value, Min_value, Sum}
    end
end,
{F, I_6, Iterations_2, Max_value, Min_value, Sum_2} = Fun_3(F, I_5, Iterations_2, Max_value, Min_value, Sum),
        Expected = mochi_safe_div(Sum_2, float(Iterations_2)),
        mochi_safe_mul(Expected, (Max_value - Min_value))
    catch {return, Ret} -> Ret end.

area_under_line_estimator_check(Iterations_3, Min_value_2, Max_value_2) ->
    try
        Identity_function = fun Identity_function(X_5) ->
    try
        X_5
    catch {return, Ret} -> Ret end
end,
        Estimated_value = area_under_curve_estimator(Iterations_3, Identity_function, Min_value_2, Max_value_2),
        Expected_value = mochi_safe_div((mochi_safe_mul(Max_value_2, Max_value_2) - mochi_safe_mul(Min_value_2, Min_value_2)), 2.0),
        io:format("~ts~n", [mochi_repr("******************")]),
        io:format("~ts ~ts~n", [mochi_repr("Estimating area under y=x where x varies from"), mochi_repr(Min_value_2)]),
        io:format("~ts ~ts~n", [mochi_repr("Estimated value is"), mochi_repr(Estimated_value)]),
        io:format("~ts ~ts~n", [mochi_repr("Expected value is"), mochi_repr(Expected_value)]),
        io:format("~ts ~ts~n", [mochi_repr("Total error is"), mochi_repr(abs_float((Estimated_value - Expected_value)))]),
        io:format("~ts~n", [mochi_repr("******************")]),
        nil
    catch {return, Ret} -> Ret end.

pi_estimator_using_area_under_curve(Iterations_4) ->
    try
        Semi_circle = fun Semi_circle(X_6) ->
    try
        Y_2 = (4.0 - (X_6 * X_6)),
        S = sqrtapprox(Y_2),
        S
    catch {return, Ret} -> Ret end
end,
        Estimated_value_2 = area_under_curve_estimator(Iterations_4, Semi_circle, 0.0, 2.0),
        io:format("~ts~n", [mochi_repr("******************")]),
        io:format("~ts~n", [mochi_repr("Estimating pi using area_under_curve_estimator")]),
        io:format("~ts ~ts~n", [mochi_repr("Estimated value is"), mochi_repr(Estimated_value_2)]),
        io:format("~ts ~ts~n", [mochi_repr("Expected value is"), mochi_repr(3.141592653589793)]),
        io:format("~ts ~ts~n", [mochi_repr("Total error is"), mochi_repr(abs_float((Estimated_value_2 - 3.141592653589793)))]),
        io:format("~ts~n", [mochi_repr("******************")]),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        pi_estimator(1000),
        area_under_line_estimator_check(1000, 0.0, 1.0),
        pi_estimator_using_area_under_curve(1000),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('rand_seed', 123456789),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
