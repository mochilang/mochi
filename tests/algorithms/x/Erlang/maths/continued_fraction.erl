#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, floor_div/2, continued_fraction/2, list_to_string/1]).

% Generated by Mochi transpiler v0.10.67 (24b0b70a80)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

floor_div(A, B) ->
    try
        Q = mochi_idiv(A, B),
        R = mochi_mod(A, B),
        Q_3 = (case ((R /= 0) andalso (((A < 0) andalso (B > 0)) orelse ((A > 0) andalso (B < 0)))) of
        true -> Q_2 = (Q - 1),
            Q_2;
        _ -> Q
    end),
        Q_3
    catch {return, RetCatch} -> RetCatch end.

continued_fraction(Numerator, Denominator) ->
    try
        Num = Numerator,
        Den = Denominator,
        Result = [],
        Fun = fun Fun_loop(Den, Denominator, Num, Numerator, Result) ->
    case true of
        true ->
            try
                Integer_part = floor_div(Num, Den),
                Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Integer_part]),
                Num_2 = (Num - (Integer_part * Den)),
                case (Num_2 == 0) of
        true -> throw({break, {Den, Denominator, Num_2, Numerator, Result_2}});
        _ -> ok
    end,
                Tmp = Num_2,
                Num_3 = Den,
                Den_2 = Tmp,
                Fun_loop(Den_2, Denominator, Num_3, Numerator, Result_2)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_loop(C0, C1, C2, C3, C4);
                {break, Bs} -> Bs
            end;
        _ -> {Den, Denominator, Num, Numerator, Result}
    end
end,
{Den_2, Denominator, Num_3, Numerator, Result_2} = Fun(Den, Denominator, Num, Numerator, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

list_to_string(Lst) ->
    try
        S = "[",
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Lst, S) ->
    case (I < erlang:length(Lst)) of
        true ->
            S_2 = (S ++ mochi_str((case erlang:is_map(Lst) of true -> maps:get(I, Lst, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Lst) + I + 1, Lst); _ -> mochi_nth(I + 1, Lst) end end))),
            S_4 = (case (I < (erlang:length(Lst) - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_3;
        _ -> S_2
    end),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Lst, S_4);
        _ -> {I, Lst, S}
    end
end,
{I_2, Lst, S_4} = Fun_2(I, Lst, S),
        (S_4 ++ "]")
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(("Continued Fraction of 0.84375 is: " ++ list_to_string(continued_fraction(27, 32))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
