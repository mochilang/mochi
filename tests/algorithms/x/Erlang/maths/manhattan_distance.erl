#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, abs_val/1, validate_point/1, manhattan_distance/2, manhattan_distance_one_liner/2]).

% Generated by Mochi transpiler v0.10.59 (ec7cf2f058) on 2025-08-07 14:07 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

abs_val(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

validate_point(P) ->
    try
        case (erlang:length(P) == 0) of
        true -> erlang:error("Missing an input");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

manhattan_distance(A, B) ->
    try
        validate_point(A),
        validate_point(B),
        case (erlang:length(A) /= erlang:length(B)) of
        true -> erlang:error("Both points must be in the same n-dimensional space");
        _ -> ok
    end,
        Total = 0.0,
        I = 0,
        Fun = fun Fun_loop(A, B, I, Total) ->
    case (I < erlang:length(A)) of
        true ->
            Total_2 = (Total + abs_val(((case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(A) + I + 1, A); _ -> mochi_nth(I + 1, A) end end) - (case erlang:is_map(B) of true -> maps:get(I, B, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(B) + I + 1, B); _ -> mochi_nth(I + 1, B) end end)))),
            I_2 = (I + 1),
            Fun_loop(A, B, I_2, Total_2);
        _ -> {A, B, I, Total}
    end
end,
{A, B, I_2, Total_2} = Fun(A, B, I, Total),
        Total_2
    catch {return, Ret} -> Ret end.

manhattan_distance_one_liner(A_2, B_2) ->
    try
        manhattan_distance(A_2, B_2)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(manhattan_distance([1.0, 1.0], [2.0, 2.0]))]),
    io:format("~ts~n", [mochi_str(manhattan_distance([1.5, 1.5], [2.0, 2.0]))]),
    io:format("~ts~n", [mochi_str(manhattan_distance_one_liner([1.5, 1.5], [2.5, 2.0]))]),
    io:format("~ts~n", [mochi_str(manhattan_distance_one_liner([-3.0, -3.0, -3.0], [0.0, 0.0, 0.0]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
