#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, ratio/1, fractional_cover/2]).

% Generated by Mochi transpiler v0.10.65 (63755001db)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

ratio(Item) ->
    try
        mochi_safe_div(float(maps:get("value", Item, nil)), float(maps:get("weight", Item, nil)))
    catch {return, RetCatch} -> RetCatch end.

fractional_cover(Items, Capacity) ->
    try
        case (Capacity < 0) of
        true -> erlang:error({panic, "Capacity cannot be negative"});
        _ -> ok
    end,
        Total = 0.0,
        Remaining = Capacity,
        Sorted = (fun() ->
        Pairs = [{-ratio(It), It} ||
        It <- Items],
        SortedPairs = lists:sort(fun({K1,_},{K2,_}) -> K1 =< K2 end, Pairs),
        Values = [V || {_,V} <- SortedPairs],
        Values end)(),
        Idx = 0,
        Fun = fun Fun_loop(Capacity, Idx, Items, Remaining, Sorted, Total) ->
    case ((Idx < erlang:length(Sorted)) andalso (Remaining > 0)) of
        true ->
            Item_2 = (case erlang:is_map(Sorted) of true -> maps:get(Idx, Sorted, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Sorted) + Idx + 1, Sorted); _ -> mochi_nth(Idx + 1, Sorted) end end),
            Take = (case (maps:get("weight", Item_2, nil) < Remaining) of
    true -> maps:get("weight", Item_2, nil);
    _ -> Remaining
end),
            Total_2 = (Total + mochi_safe_mul(float(Take), ratio(Item_2))),
            Remaining_2 = (Remaining - Take),
            Idx_2 = (Idx + 1),
            Fun_loop(Capacity, Idx_2, Items, Remaining_2, Sorted, Total_2);
        _ -> {Capacity, Idx, Items, Remaining, Sorted, Total}
    end
end,
{Capacity, Idx_2, Items, Remaining_2, Sorted, Total_2} = Fun(Capacity, Idx, Items, Remaining, Sorted, Total),
        Total_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('items1', [#{"weight" => 10, "value" => 60}, #{"weight" => 20, "value" => 100}, #{"weight" => 30, "value" => 120}]),
    io:format("~ts~n", [mochi_str(fractional_cover(erlang:get('items1'), 50))]),
    erlang:put('items2', [#{"weight" => 20, "value" => 100}, #{"weight" => 30, "value" => 120}, #{"weight" => 10, "value" => 60}]),
    io:format("~ts~n", [mochi_str(fractional_cover(erlang:get('items2'), 25))]),
    erlang:put('items3', []),
    io:format("~ts~n", [mochi_str(fractional_cover(erlang:get('items3'), 50))]),
    erlang:put('items4', [#{"weight" => 10, "value" => 60}]),
    io:format("~ts~n", [mochi_str(fractional_cover(erlang:get('items4'), 5))]),
    io:format("~ts~n", [mochi_str(fractional_cover(erlang:get('items4'), 1))]),
    io:format("~ts~n", [mochi_str(fractional_cover(erlang:get('items4'), 0))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
