#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, get_gas_stations/2, can_complete_journey/1]).

% Generated by Mochi transpiler v0.10.66 (951718e85a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

get_gas_stations(Gas_quantities, Costs) ->
    try
        Stations = [],
        I = 0,
        Fun = fun Fun_loop(Costs, Gas_quantities, I, Stations) ->
    case (I < erlang:length(Gas_quantities)) of
        true ->
            Stations_2 = lists:append((case Stations of nil -> []; _ -> Stations end), [#{"gas_quantity" => (case erlang:is_map(Gas_quantities) of true -> maps:get(I, Gas_quantities, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Gas_quantities) + I + 1, Gas_quantities); _ -> mochi_nth(I + 1, Gas_quantities) end end), "cost" => (case erlang:is_map(Costs) of true -> maps:get(I, Costs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Costs) + I + 1, Costs); _ -> mochi_nth(I + 1, Costs) end end)}]),
            I_2 = (I + 1),
            Fun_loop(Costs, Gas_quantities, I_2, Stations_2);
        _ -> {Costs, Gas_quantities, I, Stations}
    end
end,
{Costs, Gas_quantities, I_2, Stations_2} = Fun(Costs, Gas_quantities, I, Stations),
        Stations_2
    catch {return, RetCatch} -> RetCatch end.

can_complete_journey(Gas_stations) ->
    try
        Total_gas = 0,
        Total_cost = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Gas_stations, I_3, Total_cost, Total_gas) ->
    case (I_3 < erlang:length(Gas_stations)) of
        true ->
            Total_gas_2 = (Total_gas + maps:get("gas_quantity", (case erlang:is_map(Gas_stations) of true -> maps:get(I_3, Gas_stations, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Gas_stations) + I_3 + 1, Gas_stations); _ -> mochi_nth(I_3 + 1, Gas_stations) end end), nil)),
            Total_cost_2 = (Total_cost + maps:get("cost", (case erlang:is_map(Gas_stations) of true -> maps:get(I_3, Gas_stations, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Gas_stations) + I_3 + 1, Gas_stations); _ -> mochi_nth(I_3 + 1, Gas_stations) end end), nil)),
            I_4 = (I_3 + 1),
            Fun_2_loop(Gas_stations, I_4, Total_cost_2, Total_gas_2);
        _ -> {Gas_stations, I_3, Total_cost, Total_gas}
    end
end,
{Gas_stations, I_4, Total_cost_2, Total_gas_2} = Fun_2(Gas_stations, I_3, Total_cost, Total_gas),
        case (Total_gas_2 < Total_cost_2) of
        true -> throw({return, -1});
        _ -> ok
    end,
        Start = 0,
        Net = 0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Gas_stations, I_5, Net, Start, Total_cost_2, Total_gas_2) ->
    case (I_5 < erlang:length(Gas_stations)) of
        true ->
            Station = (case erlang:is_map(Gas_stations) of true -> maps:get(I_5, Gas_stations, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Gas_stations) + I_5 + 1, Gas_stations); _ -> mochi_nth(I_5 + 1, Gas_stations) end end),
            Net_2 = ((Net + maps:get("gas_quantity", Station, nil)) - maps:get("cost", Station, nil)),
            case (Net_2 < 0) of
        true -> Start_2 = (I_5 + 1),
            Net_3 = 0,
            Net_4 = Net_3,
            Start_3 = Start_2;
        _ -> Net_4 = Net_2,
            Start_3 = Start
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Gas_stations, I_6, Net_4, Start_3, Total_cost_2, Total_gas_2);
        _ -> {Gas_stations, I_5, Net, Start, Total_cost_2, Total_gas_2}
    end
end,
{Gas_stations, I_6, Net_4, Start_3, Total_cost_2, Total_gas_2} = Fun_3(Gas_stations, I_5, Net, Start, Total_cost_2, Total_gas_2),
        Start_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('example1', get_gas_stations([1, 2, 3, 4, 5], [3, 4, 5, 1, 2])),
    io:format("~ts~n", [mochi_str(can_complete_journey(erlang:get('example1')))]),
    erlang:put('example2', get_gas_stations([2, 3, 4], [3, 4, 3])),
    io:format("~ts~n", [mochi_str(can_complete_journey(erlang:get('example2')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
