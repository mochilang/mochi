#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, sort_by_ratio_desc/1, sum_first/2, frac_knapsack/4]).

% Generated by Mochi transpiler v0.10.66 (951718e85a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

sort_by_ratio_desc(Arr) ->
    try
        I = 1,
        Fun_2 = fun Fun_2_loop(Arr, I) ->
    case (I < erlang:length(Arr)) of
        true ->
            try
                Key = (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Arr) + I + 1, Arr); _ -> mochi_nth(I + 1, Arr) end end),
                J = (I - 1),
                Fun = fun Fun_loop(Arr, I, J, Key) ->
    case (J >= 0) of
        true ->
            try
                Current = (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end),
                case (mochi_safe_div(maps:get("value", Current, nil), maps:get("weight", Current, nil)) < mochi_safe_div(maps:get("value", Key, nil), maps:get("weight", Key, nil))) of
        true -> Arr_2 = lists:sublist(Arr, (J + 1)) ++ [Current] ++ lists:nthtail((J + 1) + 1, Arr),
            J_2 = (J - 1),
            Arr_3 = Arr_2,
            J_3 = J_2;
        _ -> throw({break, Arr, I, J, Key}),
            Arr_3 = Arr,
            J_3 = J
    end,
                Fun_loop(Arr_3, I, J_3, Key)
            catch
                {continue, C0, C1, C2, C3} -> Fun_loop(C0, C1, C2, C3);
                {break, B0, B1, B2, B3} -> {B0, B1, B2, B3}
            end;
        _ -> {Arr, I, J, Key}
    end
end,
{Arr_3, I, J_3, Key} = Fun(Arr, I, J, Key),
                Arr_4 = lists:sublist(Arr_3, (J_3 + 1)) ++ [Key] ++ lists:nthtail((J_3 + 1) + 1, Arr_3),
                I_2 = (I + 1),
                Fun_2_loop(Arr_4, I_2)
            catch
                {continue, C0, C1} -> Fun_2_loop(C0, C1);
                {break, B0, B1} -> {B0, B1}
            end;
        _ -> {Arr, I}
    end
end,
{Arr_4, I_2} = Fun_2(Arr, I),
        Arr_4
    catch {return, RetCatch} -> RetCatch end.

sum_first(Arr_5, K) ->
    try
        S = 0.0,
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Arr_5, I_3, K, S) ->
    case ((I_3 < K) andalso (I_3 < erlang:length(Arr_5))) of
        true ->
            S_2 = (S + (case erlang:is_map(Arr_5) of true -> maps:get(I_3, Arr_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr_5) + I_3 + 1, Arr_5); _ -> mochi_nth(I_3 + 1, Arr_5) end end)),
            I_4 = (I_3 + 1),
            Fun_3_loop(Arr_5, I_4, K, S_2);
        _ -> {Arr_5, I_3, K, S}
    end
end,
{Arr_5, I_4, K, S_2} = Fun_3(Arr_5, I_3, K, S),
        S_2
    catch {return, RetCatch} -> RetCatch end.

frac_knapsack(Vl, Wt, W, N) ->
    try
        Items = [],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, Items, N, Vl, W, Wt) ->
    case ((I_5 < erlang:length(Vl)) andalso (I_5 < erlang:length(Wt))) of
        true ->
            Items_2 = lists:append((case Items of nil -> []; _ -> Items end), [#{"value" => (case erlang:is_map(Vl) of true -> maps:get(I_5, Vl, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Vl) + I_5 + 1, Vl); _ -> mochi_nth(I_5 + 1, Vl) end end), "weight" => (case erlang:is_map(Wt) of true -> maps:get(I_5, Wt, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Wt) + I_5 + 1, Wt); _ -> mochi_nth(I_5 + 1, Wt) end end)}]),
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6, Items_2, N, Vl, W, Wt);
        _ -> {I_5, Items, N, Vl, W, Wt}
    end
end,
{I_6, Items_2, N, Vl, W, Wt} = Fun_4(I_5, Items, N, Vl, W, Wt),
        Items_3 = sort_by_ratio_desc(Items_2),
        Values = [],
        Weights = [],
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(I_7, Items_3, N, Values, Vl, W, Weights, Wt) ->
    case (I_7 < erlang:length(Items_3)) of
        true ->
            Itm = (case erlang:is_map(Items_3) of true -> maps:get(I_7, Items_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Items_3) + I_7 + 1, Items_3); _ -> mochi_nth(I_7 + 1, Items_3) end end),
            Values_2 = lists:append((case Values of nil -> []; _ -> Values end), [maps:get("value", Itm, nil)]),
            Weights_2 = lists:append((case Weights of nil -> []; _ -> Weights end), [maps:get("weight", Itm, nil)]),
            I_8 = (I_7 + 1),
            Fun_5_loop(I_8, Items_3, N, Values_2, Vl, W, Weights_2, Wt);
        _ -> {I_7, Items_3, N, Values, Vl, W, Weights, Wt}
    end
end,
{I_8, Items_3, N, Values_2, Vl, W, Weights_2, Wt} = Fun_5(I_7, Items_3, N, Values, Vl, W, Weights, Wt),
        Acc = [],
        Total = 0.0,
        I_9 = 0,
        Fun_6 = fun Fun_6_loop(Acc, I_9, Items_3, N, Total, Values_2, Vl, W, Weights_2, Wt) ->
    case (I_9 < erlang:length(Weights_2)) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Weights_2) of true -> maps:get(I_9, Weights_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Weights_2) + I_9 + 1, Weights_2); _ -> mochi_nth(I_9 + 1, Weights_2) end end)),
            Acc_2 = lists:append((case Acc of nil -> []; _ -> Acc end), [Total_2]),
            I_10 = (I_9 + 1),
            Fun_6_loop(Acc_2, I_10, Items_3, N, Total_2, Values_2, Vl, W, Weights_2, Wt);
        _ -> {Acc, I_9, Items_3, N, Total, Values_2, Vl, W, Weights_2, Wt}
    end
end,
{Acc_2, I_10, Items_3, N, Total_2, Values_2, Vl, W, Weights_2, Wt} = Fun_6(Acc, I_9, Items_3, N, Total, Values_2, Vl, W, Weights_2, Wt),
        K_2 = 0,
        Fun_7 = fun Fun_7_loop(Acc_2, I_10, Items_3, K_2, N, Total_2, Values_2, Vl, W, Weights_2, Wt) ->
    case ((K_2 < erlang:length(Acc_2)) andalso (W >= (case erlang:is_map(Acc_2) of true -> maps:get(K_2, Acc_2, nil); _ -> case K_2 < 0 of true -> mochi_nth(erlang:length(Acc_2) + K_2 + 1, Acc_2); _ -> mochi_nth(K_2 + 1, Acc_2) end end))) of
        true ->
            K_3 = (K_2 + 1),
            Fun_7_loop(Acc_2, I_10, Items_3, K_3, N, Total_2, Values_2, Vl, W, Weights_2, Wt);
        _ -> {Acc_2, I_10, Items_3, K_2, N, Total_2, Values_2, Vl, W, Weights_2, Wt}
    end
end,
{Acc_2, I_10, Items_3, K_3, N, Total_2, Values_2, Vl, W, Weights_2, Wt} = Fun_7(Acc_2, I_10, Items_3, K_2, N, Total_2, Values_2, Vl, W, Weights_2, Wt),
        case (K_3 == 0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        case (K_3 >= erlang:length(Values_2)) of
        true -> throw({return, sum_first(Values_2, erlang:length(Values_2))});
        _ -> ok
    end,
        case (K_3 /= N) of
        true -> throw({return, (sum_first(Values_2, K_3) + mochi_safe_div(mochi_safe_mul((W - (case erlang:is_map(Acc_2) of true -> maps:get((K_3 - 1), Acc_2, nil); _ -> case (K_3 - 1) < 0 of true -> mochi_nth(erlang:length(Acc_2) + (K_3 - 1) + 1, Acc_2); _ -> mochi_nth((K_3 - 1) + 1, Acc_2) end end)), (case erlang:is_map(Values_2) of true -> maps:get(K_3, Values_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Values_2) + K_3 + 1, Values_2); _ -> mochi_nth(K_3 + 1, Values_2) end end)), (case erlang:is_map(Weights_2) of true -> maps:get(K_3, Weights_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Weights_2) + K_3 + 1, Weights_2); _ -> mochi_nth(K_3 + 1, Weights_2) end end)))});
        _ -> ok
    end,
        sum_first(Values_2, K_3)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('vl', [60.0, 100.0, 120.0]),
    erlang:put('wt', [10.0, 20.0, 30.0]),
    erlang:put('result', frac_knapsack(erlang:get('vl'), erlang:get('wt'), 50.0, 3)),
    io:format("~ts~n", [mochi_str(erlang:get('result'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
