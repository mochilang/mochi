#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, max_profit/1]).

% Generated by Mochi transpiler v0.10.66 (8fdd1fe3d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

max_profit(Prices) ->
    try
        case (erlang:length(Prices) == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Min_price = (case erlang:is_map(Prices) of true -> maps:get(0, Prices, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Prices) + 0 + 1, Prices); _ -> mochi_nth(0 + 1, Prices) end end),
        Max_profit = 0,
        I = 0,
        Fun = fun Fun_loop(I, Max_profit, Min_price, Prices) ->
    case (I < erlang:length(Prices)) of
        true ->
            Price = (case erlang:is_map(Prices) of true -> maps:get(I, Prices, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Prices) + I + 1, Prices); _ -> mochi_nth(I + 1, Prices) end end),
            case (Price < Min_price) of
        true -> Min_price_2 = Price,
            Min_price_3 = Min_price_2;
        _ -> Min_price_3 = Min_price
    end,
            Profit = (Price - Min_price_3),
            case (Profit > Max_profit) of
        true -> Max_profit_2 = Profit,
            Max_profit_3 = Max_profit_2;
        _ -> Max_profit_3 = Max_profit
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Max_profit_3, Min_price_3, Prices);
        _ -> {I, Max_profit, Min_price, Prices}
    end
end,
{I_2, Max_profit_3, Min_price_3, Prices} = Fun(I, Max_profit, Min_price, Prices),
        Max_profit_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(max_profit([7, 1, 5, 3, 6, 4]))]),
    io:format("~ts~n", [mochi_repr(max_profit([7, 6, 4, 3, 1]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
