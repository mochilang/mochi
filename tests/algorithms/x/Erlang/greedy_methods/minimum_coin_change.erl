#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, find_minimum_change/2]).

% Generated by Mochi transpiler v0.10.65 (365e579019) on 2025-08-13 16:57 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

find_minimum_change(Denominations, Value) ->
    try
        case (Value =< 0) of
        true -> throw({return, []});
        _ -> ok
    end,
        Total = Value,
        Answer = [],
        I = (erlang:length(Denominations) - 1),
        Fun_2 = fun Fun_2_loop(Answer, Denominations, I, Total, Value) ->
    case (I >= 0) of
        true ->
            Denom = (case erlang:is_map(Denominations) of true -> maps:get(I, Denominations, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Denominations) + I + 1, Denominations); _ -> mochi_nth(I + 1, Denominations) end end),
            Fun = fun Fun_loop(Answer, Denom, Denominations, I, Total, Value) ->
    case (Total >= Denom) of
        true ->
            Total_2 = (Total - Denom),
            Answer_2 = lists:append((case Answer of nil -> []; _ -> Answer end), [Denom]),
            Fun_loop(Answer_2, Denom, Denominations, I, Total_2, Value);
        _ -> {Answer, Denom, Denominations, I, Total, Value}
    end
end,
{Answer_2, Denom, Denominations, I, Total_2, Value} = Fun(Answer, Denom, Denominations, I, Total, Value),
            I_2 = (I - 1),
            Fun_2_loop(Answer_2, Denominations, I_2, Total_2, Value);
        _ -> {Answer, Denominations, I, Total, Value}
    end
end,
{Answer_2, Denominations, I_2, Total_2, Value} = Fun_2(Answer, Denominations, I, Total, Value),
        Answer_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(find_minimum_change([1, 2, 5, 10, 20, 50, 100, 500, 2000], 987))]),
    io:format("~ts~n", [mochi_str(find_minimum_change([1, 5, 100, 500, 1000], 456))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
