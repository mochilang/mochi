#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, insertion_sort/1, minimum_waiting_time/1]).

% Generated by Mochi transpiler v0.10.65 (365e579019) on 2025-08-13 16:57 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

insertion_sort(A) ->
    try
        I = 1,
        Fun_2 = fun Fun_2_loop(A, I) ->
    case (I < erlang:length(A)) of
        true ->
            Key = (case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(A) + I + 1, A); _ -> mochi_nth(I + 1, A) end end),
            J = (I - 1),
            Fun = fun Fun_loop(A, I, J, Key) ->
    case ((J >= 0) andalso ((case erlang:is_map(A) of true -> maps:get(J, A, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(A) + J + 1, A); _ -> mochi_nth(J + 1, A) end end) > Key)) of
        true ->
            A_2 = lists:sublist(A, (J + 1)) ++ [(case erlang:is_map(A) of true -> maps:get(J, A, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(A) + J + 1, A); _ -> mochi_nth(J + 1, A) end end)] ++ lists:nthtail((J + 1) + 1, A),
            J_2 = (J - 1),
            Fun_loop(A_2, I, J_2, Key);
        _ -> {A, I, J, Key}
    end
end,
{A_2, I, J_2, Key} = Fun(A, I, J, Key),
            A_3 = lists:sublist(A_2, (J_2 + 1)) ++ [Key] ++ lists:nthtail((J_2 + 1) + 1, A_2),
            I_2 = (I + 1),
            Fun_2_loop(A_3, I_2);
        _ -> {A, I}
    end
end,
{A_3, I_2} = Fun_2(A, I),
        A_3
    catch {return, RetCatch} -> RetCatch end.

minimum_waiting_time(Queries) ->
    try
        N = erlang:length(Queries),
        case ((N == 0) orelse (N == 1)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Sorted = insertion_sort(Queries),
        Total = 0,
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, N, Queries, Sorted, Total) ->
    case (I_3 < N) of
        true ->
            Total_2 = (Total + ((case erlang:is_map(Sorted) of true -> maps:get(I_3, Sorted, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Sorted) + I_3 + 1, Sorted); _ -> mochi_nth(I_3 + 1, Sorted) end end) * ((N - I_3) - 1))),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, N, Queries, Sorted, Total_2);
        _ -> {I_3, N, Queries, Sorted, Total}
    end
end,
{I_4, N, Queries, Sorted, Total_2} = Fun_3(I_3, N, Queries, Sorted, Total),
        Total_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(minimum_waiting_time([3, 2, 1, 2, 6]))]),
    io:format("~ts~n", [mochi_repr(minimum_waiting_time([3, 2, 1]))]),
    io:format("~ts~n", [mochi_repr(minimum_waiting_time([1, 2, 3, 4]))]),
    io:format("~ts~n", [mochi_repr(minimum_waiting_time([5, 5, 5, 5]))]),
    io:format("~ts~n", [mochi_repr(minimum_waiting_time([]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
