#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, sort_by_ratio/2, fractional_knapsack/3]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

sort_by_ratio(Index, Ratio) ->
    try
        I = 1,
        Fun_2 = fun Fun_2_loop(I, Index, Ratio) ->
    case (I < erlang:length(Index)) of
        true ->
            Key = (case erlang:is_map(Index) of true -> maps:get(I, Index, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Index) + I + 1, Index); _ -> mochi_nth(I + 1, Index) end end),
            Key_ratio = (case erlang:is_map(Ratio) of true -> maps:get(Key, Ratio, nil); _ -> case Key < 0 of true -> mochi_nth(erlang:length(Ratio) + Key + 1, Ratio); _ -> mochi_nth(Key + 1, Ratio) end end),
            J = (I - 1),
            Fun = fun Fun_loop(I, Index, J, Key, Key_ratio, Ratio) ->
    case ((J >= 0) andalso ((case erlang:is_map(Ratio) of true -> maps:get((case erlang:is_map(Index) of true -> maps:get(J, Index, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Index) + J + 1, Index); _ -> mochi_nth(J + 1, Index) end end), Ratio, nil); _ -> case (case erlang:is_map(Index) of true -> maps:get(J, Index, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Index) + J + 1, Index); _ -> mochi_nth(J + 1, Index) end end) < 0 of true -> mochi_nth(erlang:length(Ratio) + (case erlang:is_map(Index) of true -> maps:get(J, Index, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Index) + J + 1, Index); _ -> mochi_nth(J + 1, Index) end end) + 1, Ratio); _ -> mochi_nth((case erlang:is_map(Index) of true -> maps:get(J, Index, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Index) + J + 1, Index); _ -> mochi_nth(J + 1, Index) end end) + 1, Ratio) end end) < Key_ratio)) of
        true ->
            Index_2 = lists:sublist(Index, (J + 1)) ++ [(case erlang:is_map(Index) of true -> maps:get(J, Index, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Index) + J + 1, Index); _ -> mochi_nth(J + 1, Index) end end)] ++ lists:nthtail((J + 1) + 1, Index),
            J_2 = (J - 1),
            Fun_loop(I, Index_2, J_2, Key, Key_ratio, Ratio);
        _ -> {I, Index, J, Key, Key_ratio, Ratio}
    end
end,
{I, Index_2, J_2, Key, Key_ratio, Ratio} = Fun(I, Index, J, Key, Key_ratio, Ratio),
            Index_3 = lists:sublist(Index_2, (J_2 + 1)) ++ [Key] ++ lists:nthtail((J_2 + 1) + 1, Index_2),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Index_3, Ratio);
        _ -> {I, Index, Ratio}
    end
end,
{I_2, Index_3, Ratio} = Fun_2(I, Index, Ratio),
        Index_3
    catch {return, RetCatch} -> RetCatch end.

fractional_knapsack(Value, Weight, Capacity) ->
    try
        N = erlang:length(Value),
        Index_4 = [],
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Capacity, I_3, Index_4, N, Value, Weight) ->
    case (I_3 < N) of
        true ->
            Index_5 = lists:append((case Index_4 of nil -> []; _ -> Index_4 end), [I_3]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Capacity, I_4, Index_5, N, Value, Weight);
        _ -> {Capacity, I_3, Index_4, N, Value, Weight}
    end
end,
{Capacity, I_4, Index_5, N, Value, Weight} = Fun_3(Capacity, I_3, Index_4, N, Value, Weight),
        Ratio_2 = [],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Capacity, I_5, Index_5, N, Ratio_2, Value, Weight) ->
    case (I_5 < N) of
        true ->
            Ratio_3 = lists:append((case Ratio_2 of nil -> []; _ -> Ratio_2 end), [mochi_safe_div((case erlang:is_map(Value) of true -> maps:get(I_5, Value, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Value) + I_5 + 1, Value); _ -> mochi_nth(I_5 + 1, Value) end end), (case erlang:is_map(Weight) of true -> maps:get(I_5, Weight, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Weight) + I_5 + 1, Weight); _ -> mochi_nth(I_5 + 1, Weight) end end))]),
            I_6 = (I_5 + 1),
            Fun_4_loop(Capacity, I_6, Index_5, N, Ratio_3, Value, Weight);
        _ -> {Capacity, I_5, Index_5, N, Ratio_2, Value, Weight}
    end
end,
{Capacity, I_6, Index_5, N, Ratio_3, Value, Weight} = Fun_4(Capacity, I_5, Index_5, N, Ratio_2, Value, Weight),
        Index_6 = sort_by_ratio(Index_5, Ratio_3),
        Fractions = [],
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(Capacity, Fractions, I_7, Index_6, N, Ratio_3, Value, Weight) ->
    case (I_7 < N) of
        true ->
            Fractions_2 = lists:append((case Fractions of nil -> []; _ -> Fractions end), [0.0]),
            I_8 = (I_7 + 1),
            Fun_5_loop(Capacity, Fractions_2, I_8, Index_6, N, Ratio_3, Value, Weight);
        _ -> {Capacity, Fractions, I_7, Index_6, N, Ratio_3, Value, Weight}
    end
end,
{Capacity, Fractions_2, I_8, Index_6, N, Ratio_3, Value, Weight} = Fun_5(Capacity, Fractions, I_7, Index_6, N, Ratio_3, Value, Weight),
        Max_value = 0.0,
        Idx = 0,
        Fun_6 = fun Fun_6_loop(Capacity, Fractions_2, I_8, Idx, Index_6, Max_value, N, Ratio_3, Value, Weight) ->
    case (Idx < erlang:length(Index_6)) of
        true ->
            try
                Item = (case erlang:is_map(Index_6) of true -> maps:get(Idx, Index_6, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Index_6) + Idx + 1, Index_6); _ -> mochi_nth(Idx + 1, Index_6) end end),
                case ((case erlang:is_map(Weight) of true -> maps:get(Item, Weight, nil); _ -> case Item < 0 of true -> mochi_nth(erlang:length(Weight) + Item + 1, Weight); _ -> mochi_nth(Item + 1, Weight) end end) =< Capacity) of
        true -> Fractions_3 = lists:sublist(Fractions_2, Item) ++ [1.0] ++ lists:nthtail(Item + 1, Fractions_2),
            Max_value_2 = (Max_value + (case erlang:is_map(Value) of true -> maps:get(Item, Value, nil); _ -> case Item < 0 of true -> mochi_nth(erlang:length(Value) + Item + 1, Value); _ -> mochi_nth(Item + 1, Value) end end)),
            Capacity_2 = (Capacity - (case erlang:is_map(Weight) of true -> maps:get(Item, Weight, nil); _ -> case Item < 0 of true -> mochi_nth(erlang:length(Weight) + Item + 1, Weight); _ -> mochi_nth(Item + 1, Weight) end end)),
            Capacity_3 = Capacity_2,
            Fractions_5 = Fractions_3,
            Max_value_4 = Max_value_2;
        _ -> Fractions_4 = lists:sublist(Fractions_2, Item) ++ [mochi_safe_div(Capacity, (case erlang:is_map(Weight) of true -> maps:get(Item, Weight, nil); _ -> case Item < 0 of true -> mochi_nth(erlang:length(Weight) + Item + 1, Weight); _ -> mochi_nth(Item + 1, Weight) end end))] ++ lists:nthtail(Item + 1, Fractions_2),
            Max_value_3 = (Max_value + mochi_safe_div(mochi_safe_mul((case erlang:is_map(Value) of true -> maps:get(Item, Value, nil); _ -> case Item < 0 of true -> mochi_nth(erlang:length(Value) + Item + 1, Value); _ -> mochi_nth(Item + 1, Value) end end), Capacity), (case erlang:is_map(Weight) of true -> maps:get(Item, Weight, nil); _ -> case Item < 0 of true -> mochi_nth(erlang:length(Weight) + Item + 1, Weight); _ -> mochi_nth(Item + 1, Weight) end end))),
            throw({break, Capacity, Fractions_4, I_8, Idx, Index_6, Max_value_3, N, Ratio_3, Value, Weight}),
            Capacity_3 = Capacity,
            Fractions_5 = Fractions_4,
            Max_value_4 = Max_value_3
    end,
                Idx_2 = (Idx + 1),
                Fun_6_loop(Capacity_3, Fractions_5, I_8, Idx_2, Index_6, Max_value_4, N, Ratio_3, Value, Weight)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9} -> Fun_6_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9}
            end;
        _ -> {Capacity, Fractions_2, I_8, Idx, Index_6, Max_value, N, Ratio_3, Value, Weight}
    end
end,
{Capacity_3, Fractions_5, I_8, Idx_2, Index_6, Max_value_4, N, Ratio_3, Value, Weight} = Fun_6(Capacity, Fractions_2, I_8, Idx, Index_6, Max_value, N, Ratio_3, Value, Weight),
        #{"max_value" => Max_value_4, "fractions" => Fractions_5}
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('v', [1.0, 3.0, 5.0, 7.0, 9.0]),
    erlang:put('w', [0.9, 0.7, 0.5, 0.3, 0.1]),
    io:format("~ts~n", [mochi_repr(fractional_knapsack(erlang:get('v'), erlang:get('w'), 5.0))]),
    io:format("~ts~n", [mochi_repr(fractional_knapsack([1.0, 3.0, 5.0, 7.0], [0.9, 0.7, 0.5, 0.3], 30.0))]),
    io:format("~ts~n", [mochi_repr(fractional_knapsack([], [], 30.0))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
