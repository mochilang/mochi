#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of_min/1, remove_at/2, optimal_merge_pattern/1]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

index_of_min(Xs) ->
    try
        Min_idx = 0,
        I = 1,
        Fun = fun Fun_loop(I, Min_idx, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) < (case erlang:is_map(Xs) of true -> maps:get(Min_idx, Xs, nil); _ -> case Min_idx < 0 of true -> mochi_nth(erlang:length(Xs) + Min_idx + 1, Xs); _ -> mochi_nth(Min_idx + 1, Xs) end end)) of
        true -> Min_idx_2 = I,
            Min_idx_3 = Min_idx_2;
        _ -> Min_idx_3 = Min_idx
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Min_idx_3, Xs);
        _ -> {I, Min_idx, Xs}
    end
end,
{I_2, Min_idx_3, Xs} = Fun(I, Min_idx, Xs),
        Min_idx_3
    catch {return, RetCatch} -> RetCatch end.

remove_at(Xs_2, Idx) ->
    try
        Res = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Idx, Res, Xs_2) ->
    case (I_3 < erlang:length(Xs_2)) of
        true ->
            case (I_3 /= Idx) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_3 + 1, Xs_2); _ -> mochi_nth(I_3 + 1, Xs_2) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Idx, Res_3, Xs_2);
        _ -> {I_3, Idx, Res, Xs_2}
    end
end,
{I_4, Idx, Res_3, Xs_2} = Fun_2(I_3, Idx, Res, Xs_2),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

optimal_merge_pattern(Files) ->
    try
        Arr = Files,
        Optimal_merge_cost = 0,
        Fun_4 = fun Fun_4_loop(Arr, Files, Optimal_merge_cost) ->
    case (erlang:length(Arr) > 1) of
        true ->
            Temp = 0,
            K = 0,
            Fun_3 = fun Fun_3_loop(Arr, Files, K, Optimal_merge_cost, Temp) ->
    case (K < 2) of
        true ->
            Min_idx_4 = index_of_min(Arr),
            Temp_2 = (Temp + (case erlang:is_map(Arr) of true -> maps:get(Min_idx_4, Arr, nil); _ -> case Min_idx_4 < 0 of true -> mochi_nth(erlang:length(Arr) + Min_idx_4 + 1, Arr); _ -> mochi_nth(Min_idx_4 + 1, Arr) end end)),
            Arr_2 = remove_at(Arr, Min_idx_4),
            K_2 = (K + 1),
            Fun_3_loop(Arr_2, Files, K_2, Optimal_merge_cost, Temp_2);
        _ -> {Arr, Files, K, Optimal_merge_cost, Temp}
    end
end,
{Arr_2, Files, K_2, Optimal_merge_cost, Temp_2} = Fun_3(Arr, Files, K, Optimal_merge_cost, Temp),
            Arr_3 = lists:append((case Arr_2 of nil -> []; _ -> Arr_2 end), [Temp_2]),
            Optimal_merge_cost_2 = (Optimal_merge_cost + Temp_2),
            Fun_4_loop(Arr_3, Files, Optimal_merge_cost_2);
        _ -> {Arr, Files, Optimal_merge_cost}
    end
end,
{Arr_3, Files, Optimal_merge_cost_2} = Fun_4(Arr, Files, Optimal_merge_cost),
        Optimal_merge_cost_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(optimal_merge_pattern([2, 3, 4]))]),
    io:format("~ts~n", [mochi_repr(optimal_merge_pattern([5, 10, 20, 30, 30]))]),
    io:format("~ts~n", [mochi_repr(optimal_merge_pattern([8, 8, 8, 8, 8]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
