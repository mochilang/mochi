#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, round_int/1, zeros/2, warp/3, convolve/2, horn_schunck/4, print_matrix/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

round_int(X) ->
    try
        (case (X >= 0) of
    true -> mochi_to_int((X + 0.5));
    _ -> mochi_to_int((X - 0.5))
end)
    catch {return, Ret} -> Ret end.

zeros(Rows, Cols) ->
    try
        Res = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Cols, I, Res, Rows) ->
    case (I < Rows) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(Cols, I, J, Res, Row, Rows) ->
    case (J < Cols) of
        true ->
            Row_2 = lists:append(Row, [0]),
            J_2 = (J + 1),
            Fun_loop(Cols, I, J_2, Res, Row_2, Rows);
        _ -> {Cols, I, J, Res, Row, Rows}
    end
end,
{Cols, I, J_2, Res, Row_2, Rows} = Fun(Cols, I, J, Res, Row, Rows),
            Res_2 = lists:append(Res, [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Cols, I_2, Res_2, Rows);
        _ -> {Cols, I, Res, Rows}
    end
end,
{Cols, I_2, Res_2, Rows} = Fun_2(Cols, I, Res, Rows),
        Res_2
    catch {return, Ret} -> Ret end.

warp(Image, H_flow, V_flow) ->
    try
        H = length(Image),
        W = length((case erlang:is_map(Image) of true -> maps:get(0, Image, nil); _ -> lists:nth(0 + 1, Image) end)),
        Out = [],
        Y = 0,
        Fun_4 = fun Fun_4_loop(H, H_flow, Image, Out, V_flow, W, Y) ->
    case (Y < H) of
        true ->
            Row_3 = [],
            X_2 = 0,
            Fun_3 = fun Fun_3_loop(H, H_flow, Image, Out, Row_3, V_flow, W, X_2, Y) ->
    case (X_2 < W) of
        true ->
            Sx = (X_2 - round_int((case erlang:is_map((case erlang:is_map(H_flow) of true -> maps:get(Y, H_flow, nil); _ -> lists:nth(Y + 1, H_flow) end)) of true -> maps:get(X_2, (case erlang:is_map(H_flow) of true -> maps:get(Y, H_flow, nil); _ -> lists:nth(Y + 1, H_flow) end), nil); _ -> lists:nth(X_2 + 1, (case erlang:is_map(H_flow) of true -> maps:get(Y, H_flow, nil); _ -> lists:nth(Y + 1, H_flow) end)) end))),
            Sy = (Y - round_int((case erlang:is_map((case erlang:is_map(V_flow) of true -> maps:get(Y, V_flow, nil); _ -> lists:nth(Y + 1, V_flow) end)) of true -> maps:get(X_2, (case erlang:is_map(V_flow) of true -> maps:get(Y, V_flow, nil); _ -> lists:nth(Y + 1, V_flow) end), nil); _ -> lists:nth(X_2 + 1, (case erlang:is_map(V_flow) of true -> maps:get(Y, V_flow, nil); _ -> lists:nth(Y + 1, V_flow) end)) end))),
            case ((((Sx >= 0) andalso (Sx < W)) andalso (Sy >= 0)) andalso (Sy < H)) of
        true -> Row_4 = lists:append(Row_3, [(case erlang:is_map((case erlang:is_map(Image) of true -> maps:get(Sy, Image, nil); _ -> lists:nth(Sy + 1, Image) end)) of true -> maps:get(Sx, (case erlang:is_map(Image) of true -> maps:get(Sy, Image, nil); _ -> lists:nth(Sy + 1, Image) end), nil); _ -> lists:nth(Sx + 1, (case erlang:is_map(Image) of true -> maps:get(Sy, Image, nil); _ -> lists:nth(Sy + 1, Image) end)) end)]),
            Row_6 = Row_4;
        _ -> Row_5 = lists:append(Row_3, [0]),
            Row_6 = Row_5
    end,
            X_3 = (X_2 + 1),
            Fun_3_loop(H, H_flow, Image, Out, Row_6, V_flow, W, X_3, Y);
        _ -> {H, H_flow, Image, Out, Row_3, V_flow, W, X_2, Y}
    end
end,
{H, H_flow, Image, Out, Row_6, V_flow, W, X_3, Y} = Fun_3(H, H_flow, Image, Out, Row_3, V_flow, W, X_2, Y),
            Out_2 = lists:append(Out, [Row_6]),
            Y_2 = (Y + 1),
            Fun_4_loop(H, H_flow, Image, Out_2, V_flow, W, Y_2);
        _ -> {H, H_flow, Image, Out, V_flow, W, Y}
    end
end,
{H, H_flow, Image, Out_2, V_flow, W, Y_2} = Fun_4(H, H_flow, Image, Out, V_flow, W, Y),
        Out_2
    catch {return, Ret} -> Ret end.

convolve(Img, Ker) ->
    try
        H_2 = length(Img),
        W_2 = length((case erlang:is_map(Img) of true -> maps:get(0, Img, nil); _ -> lists:nth(0 + 1, Img) end)),
        Kh = length(Ker),
        Kw = length((case erlang:is_map(Ker) of true -> maps:get(0, Ker, nil); _ -> lists:nth(0 + 1, Ker) end)),
        Py = (Kh div 2),
        Px = (Kw div 2),
        Out_3 = [],
        Y_3 = 0,
        Fun_8 = fun Fun_8_loop(H_2, Img, Ker, Kh, Kw, Out_3, Px, Py, W_2, Y_3) ->
    case (Y_3 < H_2) of
        true ->
            Row_7 = [],
            X_4 = 0,
            Fun_7 = fun Fun_7_loop(H_2, Img, Ker, Kh, Kw, Out_3, Px, Py, Row_7, W_2, X_4, Y_3) ->
    case (X_4 < W_2) of
        true ->
            S = 0,
            Ky = 0,
            Fun_6 = fun Fun_6_loop(H_2, Img, Ker, Kh, Kw, Ky, Out_3, Px, Py, Row_7, S, W_2, X_4, Y_3) ->
    case (Ky < Kh) of
        true ->
            Kx = 0,
            Fun_5 = fun Fun_5_loop(H_2, Img, Ker, Kh, Kw, Kx, Ky, Out_3, Px, Py, Row_7, S, W_2, X_4, Y_3) ->
    case (Kx < Kw) of
        true ->
            Iy = ((Y_3 + Ky) - Py),
            Ix = ((X_4 + Kx) - Px),
            case ((((Iy >= 0) andalso (Iy < H_2)) andalso (Ix >= 0)) andalso (Ix < W_2)) of
        true -> S_2 = (S + mochi_safe_mul((case erlang:is_map((case erlang:is_map(Img) of true -> maps:get(Iy, Img, nil); _ -> lists:nth(Iy + 1, Img) end)) of true -> maps:get(Ix, (case erlang:is_map(Img) of true -> maps:get(Iy, Img, nil); _ -> lists:nth(Iy + 1, Img) end), nil); _ -> lists:nth(Ix + 1, (case erlang:is_map(Img) of true -> maps:get(Iy, Img, nil); _ -> lists:nth(Iy + 1, Img) end)) end), (case erlang:is_map((case erlang:is_map(Ker) of true -> maps:get(Ky, Ker, nil); _ -> lists:nth(Ky + 1, Ker) end)) of true -> maps:get(Kx, (case erlang:is_map(Ker) of true -> maps:get(Ky, Ker, nil); _ -> lists:nth(Ky + 1, Ker) end), nil); _ -> lists:nth(Kx + 1, (case erlang:is_map(Ker) of true -> maps:get(Ky, Ker, nil); _ -> lists:nth(Ky + 1, Ker) end)) end))),
            S_3 = S_2;
        _ -> S_3 = S
    end,
            Kx_2 = (Kx + 1),
            Fun_5_loop(H_2, Img, Ker, Kh, Kw, Kx_2, Ky, Out_3, Px, Py, Row_7, S_3, W_2, X_4, Y_3);
        _ -> {H_2, Img, Ker, Kh, Kw, Kx, Ky, Out_3, Px, Py, Row_7, S, W_2, X_4, Y_3}
    end
end,
{H_2, Img, Ker, Kh, Kw, Kx_2, Ky, Out_3, Px, Py, Row_7, S_3, W_2, X_4, Y_3} = Fun_5(H_2, Img, Ker, Kh, Kw, Kx, Ky, Out_3, Px, Py, Row_7, S, W_2, X_4, Y_3),
            Ky_2 = (Ky + 1),
            Fun_6_loop(H_2, Img, Ker, Kh, Kw, Ky_2, Out_3, Px, Py, Row_7, S_3, W_2, X_4, Y_3);
        _ -> {H_2, Img, Ker, Kh, Kw, Ky, Out_3, Px, Py, Row_7, S, W_2, X_4, Y_3}
    end
end,
{H_2, Img, Ker, Kh, Kw, Ky_2, Out_3, Px, Py, Row_7, S_3, W_2, X_4, Y_3} = Fun_6(H_2, Img, Ker, Kh, Kw, Ky, Out_3, Px, Py, Row_7, S, W_2, X_4, Y_3),
            Row_8 = lists:append(Row_7, [S_3]),
            X_5 = (X_4 + 1),
            Fun_7_loop(H_2, Img, Ker, Kh, Kw, Out_3, Px, Py, Row_8, W_2, X_5, Y_3);
        _ -> {H_2, Img, Ker, Kh, Kw, Out_3, Px, Py, Row_7, W_2, X_4, Y_3}
    end
end,
{H_2, Img, Ker, Kh, Kw, Out_3, Px, Py, Row_8, W_2, X_5, Y_3} = Fun_7(H_2, Img, Ker, Kh, Kw, Out_3, Px, Py, Row_7, W_2, X_4, Y_3),
            Out_4 = lists:append(Out_3, [Row_8]),
            Y_4 = (Y_3 + 1),
            Fun_8_loop(H_2, Img, Ker, Kh, Kw, Out_4, Px, Py, W_2, Y_4);
        _ -> {H_2, Img, Ker, Kh, Kw, Out_3, Px, Py, W_2, Y_3}
    end
end,
{H_2, Img, Ker, Kh, Kw, Out_4, Px, Py, W_2, Y_4} = Fun_8(H_2, Img, Ker, Kh, Kw, Out_3, Px, Py, W_2, Y_3),
        Out_4
    catch {return, Ret} -> Ret end.

horn_schunck(Image0, Image1, Num_iter, Alpha) ->
    try
        H_3 = length(Image0),
        W_3 = length((case erlang:is_map(Image0) of true -> maps:get(0, Image0, nil); _ -> lists:nth(0 + 1, Image0) end)),
        U = zeros(H_3, W_3),
        V = zeros(H_3, W_3),
        Kernel_x = [[-0.25, 0.25], [-0.25, 0.25]],
        Kernel_y = [[-0.25, -0.25], [0.25, 0.25]],
        Kernel_t = [[0.25, 0.25], [0.25, 0.25]],
        Laplacian = [[0.0833333333333, 0.166666666667, 0.0833333333333], [0.166666666667, 0, 0.166666666667], [0.0833333333333, 0.166666666667, 0.0833333333333]],
        It = 0,
        Fun_11 = fun Fun_11_loop(Alpha, H_3, Image0, Image1, It, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U, V, W_3) ->
    case (It < Num_iter) of
        true ->
            Warped = warp(Image0, U, V),
            Dx1 = convolve(Warped, Kernel_x),
            Dx2 = convolve(Image1, Kernel_x),
            Dy1 = convolve(Warped, Kernel_y),
            Dy2 = convolve(Image1, Kernel_y),
            Dt1 = convolve(Warped, Kernel_t),
            Dt2 = convolve(Image1, Kernel_t),
            Avg_u = convolve(U, Laplacian),
            Avg_v = convolve(V, Laplacian),
            Y_5 = 0,
            Fun_10 = fun Fun_10_loop(Alpha, Avg_u, Avg_v, Dt1, Dt2, Dx1, Dx2, Dy1, Dy2, H_3, Image0, Image1, It, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U, V, W_3, Warped, Y_5) ->
    case (Y_5 < H_3) of
        true ->
            X_6 = 0,
            Fun_9 = fun Fun_9_loop(Alpha, Avg_u, Avg_v, Dt1, Dt2, Dx1, Dx2, Dy1, Dy2, H_3, Image0, Image1, It, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U, V, W_3, Warped, X_6, Y_5) ->
    case (X_6 < W_3) of
        true ->
            Dx = ((case erlang:is_map((case erlang:is_map(Dx1) of true -> maps:get(Y_5, Dx1, nil); _ -> lists:nth(Y_5 + 1, Dx1) end)) of true -> maps:get(X_6, (case erlang:is_map(Dx1) of true -> maps:get(Y_5, Dx1, nil); _ -> lists:nth(Y_5 + 1, Dx1) end), nil); _ -> lists:nth(X_6 + 1, (case erlang:is_map(Dx1) of true -> maps:get(Y_5, Dx1, nil); _ -> lists:nth(Y_5 + 1, Dx1) end)) end) + (case erlang:is_map((case erlang:is_map(Dx2) of true -> maps:get(Y_5, Dx2, nil); _ -> lists:nth(Y_5 + 1, Dx2) end)) of true -> maps:get(X_6, (case erlang:is_map(Dx2) of true -> maps:get(Y_5, Dx2, nil); _ -> lists:nth(Y_5 + 1, Dx2) end), nil); _ -> lists:nth(X_6 + 1, (case erlang:is_map(Dx2) of true -> maps:get(Y_5, Dx2, nil); _ -> lists:nth(Y_5 + 1, Dx2) end)) end)),
            Dy = ((case erlang:is_map((case erlang:is_map(Dy1) of true -> maps:get(Y_5, Dy1, nil); _ -> lists:nth(Y_5 + 1, Dy1) end)) of true -> maps:get(X_6, (case erlang:is_map(Dy1) of true -> maps:get(Y_5, Dy1, nil); _ -> lists:nth(Y_5 + 1, Dy1) end), nil); _ -> lists:nth(X_6 + 1, (case erlang:is_map(Dy1) of true -> maps:get(Y_5, Dy1, nil); _ -> lists:nth(Y_5 + 1, Dy1) end)) end) + (case erlang:is_map((case erlang:is_map(Dy2) of true -> maps:get(Y_5, Dy2, nil); _ -> lists:nth(Y_5 + 1, Dy2) end)) of true -> maps:get(X_6, (case erlang:is_map(Dy2) of true -> maps:get(Y_5, Dy2, nil); _ -> lists:nth(Y_5 + 1, Dy2) end), nil); _ -> lists:nth(X_6 + 1, (case erlang:is_map(Dy2) of true -> maps:get(Y_5, Dy2, nil); _ -> lists:nth(Y_5 + 1, Dy2) end)) end)),
            Dt = ((case erlang:is_map((case erlang:is_map(Dt1) of true -> maps:get(Y_5, Dt1, nil); _ -> lists:nth(Y_5 + 1, Dt1) end)) of true -> maps:get(X_6, (case erlang:is_map(Dt1) of true -> maps:get(Y_5, Dt1, nil); _ -> lists:nth(Y_5 + 1, Dt1) end), nil); _ -> lists:nth(X_6 + 1, (case erlang:is_map(Dt1) of true -> maps:get(Y_5, Dt1, nil); _ -> lists:nth(Y_5 + 1, Dt1) end)) end) - (case erlang:is_map((case erlang:is_map(Dt2) of true -> maps:get(Y_5, Dt2, nil); _ -> lists:nth(Y_5 + 1, Dt2) end)) of true -> maps:get(X_6, (case erlang:is_map(Dt2) of true -> maps:get(Y_5, Dt2, nil); _ -> lists:nth(Y_5 + 1, Dt2) end), nil); _ -> lists:nth(X_6 + 1, (case erlang:is_map(Dt2) of true -> maps:get(Y_5, Dt2, nil); _ -> lists:nth(Y_5 + 1, Dt2) end)) end)),
            Au = (case erlang:is_map((case erlang:is_map(Avg_u) of true -> maps:get(Y_5, Avg_u, nil); _ -> lists:nth(Y_5 + 1, Avg_u) end)) of true -> maps:get(X_6, (case erlang:is_map(Avg_u) of true -> maps:get(Y_5, Avg_u, nil); _ -> lists:nth(Y_5 + 1, Avg_u) end), nil); _ -> lists:nth(X_6 + 1, (case erlang:is_map(Avg_u) of true -> maps:get(Y_5, Avg_u, nil); _ -> lists:nth(Y_5 + 1, Avg_u) end)) end),
            Av = (case erlang:is_map((case erlang:is_map(Avg_v) of true -> maps:get(Y_5, Avg_v, nil); _ -> lists:nth(Y_5 + 1, Avg_v) end)) of true -> maps:get(X_6, (case erlang:is_map(Avg_v) of true -> maps:get(Y_5, Avg_v, nil); _ -> lists:nth(Y_5 + 1, Avg_v) end), nil); _ -> lists:nth(X_6 + 1, (case erlang:is_map(Avg_v) of true -> maps:get(Y_5, Avg_v, nil); _ -> lists:nth(Y_5 + 1, Avg_v) end)) end),
            Numer = (((Dx * Au) + (Dy * Av)) + Dt),
            Denom = ((mochi_safe_mul(Alpha, Alpha) + (Dx * Dx)) + (Dy * Dy)),
            Upd = mochi_safe_div(Numer, Denom),
            Tmp = (case erlang:is_map(U) of true -> maps:get(Y_5, U, nil); _ -> lists:nth(Y_5 + 1, U) end),
            Tmp_2 = lists:sublist(Tmp, X_6) ++ [(Au - mochi_safe_mul(Dx, Upd))] ++ lists:nthtail(X_6 + 1, Tmp),
            U_2 = lists:sublist(U, Y_5) ++ [Tmp_2] ++ lists:nthtail(Y_5 + 1, U),
            Tmp_3 = (case erlang:is_map(V) of true -> maps:get(Y_5, V, nil); _ -> lists:nth(Y_5 + 1, V) end),
            Tmp_4 = lists:sublist(Tmp_3, X_6) ++ [(Av - mochi_safe_mul(Dy, Upd))] ++ lists:nthtail(X_6 + 1, Tmp_3),
            V_2 = lists:sublist(V, Y_5) ++ [Tmp_4] ++ lists:nthtail(Y_5 + 1, V),
            X_7 = (X_6 + 1),
            Fun_9_loop(Alpha, Avg_u, Avg_v, Dt1, Dt2, Dx1, Dx2, Dy1, Dy2, H_3, Image0, Image1, It, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U_2, V_2, W_3, Warped, X_7, Y_5);
        _ -> {Alpha, Avg_u, Avg_v, Dt1, Dt2, Dx1, Dx2, Dy1, Dy2, H_3, Image0, Image1, It, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U, V, W_3, Warped, X_6, Y_5}
    end
end,
{Alpha, Avg_u, Avg_v, Dt1, Dt2, Dx1, Dx2, Dy1, Dy2, H_3, Image0, Image1, It, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U_2, V_2, W_3, Warped, X_7, Y_5} = Fun_9(Alpha, Avg_u, Avg_v, Dt1, Dt2, Dx1, Dx2, Dy1, Dy2, H_3, Image0, Image1, It, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U, V, W_3, Warped, X_6, Y_5),
            Y_6 = (Y_5 + 1),
            Fun_10_loop(Alpha, Avg_u, Avg_v, Dt1, Dt2, Dx1, Dx2, Dy1, Dy2, H_3, Image0, Image1, It, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U_2, V_2, W_3, Warped, Y_6);
        _ -> {Alpha, Avg_u, Avg_v, Dt1, Dt2, Dx1, Dx2, Dy1, Dy2, H_3, Image0, Image1, It, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U, V, W_3, Warped, Y_5}
    end
end,
{Alpha, Avg_u, Avg_v, Dt1, Dt2, Dx1, Dx2, Dy1, Dy2, H_3, Image0, Image1, It, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U_2, V_2, W_3, Warped, Y_6} = Fun_10(Alpha, Avg_u, Avg_v, Dt1, Dt2, Dx1, Dx2, Dy1, Dy2, H_3, Image0, Image1, It, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U, V, W_3, Warped, Y_5),
            It_2 = (It + 1),
            Fun_11_loop(Alpha, H_3, Image0, Image1, It_2, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U_2, V_2, W_3);
        _ -> {Alpha, H_3, Image0, Image1, It, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U, V, W_3}
    end
end,
{Alpha, H_3, Image0, Image1, It_2, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U_2, V_2, W_3} = Fun_11(Alpha, H_3, Image0, Image1, It, Kernel_t, Kernel_x, Kernel_y, Laplacian, Num_iter, U, V, W_3),
        [U_2, V_2]
    catch {return, Ret} -> Ret end.

print_matrix(Mat) ->
    try
        Y_7 = 0,
        Fun_13 = fun Fun_13_loop(Mat, Y_7) ->
    case (Y_7 < length(Mat)) of
        true ->
            Row_9 = (case erlang:is_map(Mat) of true -> maps:get(Y_7, Mat, nil); _ -> lists:nth(Y_7 + 1, Mat) end),
            X_8 = 0,
            Line = "",
            Fun_12 = fun Fun_12_loop(Line, Mat, Row_9, X_8, Y_7) ->
    case (X_8 < length(Row_9)) of
        true ->
            Line_2 = (Line ++ mochi_str(round_int((case erlang:is_map(Row_9) of true -> maps:get(X_8, Row_9, nil); _ -> lists:nth(X_8 + 1, Row_9) end)))),
            case ((X_8 + 1) < length(Row_9)) of
        true -> Line_3 = (Line_2 ++ " "),
            Line_4 = Line_3;
        _ -> Line_4 = Line_2
    end,
            X_9 = (X_8 + 1),
            Fun_12_loop(Line_4, Mat, Row_9, X_9, Y_7);
        _ -> {Line, Mat, Row_9, X_8, Y_7}
    end
end,
{Line_4, Mat, Row_9, X_9, Y_7} = Fun_12(Line, Mat, Row_9, X_8, Y_7),
            io:format("~ts~n", [mochi_repr(Line_4)]),
            Y_8 = (Y_7 + 1),
            Fun_13_loop(Mat, Y_8);
        _ -> {Mat, Y_7}
    end
end,
{Mat, Y_8} = Fun_13(Mat, Y_7),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Image0_2 = [[0, 0, 2], [0, 0, 2]],
        Image1_2 = [[0, 2, 0], [0, 2, 0]],
        Flows = horn_schunck(Image0_2, Image1_2, 20, 0.1),
        U_3 = (case erlang:is_map(Flows) of true -> maps:get(0, Flows, nil); _ -> lists:nth(0 + 1, Flows) end),
        V_3 = (case erlang:is_map(Flows) of true -> maps:get(1, Flows, nil); _ -> lists:nth(1 + 1, Flows) end),
        print_matrix(U_3),
        io:format("~ts~n", [mochi_repr("---")]),
        print_matrix(V_3),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
