#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, mean_threshold/1, print_image/1]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

mean_threshold(Image) ->
    try
        Height = length(Image),
        Width = length((case erlang:is_map(Image) of true -> maps:get(0, Image, nil); _ -> lists:nth(0 + 1, Image) end)),
        Total = 0,
        I = 0,
        Fun_2 = fun Fun_2_loop(Height, I, Image, Total, Width) ->
    case (I < Height) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Height, I, Image, J, Total, Width) ->
    case (J < Width) of
        true ->
            Total_2 = (Total + (case erlang:is_map((case erlang:is_map(Image) of true -> maps:get(I, Image, nil); _ -> lists:nth(I + 1, Image) end)) of true -> maps:get(J, (case erlang:is_map(Image) of true -> maps:get(I, Image, nil); _ -> lists:nth(I + 1, Image) end), nil); _ -> lists:nth(J + 1, (case erlang:is_map(Image) of true -> maps:get(I, Image, nil); _ -> lists:nth(I + 1, Image) end)) end)),
            J_2 = (J + 1),
            Fun_loop(Height, I, Image, J_2, Total_2, Width);
        _ -> {Height, I, Image, J, Total, Width}
    end
end,
{Height, I, Image, J_2, Total_2, Width} = Fun(Height, I, Image, J, Total, Width),
            I_2 = (I + 1),
            Fun_2_loop(Height, I_2, Image, Total_2, Width);
        _ -> {Height, I, Image, Total, Width}
    end
end,
{Height, I_2, Image, Total_2, Width} = Fun_2(Height, I, Image, Total, Width),
        Mean = (Total_2 div (Height * Width)),
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Height, I_3, Image, Mean, Total_2, Width) ->
    case (I_3 < Height) of
        true ->
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(Height, I_3, Image, J_3, Mean, Total_2, Width) ->
    case (J_3 < Width) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(Image) of true -> maps:get(I_3, Image, nil); _ -> lists:nth(I_3 + 1, Image) end)) of true -> maps:get(J_3, (case erlang:is_map(Image) of true -> maps:get(I_3, Image, nil); _ -> lists:nth(I_3 + 1, Image) end), nil); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Image) of true -> maps:get(I_3, Image, nil); _ -> lists:nth(I_3 + 1, Image) end)) end) > Mean) of
        true -> Tmp = (case erlang:is_map(Image) of true -> maps:get(I_3, Image, nil); _ -> lists:nth(I_3 + 1, Image) end),
            Tmp_2 = lists:sublist(Tmp, J_3) ++ [255] ++ lists:nthtail(J_3 + 1, Tmp),
            Image_2 = lists:sublist(Image, I_3) ++ [Tmp_2] ++ lists:nthtail(I_3 + 1, Image),
            Image_4 = Image_2,
            Tmp_5 = Tmp_2;
        _ -> Tmp_3 = (case erlang:is_map(Image) of true -> maps:get(I_3, Image, nil); _ -> lists:nth(I_3 + 1, Image) end),
            Tmp_4 = lists:sublist(Tmp_3, J_3) ++ [0] ++ lists:nthtail(J_3 + 1, Tmp_3),
            Image_3 = lists:sublist(Image, I_3) ++ [Tmp_4] ++ lists:nthtail(I_3 + 1, Image),
            Image_4 = Image_3,
            Tmp_5 = Tmp_4
    end,
            J_4 = (J_3 + 1),
            Fun_3_loop(Height, I_3, Image_4, J_4, Mean, Total_2, Width);
        _ -> {Height, I_3, Image, J_3, Mean, Total_2, Width}
    end
end,
{Height, I_3, Image_4, J_4, Mean, Total_2, Width} = Fun_3(Height, I_3, Image, J_3, Mean, Total_2, Width),
            I_4 = (I_3 + 1),
            Fun_4_loop(Height, I_4, Image_4, Mean, Total_2, Width);
        _ -> {Height, I_3, Image, Mean, Total_2, Width}
    end
end,
{Height, I_4, Image_4, Mean, Total_2, Width} = Fun_4(Height, I_3, Image, Mean, Total_2, Width),
        Image_4
    catch {return, Ret} -> Ret end.

print_image(Image_5) ->
    try
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(I_5, Image_5) ->
    case (I_5 < length(Image_5)) of
        true ->
            io:format("~ts~n", [mochi_repr((case erlang:is_map(Image_5) of true -> maps:get(I_5, Image_5, nil); _ -> lists:nth(I_5 + 1, Image_5) end))]),
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, Image_5);
        _ -> {I_5, Image_5}
    end
end,
{I_6, Image_5} = Fun_5(I_5, Image_5),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('img', [[10, 200, 50], [100, 150, 30], [90, 80, 220]]),
    erlang:put('result', mean_threshold(erlang:get('img'))),
    print_image(erlang:get('result')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
