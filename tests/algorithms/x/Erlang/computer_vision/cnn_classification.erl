#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, conv2d/2, relu_matrix/1, max_pool2x2/1, flatten/1, dense/3, exp_approx/1, sigmoid/1]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

conv2d(Image, Kernel) ->
    try
        Rows = erlang:length(Image),
        Cols = erlang:length((case erlang:is_map(Image) of true -> maps:get(0, Image, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Image) + 0 + 1, Image); _ -> mochi_nth(0 + 1, Image) end end)),
        K = erlang:length(Kernel),
        Output = [],
        I = 0,
        Fun_4 = fun Fun_4_loop(Cols, I, Image, K, Kernel, Output, Rows) ->
    case (I =< (Rows - K)) of
        true ->
            Row = [],
            J = 0,
            Fun_3 = fun Fun_3_loop(Cols, I, Image, J, K, Kernel, Output, Row, Rows) ->
    case (J =< (Cols - K)) of
        true ->
            Sum = 0.0,
            Ki = 0,
            Fun_2 = fun Fun_2_loop(Cols, I, Image, J, K, Kernel, Ki, Output, Row, Rows, Sum) ->
    case (Ki < K) of
        true ->
            Kj = 0,
            Fun = fun Fun_loop(Cols, I, Image, J, K, Kernel, Ki, Kj, Output, Row, Rows, Sum) ->
    case (Kj < K) of
        true ->
            Sum_2 = (Sum + mochi_safe_mul((case erlang:is_map((case erlang:is_map(Image) of true -> maps:get((I + Ki), Image, nil); _ -> case (I + Ki) < 0 of true -> mochi_nth(erlang:length(Image) + (I + Ki) + 1, Image); _ -> mochi_nth((I + Ki) + 1, Image) end end)) of true -> maps:get((J + Kj), (case erlang:is_map(Image) of true -> maps:get((I + Ki), Image, nil); _ -> case (I + Ki) < 0 of true -> mochi_nth(erlang:length(Image) + (I + Ki) + 1, Image); _ -> mochi_nth((I + Ki) + 1, Image) end end), nil); _ -> case (J + Kj) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Image) of true -> maps:get((I + Ki), Image, nil); _ -> case (I + Ki) < 0 of true -> mochi_nth(erlang:length(Image) + (I + Ki) + 1, Image); _ -> mochi_nth((I + Ki) + 1, Image) end end)) + (J + Kj) + 1, (case erlang:is_map(Image) of true -> maps:get((I + Ki), Image, nil); _ -> case (I + Ki) < 0 of true -> mochi_nth(erlang:length(Image) + (I + Ki) + 1, Image); _ -> mochi_nth((I + Ki) + 1, Image) end end)); _ -> mochi_nth((J + Kj) + 1, (case erlang:is_map(Image) of true -> maps:get((I + Ki), Image, nil); _ -> case (I + Ki) < 0 of true -> mochi_nth(erlang:length(Image) + (I + Ki) + 1, Image); _ -> mochi_nth((I + Ki) + 1, Image) end end)) end end), (case erlang:is_map((case erlang:is_map(Kernel) of true -> maps:get(Ki, Kernel, nil); _ -> case Ki < 0 of true -> mochi_nth(erlang:length(Kernel) + Ki + 1, Kernel); _ -> mochi_nth(Ki + 1, Kernel) end end)) of true -> maps:get(Kj, (case erlang:is_map(Kernel) of true -> maps:get(Ki, Kernel, nil); _ -> case Ki < 0 of true -> mochi_nth(erlang:length(Kernel) + Ki + 1, Kernel); _ -> mochi_nth(Ki + 1, Kernel) end end), nil); _ -> case Kj < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Kernel) of true -> maps:get(Ki, Kernel, nil); _ -> case Ki < 0 of true -> mochi_nth(erlang:length(Kernel) + Ki + 1, Kernel); _ -> mochi_nth(Ki + 1, Kernel) end end)) + Kj + 1, (case erlang:is_map(Kernel) of true -> maps:get(Ki, Kernel, nil); _ -> case Ki < 0 of true -> mochi_nth(erlang:length(Kernel) + Ki + 1, Kernel); _ -> mochi_nth(Ki + 1, Kernel) end end)); _ -> mochi_nth(Kj + 1, (case erlang:is_map(Kernel) of true -> maps:get(Ki, Kernel, nil); _ -> case Ki < 0 of true -> mochi_nth(erlang:length(Kernel) + Ki + 1, Kernel); _ -> mochi_nth(Ki + 1, Kernel) end end)) end end))),
            Kj_2 = (Kj + 1),
            Fun_loop(Cols, I, Image, J, K, Kernel, Ki, Kj_2, Output, Row, Rows, Sum_2);
        _ -> {Cols, I, Image, J, K, Kernel, Ki, Kj, Output, Row, Rows, Sum}
    end
end,
{Cols, I, Image, J, K, Kernel, Ki, Kj_2, Output, Row, Rows, Sum_2} = Fun(Cols, I, Image, J, K, Kernel, Ki, Kj, Output, Row, Rows, Sum),
            Ki_2 = (Ki + 1),
            Fun_2_loop(Cols, I, Image, J, K, Kernel, Ki_2, Output, Row, Rows, Sum_2);
        _ -> {Cols, I, Image, J, K, Kernel, Ki, Output, Row, Rows, Sum}
    end
end,
{Cols, I, Image, J, K, Kernel, Ki_2, Output, Row, Rows, Sum_2} = Fun_2(Cols, I, Image, J, K, Kernel, Ki, Output, Row, Rows, Sum),
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Sum_2]),
            J_2 = (J + 1),
            Fun_3_loop(Cols, I, Image, J_2, K, Kernel, Output, Row_2, Rows);
        _ -> {Cols, I, Image, J, K, Kernel, Output, Row, Rows}
    end
end,
{Cols, I, Image, J_2, K, Kernel, Output, Row_2, Rows} = Fun_3(Cols, I, Image, J, K, Kernel, Output, Row, Rows),
            Output_2 = lists:append((case Output of nil -> []; _ -> Output end), [Row_2]),
            I_2 = (I + 1),
            Fun_4_loop(Cols, I_2, Image, K, Kernel, Output_2, Rows);
        _ -> {Cols, I, Image, K, Kernel, Output, Rows}
    end
end,
{Cols, I_2, Image, K, Kernel, Output_2, Rows} = Fun_4(Cols, I, Image, K, Kernel, Output, Rows),
        Output_2
    catch {return, RetCatch} -> RetCatch end.

relu_matrix(M) ->
    try
        Out = [],
        Fun_5 = fun Fun_5_loop(List, M, Out) ->
    case List of
        [] -> {M, Out};
        [Row_3|Row_3_rest] ->
            New_row = [],
            Fun_6 = fun Fun_6_loop(List, M, New_row, Out, Row_3) ->
    case List of
        [] -> {M, New_row, Out, Row_3};
        [V|V_rest] ->
            case (V > 0.0) of
        true -> New_row_2 = lists:append((case New_row of nil -> []; _ -> New_row end), [V]),
            New_row_4 = New_row_2;
        _ -> New_row_3 = lists:append((case New_row of nil -> []; _ -> New_row end), [0.0]),
            New_row_4 = New_row_3
    end,
            Fun_6_loop(V_rest, M, New_row_4, Out, Row_3);
        _ -> {M, New_row, Out, Row_3}
    end
end,
{M, New_row_4, Out, Row_3} = Fun_6(Row_3, M, New_row, Out, Row_3),
            Out_2 = lists:append((case Out of nil -> []; _ -> Out end), [New_row_4]),
            Fun_5_loop(Row_3_rest, M, Out_2);
        _ -> {M, Out}
    end
end,
{M, Out_2} = Fun_5(M, M, Out),
        Out_2
    catch {return, RetCatch} -> RetCatch end.

max_pool2x2(M_2) ->
    try
        Rows_2 = erlang:length(M_2),
        Cols_2 = erlang:length((case erlang:is_map(M_2) of true -> maps:get(0, M_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M_2) + 0 + 1, M_2); _ -> mochi_nth(0 + 1, M_2) end end)),
        Out_3 = [],
        I_3 = 0,
        Fun_8 = fun Fun_8_loop(Cols_2, I_3, M_2, Out_3, Rows_2) ->
    case (I_3 < Rows_2) of
        true ->
            New_row_5 = [],
            J_3 = 0,
            Fun_7 = fun Fun_7_loop(Cols_2, I_3, J_3, M_2, New_row_5, Out_3, Rows_2) ->
    case (J_3 < Cols_2) of
        true ->
            Max_val = (case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end)) + J_3 + 1, (case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end)) end end),
            case ((case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end)) of true -> maps:get((J_3 + 1), (case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end), nil); _ -> case (J_3 + 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end)) + (J_3 + 1) + 1, (case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end)); _ -> mochi_nth((J_3 + 1) + 1, (case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end)) end end) > Max_val) of
        true -> Max_val_2 = (case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end)) of true -> maps:get((J_3 + 1), (case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end), nil); _ -> case (J_3 + 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end)) + (J_3 + 1) + 1, (case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end)); _ -> mochi_nth((J_3 + 1) + 1, (case erlang:is_map(M_2) of true -> maps:get(I_3, M_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(M_2) + I_3 + 1, M_2); _ -> mochi_nth(I_3 + 1, M_2) end end)) end end),
            Max_val_3 = Max_val_2;
        _ -> Max_val_3 = Max_val
    end,
            case ((case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)) + J_3 + 1, (case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)) end end) > Max_val_3) of
        true -> Max_val_4 = (case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)) + J_3 + 1, (case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)) end end),
            Max_val_5 = Max_val_4;
        _ -> Max_val_5 = Max_val_3
    end,
            case ((case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)) of true -> maps:get((J_3 + 1), (case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end), nil); _ -> case (J_3 + 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)) + (J_3 + 1) + 1, (case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)); _ -> mochi_nth((J_3 + 1) + 1, (case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)) end end) > Max_val_5) of
        true -> Max_val_6 = (case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)) of true -> maps:get((J_3 + 1), (case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end), nil); _ -> case (J_3 + 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)) + (J_3 + 1) + 1, (case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)); _ -> mochi_nth((J_3 + 1) + 1, (case erlang:is_map(M_2) of true -> maps:get((I_3 + 1), M_2, nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(M_2) + (I_3 + 1) + 1, M_2); _ -> mochi_nth((I_3 + 1) + 1, M_2) end end)) end end),
            Max_val_7 = Max_val_6;
        _ -> Max_val_7 = Max_val_5
    end,
            New_row_6 = lists:append((case New_row_5 of nil -> []; _ -> New_row_5 end), [Max_val_7]),
            J_4 = (J_3 + 2),
            Fun_7_loop(Cols_2, I_3, J_4, M_2, New_row_6, Out_3, Rows_2);
        _ -> {Cols_2, I_3, J_3, M_2, New_row_5, Out_3, Rows_2}
    end
end,
{Cols_2, I_3, J_4, M_2, New_row_6, Out_3, Rows_2} = Fun_7(Cols_2, I_3, J_3, M_2, New_row_5, Out_3, Rows_2),
            Out_4 = lists:append((case Out_3 of nil -> []; _ -> Out_3 end), [New_row_6]),
            I_4 = (I_3 + 2),
            Fun_8_loop(Cols_2, I_4, M_2, Out_4, Rows_2);
        _ -> {Cols_2, I_3, M_2, Out_3, Rows_2}
    end
end,
{Cols_2, I_4, M_2, Out_4, Rows_2} = Fun_8(Cols_2, I_3, M_2, Out_3, Rows_2),
        Out_4
    catch {return, RetCatch} -> RetCatch end.

flatten(M_3) ->
    try
        Res = [],
        Fun_9 = fun Fun_9_loop(List, M_3, Res) ->
    case List of
        [] -> {M_3, Res};
        [Row_4|Row_4_rest] ->
            Fun_10 = fun Fun_10_loop(List, M_3, Res, Row_4) ->
    case List of
        [] -> {M_3, Res, Row_4};
        [V_2|V_2_rest] ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [V_2]),
            Fun_10_loop(V_2_rest, M_3, Res_2, Row_4);
        _ -> {M_3, Res, Row_4}
    end
end,
{M_3, Res_2, Row_4} = Fun_10(Row_4, M_3, Res, Row_4),
            Fun_9_loop(Row_4_rest, M_3, Res_2);
        _ -> {M_3, Res}
    end
end,
{M_3, Res_2} = Fun_9(M_3, M_3, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

dense(Inputs, Weights, Bias) ->
    try
        S = Bias,
        I_5 = 0,
        Fun_11 = fun Fun_11_loop(Bias, I_5, Inputs, S, Weights) ->
    case (I_5 < erlang:length(Inputs)) of
        true ->
            S_2 = (S + mochi_safe_mul((case erlang:is_map(Inputs) of true -> maps:get(I_5, Inputs, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Inputs) + I_5 + 1, Inputs); _ -> mochi_nth(I_5 + 1, Inputs) end end), (case erlang:is_map(Weights) of true -> maps:get(I_5, Weights, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Weights) + I_5 + 1, Weights); _ -> mochi_nth(I_5 + 1, Weights) end end))),
            I_6 = (I_5 + 1),
            Fun_11_loop(Bias, I_6, Inputs, S_2, Weights);
        _ -> {Bias, I_5, Inputs, S, Weights}
    end
end,
{Bias, I_6, Inputs, S_2, Weights} = Fun_11(Bias, I_5, Inputs, S, Weights),
        S_2
    catch {return, RetCatch} -> RetCatch end.

exp_approx(X) ->
    try
        Sum_3 = 1.0,
        Term = 1.0,
        I_7 = 1,
        Fun_12 = fun Fun_12_loop(I_7, Sum_3, Term, X) ->
    case (I_7 =< 10) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X), I_7),
            Sum_4 = (Sum_3 + Term_2),
            I_8 = (I_7 + 1),
            Fun_12_loop(I_8, Sum_4, Term_2, X);
        _ -> {I_7, Sum_3, Term, X}
    end
end,
{I_8, Sum_4, Term_2, X} = Fun_12(I_7, Sum_3, Term, X),
        Sum_4
    catch {return, RetCatch} -> RetCatch end.

sigmoid(X_2) ->
    try
        mochi_safe_div(1.0, (1.0 + exp_approx(-X_2)))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('image', [[0.0, 1.0, 1.0, 0.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 1.0, 0.0, 0.0], [0.0, 0.0, 1.0, 1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]),
    erlang:put('kernel', [[1.0, 0.0, -1.0], [1.0, 0.0, -1.0], [1.0, 0.0, -1.0]]),
    erlang:put('conv', conv2d(erlang:get('image'), erlang:get('kernel'))),
    erlang:put('activated', relu_matrix(erlang:get('conv'))),
    erlang:put('pooled', max_pool2x2(erlang:get('activated'))),
    erlang:put('flat', flatten(erlang:get('pooled'))),
    erlang:put('weights', [0.5, -0.4, 0.3, 0.1]),
    erlang:put('bias', 0.0),
    erlang:put('output', dense(erlang:get('flat'), erlang:get('weights'), 0.0)),
    erlang:put('probability', sigmoid(erlang:get('output'))),
    case (erlang:get('probability') >= 0.5) of
        true -> io:format("~ts~n", [mochi_repr("Abnormality detected")]);
        _ -> io:format("~ts~n", [mochi_repr("Normal")])
    end,
    io:format("~ts~n", [mochi_repr("Probability:")]),
    io:format("~ts~n", [mochi_repr(erlang:get('probability'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
