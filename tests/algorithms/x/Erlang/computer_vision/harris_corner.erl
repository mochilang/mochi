#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, zeros/2, gradient/1, harris/4]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

zeros(H, W) ->
    try
        M = [],
        Y = 0,
        Fun_2 = fun Fun_2_loop(H, M, W, Y) ->
    case (Y < H) of
        true ->
            Row = [],
            X = 0,
            Fun = fun Fun_loop(H, M, Row, W, X, Y) ->
    case (X < W) of
        true ->
            Row_2 = lists:append(Row, [0]),
            X_2 = (X + 1),
            Fun_loop(H, M, Row_2, W, X_2, Y);
        _ -> {H, M, Row, W, X, Y}
    end
end,
{H, M, Row_2, W, X_2, Y} = Fun(H, M, Row, W, X, Y),
            M_2 = lists:append(M, [Row_2]),
            Y_2 = (Y + 1),
            Fun_2_loop(H, M_2, W, Y_2);
        _ -> {H, M, W, Y}
    end
end,
{H, M_2, W, Y_2} = Fun_2(H, M, W, Y),
        M_2
    catch {return, Ret} -> Ret end.

gradient(Img) ->
    try
        H_2 = length(Img),
        W_2 = length((case erlang:is_map(Img) of true -> maps:get(0, Img, nil); _ -> lists:nth(0 + 1, Img) end)),
        Dx = zeros(H_2, W_2),
        Dy = zeros(H_2, W_2),
        Y_3 = 1,
        Fun_4 = fun Fun_4_loop(Dx, Dy, H_2, Img, W_2, Y_3) ->
    case (Y_3 < (H_2 - 1)) of
        true ->
            X_3 = 1,
            Fun_3 = fun Fun_3_loop(Dx, Dy, H_2, Img, W_2, X_3, Y_3) ->
    case (X_3 < (W_2 - 1)) of
        true ->
            Tmp = (case erlang:is_map(Dx) of true -> maps:get(Y_3, Dx, nil); _ -> lists:nth(Y_3 + 1, Dx) end),
            Tmp_2 = lists:sublist(Tmp, X_3) ++ [(float((case erlang:is_map((case erlang:is_map(Img) of true -> maps:get(Y_3, Img, nil); _ -> lists:nth(Y_3 + 1, Img) end)) of true -> maps:get((X_3 + 1), (case erlang:is_map(Img) of true -> maps:get(Y_3, Img, nil); _ -> lists:nth(Y_3 + 1, Img) end), nil); _ -> lists:nth((X_3 + 1) + 1, (case erlang:is_map(Img) of true -> maps:get(Y_3, Img, nil); _ -> lists:nth(Y_3 + 1, Img) end)) end)) - float((case erlang:is_map((case erlang:is_map(Img) of true -> maps:get(Y_3, Img, nil); _ -> lists:nth(Y_3 + 1, Img) end)) of true -> maps:get((X_3 - 1), (case erlang:is_map(Img) of true -> maps:get(Y_3, Img, nil); _ -> lists:nth(Y_3 + 1, Img) end), nil); _ -> lists:nth((X_3 - 1) + 1, (case erlang:is_map(Img) of true -> maps:get(Y_3, Img, nil); _ -> lists:nth(Y_3 + 1, Img) end)) end)))] ++ lists:nthtail(X_3 + 1, Tmp),
            Dx_2 = lists:sublist(Dx, Y_3) ++ [Tmp_2] ++ lists:nthtail(Y_3 + 1, Dx),
            Tmp_3 = (case erlang:is_map(Dy) of true -> maps:get(Y_3, Dy, nil); _ -> lists:nth(Y_3 + 1, Dy) end),
            Tmp_4 = lists:sublist(Tmp_3, X_3) ++ [(float((case erlang:is_map((case erlang:is_map(Img) of true -> maps:get((Y_3 + 1), Img, nil); _ -> lists:nth((Y_3 + 1) + 1, Img) end)) of true -> maps:get(X_3, (case erlang:is_map(Img) of true -> maps:get((Y_3 + 1), Img, nil); _ -> lists:nth((Y_3 + 1) + 1, Img) end), nil); _ -> lists:nth(X_3 + 1, (case erlang:is_map(Img) of true -> maps:get((Y_3 + 1), Img, nil); _ -> lists:nth((Y_3 + 1) + 1, Img) end)) end)) - float((case erlang:is_map((case erlang:is_map(Img) of true -> maps:get((Y_3 - 1), Img, nil); _ -> lists:nth((Y_3 - 1) + 1, Img) end)) of true -> maps:get(X_3, (case erlang:is_map(Img) of true -> maps:get((Y_3 - 1), Img, nil); _ -> lists:nth((Y_3 - 1) + 1, Img) end), nil); _ -> lists:nth(X_3 + 1, (case erlang:is_map(Img) of true -> maps:get((Y_3 - 1), Img, nil); _ -> lists:nth((Y_3 - 1) + 1, Img) end)) end)))] ++ lists:nthtail(X_3 + 1, Tmp_3),
            Dy_2 = lists:sublist(Dy, Y_3) ++ [Tmp_4] ++ lists:nthtail(Y_3 + 1, Dy),
            X_4 = (X_3 + 1),
            Fun_3_loop(Dx_2, Dy_2, H_2, Img, W_2, X_4, Y_3);
        _ -> {Dx, Dy, H_2, Img, W_2, X_3, Y_3}
    end
end,
{Dx_2, Dy_2, H_2, Img, W_2, X_4, Y_3} = Fun_3(Dx, Dy, H_2, Img, W_2, X_3, Y_3),
            Y_4 = (Y_3 + 1),
            Fun_4_loop(Dx_2, Dy_2, H_2, Img, W_2, Y_4);
        _ -> {Dx, Dy, H_2, Img, W_2, Y_3}
    end
end,
{Dx_2, Dy_2, H_2, Img, W_2, Y_4} = Fun_4(Dx, Dy, H_2, Img, W_2, Y_3),
        [Dx_2, Dy_2]
    catch {return, Ret} -> Ret end.

harris(Img_2, K, Window, Thresh) ->
    try
        H_3 = length(Img_2),
        W_3 = length((case erlang:is_map(Img_2) of true -> maps:get(0, Img_2, nil); _ -> lists:nth(0 + 1, Img_2) end)),
        Grads = gradient(Img_2),
        Dx_3 = (case erlang:is_map(Grads) of true -> maps:get(0, Grads, nil); _ -> lists:nth(0 + 1, Grads) end),
        Dy_3 = (case erlang:is_map(Grads) of true -> maps:get(1, Grads, nil); _ -> lists:nth(1 + 1, Grads) end),
        Ixx = zeros(H_3, W_3),
        Iyy = zeros(H_3, W_3),
        Ixy = zeros(H_3, W_3),
        Y_5 = 0,
        Fun_6 = fun Fun_6_loop(Dx_3, Dy_3, Grads, H_3, Img_2, Ixx, Ixy, Iyy, K, Thresh, W_3, Window, Y_5) ->
    case (Y_5 < H_3) of
        true ->
            X_5 = 0,
            Fun_5 = fun Fun_5_loop(Dx_3, Dy_3, Grads, H_3, Img_2, Ixx, Ixy, Iyy, K, Thresh, W_3, Window, X_5, Y_5) ->
    case (X_5 < W_3) of
        true ->
            Gx = (case erlang:is_map((case erlang:is_map(Dx_3) of true -> maps:get(Y_5, Dx_3, nil); _ -> lists:nth(Y_5 + 1, Dx_3) end)) of true -> maps:get(X_5, (case erlang:is_map(Dx_3) of true -> maps:get(Y_5, Dx_3, nil); _ -> lists:nth(Y_5 + 1, Dx_3) end), nil); _ -> lists:nth(X_5 + 1, (case erlang:is_map(Dx_3) of true -> maps:get(Y_5, Dx_3, nil); _ -> lists:nth(Y_5 + 1, Dx_3) end)) end),
            Gy = (case erlang:is_map((case erlang:is_map(Dy_3) of true -> maps:get(Y_5, Dy_3, nil); _ -> lists:nth(Y_5 + 1, Dy_3) end)) of true -> maps:get(X_5, (case erlang:is_map(Dy_3) of true -> maps:get(Y_5, Dy_3, nil); _ -> lists:nth(Y_5 + 1, Dy_3) end), nil); _ -> lists:nth(X_5 + 1, (case erlang:is_map(Dy_3) of true -> maps:get(Y_5, Dy_3, nil); _ -> lists:nth(Y_5 + 1, Dy_3) end)) end),
            Tmp_5 = (case erlang:is_map(Ixx) of true -> maps:get(Y_5, Ixx, nil); _ -> lists:nth(Y_5 + 1, Ixx) end),
            Tmp_6 = lists:sublist(Tmp_5, X_5) ++ [(Gx * Gx)] ++ lists:nthtail(X_5 + 1, Tmp_5),
            Ixx_2 = lists:sublist(Ixx, Y_5) ++ [Tmp_6] ++ lists:nthtail(Y_5 + 1, Ixx),
            Tmp_7 = (case erlang:is_map(Iyy) of true -> maps:get(Y_5, Iyy, nil); _ -> lists:nth(Y_5 + 1, Iyy) end),
            Tmp_8 = lists:sublist(Tmp_7, X_5) ++ [(Gy * Gy)] ++ lists:nthtail(X_5 + 1, Tmp_7),
            Iyy_2 = lists:sublist(Iyy, Y_5) ++ [Tmp_8] ++ lists:nthtail(Y_5 + 1, Iyy),
            Tmp_9 = (case erlang:is_map(Ixy) of true -> maps:get(Y_5, Ixy, nil); _ -> lists:nth(Y_5 + 1, Ixy) end),
            Tmp_10 = lists:sublist(Tmp_9, X_5) ++ [(Gx * Gy)] ++ lists:nthtail(X_5 + 1, Tmp_9),
            Ixy_2 = lists:sublist(Ixy, Y_5) ++ [Tmp_10] ++ lists:nthtail(Y_5 + 1, Ixy),
            X_6 = (X_5 + 1),
            Fun_5_loop(Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Thresh, W_3, Window, X_6, Y_5);
        _ -> {Dx_3, Dy_3, Grads, H_3, Img_2, Ixx, Ixy, Iyy, K, Thresh, W_3, Window, X_5, Y_5}
    end
end,
{Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Thresh, W_3, Window, X_6, Y_5} = Fun_5(Dx_3, Dy_3, Grads, H_3, Img_2, Ixx, Ixy, Iyy, K, Thresh, W_3, Window, X_5, Y_5),
            Y_6 = (Y_5 + 1),
            Fun_6_loop(Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Thresh, W_3, Window, Y_6);
        _ -> {Dx_3, Dy_3, Grads, H_3, Img_2, Ixx, Ixy, Iyy, K, Thresh, W_3, Window, Y_5}
    end
end,
{Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Thresh, W_3, Window, Y_6} = Fun_6(Dx_3, Dy_3, Grads, H_3, Img_2, Ixx, Ixy, Iyy, K, Thresh, W_3, Window, Y_5),
        Offset = (Window div 2),
        Corners = [],
        Y_7 = Offset,
        Fun_10 = fun Fun_10_loop(Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Y_7) ->
    case (Y_7 < (H_3 - Offset)) of
        true ->
            X_7 = Offset,
            Fun_9 = fun Fun_9_loop(Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, X_7, Y_7) ->
    case (X_7 < (W_3 - Offset)) of
        true ->
            Wxx = 0,
            Wyy = 0,
            Wxy = 0,
            Yy = (Y_7 - Offset),
            Fun_8 = fun Fun_8_loop(Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Wxx, Wxy, Wyy, X_7, Y_7, Yy) ->
    case (Yy =< (Y_7 + Offset)) of
        true ->
            Xx = (X_7 - Offset),
            Fun_7 = fun Fun_7_loop(Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Wxx, Wxy, Wyy, X_7, Xx, Y_7, Yy) ->
    case (Xx =< (X_7 + Offset)) of
        true ->
            Wxx_2 = (Wxx + (case erlang:is_map((case erlang:is_map(Ixx_2) of true -> maps:get(Yy, Ixx_2, nil); _ -> lists:nth(Yy + 1, Ixx_2) end)) of true -> maps:get(Xx, (case erlang:is_map(Ixx_2) of true -> maps:get(Yy, Ixx_2, nil); _ -> lists:nth(Yy + 1, Ixx_2) end), nil); _ -> lists:nth(Xx + 1, (case erlang:is_map(Ixx_2) of true -> maps:get(Yy, Ixx_2, nil); _ -> lists:nth(Yy + 1, Ixx_2) end)) end)),
            Wyy_2 = (Wyy + (case erlang:is_map((case erlang:is_map(Iyy_2) of true -> maps:get(Yy, Iyy_2, nil); _ -> lists:nth(Yy + 1, Iyy_2) end)) of true -> maps:get(Xx, (case erlang:is_map(Iyy_2) of true -> maps:get(Yy, Iyy_2, nil); _ -> lists:nth(Yy + 1, Iyy_2) end), nil); _ -> lists:nth(Xx + 1, (case erlang:is_map(Iyy_2) of true -> maps:get(Yy, Iyy_2, nil); _ -> lists:nth(Yy + 1, Iyy_2) end)) end)),
            Wxy_2 = (Wxy + (case erlang:is_map((case erlang:is_map(Ixy_2) of true -> maps:get(Yy, Ixy_2, nil); _ -> lists:nth(Yy + 1, Ixy_2) end)) of true -> maps:get(Xx, (case erlang:is_map(Ixy_2) of true -> maps:get(Yy, Ixy_2, nil); _ -> lists:nth(Yy + 1, Ixy_2) end), nil); _ -> lists:nth(Xx + 1, (case erlang:is_map(Ixy_2) of true -> maps:get(Yy, Ixy_2, nil); _ -> lists:nth(Yy + 1, Ixy_2) end)) end)),
            Xx_2 = (Xx + 1),
            Fun_7_loop(Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Wxx_2, Wxy_2, Wyy_2, X_7, Xx_2, Y_7, Yy);
        _ -> {Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Wxx, Wxy, Wyy, X_7, Xx, Y_7, Yy}
    end
end,
{Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Wxx_2, Wxy_2, Wyy_2, X_7, Xx_2, Y_7, Yy} = Fun_7(Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Wxx, Wxy, Wyy, X_7, Xx, Y_7, Yy),
            Yy_2 = (Yy + 1),
            Fun_8_loop(Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Wxx_2, Wxy_2, Wyy_2, X_7, Y_7, Yy_2);
        _ -> {Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Wxx, Wxy, Wyy, X_7, Y_7, Yy}
    end
end,
{Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Wxx_2, Wxy_2, Wyy_2, X_7, Y_7, Yy_2} = Fun_8(Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Wxx, Wxy, Wyy, X_7, Y_7, Yy),
            Det = ((Wxx_2 * Wyy_2) - (Wxy_2 * Wxy_2)),
            Trace = (Wxx_2 + Wyy_2),
            R = (Det - mochi_safe_mul(K, (Trace * Trace))),
            case (R > Thresh) of
        true -> Corners_2 = lists:append(Corners, [[X_7, Y_7]]),
            Corners_3 = Corners_2;
        _ -> Corners_3 = Corners
    end,
            X_8 = (X_7 + 1),
            Fun_9_loop(Corners_3, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, X_8, Y_7);
        _ -> {Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, X_7, Y_7}
    end
end,
{Corners_3, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, X_8, Y_7} = Fun_9(Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, X_7, Y_7),
            Y_8 = (Y_7 + 1),
            Fun_10_loop(Corners_3, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Y_8);
        _ -> {Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Y_7}
    end
end,
{Corners_3, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Y_8} = Fun_10(Corners, Dx_3, Dy_3, Grads, H_3, Img_2, Ixx_2, Ixy_2, Iyy_2, K, Offset, Thresh, W_3, Window, Y_7),
        Corners_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('img', [[1, 1, 1, 1, 1], [1, 255, 255, 255, 1], [1, 255, 0, 255, 1], [1, 255, 255, 255, 1], [1, 1, 1, 1, 1]]),
    erlang:put('corners', harris(erlang:get('img'), 0.04, 3, 1.0e+10)),
    io:format("~ts~n", [mochi_repr(erlang:get('corners'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
