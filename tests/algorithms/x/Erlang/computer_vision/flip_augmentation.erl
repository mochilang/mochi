#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, flip_horizontal_image/1, flip_vertical_image/1, flip_horizontal_boxes/1, flip_vertical_boxes/1, print_image/1]).

% Generated by Mochi transpiler v0.10.63 (26477f70ed) on 2025-08-09 23:14 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

flip_horizontal_image(Img) ->
    try
        Flipped = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Flipped, I, Img) ->
    case (I < erlang:length(Img)) of
        true ->
            Row = (case erlang:is_map(Img) of true -> maps:get(I, Img, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Img) + I + 1, Img); _ -> mochi_nth(I + 1, Img) end end),
            J = (erlang:length(Row) - 1),
            New_row = [],
            Fun = fun Fun_loop(Flipped, I, Img, J, New_row, Row) ->
    case (J >= 0) of
        true ->
            New_row_2 = lists:append((case New_row of nil -> []; _ -> New_row end), [(case erlang:is_map(Row) of true -> maps:get(J, Row, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Row) + J + 1, Row); _ -> mochi_nth(J + 1, Row) end end)]),
            J_2 = (J - 1),
            Fun_loop(Flipped, I, Img, J_2, New_row_2, Row);
        _ -> {Flipped, I, Img, J, New_row, Row}
    end
end,
{Flipped, I, Img, J_2, New_row_2, Row} = Fun(Flipped, I, Img, J, New_row, Row),
            Flipped_2 = lists:append((case Flipped of nil -> []; _ -> Flipped end), [New_row_2]),
            I_2 = (I + 1),
            Fun_2_loop(Flipped_2, I_2, Img);
        _ -> {Flipped, I, Img}
    end
end,
{Flipped_2, I_2, Img} = Fun_2(Flipped, I, Img),
        Flipped_2
    catch {return, RetCatch} -> RetCatch end.

flip_vertical_image(Img_2) ->
    try
        Flipped_3 = [],
        I_3 = (erlang:length(Img_2) - 1),
        Fun_3 = fun Fun_3_loop(Flipped_3, I_3, Img_2) ->
    case (I_3 >= 0) of
        true ->
            Flipped_4 = lists:append((case Flipped_3 of nil -> []; _ -> Flipped_3 end), [(case erlang:is_map(Img_2) of true -> maps:get(I_3, Img_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Img_2) + I_3 + 1, Img_2); _ -> mochi_nth(I_3 + 1, Img_2) end end)]),
            I_4 = (I_3 - 1),
            Fun_3_loop(Flipped_4, I_4, Img_2);
        _ -> {Flipped_3, I_3, Img_2}
    end
end,
{Flipped_4, I_4, Img_2} = Fun_3(Flipped_3, I_3, Img_2),
        Flipped_4
    catch {return, RetCatch} -> RetCatch end.

flip_horizontal_boxes(Boxes) ->
    try
        Result = [],
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Boxes, I_5, Result) ->
    case (I_5 < erlang:length(Boxes)) of
        true ->
            B = (case erlang:is_map(Boxes) of true -> maps:get(I_5, Boxes, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Boxes) + I_5 + 1, Boxes); _ -> mochi_nth(I_5 + 1, Boxes) end end),
            X_new = (1.0 - (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [[(case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end), X_new, (case erlang:is_map(B) of true -> maps:get(2, B, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(B) + 2 + 1, B); _ -> mochi_nth(2 + 1, B) end end), (case erlang:is_map(B) of true -> maps:get(3, B, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(B) + 3 + 1, B); _ -> mochi_nth(3 + 1, B) end end), (case erlang:is_map(B) of true -> maps:get(4, B, nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(B) + 4 + 1, B); _ -> mochi_nth(4 + 1, B) end end)]]),
            I_6 = (I_5 + 1),
            Fun_4_loop(Boxes, I_6, Result_2);
        _ -> {Boxes, I_5, Result}
    end
end,
{Boxes, I_6, Result_2} = Fun_4(Boxes, I_5, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

flip_vertical_boxes(Boxes_2) ->
    try
        Result_3 = [],
        I_7 = 0,
        Fun_5 = fun Fun_5_loop(Boxes_2, I_7, Result_3) ->
    case (I_7 < erlang:length(Boxes_2)) of
        true ->
            B_2 = (case erlang:is_map(Boxes_2) of true -> maps:get(I_7, Boxes_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Boxes_2) + I_7 + 1, Boxes_2); _ -> mochi_nth(I_7 + 1, Boxes_2) end end),
            Y_new = (1.0 - (case erlang:is_map(B_2) of true -> maps:get(2, B_2, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(B_2) + 2 + 1, B_2); _ -> mochi_nth(2 + 1, B_2) end end)),
            Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [[(case erlang:is_map(B_2) of true -> maps:get(0, B_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B_2) + 0 + 1, B_2); _ -> mochi_nth(0 + 1, B_2) end end), (case erlang:is_map(B_2) of true -> maps:get(1, B_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B_2) + 1 + 1, B_2); _ -> mochi_nth(1 + 1, B_2) end end), Y_new, (case erlang:is_map(B_2) of true -> maps:get(3, B_2, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(B_2) + 3 + 1, B_2); _ -> mochi_nth(3 + 1, B_2) end end), (case erlang:is_map(B_2) of true -> maps:get(4, B_2, nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(B_2) + 4 + 1, B_2); _ -> mochi_nth(4 + 1, B_2) end end)]]),
            I_8 = (I_7 + 1),
            Fun_5_loop(Boxes_2, I_8, Result_4);
        _ -> {Boxes_2, I_7, Result_3}
    end
end,
{Boxes_2, I_8, Result_4} = Fun_5(Boxes_2, I_7, Result_3),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

print_image(Img_3) ->
    try
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(I_9, Img_3) ->
    case (I_9 < erlang:length(Img_3)) of
        true ->
            Row_2 = (case erlang:is_map(Img_3) of true -> maps:get(I_9, Img_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Img_3) + I_9 + 1, Img_3); _ -> mochi_nth(I_9 + 1, Img_3) end end),
            J_3 = 0,
            Line = "",
            Fun_6 = fun Fun_6_loop(I_9, Img_3, J_3, Line, Row_2) ->
    case (J_3 < erlang:length(Row_2)) of
        true ->
            Line_2 = ((Line ++ mochi_str((case erlang:is_map(Row_2) of true -> maps:get(J_3, Row_2, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Row_2) + J_3 + 1, Row_2); _ -> mochi_nth(J_3 + 1, Row_2) end end))) ++ " "),
            J_4 = (J_3 + 1),
            Fun_6_loop(I_9, Img_3, J_4, Line_2, Row_2);
        _ -> {I_9, Img_3, J_3, Line, Row_2}
    end
end,
{I_9, Img_3, J_4, Line_2, Row_2} = Fun_6(I_9, Img_3, J_3, Line, Row_2),
            io:format("~ts~n", [mochi_repr(Line_2)]),
            I_10 = (I_9 + 1),
            Fun_7_loop(I_10, Img_3);
        _ -> {I_9, Img_3}
    end
end,
{I_10, Img_3} = Fun_7(I_9, Img_3),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('image', [[1, 2, 3], [4, 5, 6], [7, 8, 9]]),
    erlang:put('boxes', [[0.0, 0.25, 0.25, 0.5, 0.5], [1.0, 0.75, 0.75, 0.5, 0.5]]),
    io:format("~ts~n", [mochi_repr("Original image:")]),
    print_image(erlang:get('image')),
    io:format("~ts~n", [mochi_str(erlang:get('boxes'))]),
    io:format("~ts~n", [mochi_repr("Horizontal flip:")]),
    erlang:put('h_img', flip_horizontal_image(erlang:get('image'))),
    erlang:put('h_boxes', flip_horizontal_boxes(erlang:get('boxes'))),
    print_image(erlang:get('h_img')),
    io:format("~ts~n", [mochi_str(erlang:get('h_boxes'))]),
    io:format("~ts~n", [mochi_repr("Vertical flip:")]),
    erlang:put('v_img', flip_vertical_image(erlang:get('image'))),
    erlang:put('v_boxes', flip_vertical_boxes(erlang:get('boxes'))),
    print_image(erlang:get('v_img')),
    io:format("~ts~n", [mochi_str(erlang:get('v_boxes'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
