#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, update_image_and_anno/6, main/0]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

update_image_and_anno(All_img_list, All_annos, Idxs, Output_size, Scale_range, Filter_scale) ->
    try
        Height = (case erlang:is_map(Output_size) of true -> maps:get(0, Output_size, nil); _ -> lists:nth(0 + 1, Output_size) end),
        Width = (case erlang:is_map(Output_size) of true -> maps:get(1, Output_size, nil); _ -> lists:nth(1 + 1, Output_size) end),
        Output_img = nil,
        R = 0,
        Fun_2 = fun Fun_2_loop(All_annos, All_img_list, Filter_scale, Height, Idxs, Output_img, Output_size, R, Scale_range, Width) ->
    case (R < Height) of
        true ->
            Row = nil,
            C = 0,
            Fun = fun Fun_loop(All_annos, All_img_list, C, Filter_scale, Height, Idxs, Output_img, Output_size, R, Row, Scale_range, Width) ->
    case (C < Width) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            C_2 = (C + 1),
            Fun_loop(All_annos, All_img_list, C_2, Filter_scale, Height, Idxs, Output_img, Output_size, R, Row_2, Scale_range, Width);
        _ -> {All_annos, All_img_list, C, Filter_scale, Height, Idxs, Output_img, Output_size, R, Row, Scale_range, Width}
    end
end,
{All_annos, All_img_list, C_2, Filter_scale, Height, Idxs, Output_img, Output_size, R, Row_2, Scale_range, Width} = Fun(All_annos, All_img_list, C, Filter_scale, Height, Idxs, Output_img, Output_size, R, Row, Scale_range, Width),
            Output_img_2 = lists:append((case Output_img of nil -> []; _ -> Output_img end), [Row_2]),
            R_2 = (R + 1),
            Fun_2_loop(All_annos, All_img_list, Filter_scale, Height, Idxs, Output_img_2, Output_size, R_2, Scale_range, Width);
        _ -> {All_annos, All_img_list, Filter_scale, Height, Idxs, Output_img, Output_size, R, Scale_range, Width}
    end
end,
{All_annos, All_img_list, Filter_scale, Height, Idxs, Output_img_2, Output_size, R_2, Scale_range, Width} = Fun_2(All_annos, All_img_list, Filter_scale, Height, Idxs, Output_img, Output_size, R, Scale_range, Width),
        Scale_x = mochi_safe_div(((case erlang:is_map(Scale_range) of true -> maps:get(0, Scale_range, nil); _ -> lists:nth(0 + 1, Scale_range) end) + (case erlang:is_map(Scale_range) of true -> maps:get(1, Scale_range, nil); _ -> lists:nth(1 + 1, Scale_range) end)), 2),
        Scale_y = mochi_safe_div(((case erlang:is_map(Scale_range) of true -> maps:get(0, Scale_range, nil); _ -> lists:nth(0 + 1, Scale_range) end) + (case erlang:is_map(Scale_range) of true -> maps:get(1, Scale_range, nil); _ -> lists:nth(1 + 1, Scale_range) end)), 2),
        Divid_point_x = mochi_to_int(mochi_safe_mul(Scale_x, float(Width))),
        Divid_point_y = mochi_to_int(mochi_safe_mul(Scale_y, float(Height))),
        New_anno = nil,
        Path_list = nil,
        I = 0,
        Fun_18 = fun Fun_18_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, New_anno, Output_img_2, Output_size, Path_list, R_2, Scale_range, Scale_x, Scale_y, Width) ->
    case (I < length(Idxs)) of
        true ->
            Index = (case erlang:is_map(Idxs) of true -> maps:get(I, Idxs, nil); _ -> lists:nth(I + 1, Idxs) end),
            Path = (case erlang:is_map(All_img_list) of true -> maps:get(Index, All_img_list, nil); _ -> lists:nth(Index + 1, All_img_list) end),
            Path_list_2 = lists:append((case Path_list of nil -> []; _ -> Path_list end), [Path]),
            Img_annos = (case erlang:is_map(All_annos) of true -> maps:get(Index, All_annos, nil); _ -> lists:nth(Index + 1, All_annos) end),
            case (I == 0) of
        true -> Y0 = 0,
            Fun_4 = fun Fun_4_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y0) ->
    case (Y0 < Divid_point_y) of
        true ->
            X0 = 0,
            Fun_3 = fun Fun_3_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X0, Y0) ->
    case (X0 < Divid_point_x) of
        true ->
            Tmp = (case erlang:is_map(Output_img_2) of true -> maps:get(Y0, Output_img_2, nil); _ -> lists:nth(Y0 + 1, Output_img_2) end),
            Tmp_2 = lists:sublist(Tmp, X0) ++ [(I + 1)] ++ lists:nthtail(X0 + 1, Tmp),
            Output_img_3 = lists:sublist(Output_img_2, Y0) ++ [Tmp_2] ++ lists:nthtail(Y0 + 1, Output_img_2),
            X0_2 = (X0 + 1),
            Fun_3_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_3, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X0_2, Y0);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X0, Y0}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_3, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X0_2, Y0} = Fun_3(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X0, Y0),
            Y0_2 = (Y0 + 1),
            Fun_4_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_3, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y0_2);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y0}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_3, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y0_2} = Fun_4(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y0),
            J0 = 0,
            Fun_5 = fun Fun_5_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J0, New_anno, Output_img_3, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y0_2) ->
    case (J0 < length(Img_annos)) of
        true ->
            Bbox = (case erlang:is_map(Img_annos) of true -> maps:get(J0, Img_annos, nil); _ -> lists:nth(J0 + 1, Img_annos) end),
            Xmin = mochi_safe_mul((case erlang:is_map(Bbox) of true -> maps:get(1, Bbox, nil); _ -> lists:nth(1 + 1, Bbox) end), Scale_x),
            Ymin = mochi_safe_mul((case erlang:is_map(Bbox) of true -> maps:get(2, Bbox, nil); _ -> lists:nth(2 + 1, Bbox) end), Scale_y),
            Xmax = mochi_safe_mul((case erlang:is_map(Bbox) of true -> maps:get(3, Bbox, nil); _ -> lists:nth(3 + 1, Bbox) end), Scale_x),
            Ymax = mochi_safe_mul((case erlang:is_map(Bbox) of true -> maps:get(4, Bbox, nil); _ -> lists:nth(4 + 1, Bbox) end), Scale_y),
            New_anno_2 = lists:append((case New_anno of nil -> []; _ -> New_anno end), [[(case erlang:is_map(Bbox) of true -> maps:get(0, Bbox, nil); _ -> lists:nth(0 + 1, Bbox) end), Xmin, Ymin, Xmax, Ymax]]),
            J0_2 = (J0 + 1),
            Fun_5_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J0_2, New_anno_2, Output_img_3, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y0_2);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J0, New_anno, Output_img_3, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y0_2}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J0_2, New_anno_2, Output_img_3, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y0_2} = Fun_5(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J0, New_anno, Output_img_3, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y0_2),
            Fun_17 = Fun_5,
            J0_3 = J0_2,
            J1_4 = nil,
            J2_5 = nil,
            J3_5 = nil,
            New_anno_8 = New_anno_2,
            Output_img_9 = Output_img_3,
            Y0_3 = Y0_2,
            Y1_4 = nil,
            Y2_5 = nil,
            Y3_5 = nil;
        _ -> case (I == 1) of
        true -> Y1 = 0,
            Fun_7 = fun Fun_7_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y1) ->
    case (Y1 < Divid_point_y) of
        true ->
            X1 = Divid_point_x,
            Fun_6 = fun Fun_6_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X1, Y1) ->
    case (X1 < Width) of
        true ->
            Tmp_3 = (case erlang:is_map(Output_img_2) of true -> maps:get(Y1, Output_img_2, nil); _ -> lists:nth(Y1 + 1, Output_img_2) end),
            Tmp_4 = lists:sublist(Tmp_3, X1) ++ [(I + 1)] ++ lists:nthtail(X1 + 1, Tmp_3),
            Output_img_4 = lists:sublist(Output_img_2, Y1) ++ [Tmp_4] ++ lists:nthtail(Y1 + 1, Output_img_2),
            X1_2 = (X1 + 1),
            Fun_6_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_4, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X1_2, Y1);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X1, Y1}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_4, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X1_2, Y1} = Fun_6(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X1, Y1),
            Y1_2 = (Y1 + 1),
            Fun_7_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_4, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y1_2);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y1}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_4, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y1_2} = Fun_7(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y1),
            J1 = 0,
            Fun_8 = fun Fun_8_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J1, New_anno, Output_img_4, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y1_2) ->
    case (J1 < length(Img_annos)) of
        true ->
            Bbox1 = (case erlang:is_map(Img_annos) of true -> maps:get(J1, Img_annos, nil); _ -> lists:nth(J1 + 1, Img_annos) end),
            Xmin1 = (Scale_x + mochi_safe_mul((case erlang:is_map(Bbox1) of true -> maps:get(1, Bbox1, nil); _ -> lists:nth(1 + 1, Bbox1) end), (1 - Scale_x))),
            Ymin1 = mochi_safe_mul((case erlang:is_map(Bbox1) of true -> maps:get(2, Bbox1, nil); _ -> lists:nth(2 + 1, Bbox1) end), Scale_y),
            Xmax1 = (Scale_x + mochi_safe_mul((case erlang:is_map(Bbox1) of true -> maps:get(3, Bbox1, nil); _ -> lists:nth(3 + 1, Bbox1) end), (1 - Scale_x))),
            Ymax1 = mochi_safe_mul((case erlang:is_map(Bbox1) of true -> maps:get(4, Bbox1, nil); _ -> lists:nth(4 + 1, Bbox1) end), Scale_y),
            New_anno_3 = lists:append((case New_anno of nil -> []; _ -> New_anno end), [[(case erlang:is_map(Bbox1) of true -> maps:get(0, Bbox1, nil); _ -> lists:nth(0 + 1, Bbox1) end), Xmin1, Ymin1, Xmax1, Ymax1]]),
            J1_2 = (J1 + 1),
            Fun_8_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J1_2, New_anno_3, Output_img_4, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y1_2);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J1, New_anno, Output_img_4, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y1_2}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J1_2, New_anno_3, Output_img_4, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y1_2} = Fun_8(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J1, New_anno, Output_img_4, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y1_2),
            Fun_16 = Fun_8,
            J1_3 = J1_2,
            J2_4 = nil,
            J3_4 = nil,
            New_anno_7 = New_anno_3,
            Output_img_8 = Output_img_4,
            Y1_3 = Y1_2,
            Y2_4 = nil,
            Y3_4 = nil;
        _ -> case (I == 2) of
        true -> Y2 = Divid_point_y,
            Fun_10 = fun Fun_10_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y2) ->
    case (Y2 < Height) of
        true ->
            X2 = 0,
            Fun_9 = fun Fun_9_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X2, Y2) ->
    case (X2 < Divid_point_x) of
        true ->
            Tmp_5 = (case erlang:is_map(Output_img_2) of true -> maps:get(Y2, Output_img_2, nil); _ -> lists:nth(Y2 + 1, Output_img_2) end),
            Tmp_6 = lists:sublist(Tmp_5, X2) ++ [(I + 1)] ++ lists:nthtail(X2 + 1, Tmp_5),
            Output_img_5 = lists:sublist(Output_img_2, Y2) ++ [Tmp_6] ++ lists:nthtail(Y2 + 1, Output_img_2),
            X2_2 = (X2 + 1),
            Fun_9_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_5, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X2_2, Y2);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X2, Y2}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_5, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X2_2, Y2} = Fun_9(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X2, Y2),
            Y2_2 = (Y2 + 1),
            Fun_10_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_5, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y2_2);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y2}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_5, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y2_2} = Fun_10(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y2),
            J2 = 0,
            Fun_11 = fun Fun_11_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J2, New_anno, Output_img_5, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y2_2) ->
    case (J2 < length(Img_annos)) of
        true ->
            Bbox2 = (case erlang:is_map(Img_annos) of true -> maps:get(J2, Img_annos, nil); _ -> lists:nth(J2 + 1, Img_annos) end),
            Xmin2 = mochi_safe_mul((case erlang:is_map(Bbox2) of true -> maps:get(1, Bbox2, nil); _ -> lists:nth(1 + 1, Bbox2) end), Scale_x),
            Ymin2 = (Scale_y + mochi_safe_mul((case erlang:is_map(Bbox2) of true -> maps:get(2, Bbox2, nil); _ -> lists:nth(2 + 1, Bbox2) end), (1 - Scale_y))),
            Xmax2 = mochi_safe_mul((case erlang:is_map(Bbox2) of true -> maps:get(3, Bbox2, nil); _ -> lists:nth(3 + 1, Bbox2) end), Scale_x),
            Ymax2 = (Scale_y + mochi_safe_mul((case erlang:is_map(Bbox2) of true -> maps:get(4, Bbox2, nil); _ -> lists:nth(4 + 1, Bbox2) end), (1 - Scale_y))),
            New_anno_4 = lists:append((case New_anno of nil -> []; _ -> New_anno end), [[(case erlang:is_map(Bbox2) of true -> maps:get(0, Bbox2, nil); _ -> lists:nth(0 + 1, Bbox2) end), Xmin2, Ymin2, Xmax2, Ymax2]]),
            J2_2 = (J2 + 1),
            Fun_11_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J2_2, New_anno_4, Output_img_5, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y2_2);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J2, New_anno, Output_img_5, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y2_2}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J2_2, New_anno_4, Output_img_5, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y2_2} = Fun_11(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J2, New_anno, Output_img_5, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y2_2),
            Fun_15 = Fun_11,
            J2_3 = J2_2,
            J3_3 = nil,
            New_anno_6 = New_anno_4,
            Output_img_7 = Output_img_5,
            Y2_3 = Y2_2,
            Y3_3 = nil;
        _ -> Y3 = Divid_point_y,
            Fun_13 = fun Fun_13_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y3) ->
    case (Y3 < Height) of
        true ->
            X3 = Divid_point_x,
            Fun_12 = fun Fun_12_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X3, Y3) ->
    case (X3 < Width) of
        true ->
            Tmp_7 = (case erlang:is_map(Output_img_2) of true -> maps:get(Y3, Output_img_2, nil); _ -> lists:nth(Y3 + 1, Output_img_2) end),
            Tmp_8 = lists:sublist(Tmp_7, X3) ++ [(I + 1)] ++ lists:nthtail(X3 + 1, Tmp_7),
            Output_img_6 = lists:sublist(Output_img_2, Y3) ++ [Tmp_8] ++ lists:nthtail(Y3 + 1, Output_img_2),
            X3_2 = (X3 + 1),
            Fun_12_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_6, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X3_2, Y3);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X3, Y3}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_6, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X3_2, Y3} = Fun_12(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, X3, Y3),
            Y3_2 = (Y3 + 1),
            Fun_13_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_6, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y3_2);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y3}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_6, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y3_2} = Fun_13(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, New_anno, Output_img_2, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y3),
            J3 = 0,
            Fun_14 = fun Fun_14_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J3, New_anno, Output_img_6, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y3_2) ->
    case (J3 < length(Img_annos)) of
        true ->
            Bbox3 = (case erlang:is_map(Img_annos) of true -> maps:get(J3, Img_annos, nil); _ -> lists:nth(J3 + 1, Img_annos) end),
            Xmin3 = (Scale_x + mochi_safe_mul((case erlang:is_map(Bbox3) of true -> maps:get(1, Bbox3, nil); _ -> lists:nth(1 + 1, Bbox3) end), (1 - Scale_x))),
            Ymin3 = (Scale_y + mochi_safe_mul((case erlang:is_map(Bbox3) of true -> maps:get(2, Bbox3, nil); _ -> lists:nth(2 + 1, Bbox3) end), (1 - Scale_y))),
            Xmax3 = (Scale_x + mochi_safe_mul((case erlang:is_map(Bbox3) of true -> maps:get(3, Bbox3, nil); _ -> lists:nth(3 + 1, Bbox3) end), (1 - Scale_x))),
            Ymax3 = (Scale_y + mochi_safe_mul((case erlang:is_map(Bbox3) of true -> maps:get(4, Bbox3, nil); _ -> lists:nth(4 + 1, Bbox3) end), (1 - Scale_y))),
            New_anno_5 = lists:append((case New_anno of nil -> []; _ -> New_anno end), [[(case erlang:is_map(Bbox3) of true -> maps:get(0, Bbox3, nil); _ -> lists:nth(0 + 1, Bbox3) end), Xmin3, Ymin3, Xmax3, Ymax3]]),
            J3_2 = (J3 + 1),
            Fun_14_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J3_2, New_anno_5, Output_img_6, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y3_2);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J3, New_anno, Output_img_6, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y3_2}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J3_2, New_anno_5, Output_img_6, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y3_2} = Fun_14(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, Img_annos, Index, J3, New_anno, Output_img_6, Output_size, Path, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width, Y3_2),
            Fun_15 = Fun_14,
            J2_3 = nil,
            J3_3 = J3_2,
            New_anno_6 = New_anno_5,
            Output_img_7 = Output_img_6,
            Y2_3 = nil,
            Y3_3 = Y3_2
    end,
            Fun_16 = Fun_15,
            J1_3 = nil,
            J2_4 = J2_3,
            J3_4 = J3_3,
            New_anno_7 = New_anno_6,
            Output_img_8 = Output_img_7,
            Y1_3 = nil,
            Y2_4 = Y2_3,
            Y3_4 = Y3_3
    end,
            Fun_17 = Fun_16,
            J0_3 = nil,
            J1_4 = J1_3,
            J2_5 = J2_4,
            J3_5 = J3_4,
            New_anno_8 = New_anno_7,
            Output_img_9 = Output_img_8,
            Y0_3 = nil,
            Y1_4 = Y1_3,
            Y2_5 = Y2_4,
            Y3_5 = Y3_4
    end,
            I_2 = (I + 1),
            Fun_18_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I_2, Idxs, New_anno_8, Output_img_9, Output_size, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, New_anno, Output_img_2, Output_size, Path_list, R_2, Scale_range, Scale_x, Scale_y, Width}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I_2, Idxs, New_anno_8, Output_img_9, Output_size, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width} = Fun_18(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Height, I, Idxs, New_anno, Output_img_2, Output_size, Path_list, R_2, Scale_range, Scale_x, Scale_y, Width),
        case (Filter_scale > 0) of
        true -> Filtered = nil,
            K = 0,
            Fun_19 = fun Fun_19_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Filtered, Height, I_2, Idxs, K, New_anno_8, Output_img_9, Output_size, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width) ->
    case (K < length(New_anno_8)) of
        true ->
            Anno = (case erlang:is_map(New_anno_8) of true -> maps:get(K, New_anno_8, nil); _ -> lists:nth(K + 1, New_anno_8) end),
            W = ((case erlang:is_map(Anno) of true -> maps:get(3, Anno, nil); _ -> lists:nth(3 + 1, Anno) end) - (case erlang:is_map(Anno) of true -> maps:get(1, Anno, nil); _ -> lists:nth(1 + 1, Anno) end)),
            H = ((case erlang:is_map(Anno) of true -> maps:get(4, Anno, nil); _ -> lists:nth(4 + 1, Anno) end) - (case erlang:is_map(Anno) of true -> maps:get(2, Anno, nil); _ -> lists:nth(2 + 1, Anno) end)),
            case ((Filter_scale < W) andalso (Filter_scale < H)) of
        true -> Filtered_2 = lists:append((case Filtered of nil -> []; _ -> Filtered end), [Anno]),
            Filtered_3 = Filtered_2;
        _ -> Filtered_3 = Filtered
    end,
            K_2 = (K + 1),
            Fun_19_loop(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Filtered_3, Height, I_2, Idxs, K_2, New_anno_8, Output_img_9, Output_size, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width);
        _ -> {All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Filtered, Height, I_2, Idxs, K, New_anno_8, Output_img_9, Output_size, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width}
    end
end,
{All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Filtered_3, Height, I_2, Idxs, K_2, New_anno_8, Output_img_9, Output_size, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width} = Fun_19(All_annos, All_img_list, Divid_point_x, Divid_point_y, Filter_scale, Filtered, Height, I_2, Idxs, K, New_anno_8, Output_img_9, Output_size, Path_list_2, R_2, Scale_range, Scale_x, Scale_y, Width),
            New_anno_9 = Filtered_3,
            Filtered_4 = Filtered_3,
            Fun_20 = Fun_19,
            K_3 = K_2,
            New_anno_10 = New_anno_9;
        _ -> Filtered_4 = nil,
            Fun_20 = Fun_18,
            K_3 = nil,
            New_anno_10 = New_anno_8
    end,
        #{"img" => Output_img_9, "annos" => New_anno_10, "path" => (case erlang:is_map(Path_list_2) of true -> maps:get(0, Path_list_2, nil); _ -> lists:nth(0 + 1, Path_list_2) end)}
    catch {return, Ret} -> Ret end.

main() ->
    try
        All_img_list_2 = ["img0.jpg", "img1.jpg", "img2.jpg", "img3.jpg"],
        All_annos_2 = [[[0, 0.1, 0.1, 0.4, 0.4]], [[1, 0.2, 0.3, 0.5, 0.7]], [[2, 0.6, 0.2, 0.9, 0.5]], [[3, 0.5, 0.5, 0.8, 0.8]]],
        Idxs_2 = [0, 1, 2, 3],
        Output_size_2 = [100, 100],
        Scale_range_2 = [0.4, 0.6],
        Filter_scale_2 = 0.05,
        Res = update_image_and_anno(All_img_list_2, All_annos_2, Idxs_2, Output_size_2, Scale_range_2, 0.05),
        New_annos = maps:get("annos", Res, nil),
        Path_2 = maps:get("path", Res, nil),
        io:format("~ts~n", [mochi_repr(("Base image: " ++ Path_2))]),
        io:format("~ts~n", [mochi_repr(("Mosaic annotation count: " ++ mochi_str(length(New_annos))))]),
        I_3 = 0,
        Fun_21 = fun Fun_21_loop(All_annos_2, All_img_list_2, Filter_scale_2, I_3, Idxs_2, New_annos, Output_size_2, Path_2, Res, Scale_range_2) ->
    case (I_3 < length(New_annos)) of
        true ->
            A = (case erlang:is_map(New_annos) of true -> maps:get(I_3, New_annos, nil); _ -> lists:nth(I_3 + 1, New_annos) end),
            io:format("~ts~n", [mochi_repr(((((((((mochi_str((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> lists:nth(0 + 1, A) end)) ++ " ") ++ mochi_str((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> lists:nth(1 + 1, A) end))) ++ " ") ++ mochi_str((case erlang:is_map(A) of true -> maps:get(2, A, nil); _ -> lists:nth(2 + 1, A) end))) ++ " ") ++ mochi_str((case erlang:is_map(A) of true -> maps:get(3, A, nil); _ -> lists:nth(3 + 1, A) end))) ++ " ") ++ mochi_str((case erlang:is_map(A) of true -> maps:get(4, A, nil); _ -> lists:nth(4 + 1, A) end))))]),
            I_4 = (I_3 + 1),
            Fun_21_loop(All_annos_2, All_img_list_2, Filter_scale_2, I_4, Idxs_2, New_annos, Output_size_2, Path_2, Res, Scale_range_2);
        _ -> {All_annos_2, All_img_list_2, Filter_scale_2, I_3, Idxs_2, New_annos, Output_size_2, Path_2, Res, Scale_range_2}
    end
end,
{All_annos_2, All_img_list_2, Filter_scale_2, I_4, Idxs_2, New_annos, Output_size_2, Path_2, Res, Scale_range_2} = Fun_21(All_annos_2, All_img_list_2, Filter_scale_2, I_3, Idxs_2, New_annos, Output_size_2, Path_2, Res, Scale_range_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
