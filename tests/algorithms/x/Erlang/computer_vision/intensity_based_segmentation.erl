#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, segment_image/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

segment_image(Image, Thresholds) ->
    try
        Segmented = [],
        I = 0,
        Fun_3 = fun Fun_3_loop(I, Image, Segmented, Thresholds) ->
    case (I < length(Image)) of
        true ->
            Row = [],
            J = 0,
            Fun_2 = fun Fun_2_loop(I, Image, J, Row, Segmented, Thresholds) ->
    case (J < length((case erlang:is_map(Image) of true -> maps:get(I, Image, nil); _ -> lists:nth(I + 1, Image) end))) of
        true ->
            Pixel = (case erlang:is_map((case erlang:is_map(Image) of true -> maps:get(I, Image, nil); _ -> lists:nth(I + 1, Image) end)) of true -> maps:get(J, (case erlang:is_map(Image) of true -> maps:get(I, Image, nil); _ -> lists:nth(I + 1, Image) end), nil); _ -> lists:nth(J + 1, (case erlang:is_map(Image) of true -> maps:get(I, Image, nil); _ -> lists:nth(I + 1, Image) end)) end),
            Label = 0,
            K = 0,
            Fun = fun Fun_loop(I, Image, J, K, Label, Pixel, Row, Segmented, Thresholds) ->
    case (K < length(Thresholds)) of
        true ->
            case (Pixel > (case erlang:is_map(Thresholds) of true -> maps:get(K, Thresholds, nil); _ -> lists:nth(K + 1, Thresholds) end)) of
        true -> Label_2 = (K + 1),
            Label_3 = Label_2;
        _ -> Label_3 = Label
    end,
            K_2 = (K + 1),
            Fun_loop(I, Image, J, K_2, Label_3, Pixel, Row, Segmented, Thresholds);
        _ -> {I, Image, J, K, Label, Pixel, Row, Segmented, Thresholds}
    end
end,
{I, Image, J, K_2, Label_3, Pixel, Row, Segmented, Thresholds} = Fun(I, Image, J, K, Label, Pixel, Row, Segmented, Thresholds),
            Row_2 = lists:append(Row, [Label_3]),
            J_2 = (J + 1),
            Fun_2_loop(I, Image, J_2, Row_2, Segmented, Thresholds);
        _ -> {I, Image, J, Row, Segmented, Thresholds}
    end
end,
{I, Image, J_2, Row_2, Segmented, Thresholds} = Fun_2(I, Image, J, Row, Segmented, Thresholds),
            Segmented_2 = lists:append(Segmented, [Row_2]),
            I_2 = (I + 1),
            Fun_3_loop(I_2, Image, Segmented_2, Thresholds);
        _ -> {I, Image, Segmented, Thresholds}
    end
end,
{I_2, Image, Segmented_2, Thresholds} = Fun_3(I, Image, Segmented, Thresholds),
        Segmented_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Image_2 = [[80, 120, 180], [40, 90, 150], [20, 60, 100]],
        Thresholds_2 = [50, 100, 150],
        Segmented_3 = segment_image(Image_2, Thresholds_2),
        io:format("~ts~n", [mochi_repr(Segmented_3)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
