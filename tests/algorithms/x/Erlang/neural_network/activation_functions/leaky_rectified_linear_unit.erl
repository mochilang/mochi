#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, leaky_rectified_linear_unit/2]).

% Generated by Mochi transpiler v0.10.67 (7ab215672a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

leaky_rectified_linear_unit(Vector, Alpha) ->
    try
        Result = [],
        I = 0,
        Fun = fun Fun_loop(Alpha, I, Result, Vector) ->
    case (I < erlang:length(Vector)) of
        true ->
            X = (case erlang:is_map(Vector) of true -> maps:get(I, Vector, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Vector) + I + 1, Vector); _ -> mochi_nth(I + 1, Vector) end end),
            Result_4 = (case (X > 0.0) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [X]),
            Result_2;
        _ -> Result_3 = lists:append((case Result of nil -> []; _ -> Result end), [mochi_safe_mul(Alpha, X)]),
            Result_3
    end),
            I_2 = (I + 1),
            Fun_loop(Alpha, I_2, Result_4, Vector);
        _ -> {Alpha, I, Result, Vector}
    end
end,
{Alpha, I_2, Result_4, Vector} = Fun(Alpha, I, Result, Vector),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('vector1', [2.3, 0.6, -2.0, -3.8]),
    erlang:put('result1', leaky_rectified_linear_unit(erlang:get('vector1'), 0.3)),
    io:format("~ts~n", [mochi_str(erlang:get('result1'))]),
    erlang:put('vector2', [-9.2, -0.3, 0.45, -4.56]),
    erlang:put('result2', leaky_rectified_linear_unit(erlang:get('vector2'), 0.067)),
    io:format("~ts~n", [mochi_str(erlang:get('result2'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
