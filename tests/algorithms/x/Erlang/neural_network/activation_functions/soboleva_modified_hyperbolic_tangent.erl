#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, exp/1, soboleva_modified_hyperbolic_tangent/5, main/0]).

% Generated by Mochi transpiler v0.10.66 (48422bb2d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

exp(X) ->
    try
        Term = 1.0,
        Sum = 1.0,
        N = 1,
        Fun = fun Fun_loop(N, Sum, Term, X) ->
    case (N < 20) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X), to_float(N)),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(N_2, Sum_2, Term_2, X);
        _ -> {N, Sum, Term, X}
    end
end,
{N_2, Sum_2, Term_2, X} = Fun(N, Sum, Term, X),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

soboleva_modified_hyperbolic_tangent(Vector, A_value, B_value, C_value, D_value) ->
    try
        Result = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(A_value, B_value, C_value, D_value, I, Result, Vector) ->
    case (I < erlang:length(Vector)) of
        true ->
            X_2 = (case erlang:is_map(Vector) of true -> maps:get(I, Vector, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Vector) + I + 1, Vector); _ -> mochi_nth(I + 1, Vector) end end),
            Numerator = (exp(mochi_safe_mul(A_value, X_2)) - exp(mochi_safe_mul(-B_value, X_2))),
            Denominator = (exp(mochi_safe_mul(C_value, X_2)) + exp(mochi_safe_mul(-D_value, X_2))),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [mochi_safe_div(Numerator, Denominator)]),
            I_2 = (I + 1),
            Fun_2_loop(A_value, B_value, C_value, D_value, I_2, Result_2, Vector);
        _ -> {A_value, B_value, C_value, D_value, I, Result, Vector}
    end
end,
{A_value, B_value, C_value, D_value, I_2, Result_2, Vector} = Fun_2(A_value, B_value, C_value, D_value, I, Result, Vector),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Vector_2 = [5.4, -2.4, 6.3, -5.23, 3.27, 0.56],
        Res = soboleva_modified_hyperbolic_tangent(Vector_2, 0.2, 0.4, 0.6, 0.8),
        io:format("~p~n", [Res]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
