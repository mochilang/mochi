#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, exp_approx/1, sigmoid/1, swish/2, sigmoid_linear_unit/1, approx_equal/3, approx_equal_list/3, test_swish/0, main/0]).

% Generated by Mochi transpiler v0.10.64 (1dced96c32) on 2025-08-12 13:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

exp_approx(X) ->
    try
        Sum = 1.0,
        Term = 1.0,
        I = 1,
        Fun = fun Fun_loop(I, Sum, Term, X) ->
    case (I =< 20) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X), float(I)),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, Term_2, X);
        _ -> {I, Sum, Term, X}
    end
end,
{I_2, Sum_2, Term_2, X} = Fun(I, Sum, Term, X),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

sigmoid(Vector) ->
    try
        Result = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Result, Vector) ->
    case (I_3 < erlang:length(Vector)) of
        true ->
            V = (case erlang:is_map(Vector) of true -> maps:get(I_3, Vector, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Vector) + I_3 + 1, Vector); _ -> mochi_nth(I_3 + 1, Vector) end end),
            S = mochi_safe_div(1.0, (1.0 + exp_approx(-V))),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [S]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Result_2, Vector);
        _ -> {I_3, Result, Vector}
    end
end,
{I_4, Result_2, Vector} = Fun_2(I_3, Result, Vector),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

swish(Vector_2, Beta) ->
    try
        Result_3 = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Beta, I_5, Result_3, Vector_2) ->
    case (I_5 < erlang:length(Vector_2)) of
        true ->
            V_2 = (case erlang:is_map(Vector_2) of true -> maps:get(I_5, Vector_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Vector_2) + I_5 + 1, Vector_2); _ -> mochi_nth(I_5 + 1, Vector_2) end end),
            S_2 = mochi_safe_div(1.0, (1.0 + exp_approx(mochi_safe_mul(-Beta, V_2)))),
            Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [mochi_safe_mul(V_2, S_2)]),
            I_6 = (I_5 + 1),
            Fun_3_loop(Beta, I_6, Result_4, Vector_2);
        _ -> {Beta, I_5, Result_3, Vector_2}
    end
end,
{Beta, I_6, Result_4, Vector_2} = Fun_3(Beta, I_5, Result_3, Vector_2),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

sigmoid_linear_unit(Vector_3) ->
    try
        swish(Vector_3, 1.0)
    catch {return, RetCatch} -> RetCatch end.

approx_equal(A, B, Eps) ->
    try
        Diff = (case (A > B) of
    true -> (A - B);
    _ -> (B - A)
end),
        (Diff < Eps)
    catch {return, RetCatch} -> RetCatch end.

approx_equal_list(A_2, B_2, Eps_2) ->
    try
        case (erlang:length(A_2) /= erlang:length(B_2)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(A_2, B_2, Eps_2, I_7) ->
    case (I_7 < erlang:length(A_2)) of
        true ->
            case mochi_not(approx_equal((case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> mochi_nth(I_7 + 1, A_2) end end), (case erlang:is_map(B_2) of true -> maps:get(I_7, B_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(B_2) + I_7 + 1, B_2); _ -> mochi_nth(I_7 + 1, B_2) end end), Eps_2)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(A_2, B_2, Eps_2, I_8);
        _ -> {A_2, B_2, Eps_2, I_7}
    end
end,
{A_2, B_2, Eps_2, I_8} = Fun_4(A_2, B_2, Eps_2, I_7),
        true
    catch {return, RetCatch} -> RetCatch end.

test_swish() ->
    try
        V_3 = [-1.0, 1.0, 2.0],
        Eps_3 = 0.001,
        case mochi_not(approx_equal_list(sigmoid(V_3), [0.26894142, 0.73105858, 0.88079708], 0.001)) of
        true -> erlang:error({panic, "sigmoid incorrect"});
        _ -> ok
    end,
        case mochi_not(approx_equal_list(sigmoid_linear_unit(V_3), [-0.26894142, 0.73105858, 1.76159416], 0.001)) of
        true -> erlang:error({panic, "sigmoid_linear_unit incorrect"});
        _ -> ok
    end,
        case mochi_not(approx_equal_list(swish(V_3, 2.0), [-0.11920292, 0.88079708, 1.96402758], 0.001)) of
        true -> erlang:error({panic, "swish incorrect"});
        _ -> ok
    end,
        case mochi_not(approx_equal_list(swish([-2.0], 1.0), [-0.23840584], 0.001)) of
        true -> erlang:error({panic, "swish with parameter 1 incorrect"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_swish(),
        io:format("~ts~n", [mochi_str(sigmoid([-1.0, 1.0, 2.0]))]),
        io:format("~ts~n", [mochi_str(sigmoid_linear_unit([-1.0, 1.0, 2.0]))]),
        io:format("~ts~n", [mochi_str(swish([-1.0, 1.0, 2.0], 2.0))]),
        io:format("~ts~n", [mochi_str(swish([-2.0], 1.0))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
