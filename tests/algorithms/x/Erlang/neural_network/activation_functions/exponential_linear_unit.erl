#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, exp_approx/1, exponential_linear_unit/2]).

% Generated by Mochi transpiler v0.10.64 (13cd577cd4) on 2025-08-12 15:27 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

exp_approx(X) ->
    try
        Sum = 1.0,
        Term = 1.0,
        I = 1,
        Absx = (case (X < 0.0) of
    true -> -X;
    _ -> X
end),
        Fun = fun Fun_loop(Absx, I, Sum, Term, X) ->
    case (I =< 20) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, Absx), float(I)),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1),
            Fun_loop(Absx, I_2, Sum_2, Term_2, X);
        _ -> {Absx, I, Sum, Term, X}
    end
end,
{Absx, I_2, Sum_2, Term_2, X} = Fun(Absx, I, Sum, Term, X),
        case (X < 0.0) of
        true -> throw({return, mochi_safe_div(1.0, Sum_2)});
        _ -> ok
    end,
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

exponential_linear_unit(Vector, Alpha) ->
    try
        Result = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Alpha, I_3, Result, Vector) ->
    case (I_3 < erlang:length(Vector)) of
        true ->
            V = (case erlang:is_map(Vector) of true -> maps:get(I_3, Vector, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Vector) + I_3 + 1, Vector); _ -> mochi_nth(I_3 + 1, Vector) end end),
            case (V > 0.0) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [V]),
            Neg_2 = nil,
            Result_4 = Result_2;
        _ -> Neg = mochi_safe_mul(Alpha, (exp_approx(V) - 1.0)),
            Result_3 = lists:append((case Result of nil -> []; _ -> Result end), [Neg]),
            Neg_2 = Neg,
            Result_4 = Result_3
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Alpha, I_4, Result_4, Vector);
        _ -> {Alpha, I_3, Result, Vector}
    end
end,
{Alpha, I_4, Result_4, Vector} = Fun_2(Alpha, I_3, Result, Vector),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(exponential_linear_unit([2.3, 0.6, -2.0, -3.8], 0.3))]),
    io:format("~ts~n", [mochi_str(exponential_linear_unit([-9.2, -0.3, 0.45, -4.56], 0.067))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
