#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, exp_approx/1, sigmoid/1, sigmoid_derivative/1, new_network/0, feedforward/2, train/4, predict/2, example/0, main/0]).

% Generated by Mochi transpiler v0.10.64 (1dced96c32) on 2025-08-12 13:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

exp_approx(X) ->
    try
        Sum = 1.0,
        Term = 1.0,
        I = 1,
        Fun = fun Fun_loop(I, Sum, Term, X) ->
    case (I < 10) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X), float(I)),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, Term_2, X);
        _ -> {I, Sum, Term, X}
    end
end,
{I_2, Sum_2, Term_2, X} = Fun(I, Sum, Term, X),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

sigmoid(X_2) ->
    try
        mochi_safe_div(1.0, (1.0 + exp_approx(-X_2)))
    catch {return, RetCatch} -> RetCatch end.

sigmoid_derivative(X_3) ->
    try
        mochi_safe_mul(X_3, (1.0 - X_3))
    catch {return, RetCatch} -> RetCatch end.

new_network() ->
    try
        #{"w1" => [[0.1, 0.2, 0.3, 0.4], [0.5, 0.6, 0.7, 0.8], [0.9, 1.0, 1.1, 1.2]], "w2" => [[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9], [1.0, 1.1, 1.2]], "w3" => [[0.1], [0.2], [0.3]]}
    catch {return, RetCatch} -> RetCatch end.

feedforward(Net, Input) ->
    try
        Hidden1 = [],
        J = 0,
        Fun_3 = fun Fun_3_loop(Hidden1, Input, J, Net) ->
    case (J < 4) of
        true ->
            Sum1 = 0.0,
            I_3 = 0,
            Fun_2 = fun Fun_2_loop(Hidden1, I_3, Input, J, Net, Sum1) ->
    case (I_3 < 3) of
        true ->
            Sum1_2 = (Sum1 + mochi_safe_mul((case erlang:is_map(Input) of true -> maps:get(I_3, Input, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Input) + I_3 + 1, Input); _ -> mochi_nth(I_3 + 1, Input) end end), (case erlang:is_map((case erlang:is_map(maps:get("w1", Net, nil)) of true -> maps:get(I_3, maps:get("w1", Net, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("w1", Net, nil)) + I_3 + 1, maps:get("w1", Net, nil)); _ -> mochi_nth(I_3 + 1, maps:get("w1", Net, nil)) end end)) of true -> maps:get(J, (case erlang:is_map(maps:get("w1", Net, nil)) of true -> maps:get(I_3, maps:get("w1", Net, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("w1", Net, nil)) + I_3 + 1, maps:get("w1", Net, nil)); _ -> mochi_nth(I_3 + 1, maps:get("w1", Net, nil)) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("w1", Net, nil)) of true -> maps:get(I_3, maps:get("w1", Net, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("w1", Net, nil)) + I_3 + 1, maps:get("w1", Net, nil)); _ -> mochi_nth(I_3 + 1, maps:get("w1", Net, nil)) end end)) + J + 1, (case erlang:is_map(maps:get("w1", Net, nil)) of true -> maps:get(I_3, maps:get("w1", Net, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("w1", Net, nil)) + I_3 + 1, maps:get("w1", Net, nil)); _ -> mochi_nth(I_3 + 1, maps:get("w1", Net, nil)) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(maps:get("w1", Net, nil)) of true -> maps:get(I_3, maps:get("w1", Net, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("w1", Net, nil)) + I_3 + 1, maps:get("w1", Net, nil)); _ -> mochi_nth(I_3 + 1, maps:get("w1", Net, nil)) end end)) end end))),
            I_4 = (I_3 + 1),
            Fun_2_loop(Hidden1, I_4, Input, J, Net, Sum1_2);
        _ -> {Hidden1, I_3, Input, J, Net, Sum1}
    end
end,
{Hidden1, I_4, Input, J, Net, Sum1_2} = Fun_2(Hidden1, I_3, Input, J, Net, Sum1),
            Hidden1_2 = lists:append((case Hidden1 of nil -> []; _ -> Hidden1 end), [sigmoid(Sum1_2)]),
            J_2 = (J + 1),
            Fun_3_loop(Hidden1_2, Input, J_2, Net);
        _ -> {Hidden1, Input, J, Net}
    end
end,
{Hidden1_2, Input, J_2, Net} = Fun_3(Hidden1, Input, J, Net),
        Hidden2 = [],
        K = 0,
        Fun_5 = fun Fun_5_loop(Hidden1_2, Hidden2, Input, J_2, K, Net) ->
    case (K < 3) of
        true ->
            Sum2 = 0.0,
            J2 = 0,
            Fun_4 = fun Fun_4_loop(Hidden1_2, Hidden2, Input, J_2, J2, K, Net, Sum2) ->
    case (J2 < 4) of
        true ->
            Sum2_2 = (Sum2 + mochi_safe_mul((case erlang:is_map(Hidden1_2) of true -> maps:get(J2, Hidden1_2, nil); _ -> case J2 < 0 of true -> mochi_nth(erlang:length(Hidden1_2) + J2 + 1, Hidden1_2); _ -> mochi_nth(J2 + 1, Hidden1_2) end end), (case erlang:is_map((case erlang:is_map(maps:get("w2", Net, nil)) of true -> maps:get(J2, maps:get("w2", Net, nil), nil); _ -> case J2 < 0 of true -> mochi_nth(erlang:length(maps:get("w2", Net, nil)) + J2 + 1, maps:get("w2", Net, nil)); _ -> mochi_nth(J2 + 1, maps:get("w2", Net, nil)) end end)) of true -> maps:get(K, (case erlang:is_map(maps:get("w2", Net, nil)) of true -> maps:get(J2, maps:get("w2", Net, nil), nil); _ -> case J2 < 0 of true -> mochi_nth(erlang:length(maps:get("w2", Net, nil)) + J2 + 1, maps:get("w2", Net, nil)); _ -> mochi_nth(J2 + 1, maps:get("w2", Net, nil)) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("w2", Net, nil)) of true -> maps:get(J2, maps:get("w2", Net, nil), nil); _ -> case J2 < 0 of true -> mochi_nth(erlang:length(maps:get("w2", Net, nil)) + J2 + 1, maps:get("w2", Net, nil)); _ -> mochi_nth(J2 + 1, maps:get("w2", Net, nil)) end end)) + K + 1, (case erlang:is_map(maps:get("w2", Net, nil)) of true -> maps:get(J2, maps:get("w2", Net, nil), nil); _ -> case J2 < 0 of true -> mochi_nth(erlang:length(maps:get("w2", Net, nil)) + J2 + 1, maps:get("w2", Net, nil)); _ -> mochi_nth(J2 + 1, maps:get("w2", Net, nil)) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(maps:get("w2", Net, nil)) of true -> maps:get(J2, maps:get("w2", Net, nil), nil); _ -> case J2 < 0 of true -> mochi_nth(erlang:length(maps:get("w2", Net, nil)) + J2 + 1, maps:get("w2", Net, nil)); _ -> mochi_nth(J2 + 1, maps:get("w2", Net, nil)) end end)) end end))),
            J2_2 = (J2 + 1),
            Fun_4_loop(Hidden1_2, Hidden2, Input, J_2, J2_2, K, Net, Sum2_2);
        _ -> {Hidden1_2, Hidden2, Input, J_2, J2, K, Net, Sum2}
    end
end,
{Hidden1_2, Hidden2, Input, J_2, J2_2, K, Net, Sum2_2} = Fun_4(Hidden1_2, Hidden2, Input, J_2, J2, K, Net, Sum2),
            Hidden2_2 = lists:append((case Hidden2 of nil -> []; _ -> Hidden2 end), [sigmoid(Sum2_2)]),
            K_2 = (K + 1),
            Fun_5_loop(Hidden1_2, Hidden2_2, Input, J_2, K_2, Net);
        _ -> {Hidden1_2, Hidden2, Input, J_2, K, Net}
    end
end,
{Hidden1_2, Hidden2_2, Input, J_2, K_2, Net} = Fun_5(Hidden1_2, Hidden2, Input, J_2, K, Net),
        Sum3 = 0.0,
        K2 = 0,
        Fun_6 = fun Fun_6_loop(Hidden1_2, Hidden2_2, Input, J_2, K_2, K2, Net, Sum3) ->
    case (K2 < 3) of
        true ->
            Sum3_2 = (Sum3 + mochi_safe_mul((case erlang:is_map(Hidden2_2) of true -> maps:get(K2, Hidden2_2, nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length(Hidden2_2) + K2 + 1, Hidden2_2); _ -> mochi_nth(K2 + 1, Hidden2_2) end end), (case erlang:is_map((case erlang:is_map(maps:get("w3", Net, nil)) of true -> maps:get(K2, maps:get("w3", Net, nil), nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length(maps:get("w3", Net, nil)) + K2 + 1, maps:get("w3", Net, nil)); _ -> mochi_nth(K2 + 1, maps:get("w3", Net, nil)) end end)) of true -> maps:get(0, (case erlang:is_map(maps:get("w3", Net, nil)) of true -> maps:get(K2, maps:get("w3", Net, nil), nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length(maps:get("w3", Net, nil)) + K2 + 1, maps:get("w3", Net, nil)); _ -> mochi_nth(K2 + 1, maps:get("w3", Net, nil)) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("w3", Net, nil)) of true -> maps:get(K2, maps:get("w3", Net, nil), nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length(maps:get("w3", Net, nil)) + K2 + 1, maps:get("w3", Net, nil)); _ -> mochi_nth(K2 + 1, maps:get("w3", Net, nil)) end end)) + 0 + 1, (case erlang:is_map(maps:get("w3", Net, nil)) of true -> maps:get(K2, maps:get("w3", Net, nil), nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length(maps:get("w3", Net, nil)) + K2 + 1, maps:get("w3", Net, nil)); _ -> mochi_nth(K2 + 1, maps:get("w3", Net, nil)) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(maps:get("w3", Net, nil)) of true -> maps:get(K2, maps:get("w3", Net, nil), nil); _ -> case K2 < 0 of true -> mochi_nth(erlang:length(maps:get("w3", Net, nil)) + K2 + 1, maps:get("w3", Net, nil)); _ -> mochi_nth(K2 + 1, maps:get("w3", Net, nil)) end end)) end end))),
            K2_2 = (K2 + 1),
            Fun_6_loop(Hidden1_2, Hidden2_2, Input, J_2, K_2, K2_2, Net, Sum3_2);
        _ -> {Hidden1_2, Hidden2_2, Input, J_2, K_2, K2, Net, Sum3}
    end
end,
{Hidden1_2, Hidden2_2, Input, J_2, K_2, K2_2, Net, Sum3_2} = Fun_6(Hidden1_2, Hidden2_2, Input, J_2, K_2, K2, Net, Sum3),
        Out = sigmoid(Sum3_2),
        Out
    catch {return, RetCatch} -> RetCatch end.

train(Net_2, Inputs, Outputs, Iterations) ->
    try
        Iter = 0,
        Fun_21 = fun Fun_21_loop(Inputs, Iter, Iterations, Net_2, Outputs) ->
    case (Iter < Iterations) of
        true ->
            S = 0,
            Fun_20 = fun Fun_20_loop(Inputs, Iter, Iterations, Net_2, Outputs, S) ->
    case (S < erlang:length(Inputs)) of
        true ->
            Inp = (case erlang:is_map(Inputs) of true -> maps:get(S, Inputs, nil); _ -> case S < 0 of true -> mochi_nth(erlang:length(Inputs) + S + 1, Inputs); _ -> mochi_nth(S + 1, Inputs) end end),
            Target = (case erlang:is_map(Outputs) of true -> maps:get(S, Outputs, nil); _ -> case S < 0 of true -> mochi_nth(erlang:length(Outputs) + S + 1, Outputs); _ -> mochi_nth(S + 1, Outputs) end end),
            Hidden1_3 = [],
            J_3 = 0,
            Fun_8 = fun Fun_8_loop(Hidden1_3, Inp, Inputs, Iter, Iterations, J_3, Net_2, Outputs, S, Target) ->
    case (J_3 < 4) of
        true ->
            Sum1_3 = 0.0,
            I_5 = 0,
            Fun_7 = fun Fun_7_loop(Hidden1_3, I_5, Inp, Inputs, Iter, Iterations, J_3, Net_2, Outputs, S, Sum1_3, Target) ->
    case (I_5 < 3) of
        true ->
            Sum1_4 = (Sum1_3 + mochi_safe_mul((case erlang:is_map(Inp) of true -> maps:get(I_5, Inp, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Inp) + I_5 + 1, Inp); _ -> mochi_nth(I_5 + 1, Inp) end end), (case erlang:is_map((case erlang:is_map(maps:get("w1", Net_2, nil)) of true -> maps:get(I_5, maps:get("w1", Net_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("w1", Net_2, nil)) + I_5 + 1, maps:get("w1", Net_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("w1", Net_2, nil)) end end)) of true -> maps:get(J_3, (case erlang:is_map(maps:get("w1", Net_2, nil)) of true -> maps:get(I_5, maps:get("w1", Net_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("w1", Net_2, nil)) + I_5 + 1, maps:get("w1", Net_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("w1", Net_2, nil)) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("w1", Net_2, nil)) of true -> maps:get(I_5, maps:get("w1", Net_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("w1", Net_2, nil)) + I_5 + 1, maps:get("w1", Net_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("w1", Net_2, nil)) end end)) + J_3 + 1, (case erlang:is_map(maps:get("w1", Net_2, nil)) of true -> maps:get(I_5, maps:get("w1", Net_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("w1", Net_2, nil)) + I_5 + 1, maps:get("w1", Net_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("w1", Net_2, nil)) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(maps:get("w1", Net_2, nil)) of true -> maps:get(I_5, maps:get("w1", Net_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("w1", Net_2, nil)) + I_5 + 1, maps:get("w1", Net_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("w1", Net_2, nil)) end end)) end end))),
            I_6 = (I_5 + 1),
            Fun_7_loop(Hidden1_3, I_6, Inp, Inputs, Iter, Iterations, J_3, Net_2, Outputs, S, Sum1_4, Target);
        _ -> {Hidden1_3, I_5, Inp, Inputs, Iter, Iterations, J_3, Net_2, Outputs, S, Sum1_3, Target}
    end
end,
{Hidden1_3, I_6, Inp, Inputs, Iter, Iterations, J_3, Net_2, Outputs, S, Sum1_4, Target} = Fun_7(Hidden1_3, I_5, Inp, Inputs, Iter, Iterations, J_3, Net_2, Outputs, S, Sum1_3, Target),
            Hidden1_4 = lists:append((case Hidden1_3 of nil -> []; _ -> Hidden1_3 end), [sigmoid(Sum1_4)]),
            J_4 = (J_3 + 1),
            Fun_8_loop(Hidden1_4, Inp, Inputs, Iter, Iterations, J_4, Net_2, Outputs, S, Target);
        _ -> {Hidden1_3, Inp, Inputs, Iter, Iterations, J_3, Net_2, Outputs, S, Target}
    end
end,
{Hidden1_4, Inp, Inputs, Iter, Iterations, J_4, Net_2, Outputs, S, Target} = Fun_8(Hidden1_3, Inp, Inputs, Iter, Iterations, J_3, Net_2, Outputs, S, Target),
            Hidden2_3 = [],
            K_3 = 0,
            Fun_10 = fun Fun_10_loop(Hidden1_4, Hidden2_3, Inp, Inputs, Iter, Iterations, J_4, K_3, Net_2, Outputs, S, Target) ->
    case (K_3 < 3) of
        true ->
            Sum2_3 = 0.0,
            J2_3 = 0,
            Fun_9 = fun Fun_9_loop(Hidden1_4, Hidden2_3, Inp, Inputs, Iter, Iterations, J_4, J2_3, K_3, Net_2, Outputs, S, Sum2_3, Target) ->
    case (J2_3 < 4) of
        true ->
            Sum2_4 = (Sum2_3 + mochi_safe_mul((case erlang:is_map(Hidden1_4) of true -> maps:get(J2_3, Hidden1_4, nil); _ -> case J2_3 < 0 of true -> mochi_nth(erlang:length(Hidden1_4) + J2_3 + 1, Hidden1_4); _ -> mochi_nth(J2_3 + 1, Hidden1_4) end end), (case erlang:is_map((case erlang:is_map(maps:get("w2", Net_2, nil)) of true -> maps:get(J2_3, maps:get("w2", Net_2, nil), nil); _ -> case J2_3 < 0 of true -> mochi_nth(erlang:length(maps:get("w2", Net_2, nil)) + J2_3 + 1, maps:get("w2", Net_2, nil)); _ -> mochi_nth(J2_3 + 1, maps:get("w2", Net_2, nil)) end end)) of true -> maps:get(K_3, (case erlang:is_map(maps:get("w2", Net_2, nil)) of true -> maps:get(J2_3, maps:get("w2", Net_2, nil), nil); _ -> case J2_3 < 0 of true -> mochi_nth(erlang:length(maps:get("w2", Net_2, nil)) + J2_3 + 1, maps:get("w2", Net_2, nil)); _ -> mochi_nth(J2_3 + 1, maps:get("w2", Net_2, nil)) end end), nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("w2", Net_2, nil)) of true -> maps:get(J2_3, maps:get("w2", Net_2, nil), nil); _ -> case J2_3 < 0 of true -> mochi_nth(erlang:length(maps:get("w2", Net_2, nil)) + J2_3 + 1, maps:get("w2", Net_2, nil)); _ -> mochi_nth(J2_3 + 1, maps:get("w2", Net_2, nil)) end end)) + K_3 + 1, (case erlang:is_map(maps:get("w2", Net_2, nil)) of true -> maps:get(J2_3, maps:get("w2", Net_2, nil), nil); _ -> case J2_3 < 0 of true -> mochi_nth(erlang:length(maps:get("w2", Net_2, nil)) + J2_3 + 1, maps:get("w2", Net_2, nil)); _ -> mochi_nth(J2_3 + 1, maps:get("w2", Net_2, nil)) end end)); _ -> mochi_nth(K_3 + 1, (case erlang:is_map(maps:get("w2", Net_2, nil)) of true -> maps:get(J2_3, maps:get("w2", Net_2, nil), nil); _ -> case J2_3 < 0 of true -> mochi_nth(erlang:length(maps:get("w2", Net_2, nil)) + J2_3 + 1, maps:get("w2", Net_2, nil)); _ -> mochi_nth(J2_3 + 1, maps:get("w2", Net_2, nil)) end end)) end end))),
            J2_4 = (J2_3 + 1),
            Fun_9_loop(Hidden1_4, Hidden2_3, Inp, Inputs, Iter, Iterations, J_4, J2_4, K_3, Net_2, Outputs, S, Sum2_4, Target);
        _ -> {Hidden1_4, Hidden2_3, Inp, Inputs, Iter, Iterations, J_4, J2_3, K_3, Net_2, Outputs, S, Sum2_3, Target}
    end
end,
{Hidden1_4, Hidden2_3, Inp, Inputs, Iter, Iterations, J_4, J2_4, K_3, Net_2, Outputs, S, Sum2_4, Target} = Fun_9(Hidden1_4, Hidden2_3, Inp, Inputs, Iter, Iterations, J_4, J2_3, K_3, Net_2, Outputs, S, Sum2_3, Target),
            Hidden2_4 = lists:append((case Hidden2_3 of nil -> []; _ -> Hidden2_3 end), [sigmoid(Sum2_4)]),
            K_4 = (K_3 + 1),
            Fun_10_loop(Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, Net_2, Outputs, S, Target);
        _ -> {Hidden1_4, Hidden2_3, Inp, Inputs, Iter, Iterations, J_4, K_3, Net_2, Outputs, S, Target}
    end
end,
{Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, Net_2, Outputs, S, Target} = Fun_10(Hidden1_4, Hidden2_3, Inp, Inputs, Iter, Iterations, J_4, K_3, Net_2, Outputs, S, Target),
            Sum3_3 = 0.0,
            K3 = 0,
            Fun_11 = fun Fun_11_loop(Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3, Net_2, Outputs, S, Sum3_3, Target) ->
    case (K3 < 3) of
        true ->
            Sum3_4 = (Sum3_3 + mochi_safe_mul((case erlang:is_map(Hidden2_4) of true -> maps:get(K3, Hidden2_4, nil); _ -> case K3 < 0 of true -> mochi_nth(erlang:length(Hidden2_4) + K3 + 1, Hidden2_4); _ -> mochi_nth(K3 + 1, Hidden2_4) end end), (case erlang:is_map((case erlang:is_map(maps:get("w3", Net_2, nil)) of true -> maps:get(K3, maps:get("w3", Net_2, nil), nil); _ -> case K3 < 0 of true -> mochi_nth(erlang:length(maps:get("w3", Net_2, nil)) + K3 + 1, maps:get("w3", Net_2, nil)); _ -> mochi_nth(K3 + 1, maps:get("w3", Net_2, nil)) end end)) of true -> maps:get(0, (case erlang:is_map(maps:get("w3", Net_2, nil)) of true -> maps:get(K3, maps:get("w3", Net_2, nil), nil); _ -> case K3 < 0 of true -> mochi_nth(erlang:length(maps:get("w3", Net_2, nil)) + K3 + 1, maps:get("w3", Net_2, nil)); _ -> mochi_nth(K3 + 1, maps:get("w3", Net_2, nil)) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("w3", Net_2, nil)) of true -> maps:get(K3, maps:get("w3", Net_2, nil), nil); _ -> case K3 < 0 of true -> mochi_nth(erlang:length(maps:get("w3", Net_2, nil)) + K3 + 1, maps:get("w3", Net_2, nil)); _ -> mochi_nth(K3 + 1, maps:get("w3", Net_2, nil)) end end)) + 0 + 1, (case erlang:is_map(maps:get("w3", Net_2, nil)) of true -> maps:get(K3, maps:get("w3", Net_2, nil), nil); _ -> case K3 < 0 of true -> mochi_nth(erlang:length(maps:get("w3", Net_2, nil)) + K3 + 1, maps:get("w3", Net_2, nil)); _ -> mochi_nth(K3 + 1, maps:get("w3", Net_2, nil)) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(maps:get("w3", Net_2, nil)) of true -> maps:get(K3, maps:get("w3", Net_2, nil), nil); _ -> case K3 < 0 of true -> mochi_nth(erlang:length(maps:get("w3", Net_2, nil)) + K3 + 1, maps:get("w3", Net_2, nil)); _ -> mochi_nth(K3 + 1, maps:get("w3", Net_2, nil)) end end)) end end))),
            K3_2 = (K3 + 1),
            Fun_11_loop(Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3_2, Net_2, Outputs, S, Sum3_4, Target);
        _ -> {Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3, Net_2, Outputs, S, Sum3_3, Target}
    end
end,
{Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3_2, Net_2, Outputs, S, Sum3_4, Target} = Fun_11(Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3, Net_2, Outputs, S, Sum3_3, Target),
            Output = sigmoid(Sum3_4),
            Error = (Target - Output),
            Delta_output = mochi_safe_mul(Error, sigmoid_derivative(Output)),
            New_w3 = [],
            K4 = 0,
            Fun_12 = fun Fun_12_loop(Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3_2, K4, Net_2, New_w3, Output, Outputs, S, Sum3_4, Target) ->
    case (K4 < 3) of
        true ->
            W3row = (case erlang:is_map(maps:get("w3", Net_2, nil)) of true -> maps:get(K4, maps:get("w3", Net_2, nil), nil); _ -> case K4 < 0 of true -> mochi_nth(erlang:length(maps:get("w3", Net_2, nil)) + K4 + 1, maps:get("w3", Net_2, nil)); _ -> mochi_nth(K4 + 1, maps:get("w3", Net_2, nil)) end end),
            W3row_2 = lists:sublist(W3row, 0) ++ [((case erlang:is_map(W3row) of true -> maps:get(0, W3row, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(W3row) + 0 + 1, W3row); _ -> mochi_nth(0 + 1, W3row) end end) + mochi_safe_mul((case erlang:is_map(Hidden2_4) of true -> maps:get(K4, Hidden2_4, nil); _ -> case K4 < 0 of true -> mochi_nth(erlang:length(Hidden2_4) + K4 + 1, Hidden2_4); _ -> mochi_nth(K4 + 1, Hidden2_4) end end), Delta_output))] ++ lists:nthtail(0 + 1, W3row),
            New_w3_2 = lists:append((case New_w3 of nil -> []; _ -> New_w3 end), [W3row_2]),
            K4_2 = (K4 + 1),
            Fun_12_loop(Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3_2, K4_2, Net_2, New_w3_2, Output, Outputs, S, Sum3_4, Target);
        _ -> {Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3_2, K4, Net_2, New_w3, Output, Outputs, S, Sum3_4, Target}
    end
end,
{Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3_2, K4_2, Net_2, New_w3_2, Output, Outputs, S, Sum3_4, Target} = Fun_12(Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3_2, K4, Net_2, New_w3, Output, Outputs, S, Sum3_4, Target),
            Net_3 = maps:put("w3", New_w3_2, Net_2),
            Delta_hidden2 = [],
            K5 = 0,
            Fun_13 = fun Fun_13_loop(Delta_hidden2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3_2, K4_2, K5, Net_3, New_w3_2, Output, Outputs, S, Sum3_4, Target) ->
    case (K5 < 3) of
        true ->
            Row = (case erlang:is_map(maps:get("w3", Net_3, nil)) of true -> maps:get(K5, maps:get("w3", Net_3, nil), nil); _ -> case K5 < 0 of true -> mochi_nth(erlang:length(maps:get("w3", Net_3, nil)) + K5 + 1, maps:get("w3", Net_3, nil)); _ -> mochi_nth(K5 + 1, maps:get("w3", Net_3, nil)) end end),
            Dh2 = mochi_safe_mul(mochi_safe_mul((case erlang:is_map(Row) of true -> maps:get(0, Row, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Row) + 0 + 1, Row); _ -> mochi_nth(0 + 1, Row) end end), Delta_output), sigmoid_derivative((case erlang:is_map(Hidden2_4) of true -> maps:get(K5, Hidden2_4, nil); _ -> case K5 < 0 of true -> mochi_nth(erlang:length(Hidden2_4) + K5 + 1, Hidden2_4); _ -> mochi_nth(K5 + 1, Hidden2_4) end end))),
            Delta_hidden2_2 = lists:append((case Delta_hidden2 of nil -> []; _ -> Delta_hidden2 end), [Dh2]),
            K5_2 = (K5 + 1),
            Fun_13_loop(Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3_2, K4_2, K5_2, Net_3, New_w3_2, Output, Outputs, S, Sum3_4, Target);
        _ -> {Delta_hidden2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3_2, K4_2, K5, Net_3, New_w3_2, Output, Outputs, S, Sum3_4, Target}
    end
end,
{Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3_2, K4_2, K5_2, Net_3, New_w3_2, Output, Outputs, S, Sum3_4, Target} = Fun_13(Delta_hidden2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_4, K_4, K3_2, K4_2, K5, Net_3, New_w3_2, Output, Outputs, S, Sum3_4, Target),
            New_w2 = [],
            J_5 = 0,
            Fun_15 = fun Fun_15_loop(Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_5, K_4, K3_2, K4_2, K5_2, Net_3, New_w2, New_w3_2, Output, Outputs, S, Sum3_4, Target) ->
    case (J_5 < 4) of
        true ->
            W2row = (case erlang:is_map(maps:get("w2", Net_3, nil)) of true -> maps:get(J_5, maps:get("w2", Net_3, nil), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(maps:get("w2", Net_3, nil)) + J_5 + 1, maps:get("w2", Net_3, nil)); _ -> mochi_nth(J_5 + 1, maps:get("w2", Net_3, nil)) end end),
            K6 = 0,
            Fun_14 = fun Fun_14_loop(Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_5, K_4, K3_2, K4_2, K5_2, K6, Net_3, New_w2, New_w3_2, Output, Outputs, S, Sum3_4, Target, W2row) ->
    case (K6 < 3) of
        true ->
            W2row_2 = lists:sublist(W2row, K6) ++ [((case erlang:is_map(W2row) of true -> maps:get(K6, W2row, nil); _ -> case K6 < 0 of true -> mochi_nth(erlang:length(W2row) + K6 + 1, W2row); _ -> mochi_nth(K6 + 1, W2row) end end) + mochi_safe_mul((case erlang:is_map(Hidden1_4) of true -> maps:get(J_5, Hidden1_4, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Hidden1_4) + J_5 + 1, Hidden1_4); _ -> mochi_nth(J_5 + 1, Hidden1_4) end end), (case erlang:is_map(Delta_hidden2_2) of true -> maps:get(K6, Delta_hidden2_2, nil); _ -> case K6 < 0 of true -> mochi_nth(erlang:length(Delta_hidden2_2) + K6 + 1, Delta_hidden2_2); _ -> mochi_nth(K6 + 1, Delta_hidden2_2) end end)))] ++ lists:nthtail(K6 + 1, W2row),
            K6_2 = (K6 + 1),
            Fun_14_loop(Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_5, K_4, K3_2, K4_2, K5_2, K6_2, Net_3, New_w2, New_w3_2, Output, Outputs, S, Sum3_4, Target, W2row_2);
        _ -> {Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_5, K_4, K3_2, K4_2, K5_2, K6, Net_3, New_w2, New_w3_2, Output, Outputs, S, Sum3_4, Target, W2row}
    end
end,
{Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_5, K_4, K3_2, K4_2, K5_2, K6_2, Net_3, New_w2, New_w3_2, Output, Outputs, S, Sum3_4, Target, W2row_2} = Fun_14(Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_5, K_4, K3_2, K4_2, K5_2, K6, Net_3, New_w2, New_w3_2, Output, Outputs, S, Sum3_4, Target, W2row),
            New_w2_2 = lists:append((case New_w2 of nil -> []; _ -> New_w2 end), [W2row_2]),
            J_6 = (J_5 + 1),
            Fun_15_loop(Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_6, K_4, K3_2, K4_2, K5_2, Net_3, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target);
        _ -> {Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_5, K_4, K3_2, K4_2, K5_2, Net_3, New_w2, New_w3_2, Output, Outputs, S, Sum3_4, Target}
    end
end,
{Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_6, K_4, K3_2, K4_2, K5_2, Net_3, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target} = Fun_15(Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_5, K_4, K3_2, K4_2, K5_2, Net_3, New_w2, New_w3_2, Output, Outputs, S, Sum3_4, Target),
            Net_4 = maps:put("w2", New_w2_2, Net_3),
            Delta_hidden1 = [],
            J_7 = 0,
            Fun_17 = fun Fun_17_loop(Delta_hidden1, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_7, K_4, K3_2, K4_2, K5_2, Net_4, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target) ->
    case (J_7 < 4) of
        true ->
            Sumdh = 0.0,
            K7 = 0,
            Fun_16 = fun Fun_16_loop(Delta_hidden1, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_7, K_4, K3_2, K4_2, K5_2, K7, Net_4, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Sumdh, Target) ->
    case (K7 < 3) of
        true ->
            Row2 = (case erlang:is_map(maps:get("w2", Net_4, nil)) of true -> maps:get(J_7, maps:get("w2", Net_4, nil), nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(maps:get("w2", Net_4, nil)) + J_7 + 1, maps:get("w2", Net_4, nil)); _ -> mochi_nth(J_7 + 1, maps:get("w2", Net_4, nil)) end end),
            Sumdh_2 = (Sumdh + mochi_safe_mul((case erlang:is_map(Row2) of true -> maps:get(K7, Row2, nil); _ -> case K7 < 0 of true -> mochi_nth(erlang:length(Row2) + K7 + 1, Row2); _ -> mochi_nth(K7 + 1, Row2) end end), (case erlang:is_map(Delta_hidden2_2) of true -> maps:get(K7, Delta_hidden2_2, nil); _ -> case K7 < 0 of true -> mochi_nth(erlang:length(Delta_hidden2_2) + K7 + 1, Delta_hidden2_2); _ -> mochi_nth(K7 + 1, Delta_hidden2_2) end end))),
            K7_2 = (K7 + 1),
            Fun_16_loop(Delta_hidden1, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_7, K_4, K3_2, K4_2, K5_2, K7_2, Net_4, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Sumdh_2, Target);
        _ -> {Delta_hidden1, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_7, K_4, K3_2, K4_2, K5_2, K7, Net_4, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Sumdh, Target}
    end
end,
{Delta_hidden1, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_7, K_4, K3_2, K4_2, K5_2, K7_2, Net_4, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Sumdh_2, Target} = Fun_16(Delta_hidden1, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_7, K_4, K3_2, K4_2, K5_2, K7, Net_4, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Sumdh, Target),
            Delta_hidden1_2 = lists:append((case Delta_hidden1 of nil -> []; _ -> Delta_hidden1 end), [mochi_safe_mul(Sumdh_2, sigmoid_derivative((case erlang:is_map(Hidden1_4) of true -> maps:get(J_7, Hidden1_4, nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length(Hidden1_4) + J_7 + 1, Hidden1_4); _ -> mochi_nth(J_7 + 1, Hidden1_4) end end)))]),
            J_8 = (J_7 + 1),
            Fun_17_loop(Delta_hidden1_2, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_8, K_4, K3_2, K4_2, K5_2, Net_4, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target);
        _ -> {Delta_hidden1, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_7, K_4, K3_2, K4_2, K5_2, Net_4, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target}
    end
end,
{Delta_hidden1_2, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_8, K_4, K3_2, K4_2, K5_2, Net_4, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target} = Fun_17(Delta_hidden1, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, Inp, Inputs, Iter, Iterations, J_7, K_4, K3_2, K4_2, K5_2, Net_4, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target),
            New_w1 = [],
            I2 = 0,
            Fun_19 = fun Fun_19_loop(Delta_hidden1_2, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, I2, Inp, Inputs, Iter, Iterations, J_8, K_4, K3_2, K4_2, K5_2, Net_4, New_w1, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target) ->
    case (I2 < 3) of
        true ->
            W1row = (case erlang:is_map(maps:get("w1", Net_4, nil)) of true -> maps:get(I2, maps:get("w1", Net_4, nil), nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(maps:get("w1", Net_4, nil)) + I2 + 1, maps:get("w1", Net_4, nil)); _ -> mochi_nth(I2 + 1, maps:get("w1", Net_4, nil)) end end),
            J_9 = 0,
            Fun_18 = fun Fun_18_loop(Delta_hidden1_2, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, I2, Inp, Inputs, Iter, Iterations, J_9, K_4, K3_2, K4_2, K5_2, Net_4, New_w1, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target, W1row) ->
    case (J_9 < 4) of
        true ->
            W1row_2 = lists:sublist(W1row, J_9) ++ [((case erlang:is_map(W1row) of true -> maps:get(J_9, W1row, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(W1row) + J_9 + 1, W1row); _ -> mochi_nth(J_9 + 1, W1row) end end) + mochi_safe_mul((case erlang:is_map(Inp) of true -> maps:get(I2, Inp, nil); _ -> case I2 < 0 of true -> mochi_nth(erlang:length(Inp) + I2 + 1, Inp); _ -> mochi_nth(I2 + 1, Inp) end end), (case erlang:is_map(Delta_hidden1_2) of true -> maps:get(J_9, Delta_hidden1_2, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(Delta_hidden1_2) + J_9 + 1, Delta_hidden1_2); _ -> mochi_nth(J_9 + 1, Delta_hidden1_2) end end)))] ++ lists:nthtail(J_9 + 1, W1row),
            J_10 = (J_9 + 1),
            Fun_18_loop(Delta_hidden1_2, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, I2, Inp, Inputs, Iter, Iterations, J_10, K_4, K3_2, K4_2, K5_2, Net_4, New_w1, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target, W1row_2);
        _ -> {Delta_hidden1_2, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, I2, Inp, Inputs, Iter, Iterations, J_9, K_4, K3_2, K4_2, K5_2, Net_4, New_w1, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target, W1row}
    end
end,
{Delta_hidden1_2, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, I2, Inp, Inputs, Iter, Iterations, J_10, K_4, K3_2, K4_2, K5_2, Net_4, New_w1, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target, W1row_2} = Fun_18(Delta_hidden1_2, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, I2, Inp, Inputs, Iter, Iterations, J_9, K_4, K3_2, K4_2, K5_2, Net_4, New_w1, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target, W1row),
            New_w1_2 = lists:append((case New_w1 of nil -> []; _ -> New_w1 end), [W1row_2]),
            I2_2 = (I2 + 1),
            Fun_19_loop(Delta_hidden1_2, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, I2_2, Inp, Inputs, Iter, Iterations, J_10, K_4, K3_2, K4_2, K5_2, Net_4, New_w1_2, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target);
        _ -> {Delta_hidden1_2, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, I2, Inp, Inputs, Iter, Iterations, J_8, K_4, K3_2, K4_2, K5_2, Net_4, New_w1, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target}
    end
end,
{Delta_hidden1_2, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, I2_2, Inp, Inputs, Iter, Iterations, J_10, K_4, K3_2, K4_2, K5_2, Net_4, New_w1_2, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target} = Fun_19(Delta_hidden1_2, Delta_hidden2_2, Delta_output, Error, Hidden1_4, Hidden2_4, I2, Inp, Inputs, Iter, Iterations, J_8, K_4, K3_2, K4_2, K5_2, Net_4, New_w1, New_w2_2, New_w3_2, Output, Outputs, S, Sum3_4, Target),
            Net_5 = maps:put("w1", New_w1_2, Net_4),
            S_2 = (S + 1),
            Fun_20_loop(Inputs, Iter, Iterations, Net_5, Outputs, S_2);
        _ -> {Inputs, Iter, Iterations, Net_2, Outputs, S}
    end
end,
{Inputs, Iter, Iterations, Net_5, Outputs, S_2} = Fun_20(Inputs, Iter, Iterations, Net_2, Outputs, S),
            Iter_2 = (Iter + 1),
            Fun_21_loop(Inputs, Iter_2, Iterations, Net_5, Outputs);
        _ -> {Inputs, Iter, Iterations, Net_2, Outputs}
    end
end,
{Inputs, Iter_2, Iterations, Net_5, Outputs} = Fun_21(Inputs, Iter, Iterations, Net_2, Outputs),
        {nil, Net_5}
    catch {return, RetCatch} -> RetCatch end.

predict(Net_6, Input_2) ->
    try
        Out_2 = feedforward(Net_6, Input_2),
        case (Out_2 > 0.6) of
        true -> throw({return, 1});
        _ -> ok
    end,
        0
    catch {return, RetCatch} -> RetCatch end.

example() ->
    try
        Inputs_2 = [[0.0, 0.0, 0.0], [0.0, 0.0, 1.0], [0.0, 1.0, 0.0], [0.0, 1.0, 1.0], [1.0, 0.0, 0.0], [1.0, 0.0, 1.0], [1.0, 1.0, 0.0], [1.0, 1.0, 1.0]],
        Outputs_2 = [0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0],
        Net_7 = new_network(),
        Net_res = train(Net_7, Inputs_2, Outputs_2, 10),
        Net_tmp = element(2, Net_res),
        Net_7 = Net_tmp,
        Result = predict(Net_7, [1.0, 1.0, 1.0]),
        io:format("~ts~n", [mochi_str(Result)]),
        Result
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        example(),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
