#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, random/0, sigmoid/1, to_float/1, exp/1, convolve/4, average_pool/2, flatten/1, vec_mul_mat/2, matt_vec_mul/2, vec_add/2, vec_sub/2, vec_mul/2, vec_map_sig/1, new_cnn/0, forward/2, train/3, main/0]).

% Generated by Mochi transpiler v0.10.64 (1dced96c32) on 2025-08-12 13:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

random() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 13) + 7), 100)),
        mochi_safe_div(float(erlang:get('seed')), 100.0)
    catch {return, RetCatch} -> RetCatch end.

sigmoid(X) ->
    try
        mochi_safe_div(1.0, (1.0 + exp(-X)))
    catch {return, RetCatch} -> RetCatch end.

to_float(X_2) ->
    try
        mochi_safe_mul(X_2, 1.0)
    catch {return, RetCatch} -> RetCatch end.

exp(X_3) ->
    try
        Term = 1.0,
        Sum = 1.0,
        N = 1,
        Fun = fun Fun_loop(N, Sum, Term, X_3) ->
    case (N < 20) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X_3), to_float(N)),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(N_2, Sum_2, Term_2, X_3);
        _ -> {N, Sum, Term, X_3}
    end
end,
{N_2, Sum_2, Term_2, X_3} = Fun(N, Sum, Term, X_3),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

convolve(Data, Kernel, Step, Bias) ->
    try
        Size_data = erlang:length(Data),
        Size_kernel = erlang:length(Kernel),
        Out = [],
        I = 0,
        Fun_5 = fun Fun_5_loop(Bias, Data, I, Kernel, Out, Size_data, Size_kernel, Step) ->
    case (I =< (Size_data - Size_kernel)) of
        true ->
            Row = [],
            J = 0,
            Fun_4 = fun Fun_4_loop(Bias, Data, I, J, Kernel, Out, Row, Size_data, Size_kernel, Step) ->
    case (J =< (Size_data - Size_kernel)) of
        true ->
            Sum_3 = 0.0,
            A = 0,
            Fun_3 = fun Fun_3_loop(A, Bias, Data, I, J, Kernel, Out, Row, Size_data, Size_kernel, Step, Sum_3) ->
    case (A < Size_kernel) of
        true ->
            B = 0,
            Fun_2 = fun Fun_2_loop(A, B, Bias, Data, I, J, Kernel, Out, Row, Size_data, Size_kernel, Step, Sum_3) ->
    case (B < Size_kernel) of
        true ->
            Sum_4 = (Sum_3 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(Data) of true -> maps:get((I + A), Data, nil); _ -> case (I + A) < 0 of true -> mochi_nth(erlang:length(Data) + (I + A) + 1, Data); _ -> mochi_nth((I + A) + 1, Data) end end)) of true -> maps:get((J + B), (case erlang:is_map(Data) of true -> maps:get((I + A), Data, nil); _ -> case (I + A) < 0 of true -> mochi_nth(erlang:length(Data) + (I + A) + 1, Data); _ -> mochi_nth((I + A) + 1, Data) end end), nil); _ -> case (J + B) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Data) of true -> maps:get((I + A), Data, nil); _ -> case (I + A) < 0 of true -> mochi_nth(erlang:length(Data) + (I + A) + 1, Data); _ -> mochi_nth((I + A) + 1, Data) end end)) + (J + B) + 1, (case erlang:is_map(Data) of true -> maps:get((I + A), Data, nil); _ -> case (I + A) < 0 of true -> mochi_nth(erlang:length(Data) + (I + A) + 1, Data); _ -> mochi_nth((I + A) + 1, Data) end end)); _ -> mochi_nth((J + B) + 1, (case erlang:is_map(Data) of true -> maps:get((I + A), Data, nil); _ -> case (I + A) < 0 of true -> mochi_nth(erlang:length(Data) + (I + A) + 1, Data); _ -> mochi_nth((I + A) + 1, Data) end end)) end end), (case erlang:is_map((case erlang:is_map(Kernel) of true -> maps:get(A, Kernel, nil); _ -> case A < 0 of true -> mochi_nth(erlang:length(Kernel) + A + 1, Kernel); _ -> mochi_nth(A + 1, Kernel) end end)) of true -> maps:get(B, (case erlang:is_map(Kernel) of true -> maps:get(A, Kernel, nil); _ -> case A < 0 of true -> mochi_nth(erlang:length(Kernel) + A + 1, Kernel); _ -> mochi_nth(A + 1, Kernel) end end), nil); _ -> case B < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Kernel) of true -> maps:get(A, Kernel, nil); _ -> case A < 0 of true -> mochi_nth(erlang:length(Kernel) + A + 1, Kernel); _ -> mochi_nth(A + 1, Kernel) end end)) + B + 1, (case erlang:is_map(Kernel) of true -> maps:get(A, Kernel, nil); _ -> case A < 0 of true -> mochi_nth(erlang:length(Kernel) + A + 1, Kernel); _ -> mochi_nth(A + 1, Kernel) end end)); _ -> mochi_nth(B + 1, (case erlang:is_map(Kernel) of true -> maps:get(A, Kernel, nil); _ -> case A < 0 of true -> mochi_nth(erlang:length(Kernel) + A + 1, Kernel); _ -> mochi_nth(A + 1, Kernel) end end)) end end))),
            B_2 = (B + 1),
            Fun_2_loop(A, B_2, Bias, Data, I, J, Kernel, Out, Row, Size_data, Size_kernel, Step, Sum_4);
        _ -> {A, B, Bias, Data, I, J, Kernel, Out, Row, Size_data, Size_kernel, Step, Sum_3}
    end
end,
{A, B_2, Bias, Data, I, J, Kernel, Out, Row, Size_data, Size_kernel, Step, Sum_4} = Fun_2(A, B, Bias, Data, I, J, Kernel, Out, Row, Size_data, Size_kernel, Step, Sum_3),
            A_2 = (A + 1),
            Fun_3_loop(A_2, Bias, Data, I, J, Kernel, Out, Row, Size_data, Size_kernel, Step, Sum_4);
        _ -> {A, Bias, Data, I, J, Kernel, Out, Row, Size_data, Size_kernel, Step, Sum_3}
    end
end,
{A_2, Bias, Data, I, J, Kernel, Out, Row, Size_data, Size_kernel, Step, Sum_4} = Fun_3(A, Bias, Data, I, J, Kernel, Out, Row, Size_data, Size_kernel, Step, Sum_3),
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [sigmoid((Sum_4 - Bias))]),
            J_2 = (J + Step),
            Fun_4_loop(Bias, Data, I, J_2, Kernel, Out, Row_2, Size_data, Size_kernel, Step);
        _ -> {Bias, Data, I, J, Kernel, Out, Row, Size_data, Size_kernel, Step}
    end
end,
{Bias, Data, I, J_2, Kernel, Out, Row_2, Size_data, Size_kernel, Step} = Fun_4(Bias, Data, I, J, Kernel, Out, Row, Size_data, Size_kernel, Step),
            Out_2 = lists:append((case Out of nil -> []; _ -> Out end), [Row_2]),
            I_2 = (I + Step),
            Fun_5_loop(Bias, Data, I_2, Kernel, Out_2, Size_data, Size_kernel, Step);
        _ -> {Bias, Data, I, Kernel, Out, Size_data, Size_kernel, Step}
    end
end,
{Bias, Data, I_2, Kernel, Out_2, Size_data, Size_kernel, Step} = Fun_5(Bias, Data, I, Kernel, Out, Size_data, Size_kernel, Step),
        Out_2
    catch {return, RetCatch} -> RetCatch end.

average_pool(Map, Size) ->
    try
        Out_3 = [],
        I_3 = 0,
        Fun_9 = fun Fun_9_loop(I_3, Map, Out_3, Size) ->
    case (I_3 < erlang:length(Map)) of
        true ->
            Row_3 = [],
            J_3 = 0,
            Fun_8 = fun Fun_8_loop(I_3, J_3, Map, Out_3, Row_3, Size) ->
    case (J_3 < erlang:length((case erlang:is_map(Map) of true -> maps:get(I_3, Map, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Map) + I_3 + 1, Map); _ -> mochi_nth(I_3 + 1, Map) end end))) of
        true ->
            Sum_5 = 0.0,
            A_3 = 0,
            Fun_7 = fun Fun_7_loop(A_3, I_3, J_3, Map, Out_3, Row_3, Size, Sum_5) ->
    case (A_3 < Size) of
        true ->
            B_3 = 0,
            Fun_6 = fun Fun_6_loop(A_3, B_3, I_3, J_3, Map, Out_3, Row_3, Size, Sum_5) ->
    case (B_3 < Size) of
        true ->
            Sum_6 = (Sum_5 + (case erlang:is_map((case erlang:is_map(Map) of true -> maps:get((I_3 + A_3), Map, nil); _ -> case (I_3 + A_3) < 0 of true -> mochi_nth(erlang:length(Map) + (I_3 + A_3) + 1, Map); _ -> mochi_nth((I_3 + A_3) + 1, Map) end end)) of true -> maps:get((J_3 + B_3), (case erlang:is_map(Map) of true -> maps:get((I_3 + A_3), Map, nil); _ -> case (I_3 + A_3) < 0 of true -> mochi_nth(erlang:length(Map) + (I_3 + A_3) + 1, Map); _ -> mochi_nth((I_3 + A_3) + 1, Map) end end), nil); _ -> case (J_3 + B_3) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Map) of true -> maps:get((I_3 + A_3), Map, nil); _ -> case (I_3 + A_3) < 0 of true -> mochi_nth(erlang:length(Map) + (I_3 + A_3) + 1, Map); _ -> mochi_nth((I_3 + A_3) + 1, Map) end end)) + (J_3 + B_3) + 1, (case erlang:is_map(Map) of true -> maps:get((I_3 + A_3), Map, nil); _ -> case (I_3 + A_3) < 0 of true -> mochi_nth(erlang:length(Map) + (I_3 + A_3) + 1, Map); _ -> mochi_nth((I_3 + A_3) + 1, Map) end end)); _ -> mochi_nth((J_3 + B_3) + 1, (case erlang:is_map(Map) of true -> maps:get((I_3 + A_3), Map, nil); _ -> case (I_3 + A_3) < 0 of true -> mochi_nth(erlang:length(Map) + (I_3 + A_3) + 1, Map); _ -> mochi_nth((I_3 + A_3) + 1, Map) end end)) end end)),
            B_4 = (B_3 + 1),
            Fun_6_loop(A_3, B_4, I_3, J_3, Map, Out_3, Row_3, Size, Sum_6);
        _ -> {A_3, B_3, I_3, J_3, Map, Out_3, Row_3, Size, Sum_5}
    end
end,
{A_3, B_4, I_3, J_3, Map, Out_3, Row_3, Size, Sum_6} = Fun_6(A_3, B_3, I_3, J_3, Map, Out_3, Row_3, Size, Sum_5),
            A_4 = (A_3 + 1),
            Fun_7_loop(A_4, I_3, J_3, Map, Out_3, Row_3, Size, Sum_6);
        _ -> {A_3, I_3, J_3, Map, Out_3, Row_3, Size, Sum_5}
    end
end,
{A_4, I_3, J_3, Map, Out_3, Row_3, Size, Sum_6} = Fun_7(A_3, I_3, J_3, Map, Out_3, Row_3, Size, Sum_5),
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [mochi_safe_div(Sum_6, float((Size * Size)))]),
            J_4 = (J_3 + Size),
            Fun_8_loop(I_3, J_4, Map, Out_3, Row_4, Size);
        _ -> {I_3, J_3, Map, Out_3, Row_3, Size}
    end
end,
{I_3, J_4, Map, Out_3, Row_4, Size} = Fun_8(I_3, J_3, Map, Out_3, Row_3, Size),
            Out_4 = lists:append((case Out_3 of nil -> []; _ -> Out_3 end), [Row_4]),
            I_4 = (I_3 + Size),
            Fun_9_loop(I_4, Map, Out_4, Size);
        _ -> {I_3, Map, Out_3, Size}
    end
end,
{I_4, Map, Out_4, Size} = Fun_9(I_3, Map, Out_3, Size),
        Out_4
    catch {return, RetCatch} -> RetCatch end.

flatten(Maps) ->
    try
        Out_5 = [],
        I_5 = 0,
        Fun_12 = fun Fun_12_loop(I_5, Maps, Out_5) ->
    case (I_5 < erlang:length(Maps)) of
        true ->
            J_5 = 0,
            Fun_11 = fun Fun_11_loop(I_5, J_5, Maps, Out_5) ->
    case (J_5 < erlang:length((case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end))) of
        true ->
            K = 0,
            Fun_10 = fun Fun_10_loop(I_5, J_5, K, Maps, Out_5) ->
    case (K < erlang:length((case erlang:is_map((case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) of true -> maps:get(J_5, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) + J_5 + 1, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) end end))) of
        true ->
            Out_6 = lists:append((case Out_5 of nil -> []; _ -> Out_5 end), [(case erlang:is_map((case erlang:is_map((case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) of true -> maps:get(J_5, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) + J_5 + 1, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) end end)) of true -> maps:get(K, (case erlang:is_map((case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) of true -> maps:get(J_5, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) + J_5 + 1, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map((case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) of true -> maps:get(J_5, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) + J_5 + 1, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) end end)) + K + 1, (case erlang:is_map((case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) of true -> maps:get(J_5, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) + J_5 + 1, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map((case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) of true -> maps:get(J_5, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) + J_5 + 1, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(Maps) of true -> maps:get(I_5, Maps, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Maps) + I_5 + 1, Maps); _ -> mochi_nth(I_5 + 1, Maps) end end)) end end)) end end)]),
            K_2 = (K + 1),
            Fun_10_loop(I_5, J_5, K_2, Maps, Out_6);
        _ -> {I_5, J_5, K, Maps, Out_5}
    end
end,
{I_5, J_5, K_2, Maps, Out_6} = Fun_10(I_5, J_5, K, Maps, Out_5),
            J_6 = (J_5 + 1),
            Fun_11_loop(I_5, J_6, Maps, Out_6);
        _ -> {I_5, J_5, Maps, Out_5}
    end
end,
{I_5, J_6, Maps, Out_6} = Fun_11(I_5, J_5, Maps, Out_5),
            I_6 = (I_5 + 1),
            Fun_12_loop(I_6, Maps, Out_6);
        _ -> {I_5, Maps, Out_5}
    end
end,
{I_6, Maps, Out_6} = Fun_12(I_5, Maps, Out_5),
        Out_6
    catch {return, RetCatch} -> RetCatch end.

vec_mul_mat(V, M) ->
    try
        Cols = erlang:length((case erlang:is_map(M) of true -> maps:get(0, M, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(M) + 0 + 1, M); _ -> mochi_nth(0 + 1, M) end end)),
        Res = [],
        J_7 = 0,
        Fun_14 = fun Fun_14_loop(Cols, J_7, M, Res, V) ->
    case (J_7 < Cols) of
        true ->
            Sum_7 = 0.0,
            I_7 = 0,
            Fun_13 = fun Fun_13_loop(Cols, I_7, J_7, M, Res, Sum_7, V) ->
    case (I_7 < erlang:length(V)) of
        true ->
            Sum_8 = (Sum_7 + mochi_safe_mul((case erlang:is_map(V) of true -> maps:get(I_7, V, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(V) + I_7 + 1, V); _ -> mochi_nth(I_7 + 1, V) end end), (case erlang:is_map((case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end)) of true -> maps:get(J_7, (case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end), nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end)) + J_7 + 1, (case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end)); _ -> mochi_nth(J_7 + 1, (case erlang:is_map(M) of true -> maps:get(I_7, M, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(M) + I_7 + 1, M); _ -> mochi_nth(I_7 + 1, M) end end)) end end))),
            I_8 = (I_7 + 1),
            Fun_13_loop(Cols, I_8, J_7, M, Res, Sum_8, V);
        _ -> {Cols, I_7, J_7, M, Res, Sum_7, V}
    end
end,
{Cols, I_8, J_7, M, Res, Sum_8, V} = Fun_13(Cols, I_7, J_7, M, Res, Sum_7, V),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Sum_8]),
            J_8 = (J_7 + 1),
            Fun_14_loop(Cols, J_8, M, Res_2, V);
        _ -> {Cols, J_7, M, Res, V}
    end
end,
{Cols, J_8, M, Res_2, V} = Fun_14(Cols, J_7, M, Res, V),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

matt_vec_mul(M_2, V_2) ->
    try
        Res_3 = [],
        I_9 = 0,
        Fun_16 = fun Fun_16_loop(I_9, M_2, Res_3, V_2) ->
    case (I_9 < erlang:length(M_2)) of
        true ->
            Sum_9 = 0.0,
            J_9 = 0,
            Fun_15 = fun Fun_15_loop(I_9, J_9, M_2, Res_3, Sum_9, V_2) ->
    case (J_9 < erlang:length((case erlang:is_map(M_2) of true -> maps:get(I_9, M_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(M_2) + I_9 + 1, M_2); _ -> mochi_nth(I_9 + 1, M_2) end end))) of
        true ->
            Sum_10 = (Sum_9 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(M_2) of true -> maps:get(I_9, M_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(M_2) + I_9 + 1, M_2); _ -> mochi_nth(I_9 + 1, M_2) end end)) of true -> maps:get(J_9, (case erlang:is_map(M_2) of true -> maps:get(I_9, M_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(M_2) + I_9 + 1, M_2); _ -> mochi_nth(I_9 + 1, M_2) end end), nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(M_2) of true -> maps:get(I_9, M_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(M_2) + I_9 + 1, M_2); _ -> mochi_nth(I_9 + 1, M_2) end end)) + J_9 + 1, (case erlang:is_map(M_2) of true -> maps:get(I_9, M_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(M_2) + I_9 + 1, M_2); _ -> mochi_nth(I_9 + 1, M_2) end end)); _ -> mochi_nth(J_9 + 1, (case erlang:is_map(M_2) of true -> maps:get(I_9, M_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(M_2) + I_9 + 1, M_2); _ -> mochi_nth(I_9 + 1, M_2) end end)) end end), (case erlang:is_map(V_2) of true -> maps:get(J_9, V_2, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(V_2) + J_9 + 1, V_2); _ -> mochi_nth(J_9 + 1, V_2) end end))),
            J_10 = (J_9 + 1),
            Fun_15_loop(I_9, J_10, M_2, Res_3, Sum_10, V_2);
        _ -> {I_9, J_9, M_2, Res_3, Sum_9, V_2}
    end
end,
{I_9, J_10, M_2, Res_3, Sum_10, V_2} = Fun_15(I_9, J_9, M_2, Res_3, Sum_9, V_2),
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Sum_10]),
            I_10 = (I_9 + 1),
            Fun_16_loop(I_10, M_2, Res_4, V_2);
        _ -> {I_9, M_2, Res_3, V_2}
    end
end,
{I_10, M_2, Res_4, V_2} = Fun_16(I_9, M_2, Res_3, V_2),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

vec_add(A_5, B_5) ->
    try
        Res_5 = [],
        I_11 = 0,
        Fun_17 = fun Fun_17_loop(A_5, B_5, I_11, Res_5) ->
    case (I_11 < erlang:length(A_5)) of
        true ->
            Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [((case erlang:is_map(A_5) of true -> maps:get(I_11, A_5, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(A_5) + I_11 + 1, A_5); _ -> mochi_nth(I_11 + 1, A_5) end end) + (case erlang:is_map(B_5) of true -> maps:get(I_11, B_5, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(B_5) + I_11 + 1, B_5); _ -> mochi_nth(I_11 + 1, B_5) end end))]),
            I_12 = (I_11 + 1),
            Fun_17_loop(A_5, B_5, I_12, Res_6);
        _ -> {A_5, B_5, I_11, Res_5}
    end
end,
{A_5, B_5, I_12, Res_6} = Fun_17(A_5, B_5, I_11, Res_5),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

vec_sub(A_6, B_6) ->
    try
        Res_7 = [],
        I_13 = 0,
        Fun_18 = fun Fun_18_loop(A_6, B_6, I_13, Res_7) ->
    case (I_13 < erlang:length(A_6)) of
        true ->
            Res_8 = lists:append((case Res_7 of nil -> []; _ -> Res_7 end), [((case erlang:is_map(A_6) of true -> maps:get(I_13, A_6, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(A_6) + I_13 + 1, A_6); _ -> mochi_nth(I_13 + 1, A_6) end end) - (case erlang:is_map(B_6) of true -> maps:get(I_13, B_6, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(B_6) + I_13 + 1, B_6); _ -> mochi_nth(I_13 + 1, B_6) end end))]),
            I_14 = (I_13 + 1),
            Fun_18_loop(A_6, B_6, I_14, Res_8);
        _ -> {A_6, B_6, I_13, Res_7}
    end
end,
{A_6, B_6, I_14, Res_8} = Fun_18(A_6, B_6, I_13, Res_7),
        Res_8
    catch {return, RetCatch} -> RetCatch end.

vec_mul(A_7, B_7) ->
    try
        Res_9 = [],
        I_15 = 0,
        Fun_19 = fun Fun_19_loop(A_7, B_7, I_15, Res_9) ->
    case (I_15 < erlang:length(A_7)) of
        true ->
            Res_10 = lists:append((case Res_9 of nil -> []; _ -> Res_9 end), [mochi_safe_mul((case erlang:is_map(A_7) of true -> maps:get(I_15, A_7, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(A_7) + I_15 + 1, A_7); _ -> mochi_nth(I_15 + 1, A_7) end end), (case erlang:is_map(B_7) of true -> maps:get(I_15, B_7, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(B_7) + I_15 + 1, B_7); _ -> mochi_nth(I_15 + 1, B_7) end end))]),
            I_16 = (I_15 + 1),
            Fun_19_loop(A_7, B_7, I_16, Res_10);
        _ -> {A_7, B_7, I_15, Res_9}
    end
end,
{A_7, B_7, I_16, Res_10} = Fun_19(A_7, B_7, I_15, Res_9),
        Res_10
    catch {return, RetCatch} -> RetCatch end.

vec_map_sig(V_3) ->
    try
        Res_11 = [],
        I_17 = 0,
        Fun_20 = fun Fun_20_loop(I_17, Res_11, V_3) ->
    case (I_17 < erlang:length(V_3)) of
        true ->
            Res_12 = lists:append((case Res_11 of nil -> []; _ -> Res_11 end), [sigmoid((case erlang:is_map(V_3) of true -> maps:get(I_17, V_3, nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(V_3) + I_17 + 1, V_3); _ -> mochi_nth(I_17 + 1, V_3) end end))]),
            I_18 = (I_17 + 1),
            Fun_20_loop(I_18, Res_12, V_3);
        _ -> {I_17, Res_11, V_3}
    end
end,
{I_18, Res_12, V_3} = Fun_20(I_17, Res_11, V_3),
        Res_12
    catch {return, RetCatch} -> RetCatch end.

new_cnn() ->
    try
        K1 = [[1.0, 0.0], [0.0, 1.0]],
        K2 = [[0.0, 1.0], [1.0, 0.0]],
        Conv_kernels = [K1, K2],
        Conv_bias = [0.0, 0.0],
        Conv_step = 2,
        Pool_size = 2,
        Input_size = 2,
        Hidden_size = 2,
        Output_size = 2,
        W_hidden = [],
        I_19 = 0,
        Fun_22 = fun Fun_22_loop(Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_19, Input_size, K1, K2, Output_size, Pool_size, W_hidden) ->
    case (I_19 < Input_size) of
        true ->
            Row_5 = [],
            J_11 = 0,
            Fun_21 = fun Fun_21_loop(Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_19, Input_size, J_11, K1, K2, Output_size, Pool_size, Row_5, W_hidden) ->
    case (J_11 < Hidden_size) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [(random() - 0.5)]),
            J_12 = (J_11 + 1),
            Fun_21_loop(Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_19, Input_size, J_12, K1, K2, Output_size, Pool_size, Row_6, W_hidden);
        _ -> {Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_19, Input_size, J_11, K1, K2, Output_size, Pool_size, Row_5, W_hidden}
    end
end,
{Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_19, Input_size, J_12, K1, K2, Output_size, Pool_size, Row_6, W_hidden} = Fun_21(Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_19, Input_size, J_11, K1, K2, Output_size, Pool_size, Row_5, W_hidden),
            W_hidden_2 = lists:append((case W_hidden of nil -> []; _ -> W_hidden end), [Row_6]),
            I_20 = (I_19 + 1),
            Fun_22_loop(Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_20, Input_size, K1, K2, Output_size, Pool_size, W_hidden_2);
        _ -> {Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_19, Input_size, K1, K2, Output_size, Pool_size, W_hidden}
    end
end,
{Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_20, Input_size, K1, K2, Output_size, Pool_size, W_hidden_2} = Fun_22(Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_19, Input_size, K1, K2, Output_size, Pool_size, W_hidden),
        W_out = [],
        I_21 = 0,
        Fun_24 = fun Fun_24_loop(Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_21, Input_size, K1, K2, Output_size, Pool_size, W_hidden_2, W_out) ->
    case (I_21 < Hidden_size) of
        true ->
            Row_7 = [],
            J_13 = 0,
            Fun_23 = fun Fun_23_loop(Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_21, Input_size, J_13, K1, K2, Output_size, Pool_size, Row_7, W_hidden_2, W_out) ->
    case (J_13 < Output_size) of
        true ->
            Row_8 = lists:append((case Row_7 of nil -> []; _ -> Row_7 end), [(random() - 0.5)]),
            J_14 = (J_13 + 1),
            Fun_23_loop(Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_21, Input_size, J_14, K1, K2, Output_size, Pool_size, Row_8, W_hidden_2, W_out);
        _ -> {Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_21, Input_size, J_13, K1, K2, Output_size, Pool_size, Row_7, W_hidden_2, W_out}
    end
end,
{Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_21, Input_size, J_14, K1, K2, Output_size, Pool_size, Row_8, W_hidden_2, W_out} = Fun_23(Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_21, Input_size, J_13, K1, K2, Output_size, Pool_size, Row_7, W_hidden_2, W_out),
            W_out_2 = lists:append((case W_out of nil -> []; _ -> W_out end), [Row_8]),
            I_22 = (I_21 + 1),
            Fun_24_loop(Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_22, Input_size, K1, K2, Output_size, Pool_size, W_hidden_2, W_out_2);
        _ -> {Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_21, Input_size, K1, K2, Output_size, Pool_size, W_hidden_2, W_out}
    end
end,
{Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_22, Input_size, K1, K2, Output_size, Pool_size, W_hidden_2, W_out_2} = Fun_24(Conv_bias, Conv_kernels, Conv_step, Hidden_size, I_21, Input_size, K1, K2, Output_size, Pool_size, W_hidden_2, W_out),
        B_hidden = [0.0, 0.0],
        B_out = [0.0, 0.0],
        #{"conv_kernels" => Conv_kernels, "conv_bias" => Conv_bias, "conv_step" => Conv_step, "pool_size" => Pool_size, "w_hidden" => W_hidden_2, "w_out" => W_out_2, "b_hidden" => B_hidden, "b_out" => B_out, "rate_weight" => 0.2, "rate_bias" => 0.2}
    catch {return, RetCatch} -> RetCatch end.

forward(Cnn, Data_2) ->
    try
        Maps_2 = [],
        I_23 = 0,
        Fun_25 = fun Fun_25_loop(Cnn, Data_2, I_23, Maps_2) ->
    case (I_23 < erlang:length(maps:get("conv_kernels", Cnn, nil))) of
        true ->
            Conv_map = convolve(Data_2, (case erlang:is_map(maps:get("conv_kernels", Cnn, nil)) of true -> maps:get(I_23, maps:get("conv_kernels", Cnn, nil), nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(maps:get("conv_kernels", Cnn, nil)) + I_23 + 1, maps:get("conv_kernels", Cnn, nil)); _ -> mochi_nth(I_23 + 1, maps:get("conv_kernels", Cnn, nil)) end end), maps:get("conv_step", Cnn, nil), (case erlang:is_map(maps:get("conv_bias", Cnn, nil)) of true -> maps:get(I_23, maps:get("conv_bias", Cnn, nil), nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(maps:get("conv_bias", Cnn, nil)) + I_23 + 1, maps:get("conv_bias", Cnn, nil)); _ -> mochi_nth(I_23 + 1, maps:get("conv_bias", Cnn, nil)) end end)),
            Pooled = average_pool(Conv_map, maps:get("pool_size", Cnn, nil)),
            Maps_3 = lists:append((case Maps_2 of nil -> []; _ -> Maps_2 end), [Pooled]),
            I_24 = (I_23 + 1),
            Fun_25_loop(Cnn, Data_2, I_24, Maps_3);
        _ -> {Cnn, Data_2, I_23, Maps_2}
    end
end,
{Cnn, Data_2, I_24, Maps_3} = Fun_25(Cnn, Data_2, I_23, Maps_2),
        Flat = flatten(Maps_3),
        Hidden_net = vec_add(vec_mul_mat(Flat, maps:get("w_hidden", Cnn, nil)), maps:get("b_hidden", Cnn, nil)),
        Hidden_out = vec_map_sig(Hidden_net),
        Out_net = vec_add(vec_mul_mat(Hidden_out, maps:get("w_out", Cnn, nil)), maps:get("b_out", Cnn, nil)),
        Out_7 = vec_map_sig(Out_net),
        Out_7
    catch {return, RetCatch} -> RetCatch end.

train(Cnn_2, Samples, Epochs) ->
    try
        W_out_3 = maps:get("w_out", Cnn_2, nil),
        B_out_2 = maps:get("b_out", Cnn_2, nil),
        W_hidden_3 = maps:get("w_hidden", Cnn_2, nil),
        B_hidden_2 = maps:get("b_hidden", Cnn_2, nil),
        E = 0,
        Fun_34 = fun Fun_34_loop(B_hidden_2, B_out_2, Cnn_2, E, Epochs, Samples, W_hidden_3, W_out_3) ->
    case (E < Epochs) of
        true ->
            S = 0,
            Fun_33 = fun Fun_33_loop(B_hidden_2, B_out_2, Cnn_2, E, Epochs, S, Samples, W_hidden_3, W_out_3) ->
    case (S < erlang:length(Samples)) of
        true ->
            Data_3 = maps:get("image", (case erlang:is_map(Samples) of true -> maps:get(S, Samples, nil); _ -> case S < 0 of true -> mochi_nth(erlang:length(Samples) + S + 1, Samples); _ -> mochi_nth(S + 1, Samples) end end), nil),
            Target = maps:get("target", (case erlang:is_map(Samples) of true -> maps:get(S, Samples, nil); _ -> case S < 0 of true -> mochi_nth(erlang:length(Samples) + S + 1, Samples); _ -> mochi_nth(S + 1, Samples) end end), nil),
            Maps_4 = [],
            I_25 = 0,
            Fun_26 = fun Fun_26_loop(B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, I_25, Maps_4, S, Samples, Target, W_hidden_3, W_out_3) ->
    case (I_25 < erlang:length(maps:get("conv_kernels", Cnn_2, nil))) of
        true ->
            Conv_map_2 = convolve(Data_3, (case erlang:is_map(maps:get("conv_kernels", Cnn_2, nil)) of true -> maps:get(I_25, maps:get("conv_kernels", Cnn_2, nil), nil); _ -> case I_25 < 0 of true -> mochi_nth(erlang:length(maps:get("conv_kernels", Cnn_2, nil)) + I_25 + 1, maps:get("conv_kernels", Cnn_2, nil)); _ -> mochi_nth(I_25 + 1, maps:get("conv_kernels", Cnn_2, nil)) end end), maps:get("conv_step", Cnn_2, nil), (case erlang:is_map(maps:get("conv_bias", Cnn_2, nil)) of true -> maps:get(I_25, maps:get("conv_bias", Cnn_2, nil), nil); _ -> case I_25 < 0 of true -> mochi_nth(erlang:length(maps:get("conv_bias", Cnn_2, nil)) + I_25 + 1, maps:get("conv_bias", Cnn_2, nil)); _ -> mochi_nth(I_25 + 1, maps:get("conv_bias", Cnn_2, nil)) end end)),
            Pooled_2 = average_pool(Conv_map_2, maps:get("pool_size", Cnn_2, nil)),
            Maps_5 = lists:append((case Maps_4 of nil -> []; _ -> Maps_4 end), [Pooled_2]),
            I_26 = (I_25 + 1),
            Fun_26_loop(B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, I_26, Maps_5, S, Samples, Target, W_hidden_3, W_out_3);
        _ -> {B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, I_25, Maps_4, S, Samples, Target, W_hidden_3, W_out_3}
    end
end,
{B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, I_26, Maps_5, S, Samples, Target, W_hidden_3, W_out_3} = Fun_26(B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, I_25, Maps_4, S, Samples, Target, W_hidden_3, W_out_3),
            Flat_2 = flatten(Maps_5),
            Hidden_net_2 = vec_add(vec_mul_mat(Flat_2, W_hidden_3), B_hidden_2),
            Hidden_out_2 = vec_map_sig(Hidden_net_2),
            Out_net_2 = vec_add(vec_mul_mat(Hidden_out_2, W_out_3), B_out_2),
            Out_8 = vec_map_sig(Out_net_2),
            Error_out = vec_sub(Target, Out_8),
            Pd_out = vec_mul(Error_out, vec_mul(Out_8, vec_sub([1.0, 1.0], Out_8))),
            Error_hidden = matt_vec_mul(W_out_3, Pd_out),
            Pd_hidden = vec_mul(Error_hidden, vec_mul(Hidden_out_2, vec_sub([1.0, 1.0], Hidden_out_2))),
            J_15 = 0,
            Fun_28 = fun Fun_28_loop(B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_15, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_3) ->
    case (J_15 < erlang:length(W_out_3)) of
        true ->
            K_3 = 0,
            Fun_27 = fun Fun_27_loop(B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_15, K_3, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_3) ->
    case (K_3 < erlang:length((case erlang:is_map(W_out_3) of true -> maps:get(J_15, W_out_3, nil); _ -> case J_15 < 0 of true -> mochi_nth(erlang:length(W_out_3) + J_15 + 1, W_out_3); _ -> mochi_nth(J_15 + 1, W_out_3) end end))) of
        true ->
            W_out_4 = lists:sublist(W_out_3, J_15) ++ [lists:sublist(lists:nth(J_15 + 1, W_out_3), K_3) ++ [((case erlang:is_map((case erlang:is_map(W_out_3) of true -> maps:get(J_15, W_out_3, nil); _ -> case J_15 < 0 of true -> mochi_nth(erlang:length(W_out_3) + J_15 + 1, W_out_3); _ -> mochi_nth(J_15 + 1, W_out_3) end end)) of true -> maps:get(K_3, (case erlang:is_map(W_out_3) of true -> maps:get(J_15, W_out_3, nil); _ -> case J_15 < 0 of true -> mochi_nth(erlang:length(W_out_3) + J_15 + 1, W_out_3); _ -> mochi_nth(J_15 + 1, W_out_3) end end), nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(W_out_3) of true -> maps:get(J_15, W_out_3, nil); _ -> case J_15 < 0 of true -> mochi_nth(erlang:length(W_out_3) + J_15 + 1, W_out_3); _ -> mochi_nth(J_15 + 1, W_out_3) end end)) + K_3 + 1, (case erlang:is_map(W_out_3) of true -> maps:get(J_15, W_out_3, nil); _ -> case J_15 < 0 of true -> mochi_nth(erlang:length(W_out_3) + J_15 + 1, W_out_3); _ -> mochi_nth(J_15 + 1, W_out_3) end end)); _ -> mochi_nth(K_3 + 1, (case erlang:is_map(W_out_3) of true -> maps:get(J_15, W_out_3, nil); _ -> case J_15 < 0 of true -> mochi_nth(erlang:length(W_out_3) + J_15 + 1, W_out_3); _ -> mochi_nth(J_15 + 1, W_out_3) end end)) end end) + mochi_safe_mul(mochi_safe_mul(maps:get("rate_weight", Cnn_2, nil), (case erlang:is_map(Hidden_out_2) of true -> maps:get(J_15, Hidden_out_2, nil); _ -> case J_15 < 0 of true -> mochi_nth(erlang:length(Hidden_out_2) + J_15 + 1, Hidden_out_2); _ -> mochi_nth(J_15 + 1, Hidden_out_2) end end)), (case erlang:is_map(Pd_out) of true -> maps:get(K_3, Pd_out, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Pd_out) + K_3 + 1, Pd_out); _ -> mochi_nth(K_3 + 1, Pd_out) end end)))] ++ lists:nthtail(K_3 + 1, lists:nth(J_15 + 1, W_out_3))] ++ lists:nthtail(J_15 + 1, W_out_3),
            K_4 = (K_3 + 1),
            Fun_27_loop(B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_15, K_4, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4);
        _ -> {B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_15, K_3, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_3}
    end
end,
{B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_15, K_4, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4} = Fun_27(B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_15, K_3, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_3),
            J_16 = (J_15 + 1),
            Fun_28_loop(B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_16, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4);
        _ -> {B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_15, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_3}
    end
end,
{B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_16, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4} = Fun_28(B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_15, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_3),
            J_17 = 0,
            Fun_29 = fun Fun_29_loop(B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_17, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4) ->
    case (J_17 < erlang:length(B_out_2)) of
        true ->
            B_out_3 = lists:sublist(B_out_2, J_17) ++ [((case erlang:is_map(B_out_2) of true -> maps:get(J_17, B_out_2, nil); _ -> case J_17 < 0 of true -> mochi_nth(erlang:length(B_out_2) + J_17 + 1, B_out_2); _ -> mochi_nth(J_17 + 1, B_out_2) end end) - mochi_safe_mul(maps:get("rate_bias", Cnn_2, nil), (case erlang:is_map(Pd_out) of true -> maps:get(J_17, Pd_out, nil); _ -> case J_17 < 0 of true -> mochi_nth(erlang:length(Pd_out) + J_17 + 1, Pd_out); _ -> mochi_nth(J_17 + 1, Pd_out) end end)))] ++ lists:nthtail(J_17 + 1, B_out_2),
            J_18 = (J_17 + 1),
            Fun_29_loop(B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_18, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4);
        _ -> {B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_17, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4}
    end
end,
{B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_18, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4} = Fun_29(B_hidden_2, B_out_2, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, J_17, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4),
            I_h = 0,
            Fun_31 = fun Fun_31_loop(B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h, J_18, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4) ->
    case (I_h < erlang:length(W_hidden_3)) of
        true ->
            J_h = 0,
            Fun_30 = fun Fun_30_loop(B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h, J_18, J_h, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4) ->
    case (J_h < erlang:length((case erlang:is_map(W_hidden_3) of true -> maps:get(I_h, W_hidden_3, nil); _ -> case I_h < 0 of true -> mochi_nth(erlang:length(W_hidden_3) + I_h + 1, W_hidden_3); _ -> mochi_nth(I_h + 1, W_hidden_3) end end))) of
        true ->
            W_hidden_4 = lists:sublist(W_hidden_3, I_h) ++ [lists:sublist(lists:nth(I_h + 1, W_hidden_3), J_h) ++ [((case erlang:is_map((case erlang:is_map(W_hidden_3) of true -> maps:get(I_h, W_hidden_3, nil); _ -> case I_h < 0 of true -> mochi_nth(erlang:length(W_hidden_3) + I_h + 1, W_hidden_3); _ -> mochi_nth(I_h + 1, W_hidden_3) end end)) of true -> maps:get(J_h, (case erlang:is_map(W_hidden_3) of true -> maps:get(I_h, W_hidden_3, nil); _ -> case I_h < 0 of true -> mochi_nth(erlang:length(W_hidden_3) + I_h + 1, W_hidden_3); _ -> mochi_nth(I_h + 1, W_hidden_3) end end), nil); _ -> case J_h < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(W_hidden_3) of true -> maps:get(I_h, W_hidden_3, nil); _ -> case I_h < 0 of true -> mochi_nth(erlang:length(W_hidden_3) + I_h + 1, W_hidden_3); _ -> mochi_nth(I_h + 1, W_hidden_3) end end)) + J_h + 1, (case erlang:is_map(W_hidden_3) of true -> maps:get(I_h, W_hidden_3, nil); _ -> case I_h < 0 of true -> mochi_nth(erlang:length(W_hidden_3) + I_h + 1, W_hidden_3); _ -> mochi_nth(I_h + 1, W_hidden_3) end end)); _ -> mochi_nth(J_h + 1, (case erlang:is_map(W_hidden_3) of true -> maps:get(I_h, W_hidden_3, nil); _ -> case I_h < 0 of true -> mochi_nth(erlang:length(W_hidden_3) + I_h + 1, W_hidden_3); _ -> mochi_nth(I_h + 1, W_hidden_3) end end)) end end) + mochi_safe_mul(mochi_safe_mul(maps:get("rate_weight", Cnn_2, nil), (case erlang:is_map(Flat_2) of true -> maps:get(I_h, Flat_2, nil); _ -> case I_h < 0 of true -> mochi_nth(erlang:length(Flat_2) + I_h + 1, Flat_2); _ -> mochi_nth(I_h + 1, Flat_2) end end)), (case erlang:is_map(Pd_hidden) of true -> maps:get(J_h, Pd_hidden, nil); _ -> case J_h < 0 of true -> mochi_nth(erlang:length(Pd_hidden) + J_h + 1, Pd_hidden); _ -> mochi_nth(J_h + 1, Pd_hidden) end end)))] ++ lists:nthtail(J_h + 1, lists:nth(I_h + 1, W_hidden_3))] ++ lists:nthtail(I_h + 1, W_hidden_3),
            J_h_2 = (J_h + 1),
            Fun_30_loop(B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h, J_18, J_h_2, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_4, W_out_4);
        _ -> {B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h, J_18, J_h, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4}
    end
end,
{B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h, J_18, J_h_2, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_4, W_out_4} = Fun_30(B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h, J_18, J_h, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4),
            I_h_2 = (I_h + 1),
            Fun_31_loop(B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h_2, J_18, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_4, W_out_4);
        _ -> {B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h, J_18, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4}
    end
end,
{B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h_2, J_18, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_4, W_out_4} = Fun_31(B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h, J_18, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_3, W_out_4),
            J_19 = 0,
            Fun_32 = fun Fun_32_loop(B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h_2, J_19, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_4, W_out_4) ->
    case (J_19 < erlang:length(B_hidden_2)) of
        true ->
            B_hidden_3 = lists:sublist(B_hidden_2, J_19) ++ [((case erlang:is_map(B_hidden_2) of true -> maps:get(J_19, B_hidden_2, nil); _ -> case J_19 < 0 of true -> mochi_nth(erlang:length(B_hidden_2) + J_19 + 1, B_hidden_2); _ -> mochi_nth(J_19 + 1, B_hidden_2) end end) - mochi_safe_mul(maps:get("rate_bias", Cnn_2, nil), (case erlang:is_map(Pd_hidden) of true -> maps:get(J_19, Pd_hidden, nil); _ -> case J_19 < 0 of true -> mochi_nth(erlang:length(Pd_hidden) + J_19 + 1, Pd_hidden); _ -> mochi_nth(J_19 + 1, Pd_hidden) end end)))] ++ lists:nthtail(J_19 + 1, B_hidden_2),
            J_20 = (J_19 + 1),
            Fun_32_loop(B_hidden_3, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h_2, J_20, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_4, W_out_4);
        _ -> {B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h_2, J_19, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_4, W_out_4}
    end
end,
{B_hidden_3, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h_2, J_20, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_4, W_out_4} = Fun_32(B_hidden_2, B_out_3, Cnn_2, Data_3, E, Epochs, Error_hidden, Error_out, Flat_2, Hidden_net_2, Hidden_out_2, I_26, I_h_2, J_19, Maps_5, Out_8, Out_net_2, Pd_hidden, Pd_out, S, Samples, Target, W_hidden_4, W_out_4),
            S_2 = (S + 1),
            Fun_33_loop(B_hidden_3, B_out_3, Cnn_2, E, Epochs, S_2, Samples, W_hidden_4, W_out_4);
        _ -> {B_hidden_2, B_out_2, Cnn_2, E, Epochs, S, Samples, W_hidden_3, W_out_3}
    end
end,
{B_hidden_3, B_out_3, Cnn_2, E, Epochs, S_2, Samples, W_hidden_4, W_out_4} = Fun_33(B_hidden_2, B_out_2, Cnn_2, E, Epochs, S, Samples, W_hidden_3, W_out_3),
            E_2 = (E + 1),
            Fun_34_loop(B_hidden_3, B_out_3, Cnn_2, E_2, Epochs, Samples, W_hidden_4, W_out_4);
        _ -> {B_hidden_2, B_out_2, Cnn_2, E, Epochs, Samples, W_hidden_3, W_out_3}
    end
end,
{B_hidden_3, B_out_3, Cnn_2, E_2, Epochs, Samples, W_hidden_4, W_out_4} = Fun_34(B_hidden_2, B_out_2, Cnn_2, E, Epochs, Samples, W_hidden_3, W_out_3),
        #{"conv_kernels" => maps:get("conv_kernels", Cnn_2, nil), "conv_bias" => maps:get("conv_bias", Cnn_2, nil), "conv_step" => maps:get("conv_step", Cnn_2, nil), "pool_size" => maps:get("pool_size", Cnn_2, nil), "w_hidden" => W_hidden_4, "w_out" => W_out_4, "b_hidden" => B_hidden_3, "b_out" => B_out_3, "rate_weight" => maps:get("rate_weight", Cnn_2, nil), "rate_bias" => maps:get("rate_bias", Cnn_2, nil)}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Cnn_3 = new_cnn(),
        Image = [[1.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.0, 1.0], [1.0, 0.0, 1.0, 0.0], [0.0, 1.0, 0.0, 1.0]],
        Sample = #{"image" => Image, "target" => [1.0, 0.0]},
        io:format("~ts ~ts~n", [mochi_repr("Before training:"), mochi_repr(forward(Cnn_3, Image))]),
        Trained = train(Cnn_3, [Sample], 50),
        io:format("~ts ~ts~n", [mochi_repr("After training:"), mochi_repr(forward(Trained, Image))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
