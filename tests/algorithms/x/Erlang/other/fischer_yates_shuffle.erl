#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, rand/0, randint/2, fisher_yates_shuffle_int/1, fisher_yates_shuffle_str/1]).

% Generated by Mochi transpiler v0.10.64 (13cd577cd4) on 2025-08-12 15:27 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

rand() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        (erlang:get('seed') div 65536)
    catch {return, RetCatch} -> RetCatch end.

randint(A, B) ->
    try
        R = rand(),
        (A + mochi_mod(R, ((B - A) + 1)))
    catch {return, RetCatch} -> RetCatch end.

fisher_yates_shuffle_int(Data) ->
    try
        Res = Data,
        I = 0,
        Fun = fun Fun_loop(Data, I, Res) ->
    case (I < erlang:length(Res)) of
        true ->
            A_2 = randint(0, (erlang:length(Res) - 1)),
            B_2 = randint(0, (erlang:length(Res) - 1)),
            Temp = (case erlang:is_map(Res) of true -> maps:get(A_2, Res, nil); _ -> case A_2 < 0 of true -> mochi_nth(erlang:length(Res) + A_2 + 1, Res); _ -> mochi_nth(A_2 + 1, Res) end end),
            Res_2 = lists:sublist(Res, A_2) ++ [(case erlang:is_map(Res) of true -> maps:get(B_2, Res, nil); _ -> case B_2 < 0 of true -> mochi_nth(erlang:length(Res) + B_2 + 1, Res); _ -> mochi_nth(B_2 + 1, Res) end end)] ++ lists:nthtail(A_2 + 1, Res),
            Res_3 = lists:sublist(Res_2, B_2) ++ [Temp] ++ lists:nthtail(B_2 + 1, Res_2),
            I_2 = (I + 1),
            Fun_loop(Data, I_2, Res_3);
        _ -> {Data, I, Res}
    end
end,
{Data, I_2, Res_3} = Fun(Data, I, Res),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

fisher_yates_shuffle_str(Data_2) ->
    try
        Res_4 = Data_2,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Data_2, I_3, Res_4) ->
    case (I_3 < erlang:length(Res_4)) of
        true ->
            A_3 = randint(0, (erlang:length(Res_4) - 1)),
            B_3 = randint(0, (erlang:length(Res_4) - 1)),
            Temp_2 = (case erlang:is_map(Res_4) of true -> maps:get(A_3, Res_4, nil); _ -> case A_3 < 0 of true -> mochi_nth(erlang:length(Res_4) + A_3 + 1, Res_4); _ -> mochi_nth(A_3 + 1, Res_4) end end),
            Res_5 = lists:sublist(Res_4, A_3) ++ [(case erlang:is_map(Res_4) of true -> maps:get(B_3, Res_4, nil); _ -> case B_3 < 0 of true -> mochi_nth(erlang:length(Res_4) + B_3 + 1, Res_4); _ -> mochi_nth(B_3 + 1, Res_4) end end)] ++ lists:nthtail(A_3 + 1, Res_4),
            Res_6 = lists:sublist(Res_5, B_3) ++ [Temp_2] ++ lists:nthtail(B_3 + 1, Res_5),
            I_4 = (I_3 + 1),
            Fun_2_loop(Data_2, I_4, Res_6);
        _ -> {Data_2, I_3, Res_4}
    end
end,
{Data_2, I_4, Res_6} = Fun_2(Data_2, I_3, Res_4),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 1),
    erlang:put('integers', [0, 1, 2, 3, 4, 5, 6, 7]),
    erlang:put('strings', ["python", "says", "hello", "!"]),
    io:format("~ts~n", [mochi_repr("Fisher-Yates Shuffle:")]),
    io:format("~ts~n", [mochi_repr(((("List " ++ mochi_str(erlang:get('integers'))) ++ " ") ++ mochi_str(erlang:get('strings'))))]),
    io:format("~ts~n", [mochi_repr(((("FY Shuffle " ++ mochi_str(fisher_yates_shuffle_int(erlang:get('integers')))) ++ " ") ++ mochi_str(fisher_yates_shuffle_str(erlang:get('strings')))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
