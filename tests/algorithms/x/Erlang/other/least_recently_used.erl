#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, new_cache/1, remove_element/2, refer/2, display/1, repr_item/1, cache_repr/1]).

% Generated by Mochi transpiler v0.10.64 (a3a385f0f9) on 2025-08-12 12:37 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

new_cache(N) ->
    try
        case (N < 0) of
        true -> erlang:error({panic, "n should be an integer greater than 0."});
        _ -> ok
    end,
        Cap = (case (N == 0) of
    true -> 2147483647;
    _ -> N
end),
        #{"max_capacity" => Cap, "store" => []}
    catch {return, RetCatch} -> RetCatch end.

remove_element(Xs, X) ->
    try
        Res = [],
        Removed = false,
        I = 0,
        Fun = fun Fun_loop(I, Removed, Res, X, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            V = (case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end),
            case ((Removed == false) andalso (V == X)) of
        true -> Removed_2 = true,
            Removed_3 = Removed_2,
            Res_3 = Res;
        _ -> Res_2 = (Res ++ [V]),
            Removed_3 = Removed,
            Res_3 = Res_2
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Removed_3, Res_3, X, Xs);
        _ -> {I, Removed, Res, X, Xs}
    end
end,
{I_2, Removed_3, Res_3, X, Xs} = Fun(I, Removed, Res, X, Xs),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

refer(Cache, X_2) ->
    try
        Store = maps:get("store", Cache, nil),
        Exists = false,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Cache, Exists, I_3, Store, X_2) ->
    case (I_3 < erlang:length(Store)) of
        true ->
            case ((case erlang:is_map(Store) of true -> maps:get(I_3, Store, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Store) + I_3 + 1, Store); _ -> mochi_nth(I_3 + 1, Store) end end) == X_2) of
        true -> Exists_2 = true,
            Exists_3 = Exists_2;
        _ -> Exists_3 = Exists
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Cache, Exists_3, I_4, Store, X_2);
        _ -> {Cache, Exists, I_3, Store, X_2}
    end
end,
{Cache, Exists_3, I_4, Store, X_2} = Fun_2(Cache, Exists, I_3, Store, X_2),
        case (Exists_3 /= nil) of
        true -> Store_2 = remove_element(Store, X_2),
            Fun_5 = Fun_2,
            J_4 = nil,
            New_store_4 = nil,
            Store_5 = Store_2;
        _ -> case (erlang:length(Store) == maps:get("max_capacity", Cache, nil)) of
        true -> New_store = [],
            J = 0,
            Fun_3 = fun Fun_3_loop(Cache, Exists_3, I_4, J, New_store, Store, X_2) ->
    case (J < (erlang:length(Store) - 1)) of
        true ->
            New_store_2 = (New_store ++ [(case erlang:is_map(Store) of true -> maps:get(J, Store, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Store) + J + 1, Store); _ -> mochi_nth(J + 1, Store) end end)]),
            J_2 = (J + 1),
            Fun_3_loop(Cache, Exists_3, I_4, J_2, New_store_2, Store, X_2);
        _ -> {Cache, Exists_3, I_4, J, New_store, Store, X_2}
    end
end,
{Cache, Exists_3, I_4, J_2, New_store_2, Store, X_2} = Fun_3(Cache, Exists_3, I_4, J, New_store, Store, X_2),
            Store_3 = New_store_2,
            Fun_4 = Fun_3,
            J_3 = J_2,
            New_store_3 = New_store_2,
            Store_4 = Store_3;
        _ -> Fun_4 = Fun_2,
            J_3 = nil,
            New_store_3 = nil,
            Store_4 = Store
    end,
            Fun_5 = Fun_4,
            J_4 = J_3,
            New_store_4 = New_store_3,
            Store_5 = Store_4
    end,
        Store_6 = ([X_2] ++ Store_5),
        #{"max_capacity" => maps:get("max_capacity", Cache, nil), "store" => Store_6}
    catch {return, RetCatch} -> RetCatch end.

display(Cache_2) ->
    try
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(Cache_2, I_5) ->
    case (I_5 < erlang:length(maps:get("store", Cache_2, nil))) of
        true ->
            io:format("~ts~n", [mochi_repr((case erlang:is_map(maps:get("store", Cache_2, nil)) of true -> maps:get(I_5, maps:get("store", Cache_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("store", Cache_2, nil)) + I_5 + 1, maps:get("store", Cache_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("store", Cache_2, nil)) end end))]),
            I_6 = (I_5 + 1),
            Fun_6_loop(Cache_2, I_6);
        _ -> {Cache_2, I_5}
    end
end,
{Cache_2, I_6} = Fun_6(Cache_2, I_5),
        nil
    catch {return, RetCatch} -> RetCatch end.

repr_item(S) ->
    try
        All_digits = true,
        I_7 = 0,
        Fun_7 = fun Fun_7_loop(All_digits, I_7, S) ->
    case (I_7 < erlang:length(S)) of
        true ->
            Ch = string:substr(S, I_7 + 1, 1),
            case ((Ch < "0") orelse (Ch > "9")) of
        true -> All_digits_2 = false,
            All_digits_3 = All_digits_2;
        _ -> All_digits_3 = All_digits
    end,
            I_8 = (I_7 + 1),
            Fun_7_loop(All_digits_3, I_8, S);
        _ -> {All_digits, I_7, S}
    end
end,
{All_digits_3, I_8, S} = Fun_7(All_digits, I_7, S),
        case (All_digits_3 /= nil) of
        true -> throw({return, S});
        _ -> ok
    end,
        (("'" ++ S) ++ "'")
    catch {return, RetCatch} -> RetCatch end.

cache_repr(Cache_3) ->
    try
        Res_4 = (("LRUCache(" ++ mochi_str(maps:get("max_capacity", Cache_3, nil))) ++ ") => ["),
        I_9 = 0,
        Fun_8 = fun Fun_8_loop(Cache_3, I_9, Res_4) ->
    case (I_9 < erlang:length(maps:get("store", Cache_3, nil))) of
        true ->
            Res_5 = (Res_4 ++ repr_item((case erlang:is_map(maps:get("store", Cache_3, nil)) of true -> maps:get(I_9, maps:get("store", Cache_3, nil), nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(maps:get("store", Cache_3, nil)) + I_9 + 1, maps:get("store", Cache_3, nil)); _ -> mochi_nth(I_9 + 1, maps:get("store", Cache_3, nil)) end end))),
            case (I_9 < (erlang:length(maps:get("store", Cache_3, nil)) - 1)) of
        true -> Res_6 = (Res_5 ++ ", "),
            Res_7 = Res_6;
        _ -> Res_7 = Res_5
    end,
            I_10 = (I_9 + 1),
            Fun_8_loop(Cache_3, I_10, Res_7);
        _ -> {Cache_3, I_9, Res_4}
    end
end,
{Cache_3, I_10, Res_7} = Fun_8(Cache_3, I_9, Res_4),
        Res_8 = (Res_7 ++ "]"),
        Res_8
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('lru', new_cache(4)),
    erlang:put('lru', refer(erlang:get('lru'), "A")),
    erlang:put('lru', refer(erlang:get('lru'), "2")),
    erlang:put('lru', refer(erlang:get('lru'), "3")),
    erlang:put('lru', refer(erlang:get('lru'), "A")),
    erlang:put('lru', refer(erlang:get('lru'), "4")),
    erlang:put('lru', refer(erlang:get('lru'), "5")),
    erlang:put('r', cache_repr(erlang:get('lru'))),
    io:format("~ts~n", [mochi_repr(erlang:get('r'))]),
    case (erlang:get('r') /= "LRUCache(4) => [5, 4, 'A', 3]") of
        true -> erlang:error({panic, "Assertion error"});
        _ -> ok
    end,
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
