#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, remove_at/2, insert_at/3, binary_search_delete/2, binary_search_insert/2, change/3, find/2]).

% Generated by Mochi transpiler v0.10.64 (a3a385f0f9) on 2025-08-12 12:37 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

remove_at(Xs, Idx) ->
    try
        Res = [],
        I = 0,
        Fun = fun Fun_loop(I, Idx, Res, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case (I /= Idx) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Idx, Res_3, Xs);
        _ -> {I, Idx, Res, Xs}
    end
end,
{I_2, Idx, Res_3, Xs} = Fun(I, Idx, Res, Xs),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

insert_at(Xs_2, Idx_2, Val) ->
    try
        Res_4 = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Idx_2, Res_4, Val, Xs_2) ->
    case (I_3 < erlang:length(Xs_2)) of
        true ->
            case (I_3 == Idx_2) of
        true -> Res_5 = lists:append((case Res_4 of nil -> []; _ -> Res_4 end), [Val]),
            Res_6 = Res_5;
        _ -> Res_6 = Res_4
    end,
            Res_7 = lists:append((case Res_6 of nil -> []; _ -> Res_6 end), [(case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_3 + 1, Xs_2); _ -> mochi_nth(I_3 + 1, Xs_2) end end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Idx_2, Res_7, Val, Xs_2);
        _ -> {I_3, Idx_2, Res_4, Val, Xs_2}
    end
end,
{I_4, Idx_2, Res_7, Val, Xs_2} = Fun_2(I_3, Idx_2, Res_4, Val, Xs_2),
        case (Idx_2 == erlang:length(Xs_2)) of
        true -> Res_8 = lists:append((case Res_7 of nil -> []; _ -> Res_7 end), [Val]),
            Res_9 = Res_8;
        _ -> Res_9 = Res_7
    end,
        Res_9
    catch {return, RetCatch} -> RetCatch end.

binary_search_delete(Array, Item) ->
    try
        Low = 0,
        High = (erlang:length(Array) - 1),
        Arr = Array,
        Fun_3 = fun Fun_3_loop(Arr, Array, High, Item, Low) ->
    case (Low =< High) of
        true ->
            Mid = ((Low + High) div 2),
            case ((case erlang:is_map(Arr) of true -> maps:get(Mid, Arr, nil); _ -> case Mid < 0 of true -> mochi_nth(erlang:length(Arr) + Mid + 1, Arr); _ -> mochi_nth(Mid + 1, Arr) end end) == Item) of
        true -> Arr_2 = remove_at(Arr, Mid),
            throw({return, Arr_2}),
            Arr_3 = Arr_2,
            High_4 = High,
            Low_4 = Low;
        _ -> case ((case erlang:is_map(Arr) of true -> maps:get(Mid, Arr, nil); _ -> case Mid < 0 of true -> mochi_nth(erlang:length(Arr) + Mid + 1, Arr); _ -> mochi_nth(Mid + 1, Arr) end end) < Item) of
        true -> Low_2 = (Mid + 1),
            High_3 = High,
            Low_3 = Low_2;
        _ -> High_2 = (Mid - 1),
            High_3 = High_2,
            Low_3 = Low
    end,
            Arr_3 = Arr,
            High_4 = High_3,
            Low_4 = Low_3
    end,
            Fun_3_loop(Arr_3, Array, High_4, Item, Low_4);
        _ -> {Arr, Array, High, Item, Low}
    end
end,
{Arr_3, Array, High_4, Item, Low_4} = Fun_3(Arr, Array, High, Item, Low),
        io:format("~ts~n", [mochi_repr("ValueError: Either the item is not in the array or the array was unsorted")]),
        Arr_3
    catch {return, RetCatch} -> RetCatch end.

binary_search_insert(Array_2, Index) ->
    try
        Low_5 = 0,
        High_5 = (erlang:length(Array_2) - 1),
        Arr_4 = Array_2,
        Fun_4 = fun Fun_4_loop(Arr_4, Array_2, High_5, Index, Low_5) ->
    case (Low_5 =< High_5) of
        true ->
            Mid_2 = ((Low_5 + High_5) div 2),
            case ((case erlang:is_map(Arr_4) of true -> maps:get(Mid_2, Arr_4, nil); _ -> case Mid_2 < 0 of true -> mochi_nth(erlang:length(Arr_4) + Mid_2 + 1, Arr_4); _ -> mochi_nth(Mid_2 + 1, Arr_4) end end) == Index) of
        true -> Arr_5 = insert_at(Arr_4, (Mid_2 + 1), Index),
            throw({return, Arr_5}),
            Arr_6 = Arr_5,
            High_8 = High_5,
            Low_8 = Low_5;
        _ -> case ((case erlang:is_map(Arr_4) of true -> maps:get(Mid_2, Arr_4, nil); _ -> case Mid_2 < 0 of true -> mochi_nth(erlang:length(Arr_4) + Mid_2 + 1, Arr_4); _ -> mochi_nth(Mid_2 + 1, Arr_4) end end) < Index) of
        true -> Low_6 = (Mid_2 + 1),
            High_7 = High_5,
            Low_7 = Low_6;
        _ -> High_6 = (Mid_2 - 1),
            High_7 = High_6,
            Low_7 = Low_5
    end,
            Arr_6 = Arr_4,
            High_8 = High_7,
            Low_8 = Low_7
    end,
            Fun_4_loop(Arr_6, Array_2, High_8, Index, Low_8);
        _ -> {Arr_4, Array_2, High_5, Index, Low_5}
    end
end,
{Arr_6, Array_2, High_8, Index, Low_8} = Fun_4(Arr_4, Array_2, High_5, Index, Low_5),
        Arr_7 = insert_at(Arr_6, Low_8, Index),
        Arr_7
    catch {return, RetCatch} -> RetCatch end.

change(Cont, Idx_3, Num) ->
    try
        Numbermap = maps:get("numbermap", Cont, nil),
        Indexmap = maps:get("indexmap", Cont, nil),
        case maps:is_key(Idx_3, Indexmap) of
        true -> Old = maps:get(Idx_3, Indexmap, nil),
            Indexes = maps:get(Old, Numbermap, nil),
            case (erlang:length(Indexes) == 1) of
        true -> Numbermap_2 = maps:put(Old, [], Numbermap),
            Numbermap_4 = Numbermap_2;
        _ -> Numbermap_3 = maps:put(Old, binary_search_delete(Indexes, Idx_3), Numbermap),
            Numbermap_4 = Numbermap_3
    end,
            Indexes_2 = Indexes,
            Numbermap_5 = Numbermap_4,
            Old_2 = Old;
        _ -> Indexes_2 = nil,
            Numbermap_5 = Numbermap,
            Old_2 = nil
    end,
        Indexmap_2 = maps:put(Idx_3, Num, Indexmap),
        case maps:is_key(Num, Numbermap_5) of
        true -> Numbermap_6 = maps:put(Num, binary_search_insert(maps:get(Num, Numbermap_5, nil), Idx_3), Numbermap_5),
            Numbermap_8 = Numbermap_6;
        _ -> Numbermap_7 = maps:put(Num, [Idx_3], Numbermap_5),
            Numbermap_8 = Numbermap_7
    end,
        #{"numbermap" => Numbermap_8, "indexmap" => Indexmap_2}
    catch {return, RetCatch} -> RetCatch end.

find(Cont_2, Num_2) ->
    try
        Numbermap_9 = maps:get("numbermap", Cont_2, nil),
        case maps:is_key(Num_2, Numbermap_9) of
        true -> Arr_8 = maps:get(Num_2, Numbermap_9, nil),
            case (erlang:length(Arr_8) > 0) of
        true -> throw({return, (case erlang:is_map(Arr_8) of true -> maps:get(0, Arr_8, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr_8) + 0 + 1, Arr_8); _ -> mochi_nth(0 + 1, Arr_8) end end)});
        _ -> ok
    end,
            Arr_9 = Arr_8;
        _ -> Arr_9 = nil
    end,
        -1
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('nm', #{}),
    erlang:put('im', #{}),
    erlang:put('cont', #{"numbermap" => erlang:get('nm'), "indexmap" => erlang:get('im')}),
    io:format("~ts~n", [mochi_repr(find(erlang:get('cont'), 10))]),
    erlang:put('cont', change(erlang:get('cont'), 0, 10)),
    io:format("~ts~n", [mochi_repr(find(erlang:get('cont'), 10))]),
    erlang:put('cont', change(erlang:get('cont'), 0, 20)),
    io:format("~ts~n", [mochi_repr(find(erlang:get('cont'), 10))]),
    io:format("~ts~n", [mochi_repr(find(erlang:get('cont'), 20))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
