#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, apply_table/2, left_shift/1, xor_fn/2, int_to_binary/1, pad_left/2, bin_to_int/1, apply_sbox/2, f/5]).

% Generated by Mochi transpiler v0.10.69 (582ddaf78e)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

apply_table(Inp, Table) ->
    try
        Res = "",
        I = 0,
        Fun = fun Fun_loop(I, Inp, Res, Table) ->
    case (I < erlang:length(Table)) of
        true ->
            Idx = ((case erlang:is_map(Table) of true -> maps:get(I, Table, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Table) + I + 1, Table); _ -> mochi_nth(I + 1, Table) end end) - 1),
            Idx_3 = (case (Idx < 0) of
        true -> Idx_2 = (erlang:length(Inp) - 1),
            Idx_2;
        _ -> Idx
    end),
            Res_2 = (Res ++ string:substr(Inp, Idx_3 + 1, ((Idx_3 + 1) - Idx_3))),
            I_2 = (I + 1),
            Fun_loop(I_2, Inp, Res_2, Table);
        _ -> {I, Inp, Res, Table}
    end
end,
{I_2, Inp, Res_2, Table} = Fun(I, Inp, Res, Table),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

left_shift(Data) ->
    try
        (string:substr(Data, 1 + 1, (erlang:length(Data) - 1)) ++ string:substr(Data, 0 + 1, (1 - 0)))
    catch {return, RetCatch} -> RetCatch end.

xor_fn(A, B) ->
    try
        Res_3 = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(A, B, I_3, Res_3) ->
    case ((I_3 < erlang:length(A)) andalso (I_3 < erlang:length(B))) of
        true ->
            Res_6 = (case (string:substr(A, I_3 + 1, ((I_3 + 1) - I_3)) == string:substr(B, I_3 + 1, ((I_3 + 1) - I_3))) of
        true -> Res_4 = (Res_3 ++ "0"),
            Res_4;
        _ -> Res_5 = (Res_3 ++ "1"),
            Res_5
    end),
            I_4 = (I_3 + 1),
            Fun_2_loop(A, B, I_4, Res_6);
        _ -> {A, B, I_3, Res_3}
    end
end,
{A, B, I_4, Res_6} = Fun_2(A, B, I_3, Res_3),
        Res_6
    catch {return, RetCatch} -> RetCatch end.

int_to_binary(N) ->
    try
        case (N == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Res_7 = "",
        Num = N,
        Fun_3 = fun Fun_3_loop(N, Num, Res_7) ->
    case (Num > 0) of
        true ->
            Res_8 = (mochi_str(mochi_mod(Num, 2)) ++ Res_7),
            Num_2 = mochi_idiv(Num, 2),
            Fun_3_loop(N, Num_2, Res_8);
        _ -> {N, Num, Res_7}
    end
end,
{N, Num_2, Res_8} = Fun_3(N, Num, Res_7),
        Res_8
    catch {return, RetCatch} -> RetCatch end.

pad_left(S, Width) ->
    try
        Res_9 = S,
        Fun_4 = fun Fun_4_loop(Res_9, S, Width) ->
    case (erlang:length(Res_9) < Width) of
        true ->
            Res_10 = ("0" ++ Res_9),
            Fun_4_loop(Res_10, S, Width);
        _ -> {Res_9, S, Width}
    end
end,
{Res_10, S, Width} = Fun_4(Res_9, S, Width),
        Res_10
    catch {return, RetCatch} -> RetCatch end.

bin_to_int(S_2) ->
    try
        Result = 0,
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(I_5, Result, S_2) ->
    case (I_5 < erlang:length(S_2)) of
        true ->
            Digit = mochi_to_int(string:substr(S_2, I_5 + 1, ((I_5 + 1) - I_5))),
            Result_2 = ((Result * 2) + Digit),
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, Result_2, S_2);
        _ -> {I_5, Result, S_2}
    end
end,
{I_6, Result_2, S_2} = Fun_5(I_5, Result, S_2),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

apply_sbox(S_3, Data_2) ->
    try
        Row_bits = (string:substr(Data_2, 0 + 1, (1 - 0)) ++ string:substr(Data_2, (erlang:length(Data_2) - 1) + 1, (erlang:length(Data_2) - (erlang:length(Data_2) - 1)))),
        Col_bits = string:substr(Data_2, 1 + 1, (3 - 1)),
        Row = bin_to_int(Row_bits),
        Col = bin_to_int(Col_bits),
        Val = (case erlang:is_map((case erlang:is_map(S_3) of true -> maps:get(Row, S_3, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(S_3) + Row + 1, S_3); _ -> mochi_nth(Row + 1, S_3) end end)) of true -> maps:get(Col, (case erlang:is_map(S_3) of true -> maps:get(Row, S_3, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(S_3) + Row + 1, S_3); _ -> mochi_nth(Row + 1, S_3) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(S_3) of true -> maps:get(Row, S_3, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(S_3) + Row + 1, S_3); _ -> mochi_nth(Row + 1, S_3) end end)) + Col + 1, (case erlang:is_map(S_3) of true -> maps:get(Row, S_3, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(S_3) + Row + 1, S_3); _ -> mochi_nth(Row + 1, S_3) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(S_3) of true -> maps:get(Row, S_3, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(S_3) + Row + 1, S_3); _ -> mochi_nth(Row + 1, S_3) end end)) end end),
        Out = int_to_binary(Val),
        Out
    catch {return, RetCatch} -> RetCatch end.

f(Expansion, S0, S1, Key, Message) ->
    try
        Left = string:substr(Message, 0 + 1, (4 - 0)),
        Right = string:substr(Message, 4 + 1, (8 - 4)),
        Temp = apply_table(Right, Expansion),
        Temp_2 = xor_fn(Temp, Key),
        Left_bin_str = apply_sbox(S0, string:substr(Temp_2, 0 + 1, (4 - 0))),
        Right_bin_str = apply_sbox(S1, string:substr(Temp_2, 4 + 1, (8 - 4))),
        Left_bin_str_2 = pad_left(Left_bin_str, 2),
        Right_bin_str_2 = pad_left(Right_bin_str, 2),
        Temp_3 = apply_table((Left_bin_str_2 ++ Right_bin_str_2), erlang:get('p4_table')),
        Temp_4 = xor_fn(Left, Temp_3),
        (Temp_4 ++ Right)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('p4_table', [2, 4, 3, 1]),
    erlang:put('key', "1010000010"),
    erlang:put('message', "11010111"),
    erlang:put('p8_table', [6, 3, 7, 4, 8, 5, 10, 9]),
    erlang:put('p10_table', [3, 5, 2, 7, 4, 10, 1, 9, 8, 6]),
    erlang:put('IP', [2, 6, 3, 1, 4, 8, 5, 7]),
    erlang:put('IP_inv', [4, 1, 3, 5, 7, 2, 8, 6]),
    erlang:put('expansion', [4, 1, 2, 3, 2, 3, 4, 1]),
    erlang:put('s0', [[1, 0, 3, 2], [3, 2, 1, 0], [0, 2, 1, 3], [3, 1, 3, 2]]),
    erlang:put('s1', [[0, 1, 2, 3], [2, 0, 1, 3], [3, 0, 1, 0], [2, 1, 0, 3]]),
    erlang:put('temp', apply_table("1010000010", erlang:get('p10_table'))),
    erlang:put('left', string:substr(erlang:get('temp'), 0 + 1, (5 - 0))),
    erlang:put('right', string:substr(erlang:get('temp'), 5 + 1, (10 - 5))),
    erlang:put('left', left_shift(erlang:get('left'))),
    erlang:put('right', left_shift(erlang:get('right'))),
    erlang:put('key1', apply_table((erlang:get('left') ++ erlang:get('right')), erlang:get('p8_table'))),
    erlang:put('left', left_shift(erlang:get('left'))),
    erlang:put('right', left_shift(erlang:get('right'))),
    erlang:put('left', left_shift(erlang:get('left'))),
    erlang:put('right', left_shift(erlang:get('right'))),
    erlang:put('key2', apply_table((erlang:get('left') ++ erlang:get('right')), erlang:get('p8_table'))),
    erlang:put('temp', apply_table("11010111", erlang:get('IP'))),
    erlang:put('temp', f(erlang:get('expansion'), erlang:get('s0'), erlang:get('s1'), erlang:get('key1'), erlang:get('temp'))),
    erlang:put('temp', (string:substr(erlang:get('temp'), 4 + 1, (8 - 4)) ++ string:substr(erlang:get('temp'), 0 + 1, (4 - 0)))),
    erlang:put('temp', f(erlang:get('expansion'), erlang:get('s0'), erlang:get('s1'), erlang:get('key2'), erlang:get('temp'))),
    erlang:put('CT', apply_table(erlang:get('temp'), erlang:get('IP_inv'))),
    io:format("~ts~n", [mochi_repr(("Cipher text is: " ++ erlang:get('CT')))]),
    erlang:put('temp', apply_table(erlang:get('CT'), erlang:get('IP'))),
    erlang:put('temp', f(erlang:get('expansion'), erlang:get('s0'), erlang:get('s1'), erlang:get('key2'), erlang:get('temp'))),
    erlang:put('temp', (string:substr(erlang:get('temp'), 4 + 1, (8 - 4)) ++ string:substr(erlang:get('temp'), 0 + 1, (4 - 0)))),
    erlang:put('temp', f(erlang:get('expansion'), erlang:get('s0'), erlang:get('s1'), erlang:get('key1'), erlang:get('temp'))),
    erlang:put('PT', apply_table(erlang:get('temp'), erlang:get('IP_inv'))),
    io:format("~ts~n", [mochi_repr(("Plain text after decypting is: " ++ erlang:get('PT')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
