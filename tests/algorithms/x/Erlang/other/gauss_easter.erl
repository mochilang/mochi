#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, gauss_easter/1, format_date/2]).

% Generated by Mochi transpiler v0.10.67 (7ab215672a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

gauss_easter(Year) ->
    try
        Metonic_cycle = mochi_mod(Year, 19),
        Julian_leap_year = mochi_mod(Year, 4),
        Non_leap_year = mochi_mod(Year, 7),
        Leap_day_inhibits = mochi_idiv(Year, 100),
        Lunar_orbit_correction = mochi_idiv((13 + (8 * Leap_day_inhibits)), 25),
        Leap_day_reinstall_number = mochi_safe_div(float(Leap_day_inhibits), 4.0),
        Secular_moon_shift = mochi_safe_fmod((((15.0 - float(Lunar_orbit_correction)) + float(Leap_day_inhibits)) - Leap_day_reinstall_number), 30.0),
        Century_starting_point = mochi_safe_fmod(((4.0 + float(Leap_day_inhibits)) - Leap_day_reinstall_number), 7.0),
        Days_to_add = mochi_safe_fmod((mochi_safe_mul(19.0, float(Metonic_cycle)) + Secular_moon_shift), 30.0),
        Days_from_phm_to_sunday = mochi_safe_fmod((((mochi_safe_mul(2.0, float(Julian_leap_year)) + mochi_safe_mul(4.0, float(Non_leap_year))) + mochi_safe_mul(6.0, Days_to_add)) + Century_starting_point), 7.0),
        case ((Days_to_add == 29.0) andalso (Days_from_phm_to_sunday == 6.0)) of
        true -> throw({return, #{"month" => 4, "day" => 19}});
        _ -> ok
    end,
        case ((Days_to_add == 28.0) andalso (Days_from_phm_to_sunday == 6.0)) of
        true -> throw({return, #{"month" => 4, "day" => 18}});
        _ -> ok
    end,
        Offset = mochi_to_int((Days_to_add + Days_from_phm_to_sunday)),
        Total = (22 + Offset),
        case (Total > 31) of
        true -> throw({return, #{"month" => 4, "day" => (Total - 31)}});
        _ -> ok
    end,
        #{"month" => 3, "day" => Total}
    catch {return, RetCatch} -> RetCatch end.

format_date(Year_2, D) ->
    try
        Month = (case (maps:get("month", D, nil) < 10) of
    true -> ("0" ++ mochi_str(maps:get("month", D, nil)));
    _ -> mochi_str(maps:get("month", D, nil))
end),
        Day = (case (maps:get("day", D, nil) < 10) of
    true -> ("0" ++ mochi_str(maps:get("day", D, nil)));
    _ -> mochi_str(maps:get("day", D, nil))
end),
        ((((mochi_str(Year_2) ++ "-") ++ Month) ++ "-") ++ Day)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('years', [1994, 2000, 2010, 2021, 2023, 2032, 2100]),
    erlang:put('i', 0),
    Fun = fun Fun_loop() ->
    case (erlang:get('i') < erlang:length(erlang:get('years'))) of
        true ->
            Y = (case erlang:is_map(erlang:get('years')) of true -> maps:get(erlang:get('i'), erlang:get('years'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('years')) + erlang:get('i') + 1, erlang:get('years')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('years')) end end),
            E = gauss_easter(Y),
            io:format("~ts~n", [mochi_repr(((("Easter in " ++ mochi_str(Y)) ++ " is ") ++ format_date(Y, E)))]),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_loop();
        _ -> {}
    end
end,
{} = Fun(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
