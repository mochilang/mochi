#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, floyd/1, reverse_floyd/1, pretty_print/1, main/0]).

% Generated by Mochi transpiler v0.10.64 (0529231fcf) on 2025-08-12 11:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

floyd(N) ->
    try
        Result = "",
        I = 0,
        Fun_3 = fun Fun_3_loop(I, N, Result) ->
    case (I < N) of
        true ->
            J = 0,
            Fun = fun Fun_loop(I, J, N, Result) ->
    case (J < ((N - I) - 1)) of
        true ->
            Result_2 = (Result ++ " "),
            J_2 = (J + 1),
            Fun_loop(I, J_2, N, Result_2);
        _ -> {I, J, N, Result}
    end
end,
{I, J_2, N, Result_2} = Fun(I, J, N, Result),
            K = 0,
            Fun_2 = fun Fun_2_loop(I, J_2, K, N, Result_2) ->
    case (K < (I + 1)) of
        true ->
            Result_3 = (Result_2 ++ "* "),
            K_2 = (K + 1),
            Fun_2_loop(I, J_2, K_2, N, Result_3);
        _ -> {I, J_2, K, N, Result_2}
    end
end,
{I, J_2, K_2, N, Result_3} = Fun_2(I, J_2, K, N, Result_2),
            Result_4 = (Result_3 ++ "\n"),
            I_2 = (I + 1),
            Fun_3_loop(I_2, N, Result_4);
        _ -> {I, N, Result}
    end
end,
{I_2, N, Result_4} = Fun_3(I, N, Result),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

reverse_floyd(N_2) ->
    try
        Result_5 = "",
        I_3 = N_2,
        Fun_6 = fun Fun_6_loop(I_3, N_2, Result_5) ->
    case (I_3 > 0) of
        true ->
            J_3 = I_3,
            Fun_4 = fun Fun_4_loop(I_3, J_3, N_2, Result_5) ->
    case (J_3 > 0) of
        true ->
            Result_6 = (Result_5 ++ "* "),
            J_4 = (J_3 - 1),
            Fun_4_loop(I_3, J_4, N_2, Result_6);
        _ -> {I_3, J_3, N_2, Result_5}
    end
end,
{I_3, J_4, N_2, Result_6} = Fun_4(I_3, J_3, N_2, Result_5),
            Result_7 = (Result_6 ++ "\n"),
            K_3 = ((N_2 - I_3) + 1),
            Fun_5 = fun Fun_5_loop(I_3, J_4, K_3, N_2, Result_7) ->
    case (K_3 > 0) of
        true ->
            Result_8 = (Result_7 ++ " "),
            K_4 = (K_3 - 1),
            Fun_5_loop(I_3, J_4, K_4, N_2, Result_8);
        _ -> {I_3, J_4, K_3, N_2, Result_7}
    end
end,
{I_3, J_4, K_4, N_2, Result_8} = Fun_5(I_3, J_4, K_3, N_2, Result_7),
            I_4 = (I_3 - 1),
            Fun_6_loop(I_4, N_2, Result_8);
        _ -> {I_3, N_2, Result_5}
    end
end,
{I_4, N_2, Result_8} = Fun_6(I_3, N_2, Result_5),
        Result_8
    catch {return, RetCatch} -> RetCatch end.

pretty_print(N_3) ->
    try
        case (N_3 =< 0) of
        true -> throw({return, "       ...       ....        nothing printing :("});
        _ -> ok
    end,
        Upper_half = floyd(N_3),
        Lower_half = reverse_floyd(N_3),
        (Upper_half ++ Lower_half)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(pretty_print(3))]),
        io:format("~ts~n", [mochi_repr(pretty_print(0))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
