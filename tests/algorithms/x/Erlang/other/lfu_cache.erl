#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, lfu_new/1, find_entry/2, lfu_get/2, remove_lfu/1, lfu_put/3, cache_info/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (c45765bf43) on 2025-08-08 15:36 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

lfu_new(Cap) ->
    try
        #{"entries" => [], "capacity" => Cap, "hits" => 0, "miss" => 0, "tick" => 0}
    catch {return, Ret} -> Ret end.

find_entry(Entries, Key) ->
    try
        I = 0,
        Fun = fun Fun_loop(Entries, I, Key) ->
    case (I < erlang:length(Entries)) of
        true ->
            E = (case erlang:is_map(Entries) of true -> maps:get(I, Entries, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Entries) + I + 1, Entries); _ -> mochi_nth(I + 1, Entries) end end),
            case (maps:get("key", E, nil) == Key) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Entries, I_2, Key);
        _ -> {Entries, I, Key}
    end
end,
{Entries, I_2, Key} = Fun(Entries, I, Key),
        (0 - 1)
    catch {return, Ret} -> Ret end.

lfu_get(Cache, Key_2) ->
    try
        Idx = find_entry(maps:get("entries", Cache, nil), Key_2),
        case (Idx == (0 - 1)) of
        true -> New_cache = #{"entries" => maps:get("entries", Cache, nil), "capacity" => maps:get("capacity", Cache, nil), "hits" => maps:get("hits", Cache, nil), "miss" => (maps:get("miss", Cache, nil) + 1), "tick" => maps:get("tick", Cache, nil)},
            throw({return, #{"cache" => New_cache, "value" => 0, "ok" => false}}),
            New_cache_2 = New_cache;
        _ -> New_cache_2 = nil
    end,
        Entries_2 = maps:get("entries", Cache, nil),
        E_2 = (case erlang:is_map(Entries_2) of true -> maps:get(Idx, Entries_2, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Entries_2) + Idx + 1, Entries_2); _ -> mochi_nth(Idx + 1, Entries_2) end end),
        E_3 = maps:put("freq", (maps:get("freq", E_2, nil) + 1), E_2),
        New_tick = (maps:get("tick", Cache, nil) + 1),
        E_4 = maps:put("order", New_tick, E_3),
        Entries_3 = lists:sublist(Entries_2, Idx) ++ [E_4] ++ lists:nthtail(Idx + 1, Entries_2),
        New_cache_3 = #{"entries" => Entries_3, "capacity" => maps:get("capacity", Cache, nil), "hits" => (maps:get("hits", Cache, nil) + 1), "miss" => maps:get("miss", Cache, nil), "tick" => New_tick},
        #{"cache" => New_cache_3, "value" => maps:get("val", E_4, nil), "ok" => true}
    catch {return, Ret} -> Ret end.

remove_lfu(Entries_4) ->
    try
        case (erlang:length(Entries_4) == 0) of
        true -> throw({return, Entries_4});
        _ -> ok
    end,
        Min_idx = 0,
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(Entries_4, I_3, Min_idx) ->
    case (I_3 < erlang:length(Entries_4)) of
        true ->
            E_5 = (case erlang:is_map(Entries_4) of true -> maps:get(I_3, Entries_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Entries_4) + I_3 + 1, Entries_4); _ -> mochi_nth(I_3 + 1, Entries_4) end end),
            M = (case erlang:is_map(Entries_4) of true -> maps:get(Min_idx, Entries_4, nil); _ -> case Min_idx < 0 of true -> mochi_nth(erlang:length(Entries_4) + Min_idx + 1, Entries_4); _ -> mochi_nth(Min_idx + 1, Entries_4) end end),
            case ((maps:get("freq", E_5, nil) < maps:get("freq", M, nil)) orelse ((maps:get("freq", E_5, nil) == maps:get("freq", M, nil)) andalso (maps:get("order", E_5, nil) < maps:get("order", M, nil)))) of
        true -> Min_idx_2 = I_3,
            Min_idx_3 = Min_idx_2;
        _ -> Min_idx_3 = Min_idx
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Entries_4, I_4, Min_idx_3);
        _ -> {Entries_4, I_3, Min_idx}
    end
end,
{Entries_4, I_4, Min_idx_3} = Fun_2(Entries_4, I_3, Min_idx),
        Res = [],
        J = 0,
        Fun_3 = fun Fun_3_loop(Entries_4, I_4, J, Min_idx_3, Res) ->
    case (J < erlang:length(Entries_4)) of
        true ->
            case (J /= Min_idx_3) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Entries_4) of true -> maps:get(J, Entries_4, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Entries_4) + J + 1, Entries_4); _ -> mochi_nth(J + 1, Entries_4) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            J_2 = (J + 1),
            Fun_3_loop(Entries_4, I_4, J_2, Min_idx_3, Res_3);
        _ -> {Entries_4, I_4, J, Min_idx_3, Res}
    end
end,
{Entries_4, I_4, J_2, Min_idx_3, Res_3} = Fun_3(Entries_4, I_4, J, Min_idx_3, Res),
        Res_3
    catch {return, Ret} -> Ret end.

lfu_put(Cache_2, Key_3, Value) ->
    try
        Entries_5 = maps:get("entries", Cache_2, nil),
        Idx_2 = find_entry(Entries_5, Key_3),
        case (Idx_2 /= (0 - 1)) of
        true -> E_6 = (case erlang:is_map(Entries_5) of true -> maps:get(Idx_2, Entries_5, nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(Entries_5) + Idx_2 + 1, Entries_5); _ -> mochi_nth(Idx_2 + 1, Entries_5) end end),
            E_7 = maps:put("val", Value, E_6),
            E_8 = maps:put("freq", (maps:get("freq", E_7, nil) + 1), E_7),
            New_tick_2 = (maps:get("tick", Cache_2, nil) + 1),
            E_9 = maps:put("order", New_tick_2, E_8),
            Entries_6 = lists:sublist(Entries_5, Idx_2) ++ [E_9] ++ lists:nthtail(Idx_2 + 1, Entries_5),
            throw({return, #{"entries" => Entries_6, "capacity" => maps:get("capacity", Cache_2, nil), "hits" => maps:get("hits", Cache_2, nil), "miss" => maps:get("miss", Cache_2, nil), "tick" => New_tick_2}}),
            E_10 = E_9,
            Entries_7 = Entries_6,
            New_tick_3 = New_tick_2;
        _ -> E_10 = nil,
            Entries_7 = Entries_5,
            New_tick_3 = nil
    end,
        case (erlang:length(Entries_7) >= maps:get("capacity", Cache_2, nil)) of
        true -> Entries_8 = remove_lfu(Entries_7),
            Entries_9 = Entries_8;
        _ -> Entries_9 = Entries_7
    end,
        New_tick_4 = (maps:get("tick", Cache_2, nil) + 1),
        New_entry = #{"key" => Key_3, "val" => Value, "freq" => 1, "order" => New_tick_4},
        Entries_10 = lists:append((case Entries_9 of nil -> []; _ -> Entries_9 end), [New_entry]),
        #{"entries" => Entries_10, "capacity" => maps:get("capacity", Cache_2, nil), "hits" => maps:get("hits", Cache_2, nil), "miss" => maps:get("miss", Cache_2, nil), "tick" => New_tick_4}
    catch {return, Ret} -> Ret end.

cache_info(Cache_3) ->
    try
        (((((((("CacheInfo(hits=" ++ mochi_str(maps:get("hits", Cache_3, nil))) ++ ", misses=") ++ mochi_str(maps:get("miss", Cache_3, nil))) ++ ", capacity=") ++ mochi_str(maps:get("capacity", Cache_3, nil))) ++ ", current_size=") ++ mochi_str(erlang:length(maps:get("entries", Cache_3, nil)))) ++ ")")
    catch {return, Ret} -> Ret end.

main() ->
    try
        Cache_4 = lfu_new(2),
        Cache_5 = lfu_put(Cache_4, 1, 1),
        Cache_6 = lfu_put(Cache_5, 2, 2),
        R = lfu_get(Cache_6, 1),
        Cache_7 = maps:get("cache", R, nil),
        case maps:get("ok", R, nil) of
        true -> io:format("~ts~n", [mochi_str(maps:get("value", R, nil))]);
        _ -> io:format("~ts~n", [mochi_repr("None")])
    end,
        Cache_8 = lfu_put(Cache_7, 3, 3),
        R_2 = lfu_get(Cache_8, 2),
        Cache_9 = maps:get("cache", R_2, nil),
        case maps:get("ok", R_2, nil) of
        true -> io:format("~ts~n", [mochi_str(maps:get("value", R_2, nil))]);
        _ -> io:format("~ts~n", [mochi_repr("None")])
    end,
        Cache_10 = lfu_put(Cache_9, 4, 4),
        R_3 = lfu_get(Cache_10, 1),
        Cache_11 = maps:get("cache", R_3, nil),
        case maps:get("ok", R_3, nil) of
        true -> io:format("~ts~n", [mochi_str(maps:get("value", R_3, nil))]);
        _ -> io:format("~ts~n", [mochi_repr("None")])
    end,
        R_4 = lfu_get(Cache_11, 3),
        Cache_12 = maps:get("cache", R_4, nil),
        case maps:get("ok", R_4, nil) of
        true -> io:format("~ts~n", [mochi_str(maps:get("value", R_4, nil))]);
        _ -> io:format("~ts~n", [mochi_repr("None")])
    end,
        R_5 = lfu_get(Cache_12, 4),
        Cache_13 = maps:get("cache", R_5, nil),
        case maps:get("ok", R_5, nil) of
        true -> io:format("~ts~n", [mochi_str(maps:get("value", R_5, nil))]);
        _ -> io:format("~ts~n", [mochi_repr("None")])
    end,
        io:format("~ts~n", [mochi_repr(cache_info(Cache_13))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
