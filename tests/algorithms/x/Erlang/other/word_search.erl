#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, rand/0, rand_range/1, shuffle/1, rand_letter/0, make_word_search/3, insert_dir/6, generate_board/1, visualise/2, main/0]).

% Generated by Mochi transpiler v0.10.69 (582ddaf78e)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

rand() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        erlang:get('seed')
    catch {return, RetCatch} -> RetCatch end.

rand_range(Max) ->
    try
        mochi_mod(rand(), Max)
    catch {return, RetCatch} -> RetCatch end.

shuffle(List_int) ->
    try
        I = (erlang:length(List_int) - 1),
        Fun = fun Fun_loop(I, List_int) ->
    case (I > 0) of
        true ->
            J = rand_range((I + 1)),
            Tmp = (case erlang:is_map(List_int) of true -> maps:get(I, List_int, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(List_int) + I + 1, List_int); _ -> mochi_nth(I + 1, List_int) end end),
            List_int_2 = lists:sublist(List_int, I) ++ [(case erlang:is_map(List_int) of true -> maps:get(J, List_int, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(List_int) + J + 1, List_int); _ -> mochi_nth(J + 1, List_int) end end)] ++ lists:nthtail(I + 1, List_int),
            List_int_3 = lists:sublist(List_int_2, J) ++ [Tmp] ++ lists:nthtail(J + 1, List_int_2),
            I_2 = (I - 1),
            Fun_loop(I_2, List_int_3);
        _ -> {I, List_int}
    end
end,
{I_2, List_int_3} = Fun(I, List_int),
        List_int_3
    catch {return, RetCatch} -> RetCatch end.

rand_letter() ->
    try
        Letters = "abcdefghijklmnopqrstuvwxyz",
        I_3 = rand_range(26),
        string:substr("abcdefghijklmnopqrstuvwxyz", I_3 + 1, ((I_3 + 1) - I_3))
    catch {return, RetCatch} -> RetCatch end.

make_word_search(Words, Width, Height) ->
    try
        Board = [],
        R = 0,
        Fun_3 = fun Fun_3_loop(Board, Height, R, Width, Words) ->
    case (R < Height) of
        true ->
            Row = [],
            C = 0,
            Fun_2 = fun Fun_2_loop(Board, C, Height, R, Row, Width, Words) ->
    case (C < Width) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [""]),
            C_2 = (C + 1),
            Fun_2_loop(Board, C_2, Height, R, Row_2, Width, Words);
        _ -> {Board, C, Height, R, Row, Width, Words}
    end
end,
{Board, C_2, Height, R, Row_2, Width, Words} = Fun_2(Board, C, Height, R, Row, Width, Words),
            Board_2 = lists:append((case Board of nil -> []; _ -> Board end), [Row_2]),
            R_2 = (R + 1),
            Fun_3_loop(Board_2, Height, R_2, Width, Words);
        _ -> {Board, Height, R, Width, Words}
    end
end,
{Board_2, Height, R_2, Width, Words} = Fun_3(Board, Height, R, Width, Words),
        #{"words" => Words, "width" => Width, "height" => Height, "board" => Board_2}
    catch {return, RetCatch} -> RetCatch end.

insert_dir(Ws, Word, Dr, Dc, Rows, Cols) ->
    try
        Word_len = erlang:length(Word),
        Ri = 0,
        Fun_8 = fun Fun_8_loop(Cols, Dc, Dr, Ri, Rows, Word, Word_len, Ws) ->
    case (Ri < erlang:length(Rows)) of
        true ->
            try
                Row_3 = (case erlang:is_map(Rows) of true -> maps:get(Ri, Rows, nil); _ -> case Ri < 0 of true -> mochi_nth(erlang:length(Rows) + Ri + 1, Rows); _ -> mochi_nth(Ri + 1, Rows) end end),
                Ci = 0,
                Fun_7 = fun Fun_7_loop(Ci, Cols, Dc, Dr, Ri, Row_3, Rows, Word, Word_len, Ws) ->
    case (Ci < erlang:length(Cols)) of
        true ->
            try
                Col = (case erlang:is_map(Cols) of true -> maps:get(Ci, Cols, nil); _ -> case Ci < 0 of true -> mochi_nth(erlang:length(Cols) + Ci + 1, Cols); _ -> mochi_nth(Ci + 1, Cols) end end),
                End_r = (Row_3 + (Dr * (Word_len - 1))),
                End_c = (Col + (Dc * (Word_len - 1))),
                Ci_3 = (case ((((End_r < 0) orelse (End_r >= maps:get("height", Ws, nil))) orelse (End_c < 0)) orelse (End_c >= maps:get("width", Ws, nil))) of
        true -> Ci_2 = (Ci + 1),
            throw({continue, Ci_2, Cols, Dc, Dr, Ri, Row_3, Rows, Word, Word_len, Ws}),
            Ci_2;
        _ -> Ci
    end),
                K = 0,
                Ok = true,
                Fun_4 = fun Fun_4_loop(Ci_3, Col, Cols, Dc, Dr, End_c, End_r, K, Ok, Ri, Row_3, Rows, Word, Word_len, Ws) ->
    case (K < Word_len) of
        true ->
            try
                Rr = (Row_3 + (Dr * K)),
                Cc = (Col + (Dc * K)),
                Ok_3 = (case ((case erlang:is_map((case erlang:is_map(maps:get("board", Ws, nil)) of true -> maps:get(Rr, maps:get("board", Ws, nil), nil); _ -> case Rr < 0 of true -> mochi_nth(erlang:length(maps:get("board", Ws, nil)) + Rr + 1, maps:get("board", Ws, nil)); _ -> mochi_nth(Rr + 1, maps:get("board", Ws, nil)) end end)) of true -> maps:get(Cc, (case erlang:is_map(maps:get("board", Ws, nil)) of true -> maps:get(Rr, maps:get("board", Ws, nil), nil); _ -> case Rr < 0 of true -> mochi_nth(erlang:length(maps:get("board", Ws, nil)) + Rr + 1, maps:get("board", Ws, nil)); _ -> mochi_nth(Rr + 1, maps:get("board", Ws, nil)) end end), nil); _ -> case Cc < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("board", Ws, nil)) of true -> maps:get(Rr, maps:get("board", Ws, nil), nil); _ -> case Rr < 0 of true -> mochi_nth(erlang:length(maps:get("board", Ws, nil)) + Rr + 1, maps:get("board", Ws, nil)); _ -> mochi_nth(Rr + 1, maps:get("board", Ws, nil)) end end)) + Cc + 1, (case erlang:is_map(maps:get("board", Ws, nil)) of true -> maps:get(Rr, maps:get("board", Ws, nil), nil); _ -> case Rr < 0 of true -> mochi_nth(erlang:length(maps:get("board", Ws, nil)) + Rr + 1, maps:get("board", Ws, nil)); _ -> mochi_nth(Rr + 1, maps:get("board", Ws, nil)) end end)); _ -> mochi_nth(Cc + 1, (case erlang:is_map(maps:get("board", Ws, nil)) of true -> maps:get(Rr, maps:get("board", Ws, nil), nil); _ -> case Rr < 0 of true -> mochi_nth(erlang:length(maps:get("board", Ws, nil)) + Rr + 1, maps:get("board", Ws, nil)); _ -> mochi_nth(Rr + 1, maps:get("board", Ws, nil)) end end)) end end) /= "") of
        true -> Ok_2 = false,
            throw({break, {Ci_3, Col, Cols, Dc, Dr, End_c, End_r, K, Ok_2, Ri, Row_3, Rows, Word, Word_len, Ws}}),
            Ok_2;
        _ -> Ok
    end),
                K_2 = (K + 1),
                Fun_4_loop(Ci_3, Col, Cols, Dc, Dr, End_c, End_r, K_2, Ok_3, Ri, Row_3, Rows, Word, Word_len, Ws)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14} -> Fun_4_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10, C11, C12, C13, C14);
                {break, Bs} -> Bs
            end;
        _ -> {Ci_3, Col, Cols, Dc, Dr, End_c, End_r, K, Ok, Ri, Row_3, Rows, Word, Word_len, Ws}
    end
end,
{Ci_3, Col, Cols, Dc, Dr, End_c, End_r, K_2, Ok_3, Ri, Row_3, Rows, Word, Word_len, Ws} = Fun_4(Ci_3, Col, Cols, Dc, Dr, End_c, End_r, K, Ok, Ri, Row_3, Rows, Word, Word_len, Ws),
                K_5 = (case (Ok_3 /= nil) of
        true -> K_3 = 0,
            Fun_5 = fun Fun_5_loop(Ci_3, Col, Cols, Dc, Dr, End_c, End_r, K_3, Ok_3, Ri, Row_3, Rows, Word, Word_len, Ws) ->
    case (K_3 < Word_len) of
        true ->
            Rr2 = (Row_3 + (Dr * K_3)),
            Cc2 = (Col + (Dc * K_3)),
            Row_list = (case erlang:is_map(maps:get("board", Ws, nil)) of true -> maps:get(Rr2, maps:get("board", Ws, nil), nil); _ -> case Rr2 < 0 of true -> mochi_nth(erlang:length(maps:get("board", Ws, nil)) + Rr2 + 1, maps:get("board", Ws, nil)); _ -> mochi_nth(Rr2 + 1, maps:get("board", Ws, nil)) end end),
            Row_list_2 = lists:sublist(Row_list, Cc2) ++ [string:substr(Word, K_3 + 1, ((K_3 + 1) - K_3))] ++ lists:nthtail(Cc2 + 1, Row_list),
            K_4 = (K_3 + 1),
            Fun_5_loop(Ci_3, Col, Cols, Dc, Dr, End_c, End_r, K_4, Ok_3, Ri, Row_3, Rows, Word, Word_len, Ws);
        _ -> {Ci_3, Col, Cols, Dc, Dr, End_c, End_r, K_3, Ok_3, Ri, Row_3, Rows, Word, Word_len, Ws}
    end
end,
{Ci_3, Col, Cols, Dc, Dr, End_c, End_r, K_4, Ok_3, Ri, Row_3, Rows, Word, Word_len, Ws} = Fun_5(Ci_3, Col, Cols, Dc, Dr, End_c, End_r, K_3, Ok_3, Ri, Row_3, Rows, Word, Word_len, Ws),
            throw({return, true}),
            Fun_6 = Fun_5,
            K_4;
        _ -> Fun_6 = Fun_4,
            K_2
    end),
                Ci_4 = (Ci_3 + 1),
                Fun_7_loop(Ci_4, Cols, Dc, Dr, Ri, Row_3, Rows, Word, Word_len, Ws)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9} -> Fun_7_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9);
                {break, Bs} -> Bs
            end;
        _ -> {Ci, Cols, Dc, Dr, Ri, Row_3, Rows, Word, Word_len, Ws}
    end
end,
{Ci_4, Cols, Dc, Dr, Ri, Row_3, Rows, Word, Word_len, Ws} = Fun_7(Ci, Cols, Dc, Dr, Ri, Row_3, Rows, Word, Word_len, Ws),
                Ri_2 = (Ri + 1),
                Fun_8_loop(Cols, Dc, Dr, Ri_2, Rows, Word, Word_len, Ws)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7} -> Fun_8_loop(C0, C1, C2, C3, C4, C5, C6, C7);
                {break, Bs} -> Bs
            end;
        _ -> {Cols, Dc, Dr, Ri, Rows, Word, Word_len, Ws}
    end
end,
{Cols, Dc, Dr, Ri_2, Rows, Word, Word_len, Ws} = Fun_8(Cols, Dc, Dr, Ri, Rows, Word, Word_len, Ws),
        false
    catch {return, RetCatch} -> RetCatch end.

generate_board(Ws_2) ->
    try
        Dirs_r = [-1, -1, 0, 1, 1, 1, 0, -1],
        Dirs_c = [0, 1, 1, 1, 0, -1, -1, -1],
        I_4 = 0,
        Fun_11 = fun Fun_11_loop(Dirs_c, Dirs_r, I_4, Ws_2) ->
    case (I_4 < erlang:length(maps:get("words", Ws_2, nil))) of
        true ->
            Word_2 = (case erlang:is_map(maps:get("words", Ws_2, nil)) of true -> maps:get(I_4, maps:get("words", Ws_2, nil), nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(maps:get("words", Ws_2, nil)) + I_4 + 1, maps:get("words", Ws_2, nil)); _ -> mochi_nth(I_4 + 1, maps:get("words", Ws_2, nil)) end end),
            Rows_2 = [],
            R_3 = 0,
            Fun_9 = fun Fun_9_loop(Dirs_c, Dirs_r, I_4, R_3, Rows_2, Word_2, Ws_2) ->
    case (R_3 < maps:get("height", Ws_2, nil)) of
        true ->
            Rows_3 = lists:append((case Rows_2 of nil -> []; _ -> Rows_2 end), [R_3]),
            R_4 = (R_3 + 1),
            Fun_9_loop(Dirs_c, Dirs_r, I_4, R_4, Rows_3, Word_2, Ws_2);
        _ -> {Dirs_c, Dirs_r, I_4, R_3, Rows_2, Word_2, Ws_2}
    end
end,
{Dirs_c, Dirs_r, I_4, R_4, Rows_3, Word_2, Ws_2} = Fun_9(Dirs_c, Dirs_r, I_4, R_3, Rows_2, Word_2, Ws_2),
            Cols_2 = [],
            C_3 = 0,
            Fun_10 = fun Fun_10_loop(C_3, Cols_2, Dirs_c, Dirs_r, I_4, R_4, Rows_3, Word_2, Ws_2) ->
    case (C_3 < maps:get("width", Ws_2, nil)) of
        true ->
            Cols_3 = lists:append((case Cols_2 of nil -> []; _ -> Cols_2 end), [C_3]),
            C_4 = (C_3 + 1),
            Fun_10_loop(C_4, Cols_3, Dirs_c, Dirs_r, I_4, R_4, Rows_3, Word_2, Ws_2);
        _ -> {C_3, Cols_2, Dirs_c, Dirs_r, I_4, R_4, Rows_3, Word_2, Ws_2}
    end
end,
{C_4, Cols_3, Dirs_c, Dirs_r, I_4, R_4, Rows_3, Word_2, Ws_2} = Fun_10(C_3, Cols_2, Dirs_c, Dirs_r, I_4, R_4, Rows_3, Word_2, Ws_2),
            Rows_4 = shuffle(Rows_3),
            Cols_4 = shuffle(Cols_3),
            D = rand_range(8),
            insert_dir(Ws_2, Word_2, (case erlang:is_map(Dirs_r) of true -> maps:get(D, Dirs_r, nil); _ -> case D < 0 of true -> mochi_nth(erlang:length(Dirs_r) + D + 1, Dirs_r); _ -> mochi_nth(D + 1, Dirs_r) end end), (case erlang:is_map(Dirs_c) of true -> maps:get(D, Dirs_c, nil); _ -> case D < 0 of true -> mochi_nth(erlang:length(Dirs_c) + D + 1, Dirs_c); _ -> mochi_nth(D + 1, Dirs_c) end end), Rows_4, Cols_4),
            I_5 = (I_4 + 1),
            Fun_11_loop(Dirs_c, Dirs_r, I_5, Ws_2);
        _ -> {Dirs_c, Dirs_r, I_4, Ws_2}
    end
end,
{Dirs_c, Dirs_r, I_5, Ws_2} = Fun_11(Dirs_c, Dirs_r, I_4, Ws_2),
        nil
    catch {return, RetCatch} -> RetCatch end.

visualise(Ws_3, Add_fake_chars) ->
    try
        Result = "",
        R_5 = 0,
        Fun_13 = fun Fun_13_loop(Add_fake_chars, R_5, Result, Ws_3) ->
    case (R_5 < maps:get("height", Ws_3, nil)) of
        true ->
            C_5 = 0,
            Fun_12 = fun Fun_12_loop(Add_fake_chars, C_5, R_5, Result, Ws_3) ->
    case (C_5 < maps:get("width", Ws_3, nil)) of
        true ->
            Ch = (case erlang:is_map((case erlang:is_map(maps:get("board", Ws_3, nil)) of true -> maps:get(R_5, maps:get("board", Ws_3, nil), nil); _ -> case R_5 < 0 of true -> mochi_nth(erlang:length(maps:get("board", Ws_3, nil)) + R_5 + 1, maps:get("board", Ws_3, nil)); _ -> mochi_nth(R_5 + 1, maps:get("board", Ws_3, nil)) end end)) of true -> maps:get(C_5, (case erlang:is_map(maps:get("board", Ws_3, nil)) of true -> maps:get(R_5, maps:get("board", Ws_3, nil), nil); _ -> case R_5 < 0 of true -> mochi_nth(erlang:length(maps:get("board", Ws_3, nil)) + R_5 + 1, maps:get("board", Ws_3, nil)); _ -> mochi_nth(R_5 + 1, maps:get("board", Ws_3, nil)) end end), nil); _ -> case C_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("board", Ws_3, nil)) of true -> maps:get(R_5, maps:get("board", Ws_3, nil), nil); _ -> case R_5 < 0 of true -> mochi_nth(erlang:length(maps:get("board", Ws_3, nil)) + R_5 + 1, maps:get("board", Ws_3, nil)); _ -> mochi_nth(R_5 + 1, maps:get("board", Ws_3, nil)) end end)) + C_5 + 1, (case erlang:is_map(maps:get("board", Ws_3, nil)) of true -> maps:get(R_5, maps:get("board", Ws_3, nil), nil); _ -> case R_5 < 0 of true -> mochi_nth(erlang:length(maps:get("board", Ws_3, nil)) + R_5 + 1, maps:get("board", Ws_3, nil)); _ -> mochi_nth(R_5 + 1, maps:get("board", Ws_3, nil)) end end)); _ -> mochi_nth(C_5 + 1, (case erlang:is_map(maps:get("board", Ws_3, nil)) of true -> maps:get(R_5, maps:get("board", Ws_3, nil), nil); _ -> case R_5 < 0 of true -> mochi_nth(erlang:length(maps:get("board", Ws_3, nil)) + R_5 + 1, maps:get("board", Ws_3, nil)); _ -> mochi_nth(R_5 + 1, maps:get("board", Ws_3, nil)) end end)) end end),
            Ch_5 = (case (Ch == "") of
        true -> Ch_4 = (case Add_fake_chars of
        true -> Ch_2 = rand_letter(),
            Ch_2;
        _ -> Ch_3 = "#",
            Ch_3
    end),
            Ch_4;
        _ -> Ch
    end),
            Result_2 = ((Result ++ Ch_5) ++ " "),
            C_6 = (C_5 + 1),
            Fun_12_loop(Add_fake_chars, C_6, R_5, Result_2, Ws_3);
        _ -> {Add_fake_chars, C_5, R_5, Result, Ws_3}
    end
end,
{Add_fake_chars, C_6, R_5, Result_2, Ws_3} = Fun_12(Add_fake_chars, C_5, R_5, Result, Ws_3),
            Result_3 = (Result_2 ++ "\n"),
            R_6 = (R_5 + 1),
            Fun_13_loop(Add_fake_chars, R_6, Result_3, Ws_3);
        _ -> {Add_fake_chars, R_5, Result, Ws_3}
    end
end,
{Add_fake_chars, R_6, Result_3, Ws_3} = Fun_13(Add_fake_chars, R_5, Result, Ws_3),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Words_2 = ["cat", "dog", "snake", "fish"],
        Ws_4 = make_word_search(Words_2, 10, 10),
        generate_board(Ws_4),
        io:format("~ts~n", [mochi_repr(visualise(Ws_4, true))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 123456789),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
