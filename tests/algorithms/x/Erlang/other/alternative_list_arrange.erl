#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, from_int/1, from_string/1, item_to_string/1, alternative_list_arrange/2, list_to_string/1]).

% Generated by Mochi transpiler v0.10.64 (13cd577cd4) on 2025-08-12 15:27 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

from_int(X) ->
    try
        #{"tag" => "int", "value" => X}
    catch {return, RetCatch} -> RetCatch end.

from_string(S) ->
    try
        #{"tag" => "str", "value" => S}
    catch {return, RetCatch} -> RetCatch end.

item_to_string(It) ->
    try
        (case It of
    #{"tag" := "int", "value" := V} -> mochi_str(V);
    #{"tag" := "str", "value" := S_2} -> S_2
end)
    catch {return, RetCatch} -> RetCatch end.

alternative_list_arrange(First, Second) ->
    try
        Len1 = erlang:length(First),
        Len2 = erlang:length(Second),
        Abs_len = (case (Len1 > Len2) of
    true -> Len1;
    _ -> Len2
end),
        Result = [],
        I = 0,
        Fun = fun Fun_loop(Abs_len, First, I, Len1, Len2, Result, Second) ->
    case (I < Abs_len) of
        true ->
            case (I < Len1) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(First) of true -> maps:get(I, First, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(First) + I + 1, First); _ -> mochi_nth(I + 1, First) end end)]),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            case (I < Len2) of
        true -> Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [(case erlang:is_map(Second) of true -> maps:get(I, Second, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Second) + I + 1, Second); _ -> mochi_nth(I + 1, Second) end end)]),
            Result_5 = Result_4;
        _ -> Result_5 = Result_3
    end,
            I_2 = (I + 1),
            Fun_loop(Abs_len, First, I_2, Len1, Len2, Result_5, Second);
        _ -> {Abs_len, First, I, Len1, Len2, Result, Second}
    end
end,
{Abs_len, First, I_2, Len1, Len2, Result_5, Second} = Fun(Abs_len, First, I, Len1, Len2, Result, Second),
        Result_5
    catch {return, RetCatch} -> RetCatch end.

list_to_string(Xs) ->
    try
        S_3 = "[",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, S_3, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            S_4 = (S_3 ++ item_to_string((case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end))),
            case (I_3 < (erlang:length(Xs) - 1)) of
        true -> S_5 = (S_4 ++ ", "),
            S_6 = S_5;
        _ -> S_6 = S_4
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, S_6, Xs);
        _ -> {I_3, S_3, Xs}
    end
end,
{I_4, S_6, Xs} = Fun_2(I_3, S_3, Xs),
        S_7 = (S_6 ++ "]"),
        S_7
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('example1', alternative_list_arrange([from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)], [from_string("A"), from_string("B"), from_string("C")])),
    io:format("~ts~n", [mochi_repr(list_to_string(erlang:get('example1')))]),
    erlang:put('example2', alternative_list_arrange([from_string("A"), from_string("B"), from_string("C")], [from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)])),
    io:format("~ts~n", [mochi_repr(list_to_string(erlang:get('example2')))]),
    erlang:put('example3', alternative_list_arrange([from_string("X"), from_string("Y"), from_string("Z")], [from_int(9), from_int(8), from_int(7), from_int(6)])),
    io:format("~ts~n", [mochi_repr(list_to_string(erlang:get('example3')))]),
    erlang:put('example4', alternative_list_arrange([from_int(1), from_int(2), from_int(3), from_int(4), from_int(5)], [])),
    io:format("~ts~n", [mochi_repr(list_to_string(erlang:get('example4')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
