#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, get_avg/2, guess_the_number/3]).

% Generated by Mochi transpiler v0.10.64 (480fdd1e6c) on 2025-08-12 14:08 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

get_avg(Number_1, Number_2) ->
    try
        ((Number_1 + Number_2) div 2)
    catch {return, RetCatch} -> RetCatch end.

guess_the_number(Lower, Higher, To_guess) ->
    try
        case (Lower > Higher) of
        true -> erlang:error({panic, "argument value for lower and higher must be(lower > higher)"});
        _ -> ok
    end,
        case mochi_not(((Lower < To_guess) andalso (To_guess < Higher))) of
        true -> erlang:error({panic, "guess value must be within the range of lower and higher value"});
        _ -> ok
    end,
        Answer = fun Answer(Number) ->
    try
        case (Number > To_guess) of
        true -> throw({return, "high"});
        _ -> case (Number < To_guess) of
        true -> throw({return, "low"});
        _ -> throw({return, "same"})
    end
    end,
        nil
    catch {return, RetCatch} -> RetCatch end
end,
        io:format("~ts~n", [mochi_repr("started...")]),
        Last_lowest = Lower,
        Last_highest = Higher,
        Last_numbers = [],
        Fun = fun Fun_loop(Answer, Higher, Last_highest, Last_lowest, Last_numbers, Lower, To_guess) ->
    case true of
        true ->
            try
                Number_2 = get_avg(Last_lowest, Last_highest),
                Last_numbers_2 = lists:append((case Last_numbers of nil -> []; _ -> Last_numbers end), [Number_2]),
                Resp = Answer(Number_2),
                case (Resp == "low") of
        true -> Last_lowest_2 = Number_2,
            Last_highest_4 = Last_highest,
            Last_lowest_3 = Last_lowest_2;
        _ -> case (Resp == "high") of
        true -> Last_highest_2 = Number_2,
            Last_highest_3 = Last_highest_2;
        _ -> throw({break, Answer, Higher, Last_highest, Last_lowest, Last_numbers_2, Lower, To_guess}),
            Last_highest_3 = Last_highest
    end,
            Last_highest_4 = Last_highest_3,
            Last_lowest_3 = Last_lowest
    end,
                Fun_loop(Answer, Higher, Last_highest_4, Last_lowest_3, Last_numbers_2, Lower, To_guess)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {Answer, Higher, Last_highest, Last_lowest, Last_numbers, Lower, To_guess}
    end
end,
{Answer, Higher, Last_highest_4, Last_lowest_3, Last_numbers_2, Lower, To_guess} = Fun(Answer, Higher, Last_highest, Last_lowest, Last_numbers, Lower, To_guess),
        io:format("~ts~n", [mochi_repr(("guess the number : " ++ mochi_str((case erlang:is_map(Last_numbers_2) of true -> maps:get((erlang:length(Last_numbers_2) - 1), Last_numbers_2, nil); _ -> case (erlang:length(Last_numbers_2) - 1) < 0 of true -> mochi_nth(erlang:length(Last_numbers_2) + (erlang:length(Last_numbers_2) - 1) + 1, Last_numbers_2); _ -> mochi_nth((erlang:length(Last_numbers_2) - 1) + 1, Last_numbers_2) end end))))]),
        io:format("~ts~n", [mochi_repr(("details : " ++ mochi_str(Last_numbers_2)))]),
        Last_numbers_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    guess_the_number(10, 1000, 17),
    guess_the_number(-10000, 10000, 7),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
