#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, get_week_day/3]).

% Generated by Mochi transpiler v0.10.64 (0529231fcf) on 2025-08-12 11:18 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

get_week_day(Year, Month, Day) ->
    try
        case (Year < 100) of
        true -> erlang:error({panic, "year should be in YYYY format"});
        _ -> ok
    end,
        case ((Month < 1) orelse (Month > 12)) of
        true -> erlang:error({panic, "month should be between 1 to 12"});
        _ -> ok
    end,
        case ((Day < 1) orelse (Day > 31)) of
        true -> erlang:error({panic, "day should be between 1 to 31"});
        _ -> ok
    end,
        Century = (Year div 100),
        Century_anchor = mochi_mod(((5 * mochi_mod(Century, 4)) + 2), 7),
        Centurian = mochi_mod(Year, 100),
        Centurian_m = mochi_mod(Centurian, 12),
        Dooms_day = mochi_mod(((((Centurian div 12) + Centurian_m) + (Centurian_m div 4)) + Century_anchor), 7),
        Day_anchor = (case ((mochi_mod(Year, 4) /= 0) orelse ((Centurian == 0) andalso (mochi_mod(Year, 400) /= 0))) of
    true -> (case erlang:is_map(erlang:get('DOOMSDAY_NOT_LEAP')) of true -> maps:get((Month - 1), erlang:get('DOOMSDAY_NOT_LEAP'), nil); _ -> case (Month - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('DOOMSDAY_NOT_LEAP')) + (Month - 1) + 1, erlang:get('DOOMSDAY_NOT_LEAP')); _ -> mochi_nth((Month - 1) + 1, erlang:get('DOOMSDAY_NOT_LEAP')) end end);
    _ -> (case erlang:is_map(erlang:get('DOOMSDAY_LEAP')) of true -> maps:get((Month - 1), erlang:get('DOOMSDAY_LEAP'), nil); _ -> case (Month - 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('DOOMSDAY_LEAP')) + (Month - 1) + 1, erlang:get('DOOMSDAY_LEAP')); _ -> mochi_nth((Month - 1) + 1, erlang:get('DOOMSDAY_LEAP')) end end)
end),
        Week_day = mochi_mod(((Dooms_day + Day) - Day_anchor), 7),
        case (Week_day < 0) of
        true -> Week_day_2 = (Week_day + 7),
            Week_day_3 = Week_day_2;
        _ -> Week_day_3 = Week_day
    end,
        maps:get(Week_day_3, erlang:get('WEEK_DAY_NAMES'), nil)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('DOOMSDAY_LEAP', [4, 1, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5]),
    erlang:put('DOOMSDAY_NOT_LEAP', [3, 7, 7, 4, 2, 6, 4, 1, 5, 3, 7, 5]),
    erlang:put('WEEK_DAY_NAMES', #{0 => "Sunday", 1 => "Monday", 2 => "Tuesday", 3 => "Wednesday", 4 => "Thursday", 5 => "Friday", 6 => "Saturday"}),
    io:format("~ts~n", [mochi_repr(get_week_day(2020, 10, 24))]),
    io:format("~ts~n", [mochi_repr(get_week_day(2017, 10, 24))]),
    io:format("~ts~n", [mochi_repr(get_week_day(2019, 5, 3))]),
    io:format("~ts~n", [mochi_repr(get_week_day(1970, 9, 16))]),
    io:format("~ts~n", [mochi_repr(get_week_day(1870, 8, 13))]),
    io:format("~ts~n", [mochi_repr(get_week_day(2040, 3, 14))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
