#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, new_list/0, dll_add/2, dll_remove/2, new_cache/1, lru_get/2, lru_put/3, cache_info/1, print_result/1, main/0]).

% Generated by Mochi transpiler v0.10.64 (480fdd1e6c) on 2025-08-12 14:08 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

new_list() ->
    try
        Nodes = [],
        Head = #{"key" => 0, "value" => 0, "prev" => (0 - 1), "next" => 1},
        Tail = #{"key" => 0, "value" => 0, "prev" => 0, "next" => (0 - 1)},
        Nodes_2 = lists:append((case Nodes of nil -> []; _ -> Nodes end), [Head]),
        Nodes_3 = lists:append((case Nodes_2 of nil -> []; _ -> Nodes_2 end), [Tail]),
        #{"nodes" => Nodes_3, "head" => 0, "tail" => 1}
    catch {return, RetCatch} -> RetCatch end.

dll_add(Lst, Idx) ->
    try
        Nodes_4 = maps:get("nodes", Lst, nil),
        Tail_idx = maps:get("tail", Lst, nil),
        Tail_node = (case erlang:is_map(Nodes_4) of true -> maps:get(Tail_idx, Nodes_4, nil); _ -> case Tail_idx < 0 of true -> mochi_nth(erlang:length(Nodes_4) + Tail_idx + 1, Nodes_4); _ -> mochi_nth(Tail_idx + 1, Nodes_4) end end),
        Prev_idx = maps:get("prev", Tail_node, nil),
        Node = (case erlang:is_map(Nodes_4) of true -> maps:get(Idx, Nodes_4, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Nodes_4) + Idx + 1, Nodes_4); _ -> mochi_nth(Idx + 1, Nodes_4) end end),
        Node_2 = maps:put("prev", Prev_idx, Node),
        Node_3 = maps:put("next", Tail_idx, Node_2),
        Nodes_5 = lists:sublist(Nodes_4, Idx) ++ [Node_3] ++ lists:nthtail(Idx + 1, Nodes_4),
        Prev_node = (case erlang:is_map(Nodes_5) of true -> maps:get(Prev_idx, Nodes_5, nil); _ -> case Prev_idx < 0 of true -> mochi_nth(erlang:length(Nodes_5) + Prev_idx + 1, Nodes_5); _ -> mochi_nth(Prev_idx + 1, Nodes_5) end end),
        Prev_node_2 = maps:put("next", Idx, Prev_node),
        Nodes_6 = lists:sublist(Nodes_5, Prev_idx) ++ [Prev_node_2] ++ lists:nthtail(Prev_idx + 1, Nodes_5),
        Tail_node_2 = maps:put("prev", Idx, Tail_node),
        Nodes_7 = lists:sublist(Nodes_6, Tail_idx) ++ [Tail_node_2] ++ lists:nthtail(Tail_idx + 1, Nodes_6),
        Lst_2 = maps:put("nodes", Nodes_7, Lst),
        Lst_2
    catch {return, RetCatch} -> RetCatch end.

dll_remove(Lst_3, Idx_2) ->
    try
        Nodes_8 = maps:get("nodes", Lst_3, nil),
        Node_4 = (case erlang:is_map(Nodes_8) of true -> maps:get(Idx_2, Nodes_8, nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(Nodes_8) + Idx_2 + 1, Nodes_8); _ -> mochi_nth(Idx_2 + 1, Nodes_8) end end),
        Prev_idx_2 = maps:get("prev", Node_4, nil),
        Next_idx = maps:get("next", Node_4, nil),
        case ((Prev_idx_2 == (0 - 1)) orelse (Next_idx == (0 - 1))) of
        true -> throw({return, Lst_3});
        _ -> ok
    end,
        Prev_node_3 = (case erlang:is_map(Nodes_8) of true -> maps:get(Prev_idx_2, Nodes_8, nil); _ -> case Prev_idx_2 < 0 of true -> mochi_nth(erlang:length(Nodes_8) + Prev_idx_2 + 1, Nodes_8); _ -> mochi_nth(Prev_idx_2 + 1, Nodes_8) end end),
        Prev_node_4 = maps:put("next", Next_idx, Prev_node_3),
        Nodes_9 = lists:sublist(Nodes_8, Prev_idx_2) ++ [Prev_node_4] ++ lists:nthtail(Prev_idx_2 + 1, Nodes_8),
        Next_node = (case erlang:is_map(Nodes_9) of true -> maps:get(Next_idx, Nodes_9, nil); _ -> case Next_idx < 0 of true -> mochi_nth(erlang:length(Nodes_9) + Next_idx + 1, Nodes_9); _ -> mochi_nth(Next_idx + 1, Nodes_9) end end),
        Next_node_2 = maps:put("prev", Prev_idx_2, Next_node),
        Nodes_10 = lists:sublist(Nodes_9, Next_idx) ++ [Next_node_2] ++ lists:nthtail(Next_idx + 1, Nodes_9),
        Node_5 = maps:put("prev", (0 - 1), Node_4),
        Node_6 = maps:put("next", (0 - 1), Node_5),
        Nodes_11 = lists:sublist(Nodes_10, Idx_2) ++ [Node_6] ++ lists:nthtail(Idx_2 + 1, Nodes_10),
        Lst_4 = maps:put("nodes", Nodes_11, Lst_3),
        Lst_4
    catch {return, RetCatch} -> RetCatch end.

new_cache(Cap) ->
    try
        Empty_map = #{},
        #{"list" => new_list(), "capacity" => Cap, "num_keys" => 0, "hits" => 0, "misses" => 0, "cache" => Empty_map}
    catch {return, RetCatch} -> RetCatch end.

lru_get(C, Key) ->
    try
        Cache = C,
        Key_str = mochi_str(Key),
        case maps:is_key(Key_str, maps:get("cache", Cache, nil)) of
        true -> Idx_3 = maps:get(Key_str, maps:get("cache", Cache, nil), nil),
            case (Idx_3 /= (0 - 1)) of
        true -> Cache_2 = maps:put("hits", (maps:get("hits", Cache, nil) + 1), Cache),
            Node_7 = (case erlang:is_map(maps:get("nodes", maps:get("list", Cache_2, nil), nil)) of true -> maps:get(Idx_3, maps:get("nodes", maps:get("list", Cache_2, nil), nil), nil); _ -> case Idx_3 < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", maps:get("list", Cache_2, nil), nil)) + Idx_3 + 1, maps:get("nodes", maps:get("list", Cache_2, nil), nil)); _ -> mochi_nth(Idx_3 + 1, maps:get("nodes", maps:get("list", Cache_2, nil), nil)) end end),
            Value = maps:get("value", Node_7, nil),
            Cache_3 = maps:put("list", dll_remove(maps:get("list", Cache_2, nil), Idx_3), Cache_2),
            Cache_4 = maps:put("list", dll_add(maps:get("list", Cache_3, nil), Idx_3), Cache_3),
            throw({return, #{"cache" => Cache_4, "value" => Value, "ok" => true}}),
            Cache_5 = Cache_4,
            Node_8 = Node_7,
            Value_2 = Value;
        _ -> Cache_5 = Cache,
            Node_8 = nil,
            Value_2 = nil
    end,
            Cache_6 = Cache_5,
            Idx_4 = Idx_3,
            Node_9 = Node_8,
            Value_3 = Value_2;
        _ -> Cache_6 = Cache,
            Idx_4 = nil,
            Node_9 = nil,
            Value_3 = nil
    end,
        Cache_7 = maps:put("misses", (maps:get("misses", Cache_6, nil) + 1), Cache_6),
        #{"cache" => Cache_7, "value" => 0, "ok" => false}
    catch {return, RetCatch} -> RetCatch end.

lru_put(C_2, Key_2, Value_4) ->
    try
        Cache_8 = C_2,
        Key_str_2 = mochi_str(Key_2),
        case mochi_not(maps:is_key(Key_str_2, maps:get("cache", Cache_8, nil))) of
        true -> case (maps:get("num_keys", Cache_8, nil) >= maps:get("capacity", Cache_8, nil)) of
        true -> Head_node = (case erlang:is_map(maps:get("nodes", maps:get("list", Cache_8, nil), nil)) of true -> maps:get(maps:get("head", maps:get("list", Cache_8, nil), nil), maps:get("nodes", maps:get("list", Cache_8, nil), nil), nil); _ -> case maps:get("head", maps:get("list", Cache_8, nil), nil) < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", maps:get("list", Cache_8, nil), nil)) + maps:get("head", maps:get("list", Cache_8, nil), nil) + 1, maps:get("nodes", maps:get("list", Cache_8, nil), nil)); _ -> mochi_nth(maps:get("head", maps:get("list", Cache_8, nil), nil) + 1, maps:get("nodes", maps:get("list", Cache_8, nil), nil)) end end),
            First_idx = maps:get("next", Head_node, nil),
            First_node = (case erlang:is_map(maps:get("nodes", maps:get("list", Cache_8, nil), nil)) of true -> maps:get(First_idx, maps:get("nodes", maps:get("list", Cache_8, nil), nil), nil); _ -> case First_idx < 0 of true -> mochi_nth(erlang:length(maps:get("nodes", maps:get("list", Cache_8, nil), nil)) + First_idx + 1, maps:get("nodes", maps:get("list", Cache_8, nil), nil)); _ -> mochi_nth(First_idx + 1, maps:get("nodes", maps:get("list", Cache_8, nil), nil)) end end),
            Old_key = maps:get("key", First_node, nil),
            Cache_9 = maps:put("list", dll_remove(maps:get("list", Cache_8, nil), First_idx), Cache_8),
            Mdel = maps:get("cache", Cache_9, nil),
            Mdel_2 = maps:put(mochi_str(Old_key), (0 - 1), Mdel),
            Cache_10 = maps:put("cache", Mdel_2, Cache_9),
            Cache_11 = maps:put("num_keys", (maps:get("num_keys", Cache_10, nil) - 1), Cache_10),
            Cache_12 = Cache_11,
            First_idx_2 = First_idx,
            First_node_2 = First_node,
            Head_node_2 = Head_node,
            Mdel_3 = Mdel_2,
            Old_key_2 = Old_key;
        _ -> Cache_12 = Cache_8,
            First_idx_2 = nil,
            First_node_2 = nil,
            Head_node_2 = nil,
            Mdel_3 = nil,
            Old_key_2 = nil
    end,
            Nodes_12 = maps:get("nodes", maps:get("list", Cache_12, nil), nil),
            New_node = #{"key" => Key_2, "value" => Value_4, "prev" => (0 - 1), "next" => (0 - 1)},
            Nodes_13 = lists:append((case Nodes_12 of nil -> []; _ -> Nodes_12 end), [New_node]),
            Idx_5 = (erlang:length(Nodes_13) - 1),
            Cache_tmp = maps:get("list", Cache_12, nil),
            Cache_tmp_2 = maps:put("nodes", Nodes_13, Cache_tmp),
            Cache_13 = maps:put("list", Cache_tmp_2, Cache_12),
            Cache_14 = maps:put("list", dll_add(maps:get("list", Cache_13, nil), Idx_5), Cache_13),
            M = maps:get("cache", Cache_14, nil),
            M_2 = maps:put(Key_str_2, Idx_5, M),
            Cache_15 = maps:put("cache", M_2, Cache_14),
            Cache_16 = maps:put("num_keys", (maps:get("num_keys", Cache_15, nil) + 1), Cache_15),
            Cache_21 = Cache_16,
            Cache_tmp_5 = Cache_tmp_2,
            First_idx_3 = First_idx_2,
            First_node_3 = First_node_2,
            Head_node_3 = Head_node_2,
            Idx_7 = Idx_5,
            M_4 = M_2,
            Mdel_4 = Mdel_3,
            New_node_2 = New_node,
            Node_12 = nil,
            Nodes_16 = Nodes_13,
            Old_key_3 = Old_key_2;
        _ -> M_3 = maps:get("cache", Cache_8, nil),
            Idx_6 = maps:get(Key_str_2, M_3, nil),
            Nodes_14 = maps:get("nodes", maps:get("list", Cache_8, nil), nil),
            Node_10 = (case erlang:is_map(Nodes_14) of true -> maps:get(Idx_6, Nodes_14, nil); _ -> case Idx_6 < 0 of true -> mochi_nth(erlang:length(Nodes_14) + Idx_6 + 1, Nodes_14); _ -> mochi_nth(Idx_6 + 1, Nodes_14) end end),
            Node_11 = maps:put("value", Value_4, Node_10),
            Nodes_15 = lists:sublist(Nodes_14, Idx_6) ++ [Node_11] ++ lists:nthtail(Idx_6 + 1, Nodes_14),
            Cache_tmp_3 = maps:get("list", Cache_8, nil),
            Cache_tmp_4 = maps:put("nodes", Nodes_15, Cache_tmp_3),
            Cache_17 = maps:put("list", Cache_tmp_4, Cache_8),
            Cache_18 = maps:put("list", dll_remove(maps:get("list", Cache_17, nil), Idx_6), Cache_17),
            Cache_19 = maps:put("list", dll_add(maps:get("list", Cache_18, nil), Idx_6), Cache_18),
            Cache_20 = maps:put("cache", M_3, Cache_19),
            Cache_21 = Cache_20,
            Cache_tmp_5 = Cache_tmp_4,
            First_idx_3 = nil,
            First_node_3 = nil,
            Head_node_3 = nil,
            Idx_7 = Idx_6,
            M_4 = M_3,
            Mdel_4 = nil,
            New_node_2 = nil,
            Node_12 = Node_11,
            Nodes_16 = Nodes_15,
            Old_key_3 = nil
    end,
        Cache_21
    catch {return, RetCatch} -> RetCatch end.

cache_info(Cache_22) ->
    try
        (((((((("CacheInfo(hits=" ++ mochi_str(maps:get("hits", Cache_22, nil))) ++ ", misses=") ++ mochi_str(maps:get("misses", Cache_22, nil))) ++ ", capacity=") ++ mochi_str(maps:get("capacity", Cache_22, nil))) ++ ", current size=") ++ mochi_str(maps:get("num_keys", Cache_22, nil))) ++ ")")
    catch {return, RetCatch} -> RetCatch end.

print_result(Res) ->
    try
        case maps:get("ok", Res, nil) of
        true -> io:format("~ts~n", [mochi_str(maps:get("value", Res, nil))]);
        _ -> io:format("~ts~n", [mochi_repr("None")])
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Cache_23 = new_cache(2),
        Cache_24 = lru_put(Cache_23, 1, 1),
        Cache_25 = lru_put(Cache_24, 2, 2),
        R1 = lru_get(Cache_25, 1),
        Cache_26 = maps:get("cache", R1, nil),
        print_result(R1),
        Cache_27 = lru_put(Cache_26, 3, 3),
        R2 = lru_get(Cache_27, 2),
        Cache_28 = maps:get("cache", R2, nil),
        print_result(R2),
        Cache_29 = lru_put(Cache_28, 4, 4),
        R3 = lru_get(Cache_29, 1),
        Cache_30 = maps:get("cache", R3, nil),
        print_result(R3),
        R4 = lru_get(Cache_30, 3),
        Cache_31 = maps:get("cache", R4, nil),
        print_result(R4),
        R5 = lru_get(Cache_31, 4),
        Cache_32 = maps:get("cache", R5, nil),
        print_result(R5),
        io:format("~ts~n", [mochi_repr(cache_info(Cache_32))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
