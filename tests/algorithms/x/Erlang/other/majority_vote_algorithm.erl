#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, index_of/2, majority_vote/2, main/0]).

% Generated by Mochi transpiler v0.10.64 (480fdd1e6c) on 2025-08-12 14:08 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

index_of(Xs, X) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, X, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) == X) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, X, Xs);
        _ -> {I, X, Xs}
    end
end,
{I_2, X, Xs} = Fun(I, X, Xs),
        (0 - 1)
    catch {return, RetCatch} -> RetCatch end.

majority_vote(Votes, Votes_needed_to_win) ->
    try
        case (Votes_needed_to_win < 2) of
        true -> throw({return, []});
        _ -> ok
    end,
        Candidates = [],
        Counts = [],
        I_3 = 0,
        Fun_6 = fun Fun_6_loop(Candidates, Counts, I_3, Votes, Votes_needed_to_win) ->
    case (I_3 < erlang:length(Votes)) of
        true ->
            V = (case erlang:is_map(Votes) of true -> maps:get(I_3, Votes, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Votes) + I_3 + 1, Votes); _ -> mochi_nth(I_3 + 1, Votes) end end),
            Idx = index_of(Candidates, V),
            case (Idx /= (0 - 1)) of
        true -> Counts_2 = lists:sublist(Counts, Idx) ++ [((case erlang:is_map(Counts) of true -> maps:get(Idx, Counts, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Counts) + Idx + 1, Counts); _ -> mochi_nth(Idx + 1, Counts) end end) + 1)] ++ lists:nthtail(Idx + 1, Counts),
            Candidates_5 = Candidates,
            Counts_7 = Counts_2,
            Fun_5 = nil,
            J_6 = nil,
            New_candidates_5 = nil,
            New_counts_5 = nil;
        _ -> case (erlang:length(Candidates) < (Votes_needed_to_win - 1)) of
        true -> Candidates_2 = lists:append((case Candidates of nil -> []; _ -> Candidates end), [V]),
            Counts_3 = lists:append((case Counts of nil -> []; _ -> Counts end), [1]),
            Candidates_4 = Candidates_2,
            Counts_6 = Counts_3,
            Fun_4 = nil,
            J_5 = nil,
            New_candidates_4 = nil,
            New_counts_4 = nil;
        _ -> J = 0,
            Fun_2 = fun Fun_2_loop(Candidates, Counts, I_3, Idx, J, V, Votes, Votes_needed_to_win) ->
    case (J < erlang:length(Counts)) of
        true ->
            Counts_4 = lists:sublist(Counts, J) ++ [((case erlang:is_map(Counts) of true -> maps:get(J, Counts, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Counts) + J + 1, Counts); _ -> mochi_nth(J + 1, Counts) end end) - 1)] ++ lists:nthtail(J + 1, Counts),
            J_2 = (J + 1),
            Fun_2_loop(Candidates, Counts_4, I_3, Idx, J_2, V, Votes, Votes_needed_to_win);
        _ -> {Candidates, Counts, I_3, Idx, J, V, Votes, Votes_needed_to_win}
    end
end,
{Candidates, Counts_4, I_3, Idx, J_2, V, Votes, Votes_needed_to_win} = Fun_2(Candidates, Counts, I_3, Idx, J, V, Votes, Votes_needed_to_win),
            New_candidates = [],
            New_counts = [],
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(Candidates, Counts_4, I_3, Idx, J_3, New_candidates, New_counts, V, Votes, Votes_needed_to_win) ->
    case (J_3 < erlang:length(Candidates)) of
        true ->
            case ((case erlang:is_map(Counts_4) of true -> maps:get(J_3, Counts_4, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Counts_4) + J_3 + 1, Counts_4); _ -> mochi_nth(J_3 + 1, Counts_4) end end) > 0) of
        true -> New_candidates_2 = lists:append((case New_candidates of nil -> []; _ -> New_candidates end), [(case erlang:is_map(Candidates) of true -> maps:get(J_3, Candidates, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Candidates) + J_3 + 1, Candidates); _ -> mochi_nth(J_3 + 1, Candidates) end end)]),
            New_counts_2 = lists:append((case New_counts of nil -> []; _ -> New_counts end), [(case erlang:is_map(Counts_4) of true -> maps:get(J_3, Counts_4, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Counts_4) + J_3 + 1, Counts_4); _ -> mochi_nth(J_3 + 1, Counts_4) end end)]),
            New_candidates_3 = New_candidates_2,
            New_counts_3 = New_counts_2;
        _ -> New_candidates_3 = New_candidates,
            New_counts_3 = New_counts
    end,
            J_4 = (J_3 + 1),
            Fun_3_loop(Candidates, Counts_4, I_3, Idx, J_4, New_candidates_3, New_counts_3, V, Votes, Votes_needed_to_win);
        _ -> {Candidates, Counts_4, I_3, Idx, J_3, New_candidates, New_counts, V, Votes, Votes_needed_to_win}
    end
end,
{Candidates, Counts_4, I_3, Idx, J_4, New_candidates_3, New_counts_3, V, Votes, Votes_needed_to_win} = Fun_3(Candidates, Counts_4, I_3, Idx, J_3, New_candidates, New_counts, V, Votes, Votes_needed_to_win),
            Candidates_3 = New_candidates_3,
            Counts_5 = New_counts_3,
            Candidates_4 = Candidates_3,
            Counts_6 = Counts_5,
            Fun_4 = Fun_3,
            J_5 = J_4,
            New_candidates_4 = New_candidates_3,
            New_counts_4 = New_counts_3
    end,
            Candidates_5 = Candidates_4,
            Counts_7 = Counts_6,
            Fun_5 = Fun_4,
            J_6 = J_5,
            New_candidates_5 = New_candidates_4,
            New_counts_5 = New_counts_4
    end,
            I_4 = (I_3 + 1),
            Fun_6_loop(Candidates_5, Counts_7, I_4, Votes, Votes_needed_to_win);
        _ -> {Candidates, Counts, I_3, Votes, Votes_needed_to_win}
    end
end,
{Candidates_5, Counts_7, I_4, Votes, Votes_needed_to_win} = Fun_6(Candidates, Counts, I_3, Votes, Votes_needed_to_win),
        Final_counts = [],
        J_7 = 0,
        Fun_7 = fun Fun_7_loop(Candidates_5, Counts_7, Final_counts, I_4, J_7, Votes, Votes_needed_to_win) ->
    case (J_7 < erlang:length(Candidates_5)) of
        true ->
            Final_counts_2 = lists:append((case Final_counts of nil -> []; _ -> Final_counts end), [0]),
            J_8 = (J_7 + 1),
            Fun_7_loop(Candidates_5, Counts_7, Final_counts_2, I_4, J_8, Votes, Votes_needed_to_win);
        _ -> {Candidates_5, Counts_7, Final_counts, I_4, J_7, Votes, Votes_needed_to_win}
    end
end,
{Candidates_5, Counts_7, Final_counts_2, I_4, J_8, Votes, Votes_needed_to_win} = Fun_7(Candidates_5, Counts_7, Final_counts, I_4, J_7, Votes, Votes_needed_to_win),
        I_5 = 0,
        Fun_8 = fun Fun_8_loop(Candidates_5, Counts_7, Final_counts_2, I_5, J_8, Votes, Votes_needed_to_win) ->
    case (I_5 < erlang:length(Votes)) of
        true ->
            V_2 = (case erlang:is_map(Votes) of true -> maps:get(I_5, Votes, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Votes) + I_5 + 1, Votes); _ -> mochi_nth(I_5 + 1, Votes) end end),
            Idx_2 = index_of(Candidates_5, V_2),
            case (Idx_2 /= (0 - 1)) of
        true -> Final_counts_3 = lists:sublist(Final_counts_2, Idx_2) ++ [((case erlang:is_map(Final_counts_2) of true -> maps:get(Idx_2, Final_counts_2, nil); _ -> case Idx_2 < 0 of true -> mochi_nth(erlang:length(Final_counts_2) + Idx_2 + 1, Final_counts_2); _ -> mochi_nth(Idx_2 + 1, Final_counts_2) end end) + 1)] ++ lists:nthtail(Idx_2 + 1, Final_counts_2),
            Final_counts_4 = Final_counts_3;
        _ -> Final_counts_4 = Final_counts_2
    end,
            I_6 = (I_5 + 1),
            Fun_8_loop(Candidates_5, Counts_7, Final_counts_4, I_6, J_8, Votes, Votes_needed_to_win);
        _ -> {Candidates_5, Counts_7, Final_counts_2, I_5, J_8, Votes, Votes_needed_to_win}
    end
end,
{Candidates_5, Counts_7, Final_counts_4, I_6, J_8, Votes, Votes_needed_to_win} = Fun_8(Candidates_5, Counts_7, Final_counts_2, I_5, J_8, Votes, Votes_needed_to_win),
        Result = [],
        J_9 = 0,
        Fun_9 = fun Fun_9_loop(Candidates_5, Counts_7, Final_counts_4, I_6, J_9, Result, Votes, Votes_needed_to_win) ->
    case (J_9 < erlang:length(Candidates_5)) of
        true ->
            case (((case erlang:is_map(Final_counts_4) of true -> maps:get(J_9, Final_counts_4, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(Final_counts_4) + J_9 + 1, Final_counts_4); _ -> mochi_nth(J_9 + 1, Final_counts_4) end end) * Votes_needed_to_win) > erlang:length(Votes)) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Candidates_5) of true -> maps:get(J_9, Candidates_5, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(Candidates_5) + J_9 + 1, Candidates_5); _ -> mochi_nth(J_9 + 1, Candidates_5) end end)]),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            J_10 = (J_9 + 1),
            Fun_9_loop(Candidates_5, Counts_7, Final_counts_4, I_6, J_10, Result_3, Votes, Votes_needed_to_win);
        _ -> {Candidates_5, Counts_7, Final_counts_4, I_6, J_9, Result, Votes, Votes_needed_to_win}
    end
end,
{Candidates_5, Counts_7, Final_counts_4, I_6, J_10, Result_3, Votes, Votes_needed_to_win} = Fun_9(Candidates_5, Counts_7, Final_counts_4, I_6, J_9, Result, Votes, Votes_needed_to_win),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Votes_2 = [1, 2, 2, 3, 1, 3, 2],
        io:format("~ts~n", [mochi_str(majority_vote(Votes_2, 3))]),
        io:format("~ts~n", [mochi_str(majority_vote(Votes_2, 2))]),
        io:format("~ts~n", [mochi_str(majority_vote(Votes_2, 4))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
