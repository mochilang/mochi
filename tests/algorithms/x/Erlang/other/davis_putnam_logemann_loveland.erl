#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, new_clause/1, assign_clause/2, evaluate_clause/2, new_formula/1, remove_symbol/2, dpll_algorithm/3, str_clause/1, str_formula/1]).

% Generated by Mochi transpiler v0.10.64 (480fdd1e6c) on 2025-08-12 14:08 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

new_clause(Lits) ->
    try
        M = #{},
        Names = [],
        I = 0,
        Fun = fun Fun_loop(I, Lits, M, Names) ->
    case (I < erlang:length(Lits)) of
        true ->
            Lit = (case erlang:is_map(Lits) of true -> maps:get(I, Lits, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Lits) + I + 1, Lits); _ -> mochi_nth(I + 1, Lits) end end),
            M_2 = maps:put(Lit, (0 - 1), M),
            Names_2 = lists:append((case Names of nil -> []; _ -> Names end), [Lit]),
            I_2 = (I + 1),
            Fun_loop(I_2, Lits, M_2, Names_2);
        _ -> {I, Lits, M, Names}
    end
end,
{I_2, Lits, M_2, Names_2} = Fun(I, Lits, M, Names),
        #{"literals" => M_2, "names" => Names_2}
    catch {return, RetCatch} -> RetCatch end.

assign_clause(C, Model) ->
    try
        Lits_2 = maps:get("literals", C, nil),
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(C, I_3, Lits_2, Model) ->
    case (I_3 < erlang:length(maps:get("names", C, nil))) of
        true ->
            Lit_2 = (case erlang:is_map(maps:get("names", C, nil)) of true -> maps:get(I_3, maps:get("names", C, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("names", C, nil)) + I_3 + 1, maps:get("names", C, nil)); _ -> mochi_nth(I_3 + 1, maps:get("names", C, nil)) end end),
            Symbol = string:substr(Lit_2, 0 + 1, (2 - 0)),
            case maps:is_key(Symbol, Model) of
        true -> Value = maps:get(Symbol, Model, nil),
            case ((string:substr(Lit_2, (erlang:length(Lit_2) - 1) + 1, (erlang:length(Lit_2) - (erlang:length(Lit_2) - 1))) == "'") andalso (Value /= (0 - 1))) of
        true -> Value_2 = (1 - Value),
            Value_3 = Value_2;
        _ -> Value_3 = Value
    end,
            Lits_3 = maps:put(Lit_2, Value_3, Lits_2),
            Lits_4 = Lits_3,
            Value_4 = Value_3;
        _ -> Lits_4 = Lits_2,
            Value_4 = nil
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(C, I_4, Lits_4, Model);
        _ -> {C, I_3, Lits_2, Model}
    end
end,
{C, I_4, Lits_4, Model} = Fun_2(C, I_3, Lits_2, Model),
        C_2 = maps:put("literals", Lits_4, C),
        C_2
    catch {return, RetCatch} -> RetCatch end.

evaluate_clause(C_3, Model_2) ->
    try
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(C_3, I_5, Model_2) ->
    case (I_5 < erlang:length(maps:get("names", C_3, nil))) of
        true ->
            Lit_3 = (case erlang:is_map(maps:get("names", C_3, nil)) of true -> maps:get(I_5, maps:get("names", C_3, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("names", C_3, nil)) + I_5 + 1, maps:get("names", C_3, nil)); _ -> mochi_nth(I_5 + 1, maps:get("names", C_3, nil)) end end),
            Sym = (case (string:substr(Lit_3, (erlang:length(Lit_3) - 1) + 1, (erlang:length(Lit_3) - (erlang:length(Lit_3) - 1))) == "'") of
    true -> string:substr(Lit_3, 0 + 1, (2 - 0));
    _ -> (Lit_3 ++ "'")
end),
            case maps:is_key(Sym, maps:get("literals", C_3, nil)) of
        true -> throw({return, #{"value" => 1, "clause" => C_3}});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(C_3, I_6, Model_2);
        _ -> {C_3, I_5, Model_2}
    end
end,
{C_3, I_6, Model_2} = Fun_3(C_3, I_5, Model_2),
        C_4 = assign_clause(C_3, Model_2),
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(C_4, I_7, Model_2) ->
    case (I_7 < erlang:length(maps:get("names", C_4, nil))) of
        true ->
            Lit_4 = (case erlang:is_map(maps:get("names", C_4, nil)) of true -> maps:get(I_7, maps:get("names", C_4, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("names", C_4, nil)) + I_7 + 1, maps:get("names", C_4, nil)); _ -> mochi_nth(I_7 + 1, maps:get("names", C_4, nil)) end end),
            Value_5 = maps:get(Lit_4, maps:get("literals", C_4, nil), nil),
            case (Value_5 == 1) of
        true -> throw({return, #{"value" => 1, "clause" => C_4}});
        _ -> ok
    end,
            case (Value_5 == (0 - 1)) of
        true -> throw({return, #{"value" => (0 - 1), "clause" => C_4}});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(C_4, I_8, Model_2);
        _ -> {C_4, I_7, Model_2}
    end
end,
{C_4, I_8, Model_2} = Fun_4(C_4, I_7, Model_2),
        Any_true = 0,
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(Any_true, C_4, I_9, Model_2) ->
    case (I_9 < erlang:length(maps:get("names", C_4, nil))) of
        true ->
            Lit_5 = (case erlang:is_map(maps:get("names", C_4, nil)) of true -> maps:get(I_9, maps:get("names", C_4, nil), nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(maps:get("names", C_4, nil)) + I_9 + 1, maps:get("names", C_4, nil)); _ -> mochi_nth(I_9 + 1, maps:get("names", C_4, nil)) end end),
            case (maps:get(Lit_5, maps:get("literals", C_4, nil), nil) == 1) of
        true -> Any_true_2 = 1,
            Any_true_3 = Any_true_2;
        _ -> Any_true_3 = Any_true
    end,
            I_10 = (I_9 + 1),
            Fun_5_loop(Any_true_3, C_4, I_10, Model_2);
        _ -> {Any_true, C_4, I_9, Model_2}
    end
end,
{Any_true_3, C_4, I_10, Model_2} = Fun_5(Any_true, C_4, I_9, Model_2),
        #{"value" => Any_true_3, "clause" => C_4}
    catch {return, RetCatch} -> RetCatch end.

new_formula(Cs) ->
    try
        #{"clauses" => Cs}
    catch {return, RetCatch} -> RetCatch end.

remove_symbol(Symbols, S) ->
    try
        Res = [],
        I_11 = 0,
        Fun_6 = fun Fun_6_loop(I_11, Res, S, Symbols) ->
    case (I_11 < erlang:length(Symbols)) of
        true ->
            case ((case erlang:is_map(Symbols) of true -> maps:get(I_11, Symbols, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Symbols) + I_11 + 1, Symbols); _ -> mochi_nth(I_11 + 1, Symbols) end end) /= S) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Symbols) of true -> maps:get(I_11, Symbols, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Symbols) + I_11 + 1, Symbols); _ -> mochi_nth(I_11 + 1, Symbols) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_12 = (I_11 + 1),
            Fun_6_loop(I_12, Res_3, S, Symbols);
        _ -> {I_11, Res, S, Symbols}
    end
end,
{I_12, Res_3, S, Symbols} = Fun_6(I_11, Res, S, Symbols),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

dpll_algorithm(Clauses, Symbols_2, Model_3) ->
    try
        All_true = true,
        I_13 = 0,
        Fun_7 = fun Fun_7_loop(All_true, Clauses, I_13, Model_3, Symbols_2) ->
    case (I_13 < erlang:length(Clauses)) of
        true ->
            Ev = evaluate_clause((case erlang:is_map(Clauses) of true -> maps:get(I_13, Clauses, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Clauses) + I_13 + 1, Clauses); _ -> mochi_nth(I_13 + 1, Clauses) end end), Model_3),
            Clauses_2 = lists:sublist(Clauses, I_13) ++ [maps:get("clause", Ev, nil)] ++ lists:nthtail(I_13 + 1, Clauses),
            case (maps:get("value", Ev, nil) == 0) of
        true -> throw({return, #{"sat" => false, "model" => #{}}}),
            All_true_4 = All_true;
        _ -> case (maps:get("value", Ev, nil) == (0 - 1)) of
        true -> All_true_2 = false,
            All_true_3 = All_true_2;
        _ -> All_true_3 = All_true
    end,
            All_true_4 = All_true_3
    end,
            I_14 = (I_13 + 1),
            Fun_7_loop(All_true_4, Clauses_2, I_14, Model_3, Symbols_2);
        _ -> {All_true, Clauses, I_13, Model_3, Symbols_2}
    end
end,
{All_true_4, Clauses_2, I_14, Model_3, Symbols_2} = Fun_7(All_true, Clauses, I_13, Model_3, Symbols_2),
        case (All_true_4 /= nil) of
        true -> throw({return, #{"sat" => true, "model" => Model_3}});
        _ -> ok
    end,
        P = (case erlang:is_map(Symbols_2) of true -> maps:get(0, Symbols_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Symbols_2) + 0 + 1, Symbols_2); _ -> mochi_nth(0 + 1, Symbols_2) end end),
        Rest = remove_symbol(Symbols_2, P),
        Tmp1 = Model_3,
        Tmp2 = Model_3,
        Tmp1_2 = maps:put(P, 1, Tmp1),
        Tmp2_2 = maps:put(P, 0, Tmp2),
        Res1 = dpll_algorithm(Clauses_2, Rest, Tmp1_2),
        case maps:get("sat", Res1, nil) of
        true -> throw({return, Res1});
        _ -> ok
    end,
        dpll_algorithm(Clauses_2, Rest, Tmp2_2)
    catch {return, RetCatch} -> RetCatch end.

str_clause(C_5) ->
    try
        Line = "{",
        First = true,
        I_15 = 0,
        Fun_8 = fun Fun_8_loop(C_5, First, I_15, Line) ->
    case (I_15 < erlang:length(maps:get("names", C_5, nil))) of
        true ->
            Lit_6 = (case erlang:is_map(maps:get("names", C_5, nil)) of true -> maps:get(I_15, maps:get("names", C_5, nil), nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(maps:get("names", C_5, nil)) + I_15 + 1, maps:get("names", C_5, nil)); _ -> mochi_nth(I_15 + 1, maps:get("names", C_5, nil)) end end),
            case First of
        true -> First_2 = false,
            First_3 = First_2,
            Line_3 = Line;
        _ -> Line_2 = (Line ++ " , "),
            First_3 = First,
            Line_3 = Line_2
    end,
            Line_4 = (Line_3 ++ Lit_6),
            I_16 = (I_15 + 1),
            Fun_8_loop(C_5, First_3, I_16, Line_4);
        _ -> {C_5, First, I_15, Line}
    end
end,
{C_5, First_3, I_16, Line_4} = Fun_8(C_5, First, I_15, Line),
        Line_5 = (Line_4 ++ "}"),
        Line_5
    catch {return, RetCatch} -> RetCatch end.

str_formula(F) ->
    try
        Line_6 = "{",
        I_17 = 0,
        Fun_9 = fun Fun_9_loop(F, I_17, Line_6) ->
    case (I_17 < erlang:length(maps:get("clauses", F, nil))) of
        true ->
            Line_7 = (Line_6 ++ str_clause((case erlang:is_map(maps:get("clauses", F, nil)) of true -> maps:get(I_17, maps:get("clauses", F, nil), nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(maps:get("clauses", F, nil)) + I_17 + 1, maps:get("clauses", F, nil)); _ -> mochi_nth(I_17 + 1, maps:get("clauses", F, nil)) end end))),
            case (I_17 < (erlang:length(maps:get("clauses", F, nil)) - 1)) of
        true -> Line_8 = (Line_7 ++ " , "),
            Line_9 = Line_8;
        _ -> Line_9 = Line_7
    end,
            I_18 = (I_17 + 1),
            Fun_9_loop(F, I_18, Line_9);
        _ -> {F, I_17, Line_6}
    end
end,
{F, I_18, Line_9} = Fun_9(F, I_17, Line_6),
        Line_10 = (Line_9 ++ "}"),
        Line_10
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('clause1', new_clause(["A4", "A3", "A5'", "A1", "A3'"])),
    erlang:put('clause2', new_clause(["A4"])),
    erlang:put('formula', new_formula([erlang:get('clause1'), erlang:get('clause2')])),
    erlang:put('formula_str', str_formula(erlang:get('formula'))),
    erlang:put('clauses', [erlang:get('clause1'), erlang:get('clause2')]),
    erlang:put('symbols', ["A4", "A3", "A5", "A1"]),
    erlang:put('model', #{}),
    erlang:put('result', dpll_algorithm(erlang:get('clauses'), erlang:get('symbols'), erlang:get('model'))),
    case maps:get("sat", erlang:get('result'), nil) of
        true -> io:format("~ts~n", [mochi_repr((("The formula " ++ erlang:get('formula_str')) ++ " is satisfiable."))]);
        _ -> io:format("~ts~n", [mochi_repr((("The formula " ++ erlang:get('formula_str')) ++ " is not satisfiable."))])
    end,
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
