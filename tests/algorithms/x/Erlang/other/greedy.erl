#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, get_value/1, get_weight/1, get_name/1, value_weight/1, build_menu/3, sort_desc/2, greedy/3, thing_to_string/1, list_to_string/1]).

% Generated by Mochi transpiler v0.10.61 (c45765bf43) on 2025-08-08 15:36 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

get_value(T) ->
    try
        maps:get("value", T, nil)
    catch {return, Ret} -> Ret end.

get_weight(T_2) ->
    try
        maps:get("weight", T_2, nil)
    catch {return, Ret} -> Ret end.

get_name(T_3) ->
    try
        maps:get("name", T_3, nil)
    catch {return, Ret} -> Ret end.

value_weight(T_4) ->
    try
        mochi_safe_div(maps:get("value", T_4, nil), maps:get("weight", T_4, nil))
    catch {return, Ret} -> Ret end.

build_menu(Names, Values, Weights) ->
    try
        Menu = [],
        I = 0,
        Fun = fun Fun_loop(I, Menu, Names, Values, Weights) ->
    case (((I < erlang:length(Values)) andalso (I < erlang:length(Names))) andalso (I < erlang:length(Weights))) of
        true ->
            Menu_2 = lists:append((case Menu of nil -> []; _ -> Menu end), [#{"name" => (case erlang:is_map(Names) of true -> maps:get(I, Names, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Names) + I + 1, Names); _ -> mochi_nth(I + 1, Names) end end), "value" => (case erlang:is_map(Values) of true -> maps:get(I, Values, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Values) + I + 1, Values); _ -> mochi_nth(I + 1, Values) end end), "weight" => (case erlang:is_map(Weights) of true -> maps:get(I, Weights, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Weights) + I + 1, Weights); _ -> mochi_nth(I + 1, Weights) end end)}]),
            I_2 = (I + 1),
            Fun_loop(I_2, Menu_2, Names, Values, Weights);
        _ -> {I, Menu, Names, Values, Weights}
    end
end,
{I_2, Menu_2, Names, Values, Weights} = Fun(I, Menu, Names, Values, Weights),
        Menu_2
    catch {return, Ret} -> Ret end.

sort_desc(Items, Key_func) ->
    try
        Arr = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Arr, I_3, Items, Key_func) ->
    case (I_3 < erlang:length(Items)) of
        true ->
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [(case erlang:is_map(Items) of true -> maps:get(I_3, Items, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Items) + I_3 + 1, Items); _ -> mochi_nth(I_3 + 1, Items) end end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr_2, I_4, Items, Key_func);
        _ -> {Arr, I_3, Items, Key_func}
    end
end,
{Arr_2, I_4, Items, Key_func} = Fun_2(Arr, I_3, Items, Key_func),
        J = 1,
        Fun_4 = fun Fun_4_loop(Arr_2, I_4, Items, J, Key_func) ->
    case (J < erlang:length(Arr_2)) of
        true ->
            Key_item = (case erlang:is_map(Arr_2) of true -> maps:get(J, Arr_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr_2) + J + 1, Arr_2); _ -> mochi_nth(J + 1, Arr_2) end end),
            Key_val = Key_func(Key_item),
            K = (J - 1),
            Fun_3 = fun Fun_3_loop(Arr_2, I_4, Items, J, K, Key_func, Key_item, Key_val) ->
    case ((K >= 0) andalso (Key_func((case erlang:is_map(Arr_2) of true -> maps:get(K, Arr_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Arr_2) + K + 1, Arr_2); _ -> mochi_nth(K + 1, Arr_2) end end)) < Key_val)) of
        true ->
            Arr_3 = lists:sublist(Arr_2, (K + 1)) ++ [(case erlang:is_map(Arr_2) of true -> maps:get(K, Arr_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Arr_2) + K + 1, Arr_2); _ -> mochi_nth(K + 1, Arr_2) end end)] ++ lists:nthtail((K + 1) + 1, Arr_2),
            K_2 = (K - 1),
            Fun_3_loop(Arr_3, I_4, Items, J, K_2, Key_func, Key_item, Key_val);
        _ -> {Arr_2, I_4, Items, J, K, Key_func, Key_item, Key_val}
    end
end,
{Arr_3, I_4, Items, J, K_2, Key_func, Key_item, Key_val} = Fun_3(Arr_2, I_4, Items, J, K, Key_func, Key_item, Key_val),
            Arr_4 = lists:sublist(Arr_3, (K_2 + 1)) ++ [Key_item] ++ lists:nthtail((K_2 + 1) + 1, Arr_3),
            J_2 = (J + 1),
            Fun_4_loop(Arr_4, I_4, Items, J_2, Key_func);
        _ -> {Arr_2, I_4, Items, J, Key_func}
    end
end,
{Arr_4, I_4, Items, J_2, Key_func} = Fun_4(Arr_2, I_4, Items, J, Key_func),
        Arr_4
    catch {return, Ret} -> Ret end.

greedy(Items_2, Max_cost, Key_func_2) ->
    try
        Items_copy = sort_desc(Items_2, Key_func_2),
        Result = [],
        Total_value = 0.0,
        Total_cost = 0.0,
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(I_5, Items_2, Items_copy, Key_func_2, Max_cost, Result, Total_cost, Total_value) ->
    case (I_5 < erlang:length(Items_copy)) of
        true ->
            It = (case erlang:is_map(Items_copy) of true -> maps:get(I_5, Items_copy, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Items_copy) + I_5 + 1, Items_copy); _ -> mochi_nth(I_5 + 1, Items_copy) end end),
            W = get_weight(It),
            case ((Total_cost + W) =< Max_cost) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [It]),
            Total_cost_2 = (Total_cost + W),
            Total_value_2 = (Total_value + get_value(It)),
            Result_3 = Result_2,
            Total_cost_3 = Total_cost_2,
            Total_value_3 = Total_value_2;
        _ -> Result_3 = Result,
            Total_cost_3 = Total_cost,
            Total_value_3 = Total_value
    end,
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, Items_2, Items_copy, Key_func_2, Max_cost, Result_3, Total_cost_3, Total_value_3);
        _ -> {I_5, Items_2, Items_copy, Key_func_2, Max_cost, Result, Total_cost, Total_value}
    end
end,
{I_6, Items_2, Items_copy, Key_func_2, Max_cost, Result_3, Total_cost_3, Total_value_3} = Fun_5(I_5, Items_2, Items_copy, Key_func_2, Max_cost, Result, Total_cost, Total_value),
        #{"items" => Result_3, "total_value" => Total_value_3}
    catch {return, Ret} -> Ret end.

thing_to_string(T_5) ->
    try
        (((((("Thing(" ++ maps:get("name", T_5, nil)) ++ ", ") ++ mochi_str(maps:get("value", T_5, nil))) ++ ", ") ++ mochi_str(maps:get("weight", T_5, nil))) ++ ")")
    catch {return, Ret} -> Ret end.

list_to_string(Ts) ->
    try
        S = "[",
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(I_7, S, Ts) ->
    case (I_7 < erlang:length(Ts)) of
        true ->
            S_2 = (S ++ thing_to_string((case erlang:is_map(Ts) of true -> maps:get(I_7, Ts, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Ts) + I_7 + 1, Ts); _ -> mochi_nth(I_7 + 1, Ts) end end))),
            case (I_7 < (erlang:length(Ts) - 1)) of
        true -> S_3 = (S_2 ++ ", "),
            S_4 = S_3;
        _ -> S_4 = S_2
    end,
            I_8 = (I_7 + 1),
            Fun_6_loop(I_8, S_4, Ts);
        _ -> {I_7, S, Ts}
    end
end,
{I_8, S_4, Ts} = Fun_6(I_7, S, Ts),
        S_5 = (S_4 ++ "]"),
        S_5
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('food', ["Burger", "Pizza", "Coca Cola", "Rice", "Sambhar", "Chicken", "Fries", "Milk"]),
    erlang:put('value', [80.0, 100.0, 60.0, 70.0, 50.0, 110.0, 90.0, 60.0]),
    erlang:put('weight', [40.0, 60.0, 40.0, 70.0, 100.0, 85.0, 55.0, 70.0]),
    erlang:put('foods', build_menu(erlang:get('food'), erlang:get('value'), erlang:get('weight'))),
    io:format("~ts~n", [mochi_repr(list_to_string(erlang:get('foods')))]),
    erlang:put('res', greedy(erlang:get('foods'), 500.0, fun get_value/1)),
    io:format("~ts~n", [mochi_repr(list_to_string(maps:get("items", erlang:get('res'), nil)))]),
    io:format("~ts~n", [mochi_str(maps:get("total_value", erlang:get('res'), nil))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
