#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, get_data/1, calculate_each_score/2, generate_final_scores/1, procentual_proximity/2]).

% Generated by Mochi transpiler v0.10.64 (a3a385f0f9) on 2025-08-12 12:37 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

get_data(Source_data) ->
    try
        Data_lists = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Data_lists, I, Source_data) ->
    case (I < erlang:length(Source_data)) of
        true ->
            Row = (case erlang:is_map(Source_data) of true -> maps:get(I, Source_data, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Source_data) + I + 1, Source_data); _ -> mochi_nth(I + 1, Source_data) end end),
            J = 0,
            Fun = fun Fun_loop(Data_lists, I, J, Row, Source_data) ->
    case (J < erlang:length(Row)) of
        true ->
            case (erlang:length(Data_lists) < (J + 1)) of
        true -> Empty = [],
            Data_lists_2 = lists:append((case Data_lists of nil -> []; _ -> Data_lists end), [Empty]),
            Data_lists_3 = Data_lists_2,
            Empty_2 = Empty;
        _ -> Data_lists_3 = Data_lists,
            Empty_2 = nil
    end,
            Data_lists_4 = lists:sublist(Data_lists_3, J) ++ [lists:append((case (case erlang:is_map(Data_lists_3) of true -> maps:get(J, Data_lists_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Data_lists_3) + J + 1, Data_lists_3); _ -> mochi_nth(J + 1, Data_lists_3) end end) of nil -> []; _ -> (case erlang:is_map(Data_lists_3) of true -> maps:get(J, Data_lists_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Data_lists_3) + J + 1, Data_lists_3); _ -> mochi_nth(J + 1, Data_lists_3) end end) end), [(case erlang:is_map(Row) of true -> maps:get(J, Row, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Row) + J + 1, Row); _ -> mochi_nth(J + 1, Row) end end)])] ++ lists:nthtail(J + 1, Data_lists_3),
            J_2 = (J + 1),
            Fun_loop(Data_lists_4, I, J_2, Row, Source_data);
        _ -> {Data_lists, I, J, Row, Source_data}
    end
end,
{Data_lists_4, I, J_2, Row, Source_data} = Fun(Data_lists, I, J, Row, Source_data),
            I_2 = (I + 1),
            Fun_2_loop(Data_lists_4, I_2, Source_data);
        _ -> {Data_lists, I, Source_data}
    end
end,
{Data_lists_4, I_2, Source_data} = Fun_2(Data_lists, I, Source_data),
        Data_lists_4
    catch {return, RetCatch} -> RetCatch end.

calculate_each_score(Data_lists_5, Weights) ->
    try
        Score_lists = [],
        I_3 = 0,
        Fun_7 = fun Fun_7_loop(Data_lists_5, I_3, Score_lists, Weights) ->
    case (I_3 < erlang:length(Data_lists_5)) of
        true ->
            Dlist = (case erlang:is_map(Data_lists_5) of true -> maps:get(I_3, Data_lists_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Data_lists_5) + I_3 + 1, Data_lists_5); _ -> mochi_nth(I_3 + 1, Data_lists_5) end end),
            Weight = (case erlang:is_map(Weights) of true -> maps:get(I_3, Weights, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Weights) + I_3 + 1, Weights); _ -> mochi_nth(I_3 + 1, Weights) end end),
            Mind = (case erlang:is_map(Dlist) of true -> maps:get(0, Dlist, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Dlist) + 0 + 1, Dlist); _ -> mochi_nth(0 + 1, Dlist) end end),
            Maxd = (case erlang:is_map(Dlist) of true -> maps:get(0, Dlist, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Dlist) + 0 + 1, Dlist); _ -> mochi_nth(0 + 1, Dlist) end end),
            J_3 = 1,
            Fun_3 = fun Fun_3_loop(Data_lists_5, Dlist, I_3, J_3, Maxd, Mind, Score_lists, Weight, Weights) ->
    case (J_3 < erlang:length(Dlist)) of
        true ->
            Val = (case erlang:is_map(Dlist) of true -> maps:get(J_3, Dlist, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Dlist) + J_3 + 1, Dlist); _ -> mochi_nth(J_3 + 1, Dlist) end end),
            case (Val < Mind) of
        true -> Mind_2 = Val,
            Mind_3 = Mind_2;
        _ -> Mind_3 = Mind
    end,
            case (Val > Maxd) of
        true -> Maxd_2 = Val,
            Maxd_3 = Maxd_2;
        _ -> Maxd_3 = Maxd
    end,
            J_4 = (J_3 + 1),
            Fun_3_loop(Data_lists_5, Dlist, I_3, J_4, Maxd_3, Mind_3, Score_lists, Weight, Weights);
        _ -> {Data_lists_5, Dlist, I_3, J_3, Maxd, Mind, Score_lists, Weight, Weights}
    end
end,
{Data_lists_5, Dlist, I_3, J_4, Maxd_3, Mind_3, Score_lists, Weight, Weights} = Fun_3(Data_lists_5, Dlist, I_3, J_3, Maxd, Mind, Score_lists, Weight, Weights),
            Score = [],
            J_5 = 0,
            case (Weight == 0) of
        true -> Fun_4 = fun Fun_4_loop(Data_lists_5, Dlist, I_3, J_5, Maxd_3, Mind_3, Score, Score_lists, Weight, Weights) ->
    case (J_5 < erlang:length(Dlist)) of
        true ->
            Item = (case erlang:is_map(Dlist) of true -> maps:get(J_5, Dlist, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Dlist) + J_5 + 1, Dlist); _ -> mochi_nth(J_5 + 1, Dlist) end end),
            case ((Maxd_3 - Mind_3) == 0.0) of
        true -> Score_2 = lists:append((case Score of nil -> []; _ -> Score end), [1.0]),
            Score_4 = Score_2;
        _ -> Score_3 = lists:append((case Score of nil -> []; _ -> Score end), [(1.0 - mochi_safe_div((Item - Mind_3), (Maxd_3 - Mind_3)))]),
            Score_4 = Score_3
    end,
            J_6 = (J_5 + 1),
            Fun_4_loop(Data_lists_5, Dlist, I_3, J_6, Maxd_3, Mind_3, Score_4, Score_lists, Weight, Weights);
        _ -> {Data_lists_5, Dlist, I_3, J_5, Maxd_3, Mind_3, Score, Score_lists, Weight, Weights}
    end
end,
{Data_lists_5, Dlist, I_3, J_6, Maxd_3, Mind_3, Score_4, Score_lists, Weight, Weights} = Fun_4(Data_lists_5, Dlist, I_3, J_5, Maxd_3, Mind_3, Score, Score_lists, Weight, Weights),
            Fun_6 = Fun_4,
            J_8 = J_6,
            Score_8 = Score_4;
        _ -> Fun_5 = fun Fun_5_loop(Data_lists_5, Dlist, I_3, J_5, Maxd_3, Mind_3, Score, Score_lists, Weight, Weights) ->
    case (J_5 < erlang:length(Dlist)) of
        true ->
            Item_2 = (case erlang:is_map(Dlist) of true -> maps:get(J_5, Dlist, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Dlist) + J_5 + 1, Dlist); _ -> mochi_nth(J_5 + 1, Dlist) end end),
            case ((Maxd_3 - Mind_3) == 0.0) of
        true -> Score_5 = lists:append((case Score of nil -> []; _ -> Score end), [0.0]),
            Score_7 = Score_5;
        _ -> Score_6 = lists:append((case Score of nil -> []; _ -> Score end), [mochi_safe_div((Item_2 - Mind_3), (Maxd_3 - Mind_3))]),
            Score_7 = Score_6
    end,
            J_7 = (J_5 + 1),
            Fun_5_loop(Data_lists_5, Dlist, I_3, J_7, Maxd_3, Mind_3, Score_7, Score_lists, Weight, Weights);
        _ -> {Data_lists_5, Dlist, I_3, J_5, Maxd_3, Mind_3, Score, Score_lists, Weight, Weights}
    end
end,
{Data_lists_5, Dlist, I_3, J_7, Maxd_3, Mind_3, Score_7, Score_lists, Weight, Weights} = Fun_5(Data_lists_5, Dlist, I_3, J_5, Maxd_3, Mind_3, Score, Score_lists, Weight, Weights),
            Fun_6 = Fun_5,
            J_8 = J_7,
            Score_8 = Score_7
    end,
            Score_lists_2 = lists:append((case Score_lists of nil -> []; _ -> Score_lists end), [Score_8]),
            I_4 = (I_3 + 1),
            Fun_7_loop(Data_lists_5, I_4, Score_lists_2, Weights);
        _ -> {Data_lists_5, I_3, Score_lists, Weights}
    end
end,
{Data_lists_5, I_4, Score_lists_2, Weights} = Fun_7(Data_lists_5, I_3, Score_lists, Weights),
        Score_lists_2
    catch {return, RetCatch} -> RetCatch end.

generate_final_scores(Score_lists_3) ->
    try
        Count = erlang:length((case erlang:is_map(Score_lists_3) of true -> maps:get(0, Score_lists_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Score_lists_3) + 0 + 1, Score_lists_3); _ -> mochi_nth(0 + 1, Score_lists_3) end end)),
        Final_scores = [],
        I_5 = 0,
        Fun_8 = fun Fun_8_loop(Count, Final_scores, I_5, Score_lists_3) ->
    case (I_5 < Count) of
        true ->
            Final_scores_2 = lists:append((case Final_scores of nil -> []; _ -> Final_scores end), [0.0]),
            I_6 = (I_5 + 1),
            Fun_8_loop(Count, Final_scores_2, I_6, Score_lists_3);
        _ -> {Count, Final_scores, I_5, Score_lists_3}
    end
end,
{Count, Final_scores_2, I_6, Score_lists_3} = Fun_8(Count, Final_scores, I_5, Score_lists_3),
        I_7 = 0,
        Fun_10 = fun Fun_10_loop(Count, Final_scores_2, I_7, Score_lists_3) ->
    case (I_7 < erlang:length(Score_lists_3)) of
        true ->
            Slist = (case erlang:is_map(Score_lists_3) of true -> maps:get(I_7, Score_lists_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Score_lists_3) + I_7 + 1, Score_lists_3); _ -> mochi_nth(I_7 + 1, Score_lists_3) end end),
            J_9 = 0,
            Fun_9 = fun Fun_9_loop(Count, Final_scores_2, I_7, J_9, Score_lists_3, Slist) ->
    case (J_9 < erlang:length(Slist)) of
        true ->
            Final_scores_3 = lists:sublist(Final_scores_2, J_9) ++ [((case erlang:is_map(Final_scores_2) of true -> maps:get(J_9, Final_scores_2, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(Final_scores_2) + J_9 + 1, Final_scores_2); _ -> mochi_nth(J_9 + 1, Final_scores_2) end end) + (case erlang:is_map(Slist) of true -> maps:get(J_9, Slist, nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length(Slist) + J_9 + 1, Slist); _ -> mochi_nth(J_9 + 1, Slist) end end))] ++ lists:nthtail(J_9 + 1, Final_scores_2),
            J_10 = (J_9 + 1),
            Fun_9_loop(Count, Final_scores_3, I_7, J_10, Score_lists_3, Slist);
        _ -> {Count, Final_scores_2, I_7, J_9, Score_lists_3, Slist}
    end
end,
{Count, Final_scores_3, I_7, J_10, Score_lists_3, Slist} = Fun_9(Count, Final_scores_2, I_7, J_9, Score_lists_3, Slist),
            I_8 = (I_7 + 1),
            Fun_10_loop(Count, Final_scores_3, I_8, Score_lists_3);
        _ -> {Count, Final_scores_2, I_7, Score_lists_3}
    end
end,
{Count, Final_scores_3, I_8, Score_lists_3} = Fun_10(Count, Final_scores_2, I_7, Score_lists_3),
        Final_scores_3
    catch {return, RetCatch} -> RetCatch end.

procentual_proximity(Source_data_2, Weights_2) ->
    try
        Data_lists_6 = get_data(Source_data_2),
        Score_lists_4 = calculate_each_score(Data_lists_6, Weights_2),
        Final_scores_4 = generate_final_scores(Score_lists_4),
        I_9 = 0,
        Fun_11 = fun Fun_11_loop(Data_lists_6, Final_scores_4, I_9, Score_lists_4, Source_data_2, Weights_2) ->
    case (I_9 < erlang:length(Final_scores_4)) of
        true ->
            Source_data_3 = lists:sublist(Source_data_2, I_9) ++ [lists:append((case (case erlang:is_map(Source_data_2) of true -> maps:get(I_9, Source_data_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Source_data_2) + I_9 + 1, Source_data_2); _ -> mochi_nth(I_9 + 1, Source_data_2) end end) of nil -> []; _ -> (case erlang:is_map(Source_data_2) of true -> maps:get(I_9, Source_data_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Source_data_2) + I_9 + 1, Source_data_2); _ -> mochi_nth(I_9 + 1, Source_data_2) end end) end), [(case erlang:is_map(Final_scores_4) of true -> maps:get(I_9, Final_scores_4, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Final_scores_4) + I_9 + 1, Final_scores_4); _ -> mochi_nth(I_9 + 1, Final_scores_4) end end)])] ++ lists:nthtail(I_9 + 1, Source_data_2),
            I_10 = (I_9 + 1),
            Fun_11_loop(Data_lists_6, Final_scores_4, I_10, Score_lists_4, Source_data_3, Weights_2);
        _ -> {Data_lists_6, Final_scores_4, I_9, Score_lists_4, Source_data_2, Weights_2}
    end
end,
{Data_lists_6, Final_scores_4, I_10, Score_lists_4, Source_data_3, Weights_2} = Fun_11(Data_lists_6, Final_scores_4, I_9, Score_lists_4, Source_data_2, Weights_2),
        Source_data_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('vehicles', []),
    erlang:put('vehicles', lists:append((case erlang:get('vehicles') of nil -> []; _ -> erlang:get('vehicles') end), [[20.0, 60.0, 2012.0]])),
    erlang:put('vehicles', lists:append((case erlang:get('vehicles') of nil -> []; _ -> erlang:get('vehicles') end), [[23.0, 90.0, 2015.0]])),
    erlang:put('vehicles', lists:append((case erlang:get('vehicles') of nil -> []; _ -> erlang:get('vehicles') end), [[22.0, 50.0, 2011.0]])),
    erlang:put('weights', [0, 0, 1]),
    erlang:put('result', procentual_proximity(erlang:get('vehicles'), erlang:get('weights'))),
    io:format("~ts~n", [mochi_str(erlang:get('result'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
