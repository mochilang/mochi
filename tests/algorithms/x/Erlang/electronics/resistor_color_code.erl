#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, contains/2, get_significant_digits/1, get_multiplier/1, get_tolerance/1, get_temperature_coeffecient/1, get_band_type_count/2, check_validity/2, calculate_resistance/2]).

% Generated by Mochi transpiler v0.10.64 (2a849c314b) on 2025-08-13 15:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

contains(List, Value) ->
    try
        Fun = fun Fun_loop(List_, List, Value) ->
    case List_ of
        [] -> {List, Value};
        [C|C_rest] ->
            case (C == Value) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_loop(C_rest, List, Value);
        _ -> {List, Value}
    end
end,
{List, Value} = Fun(List, List, Value),
        false
    catch {return, RetCatch} -> RetCatch end.

get_significant_digits(Colors) ->
    try
        Digit = 0,
        Fun_2 = fun Fun_2_loop(List, Colors, Digit) ->
    case List of
        [] -> {Colors, Digit};
        [Color|Color_rest] ->
            case mochi_not(mochi_member(Color, erlang:get('significant_figures_color_values'))) of
        true -> erlang:error({panic, (Color ++ " is not a valid color for significant figure bands")});
        _ -> ok
    end,
            Digit_2 = ((Digit * 10) + (case erlang:is_map(erlang:get('significant_figures_color_values')) of true -> maps:get(Color, erlang:get('significant_figures_color_values'), nil); _ -> case Color < 0 of true -> mochi_nth(erlang:length(erlang:get('significant_figures_color_values')) + Color + 1, erlang:get('significant_figures_color_values')); _ -> mochi_nth(Color + 1, erlang:get('significant_figures_color_values')) end end)),
            Fun_2_loop(Color_rest, Colors, Digit_2);
        _ -> {Colors, Digit}
    end
end,
{Colors, Digit_2} = Fun_2(Colors, Colors, Digit),
        Digit_2
    catch {return, RetCatch} -> RetCatch end.

get_multiplier(Color_2) ->
    try
        case mochi_not(mochi_member(Color_2, erlang:get('multiplier_color_values'))) of
        true -> erlang:error({panic, (Color_2 ++ " is not a valid color for multiplier band")});
        _ -> ok
    end,
        maps:get(Color_2, erlang:get('multiplier_color_values'), nil)
    catch {return, RetCatch} -> RetCatch end.

get_tolerance(Color_3) ->
    try
        case mochi_not(mochi_member(Color_3, erlang:get('tolerance_color_values'))) of
        true -> erlang:error({panic, (Color_3 ++ " is not a valid color for tolerance band")});
        _ -> ok
    end,
        maps:get(Color_3, erlang:get('tolerance_color_values'), nil)
    catch {return, RetCatch} -> RetCatch end.

get_temperature_coeffecient(Color_4) ->
    try
        case mochi_not(mochi_member(Color_4, erlang:get('temperature_coeffecient_color_values'))) of
        true -> erlang:error({panic, (Color_4 ++ " is not a valid color for temperature coeffecient band")});
        _ -> ok
    end,
        maps:get(Color_4, erlang:get('temperature_coeffecient_color_values'), nil)
    catch {return, RetCatch} -> RetCatch end.

get_band_type_count(Total, Typ) ->
    try
        case (Total == 3) of
        true -> case (Typ == "significant") of
        true -> throw({return, 2});
        _ -> ok
    end,
            case (Typ == "multiplier") of
        true -> throw({return, 1});
        _ -> ok
    end,
            erlang:error({panic, (Typ ++ " is not valid for a 3 band resistor")});
        _ -> case (Total == 4) of
        true -> case (Typ == "significant") of
        true -> throw({return, 2});
        _ -> ok
    end,
            case (Typ == "multiplier") of
        true -> throw({return, 1});
        _ -> ok
    end,
            case (Typ == "tolerance") of
        true -> throw({return, 1});
        _ -> ok
    end,
            erlang:error({panic, (Typ ++ " is not valid for a 4 band resistor")});
        _ -> case (Total == 5) of
        true -> case (Typ == "significant") of
        true -> throw({return, 3});
        _ -> ok
    end,
            case (Typ == "multiplier") of
        true -> throw({return, 1});
        _ -> ok
    end,
            case (Typ == "tolerance") of
        true -> throw({return, 1});
        _ -> ok
    end,
            erlang:error({panic, (Typ ++ " is not valid for a 5 band resistor")});
        _ -> case (Total == 6) of
        true -> case (Typ == "significant") of
        true -> throw({return, 3});
        _ -> ok
    end,
            case (Typ == "multiplier") of
        true -> throw({return, 1});
        _ -> ok
    end,
            case (Typ == "tolerance") of
        true -> throw({return, 1});
        _ -> ok
    end,
            case (Typ == "temp_coeffecient") of
        true -> throw({return, 1});
        _ -> ok
    end,
            erlang:error({panic, (Typ ++ " is not valid for a 6 band resistor")});
        _ -> erlang:error({panic, (mochi_str(Total) ++ " is not a valid number of bands")})
    end
    end
    end
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

check_validity(Number_of_bands, Colors_2) ->
    try
        case ((Number_of_bands < 3) orelse (Number_of_bands > 6)) of
        true -> erlang:error({panic, "Invalid number of bands. Resistor bands must be 3 to 6"});
        _ -> ok
    end,
        case (Number_of_bands /= erlang:length(Colors_2)) of
        true -> erlang:error({panic, (((("Expecting " ++ mochi_str(Number_of_bands)) ++ " colors, provided ") ++ mochi_str(erlang:length(Colors_2))) ++ " colors")});
        _ -> ok
    end,
        Fun_3 = fun Fun_3_loop(List, Colors_2, Number_of_bands) ->
    case List of
        [] -> {Colors_2, Number_of_bands};
        [Color_5|Color_5_rest] ->
            case mochi_not(mochi_member(Color_5, erlang:get('valid_colors'))) of
        true -> erlang:error({panic, (Color_5 ++ " is not a valid color")});
        _ -> ok
    end,
            Fun_3_loop(Color_5_rest, Colors_2, Number_of_bands);
        _ -> {Colors_2, Number_of_bands}
    end
end,
{Colors_2, Number_of_bands} = Fun_3(Colors_2, Colors_2, Number_of_bands),
        true
    catch {return, RetCatch} -> RetCatch end.

calculate_resistance(Number_of_bands_2, Color_code_list) ->
    try
        check_validity(Number_of_bands_2, Color_code_list),
        Sig_count = get_band_type_count(Number_of_bands_2, "significant"),
        Significant_colors = lists:sublist(Color_code_list, 0 + 1, (Sig_count - 0)),
        Significant_digits = get_significant_digits(Significant_colors),
        Multiplier_color = (case erlang:is_map(Color_code_list) of true -> maps:get(Sig_count, Color_code_list, nil); _ -> case Sig_count < 0 of true -> mochi_nth(erlang:length(Color_code_list) + Sig_count + 1, Color_code_list); _ -> mochi_nth(Sig_count + 1, Color_code_list) end end),
        Multiplier = get_multiplier(Multiplier_color),
        Tolerance = 20.0,
        case (Number_of_bands_2 >= 4) of
        true -> Tolerance_color = (case erlang:is_map(Color_code_list) of true -> maps:get((Sig_count + 1), Color_code_list, nil); _ -> case (Sig_count + 1) < 0 of true -> mochi_nth(erlang:length(Color_code_list) + (Sig_count + 1) + 1, Color_code_list); _ -> mochi_nth((Sig_count + 1) + 1, Color_code_list) end end),
            Tolerance_2 = get_tolerance(Tolerance_color),
            Tolerance_3 = Tolerance_2,
            Tolerance_color_2 = Tolerance_color;
        _ -> Tolerance_3 = Tolerance,
            Tolerance_color_2 = nil
    end,
        Temp_coeff = 0,
        case (Number_of_bands_2 == 6) of
        true -> Temp_color = (case erlang:is_map(Color_code_list) of true -> maps:get((Sig_count + 2), Color_code_list, nil); _ -> case (Sig_count + 2) < 0 of true -> mochi_nth(erlang:length(Color_code_list) + (Sig_count + 2) + 1, Color_code_list); _ -> mochi_nth((Sig_count + 2) + 1, Color_code_list) end end),
            Temp_coeff_2 = get_temperature_coeffecient(Temp_color),
            Temp_coeff_3 = Temp_coeff_2,
            Temp_color_2 = Temp_color;
        _ -> Temp_coeff_3 = Temp_coeff,
            Temp_color_2 = nil
    end,
        Resistance_value = mochi_safe_mul(Multiplier, Significant_digits),
        Resistance_str = mochi_str(Resistance_value),
        case (Resistance_value == mochi_to_int(Resistance_value)) of
        true -> Resistance_str_2 = mochi_str(mochi_to_int(Resistance_value)),
            Resistance_str_3 = Resistance_str_2;
        _ -> Resistance_str_3 = Resistance_str
    end,
        Answer = (((Resistance_str_3 ++ "Ω ±") ++ mochi_str(Tolerance_3)) ++ "% "),
        case (Temp_coeff_3 /= 0) of
        true -> Answer_2 = ((Answer ++ mochi_str(Temp_coeff_3)) ++ " ppm/K"),
            Answer_3 = Answer_2;
        _ -> Answer_3 = Answer
    end,
        Answer_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('valid_colors', ["Black", "Brown", "Red", "Orange", "Yellow", "Green", "Blue", "Violet", "Grey", "White", "Gold", "Silver"]),
    erlang:put('significant_figures_color_values', #{"Black" => 0, "Brown" => 1, "Red" => 2, "Orange" => 3, "Yellow" => 4, "Green" => 5, "Blue" => 6, "Violet" => 7, "Grey" => 8, "White" => 9}),
    erlang:put('multiplier_color_values', #{"Black" => 1.0, "Brown" => 10.0, "Red" => 100.0, "Orange" => 1000.0, "Yellow" => 10000.0, "Green" => 100000.0, "Blue" => 1000000.0, "Violet" => 10000000.0, "Grey" => 100000000.0, "White" => 1000000000.0, "Gold" => 0.1, "Silver" => 0.01}),
    erlang:put('tolerance_color_values', #{"Brown" => 1.0, "Red" => 2.0, "Orange" => 0.05, "Yellow" => 0.02, "Green" => 0.5, "Blue" => 0.25, "Violet" => 0.1, "Grey" => 0.01, "Gold" => 5.0, "Silver" => 10.0}),
    erlang:put('temperature_coeffecient_color_values', #{"Black" => 250, "Brown" => 100, "Red" => 50, "Orange" => 15, "Yellow" => 25, "Green" => 20, "Blue" => 10, "Violet" => 5, "Grey" => 1}),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
