#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, pow10/1, ln_series/1, ln/1, builtin_voltage/3]).

% Generated by Mochi transpiler v0.10.64 (9e806895eb) on 2025-08-13 16:13 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

pow10(N) ->
    try
        Result = 1.0,
        I = 0,
        Fun = fun Fun_loop(I, N, Result) ->
    case (I < N) of
        true ->
            Result_2 = mochi_safe_mul(Result, 10.0),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Result_2);
        _ -> {I, N, Result}
    end
end,
{I_2, N, Result_2} = Fun(I, N, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

ln_series(X) ->
    try
        T = mochi_safe_div((X - 1.0), (X + 1.0)),
        Term = T,
        Sum = 0.0,
        N_2 = 1,
        Fun_2 = fun Fun_2_loop(N_2, Sum, T, Term, X) ->
    case (N_2 =< 19) of
        true ->
            Sum_2 = (Sum + mochi_safe_div(Term, float(N_2))),
            Term_2 = mochi_safe_mul(mochi_safe_mul(Term, T), T),
            N_3 = (N_2 + 2),
            Fun_2_loop(N_3, Sum_2, T, Term_2, X);
        _ -> {N_2, Sum, T, Term, X}
    end
end,
{N_3, Sum_2, T, Term_2, X} = Fun_2(N_2, Sum, T, Term, X),
        mochi_safe_mul(2.0, Sum_2)
    catch {return, RetCatch} -> RetCatch end.

ln(X_2) ->
    try
        Y = X_2,
        K = 0,
        Fun_3 = fun Fun_3_loop(K, X_2, Y) ->
    case (Y >= 10.0) of
        true ->
            Y_2 = mochi_safe_div(Y, 10.0),
            K_2 = (K + 1),
            Fun_3_loop(K_2, X_2, Y_2);
        _ -> {K, X_2, Y}
    end
end,
{K_2, X_2, Y_2} = Fun_3(K, X_2, Y),
        Fun_4 = fun Fun_4_loop(K_2, X_2, Y_2) ->
    case (Y_2 < 1.0) of
        true ->
            Y_3 = mochi_safe_mul(Y_2, 10.0),
            K_3 = (K_2 - 1),
            Fun_4_loop(K_3, X_2, Y_3);
        _ -> {K_2, X_2, Y_2}
    end
end,
{K_3, X_2, Y_3} = Fun_4(K_2, X_2, Y_2),
        (ln_series(Y_3) + mochi_safe_mul(float(K_3), ln_series(10.0)))
    catch {return, RetCatch} -> RetCatch end.

builtin_voltage(Donor_conc, Acceptor_conc, Intrinsic_conc) ->
    try
        case (Donor_conc =< 0.0) of
        true -> erlang:error({panic, "Donor concentration should be positive"});
        _ -> ok
    end,
        case (Acceptor_conc =< 0.0) of
        true -> erlang:error({panic, "Acceptor concentration should be positive"});
        _ -> ok
    end,
        case (Intrinsic_conc =< 0.0) of
        true -> erlang:error({panic, "Intrinsic concentration should be positive"});
        _ -> ok
    end,
        case (Donor_conc =< Intrinsic_conc) of
        true -> erlang:error({panic, "Donor concentration should be greater than intrinsic concentration"});
        _ -> ok
    end,
        case (Acceptor_conc =< Intrinsic_conc) of
        true -> erlang:error({panic, "Acceptor concentration should be greater than intrinsic concentration"});
        _ -> ok
    end,
        mochi_safe_div(mochi_safe_mul(mochi_safe_mul(erlang:get('BOLTZMANN'), 300.0), ln(mochi_safe_div(mochi_safe_mul(Donor_conc, Acceptor_conc), mochi_safe_mul(Intrinsic_conc, Intrinsic_conc)))), erlang:get('ELECTRON_VOLT'))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('BOLTZMANN', mochi_safe_div(1.380649, pow10(23))),
    erlang:put('ELECTRON_VOLT', mochi_safe_div(1.602176634, pow10(19))),
    erlang:put('TEMPERATURE', 300.0),
    io:format("~ts~n", [mochi_str(builtin_voltage(pow10(17), pow10(17), pow10(10)))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
