#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ohms_law/3]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

ohms_law(Voltage, Current, Resistance) ->
    try
        Zeros = 0,
        case (Voltage == 0) of
        true -> Zeros_2 = (Zeros + 1),
            Zeros_3 = Zeros_2;
        _ -> Zeros_3 = Zeros
    end,
        case (Current == 0) of
        true -> Zeros_4 = (Zeros_3 + 1),
            Zeros_5 = Zeros_4;
        _ -> Zeros_5 = Zeros_3
    end,
        case (Resistance == 0) of
        true -> Zeros_6 = (Zeros_5 + 1),
            Zeros_7 = Zeros_6;
        _ -> Zeros_7 = Zeros_5
    end,
        case (Zeros_7 /= 1) of
        true -> io:format("~ts~n", [mochi_repr("One and only one argument must be 0")]),
            throw({return, #{}});
        _ -> ok
    end,
        case (Resistance < 0) of
        true -> io:format("~ts~n", [mochi_repr("Resistance cannot be negative")]),
            throw({return, #{}});
        _ -> ok
    end,
        case (Voltage == 0) of
        true -> throw({return, #{"voltage" => mochi_safe_mul(Current, Resistance)}});
        _ -> ok
    end,
        case (Current == 0) of
        true -> throw({return, #{"current" => mochi_safe_div(Voltage, Resistance)}});
        _ -> ok
    end,
        #{"resistance" => mochi_safe_div(Voltage, Current)}
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~p~n", [ohms_law(10, 0, 5)]),
    io:format("~p~n", [ohms_law(-10, 1, 0)]),
    io:format("~p~n", [ohms_law(0, -1.5, 2)]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
