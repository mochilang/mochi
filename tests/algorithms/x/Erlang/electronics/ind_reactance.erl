#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, ind_reactance/3]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

ind_reactance(Inductance, Frequency, Reactance) ->
    try
        Zero_count = 0,
        case (Inductance == 0) of
        true -> Zero_count_2 = (Zero_count + 1),
            Zero_count_3 = Zero_count_2;
        _ -> Zero_count_3 = Zero_count
    end,
        case (Frequency == 0) of
        true -> Zero_count_4 = (Zero_count_3 + 1),
            Zero_count_5 = Zero_count_4;
        _ -> Zero_count_5 = Zero_count_3
    end,
        case (Reactance == 0) of
        true -> Zero_count_6 = (Zero_count_5 + 1),
            Zero_count_7 = Zero_count_6;
        _ -> Zero_count_7 = Zero_count_5
    end,
        case (Zero_count_7 /= 1) of
        true -> erlang:error("One and only one argument must be 0");
        _ -> ok
    end,
        case (Inductance < 0) of
        true -> erlang:error("Inductance cannot be negative");
        _ -> ok
    end,
        case (Frequency < 0) of
        true -> erlang:error("Frequency cannot be negative");
        _ -> ok
    end,
        case (Reactance < 0) of
        true -> erlang:error("Inductive reactance cannot be negative");
        _ -> ok
    end,
        case (Inductance == 0) of
        true -> throw({return, #{"inductance" => mochi_safe_div(Reactance, mochi_safe_mul(mochi_safe_mul(2, 3.141592653589793), Frequency))}});
        _ -> ok
    end,
        case (Frequency == 0) of
        true -> throw({return, #{"frequency" => mochi_safe_div(Reactance, mochi_safe_mul(mochi_safe_mul(2, 3.141592653589793), Inductance))}});
        _ -> ok
    end,
        #{"reactance" => mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(2, 3.141592653589793), Frequency), Inductance)}
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    io:format("~ts~n", [mochi_repr(ind_reactance(0, 10000, 50))]),
    io:format("~ts~n", [mochi_repr(ind_reactance(0.035, 0, 50))]),
    io:format("~ts~n", [mochi_repr(ind_reactance(3.5e-05, 1000, 0))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
