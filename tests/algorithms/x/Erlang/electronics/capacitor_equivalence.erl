#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, capacitor_parallel/1, capacitor_series/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

capacitor_parallel(Capacitors) ->
    try
        Sum_c = 0,
        I = 0,
        Fun = fun Fun_loop(Capacitors, I, Sum_c) ->
    case (I < erlang:length(Capacitors)) of
        true ->
            C = (case erlang:is_map(Capacitors) of true -> maps:get(I, Capacitors, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Capacitors) + I + 1, Capacitors); _ -> lists:nth(I + 1, Capacitors) end end),
            case (C < 0) of
        true -> erlang:error((("Capacitor at index " ++ mochi_str(I)) ++ " has a negative value!")),
            throw({return, 0});
        _ -> ok
    end,
            Sum_c_2 = (Sum_c + C),
            I_2 = (I + 1),
            Fun_loop(Capacitors, I_2, Sum_c_2);
        _ -> {Capacitors, I, Sum_c}
    end
end,
{Capacitors, I_2, Sum_c_2} = Fun(Capacitors, I, Sum_c),
        Sum_c_2
    catch {return, Ret} -> Ret end.

capacitor_series(Capacitors_2) ->
    try
        First_sum = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Capacitors_2, First_sum, I_3) ->
    case (I_3 < erlang:length(Capacitors_2)) of
        true ->
            C_2 = (case erlang:is_map(Capacitors_2) of true -> maps:get(I_3, Capacitors_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Capacitors_2) + I_3 + 1, Capacitors_2); _ -> lists:nth(I_3 + 1, Capacitors_2) end end),
            case (C_2 =< 0) of
        true -> erlang:error((("Capacitor at index " ++ mochi_str(I_3)) ++ " has a negative or zero value!")),
            throw({return, 0});
        _ -> ok
    end,
            First_sum_2 = (First_sum + mochi_safe_div(1, C_2)),
            I_4 = (I_3 + 1),
            Fun_2_loop(Capacitors_2, First_sum_2, I_4);
        _ -> {Capacitors_2, First_sum, I_3}
    end
end,
{Capacitors_2, First_sum_2, I_4} = Fun_2(Capacitors_2, First_sum, I_3),
        mochi_safe_div(1, First_sum_2)
    catch {return, Ret} -> Ret end.

main() ->
    try
        Parallel = capacitor_parallel([5.71389, 12, 3]),
        Series = capacitor_series([5.71389, 12, 3]),
        io:format("~ts~n", [mochi_str(Parallel)]),
        io:format("~ts~n", [mochi_str(Series)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
