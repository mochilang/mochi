#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, abs/1, sqrtapprox/1, coulombs_law/4, print_map/1]).

% Generated by Mochi transpiler v0.10.64 (2a849c314b) on 2025-08-13 15:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

abs(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

sqrtapprox(X_2) ->
    try
        case (X_2 =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X_2,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_2, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

coulombs_law(Force, Charge1, Charge2, Distance) ->
    try
        Charge_product = erlang:abs(mochi_safe_mul(Charge1, Charge2)),
        Zero_count = 0,
        case (Force == 0.0) of
        true -> Zero_count_2 = (Zero_count + 1),
            Zero_count_3 = Zero_count_2;
        _ -> Zero_count_3 = Zero_count
    end,
        case (Charge1 == 0.0) of
        true -> Zero_count_4 = (Zero_count_3 + 1),
            Zero_count_5 = Zero_count_4;
        _ -> Zero_count_5 = Zero_count_3
    end,
        case (Charge2 == 0.0) of
        true -> Zero_count_6 = (Zero_count_5 + 1),
            Zero_count_7 = Zero_count_6;
        _ -> Zero_count_7 = Zero_count_5
    end,
        case (Distance == 0.0) of
        true -> Zero_count_8 = (Zero_count_7 + 1),
            Zero_count_9 = Zero_count_8;
        _ -> Zero_count_9 = Zero_count_7
    end,
        case (Zero_count_9 /= 1) of
        true -> erlang:error({panic, "One and only one argument must be 0"});
        _ -> ok
    end,
        case (Distance < 0.0) of
        true -> erlang:error({panic, "Distance cannot be negative"});
        _ -> ok
    end,
        case (Force == 0.0) of
        true -> F = mochi_safe_div(mochi_safe_mul(8988000000.0, Charge_product), mochi_safe_mul(Distance, Distance)),
            throw({return, #{"force" => F}}),
            F_2 = F;
        _ -> F_2 = nil
    end,
        case (Charge1 == 0.0) of
        true -> C1 = mochi_safe_div(mochi_safe_mul(erlang:abs(Force), mochi_safe_mul(Distance, Distance)), mochi_safe_mul(8988000000.0, Charge2)),
            throw({return, #{"charge1" => C1}}),
            C1_2 = C1;
        _ -> C1_2 = nil
    end,
        case (Charge2 == 0.0) of
        true -> C2 = mochi_safe_div(mochi_safe_mul(erlang:abs(Force), mochi_safe_mul(Distance, Distance)), mochi_safe_mul(8988000000.0, Charge1)),
            throw({return, #{"charge2" => C2}}),
            C2_2 = C2;
        _ -> C2_2 = nil
    end,
        D = sqrtapprox(mochi_safe_div(mochi_safe_mul(8988000000.0, Charge_product), erlang:abs(Force))),
        #{"distance" => D}
    catch {return, RetCatch} -> RetCatch end.

print_map(M) ->
    try
        Fun_2 = fun Fun_2_loop(List, M) ->
    case List of
        [] -> {M};
        [K|K_rest] ->
            io:format("~ts~n", [mochi_repr((((("{\"" ++ K) ++ "\": ") ++ mochi_str(maps:get(K, M, nil))) ++ "}"))]),
            Fun_2_loop(K_rest, M);
        _ -> {M}
    end
end,
{M} = Fun_2(maps:keys(M), M),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('COULOMBS_CONSTANT', 8988000000.0),
    print_map(coulombs_law(0.0, 3.0, 5.0, 2000.0)),
    print_map(coulombs_law(10.0, 3.0, 5.0, 0.0)),
    print_map(coulombs_law(10.0, 0.0, 5.0, 2000.0)),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
