#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, resistor_parallel/1, resistor_series/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

resistor_parallel(Resistors) ->
    try
        Sum = 0,
        I = 0,
        Fun = fun Fun_loop(I, Resistors, Sum) ->
    case (I < erlang:length(Resistors)) of
        true ->
            R = (case erlang:is_map(Resistors) of true -> maps:get(I, Resistors, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Resistors) + I + 1, Resistors); _ -> lists:nth(I + 1, Resistors) end end),
            case (R =< 0) of
        true -> erlang:error((("Resistor at index " ++ mochi_str(I)) ++ " has a negative or zero value!"));
        _ -> ok
    end,
            Sum_2 = (Sum + mochi_safe_div(1, R)),
            I_2 = (I + 1),
            Fun_loop(I_2, Resistors, Sum_2);
        _ -> {I, Resistors, Sum}
    end
end,
{I_2, Resistors, Sum_2} = Fun(I, Resistors, Sum),
        mochi_safe_div(1, Sum_2)
    catch {return, Ret} -> Ret end.

resistor_series(Resistors_2) ->
    try
        Sum_3 = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Resistors_2, Sum_3) ->
    case (I_3 < erlang:length(Resistors_2)) of
        true ->
            R_2 = (case erlang:is_map(Resistors_2) of true -> maps:get(I_3, Resistors_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Resistors_2) + I_3 + 1, Resistors_2); _ -> lists:nth(I_3 + 1, Resistors_2) end end),
            case (R_2 < 0) of
        true -> erlang:error((("Resistor at index " ++ mochi_str(I_3)) ++ " has a negative value!"));
        _ -> ok
    end,
            Sum_4 = (Sum_3 + R_2),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Resistors_2, Sum_4);
        _ -> {I_3, Resistors_2, Sum_3}
    end
end,
{I_4, Resistors_2, Sum_4} = Fun_2(I_3, Resistors_2, Sum_3),
        Sum_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        Resistors_3 = [3.21389, 2, 3],
        io:format("~ts~n", [mochi_repr(("Parallel: " ++ mochi_str(resistor_parallel(Resistors_3))))]),
        io:format("~ts~n", [mochi_repr(("Series: " ++ mochi_str(resistor_series(Resistors_3))))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
