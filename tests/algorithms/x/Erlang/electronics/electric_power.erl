#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, absf/1, pow10/1, round_to/2, electric_power/3, str_result/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

absf(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

pow10(N) ->
    try
        P = 1,
        I = 0,
        Fun = fun Fun_loop(I, N, P) ->
    case (I < N) of
        true ->
            P_2 = mochi_safe_mul(P, 10),
            I_2 = (I + 1),
            Fun_loop(I_2, N, P_2);
        _ -> {I, N, P}
    end
end,
{I_2, N, P_2} = Fun(I, N, P),
        P_2
    catch {return, Ret} -> Ret end.

round_to(X_2, N_2) ->
    try
        M = pow10(N_2),
        mochi_safe_div(Floor((mochi_safe_mul(X_2, M) + 0.5)), M)
    catch {return, Ret} -> Ret end.

electric_power(Voltage, Current, Power) ->
    try
        Zeros = 0,
        case (Voltage == 0) of
        true -> Zeros_2 = (Zeros + 1),
            Zeros_3 = Zeros_2;
        _ -> Zeros_3 = Zeros
    end,
        case (Current == 0) of
        true -> Zeros_4 = (Zeros_3 + 1),
            Zeros_5 = Zeros_4;
        _ -> Zeros_5 = Zeros_3
    end,
        case (Power == 0) of
        true -> Zeros_6 = (Zeros_5 + 1),
            Zeros_7 = Zeros_6;
        _ -> Zeros_7 = Zeros_5
    end,
        case (Zeros_7 /= 1) of
        true -> erlang:error("Exactly one argument must be 0"),
            P_8 = nil;
        _ -> case (Power < 0) of
        true -> erlang:error("Power cannot be negative in any electrical/electronics system"),
            P_7 = nil;
        _ -> case (Voltage == 0) of
        true -> throw({return, #{"name" => "voltage", "value" => mochi_safe_div(Power, Current)}}),
            P_6 = nil;
        _ -> case (Current == 0) of
        true -> throw({return, #{"name" => "current", "value" => mochi_safe_div(Power, Voltage)}}),
            P_5 = nil;
        _ -> case (Power == 0) of
        true -> P_3 = absf(mochi_safe_mul(Voltage, Current)),
            throw({return, #{"name" => "power", "value" => round_to(P_3, 2)}}),
            P_4 = P_3;
        _ -> erlang:error("Unhandled case"),
            P_4 = nil
    end,
            P_5 = P_4
    end,
            P_6 = P_5
    end,
            P_7 = P_6
    end,
            P_8 = P_7
    end,
        nil
    catch {return, Ret} -> Ret end.

str_result(R) ->
    try
        (((("Result(name='" ++ maps:get("name", R, nil)) ++ "', value=") ++ mochi_str(maps:get("value", R, nil))) ++ ")")
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('r1', electric_power(0, 2, 5)),
    io:format("~ts~n", [mochi_repr(str_result(erlang:get('r1')))]),
    erlang:put('r2', electric_power(2, 2, 0)),
    io:format("~ts~n", [mochi_repr(str_result(erlang:get('r2')))]),
    erlang:put('r3', electric_power(-2, 3, 0)),
    io:format("~ts~n", [mochi_repr(str_result(erlang:get('r3')))]),
    erlang:put('r4', electric_power(2.2, 2.2, 0)),
    io:format("~ts~n", [mochi_repr(str_result(erlang:get('r4')))]),
    erlang:put('r5', electric_power(2, 0, 6)),
    io:format("~ts~n", [mochi_repr(str_result(erlang:get('r5')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
