#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, abs/1, to_radians/1, sin_taylor/1, cos_taylor/1, rect/2, multiply/2, apparent_power/4, approx_equal/3]).

% Generated by Mochi transpiler v0.10.64 (2a849c314b) on 2025-08-13 15:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

abs(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

to_radians(Deg) ->
    try
        mochi_safe_div(mochi_safe_mul(Deg, 3.141592653589793), 180.0)
    catch {return, RetCatch} -> RetCatch end.

sin_taylor(X_2) ->
    try
        Term = X_2,
        Sum = X_2,
        I = 1,
        Fun = fun Fun_loop(I, Sum, Term, X_2) ->
    case (I < 10) of
        true ->
            K1 = mochi_safe_mul(2.0, float(I)),
            K2 = (K1 + 1.0),
            Term_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term, X_2), X_2), mochi_safe_mul(K1, K2)),
            Sum_2 = (Sum + Term_2),
            I_2 = (I + 1),
            Fun_loop(I_2, Sum_2, Term_2, X_2);
        _ -> {I, Sum, Term, X_2}
    end
end,
{I_2, Sum_2, Term_2, X_2} = Fun(I, Sum, Term, X_2),
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

cos_taylor(X_3) ->
    try
        Term_3 = 1.0,
        Sum_3 = 1.0,
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(I_3, Sum_3, Term_3, X_3) ->
    case (I_3 < 10) of
        true ->
            K1_2 = (mochi_safe_mul(2.0, float(I_3)) - 1.0),
            K2_2 = mochi_safe_mul(2.0, float(I_3)),
            Term_4 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term_3, X_3), X_3), mochi_safe_mul(K1_2, K2_2)),
            Sum_4 = (Sum_3 + Term_4),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Sum_4, Term_4, X_3);
        _ -> {I_3, Sum_3, Term_3, X_3}
    end
end,
{I_4, Sum_4, Term_4, X_3} = Fun_2(I_3, Sum_3, Term_3, X_3),
        Sum_4
    catch {return, RetCatch} -> RetCatch end.

rect(Mag, Angle) ->
    try
        C = cos_taylor(Angle),
        S = sin_taylor(Angle),
        [mochi_safe_mul(Mag, C), mochi_safe_mul(Mag, S)]
    catch {return, RetCatch} -> RetCatch end.

multiply(A, B) ->
    try
        [(mochi_safe_mul((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end), (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)) - mochi_safe_mul((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end), (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end))), (mochi_safe_mul((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end), (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B) + 1 + 1, B); _ -> mochi_nth(1 + 1, B) end end)) + mochi_safe_mul((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A) + 1 + 1, A); _ -> mochi_nth(1 + 1, A) end end), (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)))]
    catch {return, RetCatch} -> RetCatch end.

apparent_power(Voltage, Current, Voltage_angle, Current_angle) ->
    try
        Vrad = to_radians(Voltage_angle),
        Irad = to_radians(Current_angle),
        Vrect = rect(Voltage, Vrad),
        Irect = rect(Current, Irad),
        Result = multiply(Vrect, Irect),
        Result
    catch {return, RetCatch} -> RetCatch end.

approx_equal(A_2, B_2, Eps) ->
    try
        ((erlang:abs(((case erlang:is_map(A_2) of true -> maps:get(0, A_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_2) + 0 + 1, A_2); _ -> mochi_nth(0 + 1, A_2) end end) - (case erlang:is_map(B_2) of true -> maps:get(0, B_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B_2) + 0 + 1, B_2); _ -> mochi_nth(0 + 1, B_2) end end))) < Eps) andalso (erlang:abs(((case erlang:is_map(A_2) of true -> maps:get(1, A_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(A_2) + 1 + 1, A_2); _ -> mochi_nth(1 + 1, A_2) end end) - (case erlang:is_map(B_2) of true -> maps:get(1, B_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(B_2) + 1 + 1, B_2); _ -> mochi_nth(1 + 1, B_2) end end))) < Eps))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
