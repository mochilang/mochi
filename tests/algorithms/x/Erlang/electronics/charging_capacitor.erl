#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, expapprox/1, round3/1, charging_capacitor/4]).

% Generated by Mochi transpiler v0.10.64 (25cf3a3e28) on 2025-08-13 12:32 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

expapprox(X) ->
    try
        Y = X,
        Is_neg = false,
        case (X < 0.0) of
        true -> Is_neg_2 = true,
            Y_2 = -X,
            Is_neg_3 = Is_neg_2,
            Y_3 = Y_2;
        _ -> Is_neg_3 = Is_neg,
            Y_3 = Y
    end,
        Term = 1.0,
        Sum = 1.0,
        N = 1,
        Fun = fun Fun_loop(Is_neg_3, N, Sum, Term, X, Y_3) ->
    case (N < 30) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, Y_3), float(N)),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(Is_neg_3, N_2, Sum_2, Term_2, X, Y_3);
        _ -> {Is_neg_3, N, Sum, Term, X, Y_3}
    end
end,
{Is_neg_3, N_2, Sum_2, Term_2, X, Y_3} = Fun(Is_neg_3, N, Sum, Term, X, Y_3),
        case Is_neg_3 of
        true -> throw({return, mochi_safe_div(1.0, Sum_2)});
        _ -> ok
    end,
        Sum_2
    catch {return, RetCatch} -> RetCatch end.

round3(X_2) ->
    try
        Scaled = mochi_safe_mul(X_2, 1000.0),
        case (Scaled >= 0.0) of
        true -> Scaled_2 = (Scaled + 0.5),
            Scaled_4 = Scaled_2;
        _ -> Scaled_3 = (Scaled - 0.5),
            Scaled_4 = Scaled_3
    end,
        Scaled_int = mochi_to_int(Scaled_4),
        mochi_safe_div(float(Scaled_int), 1000.0)
    catch {return, RetCatch} -> RetCatch end.

charging_capacitor(Source_voltage, Resistance, Capacitance, Time_sec) ->
    try
        case (Source_voltage =< 0.0) of
        true -> erlang:error({panic, "Source voltage must be positive."});
        _ -> ok
    end,
        case (Resistance =< 0.0) of
        true -> erlang:error({panic, "Resistance must be positive."});
        _ -> ok
    end,
        case (Capacitance =< 0.0) of
        true -> erlang:error({panic, "Capacitance must be positive."});
        _ -> ok
    end,
        Exponent = mochi_safe_div(-Time_sec, mochi_safe_mul(Resistance, Capacitance)),
        Voltage = mochi_safe_mul(Source_voltage, (1.0 - expapprox(Exponent))),
        round3(Voltage)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(charging_capacitor(0.2, 0.9, 8.4, 0.5))]),
    io:format("~ts~n", [mochi_repr(charging_capacitor(2.2, 3.5, 2.4, 9.0))]),
    io:format("~ts~n", [mochi_repr(charging_capacitor(15.0, 200.0, 20.0, 2.0))]),
    io:format("~ts~n", [mochi_repr(charging_capacitor(20.0, 2000.0, 0.0003, 4.0))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
