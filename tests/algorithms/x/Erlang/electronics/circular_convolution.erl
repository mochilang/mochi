#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, floor/1, pow10/1, roundn/2, pad/2, circular_convolution/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

floor(X) ->
    try
        I = mochi_to_int(X),
        case (float(I) > X) of
        true -> I_2 = (I - 1),
            I_3 = I_2;
        _ -> I_3 = I
    end,
        float(I_3)
    catch {return, Ret} -> Ret end.

pow10(N) ->
    try
        P = 1,
        I_4 = 0,
        Fun = fun Fun_loop(I_4, N, P) ->
    case (I_4 < N) of
        true ->
            P_2 = mochi_safe_mul(P, 10),
            I_5 = (I_4 + 1),
            Fun_loop(I_5, N, P_2);
        _ -> {I_4, N, P}
    end
end,
{I_5, N, P_2} = Fun(I_4, N, P),
        P_2
    catch {return, Ret} -> Ret end.

roundn(X_2, N_2) ->
    try
        M = pow10(N_2),
        mochi_safe_div(floor((mochi_safe_mul(X_2, M) + 0.5)), M)
    catch {return, Ret} -> Ret end.

pad(Signal, Target) ->
    try
        S = Signal,
        Fun_2 = fun Fun_2_loop(S, Signal, Target) ->
    case (erlang:length(S) < Target) of
        true ->
            S_2 = lists:append((case S of nil -> []; _ -> S end), [0]),
            Fun_2_loop(S_2, Signal, Target);
        _ -> {S, Signal, Target}
    end
end,
{S_2, Signal, Target} = Fun_2(S, Signal, Target),
        S_2
    catch {return, Ret} -> Ret end.

circular_convolution(A, B) ->
    try
        N1 = erlang:length(A),
        N2 = erlang:length(B),
        N_3 = (case (N1 > N2) of
    true -> N1;
    _ -> N2
end),
        X_3 = pad(A, N_3),
        Y = pad(B, N_3),
        Res = [],
        I_6 = 0,
        Fun_4 = fun Fun_4_loop(A, B, I_6, N_3, N1, N2, Res, X_3, Y) ->
    case (I_6 < N_3) of
        true ->
            Sum = 0,
            K = 0,
            Fun_3 = fun Fun_3_loop(A, B, I_6, K, N_3, N1, N2, Res, Sum, X_3, Y) ->
    case (K < N_3) of
        true ->
            J = mochi_mod((I_6 - K), N_3),
            Idx = (case (J < 0) of
    true -> (J + N_3);
    _ -> J
end),
            Sum_2 = (Sum + mochi_safe_mul((case erlang:is_map(X_3) of true -> maps:get(K, X_3, nil); _ -> case K < 0 of true -> lists:nth(erlang:length(X_3) + K + 1, X_3); _ -> lists:nth(K + 1, X_3) end end), (case erlang:is_map(Y) of true -> maps:get(Idx, Y, nil); _ -> case Idx < 0 of true -> lists:nth(erlang:length(Y) + Idx + 1, Y); _ -> lists:nth(Idx + 1, Y) end end))),
            K_2 = (K + 1),
            Fun_3_loop(A, B, I_6, K_2, N_3, N1, N2, Res, Sum_2, X_3, Y);
        _ -> {A, B, I_6, K, N_3, N1, N2, Res, Sum, X_3, Y}
    end
end,
{A, B, I_6, K_2, N_3, N1, N2, Res, Sum_2, X_3, Y} = Fun_3(A, B, I_6, K, N_3, N1, N2, Res, Sum, X_3, Y),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [roundn(Sum_2, 2)]),
            I_7 = (I_6 + 1),
            Fun_4_loop(A, B, I_7, N_3, N1, N2, Res_2, X_3, Y);
        _ -> {A, B, I_6, N_3, N1, N2, Res, X_3, Y}
    end
end,
{A, B, I_7, N_3, N1, N2, Res_2, X_3, Y} = Fun_4(A, B, I_6, N_3, N1, N2, Res, X_3, Y),
        Res_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('example1', circular_convolution([2, 1, 2, -1], [1, 2, 3, 4])),
    io:format("~ts~n", [mochi_str(erlang:get('example1'))]),
    erlang:put('example2', circular_convolution([0.2, 0.4, 0.6, 0.8, 1, 1.2, 1.4, 1.6], [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5])),
    io:format("~ts~n", [mochi_str(erlang:get('example2'))]),
    erlang:put('example3', circular_convolution([-1, 1, 2, -2], [0.5, 1, -1, 2, 0.75])),
    io:format("~ts~n", [mochi_str(erlang:get('example3'))]),
    erlang:put('example4', circular_convolution([1, -1, 2, 3, -1], [1, 2, 3])),
    io:format("~ts~n", [mochi_str(erlang:get('example4'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
