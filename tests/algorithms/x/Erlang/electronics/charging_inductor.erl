#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, expapprox/1, floor/1, pow10/1, round/2, charging_inductor/4]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

expapprox(X) ->
    try
        case (X < 0) of
        true -> throw({return, mochi_safe_div(1, expapprox(-X))});
        _ -> ok
    end,
        case (X > 1) of
        true -> Half = expapprox(mochi_safe_div(X, 2)),
            throw({return, mochi_safe_mul(Half, Half)}),
            Half_2 = Half;
        _ -> Half_2 = nil
    end,
        Sum = 1,
        Term = 1,
        N = 1,
        Fun = fun Fun_loop(Half_2, N, Sum, Term, X) ->
    case (N < 20) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, X), float(N)),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(Half_2, N_2, Sum_2, Term_2, X);
        _ -> {Half_2, N, Sum, Term, X}
    end
end,
{Half_2, N_2, Sum_2, Term_2, X} = Fun(Half_2, N, Sum, Term, X),
        Sum_2
    catch {return, Ret} -> Ret end.

floor(X_2) ->
    try
        I = mochi_to_int(X_2),
        case (float(I) > X_2) of
        true -> I_2 = (I - 1),
            I_3 = I_2;
        _ -> I_3 = I
    end,
        float(I_3)
    catch {return, Ret} -> Ret end.

pow10(N_3) ->
    try
        Result = 1,
        I_4 = 0,
        Fun_2 = fun Fun_2_loop(I_4, N_3, Result) ->
    case (I_4 < N_3) of
        true ->
            Result_2 = mochi_safe_mul(Result, 10),
            I_5 = (I_4 + 1),
            Fun_2_loop(I_5, N_3, Result_2);
        _ -> {I_4, N_3, Result}
    end
end,
{I_5, N_3, Result_2} = Fun_2(I_4, N_3, Result),
        Result_2
    catch {return, Ret} -> Ret end.

round(X_3, N_4) ->
    try
        M = pow10(N_4),
        mochi_safe_div(floor((mochi_safe_mul(X_3, M) + 0.5)), M)
    catch {return, Ret} -> Ret end.

charging_inductor(Source_voltage, Resistance, Inductance, Time) ->
    try
        case (Source_voltage =< 0) of
        true -> erlang:error("Source voltage must be positive.");
        _ -> ok
    end,
        case (Resistance =< 0) of
        true -> erlang:error("Resistance must be positive.");
        _ -> ok
    end,
        case (Inductance =< 0) of
        true -> erlang:error("Inductance must be positive.");
        _ -> ok
    end,
        Exponent = mochi_safe_div(mochi_safe_mul(-Time, Resistance), Inductance),
        Current = mochi_safe_mul(mochi_safe_div(Source_voltage, Resistance), (1 - expapprox(Exponent))),
        round(Current, 3)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(charging_inductor(5.8, 1.5, 2.3, 2))]),
    io:format("~ts~n", [mochi_repr(charging_inductor(8, 5, 3, 2))]),
    io:format("~ts~n", [mochi_repr(charging_inductor(8, mochi_safe_mul(5, pow10(2)), 3, 2))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
