#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrt/1, real_power/2, reactive_power/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

sqrt(X) ->
    try
        case (X =< 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Guess = X,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 10) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, Ret} -> Ret end.

real_power(Apparent_power, Power_factor) ->
    try
        case ((Power_factor < (0 - 1)) orelse (Power_factor > 1)) of
        true -> erlang:error("power_factor must be a valid float value between -1 and 1.");
        _ -> ok
    end,
        mochi_safe_mul(Apparent_power, Power_factor)
    catch {return, Ret} -> Ret end.

reactive_power(Apparent_power_2, Power_factor_2) ->
    try
        case ((Power_factor_2 < (0 - 1)) orelse (Power_factor_2 > 1)) of
        true -> erlang:error("power_factor must be a valid float value between -1 and 1.");
        _ -> ok
    end,
        mochi_safe_mul(Apparent_power_2, sqrt((1 - mochi_safe_mul(Power_factor_2, Power_factor_2))))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(real_power(100, 0.9))]),
    io:format("~ts~n", [mochi_str(real_power(0, 0.8))]),
    io:format("~ts~n", [mochi_str(real_power(100, -0.9))]),
    io:format("~ts~n", [mochi_str(reactive_power(100, 0.9))]),
    io:format("~ts~n", [mochi_str(reactive_power(0, 0.8))]),
    io:format("~ts~n", [mochi_str(reactive_power(100, -0.9))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
