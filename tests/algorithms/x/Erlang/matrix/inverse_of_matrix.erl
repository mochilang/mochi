#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, inverse_of_matrix/1]).

% Generated by Mochi transpiler v0.10.64 (1dced96c32) on 2025-08-12 13:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

inverse_of_matrix(Matrix) ->
    try
        case (((erlang:length(Matrix) == 2) andalso (erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) == 2)) andalso (erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) == 2)) of
        true -> Det = (mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end)) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end))),
            case (Det == 0.0) of
        true -> io:format("~ts~n", [mochi_repr("This matrix has no inverse.")]),
            throw({return, []});
        _ -> ok
    end,
            throw({return, [[mochi_safe_div((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end), Det), mochi_safe_div(-(case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), Det)], [mochi_safe_div(-(case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end), Det), mochi_safe_div((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), Det)]]}),
            Cof_12 = nil,
            Det_4 = Det,
            Fun_4 = nil,
            I_4 = nil,
            Inv_4 = nil;
        _ -> case ((((erlang:length(Matrix) == 3) andalso (erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) == 3)) andalso (erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) == 3)) andalso (erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) == 3)) of
        true -> Det_2 = (((mochi_safe_mul(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end)), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)) + mochi_safe_mul(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end)), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end))) + mochi_safe_mul(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end)), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end))) - ((mochi_safe_mul(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end)), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)) + mochi_safe_mul(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end)), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end))) + mochi_safe_mul(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end)), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)))),
            case (Det_2 == 0.0) of
        true -> io:format("~ts~n", [mochi_repr("This matrix has no inverse.")]),
            throw({return, []});
        _ -> ok
    end,
            Cof = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
            Cof_2 = lists:sublist(Cof, 0) ++ [lists:sublist(lists:nth(0 + 1, Cof), 0) ++ [(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)))] ++ lists:nthtail(0 + 1, lists:nth(0 + 1, Cof))] ++ lists:nthtail(0 + 1, Cof),
            Cof_3 = lists:sublist(Cof_2, 0) ++ [lists:sublist(lists:nth(0 + 1, Cof_2), 1) ++ [-(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)))] ++ lists:nthtail(1 + 1, lists:nth(0 + 1, Cof_2))] ++ lists:nthtail(0 + 1, Cof_2),
            Cof_4 = lists:sublist(Cof_3, 0) ++ [lists:sublist(lists:nth(0 + 1, Cof_3), 2) ++ [(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)))] ++ lists:nthtail(2 + 1, lists:nth(0 + 1, Cof_3))] ++ lists:nthtail(0 + 1, Cof_3),
            Cof_5 = lists:sublist(Cof_4, 1) ++ [lists:sublist(lists:nth(1 + 1, Cof_4), 0) ++ [-(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)))] ++ lists:nthtail(0 + 1, lists:nth(1 + 1, Cof_4))] ++ lists:nthtail(1 + 1, Cof_4),
            Cof_6 = lists:sublist(Cof_5, 1) ++ [lists:sublist(lists:nth(1 + 1, Cof_5), 1) ++ [(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)))] ++ lists:nthtail(1 + 1, lists:nth(1 + 1, Cof_5))] ++ lists:nthtail(1 + 1, Cof_5),
            Cof_7 = lists:sublist(Cof_6, 1) ++ [lists:sublist(lists:nth(1 + 1, Cof_6), 2) ++ [-(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(2, Matrix, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Matrix) + 2 + 1, Matrix); _ -> mochi_nth(2 + 1, Matrix) end end)) end end)))] ++ lists:nthtail(2 + 1, lists:nth(1 + 1, Cof_6))] ++ lists:nthtail(1 + 1, Cof_6),
            Cof_8 = lists:sublist(Cof_7, 2) ++ [lists:sublist(lists:nth(2 + 1, Cof_7), 0) ++ [(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end)) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end)))] ++ lists:nthtail(0 + 1, lists:nth(2 + 1, Cof_7))] ++ lists:nthtail(2 + 1, Cof_7),
            Cof_9 = lists:sublist(Cof_8, 2) ++ [lists:sublist(lists:nth(2 + 1, Cof_8), 1) ++ [-(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end)) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(2, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(2 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end)))] ++ lists:nthtail(1 + 1, lists:nth(2 + 1, Cof_8))] ++ lists:nthtail(2 + 1, Cof_8),
            Cof_10 = lists:sublist(Cof_9, 2) ++ [lists:sublist(lists:nth(2 + 1, Cof_9), 2) ++ [(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end)) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) of true -> maps:get(1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) + 1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)) end end), (case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(1, Matrix, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Matrix) + 1 + 1, Matrix); _ -> mochi_nth(1 + 1, Matrix) end end)) end end)))] ++ lists:nthtail(2 + 1, lists:nth(2 + 1, Cof_9))] ++ lists:nthtail(2 + 1, Cof_9),
            Inv = [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]],
            I = 0,
            Fun_2 = fun Fun_2_loop(Cof_10, Det_2, I, Inv, Matrix) ->
    case (I < 3) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Cof_10, Det_2, I, Inv, J, Matrix) ->
    case (J < 3) of
        true ->
            Inv_2 = lists:sublist(Inv, I) ++ [lists:sublist(lists:nth(I + 1, Inv), J) ++ [mochi_safe_div((case erlang:is_map((case erlang:is_map(Cof_10) of true -> maps:get(J, Cof_10, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Cof_10) + J + 1, Cof_10); _ -> mochi_nth(J + 1, Cof_10) end end)) of true -> maps:get(I, (case erlang:is_map(Cof_10) of true -> maps:get(J, Cof_10, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Cof_10) + J + 1, Cof_10); _ -> mochi_nth(J + 1, Cof_10) end end), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Cof_10) of true -> maps:get(J, Cof_10, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Cof_10) + J + 1, Cof_10); _ -> mochi_nth(J + 1, Cof_10) end end)) + I + 1, (case erlang:is_map(Cof_10) of true -> maps:get(J, Cof_10, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Cof_10) + J + 1, Cof_10); _ -> mochi_nth(J + 1, Cof_10) end end)); _ -> mochi_nth(I + 1, (case erlang:is_map(Cof_10) of true -> maps:get(J, Cof_10, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Cof_10) + J + 1, Cof_10); _ -> mochi_nth(J + 1, Cof_10) end end)) end end), Det_2)] ++ lists:nthtail(J + 1, lists:nth(I + 1, Inv))] ++ lists:nthtail(I + 1, Inv),
            J_2 = (J + 1),
            Fun_loop(Cof_10, Det_2, I, Inv_2, J_2, Matrix);
        _ -> {Cof_10, Det_2, I, Inv, J, Matrix}
    end
end,
{Cof_10, Det_2, I, Inv_2, J_2, Matrix} = Fun(Cof_10, Det_2, I, Inv, J, Matrix),
            I_2 = (I + 1),
            Fun_2_loop(Cof_10, Det_2, I_2, Inv_2, Matrix);
        _ -> {Cof_10, Det_2, I, Inv, Matrix}
    end
end,
{Cof_10, Det_2, I_2, Inv_2, Matrix} = Fun_2(Cof_10, Det_2, I, Inv, Matrix),
            throw({return, Inv_2}),
            Cof_11 = Cof_10,
            Det_3 = Det_2,
            Fun_3 = Fun_2,
            I_3 = I_2,
            Inv_3 = Inv_2;
        _ -> Cof_11 = nil,
            Det_3 = nil,
            Fun_3 = nil,
            I_3 = nil,
            Inv_3 = nil
    end,
            Cof_12 = Cof_11,
            Det_4 = Det_3,
            Fun_4 = Fun_3,
            I_4 = I_3,
            Inv_4 = Inv_3
    end,
        io:format("~ts~n", [mochi_repr("Please provide a matrix of size 2x2 or 3x3.")]),
        []
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('m2', [[2.0, 5.0], [2.0, 0.0]]),
    io:format("~ts~n", [mochi_repr(inverse_of_matrix(erlang:get('m2')))]),
    erlang:put('m3', [[2.0, 5.0, 7.0], [2.0, 0.0, 1.0], [1.0, 2.0, 3.0]]),
    io:format("~ts~n", [mochi_repr(inverse_of_matrix(erlang:get('m3')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
