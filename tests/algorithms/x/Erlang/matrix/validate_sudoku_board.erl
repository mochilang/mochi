#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_valid_sudoku_board/1]).

% Generated by Mochi transpiler v0.10.61 (c45765bf43) on 2025-08-08 15:36 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

is_valid_sudoku_board(Board) ->
    try
        case (erlang:length(Board) /= 9) of
        true -> throw({return, false});
        _ -> ok
    end,
        I = 0,
        Fun = fun Fun_loop(Board, I) ->
    case (I < 9) of
        true ->
            case (erlang:length((case erlang:is_map(Board) of true -> maps:get(I, Board, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Board) + I + 1, Board); _ -> mochi_nth(I + 1, Board) end end)) /= 9) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Board, I_2);
        _ -> {Board, I}
    end
end,
{Board, I_2} = Fun(Board, I),
        Rows = [],
        Cols = [],
        Boxes = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Board, Boxes, Cols, I_3, Rows) ->
    case (I_3 < 9) of
        true ->
            Rows_2 = lists:append((case Rows of nil -> []; _ -> Rows end), [[]]),
            Cols_2 = lists:append((case Cols of nil -> []; _ -> Cols end), [[]]),
            Boxes_2 = lists:append((case Boxes of nil -> []; _ -> Boxes end), [[]]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Board, Boxes_2, Cols_2, I_4, Rows_2);
        _ -> {Board, Boxes, Cols, I_3, Rows}
    end
end,
{Board, Boxes_2, Cols_2, I_4, Rows_2} = Fun_2(Board, Boxes, Cols, I_3, Rows),
        Fun_3 = fun Fun_3_loop(List, Board, Boxes_2, Cols_2, I_4, Rows_2) ->
    case List of
        [] -> {Board, Boxes_2, Cols_2, I_4, Rows_2};
        [R|R_rest] ->
        try
            Fun_4 = fun Fun_4_loop(List, Board, Boxes_2, Cols_2, I_4, R, Rows_2) ->
    case List of
        [] -> {Board, Boxes_2, Cols_2, I_4, R, Rows_2};
        [C|C_rest] ->
        try
            Value = (case erlang:is_map((case erlang:is_map(Board) of true -> maps:get(R, Board, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Board) + R + 1, Board); _ -> mochi_nth(R + 1, Board) end end)) of true -> maps:get(C, (case erlang:is_map(Board) of true -> maps:get(R, Board, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Board) + R + 1, Board); _ -> mochi_nth(R + 1, Board) end end), nil); _ -> case C < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Board) of true -> maps:get(R, Board, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Board) + R + 1, Board); _ -> mochi_nth(R + 1, Board) end end)) + C + 1, (case erlang:is_map(Board) of true -> maps:get(R, Board, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Board) + R + 1, Board); _ -> mochi_nth(R + 1, Board) end end)); _ -> mochi_nth(C + 1, (case erlang:is_map(Board) of true -> maps:get(R, Board, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Board) + R + 1, Board); _ -> mochi_nth(R + 1, Board) end end)) end end),
            case (Value == ".") of
        true -> throw({continue, Board, Boxes_2, Cols_2, I_4, R, Rows_2});
        _ -> ok
    end,
            Box = ((mochi_to_int(mochi_safe_div(R, 3)) * 3) + mochi_to_int(mochi_safe_div(C, 3))),
            case ((mochi_member(Value, (case erlang:is_map(Rows_2) of true -> maps:get(R, Rows_2, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Rows_2) + R + 1, Rows_2); _ -> mochi_nth(R + 1, Rows_2) end end)) orelse mochi_member(Value, (case erlang:is_map(Cols_2) of true -> maps:get(C, Cols_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(Cols_2) + C + 1, Cols_2); _ -> mochi_nth(C + 1, Cols_2) end end))) orelse mochi_member(Value, (case erlang:is_map(Boxes_2) of true -> maps:get(Box, Boxes_2, nil); _ -> case Box < 0 of true -> mochi_nth(erlang:length(Boxes_2) + Box + 1, Boxes_2); _ -> mochi_nth(Box + 1, Boxes_2) end end))) of
        true -> throw({return, false});
        _ -> ok
    end,
            Rows_3 = lists:sublist(Rows_2, R) ++ [lists:append((case (case erlang:is_map(Rows_2) of true -> maps:get(R, Rows_2, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Rows_2) + R + 1, Rows_2); _ -> mochi_nth(R + 1, Rows_2) end end) of nil -> []; _ -> (case erlang:is_map(Rows_2) of true -> maps:get(R, Rows_2, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Rows_2) + R + 1, Rows_2); _ -> mochi_nth(R + 1, Rows_2) end end) end), [Value])] ++ lists:nthtail(R + 1, Rows_2),
            Cols_3 = lists:sublist(Cols_2, C) ++ [lists:append((case (case erlang:is_map(Cols_2) of true -> maps:get(C, Cols_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(Cols_2) + C + 1, Cols_2); _ -> mochi_nth(C + 1, Cols_2) end end) of nil -> []; _ -> (case erlang:is_map(Cols_2) of true -> maps:get(C, Cols_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(Cols_2) + C + 1, Cols_2); _ -> mochi_nth(C + 1, Cols_2) end end) end), [Value])] ++ lists:nthtail(C + 1, Cols_2),
            Boxes_3 = lists:sublist(Boxes_2, Box) ++ [lists:append((case (case erlang:is_map(Boxes_2) of true -> maps:get(Box, Boxes_2, nil); _ -> case Box < 0 of true -> mochi_nth(erlang:length(Boxes_2) + Box + 1, Boxes_2); _ -> mochi_nth(Box + 1, Boxes_2) end end) of nil -> []; _ -> (case erlang:is_map(Boxes_2) of true -> maps:get(Box, Boxes_2, nil); _ -> case Box < 0 of true -> mochi_nth(erlang:length(Boxes_2) + Box + 1, Boxes_2); _ -> mochi_nth(Box + 1, Boxes_2) end end) end), [Value])] ++ lists:nthtail(Box + 1, Boxes_2),
            Fun_4_loop(C_rest, Board, Boxes_3, Cols_3, I_4, R, Rows_3)
        catch
            {continue, C0, C1, C2, C3, C4, C5} -> Fun_4_loop(C_rest, C0, C1, C2, C3, C4, C5);
            {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5};
            break -> {Board, Boxes_2, Cols_2, I_4, R, Rows_2}
        end;
        _ -> {Board, Boxes_2, Cols_2, I_4, R, Rows_2}
    end
end,
{Board, Boxes_3, Cols_3, I_4, R, Rows_3} = Fun_4(lists:seq(0, (9) - 1), Board, Boxes_2, Cols_2, I_4, R, Rows_2),
            Fun_3_loop(R_rest, Board, Boxes_3, Cols_3, I_4, Rows_3)
        catch
            {continue, C0, C1, C2, C3, C4} -> Fun_3_loop(R_rest, C0, C1, C2, C3, C4);
            {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4};
            break -> {Board, Boxes_2, Cols_2, I_4, Rows_2}
        end;
        _ -> {Board, Boxes_2, Cols_2, I_4, Rows_2}
    end
end,
{Board, Boxes_3, Cols_3, I_4, Rows_3} = Fun_3(lists:seq(0, (9) - 1), Board, Boxes_2, Cols_2, I_4, Rows_2),
        true
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('NUM_SQUARES', 9),
    erlang:put('EMPTY_CELL', "."),
    erlang:put('valid_board', [["5", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]),
    erlang:put('invalid_board', [["8", "3", ".", ".", "7", ".", ".", ".", "."], ["6", ".", ".", "1", "9", "5", ".", ".", "."], [".", "9", "8", ".", ".", ".", ".", "6", "."], ["8", ".", ".", ".", "6", ".", ".", ".", "3"], ["4", ".", ".", "8", ".", "3", ".", ".", "1"], ["7", ".", ".", ".", "2", ".", ".", ".", "6"], [".", "6", ".", ".", ".", ".", "2", "8", "."], [".", ".", ".", "4", "1", "9", ".", ".", "5"], [".", ".", ".", ".", "8", ".", ".", "7", "9"]]),
    io:format("~ts~n", [mochi_repr(is_valid_sudoku_board(erlang:get('valid_board')))]),
    io:format("~ts~n", [mochi_repr(is_valid_sudoku_board(erlang:get('invalid_board')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
