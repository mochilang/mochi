#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, encode/2, is_safe/4, has/2, depth_first_search/4, find_max_area/1]).

% Generated by Mochi transpiler v0.10.64 (1dced96c32) on 2025-08-12 13:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

encode(Row, Col) ->
    try
        ((mochi_str(Row) ++ ",") ++ mochi_str(Col))
    catch {return, RetCatch} -> RetCatch end.

is_safe(Row_2, Col_2, Rows, Cols) ->
    try
        ((((Row_2 >= 0) andalso (Row_2 < Rows)) andalso (Col_2 >= 0)) andalso (Col_2 < Cols))
    catch {return, RetCatch} -> RetCatch end.

has(Seen, Key) ->
    try
        maps:is_key(Key, Seen)
    catch {return, RetCatch} -> RetCatch end.

depth_first_search(Row_3, Col_3, Seen_2, Mat) ->
    try
        Rows_2 = erlang:length(Mat),
        Cols_2 = erlang:length((case erlang:is_map(Mat) of true -> maps:get(0, Mat, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Mat) + 0 + 1, Mat); _ -> mochi_nth(0 + 1, Mat) end end)),
        Key_2 = encode(Row_3, Col_3),
        case ((is_safe(Row_3, Col_3, Rows_2, Cols_2) andalso mochi_not(has(Seen_2, Key_2))) andalso ((case erlang:is_map((case erlang:is_map(Mat) of true -> maps:get(Row_3, Mat, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Mat) + Row_3 + 1, Mat); _ -> mochi_nth(Row_3 + 1, Mat) end end)) of true -> maps:get(Col_3, (case erlang:is_map(Mat) of true -> maps:get(Row_3, Mat, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Mat) + Row_3 + 1, Mat); _ -> mochi_nth(Row_3 + 1, Mat) end end), nil); _ -> case Col_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat) of true -> maps:get(Row_3, Mat, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Mat) + Row_3 + 1, Mat); _ -> mochi_nth(Row_3 + 1, Mat) end end)) + Col_3 + 1, (case erlang:is_map(Mat) of true -> maps:get(Row_3, Mat, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Mat) + Row_3 + 1, Mat); _ -> mochi_nth(Row_3 + 1, Mat) end end)); _ -> mochi_nth(Col_3 + 1, (case erlang:is_map(Mat) of true -> maps:get(Row_3, Mat, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Mat) + Row_3 + 1, Mat); _ -> mochi_nth(Row_3 + 1, Mat) end end)) end end) == 1)) of
        true -> Seen_3 = maps:put(Key_2, true, Seen_2),
            throw({return, ((((1 + depth_first_search((Row_3 + 1), Col_3, Seen_3, Mat)) + depth_first_search((Row_3 - 1), Col_3, Seen_3, Mat)) + depth_first_search(Row_3, (Col_3 + 1), Seen_3, Mat)) + depth_first_search(Row_3, (Col_3 - 1), Seen_3, Mat))}),
            Seen_4 = Seen_3;
        _ -> throw({return, 0}),
            Seen_4 = Seen_2
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

find_max_area(Mat_2) ->
    try
        Seen_5 = #{},
        Rows_3 = erlang:length(Mat_2),
        Max_area = 0,
        R = 0,
        Fun_2 = fun Fun_2_loop(Mat_2, Max_area, R, Rows_3, Seen_5) ->
    case (R < Rows_3) of
        true ->
            Line = (case erlang:is_map(Mat_2) of true -> maps:get(R, Mat_2, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Mat_2) + R + 1, Mat_2); _ -> mochi_nth(R + 1, Mat_2) end end),
            Cols_3 = erlang:length(Line),
            C = 0,
            Fun = fun Fun_loop(C, Cols_3, Line, Mat_2, Max_area, R, Rows_3, Seen_5) ->
    case (C < Cols_3) of
        true ->
            case ((case erlang:is_map(Line) of true -> maps:get(C, Line, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(Line) + C + 1, Line); _ -> mochi_nth(C + 1, Line) end end) == 1) of
        true -> Key_3 = encode(R, C),
            case mochi_not(maps:is_key(Key_3, Seen_5)) of
        true -> Area = depth_first_search(R, C, Seen_5, Mat_2),
            case (Area > Max_area) of
        true -> Max_area_2 = Area,
            Max_area_3 = Max_area_2;
        _ -> Max_area_3 = Max_area
    end,
            Area_2 = Area,
            Max_area_4 = Max_area_3;
        _ -> Area_2 = nil,
            Max_area_4 = Max_area
    end,
            Area_3 = Area_2,
            Key_4 = Key_3,
            Max_area_5 = Max_area_4;
        _ -> Area_3 = nil,
            Key_4 = nil,
            Max_area_5 = Max_area
    end,
            C_2 = (C + 1),
            Fun_loop(C_2, Cols_3, Line, Mat_2, Max_area_5, R, Rows_3, Seen_5);
        _ -> {C, Cols_3, Line, Mat_2, Max_area, R, Rows_3, Seen_5}
    end
end,
{C_2, Cols_3, Line, Mat_2, Max_area_5, R, Rows_3, Seen_5} = Fun(C, Cols_3, Line, Mat_2, Max_area, R, Rows_3, Seen_5),
            R_2 = (R + 1),
            Fun_2_loop(Mat_2, Max_area_5, R_2, Rows_3, Seen_5);
        _ -> {Mat_2, Max_area, R, Rows_3, Seen_5}
    end
end,
{Mat_2, Max_area_5, R_2, Rows_3, Seen_5} = Fun_2(Mat_2, Max_area, R, Rows_3, Seen_5),
        Max_area_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('matrix', [[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]]),
    io:format("~ts~n", [mochi_repr(find_max_area(erlang:get('matrix')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
