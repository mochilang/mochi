#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_valid_matrix/1, spiral_traversal/1, spiral_print_clockwise/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (c45765bf43) on 2025-08-08 15:36 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

is_valid_matrix(Matrix) ->
    try
        case (erlang:length(Matrix) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        Cols = erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> mochi_nth(0 + 1, Matrix) end end)),
        Fun = fun Fun_loop(List, Cols, Matrix) ->
    case List of
        [] -> {Cols, Matrix};
        [Row|Row_rest] ->
            case (erlang:length(Row) /= Cols) of
        true -> throw({return, false});
        _ -> ok
    end,
            Fun_loop(Row_rest, Cols, Matrix);
        _ -> {Cols, Matrix}
    end
end,
{Cols, Matrix} = Fun(Matrix, Cols, Matrix),
        true
    catch {return, Ret} -> Ret end.

spiral_traversal(Matrix_2) ->
    try
        case mochi_not(is_valid_matrix(Matrix_2)) of
        true -> throw({return, []});
        _ -> ok
    end,
        Rows = erlang:length(Matrix_2),
        Cols_2 = erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get(0, Matrix_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + 0 + 1, Matrix_2); _ -> mochi_nth(0 + 1, Matrix_2) end end)),
        Top = 0,
        Bottom = (Rows - 1),
        Left = 0,
        Right = (Cols_2 - 1),
        Result = [],
        Fun_8 = fun Fun_8_loop(Bottom, Cols_2, Left, Matrix_2, Result, Right, Rows, Top) ->
    case ((Left =< Right) andalso (Top =< Bottom)) of
        true ->
            I = Left,
            Fun_2 = fun Fun_2_loop(Bottom, Cols_2, I, Left, Matrix_2, Result, Right, Rows, Top) ->
    case (I =< Right) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map((case erlang:is_map(Matrix_2) of true -> maps:get(Top, Matrix_2, nil); _ -> case Top < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Top + 1, Matrix_2); _ -> mochi_nth(Top + 1, Matrix_2) end end)) of true -> maps:get(I, (case erlang:is_map(Matrix_2) of true -> maps:get(Top, Matrix_2, nil); _ -> case Top < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Top + 1, Matrix_2); _ -> mochi_nth(Top + 1, Matrix_2) end end), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get(Top, Matrix_2, nil); _ -> case Top < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Top + 1, Matrix_2); _ -> mochi_nth(Top + 1, Matrix_2) end end)) + I + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(Top, Matrix_2, nil); _ -> case Top < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Top + 1, Matrix_2); _ -> mochi_nth(Top + 1, Matrix_2) end end)); _ -> mochi_nth(I + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(Top, Matrix_2, nil); _ -> case Top < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Top + 1, Matrix_2); _ -> mochi_nth(Top + 1, Matrix_2) end end)) end end)]),
            I_2 = (I + 1),
            Fun_2_loop(Bottom, Cols_2, I_2, Left, Matrix_2, Result_2, Right, Rows, Top);
        _ -> {Bottom, Cols_2, I, Left, Matrix_2, Result, Right, Rows, Top}
    end
end,
{Bottom, Cols_2, I_2, Left, Matrix_2, Result_2, Right, Rows, Top} = Fun_2(Bottom, Cols_2, I, Left, Matrix_2, Result, Right, Rows, Top),
            Top_2 = (Top + 1),
            I_3 = Top_2,
            Fun_3 = fun Fun_3_loop(Bottom, Cols_2, I_3, Left, Matrix_2, Result_2, Right, Rows, Top_2) ->
    case (I_3 =< Bottom) of
        true ->
            Result_3 = lists:append((case Result_2 of nil -> []; _ -> Result_2 end), [(case erlang:is_map((case erlang:is_map(Matrix_2) of true -> maps:get(I_3, Matrix_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + I_3 + 1, Matrix_2); _ -> mochi_nth(I_3 + 1, Matrix_2) end end)) of true -> maps:get(Right, (case erlang:is_map(Matrix_2) of true -> maps:get(I_3, Matrix_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + I_3 + 1, Matrix_2); _ -> mochi_nth(I_3 + 1, Matrix_2) end end), nil); _ -> case Right < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get(I_3, Matrix_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + I_3 + 1, Matrix_2); _ -> mochi_nth(I_3 + 1, Matrix_2) end end)) + Right + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(I_3, Matrix_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + I_3 + 1, Matrix_2); _ -> mochi_nth(I_3 + 1, Matrix_2) end end)); _ -> mochi_nth(Right + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(I_3, Matrix_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + I_3 + 1, Matrix_2); _ -> mochi_nth(I_3 + 1, Matrix_2) end end)) end end)]),
            I_4 = (I_3 + 1),
            Fun_3_loop(Bottom, Cols_2, I_4, Left, Matrix_2, Result_3, Right, Rows, Top_2);
        _ -> {Bottom, Cols_2, I_3, Left, Matrix_2, Result_2, Right, Rows, Top_2}
    end
end,
{Bottom, Cols_2, I_4, Left, Matrix_2, Result_3, Right, Rows, Top_2} = Fun_3(Bottom, Cols_2, I_3, Left, Matrix_2, Result_2, Right, Rows, Top_2),
            Right_2 = (Right - 1),
            case (Top_2 =< Bottom) of
        true -> I_5 = Right_2,
            Fun_4 = fun Fun_4_loop(Bottom, Cols_2, I_5, Left, Matrix_2, Result_3, Right_2, Rows, Top_2) ->
    case (I_5 >= Left) of
        true ->
            Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [(case erlang:is_map((case erlang:is_map(Matrix_2) of true -> maps:get(Bottom, Matrix_2, nil); _ -> case Bottom < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Bottom + 1, Matrix_2); _ -> mochi_nth(Bottom + 1, Matrix_2) end end)) of true -> maps:get(I_5, (case erlang:is_map(Matrix_2) of true -> maps:get(Bottom, Matrix_2, nil); _ -> case Bottom < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Bottom + 1, Matrix_2); _ -> mochi_nth(Bottom + 1, Matrix_2) end end), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get(Bottom, Matrix_2, nil); _ -> case Bottom < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Bottom + 1, Matrix_2); _ -> mochi_nth(Bottom + 1, Matrix_2) end end)) + I_5 + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(Bottom, Matrix_2, nil); _ -> case Bottom < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Bottom + 1, Matrix_2); _ -> mochi_nth(Bottom + 1, Matrix_2) end end)); _ -> mochi_nth(I_5 + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(Bottom, Matrix_2, nil); _ -> case Bottom < 0 of true -> mochi_nth(erlang:length(Matrix_2) + Bottom + 1, Matrix_2); _ -> mochi_nth(Bottom + 1, Matrix_2) end end)) end end)]),
            I_6 = (I_5 - 1),
            Fun_4_loop(Bottom, Cols_2, I_6, Left, Matrix_2, Result_4, Right_2, Rows, Top_2);
        _ -> {Bottom, Cols_2, I_5, Left, Matrix_2, Result_3, Right_2, Rows, Top_2}
    end
end,
{Bottom, Cols_2, I_6, Left, Matrix_2, Result_4, Right_2, Rows, Top_2} = Fun_4(Bottom, Cols_2, I_5, Left, Matrix_2, Result_3, Right_2, Rows, Top_2),
            Bottom_2 = (Bottom - 1),
            Bottom_3 = Bottom_2,
            Fun_5 = Fun_4,
            I_7 = I_6,
            Result_5 = Result_4;
        _ -> Bottom_3 = Bottom,
            Fun_5 = Fun_3,
            I_7 = I_4,
            Result_5 = Result_3
    end,
            case (Left =< Right_2) of
        true -> I_8 = Bottom_3,
            Fun_6 = fun Fun_6_loop(Bottom_3, Cols_2, I_8, Left, Matrix_2, Result_5, Right_2, Rows, Top_2) ->
    case (I_8 >= Top_2) of
        true ->
            Result_6 = lists:append((case Result_5 of nil -> []; _ -> Result_5 end), [(case erlang:is_map((case erlang:is_map(Matrix_2) of true -> maps:get(I_8, Matrix_2, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + I_8 + 1, Matrix_2); _ -> mochi_nth(I_8 + 1, Matrix_2) end end)) of true -> maps:get(Left, (case erlang:is_map(Matrix_2) of true -> maps:get(I_8, Matrix_2, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + I_8 + 1, Matrix_2); _ -> mochi_nth(I_8 + 1, Matrix_2) end end), nil); _ -> case Left < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get(I_8, Matrix_2, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + I_8 + 1, Matrix_2); _ -> mochi_nth(I_8 + 1, Matrix_2) end end)) + Left + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(I_8, Matrix_2, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + I_8 + 1, Matrix_2); _ -> mochi_nth(I_8 + 1, Matrix_2) end end)); _ -> mochi_nth(Left + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(I_8, Matrix_2, nil); _ -> case I_8 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + I_8 + 1, Matrix_2); _ -> mochi_nth(I_8 + 1, Matrix_2) end end)) end end)]),
            I_9 = (I_8 - 1),
            Fun_6_loop(Bottom_3, Cols_2, I_9, Left, Matrix_2, Result_6, Right_2, Rows, Top_2);
        _ -> {Bottom_3, Cols_2, I_8, Left, Matrix_2, Result_5, Right_2, Rows, Top_2}
    end
end,
{Bottom_3, Cols_2, I_9, Left, Matrix_2, Result_6, Right_2, Rows, Top_2} = Fun_6(Bottom_3, Cols_2, I_8, Left, Matrix_2, Result_5, Right_2, Rows, Top_2),
            Left_2 = (Left + 1),
            Fun_7 = Fun_6,
            I_10 = I_9,
            Left_3 = Left_2,
            Result_7 = Result_6;
        _ -> Fun_7 = Fun_5,
            I_10 = I_7,
            Left_3 = Left,
            Result_7 = Result_5
    end,
            Fun_8_loop(Bottom_3, Cols_2, Left_3, Matrix_2, Result_7, Right_2, Rows, Top_2);
        _ -> {Bottom, Cols_2, Left, Matrix_2, Result, Right, Rows, Top}
    end
end,
{Bottom_3, Cols_2, Left_3, Matrix_2, Result_7, Right_2, Rows, Top_2} = Fun_8(Bottom, Cols_2, Left, Matrix_2, Result, Right, Rows, Top),
        Result_7
    catch {return, Ret} -> Ret end.

spiral_print_clockwise(Matrix_3) ->
    try
        Fun_9 = fun Fun_9_loop(List, Matrix_3) ->
    case List of
        [] -> {Matrix_3};
        [Value|Value_rest] ->
            io:format("~ts~n", [mochi_str(Value)]),
            Fun_9_loop(Value_rest, Matrix_3);
        _ -> {Matrix_3}
    end
end,
{Matrix_3} = Fun_9(spiral_traversal(Matrix_3), Matrix_3),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        A = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]],
        spiral_print_clockwise(A),
        io:format("~ts~n", [mochi_str(spiral_traversal(A))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
