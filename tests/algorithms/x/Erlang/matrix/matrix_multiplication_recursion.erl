#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, is_square/1, matrix_multiply/2, multiply/8, matrix_multiply_recursive/2]).

% Generated by Mochi transpiler v0.10.67 (7ab215672a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

is_square(Matrix) ->
    try
        N = erlang:length(Matrix),
        I = 0,
        Fun = fun Fun_loop(I, Matrix, N) ->
    case (I < N) of
        true ->
            case (erlang:length((case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)) /= N) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Matrix, N);
        _ -> {I, Matrix, N}
    end
end,
{I_2, Matrix, N} = Fun(I, Matrix, N),
        true
    catch {return, RetCatch} -> RetCatch end.

matrix_multiply(A, B) ->
    try
        Rows = erlang:length(A),
        Cols = erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)),
        Inner = erlang:length(B),
        Result = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(A, B, Cols, I_3, Inner, Result, Rows) ->
    case (I_3 < Rows) of
        true ->
            Row = [],
            J = 0,
            Fun_3 = fun Fun_3_loop(A, B, Cols, I_3, Inner, J, Result, Row, Rows) ->
    case (J < Cols) of
        true ->
            Sum = 0,
            K = 0,
            Fun_2 = fun Fun_2_loop(A, B, Cols, I_3, Inner, J, K, Result, Row, Rows, Sum) ->
    case (K < Inner) of
        true ->
            Sum_2 = (Sum + ((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end)) of true -> maps:get(K, (case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end)) + K + 1, (case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) of true -> maps:get(J, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) + J + 1, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(B) of true -> maps:get(K, B, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B) + K + 1, B); _ -> mochi_nth(K + 1, B) end end)) end end))),
            K_2 = (K + 1),
            Fun_2_loop(A, B, Cols, I_3, Inner, J, K_2, Result, Row, Rows, Sum_2);
        _ -> {A, B, Cols, I_3, Inner, J, K, Result, Row, Rows, Sum}
    end
end,
{A, B, Cols, I_3, Inner, J, K_2, Result, Row, Rows, Sum_2} = Fun_2(A, B, Cols, I_3, Inner, J, K, Result, Row, Rows, Sum),
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Sum_2]),
            J_2 = (J + 1),
            Fun_3_loop(A, B, Cols, I_3, Inner, J_2, Result, Row_2, Rows);
        _ -> {A, B, Cols, I_3, Inner, J, Result, Row, Rows}
    end
end,
{A, B, Cols, I_3, Inner, J_2, Result, Row_2, Rows} = Fun_3(A, B, Cols, I_3, Inner, J, Result, Row, Rows),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_2]),
            I_4 = (I_3 + 1),
            Fun_4_loop(A, B, Cols, I_4, Inner, Result_2, Rows);
        _ -> {A, B, Cols, I_3, Inner, Result, Rows}
    end
end,
{A, B, Cols, I_4, Inner, Result_2, Rows} = Fun_4(A, B, Cols, I_3, Inner, Result, Rows),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

multiply(I_5, J_3, K_3, A_2, B_2, Result_3, N_2, M) ->
    try
        case (I_5 >= N_2) of
        true -> throw({return, nil});
        _ -> ok
    end,
        case (J_3 >= M) of
        true -> multiply((I_5 + 1), 0, 0, A_2, B_2, Result_3, N_2, M),
            throw({return, nil});
        _ -> ok
    end,
        case (K_3 >= erlang:length(B_2)) of
        true -> multiply(I_5, (J_3 + 1), 0, A_2, B_2, Result_3, N_2, M),
            throw({return, nil});
        _ -> ok
    end,
        Result_4 = lists:sublist(Result_3, I_5) ++ [(lists:sublist(lists:nth(I_5 + 1, Result_3), J_3) ++ [((case erlang:is_map((case erlang:is_map(Result_3) of true -> maps:get(I_5, Result_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Result_3) + I_5 + 1, Result_3); _ -> mochi_nth(I_5 + 1, Result_3) end end)) of true -> maps:get(J_3, (case erlang:is_map(Result_3) of true -> maps:get(I_5, Result_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Result_3) + I_5 + 1, Result_3); _ -> mochi_nth(I_5 + 1, Result_3) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Result_3) of true -> maps:get(I_5, Result_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Result_3) + I_5 + 1, Result_3); _ -> mochi_nth(I_5 + 1, Result_3) end end)) + J_3 + 1, (case erlang:is_map(Result_3) of true -> maps:get(I_5, Result_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Result_3) + I_5 + 1, Result_3); _ -> mochi_nth(I_5 + 1, Result_3) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Result_3) of true -> maps:get(I_5, Result_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Result_3) + I_5 + 1, Result_3); _ -> mochi_nth(I_5 + 1, Result_3) end end)) end end) + ((case erlang:is_map((case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> mochi_nth(I_5 + 1, A_2) end end)) of true -> maps:get(K_3, (case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> mochi_nth(I_5 + 1, A_2) end end), nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> mochi_nth(I_5 + 1, A_2) end end)) + K_3 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> mochi_nth(I_5 + 1, A_2) end end)); _ -> mochi_nth(K_3 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> mochi_nth(I_5 + 1, A_2) end end)) end end) * (case erlang:is_map((case erlang:is_map(B_2) of true -> maps:get(K_3, B_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(B_2) + K_3 + 1, B_2); _ -> mochi_nth(K_3 + 1, B_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(B_2) of true -> maps:get(K_3, B_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(B_2) + K_3 + 1, B_2); _ -> mochi_nth(K_3 + 1, B_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B_2) of true -> maps:get(K_3, B_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(B_2) + K_3 + 1, B_2); _ -> mochi_nth(K_3 + 1, B_2) end end)) + J_3 + 1, (case erlang:is_map(B_2) of true -> maps:get(K_3, B_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(B_2) + K_3 + 1, B_2); _ -> mochi_nth(K_3 + 1, B_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(B_2) of true -> maps:get(K_3, B_2, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(B_2) + K_3 + 1, B_2); _ -> mochi_nth(K_3 + 1, B_2) end end)) end end)))] ++ lists:nthtail(J_3 + 1, lists:nth(I_5 + 1, Result_3)))] ++ lists:nthtail(I_5 + 1, Result_3),
        multiply(I_5, J_3, (K_3 + 1), A_2, B_2, Result_4, N_2, M),
        {nil, Result_4}
    catch {return, RetCatch} -> RetCatch end.

matrix_multiply_recursive(A_3, B_3) ->
    try
        case ((erlang:length(A_3) == 0) orelse (erlang:length(B_3) == 0)) of
        true -> throw({return, []});
        _ -> ok
    end,
        case (((erlang:length(A_3) /= erlang:length(B_3)) orelse mochi_not(is_square(A_3))) orelse mochi_not(is_square(B_3))) of
        true -> erlang:error({panic, "Invalid matrix dimensions"});
        _ -> ok
    end,
        N_3 = erlang:length(A_3),
        M_2 = erlang:length((case erlang:is_map(B_3) of true -> maps:get(0, B_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B_3) + 0 + 1, B_3); _ -> mochi_nth(0 + 1, B_3) end end)),
        Result_5 = [],
        I_6 = 0,
        Fun_6 = fun Fun_6_loop(A_3, B_3, I_6, M_2, N_3, Result_5) ->
    case (I_6 < N_3) of
        true ->
            Row_3 = [],
            J_4 = 0,
            Fun_5 = fun Fun_5_loop(A_3, B_3, I_6, J_4, M_2, N_3, Result_5, Row_3) ->
    case (J_4 < M_2) of
        true ->
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [0]),
            J_5 = (J_4 + 1),
            Fun_5_loop(A_3, B_3, I_6, J_5, M_2, N_3, Result_5, Row_4);
        _ -> {A_3, B_3, I_6, J_4, M_2, N_3, Result_5, Row_3}
    end
end,
{A_3, B_3, I_6, J_5, M_2, N_3, Result_5, Row_4} = Fun_5(A_3, B_3, I_6, J_4, M_2, N_3, Result_5, Row_3),
            Result_6 = lists:append((case Result_5 of nil -> []; _ -> Result_5 end), [Row_4]),
            I_7 = (I_6 + 1),
            Fun_6_loop(A_3, B_3, I_7, M_2, N_3, Result_6);
        _ -> {A_3, B_3, I_6, M_2, N_3, Result_5}
    end
end,
{A_3, B_3, I_7, M_2, N_3, Result_6} = Fun_6(A_3, B_3, I_6, M_2, N_3, Result_5),
        Result_6_res = multiply(0, 0, 0, A_3, B_3, Result_6, N_3, M_2),
        Result_6_tmp = element(2, Result_6_res),
        Result_6 = Result_6_tmp,
        Result_6
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('matrix_1_to_4', [[1, 2], [3, 4]]),
    erlang:put('matrix_5_to_8', [[5, 6], [7, 8]]),
    erlang:put('matrix_count_up', [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]),
    erlang:put('matrix_unordered', [[5, 8, 1, 2], [6, 7, 3, 0], [4, 5, 9, 1], [2, 6, 10, 14]]),
    io:format("~ts~n", [mochi_repr(matrix_multiply_recursive(erlang:get('matrix_1_to_4'), erlang:get('matrix_5_to_8')))]),
    io:format("~ts~n", [mochi_repr(matrix_multiply_recursive(erlang:get('matrix_count_up'), erlang:get('matrix_unordered')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
