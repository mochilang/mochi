#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, add/1, subtract/2, scalar_multiply/2, multiply/2, identity/1, transpose/1, minor/3, determinant/1, inverse/1, main/0]).

% Generated by Mochi transpiler v0.10.66 (48422bb2d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

add(Matrices) ->
    try
        Rows = erlang:length((case erlang:is_map(Matrices) of true -> maps:get(0, Matrices, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrices) + 0 + 1, Matrices); _ -> mochi_nth(0 + 1, Matrices) end end)),
        Cols = erlang:length((case erlang:is_map((case erlang:is_map(Matrices) of true -> maps:get(0, Matrices, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrices) + 0 + 1, Matrices); _ -> mochi_nth(0 + 1, Matrices) end end)) of true -> maps:get(0, (case erlang:is_map(Matrices) of true -> maps:get(0, Matrices, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrices) + 0 + 1, Matrices); _ -> mochi_nth(0 + 1, Matrices) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrices) of true -> maps:get(0, Matrices, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrices) + 0 + 1, Matrices); _ -> mochi_nth(0 + 1, Matrices) end end)) + 0 + 1, (case erlang:is_map(Matrices) of true -> maps:get(0, Matrices, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrices) + 0 + 1, Matrices); _ -> mochi_nth(0 + 1, Matrices) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrices) of true -> maps:get(0, Matrices, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrices) + 0 + 1, Matrices); _ -> mochi_nth(0 + 1, Matrices) end end)) end end)),
        R = 0,
        Result = [],
        Fun_3 = fun Fun_3_loop(Cols, Matrices, R, Result, Rows) ->
    case (R < Rows) of
        true ->
            Row = [],
            C = 0,
            Fun_2 = fun Fun_2_loop(C, Cols, Matrices, R, Result, Row, Rows) ->
    case (C < Cols) of
        true ->
            Sum = 0.0,
            M = 0,
            Fun = fun Fun_loop(C, Cols, M, Matrices, R, Result, Row, Rows, Sum) ->
    case (M < erlang:length(Matrices)) of
        true ->
            Sum_2 = (Sum + (case erlang:is_map((case erlang:is_map((case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) of true -> maps:get(R, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end), nil); _ -> case R < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) + R + 1, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)); _ -> mochi_nth(R + 1, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) end end)) of true -> maps:get(C, (case erlang:is_map((case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) of true -> maps:get(R, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end), nil); _ -> case R < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) + R + 1, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)); _ -> mochi_nth(R + 1, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) end end), nil); _ -> case C < 0 of true -> mochi_nth(erlang:length((case erlang:is_map((case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) of true -> maps:get(R, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end), nil); _ -> case R < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) + R + 1, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)); _ -> mochi_nth(R + 1, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) end end)) + C + 1, (case erlang:is_map((case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) of true -> maps:get(R, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end), nil); _ -> case R < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) + R + 1, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)); _ -> mochi_nth(R + 1, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) end end)); _ -> mochi_nth(C + 1, (case erlang:is_map((case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) of true -> maps:get(R, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end), nil); _ -> case R < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) + R + 1, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)); _ -> mochi_nth(R + 1, (case erlang:is_map(Matrices) of true -> maps:get(M, Matrices, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Matrices) + M + 1, Matrices); _ -> mochi_nth(M + 1, Matrices) end end)) end end)) end end)),
            M_2 = (M + 1),
            Fun_loop(C, Cols, M_2, Matrices, R, Result, Row, Rows, Sum_2);
        _ -> {C, Cols, M, Matrices, R, Result, Row, Rows, Sum}
    end
end,
{C, Cols, M_2, Matrices, R, Result, Row, Rows, Sum_2} = Fun(C, Cols, M, Matrices, R, Result, Row, Rows, Sum),
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Sum_2]),
            C_2 = (C + 1),
            Fun_2_loop(C_2, Cols, Matrices, R, Result, Row_2, Rows);
        _ -> {C, Cols, Matrices, R, Result, Row, Rows}
    end
end,
{C_2, Cols, Matrices, R, Result, Row_2, Rows} = Fun_2(C, Cols, Matrices, R, Result, Row, Rows),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_2]),
            R_2 = (R + 1),
            Fun_3_loop(Cols, Matrices, R_2, Result_2, Rows);
        _ -> {Cols, Matrices, R, Result, Rows}
    end
end,
{Cols, Matrices, R_2, Result_2, Rows} = Fun_3(Cols, Matrices, R, Result, Rows),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

subtract(A, B) ->
    try
        Rows_2 = erlang:length(A),
        Cols_2 = erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)),
        R_3 = 0,
        Result_3 = [],
        Fun_5 = fun Fun_5_loop(A, B, Cols_2, R_3, Result_3, Rows_2) ->
    case (R_3 < Rows_2) of
        true ->
            Row_3 = [],
            C_3 = 0,
            Fun_4 = fun Fun_4_loop(A, B, C_3, Cols_2, R_3, Result_3, Row_3, Rows_2) ->
    case (C_3 < Cols_2) of
        true ->
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(R_3, A, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(A) + R_3 + 1, A); _ -> mochi_nth(R_3 + 1, A) end end)) of true -> maps:get(C_3, (case erlang:is_map(A) of true -> maps:get(R_3, A, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(A) + R_3 + 1, A); _ -> mochi_nth(R_3 + 1, A) end end), nil); _ -> case C_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(R_3, A, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(A) + R_3 + 1, A); _ -> mochi_nth(R_3 + 1, A) end end)) + C_3 + 1, (case erlang:is_map(A) of true -> maps:get(R_3, A, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(A) + R_3 + 1, A); _ -> mochi_nth(R_3 + 1, A) end end)); _ -> mochi_nth(C_3 + 1, (case erlang:is_map(A) of true -> maps:get(R_3, A, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(A) + R_3 + 1, A); _ -> mochi_nth(R_3 + 1, A) end end)) end end) - (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(R_3, B, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(B) + R_3 + 1, B); _ -> mochi_nth(R_3 + 1, B) end end)) of true -> maps:get(C_3, (case erlang:is_map(B) of true -> maps:get(R_3, B, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(B) + R_3 + 1, B); _ -> mochi_nth(R_3 + 1, B) end end), nil); _ -> case C_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(R_3, B, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(B) + R_3 + 1, B); _ -> mochi_nth(R_3 + 1, B) end end)) + C_3 + 1, (case erlang:is_map(B) of true -> maps:get(R_3, B, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(B) + R_3 + 1, B); _ -> mochi_nth(R_3 + 1, B) end end)); _ -> mochi_nth(C_3 + 1, (case erlang:is_map(B) of true -> maps:get(R_3, B, nil); _ -> case R_3 < 0 of true -> mochi_nth(erlang:length(B) + R_3 + 1, B); _ -> mochi_nth(R_3 + 1, B) end end)) end end))]),
            C_4 = (C_3 + 1),
            Fun_4_loop(A, B, C_4, Cols_2, R_3, Result_3, Row_4, Rows_2);
        _ -> {A, B, C_3, Cols_2, R_3, Result_3, Row_3, Rows_2}
    end
end,
{A, B, C_4, Cols_2, R_3, Result_3, Row_4, Rows_2} = Fun_4(A, B, C_3, Cols_2, R_3, Result_3, Row_3, Rows_2),
            Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [Row_4]),
            R_4 = (R_3 + 1),
            Fun_5_loop(A, B, Cols_2, R_4, Result_4, Rows_2);
        _ -> {A, B, Cols_2, R_3, Result_3, Rows_2}
    end
end,
{A, B, Cols_2, R_4, Result_4, Rows_2} = Fun_5(A, B, Cols_2, R_3, Result_3, Rows_2),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

scalar_multiply(Matrix, N) ->
    try
        Result_5 = [],
        I = 0,
        Fun_7 = fun Fun_7_loop(I, Matrix, N, Result_5) ->
    case (I < erlang:length(Matrix)) of
        true ->
            Row_5 = [],
            J = 0,
            Fun_6 = fun Fun_6_loop(I, J, Matrix, N, Result_5, Row_5) ->
    case (J < erlang:length((case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end))) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)) of true -> maps:get(J, (case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)) + J + 1, (case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Matrix) of true -> maps:get(I, Matrix, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix) + I + 1, Matrix); _ -> mochi_nth(I + 1, Matrix) end end)) end end), N)]),
            J_2 = (J + 1),
            Fun_6_loop(I, J_2, Matrix, N, Result_5, Row_6);
        _ -> {I, J, Matrix, N, Result_5, Row_5}
    end
end,
{I, J_2, Matrix, N, Result_5, Row_6} = Fun_6(I, J, Matrix, N, Result_5, Row_5),
            Result_6 = lists:append((case Result_5 of nil -> []; _ -> Result_5 end), [Row_6]),
            I_2 = (I + 1),
            Fun_7_loop(I_2, Matrix, N, Result_6);
        _ -> {I, Matrix, N, Result_5}
    end
end,
{I_2, Matrix, N, Result_6} = Fun_7(I, Matrix, N, Result_5),
        Result_6
    catch {return, RetCatch} -> RetCatch end.

multiply(A_2, B_2) ->
    try
        RowsA = erlang:length(A_2),
        ColsA = erlang:length((case erlang:is_map(A_2) of true -> maps:get(0, A_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_2) + 0 + 1, A_2); _ -> mochi_nth(0 + 1, A_2) end end)),
        RowsB = erlang:length(B_2),
        ColsB = erlang:length((case erlang:is_map(B_2) of true -> maps:get(0, B_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B_2) + 0 + 1, B_2); _ -> mochi_nth(0 + 1, B_2) end end)),
        Result_7 = [],
        I_3 = 0,
        Fun_10 = fun Fun_10_loop(A_2, B_2, ColsA, ColsB, I_3, Result_7, RowsA, RowsB) ->
    case (I_3 < RowsA) of
        true ->
            Row_7 = [],
            J_3 = 0,
            Fun_9 = fun Fun_9_loop(A_2, B_2, ColsA, ColsB, I_3, J_3, Result_7, Row_7, RowsA, RowsB) ->
    case (J_3 < ColsB) of
        true ->
            Sum_3 = 0.0,
            K = 0,
            Fun_8 = fun Fun_8_loop(A_2, B_2, ColsA, ColsB, I_3, J_3, K, Result_7, Row_7, RowsA, RowsB, Sum_3) ->
    case (K < ColsA) of
        true ->
            Sum_4 = (Sum_3 + mochi_safe_mul((case erlang:is_map((case erlang:is_map(A_2) of true -> maps:get(I_3, A_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A_2) + I_3 + 1, A_2); _ -> mochi_nth(I_3 + 1, A_2) end end)) of true -> maps:get(K, (case erlang:is_map(A_2) of true -> maps:get(I_3, A_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A_2) + I_3 + 1, A_2); _ -> mochi_nth(I_3 + 1, A_2) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_2) of true -> maps:get(I_3, A_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A_2) + I_3 + 1, A_2); _ -> mochi_nth(I_3 + 1, A_2) end end)) + K + 1, (case erlang:is_map(A_2) of true -> maps:get(I_3, A_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A_2) + I_3 + 1, A_2); _ -> mochi_nth(I_3 + 1, A_2) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(A_2) of true -> maps:get(I_3, A_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A_2) + I_3 + 1, A_2); _ -> mochi_nth(I_3 + 1, A_2) end end)) end end), (case erlang:is_map((case erlang:is_map(B_2) of true -> maps:get(K, B_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_2) + K + 1, B_2); _ -> mochi_nth(K + 1, B_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(B_2) of true -> maps:get(K, B_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_2) + K + 1, B_2); _ -> mochi_nth(K + 1, B_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B_2) of true -> maps:get(K, B_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_2) + K + 1, B_2); _ -> mochi_nth(K + 1, B_2) end end)) + J_3 + 1, (case erlang:is_map(B_2) of true -> maps:get(K, B_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_2) + K + 1, B_2); _ -> mochi_nth(K + 1, B_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(B_2) of true -> maps:get(K, B_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_2) + K + 1, B_2); _ -> mochi_nth(K + 1, B_2) end end)) end end))),
            K_2 = (K + 1),
            Fun_8_loop(A_2, B_2, ColsA, ColsB, I_3, J_3, K_2, Result_7, Row_7, RowsA, RowsB, Sum_4);
        _ -> {A_2, B_2, ColsA, ColsB, I_3, J_3, K, Result_7, Row_7, RowsA, RowsB, Sum_3}
    end
end,
{A_2, B_2, ColsA, ColsB, I_3, J_3, K_2, Result_7, Row_7, RowsA, RowsB, Sum_4} = Fun_8(A_2, B_2, ColsA, ColsB, I_3, J_3, K, Result_7, Row_7, RowsA, RowsB, Sum_3),
            Row_8 = lists:append((case Row_7 of nil -> []; _ -> Row_7 end), [Sum_4]),
            J_4 = (J_3 + 1),
            Fun_9_loop(A_2, B_2, ColsA, ColsB, I_3, J_4, Result_7, Row_8, RowsA, RowsB);
        _ -> {A_2, B_2, ColsA, ColsB, I_3, J_3, Result_7, Row_7, RowsA, RowsB}
    end
end,
{A_2, B_2, ColsA, ColsB, I_3, J_4, Result_7, Row_8, RowsA, RowsB} = Fun_9(A_2, B_2, ColsA, ColsB, I_3, J_3, Result_7, Row_7, RowsA, RowsB),
            Result_8 = lists:append((case Result_7 of nil -> []; _ -> Result_7 end), [Row_8]),
            I_4 = (I_3 + 1),
            Fun_10_loop(A_2, B_2, ColsA, ColsB, I_4, Result_8, RowsA, RowsB);
        _ -> {A_2, B_2, ColsA, ColsB, I_3, Result_7, RowsA, RowsB}
    end
end,
{A_2, B_2, ColsA, ColsB, I_4, Result_8, RowsA, RowsB} = Fun_10(A_2, B_2, ColsA, ColsB, I_3, Result_7, RowsA, RowsB),
        Result_8
    catch {return, RetCatch} -> RetCatch end.

identity(N_2) ->
    try
        Result_9 = [],
        I_5 = 0,
        Fun_12 = fun Fun_12_loop(I_5, N_2, Result_9) ->
    case (I_5 < N_2) of
        true ->
            Row_9 = [],
            J_5 = 0,
            Fun_11 = fun Fun_11_loop(I_5, J_5, N_2, Result_9, Row_9) ->
    case (J_5 < N_2) of
        true ->
            case (I_5 == J_5) of
        true -> Row_10 = lists:append((case Row_9 of nil -> []; _ -> Row_9 end), [1.0]),
            Row_12 = Row_10;
        _ -> Row_11 = lists:append((case Row_9 of nil -> []; _ -> Row_9 end), [0.0]),
            Row_12 = Row_11
    end,
            J_6 = (J_5 + 1),
            Fun_11_loop(I_5, J_6, N_2, Result_9, Row_12);
        _ -> {I_5, J_5, N_2, Result_9, Row_9}
    end
end,
{I_5, J_6, N_2, Result_9, Row_12} = Fun_11(I_5, J_5, N_2, Result_9, Row_9),
            Result_10 = lists:append((case Result_9 of nil -> []; _ -> Result_9 end), [Row_12]),
            I_6 = (I_5 + 1),
            Fun_12_loop(I_6, N_2, Result_10);
        _ -> {I_5, N_2, Result_9}
    end
end,
{I_6, N_2, Result_10} = Fun_12(I_5, N_2, Result_9),
        Result_10
    catch {return, RetCatch} -> RetCatch end.

transpose(Matrix_2) ->
    try
        Rows_3 = erlang:length(Matrix_2),
        Cols_3 = erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get(0, Matrix_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + 0 + 1, Matrix_2); _ -> mochi_nth(0 + 1, Matrix_2) end end)),
        Result_11 = [],
        C_5 = 0,
        Fun_14 = fun Fun_14_loop(C_5, Cols_3, Matrix_2, Result_11, Rows_3) ->
    case (C_5 < Cols_3) of
        true ->
            Row_13 = [],
            R_5 = 0,
            Fun_13 = fun Fun_13_loop(C_5, Cols_3, Matrix_2, R_5, Result_11, Row_13, Rows_3) ->
    case (R_5 < Rows_3) of
        true ->
            Row_14 = lists:append((case Row_13 of nil -> []; _ -> Row_13 end), [(case erlang:is_map((case erlang:is_map(Matrix_2) of true -> maps:get(R_5, Matrix_2, nil); _ -> case R_5 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + R_5 + 1, Matrix_2); _ -> mochi_nth(R_5 + 1, Matrix_2) end end)) of true -> maps:get(C_5, (case erlang:is_map(Matrix_2) of true -> maps:get(R_5, Matrix_2, nil); _ -> case R_5 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + R_5 + 1, Matrix_2); _ -> mochi_nth(R_5 + 1, Matrix_2) end end), nil); _ -> case C_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_2) of true -> maps:get(R_5, Matrix_2, nil); _ -> case R_5 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + R_5 + 1, Matrix_2); _ -> mochi_nth(R_5 + 1, Matrix_2) end end)) + C_5 + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(R_5, Matrix_2, nil); _ -> case R_5 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + R_5 + 1, Matrix_2); _ -> mochi_nth(R_5 + 1, Matrix_2) end end)); _ -> mochi_nth(C_5 + 1, (case erlang:is_map(Matrix_2) of true -> maps:get(R_5, Matrix_2, nil); _ -> case R_5 < 0 of true -> mochi_nth(erlang:length(Matrix_2) + R_5 + 1, Matrix_2); _ -> mochi_nth(R_5 + 1, Matrix_2) end end)) end end)]),
            R_6 = (R_5 + 1),
            Fun_13_loop(C_5, Cols_3, Matrix_2, R_6, Result_11, Row_14, Rows_3);
        _ -> {C_5, Cols_3, Matrix_2, R_5, Result_11, Row_13, Rows_3}
    end
end,
{C_5, Cols_3, Matrix_2, R_6, Result_11, Row_14, Rows_3} = Fun_13(C_5, Cols_3, Matrix_2, R_5, Result_11, Row_13, Rows_3),
            Result_12 = lists:append((case Result_11 of nil -> []; _ -> Result_11 end), [Row_14]),
            C_6 = (C_5 + 1),
            Fun_14_loop(C_6, Cols_3, Matrix_2, Result_12, Rows_3);
        _ -> {C_5, Cols_3, Matrix_2, Result_11, Rows_3}
    end
end,
{C_6, Cols_3, Matrix_2, Result_12, Rows_3} = Fun_14(C_5, Cols_3, Matrix_2, Result_11, Rows_3),
        Result_12
    catch {return, RetCatch} -> RetCatch end.

minor(Matrix_3, Row_15, Column) ->
    try
        Result_13 = [],
        I_7 = 0,
        Fun_17 = fun Fun_17_loop(Column, I_7, Matrix_3, Result_13, Row_15) ->
    case (I_7 < erlang:length(Matrix_3)) of
        true ->
            case (I_7 /= Row_15) of
        true -> New_row = [],
            J_7 = 0,
            Fun_15 = fun Fun_15_loop(Column, I_7, J_7, Matrix_3, New_row, Result_13, Row_15) ->
    case (J_7 < erlang:length((case erlang:is_map(Matrix_3) of true -> maps:get(I_7, Matrix_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Matrix_3) + I_7 + 1, Matrix_3); _ -> mochi_nth(I_7 + 1, Matrix_3) end end))) of
        true ->
            case (J_7 /= Column) of
        true -> New_row_2 = lists:append((case New_row of nil -> []; _ -> New_row end), [(case erlang:is_map((case erlang:is_map(Matrix_3) of true -> maps:get(I_7, Matrix_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Matrix_3) + I_7 + 1, Matrix_3); _ -> mochi_nth(I_7 + 1, Matrix_3) end end)) of true -> maps:get(J_7, (case erlang:is_map(Matrix_3) of true -> maps:get(I_7, Matrix_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Matrix_3) + I_7 + 1, Matrix_3); _ -> mochi_nth(I_7 + 1, Matrix_3) end end), nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_3) of true -> maps:get(I_7, Matrix_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Matrix_3) + I_7 + 1, Matrix_3); _ -> mochi_nth(I_7 + 1, Matrix_3) end end)) + J_7 + 1, (case erlang:is_map(Matrix_3) of true -> maps:get(I_7, Matrix_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Matrix_3) + I_7 + 1, Matrix_3); _ -> mochi_nth(I_7 + 1, Matrix_3) end end)); _ -> mochi_nth(J_7 + 1, (case erlang:is_map(Matrix_3) of true -> maps:get(I_7, Matrix_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Matrix_3) + I_7 + 1, Matrix_3); _ -> mochi_nth(I_7 + 1, Matrix_3) end end)) end end)]),
            New_row_3 = New_row_2;
        _ -> New_row_3 = New_row
    end,
            J_8 = (J_7 + 1),
            Fun_15_loop(Column, I_7, J_8, Matrix_3, New_row_3, Result_13, Row_15);
        _ -> {Column, I_7, J_7, Matrix_3, New_row, Result_13, Row_15}
    end
end,
{Column, I_7, J_8, Matrix_3, New_row_3, Result_13, Row_15} = Fun_15(Column, I_7, J_7, Matrix_3, New_row, Result_13, Row_15),
            Result_14 = lists:append((case Result_13 of nil -> []; _ -> Result_13 end), [New_row_3]),
            Fun_16 = Fun_15,
            J_9 = J_8,
            New_row_4 = New_row_3,
            Result_15 = Result_14;
        _ -> Fun_16 = nil,
            J_9 = nil,
            New_row_4 = nil,
            Result_15 = Result_13
    end,
            I_8 = (I_7 + 1),
            Fun_17_loop(Column, I_8, Matrix_3, Result_15, Row_15);
        _ -> {Column, I_7, Matrix_3, Result_13, Row_15}
    end
end,
{Column, I_8, Matrix_3, Result_15, Row_15} = Fun_17(Column, I_7, Matrix_3, Result_13, Row_15),
        Result_15
    catch {return, RetCatch} -> RetCatch end.

determinant(Matrix_4) ->
    try
        case (erlang:length(Matrix_4) == 1) of
        true -> throw({return, (case erlang:is_map((case erlang:is_map(Matrix_4) of true -> maps:get(0, Matrix_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + 0 + 1, Matrix_4); _ -> mochi_nth(0 + 1, Matrix_4) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix_4) of true -> maps:get(0, Matrix_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + 0 + 1, Matrix_4); _ -> mochi_nth(0 + 1, Matrix_4) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_4) of true -> maps:get(0, Matrix_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + 0 + 1, Matrix_4); _ -> mochi_nth(0 + 1, Matrix_4) end end)) + 0 + 1, (case erlang:is_map(Matrix_4) of true -> maps:get(0, Matrix_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + 0 + 1, Matrix_4); _ -> mochi_nth(0 + 1, Matrix_4) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix_4) of true -> maps:get(0, Matrix_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + 0 + 1, Matrix_4); _ -> mochi_nth(0 + 1, Matrix_4) end end)) end end)});
        _ -> ok
    end,
        Det = 0.0,
        C_7 = 0,
        Fun_18 = fun Fun_18_loop(C_7, Det, Matrix_4) ->
    case (C_7 < erlang:length((case erlang:is_map(Matrix_4) of true -> maps:get(0, Matrix_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + 0 + 1, Matrix_4); _ -> mochi_nth(0 + 1, Matrix_4) end end))) of
        true ->
            Sub = minor(Matrix_4, 0, C_7),
            Sign = (case (mochi_mod(C_7, 2) == 0) of
    true -> 1.0;
    _ -> -1.0
end),
            Det_2 = (Det + mochi_safe_mul(mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix_4) of true -> maps:get(0, Matrix_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + 0 + 1, Matrix_4); _ -> mochi_nth(0 + 1, Matrix_4) end end)) of true -> maps:get(C_7, (case erlang:is_map(Matrix_4) of true -> maps:get(0, Matrix_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + 0 + 1, Matrix_4); _ -> mochi_nth(0 + 1, Matrix_4) end end), nil); _ -> case C_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_4) of true -> maps:get(0, Matrix_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + 0 + 1, Matrix_4); _ -> mochi_nth(0 + 1, Matrix_4) end end)) + C_7 + 1, (case erlang:is_map(Matrix_4) of true -> maps:get(0, Matrix_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + 0 + 1, Matrix_4); _ -> mochi_nth(0 + 1, Matrix_4) end end)); _ -> mochi_nth(C_7 + 1, (case erlang:is_map(Matrix_4) of true -> maps:get(0, Matrix_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Matrix_4) + 0 + 1, Matrix_4); _ -> mochi_nth(0 + 1, Matrix_4) end end)) end end), determinant(Sub)), Sign)),
            C_8 = (C_7 + 1),
            Fun_18_loop(C_8, Det_2, Matrix_4);
        _ -> {C_7, Det, Matrix_4}
    end
end,
{C_8, Det_2, Matrix_4} = Fun_18(C_7, Det, Matrix_4),
        Det_2
    catch {return, RetCatch} -> RetCatch end.

inverse(Matrix_5) ->
    try
        Det_3 = determinant(Matrix_5),
        case (Det_3 == 0.0) of
        true -> throw({return, []});
        _ -> ok
    end,
        Size = erlang:length(Matrix_5),
        Matrix_minor = [],
        I_9 = 0,
        Fun_20 = fun Fun_20_loop(Det_3, I_9, Matrix_5, Matrix_minor, Size) ->
    case (I_9 < Size) of
        true ->
            Row_16 = [],
            J_10 = 0,
            Fun_19 = fun Fun_19_loop(Det_3, I_9, J_10, Matrix_5, Matrix_minor, Row_16, Size) ->
    case (J_10 < Size) of
        true ->
            M_3 = minor(Matrix_5, I_9, J_10),
            Row_17 = lists:append((case Row_16 of nil -> []; _ -> Row_16 end), [determinant(M_3)]),
            J_11 = (J_10 + 1),
            Fun_19_loop(Det_3, I_9, J_11, Matrix_5, Matrix_minor, Row_17, Size);
        _ -> {Det_3, I_9, J_10, Matrix_5, Matrix_minor, Row_16, Size}
    end
end,
{Det_3, I_9, J_11, Matrix_5, Matrix_minor, Row_17, Size} = Fun_19(Det_3, I_9, J_10, Matrix_5, Matrix_minor, Row_16, Size),
            Matrix_minor_2 = lists:append((case Matrix_minor of nil -> []; _ -> Matrix_minor end), [Row_17]),
            I_10 = (I_9 + 1),
            Fun_20_loop(Det_3, I_10, Matrix_5, Matrix_minor_2, Size);
        _ -> {Det_3, I_9, Matrix_5, Matrix_minor, Size}
    end
end,
{Det_3, I_10, Matrix_5, Matrix_minor_2, Size} = Fun_20(Det_3, I_9, Matrix_5, Matrix_minor, Size),
        Cofactors = [],
        I_11 = 0,
        Fun_22 = fun Fun_22_loop(Cofactors, Det_3, I_11, Matrix_5, Matrix_minor_2, Size) ->
    case (I_11 < Size) of
        true ->
            Row_18 = [],
            J_12 = 0,
            Fun_21 = fun Fun_21_loop(Cofactors, Det_3, I_11, J_12, Matrix_5, Matrix_minor_2, Row_18, Size) ->
    case (J_12 < Size) of
        true ->
            Sign_2 = (case (mochi_mod((I_11 + J_12), 2) == 0) of
    true -> 1.0;
    _ -> -1.0
end),
            Row_19 = lists:append((case Row_18 of nil -> []; _ -> Row_18 end), [mochi_safe_mul((case erlang:is_map((case erlang:is_map(Matrix_minor_2) of true -> maps:get(I_11, Matrix_minor_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Matrix_minor_2) + I_11 + 1, Matrix_minor_2); _ -> mochi_nth(I_11 + 1, Matrix_minor_2) end end)) of true -> maps:get(J_12, (case erlang:is_map(Matrix_minor_2) of true -> maps:get(I_11, Matrix_minor_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Matrix_minor_2) + I_11 + 1, Matrix_minor_2); _ -> mochi_nth(I_11 + 1, Matrix_minor_2) end end), nil); _ -> case J_12 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_minor_2) of true -> maps:get(I_11, Matrix_minor_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Matrix_minor_2) + I_11 + 1, Matrix_minor_2); _ -> mochi_nth(I_11 + 1, Matrix_minor_2) end end)) + J_12 + 1, (case erlang:is_map(Matrix_minor_2) of true -> maps:get(I_11, Matrix_minor_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Matrix_minor_2) + I_11 + 1, Matrix_minor_2); _ -> mochi_nth(I_11 + 1, Matrix_minor_2) end end)); _ -> mochi_nth(J_12 + 1, (case erlang:is_map(Matrix_minor_2) of true -> maps:get(I_11, Matrix_minor_2, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Matrix_minor_2) + I_11 + 1, Matrix_minor_2); _ -> mochi_nth(I_11 + 1, Matrix_minor_2) end end)) end end), Sign_2)]),
            J_13 = (J_12 + 1),
            Fun_21_loop(Cofactors, Det_3, I_11, J_13, Matrix_5, Matrix_minor_2, Row_19, Size);
        _ -> {Cofactors, Det_3, I_11, J_12, Matrix_5, Matrix_minor_2, Row_18, Size}
    end
end,
{Cofactors, Det_3, I_11, J_13, Matrix_5, Matrix_minor_2, Row_19, Size} = Fun_21(Cofactors, Det_3, I_11, J_12, Matrix_5, Matrix_minor_2, Row_18, Size),
            Cofactors_2 = lists:append((case Cofactors of nil -> []; _ -> Cofactors end), [Row_19]),
            I_12 = (I_11 + 1),
            Fun_22_loop(Cofactors_2, Det_3, I_12, Matrix_5, Matrix_minor_2, Size);
        _ -> {Cofactors, Det_3, I_11, Matrix_5, Matrix_minor_2, Size}
    end
end,
{Cofactors_2, Det_3, I_12, Matrix_5, Matrix_minor_2, Size} = Fun_22(Cofactors, Det_3, I_11, Matrix_5, Matrix_minor_2, Size),
        Adjugate = transpose(Cofactors_2),
        scalar_multiply(Adjugate, mochi_safe_div(1.0, Det_3))
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Matrix_a = [[12.0, 10.0], [3.0, 9.0]],
        Matrix_b = [[3.0, 4.0], [7.0, 4.0]],
        Matrix_c = [[11.0, 12.0, 13.0, 14.0], [21.0, 22.0, 23.0, 24.0], [31.0, 32.0, 33.0, 34.0], [41.0, 42.0, 43.0, 44.0]],
        Matrix_d = [[3.0, 0.0, 2.0], [2.0, 0.0, -2.0], [0.0, 1.0, 1.0]],
        io:format("~ts~n", [mochi_repr((("Add Operation, add(matrix_a, matrix_b) = " ++ mochi_str(add([Matrix_a, Matrix_b]))) ++ " \n"))]),
        io:format("~ts~n", [mochi_repr((("Multiply Operation, multiply(matrix_a, matrix_b) = " ++ mochi_str(multiply(Matrix_a, Matrix_b))) ++ " \n"))]),
        io:format("~ts~n", [mochi_repr((("Identity: " ++ mochi_str(identity(5))) ++ "\n"))]),
        io:format("~ts~n", [mochi_repr((((("Minor of " ++ mochi_str(Matrix_c)) ++ " = ") ++ mochi_str(minor(Matrix_c, 1, 2))) ++ " \n"))]),
        io:format("~ts~n", [mochi_repr((((("Determinant of " ++ mochi_str(Matrix_b)) ++ " = ") ++ mochi_str(determinant(Matrix_b))) ++ " \n"))]),
        io:format("~ts~n", [mochi_repr((((("Inverse of " ++ mochi_str(Matrix_d)) ++ " = ") ++ mochi_str(inverse(Matrix_d))) ++ "\n"))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
