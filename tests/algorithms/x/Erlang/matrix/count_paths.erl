#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, depth_first_search/4, count_paths/1, main/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

depth_first_search(Grid, Row, Col, Visit) ->
    try
        Row_length = erlang:length(Grid),
        Col_length = erlang:length((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)),
        case ((((Row < 0) orelse (Col < 0)) orelse (Row == Row_length)) orelse (Col == Col_length)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case (case erlang:is_map((case erlang:is_map(Visit) of true -> maps:get(Row, Visit, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Visit) + Row + 1, Visit); _ -> mochi_nth(Row + 1, Visit) end end)) of true -> maps:get(Col, (case erlang:is_map(Visit) of true -> maps:get(Row, Visit, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Visit) + Row + 1, Visit); _ -> mochi_nth(Row + 1, Visit) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Visit) of true -> maps:get(Row, Visit, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Visit) + Row + 1, Visit); _ -> mochi_nth(Row + 1, Visit) end end)) + Col + 1, (case erlang:is_map(Visit) of true -> maps:get(Row, Visit, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Visit) + Row + 1, Visit); _ -> mochi_nth(Row + 1, Visit) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(Visit) of true -> maps:get(Row, Visit, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Visit) + Row + 1, Visit); _ -> mochi_nth(Row + 1, Visit) end end)) end end) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case ((case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(Row, Grid, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Grid) + Row + 1, Grid); _ -> mochi_nth(Row + 1, Grid) end end)) of true -> maps:get(Col, (case erlang:is_map(Grid) of true -> maps:get(Row, Grid, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Grid) + Row + 1, Grid); _ -> mochi_nth(Row + 1, Grid) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get(Row, Grid, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Grid) + Row + 1, Grid); _ -> mochi_nth(Row + 1, Grid) end end)) + Col + 1, (case erlang:is_map(Grid) of true -> maps:get(Row, Grid, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Grid) + Row + 1, Grid); _ -> mochi_nth(Row + 1, Grid) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(Grid) of true -> maps:get(Row, Grid, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Grid) + Row + 1, Grid); _ -> mochi_nth(Row + 1, Grid) end end)) end end) == 1) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case ((Row == (Row_length - 1)) andalso (Col == (Col_length - 1))) of
        true -> throw({return, 1});
        _ -> ok
    end,
        Visit_2 = lists:sublist(Visit, Row) ++ [lists:sublist(lists:nth(Row + 1, Visit), Col) ++ [true] ++ lists:nthtail(Col + 1, lists:nth(Row + 1, Visit))] ++ lists:nthtail(Row + 1, Visit),
        Count = 0,
        Count_2 = (Count + depth_first_search(Grid, (Row + 1), Col, Visit_2)),
        Count_3 = (Count_2 + depth_first_search(Grid, (Row - 1), Col, Visit_2)),
        Count_4 = (Count_3 + depth_first_search(Grid, Row, (Col + 1), Visit_2)),
        Count_5 = (Count_4 + depth_first_search(Grid, Row, (Col - 1), Visit_2)),
        Visit_3 = lists:sublist(Visit_2, Row) ++ [lists:sublist(lists:nth(Row + 1, Visit_2), Col) ++ [false] ++ lists:nthtail(Col + 1, lists:nth(Row + 1, Visit_2))] ++ lists:nthtail(Row + 1, Visit_2),
        Count_5
    catch {return, Ret} -> Ret end.

count_paths(Grid_2) ->
    try
        Rows = erlang:length(Grid_2),
        Cols = erlang:length((case erlang:is_map(Grid_2) of true -> maps:get(0, Grid_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid_2) + 0 + 1, Grid_2); _ -> mochi_nth(0 + 1, Grid_2) end end)),
        Visit_4 = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(Cols, Grid_2, I, Rows, Visit_4) ->
    case (I < Rows) of
        true ->
            Row_visit = [],
            J = 0,
            Fun = fun Fun_loop(Cols, Grid_2, I, J, Row_visit, Rows, Visit_4) ->
    case (J < Cols) of
        true ->
            Row_visit_2 = lists:append((case Row_visit of nil -> []; _ -> Row_visit end), [false]),
            J_2 = (J + 1),
            Fun_loop(Cols, Grid_2, I, J_2, Row_visit_2, Rows, Visit_4);
        _ -> {Cols, Grid_2, I, J, Row_visit, Rows, Visit_4}
    end
end,
{Cols, Grid_2, I, J_2, Row_visit_2, Rows, Visit_4} = Fun(Cols, Grid_2, I, J, Row_visit, Rows, Visit_4),
            Visit_5 = lists:append((case Visit_4 of nil -> []; _ -> Visit_4 end), [Row_visit_2]),
            I_2 = (I + 1),
            Fun_2_loop(Cols, Grid_2, I_2, Rows, Visit_5);
        _ -> {Cols, Grid_2, I, Rows, Visit_4}
    end
end,
{Cols, Grid_2, I_2, Rows, Visit_5} = Fun_2(Cols, Grid_2, I, Rows, Visit_4),
        depth_first_search(Grid_2, 0, 0, Visit_5)
    catch {return, Ret} -> Ret end.

main() ->
    try
        Grid1 = [[0, 0, 0, 0], [1, 1, 0, 0], [0, 0, 0, 1], [0, 1, 0, 0]],
        io:format("~ts~n", [mochi_str(count_paths(Grid1))]),
        Grid2 = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]],
        io:format("~ts~n", [mochi_str(count_paths(Grid2))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
