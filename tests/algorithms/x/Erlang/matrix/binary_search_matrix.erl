#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, binary_search/4, mat_bin_search/2, main/0]).

% Generated by Mochi transpiler v0.10.66 (48422bb2d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

binary_search(Arr, Lower_bound, Upper_bound, Value) ->
    try
        R = ((Lower_bound + Upper_bound) div 2),
        case ((case erlang:is_map(Arr) of true -> maps:get(R, Arr, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Arr) + R + 1, Arr); _ -> mochi_nth(R + 1, Arr) end end) == Value) of
        true -> throw({return, R});
        _ -> ok
    end,
        case (Lower_bound >= Upper_bound) of
        true -> throw({return, -1});
        _ -> ok
    end,
        case ((case erlang:is_map(Arr) of true -> maps:get(R, Arr, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Arr) + R + 1, Arr); _ -> mochi_nth(R + 1, Arr) end end) < Value) of
        true -> throw({return, binary_search(Arr, (R + 1), Upper_bound, Value)});
        _ -> ok
    end,
        binary_search(Arr, Lower_bound, (R - 1), Value)
    catch {return, RetCatch} -> RetCatch end.

mat_bin_search(Value_2, Matrix) ->
    try
        Index = 0,
        case ((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(Index, Matrix, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Matrix) + Index + 1, Matrix); _ -> mochi_nth(Index + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(Index, Matrix, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Matrix) + Index + 1, Matrix); _ -> mochi_nth(Index + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(Index, Matrix, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Matrix) + Index + 1, Matrix); _ -> mochi_nth(Index + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(Index, Matrix, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Matrix) + Index + 1, Matrix); _ -> mochi_nth(Index + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(Index, Matrix, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Matrix) + Index + 1, Matrix); _ -> mochi_nth(Index + 1, Matrix) end end)) end end) == Value_2) of
        true -> throw({return, [Index, 0]});
        _ -> ok
    end,
        Fun = fun Fun_loop(Index, Matrix, Value_2) ->
    case ((Index < erlang:length(Matrix)) andalso ((case erlang:is_map((case erlang:is_map(Matrix) of true -> maps:get(Index, Matrix, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Matrix) + Index + 1, Matrix); _ -> mochi_nth(Index + 1, Matrix) end end)) of true -> maps:get(0, (case erlang:is_map(Matrix) of true -> maps:get(Index, Matrix, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Matrix) + Index + 1, Matrix); _ -> mochi_nth(Index + 1, Matrix) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix) of true -> maps:get(Index, Matrix, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Matrix) + Index + 1, Matrix); _ -> mochi_nth(Index + 1, Matrix) end end)) + 0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(Index, Matrix, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Matrix) + Index + 1, Matrix); _ -> mochi_nth(Index + 1, Matrix) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Matrix) of true -> maps:get(Index, Matrix, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Matrix) + Index + 1, Matrix); _ -> mochi_nth(Index + 1, Matrix) end end)) end end) < Value_2)) of
        true ->
            R_2 = binary_search((case erlang:is_map(Matrix) of true -> maps:get(Index, Matrix, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Matrix) + Index + 1, Matrix); _ -> mochi_nth(Index + 1, Matrix) end end), 0, (erlang:length((case erlang:is_map(Matrix) of true -> maps:get(Index, Matrix, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Matrix) + Index + 1, Matrix); _ -> mochi_nth(Index + 1, Matrix) end end)) - 1), Value_2),
            case (R_2 /= -1) of
        true -> throw({return, [Index, R_2]});
        _ -> ok
    end,
            Index_2 = (Index + 1),
            Fun_loop(Index_2, Matrix, Value_2);
        _ -> {Index, Matrix, Value_2}
    end
end,
{Index_2, Matrix, Value_2} = Fun(Index, Matrix, Value_2),
        [-1, -1]
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Row = [1, 4, 7, 11, 15],
        io:format("~ts~n", [mochi_str(binary_search(Row, 0, (erlang:length(Row) - 1), 1))]),
        io:format("~ts~n", [mochi_str(binary_search(Row, 0, (erlang:length(Row) - 1), 23))]),
        Matrix_2 = [[1, 4, 7, 11, 15], [2, 5, 8, 12, 19], [3, 6, 9, 16, 22], [10, 13, 14, 17, 24], [18, 21, 23, 26, 30]],
        io:format("~ts~n", [mochi_str(mat_bin_search(1, Matrix_2))]),
        io:format("~ts~n", [mochi_str(mat_bin_search(34, Matrix_2))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
