#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, search_in_sorted_matrix/4, main/0]).

% Generated by Mochi transpiler v0.10.61 (c45765bf43) on 2025-08-08 15:36 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

search_in_sorted_matrix(Mat, M, N, Key) ->
    try
        I = (M - 1),
        J = 0,
        Fun = fun Fun_loop(I, J, Key, M, Mat, N) ->
    case ((I >= 0) andalso (J < N)) of
        true ->
            case (Key == (case erlang:is_map((case erlang:is_map(Mat) of true -> maps:get(I, Mat, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Mat) + I + 1, Mat); _ -> mochi_nth(I + 1, Mat) end end)) of true -> maps:get(J, (case erlang:is_map(Mat) of true -> maps:get(I, Mat, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Mat) + I + 1, Mat); _ -> mochi_nth(I + 1, Mat) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat) of true -> maps:get(I, Mat, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Mat) + I + 1, Mat); _ -> mochi_nth(I + 1, Mat) end end)) + J + 1, (case erlang:is_map(Mat) of true -> maps:get(I, Mat, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Mat) + I + 1, Mat); _ -> mochi_nth(I + 1, Mat) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Mat) of true -> maps:get(I, Mat, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Mat) + I + 1, Mat); _ -> mochi_nth(I + 1, Mat) end end)) end end)) of
        true -> io:format("~ts~n", [mochi_repr(((((("Key " ++ mochi_str(Key)) ++ " found at row- ") ++ mochi_str((I + 1))) ++ " column- ") ++ mochi_str((J + 1))))]),
            throw({return, nil});
        _ -> ok
    end,
            case (Key < (case erlang:is_map((case erlang:is_map(Mat) of true -> maps:get(I, Mat, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Mat) + I + 1, Mat); _ -> mochi_nth(I + 1, Mat) end end)) of true -> maps:get(J, (case erlang:is_map(Mat) of true -> maps:get(I, Mat, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Mat) + I + 1, Mat); _ -> mochi_nth(I + 1, Mat) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat) of true -> maps:get(I, Mat, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Mat) + I + 1, Mat); _ -> mochi_nth(I + 1, Mat) end end)) + J + 1, (case erlang:is_map(Mat) of true -> maps:get(I, Mat, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Mat) + I + 1, Mat); _ -> mochi_nth(I + 1, Mat) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Mat) of true -> maps:get(I, Mat, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Mat) + I + 1, Mat); _ -> mochi_nth(I + 1, Mat) end end)) end end)) of
        true -> I_2 = (I - 1),
            I_3 = I_2,
            J_3 = J;
        _ -> J_2 = (J + 1),
            I_3 = I,
            J_3 = J_2
    end,
            Fun_loop(I_3, J_3, Key, M, Mat, N);
        _ -> {I, J, Key, M, Mat, N}
    end
end,
{I_3, J_3, Key, M, Mat, N} = Fun(I, J, Key, M, Mat, N),
        io:format("~ts~n", [mochi_repr((("Key " ++ mochi_str(Key)) ++ " not found"))]),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Mat_2 = [[2.0, 5.0, 7.0], [4.0, 8.0, 13.0], [9.0, 11.0, 15.0], [12.0, 17.0, 20.0]],
        search_in_sorted_matrix(Mat_2, erlang:length(Mat_2), erlang:length((case erlang:is_map(Mat_2) of true -> maps:get(0, Mat_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Mat_2) + 0 + 1, Mat_2); _ -> mochi_nth(0 + 1, Mat_2) end end)), 5.0),
        search_in_sorted_matrix(Mat_2, erlang:length(Mat_2), erlang:length((case erlang:is_map(Mat_2) of true -> maps:get(0, Mat_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Mat_2) + 0 + 1, Mat_2); _ -> mochi_nth(0 + 1, Mat_2) end end)), 21.0),
        Mat2 = [[2.1, 5.0, 7.0], [4.0, 8.0, 13.0], [9.0, 11.0, 15.0], [12.0, 17.0, 20.0]],
        search_in_sorted_matrix(Mat2, erlang:length(Mat2), erlang:length((case erlang:is_map(Mat2) of true -> maps:get(0, Mat2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Mat2) + 0 + 1, Mat2); _ -> mochi_nth(0 + 1, Mat2) end end)), 2.1),
        search_in_sorted_matrix(Mat2, erlang:length(Mat2), erlang:length((case erlang:is_map(Mat2) of true -> maps:get(0, Mat2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Mat2) + 0 + 1, Mat2); _ -> mochi_nth(0 + 1, Mat2) end end)), 2.2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
