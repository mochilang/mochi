#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, is_safe/4, dfs/4, count_islands/1]).

% Generated by Mochi transpiler v0.10.66 (48422bb2d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

is_safe(Grid, Visited, Row, Col) ->
    try
        Rows = erlang:length(Grid),
        Cols = erlang:length((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)),
        Within_bounds = ((((Row >= 0) andalso (Row < Rows)) andalso (Col >= 0)) andalso (Col < Cols)),
        case mochi_not(Within_bounds) of
        true -> throw({return, false});
        _ -> ok
    end,
        Visited_cell = (case erlang:is_map((case erlang:is_map(Visited) of true -> maps:get(Row, Visited, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Visited) + Row + 1, Visited); _ -> mochi_nth(Row + 1, Visited) end end)) of true -> maps:get(Col, (case erlang:is_map(Visited) of true -> maps:get(Row, Visited, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Visited) + Row + 1, Visited); _ -> mochi_nth(Row + 1, Visited) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Visited) of true -> maps:get(Row, Visited, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Visited) + Row + 1, Visited); _ -> mochi_nth(Row + 1, Visited) end end)) + Col + 1, (case erlang:is_map(Visited) of true -> maps:get(Row, Visited, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Visited) + Row + 1, Visited); _ -> mochi_nth(Row + 1, Visited) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(Visited) of true -> maps:get(Row, Visited, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Visited) + Row + 1, Visited); _ -> mochi_nth(Row + 1, Visited) end end)) end end),
        Not_visited = (Visited_cell == false),
        (Not_visited andalso ((case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(Row, Grid, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Grid) + Row + 1, Grid); _ -> mochi_nth(Row + 1, Grid) end end)) of true -> maps:get(Col, (case erlang:is_map(Grid) of true -> maps:get(Row, Grid, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Grid) + Row + 1, Grid); _ -> mochi_nth(Row + 1, Grid) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get(Row, Grid, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Grid) + Row + 1, Grid); _ -> mochi_nth(Row + 1, Grid) end end)) + Col + 1, (case erlang:is_map(Grid) of true -> maps:get(Row, Grid, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Grid) + Row + 1, Grid); _ -> mochi_nth(Row + 1, Grid) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(Grid) of true -> maps:get(Row, Grid, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Grid) + Row + 1, Grid); _ -> mochi_nth(Row + 1, Grid) end end)) end end) == 1))
    catch {return, RetCatch} -> RetCatch end.

dfs(Grid_2, Visited_2, Row_2, Col_2) ->
    try
        Row_nbr = [-1, -1, -1, 0, 0, 1, 1, 1],
        Col_nbr = [-1, 0, 1, -1, 1, -1, 0, 1],
        Visited_3 = lists:sublist(Visited_2, Row_2) ++ [lists:sublist(lists:nth(Row_2 + 1, Visited_2), Col_2) ++ [true] ++ lists:nthtail(Col_2 + 1, lists:nth(Row_2 + 1, Visited_2))] ++ lists:nthtail(Row_2 + 1, Visited_2),
        K = 0,
        Fun = fun Fun_loop(Col_2, Col_nbr, Grid_2, K, Row_2, Row_nbr, Visited_3) ->
    case (K < 8) of
        true ->
            New_row = (Row_2 + (case erlang:is_map(Row_nbr) of true -> maps:get(K, Row_nbr, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Row_nbr) + K + 1, Row_nbr); _ -> mochi_nth(K + 1, Row_nbr) end end)),
            New_col = (Col_2 + (case erlang:is_map(Col_nbr) of true -> maps:get(K, Col_nbr, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Col_nbr) + K + 1, Col_nbr); _ -> mochi_nth(K + 1, Col_nbr) end end)),
            case is_safe(Grid_2, Visited_3, New_row, New_col) of
        true -> dfs(Grid_2, Visited_3, New_row, New_col);
        _ -> ok
    end,
            K_2 = (K + 1),
            Fun_loop(Col_2, Col_nbr, Grid_2, K_2, Row_2, Row_nbr, Visited_3);
        _ -> {Col_2, Col_nbr, Grid_2, K, Row_2, Row_nbr, Visited_3}
    end
end,
{Col_2, Col_nbr, Grid_2, K_2, Row_2, Row_nbr, Visited_3} = Fun(Col_2, Col_nbr, Grid_2, K, Row_2, Row_nbr, Visited_3),
        {nil, Visited_3}
    catch {return, RetCatch} -> RetCatch end.

count_islands(Grid_3) ->
    try
        Rows_2 = erlang:length(Grid_3),
        Cols_2 = erlang:length((case erlang:is_map(Grid_3) of true -> maps:get(0, Grid_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid_3) + 0 + 1, Grid_3); _ -> mochi_nth(0 + 1, Grid_3) end end)),
        Visited_4 = [],
        I = 0,
        Fun_3 = fun Fun_3_loop(Cols_2, Grid_3, I, Rows_2, Visited_4) ->
    case (I < Rows_2) of
        true ->
            Row_list = [],
            J = 0,
            Fun_2 = fun Fun_2_loop(Cols_2, Grid_3, I, J, Row_list, Rows_2, Visited_4) ->
    case (J < Cols_2) of
        true ->
            Row_list_2 = lists:append((case Row_list of nil -> []; _ -> Row_list end), [false]),
            J_2 = (J + 1),
            Fun_2_loop(Cols_2, Grid_3, I, J_2, Row_list_2, Rows_2, Visited_4);
        _ -> {Cols_2, Grid_3, I, J, Row_list, Rows_2, Visited_4}
    end
end,
{Cols_2, Grid_3, I, J_2, Row_list_2, Rows_2, Visited_4} = Fun_2(Cols_2, Grid_3, I, J, Row_list, Rows_2, Visited_4),
            Visited_5 = lists:append((case Visited_4 of nil -> []; _ -> Visited_4 end), [Row_list_2]),
            I_2 = (I + 1),
            Fun_3_loop(Cols_2, Grid_3, I_2, Rows_2, Visited_5);
        _ -> {Cols_2, Grid_3, I, Rows_2, Visited_4}
    end
end,
{Cols_2, Grid_3, I_2, Rows_2, Visited_5} = Fun_3(Cols_2, Grid_3, I, Rows_2, Visited_4),
        Count = 0,
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(Cols_2, Count, Grid_3, I_3, Rows_2, Visited_5) ->
    case (I_3 < Rows_2) of
        true ->
            J_3 = 0,
            Fun_4 = fun Fun_4_loop(Cols_2, Count, Grid_3, I_3, J_3, Rows_2, Visited_5) ->
    case (J_3 < Cols_2) of
        true ->
            case (mochi_not((case erlang:is_map((case erlang:is_map(Visited_5) of true -> maps:get(I_3, Visited_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Visited_5) + I_3 + 1, Visited_5); _ -> mochi_nth(I_3 + 1, Visited_5) end end)) of true -> maps:get(J_3, (case erlang:is_map(Visited_5) of true -> maps:get(I_3, Visited_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Visited_5) + I_3 + 1, Visited_5); _ -> mochi_nth(I_3 + 1, Visited_5) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Visited_5) of true -> maps:get(I_3, Visited_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Visited_5) + I_3 + 1, Visited_5); _ -> mochi_nth(I_3 + 1, Visited_5) end end)) + J_3 + 1, (case erlang:is_map(Visited_5) of true -> maps:get(I_3, Visited_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Visited_5) + I_3 + 1, Visited_5); _ -> mochi_nth(I_3 + 1, Visited_5) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Visited_5) of true -> maps:get(I_3, Visited_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Visited_5) + I_3 + 1, Visited_5); _ -> mochi_nth(I_3 + 1, Visited_5) end end)) end end)) andalso ((case erlang:is_map((case erlang:is_map(Grid_3) of true -> maps:get(I_3, Grid_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Grid_3) + I_3 + 1, Grid_3); _ -> mochi_nth(I_3 + 1, Grid_3) end end)) of true -> maps:get(J_3, (case erlang:is_map(Grid_3) of true -> maps:get(I_3, Grid_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Grid_3) + I_3 + 1, Grid_3); _ -> mochi_nth(I_3 + 1, Grid_3) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid_3) of true -> maps:get(I_3, Grid_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Grid_3) + I_3 + 1, Grid_3); _ -> mochi_nth(I_3 + 1, Grid_3) end end)) + J_3 + 1, (case erlang:is_map(Grid_3) of true -> maps:get(I_3, Grid_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Grid_3) + I_3 + 1, Grid_3); _ -> mochi_nth(I_3 + 1, Grid_3) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Grid_3) of true -> maps:get(I_3, Grid_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Grid_3) + I_3 + 1, Grid_3); _ -> mochi_nth(I_3 + 1, Grid_3) end end)) end end) == 1)) of
        true -> Visited_5_res = dfs(Grid_3, Visited_5, I_3, J_3),
            Visited_5_tmp = element(2, Visited_5_res),
            Visited_5 = Visited_5_tmp,
            Count_2 = (Count + 1),
            Visited_5_res_2 = Visited_5_res,
            Visited_5_tmp_2 = Visited_5_tmp,
            Count_3 = Count_2;
        _ -> Visited_5_res_2 = nil,
            Visited_5_tmp_2 = nil,
            Count_3 = Count
    end,
            J_4 = (J_3 + 1),
            Fun_4_loop(Cols_2, Count_3, Grid_3, I_3, J_4, Rows_2, Visited_5);
        _ -> {Cols_2, Count, Grid_3, I_3, J_3, Rows_2, Visited_5}
    end
end,
{Cols_2, Count_3, Grid_3, I_3, J_4, Rows_2, Visited_5} = Fun_4(Cols_2, Count, Grid_3, I_3, J_3, Rows_2, Visited_5),
            I_4 = (I_3 + 1),
            Fun_5_loop(Cols_2, Count_3, Grid_3, I_4, Rows_2, Visited_5);
        _ -> {Cols_2, Count, Grid_3, I_3, Rows_2, Visited_5}
    end
end,
{Cols_2, Count_3, Grid_3, I_4, Rows_2, Visited_5} = Fun_5(Cols_2, Count, Grid_3, I_3, Rows_2, Visited_5),
        Count_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('grid', [[1, 1, 0, 0, 0], [0, 1, 0, 0, 1], [1, 0, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1]]),
    io:format("~ts~n", [mochi_repr(count_islands(erlang:get('grid')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
