#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_matrix/1, matrix_columns/1, matrix_identity/1, matrix_minor/3, matrix_cofactor/3, matrix_minors/1, matrix_cofactors/1, matrix_determinant/1, matrix_is_invertible/1, matrix_adjugate/1, matrix_inverse/1, matrix_add_row/2, matrix_add_column/2, matrix_mul_scalar/2, matrix_neg/1, matrix_add/2, matrix_sub/2, matrix_dot/2, matrix_mul/2, matrix_pow/2, matrix_to_string/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (c45765bf43) on 2025-08-08 15:36 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

make_matrix(Values) ->
    try
        R = erlang:length(Values),
        case (R == 0) of
        true -> throw({return, #{"data" => [], "rows" => 0, "cols" => 0}});
        _ -> ok
    end,
        C = erlang:length((case erlang:is_map(Values) of true -> maps:get(0, Values, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Values) + 0 + 1, Values); _ -> mochi_nth(0 + 1, Values) end end)),
        I = 0,
        Fun = fun Fun_loop(C, I, R, Values) ->
    case (I < R) of
        true ->
            case (erlang:length((case erlang:is_map(Values) of true -> maps:get(I, Values, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Values) + I + 1, Values); _ -> mochi_nth(I + 1, Values) end end)) /= C) of
        true -> throw({return, #{"data" => [], "rows" => 0, "cols" => 0}});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(C, I_2, R, Values);
        _ -> {C, I, R, Values}
    end
end,
{C, I_2, R, Values} = Fun(C, I, R, Values),
        #{"data" => Values, "rows" => R, "cols" => C}
    catch {return, Ret} -> Ret end.

matrix_columns(M) ->
    try
        Cols = [],
        J = 0,
        Fun_3 = fun Fun_3_loop(Cols, J, M) ->
    case (J < maps:get("cols", M, nil)) of
        true ->
            Col = [],
            I_3 = 0,
            Fun_2 = fun Fun_2_loop(Col, Cols, I_3, J, M) ->
    case (I_3 < maps:get("rows", M, nil)) of
        true ->
            Col_2 = lists:append((case Col of nil -> []; _ -> Col end), [(case erlang:is_map((case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I_3, maps:get("data", M, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I_3 + 1, maps:get("data", M, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", M, nil)) end end)) of true -> maps:get(J, (case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I_3, maps:get("data", M, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I_3 + 1, maps:get("data", M, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", M, nil)) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I_3, maps:get("data", M, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I_3 + 1, maps:get("data", M, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", M, nil)) end end)) + J + 1, (case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I_3, maps:get("data", M, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I_3 + 1, maps:get("data", M, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", M, nil)) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I_3, maps:get("data", M, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I_3 + 1, maps:get("data", M, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", M, nil)) end end)) end end)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Col_2, Cols, I_4, J, M);
        _ -> {Col, Cols, I_3, J, M}
    end
end,
{Col_2, Cols, I_4, J, M} = Fun_2(Col, Cols, I_3, J, M),
            Cols_2 = lists:append((case Cols of nil -> []; _ -> Cols end), [Col_2]),
            J_2 = (J + 1),
            Fun_3_loop(Cols_2, J_2, M);
        _ -> {Cols, J, M}
    end
end,
{Cols_2, J_2, M} = Fun_3(Cols, J, M),
        Cols_2
    catch {return, Ret} -> Ret end.

matrix_identity(M_2) ->
    try
        Vals = [],
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(I_5, M_2, Vals) ->
    case (I_5 < maps:get("rows", M_2, nil)) of
        true ->
            Row = [],
            J_3 = 0,
            Fun_4 = fun Fun_4_loop(I_5, J_3, M_2, Row, Vals) ->
    case (J_3 < maps:get("cols", M_2, nil)) of
        true ->
            V = (case (I_5 == J_3) of
    true -> 1.0;
    _ -> 0.0
end),
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [V]),
            J_4 = (J_3 + 1),
            Fun_4_loop(I_5, J_4, M_2, Row_2, Vals);
        _ -> {I_5, J_3, M_2, Row, Vals}
    end
end,
{I_5, J_4, M_2, Row_2, Vals} = Fun_4(I_5, J_3, M_2, Row, Vals),
            Vals_2 = lists:append((case Vals of nil -> []; _ -> Vals end), [Row_2]),
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, M_2, Vals_2);
        _ -> {I_5, M_2, Vals}
    end
end,
{I_6, M_2, Vals_2} = Fun_5(I_5, M_2, Vals),
        #{"data" => Vals_2, "rows" => maps:get("rows", M_2, nil), "cols" => maps:get("cols", M_2, nil)}
    catch {return, Ret} -> Ret end.

matrix_minor(M_3, R_2, C_2) ->
    try
        Vals_3 = [],
        I_7 = 0,
        Fun_8 = fun Fun_8_loop(C_2, I_7, M_3, R_2, Vals_3) ->
    case (I_7 < maps:get("rows", M_3, nil)) of
        true ->
            case (I_7 /= R_2) of
        true -> Row_3 = [],
            J_5 = 0,
            Fun_6 = fun Fun_6_loop(C_2, I_7, J_5, M_3, R_2, Row_3, Vals_3) ->
    case (J_5 < maps:get("cols", M_3, nil)) of
        true ->
            case (J_5 /= C_2) of
        true -> Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [(case erlang:is_map((case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(I_7, maps:get("data", M_3, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + I_7 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(I_7 + 1, maps:get("data", M_3, nil)) end end)) of true -> maps:get(J_5, (case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(I_7, maps:get("data", M_3, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + I_7 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(I_7 + 1, maps:get("data", M_3, nil)) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(I_7, maps:get("data", M_3, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + I_7 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(I_7 + 1, maps:get("data", M_3, nil)) end end)) + J_5 + 1, (case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(I_7, maps:get("data", M_3, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + I_7 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(I_7 + 1, maps:get("data", M_3, nil)) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(I_7, maps:get("data", M_3, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + I_7 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(I_7 + 1, maps:get("data", M_3, nil)) end end)) end end)]),
            Row_5 = Row_4;
        _ -> Row_5 = Row_3
    end,
            J_6 = (J_5 + 1),
            Fun_6_loop(C_2, I_7, J_6, M_3, R_2, Row_5, Vals_3);
        _ -> {C_2, I_7, J_5, M_3, R_2, Row_3, Vals_3}
    end
end,
{C_2, I_7, J_6, M_3, R_2, Row_5, Vals_3} = Fun_6(C_2, I_7, J_5, M_3, R_2, Row_3, Vals_3),
            Vals_4 = lists:append((case Vals_3 of nil -> []; _ -> Vals_3 end), [Row_5]),
            Fun_7 = Fun_6,
            J_7 = J_6,
            Row_6 = Row_5,
            Vals_5 = Vals_4;
        _ -> Fun_7 = nil,
            J_7 = nil,
            Row_6 = nil,
            Vals_5 = Vals_3
    end,
            I_8 = (I_7 + 1),
            Fun_8_loop(C_2, I_8, M_3, R_2, Vals_5);
        _ -> {C_2, I_7, M_3, R_2, Vals_3}
    end
end,
{C_2, I_8, M_3, R_2, Vals_5} = Fun_8(C_2, I_7, M_3, R_2, Vals_3),
        Sub = #{"data" => Vals_5, "rows" => (maps:get("rows", M_3, nil) - 1), "cols" => (maps:get("cols", M_3, nil) - 1)},
        matrix_determinant(Sub)
    catch {return, Ret} -> Ret end.

matrix_cofactor(M_4, R_3, C_3) ->
    try
        Minor = matrix_minor(M_4, R_3, C_3),
        case (mochi_mod((R_3 + C_3), 2) == 0) of
        true -> throw({return, Minor});
        _ -> ok
    end,
        mochi_safe_mul(-1.0, Minor)
    catch {return, Ret} -> Ret end.

matrix_minors(M_5) ->
    try
        Vals_6 = [],
        I_9 = 0,
        Fun_10 = fun Fun_10_loop(I_9, M_5, Vals_6) ->
    case (I_9 < maps:get("rows", M_5, nil)) of
        true ->
            Row_7 = [],
            J_8 = 0,
            Fun_9 = fun Fun_9_loop(I_9, J_8, M_5, Row_7, Vals_6) ->
    case (J_8 < maps:get("cols", M_5, nil)) of
        true ->
            Row_8 = lists:append((case Row_7 of nil -> []; _ -> Row_7 end), [matrix_minor(M_5, I_9, J_8)]),
            J_9 = (J_8 + 1),
            Fun_9_loop(I_9, J_9, M_5, Row_8, Vals_6);
        _ -> {I_9, J_8, M_5, Row_7, Vals_6}
    end
end,
{I_9, J_9, M_5, Row_8, Vals_6} = Fun_9(I_9, J_8, M_5, Row_7, Vals_6),
            Vals_7 = lists:append((case Vals_6 of nil -> []; _ -> Vals_6 end), [Row_8]),
            I_10 = (I_9 + 1),
            Fun_10_loop(I_10, M_5, Vals_7);
        _ -> {I_9, M_5, Vals_6}
    end
end,
{I_10, M_5, Vals_7} = Fun_10(I_9, M_5, Vals_6),
        #{"data" => Vals_7, "rows" => maps:get("rows", M_5, nil), "cols" => maps:get("cols", M_5, nil)}
    catch {return, Ret} -> Ret end.

matrix_cofactors(M_6) ->
    try
        Vals_8 = [],
        I_11 = 0,
        Fun_12 = fun Fun_12_loop(I_11, M_6, Vals_8) ->
    case (I_11 < maps:get("rows", M_6, nil)) of
        true ->
            Row_9 = [],
            J_10 = 0,
            Fun_11 = fun Fun_11_loop(I_11, J_10, M_6, Row_9, Vals_8) ->
    case (J_10 < maps:get("cols", M_6, nil)) of
        true ->
            Row_10 = lists:append((case Row_9 of nil -> []; _ -> Row_9 end), [matrix_cofactor(M_6, I_11, J_10)]),
            J_11 = (J_10 + 1),
            Fun_11_loop(I_11, J_11, M_6, Row_10, Vals_8);
        _ -> {I_11, J_10, M_6, Row_9, Vals_8}
    end
end,
{I_11, J_11, M_6, Row_10, Vals_8} = Fun_11(I_11, J_10, M_6, Row_9, Vals_8),
            Vals_9 = lists:append((case Vals_8 of nil -> []; _ -> Vals_8 end), [Row_10]),
            I_12 = (I_11 + 1),
            Fun_12_loop(I_12, M_6, Vals_9);
        _ -> {I_11, M_6, Vals_8}
    end
end,
{I_12, M_6, Vals_9} = Fun_12(I_11, M_6, Vals_8),
        #{"data" => Vals_9, "rows" => maps:get("rows", M_6, nil), "cols" => maps:get("cols", M_6, nil)}
    catch {return, Ret} -> Ret end.

matrix_determinant(M_7) ->
    try
        case (maps:get("rows", M_7, nil) /= maps:get("cols", M_7, nil)) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        case (maps:get("rows", M_7, nil) == 0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        case (maps:get("rows", M_7, nil) == 1) of
        true -> throw({return, (case erlang:is_map((case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)) of true -> maps:get(0, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)) + 0 + 1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)) end end)});
        _ -> ok
    end,
        case (maps:get("rows", M_7, nil) == 2) of
        true -> throw({return, (mochi_safe_mul((case erlang:is_map((case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)) of true -> maps:get(0, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)) + 0 + 1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)) end end), (case erlang:is_map((case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(1, maps:get("data", M_7, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 1 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_7, nil)) end end)) of true -> maps:get(1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(1, maps:get("data", M_7, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 1 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_7, nil)) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(1, maps:get("data", M_7, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 1 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_7, nil)) end end)) + 1 + 1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(1, maps:get("data", M_7, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 1 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_7, nil)) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(1, maps:get("data", M_7, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 1 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_7, nil)) end end)) end end)) - mochi_safe_mul((case erlang:is_map((case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)) of true -> maps:get(1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)) + 1 + 1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)) end end), (case erlang:is_map((case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(1, maps:get("data", M_7, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 1 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_7, nil)) end end)) of true -> maps:get(0, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(1, maps:get("data", M_7, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 1 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_7, nil)) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(1, maps:get("data", M_7, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 1 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_7, nil)) end end)) + 0 + 1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(1, maps:get("data", M_7, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 1 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_7, nil)) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(1, maps:get("data", M_7, nil), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 1 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(1 + 1, maps:get("data", M_7, nil)) end end)) end end)))});
        _ -> ok
    end,
        Sum = 0.0,
        J_12 = 0,
        Fun_13 = fun Fun_13_loop(J_12, M_7, Sum) ->
    case (J_12 < maps:get("cols", M_7, nil)) of
        true ->
            Sum_2 = (Sum + mochi_safe_mul((case erlang:is_map((case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)) of true -> maps:get(J_12, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end), nil); _ -> case J_12 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)) + J_12 + 1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)); _ -> mochi_nth(J_12 + 1, (case erlang:is_map(maps:get("data", M_7, nil)) of true -> maps:get(0, maps:get("data", M_7, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_7, nil)) + 0 + 1, maps:get("data", M_7, nil)); _ -> mochi_nth(0 + 1, maps:get("data", M_7, nil)) end end)) end end), matrix_cofactor(M_7, 0, J_12))),
            J_13 = (J_12 + 1),
            Fun_13_loop(J_13, M_7, Sum_2);
        _ -> {J_12, M_7, Sum}
    end
end,
{J_13, M_7, Sum_2} = Fun_13(J_12, M_7, Sum),
        Sum_2
    catch {return, Ret} -> Ret end.

matrix_is_invertible(M_8) ->
    try
        (matrix_determinant(M_8) /= 0.0)
    catch {return, Ret} -> Ret end.

matrix_adjugate(M_9) ->
    try
        Cof = matrix_cofactors(M_9),
        Vals_10 = [],
        I_13 = 0,
        Fun_15 = fun Fun_15_loop(Cof, I_13, M_9, Vals_10) ->
    case (I_13 < maps:get("rows", M_9, nil)) of
        true ->
            Row_11 = [],
            J_14 = 0,
            Fun_14 = fun Fun_14_loop(Cof, I_13, J_14, M_9, Row_11, Vals_10) ->
    case (J_14 < maps:get("cols", M_9, nil)) of
        true ->
            Row_12 = lists:append((case Row_11 of nil -> []; _ -> Row_11 end), [(case erlang:is_map((case erlang:is_map(maps:get("data", Cof, nil)) of true -> maps:get(J_14, maps:get("data", Cof, nil), nil); _ -> case J_14 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Cof, nil)) + J_14 + 1, maps:get("data", Cof, nil)); _ -> mochi_nth(J_14 + 1, maps:get("data", Cof, nil)) end end)) of true -> maps:get(I_13, (case erlang:is_map(maps:get("data", Cof, nil)) of true -> maps:get(J_14, maps:get("data", Cof, nil), nil); _ -> case J_14 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Cof, nil)) + J_14 + 1, maps:get("data", Cof, nil)); _ -> mochi_nth(J_14 + 1, maps:get("data", Cof, nil)) end end), nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", Cof, nil)) of true -> maps:get(J_14, maps:get("data", Cof, nil), nil); _ -> case J_14 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Cof, nil)) + J_14 + 1, maps:get("data", Cof, nil)); _ -> mochi_nth(J_14 + 1, maps:get("data", Cof, nil)) end end)) + I_13 + 1, (case erlang:is_map(maps:get("data", Cof, nil)) of true -> maps:get(J_14, maps:get("data", Cof, nil), nil); _ -> case J_14 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Cof, nil)) + J_14 + 1, maps:get("data", Cof, nil)); _ -> mochi_nth(J_14 + 1, maps:get("data", Cof, nil)) end end)); _ -> mochi_nth(I_13 + 1, (case erlang:is_map(maps:get("data", Cof, nil)) of true -> maps:get(J_14, maps:get("data", Cof, nil), nil); _ -> case J_14 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Cof, nil)) + J_14 + 1, maps:get("data", Cof, nil)); _ -> mochi_nth(J_14 + 1, maps:get("data", Cof, nil)) end end)) end end)]),
            J_15 = (J_14 + 1),
            Fun_14_loop(Cof, I_13, J_15, M_9, Row_12, Vals_10);
        _ -> {Cof, I_13, J_14, M_9, Row_11, Vals_10}
    end
end,
{Cof, I_13, J_15, M_9, Row_12, Vals_10} = Fun_14(Cof, I_13, J_14, M_9, Row_11, Vals_10),
            Vals_11 = lists:append((case Vals_10 of nil -> []; _ -> Vals_10 end), [Row_12]),
            I_14 = (I_13 + 1),
            Fun_15_loop(Cof, I_14, M_9, Vals_11);
        _ -> {Cof, I_13, M_9, Vals_10}
    end
end,
{Cof, I_14, M_9, Vals_11} = Fun_15(Cof, I_13, M_9, Vals_10),
        #{"data" => Vals_11, "rows" => maps:get("rows", M_9, nil), "cols" => maps:get("cols", M_9, nil)}
    catch {return, Ret} -> Ret end.

matrix_inverse(M_10) ->
    try
        Det = matrix_determinant(M_10),
        case (Det == 0.0) of
        true -> throw({return, #{"data" => [], "rows" => 0, "cols" => 0}});
        _ -> ok
    end,
        Adj = matrix_adjugate(M_10),
        matrix_mul_scalar(Adj, mochi_safe_div(1.0, Det))
    catch {return, Ret} -> Ret end.

matrix_add_row(M_11, Row_13) ->
    try
        NewData = maps:get("data", M_11, nil),
        NewData_2 = lists:append((case NewData of nil -> []; _ -> NewData end), [Row_13]),
        #{"data" => NewData_2, "rows" => (maps:get("rows", M_11, nil) + 1), "cols" => maps:get("cols", M_11, nil)}
    catch {return, Ret} -> Ret end.

matrix_add_column(M_12, Col_3) ->
    try
        NewData_3 = [],
        I_15 = 0,
        Fun_16 = fun Fun_16_loop(Col_3, I_15, M_12, NewData_3) ->
    case (I_15 < maps:get("rows", M_12, nil)) of
        true ->
            NewData_4 = lists:append((case NewData_3 of nil -> []; _ -> NewData_3 end), [lists:append((case (case erlang:is_map(maps:get("data", M_12, nil)) of true -> maps:get(I_15, maps:get("data", M_12, nil), nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_12, nil)) + I_15 + 1, maps:get("data", M_12, nil)); _ -> mochi_nth(I_15 + 1, maps:get("data", M_12, nil)) end end) of nil -> []; _ -> (case erlang:is_map(maps:get("data", M_12, nil)) of true -> maps:get(I_15, maps:get("data", M_12, nil), nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_12, nil)) + I_15 + 1, maps:get("data", M_12, nil)); _ -> mochi_nth(I_15 + 1, maps:get("data", M_12, nil)) end end) end), [(case erlang:is_map(Col_3) of true -> maps:get(I_15, Col_3, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Col_3) + I_15 + 1, Col_3); _ -> mochi_nth(I_15 + 1, Col_3) end end)])]),
            I_16 = (I_15 + 1),
            Fun_16_loop(Col_3, I_16, M_12, NewData_4);
        _ -> {Col_3, I_15, M_12, NewData_3}
    end
end,
{Col_3, I_16, M_12, NewData_4} = Fun_16(Col_3, I_15, M_12, NewData_3),
        #{"data" => NewData_4, "rows" => maps:get("rows", M_12, nil), "cols" => (maps:get("cols", M_12, nil) + 1)}
    catch {return, Ret} -> Ret end.

matrix_mul_scalar(M_13, S) ->
    try
        Vals_12 = [],
        I_17 = 0,
        Fun_18 = fun Fun_18_loop(I_17, M_13, S, Vals_12) ->
    case (I_17 < maps:get("rows", M_13, nil)) of
        true ->
            Row_14 = [],
            J_16 = 0,
            Fun_17 = fun Fun_17_loop(I_17, J_16, M_13, Row_14, S, Vals_12) ->
    case (J_16 < maps:get("cols", M_13, nil)) of
        true ->
            Row_15 = lists:append((case Row_14 of nil -> []; _ -> Row_14 end), [mochi_safe_mul((case erlang:is_map((case erlang:is_map(maps:get("data", M_13, nil)) of true -> maps:get(I_17, maps:get("data", M_13, nil), nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_13, nil)) + I_17 + 1, maps:get("data", M_13, nil)); _ -> mochi_nth(I_17 + 1, maps:get("data", M_13, nil)) end end)) of true -> maps:get(J_16, (case erlang:is_map(maps:get("data", M_13, nil)) of true -> maps:get(I_17, maps:get("data", M_13, nil), nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_13, nil)) + I_17 + 1, maps:get("data", M_13, nil)); _ -> mochi_nth(I_17 + 1, maps:get("data", M_13, nil)) end end), nil); _ -> case J_16 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_13, nil)) of true -> maps:get(I_17, maps:get("data", M_13, nil), nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_13, nil)) + I_17 + 1, maps:get("data", M_13, nil)); _ -> mochi_nth(I_17 + 1, maps:get("data", M_13, nil)) end end)) + J_16 + 1, (case erlang:is_map(maps:get("data", M_13, nil)) of true -> maps:get(I_17, maps:get("data", M_13, nil), nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_13, nil)) + I_17 + 1, maps:get("data", M_13, nil)); _ -> mochi_nth(I_17 + 1, maps:get("data", M_13, nil)) end end)); _ -> mochi_nth(J_16 + 1, (case erlang:is_map(maps:get("data", M_13, nil)) of true -> maps:get(I_17, maps:get("data", M_13, nil), nil); _ -> case I_17 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_13, nil)) + I_17 + 1, maps:get("data", M_13, nil)); _ -> mochi_nth(I_17 + 1, maps:get("data", M_13, nil)) end end)) end end), S)]),
            J_17 = (J_16 + 1),
            Fun_17_loop(I_17, J_17, M_13, Row_15, S, Vals_12);
        _ -> {I_17, J_16, M_13, Row_14, S, Vals_12}
    end
end,
{I_17, J_17, M_13, Row_15, S, Vals_12} = Fun_17(I_17, J_16, M_13, Row_14, S, Vals_12),
            Vals_13 = lists:append((case Vals_12 of nil -> []; _ -> Vals_12 end), [Row_15]),
            I_18 = (I_17 + 1),
            Fun_18_loop(I_18, M_13, S, Vals_13);
        _ -> {I_17, M_13, S, Vals_12}
    end
end,
{I_18, M_13, S, Vals_13} = Fun_18(I_17, M_13, S, Vals_12),
        #{"data" => Vals_13, "rows" => maps:get("rows", M_13, nil), "cols" => maps:get("cols", M_13, nil)}
    catch {return, Ret} -> Ret end.

matrix_neg(M_14) ->
    try
        matrix_mul_scalar(M_14, -1.0)
    catch {return, Ret} -> Ret end.

matrix_add(A, B) ->
    try
        case ((maps:get("rows", A, nil) /= maps:get("rows", B, nil)) orelse (maps:get("cols", A, nil) /= maps:get("cols", B, nil))) of
        true -> throw({return, #{"data" => [], "rows" => 0, "cols" => 0}});
        _ -> ok
    end,
        Vals_14 = [],
        I_19 = 0,
        Fun_20 = fun Fun_20_loop(A, B, I_19, Vals_14) ->
    case (I_19 < maps:get("rows", A, nil)) of
        true ->
            Row_16 = [],
            J_18 = 0,
            Fun_19 = fun Fun_19_loop(A, B, I_19, J_18, Row_16, Vals_14) ->
    case (J_18 < maps:get("cols", A, nil)) of
        true ->
            Row_17 = lists:append((case Row_16 of nil -> []; _ -> Row_16 end), [((case erlang:is_map((case erlang:is_map(maps:get("data", A, nil)) of true -> maps:get(I_19, maps:get("data", A, nil), nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A, nil)) + I_19 + 1, maps:get("data", A, nil)); _ -> mochi_nth(I_19 + 1, maps:get("data", A, nil)) end end)) of true -> maps:get(J_18, (case erlang:is_map(maps:get("data", A, nil)) of true -> maps:get(I_19, maps:get("data", A, nil), nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A, nil)) + I_19 + 1, maps:get("data", A, nil)); _ -> mochi_nth(I_19 + 1, maps:get("data", A, nil)) end end), nil); _ -> case J_18 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", A, nil)) of true -> maps:get(I_19, maps:get("data", A, nil), nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A, nil)) + I_19 + 1, maps:get("data", A, nil)); _ -> mochi_nth(I_19 + 1, maps:get("data", A, nil)) end end)) + J_18 + 1, (case erlang:is_map(maps:get("data", A, nil)) of true -> maps:get(I_19, maps:get("data", A, nil), nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A, nil)) + I_19 + 1, maps:get("data", A, nil)); _ -> mochi_nth(I_19 + 1, maps:get("data", A, nil)) end end)); _ -> mochi_nth(J_18 + 1, (case erlang:is_map(maps:get("data", A, nil)) of true -> maps:get(I_19, maps:get("data", A, nil), nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A, nil)) + I_19 + 1, maps:get("data", A, nil)); _ -> mochi_nth(I_19 + 1, maps:get("data", A, nil)) end end)) end end) + (case erlang:is_map((case erlang:is_map(maps:get("data", B, nil)) of true -> maps:get(I_19, maps:get("data", B, nil), nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B, nil)) + I_19 + 1, maps:get("data", B, nil)); _ -> mochi_nth(I_19 + 1, maps:get("data", B, nil)) end end)) of true -> maps:get(J_18, (case erlang:is_map(maps:get("data", B, nil)) of true -> maps:get(I_19, maps:get("data", B, nil), nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B, nil)) + I_19 + 1, maps:get("data", B, nil)); _ -> mochi_nth(I_19 + 1, maps:get("data", B, nil)) end end), nil); _ -> case J_18 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", B, nil)) of true -> maps:get(I_19, maps:get("data", B, nil), nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B, nil)) + I_19 + 1, maps:get("data", B, nil)); _ -> mochi_nth(I_19 + 1, maps:get("data", B, nil)) end end)) + J_18 + 1, (case erlang:is_map(maps:get("data", B, nil)) of true -> maps:get(I_19, maps:get("data", B, nil), nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B, nil)) + I_19 + 1, maps:get("data", B, nil)); _ -> mochi_nth(I_19 + 1, maps:get("data", B, nil)) end end)); _ -> mochi_nth(J_18 + 1, (case erlang:is_map(maps:get("data", B, nil)) of true -> maps:get(I_19, maps:get("data", B, nil), nil); _ -> case I_19 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B, nil)) + I_19 + 1, maps:get("data", B, nil)); _ -> mochi_nth(I_19 + 1, maps:get("data", B, nil)) end end)) end end))]),
            J_19 = (J_18 + 1),
            Fun_19_loop(A, B, I_19, J_19, Row_17, Vals_14);
        _ -> {A, B, I_19, J_18, Row_16, Vals_14}
    end
end,
{A, B, I_19, J_19, Row_17, Vals_14} = Fun_19(A, B, I_19, J_18, Row_16, Vals_14),
            Vals_15 = lists:append((case Vals_14 of nil -> []; _ -> Vals_14 end), [Row_17]),
            I_20 = (I_19 + 1),
            Fun_20_loop(A, B, I_20, Vals_15);
        _ -> {A, B, I_19, Vals_14}
    end
end,
{A, B, I_20, Vals_15} = Fun_20(A, B, I_19, Vals_14),
        #{"data" => Vals_15, "rows" => maps:get("rows", A, nil), "cols" => maps:get("cols", A, nil)}
    catch {return, Ret} -> Ret end.

matrix_sub(A_2, B_2) ->
    try
        case ((maps:get("rows", A_2, nil) /= maps:get("rows", B_2, nil)) orelse (maps:get("cols", A_2, nil) /= maps:get("cols", B_2, nil))) of
        true -> throw({return, #{"data" => [], "rows" => 0, "cols" => 0}});
        _ -> ok
    end,
        Vals_16 = [],
        I_21 = 0,
        Fun_22 = fun Fun_22_loop(A_2, B_2, I_21, Vals_16) ->
    case (I_21 < maps:get("rows", A_2, nil)) of
        true ->
            Row_18 = [],
            J_20 = 0,
            Fun_21 = fun Fun_21_loop(A_2, B_2, I_21, J_20, Row_18, Vals_16) ->
    case (J_20 < maps:get("cols", A_2, nil)) of
        true ->
            Row_19 = lists:append((case Row_18 of nil -> []; _ -> Row_18 end), [((case erlang:is_map((case erlang:is_map(maps:get("data", A_2, nil)) of true -> maps:get(I_21, maps:get("data", A_2, nil), nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_2, nil)) + I_21 + 1, maps:get("data", A_2, nil)); _ -> mochi_nth(I_21 + 1, maps:get("data", A_2, nil)) end end)) of true -> maps:get(J_20, (case erlang:is_map(maps:get("data", A_2, nil)) of true -> maps:get(I_21, maps:get("data", A_2, nil), nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_2, nil)) + I_21 + 1, maps:get("data", A_2, nil)); _ -> mochi_nth(I_21 + 1, maps:get("data", A_2, nil)) end end), nil); _ -> case J_20 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", A_2, nil)) of true -> maps:get(I_21, maps:get("data", A_2, nil), nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_2, nil)) + I_21 + 1, maps:get("data", A_2, nil)); _ -> mochi_nth(I_21 + 1, maps:get("data", A_2, nil)) end end)) + J_20 + 1, (case erlang:is_map(maps:get("data", A_2, nil)) of true -> maps:get(I_21, maps:get("data", A_2, nil), nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_2, nil)) + I_21 + 1, maps:get("data", A_2, nil)); _ -> mochi_nth(I_21 + 1, maps:get("data", A_2, nil)) end end)); _ -> mochi_nth(J_20 + 1, (case erlang:is_map(maps:get("data", A_2, nil)) of true -> maps:get(I_21, maps:get("data", A_2, nil), nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_2, nil)) + I_21 + 1, maps:get("data", A_2, nil)); _ -> mochi_nth(I_21 + 1, maps:get("data", A_2, nil)) end end)) end end) - (case erlang:is_map((case erlang:is_map(maps:get("data", B_2, nil)) of true -> maps:get(I_21, maps:get("data", B_2, nil), nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_2, nil)) + I_21 + 1, maps:get("data", B_2, nil)); _ -> mochi_nth(I_21 + 1, maps:get("data", B_2, nil)) end end)) of true -> maps:get(J_20, (case erlang:is_map(maps:get("data", B_2, nil)) of true -> maps:get(I_21, maps:get("data", B_2, nil), nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_2, nil)) + I_21 + 1, maps:get("data", B_2, nil)); _ -> mochi_nth(I_21 + 1, maps:get("data", B_2, nil)) end end), nil); _ -> case J_20 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", B_2, nil)) of true -> maps:get(I_21, maps:get("data", B_2, nil), nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_2, nil)) + I_21 + 1, maps:get("data", B_2, nil)); _ -> mochi_nth(I_21 + 1, maps:get("data", B_2, nil)) end end)) + J_20 + 1, (case erlang:is_map(maps:get("data", B_2, nil)) of true -> maps:get(I_21, maps:get("data", B_2, nil), nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_2, nil)) + I_21 + 1, maps:get("data", B_2, nil)); _ -> mochi_nth(I_21 + 1, maps:get("data", B_2, nil)) end end)); _ -> mochi_nth(J_20 + 1, (case erlang:is_map(maps:get("data", B_2, nil)) of true -> maps:get(I_21, maps:get("data", B_2, nil), nil); _ -> case I_21 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_2, nil)) + I_21 + 1, maps:get("data", B_2, nil)); _ -> mochi_nth(I_21 + 1, maps:get("data", B_2, nil)) end end)) end end))]),
            J_21 = (J_20 + 1),
            Fun_21_loop(A_2, B_2, I_21, J_21, Row_19, Vals_16);
        _ -> {A_2, B_2, I_21, J_20, Row_18, Vals_16}
    end
end,
{A_2, B_2, I_21, J_21, Row_19, Vals_16} = Fun_21(A_2, B_2, I_21, J_20, Row_18, Vals_16),
            Vals_17 = lists:append((case Vals_16 of nil -> []; _ -> Vals_16 end), [Row_19]),
            I_22 = (I_21 + 1),
            Fun_22_loop(A_2, B_2, I_22, Vals_17);
        _ -> {A_2, B_2, I_21, Vals_16}
    end
end,
{A_2, B_2, I_22, Vals_17} = Fun_22(A_2, B_2, I_21, Vals_16),
        #{"data" => Vals_17, "rows" => maps:get("rows", A_2, nil), "cols" => maps:get("cols", A_2, nil)}
    catch {return, Ret} -> Ret end.

matrix_dot(Row_20, Col_4) ->
    try
        Sum_3 = 0.0,
        I_23 = 0,
        Fun_23 = fun Fun_23_loop(Col_4, I_23, Row_20, Sum_3) ->
    case (I_23 < erlang:length(Row_20)) of
        true ->
            Sum_4 = (Sum_3 + mochi_safe_mul((case erlang:is_map(Row_20) of true -> maps:get(I_23, Row_20, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(Row_20) + I_23 + 1, Row_20); _ -> mochi_nth(I_23 + 1, Row_20) end end), (case erlang:is_map(Col_4) of true -> maps:get(I_23, Col_4, nil); _ -> case I_23 < 0 of true -> mochi_nth(erlang:length(Col_4) + I_23 + 1, Col_4); _ -> mochi_nth(I_23 + 1, Col_4) end end))),
            I_24 = (I_23 + 1),
            Fun_23_loop(Col_4, I_24, Row_20, Sum_4);
        _ -> {Col_4, I_23, Row_20, Sum_3}
    end
end,
{Col_4, I_24, Row_20, Sum_4} = Fun_23(Col_4, I_23, Row_20, Sum_3),
        Sum_4
    catch {return, Ret} -> Ret end.

matrix_mul(A_3, B_3) ->
    try
        case (maps:get("cols", A_3, nil) /= maps:get("rows", B_3, nil)) of
        true -> throw({return, #{"data" => [], "rows" => 0, "cols" => 0}});
        _ -> ok
    end,
        Bcols = matrix_columns(B_3),
        Vals_18 = [],
        I_25 = 0,
        Fun_25 = fun Fun_25_loop(A_3, B_3, Bcols, I_25, Vals_18) ->
    case (I_25 < maps:get("rows", A_3, nil)) of
        true ->
            Row_21 = [],
            J_22 = 0,
            Fun_24 = fun Fun_24_loop(A_3, B_3, Bcols, I_25, J_22, Row_21, Vals_18) ->
    case (J_22 < maps:get("cols", B_3, nil)) of
        true ->
            Row_22 = lists:append((case Row_21 of nil -> []; _ -> Row_21 end), [matrix_dot((case erlang:is_map(maps:get("data", A_3, nil)) of true -> maps:get(I_25, maps:get("data", A_3, nil), nil); _ -> case I_25 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_3, nil)) + I_25 + 1, maps:get("data", A_3, nil)); _ -> mochi_nth(I_25 + 1, maps:get("data", A_3, nil)) end end), (case erlang:is_map(Bcols) of true -> maps:get(J_22, Bcols, nil); _ -> case J_22 < 0 of true -> mochi_nth(erlang:length(Bcols) + J_22 + 1, Bcols); _ -> mochi_nth(J_22 + 1, Bcols) end end))]),
            J_23 = (J_22 + 1),
            Fun_24_loop(A_3, B_3, Bcols, I_25, J_23, Row_22, Vals_18);
        _ -> {A_3, B_3, Bcols, I_25, J_22, Row_21, Vals_18}
    end
end,
{A_3, B_3, Bcols, I_25, J_23, Row_22, Vals_18} = Fun_24(A_3, B_3, Bcols, I_25, J_22, Row_21, Vals_18),
            Vals_19 = lists:append((case Vals_18 of nil -> []; _ -> Vals_18 end), [Row_22]),
            I_26 = (I_25 + 1),
            Fun_25_loop(A_3, B_3, Bcols, I_26, Vals_19);
        _ -> {A_3, B_3, Bcols, I_25, Vals_18}
    end
end,
{A_3, B_3, Bcols, I_26, Vals_19} = Fun_25(A_3, B_3, Bcols, I_25, Vals_18),
        #{"data" => Vals_19, "rows" => maps:get("rows", A_3, nil), "cols" => maps:get("cols", B_3, nil)}
    catch {return, Ret} -> Ret end.

matrix_pow(M_15, P) ->
    try
        case (P == 0) of
        true -> throw({return, matrix_identity(M_15)});
        _ -> ok
    end,
        case (P < 0) of
        true -> case matrix_is_invertible(M_15) of
        true -> throw({return, matrix_pow(matrix_inverse(M_15), -P)});
        _ -> ok
    end,
            throw({return, #{"data" => [], "rows" => 0, "cols" => 0}});
        _ -> ok
    end,
        Result = M_15,
        I_27 = 1,
        Fun_26 = fun Fun_26_loop(I_27, M_15, P, Result) ->
    case (I_27 < P) of
        true ->
            Result_2 = matrix_mul(Result, M_15),
            I_28 = (I_27 + 1),
            Fun_26_loop(I_28, M_15, P, Result_2);
        _ -> {I_27, M_15, P, Result}
    end
end,
{I_28, M_15, P, Result_2} = Fun_26(I_27, M_15, P, Result),
        Result_2
    catch {return, Ret} -> Ret end.

matrix_to_string(M_16) ->
    try
        case (maps:get("rows", M_16, nil) == 0) of
        true -> throw({return, "[]"});
        _ -> ok
    end,
        S_2 = "[",
        I_29 = 0,
        Fun_28 = fun Fun_28_loop(I_29, M_16, S_2) ->
    case (I_29 < maps:get("rows", M_16, nil)) of
        true ->
            S_3 = (S_2 ++ "["),
            J_24 = 0,
            Fun_27 = fun Fun_27_loop(I_29, J_24, M_16, S_3) ->
    case (J_24 < maps:get("cols", M_16, nil)) of
        true ->
            S_4 = (S_3 ++ mochi_str((case erlang:is_map((case erlang:is_map(maps:get("data", M_16, nil)) of true -> maps:get(I_29, maps:get("data", M_16, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_16, nil)) + I_29 + 1, maps:get("data", M_16, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", M_16, nil)) end end)) of true -> maps:get(J_24, (case erlang:is_map(maps:get("data", M_16, nil)) of true -> maps:get(I_29, maps:get("data", M_16, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_16, nil)) + I_29 + 1, maps:get("data", M_16, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", M_16, nil)) end end), nil); _ -> case J_24 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_16, nil)) of true -> maps:get(I_29, maps:get("data", M_16, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_16, nil)) + I_29 + 1, maps:get("data", M_16, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", M_16, nil)) end end)) + J_24 + 1, (case erlang:is_map(maps:get("data", M_16, nil)) of true -> maps:get(I_29, maps:get("data", M_16, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_16, nil)) + I_29 + 1, maps:get("data", M_16, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", M_16, nil)) end end)); _ -> mochi_nth(J_24 + 1, (case erlang:is_map(maps:get("data", M_16, nil)) of true -> maps:get(I_29, maps:get("data", M_16, nil), nil); _ -> case I_29 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_16, nil)) + I_29 + 1, maps:get("data", M_16, nil)); _ -> mochi_nth(I_29 + 1, maps:get("data", M_16, nil)) end end)) end end))),
            case (J_24 < (maps:get("cols", M_16, nil) - 1)) of
        true -> S_5 = (S_4 ++ " "),
            S_6 = S_5;
        _ -> S_6 = S_4
    end,
            J_25 = (J_24 + 1),
            Fun_27_loop(I_29, J_25, M_16, S_6);
        _ -> {I_29, J_24, M_16, S_3}
    end
end,
{I_29, J_25, M_16, S_6} = Fun_27(I_29, J_24, M_16, S_3),
            S_7 = (S_6 ++ "]"),
            case (I_29 < (maps:get("rows", M_16, nil) - 1)) of
        true -> S_8 = (S_7 ++ "\n "),
            S_9 = S_8;
        _ -> S_9 = S_7
    end,
            I_30 = (I_29 + 1),
            Fun_28_loop(I_30, M_16, S_9);
        _ -> {I_29, M_16, S_2}
    end
end,
{I_30, M_16, S_9} = Fun_28(I_29, M_16, S_2),
        S_10 = (S_9 ++ "]"),
        S_10
    catch {return, Ret} -> Ret end.

main() ->
    try
        M_17 = make_matrix([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]),
        io:format("~ts~n", [mochi_repr(matrix_to_string(M_17))]),
        io:format("~ts~n", [mochi_str(matrix_columns(M_17))]),
        io:format("~ts~n", [mochi_repr(((mochi_str(maps:get("rows", M_17, nil)) ++ ",") ++ mochi_str(maps:get("cols", M_17, nil))))]),
        io:format("~ts~n", [mochi_str(matrix_is_invertible(M_17))]),
        io:format("~ts~n", [mochi_repr(matrix_to_string(matrix_identity(M_17)))]),
        io:format("~ts~n", [mochi_str(matrix_determinant(M_17))]),
        io:format("~ts~n", [mochi_repr(matrix_to_string(matrix_minors(M_17)))]),
        io:format("~ts~n", [mochi_repr(matrix_to_string(matrix_cofactors(M_17)))]),
        io:format("~ts~n", [mochi_repr(matrix_to_string(matrix_adjugate(M_17)))]),
        M2 = matrix_mul_scalar(M_17, 3.0),
        io:format("~ts~n", [mochi_repr(matrix_to_string(M2))]),
        io:format("~ts~n", [mochi_repr(matrix_to_string(matrix_add(M_17, M2)))]),
        io:format("~ts~n", [mochi_repr(matrix_to_string(matrix_sub(M_17, M2)))]),
        io:format("~ts~n", [mochi_repr(matrix_to_string(matrix_pow(M_17, 3)))]),
        M3 = matrix_add_row(M_17, [10.0, 11.0, 12.0]),
        io:format("~ts~n", [mochi_repr(matrix_to_string(M3))]),
        M4 = matrix_add_column(M2, [8.0, 16.0, 32.0]),
        io:format("~ts~n", [mochi_repr(matrix_to_string(matrix_mul(M3, M4)))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
