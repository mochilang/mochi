#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, generate_large_matrix/0, find_negative_index/1, count_negatives_binary_search/1, count_negatives_brute_force/1, count_negatives_brute_force_with_break/1]).

% Generated by Mochi transpiler v0.10.66 (48422bb2d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

generate_large_matrix() ->
    try
        Result = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Result) ->
    case (I < 1000) of
        true ->
            Row = [],
            J = (1000 - I),
            Fun = fun Fun_loop(I, J, Result, Row) ->
    case (J > (-1000 - I)) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [J]),
            J_2 = (J - 1),
            Fun_loop(I, J_2, Result, Row_2);
        _ -> {I, J, Result, Row}
    end
end,
{I, J_2, Result, Row_2} = Fun(I, J, Result, Row),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Result_2);
        _ -> {I, Result}
    end
end,
{I_2, Result_2} = Fun_2(I, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

find_negative_index(Arr) ->
    try
        Left = 0,
        Right = (erlang:length(Arr) - 1),
        case (erlang:length(Arr) == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case ((case erlang:is_map(Arr) of true -> maps:get(0, Arr, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr) + 0 + 1, Arr); _ -> mochi_nth(0 + 1, Arr) end end) < 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Fun_3 = fun Fun_3_loop(Arr, Left, Right) ->
    case (Left =< Right) of
        true ->
            Mid = ((Left + Right) div 2),
            Num = (case erlang:is_map(Arr) of true -> maps:get(Mid, Arr, nil); _ -> case Mid < 0 of true -> mochi_nth(erlang:length(Arr) + Mid + 1, Arr); _ -> mochi_nth(Mid + 1, Arr) end end),
            case (Num < 0) of
        true -> case (Mid == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
            case ((case erlang:is_map(Arr) of true -> maps:get((Mid - 1), Arr, nil); _ -> case (Mid - 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (Mid - 1) + 1, Arr); _ -> mochi_nth((Mid - 1) + 1, Arr) end end) >= 0) of
        true -> throw({return, Mid});
        _ -> ok
    end,
            Right_2 = (Mid - 1),
            Left_3 = Left,
            Right_3 = Right_2;
        _ -> Left_2 = (Mid + 1),
            Left_3 = Left_2,
            Right_3 = Right
    end,
            Fun_3_loop(Arr, Left_3, Right_3);
        _ -> {Arr, Left, Right}
    end
end,
{Arr, Left_3, Right_3} = Fun_3(Arr, Left, Right),
        erlang:length(Arr)
    catch {return, RetCatch} -> RetCatch end.

count_negatives_binary_search(Grid) ->
    try
        Total = 0,
        Bound = erlang:length((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)),
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Bound, Grid, I_3, Total) ->
    case (I_3 < erlang:length(Grid)) of
        true ->
            Row_3 = (case erlang:is_map(Grid) of true -> maps:get(I_3, Grid, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Grid) + I_3 + 1, Grid); _ -> mochi_nth(I_3 + 1, Grid) end end),
            Idx = find_negative_index((case erlang:is_binary(Row_3) of true -> string:substr(Row_3, 0 + 1, (Bound - 0)); _ -> lists:sublist(Row_3, (0 + 1), (Bound - 0)) end)),
            Bound_2 = Idx,
            Total_2 = (Total + Idx),
            I_4 = (I_3 + 1),
            Fun_4_loop(Bound_2, Grid, I_4, Total_2);
        _ -> {Bound, Grid, I_3, Total}
    end
end,
{Bound_2, Grid, I_4, Total_2} = Fun_4(Bound, Grid, I_3, Total),
        ((erlang:length(Grid) * erlang:length((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end))) - Total_2)
    catch {return, RetCatch} -> RetCatch end.

count_negatives_brute_force(Grid_2) ->
    try
        Count = 0,
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(Count, Grid_2, I_5) ->
    case (I_5 < erlang:length(Grid_2)) of
        true ->
            Row_4 = (case erlang:is_map(Grid_2) of true -> maps:get(I_5, Grid_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Grid_2) + I_5 + 1, Grid_2); _ -> mochi_nth(I_5 + 1, Grid_2) end end),
            J_3 = 0,
            Fun_5 = fun Fun_5_loop(Count, Grid_2, I_5, J_3, Row_4) ->
    case (J_3 < erlang:length(Row_4)) of
        true ->
            case ((case erlang:is_map(Row_4) of true -> maps:get(J_3, Row_4, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Row_4) + J_3 + 1, Row_4); _ -> mochi_nth(J_3 + 1, Row_4) end end) < 0) of
        true -> Count_2 = (Count + 1),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            J_4 = (J_3 + 1),
            Fun_5_loop(Count_3, Grid_2, I_5, J_4, Row_4);
        _ -> {Count, Grid_2, I_5, J_3, Row_4}
    end
end,
{Count_3, Grid_2, I_5, J_4, Row_4} = Fun_5(Count, Grid_2, I_5, J_3, Row_4),
            I_6 = (I_5 + 1),
            Fun_6_loop(Count_3, Grid_2, I_6);
        _ -> {Count, Grid_2, I_5}
    end
end,
{Count_3, Grid_2, I_6} = Fun_6(Count, Grid_2, I_5),
        Count_3
    catch {return, RetCatch} -> RetCatch end.

count_negatives_brute_force_with_break(Grid_3) ->
    try
        Total_3 = 0,
        I_7 = 0,
        Fun_8 = fun Fun_8_loop(Grid_3, I_7, Total_3) ->
    case (I_7 < erlang:length(Grid_3)) of
        true ->
            try
                Row_5 = (case erlang:is_map(Grid_3) of true -> maps:get(I_7, Grid_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Grid_3) + I_7 + 1, Grid_3); _ -> mochi_nth(I_7 + 1, Grid_3) end end),
                J_5 = 0,
                Fun_7 = fun Fun_7_loop(Grid_3, I_7, J_5, Row_5, Total_3) ->
    case (J_5 < erlang:length(Row_5)) of
        true ->
            try
                Number = (case erlang:is_map(Row_5) of true -> maps:get(J_5, Row_5, nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length(Row_5) + J_5 + 1, Row_5); _ -> mochi_nth(J_5 + 1, Row_5) end end),
                case (Number < 0) of
        true -> Total_4 = (Total_3 + (erlang:length(Row_5) - J_5)),
            throw({break, Grid_3, I_7, J_5, Row_5, Total_4}),
            Total_5 = Total_4;
        _ -> Total_5 = Total_3
    end,
                J_6 = (J_5 + 1),
                Fun_7_loop(Grid_3, I_7, J_6, Row_5, Total_5)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_7_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Grid_3, I_7, J_5, Row_5, Total_3}
    end
end,
{Grid_3, I_7, J_6, Row_5, Total_5} = Fun_7(Grid_3, I_7, J_5, Row_5, Total_3),
                I_8 = (I_7 + 1),
                Fun_8_loop(Grid_3, I_8, Total_5)
            catch
                {continue, C0, C1, C2} -> Fun_8_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Grid_3, I_7, Total_3}
    end
end,
{Grid_3, I_8, Total_5} = Fun_8(Grid_3, I_7, Total_3),
        Total_5
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('grid', generate_large_matrix()),
    erlang:put('test_grids', [[[4, 3, 2, -1], [3, 2, 1, -1], [1, 1, -1, -2], [-1, -1, -2, -3]], [[3, 2], [1, 0]], [[7, 7, 6]], [[7, 7, 6], [-1, -2, -3]], erlang:get('grid')]),
    erlang:put('results_bin', []),
    erlang:put('i', 0),
    Fun_9 = fun Fun_9_loop() ->
    case (erlang:get('i') < erlang:length(erlang:get('test_grids'))) of
        true ->
            erlang:put('results_bin', lists:append((case erlang:get('results_bin') of nil -> []; _ -> erlang:get('results_bin') end), [count_negatives_binary_search((case erlang:is_map(erlang:get('test_grids')) of true -> maps:get(erlang:get('i'), erlang:get('test_grids'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('test_grids')) + erlang:get('i') + 1, erlang:get('test_grids')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('test_grids')) end end))])),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_9_loop();
        _ -> {}
    end
end,
{} = Fun_9(),
    io:format("~ts~n", [mochi_str(erlang:get('results_bin'))]),
    erlang:put('results_brute', []),
    erlang:put('i', 0),
    Fun_10 = fun Fun_10_loop() ->
    case (erlang:get('i') < erlang:length(erlang:get('test_grids'))) of
        true ->
            erlang:put('results_brute', lists:append((case erlang:get('results_brute') of nil -> []; _ -> erlang:get('results_brute') end), [count_negatives_brute_force((case erlang:is_map(erlang:get('test_grids')) of true -> maps:get(erlang:get('i'), erlang:get('test_grids'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('test_grids')) + erlang:get('i') + 1, erlang:get('test_grids')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('test_grids')) end end))])),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_10_loop();
        _ -> {}
    end
end,
{} = Fun_10(),
    io:format("~ts~n", [mochi_str(erlang:get('results_brute'))]),
    erlang:put('results_break', []),
    erlang:put('i', 0),
    Fun_11 = fun Fun_11_loop() ->
    case (erlang:get('i') < erlang:length(erlang:get('test_grids'))) of
        true ->
            erlang:put('results_break', lists:append((case erlang:get('results_break') of nil -> []; _ -> erlang:get('results_break') end), [count_negatives_brute_force_with_break((case erlang:is_map(erlang:get('test_grids')) of true -> maps:get(erlang:get('i'), erlang:get('test_grids'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('test_grids')) + erlang:get('i') + 1, erlang:get('test_grids')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('test_grids')) end end))])),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_11_loop();
        _ -> {}
    end
end,
{} = Fun_11(),
    io:format("~ts~n", [mochi_str(erlang:get('results_break'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
