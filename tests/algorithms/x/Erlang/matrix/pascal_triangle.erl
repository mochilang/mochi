#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, populate_current_row/2, generate_pascal_triangle/1, row_to_string/3, print_pascal_triangle/1, main/0]).

% Generated by Mochi transpiler v0.10.67 (7ab215672a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

populate_current_row(Triangle, Current_row_idx) ->
    try
        Row = [],
        I = 0,
        Fun = fun Fun_loop(Current_row_idx, I, Row, Triangle) ->
    case (I =< Current_row_idx) of
        true ->
            Row_4 = (case ((I == 0) orelse (I == Current_row_idx)) of
        true -> Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [1]),
            Left_2 = nil,
            Right_2 = nil,
            Row_2;
        _ -> Left = (case erlang:is_map((case erlang:is_map(Triangle) of true -> maps:get((Current_row_idx - 1), Triangle, nil); _ -> case (Current_row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Triangle) + (Current_row_idx - 1) + 1, Triangle); _ -> mochi_nth((Current_row_idx - 1) + 1, Triangle) end end)) of true -> maps:get((I - 1), (case erlang:is_map(Triangle) of true -> maps:get((Current_row_idx - 1), Triangle, nil); _ -> case (Current_row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Triangle) + (Current_row_idx - 1) + 1, Triangle); _ -> mochi_nth((Current_row_idx - 1) + 1, Triangle) end end), nil); _ -> case (I - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Triangle) of true -> maps:get((Current_row_idx - 1), Triangle, nil); _ -> case (Current_row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Triangle) + (Current_row_idx - 1) + 1, Triangle); _ -> mochi_nth((Current_row_idx - 1) + 1, Triangle) end end)) + (I - 1) + 1, (case erlang:is_map(Triangle) of true -> maps:get((Current_row_idx - 1), Triangle, nil); _ -> case (Current_row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Triangle) + (Current_row_idx - 1) + 1, Triangle); _ -> mochi_nth((Current_row_idx - 1) + 1, Triangle) end end)); _ -> mochi_nth((I - 1) + 1, (case erlang:is_map(Triangle) of true -> maps:get((Current_row_idx - 1), Triangle, nil); _ -> case (Current_row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Triangle) + (Current_row_idx - 1) + 1, Triangle); _ -> mochi_nth((Current_row_idx - 1) + 1, Triangle) end end)) end end),
            Right = (case erlang:is_map((case erlang:is_map(Triangle) of true -> maps:get((Current_row_idx - 1), Triangle, nil); _ -> case (Current_row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Triangle) + (Current_row_idx - 1) + 1, Triangle); _ -> mochi_nth((Current_row_idx - 1) + 1, Triangle) end end)) of true -> maps:get(I, (case erlang:is_map(Triangle) of true -> maps:get((Current_row_idx - 1), Triangle, nil); _ -> case (Current_row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Triangle) + (Current_row_idx - 1) + 1, Triangle); _ -> mochi_nth((Current_row_idx - 1) + 1, Triangle) end end), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Triangle) of true -> maps:get((Current_row_idx - 1), Triangle, nil); _ -> case (Current_row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Triangle) + (Current_row_idx - 1) + 1, Triangle); _ -> mochi_nth((Current_row_idx - 1) + 1, Triangle) end end)) + I + 1, (case erlang:is_map(Triangle) of true -> maps:get((Current_row_idx - 1), Triangle, nil); _ -> case (Current_row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Triangle) + (Current_row_idx - 1) + 1, Triangle); _ -> mochi_nth((Current_row_idx - 1) + 1, Triangle) end end)); _ -> mochi_nth(I + 1, (case erlang:is_map(Triangle) of true -> maps:get((Current_row_idx - 1), Triangle, nil); _ -> case (Current_row_idx - 1) < 0 of true -> mochi_nth(erlang:length(Triangle) + (Current_row_idx - 1) + 1, Triangle); _ -> mochi_nth((Current_row_idx - 1) + 1, Triangle) end end)) end end),
            Row_3 = lists:append((case Row of nil -> []; _ -> Row end), [(Left + Right)]),
            Left_2 = Left,
            Right_2 = Right,
            Row_3
    end),
            I_2 = (I + 1),
            Fun_loop(Current_row_idx, I_2, Row_4, Triangle);
        _ -> {Current_row_idx, I, Row, Triangle}
    end
end,
{Current_row_idx, I_2, Row_4, Triangle} = Fun(Current_row_idx, I, Row, Triangle),
        Row_4
    catch {return, RetCatch} -> RetCatch end.

generate_pascal_triangle(Num_rows) ->
    try
        case (Num_rows =< 0) of
        true -> throw({return, []});
        _ -> ok
    end,
        Triangle_2 = [],
        Row_idx = 0,
        Fun_2 = fun Fun_2_loop(Num_rows, Row_idx, Triangle_2) ->
    case (Row_idx < Num_rows) of
        true ->
            Row_5 = populate_current_row(Triangle_2, Row_idx),
            Triangle_3 = lists:append((case Triangle_2 of nil -> []; _ -> Triangle_2 end), [Row_5]),
            Row_idx_2 = (Row_idx + 1),
            Fun_2_loop(Num_rows, Row_idx_2, Triangle_3);
        _ -> {Num_rows, Row_idx, Triangle_2}
    end
end,
{Num_rows, Row_idx_2, Triangle_3} = Fun_2(Num_rows, Row_idx, Triangle_2),
        Triangle_3
    catch {return, RetCatch} -> RetCatch end.

row_to_string(Row_6, Total_rows, Row_idx_3) ->
    try
        Line = "",
        Spaces = ((Total_rows - Row_idx_3) - 1),
        S = 0,
        Fun_3 = fun Fun_3_loop(Line, Row_6, Row_idx_3, S, Spaces, Total_rows) ->
    case (S < Spaces) of
        true ->
            Line_2 = (Line ++ " "),
            S_2 = (S + 1),
            Fun_3_loop(Line_2, Row_6, Row_idx_3, S_2, Spaces, Total_rows);
        _ -> {Line, Row_6, Row_idx_3, S, Spaces, Total_rows}
    end
end,
{Line_2, Row_6, Row_idx_3, S_2, Spaces, Total_rows} = Fun_3(Line, Row_6, Row_idx_3, S, Spaces, Total_rows),
        C = 0,
        Fun_4 = fun Fun_4_loop(C, Line_2, Row_6, Row_idx_3, S_2, Spaces, Total_rows) ->
    case (C =< Row_idx_3) of
        true ->
            Line_3 = (Line_2 ++ mochi_str((case erlang:is_map(Row_6) of true -> maps:get(C, Row_6, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(Row_6) + C + 1, Row_6); _ -> mochi_nth(C + 1, Row_6) end end))),
            Line_5 = (case (C /= Row_idx_3) of
        true -> Line_4 = (Line_3 ++ " "),
            Line_4;
        _ -> Line_3
    end),
            C_2 = (C + 1),
            Fun_4_loop(C_2, Line_5, Row_6, Row_idx_3, S_2, Spaces, Total_rows);
        _ -> {C, Line_2, Row_6, Row_idx_3, S_2, Spaces, Total_rows}
    end
end,
{C_2, Line_5, Row_6, Row_idx_3, S_2, Spaces, Total_rows} = Fun_4(C, Line_2, Row_6, Row_idx_3, S_2, Spaces, Total_rows),
        Line_5
    catch {return, RetCatch} -> RetCatch end.

print_pascal_triangle(Num_rows_2) ->
    try
        Triangle_4 = generate_pascal_triangle(Num_rows_2),
        R = 0,
        Fun_5 = fun Fun_5_loop(Num_rows_2, R, Triangle_4) ->
    case (R < Num_rows_2) of
        true ->
            Line_6 = row_to_string((case erlang:is_map(Triangle_4) of true -> maps:get(R, Triangle_4, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Triangle_4) + R + 1, Triangle_4); _ -> mochi_nth(R + 1, Triangle_4) end end), Num_rows_2, R),
            io:format("~ts~n", [mochi_repr(Line_6)]),
            R_2 = (R + 1),
            Fun_5_loop(Num_rows_2, R_2, Triangle_4);
        _ -> {Num_rows_2, R, Triangle_4}
    end
end,
{Num_rows_2, R_2, Triangle_4} = Fun_5(Num_rows_2, R, Triangle_4),
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        print_pascal_triangle(5),
        io:format("~ts~n", [mochi_str(generate_pascal_triangle(5))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
