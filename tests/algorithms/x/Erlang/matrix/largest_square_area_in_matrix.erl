#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, update_area_of_max_square/6, largest_square_area_in_matrix_top_down/3, update_area_of_max_square_with_dp/7, largest_square_area_in_matrix_top_down_with_dp/3, largest_square_area_in_matrix_bottom_up/3, largest_square_area_in_matrix_bottom_up_space_optimization/3]).

% Generated by Mochi transpiler v0.10.67 (93362e6316)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

update_area_of_max_square(Row, Col, Rows, Cols, Mat, Largest_square_area) ->
    try
        case ((Row >= Rows) orelse (Col >= Cols)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Right = update_area_of_max_square(Row, (Col + 1), Rows, Cols, Mat, Largest_square_area),
        Diagonal = update_area_of_max_square((Row + 1), (Col + 1), Rows, Cols, Mat, Largest_square_area),
        Down = update_area_of_max_square((Row + 1), Col, Rows, Cols, Mat, Largest_square_area),
        Sub_2 = (case ((case erlang:is_map((case erlang:is_map(Mat) of true -> maps:get(Row, Mat, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Mat) + Row + 1, Mat); _ -> mochi_nth(Row + 1, Mat) end end)) of true -> maps:get(Col, (case erlang:is_map(Mat) of true -> maps:get(Row, Mat, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Mat) + Row + 1, Mat); _ -> mochi_nth(Row + 1, Mat) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat) of true -> maps:get(Row, Mat, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Mat) + Row + 1, Mat); _ -> mochi_nth(Row + 1, Mat) end end)) + Col + 1, (case erlang:is_map(Mat) of true -> maps:get(Row, Mat, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Mat) + Row + 1, Mat); _ -> mochi_nth(Row + 1, Mat) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(Mat) of true -> maps:get(Row, Mat, nil); _ -> case Row < 0 of true -> mochi_nth(erlang:length(Mat) + Row + 1, Mat); _ -> mochi_nth(Row + 1, Mat) end end)) end end) == 1) of
        true -> Sub = (1 + lists:min([Right, Diagonal, Down])),
            Largest_square_area_3 = (case (Sub > (case erlang:is_map(Largest_square_area) of true -> maps:get(0, Largest_square_area, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Largest_square_area) + 0 + 1, Largest_square_area); _ -> mochi_nth(0 + 1, Largest_square_area) end end)) of
        true -> Largest_square_area_2 = lists:sublist(Largest_square_area, 0) ++ [Sub] ++ lists:nthtail(0 + 1, Largest_square_area),
            Largest_square_area_2;
        _ -> Largest_square_area
    end),
            throw({return, Sub}),
            Largest_square_area_4 = Largest_square_area_3,
            Sub;
        _ -> throw({return, 0}),
            Largest_square_area_4 = Largest_square_area,
            nil
    end),
        nil
    catch {return, RetCatch} -> RetCatch end.

largest_square_area_in_matrix_top_down(Rows_2, Cols_2, Mat_2) ->
    try
        Largest = [0],
        update_area_of_max_square(0, 0, Rows_2, Cols_2, Mat_2, Largest),
        (case erlang:is_map(Largest) of true -> maps:get(0, Largest, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Largest) + 0 + 1, Largest); _ -> mochi_nth(0 + 1, Largest) end end)
    catch {return, RetCatch} -> RetCatch end.

update_area_of_max_square_with_dp(Row_2, Col_2, Rows_3, Cols_3, Mat_3, Dp_array, Largest_square_area_5) ->
    try
        case ((Row_2 >= Rows_3) orelse (Col_2 >= Cols_3)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case ((case erlang:is_map((case erlang:is_map(Dp_array) of true -> maps:get(Row_2, Dp_array, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Dp_array) + Row_2 + 1, Dp_array); _ -> mochi_nth(Row_2 + 1, Dp_array) end end)) of true -> maps:get(Col_2, (case erlang:is_map(Dp_array) of true -> maps:get(Row_2, Dp_array, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Dp_array) + Row_2 + 1, Dp_array); _ -> mochi_nth(Row_2 + 1, Dp_array) end end), nil); _ -> case Col_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_array) of true -> maps:get(Row_2, Dp_array, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Dp_array) + Row_2 + 1, Dp_array); _ -> mochi_nth(Row_2 + 1, Dp_array) end end)) + Col_2 + 1, (case erlang:is_map(Dp_array) of true -> maps:get(Row_2, Dp_array, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Dp_array) + Row_2 + 1, Dp_array); _ -> mochi_nth(Row_2 + 1, Dp_array) end end)); _ -> mochi_nth(Col_2 + 1, (case erlang:is_map(Dp_array) of true -> maps:get(Row_2, Dp_array, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Dp_array) + Row_2 + 1, Dp_array); _ -> mochi_nth(Row_2 + 1, Dp_array) end end)) end end) /= -1) of
        true -> throw({return, (case erlang:is_map((case erlang:is_map(Dp_array) of true -> maps:get(Row_2, Dp_array, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Dp_array) + Row_2 + 1, Dp_array); _ -> mochi_nth(Row_2 + 1, Dp_array) end end)) of true -> maps:get(Col_2, (case erlang:is_map(Dp_array) of true -> maps:get(Row_2, Dp_array, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Dp_array) + Row_2 + 1, Dp_array); _ -> mochi_nth(Row_2 + 1, Dp_array) end end), nil); _ -> case Col_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_array) of true -> maps:get(Row_2, Dp_array, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Dp_array) + Row_2 + 1, Dp_array); _ -> mochi_nth(Row_2 + 1, Dp_array) end end)) + Col_2 + 1, (case erlang:is_map(Dp_array) of true -> maps:get(Row_2, Dp_array, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Dp_array) + Row_2 + 1, Dp_array); _ -> mochi_nth(Row_2 + 1, Dp_array) end end)); _ -> mochi_nth(Col_2 + 1, (case erlang:is_map(Dp_array) of true -> maps:get(Row_2, Dp_array, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Dp_array) + Row_2 + 1, Dp_array); _ -> mochi_nth(Row_2 + 1, Dp_array) end end)) end end)});
        _ -> ok
    end,
        Right_2 = update_area_of_max_square_with_dp(Row_2, (Col_2 + 1), Rows_3, Cols_3, Mat_3, Dp_array, Largest_square_area_5),
        Diagonal_2 = update_area_of_max_square_with_dp((Row_2 + 1), (Col_2 + 1), Rows_3, Cols_3, Mat_3, Dp_array, Largest_square_area_5),
        Down_2 = update_area_of_max_square_with_dp((Row_2 + 1), Col_2, Rows_3, Cols_3, Mat_3, Dp_array, Largest_square_area_5),
        Sub_4 = (case ((case erlang:is_map((case erlang:is_map(Mat_3) of true -> maps:get(Row_2, Mat_3, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Mat_3) + Row_2 + 1, Mat_3); _ -> mochi_nth(Row_2 + 1, Mat_3) end end)) of true -> maps:get(Col_2, (case erlang:is_map(Mat_3) of true -> maps:get(Row_2, Mat_3, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Mat_3) + Row_2 + 1, Mat_3); _ -> mochi_nth(Row_2 + 1, Mat_3) end end), nil); _ -> case Col_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat_3) of true -> maps:get(Row_2, Mat_3, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Mat_3) + Row_2 + 1, Mat_3); _ -> mochi_nth(Row_2 + 1, Mat_3) end end)) + Col_2 + 1, (case erlang:is_map(Mat_3) of true -> maps:get(Row_2, Mat_3, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Mat_3) + Row_2 + 1, Mat_3); _ -> mochi_nth(Row_2 + 1, Mat_3) end end)); _ -> mochi_nth(Col_2 + 1, (case erlang:is_map(Mat_3) of true -> maps:get(Row_2, Mat_3, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Mat_3) + Row_2 + 1, Mat_3); _ -> mochi_nth(Row_2 + 1, Mat_3) end end)) end end) == 1) of
        true -> Sub_3 = (1 + lists:min([Right_2, Diagonal_2, Down_2])),
            Largest_square_area_7 = (case (Sub_3 > (case erlang:is_map(Largest_square_area_5) of true -> maps:get(0, Largest_square_area_5, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Largest_square_area_5) + 0 + 1, Largest_square_area_5); _ -> mochi_nth(0 + 1, Largest_square_area_5) end end)) of
        true -> Largest_square_area_6 = lists:sublist(Largest_square_area_5, 0) ++ [Sub_3] ++ lists:nthtail(0 + 1, Largest_square_area_5),
            Largest_square_area_6;
        _ -> Largest_square_area_5
    end),
            Dp_array_2 = lists:sublist(Dp_array, Row_2) ++ [(lists:sublist(lists:nth(Row_2 + 1, Dp_array), Col_2) ++ [Sub_3] ++ lists:nthtail(Col_2 + 1, lists:nth(Row_2 + 1, Dp_array)))] ++ lists:nthtail(Row_2 + 1, Dp_array),
            throw({return, Sub_3}),
            Dp_array_4 = Dp_array_2,
            Largest_square_area_8 = Largest_square_area_7,
            Sub_3;
        _ -> Dp_array_3 = lists:sublist(Dp_array, Row_2) ++ [(lists:sublist(lists:nth(Row_2 + 1, Dp_array), Col_2) ++ [0] ++ lists:nthtail(Col_2 + 1, lists:nth(Row_2 + 1, Dp_array)))] ++ lists:nthtail(Row_2 + 1, Dp_array),
            throw({return, Dp_array_3}),
            Dp_array_4 = Dp_array_3,
            Largest_square_area_8 = Largest_square_area_5,
            nil
    end),
        nil
    catch {return, RetCatch} -> RetCatch end.

largest_square_area_in_matrix_top_down_with_dp(Rows_4, Cols_4, Mat_4) ->
    try
        Largest_2 = [0],
        Dp_array_5 = [],
        R = 0,
        Fun_2 = fun Fun_2_loop(Cols_4, Dp_array_5, Largest_2, Mat_4, R, Rows_4) ->
    case (R < Rows_4) of
        true ->
            Row_list = [],
            C = 0,
            Fun = fun Fun_loop(C, Cols_4, Dp_array_5, Largest_2, Mat_4, R, Row_list, Rows_4) ->
    case (C < Cols_4) of
        true ->
            Row_list_2 = lists:append((case Row_list of nil -> []; _ -> Row_list end), [-1]),
            C_2 = (C + 1),
            Fun_loop(C_2, Cols_4, Dp_array_5, Largest_2, Mat_4, R, Row_list_2, Rows_4);
        _ -> {C, Cols_4, Dp_array_5, Largest_2, Mat_4, R, Row_list, Rows_4}
    end
end,
{C_2, Cols_4, Dp_array_5, Largest_2, Mat_4, R, Row_list_2, Rows_4} = Fun(C, Cols_4, Dp_array_5, Largest_2, Mat_4, R, Row_list, Rows_4),
            Dp_array_6 = lists:append((case Dp_array_5 of nil -> []; _ -> Dp_array_5 end), [Row_list_2]),
            R_2 = (R + 1),
            Fun_2_loop(Cols_4, Dp_array_6, Largest_2, Mat_4, R_2, Rows_4);
        _ -> {Cols_4, Dp_array_5, Largest_2, Mat_4, R, Rows_4}
    end
end,
{Cols_4, Dp_array_6, Largest_2, Mat_4, R_2, Rows_4} = Fun_2(Cols_4, Dp_array_5, Largest_2, Mat_4, R, Rows_4),
        update_area_of_max_square_with_dp(0, 0, Rows_4, Cols_4, Mat_4, Dp_array_6, Largest_2),
        (case erlang:is_map(Largest_2) of true -> maps:get(0, Largest_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Largest_2) + 0 + 1, Largest_2); _ -> mochi_nth(0 + 1, Largest_2) end end)
    catch {return, RetCatch} -> RetCatch end.

largest_square_area_in_matrix_bottom_up(Rows_5, Cols_5, Mat_5) ->
    try
        Dp_array_7 = [],
        R_3 = 0,
        Fun_4 = fun Fun_4_loop(Cols_5, Dp_array_7, Mat_5, R_3, Rows_5) ->
    case (R_3 =< Rows_5) of
        true ->
            Row_list_3 = [],
            C_3 = 0,
            Fun_3 = fun Fun_3_loop(C_3, Cols_5, Dp_array_7, Mat_5, R_3, Row_list_3, Rows_5) ->
    case (C_3 =< Cols_5) of
        true ->
            Row_list_4 = lists:append((case Row_list_3 of nil -> []; _ -> Row_list_3 end), [0]),
            C_4 = (C_3 + 1),
            Fun_3_loop(C_4, Cols_5, Dp_array_7, Mat_5, R_3, Row_list_4, Rows_5);
        _ -> {C_3, Cols_5, Dp_array_7, Mat_5, R_3, Row_list_3, Rows_5}
    end
end,
{C_4, Cols_5, Dp_array_7, Mat_5, R_3, Row_list_4, Rows_5} = Fun_3(C_3, Cols_5, Dp_array_7, Mat_5, R_3, Row_list_3, Rows_5),
            Dp_array_8 = lists:append((case Dp_array_7 of nil -> []; _ -> Dp_array_7 end), [Row_list_4]),
            R_4 = (R_3 + 1),
            Fun_4_loop(Cols_5, Dp_array_8, Mat_5, R_4, Rows_5);
        _ -> {Cols_5, Dp_array_7, Mat_5, R_3, Rows_5}
    end
end,
{Cols_5, Dp_array_8, Mat_5, R_4, Rows_5} = Fun_4(Cols_5, Dp_array_7, Mat_5, R_3, Rows_5),
        Largest_3 = 0,
        Row_3 = (Rows_5 - 1),
        Fun_6 = fun Fun_6_loop(Cols_5, Dp_array_8, Largest_3, Mat_5, R_4, Row_3, Rows_5) ->
    case (Row_3 >= 0) of
        true ->
            Col_3 = (Cols_5 - 1),
            Fun_5 = fun Fun_5_loop(Col_3, Cols_5, Dp_array_8, Largest_3, Mat_5, R_4, Row_3, Rows_5) ->
    case (Col_3 >= 0) of
        true ->
            Right_3 = (case erlang:is_map((case erlang:is_map(Dp_array_8) of true -> maps:get(Row_3, Dp_array_8, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + Row_3 + 1, Dp_array_8); _ -> mochi_nth(Row_3 + 1, Dp_array_8) end end)) of true -> maps:get((Col_3 + 1), (case erlang:is_map(Dp_array_8) of true -> maps:get(Row_3, Dp_array_8, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + Row_3 + 1, Dp_array_8); _ -> mochi_nth(Row_3 + 1, Dp_array_8) end end), nil); _ -> case (Col_3 + 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_array_8) of true -> maps:get(Row_3, Dp_array_8, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + Row_3 + 1, Dp_array_8); _ -> mochi_nth(Row_3 + 1, Dp_array_8) end end)) + (Col_3 + 1) + 1, (case erlang:is_map(Dp_array_8) of true -> maps:get(Row_3, Dp_array_8, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + Row_3 + 1, Dp_array_8); _ -> mochi_nth(Row_3 + 1, Dp_array_8) end end)); _ -> mochi_nth((Col_3 + 1) + 1, (case erlang:is_map(Dp_array_8) of true -> maps:get(Row_3, Dp_array_8, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + Row_3 + 1, Dp_array_8); _ -> mochi_nth(Row_3 + 1, Dp_array_8) end end)) end end),
            Diagonal_3 = (case erlang:is_map((case erlang:is_map(Dp_array_8) of true -> maps:get((Row_3 + 1), Dp_array_8, nil); _ -> case (Row_3 + 1) < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + (Row_3 + 1) + 1, Dp_array_8); _ -> mochi_nth((Row_3 + 1) + 1, Dp_array_8) end end)) of true -> maps:get((Col_3 + 1), (case erlang:is_map(Dp_array_8) of true -> maps:get((Row_3 + 1), Dp_array_8, nil); _ -> case (Row_3 + 1) < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + (Row_3 + 1) + 1, Dp_array_8); _ -> mochi_nth((Row_3 + 1) + 1, Dp_array_8) end end), nil); _ -> case (Col_3 + 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_array_8) of true -> maps:get((Row_3 + 1), Dp_array_8, nil); _ -> case (Row_3 + 1) < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + (Row_3 + 1) + 1, Dp_array_8); _ -> mochi_nth((Row_3 + 1) + 1, Dp_array_8) end end)) + (Col_3 + 1) + 1, (case erlang:is_map(Dp_array_8) of true -> maps:get((Row_3 + 1), Dp_array_8, nil); _ -> case (Row_3 + 1) < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + (Row_3 + 1) + 1, Dp_array_8); _ -> mochi_nth((Row_3 + 1) + 1, Dp_array_8) end end)); _ -> mochi_nth((Col_3 + 1) + 1, (case erlang:is_map(Dp_array_8) of true -> maps:get((Row_3 + 1), Dp_array_8, nil); _ -> case (Row_3 + 1) < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + (Row_3 + 1) + 1, Dp_array_8); _ -> mochi_nth((Row_3 + 1) + 1, Dp_array_8) end end)) end end),
            Bottom = (case erlang:is_map((case erlang:is_map(Dp_array_8) of true -> maps:get((Row_3 + 1), Dp_array_8, nil); _ -> case (Row_3 + 1) < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + (Row_3 + 1) + 1, Dp_array_8); _ -> mochi_nth((Row_3 + 1) + 1, Dp_array_8) end end)) of true -> maps:get(Col_3, (case erlang:is_map(Dp_array_8) of true -> maps:get((Row_3 + 1), Dp_array_8, nil); _ -> case (Row_3 + 1) < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + (Row_3 + 1) + 1, Dp_array_8); _ -> mochi_nth((Row_3 + 1) + 1, Dp_array_8) end end), nil); _ -> case Col_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Dp_array_8) of true -> maps:get((Row_3 + 1), Dp_array_8, nil); _ -> case (Row_3 + 1) < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + (Row_3 + 1) + 1, Dp_array_8); _ -> mochi_nth((Row_3 + 1) + 1, Dp_array_8) end end)) + Col_3 + 1, (case erlang:is_map(Dp_array_8) of true -> maps:get((Row_3 + 1), Dp_array_8, nil); _ -> case (Row_3 + 1) < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + (Row_3 + 1) + 1, Dp_array_8); _ -> mochi_nth((Row_3 + 1) + 1, Dp_array_8) end end)); _ -> mochi_nth(Col_3 + 1, (case erlang:is_map(Dp_array_8) of true -> maps:get((Row_3 + 1), Dp_array_8, nil); _ -> case (Row_3 + 1) < 0 of true -> mochi_nth(erlang:length(Dp_array_8) + (Row_3 + 1) + 1, Dp_array_8); _ -> mochi_nth((Row_3 + 1) + 1, Dp_array_8) end end)) end end),
            Value_2 = (case ((case erlang:is_map((case erlang:is_map(Mat_5) of true -> maps:get(Row_3, Mat_5, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Mat_5) + Row_3 + 1, Mat_5); _ -> mochi_nth(Row_3 + 1, Mat_5) end end)) of true -> maps:get(Col_3, (case erlang:is_map(Mat_5) of true -> maps:get(Row_3, Mat_5, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Mat_5) + Row_3 + 1, Mat_5); _ -> mochi_nth(Row_3 + 1, Mat_5) end end), nil); _ -> case Col_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat_5) of true -> maps:get(Row_3, Mat_5, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Mat_5) + Row_3 + 1, Mat_5); _ -> mochi_nth(Row_3 + 1, Mat_5) end end)) + Col_3 + 1, (case erlang:is_map(Mat_5) of true -> maps:get(Row_3, Mat_5, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Mat_5) + Row_3 + 1, Mat_5); _ -> mochi_nth(Row_3 + 1, Mat_5) end end)); _ -> mochi_nth(Col_3 + 1, (case erlang:is_map(Mat_5) of true -> maps:get(Row_3, Mat_5, nil); _ -> case Row_3 < 0 of true -> mochi_nth(erlang:length(Mat_5) + Row_3 + 1, Mat_5); _ -> mochi_nth(Row_3 + 1, Mat_5) end end)) end end) == 1) of
        true -> Value = (1 + lists:min([Right_3, Diagonal_3, Bottom])),
            Dp_array_9 = lists:sublist(Dp_array_8, Row_3) ++ [(lists:sublist(lists:nth(Row_3 + 1, Dp_array_8), Col_3) ++ [Value] ++ lists:nthtail(Col_3 + 1, lists:nth(Row_3 + 1, Dp_array_8)))] ++ lists:nthtail(Row_3 + 1, Dp_array_8),
            Largest_5 = (case (Value > Largest_3) of
        true -> Largest_4 = Value,
            Largest_4;
        _ -> Largest_3
    end),
            Dp_array_11 = Dp_array_9,
            Largest_6 = Largest_5,
            Value;
        _ -> Dp_array_10 = lists:sublist(Dp_array_8, Row_3) ++ [(lists:sublist(lists:nth(Row_3 + 1, Dp_array_8), Col_3) ++ [0] ++ lists:nthtail(Col_3 + 1, lists:nth(Row_3 + 1, Dp_array_8)))] ++ lists:nthtail(Row_3 + 1, Dp_array_8),
            Dp_array_11 = Dp_array_10,
            Largest_6 = Largest_3,
            nil
    end),
            Col_4 = (Col_3 - 1),
            Fun_5_loop(Col_4, Cols_5, Dp_array_11, Largest_6, Mat_5, R_4, Row_3, Rows_5);
        _ -> {Col_3, Cols_5, Dp_array_8, Largest_3, Mat_5, R_4, Row_3, Rows_5}
    end
end,
{Col_4, Cols_5, Dp_array_11, Largest_6, Mat_5, R_4, Row_3, Rows_5} = Fun_5(Col_3, Cols_5, Dp_array_8, Largest_3, Mat_5, R_4, Row_3, Rows_5),
            Row_4 = (Row_3 - 1),
            Fun_6_loop(Cols_5, Dp_array_11, Largest_6, Mat_5, R_4, Row_4, Rows_5);
        _ -> {Cols_5, Dp_array_8, Largest_3, Mat_5, R_4, Row_3, Rows_5}
    end
end,
{Cols_5, Dp_array_11, Largest_6, Mat_5, R_4, Row_4, Rows_5} = Fun_6(Cols_5, Dp_array_8, Largest_3, Mat_5, R_4, Row_3, Rows_5),
        Largest_6
    catch {return, RetCatch} -> RetCatch end.

largest_square_area_in_matrix_bottom_up_space_optimization(Rows_6, Cols_6, Mat_6) ->
    try
        Current_row = [],
        I = 0,
        Fun_7 = fun Fun_7_loop(Cols_6, Current_row, I, Mat_6, Rows_6) ->
    case (I =< Cols_6) of
        true ->
            Current_row_2 = lists:append((case Current_row of nil -> []; _ -> Current_row end), [0]),
            I_2 = (I + 1),
            Fun_7_loop(Cols_6, Current_row_2, I_2, Mat_6, Rows_6);
        _ -> {Cols_6, Current_row, I, Mat_6, Rows_6}
    end
end,
{Cols_6, Current_row_2, I_2, Mat_6, Rows_6} = Fun_7(Cols_6, Current_row, I, Mat_6, Rows_6),
        Next_row = [],
        J = 0,
        Fun_8 = fun Fun_8_loop(Cols_6, Current_row_2, I_2, J, Mat_6, Next_row, Rows_6) ->
    case (J =< Cols_6) of
        true ->
            Next_row_2 = lists:append((case Next_row of nil -> []; _ -> Next_row end), [0]),
            J_2 = (J + 1),
            Fun_8_loop(Cols_6, Current_row_2, I_2, J_2, Mat_6, Next_row_2, Rows_6);
        _ -> {Cols_6, Current_row_2, I_2, J, Mat_6, Next_row, Rows_6}
    end
end,
{Cols_6, Current_row_2, I_2, J_2, Mat_6, Next_row_2, Rows_6} = Fun_8(Cols_6, Current_row_2, I_2, J, Mat_6, Next_row, Rows_6),
        Largest_7 = 0,
        Row_5 = (Rows_6 - 1),
        Fun_11 = fun Fun_11_loop(Cols_6, Current_row_2, I_2, J_2, Largest_7, Mat_6, Next_row_2, Row_5, Rows_6) ->
    case (Row_5 >= 0) of
        true ->
            Col_5 = (Cols_6 - 1),
            Fun_9 = fun Fun_9_loop(Col_5, Cols_6, Current_row_2, I_2, J_2, Largest_7, Mat_6, Next_row_2, Row_5, Rows_6) ->
    case (Col_5 >= 0) of
        true ->
            Right_4 = (case erlang:is_map(Current_row_2) of true -> maps:get((Col_5 + 1), Current_row_2, nil); _ -> case (Col_5 + 1) < 0 of true -> mochi_nth(erlang:length(Current_row_2) + (Col_5 + 1) + 1, Current_row_2); _ -> mochi_nth((Col_5 + 1) + 1, Current_row_2) end end),
            Diagonal_4 = (case erlang:is_map(Next_row_2) of true -> maps:get((Col_5 + 1), Next_row_2, nil); _ -> case (Col_5 + 1) < 0 of true -> mochi_nth(erlang:length(Next_row_2) + (Col_5 + 1) + 1, Next_row_2); _ -> mochi_nth((Col_5 + 1) + 1, Next_row_2) end end),
            Bottom_2 = (case erlang:is_map(Next_row_2) of true -> maps:get(Col_5, Next_row_2, nil); _ -> case Col_5 < 0 of true -> mochi_nth(erlang:length(Next_row_2) + Col_5 + 1, Next_row_2); _ -> mochi_nth(Col_5 + 1, Next_row_2) end end),
            Value_4 = (case ((case erlang:is_map((case erlang:is_map(Mat_6) of true -> maps:get(Row_5, Mat_6, nil); _ -> case Row_5 < 0 of true -> mochi_nth(erlang:length(Mat_6) + Row_5 + 1, Mat_6); _ -> mochi_nth(Row_5 + 1, Mat_6) end end)) of true -> maps:get(Col_5, (case erlang:is_map(Mat_6) of true -> maps:get(Row_5, Mat_6, nil); _ -> case Row_5 < 0 of true -> mochi_nth(erlang:length(Mat_6) + Row_5 + 1, Mat_6); _ -> mochi_nth(Row_5 + 1, Mat_6) end end), nil); _ -> case Col_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat_6) of true -> maps:get(Row_5, Mat_6, nil); _ -> case Row_5 < 0 of true -> mochi_nth(erlang:length(Mat_6) + Row_5 + 1, Mat_6); _ -> mochi_nth(Row_5 + 1, Mat_6) end end)) + Col_5 + 1, (case erlang:is_map(Mat_6) of true -> maps:get(Row_5, Mat_6, nil); _ -> case Row_5 < 0 of true -> mochi_nth(erlang:length(Mat_6) + Row_5 + 1, Mat_6); _ -> mochi_nth(Row_5 + 1, Mat_6) end end)); _ -> mochi_nth(Col_5 + 1, (case erlang:is_map(Mat_6) of true -> maps:get(Row_5, Mat_6, nil); _ -> case Row_5 < 0 of true -> mochi_nth(erlang:length(Mat_6) + Row_5 + 1, Mat_6); _ -> mochi_nth(Row_5 + 1, Mat_6) end end)) end end) == 1) of
        true -> Value_3 = (1 + lists:min([Right_4, Diagonal_4, Bottom_2])),
            Current_row_3 = lists:sublist(Current_row_2, Col_5) ++ [Value_3] ++ lists:nthtail(Col_5 + 1, Current_row_2),
            Largest_9 = (case (Value_3 > Largest_7) of
        true -> Largest_8 = Value_3,
            Largest_8;
        _ -> Largest_7
    end),
            Current_row_5 = Current_row_3,
            Largest_10 = Largest_9,
            Value_3;
        _ -> Current_row_4 = lists:sublist(Current_row_2, Col_5) ++ [0] ++ lists:nthtail(Col_5 + 1, Current_row_2),
            Current_row_5 = Current_row_4,
            Largest_10 = Largest_7,
            nil
    end),
            Col_6 = (Col_5 - 1),
            Fun_9_loop(Col_6, Cols_6, Current_row_5, I_2, J_2, Largest_10, Mat_6, Next_row_2, Row_5, Rows_6);
        _ -> {Col_5, Cols_6, Current_row_2, I_2, J_2, Largest_7, Mat_6, Next_row_2, Row_5, Rows_6}
    end
end,
{Col_6, Cols_6, Current_row_5, I_2, J_2, Largest_10, Mat_6, Next_row_2, Row_5, Rows_6} = Fun_9(Col_5, Cols_6, Current_row_2, I_2, J_2, Largest_7, Mat_6, Next_row_2, Row_5, Rows_6),
            Next_row_3 = Current_row_5,
            Current_row_6 = [],
            T = 0,
            Fun_10 = fun Fun_10_loop(Col_6, Cols_6, Current_row_6, I_2, J_2, Largest_10, Mat_6, Next_row_3, Row_5, Rows_6, T) ->
    case (T =< Cols_6) of
        true ->
            Current_row_7 = lists:append((case Current_row_6 of nil -> []; _ -> Current_row_6 end), [0]),
            T_2 = (T + 1),
            Fun_10_loop(Col_6, Cols_6, Current_row_7, I_2, J_2, Largest_10, Mat_6, Next_row_3, Row_5, Rows_6, T_2);
        _ -> {Col_6, Cols_6, Current_row_6, I_2, J_2, Largest_10, Mat_6, Next_row_3, Row_5, Rows_6, T}
    end
end,
{Col_6, Cols_6, Current_row_7, I_2, J_2, Largest_10, Mat_6, Next_row_3, Row_5, Rows_6, T_2} = Fun_10(Col_6, Cols_6, Current_row_6, I_2, J_2, Largest_10, Mat_6, Next_row_3, Row_5, Rows_6, T),
            Row_6 = (Row_5 - 1),
            Fun_11_loop(Cols_6, Current_row_7, I_2, J_2, Largest_10, Mat_6, Next_row_3, Row_6, Rows_6);
        _ -> {Cols_6, Current_row_2, I_2, J_2, Largest_7, Mat_6, Next_row_2, Row_5, Rows_6}
    end
end,
{Cols_6, Current_row_7, I_2, J_2, Largest_10, Mat_6, Next_row_3, Row_6, Rows_6} = Fun_11(Cols_6, Current_row_2, I_2, J_2, Largest_7, Mat_6, Next_row_2, Row_5, Rows_6),
        Largest_10
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('sample', [[1, 1], [1, 1]]),
    io:format("~ts~n", [mochi_repr(largest_square_area_in_matrix_top_down(2, 2, erlang:get('sample')))]),
    io:format("~ts~n", [mochi_repr(largest_square_area_in_matrix_top_down_with_dp(2, 2, erlang:get('sample')))]),
    io:format("~ts~n", [mochi_repr(largest_square_area_in_matrix_bottom_up(2, 2, erlang:get('sample')))]),
    io:format("~ts~n", [mochi_repr(largest_square_area_in_matrix_bottom_up_space_optimization(2, 2, erlang:get('sample')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
