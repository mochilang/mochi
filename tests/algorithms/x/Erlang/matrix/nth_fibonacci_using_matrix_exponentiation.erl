#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, multiply/2, identity/1, nth_fibonacci_matrix/1, nth_fibonacci_bruteforce/1, parse_number/1, main/0]).

% Generated by Mochi transpiler v0.10.67 (7ab215672a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

multiply(Matrix_a, Matrix_b) ->
    try
        N = erlang:length(Matrix_a),
        Matrix_c = [],
        I = 0,
        Fun_3 = fun Fun_3_loop(I, Matrix_a, Matrix_b, Matrix_c, N) ->
    case (I < N) of
        true ->
            Row = [],
            J = 0,
            Fun_2 = fun Fun_2_loop(I, J, Matrix_a, Matrix_b, Matrix_c, N, Row) ->
    case (J < N) of
        true ->
            Val = 0,
            K = 0,
            Fun = fun Fun_loop(I, J, K, Matrix_a, Matrix_b, Matrix_c, N, Row, Val) ->
    case (K < N) of
        true ->
            Val_2 = (Val + ((case erlang:is_map((case erlang:is_map(Matrix_a) of true -> maps:get(I, Matrix_a, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix_a) + I + 1, Matrix_a); _ -> mochi_nth(I + 1, Matrix_a) end end)) of true -> maps:get(K, (case erlang:is_map(Matrix_a) of true -> maps:get(I, Matrix_a, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix_a) + I + 1, Matrix_a); _ -> mochi_nth(I + 1, Matrix_a) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_a) of true -> maps:get(I, Matrix_a, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix_a) + I + 1, Matrix_a); _ -> mochi_nth(I + 1, Matrix_a) end end)) + K + 1, (case erlang:is_map(Matrix_a) of true -> maps:get(I, Matrix_a, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix_a) + I + 1, Matrix_a); _ -> mochi_nth(I + 1, Matrix_a) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(Matrix_a) of true -> maps:get(I, Matrix_a, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Matrix_a) + I + 1, Matrix_a); _ -> mochi_nth(I + 1, Matrix_a) end end)) end end) * (case erlang:is_map((case erlang:is_map(Matrix_b) of true -> maps:get(K, Matrix_b, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Matrix_b) + K + 1, Matrix_b); _ -> mochi_nth(K + 1, Matrix_b) end end)) of true -> maps:get(J, (case erlang:is_map(Matrix_b) of true -> maps:get(K, Matrix_b, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Matrix_b) + K + 1, Matrix_b); _ -> mochi_nth(K + 1, Matrix_b) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Matrix_b) of true -> maps:get(K, Matrix_b, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Matrix_b) + K + 1, Matrix_b); _ -> mochi_nth(K + 1, Matrix_b) end end)) + J + 1, (case erlang:is_map(Matrix_b) of true -> maps:get(K, Matrix_b, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Matrix_b) + K + 1, Matrix_b); _ -> mochi_nth(K + 1, Matrix_b) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Matrix_b) of true -> maps:get(K, Matrix_b, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Matrix_b) + K + 1, Matrix_b); _ -> mochi_nth(K + 1, Matrix_b) end end)) end end))),
            K_2 = (K + 1),
            Fun_loop(I, J, K_2, Matrix_a, Matrix_b, Matrix_c, N, Row, Val_2);
        _ -> {I, J, K, Matrix_a, Matrix_b, Matrix_c, N, Row, Val}
    end
end,
{I, J, K_2, Matrix_a, Matrix_b, Matrix_c, N, Row, Val_2} = Fun(I, J, K, Matrix_a, Matrix_b, Matrix_c, N, Row, Val),
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Val_2]),
            J_2 = (J + 1),
            Fun_2_loop(I, J_2, Matrix_a, Matrix_b, Matrix_c, N, Row_2);
        _ -> {I, J, Matrix_a, Matrix_b, Matrix_c, N, Row}
    end
end,
{I, J_2, Matrix_a, Matrix_b, Matrix_c, N, Row_2} = Fun_2(I, J, Matrix_a, Matrix_b, Matrix_c, N, Row),
            Matrix_c_2 = lists:append((case Matrix_c of nil -> []; _ -> Matrix_c end), [Row_2]),
            I_2 = (I + 1),
            Fun_3_loop(I_2, Matrix_a, Matrix_b, Matrix_c_2, N);
        _ -> {I, Matrix_a, Matrix_b, Matrix_c, N}
    end
end,
{I_2, Matrix_a, Matrix_b, Matrix_c_2, N} = Fun_3(I, Matrix_a, Matrix_b, Matrix_c, N),
        Matrix_c_2
    catch {return, RetCatch} -> RetCatch end.

identity(N_2) ->
    try
        Res = [],
        I_3 = 0,
        Fun_5 = fun Fun_5_loop(I_3, N_2, Res) ->
    case (I_3 < N_2) of
        true ->
            Row_3 = [],
            J_3 = 0,
            Fun_4 = fun Fun_4_loop(I_3, J_3, N_2, Res, Row_3) ->
    case (J_3 < N_2) of
        true ->
            Row_6 = (case (I_3 == J_3) of
        true -> Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [1]),
            Row_4;
        _ -> Row_5 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [0]),
            Row_5
    end),
            J_4 = (J_3 + 1),
            Fun_4_loop(I_3, J_4, N_2, Res, Row_6);
        _ -> {I_3, J_3, N_2, Res, Row_3}
    end
end,
{I_3, J_4, N_2, Res, Row_6} = Fun_4(I_3, J_3, N_2, Res, Row_3),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Row_6]),
            I_4 = (I_3 + 1),
            Fun_5_loop(I_4, N_2, Res_2);
        _ -> {I_3, N_2, Res}
    end
end,
{I_4, N_2, Res_2} = Fun_5(I_3, N_2, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

nth_fibonacci_matrix(N_3) ->
    try
        case (N_3 =< 1) of
        true -> throw({return, N_3});
        _ -> ok
    end,
        Res_matrix = identity(2),
        Fib_matrix = [[1, 1], [1, 0]],
        M = (N_3 - 1),
        Fun_6 = fun Fun_6_loop(Fib_matrix, M, N_3, Res_matrix) ->
    case (M > 0) of
        true ->
            Res_matrix_3 = (case (mochi_mod(M, 2) == 1) of
        true -> Res_matrix_2 = multiply(Res_matrix, Fib_matrix),
            Res_matrix_2;
        _ -> Res_matrix
    end),
            Fib_matrix_2 = multiply(Fib_matrix, Fib_matrix),
            M_2 = mochi_idiv(M, 2),
            Fun_6_loop(Fib_matrix_2, M_2, N_3, Res_matrix_3);
        _ -> {Fib_matrix, M, N_3, Res_matrix}
    end
end,
{Fib_matrix_2, M_2, N_3, Res_matrix_3} = Fun_6(Fib_matrix, M, N_3, Res_matrix),
        (case erlang:is_map((case erlang:is_map(Res_matrix_3) of true -> maps:get(0, Res_matrix_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res_matrix_3) + 0 + 1, Res_matrix_3); _ -> mochi_nth(0 + 1, Res_matrix_3) end end)) of true -> maps:get(0, (case erlang:is_map(Res_matrix_3) of true -> maps:get(0, Res_matrix_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res_matrix_3) + 0 + 1, Res_matrix_3); _ -> mochi_nth(0 + 1, Res_matrix_3) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Res_matrix_3) of true -> maps:get(0, Res_matrix_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res_matrix_3) + 0 + 1, Res_matrix_3); _ -> mochi_nth(0 + 1, Res_matrix_3) end end)) + 0 + 1, (case erlang:is_map(Res_matrix_3) of true -> maps:get(0, Res_matrix_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res_matrix_3) + 0 + 1, Res_matrix_3); _ -> mochi_nth(0 + 1, Res_matrix_3) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Res_matrix_3) of true -> maps:get(0, Res_matrix_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Res_matrix_3) + 0 + 1, Res_matrix_3); _ -> mochi_nth(0 + 1, Res_matrix_3) end end)) end end)
    catch {return, RetCatch} -> RetCatch end.

nth_fibonacci_bruteforce(N_4) ->
    try
        case (N_4 =< 1) of
        true -> throw({return, N_4});
        _ -> ok
    end,
        Fib0 = 0,
        Fib1 = 1,
        I_5 = 2,
        Fun_7 = fun Fun_7_loop(Fib0, Fib1, I_5, N_4) ->
    case (I_5 =< N_4) of
        true ->
            Next = (Fib0 + Fib1),
            Fib0_2 = Fib1,
            Fib1_2 = Next,
            I_6 = (I_5 + 1),
            Fun_7_loop(Fib0_2, Fib1_2, I_6, N_4);
        _ -> {Fib0, Fib1, I_5, N_4}
    end
end,
{Fib0_2, Fib1_2, I_6, N_4} = Fun_7(Fib0, Fib1, I_5, N_4),
        Fib1_2
    catch {return, RetCatch} -> RetCatch end.

parse_number(S) ->
    try
        Result = 0,
        I_7 = 0,
        Fun_8 = fun Fun_8_loop(I_7, Result, S) ->
    case (I_7 < erlang:length(S)) of
        true ->
            Ch = string:substr(S, I_7 + 1, ((I_7 + 1) - I_7)),
            Result_3 = (case ((Ch >= "0") andalso (Ch =< "9")) of
        true -> Result_2 = ((Result * 10) + mochi_to_int(Ch)),
            Result_2;
        _ -> Result
    end),
            I_8 = (I_7 + 1),
            Fun_8_loop(I_8, Result_3, S);
        _ -> {I_7, Result, S}
    end
end,
{I_8, Result_3, S} = Fun_8(I_7, Result, S),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Ordinals = ["0th", "1st", "2nd", "3rd", "10th", "100th", "1000th"],
        I_9 = 0,
        Fun_9 = fun Fun_9_loop(I_9, Ordinals) ->
    case (I_9 < erlang:length(Ordinals)) of
        true ->
            Ordinal = (case erlang:is_map(Ordinals) of true -> maps:get(I_9, Ordinals, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Ordinals) + I_9 + 1, Ordinals); _ -> mochi_nth(I_9 + 1, Ordinals) end end),
            N_5 = parse_number(Ordinal),
            Msg = ((((Ordinal ++ " fibonacci number using matrix exponentiation is ") ++ mochi_str(nth_fibonacci_matrix(N_5))) ++ " and using bruteforce is ") ++ mochi_str(nth_fibonacci_bruteforce(N_5))),
            io:format("~ts~n", [mochi_repr(Msg)]),
            I_10 = (I_9 + 1),
            Fun_9_loop(I_10, Ordinals);
        _ -> {I_9, Ordinals}
    end
end,
{I_10, Ordinals} = Fun_9(I_9, Ordinals),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
