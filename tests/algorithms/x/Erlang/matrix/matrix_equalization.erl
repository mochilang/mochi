#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, unique/1, array_equalization/2]).

% Generated by Mochi transpiler v0.10.61 (c45765bf43) on 2025-08-08 15:36 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

unique(Nums) ->
    try
        Res = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Nums, Res) ->
    case (I < erlang:length(Nums)) of
        true ->
            try
                V = (case erlang:is_map(Nums) of true -> maps:get(I, Nums, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Nums) + I + 1, Nums); _ -> mochi_nth(I + 1, Nums) end end),
                Found = false,
                J = 0,
                Fun = fun Fun_loop(Found, I, J, Nums, Res, V) ->
    case (J < erlang:length(Res)) of
        true ->
            try
                case ((case erlang:is_map(Res) of true -> maps:get(J, Res, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Res) + J + 1, Res); _ -> mochi_nth(J + 1, Res) end end) == V) of
        true -> Found_2 = true,
            throw({break, Found_2, I, J, Nums, Res, V}),
            Found_3 = Found_2;
        _ -> Found_3 = Found
    end,
                J_2 = (J + 1),
                Fun_loop(Found_3, I, J_2, Nums, Res, V)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_loop(C0, C1, C2, C3, C4, C5);
                {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5}
            end;
        _ -> {Found, I, J, Nums, Res, V}
    end
end,
{Found_3, I, J_2, Nums, Res, V} = Fun(Found, I, J, Nums, Res, V),
                case mochi_not(Found_3) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [V]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
                I_2 = (I + 1),
                Fun_2_loop(I_2, Nums, Res_3)
            catch
                {continue, C0, C1, C2} -> Fun_2_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {I, Nums, Res}
    end
end,
{I_2, Nums, Res_3} = Fun_2(I, Nums, Res),
        Res_3
    catch {return, Ret} -> Ret end.

array_equalization(Vector, Step_size) ->
    try
        case (Step_size =< 0) of
        true -> error("Step size must be positive and non-zero.");
        _ -> ok
    end,
        Elems = unique(Vector),
        Min_updates = erlang:length(Vector),
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Elems, I_3, Min_updates, Step_size, Vector) ->
    case (I_3 < erlang:length(Elems)) of
        true ->
            Target = (case erlang:is_map(Elems) of true -> maps:get(I_3, Elems, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Elems) + I_3 + 1, Elems); _ -> mochi_nth(I_3 + 1, Elems) end end),
            Idx = 0,
            Updates = 0,
            Fun_3 = fun Fun_3_loop(Elems, I_3, Idx, Min_updates, Step_size, Target, Updates, Vector) ->
    case (Idx < erlang:length(Vector)) of
        true ->
            case ((case erlang:is_map(Vector) of true -> maps:get(Idx, Vector, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Vector) + Idx + 1, Vector); _ -> mochi_nth(Idx + 1, Vector) end end) /= Target) of
        true -> Updates_2 = (Updates + 1),
            Idx_2 = (Idx + Step_size),
            Idx_4 = Idx_2,
            Updates_3 = Updates_2;
        _ -> Idx_3 = (Idx + 1),
            Idx_4 = Idx_3,
            Updates_3 = Updates
    end,
            Fun_3_loop(Elems, I_3, Idx_4, Min_updates, Step_size, Target, Updates_3, Vector);
        _ -> {Elems, I_3, Idx, Min_updates, Step_size, Target, Updates, Vector}
    end
end,
{Elems, I_3, Idx_4, Min_updates, Step_size, Target, Updates_3, Vector} = Fun_3(Elems, I_3, Idx, Min_updates, Step_size, Target, Updates, Vector),
            case (Updates_3 < Min_updates) of
        true -> Min_updates_2 = Updates_3,
            Min_updates_3 = Min_updates_2;
        _ -> Min_updates_3 = Min_updates
    end,
            I_4 = (I_3 + 1),
            Fun_4_loop(Elems, I_4, Min_updates_3, Step_size, Vector);
        _ -> {Elems, I_3, Min_updates, Step_size, Vector}
    end
end,
{Elems, I_4, Min_updates_3, Step_size, Vector} = Fun_4(Elems, I_3, Min_updates, Step_size, Vector),
        Min_updates_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(array_equalization([1, 1, 6, 2, 4, 6, 5, 1, 7, 2, 2, 1, 7, 2, 2], 4))]),
    io:format("~ts~n", [mochi_str(array_equalization([22, 81, 88, 71, 22, 81, 632, 81, 81, 22, 92], 2))]),
    io:format("~ts~n", [mochi_str(array_equalization([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 5))]),
    io:format("~ts~n", [mochi_str(array_equalization([22, 22, 22, 33, 33, 33], 2))]),
    io:format("~ts~n", [mochi_str(array_equalization([1, 2, 3], 2147483647))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
