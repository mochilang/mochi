#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, bubble_sort/1, median/1]).

% Generated by Mochi transpiler v0.10.67 (7ab215672a)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

bubble_sort(A) ->
    try
        Arr = A,
        N = erlang:length(Arr),
        I = 0,
        Fun_2 = fun Fun_2_loop(A, Arr, I, N) ->
    case (I < N) of
        true ->
            J = 0,
            Fun = fun Fun_loop(A, Arr, I, J, N) ->
    case ((J + 1) < (N - I)) of
        true ->
            Temp_2 = (case ((case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end) > (case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> mochi_nth((J + 1) + 1, Arr) end end)) of
        true -> Temp = (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr) + J + 1, Arr); _ -> mochi_nth(J + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, J) ++ [(case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> mochi_nth((J + 1) + 1, Arr) end end)] ++ lists:nthtail(J + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, (J + 1)) ++ [Temp] ++ lists:nthtail((J + 1) + 1, Arr_2),
            Arr_4 = Arr_3,
            Temp;
        _ -> Arr_4 = Arr,
            nil
    end),
            J_2 = (J + 1),
            Fun_loop(A, Arr_4, I, J_2, N);
        _ -> {A, Arr, I, J, N}
    end
end,
{A, Arr_4, I, J_2, N} = Fun(A, Arr, I, J, N),
            I_2 = (I + 1),
            Fun_2_loop(A, Arr_4, I_2, N);
        _ -> {A, Arr, I, N}
    end
end,
{A, Arr_4, I_2, N} = Fun_2(A, Arr, I, N),
        Arr_4
    catch {return, RetCatch} -> RetCatch end.

median(Matrix) ->
    try
        Linear = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(I_3, Linear, Matrix) ->
    case (I_3 < erlang:length(Matrix)) of
        true ->
            Row = (case erlang:is_map(Matrix) of true -> maps:get(I_3, Matrix, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Matrix) + I_3 + 1, Matrix); _ -> mochi_nth(I_3 + 1, Matrix) end end),
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(I_3, J_3, Linear, Matrix, Row) ->
    case (J_3 < erlang:length(Row)) of
        true ->
            Linear_2 = lists:append((case Linear of nil -> []; _ -> Linear end), [(case erlang:is_map(Row) of true -> maps:get(J_3, Row, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Row) + J_3 + 1, Row); _ -> mochi_nth(J_3 + 1, Row) end end)]),
            J_4 = (J_3 + 1),
            Fun_3_loop(I_3, J_4, Linear_2, Matrix, Row);
        _ -> {I_3, J_3, Linear, Matrix, Row}
    end
end,
{I_3, J_4, Linear_2, Matrix, Row} = Fun_3(I_3, J_3, Linear, Matrix, Row),
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, Linear_2, Matrix);
        _ -> {I_3, Linear, Matrix}
    end
end,
{I_4, Linear_2, Matrix} = Fun_4(I_3, Linear, Matrix),
        Sorted = bubble_sort(Linear_2),
        Mid = mochi_safe_div((erlang:length(Sorted) - 1), 2),
        (case erlang:is_map(Sorted) of true -> maps:get(Mid, Sorted, nil); _ -> case Mid < 0 of true -> mochi_nth(erlang:length(Sorted) + Mid + 1, Sorted); _ -> mochi_nth(Mid + 1, Sorted) end end)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('matrix1', [[1, 3, 5], [2, 6, 9], [3, 6, 9]]),
    io:format("~ts~n", [mochi_str(median(erlang:get('matrix1')))]),
    erlang:put('matrix2', [[1, 2, 3], [4, 5, 6]]),
    io:format("~ts~n", [mochi_str(median(erlang:get('matrix2')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
