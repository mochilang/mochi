#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, check_matrix/1, add/2, subtract/2, scalar_multiply/2, multiply/2, identity/1, transpose/1, main/0]).

% Generated by Mochi transpiler v0.10.66 (48422bb2d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

check_matrix(Mat) ->
    try
        case ((erlang:length(Mat) < 2) orelse (erlang:length((case erlang:is_map(Mat) of true -> maps:get(0, Mat, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Mat) + 0 + 1, Mat); _ -> mochi_nth(0 + 1, Mat) end end)) < 2)) of
        true -> erlang:error({panic, "Expected a matrix with at least 2x2 dimensions"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

add(A, B) ->
    try
        check_matrix(A),
        check_matrix(B),
        case ((erlang:length(A) /= erlang:length(B)) orelse (erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)) /= erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B) + 0 + 1, B); _ -> mochi_nth(0 + 1, B) end end)))) of
        true -> erlang:error({panic, "Matrices must have the same dimensions"});
        _ -> ok
    end,
        Rows = erlang:length(A),
        Cols = erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A) + 0 + 1, A); _ -> mochi_nth(0 + 1, A) end end)),
        Result = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(A, B, Cols, I, Result, Rows) ->
    case (I < Rows) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(A, B, Cols, I, J, Result, Row, Rows) ->
    case (J < Cols) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(A) + I + 1, A); _ -> mochi_nth(I + 1, A) end end)) of true -> maps:get(J, (case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(A) + I + 1, A); _ -> mochi_nth(I + 1, A) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(A) + I + 1, A); _ -> mochi_nth(I + 1, A) end end)) + J + 1, (case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(A) + I + 1, A); _ -> mochi_nth(I + 1, A) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(A) + I + 1, A); _ -> mochi_nth(I + 1, A) end end)) end end) + (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(I, B, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(B) + I + 1, B); _ -> mochi_nth(I + 1, B) end end)) of true -> maps:get(J, (case erlang:is_map(B) of true -> maps:get(I, B, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(B) + I + 1, B); _ -> mochi_nth(I + 1, B) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B) of true -> maps:get(I, B, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(B) + I + 1, B); _ -> mochi_nth(I + 1, B) end end)) + J + 1, (case erlang:is_map(B) of true -> maps:get(I, B, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(B) + I + 1, B); _ -> mochi_nth(I + 1, B) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(B) of true -> maps:get(I, B, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(B) + I + 1, B); _ -> mochi_nth(I + 1, B) end end)) end end))]),
            J_2 = (J + 1),
            Fun_loop(A, B, Cols, I, J_2, Result, Row_2, Rows);
        _ -> {A, B, Cols, I, J, Result, Row, Rows}
    end
end,
{A, B, Cols, I, J_2, Result, Row_2, Rows} = Fun(A, B, Cols, I, J, Result, Row, Rows),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(A, B, Cols, I_2, Result_2, Rows);
        _ -> {A, B, Cols, I, Result, Rows}
    end
end,
{A, B, Cols, I_2, Result_2, Rows} = Fun_2(A, B, Cols, I, Result, Rows),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

subtract(A_2, B_2) ->
    try
        check_matrix(A_2),
        check_matrix(B_2),
        case ((erlang:length(A_2) /= erlang:length(B_2)) orelse (erlang:length((case erlang:is_map(A_2) of true -> maps:get(0, A_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_2) + 0 + 1, A_2); _ -> mochi_nth(0 + 1, A_2) end end)) /= erlang:length((case erlang:is_map(B_2) of true -> maps:get(0, B_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B_2) + 0 + 1, B_2); _ -> mochi_nth(0 + 1, B_2) end end)))) of
        true -> erlang:error({panic, "Matrices must have the same dimensions"});
        _ -> ok
    end,
        Rows_2 = erlang:length(A_2),
        Cols_2 = erlang:length((case erlang:is_map(A_2) of true -> maps:get(0, A_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_2) + 0 + 1, A_2); _ -> mochi_nth(0 + 1, A_2) end end)),
        Result_3 = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(A_2, B_2, Cols_2, I_3, Result_3, Rows_2) ->
    case (I_3 < Rows_2) of
        true ->
            Row_3 = [],
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(A_2, B_2, Cols_2, I_3, J_3, Result_3, Row_3, Rows_2) ->
    case (J_3 < Cols_2) of
        true ->
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [((case erlang:is_map((case erlang:is_map(A_2) of true -> maps:get(I_3, A_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A_2) + I_3 + 1, A_2); _ -> mochi_nth(I_3 + 1, A_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(A_2) of true -> maps:get(I_3, A_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A_2) + I_3 + 1, A_2); _ -> mochi_nth(I_3 + 1, A_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_2) of true -> maps:get(I_3, A_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A_2) + I_3 + 1, A_2); _ -> mochi_nth(I_3 + 1, A_2) end end)) + J_3 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_3, A_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A_2) + I_3 + 1, A_2); _ -> mochi_nth(I_3 + 1, A_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_3, A_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A_2) + I_3 + 1, A_2); _ -> mochi_nth(I_3 + 1, A_2) end end)) end end) - (case erlang:is_map((case erlang:is_map(B_2) of true -> maps:get(I_3, B_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(B_2) + I_3 + 1, B_2); _ -> mochi_nth(I_3 + 1, B_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(B_2) of true -> maps:get(I_3, B_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(B_2) + I_3 + 1, B_2); _ -> mochi_nth(I_3 + 1, B_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B_2) of true -> maps:get(I_3, B_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(B_2) + I_3 + 1, B_2); _ -> mochi_nth(I_3 + 1, B_2) end end)) + J_3 + 1, (case erlang:is_map(B_2) of true -> maps:get(I_3, B_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(B_2) + I_3 + 1, B_2); _ -> mochi_nth(I_3 + 1, B_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(B_2) of true -> maps:get(I_3, B_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(B_2) + I_3 + 1, B_2); _ -> mochi_nth(I_3 + 1, B_2) end end)) end end))]),
            J_4 = (J_3 + 1),
            Fun_3_loop(A_2, B_2, Cols_2, I_3, J_4, Result_3, Row_4, Rows_2);
        _ -> {A_2, B_2, Cols_2, I_3, J_3, Result_3, Row_3, Rows_2}
    end
end,
{A_2, B_2, Cols_2, I_3, J_4, Result_3, Row_4, Rows_2} = Fun_3(A_2, B_2, Cols_2, I_3, J_3, Result_3, Row_3, Rows_2),
            Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [Row_4]),
            I_4 = (I_3 + 1),
            Fun_4_loop(A_2, B_2, Cols_2, I_4, Result_4, Rows_2);
        _ -> {A_2, B_2, Cols_2, I_3, Result_3, Rows_2}
    end
end,
{A_2, B_2, Cols_2, I_4, Result_4, Rows_2} = Fun_4(A_2, B_2, Cols_2, I_3, Result_3, Rows_2),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

scalar_multiply(A_3, S) ->
    try
        check_matrix(A_3),
        Rows_3 = erlang:length(A_3),
        Cols_3 = erlang:length((case erlang:is_map(A_3) of true -> maps:get(0, A_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_3) + 0 + 1, A_3); _ -> mochi_nth(0 + 1, A_3) end end)),
        Result_5 = [],
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(A_3, Cols_3, I_5, Result_5, Rows_3, S) ->
    case (I_5 < Rows_3) of
        true ->
            Row_5 = [],
            J_5 = 0,
            Fun_5 = fun Fun_5_loop(A_3, Cols_3, I_5, J_5, Result_5, Row_5, Rows_3, S) ->
    case (J_5 < Cols_3) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [mochi_safe_mul((case erlang:is_map((case erlang:is_map(A_3) of true -> maps:get(I_5, A_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A_3) + I_5 + 1, A_3); _ -> mochi_nth(I_5 + 1, A_3) end end)) of true -> maps:get(J_5, (case erlang:is_map(A_3) of true -> maps:get(I_5, A_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A_3) + I_5 + 1, A_3); _ -> mochi_nth(I_5 + 1, A_3) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_3) of true -> maps:get(I_5, A_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A_3) + I_5 + 1, A_3); _ -> mochi_nth(I_5 + 1, A_3) end end)) + J_5 + 1, (case erlang:is_map(A_3) of true -> maps:get(I_5, A_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A_3) + I_5 + 1, A_3); _ -> mochi_nth(I_5 + 1, A_3) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(A_3) of true -> maps:get(I_5, A_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(A_3) + I_5 + 1, A_3); _ -> mochi_nth(I_5 + 1, A_3) end end)) end end), S)]),
            J_6 = (J_5 + 1),
            Fun_5_loop(A_3, Cols_3, I_5, J_6, Result_5, Row_6, Rows_3, S);
        _ -> {A_3, Cols_3, I_5, J_5, Result_5, Row_5, Rows_3, S}
    end
end,
{A_3, Cols_3, I_5, J_6, Result_5, Row_6, Rows_3, S} = Fun_5(A_3, Cols_3, I_5, J_5, Result_5, Row_5, Rows_3, S),
            Result_6 = lists:append((case Result_5 of nil -> []; _ -> Result_5 end), [Row_6]),
            I_6 = (I_5 + 1),
            Fun_6_loop(A_3, Cols_3, I_6, Result_6, Rows_3, S);
        _ -> {A_3, Cols_3, I_5, Result_5, Rows_3, S}
    end
end,
{A_3, Cols_3, I_6, Result_6, Rows_3, S} = Fun_6(A_3, Cols_3, I_5, Result_5, Rows_3, S),
        Result_6
    catch {return, RetCatch} -> RetCatch end.

multiply(A_4, B_3) ->
    try
        check_matrix(A_4),
        check_matrix(B_3),
        case (erlang:length((case erlang:is_map(A_4) of true -> maps:get(0, A_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_4) + 0 + 1, A_4); _ -> mochi_nth(0 + 1, A_4) end end)) /= erlang:length(B_3)) of
        true -> erlang:error({panic, "Invalid dimensions for matrix multiplication"});
        _ -> ok
    end,
        Rows_4 = erlang:length(A_4),
        Cols_4 = erlang:length((case erlang:is_map(B_3) of true -> maps:get(0, B_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(B_3) + 0 + 1, B_3); _ -> mochi_nth(0 + 1, B_3) end end)),
        Result_7 = [],
        I_7 = 0,
        Fun_9 = fun Fun_9_loop(A_4, B_3, Cols_4, I_7, Result_7, Rows_4) ->
    case (I_7 < Rows_4) of
        true ->
            Row_7 = [],
            J_7 = 0,
            Fun_8 = fun Fun_8_loop(A_4, B_3, Cols_4, I_7, J_7, Result_7, Row_7, Rows_4) ->
    case (J_7 < Cols_4) of
        true ->
            Sum = 0.0,
            K = 0,
            Fun_7 = fun Fun_7_loop(A_4, B_3, Cols_4, I_7, J_7, K, Result_7, Row_7, Rows_4, Sum) ->
    case (K < erlang:length(B_3)) of
        true ->
            Sum_2 = (Sum + mochi_safe_mul((case erlang:is_map((case erlang:is_map(A_4) of true -> maps:get(I_7, A_4, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_4) + I_7 + 1, A_4); _ -> mochi_nth(I_7 + 1, A_4) end end)) of true -> maps:get(K, (case erlang:is_map(A_4) of true -> maps:get(I_7, A_4, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_4) + I_7 + 1, A_4); _ -> mochi_nth(I_7 + 1, A_4) end end), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_4) of true -> maps:get(I_7, A_4, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_4) + I_7 + 1, A_4); _ -> mochi_nth(I_7 + 1, A_4) end end)) + K + 1, (case erlang:is_map(A_4) of true -> maps:get(I_7, A_4, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_4) + I_7 + 1, A_4); _ -> mochi_nth(I_7 + 1, A_4) end end)); _ -> mochi_nth(K + 1, (case erlang:is_map(A_4) of true -> maps:get(I_7, A_4, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(A_4) + I_7 + 1, A_4); _ -> mochi_nth(I_7 + 1, A_4) end end)) end end), (case erlang:is_map((case erlang:is_map(B_3) of true -> maps:get(K, B_3, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_3) + K + 1, B_3); _ -> mochi_nth(K + 1, B_3) end end)) of true -> maps:get(J_7, (case erlang:is_map(B_3) of true -> maps:get(K, B_3, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_3) + K + 1, B_3); _ -> mochi_nth(K + 1, B_3) end end), nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(B_3) of true -> maps:get(K, B_3, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_3) + K + 1, B_3); _ -> mochi_nth(K + 1, B_3) end end)) + J_7 + 1, (case erlang:is_map(B_3) of true -> maps:get(K, B_3, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_3) + K + 1, B_3); _ -> mochi_nth(K + 1, B_3) end end)); _ -> mochi_nth(J_7 + 1, (case erlang:is_map(B_3) of true -> maps:get(K, B_3, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(B_3) + K + 1, B_3); _ -> mochi_nth(K + 1, B_3) end end)) end end))),
            K_2 = (K + 1),
            Fun_7_loop(A_4, B_3, Cols_4, I_7, J_7, K_2, Result_7, Row_7, Rows_4, Sum_2);
        _ -> {A_4, B_3, Cols_4, I_7, J_7, K, Result_7, Row_7, Rows_4, Sum}
    end
end,
{A_4, B_3, Cols_4, I_7, J_7, K_2, Result_7, Row_7, Rows_4, Sum_2} = Fun_7(A_4, B_3, Cols_4, I_7, J_7, K, Result_7, Row_7, Rows_4, Sum),
            Row_8 = lists:append((case Row_7 of nil -> []; _ -> Row_7 end), [Sum_2]),
            J_8 = (J_7 + 1),
            Fun_8_loop(A_4, B_3, Cols_4, I_7, J_8, Result_7, Row_8, Rows_4);
        _ -> {A_4, B_3, Cols_4, I_7, J_7, Result_7, Row_7, Rows_4}
    end
end,
{A_4, B_3, Cols_4, I_7, J_8, Result_7, Row_8, Rows_4} = Fun_8(A_4, B_3, Cols_4, I_7, J_7, Result_7, Row_7, Rows_4),
            Result_8 = lists:append((case Result_7 of nil -> []; _ -> Result_7 end), [Row_8]),
            I_8 = (I_7 + 1),
            Fun_9_loop(A_4, B_3, Cols_4, I_8, Result_8, Rows_4);
        _ -> {A_4, B_3, Cols_4, I_7, Result_7, Rows_4}
    end
end,
{A_4, B_3, Cols_4, I_8, Result_8, Rows_4} = Fun_9(A_4, B_3, Cols_4, I_7, Result_7, Rows_4),
        Result_8
    catch {return, RetCatch} -> RetCatch end.

identity(N) ->
    try
        Result_9 = [],
        I_9 = 0,
        Fun_11 = fun Fun_11_loop(I_9, N, Result_9) ->
    case (I_9 < N) of
        true ->
            Row_9 = [],
            J_9 = 0,
            Fun_10 = fun Fun_10_loop(I_9, J_9, N, Result_9, Row_9) ->
    case (J_9 < N) of
        true ->
            case (I_9 == J_9) of
        true -> Row_10 = lists:append((case Row_9 of nil -> []; _ -> Row_9 end), [1.0]),
            Row_12 = Row_10;
        _ -> Row_11 = lists:append((case Row_9 of nil -> []; _ -> Row_9 end), [0.0]),
            Row_12 = Row_11
    end,
            J_10 = (J_9 + 1),
            Fun_10_loop(I_9, J_10, N, Result_9, Row_12);
        _ -> {I_9, J_9, N, Result_9, Row_9}
    end
end,
{I_9, J_10, N, Result_9, Row_12} = Fun_10(I_9, J_9, N, Result_9, Row_9),
            Result_10 = lists:append((case Result_9 of nil -> []; _ -> Result_9 end), [Row_12]),
            I_10 = (I_9 + 1),
            Fun_11_loop(I_10, N, Result_10);
        _ -> {I_9, N, Result_9}
    end
end,
{I_10, N, Result_10} = Fun_11(I_9, N, Result_9),
        Result_10
    catch {return, RetCatch} -> RetCatch end.

transpose(A_5) ->
    try
        check_matrix(A_5),
        Rows_5 = erlang:length(A_5),
        Cols_5 = erlang:length((case erlang:is_map(A_5) of true -> maps:get(0, A_5, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(A_5) + 0 + 1, A_5); _ -> mochi_nth(0 + 1, A_5) end end)),
        Result_11 = [],
        J_11 = 0,
        Fun_13 = fun Fun_13_loop(A_5, Cols_5, J_11, Result_11, Rows_5) ->
    case (J_11 < Cols_5) of
        true ->
            Row_13 = [],
            I_11 = 0,
            Fun_12 = fun Fun_12_loop(A_5, Cols_5, I_11, J_11, Result_11, Row_13, Rows_5) ->
    case (I_11 < Rows_5) of
        true ->
            Row_14 = lists:append((case Row_13 of nil -> []; _ -> Row_13 end), [(case erlang:is_map((case erlang:is_map(A_5) of true -> maps:get(I_11, A_5, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(A_5) + I_11 + 1, A_5); _ -> mochi_nth(I_11 + 1, A_5) end end)) of true -> maps:get(J_11, (case erlang:is_map(A_5) of true -> maps:get(I_11, A_5, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(A_5) + I_11 + 1, A_5); _ -> mochi_nth(I_11 + 1, A_5) end end), nil); _ -> case J_11 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(A_5) of true -> maps:get(I_11, A_5, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(A_5) + I_11 + 1, A_5); _ -> mochi_nth(I_11 + 1, A_5) end end)) + J_11 + 1, (case erlang:is_map(A_5) of true -> maps:get(I_11, A_5, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(A_5) + I_11 + 1, A_5); _ -> mochi_nth(I_11 + 1, A_5) end end)); _ -> mochi_nth(J_11 + 1, (case erlang:is_map(A_5) of true -> maps:get(I_11, A_5, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(A_5) + I_11 + 1, A_5); _ -> mochi_nth(I_11 + 1, A_5) end end)) end end)]),
            I_12 = (I_11 + 1),
            Fun_12_loop(A_5, Cols_5, I_12, J_11, Result_11, Row_14, Rows_5);
        _ -> {A_5, Cols_5, I_11, J_11, Result_11, Row_13, Rows_5}
    end
end,
{A_5, Cols_5, I_12, J_11, Result_11, Row_14, Rows_5} = Fun_12(A_5, Cols_5, I_11, J_11, Result_11, Row_13, Rows_5),
            Result_12 = lists:append((case Result_11 of nil -> []; _ -> Result_11 end), [Row_14]),
            J_12 = (J_11 + 1),
            Fun_13_loop(A_5, Cols_5, J_12, Result_12, Rows_5);
        _ -> {A_5, Cols_5, J_11, Result_11, Rows_5}
    end
end,
{A_5, Cols_5, J_12, Result_12, Rows_5} = Fun_13(A_5, Cols_5, J_11, Result_11, Rows_5),
        Result_12
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Mat_a = [[12.0, 10.0], [3.0, 9.0]],
        Mat_b = [[3.0, 4.0], [7.0, 4.0]],
        Mat_c = [[3.0, 0.0, 2.0], [2.0, 0.0, -2.0], [0.0, 1.0, 1.0]],
        io:format("~ts~n", [mochi_str(add(Mat_a, Mat_b))]),
        io:format("~ts~n", [mochi_str(subtract(Mat_a, Mat_b))]),
        io:format("~ts~n", [mochi_str(multiply(Mat_a, Mat_b))]),
        io:format("~ts~n", [mochi_str(scalar_multiply(Mat_a, 3.5))]),
        io:format("~ts~n", [mochi_str(identity(5))]),
        io:format("~ts~n", [mochi_str(transpose(Mat_c))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
