#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, cramers_rule_2x2/2, test_cramers_rule_2x2/0, main/0]).

% Generated by Mochi transpiler v0.10.60 (6899ff50f4) on 2025-08-07 16:25 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S = erlang:float_to_list(V, [short]),
    case lists:suffix(".0", S) of
        true -> lists:sublist(S, length(S) - 2);
        false -> S
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

cramers_rule_2x2(Eq1, Eq2) ->
    try
        case ((erlang:length(Eq1) /= 3) orelse (erlang:length(Eq2) /= 3)) of
        true -> erlang:error("Please enter a valid equation.");
        _ -> ok
    end,
        case (((((case erlang:is_map(Eq1) of true -> maps:get(0, Eq1, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Eq1) + 0 + 1, Eq1); _ -> mochi_nth(0 + 1, Eq1) end end) == 0.0) andalso ((case erlang:is_map(Eq1) of true -> maps:get(1, Eq1, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Eq1) + 1 + 1, Eq1); _ -> mochi_nth(1 + 1, Eq1) end end) == 0.0)) andalso ((case erlang:is_map(Eq2) of true -> maps:get(0, Eq2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Eq2) + 0 + 1, Eq2); _ -> mochi_nth(0 + 1, Eq2) end end) == 0.0)) andalso ((case erlang:is_map(Eq2) of true -> maps:get(1, Eq2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Eq2) + 1 + 1, Eq2); _ -> mochi_nth(1 + 1, Eq2) end end) == 0.0)) of
        true -> erlang:error("Both a & b of two equations can't be zero.");
        _ -> ok
    end,
        A1 = (case erlang:is_map(Eq1) of true -> maps:get(0, Eq1, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Eq1) + 0 + 1, Eq1); _ -> mochi_nth(0 + 1, Eq1) end end),
        B1 = (case erlang:is_map(Eq1) of true -> maps:get(1, Eq1, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Eq1) + 1 + 1, Eq1); _ -> mochi_nth(1 + 1, Eq1) end end),
        C1 = (case erlang:is_map(Eq1) of true -> maps:get(2, Eq1, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Eq1) + 2 + 1, Eq1); _ -> mochi_nth(2 + 1, Eq1) end end),
        A2 = (case erlang:is_map(Eq2) of true -> maps:get(0, Eq2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Eq2) + 0 + 1, Eq2); _ -> mochi_nth(0 + 1, Eq2) end end),
        B2 = (case erlang:is_map(Eq2) of true -> maps:get(1, Eq2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Eq2) + 1 + 1, Eq2); _ -> mochi_nth(1 + 1, Eq2) end end),
        C2 = (case erlang:is_map(Eq2) of true -> maps:get(2, Eq2, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Eq2) + 2 + 1, Eq2); _ -> mochi_nth(2 + 1, Eq2) end end),
        Determinant = (mochi_safe_mul(A1, B2) - mochi_safe_mul(A2, B1)),
        Determinant_x = (mochi_safe_mul(C1, B2) - mochi_safe_mul(C2, B1)),
        Determinant_y = (mochi_safe_mul(A1, C2) - mochi_safe_mul(A2, C1)),
        case (Determinant == 0.0) of
        true -> case ((Determinant_x == 0.0) andalso (Determinant_y == 0.0)) of
        true -> erlang:error("Infinite solutions. (Consistent system)");
        _ -> ok
    end,
            erlang:error("No solution. (Inconsistent system)");
        _ -> ok
    end,
        case ((Determinant_x == 0.0) andalso (Determinant_y == 0.0)) of
        true -> throw({return, [0.0, 0.0]});
        _ -> ok
    end,
        X = mochi_safe_div(Determinant_x, Determinant),
        Y = mochi_safe_div(Determinant_y, Determinant),
        [X, Y]
    catch {return, Ret} -> Ret end.

test_cramers_rule_2x2() ->
    try
        R1 = cramers_rule_2x2([2.0, 3.0, 0.0], [5.0, 1.0, 0.0]),
        case (((case erlang:is_map(R1) of true -> maps:get(0, R1, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(R1) + 0 + 1, R1); _ -> mochi_nth(0 + 1, R1) end end) /= 0.0) orelse ((case erlang:is_map(R1) of true -> maps:get(1, R1, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(R1) + 1 + 1, R1); _ -> mochi_nth(1 + 1, R1) end end) /= 0.0)) of
        true -> erlang:error("Test1 failed");
        _ -> ok
    end,
        R2 = cramers_rule_2x2([0.0, 4.0, 50.0], [2.0, 0.0, 26.0]),
        case (((case erlang:is_map(R2) of true -> maps:get(0, R2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(R2) + 0 + 1, R2); _ -> mochi_nth(0 + 1, R2) end end) /= 13.0) orelse ((case erlang:is_map(R2) of true -> maps:get(1, R2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(R2) + 1 + 1, R2); _ -> mochi_nth(1 + 1, R2) end end) /= 12.5)) of
        true -> erlang:error("Test2 failed");
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_cramers_rule_2x2(),
        io:format("~ts~n", [mochi_repr(cramers_rule_2x2([11.0, 2.0, 30.0], [1.0, 0.0, 4.0]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
