#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, make_matrix/3, matrix_from_lists/1, matrix_to_string/1, matrix_add/2, matrix_sub/2, matrix_mul_scalar/2, matrix_mul/2, matrix_transpose/1, sherman_morrison/3, main/0]).

% Generated by Mochi transpiler v0.10.66 (48422bb2d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

make_matrix(Rows, Cols, Value) ->
    try
        Arr = [],
        R = 0,
        Fun_2 = fun Fun_2_loop(Arr, Cols, R, Rows, Value) ->
    case (R < Rows) of
        true ->
            Row = [],
            C = 0,
            Fun = fun Fun_loop(Arr, C, Cols, R, Row, Rows, Value) ->
    case (C < Cols) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [Value]),
            C_2 = (C + 1),
            Fun_loop(Arr, C_2, Cols, R, Row_2, Rows, Value);
        _ -> {Arr, C, Cols, R, Row, Rows, Value}
    end
end,
{Arr, C_2, Cols, R, Row_2, Rows, Value} = Fun(Arr, C, Cols, R, Row, Rows, Value),
            Arr_2 = lists:append((case Arr of nil -> []; _ -> Arr end), [Row_2]),
            R_2 = (R + 1),
            Fun_2_loop(Arr_2, Cols, R_2, Rows, Value);
        _ -> {Arr, Cols, R, Rows, Value}
    end
end,
{Arr_2, Cols, R_2, Rows, Value} = Fun_2(Arr, Cols, R, Rows, Value),
        #{"data" => Arr_2, "rows" => Rows, "cols" => Cols}
    catch {return, RetCatch} -> RetCatch end.

matrix_from_lists(Vals) ->
    try
        R_3 = erlang:length(Vals),
        C_3 = (case (R_3 == 0) of
    true -> 0;
    _ -> erlang:length((case erlang:is_map(Vals) of true -> maps:get(0, Vals, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Vals) + 0 + 1, Vals); _ -> mochi_nth(0 + 1, Vals) end end))
end),
        #{"data" => Vals, "rows" => R_3, "cols" => C_3}
    catch {return, RetCatch} -> RetCatch end.

matrix_to_string(M) ->
    try
        S = "",
        I = 0,
        Fun_4 = fun Fun_4_loop(I, M, S) ->
    case (I < maps:get("rows", M, nil)) of
        true ->
            S_2 = (S ++ "["),
            J = 0,
            Fun_3 = fun Fun_3_loop(I, J, M, S_2) ->
    case (J < maps:get("cols", M, nil)) of
        true ->
            S_3 = (S_2 ++ mochi_str((case erlang:is_map((case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I, maps:get("data", M, nil), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I + 1, maps:get("data", M, nil)); _ -> mochi_nth(I + 1, maps:get("data", M, nil)) end end)) of true -> maps:get(J, (case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I, maps:get("data", M, nil), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I + 1, maps:get("data", M, nil)); _ -> mochi_nth(I + 1, maps:get("data", M, nil)) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I, maps:get("data", M, nil), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I + 1, maps:get("data", M, nil)); _ -> mochi_nth(I + 1, maps:get("data", M, nil)) end end)) + J + 1, (case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I, maps:get("data", M, nil), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I + 1, maps:get("data", M, nil)); _ -> mochi_nth(I + 1, maps:get("data", M, nil)) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(maps:get("data", M, nil)) of true -> maps:get(I, maps:get("data", M, nil), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(maps:get("data", M, nil)) + I + 1, maps:get("data", M, nil)); _ -> mochi_nth(I + 1, maps:get("data", M, nil)) end end)) end end))),
            case (J < (maps:get("cols", M, nil) - 1)) of
        true -> S_4 = (S_3 ++ ", "),
            S_5 = S_4;
        _ -> S_5 = S_3
    end,
            J_2 = (J + 1),
            Fun_3_loop(I, J_2, M, S_5);
        _ -> {I, J, M, S_2}
    end
end,
{I, J_2, M, S_5} = Fun_3(I, J, M, S_2),
            S_6 = (S_5 ++ "]"),
            case (I < (maps:get("rows", M, nil) - 1)) of
        true -> S_7 = (S_6 ++ "\n"),
            S_8 = S_7;
        _ -> S_8 = S_6
    end,
            I_2 = (I + 1),
            Fun_4_loop(I_2, M, S_8);
        _ -> {I, M, S}
    end
end,
{I_2, M, S_8} = Fun_4(I, M, S),
        S_8
    catch {return, RetCatch} -> RetCatch end.

matrix_add(A, B) ->
    try
        case ((maps:get("rows", A, nil) /= maps:get("rows", B, nil)) orelse (maps:get("cols", A, nil) /= maps:get("cols", B, nil))) of
        true -> throw({return, #{"data" => [], "rows" => 0, "cols" => 0}});
        _ -> ok
    end,
        Res = [],
        I_3 = 0,
        Fun_6 = fun Fun_6_loop(A, B, I_3, Res) ->
    case (I_3 < maps:get("rows", A, nil)) of
        true ->
            Row_3 = [],
            J_3 = 0,
            Fun_5 = fun Fun_5_loop(A, B, I_3, J_3, Res, Row_3) ->
    case (J_3 < maps:get("cols", A, nil)) of
        true ->
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [((case erlang:is_map((case erlang:is_map(maps:get("data", A, nil)) of true -> maps:get(I_3, maps:get("data", A, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A, nil)) + I_3 + 1, maps:get("data", A, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", A, nil)) end end)) of true -> maps:get(J_3, (case erlang:is_map(maps:get("data", A, nil)) of true -> maps:get(I_3, maps:get("data", A, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A, nil)) + I_3 + 1, maps:get("data", A, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", A, nil)) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", A, nil)) of true -> maps:get(I_3, maps:get("data", A, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A, nil)) + I_3 + 1, maps:get("data", A, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", A, nil)) end end)) + J_3 + 1, (case erlang:is_map(maps:get("data", A, nil)) of true -> maps:get(I_3, maps:get("data", A, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A, nil)) + I_3 + 1, maps:get("data", A, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", A, nil)) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(maps:get("data", A, nil)) of true -> maps:get(I_3, maps:get("data", A, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A, nil)) + I_3 + 1, maps:get("data", A, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", A, nil)) end end)) end end) + (case erlang:is_map((case erlang:is_map(maps:get("data", B, nil)) of true -> maps:get(I_3, maps:get("data", B, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B, nil)) + I_3 + 1, maps:get("data", B, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", B, nil)) end end)) of true -> maps:get(J_3, (case erlang:is_map(maps:get("data", B, nil)) of true -> maps:get(I_3, maps:get("data", B, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B, nil)) + I_3 + 1, maps:get("data", B, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", B, nil)) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", B, nil)) of true -> maps:get(I_3, maps:get("data", B, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B, nil)) + I_3 + 1, maps:get("data", B, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", B, nil)) end end)) + J_3 + 1, (case erlang:is_map(maps:get("data", B, nil)) of true -> maps:get(I_3, maps:get("data", B, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B, nil)) + I_3 + 1, maps:get("data", B, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", B, nil)) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(maps:get("data", B, nil)) of true -> maps:get(I_3, maps:get("data", B, nil), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B, nil)) + I_3 + 1, maps:get("data", B, nil)); _ -> mochi_nth(I_3 + 1, maps:get("data", B, nil)) end end)) end end))]),
            J_4 = (J_3 + 1),
            Fun_5_loop(A, B, I_3, J_4, Res, Row_4);
        _ -> {A, B, I_3, J_3, Res, Row_3}
    end
end,
{A, B, I_3, J_4, Res, Row_4} = Fun_5(A, B, I_3, J_3, Res, Row_3),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Row_4]),
            I_4 = (I_3 + 1),
            Fun_6_loop(A, B, I_4, Res_2);
        _ -> {A, B, I_3, Res}
    end
end,
{A, B, I_4, Res_2} = Fun_6(A, B, I_3, Res),
        #{"data" => Res_2, "rows" => maps:get("rows", A, nil), "cols" => maps:get("cols", A, nil)}
    catch {return, RetCatch} -> RetCatch end.

matrix_sub(A_2, B_2) ->
    try
        case ((maps:get("rows", A_2, nil) /= maps:get("rows", B_2, nil)) orelse (maps:get("cols", A_2, nil) /= maps:get("cols", B_2, nil))) of
        true -> throw({return, #{"data" => [], "rows" => 0, "cols" => 0}});
        _ -> ok
    end,
        Res_3 = [],
        I_5 = 0,
        Fun_8 = fun Fun_8_loop(A_2, B_2, I_5, Res_3) ->
    case (I_5 < maps:get("rows", A_2, nil)) of
        true ->
            Row_5 = [],
            J_5 = 0,
            Fun_7 = fun Fun_7_loop(A_2, B_2, I_5, J_5, Res_3, Row_5) ->
    case (J_5 < maps:get("cols", A_2, nil)) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [((case erlang:is_map((case erlang:is_map(maps:get("data", A_2, nil)) of true -> maps:get(I_5, maps:get("data", A_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_2, nil)) + I_5 + 1, maps:get("data", A_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("data", A_2, nil)) end end)) of true -> maps:get(J_5, (case erlang:is_map(maps:get("data", A_2, nil)) of true -> maps:get(I_5, maps:get("data", A_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_2, nil)) + I_5 + 1, maps:get("data", A_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("data", A_2, nil)) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", A_2, nil)) of true -> maps:get(I_5, maps:get("data", A_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_2, nil)) + I_5 + 1, maps:get("data", A_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("data", A_2, nil)) end end)) + J_5 + 1, (case erlang:is_map(maps:get("data", A_2, nil)) of true -> maps:get(I_5, maps:get("data", A_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_2, nil)) + I_5 + 1, maps:get("data", A_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("data", A_2, nil)) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(maps:get("data", A_2, nil)) of true -> maps:get(I_5, maps:get("data", A_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_2, nil)) + I_5 + 1, maps:get("data", A_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("data", A_2, nil)) end end)) end end) - (case erlang:is_map((case erlang:is_map(maps:get("data", B_2, nil)) of true -> maps:get(I_5, maps:get("data", B_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_2, nil)) + I_5 + 1, maps:get("data", B_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("data", B_2, nil)) end end)) of true -> maps:get(J_5, (case erlang:is_map(maps:get("data", B_2, nil)) of true -> maps:get(I_5, maps:get("data", B_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_2, nil)) + I_5 + 1, maps:get("data", B_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("data", B_2, nil)) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", B_2, nil)) of true -> maps:get(I_5, maps:get("data", B_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_2, nil)) + I_5 + 1, maps:get("data", B_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("data", B_2, nil)) end end)) + J_5 + 1, (case erlang:is_map(maps:get("data", B_2, nil)) of true -> maps:get(I_5, maps:get("data", B_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_2, nil)) + I_5 + 1, maps:get("data", B_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("data", B_2, nil)) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(maps:get("data", B_2, nil)) of true -> maps:get(I_5, maps:get("data", B_2, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_2, nil)) + I_5 + 1, maps:get("data", B_2, nil)); _ -> mochi_nth(I_5 + 1, maps:get("data", B_2, nil)) end end)) end end))]),
            J_6 = (J_5 + 1),
            Fun_7_loop(A_2, B_2, I_5, J_6, Res_3, Row_6);
        _ -> {A_2, B_2, I_5, J_5, Res_3, Row_5}
    end
end,
{A_2, B_2, I_5, J_6, Res_3, Row_6} = Fun_7(A_2, B_2, I_5, J_5, Res_3, Row_5),
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Row_6]),
            I_6 = (I_5 + 1),
            Fun_8_loop(A_2, B_2, I_6, Res_4);
        _ -> {A_2, B_2, I_5, Res_3}
    end
end,
{A_2, B_2, I_6, Res_4} = Fun_8(A_2, B_2, I_5, Res_3),
        #{"data" => Res_4, "rows" => maps:get("rows", A_2, nil), "cols" => maps:get("cols", A_2, nil)}
    catch {return, RetCatch} -> RetCatch end.

matrix_mul_scalar(M_2, K) ->
    try
        Res_5 = [],
        I_7 = 0,
        Fun_10 = fun Fun_10_loop(I_7, K, M_2, Res_5) ->
    case (I_7 < maps:get("rows", M_2, nil)) of
        true ->
            Row_7 = [],
            J_7 = 0,
            Fun_9 = fun Fun_9_loop(I_7, J_7, K, M_2, Res_5, Row_7) ->
    case (J_7 < maps:get("cols", M_2, nil)) of
        true ->
            Row_8 = lists:append((case Row_7 of nil -> []; _ -> Row_7 end), [mochi_safe_mul((case erlang:is_map((case erlang:is_map(maps:get("data", M_2, nil)) of true -> maps:get(I_7, maps:get("data", M_2, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_2, nil)) + I_7 + 1, maps:get("data", M_2, nil)); _ -> mochi_nth(I_7 + 1, maps:get("data", M_2, nil)) end end)) of true -> maps:get(J_7, (case erlang:is_map(maps:get("data", M_2, nil)) of true -> maps:get(I_7, maps:get("data", M_2, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_2, nil)) + I_7 + 1, maps:get("data", M_2, nil)); _ -> mochi_nth(I_7 + 1, maps:get("data", M_2, nil)) end end), nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_2, nil)) of true -> maps:get(I_7, maps:get("data", M_2, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_2, nil)) + I_7 + 1, maps:get("data", M_2, nil)); _ -> mochi_nth(I_7 + 1, maps:get("data", M_2, nil)) end end)) + J_7 + 1, (case erlang:is_map(maps:get("data", M_2, nil)) of true -> maps:get(I_7, maps:get("data", M_2, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_2, nil)) + I_7 + 1, maps:get("data", M_2, nil)); _ -> mochi_nth(I_7 + 1, maps:get("data", M_2, nil)) end end)); _ -> mochi_nth(J_7 + 1, (case erlang:is_map(maps:get("data", M_2, nil)) of true -> maps:get(I_7, maps:get("data", M_2, nil), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_2, nil)) + I_7 + 1, maps:get("data", M_2, nil)); _ -> mochi_nth(I_7 + 1, maps:get("data", M_2, nil)) end end)) end end), K)]),
            J_8 = (J_7 + 1),
            Fun_9_loop(I_7, J_8, K, M_2, Res_5, Row_8);
        _ -> {I_7, J_7, K, M_2, Res_5, Row_7}
    end
end,
{I_7, J_8, K, M_2, Res_5, Row_8} = Fun_9(I_7, J_7, K, M_2, Res_5, Row_7),
            Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [Row_8]),
            I_8 = (I_7 + 1),
            Fun_10_loop(I_8, K, M_2, Res_6);
        _ -> {I_7, K, M_2, Res_5}
    end
end,
{I_8, K, M_2, Res_6} = Fun_10(I_7, K, M_2, Res_5),
        #{"data" => Res_6, "rows" => maps:get("rows", M_2, nil), "cols" => maps:get("cols", M_2, nil)}
    catch {return, RetCatch} -> RetCatch end.

matrix_mul(A_3, B_3) ->
    try
        case (maps:get("cols", A_3, nil) /= maps:get("rows", B_3, nil)) of
        true -> throw({return, #{"data" => [], "rows" => 0, "cols" => 0}});
        _ -> ok
    end,
        Res_7 = [],
        I_9 = 0,
        Fun_13 = fun Fun_13_loop(A_3, B_3, I_9, Res_7) ->
    case (I_9 < maps:get("rows", A_3, nil)) of
        true ->
            Row_9 = [],
            J_9 = 0,
            Fun_12 = fun Fun_12_loop(A_3, B_3, I_9, J_9, Res_7, Row_9) ->
    case (J_9 < maps:get("cols", B_3, nil)) of
        true ->
            Sum = 0.0,
            K_2 = 0,
            Fun_11 = fun Fun_11_loop(A_3, B_3, I_9, J_9, K_2, Res_7, Row_9, Sum) ->
    case (K_2 < maps:get("cols", A_3, nil)) of
        true ->
            Sum_2 = (Sum + mochi_safe_mul((case erlang:is_map((case erlang:is_map(maps:get("data", A_3, nil)) of true -> maps:get(I_9, maps:get("data", A_3, nil), nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_3, nil)) + I_9 + 1, maps:get("data", A_3, nil)); _ -> mochi_nth(I_9 + 1, maps:get("data", A_3, nil)) end end)) of true -> maps:get(K_2, (case erlang:is_map(maps:get("data", A_3, nil)) of true -> maps:get(I_9, maps:get("data", A_3, nil), nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_3, nil)) + I_9 + 1, maps:get("data", A_3, nil)); _ -> mochi_nth(I_9 + 1, maps:get("data", A_3, nil)) end end), nil); _ -> case K_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", A_3, nil)) of true -> maps:get(I_9, maps:get("data", A_3, nil), nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_3, nil)) + I_9 + 1, maps:get("data", A_3, nil)); _ -> mochi_nth(I_9 + 1, maps:get("data", A_3, nil)) end end)) + K_2 + 1, (case erlang:is_map(maps:get("data", A_3, nil)) of true -> maps:get(I_9, maps:get("data", A_3, nil), nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_3, nil)) + I_9 + 1, maps:get("data", A_3, nil)); _ -> mochi_nth(I_9 + 1, maps:get("data", A_3, nil)) end end)); _ -> mochi_nth(K_2 + 1, (case erlang:is_map(maps:get("data", A_3, nil)) of true -> maps:get(I_9, maps:get("data", A_3, nil), nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(maps:get("data", A_3, nil)) + I_9 + 1, maps:get("data", A_3, nil)); _ -> mochi_nth(I_9 + 1, maps:get("data", A_3, nil)) end end)) end end), (case erlang:is_map((case erlang:is_map(maps:get("data", B_3, nil)) of true -> maps:get(K_2, maps:get("data", B_3, nil), nil); _ -> case K_2 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_3, nil)) + K_2 + 1, maps:get("data", B_3, nil)); _ -> mochi_nth(K_2 + 1, maps:get("data", B_3, nil)) end end)) of true -> maps:get(J_9, (case erlang:is_map(maps:get("data", B_3, nil)) of true -> maps:get(K_2, maps:get("data", B_3, nil), nil); _ -> case K_2 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_3, nil)) + K_2 + 1, maps:get("data", B_3, nil)); _ -> mochi_nth(K_2 + 1, maps:get("data", B_3, nil)) end end), nil); _ -> case J_9 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", B_3, nil)) of true -> maps:get(K_2, maps:get("data", B_3, nil), nil); _ -> case K_2 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_3, nil)) + K_2 + 1, maps:get("data", B_3, nil)); _ -> mochi_nth(K_2 + 1, maps:get("data", B_3, nil)) end end)) + J_9 + 1, (case erlang:is_map(maps:get("data", B_3, nil)) of true -> maps:get(K_2, maps:get("data", B_3, nil), nil); _ -> case K_2 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_3, nil)) + K_2 + 1, maps:get("data", B_3, nil)); _ -> mochi_nth(K_2 + 1, maps:get("data", B_3, nil)) end end)); _ -> mochi_nth(J_9 + 1, (case erlang:is_map(maps:get("data", B_3, nil)) of true -> maps:get(K_2, maps:get("data", B_3, nil), nil); _ -> case K_2 < 0 of true -> mochi_nth(erlang:length(maps:get("data", B_3, nil)) + K_2 + 1, maps:get("data", B_3, nil)); _ -> mochi_nth(K_2 + 1, maps:get("data", B_3, nil)) end end)) end end))),
            K_3 = (K_2 + 1),
            Fun_11_loop(A_3, B_3, I_9, J_9, K_3, Res_7, Row_9, Sum_2);
        _ -> {A_3, B_3, I_9, J_9, K_2, Res_7, Row_9, Sum}
    end
end,
{A_3, B_3, I_9, J_9, K_3, Res_7, Row_9, Sum_2} = Fun_11(A_3, B_3, I_9, J_9, K_2, Res_7, Row_9, Sum),
            Row_10 = lists:append((case Row_9 of nil -> []; _ -> Row_9 end), [Sum_2]),
            J_10 = (J_9 + 1),
            Fun_12_loop(A_3, B_3, I_9, J_10, Res_7, Row_10);
        _ -> {A_3, B_3, I_9, J_9, Res_7, Row_9}
    end
end,
{A_3, B_3, I_9, J_10, Res_7, Row_10} = Fun_12(A_3, B_3, I_9, J_9, Res_7, Row_9),
            Res_8 = lists:append((case Res_7 of nil -> []; _ -> Res_7 end), [Row_10]),
            I_10 = (I_9 + 1),
            Fun_13_loop(A_3, B_3, I_10, Res_8);
        _ -> {A_3, B_3, I_9, Res_7}
    end
end,
{A_3, B_3, I_10, Res_8} = Fun_13(A_3, B_3, I_9, Res_7),
        #{"data" => Res_8, "rows" => maps:get("rows", A_3, nil), "cols" => maps:get("cols", B_3, nil)}
    catch {return, RetCatch} -> RetCatch end.

matrix_transpose(M_3) ->
    try
        Res_9 = [],
        C_4 = 0,
        Fun_15 = fun Fun_15_loop(C_4, M_3, Res_9) ->
    case (C_4 < maps:get("cols", M_3, nil)) of
        true ->
            Row_11 = [],
            R_4 = 0,
            Fun_14 = fun Fun_14_loop(C_4, M_3, R_4, Res_9, Row_11) ->
    case (R_4 < maps:get("rows", M_3, nil)) of
        true ->
            Row_12 = lists:append((case Row_11 of nil -> []; _ -> Row_11 end), [(case erlang:is_map((case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(R_4, maps:get("data", M_3, nil), nil); _ -> case R_4 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + R_4 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(R_4 + 1, maps:get("data", M_3, nil)) end end)) of true -> maps:get(C_4, (case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(R_4, maps:get("data", M_3, nil), nil); _ -> case R_4 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + R_4 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(R_4 + 1, maps:get("data", M_3, nil)) end end), nil); _ -> case C_4 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(R_4, maps:get("data", M_3, nil), nil); _ -> case R_4 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + R_4 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(R_4 + 1, maps:get("data", M_3, nil)) end end)) + C_4 + 1, (case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(R_4, maps:get("data", M_3, nil), nil); _ -> case R_4 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + R_4 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(R_4 + 1, maps:get("data", M_3, nil)) end end)); _ -> mochi_nth(C_4 + 1, (case erlang:is_map(maps:get("data", M_3, nil)) of true -> maps:get(R_4, maps:get("data", M_3, nil), nil); _ -> case R_4 < 0 of true -> mochi_nth(erlang:length(maps:get("data", M_3, nil)) + R_4 + 1, maps:get("data", M_3, nil)); _ -> mochi_nth(R_4 + 1, maps:get("data", M_3, nil)) end end)) end end)]),
            R_5 = (R_4 + 1),
            Fun_14_loop(C_4, M_3, R_5, Res_9, Row_12);
        _ -> {C_4, M_3, R_4, Res_9, Row_11}
    end
end,
{C_4, M_3, R_5, Res_9, Row_12} = Fun_14(C_4, M_3, R_4, Res_9, Row_11),
            Res_10 = lists:append((case Res_9 of nil -> []; _ -> Res_9 end), [Row_12]),
            C_5 = (C_4 + 1),
            Fun_15_loop(C_5, M_3, Res_10);
        _ -> {C_4, M_3, Res_9}
    end
end,
{C_5, M_3, Res_10} = Fun_15(C_4, M_3, Res_9),
        #{"data" => Res_10, "rows" => maps:get("cols", M_3, nil), "cols" => maps:get("rows", M_3, nil)}
    catch {return, RetCatch} -> RetCatch end.

sherman_morrison(Ainv, U, V) ->
    try
        Vt = matrix_transpose(V),
        Vu = matrix_mul(matrix_mul(Vt, Ainv), U),
        Factor = ((case erlang:is_map((case erlang:is_map(maps:get("data", Vu, nil)) of true -> maps:get(0, maps:get("data", Vu, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Vu, nil)) + 0 + 1, maps:get("data", Vu, nil)); _ -> mochi_nth(0 + 1, maps:get("data", Vu, nil)) end end)) of true -> maps:get(0, (case erlang:is_map(maps:get("data", Vu, nil)) of true -> maps:get(0, maps:get("data", Vu, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Vu, nil)) + 0 + 1, maps:get("data", Vu, nil)); _ -> mochi_nth(0 + 1, maps:get("data", Vu, nil)) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(maps:get("data", Vu, nil)) of true -> maps:get(0, maps:get("data", Vu, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Vu, nil)) + 0 + 1, maps:get("data", Vu, nil)); _ -> mochi_nth(0 + 1, maps:get("data", Vu, nil)) end end)) + 0 + 1, (case erlang:is_map(maps:get("data", Vu, nil)) of true -> maps:get(0, maps:get("data", Vu, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Vu, nil)) + 0 + 1, maps:get("data", Vu, nil)); _ -> mochi_nth(0 + 1, maps:get("data", Vu, nil)) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(maps:get("data", Vu, nil)) of true -> maps:get(0, maps:get("data", Vu, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Vu, nil)) + 0 + 1, maps:get("data", Vu, nil)); _ -> mochi_nth(0 + 1, maps:get("data", Vu, nil)) end end)) end end) + 1.0),
        case (Factor == 0.0) of
        true -> throw({return, #{"data" => [], "rows" => 0, "cols" => 0}});
        _ -> ok
    end,
        Term1 = matrix_mul(Ainv, U),
        Term2 = matrix_mul(Vt, Ainv),
        Numerator = matrix_mul(Term1, Term2),
        Scaled = matrix_mul_scalar(Numerator, mochi_safe_div(1.0, Factor)),
        matrix_sub(Ainv, Scaled)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Ainv_2 = matrix_from_lists([[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]),
        U_2 = matrix_from_lists([[1.0], [2.0], [-3.0]]),
        V_2 = matrix_from_lists([[4.0], [-2.0], [5.0]]),
        Result = sherman_morrison(Ainv_2, U_2, V_2),
        io:format("~ts~n", [mochi_repr(matrix_to_string(Result))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
