#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, abs_int/1, make_matrix/1, transpose/1, reverse_row/1, reverse_column/1, rotate_90/1, rotate_180/1, rotate_270/1, row_to_string/1, print_matrix/1]).

% Generated by Mochi transpiler v0.10.64 (1dced96c32) on 2025-08-12 13:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

abs_int(N) ->
    try
        (case (N < 0) of
    true -> -N;
    _ -> N
end)
    catch {return, RetCatch} -> RetCatch end.

make_matrix(Row_size) ->
    try
        Size = abs_int(Row_size),
        case (Size == 0) of
        true -> Size_2 = 4,
            Size_3 = Size_2;
        _ -> Size_3 = Size
    end,
        Mat = [],
        Y = 0,
        Fun_2 = fun Fun_2_loop(Mat, Row_size, Size_3, Y) ->
    case (Y < Size_3) of
        true ->
            Row = [],
            X = 0,
            Fun = fun Fun_loop(Mat, Row, Row_size, Size_3, X, Y) ->
    case (X < Size_3) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [((1 + X) + (Y * Size_3))]),
            X_2 = (X + 1),
            Fun_loop(Mat, Row_2, Row_size, Size_3, X_2, Y);
        _ -> {Mat, Row, Row_size, Size_3, X, Y}
    end
end,
{Mat, Row_2, Row_size, Size_3, X_2, Y} = Fun(Mat, Row, Row_size, Size_3, X, Y),
            Mat_2 = lists:append((case Mat of nil -> []; _ -> Mat end), [Row_2]),
            Y_2 = (Y + 1),
            Fun_2_loop(Mat_2, Row_size, Size_3, Y_2);
        _ -> {Mat, Row_size, Size_3, Y}
    end
end,
{Mat_2, Row_size, Size_3, Y_2} = Fun_2(Mat, Row_size, Size_3, Y),
        Mat_2
    catch {return, RetCatch} -> RetCatch end.

transpose(Mat_3) ->
    try
        N_2 = erlang:length(Mat_3),
        Result = [],
        I = 0,
        Fun_4 = fun Fun_4_loop(I, Mat_3, N_2, Result) ->
    case (I < N_2) of
        true ->
            Row_3 = [],
            J = 0,
            Fun_3 = fun Fun_3_loop(I, J, Mat_3, N_2, Result, Row_3) ->
    case (J < N_2) of
        true ->
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [(case erlang:is_map((case erlang:is_map(Mat_3) of true -> maps:get(J, Mat_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Mat_3) + J + 1, Mat_3); _ -> mochi_nth(J + 1, Mat_3) end end)) of true -> maps:get(I, (case erlang:is_map(Mat_3) of true -> maps:get(J, Mat_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Mat_3) + J + 1, Mat_3); _ -> mochi_nth(J + 1, Mat_3) end end), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat_3) of true -> maps:get(J, Mat_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Mat_3) + J + 1, Mat_3); _ -> mochi_nth(J + 1, Mat_3) end end)) + I + 1, (case erlang:is_map(Mat_3) of true -> maps:get(J, Mat_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Mat_3) + J + 1, Mat_3); _ -> mochi_nth(J + 1, Mat_3) end end)); _ -> mochi_nth(I + 1, (case erlang:is_map(Mat_3) of true -> maps:get(J, Mat_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Mat_3) + J + 1, Mat_3); _ -> mochi_nth(J + 1, Mat_3) end end)) end end)]),
            J_2 = (J + 1),
            Fun_3_loop(I, J_2, Mat_3, N_2, Result, Row_4);
        _ -> {I, J, Mat_3, N_2, Result, Row_3}
    end
end,
{I, J_2, Mat_3, N_2, Result, Row_4} = Fun_3(I, J, Mat_3, N_2, Result, Row_3),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_4]),
            I_2 = (I + 1),
            Fun_4_loop(I_2, Mat_3, N_2, Result_2);
        _ -> {I, Mat_3, N_2, Result}
    end
end,
{I_2, Mat_3, N_2, Result_2} = Fun_4(I, Mat_3, N_2, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

reverse_row(Mat_4) ->
    try
        Result_3 = [],
        I_3 = (erlang:length(Mat_4) - 1),
        Fun_5 = fun Fun_5_loop(I_3, Mat_4, Result_3) ->
    case (I_3 >= 0) of
        true ->
            Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [(case erlang:is_map(Mat_4) of true -> maps:get(I_3, Mat_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat_4) + I_3 + 1, Mat_4); _ -> mochi_nth(I_3 + 1, Mat_4) end end)]),
            I_4 = (I_3 - 1),
            Fun_5_loop(I_4, Mat_4, Result_4);
        _ -> {I_3, Mat_4, Result_3}
    end
end,
{I_4, Mat_4, Result_4} = Fun_5(I_3, Mat_4, Result_3),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

reverse_column(Mat_5) ->
    try
        Result_5 = [],
        I_5 = 0,
        Fun_7 = fun Fun_7_loop(I_5, Mat_5, Result_5) ->
    case (I_5 < erlang:length(Mat_5)) of
        true ->
            Row_5 = [],
            J_3 = (erlang:length((case erlang:is_map(Mat_5) of true -> maps:get(I_5, Mat_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_5 + 1, Mat_5); _ -> mochi_nth(I_5 + 1, Mat_5) end end)) - 1),
            Fun_6 = fun Fun_6_loop(I_5, J_3, Mat_5, Result_5, Row_5) ->
    case (J_3 >= 0) of
        true ->
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [(case erlang:is_map((case erlang:is_map(Mat_5) of true -> maps:get(I_5, Mat_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_5 + 1, Mat_5); _ -> mochi_nth(I_5 + 1, Mat_5) end end)) of true -> maps:get(J_3, (case erlang:is_map(Mat_5) of true -> maps:get(I_5, Mat_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_5 + 1, Mat_5); _ -> mochi_nth(I_5 + 1, Mat_5) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Mat_5) of true -> maps:get(I_5, Mat_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_5 + 1, Mat_5); _ -> mochi_nth(I_5 + 1, Mat_5) end end)) + J_3 + 1, (case erlang:is_map(Mat_5) of true -> maps:get(I_5, Mat_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_5 + 1, Mat_5); _ -> mochi_nth(I_5 + 1, Mat_5) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Mat_5) of true -> maps:get(I_5, Mat_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Mat_5) + I_5 + 1, Mat_5); _ -> mochi_nth(I_5 + 1, Mat_5) end end)) end end)]),
            J_4 = (J_3 - 1),
            Fun_6_loop(I_5, J_4, Mat_5, Result_5, Row_6);
        _ -> {I_5, J_3, Mat_5, Result_5, Row_5}
    end
end,
{I_5, J_4, Mat_5, Result_5, Row_6} = Fun_6(I_5, J_3, Mat_5, Result_5, Row_5),
            Result_6 = lists:append((case Result_5 of nil -> []; _ -> Result_5 end), [Row_6]),
            I_6 = (I_5 + 1),
            Fun_7_loop(I_6, Mat_5, Result_6);
        _ -> {I_5, Mat_5, Result_5}
    end
end,
{I_6, Mat_5, Result_6} = Fun_7(I_5, Mat_5, Result_5),
        Result_6
    catch {return, RetCatch} -> RetCatch end.

rotate_90(Mat_6) ->
    try
        T = transpose(Mat_6),
        Rr = reverse_row(T),
        Rr
    catch {return, RetCatch} -> RetCatch end.

rotate_180(Mat_7) ->
    try
        Rc = reverse_column(Mat_7),
        Rr_2 = reverse_row(Rc),
        Rr_2
    catch {return, RetCatch} -> RetCatch end.

rotate_270(Mat_8) ->
    try
        T_2 = transpose(Mat_8),
        Rc_2 = reverse_column(T_2),
        Rc_2
    catch {return, RetCatch} -> RetCatch end.

row_to_string(Row_7) ->
    try
        Line = "",
        I_7 = 0,
        Fun_8 = fun Fun_8_loop(I_7, Line, Row_7) ->
    case (I_7 < erlang:length(Row_7)) of
        true ->
            case (I_7 == 0) of
        true -> Line_2 = mochi_str((case erlang:is_map(Row_7) of true -> maps:get(I_7, Row_7, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Row_7) + I_7 + 1, Row_7); _ -> mochi_nth(I_7 + 1, Row_7) end end)),
            Line_4 = Line_2;
        _ -> Line_3 = ((Line ++ " ") ++ mochi_str((case erlang:is_map(Row_7) of true -> maps:get(I_7, Row_7, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Row_7) + I_7 + 1, Row_7); _ -> mochi_nth(I_7 + 1, Row_7) end end))),
            Line_4 = Line_3
    end,
            I_8 = (I_7 + 1),
            Fun_8_loop(I_8, Line_4, Row_7);
        _ -> {I_7, Line, Row_7}
    end
end,
{I_8, Line_4, Row_7} = Fun_8(I_7, Line, Row_7),
        Line_4
    catch {return, RetCatch} -> RetCatch end.

print_matrix(Mat_9) ->
    try
        I_9 = 0,
        Fun_9 = fun Fun_9_loop(I_9, Mat_9) ->
    case (I_9 < erlang:length(Mat_9)) of
        true ->
            io:format("~ts~n", [mochi_repr(row_to_string((case erlang:is_map(Mat_9) of true -> maps:get(I_9, Mat_9, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Mat_9) + I_9 + 1, Mat_9); _ -> mochi_nth(I_9 + 1, Mat_9) end end)))]),
            I_10 = (I_9 + 1),
            Fun_9_loop(I_10, Mat_9);
        _ -> {I_9, Mat_9}
    end
end,
{I_10, Mat_9} = Fun_9(I_9, Mat_9),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('mat', make_matrix(4)),
    io:format("~ts~n", [mochi_repr("\norigin:\n")]),
    print_matrix(erlang:get('mat')),
    io:format("~ts~n", [mochi_repr("\nrotate 90 counterclockwise:\n")]),
    erlang:put('r90', rotate_90(erlang:get('mat'))),
    print_matrix(erlang:get('r90')),
    erlang:put('mat', make_matrix(4)),
    io:format("~ts~n", [mochi_repr("\norigin:\n")]),
    print_matrix(erlang:get('mat')),
    io:format("~ts~n", [mochi_repr("\nrotate 180:\n")]),
    erlang:put('r180', rotate_180(erlang:get('mat'))),
    print_matrix(erlang:get('r180')),
    erlang:put('mat', make_matrix(4)),
    io:format("~ts~n", [mochi_repr("\norigin:\n")]),
    print_matrix(erlang:get('mat')),
    io:format("~ts~n", [mochi_repr("\nrotate 270 counterclockwise:\n")]),
    erlang:put('r270', rotate_270(erlang:get('mat'))),
    print_matrix(erlang:get('r270')),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
