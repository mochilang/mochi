#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, max_cross_sum/4, max_subarray/3, show/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

max_cross_sum(Arr, Low, Mid, High) ->
    try
        Left_sum = -1.0e+18,
        Max_left = -1,
        Sum = 0,
        I = Mid,
        Fun = fun Fun_loop(Arr, High, I, Left_sum, Low, Max_left, Mid, Sum) ->
    case (I >= Low) of
        true ->
            Sum_2 = (Sum + (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Arr) + I + 1, Arr); _ -> lists:nth(I + 1, Arr) end end)),
            case (Sum_2 > Left_sum) of
        true -> Left_sum_2 = Sum_2,
            Max_left_2 = I,
            Left_sum_3 = Left_sum_2,
            Max_left_3 = Max_left_2;
        _ -> Left_sum_3 = Left_sum,
            Max_left_3 = Max_left
    end,
            I_2 = (I - 1),
            Fun_loop(Arr, High, I_2, Left_sum_3, Low, Max_left_3, Mid, Sum_2);
        _ -> {Arr, High, I, Left_sum, Low, Max_left, Mid, Sum}
    end
end,
{Arr, High, I_2, Left_sum_3, Low, Max_left_3, Mid, Sum_2} = Fun(Arr, High, I, Left_sum, Low, Max_left, Mid, Sum),
        Right_sum = -1.0e+18,
        Max_right = -1,
        Sum_3 = 0,
        I_3 = (Mid + 1),
        Fun_2 = fun Fun_2_loop(Arr, High, I_3, Left_sum_3, Low, Max_left_3, Max_right, Mid, Right_sum, Sum_3) ->
    case (I_3 =< High) of
        true ->
            Sum_4 = (Sum_3 + (case erlang:is_map(Arr) of true -> maps:get(I_3, Arr, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Arr) + I_3 + 1, Arr); _ -> lists:nth(I_3 + 1, Arr) end end)),
            case (Sum_4 > Right_sum) of
        true -> Right_sum_2 = Sum_4,
            Max_right_2 = I_3,
            Max_right_3 = Max_right_2,
            Right_sum_3 = Right_sum_2;
        _ -> Max_right_3 = Max_right,
            Right_sum_3 = Right_sum
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr, High, I_4, Left_sum_3, Low, Max_left_3, Max_right_3, Mid, Right_sum_3, Sum_4);
        _ -> {Arr, High, I_3, Left_sum_3, Low, Max_left_3, Max_right, Mid, Right_sum, Sum_3}
    end
end,
{Arr, High, I_4, Left_sum_3, Low, Max_left_3, Max_right_3, Mid, Right_sum_3, Sum_4} = Fun_2(Arr, High, I_3, Left_sum_3, Low, Max_left_3, Max_right, Mid, Right_sum, Sum_3),
        #{"start" => Max_left_3, "end" => Max_right_3, "sum" => (Left_sum_3 + Right_sum_3)}
    catch {return, Ret} -> Ret end.

max_subarray(Arr_2, Low_2, High_2) ->
    try
        case (erlang:length(Arr_2) == 0) of
        true -> throw({return, #{"start" => -1, "end" => -1, "sum" => 0}});
        _ -> ok
    end,
        case (Low_2 == High_2) of
        true -> throw({return, #{"start" => Low_2, "end" => High_2, "sum" => (case erlang:is_map(Arr_2) of true -> maps:get(Low_2, Arr_2, nil); _ -> case Low_2 < 0 of true -> lists:nth(erlang:length(Arr_2) + Low_2 + 1, Arr_2); _ -> lists:nth(Low_2 + 1, Arr_2) end end)}});
        _ -> ok
    end,
        Mid_2 = ((Low_2 + High_2) div 2),
        Left = max_subarray(Arr_2, Low_2, Mid_2),
        Right = max_subarray(Arr_2, (Mid_2 + 1), High_2),
        Cross = max_cross_sum(Arr_2, Low_2, Mid_2, High_2),
        case ((maps:get("sum", Left, nil) >= maps:get("sum", Right, nil)) andalso (maps:get("sum", Left, nil) >= maps:get("sum", Cross, nil))) of
        true -> throw({return, Left});
        _ -> ok
    end,
        case ((maps:get("sum", Right, nil) >= maps:get("sum", Left, nil)) andalso (maps:get("sum", Right, nil) >= maps:get("sum", Cross, nil))) of
        true -> throw({return, Right});
        _ -> ok
    end,
        Cross
    catch {return, Ret} -> Ret end.

show(Res) ->
    try
        io:format("~ts~n", [mochi_repr((((((("[" ++ mochi_str(maps:get("start", Res, nil))) ++ ", ") ++ mochi_str(maps:get("end", Res, nil))) ++ ", ") ++ mochi_str(maps:get("sum", Res, nil))) ++ "]"))]),
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        Nums1 = [-2, 1, -3, 4, -1, 2, 1, -5, 4],
        Res1 = max_subarray(Nums1, 0, (erlang:length(Nums1) - 1)),
        show(Res1),
        Nums2 = [2, 8, 9],
        Res2 = max_subarray(Nums2, 0, (erlang:length(Nums2) - 1)),
        show(Res2),
        Nums3 = [0, 0],
        Res3 = max_subarray(Nums3, 0, (erlang:length(Nums3) - 1)),
        show(Res3),
        Nums4 = [-1, 0, 1],
        Res4 = max_subarray(Nums4, 0, (erlang:length(Nums4) - 1)),
        show(Res4),
        Nums5 = [-2, -3, -1, -4, -6],
        Res5 = max_subarray(Nums5, 0, (erlang:length(Nums5) - 1)),
        show(Res5),
        Nums6 = [],
        Res6 = max_subarray(Nums6, 0, 0),
        show(Res6),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
