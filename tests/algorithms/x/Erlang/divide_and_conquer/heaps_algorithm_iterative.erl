#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, copy_list/1, heaps/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

copy_list(Arr) ->
    try
        Result = [],
        I = 0,
        Fun = fun Fun_loop(Arr, I, Result) ->
    case (I < erlang:length(Arr)) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Arr) + I + 1, Arr); _ -> lists:nth(I + 1, Arr) end end)]),
            I_2 = (I + 1),
            Fun_loop(Arr, I_2, Result_2);
        _ -> {Arr, I, Result}
    end
end,
{Arr, I_2, Result_2} = Fun(Arr, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

heaps(Arr_2) ->
    try
        case (erlang:length(Arr_2) =< 1) of
        true -> Single = [],
            throw({return, lists:append((case Single of nil -> []; _ -> Single end), [copy_list(Arr_2)])}),
            Single_2 = Single;
        _ -> Single_2 = nil
    end,
        N = erlang:length(Arr_2),
        C = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Arr_2, C, I_3, N, Single_2) ->
    case (I_3 < N) of
        true ->
            C_2 = lists:append((case C of nil -> []; _ -> C end), [0]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr_2, C_2, I_4, N, Single_2);
        _ -> {Arr_2, C, I_3, N, Single_2}
    end
end,
{Arr_2, C_2, I_4, N, Single_2} = Fun_2(Arr_2, C, I_3, N, Single_2),
        Res = [],
        Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [copy_list(Arr_2)]),
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Arr_2, C_2, I_5, N, Res_2, Single_2) ->
    case (I_5 < N) of
        true ->
            case ((case erlang:is_map(C_2) of true -> maps:get(I_5, C_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(C_2) + I_5 + 1, C_2); _ -> lists:nth(I_5 + 1, C_2) end end) < I_5) of
        true -> case (mochi_mod(I_5, 2) == 0) of
        true -> Temp = (case erlang:is_map(Arr_2) of true -> maps:get(0, Arr_2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Arr_2) + 0 + 1, Arr_2); _ -> lists:nth(0 + 1, Arr_2) end end),
            Arr_3 = lists:sublist(Arr_2, 0) ++ [(case erlang:is_map(Arr_2) of true -> maps:get(I_5, Arr_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Arr_2) + I_5 + 1, Arr_2); _ -> lists:nth(I_5 + 1, Arr_2) end end)] ++ lists:nthtail(0 + 1, Arr_2),
            Arr_4 = lists:sublist(Arr_3, I_5) ++ [Temp] ++ lists:nthtail(I_5 + 1, Arr_3),
            Arr_7 = Arr_4,
            Temp_3 = Temp;
        _ -> Temp_2 = (case erlang:is_map(Arr_2) of true -> maps:get((case erlang:is_map(C_2) of true -> maps:get(I_5, C_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(C_2) + I_5 + 1, C_2); _ -> lists:nth(I_5 + 1, C_2) end end), Arr_2, nil); _ -> case (case erlang:is_map(C_2) of true -> maps:get(I_5, C_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(C_2) + I_5 + 1, C_2); _ -> lists:nth(I_5 + 1, C_2) end end) < 0 of true -> lists:nth(erlang:length(Arr_2) + (case erlang:is_map(C_2) of true -> maps:get(I_5, C_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(C_2) + I_5 + 1, C_2); _ -> lists:nth(I_5 + 1, C_2) end end) + 1, Arr_2); _ -> lists:nth((case erlang:is_map(C_2) of true -> maps:get(I_5, C_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(C_2) + I_5 + 1, C_2); _ -> lists:nth(I_5 + 1, C_2) end end) + 1, Arr_2) end end),
            Arr_5 = lists:sublist(Arr_2, (case erlang:is_map(C_2) of true -> maps:get(I_5, C_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(C_2) + I_5 + 1, C_2); _ -> lists:nth(I_5 + 1, C_2) end end)) ++ [(case erlang:is_map(Arr_2) of true -> maps:get(I_5, Arr_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(Arr_2) + I_5 + 1, Arr_2); _ -> lists:nth(I_5 + 1, Arr_2) end end)] ++ lists:nthtail((case erlang:is_map(C_2) of true -> maps:get(I_5, C_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(C_2) + I_5 + 1, C_2); _ -> lists:nth(I_5 + 1, C_2) end end) + 1, Arr_2),
            Arr_6 = lists:sublist(Arr_5, I_5) ++ [Temp_2] ++ lists:nthtail(I_5 + 1, Arr_5),
            Arr_7 = Arr_6,
            Temp_3 = Temp_2
    end,
            Res_3 = lists:append((case Res_2 of nil -> []; _ -> Res_2 end), [copy_list(Arr_7)]),
            C_3 = lists:sublist(C_2, I_5) ++ [((case erlang:is_map(C_2) of true -> maps:get(I_5, C_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(C_2) + I_5 + 1, C_2); _ -> lists:nth(I_5 + 1, C_2) end end) + 1)] ++ lists:nthtail(I_5 + 1, C_2),
            I_6 = 0,
            Arr_8 = Arr_7,
            C_5 = C_3,
            I_8 = I_6,
            Res_4 = Res_3,
            Temp_4 = Temp_3;
        _ -> C_4 = lists:sublist(C_2, I_5) ++ [0] ++ lists:nthtail(I_5 + 1, C_2),
            I_7 = (I_5 + 1),
            Arr_8 = Arr_2,
            C_5 = C_4,
            I_8 = I_7,
            Res_4 = Res_2,
            Temp_4 = nil
    end,
            Fun_3_loop(Arr_8, C_5, I_8, N, Res_4, Single_2);
        _ -> {Arr_2, C_2, I_5, N, Res_2, Single_2}
    end
end,
{Arr_8, C_5, I_8, N, Res_4, Single_2} = Fun_3(Arr_2, C_2, I_5, N, Res_2, Single_2),
        Res_4
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(heaps([1, 2, 3]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
