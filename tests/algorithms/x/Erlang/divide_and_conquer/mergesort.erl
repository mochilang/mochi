#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, subarray/3, merge/2, merge_sort/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

subarray(Xs, Start, End) ->
    try
        Result = [],
        K = Start,
        Fun = fun Fun_loop(End, K, Result, Start, Xs) ->
    case (K < End) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Xs) of true -> maps:get(K, Xs, nil); _ -> case K < 0 of true -> lists:nth(erlang:length(Xs) + K + 1, Xs); _ -> lists:nth(K + 1, Xs) end end)]),
            K_2 = (K + 1),
            Fun_loop(End, K_2, Result_2, Start, Xs);
        _ -> {End, K, Result, Start, Xs}
    end
end,
{End, K_2, Result_2, Start, Xs} = Fun(End, K, Result, Start, Xs),
        Result_2
    catch {return, Ret} -> Ret end.

merge(Left_half, Right_half) ->
    try
        Result_3 = [],
        I = 0,
        J = 0,
        Fun_2 = fun Fun_2_loop(I, J, Left_half, Result_3, Right_half) ->
    case ((I < erlang:length(Left_half)) andalso (J < erlang:length(Right_half))) of
        true ->
            case ((case erlang:is_map(Left_half) of true -> maps:get(I, Left_half, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Left_half) + I + 1, Left_half); _ -> lists:nth(I + 1, Left_half) end end) < (case erlang:is_map(Right_half) of true -> maps:get(J, Right_half, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Right_half) + J + 1, Right_half); _ -> lists:nth(J + 1, Right_half) end end)) of
        true -> Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [(case erlang:is_map(Left_half) of true -> maps:get(I, Left_half, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Left_half) + I + 1, Left_half); _ -> lists:nth(I + 1, Left_half) end end)]),
            I_2 = (I + 1),
            I_3 = I_2,
            J_3 = J,
            Result_6 = Result_4;
        _ -> Result_5 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [(case erlang:is_map(Right_half) of true -> maps:get(J, Right_half, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Right_half) + J + 1, Right_half); _ -> lists:nth(J + 1, Right_half) end end)]),
            J_2 = (J + 1),
            I_3 = I,
            J_3 = J_2,
            Result_6 = Result_5
    end,
            Fun_2_loop(I_3, J_3, Left_half, Result_6, Right_half);
        _ -> {I, J, Left_half, Result_3, Right_half}
    end
end,
{I_3, J_3, Left_half, Result_6, Right_half} = Fun_2(I, J, Left_half, Result_3, Right_half),
        Fun_3 = fun Fun_3_loop(I_3, J_3, Left_half, Result_6, Right_half) ->
    case (I_3 < erlang:length(Left_half)) of
        true ->
            Result_7 = lists:append((case Result_6 of nil -> []; _ -> Result_6 end), [(case erlang:is_map(Left_half) of true -> maps:get(I_3, Left_half, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Left_half) + I_3 + 1, Left_half); _ -> lists:nth(I_3 + 1, Left_half) end end)]),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, J_3, Left_half, Result_7, Right_half);
        _ -> {I_3, J_3, Left_half, Result_6, Right_half}
    end
end,
{I_4, J_3, Left_half, Result_7, Right_half} = Fun_3(I_3, J_3, Left_half, Result_6, Right_half),
        Fun_4 = fun Fun_4_loop(I_4, J_3, Left_half, Result_7, Right_half) ->
    case (J_3 < erlang:length(Right_half)) of
        true ->
            Result_8 = lists:append((case Result_7 of nil -> []; _ -> Result_7 end), [(case erlang:is_map(Right_half) of true -> maps:get(J_3, Right_half, nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length(Right_half) + J_3 + 1, Right_half); _ -> lists:nth(J_3 + 1, Right_half) end end)]),
            J_4 = (J_3 + 1),
            Fun_4_loop(I_4, J_4, Left_half, Result_8, Right_half);
        _ -> {I_4, J_3, Left_half, Result_7, Right_half}
    end
end,
{I_4, J_4, Left_half, Result_8, Right_half} = Fun_4(I_4, J_3, Left_half, Result_7, Right_half),
        Result_8
    catch {return, Ret} -> Ret end.

merge_sort(Array) ->
    try
        case (erlang:length(Array) =< 1) of
        true -> throw({return, Array});
        _ -> ok
    end,
        Middle = (erlang:length(Array) div 2),
        Left_half_2 = subarray(Array, 0, Middle),
        Right_half_2 = subarray(Array, Middle, erlang:length(Array)),
        Sorted_left = merge_sort(Left_half_2),
        Sorted_right = merge_sort(Right_half_2),
        merge(Sorted_left, Sorted_right)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(merge_sort([5, 3, 1, 4, 2]))]),
    io:format("~ts~n", [mochi_str(merge_sort([-2, 3, -10, 11, 99, 100000, 100, -200]))]),
    io:format("~ts~n", [mochi_str(merge_sort([-200]))]),
    io:format("~ts~n", [mochi_str(merge_sort([]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
