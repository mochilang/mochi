#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, default_matrix_multiplication/2, matrix_addition/2, matrix_subtraction/2, split_matrix/1, matrix_dimensions/1, next_power_of_two/1, pad_matrix/3, actual_strassen/2, strassen/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

default_matrix_multiplication(A, B) ->
    try
        [[(((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)) of true -> maps:get(0, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)) + 0 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)) of true -> maps:get(0, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)) + 0 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)) end end)) + ((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)) of true -> maps:get(1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)) + 1 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)) of true -> maps:get(0, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)) + 0 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)) end end))), (((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)) of true -> maps:get(0, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)) + 0 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)) of true -> maps:get(1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)) + 1 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)) end end)) + ((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)) of true -> maps:get(1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)) + 1 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(A) of true -> maps:get(0, A, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(A) + 0 + 1, A); _ -> lists:nth(0 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)) of true -> maps:get(1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)) + 1 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)) end end)))], [(((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)) of true -> maps:get(0, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)) + 0 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)) of true -> maps:get(0, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)) + 0 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)) end end)) + ((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)) of true -> maps:get(1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)) + 1 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)) of true -> maps:get(0, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)) + 0 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)) end end))), (((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)) of true -> maps:get(0, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)) + 0 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)); _ -> lists:nth(0 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)) of true -> maps:get(1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)) + 1 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(B) of true -> maps:get(0, B, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(B) + 0 + 1, B); _ -> lists:nth(0 + 1, B) end end)) end end)) + ((case erlang:is_map((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)) of true -> maps:get(1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)) + 1 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(A) of true -> maps:get(1, A, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(A) + 1 + 1, A); _ -> lists:nth(1 + 1, A) end end)) end end) * (case erlang:is_map((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)) of true -> maps:get(1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end), nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)) + 1 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)); _ -> lists:nth(1 + 1, (case erlang:is_map(B) of true -> maps:get(1, B, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(B) + 1 + 1, B); _ -> lists:nth(1 + 1, B) end end)) end end)))]]
    catch {return, Ret} -> Ret end.

matrix_addition(Matrix_a, Matrix_b) ->
    try
        Result = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Matrix_a, Matrix_b, Result) ->
    case (I < erlang:length(Matrix_a)) of
        true ->
            Row = [],
            J = 0,
            Fun = fun Fun_loop(I, J, Matrix_a, Matrix_b, Result, Row) ->
    case (J < erlang:length((case erlang:is_map(Matrix_a) of true -> maps:get(I, Matrix_a, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Matrix_a) + I + 1, Matrix_a); _ -> lists:nth(I + 1, Matrix_a) end end))) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [((case erlang:is_map((case erlang:is_map(Matrix_a) of true -> maps:get(I, Matrix_a, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Matrix_a) + I + 1, Matrix_a); _ -> lists:nth(I + 1, Matrix_a) end end)) of true -> maps:get(J, (case erlang:is_map(Matrix_a) of true -> maps:get(I, Matrix_a, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Matrix_a) + I + 1, Matrix_a); _ -> lists:nth(I + 1, Matrix_a) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Matrix_a) of true -> maps:get(I, Matrix_a, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Matrix_a) + I + 1, Matrix_a); _ -> lists:nth(I + 1, Matrix_a) end end)) + J + 1, (case erlang:is_map(Matrix_a) of true -> maps:get(I, Matrix_a, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Matrix_a) + I + 1, Matrix_a); _ -> lists:nth(I + 1, Matrix_a) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Matrix_a) of true -> maps:get(I, Matrix_a, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Matrix_a) + I + 1, Matrix_a); _ -> lists:nth(I + 1, Matrix_a) end end)) end end) + (case erlang:is_map((case erlang:is_map(Matrix_b) of true -> maps:get(I, Matrix_b, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Matrix_b) + I + 1, Matrix_b); _ -> lists:nth(I + 1, Matrix_b) end end)) of true -> maps:get(J, (case erlang:is_map(Matrix_b) of true -> maps:get(I, Matrix_b, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Matrix_b) + I + 1, Matrix_b); _ -> lists:nth(I + 1, Matrix_b) end end), nil); _ -> case J < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Matrix_b) of true -> maps:get(I, Matrix_b, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Matrix_b) + I + 1, Matrix_b); _ -> lists:nth(I + 1, Matrix_b) end end)) + J + 1, (case erlang:is_map(Matrix_b) of true -> maps:get(I, Matrix_b, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Matrix_b) + I + 1, Matrix_b); _ -> lists:nth(I + 1, Matrix_b) end end)); _ -> lists:nth(J + 1, (case erlang:is_map(Matrix_b) of true -> maps:get(I, Matrix_b, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Matrix_b) + I + 1, Matrix_b); _ -> lists:nth(I + 1, Matrix_b) end end)) end end))]),
            J_2 = (J + 1),
            Fun_loop(I, J_2, Matrix_a, Matrix_b, Result, Row_2);
        _ -> {I, J, Matrix_a, Matrix_b, Result, Row}
    end
end,
{I, J_2, Matrix_a, Matrix_b, Result, Row_2} = Fun(I, J, Matrix_a, Matrix_b, Result, Row),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Row_2]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Matrix_a, Matrix_b, Result_2);
        _ -> {I, Matrix_a, Matrix_b, Result}
    end
end,
{I_2, Matrix_a, Matrix_b, Result_2} = Fun_2(I, Matrix_a, Matrix_b, Result),
        Result_2
    catch {return, Ret} -> Ret end.

matrix_subtraction(Matrix_a_2, Matrix_b_2) ->
    try
        Result_3 = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(I_3, Matrix_a_2, Matrix_b_2, Result_3) ->
    case (I_3 < erlang:length(Matrix_a_2)) of
        true ->
            Row_3 = [],
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(I_3, J_3, Matrix_a_2, Matrix_b_2, Result_3, Row_3) ->
    case (J_3 < erlang:length((case erlang:is_map(Matrix_a_2) of true -> maps:get(I_3, Matrix_a_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Matrix_a_2) + I_3 + 1, Matrix_a_2); _ -> lists:nth(I_3 + 1, Matrix_a_2) end end))) of
        true ->
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [((case erlang:is_map((case erlang:is_map(Matrix_a_2) of true -> maps:get(I_3, Matrix_a_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Matrix_a_2) + I_3 + 1, Matrix_a_2); _ -> lists:nth(I_3 + 1, Matrix_a_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Matrix_a_2) of true -> maps:get(I_3, Matrix_a_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Matrix_a_2) + I_3 + 1, Matrix_a_2); _ -> lists:nth(I_3 + 1, Matrix_a_2) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Matrix_a_2) of true -> maps:get(I_3, Matrix_a_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Matrix_a_2) + I_3 + 1, Matrix_a_2); _ -> lists:nth(I_3 + 1, Matrix_a_2) end end)) + J_3 + 1, (case erlang:is_map(Matrix_a_2) of true -> maps:get(I_3, Matrix_a_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Matrix_a_2) + I_3 + 1, Matrix_a_2); _ -> lists:nth(I_3 + 1, Matrix_a_2) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Matrix_a_2) of true -> maps:get(I_3, Matrix_a_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Matrix_a_2) + I_3 + 1, Matrix_a_2); _ -> lists:nth(I_3 + 1, Matrix_a_2) end end)) end end) - (case erlang:is_map((case erlang:is_map(Matrix_b_2) of true -> maps:get(I_3, Matrix_b_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Matrix_b_2) + I_3 + 1, Matrix_b_2); _ -> lists:nth(I_3 + 1, Matrix_b_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Matrix_b_2) of true -> maps:get(I_3, Matrix_b_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Matrix_b_2) + I_3 + 1, Matrix_b_2); _ -> lists:nth(I_3 + 1, Matrix_b_2) end end), nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Matrix_b_2) of true -> maps:get(I_3, Matrix_b_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Matrix_b_2) + I_3 + 1, Matrix_b_2); _ -> lists:nth(I_3 + 1, Matrix_b_2) end end)) + J_3 + 1, (case erlang:is_map(Matrix_b_2) of true -> maps:get(I_3, Matrix_b_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Matrix_b_2) + I_3 + 1, Matrix_b_2); _ -> lists:nth(I_3 + 1, Matrix_b_2) end end)); _ -> lists:nth(J_3 + 1, (case erlang:is_map(Matrix_b_2) of true -> maps:get(I_3, Matrix_b_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Matrix_b_2) + I_3 + 1, Matrix_b_2); _ -> lists:nth(I_3 + 1, Matrix_b_2) end end)) end end))]),
            J_4 = (J_3 + 1),
            Fun_3_loop(I_3, J_4, Matrix_a_2, Matrix_b_2, Result_3, Row_4);
        _ -> {I_3, J_3, Matrix_a_2, Matrix_b_2, Result_3, Row_3}
    end
end,
{I_3, J_4, Matrix_a_2, Matrix_b_2, Result_3, Row_4} = Fun_3(I_3, J_3, Matrix_a_2, Matrix_b_2, Result_3, Row_3),
            Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [Row_4]),
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, Matrix_a_2, Matrix_b_2, Result_4);
        _ -> {I_3, Matrix_a_2, Matrix_b_2, Result_3}
    end
end,
{I_4, Matrix_a_2, Matrix_b_2, Result_4} = Fun_4(I_3, Matrix_a_2, Matrix_b_2, Result_3),
        Result_4
    catch {return, Ret} -> Ret end.

split_matrix(A_2) ->
    try
        N = erlang:length(A_2),
        Mid = (N div 2),
        Top_left = [],
        Top_right = [],
        Bot_left = [],
        Bot_right = [],
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(A_2, Bot_left, Bot_right, I_5, Mid, N, Top_left, Top_right) ->
    case (I_5 < Mid) of
        true ->
            Left_row = [],
            Right_row = [],
            J_5 = 0,
            Fun_5 = fun Fun_5_loop(A_2, Bot_left, Bot_right, I_5, J_5, Left_row, Mid, N, Right_row, Top_left, Top_right) ->
    case (J_5 < Mid) of
        true ->
            Left_row_2 = lists:append((case Left_row of nil -> []; _ -> Left_row end), [(case erlang:is_map((case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> lists:nth(I_5 + 1, A_2) end end)) of true -> maps:get(J_5, (case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> lists:nth(I_5 + 1, A_2) end end), nil); _ -> case J_5 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> lists:nth(I_5 + 1, A_2) end end)) + J_5 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> lists:nth(I_5 + 1, A_2) end end)); _ -> lists:nth(J_5 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> lists:nth(I_5 + 1, A_2) end end)) end end)]),
            Right_row_2 = lists:append((case Right_row of nil -> []; _ -> Right_row end), [(case erlang:is_map((case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> lists:nth(I_5 + 1, A_2) end end)) of true -> maps:get((J_5 + Mid), (case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> lists:nth(I_5 + 1, A_2) end end), nil); _ -> case (J_5 + Mid) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> lists:nth(I_5 + 1, A_2) end end)) + (J_5 + Mid) + 1, (case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> lists:nth(I_5 + 1, A_2) end end)); _ -> lists:nth((J_5 + Mid) + 1, (case erlang:is_map(A_2) of true -> maps:get(I_5, A_2, nil); _ -> case I_5 < 0 of true -> lists:nth(erlang:length(A_2) + I_5 + 1, A_2); _ -> lists:nth(I_5 + 1, A_2) end end)) end end)]),
            J_6 = (J_5 + 1),
            Fun_5_loop(A_2, Bot_left, Bot_right, I_5, J_6, Left_row_2, Mid, N, Right_row_2, Top_left, Top_right);
        _ -> {A_2, Bot_left, Bot_right, I_5, J_5, Left_row, Mid, N, Right_row, Top_left, Top_right}
    end
end,
{A_2, Bot_left, Bot_right, I_5, J_6, Left_row_2, Mid, N, Right_row_2, Top_left, Top_right} = Fun_5(A_2, Bot_left, Bot_right, I_5, J_5, Left_row, Mid, N, Right_row, Top_left, Top_right),
            Top_left_2 = lists:append((case Top_left of nil -> []; _ -> Top_left end), [Left_row_2]),
            Top_right_2 = lists:append((case Top_right of nil -> []; _ -> Top_right end), [Right_row_2]),
            I_6 = (I_5 + 1),
            Fun_6_loop(A_2, Bot_left, Bot_right, I_6, Mid, N, Top_left_2, Top_right_2);
        _ -> {A_2, Bot_left, Bot_right, I_5, Mid, N, Top_left, Top_right}
    end
end,
{A_2, Bot_left, Bot_right, I_6, Mid, N, Top_left_2, Top_right_2} = Fun_6(A_2, Bot_left, Bot_right, I_5, Mid, N, Top_left, Top_right),
        I_7 = Mid,
        Fun_8 = fun Fun_8_loop(A_2, Bot_left, Bot_right, I_7, Mid, N, Top_left_2, Top_right_2) ->
    case (I_7 < N) of
        true ->
            Left_row_3 = [],
            Right_row_3 = [],
            J_7 = 0,
            Fun_7 = fun Fun_7_loop(A_2, Bot_left, Bot_right, I_7, J_7, Left_row_3, Mid, N, Right_row_3, Top_left_2, Top_right_2) ->
    case (J_7 < Mid) of
        true ->
            Left_row_4 = lists:append((case Left_row_3 of nil -> []; _ -> Left_row_3 end), [(case erlang:is_map((case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> lists:nth(I_7 + 1, A_2) end end)) of true -> maps:get(J_7, (case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> lists:nth(I_7 + 1, A_2) end end), nil); _ -> case J_7 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> lists:nth(I_7 + 1, A_2) end end)) + J_7 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> lists:nth(I_7 + 1, A_2) end end)); _ -> lists:nth(J_7 + 1, (case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> lists:nth(I_7 + 1, A_2) end end)) end end)]),
            Right_row_4 = lists:append((case Right_row_3 of nil -> []; _ -> Right_row_3 end), [(case erlang:is_map((case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> lists:nth(I_7 + 1, A_2) end end)) of true -> maps:get((J_7 + Mid), (case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> lists:nth(I_7 + 1, A_2) end end), nil); _ -> case (J_7 + Mid) < 0 of true -> lists:nth(erlang:length((case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> lists:nth(I_7 + 1, A_2) end end)) + (J_7 + Mid) + 1, (case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> lists:nth(I_7 + 1, A_2) end end)); _ -> lists:nth((J_7 + Mid) + 1, (case erlang:is_map(A_2) of true -> maps:get(I_7, A_2, nil); _ -> case I_7 < 0 of true -> lists:nth(erlang:length(A_2) + I_7 + 1, A_2); _ -> lists:nth(I_7 + 1, A_2) end end)) end end)]),
            J_8 = (J_7 + 1),
            Fun_7_loop(A_2, Bot_left, Bot_right, I_7, J_8, Left_row_4, Mid, N, Right_row_4, Top_left_2, Top_right_2);
        _ -> {A_2, Bot_left, Bot_right, I_7, J_7, Left_row_3, Mid, N, Right_row_3, Top_left_2, Top_right_2}
    end
end,
{A_2, Bot_left, Bot_right, I_7, J_8, Left_row_4, Mid, N, Right_row_4, Top_left_2, Top_right_2} = Fun_7(A_2, Bot_left, Bot_right, I_7, J_7, Left_row_3, Mid, N, Right_row_3, Top_left_2, Top_right_2),
            Bot_left_2 = lists:append((case Bot_left of nil -> []; _ -> Bot_left end), [Left_row_4]),
            Bot_right_2 = lists:append((case Bot_right of nil -> []; _ -> Bot_right end), [Right_row_4]),
            I_8 = (I_7 + 1),
            Fun_8_loop(A_2, Bot_left_2, Bot_right_2, I_8, Mid, N, Top_left_2, Top_right_2);
        _ -> {A_2, Bot_left, Bot_right, I_7, Mid, N, Top_left_2, Top_right_2}
    end
end,
{A_2, Bot_left_2, Bot_right_2, I_8, Mid, N, Top_left_2, Top_right_2} = Fun_8(A_2, Bot_left, Bot_right, I_7, Mid, N, Top_left_2, Top_right_2),
        [Top_left_2, Top_right_2, Bot_left_2, Bot_right_2]
    catch {return, Ret} -> Ret end.

matrix_dimensions(Matrix) ->
    try
        [erlang:length(Matrix), erlang:length((case erlang:is_map(Matrix) of true -> maps:get(0, Matrix, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Matrix) + 0 + 1, Matrix); _ -> lists:nth(0 + 1, Matrix) end end))]
    catch {return, Ret} -> Ret end.

next_power_of_two(N_2) ->
    try
        P = 1,
        Fun_9 = fun Fun_9_loop(N_2, P) ->
    case (P < N_2) of
        true ->
            P_2 = (P * 2),
            Fun_9_loop(N_2, P_2);
        _ -> {N_2, P}
    end
end,
{N_2, P_2} = Fun_9(N_2, P),
        P_2
    catch {return, Ret} -> Ret end.

pad_matrix(Mat, Rows, Cols) ->
    try
        Res = [],
        I_9 = 0,
        Fun_11 = fun Fun_11_loop(Cols, I_9, Mat, Res, Rows) ->
    case (I_9 < Rows) of
        true ->
            Row_5 = [],
            J_9 = 0,
            Fun_10 = fun Fun_10_loop(Cols, I_9, J_9, Mat, Res, Row_5, Rows) ->
    case (J_9 < Cols) of
        true ->
            V = 0,
            case ((I_9 < erlang:length(Mat)) andalso (J_9 < erlang:length((case erlang:is_map(Mat) of true -> maps:get(0, Mat, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Mat) + 0 + 1, Mat); _ -> lists:nth(0 + 1, Mat) end end)))) of
        true -> V_2 = (case erlang:is_map((case erlang:is_map(Mat) of true -> maps:get(I_9, Mat, nil); _ -> case I_9 < 0 of true -> lists:nth(erlang:length(Mat) + I_9 + 1, Mat); _ -> lists:nth(I_9 + 1, Mat) end end)) of true -> maps:get(J_9, (case erlang:is_map(Mat) of true -> maps:get(I_9, Mat, nil); _ -> case I_9 < 0 of true -> lists:nth(erlang:length(Mat) + I_9 + 1, Mat); _ -> lists:nth(I_9 + 1, Mat) end end), nil); _ -> case J_9 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Mat) of true -> maps:get(I_9, Mat, nil); _ -> case I_9 < 0 of true -> lists:nth(erlang:length(Mat) + I_9 + 1, Mat); _ -> lists:nth(I_9 + 1, Mat) end end)) + J_9 + 1, (case erlang:is_map(Mat) of true -> maps:get(I_9, Mat, nil); _ -> case I_9 < 0 of true -> lists:nth(erlang:length(Mat) + I_9 + 1, Mat); _ -> lists:nth(I_9 + 1, Mat) end end)); _ -> lists:nth(J_9 + 1, (case erlang:is_map(Mat) of true -> maps:get(I_9, Mat, nil); _ -> case I_9 < 0 of true -> lists:nth(erlang:length(Mat) + I_9 + 1, Mat); _ -> lists:nth(I_9 + 1, Mat) end end)) end end),
            V_3 = V_2;
        _ -> V_3 = V
    end,
            Row_6 = lists:append((case Row_5 of nil -> []; _ -> Row_5 end), [V_3]),
            J_10 = (J_9 + 1),
            Fun_10_loop(Cols, I_9, J_10, Mat, Res, Row_6, Rows);
        _ -> {Cols, I_9, J_9, Mat, Res, Row_5, Rows}
    end
end,
{Cols, I_9, J_10, Mat, Res, Row_6, Rows} = Fun_10(Cols, I_9, J_9, Mat, Res, Row_5, Rows),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Row_6]),
            I_10 = (I_9 + 1),
            Fun_11_loop(Cols, I_10, Mat, Res_2, Rows);
        _ -> {Cols, I_9, Mat, Res, Rows}
    end
end,
{Cols, I_10, Mat, Res_2, Rows} = Fun_11(Cols, I_9, Mat, Res, Rows),
        Res_2
    catch {return, Ret} -> Ret end.

actual_strassen(Matrix_a_3, Matrix_b_3) ->
    try
        case ((case erlang:is_map(matrix_dimensions(Matrix_a_3)) of true -> maps:get(0, matrix_dimensions(Matrix_a_3), nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(matrix_dimensions(Matrix_a_3)) + 0 + 1, matrix_dimensions(Matrix_a_3)); _ -> lists:nth(0 + 1, matrix_dimensions(Matrix_a_3)) end end) == 2) of
        true -> throw({return, default_matrix_multiplication(Matrix_a_3, Matrix_b_3)});
        _ -> ok
    end,
        Parts_a = split_matrix(Matrix_a_3),
        A_3 = (case erlang:is_map(Parts_a) of true -> maps:get(0, Parts_a, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Parts_a) + 0 + 1, Parts_a); _ -> lists:nth(0 + 1, Parts_a) end end),
        B_2 = (case erlang:is_map(Parts_a) of true -> maps:get(1, Parts_a, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Parts_a) + 1 + 1, Parts_a); _ -> lists:nth(1 + 1, Parts_a) end end),
        C = (case erlang:is_map(Parts_a) of true -> maps:get(2, Parts_a, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Parts_a) + 2 + 1, Parts_a); _ -> lists:nth(2 + 1, Parts_a) end end),
        D = (case erlang:is_map(Parts_a) of true -> maps:get(3, Parts_a, nil); _ -> case 3 < 0 of true -> lists:nth(erlang:length(Parts_a) + 3 + 1, Parts_a); _ -> lists:nth(3 + 1, Parts_a) end end),
        Parts_b = split_matrix(Matrix_b_3),
        E = (case erlang:is_map(Parts_b) of true -> maps:get(0, Parts_b, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Parts_b) + 0 + 1, Parts_b); _ -> lists:nth(0 + 1, Parts_b) end end),
        F = (case erlang:is_map(Parts_b) of true -> maps:get(1, Parts_b, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Parts_b) + 1 + 1, Parts_b); _ -> lists:nth(1 + 1, Parts_b) end end),
        G = (case erlang:is_map(Parts_b) of true -> maps:get(2, Parts_b, nil); _ -> case 2 < 0 of true -> lists:nth(erlang:length(Parts_b) + 2 + 1, Parts_b); _ -> lists:nth(2 + 1, Parts_b) end end),
        H = (case erlang:is_map(Parts_b) of true -> maps:get(3, Parts_b, nil); _ -> case 3 < 0 of true -> lists:nth(erlang:length(Parts_b) + 3 + 1, Parts_b); _ -> lists:nth(3 + 1, Parts_b) end end),
        T1 = actual_strassen(A_3, matrix_subtraction(F, H)),
        T2 = actual_strassen(matrix_addition(A_3, B_2), H),
        T3 = actual_strassen(matrix_addition(C, D), E),
        T4 = actual_strassen(D, matrix_subtraction(G, E)),
        T5 = actual_strassen(matrix_addition(A_3, D), matrix_addition(E, H)),
        T6 = actual_strassen(matrix_subtraction(B_2, D), matrix_addition(G, H)),
        T7 = actual_strassen(matrix_subtraction(A_3, C), matrix_addition(E, F)),
        Top_left_3 = matrix_addition(matrix_subtraction(matrix_addition(T5, T4), T2), T6),
        Top_right_3 = matrix_addition(T1, T2),
        Bot_left_3 = matrix_addition(T3, T4),
        Bot_right_3 = matrix_subtraction(matrix_subtraction(matrix_addition(T1, T5), T3), T7),
        New_matrix = [],
        I_11 = 0,
        Fun_12 = fun Fun_12_loop(A_3, B_2, Bot_left_3, Bot_right_3, C, D, E, F, G, H, I_11, Matrix_a_3, Matrix_b_3, New_matrix, Parts_a, Parts_b, T1, T2, T3, T4, T5, T6, T7, Top_left_3, Top_right_3) ->
    case (I_11 < erlang:length(Top_right_3)) of
        true ->
            New_matrix_2 = lists:append((case New_matrix of nil -> []; _ -> New_matrix end), [lists:append((case erlang:is_map(Top_left_3) of true -> maps:get(I_11, Top_left_3, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(Top_left_3) + I_11 + 1, Top_left_3); _ -> lists:nth(I_11 + 1, Top_left_3) end end), (case erlang:is_map(Top_right_3) of true -> maps:get(I_11, Top_right_3, nil); _ -> case I_11 < 0 of true -> lists:nth(erlang:length(Top_right_3) + I_11 + 1, Top_right_3); _ -> lists:nth(I_11 + 1, Top_right_3) end end))]),
            I_12 = (I_11 + 1),
            Fun_12_loop(A_3, B_2, Bot_left_3, Bot_right_3, C, D, E, F, G, H, I_12, Matrix_a_3, Matrix_b_3, New_matrix_2, Parts_a, Parts_b, T1, T2, T3, T4, T5, T6, T7, Top_left_3, Top_right_3);
        _ -> {A_3, B_2, Bot_left_3, Bot_right_3, C, D, E, F, G, H, I_11, Matrix_a_3, Matrix_b_3, New_matrix, Parts_a, Parts_b, T1, T2, T3, T4, T5, T6, T7, Top_left_3, Top_right_3}
    end
end,
{A_3, B_2, Bot_left_3, Bot_right_3, C, D, E, F, G, H, I_12, Matrix_a_3, Matrix_b_3, New_matrix_2, Parts_a, Parts_b, T1, T2, T3, T4, T5, T6, T7, Top_left_3, Top_right_3} = Fun_12(A_3, B_2, Bot_left_3, Bot_right_3, C, D, E, F, G, H, I_11, Matrix_a_3, Matrix_b_3, New_matrix, Parts_a, Parts_b, T1, T2, T3, T4, T5, T6, T7, Top_left_3, Top_right_3),
        I_13 = 0,
        Fun_13 = fun Fun_13_loop(A_3, B_2, Bot_left_3, Bot_right_3, C, D, E, F, G, H, I_13, Matrix_a_3, Matrix_b_3, New_matrix_2, Parts_a, Parts_b, T1, T2, T3, T4, T5, T6, T7, Top_left_3, Top_right_3) ->
    case (I_13 < erlang:length(Bot_right_3)) of
        true ->
            New_matrix_3 = lists:append((case New_matrix_2 of nil -> []; _ -> New_matrix_2 end), [lists:append((case erlang:is_map(Bot_left_3) of true -> maps:get(I_13, Bot_left_3, nil); _ -> case I_13 < 0 of true -> lists:nth(erlang:length(Bot_left_3) + I_13 + 1, Bot_left_3); _ -> lists:nth(I_13 + 1, Bot_left_3) end end), (case erlang:is_map(Bot_right_3) of true -> maps:get(I_13, Bot_right_3, nil); _ -> case I_13 < 0 of true -> lists:nth(erlang:length(Bot_right_3) + I_13 + 1, Bot_right_3); _ -> lists:nth(I_13 + 1, Bot_right_3) end end))]),
            I_14 = (I_13 + 1),
            Fun_13_loop(A_3, B_2, Bot_left_3, Bot_right_3, C, D, E, F, G, H, I_14, Matrix_a_3, Matrix_b_3, New_matrix_3, Parts_a, Parts_b, T1, T2, T3, T4, T5, T6, T7, Top_left_3, Top_right_3);
        _ -> {A_3, B_2, Bot_left_3, Bot_right_3, C, D, E, F, G, H, I_13, Matrix_a_3, Matrix_b_3, New_matrix_2, Parts_a, Parts_b, T1, T2, T3, T4, T5, T6, T7, Top_left_3, Top_right_3}
    end
end,
{A_3, B_2, Bot_left_3, Bot_right_3, C, D, E, F, G, H, I_14, Matrix_a_3, Matrix_b_3, New_matrix_3, Parts_a, Parts_b, T1, T2, T3, T4, T5, T6, T7, Top_left_3, Top_right_3} = Fun_13(A_3, B_2, Bot_left_3, Bot_right_3, C, D, E, F, G, H, I_13, Matrix_a_3, Matrix_b_3, New_matrix_2, Parts_a, Parts_b, T1, T2, T3, T4, T5, T6, T7, Top_left_3, Top_right_3),
        New_matrix_3
    catch {return, Ret} -> Ret end.

strassen(Matrix1, Matrix2) ->
    try
        Dims1 = matrix_dimensions(Matrix1),
        Dims2 = matrix_dimensions(Matrix2),
        case ((case erlang:is_map(Dims1) of true -> maps:get(1, Dims1, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Dims1) + 1 + 1, Dims1); _ -> lists:nth(1 + 1, Dims1) end end) /= (case erlang:is_map(Dims2) of true -> maps:get(0, Dims2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Dims2) + 0 + 1, Dims2); _ -> lists:nth(0 + 1, Dims2) end end)) of
        true -> throw({return, []});
        _ -> ok
    end,
        Maximum = mochi_to_int(lists:max([(case erlang:is_map(Dims1) of true -> maps:get(0, Dims1, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Dims1) + 0 + 1, Dims1); _ -> lists:nth(0 + 1, Dims1) end end), (case erlang:is_map(Dims1) of true -> maps:get(1, Dims1, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Dims1) + 1 + 1, Dims1); _ -> lists:nth(1 + 1, Dims1) end end), (case erlang:is_map(Dims2) of true -> maps:get(0, Dims2, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Dims2) + 0 + 1, Dims2); _ -> lists:nth(0 + 1, Dims2) end end), (case erlang:is_map(Dims2) of true -> maps:get(1, Dims2, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Dims2) + 1 + 1, Dims2); _ -> lists:nth(1 + 1, Dims2) end end)])),
        Size = next_power_of_two(Maximum),
        New_matrix1 = pad_matrix(Matrix1, Size, Size),
        New_matrix2 = pad_matrix(Matrix2, Size, Size),
        Result_padded = actual_strassen(New_matrix1, New_matrix2),
        Final_matrix = [],
        I_15 = 0,
        Fun_15 = fun Fun_15_loop(Dims1, Dims2, Final_matrix, I_15, Matrix1, Matrix2, Maximum, New_matrix1, New_matrix2, Result_padded, Size) ->
    case (I_15 < (case erlang:is_map(Dims1) of true -> maps:get(0, Dims1, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Dims1) + 0 + 1, Dims1); _ -> lists:nth(0 + 1, Dims1) end end)) of
        true ->
            Row_7 = [],
            J_11 = 0,
            Fun_14 = fun Fun_14_loop(Dims1, Dims2, Final_matrix, I_15, J_11, Matrix1, Matrix2, Maximum, New_matrix1, New_matrix2, Result_padded, Row_7, Size) ->
    case (J_11 < (case erlang:is_map(Dims2) of true -> maps:get(1, Dims2, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Dims2) + 1 + 1, Dims2); _ -> lists:nth(1 + 1, Dims2) end end)) of
        true ->
            Row_8 = lists:append((case Row_7 of nil -> []; _ -> Row_7 end), [(case erlang:is_map((case erlang:is_map(Result_padded) of true -> maps:get(I_15, Result_padded, nil); _ -> case I_15 < 0 of true -> lists:nth(erlang:length(Result_padded) + I_15 + 1, Result_padded); _ -> lists:nth(I_15 + 1, Result_padded) end end)) of true -> maps:get(J_11, (case erlang:is_map(Result_padded) of true -> maps:get(I_15, Result_padded, nil); _ -> case I_15 < 0 of true -> lists:nth(erlang:length(Result_padded) + I_15 + 1, Result_padded); _ -> lists:nth(I_15 + 1, Result_padded) end end), nil); _ -> case J_11 < 0 of true -> lists:nth(erlang:length((case erlang:is_map(Result_padded) of true -> maps:get(I_15, Result_padded, nil); _ -> case I_15 < 0 of true -> lists:nth(erlang:length(Result_padded) + I_15 + 1, Result_padded); _ -> lists:nth(I_15 + 1, Result_padded) end end)) + J_11 + 1, (case erlang:is_map(Result_padded) of true -> maps:get(I_15, Result_padded, nil); _ -> case I_15 < 0 of true -> lists:nth(erlang:length(Result_padded) + I_15 + 1, Result_padded); _ -> lists:nth(I_15 + 1, Result_padded) end end)); _ -> lists:nth(J_11 + 1, (case erlang:is_map(Result_padded) of true -> maps:get(I_15, Result_padded, nil); _ -> case I_15 < 0 of true -> lists:nth(erlang:length(Result_padded) + I_15 + 1, Result_padded); _ -> lists:nth(I_15 + 1, Result_padded) end end)) end end)]),
            J_12 = (J_11 + 1),
            Fun_14_loop(Dims1, Dims2, Final_matrix, I_15, J_12, Matrix1, Matrix2, Maximum, New_matrix1, New_matrix2, Result_padded, Row_8, Size);
        _ -> {Dims1, Dims2, Final_matrix, I_15, J_11, Matrix1, Matrix2, Maximum, New_matrix1, New_matrix2, Result_padded, Row_7, Size}
    end
end,
{Dims1, Dims2, Final_matrix, I_15, J_12, Matrix1, Matrix2, Maximum, New_matrix1, New_matrix2, Result_padded, Row_8, Size} = Fun_14(Dims1, Dims2, Final_matrix, I_15, J_11, Matrix1, Matrix2, Maximum, New_matrix1, New_matrix2, Result_padded, Row_7, Size),
            Final_matrix_2 = lists:append((case Final_matrix of nil -> []; _ -> Final_matrix end), [Row_8]),
            I_16 = (I_15 + 1),
            Fun_15_loop(Dims1, Dims2, Final_matrix_2, I_16, Matrix1, Matrix2, Maximum, New_matrix1, New_matrix2, Result_padded, Size);
        _ -> {Dims1, Dims2, Final_matrix, I_15, Matrix1, Matrix2, Maximum, New_matrix1, New_matrix2, Result_padded, Size}
    end
end,
{Dims1, Dims2, Final_matrix_2, I_16, Matrix1, Matrix2, Maximum, New_matrix1, New_matrix2, Result_padded, Size} = Fun_15(Dims1, Dims2, Final_matrix, I_15, Matrix1, Matrix2, Maximum, New_matrix1, New_matrix2, Result_padded, Size),
        Final_matrix_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Matrix1_2 = [[2, 3, 4, 5], [6, 4, 3, 1], [2, 3, 6, 7], [3, 1, 2, 4], [2, 3, 4, 5], [6, 4, 3, 1], [2, 3, 6, 7], [3, 1, 2, 4], [2, 3, 4, 5], [6, 2, 3, 1]],
        Matrix2_2 = [[0, 2, 1, 1], [16, 2, 3, 3], [2, 2, 7, 7], [13, 11, 22, 4]],
        Res_3 = strassen(Matrix1_2, Matrix2_2),
        io:format("~ts~n", [mochi_repr(Res_3)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
