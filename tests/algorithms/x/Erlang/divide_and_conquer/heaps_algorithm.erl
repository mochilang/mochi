#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, permute/3, heaps/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

permute(K, Arr, Res) ->
    try
        case (K == 1) of
        true -> Copy = lists:sublist(Arr, 0 + 1, length(Arr) - 0),
            throw({return, lists:append((case Res of nil -> []; _ -> Res end), [Copy])}),
            Copy_2 = Copy;
        _ -> Copy_2 = nil
    end,
        Res_2 = permute((K - 1), Arr, Res),
        I = 0,
        Fun = fun Fun_loop(Arr, Copy_2, I, K, Res_2) ->
    case (I < (K - 1)) of
        true ->
            case (mochi_mod(K, 2) == 0) of
        true -> Temp = (case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Arr) + I + 1, Arr); _ -> lists:nth(I + 1, Arr) end end),
            Arr_2 = lists:sublist(Arr, I) ++ [(case erlang:is_map(Arr) of true -> maps:get((K - 1), Arr, nil); _ -> case (K - 1) < 0 of true -> lists:nth(erlang:length(Arr) + (K - 1) + 1, Arr); _ -> lists:nth((K - 1) + 1, Arr) end end)] ++ lists:nthtail(I + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, (K - 1)) ++ [Temp] ++ lists:nthtail((K - 1) + 1, Arr_2),
            Arr_6 = Arr_3,
            Temp_3 = Temp;
        _ -> Temp_2 = (case erlang:is_map(Arr) of true -> maps:get(0, Arr, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Arr) + 0 + 1, Arr); _ -> lists:nth(0 + 1, Arr) end end),
            Arr_4 = lists:sublist(Arr, 0) ++ [(case erlang:is_map(Arr) of true -> maps:get((K - 1), Arr, nil); _ -> case (K - 1) < 0 of true -> lists:nth(erlang:length(Arr) + (K - 1) + 1, Arr); _ -> lists:nth((K - 1) + 1, Arr) end end)] ++ lists:nthtail(0 + 1, Arr),
            Arr_5 = lists:sublist(Arr_4, (K - 1)) ++ [Temp_2] ++ lists:nthtail((K - 1) + 1, Arr_4),
            Arr_6 = Arr_5,
            Temp_3 = Temp_2
    end,
            Res_3 = permute((K - 1), Arr_6, Res_2),
            I_2 = (I + 1),
            Fun_loop(Arr_6, Copy_2, I_2, K, Res_3);
        _ -> {Arr, Copy_2, I, K, Res_2}
    end
end,
{Arr_6, Copy_2, I_2, K, Res_3} = Fun(Arr, Copy_2, I, K, Res_2),
        Res_3
    catch {return, Ret} -> Ret end.

heaps(Arr_7) ->
    try
        case (erlang:length(Arr_7) =< 1) of
        true -> throw({return, [lists:sublist(Arr_7, 0 + 1, length(Arr_7) - 0)]});
        _ -> ok
    end,
        Res_4 = [],
        Res_5 = permute(erlang:length(Arr_7), Arr_7, Res_4),
        Res_5
    catch {return, Ret} -> Ret end.

main() ->
    try
        Perms = heaps([1, 2, 3]),
        io:format("~ts~n", [mochi_repr(Perms)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
