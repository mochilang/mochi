#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, cross/3, sortpoints/1, convex_hull/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

cross(O, A, B) ->
    try
        (((maps:get("x", A, nil) - maps:get("x", O, nil)) * (maps:get("y", B, nil) - maps:get("y", O, nil))) - ((maps:get("y", A, nil) - maps:get("y", O, nil)) * (maps:get("x", B, nil) - maps:get("x", O, nil))))
    catch {return, Ret} -> Ret end.

sortpoints(Ps) ->
    try
        Arr = Ps,
        N = erlang:length(Arr),
        I = 0,
        Fun_2 = fun Fun_2_loop(Arr, I, N, Ps) ->
    case (I < N) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Arr, I, J, N, Ps) ->
    case (J < (N - 1)) of
        true ->
            P = (case erlang:is_map(Arr) of true -> maps:get(J, Arr, nil); _ -> case J < 0 of true -> lists:nth(erlang:length(Arr) + J + 1, Arr); _ -> lists:nth(J + 1, Arr) end end),
            Q = (case erlang:is_map(Arr) of true -> maps:get((J + 1), Arr, nil); _ -> case (J + 1) < 0 of true -> lists:nth(erlang:length(Arr) + (J + 1) + 1, Arr); _ -> lists:nth((J + 1) + 1, Arr) end end),
            case ((maps:get("x", P, nil) > maps:get("x", Q, nil)) orelse ((maps:get("x", P, nil) == maps:get("x", Q, nil)) andalso (maps:get("y", P, nil) > maps:get("y", Q, nil)))) of
        true -> Arr_2 = lists:sublist(Arr, J) ++ [Q] ++ lists:nthtail(J + 1, Arr),
            Arr_3 = lists:sublist(Arr_2, (J + 1)) ++ [P] ++ lists:nthtail((J + 1) + 1, Arr_2),
            Arr_4 = Arr_3;
        _ -> Arr_4 = Arr
    end,
            J_2 = (J + 1),
            Fun_loop(Arr_4, I, J_2, N, Ps);
        _ -> {Arr, I, J, N, Ps}
    end
end,
{Arr_4, I, J_2, N, Ps} = Fun(Arr, I, J, N, Ps),
            I_2 = (I + 1),
            Fun_2_loop(Arr_4, I_2, N, Ps);
        _ -> {Arr, I, N, Ps}
    end
end,
{Arr_4, I_2, N, Ps} = Fun_2(Arr, I, N, Ps),
        Arr_4
    catch {return, Ret} -> Ret end.

convex_hull(Ps_2) ->
    try
        Ps_3 = sortpoints(Ps_2),
        Lower = [],
        Fun_3 = fun Fun_3_loop(List, Lower, Ps_3) ->
    case List of
        [] -> {Lower, Ps_3};
        [P_2|P_2_rest] ->
            Fun_4 = fun Fun_4_loop(Lower, P_2, Ps_3) ->
    case ((erlang:length(Lower) >= 2) andalso (cross((case erlang:is_map(Lower) of true -> maps:get((erlang:length(Lower) - 2), Lower, nil); _ -> case (erlang:length(Lower) - 2) < 0 of true -> lists:nth(erlang:length(Lower) + (erlang:length(Lower) - 2) + 1, Lower); _ -> lists:nth((erlang:length(Lower) - 2) + 1, Lower) end end), (case erlang:is_map(Lower) of true -> maps:get((erlang:length(Lower) - 1), Lower, nil); _ -> case (erlang:length(Lower) - 1) < 0 of true -> lists:nth(erlang:length(Lower) + (erlang:length(Lower) - 1) + 1, Lower); _ -> lists:nth((erlang:length(Lower) - 1) + 1, Lower) end end), P_2) =< 0)) of
        true ->
            Lower_2 = lists:sublist(Lower, 1, ((erlang:length(Lower) - 1) - 0)),
            Fun_4_loop(Lower_2, P_2, Ps_3);
        _ -> {Lower, P_2, Ps_3}
    end
end,
{Lower_2, P_2, Ps_3} = Fun_4(Lower, P_2, Ps_3),
            Lower_3 = lists:append((case Lower_2 of nil -> []; _ -> Lower_2 end), [P_2]),
            Fun_3_loop(P_2_rest, Lower_3, Ps_3);
        _ -> {Lower, Ps_3}
    end
end,
{Lower_3, Ps_3} = Fun_3(Ps_3, Lower, Ps_3),
        Upper = [],
        I_3 = (erlang:length(Ps_3) - 1),
        Fun_6 = fun Fun_6_loop(I_3, Lower_3, Ps_3, Upper) ->
    case (I_3 >= 0) of
        true ->
            P_3 = (case erlang:is_map(Ps_3) of true -> maps:get(I_3, Ps_3, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(Ps_3) + I_3 + 1, Ps_3); _ -> lists:nth(I_3 + 1, Ps_3) end end),
            Fun_5 = fun Fun_5_loop(I_3, Lower_3, P_3, Ps_3, Upper) ->
    case ((erlang:length(Upper) >= 2) andalso (cross((case erlang:is_map(Upper) of true -> maps:get((erlang:length(Upper) - 2), Upper, nil); _ -> case (erlang:length(Upper) - 2) < 0 of true -> lists:nth(erlang:length(Upper) + (erlang:length(Upper) - 2) + 1, Upper); _ -> lists:nth((erlang:length(Upper) - 2) + 1, Upper) end end), (case erlang:is_map(Upper) of true -> maps:get((erlang:length(Upper) - 1), Upper, nil); _ -> case (erlang:length(Upper) - 1) < 0 of true -> lists:nth(erlang:length(Upper) + (erlang:length(Upper) - 1) + 1, Upper); _ -> lists:nth((erlang:length(Upper) - 1) + 1, Upper) end end), P_3) =< 0)) of
        true ->
            Upper_2 = lists:sublist(Upper, 1, ((erlang:length(Upper) - 1) - 0)),
            Fun_5_loop(I_3, Lower_3, P_3, Ps_3, Upper_2);
        _ -> {I_3, Lower_3, P_3, Ps_3, Upper}
    end
end,
{I_3, Lower_3, P_3, Ps_3, Upper_2} = Fun_5(I_3, Lower_3, P_3, Ps_3, Upper),
            Upper_3 = lists:append((case Upper_2 of nil -> []; _ -> Upper_2 end), [P_3]),
            I_4 = (I_3 - 1),
            Fun_6_loop(I_4, Lower_3, Ps_3, Upper_3);
        _ -> {I_3, Lower_3, Ps_3, Upper}
    end
end,
{I_4, Lower_3, Ps_3, Upper_3} = Fun_6(I_3, Lower_3, Ps_3, Upper),
        Hull = lists:sublist(Lower_3, 1, ((erlang:length(Lower_3) - 1) - 0)),
        J_3 = 0,
        Fun_7 = fun Fun_7_loop(Hull, I_4, J_3, Lower_3, Ps_3, Upper_3) ->
    case (J_3 < (erlang:length(Upper_3) - 1)) of
        true ->
            Hull_2 = lists:append((case Hull of nil -> []; _ -> Hull end), [(case erlang:is_map(Upper_3) of true -> maps:get(J_3, Upper_3, nil); _ -> case J_3 < 0 of true -> lists:nth(erlang:length(Upper_3) + J_3 + 1, Upper_3); _ -> lists:nth(J_3 + 1, Upper_3) end end)]),
            J_4 = (J_3 + 1),
            Fun_7_loop(Hull_2, I_4, J_4, Lower_3, Ps_3, Upper_3);
        _ -> {Hull, I_4, J_3, Lower_3, Ps_3, Upper_3}
    end
end,
{Hull_2, I_4, J_4, Lower_3, Ps_3, Upper_3} = Fun_7(Hull, I_4, J_3, Lower_3, Ps_3, Upper_3),
        Hull_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
