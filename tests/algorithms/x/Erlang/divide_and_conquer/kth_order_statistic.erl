#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pivot/1, kth_number/2]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

pivot(Lst) ->
    try
        (case erlang:is_map(Lst) of true -> maps:get(0, Lst, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Lst) + 0 + 1, Lst); _ -> lists:nth(0 + 1, Lst) end end)
    catch {return, Ret} -> Ret end.

kth_number(Lst_2, K) ->
    try
        P = pivot(Lst_2),
        Small = [],
        Big = [],
        I = 0,
        Fun = fun Fun_loop(Big, I, K, Lst_2, P, Small) ->
    case (I < erlang:length(Lst_2)) of
        true ->
            E = (case erlang:is_map(Lst_2) of true -> maps:get(I, Lst_2, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(Lst_2) + I + 1, Lst_2); _ -> lists:nth(I + 1, Lst_2) end end),
            case (E < P) of
        true -> Small_2 = lists:append((case Small of nil -> []; _ -> Small end), [E]),
            Big_4 = Big,
            Small_3 = Small_2;
        _ -> case (E > P) of
        true -> Big_2 = lists:append((case Big of nil -> []; _ -> Big end), [E]),
            Big_3 = Big_2;
        _ -> Big_3 = Big
    end,
            Big_4 = Big_3,
            Small_3 = Small
    end,
            I_2 = (I + 1),
            Fun_loop(Big_4, I_2, K, Lst_2, P, Small_3);
        _ -> {Big, I, K, Lst_2, P, Small}
    end
end,
{Big_4, I_2, K, Lst_2, P, Small_3} = Fun(Big, I, K, Lst_2, P, Small),
        case (erlang:length(Small_3) == (K - 1)) of
        true -> throw({return, P});
        _ -> case (erlang:length(Small_3) < (K - 1)) of
        true -> throw({return, kth_number(Big_4, ((K - erlang:length(Small_3)) - 1))});
        _ -> throw({return, kth_number(Small_3, K)})
    end
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(kth_number([2, 1, 3, 4, 5], 3))]),
    io:format("~ts~n", [mochi_str(kth_number([2, 1, 3, 4, 5], 1))]),
    io:format("~ts~n", [mochi_str(kth_number([2, 1, 3, 4, 5], 5))]),
    io:format("~ts~n", [mochi_str(kth_number([3, 2, 5, 6, 7, 8], 2))]),
    io:format("~ts~n", [mochi_str(kth_number([25, 21, 98, 100, 76, 22, 43, 60, 89, 87], 4))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
