#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, peak/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

peak(Lst) ->
    try
        Low = 0,
        High = (erlang:length(Lst) - 1),
        Fun = fun Fun_loop(High, Low, Lst) ->
    case (Low < High) of
        true ->
            Mid = ((Low + High) div 2),
            case ((case erlang:is_map(Lst) of true -> maps:get(Mid, Lst, nil); _ -> case Mid < 0 of true -> lists:nth(erlang:length(Lst) + Mid + 1, Lst); _ -> lists:nth(Mid + 1, Lst) end end) < (case erlang:is_map(Lst) of true -> maps:get((Mid + 1), Lst, nil); _ -> case (Mid + 1) < 0 of true -> lists:nth(erlang:length(Lst) + (Mid + 1) + 1, Lst); _ -> lists:nth((Mid + 1) + 1, Lst) end end)) of
        true -> Low_2 = (Mid + 1),
            High_3 = High,
            Low_3 = Low_2;
        _ -> High_2 = Mid,
            High_3 = High_2,
            Low_3 = Low
    end,
            Fun_loop(High_3, Low_3, Lst);
        _ -> {High, Low, Lst}
    end
end,
{High_3, Low_3, Lst} = Fun(High, Low, Lst),
        (case erlang:is_map(Lst) of true -> maps:get(Low_3, Lst, nil); _ -> case Low_3 < 0 of true -> lists:nth(erlang:length(Lst) + Low_3 + 1, Lst); _ -> lists:nth(Low_3 + 1, Lst) end end)
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_str(peak([1, 2, 3, 4, 5, 4, 3, 2, 1]))]),
        io:format("~ts~n", [mochi_str(peak([1, 10, 9, 8, 7, 6, 5, 4]))]),
        io:format("~ts~n", [mochi_str(peak([1, 9, 8, 7]))]),
        io:format("~ts~n", [mochi_str(peak([1, 2, 3, 4, 5, 6, 7, 0]))]),
        io:format("~ts~n", [mochi_str(peak([1, 2, 3, 4, 3, 2, 1, 0, -1, -2]))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
