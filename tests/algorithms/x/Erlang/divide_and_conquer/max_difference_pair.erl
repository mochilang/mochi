#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, min_slice/3, max_slice/3, max_diff_range/3, max_difference/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

min_slice(A, Start, End) ->
    try
        M = (case erlang:is_map(A) of true -> maps:get(Start, A, nil); _ -> case Start < 0 of true -> lists:nth(erlang:length(A) + Start + 1, A); _ -> lists:nth(Start + 1, A) end end),
        I = (Start + 1),
        Fun = fun Fun_loop(A, End, I, M, Start) ->
    case (I < End) of
        true ->
            case ((case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(A) + I + 1, A); _ -> lists:nth(I + 1, A) end end) < M) of
        true -> M_2 = (case erlang:is_map(A) of true -> maps:get(I, A, nil); _ -> case I < 0 of true -> lists:nth(erlang:length(A) + I + 1, A); _ -> lists:nth(I + 1, A) end end),
            M_3 = M_2;
        _ -> M_3 = M
    end,
            I_2 = (I + 1),
            Fun_loop(A, End, I_2, M_3, Start);
        _ -> {A, End, I, M, Start}
    end
end,
{A, End, I_2, M_3, Start} = Fun(A, End, I, M, Start),
        M_3
    catch {return, Ret} -> Ret end.

max_slice(A_2, Start_2, End_2) ->
    try
        M_4 = (case erlang:is_map(A_2) of true -> maps:get(Start_2, A_2, nil); _ -> case Start_2 < 0 of true -> lists:nth(erlang:length(A_2) + Start_2 + 1, A_2); _ -> lists:nth(Start_2 + 1, A_2) end end),
        I_3 = (Start_2 + 1),
        Fun_2 = fun Fun_2_loop(A_2, End_2, I_3, M_4, Start_2) ->
    case (I_3 < End_2) of
        true ->
            case ((case erlang:is_map(A_2) of true -> maps:get(I_3, A_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(A_2) + I_3 + 1, A_2); _ -> lists:nth(I_3 + 1, A_2) end end) > M_4) of
        true -> M_5 = (case erlang:is_map(A_2) of true -> maps:get(I_3, A_2, nil); _ -> case I_3 < 0 of true -> lists:nth(erlang:length(A_2) + I_3 + 1, A_2); _ -> lists:nth(I_3 + 1, A_2) end end),
            M_6 = M_5;
        _ -> M_6 = M_4
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(A_2, End_2, I_4, M_6, Start_2);
        _ -> {A_2, End_2, I_3, M_4, Start_2}
    end
end,
{A_2, End_2, I_4, M_6, Start_2} = Fun_2(A_2, End_2, I_3, M_4, Start_2),
        M_6
    catch {return, Ret} -> Ret end.

max_diff_range(A_3, Start_3, End_3) ->
    try
        case ((End_3 - Start_3) == 1) of
        true -> V = (case erlang:is_map(A_3) of true -> maps:get(Start_3, A_3, nil); _ -> case Start_3 < 0 of true -> lists:nth(erlang:length(A_3) + Start_3 + 1, A_3); _ -> lists:nth(Start_3 + 1, A_3) end end),
            throw({return, [V, V]}),
            V_2 = V;
        _ -> V_2 = nil
    end,
        Mid = ((Start_3 + End_3) div 2),
        Left = max_diff_range(A_3, Start_3, Mid),
        Right = max_diff_range(A_3, Mid, End_3),
        Small1 = (case erlang:is_map(Left) of true -> maps:get(0, Left, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Left) + 0 + 1, Left); _ -> lists:nth(0 + 1, Left) end end),
        Big1 = (case erlang:is_map(Left) of true -> maps:get(1, Left, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Left) + 1 + 1, Left); _ -> lists:nth(1 + 1, Left) end end),
        Small2 = (case erlang:is_map(Right) of true -> maps:get(0, Right, nil); _ -> case 0 < 0 of true -> lists:nth(erlang:length(Right) + 0 + 1, Right); _ -> lists:nth(0 + 1, Right) end end),
        Big2 = (case erlang:is_map(Right) of true -> maps:get(1, Right, nil); _ -> case 1 < 0 of true -> lists:nth(erlang:length(Right) + 1 + 1, Right); _ -> lists:nth(1 + 1, Right) end end),
        Min_left = min_slice(A_3, Start_3, Mid),
        Max_right = max_slice(A_3, Mid, End_3),
        Cross_diff = (Max_right - Min_left),
        Left_diff = (Big1 - Small1),
        Right_diff = (Big2 - Small2),
        case ((Right_diff > Cross_diff) andalso (Right_diff > Left_diff)) of
        true -> throw({return, [Small2, Big2]});
        _ -> case (Left_diff > Cross_diff) of
        true -> throw({return, [Small1, Big1]});
        _ -> throw({return, [Min_left, Max_right]})
    end
    end,
        nil
    catch {return, Ret} -> Ret end.

max_difference(A_4) ->
    try
        max_diff_range(A_4, 0, erlang:length(A_4))
    catch {return, Ret} -> Ret end.

main() ->
    try
        Result = max_difference([5, 11, 2, 1, 7, 9, 0, 7]),
        io:format("~ts~n", [mochi_str(Result)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
