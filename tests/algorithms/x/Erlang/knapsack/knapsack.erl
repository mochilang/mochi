#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_exported_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, knapsack/4, main/0]).

% Generated by Mochi transpiler v0.10.66 (8fdd1fe3d6)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


to_float(V) ->
    mochi_to_float(V).


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

knapsack(Capacity, Weights, Values, Counter) ->
    try
        case ((Counter == 0) orelse (Capacity == 0)) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case ((case erlang:is_map(Weights) of true -> maps:get((Counter - 1), Weights, nil); _ -> case (Counter - 1) < 0 of true -> mochi_nth(erlang:length(Weights) + (Counter - 1) + 1, Weights); _ -> mochi_nth((Counter - 1) + 1, Weights) end end) > Capacity) of
        true -> throw({return, knapsack(Capacity, Weights, Values, (Counter - 1))}),
            Left_capacity_2 = nil,
            New_value_included_2 = nil,
            Without_new_value_2 = nil;
        _ -> Left_capacity = (Capacity - (case erlang:is_map(Weights) of true -> maps:get((Counter - 1), Weights, nil); _ -> case (Counter - 1) < 0 of true -> mochi_nth(erlang:length(Weights) + (Counter - 1) + 1, Weights); _ -> mochi_nth((Counter - 1) + 1, Weights) end end)),
            New_value_included = ((case erlang:is_map(Values) of true -> maps:get((Counter - 1), Values, nil); _ -> case (Counter - 1) < 0 of true -> mochi_nth(erlang:length(Values) + (Counter - 1) + 1, Values); _ -> mochi_nth((Counter - 1) + 1, Values) end end) + knapsack(Left_capacity, Weights, Values, (Counter - 1))),
            Without_new_value = knapsack(Capacity, Weights, Values, (Counter - 1)),
            case (New_value_included > Without_new_value) of
        true -> throw({return, New_value_included});
        _ -> throw({return, Without_new_value})
    end,
            Left_capacity_2 = Left_capacity,
            New_value_included_2 = New_value_included,
            Without_new_value_2 = Without_new_value
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Weights_2 = [10, 20, 30],
        Values_2 = [60, 100, 120],
        Cap = 50,
        Count = erlang:length(Values_2),
        Result = knapsack(Cap, Weights_2, Values_2, Count),
        io:format("~ts~n", [mochi_str(Result)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
