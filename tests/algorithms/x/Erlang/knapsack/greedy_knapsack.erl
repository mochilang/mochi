#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, calc_profit/3, main/0]).

% Generated by Mochi transpiler v0.10.63 (c4022ac673) on 2025-08-12 08:38 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

calc_profit(Profit, Weight, Max_weight) ->
    try
        case (erlang:length(Profit) /= erlang:length(Weight)) of
        true -> erlang:error({panic, "The length of profit and weight must be same."});
        _ -> ok
    end,
        case (Max_weight =< 0) of
        true -> erlang:error({panic, "max_weight must greater than zero."});
        _ -> ok
    end,
        I = 0,
        Fun = fun Fun_loop(I, Max_weight, Profit, Weight) ->
    case (I < erlang:length(Profit)) of
        true ->
            case ((case erlang:is_map(Profit) of true -> maps:get(I, Profit, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Profit) + I + 1, Profit); _ -> mochi_nth(I + 1, Profit) end end) < 0) of
        true -> erlang:error({panic, "Profit can not be negative."});
        _ -> ok
    end,
            case ((case erlang:is_map(Weight) of true -> maps:get(I, Weight, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Weight) + I + 1, Weight); _ -> mochi_nth(I + 1, Weight) end end) < 0) of
        true -> erlang:error({panic, "Weight can not be negative."});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Max_weight, Profit, Weight);
        _ -> {I, Max_weight, Profit, Weight}
    end
end,
{I_2, Max_weight, Profit, Weight} = Fun(I, Max_weight, Profit, Weight),
        N = erlang:length(Profit),
        Used = [],
        J = 0,
        Fun_2 = fun Fun_2_loop(I_2, J, Max_weight, N, Profit, Used, Weight) ->
    case (J < N) of
        true ->
            Used_2 = lists:append((case Used of nil -> []; _ -> Used end), [false]),
            J_2 = (J + 1),
            Fun_2_loop(I_2, J_2, Max_weight, N, Profit, Used_2, Weight);
        _ -> {I_2, J, Max_weight, N, Profit, Used, Weight}
    end
end,
{I_2, J_2, Max_weight, N, Profit, Used_2, Weight} = Fun_2(I_2, J, Max_weight, N, Profit, Used, Weight),
        Limit = 0,
        Gain = 0.0,
        Count = 0,
        Fun_4 = fun Fun_4_loop(Count, Gain, I_2, J_2, Limit, Max_weight, N, Profit, Used_2, Weight) ->
    case ((Limit < Max_weight) andalso (Count < N)) of
        true ->
            try
                MaxRatio = -1.0,
                MaxIndex = -1,
                K = 0,
                Fun_3 = fun Fun_3_loop(Count, Gain, I_2, J_2, K, Limit, MaxIndex, MaxRatio, Max_weight, N, Profit, Used_2, Weight) ->
    case (K < N) of
        true ->
            case mochi_not((case erlang:is_map(Used_2) of true -> maps:get(K, Used_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Used_2) + K + 1, Used_2); _ -> mochi_nth(K + 1, Used_2) end end)) of
        true -> Ratio = mochi_safe_div(float((case erlang:is_map(Profit) of true -> maps:get(K, Profit, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Profit) + K + 1, Profit); _ -> mochi_nth(K + 1, Profit) end end)), float((case erlang:is_map(Weight) of true -> maps:get(K, Weight, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Weight) + K + 1, Weight); _ -> mochi_nth(K + 1, Weight) end end))),
            case (Ratio > MaxRatio) of
        true -> MaxRatio_2 = Ratio,
            MaxIndex_2 = K,
            MaxIndex_3 = MaxIndex_2,
            MaxRatio_3 = MaxRatio_2;
        _ -> MaxIndex_3 = MaxIndex,
            MaxRatio_3 = MaxRatio
    end,
            MaxIndex_4 = MaxIndex_3,
            MaxRatio_4 = MaxRatio_3,
            Ratio_2 = Ratio;
        _ -> MaxIndex_4 = MaxIndex,
            MaxRatio_4 = MaxRatio,
            Ratio_2 = nil
    end,
            K_2 = (K + 1),
            Fun_3_loop(Count, Gain, I_2, J_2, K_2, Limit, MaxIndex_4, MaxRatio_4, Max_weight, N, Profit, Used_2, Weight);
        _ -> {Count, Gain, I_2, J_2, K, Limit, MaxIndex, MaxRatio, Max_weight, N, Profit, Used_2, Weight}
    end
end,
{Count, Gain, I_2, J_2, K_2, Limit, MaxIndex_4, MaxRatio_4, Max_weight, N, Profit, Used_2, Weight} = Fun_3(Count, Gain, I_2, J_2, K, Limit, MaxIndex, MaxRatio, Max_weight, N, Profit, Used_2, Weight),
                case (MaxIndex_4 < 0) of
        true -> throw({break, Count, Gain, I_2, J_2, Limit, Max_weight, N, Profit, Used_2, Weight});
        _ -> ok
    end,
                Used_3 = lists:sublist(Used_2, MaxIndex_4) ++ [true] ++ lists:nthtail(MaxIndex_4 + 1, Used_2),
                case ((Max_weight - Limit) >= (case erlang:is_map(Weight) of true -> maps:get(MaxIndex_4, Weight, nil); _ -> case MaxIndex_4 < 0 of true -> mochi_nth(erlang:length(Weight) + MaxIndex_4 + 1, Weight); _ -> mochi_nth(MaxIndex_4 + 1, Weight) end end)) of
        true -> Limit_2 = (Limit + (case erlang:is_map(Weight) of true -> maps:get(MaxIndex_4, Weight, nil); _ -> case MaxIndex_4 < 0 of true -> mochi_nth(erlang:length(Weight) + MaxIndex_4 + 1, Weight); _ -> mochi_nth(MaxIndex_4 + 1, Weight) end end)),
            Gain_2 = (Gain + float((case erlang:is_map(Profit) of true -> maps:get(MaxIndex_4, Profit, nil); _ -> case MaxIndex_4 < 0 of true -> mochi_nth(erlang:length(Profit) + MaxIndex_4 + 1, Profit); _ -> mochi_nth(MaxIndex_4 + 1, Profit) end end))),
            Gain_4 = Gain_2,
            Limit_3 = Limit_2;
        _ -> Gain_3 = (Gain + mochi_safe_mul(mochi_safe_div(float((Max_weight - Limit)), float((case erlang:is_map(Weight) of true -> maps:get(MaxIndex_4, Weight, nil); _ -> case MaxIndex_4 < 0 of true -> mochi_nth(erlang:length(Weight) + MaxIndex_4 + 1, Weight); _ -> mochi_nth(MaxIndex_4 + 1, Weight) end end))), float((case erlang:is_map(Profit) of true -> maps:get(MaxIndex_4, Profit, nil); _ -> case MaxIndex_4 < 0 of true -> mochi_nth(erlang:length(Profit) + MaxIndex_4 + 1, Profit); _ -> mochi_nth(MaxIndex_4 + 1, Profit) end end)))),
            throw({break, Count, Gain_3, I_2, J_2, Limit, Max_weight, N, Profit, Used_3, Weight}),
            Gain_4 = Gain_3,
            Limit_3 = Limit
    end,
                Count_2 = (Count + 1),
                Fun_4_loop(Count_2, Gain_4, I_2, J_2, Limit_3, Max_weight, N, Profit, Used_3, Weight)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9} -> Fun_4_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9}
            end;
        _ -> {Count, Gain, I_2, J_2, Limit, Max_weight, N, Profit, Used_2, Weight}
    end
end,
{Count_2, Gain_4, I_2, J_2, Limit_3, Max_weight, N, Profit, Used_3, Weight} = Fun_4(Count, Gain, I_2, J_2, Limit, Max_weight, N, Profit, Used_2, Weight),
        Gain_4
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(calc_profit([1, 2, 3], [3, 4, 5], 15))]),
        io:format("~ts~n", [mochi_repr(calc_profit([10, 9, 8], [3, 4, 5], 25))]),
        io:format("~ts~n", [mochi_repr(calc_profit([10, 9, 8], [3, 4, 5], 5))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
