#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, knapsack/5, main/0]).

% Generated by Mochi transpiler v0.10.65 (365e579019) on 2025-08-13 16:57 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

knapsack(Weights, Values, Number_of_items, Max_weight, Index) ->
    try
        case (Index == Number_of_items) of
        true -> throw({return, 0});
        _ -> ok
    end,
        Ans1 = knapsack(Weights, Values, Number_of_items, Max_weight, (Index + 1)),
        Ans2 = 0,
        case ((case erlang:is_map(Weights) of true -> maps:get(Index, Weights, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Weights) + Index + 1, Weights); _ -> mochi_nth(Index + 1, Weights) end end) =< Max_weight) of
        true -> Ans2_2 = ((case erlang:is_map(Values) of true -> maps:get(Index, Values, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Values) + Index + 1, Values); _ -> mochi_nth(Index + 1, Values) end end) + knapsack(Weights, Values, Number_of_items, (Max_weight - (case erlang:is_map(Weights) of true -> maps:get(Index, Weights, nil); _ -> case Index < 0 of true -> mochi_nth(erlang:length(Weights) + Index + 1, Weights); _ -> mochi_nth(Index + 1, Weights) end end)), (Index + 1))),
            Ans2_3 = Ans2_2;
        _ -> Ans2_3 = Ans2
    end,
        case (Ans1 > Ans2_3) of
        true -> throw({return, Ans1});
        _ -> ok
    end,
        Ans2_3
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        W1 = [1, 2, 4, 5],
        V1 = [5, 4, 8, 6],
        R1 = knapsack(W1, V1, 4, 5, 0),
        io:format("~ts~n", [mochi_str(R1)]),
        W2 = [3, 4, 5],
        V2 = [10, 9, 8],
        R2 = knapsack(W2, V2, 3, 25, 0),
        io:format("~ts~n", [mochi_str(R2)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
