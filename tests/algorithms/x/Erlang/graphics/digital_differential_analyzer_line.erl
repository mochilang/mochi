#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, abs_int/1, round_int/1, digital_differential_analyzer_line/2, main/0]).

% Generated by Mochi transpiler v0.10.64 (9e806895eb) on 2025-08-13 16:13 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

abs_int(N) ->
    try
        (case (N < 0) of
    true -> -N;
    _ -> N
end)
    catch {return, RetCatch} -> RetCatch end.

round_int(X) ->
    try
        mochi_to_int((X + 0.5))
    catch {return, RetCatch} -> RetCatch end.

digital_differential_analyzer_line(P1, P2) ->
    try
        Dx = (maps:get("x", P2, nil) - maps:get("x", P1, nil)),
        Dy = (maps:get("y", P2, nil) - maps:get("y", P1, nil)),
        Abs_dx = abs_int(Dx),
        Abs_dy = abs_int(Dy),
        Steps = (case (Abs_dx > Abs_dy) of
    true -> Abs_dx;
    _ -> Abs_dy
end),
        X_increment = mochi_safe_div(float(Dx), float(Steps)),
        Y_increment = mochi_safe_div(float(Dy), float(Steps)),
        Coordinates = [],
        X_2 = float(maps:get("x", P1, nil)),
        Y = float(maps:get("y", P1, nil)),
        I = 0,
        Fun = fun Fun_loop(Abs_dx, Abs_dy, Coordinates, Dx, Dy, I, P1, P2, Steps, X_2, X_increment, Y, Y_increment) ->
    case (I < Steps) of
        true ->
            X_3 = (X_2 + X_increment),
            Y_2 = (Y + Y_increment),
            Point = #{"x" => round_int(X_3), "y" => round_int(Y_2)},
            Coordinates_2 = lists:append((case Coordinates of nil -> []; _ -> Coordinates end), [Point]),
            I_2 = (I + 1),
            Fun_loop(Abs_dx, Abs_dy, Coordinates_2, Dx, Dy, I_2, P1, P2, Steps, X_3, X_increment, Y_2, Y_increment);
        _ -> {Abs_dx, Abs_dy, Coordinates, Dx, Dy, I, P1, P2, Steps, X_2, X_increment, Y, Y_increment}
    end
end,
{Abs_dx, Abs_dy, Coordinates_2, Dx, Dy, I_2, P1, P2, Steps, X_3, X_increment, Y_2, Y_increment} = Fun(Abs_dx, Abs_dy, Coordinates, Dx, Dy, I, P1, P2, Steps, X_2, X_increment, Y, Y_increment),
        Coordinates_2
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Result = digital_differential_analyzer_line(#{"x" => 1, "y" => 1}, #{"x" => 4, "y" => 4}),
        io:format("~ts~n", [mochi_repr(Result)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
