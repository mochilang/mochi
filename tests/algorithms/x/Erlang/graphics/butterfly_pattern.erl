#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, repeat_char/2, butterfly_pattern/1]).

% Generated by Mochi transpiler v0.10.64 (2a849c314b) on 2025-08-13 15:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

repeat_char(Ch, Count) ->
    try
        Result = "",
        I = 0,
        Fun = fun Fun_loop(Ch, Count, I, Result) ->
    case (I < Count) of
        true ->
            Result_2 = (Result ++ Ch),
            I_2 = (I + 1),
            Fun_loop(Ch, Count, I_2, Result_2);
        _ -> {Ch, Count, I, Result}
    end
end,
{Ch, Count, I_2, Result_2} = Fun(Ch, Count, I, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

butterfly_pattern(N) ->
    try
        Lines = [],
        I_3 = 1,
        Fun_2 = fun Fun_2_loop(I_3, Lines, N) ->
    case (I_3 < N) of
        true ->
            Left = repeat_char("*", I_3),
            Mid = repeat_char(" ", ((2 * (N - I_3)) - 1)),
            Right = repeat_char("*", I_3),
            Lines_2 = lists:append((case Lines of nil -> []; _ -> Lines end), [((Left ++ Mid) ++ Right)]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Lines_2, N);
        _ -> {I_3, Lines, N}
    end
end,
{I_4, Lines_2, N} = Fun_2(I_3, Lines, N),
        Lines_3 = lists:append((case Lines_2 of nil -> []; _ -> Lines_2 end), [repeat_char("*", ((2 * N) - 1))]),
        J = (N - 1),
        Fun_3 = fun Fun_3_loop(I_4, J, Lines_3, N) ->
    case (J > 0) of
        true ->
            Left_2 = repeat_char("*", J),
            Mid_2 = repeat_char(" ", ((2 * (N - J)) - 1)),
            Right_2 = repeat_char("*", J),
            Lines_4 = lists:append((case Lines_3 of nil -> []; _ -> Lines_3 end), [((Left_2 ++ Mid_2) ++ Right_2)]),
            J_2 = (J - 1),
            Fun_3_loop(I_4, J_2, Lines_4, N);
        _ -> {I_4, J, Lines_3, N}
    end
end,
{I_4, J_2, Lines_4, N} = Fun_3(I_4, J, Lines_3, N),
        Out = "",
        K = 0,
        Fun_4 = fun Fun_4_loop(I_4, J_2, K, Lines_4, N, Out) ->
    case (K < erlang:length(Lines_4)) of
        true ->
            case (K > 0) of
        true -> Out_2 = (Out ++ "\n"),
            Out_3 = Out_2;
        _ -> Out_3 = Out
    end,
            Out_4 = (Out_3 ++ (case erlang:is_map(Lines_4) of true -> maps:get(K, Lines_4, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Lines_4) + K + 1, Lines_4); _ -> mochi_nth(K + 1, Lines_4) end end)),
            K_2 = (K + 1),
            Fun_4_loop(I_4, J_2, K_2, Lines_4, N, Out_4);
        _ -> {I_4, J_2, K, Lines_4, N, Out}
    end
end,
{I_4, J_2, K_2, Lines_4, N, Out_4} = Fun_4(I_4, J_2, K, Lines_4, N, Out),
        Out_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(butterfly_pattern(3))]),
    io:format("~ts~n", [mochi_repr(butterfly_pattern(5))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
