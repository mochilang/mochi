#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, floor/1, modf/2, sin_taylor/1, cos_taylor/1, convert_to_2d/5, rotate/5]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

floor(X) ->
    try
        I = mochi_to_int(X),
        case (float(I) > X) of
        true -> I_2 = (I - 1),
            I_3 = I_2;
        _ -> I_3 = I
    end,
        float(I_3)
    catch {return, Ret} -> Ret end.

modf(X_2, M) ->
    try
        (X_2 - mochi_safe_mul(floor(mochi_safe_div(X_2, M)), M))
    catch {return, Ret} -> Ret end.

sin_taylor(X_3) ->
    try
        Term = X_3,
        Sum = X_3,
        I_4 = 1,
        Fun = fun Fun_loop(I_4, Sum, Term, X_3) ->
    case (I_4 < 10) of
        true ->
            K1 = mochi_safe_mul(2, float(I_4)),
            K2 = (K1 + 1),
            Term_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term, X_3), X_3), mochi_safe_mul(K1, K2)),
            Sum_2 = (Sum + Term_2),
            I_5 = (I_4 + 1),
            Fun_loop(I_5, Sum_2, Term_2, X_3);
        _ -> {I_4, Sum, Term, X_3}
    end
end,
{I_5, Sum_2, Term_2, X_3} = Fun(I_4, Sum, Term, X_3),
        Sum_2
    catch {return, Ret} -> Ret end.

cos_taylor(X_4) ->
    try
        Term_3 = 1,
        Sum_3 = 1,
        I_6 = 1,
        Fun_2 = fun Fun_2_loop(I_6, Sum_3, Term_3, X_4) ->
    case (I_6 < 10) of
        true ->
            K1_2 = (mochi_safe_mul(2, float(I_6)) - 1),
            K2_2 = mochi_safe_mul(2, float(I_6)),
            Term_4 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(-Term_3, X_4), X_4), mochi_safe_mul(K1_2, K2_2)),
            Sum_4 = (Sum_3 + Term_4),
            I_7 = (I_6 + 1),
            Fun_2_loop(I_7, Sum_4, Term_4, X_4);
        _ -> {I_6, Sum_3, Term_3, X_4}
    end
end,
{I_7, Sum_4, Term_4, X_4} = Fun_2(I_6, Sum_3, Term_3, X_4),
        Sum_4
    catch {return, Ret} -> Ret end.

convert_to_2d(X_5, Y, Z, Scale, Distance) ->
    try
        Projected_x = mochi_safe_mul(mochi_safe_div(mochi_safe_mul(X_5, Distance), (Z + Distance)), Scale),
        Projected_y = mochi_safe_mul(mochi_safe_div(mochi_safe_mul(Y, Distance), (Z + Distance)), Scale),
        [Projected_x, Projected_y]
    catch {return, Ret} -> Ret end.

rotate(X_6, Y_2, Z_2, Axis, Angle) ->
    try
        Angle_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_div(modf(Angle, 360), 450), 180), 3.141592653589793),
        Angle_3 = modf(Angle_2, mochi_safe_mul(2, 3.141592653589793)),
        case (Angle_3 > 3.141592653589793) of
        true -> Angle_4 = (Angle_3 - mochi_safe_mul(2, 3.141592653589793)),
            Angle_5 = Angle_4;
        _ -> Angle_5 = Angle_3
    end,
        case (Axis == "z") of
        true -> New_x = (mochi_safe_mul(X_6, cos_taylor(Angle_5)) - mochi_safe_mul(Y_2, sin_taylor(Angle_5))),
            New_y = (mochi_safe_mul(Y_2, cos_taylor(Angle_5)) + mochi_safe_mul(X_6, sin_taylor(Angle_5))),
            New_z = Z_2,
            throw({return, [New_x, New_y, New_z]}),
            New_x_2 = New_x,
            New_y_2 = New_y,
            New_z_2 = New_z;
        _ -> New_x_2 = nil,
            New_y_2 = nil,
            New_z_2 = nil
    end,
        case (Axis == "x") of
        true -> New_y_3 = (mochi_safe_mul(Y_2, cos_taylor(Angle_5)) - mochi_safe_mul(Z_2, sin_taylor(Angle_5))),
            New_z_3 = (mochi_safe_mul(Z_2, cos_taylor(Angle_5)) + mochi_safe_mul(Y_2, sin_taylor(Angle_5))),
            New_x_3 = X_6,
            throw({return, [New_x_3, New_y_3, New_z_3]}),
            New_x_4 = New_x_3,
            New_y_4 = New_y_3,
            New_z_4 = New_z_3;
        _ -> New_x_4 = New_x_2,
            New_y_4 = New_y_2,
            New_z_4 = New_z_2
    end,
        case (Axis == "y") of
        true -> New_x_5 = (mochi_safe_mul(X_6, cos_taylor(Angle_5)) - mochi_safe_mul(Z_2, sin_taylor(Angle_5))),
            New_z_5 = (mochi_safe_mul(Z_2, cos_taylor(Angle_5)) + mochi_safe_mul(X_6, sin_taylor(Angle_5))),
            New_y_5 = Y_2,
            throw({return, [New_x_5, New_y_5, New_z_5]}),
            New_x_6 = New_x_5,
            New_y_6 = New_y_5,
            New_z_6 = New_z_5;
        _ -> New_x_6 = New_x_4,
            New_y_6 = New_y_4,
            New_z_6 = New_z_4
    end,
        io:format("~ts~n", [mochi_repr("not a valid axis, choose one of 'x', 'y', 'z'")]),
        [0, 0, 0]
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    io:format("~ts~n", [mochi_str(convert_to_2d(1, 2, 3, 10, 10))]),
    io:format("~ts~n", [mochi_str(rotate(1, 2, 3, "y", 90))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
