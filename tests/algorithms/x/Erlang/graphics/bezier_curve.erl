#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, n_choose_k/2, pow_float/2, basis_function/2, bezier_point/2]).

% Generated by Mochi transpiler v0.10.64 (9e806895eb) on 2025-08-13 16:13 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

n_choose_k(N, K) ->
    try
        case ((K < 0) orelse (K > N)) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        case ((K == 0) orelse (K == N)) of
        true -> throw({return, 1.0});
        _ -> ok
    end,
        Result = 1.0,
        I = 1,
        Fun = fun Fun_loop(I, K, N, Result) ->
    case (I =< K) of
        true ->
            Result_2 = mochi_safe_div(mochi_safe_mul(Result, mochi_safe_mul(1.0, ((N - K) + I))), mochi_safe_mul(1.0, I)),
            I_2 = (I + 1),
            Fun_loop(I_2, K, N, Result_2);
        _ -> {I, K, N, Result}
    end
end,
{I_2, K, N, Result_2} = Fun(I, K, N, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

pow_float(Base, Exp) ->
    try
        Result_3 = 1.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Base, Exp, I_3, Result_3) ->
    case (I_3 < Exp) of
        true ->
            Result_4 = mochi_safe_mul(Result_3, Base),
            I_4 = (I_3 + 1),
            Fun_2_loop(Base, Exp, I_4, Result_4);
        _ -> {Base, Exp, I_3, Result_3}
    end
end,
{Base, Exp, I_4, Result_4} = Fun_2(Base, Exp, I_3, Result_3),
        Result_4
    catch {return, RetCatch} -> RetCatch end.

basis_function(Points, T) ->
    try
        Degree = (erlang:length(Points) - 1),
        Res = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Degree, I_5, Points, Res, T) ->
    case (I_5 =< Degree) of
        true ->
            Coef = n_choose_k(Degree, I_5),
            Term = mochi_safe_mul(pow_float((1.0 - T), (Degree - I_5)), pow_float(T, I_5)),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [mochi_safe_mul(Coef, Term)]),
            I_6 = (I_5 + 1),
            Fun_3_loop(Degree, I_6, Points, Res_2, T);
        _ -> {Degree, I_5, Points, Res, T}
    end
end,
{Degree, I_6, Points, Res_2, T} = Fun_3(Degree, I_5, Points, Res, T),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

bezier_point(Points_2, T_2) ->
    try
        Basis = basis_function(Points_2, T_2),
        X = 0.0,
        Y = 0.0,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(Basis, I_7, Points_2, T_2, X, Y) ->
    case (I_7 < erlang:length(Points_2)) of
        true ->
            X_2 = (X + mochi_safe_mul((case erlang:is_map(Basis) of true -> maps:get(I_7, Basis, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Basis) + I_7 + 1, Basis); _ -> mochi_nth(I_7 + 1, Basis) end end), (case erlang:is_map((case erlang:is_map(Points_2) of true -> maps:get(I_7, Points_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Points_2) + I_7 + 1, Points_2); _ -> mochi_nth(I_7 + 1, Points_2) end end)) of true -> maps:get(0, (case erlang:is_map(Points_2) of true -> maps:get(I_7, Points_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Points_2) + I_7 + 1, Points_2); _ -> mochi_nth(I_7 + 1, Points_2) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Points_2) of true -> maps:get(I_7, Points_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Points_2) + I_7 + 1, Points_2); _ -> mochi_nth(I_7 + 1, Points_2) end end)) + 0 + 1, (case erlang:is_map(Points_2) of true -> maps:get(I_7, Points_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Points_2) + I_7 + 1, Points_2); _ -> mochi_nth(I_7 + 1, Points_2) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Points_2) of true -> maps:get(I_7, Points_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Points_2) + I_7 + 1, Points_2); _ -> mochi_nth(I_7 + 1, Points_2) end end)) end end))),
            Y_2 = (Y + mochi_safe_mul((case erlang:is_map(Basis) of true -> maps:get(I_7, Basis, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Basis) + I_7 + 1, Basis); _ -> mochi_nth(I_7 + 1, Basis) end end), (case erlang:is_map((case erlang:is_map(Points_2) of true -> maps:get(I_7, Points_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Points_2) + I_7 + 1, Points_2); _ -> mochi_nth(I_7 + 1, Points_2) end end)) of true -> maps:get(1, (case erlang:is_map(Points_2) of true -> maps:get(I_7, Points_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Points_2) + I_7 + 1, Points_2); _ -> mochi_nth(I_7 + 1, Points_2) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Points_2) of true -> maps:get(I_7, Points_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Points_2) + I_7 + 1, Points_2); _ -> mochi_nth(I_7 + 1, Points_2) end end)) + 1 + 1, (case erlang:is_map(Points_2) of true -> maps:get(I_7, Points_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Points_2) + I_7 + 1, Points_2); _ -> mochi_nth(I_7 + 1, Points_2) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Points_2) of true -> maps:get(I_7, Points_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Points_2) + I_7 + 1, Points_2); _ -> mochi_nth(I_7 + 1, Points_2) end end)) end end))),
            I_8 = (I_7 + 1),
            Fun_4_loop(Basis, I_8, Points_2, T_2, X_2, Y_2);
        _ -> {Basis, I_7, Points_2, T_2, X, Y}
    end
end,
{Basis, I_8, Points_2, T_2, X_2, Y_2} = Fun_4(Basis, I_7, Points_2, T_2, X, Y),
        [X_2, Y_2]
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('control', [[1.0, 1.0], [1.0, 2.0]]),
    io:format("~ts~n", [mochi_str(basis_function(erlang:get('control'), 0.0))]),
    io:format("~ts~n", [mochi_str(basis_function(erlang:get('control'), 1.0))]),
    io:format("~ts~n", [mochi_str(bezier_point(erlang:get('control'), 0.0))]),
    io:format("~ts~n", [mochi_str(bezier_point(erlang:get('control'), 1.0))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
