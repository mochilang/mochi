#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parse_project_name/1]).

% Generated by Mochi transpiler v0.10.59 (cf9c8584f7) on 2025-08-07 09:56 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

parse_project_name(Toml) ->
    try
        I = 0,
        Name = "",
        N = erlang:length(Toml),
        Fun_4 = fun Fun_4_loop(I, N, Name, Toml) ->
    case ((I + 4) < N) of
        true ->
            case ((((string:substr(Toml, I + 1, 1) == "n") andalso (string:substr(Toml, (I + 1) + 1, 1) == "a")) andalso (string:substr(Toml, (I + 2) + 1, 1) == "m")) andalso (string:substr(Toml, (I + 3) + 1, 1) == "e")) of
        true -> I_2 = (I + 4),
            Fun = fun Fun_loop(I_2, N, Name, Toml) ->
    case ((I_2 < N) andalso (string:substr(Toml, I_2 + 1, 1) /= "\"")) of
        true ->
            I_3 = (I_2 + 1),
            Fun_loop(I_3, N, Name, Toml);
        _ -> {I_2, N, Name, Toml}
    end
end,
{I_3, N, Name, Toml} = Fun(I_2, N, Name, Toml),
            I_4 = (I_3 + 1),
            Fun_2 = fun Fun_2_loop(I_4, N, Name, Toml) ->
    case ((I_4 < N) andalso (string:substr(Toml, I_4 + 1, 1) /= "\"")) of
        true ->
            Name_2 = (Name ++ string:substr(Toml, I_4 + 1, 1)),
            I_5 = (I_4 + 1),
            Fun_2_loop(I_5, N, Name_2, Toml);
        _ -> {I_4, N, Name, Toml}
    end
end,
{I_5, N, Name_2, Toml} = Fun_2(I_4, N, Name, Toml),
            throw({return, Name_2}),
            Fun_3 = Fun_2,
            I_6 = I_5,
            Name_3 = Name_2;
        _ -> Fun_3 = nil,
            I_6 = I,
            Name_3 = Name
    end,
            I_7 = (I_6 + 1),
            Fun_4_loop(I_7, N, Name_3, Toml);
        _ -> {I, N, Name, Toml}
    end
end,
{I_7, N, Name_3, Toml} = Fun_4(I, N, Name, Toml),
        Name_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('pyproject', "[project]\nname = \"thealgorithms-python\""),
    erlang:put('project', parse_project_name("[project]\nname = \"thealgorithms-python\"")),
    io:format("~ts~n", [mochi_repr(erlang:get('project'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
