#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, stringify/1, max2/2, min2/2, complement/1, intersection/2, union/2, membership/2]).

% Generated by Mochi transpiler v0.10.59 (3d41f87239) on 2025-08-07 10:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

stringify(Fs) ->
    try
        (((((((maps:get("name", Fs, nil) ++ ": [") ++ mochi_str(maps:get("left_boundary", Fs, nil))) ++ ", ") ++ mochi_str(maps:get("peak", Fs, nil))) ++ ", ") ++ mochi_str(maps:get("right_boundary", Fs, nil))) ++ "]")
    catch {return, Ret} -> Ret end.

max2(A, B) ->
    try
        (case (A > B) of
    true -> A;
    _ -> B
end)
    catch {return, Ret} -> Ret end.

min2(A_2, B_2) ->
    try
        (case (A_2 < B_2) of
    true -> A_2;
    _ -> B_2
end)
    catch {return, Ret} -> Ret end.

complement(Fs_2) ->
    try
        #{"name" => ("¬" ++ maps:get("name", Fs_2, nil)), "left_boundary" => (1 - maps:get("right_boundary", Fs_2, nil)), "peak" => (1 - maps:get("left_boundary", Fs_2, nil)), "right_boundary" => (1 - maps:get("peak", Fs_2, nil))}
    catch {return, Ret} -> Ret end.

intersection(A_3, B_3) ->
    try
        #{"name" => ((maps:get("name", A_3, nil) ++ " ∩ ") ++ maps:get("name", B_3, nil)), "left_boundary" => max2(maps:get("left_boundary", A_3, nil), maps:get("left_boundary", B_3, nil)), "peak" => min2(maps:get("right_boundary", A_3, nil), maps:get("right_boundary", B_3, nil)), "right_boundary" => mochi_safe_div((maps:get("peak", A_3, nil) + maps:get("peak", B_3, nil)), 2)}
    catch {return, Ret} -> Ret end.

union(A_4, B_4) ->
    try
        #{"name" => ((maps:get("name", A_4, nil) ++ " U ") ++ maps:get("name", B_4, nil)), "left_boundary" => min2(maps:get("left_boundary", A_4, nil), maps:get("left_boundary", B_4, nil)), "peak" => max2(maps:get("right_boundary", A_4, nil), maps:get("right_boundary", B_4, nil)), "right_boundary" => mochi_safe_div((maps:get("peak", A_4, nil) + maps:get("peak", B_4, nil)), 2)}
    catch {return, Ret} -> Ret end.

membership(Fs_3, X) ->
    try
        case ((X =< maps:get("left_boundary", Fs_3, nil)) orelse (X >= maps:get("right_boundary", Fs_3, nil))) of
        true -> throw({return, 0});
        _ -> ok
    end,
        case ((maps:get("left_boundary", Fs_3, nil) < X) andalso (X =< maps:get("peak", Fs_3, nil))) of
        true -> throw({return, mochi_safe_div((X - maps:get("left_boundary", Fs_3, nil)), (maps:get("peak", Fs_3, nil) - maps:get("left_boundary", Fs_3, nil)))});
        _ -> ok
    end,
        case ((maps:get("peak", Fs_3, nil) < X) andalso (X < maps:get("right_boundary", Fs_3, nil))) of
        true -> throw({return, mochi_safe_div((maps:get("right_boundary", Fs_3, nil) - X), (maps:get("right_boundary", Fs_3, nil) - maps:get("peak", Fs_3, nil)))});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('sheru', #{"name" => "Sheru", "left_boundary" => 0.4, "peak" => 1, "right_boundary" => 0.6}),
    erlang:put('siya', #{"name" => "Siya", "left_boundary" => 0.5, "peak" => 1, "right_boundary" => 0.7}),
    io:format("~ts~n", [mochi_repr(stringify(erlang:get('sheru')))]),
    io:format("~ts~n", [mochi_repr(stringify(erlang:get('siya')))]),
    erlang:put('sheru_comp', complement(erlang:get('sheru'))),
    io:format("~ts~n", [mochi_repr(stringify(erlang:get('sheru_comp')))]),
    erlang:put('inter', intersection(erlang:get('siya'), erlang:get('sheru'))),
    io:format("~ts~n", [mochi_repr(stringify(erlang:get('inter')))]),
    io:format("~ts~n", [mochi_repr(("Sheru membership 0.5: " ++ mochi_str(membership(erlang:get('sheru'), 0.5))))]),
    io:format("~ts~n", [mochi_repr(("Sheru membership 0.6: " ++ mochi_str(membership(erlang:get('sheru'), 0.6))))]),
    erlang:put('uni', union(erlang:get('siya'), erlang:get('sheru'))),
    io:format("~ts~n", [mochi_repr(stringify(erlang:get('uni')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
