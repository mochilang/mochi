#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sort_jobs_by_profit/1, max_deadline/1, job_sequencing_with_deadlines/1]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

sort_jobs_by_profit(Jobs) ->
    try
        Js = Jobs,
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Jobs, Js) ->
    case (I < erlang:length(Js)) of
        true ->
            J = 0,
            Fun = fun Fun_loop(I, J, Jobs, Js) ->
    case (J < ((erlang:length(Js) - I) - 1)) of
        true ->
            A = (case erlang:is_map(Js) of true -> maps:get(J, Js, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Js) + J + 1, Js); _ -> mochi_nth(J + 1, Js) end end),
            B = (case erlang:is_map(Js) of true -> maps:get((J + 1), Js, nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length(Js) + (J + 1) + 1, Js); _ -> mochi_nth((J + 1) + 1, Js) end end),
            case (maps:get("profit", A, nil) < maps:get("profit", B, nil)) of
        true -> Js_2 = lists:sublist(Js, J) ++ [B] ++ lists:nthtail(J + 1, Js),
            Js_3 = lists:sublist(Js_2, (J + 1)) ++ [A] ++ lists:nthtail((J + 1) + 1, Js_2),
            Js_4 = Js_3;
        _ -> Js_4 = Js
    end,
            J_2 = (J + 1),
            Fun_loop(I, J_2, Jobs, Js_4);
        _ -> {I, J, Jobs, Js}
    end
end,
{I, J_2, Jobs, Js_4} = Fun(I, J, Jobs, Js),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Jobs, Js_4);
        _ -> {I, Jobs, Js}
    end
end,
{I_2, Jobs, Js_4} = Fun_2(I, Jobs, Js),
        Js_4
    catch {return, RetCatch} -> RetCatch end.

max_deadline(Jobs_2) ->
    try
        Max_d = 0,
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, Jobs_2, Max_d) ->
    case (I_3 < erlang:length(Jobs_2)) of
        true ->
            Job = (case erlang:is_map(Jobs_2) of true -> maps:get(I_3, Jobs_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Jobs_2) + I_3 + 1, Jobs_2); _ -> mochi_nth(I_3 + 1, Jobs_2) end end),
            D = maps:get("deadline", Job, nil),
            case (D > Max_d) of
        true -> Max_d_2 = D,
            Max_d_3 = Max_d_2;
        _ -> Max_d_3 = Max_d
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Jobs_2, Max_d_3);
        _ -> {I_3, Jobs_2, Max_d}
    end
end,
{I_4, Jobs_2, Max_d_3} = Fun_3(I_3, Jobs_2, Max_d),
        Max_d_3
    catch {return, RetCatch} -> RetCatch end.

job_sequencing_with_deadlines(Jobs_3) ->
    try
        Js_5 = sort_jobs_by_profit(Jobs_3),
        Max_d_4 = max_deadline(Js_5),
        Time_slots = [],
        T = 0,
        Fun_4 = fun Fun_4_loop(Jobs_3, Js_5, Max_d_4, T, Time_slots) ->
    case (T < Max_d_4) of
        true ->
            Time_slots_2 = lists:append((case Time_slots of nil -> []; _ -> Time_slots end), [(0 - 1)]),
            T_2 = (T + 1),
            Fun_4_loop(Jobs_3, Js_5, Max_d_4, T_2, Time_slots_2);
        _ -> {Jobs_3, Js_5, Max_d_4, T, Time_slots}
    end
end,
{Jobs_3, Js_5, Max_d_4, T_2, Time_slots_2} = Fun_4(Jobs_3, Js_5, Max_d_4, T, Time_slots),
        Count = 0,
        Max_profit = 0,
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(Count, I_5, Jobs_3, Js_5, Max_d_4, Max_profit, T_2, Time_slots_2) ->
    case (I_5 < erlang:length(Js_5)) of
        true ->
            try
                Job_2 = (case erlang:is_map(Js_5) of true -> maps:get(I_5, Js_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Js_5) + I_5 + 1, Js_5); _ -> mochi_nth(I_5 + 1, Js_5) end end),
                J_3 = (maps:get("deadline", Job_2, nil) - 1),
                Fun_5 = fun Fun_5_loop(Count, I_5, J_3, Job_2, Jobs_3, Js_5, Max_d_4, Max_profit, T_2, Time_slots_2) ->
    case (J_3 >= 0) of
        true ->
            try
                case ((case erlang:is_map(Time_slots_2) of true -> maps:get(J_3, Time_slots_2, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Time_slots_2) + J_3 + 1, Time_slots_2); _ -> mochi_nth(J_3 + 1, Time_slots_2) end end) == (0 - 1)) of
        true -> Time_slots_3 = lists:sublist(Time_slots_2, J_3) ++ [maps:get("id", Job_2, nil)] ++ lists:nthtail(J_3 + 1, Time_slots_2),
            Count_2 = (Count + 1),
            Max_profit_2 = (Max_profit + maps:get("profit", Job_2, nil)),
            throw({break, Count_2, I_5, J_3, Job_2, Jobs_3, Js_5, Max_d_4, Max_profit_2, T_2, Time_slots_3}),
            Count_3 = Count_2,
            Max_profit_3 = Max_profit_2,
            Time_slots_4 = Time_slots_3;
        _ -> Count_3 = Count,
            Max_profit_3 = Max_profit,
            Time_slots_4 = Time_slots_2
    end,
                J_4 = (J_3 - 1),
                Fun_5_loop(Count_3, I_5, J_4, Job_2, Jobs_3, Js_5, Max_d_4, Max_profit_3, T_2, Time_slots_4)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9} -> Fun_5_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9}
            end;
        _ -> {Count, I_5, J_3, Job_2, Jobs_3, Js_5, Max_d_4, Max_profit, T_2, Time_slots_2}
    end
end,
{Count_3, I_5, J_4, Job_2, Jobs_3, Js_5, Max_d_4, Max_profit_3, T_2, Time_slots_4} = Fun_5(Count, I_5, J_3, Job_2, Jobs_3, Js_5, Max_d_4, Max_profit, T_2, Time_slots_2),
                I_6 = (I_5 + 1),
                Fun_6_loop(Count_3, I_6, Jobs_3, Js_5, Max_d_4, Max_profit_3, T_2, Time_slots_4)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7} -> Fun_6_loop(C0, C1, C2, C3, C4, C5, C6, C7);
                {break, B0, B1, B2, B3, B4, B5, B6, B7} -> {B0, B1, B2, B3, B4, B5, B6, B7}
            end;
        _ -> {Count, I_5, Jobs_3, Js_5, Max_d_4, Max_profit, T_2, Time_slots_2}
    end
end,
{Count_3, I_6, Jobs_3, Js_5, Max_d_4, Max_profit_3, T_2, Time_slots_4} = Fun_6(Count, I_5, Jobs_3, Js_5, Max_d_4, Max_profit, T_2, Time_slots_2),
        Result = [],
        Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Count_3]),
        Result_3 = lists:append((case Result_2 of nil -> []; _ -> Result_2 end), [Max_profit_3]),
        Result_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('jobs1', []),
    erlang:put('jobs1', lists:append((case erlang:get('jobs1') of nil -> []; _ -> erlang:get('jobs1') end), [#{"id" => 1, "deadline" => 4, "profit" => 20}])),
    erlang:put('jobs1', lists:append((case erlang:get('jobs1') of nil -> []; _ -> erlang:get('jobs1') end), [#{"id" => 2, "deadline" => 1, "profit" => 10}])),
    erlang:put('jobs1', lists:append((case erlang:get('jobs1') of nil -> []; _ -> erlang:get('jobs1') end), [#{"id" => 3, "deadline" => 1, "profit" => 40}])),
    erlang:put('jobs1', lists:append((case erlang:get('jobs1') of nil -> []; _ -> erlang:get('jobs1') end), [#{"id" => 4, "deadline" => 1, "profit" => 30}])),
    io:format("~ts~n", [mochi_str(job_sequencing_with_deadlines(erlang:get('jobs1')))]),
    erlang:put('jobs2', []),
    erlang:put('jobs2', lists:append((case erlang:get('jobs2') of nil -> []; _ -> erlang:get('jobs2') end), [#{"id" => 1, "deadline" => 2, "profit" => 100}])),
    erlang:put('jobs2', lists:append((case erlang:get('jobs2') of nil -> []; _ -> erlang:get('jobs2') end), [#{"id" => 2, "deadline" => 1, "profit" => 19}])),
    erlang:put('jobs2', lists:append((case erlang:get('jobs2') of nil -> []; _ -> erlang:get('jobs2') end), [#{"id" => 3, "deadline" => 2, "profit" => 27}])),
    erlang:put('jobs2', lists:append((case erlang:get('jobs2') of nil -> []; _ -> erlang:get('jobs2') end), [#{"id" => 4, "deadline" => 1, "profit" => 25}])),
    erlang:put('jobs2', lists:append((case erlang:get('jobs2') of nil -> []; _ -> erlang:get('jobs2') end), [#{"id" => 5, "deadline" => 1, "profit" => 15}])),
    io:format("~ts~n", [mochi_str(job_sequencing_with_deadlines(erlang:get('jobs2')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
