#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, calculate_waitingtime/3, calculate_turnaroundtime/3, to_float/1, calculate_average_times/3]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

calculate_waitingtime(Arrival_time, Burst_time, No_of_processes) ->
    try
        Remaining_time = [],
        I = 0,
        Fun = fun Fun_loop(Arrival_time, Burst_time, I, No_of_processes, Remaining_time) ->
    case (I < No_of_processes) of
        true ->
            Remaining_time_2 = lists:append((case Remaining_time of nil -> []; _ -> Remaining_time end), [(case erlang:is_map(Burst_time) of true -> maps:get(I, Burst_time, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Burst_time) + I + 1, Burst_time); _ -> mochi_nth(I + 1, Burst_time) end end)]),
            I_2 = (I + 1),
            Fun_loop(Arrival_time, Burst_time, I_2, No_of_processes, Remaining_time_2);
        _ -> {Arrival_time, Burst_time, I, No_of_processes, Remaining_time}
    end
end,
{Arrival_time, Burst_time, I_2, No_of_processes, Remaining_time_2} = Fun(Arrival_time, Burst_time, I, No_of_processes, Remaining_time),
        Waiting_time = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Arrival_time, Burst_time, I_3, No_of_processes, Remaining_time_2, Waiting_time) ->
    case (I_3 < No_of_processes) of
        true ->
            Waiting_time_2 = lists:append((case Waiting_time of nil -> []; _ -> Waiting_time end), [0]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Arrival_time, Burst_time, I_4, No_of_processes, Remaining_time_2, Waiting_time_2);
        _ -> {Arrival_time, Burst_time, I_3, No_of_processes, Remaining_time_2, Waiting_time}
    end
end,
{Arrival_time, Burst_time, I_4, No_of_processes, Remaining_time_2, Waiting_time_2} = Fun_2(Arrival_time, Burst_time, I_3, No_of_processes, Remaining_time_2, Waiting_time),
        Complete = 0,
        Increment_time = 0,
        Minm = 1000000000,
        Short = 0,
        Check = false,
        Fun_4 = fun Fun_4_loop(Arrival_time, Burst_time, Check, Complete, I_4, Increment_time, Minm, No_of_processes, Remaining_time_2, Short, Waiting_time_2) ->
    case (Complete /= No_of_processes) of
        true ->
            try
                J = 0,
                Fun_3 = fun Fun_3_loop(Arrival_time, Burst_time, Check, Complete, I_4, Increment_time, J, Minm, No_of_processes, Remaining_time_2, Short, Waiting_time_2) ->
    case (J < No_of_processes) of
        true ->
            case ((((case erlang:is_map(Arrival_time) of true -> maps:get(J, Arrival_time, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arrival_time) + J + 1, Arrival_time); _ -> mochi_nth(J + 1, Arrival_time) end end) =< Increment_time) andalso ((case erlang:is_map(Remaining_time_2) of true -> maps:get(J, Remaining_time_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Remaining_time_2) + J + 1, Remaining_time_2); _ -> mochi_nth(J + 1, Remaining_time_2) end end) > 0)) andalso ((case erlang:is_map(Remaining_time_2) of true -> maps:get(J, Remaining_time_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Remaining_time_2) + J + 1, Remaining_time_2); _ -> mochi_nth(J + 1, Remaining_time_2) end end) < Minm)) of
        true -> Minm_2 = (case erlang:is_map(Remaining_time_2) of true -> maps:get(J, Remaining_time_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Remaining_time_2) + J + 1, Remaining_time_2); _ -> mochi_nth(J + 1, Remaining_time_2) end end),
            Short_2 = J,
            Check_2 = true,
            Check_3 = Check_2,
            Minm_3 = Minm_2,
            Short_3 = Short_2;
        _ -> Check_3 = Check,
            Minm_3 = Minm,
            Short_3 = Short
    end,
            J_2 = (J + 1),
            Fun_3_loop(Arrival_time, Burst_time, Check_3, Complete, I_4, Increment_time, J_2, Minm_3, No_of_processes, Remaining_time_2, Short_3, Waiting_time_2);
        _ -> {Arrival_time, Burst_time, Check, Complete, I_4, Increment_time, J, Minm, No_of_processes, Remaining_time_2, Short, Waiting_time_2}
    end
end,
{Arrival_time, Burst_time, Check_3, Complete, I_4, Increment_time, J_2, Minm_3, No_of_processes, Remaining_time_2, Short_3, Waiting_time_2} = Fun_3(Arrival_time, Burst_time, Check, Complete, I_4, Increment_time, J, Minm, No_of_processes, Remaining_time_2, Short, Waiting_time_2),
                case mochi_not(Check_3) of
        true -> Increment_time_2 = (Increment_time + 1),
            throw({continue, Arrival_time, Burst_time, Check_3, Complete, I_4, Increment_time_2, Minm_3, No_of_processes, Remaining_time_2, Short_3, Waiting_time_2}),
            Increment_time_3 = Increment_time_2;
        _ -> Increment_time_3 = Increment_time
    end,
                Remaining_time_3 = lists:sublist(Remaining_time_2, Short_3) ++ [((case erlang:is_map(Remaining_time_2) of true -> maps:get(Short_3, Remaining_time_2, nil); _ -> case Short_3 < 0 of true -> mochi_nth(erlang:length(Remaining_time_2) + Short_3 + 1, Remaining_time_2); _ -> mochi_nth(Short_3 + 1, Remaining_time_2) end end) - 1)] ++ lists:nthtail(Short_3 + 1, Remaining_time_2),
                Minm_4 = (case erlang:is_map(Remaining_time_3) of true -> maps:get(Short_3, Remaining_time_3, nil); _ -> case Short_3 < 0 of true -> mochi_nth(erlang:length(Remaining_time_3) + Short_3 + 1, Remaining_time_3); _ -> mochi_nth(Short_3 + 1, Remaining_time_3) end end),
                case (Minm_4 == 0) of
        true -> Minm_5 = 1000000000,
            Minm_6 = Minm_5;
        _ -> Minm_6 = Minm_4
    end,
                case ((case erlang:is_map(Remaining_time_3) of true -> maps:get(Short_3, Remaining_time_3, nil); _ -> case Short_3 < 0 of true -> mochi_nth(erlang:length(Remaining_time_3) + Short_3 + 1, Remaining_time_3); _ -> mochi_nth(Short_3 + 1, Remaining_time_3) end end) == 0) of
        true -> Complete_2 = (Complete + 1),
            Check_4 = false,
            Finish_time = (Increment_time_3 + 1),
            Finar = (Finish_time - (case erlang:is_map(Arrival_time) of true -> maps:get(Short_3, Arrival_time, nil); _ -> case Short_3 < 0 of true -> mochi_nth(erlang:length(Arrival_time) + Short_3 + 1, Arrival_time); _ -> mochi_nth(Short_3 + 1, Arrival_time) end end)),
            Waiting_time_3 = lists:sublist(Waiting_time_2, Short_3) ++ [(Finar - (case erlang:is_map(Burst_time) of true -> maps:get(Short_3, Burst_time, nil); _ -> case Short_3 < 0 of true -> mochi_nth(erlang:length(Burst_time) + Short_3 + 1, Burst_time); _ -> mochi_nth(Short_3 + 1, Burst_time) end end))] ++ lists:nthtail(Short_3 + 1, Waiting_time_2),
            case ((case erlang:is_map(Waiting_time_3) of true -> maps:get(Short_3, Waiting_time_3, nil); _ -> case Short_3 < 0 of true -> mochi_nth(erlang:length(Waiting_time_3) + Short_3 + 1, Waiting_time_3); _ -> mochi_nth(Short_3 + 1, Waiting_time_3) end end) < 0) of
        true -> Waiting_time_4 = lists:sublist(Waiting_time_3, Short_3) ++ [0] ++ lists:nthtail(Short_3 + 1, Waiting_time_3),
            Waiting_time_5 = Waiting_time_4;
        _ -> Waiting_time_5 = Waiting_time_3
    end,
            Check_5 = Check_4,
            Complete_3 = Complete_2,
            Finar_2 = Finar,
            Finish_time_2 = Finish_time,
            Waiting_time_6 = Waiting_time_5;
        _ -> Check_5 = Check_3,
            Complete_3 = Complete,
            Finar_2 = nil,
            Finish_time_2 = nil,
            Waiting_time_6 = Waiting_time_2
    end,
                Increment_time_4 = (Increment_time_3 + 1),
                Fun_4_loop(Arrival_time, Burst_time, Check_5, Complete_3, I_4, Increment_time_4, Minm_6, No_of_processes, Remaining_time_3, Short_3, Waiting_time_6)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10} -> Fun_4_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10}
            end;
        _ -> {Arrival_time, Burst_time, Check, Complete, I_4, Increment_time, Minm, No_of_processes, Remaining_time_2, Short, Waiting_time_2}
    end
end,
{Arrival_time, Burst_time, Check_5, Complete_3, I_4, Increment_time_4, Minm_6, No_of_processes, Remaining_time_3, Short_3, Waiting_time_6} = Fun_4(Arrival_time, Burst_time, Check, Complete, I_4, Increment_time, Minm, No_of_processes, Remaining_time_2, Short, Waiting_time_2),
        Waiting_time_6
    catch {return, Ret} -> Ret end.

calculate_turnaroundtime(Burst_time_2, No_of_processes_2, Waiting_time_7) ->
    try
        Turn_around_time = [],
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Burst_time_2, I_5, No_of_processes_2, Turn_around_time, Waiting_time_7) ->
    case (I_5 < No_of_processes_2) of
        true ->
            Turn_around_time_2 = lists:append((case Turn_around_time of nil -> []; _ -> Turn_around_time end), [((case erlang:is_map(Burst_time_2) of true -> maps:get(I_5, Burst_time_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Burst_time_2) + I_5 + 1, Burst_time_2); _ -> mochi_nth(I_5 + 1, Burst_time_2) end end) + (case erlang:is_map(Waiting_time_7) of true -> maps:get(I_5, Waiting_time_7, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Waiting_time_7) + I_5 + 1, Waiting_time_7); _ -> mochi_nth(I_5 + 1, Waiting_time_7) end end))]),
            I_6 = (I_5 + 1),
            Fun_5_loop(Burst_time_2, I_6, No_of_processes_2, Turn_around_time_2, Waiting_time_7);
        _ -> {Burst_time_2, I_5, No_of_processes_2, Turn_around_time, Waiting_time_7}
    end
end,
{Burst_time_2, I_6, No_of_processes_2, Turn_around_time_2, Waiting_time_7} = Fun_5(Burst_time_2, I_5, No_of_processes_2, Turn_around_time, Waiting_time_7),
        Turn_around_time_2
    catch {return, Ret} -> Ret end.

to_float(X) ->
    try
        mochi_safe_mul(X, 1.0)
    catch {return, Ret} -> Ret end.

calculate_average_times(Waiting_time_8, Turn_around_time_3, No_of_processes_3) ->
    try
        Total_waiting_time = 0,
        Total_turn_around_time = 0,
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(I_7, No_of_processes_3, Total_turn_around_time, Total_waiting_time, Turn_around_time_3, Waiting_time_8) ->
    case (I_7 < No_of_processes_3) of
        true ->
            Total_waiting_time_2 = (Total_waiting_time + (case erlang:is_map(Waiting_time_8) of true -> maps:get(I_7, Waiting_time_8, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Waiting_time_8) + I_7 + 1, Waiting_time_8); _ -> mochi_nth(I_7 + 1, Waiting_time_8) end end)),
            Total_turn_around_time_2 = (Total_turn_around_time + (case erlang:is_map(Turn_around_time_3) of true -> maps:get(I_7, Turn_around_time_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Turn_around_time_3) + I_7 + 1, Turn_around_time_3); _ -> mochi_nth(I_7 + 1, Turn_around_time_3) end end)),
            I_8 = (I_7 + 1),
            Fun_6_loop(I_8, No_of_processes_3, Total_turn_around_time_2, Total_waiting_time_2, Turn_around_time_3, Waiting_time_8);
        _ -> {I_7, No_of_processes_3, Total_turn_around_time, Total_waiting_time, Turn_around_time_3, Waiting_time_8}
    end
end,
{I_8, No_of_processes_3, Total_turn_around_time_2, Total_waiting_time_2, Turn_around_time_3, Waiting_time_8} = Fun_6(I_7, No_of_processes_3, Total_turn_around_time, Total_waiting_time, Turn_around_time_3, Waiting_time_8),
        Avg_wait = mochi_safe_div(to_float(Total_waiting_time_2), to_float(No_of_processes_3)),
        Avg_turn = mochi_safe_div(to_float(Total_turn_around_time_2), to_float(No_of_processes_3)),
        io:format("~ts~n", [mochi_repr(("Average waiting time = " ++ mochi_str(Avg_wait)))]),
        io:format("~ts~n", [mochi_repr(("Average turn around time = " ++ mochi_str(Avg_turn)))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(calculate_waitingtime([1, 2, 3, 4], [3, 3, 5, 1], 4))]),
    io:format("~ts~n", [mochi_repr(calculate_waitingtime([1, 2, 3], [2, 5, 1], 3))]),
    io:format("~ts~n", [mochi_repr(calculate_waitingtime([2, 3], [5, 1], 2))]),
    io:format("~ts~n", [mochi_repr(calculate_turnaroundtime([3, 3, 5, 1], 4, [0, 3, 5, 0]))]),
    io:format("~ts~n", [mochi_repr(calculate_turnaroundtime([3, 3], 2, [0, 3]))]),
    io:format("~ts~n", [mochi_repr(calculate_turnaroundtime([8, 10, 1], 3, [1, 0, 3]))]),
    calculate_average_times([0, 3, 5, 0], [3, 6, 10, 1], 4),
    calculate_average_times([2, 3], [3, 6], 2),
    calculate_average_times([10, 4, 3], [2, 7, 6], 3),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
