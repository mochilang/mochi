#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, calculate_waitingtime/3, calculate_turnaroundtime/3, average/1]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

calculate_waitingtime(Arrival_time, Burst_time, No_of_processes) ->
    try
        Waiting_time = nil,
        Remaining_time = nil,
        I = 0,
        Fun = fun Fun_loop(Arrival_time, Burst_time, I, No_of_processes, Remaining_time, Waiting_time) ->
    case (I < No_of_processes) of
        true ->
            Waiting_time_2 = lists:append((case Waiting_time of nil -> []; _ -> Waiting_time end), [0]),
            Remaining_time_2 = lists:append((case Remaining_time of nil -> []; _ -> Remaining_time end), [(case erlang:is_map(Burst_time) of true -> maps:get(I, Burst_time, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Burst_time) + I + 1, Burst_time); _ -> mochi_nth(I + 1, Burst_time) end end)]),
            I_2 = (I + 1),
            Fun_loop(Arrival_time, Burst_time, I_2, No_of_processes, Remaining_time_2, Waiting_time_2);
        _ -> {Arrival_time, Burst_time, I, No_of_processes, Remaining_time, Waiting_time}
    end
end,
{Arrival_time, Burst_time, I_2, No_of_processes, Remaining_time_2, Waiting_time_2} = Fun(Arrival_time, Burst_time, I, No_of_processes, Remaining_time, Waiting_time),
        Completed = 0,
        Total_time = 0,
        Fun_5 = fun Fun_5_loop(Arrival_time, Burst_time, Completed, I_2, No_of_processes, Remaining_time_2, Total_time, Waiting_time_2) ->
    case (Completed /= No_of_processes) of
        true ->
            Ready_process = [],
            Target_process = -1,
            J = 0,
            Fun_2 = fun Fun_2_loop(Arrival_time, Burst_time, Completed, I_2, J, No_of_processes, Ready_process, Remaining_time_2, Target_process, Total_time, Waiting_time_2) ->
    case (J < No_of_processes) of
        true ->
            case (((case erlang:is_map(Arrival_time) of true -> maps:get(J, Arrival_time, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arrival_time) + J + 1, Arrival_time); _ -> mochi_nth(J + 1, Arrival_time) end end) =< Total_time) andalso ((case erlang:is_map(Remaining_time_2) of true -> maps:get(J, Remaining_time_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Remaining_time_2) + J + 1, Remaining_time_2); _ -> mochi_nth(J + 1, Remaining_time_2) end end) > 0)) of
        true -> Ready_process_2 = lists:append((case Ready_process of nil -> []; _ -> Ready_process end), [J]),
            Ready_process_3 = Ready_process_2;
        _ -> Ready_process_3 = Ready_process
    end,
            J_2 = (J + 1),
            Fun_2_loop(Arrival_time, Burst_time, Completed, I_2, J_2, No_of_processes, Ready_process_3, Remaining_time_2, Target_process, Total_time, Waiting_time_2);
        _ -> {Arrival_time, Burst_time, Completed, I_2, J, No_of_processes, Ready_process, Remaining_time_2, Target_process, Total_time, Waiting_time_2}
    end
end,
{Arrival_time, Burst_time, Completed, I_2, J_2, No_of_processes, Ready_process_3, Remaining_time_2, Target_process, Total_time, Waiting_time_2} = Fun_2(Arrival_time, Burst_time, Completed, I_2, J, No_of_processes, Ready_process, Remaining_time_2, Target_process, Total_time, Waiting_time_2),
            case (erlang:length(Ready_process_3) > 0) of
        true -> Target_process_2 = (case erlang:is_map(Ready_process_3) of true -> maps:get(0, Ready_process_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Ready_process_3) + 0 + 1, Ready_process_3); _ -> mochi_nth(0 + 1, Ready_process_3) end end),
            K = 0,
            Fun_3 = fun Fun_3_loop(Arrival_time, Burst_time, Completed, I_2, J_2, K, No_of_processes, Ready_process_3, Remaining_time_2, Target_process_2, Total_time, Waiting_time_2) ->
    case (K < erlang:length(Ready_process_3)) of
        true ->
            Idx = (case erlang:is_map(Ready_process_3) of true -> maps:get(K, Ready_process_3, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Ready_process_3) + K + 1, Ready_process_3); _ -> mochi_nth(K + 1, Ready_process_3) end end),
            case ((case erlang:is_map(Remaining_time_2) of true -> maps:get(Idx, Remaining_time_2, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Remaining_time_2) + Idx + 1, Remaining_time_2); _ -> mochi_nth(Idx + 1, Remaining_time_2) end end) < (case erlang:is_map(Remaining_time_2) of true -> maps:get(Target_process_2, Remaining_time_2, nil); _ -> case Target_process_2 < 0 of true -> mochi_nth(erlang:length(Remaining_time_2) + Target_process_2 + 1, Remaining_time_2); _ -> mochi_nth(Target_process_2 + 1, Remaining_time_2) end end)) of
        true -> Target_process_3 = Idx,
            Target_process_4 = Target_process_3;
        _ -> Target_process_4 = Target_process_2
    end,
            K_2 = (K + 1),
            Fun_3_loop(Arrival_time, Burst_time, Completed, I_2, J_2, K_2, No_of_processes, Ready_process_3, Remaining_time_2, Target_process_4, Total_time, Waiting_time_2);
        _ -> {Arrival_time, Burst_time, Completed, I_2, J_2, K, No_of_processes, Ready_process_3, Remaining_time_2, Target_process_2, Total_time, Waiting_time_2}
    end
end,
{Arrival_time, Burst_time, Completed, I_2, J_2, K_2, No_of_processes, Ready_process_3, Remaining_time_2, Target_process_4, Total_time, Waiting_time_2} = Fun_3(Arrival_time, Burst_time, Completed, I_2, J_2, K, No_of_processes, Ready_process_3, Remaining_time_2, Target_process_2, Total_time, Waiting_time_2),
            Total_time_2 = (Total_time + (case erlang:is_map(Burst_time) of true -> maps:get(Target_process_4, Burst_time, nil); _ -> case Target_process_4 < 0 of true -> mochi_nth(erlang:length(Burst_time) + Target_process_4 + 1, Burst_time); _ -> mochi_nth(Target_process_4 + 1, Burst_time) end end)),
            Completed_2 = (Completed + 1),
            Remaining_time_3 = lists:sublist(Remaining_time_2, Target_process_4) ++ [0] ++ lists:nthtail(Target_process_4 + 1, Remaining_time_2),
            Waiting_time_3 = lists:sublist(Waiting_time_2, Target_process_4) ++ [((Total_time_2 - (case erlang:is_map(Arrival_time) of true -> maps:get(Target_process_4, Arrival_time, nil); _ -> case Target_process_4 < 0 of true -> mochi_nth(erlang:length(Arrival_time) + Target_process_4 + 1, Arrival_time); _ -> mochi_nth(Target_process_4 + 1, Arrival_time) end end)) - (case erlang:is_map(Burst_time) of true -> maps:get(Target_process_4, Burst_time, nil); _ -> case Target_process_4 < 0 of true -> mochi_nth(erlang:length(Burst_time) + Target_process_4 + 1, Burst_time); _ -> mochi_nth(Target_process_4 + 1, Burst_time) end end))] ++ lists:nthtail(Target_process_4 + 1, Waiting_time_2),
            Completed_3 = Completed_2,
            Fun_4 = Fun_3,
            K_3 = K_2,
            Remaining_time_4 = Remaining_time_3,
            Target_process_5 = Target_process_4,
            Total_time_4 = Total_time_2,
            Waiting_time_4 = Waiting_time_3;
        _ -> Total_time_3 = (Total_time + 1),
            Completed_3 = Completed,
            Fun_4 = Fun_2,
            K_3 = nil,
            Remaining_time_4 = Remaining_time_2,
            Target_process_5 = Target_process,
            Total_time_4 = Total_time_3,
            Waiting_time_4 = Waiting_time_2
    end,
            Fun_5_loop(Arrival_time, Burst_time, Completed_3, I_2, No_of_processes, Remaining_time_4, Total_time_4, Waiting_time_4);
        _ -> {Arrival_time, Burst_time, Completed, I_2, No_of_processes, Remaining_time_2, Total_time, Waiting_time_2}
    end
end,
{Arrival_time, Burst_time, Completed_3, I_2, No_of_processes, Remaining_time_4, Total_time_4, Waiting_time_4} = Fun_5(Arrival_time, Burst_time, Completed, I_2, No_of_processes, Remaining_time_2, Total_time, Waiting_time_2),
        Waiting_time_4
    catch {return, RetCatch} -> RetCatch end.

calculate_turnaroundtime(Burst_time_2, No_of_processes_2, Waiting_time_5) ->
    try
        Turn_around_time = nil,
        I_3 = 0,
        Fun_6 = fun Fun_6_loop(Burst_time_2, I_3, No_of_processes_2, Turn_around_time, Waiting_time_5) ->
    case (I_3 < No_of_processes_2) of
        true ->
            Turn_around_time_2 = lists:append((case Turn_around_time of nil -> []; _ -> Turn_around_time end), [((case erlang:is_map(Burst_time_2) of true -> maps:get(I_3, Burst_time_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Burst_time_2) + I_3 + 1, Burst_time_2); _ -> mochi_nth(I_3 + 1, Burst_time_2) end end) + (case erlang:is_map(Waiting_time_5) of true -> maps:get(I_3, Waiting_time_5, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Waiting_time_5) + I_3 + 1, Waiting_time_5); _ -> mochi_nth(I_3 + 1, Waiting_time_5) end end))]),
            I_4 = (I_3 + 1),
            Fun_6_loop(Burst_time_2, I_4, No_of_processes_2, Turn_around_time_2, Waiting_time_5);
        _ -> {Burst_time_2, I_3, No_of_processes_2, Turn_around_time, Waiting_time_5}
    end
end,
{Burst_time_2, I_4, No_of_processes_2, Turn_around_time_2, Waiting_time_5} = Fun_6(Burst_time_2, I_3, No_of_processes_2, Turn_around_time, Waiting_time_5),
        Turn_around_time_2
    catch {return, RetCatch} -> RetCatch end.

average(Values) ->
    try
        Total = 0,
        I_5 = 0,
        Fun_7 = fun Fun_7_loop(I_5, Total, Values) ->
    case (I_5 < erlang:length(Values)) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Values) of true -> maps:get(I_5, Values, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Values) + I_5 + 1, Values); _ -> mochi_nth(I_5 + 1, Values) end end)),
            I_6 = (I_5 + 1),
            Fun_7_loop(I_6, Total_2, Values);
        _ -> {I_5, Total, Values}
    end
end,
{I_6, Total_2, Values} = Fun_7(I_5, Total, Values),
        mochi_safe_div(float(Total_2), float(erlang:length(Values)))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr("[TEST CASE 01]")]),
    erlang:put('no_of_processes', 4),
    erlang:put('burst_time', [2, 5, 3, 7]),
    erlang:put('arrival_time', [0, 0, 0, 0]),
    erlang:put('waiting_time', calculate_waitingtime(erlang:get('arrival_time'), erlang:get('burst_time'), 4)),
    erlang:put('turn_around_time', calculate_turnaroundtime(erlang:get('burst_time'), 4, erlang:get('waiting_time'))),
    io:format("~ts~n", [mochi_repr("PID\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time")]),
    erlang:put('i', 0),
    Fun_8 = fun Fun_8_loop() ->
    case (erlang:get('i') < 4) of
        true ->
            Pid = (erlang:get('i') + 1),
            io:format("~ts~n", [mochi_repr(((((((((mochi_str(Pid) ++ "\t") ++ mochi_str((case erlang:is_map(erlang:get('burst_time')) of true -> maps:get(erlang:get('i'), erlang:get('burst_time'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('burst_time')) + erlang:get('i') + 1, erlang:get('burst_time')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('burst_time')) end end))) ++ "\t\t\t") ++ mochi_str((case erlang:is_map(erlang:get('arrival_time')) of true -> maps:get(erlang:get('i'), erlang:get('arrival_time'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('arrival_time')) + erlang:get('i') + 1, erlang:get('arrival_time')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('arrival_time')) end end))) ++ "\t\t\t\t") ++ mochi_str((case erlang:is_map(erlang:get('waiting_time')) of true -> maps:get(erlang:get('i'), erlang:get('waiting_time'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('waiting_time')) + erlang:get('i') + 1, erlang:get('waiting_time')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('waiting_time')) end end))) ++ "\t\t\t\t") ++ mochi_str((case erlang:is_map(erlang:get('turn_around_time')) of true -> maps:get(erlang:get('i'), erlang:get('turn_around_time'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('turn_around_time')) + erlang:get('i') + 1, erlang:get('turn_around_time')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('turn_around_time')) end end))))]),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_8_loop();
        _ -> {}
    end
end,
{} = Fun_8(),
    erlang:put('avg_wait', average(erlang:get('waiting_time'))),
    erlang:put('avg_turn', average(erlang:get('turn_around_time'))),
    io:format("~ts~n", [mochi_repr(("\nAverage waiting time = " ++ mochi_str(erlang:get('avg_wait'))))]),
    io:format("~ts~n", [mochi_repr(("Average turnaround time = " ++ mochi_str(erlang:get('avg_turn'))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
