#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, max_tasks/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

max_tasks(Tasks_info) ->
    try
        Order = [],
        I = 0,
        Fun = fun Fun_loop(I, Order, Tasks_info) ->
    case (I < erlang:length(Tasks_info)) of
        true ->
            Order_2 = lists:append((case Order of nil -> []; _ -> Order end), [I]),
            I_2 = (I + 1),
            Fun_loop(I_2, Order_2, Tasks_info);
        _ -> {I, Order, Tasks_info}
    end
end,
{I_2, Order_2, Tasks_info} = Fun(I, Order, Tasks_info),
        N = erlang:length(Order_2),
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, N, Order_2, Tasks_info) ->
    case (I_3 < N) of
        true ->
            J = (I_3 + 1),
            Fun_2 = fun Fun_2_loop(I_3, J, N, Order_2, Tasks_info) ->
    case (J < N) of
        true ->
            case ((case erlang:is_map((case erlang:is_map(Tasks_info) of true -> maps:get((case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end), Tasks_info, nil); _ -> case (case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) < 0 of true -> mochi_nth(erlang:length(Tasks_info) + (case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) + 1, Tasks_info); _ -> mochi_nth((case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) + 1, Tasks_info) end end)) of true -> maps:get(1, (case erlang:is_map(Tasks_info) of true -> maps:get((case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end), Tasks_info, nil); _ -> case (case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) < 0 of true -> mochi_nth(erlang:length(Tasks_info) + (case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) + 1, Tasks_info); _ -> mochi_nth((case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) + 1, Tasks_info) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Tasks_info) of true -> maps:get((case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end), Tasks_info, nil); _ -> case (case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) < 0 of true -> mochi_nth(erlang:length(Tasks_info) + (case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) + 1, Tasks_info); _ -> mochi_nth((case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) + 1, Tasks_info) end end)) + 1 + 1, (case erlang:is_map(Tasks_info) of true -> maps:get((case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end), Tasks_info, nil); _ -> case (case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) < 0 of true -> mochi_nth(erlang:length(Tasks_info) + (case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) + 1, Tasks_info); _ -> mochi_nth((case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) + 1, Tasks_info) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Tasks_info) of true -> maps:get((case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end), Tasks_info, nil); _ -> case (case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) < 0 of true -> mochi_nth(erlang:length(Tasks_info) + (case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) + 1, Tasks_info); _ -> mochi_nth((case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end) + 1, Tasks_info) end end)) end end) > (case erlang:is_map((case erlang:is_map(Tasks_info) of true -> maps:get((case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end), Tasks_info, nil); _ -> case (case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) < 0 of true -> mochi_nth(erlang:length(Tasks_info) + (case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) + 1, Tasks_info); _ -> mochi_nth((case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) + 1, Tasks_info) end end)) of true -> maps:get(1, (case erlang:is_map(Tasks_info) of true -> maps:get((case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end), Tasks_info, nil); _ -> case (case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) < 0 of true -> mochi_nth(erlang:length(Tasks_info) + (case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) + 1, Tasks_info); _ -> mochi_nth((case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) + 1, Tasks_info) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Tasks_info) of true -> maps:get((case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end), Tasks_info, nil); _ -> case (case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) < 0 of true -> mochi_nth(erlang:length(Tasks_info) + (case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) + 1, Tasks_info); _ -> mochi_nth((case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) + 1, Tasks_info) end end)) + 1 + 1, (case erlang:is_map(Tasks_info) of true -> maps:get((case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end), Tasks_info, nil); _ -> case (case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) < 0 of true -> mochi_nth(erlang:length(Tasks_info) + (case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) + 1, Tasks_info); _ -> mochi_nth((case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) + 1, Tasks_info) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(Tasks_info) of true -> maps:get((case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end), Tasks_info, nil); _ -> case (case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) < 0 of true -> mochi_nth(erlang:length(Tasks_info) + (case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) + 1, Tasks_info); _ -> mochi_nth((case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end) + 1, Tasks_info) end end)) end end)) of
        true -> Tmp = (case erlang:is_map(Order_2) of true -> maps:get(I_3, Order_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Order_2) + I_3 + 1, Order_2); _ -> mochi_nth(I_3 + 1, Order_2) end end),
            Order_3 = lists:sublist(Order_2, I_3) ++ [(case erlang:is_map(Order_2) of true -> maps:get(J, Order_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Order_2) + J + 1, Order_2); _ -> mochi_nth(J + 1, Order_2) end end)] ++ lists:nthtail(I_3 + 1, Order_2),
            Order_4 = lists:sublist(Order_3, J) ++ [Tmp] ++ lists:nthtail(J + 1, Order_3),
            Order_5 = Order_4,
            Tmp_2 = Tmp;
        _ -> Order_5 = Order_2,
            Tmp_2 = nil
    end,
            J_2 = (J + 1),
            Fun_2_loop(I_3, J_2, N, Order_5, Tasks_info);
        _ -> {I_3, J, N, Order_2, Tasks_info}
    end
end,
{I_3, J_2, N, Order_5, Tasks_info} = Fun_2(I_3, J, N, Order_2, Tasks_info),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, N, Order_5, Tasks_info);
        _ -> {I_3, N, Order_2, Tasks_info}
    end
end,
{I_4, N, Order_5, Tasks_info} = Fun_3(I_3, N, Order_2, Tasks_info),
        Result = [],
        Pos = 1,
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(I_5, N, Order_5, Pos, Result, Tasks_info) ->
    case (I_5 < N) of
        true ->
            Id = (case erlang:is_map(Order_5) of true -> maps:get(I_5, Order_5, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Order_5) + I_5 + 1, Order_5); _ -> mochi_nth(I_5 + 1, Order_5) end end),
            Deadline = (case erlang:is_map((case erlang:is_map(Tasks_info) of true -> maps:get(Id, Tasks_info, nil); _ -> case Id < 0 of true -> mochi_nth(erlang:length(Tasks_info) + Id + 1, Tasks_info); _ -> mochi_nth(Id + 1, Tasks_info) end end)) of true -> maps:get(0, (case erlang:is_map(Tasks_info) of true -> maps:get(Id, Tasks_info, nil); _ -> case Id < 0 of true -> mochi_nth(erlang:length(Tasks_info) + Id + 1, Tasks_info); _ -> mochi_nth(Id + 1, Tasks_info) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Tasks_info) of true -> maps:get(Id, Tasks_info, nil); _ -> case Id < 0 of true -> mochi_nth(erlang:length(Tasks_info) + Id + 1, Tasks_info); _ -> mochi_nth(Id + 1, Tasks_info) end end)) + 0 + 1, (case erlang:is_map(Tasks_info) of true -> maps:get(Id, Tasks_info, nil); _ -> case Id < 0 of true -> mochi_nth(erlang:length(Tasks_info) + Id + 1, Tasks_info); _ -> mochi_nth(Id + 1, Tasks_info) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(Tasks_info) of true -> maps:get(Id, Tasks_info, nil); _ -> case Id < 0 of true -> mochi_nth(erlang:length(Tasks_info) + Id + 1, Tasks_info); _ -> mochi_nth(Id + 1, Tasks_info) end end)) end end),
            case (Deadline >= Pos) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Id]),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            I_6 = (I_5 + 1),
            Pos_2 = (Pos + 1),
            Fun_4_loop(I_6, N, Order_5, Pos_2, Result_3, Tasks_info);
        _ -> {I_5, N, Order_5, Pos, Result, Tasks_info}
    end
end,
{I_6, N, Order_5, Pos_2, Result_3, Tasks_info} = Fun_4(I_5, N, Order_5, Pos, Result, Tasks_info),
        Result_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        Ex1 = [[4, 20], [1, 10], [1, 40], [1, 30]],
        Ex2 = [[1, 10], [2, 20], [3, 30], [2, 40]],
        io:format("~ts~n", [mochi_str(max_tasks(Ex1))]),
        io:format("~ts~n", [mochi_str(max_tasks(Ex2))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
