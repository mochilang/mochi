#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, calculate_waiting_times/1, calculate_turn_around_times/2, mean/1, format_float_5/1, main/0]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

calculate_waiting_times(Burst_times) ->
    try
        Quantum = 2,
        Rem = [],
        I = 0,
        Fun = fun Fun_loop(Burst_times, I, Quantum, Rem) ->
    case (I < erlang:length(Burst_times)) of
        true ->
            Rem_2 = lists:append((case Rem of nil -> []; _ -> Rem end), [(case erlang:is_map(Burst_times) of true -> maps:get(I, Burst_times, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Burst_times) + I + 1, Burst_times); _ -> mochi_nth(I + 1, Burst_times) end end)]),
            I_2 = (I + 1),
            Fun_loop(Burst_times, I_2, Quantum, Rem_2);
        _ -> {Burst_times, I, Quantum, Rem}
    end
end,
{Burst_times, I_2, Quantum, Rem_2} = Fun(Burst_times, I, Quantum, Rem),
        Waiting = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Burst_times, I_3, Quantum, Rem_2, Waiting) ->
    case (I_3 < erlang:length(Burst_times)) of
        true ->
            Waiting_2 = lists:append((case Waiting of nil -> []; _ -> Waiting end), [0]),
            I_4 = (I_3 + 1),
            Fun_2_loop(Burst_times, I_4, Quantum, Rem_2, Waiting_2);
        _ -> {Burst_times, I_3, Quantum, Rem_2, Waiting}
    end
end,
{Burst_times, I_4, Quantum, Rem_2, Waiting_2} = Fun_2(Burst_times, I_3, Quantum, Rem_2, Waiting),
        T = 0,
        Fun_4 = fun Fun_4_loop(Burst_times, I_4, Quantum, Rem_2, T, Waiting_2) ->
    case true of
        true ->
            Done = true,
            J = 0,
            Fun_3 = fun Fun_3_loop(Burst_times, Done, I_4, J, Quantum, Rem_2, T, Waiting_2) ->
    case (J < erlang:length(Burst_times)) of
        true ->
            case ((case erlang:is_map(Rem_2) of true -> maps:get(J, Rem_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Rem_2) + J + 1, Rem_2); _ -> mochi_nth(J + 1, Rem_2) end end) > 0) of
        true -> Done_2 = false,
            case ((case erlang:is_map(Rem_2) of true -> maps:get(J, Rem_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Rem_2) + J + 1, Rem_2); _ -> mochi_nth(J + 1, Rem_2) end end) > Quantum) of
        true -> T_2 = (T + Quantum),
            Rem_3 = lists:sublist(Rem_2, J) ++ [((case erlang:is_map(Rem_2) of true -> maps:get(J, Rem_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Rem_2) + J + 1, Rem_2); _ -> mochi_nth(J + 1, Rem_2) end end) - Quantum)] ++ lists:nthtail(J + 1, Rem_2),
            Rem_5 = Rem_3,
            T_4 = T_2,
            Waiting_4 = Waiting_2;
        _ -> T_3 = (T + (case erlang:is_map(Rem_2) of true -> maps:get(J, Rem_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Rem_2) + J + 1, Rem_2); _ -> mochi_nth(J + 1, Rem_2) end end)),
            Waiting_3 = lists:sublist(Waiting_2, J) ++ [(T_3 - (case erlang:is_map(Burst_times) of true -> maps:get(J, Burst_times, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Burst_times) + J + 1, Burst_times); _ -> mochi_nth(J + 1, Burst_times) end end))] ++ lists:nthtail(J + 1, Waiting_2),
            Rem_4 = lists:sublist(Rem_2, J) ++ [0] ++ lists:nthtail(J + 1, Rem_2),
            Rem_5 = Rem_4,
            T_4 = T_3,
            Waiting_4 = Waiting_3
    end,
            Done_3 = Done_2,
            Rem_6 = Rem_5,
            T_5 = T_4,
            Waiting_5 = Waiting_4;
        _ -> Done_3 = Done,
            Rem_6 = Rem_2,
            T_5 = T,
            Waiting_5 = Waiting_2
    end,
            J_2 = (J + 1),
            Fun_3_loop(Burst_times, Done_3, I_4, J_2, Quantum, Rem_6, T_5, Waiting_5);
        _ -> {Burst_times, Done, I_4, J, Quantum, Rem_2, T, Waiting_2}
    end
end,
{Burst_times, Done_3, I_4, J_2, Quantum, Rem_6, T_5, Waiting_5} = Fun_3(Burst_times, Done, I_4, J, Quantum, Rem_2, T, Waiting_2),
            case (Done_3 /= nil) of
        true -> throw({return, Waiting_5});
        _ -> ok
    end,
            Fun_4_loop(Burst_times, I_4, Quantum, Rem_6, T_5, Waiting_5);
        _ -> {Burst_times, I_4, Quantum, Rem_2, T, Waiting_2}
    end
end,
{Burst_times, I_4, Quantum, Rem_6, T_5, Waiting_5} = Fun_4(Burst_times, I_4, Quantum, Rem_2, T, Waiting_2),
        Waiting_5
    catch {return, RetCatch} -> RetCatch end.

calculate_turn_around_times(Burst_times_2, Waiting_times) ->
    try
        Result = [],
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Burst_times_2, I_5, Result, Waiting_times) ->
    case (I_5 < erlang:length(Burst_times_2)) of
        true ->
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [((case erlang:is_map(Burst_times_2) of true -> maps:get(I_5, Burst_times_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Burst_times_2) + I_5 + 1, Burst_times_2); _ -> mochi_nth(I_5 + 1, Burst_times_2) end end) + (case erlang:is_map(Waiting_times) of true -> maps:get(I_5, Waiting_times, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Waiting_times) + I_5 + 1, Waiting_times); _ -> mochi_nth(I_5 + 1, Waiting_times) end end))]),
            I_6 = (I_5 + 1),
            Fun_5_loop(Burst_times_2, I_6, Result_2, Waiting_times);
        _ -> {Burst_times_2, I_5, Result, Waiting_times}
    end
end,
{Burst_times_2, I_6, Result_2, Waiting_times} = Fun_5(Burst_times_2, I_5, Result, Waiting_times),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

mean(Values) ->
    try
        Total = 0,
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(I_7, Total, Values) ->
    case (I_7 < erlang:length(Values)) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Values) of true -> maps:get(I_7, Values, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Values) + I_7 + 1, Values); _ -> mochi_nth(I_7 + 1, Values) end end)),
            I_8 = (I_7 + 1),
            Fun_6_loop(I_8, Total_2, Values);
        _ -> {I_7, Total, Values}
    end
end,
{I_8, Total_2, Values} = Fun_6(I_7, Total, Values),
        mochi_safe_div(float(Total_2), float(erlang:length(Values)))
    catch {return, RetCatch} -> RetCatch end.

format_float_5(X) ->
    try
        Scaled = mochi_to_int((mochi_safe_mul(X, 100000.0) + 0.5)),
        Int_part = (Scaled div 100000),
        Frac_part = mochi_mod(Scaled, 100000),
        Frac_str = mochi_str(Frac_part),
        Fun_7 = fun Fun_7_loop(Frac_part, Frac_str, Int_part, Scaled, X) ->
    case (erlang:length(Frac_str) < 5) of
        true ->
            Frac_str_2 = ("0" ++ Frac_str),
            Fun_7_loop(Frac_part, Frac_str_2, Int_part, Scaled, X);
        _ -> {Frac_part, Frac_str, Int_part, Scaled, X}
    end
end,
{Frac_part, Frac_str_2, Int_part, Scaled, X} = Fun_7(Frac_part, Frac_str, Int_part, Scaled, X),
        ((mochi_str(Int_part) ++ ".") ++ Frac_str_2)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Burst_times_3 = [3, 5, 7],
        Waiting_times_2 = calculate_waiting_times(Burst_times_3),
        Turn_around_times = calculate_turn_around_times(Burst_times_3, Waiting_times_2),
        io:format("~ts~n", [mochi_repr("Process ID \tBurst Time \tWaiting Time \tTurnaround Time")]),
        I_9 = 0,
        Fun_8 = fun Fun_8_loop(Burst_times_3, I_9, Turn_around_times, Waiting_times_2) ->
    case (I_9 < erlang:length(Burst_times_3)) of
        true ->
            Line = ((((((("  " ++ mochi_str((I_9 + 1))) ++ "\t\t  ") ++ mochi_str((case erlang:is_map(Burst_times_3) of true -> maps:get(I_9, Burst_times_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Burst_times_3) + I_9 + 1, Burst_times_3); _ -> mochi_nth(I_9 + 1, Burst_times_3) end end))) ++ "\t\t  ") ++ mochi_str((case erlang:is_map(Waiting_times_2) of true -> maps:get(I_9, Waiting_times_2, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Waiting_times_2) + I_9 + 1, Waiting_times_2); _ -> mochi_nth(I_9 + 1, Waiting_times_2) end end))) ++ "\t\t  ") ++ mochi_str((case erlang:is_map(Turn_around_times) of true -> maps:get(I_9, Turn_around_times, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Turn_around_times) + I_9 + 1, Turn_around_times); _ -> mochi_nth(I_9 + 1, Turn_around_times) end end))),
            io:format("~ts~n", [mochi_repr(Line)]),
            I_10 = (I_9 + 1),
            Fun_8_loop(Burst_times_3, I_10, Turn_around_times, Waiting_times_2);
        _ -> {Burst_times_3, I_9, Turn_around_times, Waiting_times_2}
    end
end,
{Burst_times_3, I_10, Turn_around_times, Waiting_times_2} = Fun_8(Burst_times_3, I_9, Turn_around_times, Waiting_times_2),
        io:format("~ts~n", [mochi_repr("")]),
        io:format("~ts~n", [mochi_repr(("Average waiting time = " ++ format_float_5(mean(Waiting_times_2))))]),
        io:format("~ts~n", [mochi_repr(("Average turn around time = " ++ format_float_5(mean(Turn_around_times))))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
