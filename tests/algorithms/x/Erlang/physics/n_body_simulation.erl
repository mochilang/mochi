#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, make_body/5, update_velocity/4, update_position/2, make_body_system/4, sqrtapprox/1, update_system/2, main/0]).

% Generated by Mochi transpiler v0.10.61 (c04b4c8319) on 2025-08-08 17:05 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

make_body(Px, Py, Vx, Vy, Mass) ->
    try
        #{"position_x" => Px, "position_y" => Py, "velocity_x" => Vx, "velocity_y" => Vy, "mass" => Mass}
    catch {return, Ret} -> Ret end.

update_velocity(Body, Force_x, Force_y, Delta_time) ->
    try
        Body_2 = maps:put("velocity_x", (maps:get("velocity_x", Body, nil) + mochi_safe_mul(Force_x, Delta_time)), Body),
        Body_3 = maps:put("velocity_y", (maps:get("velocity_y", Body_2, nil) + mochi_safe_mul(Force_y, Delta_time)), Body_2),
        Body_3
    catch {return, Ret} -> Ret end.

update_position(Body_4, Delta_time_2) ->
    try
        Body_5 = maps:put("position_x", (maps:get("position_x", Body_4, nil) + mochi_safe_mul(maps:get("velocity_x", Body_4, nil), Delta_time_2)), Body_4),
        Body_6 = maps:put("position_y", (maps:get("position_y", Body_5, nil) + mochi_safe_mul(maps:get("velocity_y", Body_5, nil), Delta_time_2)), Body_5),
        Body_6
    catch {return, Ret} -> Ret end.

make_body_system(Bodies, G, Tf, Sf) ->
    try
        #{"bodies" => Bodies, "gravitation_constant" => G, "time_factor" => Tf, "softening_factor" => Sf}
    catch {return, Ret} -> Ret end.

sqrtapprox(X) ->
    try
        Guess = mochi_safe_div(X, 2.0),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, Ret} -> Ret end.

update_system(System, Delta_time_3) ->
    try
        Bodies_2 = maps:get("bodies", System, nil),
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Bodies_2, Delta_time_3, I_3, System) ->
    case (I_3 < erlang:length(Bodies_2)) of
        true ->
            Body1 = (case erlang:is_map(Bodies_2) of true -> maps:get(I_3, Bodies_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Bodies_2) + I_3 + 1, Bodies_2); _ -> mochi_nth(I_3 + 1, Bodies_2) end end),
            Force_x_2 = 0.0,
            Force_y_2 = 0.0,
            J = 0,
            Fun_2 = fun Fun_2_loop(Bodies_2, Body1, Delta_time_3, Force_x_2, Force_y_2, I_3, J, System) ->
    case (J < erlang:length(Bodies_2)) of
        true ->
            case (I_3 /= J) of
        true -> Body2 = (case erlang:is_map(Bodies_2) of true -> maps:get(J, Bodies_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Bodies_2) + J + 1, Bodies_2); _ -> mochi_nth(J + 1, Bodies_2) end end),
            Dif_x = (maps:get("position_x", Body2, nil) - maps:get("position_x", Body1, nil)),
            Dif_y = (maps:get("position_y", Body2, nil) - maps:get("position_y", Body1, nil)),
            Distance_sq = ((mochi_safe_mul(Dif_x, Dif_x) + mochi_safe_mul(Dif_y, Dif_y)) + maps:get("softening_factor", System, nil)),
            Distance = sqrtapprox(Distance_sq),
            Denom = mochi_safe_mul(mochi_safe_mul(Distance, Distance), Distance),
            Force_x_3 = (Force_x_2 + mochi_safe_div(mochi_safe_mul(mochi_safe_mul(maps:get("gravitation_constant", System, nil), maps:get("mass", Body2, nil)), Dif_x), Denom)),
            Force_y_3 = (Force_y_2 + mochi_safe_div(mochi_safe_mul(mochi_safe_mul(maps:get("gravitation_constant", System, nil), maps:get("mass", Body2, nil)), Dif_y), Denom)),
            Body2_2 = Body2,
            Denom_2 = Denom,
            Dif_x_2 = Dif_x,
            Dif_y_2 = Dif_y,
            Distance_2 = Distance,
            Distance_sq_2 = Distance_sq,
            Force_x_4 = Force_x_3,
            Force_y_4 = Force_y_3;
        _ -> Body2_2 = nil,
            Denom_2 = nil,
            Dif_x_2 = nil,
            Dif_y_2 = nil,
            Distance_2 = nil,
            Distance_sq_2 = nil,
            Force_x_4 = Force_x_2,
            Force_y_4 = Force_y_2
    end,
            J_2 = (J + 1),
            Fun_2_loop(Bodies_2, Body1, Delta_time_3, Force_x_4, Force_y_4, I_3, J_2, System);
        _ -> {Bodies_2, Body1, Delta_time_3, Force_x_2, Force_y_2, I_3, J, System}
    end
end,
{Bodies_2, Body1, Delta_time_3, Force_x_4, Force_y_4, I_3, J_2, System} = Fun_2(Bodies_2, Body1, Delta_time_3, Force_x_2, Force_y_2, I_3, J, System),
            Body1_2 = update_velocity(Body1, Force_x_4, Force_y_4, mochi_safe_mul(Delta_time_3, maps:get("time_factor", System, nil))),
            Bodies_3 = lists:sublist(Bodies_2, I_3) ++ [Body1_2] ++ lists:nthtail(I_3 + 1, Bodies_2),
            I_4 = (I_3 + 1),
            Fun_3_loop(Bodies_3, Delta_time_3, I_4, System);
        _ -> {Bodies_2, Delta_time_3, I_3, System}
    end
end,
{Bodies_3, Delta_time_3, I_4, System} = Fun_3(Bodies_2, Delta_time_3, I_3, System),
        I_5 = 0,
        Fun_4 = fun Fun_4_loop(Bodies_3, Delta_time_3, I_5, System) ->
    case (I_5 < erlang:length(Bodies_3)) of
        true ->
            Body_7 = (case erlang:is_map(Bodies_3) of true -> maps:get(I_5, Bodies_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Bodies_3) + I_5 + 1, Bodies_3); _ -> mochi_nth(I_5 + 1, Bodies_3) end end),
            Body_8 = update_position(Body_7, mochi_safe_mul(Delta_time_3, maps:get("time_factor", System, nil))),
            Bodies_4 = lists:sublist(Bodies_3, I_5) ++ [Body_8] ++ lists:nthtail(I_5 + 1, Bodies_3),
            I_6 = (I_5 + 1),
            Fun_4_loop(Bodies_4, Delta_time_3, I_6, System);
        _ -> {Bodies_3, Delta_time_3, I_5, System}
    end
end,
{Bodies_4, Delta_time_3, I_6, System} = Fun_4(Bodies_3, Delta_time_3, I_5, System),
        System_2 = maps:put("bodies", Bodies_4, System),
        System_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        B1 = make_body(0.0, 0.0, 0.0, 0.0, 1.0),
        B2 = make_body(10.0, 0.0, 0.0, 0.0, 1.0),
        Sys1 = make_body_system([B1, B2], 1.0, 1.0, 0.0),
        Sys1_2 = update_system(Sys1, 1.0),
        B1_after = (case erlang:is_map(maps:get("bodies", Sys1_2, nil)) of true -> maps:get(0, maps:get("bodies", Sys1_2, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("bodies", Sys1_2, nil)) + 0 + 1, maps:get("bodies", Sys1_2, nil)); _ -> mochi_nth(0 + 1, maps:get("bodies", Sys1_2, nil)) end end),
        Pos1x = maps:get("position_x", B1_after, nil),
        Pos1y = maps:get("position_y", B1_after, nil),
        io:format("~p~n", [#{"x" => Pos1x, "y" => Pos1y}]),
        Vel1x = maps:get("velocity_x", B1_after, nil),
        Vel1y = maps:get("velocity_y", B1_after, nil),
        io:format("~p~n", [#{"vx" => Vel1x, "vy" => Vel1y}]),
        B3 = make_body(-10.0, 0.0, 0.0, 0.0, 1.0),
        B4 = make_body(10.0, 0.0, 0.0, 0.0, 4.0),
        Sys2 = make_body_system([B3, B4], 1.0, 10.0, 0.0),
        Sys2_2 = update_system(Sys2, 1.0),
        B2_after = (case erlang:is_map(maps:get("bodies", Sys2_2, nil)) of true -> maps:get(0, maps:get("bodies", Sys2_2, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("bodies", Sys2_2, nil)) + 0 + 1, maps:get("bodies", Sys2_2, nil)); _ -> mochi_nth(0 + 1, maps:get("bodies", Sys2_2, nil)) end end),
        Pos2x = maps:get("position_x", B2_after, nil),
        Pos2y = maps:get("position_y", B2_after, nil),
        io:format("~p~n", [#{"x" => Pos2x, "y" => Pos2y}]),
        Vel2x = maps:get("velocity_x", B2_after, nil),
        Vel2y = maps:get("velocity_y", B2_after, nil),
        io:format("~p~n", [#{"vx" => Vel2x, "vy" => Vel2y}]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
