#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrtapprox/1, gravitational_law/4]).

% Generated by Mochi transpiler v0.10.61 (c04b4c8319) on 2025-08-08 17:05 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

sqrtapprox(X) ->
    try
        Guess = mochi_safe_div(X, 2.0),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, Ret} -> Ret end.

gravitational_law(Force, Mass_1, Mass_2, Distance) ->
    try
        Zero_count = 0,
        case (Force == 0.0) of
        true -> Zero_count_2 = (Zero_count + 1),
            Zero_count_3 = Zero_count_2;
        _ -> Zero_count_3 = Zero_count
    end,
        case (Mass_1 == 0.0) of
        true -> Zero_count_4 = (Zero_count_3 + 1),
            Zero_count_5 = Zero_count_4;
        _ -> Zero_count_5 = Zero_count_3
    end,
        case (Mass_2 == 0.0) of
        true -> Zero_count_6 = (Zero_count_5 + 1),
            Zero_count_7 = Zero_count_6;
        _ -> Zero_count_7 = Zero_count_5
    end,
        case (Distance == 0.0) of
        true -> Zero_count_8 = (Zero_count_7 + 1),
            Zero_count_9 = Zero_count_8;
        _ -> Zero_count_9 = Zero_count_7
    end,
        case (Zero_count_9 /= 1) of
        true -> erlang:error({panic, "One and only one argument must be 0"});
        _ -> ok
    end,
        case (Force < 0.0) of
        true -> erlang:error({panic, "Gravitational force can not be negative"});
        _ -> ok
    end,
        case (Distance < 0.0) of
        true -> erlang:error({panic, "Distance can not be negative"});
        _ -> ok
    end,
        case (Mass_1 < 0.0) of
        true -> erlang:error({panic, "Mass can not be negative"});
        _ -> ok
    end,
        case (Mass_2 < 0.0) of
        true -> erlang:error({panic, "Mass can not be negative"});
        _ -> ok
    end,
        Product_of_mass = mochi_safe_mul(Mass_1, Mass_2),
        case (Force == 0.0) of
        true -> F = mochi_safe_div(mochi_safe_mul(0.000000000066743, Product_of_mass), mochi_safe_mul(Distance, Distance)),
            throw({return, #{"kind" => "force", "value" => F}}),
            F_2 = F;
        _ -> F_2 = nil
    end,
        case (Mass_1 == 0.0) of
        true -> M1 = mochi_safe_div(mochi_safe_mul(Force, mochi_safe_mul(Distance, Distance)), mochi_safe_mul(0.000000000066743, Mass_2)),
            throw({return, #{"kind" => "mass_1", "value" => M1}}),
            M1_2 = M1;
        _ -> M1_2 = nil
    end,
        case (Mass_2 == 0.0) of
        true -> M2 = mochi_safe_div(mochi_safe_mul(Force, mochi_safe_mul(Distance, Distance)), mochi_safe_mul(0.000000000066743, Mass_1)),
            throw({return, #{"kind" => "mass_2", "value" => M2}}),
            M2_2 = M2;
        _ -> M2_2 = nil
    end,
        D = sqrtapprox(mochi_safe_div(mochi_safe_mul(0.000000000066743, Product_of_mass), Force)),
        #{"kind" => "distance", "value" => D}
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('GRAVITATIONAL_CONSTANT', 0.000000000066743),
    erlang:put('r1', gravitational_law(0.0, 5.0, 10.0, 20.0)),
    erlang:put('r2', gravitational_law(7367.382, 0.0, 74.0, 3048.0)),
    erlang:put('r3', gravitational_law(100.0, 5.0, 0.0, 3.0)),
    erlang:put('r4', gravitational_law(100.0, 5.0, 10.0, 0.0)),
    io:format("~ts~n", [mochi_repr(((maps:get("kind", erlang:get('r1'), nil) ++ " ") ++ mochi_str(maps:get("value", erlang:get('r1'), nil))))]),
    io:format("~ts~n", [mochi_repr(((maps:get("kind", erlang:get('r2'), nil) ++ " ") ++ mochi_str(maps:get("value", erlang:get('r2'), nil))))]),
    io:format("~ts~n", [mochi_repr(((maps:get("kind", erlang:get('r3'), nil) ++ " ") ++ mochi_str(maps:get("value", erlang:get('r3'), nil))))]),
    io:format("~ts~n", [mochi_repr(((maps:get("kind", erlang:get('r4'), nil) ++ " ") ++ mochi_str(maps:get("value", erlang:get('r4'), nil))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
