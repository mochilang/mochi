#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, pow10/1, floor/1, format_scientific_3/1, orbital_transfer_work/4, test_orbital_transfer_work/0, main/0]).

-compile({no_auto_import,[floor/1]}).
% Generated by Mochi transpiler v0.10.69 (582ddaf78e)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

pow10(N) ->
    try
        P = 1.0,
        P_4 = (case (N >= 0) of
        true -> I = 0,
            Fun = fun Fun_loop(I, N, P) ->
    case (I < N) of
        true ->
            P_2 = mochi_safe_mul(P, 10.0),
            I_2 = (I + 1),
            Fun_loop(I_2, N, P_2);
        _ -> {I, N, P}
    end
end,
{I_2, N, P_2} = Fun(I, N, P),
            Fun_3 = Fun,
            I_5 = I_2,
            P_2;
        _ -> I_3 = 0,
            Fun_2 = fun Fun_2_loop(I_3, N, P) ->
    case (I_3 > N) of
        true ->
            P_3 = mochi_safe_div(P, 10.0),
            I_4 = (I_3 - 1),
            Fun_2_loop(I_4, N, P_3);
        _ -> {I_3, N, P}
    end
end,
{I_4, N, P_3} = Fun_2(I_3, N, P),
            Fun_3 = Fun_2,
            I_5 = I_4,
            P_3
    end),
        P_4
    catch {return, RetCatch} -> RetCatch end.

floor(X) ->
    try
        I_6 = mochi_to_int(X),
        F = float(I_6),
        case (F > X) of
        true -> throw({return, float((I_6 - 1))});
        _ -> ok
    end,
        F
    catch {return, RetCatch} -> RetCatch end.

format_scientific_3(X_2) ->
    try
        case (X_2 == 0.0) of
        true -> throw({return, "0.000e+00"});
        _ -> ok
    end,
        Sign = "",
        Num = X_2,
        Sign_3 = (case (Num < 0.0) of
        true -> Sign_2 = "-",
            Num_2 = -Num,
            Num_3 = Num_2,
            Sign_2;
        _ -> Num_3 = Num,
            Sign
    end),
        Exp = 0,
        Fun_4 = fun Fun_4_loop(Exp, Num_3, Sign_3, X_2) ->
    case (Num_3 >= 10.0) of
        true ->
            Num_4 = mochi_safe_div(Num_3, 10.0),
            Exp_2 = (Exp + 1),
            Fun_4_loop(Exp_2, Num_4, Sign_3, X_2);
        _ -> {Exp, Num_3, Sign_3, X_2}
    end
end,
{Exp_2, Num_4, Sign_3, X_2} = Fun_4(Exp, Num_3, Sign_3, X_2),
        Fun_5 = fun Fun_5_loop(Exp_2, Num_4, Sign_3, X_2) ->
    case (Num_4 < 1.0) of
        true ->
            Num_5 = mochi_safe_mul(Num_4, 10.0),
            Exp_3 = (Exp_2 - 1),
            Fun_5_loop(Exp_3, Num_5, Sign_3, X_2);
        _ -> {Exp_2, Num_4, Sign_3, X_2}
    end
end,
{Exp_3, Num_5, Sign_3, X_2} = Fun_5(Exp_2, Num_4, Sign_3, X_2),
        Temp = math:floor((mochi_safe_mul(Num_5, 1000.0) + 0.5)),
        Scaled = mochi_to_int(Temp),
        Scaled_3 = (case (Scaled == 10000) of
        true -> Scaled_2 = 1000,
            Exp_4 = (Exp_3 + 1),
            Exp_5 = Exp_4,
            Scaled_2;
        _ -> Exp_5 = Exp_3,
            Scaled
    end),
        Int_part = mochi_idiv(Scaled_3, 1000),
        Frac_part = mochi_mod(Scaled_3, 1000),
        Frac_str = mochi_str(Frac_part),
        Fun_6 = fun Fun_6_loop(Exp_5, Frac_part, Frac_str, Int_part, Num_5, Scaled_3, Sign_3, Temp, X_2) ->
    case (erlang:length(Frac_str) < 3) of
        true ->
            Frac_str_2 = ("0" ++ Frac_str),
            Fun_6_loop(Exp_5, Frac_part, Frac_str_2, Int_part, Num_5, Scaled_3, Sign_3, Temp, X_2);
        _ -> {Exp_5, Frac_part, Frac_str, Int_part, Num_5, Scaled_3, Sign_3, Temp, X_2}
    end
end,
{Exp_5, Frac_part, Frac_str_2, Int_part, Num_5, Scaled_3, Sign_3, Temp, X_2} = Fun_6(Exp_5, Frac_part, Frac_str, Int_part, Num_5, Scaled_3, Sign_3, Temp, X_2),
        Mantissa = ((mochi_str(Int_part) ++ ".") ++ Frac_str_2),
        Exp_sign = "+",
        Exp_abs = Exp_5,
        Exp_sign_3 = (case (Exp_5 < 0) of
        true -> Exp_sign_2 = "-",
            Exp_abs_2 = -Exp_5,
            Exp_abs_3 = Exp_abs_2,
            Exp_sign_2;
        _ -> Exp_abs_3 = Exp_abs,
            Exp_sign
    end),
        Exp_str = mochi_str(Exp_abs_3),
        Exp_str_3 = (case (Exp_abs_3 < 10) of
        true -> Exp_str_2 = ("0" ++ Exp_str),
            Exp_str_2;
        _ -> Exp_str
    end),
        ((((Sign_3 ++ Mantissa) ++ "e") ++ Exp_sign_3) ++ Exp_str_3)
    catch {return, RetCatch} -> RetCatch end.

orbital_transfer_work(Mass_central, Mass_object, R_initial, R_final) ->
    try
        G = mochi_safe_mul(6.6743, pow10(-11)),
        case ((R_initial =< 0.0) orelse (R_final =< 0.0)) of
        true -> erlang:error({panic, "Orbital radii must be greater than zero."});
        _ -> ok
    end,
        Work = mochi_safe_mul(mochi_safe_div(mochi_safe_mul(mochi_safe_mul(G, Mass_central), Mass_object), 2.0), (mochi_safe_div(1.0, R_initial) - mochi_safe_div(1.0, R_final))),
        format_scientific_3(Work)
    catch {return, RetCatch} -> RetCatch end.

test_orbital_transfer_work() ->
    try
        case (orbital_transfer_work(mochi_safe_mul(5.972, pow10(24)), 1000.0, mochi_safe_mul(6.371, pow10(6)), mochi_safe_mul(7.0, pow10(6))) /= "2.811e+09") of
        true -> erlang:error({panic, "case1 failed"});
        _ -> ok
    end,
        case (orbital_transfer_work(mochi_safe_mul(5.972, pow10(24)), 500.0, mochi_safe_mul(7.0, pow10(6)), mochi_safe_mul(6.371, pow10(6))) /= "-1.405e+09") of
        true -> erlang:error({panic, "case2 failed"});
        _ -> ok
    end,
        case (orbital_transfer_work(mochi_safe_mul(1.989, pow10(30)), 1000.0, mochi_safe_mul(1.5, pow10(11)), mochi_safe_mul(2.28, pow10(11))) /= "1.514e+11") of
        true -> erlang:error({panic, "case3 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_orbital_transfer_work(),
        io:format("~ts~n", [mochi_repr(orbital_transfer_work(mochi_safe_mul(5.972, pow10(24)), 1000.0, mochi_safe_mul(6.371, pow10(6)), mochi_safe_mul(7.0, pow10(6))))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
