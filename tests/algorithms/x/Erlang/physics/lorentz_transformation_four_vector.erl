#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, sqrtapprox/1, beta/1, gamma/1, transformation_matrix/1, mat_vec_mul/2, transform/2]).

% Generated by Mochi transpiler v0.10.69 (582ddaf78e)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

sqrtapprox(X) ->
    try
        case (X =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = mochi_safe_div(X, 2.0),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

beta(Velocity) ->
    try
        case (Velocity > 299792458.0) of
        true -> erlang:error({panic, "Speed must not exceed light speed 299,792,458 [m/s]!"});
        _ -> ok
    end,
        case (Velocity < 1.0) of
        true -> erlang:error({panic, "Speed must be greater than or equal to 1!"});
        _ -> ok
    end,
        mochi_safe_div(Velocity, 299792458.0)
    catch {return, RetCatch} -> RetCatch end.

gamma(Velocity_2) ->
    try
        B = beta(Velocity_2),
        mochi_safe_div(1.0, sqrtapprox((1.0 - mochi_safe_mul(B, B))))
    catch {return, RetCatch} -> RetCatch end.

transformation_matrix(Velocity_3) ->
    try
        G = gamma(Velocity_3),
        B_2 = beta(Velocity_3),
        [[G, mochi_safe_mul(-G, B_2), 0.0, 0.0], [mochi_safe_mul(-G, B_2), G, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, 1.0]]
    catch {return, RetCatch} -> RetCatch end.

mat_vec_mul(Mat, Vec) ->
    try
        Res = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Mat, Res, Vec) ->
    case (I_3 < 4) of
        true ->
            Row = (case erlang:is_map(Mat) of true -> maps:get(I_3, Mat, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Mat) + I_3 + 1, Mat); _ -> mochi_nth(I_3 + 1, Mat) end end),
            Value = (((mochi_safe_mul((case erlang:is_map(Row) of true -> maps:get(0, Row, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Row) + 0 + 1, Row); _ -> mochi_nth(0 + 1, Row) end end), (case erlang:is_map(Vec) of true -> maps:get(0, Vec, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Vec) + 0 + 1, Vec); _ -> mochi_nth(0 + 1, Vec) end end)) + mochi_safe_mul((case erlang:is_map(Row) of true -> maps:get(1, Row, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Row) + 1 + 1, Row); _ -> mochi_nth(1 + 1, Row) end end), (case erlang:is_map(Vec) of true -> maps:get(1, Vec, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Vec) + 1 + 1, Vec); _ -> mochi_nth(1 + 1, Vec) end end))) + mochi_safe_mul((case erlang:is_map(Row) of true -> maps:get(2, Row, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Row) + 2 + 1, Row); _ -> mochi_nth(2 + 1, Row) end end), (case erlang:is_map(Vec) of true -> maps:get(2, Vec, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Vec) + 2 + 1, Vec); _ -> mochi_nth(2 + 1, Vec) end end))) + mochi_safe_mul((case erlang:is_map(Row) of true -> maps:get(3, Row, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(Row) + 3 + 1, Row); _ -> mochi_nth(3 + 1, Row) end end), (case erlang:is_map(Vec) of true -> maps:get(3, Vec, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(Vec) + 3 + 1, Vec); _ -> mochi_nth(3 + 1, Vec) end end))),
            Res_2 = (Res ++ [Value]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Mat, Res_2, Vec);
        _ -> {I_3, Mat, Res, Vec}
    end
end,
{I_4, Mat, Res_2, Vec} = Fun_2(I_3, Mat, Res, Vec),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

transform(Velocity_4, Event) ->
    try
        G_2 = gamma(Velocity_4),
        B_3 = beta(Velocity_4),
        Ct = mochi_safe_mul((case erlang:is_map(Event) of true -> maps:get(0, Event, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Event) + 0 + 1, Event); _ -> mochi_nth(0 + 1, Event) end end), 299792458.0),
        X_2 = (case erlang:is_map(Event) of true -> maps:get(1, Event, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Event) + 1 + 1, Event); _ -> mochi_nth(1 + 1, Event) end end),
        [(mochi_safe_mul(G_2, Ct) - mochi_safe_mul(mochi_safe_mul(G_2, B_3), X_2)), (mochi_safe_mul(mochi_safe_mul(-G_2, B_3), Ct) + mochi_safe_mul(G_2, X_2)), (case erlang:is_map(Event) of true -> maps:get(2, Event, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Event) + 2 + 1, Event); _ -> mochi_nth(2 + 1, Event) end end), (case erlang:is_map(Event) of true -> maps:get(3, Event, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(Event) + 3 + 1, Event); _ -> mochi_nth(3 + 1, Event) end end)]
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('c', 299792458.0),
    io:format("~ts~n", [mochi_str(beta(299792458.0))]),
    io:format("~ts~n", [mochi_str(beta(199792458.0))]),
    io:format("~ts~n", [mochi_str(beta(100000.0))]),
    io:format("~ts~n", [mochi_str(gamma(4.0))]),
    io:format("~ts~n", [mochi_str(gamma(100000.0))]),
    io:format("~ts~n", [mochi_str(gamma(30000000.0))]),
    io:format("~ts~n", [mochi_str(transformation_matrix(29979245.0))]),
    erlang:put('v', transform(29979245.0, [1.0, 2.0, 3.0, 4.0])),
    io:format("~ts~n", [mochi_str(erlang:get('v'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
