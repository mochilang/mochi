#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, exp_approx/1, ln_series/1, ln/1, powf/2, rainfall_intensity/6]).

% Generated by Mochi transpiler v0.10.61 (c04b4c8319) on 2025-08-08 17:05 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

exp_approx(X) ->
    try
        Y = X,
        Is_neg = false,
        case (X < 0.0) of
        true -> Is_neg_2 = true,
            Y_2 = -X,
            Is_neg_3 = Is_neg_2,
            Y_3 = Y_2;
        _ -> Is_neg_3 = Is_neg,
            Y_3 = Y
    end,
        Term = 1.0,
        Sum = 1.0,
        N = 1,
        Fun = fun Fun_loop(Is_neg_3, N, Sum, Term, X, Y_3) ->
    case (N < 30) of
        true ->
            Term_2 = mochi_safe_div(mochi_safe_mul(Term, Y_3), float(N)),
            Sum_2 = (Sum + Term_2),
            N_2 = (N + 1),
            Fun_loop(Is_neg_3, N_2, Sum_2, Term_2, X, Y_3);
        _ -> {Is_neg_3, N, Sum, Term, X, Y_3}
    end
end,
{Is_neg_3, N_2, Sum_2, Term_2, X, Y_3} = Fun(Is_neg_3, N, Sum, Term, X, Y_3),
        case Is_neg_3 of
        true -> throw({return, mochi_safe_div(1.0, Sum_2)});
        _ -> ok
    end,
        Sum_2
    catch {return, Ret} -> Ret end.

ln_series(X_2) ->
    try
        T = mochi_safe_div((X_2 - 1.0), (X_2 + 1.0)),
        Term_3 = T,
        Sum_3 = 0.0,
        N_3 = 1,
        Fun_2 = fun Fun_2_loop(N_3, Sum_3, T, Term_3, X_2) ->
    case (N_3 =< 19) of
        true ->
            Sum_4 = (Sum_3 + mochi_safe_div(Term_3, float(N_3))),
            Term_4 = mochi_safe_mul(mochi_safe_mul(Term_3, T), T),
            N_4 = (N_3 + 2),
            Fun_2_loop(N_4, Sum_4, T, Term_4, X_2);
        _ -> {N_3, Sum_3, T, Term_3, X_2}
    end
end,
{N_4, Sum_4, T, Term_4, X_2} = Fun_2(N_3, Sum_3, T, Term_3, X_2),
        mochi_safe_mul(2.0, Sum_4)
    catch {return, Ret} -> Ret end.

ln(X_3) ->
    try
        Y_4 = X_3,
        K = 0,
        Fun_3 = fun Fun_3_loop(K, X_3, Y_4) ->
    case (Y_4 >= 10.0) of
        true ->
            Y_5 = mochi_safe_div(Y_4, 10.0),
            K_2 = (K + 1),
            Fun_3_loop(K_2, X_3, Y_5);
        _ -> {K, X_3, Y_4}
    end
end,
{K_2, X_3, Y_5} = Fun_3(K, X_3, Y_4),
        Fun_4 = fun Fun_4_loop(K_2, X_3, Y_5) ->
    case (Y_5 < 1.0) of
        true ->
            Y_6 = mochi_safe_mul(Y_5, 10.0),
            K_3 = (K_2 - 1),
            Fun_4_loop(K_3, X_3, Y_6);
        _ -> {K_2, X_3, Y_5}
    end
end,
{K_3, X_3, Y_6} = Fun_4(K_2, X_3, Y_5),
        (ln_series(Y_6) + mochi_safe_mul(float(K_3), ln_series(10.0)))
    catch {return, Ret} -> Ret end.

powf(Base, Exponent) ->
    try
        exp_approx(mochi_safe_mul(Exponent, ln(Base)))
    catch {return, Ret} -> Ret end.

rainfall_intensity(Coefficient_k, Coefficient_a, Coefficient_b, Coefficient_c, Return_period, Duration) ->
    try
        case (Coefficient_k =< 0.0) of
        true -> erlang:error({panic, "All parameters must be positive."});
        _ -> ok
    end,
        case (Coefficient_a =< 0.0) of
        true -> erlang:error({panic, "All parameters must be positive."});
        _ -> ok
    end,
        case (Coefficient_b =< 0.0) of
        true -> erlang:error({panic, "All parameters must be positive."});
        _ -> ok
    end,
        case (Coefficient_c =< 0.0) of
        true -> erlang:error({panic, "All parameters must be positive."});
        _ -> ok
    end,
        case (Return_period =< 0.0) of
        true -> erlang:error({panic, "All parameters must be positive."});
        _ -> ok
    end,
        case (Duration =< 0.0) of
        true -> erlang:error({panic, "All parameters must be positive."});
        _ -> ok
    end,
        Numerator = mochi_safe_mul(Coefficient_k, powf(Return_period, Coefficient_a)),
        Denominator = powf((Duration + Coefficient_b), Coefficient_c),
        mochi_safe_div(Numerator, Denominator)
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('r1', rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 60.0)),
    io:format("~ts~n", [mochi_str(erlang:get('r1'))]),
    erlang:put('r2', rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 10.0, 30.0)),
    io:format("~ts~n", [mochi_str(erlang:get('r2'))]),
    erlang:put('r3', rainfall_intensity(1000.0, 0.2, 11.6, 0.81, 5.0, 60.0)),
    io:format("~ts~n", [mochi_str(erlang:get('r3'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
