#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, format2/1, coulombs_law/3]).

% Generated by Mochi transpiler v0.10.68 (fb57228729)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> A1 - B1 * mochi_idiv(A1, B1)
    end.

format2(X) ->
    try
        Sign = (case (X < 0.0) of
    true -> "-";
    _ -> ""
end),
        Y = (case (X < 0.0) of
    true -> -X;
    _ -> X
end),
        M = 100.0,
        Scaled = mochi_safe_mul(Y, 100.0),
        I = mochi_to_int(Scaled),
        I_3 = (case ((Scaled - float(I)) >= 0.5) of
        true -> I_2 = (I + 1),
            I_2;
        _ -> I
    end),
        Int_part = mochi_idiv(I_3, 100),
        Frac_part = mochi_mod(I_3, 100),
        Frac_str = mochi_str(Frac_part),
        Frac_str_3 = (case (Frac_part < 10) of
        true -> Frac_str_2 = ("0" ++ Frac_str),
            Frac_str_2;
        _ -> Frac_str
    end),
        (((Sign ++ mochi_str(Int_part)) ++ ".") ++ Frac_str_3)
    catch {return, RetCatch} -> RetCatch end.

coulombs_law(Q1, Q2, Radius) ->
    try
        case (Radius =< 0.0) of
        true -> erlang:error({panic, "radius must be positive"});
        _ -> ok
    end,
        Force = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(8987551792.3, Q1), Q2), mochi_safe_mul(Radius, Radius)),
        Force
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('K', 8987551792.3),
    io:format("~ts~n", [mochi_repr(format2(coulombs_law(15.5, 20.0, 15.0)))]),
    io:format("~ts~n", [mochi_repr(format2(coulombs_law(1.0, 15.0, 5.0)))]),
    io:format("~ts~n", [mochi_repr(format2(coulombs_law(20.0, -50.0, 15.0)))]),
    io:format("~ts~n", [mochi_repr(format2(coulombs_law(-5.0, -8.0, 10.0)))]),
    io:format("~ts~n", [mochi_repr(format2(coulombs_law(50.0, 100.0, 50.0)))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
