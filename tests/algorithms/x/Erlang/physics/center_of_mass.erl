#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, round2/1, center_of_mass/1, coord_to_string/1]).

% Generated by Mochi transpiler v0.10.61 (c45765bf43) on 2025-08-08 15:36 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

round2(X) ->
    try
        Scaled = mochi_safe_mul(X, 100.0),
        Rounded = float(mochi_to_int((Scaled + 0.5))),
        mochi_safe_div(Rounded, 100.0)
    catch {return, Ret} -> Ret end.

center_of_mass(Ps) ->
    try
        case (erlang:length(Ps) == 0) of
        true -> erlang:error("No particles provided");
        _ -> ok
    end,
        I = 0,
        Total_mass = 0.0,
        Fun = fun Fun_loop(I, Ps, Total_mass) ->
    case (I < erlang:length(Ps)) of
        true ->
            P = (case erlang:is_map(Ps) of true -> maps:get(I, Ps, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Ps) + I + 1, Ps); _ -> mochi_nth(I + 1, Ps) end end),
            case (maps:get("mass", P, nil) =< 0.0) of
        true -> erlang:error("Mass of all particles must be greater than 0");
        _ -> ok
    end,
            Total_mass_2 = (Total_mass + maps:get("mass", P, nil)),
            I_2 = (I + 1),
            Fun_loop(I_2, Ps, Total_mass_2);
        _ -> {I, Ps, Total_mass}
    end
end,
{I_2, Ps, Total_mass_2} = Fun(I, Ps, Total_mass),
        Sum_x = 0.0,
        Sum_y = 0.0,
        Sum_z = 0.0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Ps, Sum_x, Sum_y, Sum_z, Total_mass_2) ->
    case (I_3 < erlang:length(Ps)) of
        true ->
            P_2 = (case erlang:is_map(Ps) of true -> maps:get(I_3, Ps, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Ps) + I_3 + 1, Ps); _ -> mochi_nth(I_3 + 1, Ps) end end),
            Sum_x_2 = (Sum_x + mochi_safe_mul(maps:get("x", P_2, nil), maps:get("mass", P_2, nil))),
            Sum_y_2 = (Sum_y + mochi_safe_mul(maps:get("y", P_2, nil), maps:get("mass", P_2, nil))),
            Sum_z_2 = (Sum_z + mochi_safe_mul(maps:get("z", P_2, nil), maps:get("mass", P_2, nil))),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Ps, Sum_x_2, Sum_y_2, Sum_z_2, Total_mass_2);
        _ -> {I_3, Ps, Sum_x, Sum_y, Sum_z, Total_mass_2}
    end
end,
{I_4, Ps, Sum_x_2, Sum_y_2, Sum_z_2, Total_mass_2} = Fun_2(I_3, Ps, Sum_x, Sum_y, Sum_z, Total_mass_2),
        Cm_x = round2(mochi_safe_div(Sum_x_2, Total_mass_2)),
        Cm_y = round2(mochi_safe_div(Sum_y_2, Total_mass_2)),
        Cm_z = round2(mochi_safe_div(Sum_z_2, Total_mass_2)),
        #{"x" => Cm_x, "y" => Cm_y, "z" => Cm_z}
    catch {return, Ret} -> Ret end.

coord_to_string(C) ->
    try
        (((((("Coord3D(x=" ++ mochi_str(maps:get("x", C, nil))) ++ ", y=") ++ mochi_str(maps:get("y", C, nil))) ++ ", z=") ++ mochi_str(maps:get("z", C, nil))) ++ ")")
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('r1', center_of_mass([#{"x" => 1.5, "y" => 4.0, "z" => 3.4, "mass" => 4.0}, #{"x" => 5.0, "y" => 6.8, "z" => 7.0, "mass" => 8.1}, #{"x" => 9.4, "y" => 10.1, "z" => 11.6, "mass" => 12.0}])),
    io:format("~ts~n", [mochi_repr(coord_to_string(erlang:get('r1')))]),
    erlang:put('r2', center_of_mass([#{"x" => 1.0, "y" => 2.0, "z" => 3.0, "mass" => 4.0}, #{"x" => 5.0, "y" => 6.0, "z" => 7.0, "mass" => 8.0}, #{"x" => 9.0, "y" => 10.0, "z" => 11.0, "mass" => 12.0}])),
    io:format("~ts~n", [mochi_repr(coord_to_string(erlang:get('r2')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
