#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, sqrt/1, avg_speed_of_molecule/2, mps_speed_of_molecule/2]).

% Generated by Mochi transpiler v0.10.68 (fb57228729)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

sqrt(X) ->
    try
        case (X =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

avg_speed_of_molecule(Temperature, Molar_mass) ->
    try
        case (Temperature < 0.0) of
        true -> erlang:error({panic, "Absolute temperature cannot be less than 0 K"});
        _ -> ok
    end,
        case (Molar_mass =< 0.0) of
        true -> erlang:error({panic, "Molar mass should be greater than 0 kg/mol"});
        _ -> ok
    end,
        Expr = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(8.0, 8.31446261815324), Temperature), mochi_safe_mul(3.141592653589793, Molar_mass)),
        S = sqrt(Expr),
        S
    catch {return, RetCatch} -> RetCatch end.

mps_speed_of_molecule(Temperature_2, Molar_mass_2) ->
    try
        case (Temperature_2 < 0.0) of
        true -> erlang:error({panic, "Absolute temperature cannot be less than 0 K"});
        _ -> ok
    end,
        case (Molar_mass_2 =< 0.0) of
        true -> erlang:error({panic, "Molar mass should be greater than 0 kg/mol"});
        _ -> ok
    end,
        Expr_2 = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(2.0, 8.31446261815324), Temperature_2), Molar_mass_2),
        S_2 = sqrt(Expr_2),
        S_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('R', 8.31446261815324),
    io:format("~ts~n", [mochi_str(avg_speed_of_molecule(273.0, 0.028))]),
    io:format("~ts~n", [mochi_str(avg_speed_of_molecule(300.0, 0.032))]),
    io:format("~ts~n", [mochi_str(mps_speed_of_molecule(273.0, 0.028))]),
    io:format("~ts~n", [mochi_str(mps_speed_of_molecule(300.0, 0.032))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
