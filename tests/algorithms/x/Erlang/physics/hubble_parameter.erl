#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow/2, sqrt_approx/1, hubble_parameter/5, test_hubble_parameter/0, main/0]).

% Generated by Mochi transpiler v0.10.61 (3e269b61d6) on 2025-08-08 16:30 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

pow(Base, Exp) ->
    try
        Result = 1.0,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = mochi_safe_mul(Result, Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

sqrt_approx(X) ->
    try
        case (X == 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = mochi_safe_div(X, 2.0),
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Guess, I_3, X) ->
    case (I_3 < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_4 = (I_3 + 1),
            Fun_2_loop(Guess_2, I_4, X);
        _ -> {Guess, I_3, X}
    end
end,
{Guess_2, I_4, X} = Fun_2(Guess, I_3, X),
        Guess_2
    catch {return, Ret} -> Ret end.

hubble_parameter(Hubble_constant, Radiation_density, Matter_density, Dark_energy, Redshift) ->
    try
        Parameters = [Redshift, Radiation_density, Matter_density, Dark_energy],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Dark_energy, Hubble_constant, I_5, Matter_density, Parameters, Radiation_density, Redshift) ->
    case (I_5 < erlang:length(Parameters)) of
        true ->
            case ((case erlang:is_map(Parameters) of true -> maps:get(I_5, Parameters, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Parameters) + I_5 + 1, Parameters); _ -> mochi_nth(I_5 + 1, Parameters) end end) < 0.0) of
        true -> erlang:error({panic, "All input parameters must be positive"});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Dark_energy, Hubble_constant, I_6, Matter_density, Parameters, Radiation_density, Redshift);
        _ -> {Dark_energy, Hubble_constant, I_5, Matter_density, Parameters, Radiation_density, Redshift}
    end
end,
{Dark_energy, Hubble_constant, I_6, Matter_density, Parameters, Radiation_density, Redshift} = Fun_3(Dark_energy, Hubble_constant, I_5, Matter_density, Parameters, Radiation_density, Redshift),
        I_7 = 1,
        Fun_4 = fun Fun_4_loop(Dark_energy, Hubble_constant, I_7, Matter_density, Parameters, Radiation_density, Redshift) ->
    case (I_7 < 4) of
        true ->
            case ((case erlang:is_map(Parameters) of true -> maps:get(I_7, Parameters, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Parameters) + I_7 + 1, Parameters); _ -> mochi_nth(I_7 + 1, Parameters) end end) > 1.0) of
        true -> erlang:error({panic, "Relative densities cannot be greater than one"});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(Dark_energy, Hubble_constant, I_8, Matter_density, Parameters, Radiation_density, Redshift);
        _ -> {Dark_energy, Hubble_constant, I_7, Matter_density, Parameters, Radiation_density, Redshift}
    end
end,
{Dark_energy, Hubble_constant, I_8, Matter_density, Parameters, Radiation_density, Redshift} = Fun_4(Dark_energy, Hubble_constant, I_7, Matter_density, Parameters, Radiation_density, Redshift),
        Curvature = (1.0 - ((Matter_density + Radiation_density) + Dark_energy)),
        Zp1 = (Redshift + 1.0),
        E2 = (((mochi_safe_mul(Radiation_density, math:pow(Zp1, 4)) + mochi_safe_mul(Matter_density, math:pow(Zp1, 3))) + mochi_safe_mul(Curvature, math:pow(Zp1, 2))) + Dark_energy),
        mochi_safe_mul(Hubble_constant, sqrt_approx(E2))
    catch {return, Ret} -> Ret end.

test_hubble_parameter() ->
    try
        H = hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0),
        case ((H < 68.2999) orelse (H > 68.3001)) of
        true -> erlang:error({panic, "hubble_parameter test failed"});
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_hubble_parameter(),
        io:format("~ts~n", [mochi_repr(hubble_parameter(68.3, 0.0001, 0.3, 0.7, 0.0))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
