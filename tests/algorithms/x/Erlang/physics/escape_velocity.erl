#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, pow10/1, sqrt_newton/1, round3/1, escape_velocity/2]).

% Generated by Mochi transpiler v0.10.64 (480fdd1e6c) on 2025-08-12 14:08 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

pow10(N) ->
    try
        P = 1.0,
        K = 0,
        case (N >= 0) of
        true -> Fun = fun Fun_loop(K, N, P) ->
    case (K < N) of
        true ->
            P_2 = mochi_safe_mul(P, 10.0),
            K_2 = (K + 1),
            Fun_loop(K_2, N, P_2);
        _ -> {K, N, P}
    end
end,
{K_2, N, P_2} = Fun(K, N, P),
            Fun_3 = Fun,
            K_4 = K_2,
            M_2 = nil,
            P_4 = P_2;
        _ -> M = -N,
            Fun_2 = fun Fun_2_loop(K, M, N, P) ->
    case (K < M) of
        true ->
            P_3 = mochi_safe_div(P, 10.0),
            K_3 = (K + 1),
            Fun_2_loop(K_3, M, N, P_3);
        _ -> {K, M, N, P}
    end
end,
{K_3, M, N, P_3} = Fun_2(K, M, N, P),
            Fun_3 = Fun_2,
            K_4 = K_3,
            M_2 = M,
            P_4 = P_3
    end,
        P_4
    catch {return, RetCatch} -> RetCatch end.

sqrt_newton(N_2) ->
    try
        case (N_2 == 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        X = N_2,
        J = 0,
        Fun_4 = fun Fun_4_loop(J, N_2, X) ->
    case (J < 20) of
        true ->
            X_2 = mochi_safe_div((X + mochi_safe_div(N_2, X)), 2.0),
            J_2 = (J + 1),
            Fun_4_loop(J_2, N_2, X_2);
        _ -> {J, N_2, X}
    end
end,
{J_2, N_2, X_2} = Fun_4(J, N_2, X),
        X_2
    catch {return, RetCatch} -> RetCatch end.

round3(X_3) ->
    try
        Y = (mochi_safe_mul(X_3, 1000.0) + 0.5),
        Yi = mochi_to_int(Y),
        case (float(Yi) > Y) of
        true -> Yi_2 = (Yi - 1),
            Yi_3 = Yi_2;
        _ -> Yi_3 = Yi
    end,
        mochi_safe_div(float(Yi_3), 1000.0)
    catch {return, RetCatch} -> RetCatch end.

escape_velocity(Mass, Radius) ->
    try
        case (Radius == 0.0) of
        true -> erlang:error({panic, "Radius cannot be zero."});
        _ -> ok
    end,
        G = mochi_safe_mul(6.6743, pow10(-11)),
        Velocity = sqrt_newton(mochi_safe_div(mochi_safe_mul(mochi_safe_mul(2.0, G), Mass), Radius)),
        round3(Velocity)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(escape_velocity(mochi_safe_mul(5.972, pow10(24)), mochi_safe_mul(6.371, pow10(6))))]),
    io:format("~ts~n", [mochi_repr(escape_velocity(mochi_safe_mul(7.348, pow10(22)), mochi_safe_mul(1.737, pow10(6))))]),
    io:format("~ts~n", [mochi_repr(escape_velocity(mochi_safe_mul(1.898, pow10(27)), mochi_safe_mul(6.9911, pow10(7))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
