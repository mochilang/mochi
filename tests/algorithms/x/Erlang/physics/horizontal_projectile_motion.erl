#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, mod/2, sin/1, deg_to_rad/1, floor/1, pow10/1, round/2, check_args/2, horizontal_distance/2, max_height/2, total_time/2]).

-compile({no_auto_import,[floor/1]}).
% Generated by Mochi transpiler v0.10.68 (fb57228729)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

mod(X, M) ->
    try
        (X - mochi_safe_mul(float(mochi_to_int(mochi_safe_div(X, M))), M))
    catch {return, RetCatch} -> RetCatch end.

sin(X_2) ->
    try
        Y = (mod((X_2 + 3.141592653589793), 6.283185307179586) - 3.141592653589793),
        Y2 = mochi_safe_mul(Y, Y),
        Y3 = mochi_safe_mul(Y2, Y),
        Y5 = mochi_safe_mul(Y3, Y2),
        Y7 = mochi_safe_mul(Y5, Y2),
        (((Y - mochi_safe_div(Y3, 6.0)) + mochi_safe_div(Y5, 120.0)) - mochi_safe_div(Y7, 5040.0))
    catch {return, RetCatch} -> RetCatch end.

deg_to_rad(Deg) ->
    try
        mochi_safe_div(mochi_safe_mul(Deg, 3.141592653589793), 180.0)
    catch {return, RetCatch} -> RetCatch end.

floor(X_3) ->
    try
        I = mochi_to_int(X_3),
        I_3 = (case (float(I) > X_3) of
        true -> I_2 = (I - 1),
            I_2;
        _ -> I
    end),
        float(I_3)
    catch {return, RetCatch} -> RetCatch end.

pow10(N) ->
    try
        Result = 1.0,
        I_4 = 0,
        Fun = fun Fun_loop(I_4, N, Result) ->
    case (I_4 < N) of
        true ->
            Result_2 = mochi_safe_mul(Result, 10.0),
            I_5 = (I_4 + 1),
            Fun_loop(I_5, N, Result_2);
        _ -> {I_4, N, Result}
    end
end,
{I_5, N, Result_2} = Fun(I_4, N, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

round(X_4, N_2) ->
    try
        M_2 = pow10(N_2),
        Y_2 = math:floor((mochi_safe_mul(X_4, M_2) + 0.5)),
        mochi_safe_div(Y_2, M_2)
    catch {return, RetCatch} -> RetCatch end.

check_args(Init_velocity, Angle) ->
    try
        case ((Angle > 90.0) orelse (Angle < 1.0)) of
        true -> erlang:error({panic, "Invalid angle. Range is 1-90 degrees."});
        _ -> ok
    end,
        case (Init_velocity < 0.0) of
        true -> erlang:error({panic, "Invalid velocity. Should be a positive number."});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

horizontal_distance(Init_velocity_2, Angle_2) ->
    try
        check_args(Init_velocity_2, Angle_2),
        Radians = deg_to_rad(mochi_safe_mul(2.0, Angle_2)),
        round(mochi_safe_div(mochi_safe_mul(mochi_safe_mul(Init_velocity_2, Init_velocity_2), sin(Radians)), 9.80665), 2)
    catch {return, RetCatch} -> RetCatch end.

max_height(Init_velocity_3, Angle_3) ->
    try
        check_args(Init_velocity_3, Angle_3),
        Radians_2 = deg_to_rad(Angle_3),
        S = sin(Radians_2),
        round(mochi_safe_div(mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(Init_velocity_3, Init_velocity_3), S), S), mochi_safe_mul(2.0, 9.80665)), 2)
    catch {return, RetCatch} -> RetCatch end.

total_time(Init_velocity_4, Angle_4) ->
    try
        check_args(Init_velocity_4, Angle_4),
        Radians_3 = deg_to_rad(Angle_4),
        round(mochi_safe_div(mochi_safe_mul(mochi_safe_mul(2.0, Init_velocity_4), sin(Radians_3)), 9.80665), 2)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('TWO_PI', 6.283185307179586),
    erlang:put('g', 9.80665),
    erlang:put('v0', 25.0),
    erlang:put('angle', 20.0),
    io:format("~ts~n", [mochi_repr(horizontal_distance(25.0, 20.0))]),
    io:format("~ts~n", [mochi_repr(max_height(25.0, 20.0))]),
    io:format("~ts~n", [mochi_repr(total_time(25.0, 20.0))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
