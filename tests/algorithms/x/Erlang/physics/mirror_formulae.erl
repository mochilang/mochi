#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, abs_float/1, isclose/3, focal_length/2, object_distance/2, image_distance/2, test_focal_length/0, test_object_distance/0, test_image_distance/0, main/0]).

% Generated by Mochi transpiler v0.10.69 (582ddaf78e)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

abs_float(X) ->
    try
        (case (X < 0.0) of
    true -> -X;
    _ -> X
end)
    catch {return, RetCatch} -> RetCatch end.

isclose(A, B, Tolerance) ->
    try
        (abs_float((A - B)) < Tolerance)
    catch {return, RetCatch} -> RetCatch end.

focal_length(Distance_of_object, Distance_of_image) ->
    try
        case ((Distance_of_object == 0.0) orelse (Distance_of_image == 0.0)) of
        true -> erlang:error({panic, "Invalid inputs. Enter non zero values with respect to the sign convention."});
        _ -> ok
    end,
        mochi_safe_div(1.0, (mochi_safe_div(1.0, Distance_of_object) + mochi_safe_div(1.0, Distance_of_image)))
    catch {return, RetCatch} -> RetCatch end.

object_distance(Focal_length, Distance_of_image_2) ->
    try
        case ((Distance_of_image_2 == 0.0) orelse (Focal_length == 0.0)) of
        true -> erlang:error({panic, "Invalid inputs. Enter non zero values with respect to the sign convention."});
        _ -> ok
    end,
        mochi_safe_div(1.0, (mochi_safe_div(1.0, Focal_length) - mochi_safe_div(1.0, Distance_of_image_2)))
    catch {return, RetCatch} -> RetCatch end.

image_distance(Focal_length_2, Distance_of_object_2) ->
    try
        case ((Distance_of_object_2 == 0.0) orelse (Focal_length_2 == 0.0)) of
        true -> erlang:error({panic, "Invalid inputs. Enter non zero values with respect to the sign convention."});
        _ -> ok
    end,
        mochi_safe_div(1.0, (mochi_safe_div(1.0, Focal_length_2) - mochi_safe_div(1.0, Distance_of_object_2)))
    catch {return, RetCatch} -> RetCatch end.

test_focal_length() ->
    try
        F1 = focal_length(10.0, 20.0),
        case mochi_not(isclose(F1, 6.66666666666666, 0.00000001)) of
        true -> erlang:error({panic, "focal_length test1 failed"});
        _ -> ok
    end,
        F2 = focal_length(9.5, 6.7),
        case mochi_not(isclose(F2, 3.929012346, 0.00000001)) of
        true -> erlang:error({panic, "focal_length test2 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

test_object_distance() ->
    try
        U1 = object_distance(30.0, 20.0),
        case mochi_not(isclose(U1, -60.0, 0.00000001)) of
        true -> erlang:error({panic, "object_distance test1 failed"});
        _ -> ok
    end,
        U2 = object_distance(10.5, 11.7),
        case mochi_not(isclose(U2, 102.375, 0.00000001)) of
        true -> erlang:error({panic, "object_distance test2 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

test_image_distance() ->
    try
        V1 = image_distance(10.0, 40.0),
        case mochi_not(isclose(V1, 13.33333333, 0.00000001)) of
        true -> erlang:error({panic, "image_distance test1 failed"});
        _ -> ok
    end,
        V2 = image_distance(1.5, 6.7),
        case mochi_not(isclose(V2, 1.932692308, 0.00000001)) of
        true -> erlang:error({panic, "image_distance test2 failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_focal_length(),
        test_object_distance(),
        test_image_distance(),
        io:format("~ts~n", [mochi_str(focal_length(10.0, 20.0))]),
        io:format("~ts~n", [mochi_str(object_distance(30.0, 20.0))]),
        io:format("~ts~n", [mochi_str(image_distance(10.0, 40.0))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
