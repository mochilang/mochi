#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, mod/2, sin_approx/1, cos_approx/1, polar_force/3, abs_float/1, in_static_equilibrium/3]).

% Generated by Mochi transpiler v0.10.64 (480fdd1e6c) on 2025-08-12 14:08 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


-compile({nowarn_unused_function, [mochi_safe_mul/2, mochi_safe_div/2]}).
mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

mod(X, M) ->
    try
        (X - mochi_safe_mul(float(mochi_to_int(mochi_safe_div(X, M))), M))
    catch {return, RetCatch} -> RetCatch end.

sin_approx(X_2) ->
    try
        Y = (mod((X_2 + 3.141592653589793), 6.283185307179586) - 3.141592653589793),
        Y2 = mochi_safe_mul(Y, Y),
        Y3 = mochi_safe_mul(Y2, Y),
        Y5 = mochi_safe_mul(Y3, Y2),
        Y7 = mochi_safe_mul(Y5, Y2),
        (((Y - mochi_safe_div(Y3, 6.0)) + mochi_safe_div(Y5, 120.0)) - mochi_safe_div(Y7, 5040.0))
    catch {return, RetCatch} -> RetCatch end.

cos_approx(X_3) ->
    try
        Y_2 = (mod((X_3 + 3.141592653589793), 6.283185307179586) - 3.141592653589793),
        Y2_2 = mochi_safe_mul(Y_2, Y_2),
        Y4 = mochi_safe_mul(Y2_2, Y2_2),
        Y6 = mochi_safe_mul(Y4, Y2_2),
        (((1.0 - mochi_safe_div(Y2_2, 2.0)) + mochi_safe_div(Y4, 24.0)) - mochi_safe_div(Y6, 720.0))
    catch {return, RetCatch} -> RetCatch end.

polar_force(Magnitude, Angle, Radian_mode) ->
    try
        Theta = (case Radian_mode of
    true -> Angle;
    _ -> mochi_safe_div(mochi_safe_mul(Angle, 3.141592653589793), 180.0)
end),
        [mochi_safe_mul(Magnitude, cos_approx(Theta)), mochi_safe_mul(Magnitude, sin_approx(Theta))]
    catch {return, RetCatch} -> RetCatch end.

abs_float(X_4) ->
    try
        case (X_4 < 0.0) of
        true -> throw({return, -X_4});
        _ -> throw({return, X_4})
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

in_static_equilibrium(Forces, Location, Eps) ->
    try
        Sum_moments = 0.0,
        I = 0,
        N = erlang:length(Forces),
        Fun = fun Fun_loop(Eps, Forces, I, Location, N, Sum_moments) ->
    case (I < N) of
        true ->
            R = (case erlang:is_map(Location) of true -> maps:get(I, Location, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Location) + I + 1, Location); _ -> mochi_nth(I + 1, Location) end end),
            F = (case erlang:is_map(Forces) of true -> maps:get(I, Forces, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Forces) + I + 1, Forces); _ -> mochi_nth(I + 1, Forces) end end),
            Moment = (mochi_safe_mul((case erlang:is_map(R) of true -> maps:get(0, R, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(R) + 0 + 1, R); _ -> mochi_nth(0 + 1, R) end end), (case erlang:is_map(F) of true -> maps:get(1, F, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(F) + 1 + 1, F); _ -> mochi_nth(1 + 1, F) end end)) - mochi_safe_mul((case erlang:is_map(R) of true -> maps:get(1, R, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(R) + 1 + 1, R); _ -> mochi_nth(1 + 1, R) end end), (case erlang:is_map(F) of true -> maps:get(0, F, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(F) + 0 + 1, F); _ -> mochi_nth(0 + 1, F) end end))),
            Sum_moments_2 = (Sum_moments + Moment),
            I_2 = (I + 1),
            Fun_loop(Eps, Forces, I_2, Location, N, Sum_moments_2);
        _ -> {Eps, Forces, I, Location, N, Sum_moments}
    end
end,
{Eps, Forces, I_2, Location, N, Sum_moments_2} = Fun(Eps, Forces, I, Location, N, Sum_moments),
        (abs_float(Sum_moments_2) < Eps)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('TWO_PI', 6.283185307179586),
    erlang:put('forces1', [[1.0, 1.0], [-1.0, 2.0]]),
    erlang:put('location1', [[1.0, 0.0], [10.0, 0.0]]),
    io:format("~ts~n", [mochi_str(in_static_equilibrium(erlang:get('forces1'), erlang:get('location1'), 0.1))]),
    erlang:put('forces2', [polar_force(718.4, 150.0, false), polar_force(879.54, 45.0, false), polar_force(100.0, -90.0, false)]),
    erlang:put('location2', [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]),
    io:format("~ts~n", [mochi_str(in_static_equilibrium(erlang:get('forces2'), erlang:get('location2'), 0.1))]),
    erlang:put('forces3', [polar_force(mochi_safe_mul(30.0, 9.81), 15.0, false), polar_force(215.0, 135.0, false), polar_force(264.0, 60.0, false)]),
    erlang:put('location3', [[0.0, 0.0], [0.0, 0.0], [0.0, 0.0]]),
    io:format("~ts~n", [mochi_str(in_static_equilibrium(erlang:get('forces3'), erlang:get('location3'), 0.1))]),
    erlang:put('forces4', [[0.0, -2000.0], [0.0, -1200.0], [0.0, 15600.0], [0.0, -12400.0]]),
    erlang:put('location4', [[0.0, 0.0], [6.0, 0.0], [10.0, 0.0], [12.0, 0.0]]),
    io:format("~ts~n", [mochi_str(in_static_equilibrium(erlang:get('forces4'), erlang:get('location4'), 0.1))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
