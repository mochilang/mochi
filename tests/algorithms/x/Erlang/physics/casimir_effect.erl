#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, sqrtapprox/1, casimir_force/3, main/0]).

% Generated by Mochi transpiler v0.10.68 (fb57228729)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

sqrtapprox(X) ->
    try
        case (X =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 100) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

casimir_force(Force, Area, Distance) ->
    try
        Zero_count = 0,
        Zero_count_3 = (case (Force == 0.0) of
        true -> Zero_count_2 = (Zero_count + 1),
            Zero_count_2;
        _ -> Zero_count
    end),
        Zero_count_5 = (case (Area == 0.0) of
        true -> Zero_count_4 = (Zero_count_3 + 1),
            Zero_count_4;
        _ -> Zero_count_3
    end),
        Zero_count_7 = (case (Distance == 0.0) of
        true -> Zero_count_6 = (Zero_count_5 + 1),
            Zero_count_6;
        _ -> Zero_count_5
    end),
        case (Zero_count_7 /= 1) of
        true -> erlang:error({panic, "One and only one argument must be 0"});
        _ -> ok
    end,
        case (Force < 0.0) of
        true -> erlang:error({panic, "Magnitude of force can not be negative"});
        _ -> ok
    end,
        case (Distance < 0.0) of
        true -> erlang:error({panic, "Distance can not be negative"});
        _ -> ok
    end,
        case (Area < 0.0) of
        true -> erlang:error({panic, "Area can not be negative"});
        _ -> ok
    end,
        Num_2 = (case (Force == 0.0) of
        true -> Num = mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(0.0000000000000000000000000000000001054571817, 300000000.0), 3.141592653589793), 3.141592653589793), Area),
            Den = mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(240.0, Distance), Distance), Distance), Distance),
            F = mochi_safe_div(Num, Den),
            throw({return, #{"force" => F}}),
            Den_2 = Den,
            F_2 = F,
            Num;
        _ -> Den_2 = nil,
            F_2 = nil,
            nil
    end),
        Num_4 = (case (Area == 0.0) of
        true -> Num_3 = mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(240.0, Force), Distance), Distance), Distance), Distance),
            Den_3 = mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(0.0000000000000000000000000000000001054571817, 300000000.0), 3.141592653589793), 3.141592653589793),
            A = mochi_safe_div(Num_3, Den_3),
            throw({return, #{"area" => A}}),
            A_2 = A,
            Den_4 = Den_3,
            Num_3;
        _ -> A_2 = nil,
            Den_4 = Den_2,
            Num_2
    end),
        Num_5 = mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(mochi_safe_mul(0.0000000000000000000000000000000001054571817, 300000000.0), 3.141592653589793), 3.141592653589793), Area),
        Den_5 = mochi_safe_mul(240.0, Force),
        Inner = mochi_safe_div(Num_5, Den_5),
        D = sqrtapprox(sqrtapprox(Inner)),
        #{"distance" => D}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        io:format("~ts~n", [mochi_str(casimir_force(0.0, 4.0, 0.03))]),
        io:format("~ts~n", [mochi_str(casimir_force(0.0000000002635, 0.0023, 0.0))]),
        io:format("~ts~n", [mochi_str(casimir_force(0.000000000000000002737, 0.0, 0.0023746))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    erlang:put('REDUCED_PLANCK_CONSTANT', 0.0000000000000000000000000000000001054571817),
    erlang:put('SPEED_OF_LIGHT', 300000000.0),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
