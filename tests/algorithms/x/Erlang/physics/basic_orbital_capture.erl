#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, pow10/1, sqrt/1, abs/1, capture_radii/3, capture_area/1, run_tests/0, main/0]).

% Generated by Mochi transpiler v0.10.64 (a3a385f0f9) on 2025-08-12 12:37 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

pow10(N) ->
    try
        Result = 1.0,
        I = 0,
        Fun = fun Fun_loop(I, N, Result) ->
    case (I < N) of
        true ->
            Result_2 = mochi_safe_mul(Result, 10.0),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Result_2);
        _ -> {I, N, Result}
    end
end,
{I_2, N, Result_2} = Fun(I, N, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

sqrt(X) ->
    try
        case (X =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Guess, I_3, X) ->
    case (I_3 < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2.0),
            I_4 = (I_3 + 1),
            Fun_2_loop(Guess_2, I_4, X);
        _ -> {Guess, I_3, X}
    end
end,
{Guess_2, I_4, X} = Fun_2(Guess, I_3, X),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

abs(X_2) ->
    try
        (case (X_2 < 0.0) of
    true -> -X_2;
    _ -> X_2
end)
    catch {return, RetCatch} -> RetCatch end.

capture_radii(Target_body_radius, Target_body_mass, Projectile_velocity) ->
    try
        case (Target_body_mass < 0.0) of
        true -> erlang:error({panic, "Mass cannot be less than 0"});
        _ -> ok
    end,
        case (Target_body_radius < 0.0) of
        true -> erlang:error({panic, "Radius cannot be less than 0"});
        _ -> ok
    end,
        case (Projectile_velocity > 299792458.0) of
        true -> erlang:error({panic, "Cannot go beyond speed of light"});
        _ -> ok
    end,
        Escape_velocity_squared = mochi_safe_div(mochi_safe_mul(mochi_safe_mul(2.0, 0.000000000066743), Target_body_mass), Target_body_radius),
        Denom = mochi_safe_mul(Projectile_velocity, Projectile_velocity),
        Capture_radius = mochi_safe_mul(Target_body_radius, sqrt((1.0 + mochi_safe_div(Escape_velocity_squared, Denom)))),
        Capture_radius
    catch {return, RetCatch} -> RetCatch end.

capture_area(Capture_radius_2) ->
    try
        case (Capture_radius_2 < 0.0) of
        true -> erlang:error({panic, "Cannot have a capture radius less than 0"});
        _ -> ok
    end,
        Sigma = mochi_safe_mul(mochi_safe_mul(3.141592653589793, Capture_radius_2), Capture_radius_2),
        Sigma
    catch {return, RetCatch} -> RetCatch end.

run_tests() ->
    try
        R = capture_radii(mochi_safe_mul(6.957, pow10(8)), mochi_safe_mul(1.99, pow10(30)), 25000.0),
        case (erlang:abs((R - mochi_safe_mul(1.720959069143714, pow10(10)))) > 1.0) of
        true -> erlang:error({panic, "capture_radii failed"});
        _ -> ok
    end,
        A = capture_area(R),
        case (erlang:abs((A - mochi_safe_mul(9.304455331801812, pow10(20)))) > 1.0) of
        true -> erlang:error({panic, "capture_area failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        run_tests(),
        R_2 = capture_radii(mochi_safe_mul(6.957, pow10(8)), mochi_safe_mul(1.99, pow10(30)), 25000.0),
        io:format("~ts~n", [mochi_str(R_2)]),
        io:format("~ts~n", [mochi_str(capture_area(R_2))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('G', 0.000000000066743),
    erlang:put('C', 299792458.0),
    erlang:put('PI', 3.141592653589793),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
