#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, centripetal/3, floor/1, pow10/1, round/2, show/3]).

-compile({no_auto_import,[floor/1]}).
% Generated by Mochi transpiler v0.10.64 (a3a385f0f9) on 2025-08-12 12:37 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

centripetal(Mass, Velocity, Radius) ->
    try
        case (Mass < 0.0) of
        true -> erlang:error({panic, "The mass of the body cannot be negative"});
        _ -> ok
    end,
        case (Radius =< 0.0) of
        true -> erlang:error({panic, "The radius is always a positive non zero integer"});
        _ -> ok
    end,
        mochi_safe_div(mochi_safe_mul(mochi_safe_mul(Mass, Velocity), Velocity), Radius)
    catch {return, RetCatch} -> RetCatch end.

floor(X) ->
    try
        I = mochi_to_int(X),
        case (float(I) > X) of
        true -> I_2 = (I - 1),
            I_3 = I_2;
        _ -> I_3 = I
    end,
        float(I_3)
    catch {return, RetCatch} -> RetCatch end.

pow10(N) ->
    try
        P = 1.0,
        I_4 = 0,
        Fun = fun Fun_loop(I_4, N, P) ->
    case (I_4 < N) of
        true ->
            P_2 = mochi_safe_mul(P, 10.0),
            I_5 = (I_4 + 1),
            Fun_loop(I_5, N, P_2);
        _ -> {I_4, N, P}
    end
end,
{I_5, N, P_2} = Fun(I_4, N, P),
        P_2
    catch {return, RetCatch} -> RetCatch end.

round(X_2, N_2) ->
    try
        M = pow10(N_2),
        mochi_safe_div(floor((mochi_safe_mul(X_2, M) + 0.5)), M)
    catch {return, RetCatch} -> RetCatch end.

show(Mass_2, Velocity_2, Radius_2) ->
    try
        F = centripetal(Mass_2, Velocity_2, Radius_2),
        io:format("~ts~n", [mochi_str(round(F, 2))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    show(15.5, -30.0, 10.0),
    show(10.0, 15.0, 5.0),
    show(20.0, -50.0, 15.0),
    show(12.25, 40.0, 25.0),
    show(50.0, 100.0, 50.0),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
