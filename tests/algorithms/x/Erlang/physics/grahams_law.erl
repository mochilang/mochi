#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, to_float/1, round6/1, sqrtapprox/1, validate/1, effusion_ratio/2, first_effusion_rate/3, second_effusion_rate/3, first_molar_mass/3, second_molar_mass/3]).

% Generated by Mochi transpiler v0.10.68 (fb57228729)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.


mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

to_float(X) ->
    try
        mochi_safe_mul(X, 1.0)
    catch {return, RetCatch} -> RetCatch end.

round6(X_2) ->
    try
        Factor = 1000000.0,
        mochi_safe_div(mochi_to_float(mochi_to_int((mochi_safe_mul(X_2, 1000000.0) + 0.5))), 1000000.0)
    catch {return, RetCatch} -> RetCatch end.

sqrtapprox(X_3) ->
    try
        Guess = mochi_safe_div(X_3, 2.0),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_3) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_3, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_3);
        _ -> {Guess, I, X_3}
    end
end,
{Guess_2, I_2, X_3} = Fun(Guess, I, X_3),
        Guess_2
    catch {return, RetCatch} -> RetCatch end.

validate(Values) ->
    try
        case (erlang:length(Values) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Values) ->
    case (I_3 < erlang:length(Values)) of
        true ->
            case ((case erlang:is_map(Values) of true -> maps:get(I_3, Values, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Values) + I_3 + 1, Values); _ -> mochi_nth(I_3 + 1, Values) end end) =< 0.0) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Values);
        _ -> {I_3, Values}
    end
end,
{I_4, Values} = Fun_2(I_3, Values),
        true
    catch {return, RetCatch} -> RetCatch end.

effusion_ratio(M1, M2) ->
    try
        case mochi_not(validate([M1, M2])) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: Molar mass values must greater than 0.")]),
            throw({return, 0.0});
        _ -> ok
    end,
        round6(sqrtapprox(mochi_safe_div(M2, M1)))
    catch {return, RetCatch} -> RetCatch end.

first_effusion_rate(Rate, M1_2, M2_2) ->
    try
        case mochi_not(validate([Rate, M1_2, M2_2])) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: Molar mass and effusion rate values must greater than 0.")]),
            throw({return, 0.0});
        _ -> ok
    end,
        round6(mochi_safe_mul(Rate, sqrtapprox(mochi_safe_div(M2_2, M1_2))))
    catch {return, RetCatch} -> RetCatch end.

second_effusion_rate(Rate_2, M1_3, M2_3) ->
    try
        case mochi_not(validate([Rate_2, M1_3, M2_3])) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: Molar mass and effusion rate values must greater than 0.")]),
            throw({return, 0.0});
        _ -> ok
    end,
        round6(mochi_safe_div(Rate_2, sqrtapprox(mochi_safe_div(M2_3, M1_3))))
    catch {return, RetCatch} -> RetCatch end.

first_molar_mass(Mass, R1, R2) ->
    try
        case mochi_not(validate([Mass, R1, R2])) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: Molar mass and effusion rate values must greater than 0.")]),
            throw({return, 0.0});
        _ -> ok
    end,
        Ratio = mochi_safe_div(R1, R2),
        round6(mochi_safe_div(Mass, mochi_safe_mul(Ratio, Ratio)))
    catch {return, RetCatch} -> RetCatch end.

second_molar_mass(Mass_2, R1_2, R2_2) ->
    try
        case mochi_not(validate([Mass_2, R1_2, R2_2])) of
        true -> io:format("~ts~n", [mochi_repr("ValueError: Molar mass and effusion rate values must greater than 0.")]),
            throw({return, 0.0});
        _ -> ok
    end,
        Ratio_2 = mochi_safe_div(R1_2, R2_2),
        round6(mochi_safe_div(mochi_safe_mul(Ratio_2, Ratio_2), Mass_2))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(effusion_ratio(2.016, 4.002))]),
    io:format("~ts~n", [mochi_repr(first_effusion_rate(1.0, 2.016, 4.002))]),
    io:format("~ts~n", [mochi_repr(second_effusion_rate(1.0, 2.016, 4.002))]),
    io:format("~ts~n", [mochi_repr(first_molar_mass(2.0, 1.408943, 0.709752))]),
    io:format("~ts~n", [mochi_repr(second_molar_mass(2.0, 1.408943, 0.709752))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
