#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, int_sqrt/1, pythagorean_triple/1, max_perimeter/1, solution/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

int_sqrt(N) ->
    try
        Low = 0,
        High = N,
        Fun = fun Fun_loop(High, Low, N) ->
    case (Low =< High) of
        true ->
            Mid = ((Low + High) div 2),
            Sq = (Mid * Mid),
            case (Sq == N) of
        true -> throw({return, Mid});
        _ -> ok
    end,
            case (Sq < N) of
        true -> Low_2 = (Mid + 1),
            High_3 = High,
            Low_3 = Low_2;
        _ -> High_2 = (Mid - 1),
            High_3 = High_2,
            Low_3 = Low
    end,
            Fun_loop(High_3, Low_3, N);
        _ -> {High, Low, N}
    end
end,
{High_3, Low_3, N} = Fun(High, Low, N),
        High_3
    catch {return, Ret} -> Ret end.

pythagorean_triple(Max_perimeter) ->
    try
        Triplets = #{},
        Base = 1,
        Fun_3 = fun Fun_3_loop(Base, Max_perimeter, Triplets) ->
    case (Base =< Max_perimeter) of
        true ->
            Perpendicular = Base,
            Fun_2 = fun Fun_2_loop(Base, Max_perimeter, Perpendicular, Triplets) ->
    case (Perpendicular =< Max_perimeter) of
        true ->
            Hyp_sq = ((Base * Base) + (Perpendicular * Perpendicular)),
            Hyp = int_sqrt(Hyp_sq),
            case ((Hyp * Hyp) == Hyp_sq) of
        true -> Perimeter = ((Base + Perpendicular) + Hyp),
            case (Perimeter =< Max_perimeter) of
        true -> case maps:is_key(Perimeter, Triplets) of
        true -> Triplets_2 = maps:put(Perimeter, (maps:get(Perimeter, Triplets, nil) + 1), Triplets),
            Triplets_4 = Triplets_2;
        _ -> Triplets_3 = maps:put(Perimeter, 1, Triplets),
            Triplets_4 = Triplets_3
    end,
            Triplets_5 = Triplets_4;
        _ -> Triplets_5 = Triplets
    end,
            Perimeter_2 = Perimeter,
            Triplets_6 = Triplets_5;
        _ -> Perimeter_2 = nil,
            Triplets_6 = Triplets
    end,
            Perpendicular_2 = (Perpendicular + 1),
            Fun_2_loop(Base, Max_perimeter, Perpendicular_2, Triplets_6);
        _ -> {Base, Max_perimeter, Perpendicular, Triplets}
    end
end,
{Base, Max_perimeter, Perpendicular_2, Triplets_6} = Fun_2(Base, Max_perimeter, Perpendicular, Triplets),
            Base_2 = (Base + 1),
            Fun_3_loop(Base_2, Max_perimeter, Triplets_6);
        _ -> {Base, Max_perimeter, Triplets}
    end
end,
{Base_2, Max_perimeter, Triplets_6} = Fun_3(Base, Max_perimeter, Triplets),
        Triplets_6
    catch {return, Ret} -> Ret end.

max_perimeter(Counts) ->
    try
        Best_p = 0,
        Max_count = 0,
        Fun_4 = fun Fun_4_loop(List, Best_p, Counts, Max_count) ->
    case List of
        [] -> {Best_p, Counts, Max_count};
        [P|P_rest] ->
            Count = maps:get(P, Counts, nil),
            case ((Count > Max_count) orelse ((Count == Max_count) andalso (P > Best_p))) of
        true -> Max_count_2 = Count,
            Best_p_2 = P,
            Best_p_3 = Best_p_2,
            Max_count_3 = Max_count_2;
        _ -> Best_p_3 = Best_p,
            Max_count_3 = Max_count
    end,
            Fun_4_loop(P_rest, Best_p_3, Counts, Max_count_3);
        _ -> {Best_p, Counts, Max_count}
    end
end,
{Best_p_3, Counts, Max_count_3} = Fun_4(maps:keys(Counts), Best_p, Counts, Max_count),
        Best_p_3
    catch {return, Ret} -> Ret end.

solution(N_2) ->
    try
        Triplets_7 = pythagorean_triple(N_2),
        max_perimeter(Triplets_7)
    catch {return, Ret} -> Ret end.

main() ->
    try
        S200 = max_perimeter(pythagorean_triple(200)),
        S100 = max_perimeter(pythagorean_triple(100)),
        io:format("~ts~n", [mochi_str(S100)]),
        io:format("~ts~n", [mochi_str(S200)]),
        Best = max_perimeter(pythagorean_triple(1000)),
        io:format("~ts~n", [mochi_str(Best)]),
        io:format("~ts~n", [mochi_repr((("Perimeter " ++ mochi_str(Best)) ++ " has maximum solutions"))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
