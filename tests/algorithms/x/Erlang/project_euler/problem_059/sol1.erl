#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, xor_fn/2, chr/1, ord/1, is_valid_ascii/1, try_key/2, filter_valid_chars/1, contains/2, filter_common_word/2, solution/1]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

xor_fn(A, B) ->
    try
        Res = 0,
        Bit = 1,
        X = A,
        Y = B,
        Fun = fun Fun_loop(A, B, Bit, Res, X, Y) ->
    case ((X > 0) orelse (Y > 0)) of
        true ->
            Abit = mochi_mod(X, 2),
            Bbit = mochi_mod(Y, 2),
            case (Abit /= Bbit) of
        true -> Res_2 = (Res + Bit),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            X_2 = (X div 2),
            Y_2 = (Y div 2),
            Bit_2 = (Bit * 2),
            Fun_loop(A, B, Bit_2, Res_3, X_2, Y_2);
        _ -> {A, B, Bit, Res, X, Y}
    end
end,
{A, B, Bit_2, Res_3, X_2, Y_2} = Fun(A, B, Bit, Res, X, Y),
        Res_3
    catch {return, Ret} -> Ret end.

chr(Code) ->
    try
        case (Code == 10) of
        true -> throw({return, "\n"});
        _ -> ok
    end,
        case (Code == 13) of
        true -> throw({return, "\r"});
        _ -> ok
    end,
        case (Code == 9) of
        true -> throw({return, "\t"});
        _ -> ok
    end,
        case ((Code >= 32) andalso (Code < 127)) of
        true -> throw({return, string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", (Code - 32) + 1, ((Code - 31) - (Code - 32)))});
        _ -> ok
    end,
        ""
    catch {return, Ret} -> Ret end.

ord(Ch) ->
    try
        case (Ch == "\n") of
        true -> throw({return, 10});
        _ -> ok
    end,
        case (Ch == "\r") of
        true -> throw({return, 13});
        _ -> ok
    end,
        case (Ch == "\t") of
        true -> throw({return, 9});
        _ -> ok
    end,
        I = 0,
        Fun_2 = fun Fun_2_loop(Ch, I) ->
    case (I < erlang:length(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")) of
        true ->
            case (string:substr(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", I + 1, ((I + 1) - I)) == Ch) of
        true -> throw({return, (32 + I)});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_2_loop(Ch, I_2);
        _ -> {Ch, I}
    end
end,
{Ch, I_2} = Fun_2(Ch, I),
        0
    catch {return, Ret} -> Ret end.

is_valid_ascii(Code_2) ->
    try
        case ((Code_2 >= 32) andalso (Code_2 =< 126)) of
        true -> throw({return, true});
        _ -> ok
    end,
        case (((Code_2 == 9) orelse (Code_2 == 10)) orelse (Code_2 == 13)) of
        true -> throw({return, true});
        _ -> ok
    end,
        false
    catch {return, Ret} -> Ret end.

try_key(Ciphertext, Key) ->
    try
        Decoded = "",
        I_3 = 0,
        Klen = erlang:length(Key),
        Fun_4 = fun Fun_4_loop(Ciphertext, Decoded, I_3, Key, Klen) ->
    case (erlang:get('i') < erlang:length(Ciphertext)) of
        true ->
            Decodedchar = xor_fn((case erlang:is_map(Ciphertext) of true -> maps:get(erlang:get('i'), Ciphertext, nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(Ciphertext) + erlang:get('i') + 1, Ciphertext); _ -> mochi_nth(erlang:get('i') + 1, Ciphertext) end end), (case erlang:is_map(Key) of true -> maps:get(mochi_mod(erlang:get('i'), Klen), Key, nil); _ -> case mochi_mod(erlang:get('i'), Klen) < 0 of true -> mochi_nth(erlang:length(Key) + mochi_mod(erlang:get('i'), Klen) + 1, Key); _ -> mochi_nth(mochi_mod(erlang:get('i'), Klen) + 1, Key) end end)),
            case mochi_not(is_valid_ascii(Decodedchar)) of
        true -> throw({return, nil});
        _ -> ok
    end,
            Decoded_2 = (Decoded ++ chr(Decodedchar)),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_4_loop(Ciphertext, Decoded_2, I_3, Key, Klen);
        _ -> {Ciphertext, Decoded, I_3, Key, Klen}
    end
end,
{Ciphertext, Decoded_2, I_3, Key, Klen} = Fun_4(Ciphertext, Decoded, I_3, Key, Klen),
        Decoded_2
    catch {return, Ret} -> Ret end.

filter_valid_chars(Ciphertext_2) ->
    try
        Possibles = [],
        I_4 = 0,
        Fun_7 = fun Fun_7_loop(Ciphertext_2, I_4, Possibles) ->
    case (erlang:get('i') < erlang:length(erlang:get('LOWERCASE_INTS'))) of
        true ->
            J = 0,
            Fun_6 = fun Fun_6_loop(Ciphertext_2, I_4, J, Possibles) ->
    case (J < erlang:length(erlang:get('LOWERCASE_INTS'))) of
        true ->
            K = 0,
            Fun_5 = fun Fun_5_loop(Ciphertext_2, I_4, J, K, Possibles) ->
    case (K < erlang:length(erlang:get('LOWERCASE_INTS'))) of
        true ->
            Key_2 = [(case erlang:is_map(erlang:get('LOWERCASE_INTS')) of true -> maps:get(erlang:get('i'), erlang:get('LOWERCASE_INTS'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('LOWERCASE_INTS')) + erlang:get('i') + 1, erlang:get('LOWERCASE_INTS')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('LOWERCASE_INTS')) end end), (case erlang:is_map(erlang:get('LOWERCASE_INTS')) of true -> maps:get(J, erlang:get('LOWERCASE_INTS'), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(erlang:get('LOWERCASE_INTS')) + J + 1, erlang:get('LOWERCASE_INTS')); _ -> mochi_nth(J + 1, erlang:get('LOWERCASE_INTS')) end end), (case erlang:is_map(erlang:get('LOWERCASE_INTS')) of true -> maps:get(K, erlang:get('LOWERCASE_INTS'), nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(erlang:get('LOWERCASE_INTS')) + K + 1, erlang:get('LOWERCASE_INTS')); _ -> mochi_nth(K + 1, erlang:get('LOWERCASE_INTS')) end end)],
            Decoded_3 = try_key(Ciphertext_2, Key_2),
            case (Decoded_3 /= nil) of
        true -> Possibles_2 = lists:append((case Possibles of nil -> []; _ -> Possibles end), [Decoded_3]),
            Possibles_3 = Possibles_2;
        _ -> Possibles_3 = Possibles
    end,
            K_2 = (K + 1),
            Fun_5_loop(Ciphertext_2, I_4, J, K_2, Possibles_3);
        _ -> {Ciphertext_2, I_4, J, K, Possibles}
    end
end,
{Ciphertext_2, I_4, J, K_2, Possibles_3} = Fun_5(Ciphertext_2, I_4, J, K, Possibles),
            J_2 = (J + 1),
            Fun_6_loop(Ciphertext_2, I_4, J_2, Possibles_3);
        _ -> {Ciphertext_2, I_4, J, Possibles}
    end
end,
{Ciphertext_2, I_4, J_2, Possibles_3} = Fun_6(Ciphertext_2, I_4, J, Possibles),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_7_loop(Ciphertext_2, I_4, Possibles_3);
        _ -> {Ciphertext_2, I_4, Possibles}
    end
end,
{Ciphertext_2, I_4, Possibles_3} = Fun_7(Ciphertext_2, I_4, Possibles),
        Possibles_3
    catch {return, Ret} -> Ret end.

contains(S, Sub) ->
    try
        N = erlang:length(S),
        M = erlang:length(Sub),
        case (M == 0) of
        true -> throw({return, true});
        _ -> ok
    end,
        I_5 = 0,
        Fun_9 = fun Fun_9_loop(I_5, M, N, S, Sub) ->
    case (erlang:get('i') =< (N - M)) of
        true ->
            try
                J_3 = 0,
                Is_match = true,
                Fun_8 = fun Fun_8_loop(I_5, Is_match, J_3, M, N, S, Sub) ->
    case (J_3 < M) of
        true ->
            try
                case (string:substr(S, (erlang:get('i') + J_3) + 1, 1) /= string:substr(Sub, J_3 + 1, 1)) of
        true -> Is_match_2 = false,
            throw({break, I_5, Is_match_2, J_3, M, N, S, Sub}),
            Is_match_3 = Is_match_2;
        _ -> Is_match_3 = Is_match
    end,
                J_4 = (J_3 + 1),
                Fun_8_loop(I_5, Is_match_3, J_4, M, N, S, Sub)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_8_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {I_5, Is_match, J_3, M, N, S, Sub}
    end
end,
{I_5, Is_match_3, J_4, M, N, S, Sub} = Fun_8(I_5, Is_match, J_3, M, N, S, Sub),
                case (Is_match_3 /= nil) of
        true -> throw({return, true});
        _ -> ok
    end,
                erlang:put('i', (erlang:get('i') + 1)),
                Fun_9_loop(I_5, M, N, S, Sub)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_9_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {I_5, M, N, S, Sub}
    end
end,
{I_5, M, N, S, Sub} = Fun_9(I_5, M, N, S, Sub),
        false
    catch {return, Ret} -> Ret end.

filter_common_word(Possibles_4, Common_word) ->
    try
        Res_4 = [],
        I_6 = 0,
        Fun_10 = fun Fun_10_loop(Common_word, I_6, Possibles_4, Res_4) ->
    case (erlang:get('i') < erlang:length(Possibles_4)) of
        true ->
            P = (case erlang:is_map(Possibles_4) of true -> maps:get(erlang:get('i'), Possibles_4, nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(Possibles_4) + erlang:get('i') + 1, Possibles_4); _ -> mochi_nth(erlang:get('i') + 1, Possibles_4) end end),
            case ((string:str(string:to_lower(P), Common_word) =/= 0) /= nil) of
        true -> Res_5 = lists:append((case Res_4 of nil -> []; _ -> Res_4 end), [P]),
            Res_6 = Res_5;
        _ -> Res_6 = Res_4
    end,
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_10_loop(Common_word, I_6, Possibles_4, Res_6);
        _ -> {Common_word, I_6, Possibles_4, Res_4}
    end
end,
{Common_word, I_6, Possibles_4, Res_6} = Fun_10(Common_word, I_6, Possibles_4, Res_4),
        Res_6
    catch {return, Ret} -> Ret end.

solution(Ciphertext_3) ->
    try
        Possibles_5 = filter_valid_chars(Ciphertext_3),
        I_7 = 0,
        Fun_11 = fun Fun_11_loop(Ciphertext_3, I_7, Possibles_5) ->
    case (erlang:get('i') < erlang:length(erlang:get('COMMON_WORDS'))) of
        true ->
            try
                Word = (case erlang:is_map(erlang:get('COMMON_WORDS')) of true -> maps:get(erlang:get('i'), erlang:get('COMMON_WORDS'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('COMMON_WORDS')) + erlang:get('i') + 1, erlang:get('COMMON_WORDS')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('COMMON_WORDS')) end end),
                Possibles_6 = filter_common_word(Possibles_5, Word),
                case (erlang:length(Possibles_6) == 1) of
        true -> throw({break, Ciphertext_3, I_7, Possibles_6});
        _ -> ok
    end,
                erlang:put('i', (erlang:get('i') + 1)),
                Fun_11_loop(Ciphertext_3, I_7, Possibles_6)
            catch
                {continue, C0, C1, C2} -> Fun_11_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Ciphertext_3, I_7, Possibles_5}
    end
end,
{Ciphertext_3, I_7, Possibles_6} = Fun_11(Ciphertext_3, I_7, Possibles_5),
        Decoded_text = (case erlang:is_map(Possibles_6) of true -> maps:get(0, Possibles_6, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Possibles_6) + 0 + 1, Possibles_6); _ -> mochi_nth(0 + 1, Possibles_6) end end),
        Sum = 0,
        J_5 = 0,
        Fun_12 = fun Fun_12_loop(Ciphertext_3, Decoded_text, I_7, J_5, Possibles_6, Sum) ->
    case (J_5 < erlang:length(Decoded_text)) of
        true ->
            Sum_2 = (Sum + ord(string:substr(Decoded_text, J_5 + 1, ((J_5 + 1) - J_5)))),
            J_6 = (J_5 + 1),
            Fun_12_loop(Ciphertext_3, Decoded_text, I_7, J_6, Possibles_6, Sum_2);
        _ -> {Ciphertext_3, Decoded_text, I_7, J_5, Possibles_6, Sum}
    end
end,
{Ciphertext_3, Decoded_text, I_7, J_6, Possibles_6, Sum_2} = Fun_12(Ciphertext_3, Decoded_text, I_7, J_5, Possibles_6, Sum),
        Sum_2
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ascii_chars', " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"),
    erlang:put('LOWERCASE_INTS', []),
    erlang:put('i', 97),
    Fun_3 = fun Fun_3_loop() ->
    case (erlang:get('i') =< 122) of
        true ->
            erlang:put('LOWERCASE_INTS', lists:append((case erlang:get('LOWERCASE_INTS') of nil -> []; _ -> erlang:get('LOWERCASE_INTS') end), [erlang:get('i')])),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_3_loop();
        _ -> {}
    end
end,
{} = Fun_3(),
    erlang:put('COMMON_WORDS', ["the", "be", "to", "of", "and", "in", "that", "have"]),
    erlang:put('ciphertext', [17, 6, 1, 69, 12, 1, 69, 26, 11, 69, 1, 2, 69, 15, 10, 1, 78, 13, 11, 78, 16, 13, 15, 16, 69, 6, 5, 19, 11]),
    io:format("~ts~n", [mochi_str(solution(erlang:get('ciphertext')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
