#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, max_product_four/1]).

% Generated by Mochi transpiler v0.10.61 (3d19777eda) on 2025-08-08 17:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

max_product_four(Grid) ->
    try
        Maximum = 0,
        I = 0,
        Fun_2 = fun Fun_2_loop(Grid, I, Maximum) ->
    case (I < 20) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Grid, I, J, Maximum) ->
    case (J < 17) of
        true ->
            Temp = ((((case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)) of true -> maps:get(J, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)) + J + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)) end end) * (case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)) of true -> maps:get((J + 1), (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end), nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)) + (J + 1) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)); _ -> mochi_nth((J + 1) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)) end end)) * (case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)) of true -> maps:get((J + 2), (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end), nil); _ -> case (J + 2) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)) + (J + 2) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)); _ -> mochi_nth((J + 2) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)) end end)) * (case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)) of true -> maps:get((J + 3), (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end), nil); _ -> case (J + 3) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)) + (J + 3) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)); _ -> mochi_nth((J + 3) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I, erlang:get('grid'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I + 1, erlang:get('grid')); _ -> mochi_nth(I + 1, erlang:get('grid')) end end)) end end)),
            case (Temp > Maximum) of
        true -> Maximum_2 = Temp,
            Maximum_3 = Maximum_2;
        _ -> Maximum_3 = Maximum
    end,
            J_2 = (J + 1),
            Fun_loop(Grid, I, J_2, Maximum_3);
        _ -> {Grid, I, J, Maximum}
    end
end,
{Grid, I, J_2, Maximum_3} = Fun(Grid, I, J, Maximum),
            I_2 = (I + 1),
            Fun_2_loop(Grid, I_2, Maximum_3);
        _ -> {Grid, I, Maximum}
    end
end,
{Grid, I_2, Maximum_3} = Fun_2(Grid, I, Maximum),
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Grid, I_3, Maximum_3) ->
    case (I_3 < 17) of
        true ->
            J_3 = 0,
            Fun_3 = fun Fun_3_loop(Grid, I_3, J_3, Maximum_3) ->
    case (J_3 < 20) of
        true ->
            Temp_2 = ((((case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_3, erlang:get('grid'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_3 + 1, erlang:get('grid')); _ -> mochi_nth(I_3 + 1, erlang:get('grid')) end end)) of true -> maps:get(J_3, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_3, erlang:get('grid'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_3 + 1, erlang:get('grid')); _ -> mochi_nth(I_3 + 1, erlang:get('grid')) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_3, erlang:get('grid'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_3 + 1, erlang:get('grid')); _ -> mochi_nth(I_3 + 1, erlang:get('grid')) end end)) + J_3 + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_3, erlang:get('grid'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_3 + 1, erlang:get('grid')); _ -> mochi_nth(I_3 + 1, erlang:get('grid')) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_3, erlang:get('grid'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_3 + 1, erlang:get('grid')); _ -> mochi_nth(I_3 + 1, erlang:get('grid')) end end)) end end) * (case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 1), erlang:get('grid'), nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 1) + 1, erlang:get('grid')) end end)) of true -> maps:get(J_3, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 1), erlang:get('grid'), nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 1) + 1, erlang:get('grid')) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 1), erlang:get('grid'), nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 1) + 1, erlang:get('grid')) end end)) + J_3 + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 1), erlang:get('grid'), nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 1) + 1, erlang:get('grid')) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 1), erlang:get('grid'), nil); _ -> case (I_3 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 1) + 1, erlang:get('grid')) end end)) end end)) * (case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 2), erlang:get('grid'), nil); _ -> case (I_3 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 2) + 1, erlang:get('grid')) end end)) of true -> maps:get(J_3, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 2), erlang:get('grid'), nil); _ -> case (I_3 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 2) + 1, erlang:get('grid')) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 2), erlang:get('grid'), nil); _ -> case (I_3 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 2) + 1, erlang:get('grid')) end end)) + J_3 + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 2), erlang:get('grid'), nil); _ -> case (I_3 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 2) + 1, erlang:get('grid')) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 2), erlang:get('grid'), nil); _ -> case (I_3 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 2) + 1, erlang:get('grid')) end end)) end end)) * (case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 3), erlang:get('grid'), nil); _ -> case (I_3 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 3) + 1, erlang:get('grid')) end end)) of true -> maps:get(J_3, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 3), erlang:get('grid'), nil); _ -> case (I_3 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 3) + 1, erlang:get('grid')) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 3), erlang:get('grid'), nil); _ -> case (I_3 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 3) + 1, erlang:get('grid')) end end)) + J_3 + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 3), erlang:get('grid'), nil); _ -> case (I_3 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 3) + 1, erlang:get('grid')) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_3 + 3), erlang:get('grid'), nil); _ -> case (I_3 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_3 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_3 + 3) + 1, erlang:get('grid')) end end)) end end)),
            case (Temp_2 > Maximum_3) of
        true -> Maximum_4 = Temp_2,
            Maximum_5 = Maximum_4;
        _ -> Maximum_5 = Maximum_3
    end,
            J_4 = (J_3 + 1),
            Fun_3_loop(Grid, I_3, J_4, Maximum_5);
        _ -> {Grid, I_3, J_3, Maximum_3}
    end
end,
{Grid, I_3, J_4, Maximum_5} = Fun_3(Grid, I_3, J_3, Maximum_3),
            I_4 = (I_3 + 1),
            Fun_4_loop(Grid, I_4, Maximum_5);
        _ -> {Grid, I_3, Maximum_3}
    end
end,
{Grid, I_4, Maximum_5} = Fun_4(Grid, I_3, Maximum_3),
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(Grid, I_5, Maximum_5) ->
    case (I_5 < 17) of
        true ->
            J_5 = 0,
            Fun_5 = fun Fun_5_loop(Grid, I_5, J_5, Maximum_5) ->
    case (J_5 < 17) of
        true ->
            Temp_3 = ((((case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_5, erlang:get('grid'), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_5 + 1, erlang:get('grid')); _ -> mochi_nth(I_5 + 1, erlang:get('grid')) end end)) of true -> maps:get(J_5, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_5, erlang:get('grid'), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_5 + 1, erlang:get('grid')); _ -> mochi_nth(I_5 + 1, erlang:get('grid')) end end), nil); _ -> case J_5 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_5, erlang:get('grid'), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_5 + 1, erlang:get('grid')); _ -> mochi_nth(I_5 + 1, erlang:get('grid')) end end)) + J_5 + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_5, erlang:get('grid'), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_5 + 1, erlang:get('grid')); _ -> mochi_nth(I_5 + 1, erlang:get('grid')) end end)); _ -> mochi_nth(J_5 + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_5, erlang:get('grid'), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_5 + 1, erlang:get('grid')); _ -> mochi_nth(I_5 + 1, erlang:get('grid')) end end)) end end) * (case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 1), erlang:get('grid'), nil); _ -> case (I_5 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 1) + 1, erlang:get('grid')) end end)) of true -> maps:get((J_5 + 1), (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 1), erlang:get('grid'), nil); _ -> case (I_5 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 1) + 1, erlang:get('grid')) end end), nil); _ -> case (J_5 + 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 1), erlang:get('grid'), nil); _ -> case (I_5 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 1) + 1, erlang:get('grid')) end end)) + (J_5 + 1) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 1), erlang:get('grid'), nil); _ -> case (I_5 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 1) + 1, erlang:get('grid')) end end)); _ -> mochi_nth((J_5 + 1) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 1), erlang:get('grid'), nil); _ -> case (I_5 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 1) + 1, erlang:get('grid')) end end)) end end)) * (case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 2), erlang:get('grid'), nil); _ -> case (I_5 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 2) + 1, erlang:get('grid')) end end)) of true -> maps:get((J_5 + 2), (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 2), erlang:get('grid'), nil); _ -> case (I_5 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 2) + 1, erlang:get('grid')) end end), nil); _ -> case (J_5 + 2) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 2), erlang:get('grid'), nil); _ -> case (I_5 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 2) + 1, erlang:get('grid')) end end)) + (J_5 + 2) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 2), erlang:get('grid'), nil); _ -> case (I_5 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 2) + 1, erlang:get('grid')) end end)); _ -> mochi_nth((J_5 + 2) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 2), erlang:get('grid'), nil); _ -> case (I_5 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 2) + 1, erlang:get('grid')) end end)) end end)) * (case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 3), erlang:get('grid'), nil); _ -> case (I_5 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 3) + 1, erlang:get('grid')) end end)) of true -> maps:get((J_5 + 3), (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 3), erlang:get('grid'), nil); _ -> case (I_5 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 3) + 1, erlang:get('grid')) end end), nil); _ -> case (J_5 + 3) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 3), erlang:get('grid'), nil); _ -> case (I_5 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 3) + 1, erlang:get('grid')) end end)) + (J_5 + 3) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 3), erlang:get('grid'), nil); _ -> case (I_5 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 3) + 1, erlang:get('grid')) end end)); _ -> mochi_nth((J_5 + 3) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_5 + 3), erlang:get('grid'), nil); _ -> case (I_5 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_5 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_5 + 3) + 1, erlang:get('grid')) end end)) end end)),
            case (Temp_3 > Maximum_5) of
        true -> Maximum_6 = Temp_3,
            Maximum_7 = Maximum_6;
        _ -> Maximum_7 = Maximum_5
    end,
            J_6 = (J_5 + 1),
            Fun_5_loop(Grid, I_5, J_6, Maximum_7);
        _ -> {Grid, I_5, J_5, Maximum_5}
    end
end,
{Grid, I_5, J_6, Maximum_7} = Fun_5(Grid, I_5, J_5, Maximum_5),
            I_6 = (I_5 + 1),
            Fun_6_loop(Grid, I_6, Maximum_7);
        _ -> {Grid, I_5, Maximum_5}
    end
end,
{Grid, I_6, Maximum_7} = Fun_6(Grid, I_5, Maximum_5),
        I_7 = 0,
        Fun_8 = fun Fun_8_loop(Grid, I_7, Maximum_7) ->
    case (I_7 < 17) of
        true ->
            J_7 = 3,
            Fun_7 = fun Fun_7_loop(Grid, I_7, J_7, Maximum_7) ->
    case (J_7 < 20) of
        true ->
            Temp_4 = ((((case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_7, erlang:get('grid'), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_7 + 1, erlang:get('grid')); _ -> mochi_nth(I_7 + 1, erlang:get('grid')) end end)) of true -> maps:get(J_7, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_7, erlang:get('grid'), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_7 + 1, erlang:get('grid')); _ -> mochi_nth(I_7 + 1, erlang:get('grid')) end end), nil); _ -> case J_7 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_7, erlang:get('grid'), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_7 + 1, erlang:get('grid')); _ -> mochi_nth(I_7 + 1, erlang:get('grid')) end end)) + J_7 + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_7, erlang:get('grid'), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_7 + 1, erlang:get('grid')); _ -> mochi_nth(I_7 + 1, erlang:get('grid')) end end)); _ -> mochi_nth(J_7 + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get(I_7, erlang:get('grid'), nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + I_7 + 1, erlang:get('grid')); _ -> mochi_nth(I_7 + 1, erlang:get('grid')) end end)) end end) * (case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 1), erlang:get('grid'), nil); _ -> case (I_7 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 1) + 1, erlang:get('grid')) end end)) of true -> maps:get((J_7 - 1), (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 1), erlang:get('grid'), nil); _ -> case (I_7 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 1) + 1, erlang:get('grid')) end end), nil); _ -> case (J_7 - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 1), erlang:get('grid'), nil); _ -> case (I_7 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 1) + 1, erlang:get('grid')) end end)) + (J_7 - 1) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 1), erlang:get('grid'), nil); _ -> case (I_7 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 1) + 1, erlang:get('grid')) end end)); _ -> mochi_nth((J_7 - 1) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 1), erlang:get('grid'), nil); _ -> case (I_7 + 1) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 1) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 1) + 1, erlang:get('grid')) end end)) end end)) * (case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 2), erlang:get('grid'), nil); _ -> case (I_7 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 2) + 1, erlang:get('grid')) end end)) of true -> maps:get((J_7 - 2), (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 2), erlang:get('grid'), nil); _ -> case (I_7 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 2) + 1, erlang:get('grid')) end end), nil); _ -> case (J_7 - 2) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 2), erlang:get('grid'), nil); _ -> case (I_7 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 2) + 1, erlang:get('grid')) end end)) + (J_7 - 2) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 2), erlang:get('grid'), nil); _ -> case (I_7 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 2) + 1, erlang:get('grid')) end end)); _ -> mochi_nth((J_7 - 2) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 2), erlang:get('grid'), nil); _ -> case (I_7 + 2) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 2) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 2) + 1, erlang:get('grid')) end end)) end end)) * (case erlang:is_map((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 3), erlang:get('grid'), nil); _ -> case (I_7 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 3) + 1, erlang:get('grid')) end end)) of true -> maps:get((J_7 - 3), (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 3), erlang:get('grid'), nil); _ -> case (I_7 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 3) + 1, erlang:get('grid')) end end), nil); _ -> case (J_7 - 3) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 3), erlang:get('grid'), nil); _ -> case (I_7 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 3) + 1, erlang:get('grid')) end end)) + (J_7 - 3) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 3), erlang:get('grid'), nil); _ -> case (I_7 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 3) + 1, erlang:get('grid')) end end)); _ -> mochi_nth((J_7 - 3) + 1, (case erlang:is_map(erlang:get('grid')) of true -> maps:get((I_7 + 3), erlang:get('grid'), nil); _ -> case (I_7 + 3) < 0 of true -> mochi_nth(erlang:length(erlang:get('grid')) + (I_7 + 3) + 1, erlang:get('grid')); _ -> mochi_nth((I_7 + 3) + 1, erlang:get('grid')) end end)) end end)),
            case (Temp_4 > Maximum_7) of
        true -> Maximum_8 = Temp_4,
            Maximum_9 = Maximum_8;
        _ -> Maximum_9 = Maximum_7
    end,
            J_8 = (J_7 + 1),
            Fun_7_loop(Grid, I_7, J_8, Maximum_9);
        _ -> {Grid, I_7, J_7, Maximum_7}
    end
end,
{Grid, I_7, J_8, Maximum_9} = Fun_7(Grid, I_7, J_7, Maximum_7),
            I_8 = (I_7 + 1),
            Fun_8_loop(Grid, I_8, Maximum_9);
        _ -> {Grid, I_7, Maximum_7}
    end
end,
{Grid, I_8, Maximum_9} = Fun_8(Grid, I_7, Maximum_7),
        Maximum_9
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('grid', [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8], [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0], [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65], [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91], [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80], [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50], [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70], [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21], [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72], [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95], [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92], [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57], [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58], [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40], [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66], [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69], [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36], [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16], [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54], [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]]),
    io:format("~ts~n", [mochi_str(max_product_four(erlang:get('grid')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
