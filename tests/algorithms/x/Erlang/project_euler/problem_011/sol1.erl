#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, largest_product/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (3d19777eda) on 2025-08-08 17:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

largest_product(Grid) ->
    try
        N_rows = erlang:length(Grid),
        N_cols = erlang:length((case erlang:is_map(Grid) of true -> maps:get(0, Grid, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Grid) + 0 + 1, Grid); _ -> mochi_nth(0 + 1, Grid) end end)),
        Largest = 0,
        I = 0,
        Fun_2 = fun Fun_2_loop(Grid, I, Largest, N_cols, N_rows) ->
    case (I < N_rows) of
        true ->
            J = 0,
            Fun = fun Fun_loop(Grid, I, J, Largest, N_cols, N_rows) ->
    case (J < N_cols) of
        true ->
            case (J =< (N_cols - 4)) of
        true -> Horz = ((((case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) of true -> maps:get(J, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) + J + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) end end) * (case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) of true -> maps:get((J + 1), (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end), nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) + (J + 1) + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)); _ -> mochi_nth((J + 1) + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) end end)) * (case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) of true -> maps:get((J + 2), (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end), nil); _ -> case (J + 2) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) + (J + 2) + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)); _ -> mochi_nth((J + 2) + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) end end)) * (case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) of true -> maps:get((J + 3), (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end), nil); _ -> case (J + 3) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) + (J + 3) + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)); _ -> mochi_nth((J + 3) + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) end end)),
            case (Horz > Largest) of
        true -> Largest_2 = Horz,
            Largest_3 = Largest_2;
        _ -> Largest_3 = Largest
    end,
            Horz_2 = Horz,
            Largest_4 = Largest_3;
        _ -> Horz_2 = nil,
            Largest_4 = Largest
    end,
            case (I =< (N_rows - 4)) of
        true -> Vert = ((((case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) of true -> maps:get(J, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) + J + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) end end) * (case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end)) of true -> maps:get(J, (case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end)) + J + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end)) end end)) * (case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end)) of true -> maps:get(J, (case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end)) + J + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end)) end end)) * (case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end)) of true -> maps:get(J, (case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end)) + J + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end)) end end)),
            case (Vert > Largest_4) of
        true -> Largest_5 = Vert,
            Largest_6 = Largest_5;
        _ -> Largest_6 = Largest_4
    end,
            case (J =< (N_cols - 4)) of
        true -> Lr = ((((case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) of true -> maps:get(J, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) + J + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) end end) * (case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end)) of true -> maps:get((J + 1), (case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end), nil); _ -> case (J + 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end)) + (J + 1) + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end)); _ -> mochi_nth((J + 1) + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end)) end end)) * (case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end)) of true -> maps:get((J + 2), (case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end), nil); _ -> case (J + 2) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end)) + (J + 2) + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end)); _ -> mochi_nth((J + 2) + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end)) end end)) * (case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end)) of true -> maps:get((J + 3), (case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end), nil); _ -> case (J + 3) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end)) + (J + 3) + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end)); _ -> mochi_nth((J + 3) + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end)) end end)),
            case (Lr > Largest_6) of
        true -> Largest_7 = Lr,
            Largest_8 = Largest_7;
        _ -> Largest_8 = Largest_6
    end,
            Largest_9 = Largest_8,
            Lr_2 = Lr;
        _ -> Largest_9 = Largest_6,
            Lr_2 = nil
    end,
            case (J >= 3) of
        true -> Rl = ((((case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) of true -> maps:get(J, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) + J + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Grid) of true -> maps:get(I, Grid, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Grid) + I + 1, Grid); _ -> mochi_nth(I + 1, Grid) end end)) end end) * (case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end)) of true -> maps:get((J - 1), (case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end), nil); _ -> case (J - 1) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end)) + (J - 1) + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end)); _ -> mochi_nth((J - 1) + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 1), Grid, nil); _ -> case (I + 1) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 1) + 1, Grid); _ -> mochi_nth((I + 1) + 1, Grid) end end)) end end)) * (case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end)) of true -> maps:get((J - 2), (case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end), nil); _ -> case (J - 2) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end)) + (J - 2) + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end)); _ -> mochi_nth((J - 2) + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 2), Grid, nil); _ -> case (I + 2) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 2) + 1, Grid); _ -> mochi_nth((I + 2) + 1, Grid) end end)) end end)) * (case erlang:is_map((case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end)) of true -> maps:get((J - 3), (case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end), nil); _ -> case (J - 3) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end)) + (J - 3) + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end)); _ -> mochi_nth((J - 3) + 1, (case erlang:is_map(Grid) of true -> maps:get((I + 3), Grid, nil); _ -> case (I + 3) < 0 of true -> mochi_nth(erlang:length(Grid) + (I + 3) + 1, Grid); _ -> mochi_nth((I + 3) + 1, Grid) end end)) end end)),
            case (Rl > Largest_9) of
        true -> Largest_10 = Rl,
            Largest_11 = Largest_10;
        _ -> Largest_11 = Largest_9
    end,
            Largest_12 = Largest_11,
            Rl_2 = Rl;
        _ -> Largest_12 = Largest_9,
            Rl_2 = nil
    end,
            Largest_13 = Largest_12,
            Lr_3 = Lr_2,
            Rl_3 = Rl_2,
            Vert_2 = Vert;
        _ -> Largest_13 = Largest_4,
            Lr_3 = nil,
            Rl_3 = nil,
            Vert_2 = nil
    end,
            J_2 = (J + 1),
            Fun_loop(Grid, I, J_2, Largest_13, N_cols, N_rows);
        _ -> {Grid, I, J, Largest, N_cols, N_rows}
    end
end,
{Grid, I, J_2, Largest_13, N_cols, N_rows} = Fun(Grid, I, J, Largest, N_cols, N_rows),
            I_2 = (I + 1),
            Fun_2_loop(Grid, I_2, Largest_13, N_cols, N_rows);
        _ -> {Grid, I, Largest, N_cols, N_rows}
    end
end,
{Grid, I_2, Largest_13, N_cols, N_rows} = Fun_2(Grid, I, Largest, N_cols, N_rows),
        Largest_13
    catch {return, Ret} -> Ret end.

main() ->
    try
        Grid_2 = [[8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8], [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0], [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65], [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91], [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80], [24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50], [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70], [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21], [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72], [21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95], [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92], [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57], [86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58], [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40], [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66], [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69], [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36], [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16], [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54], [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]],
        Ans = largest_product(Grid_2),
        io:format("~ts~n", [mochi_str(Ans)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
