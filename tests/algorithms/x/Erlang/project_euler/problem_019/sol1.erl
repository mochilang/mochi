#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_leap/1, count_sundays/0]).

% Generated by Mochi transpiler v0.10.61 (3d19777eda) on 2025-08-08 17:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

is_leap(Year) ->
    try
        (case (((mochi_mod(Year, 4) == 0) andalso (mochi_mod(Year, 100) /= 0)) orelse (mochi_mod(Year, 400) == 0)) of
    true -> true;
    _ -> false
end)
    catch {return, Ret} -> Ret end.

count_sundays() ->
    try
        Days_per_month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
        Day = 6,
        Month = 1,
        Year_2 = 1901,
        Sundays = 0,
        Fun = fun Fun_loop(Day, Days_per_month, Month, Sundays, Year_2) ->
    case (Year_2 < 2001) of
        true ->
            Day_2 = (Day + 7),
            case is_leap(Year_2) of
        true -> case ((Day_2 > (case erlang:is_map(Days_per_month) of true -> maps:get((Month - 1), Days_per_month, nil); _ -> case (Month - 1) < 0 of true -> mochi_nth(erlang:length(Days_per_month) + (Month - 1) + 1, Days_per_month); _ -> mochi_nth((Month - 1) + 1, Days_per_month) end end)) andalso (Month /= 2)) of
        true -> Month_2 = (Month + 1),
            Day_3 = (Day_2 - (case erlang:is_map(Days_per_month) of true -> maps:get((Month_2 - 2), Days_per_month, nil); _ -> case (Month_2 - 2) < 0 of true -> mochi_nth(erlang:length(Days_per_month) + (Month_2 - 2) + 1, Days_per_month); _ -> mochi_nth((Month_2 - 2) + 1, Days_per_month) end end)),
            Day_6 = Day_3,
            Month_5 = Month_2;
        _ -> case ((Day_2 > 29) andalso (Month == 2)) of
        true -> Month_3 = (Month + 1),
            Day_4 = (Day_2 - 29),
            Day_5 = Day_4,
            Month_4 = Month_3;
        _ -> Day_5 = Day_2,
            Month_4 = Month
    end,
            Day_6 = Day_5,
            Month_5 = Month_4
    end,
            Day_9 = Day_6,
            Month_8 = Month_5;
        _ -> case (Day_2 > (case erlang:is_map(Days_per_month) of true -> maps:get((Month - 1), Days_per_month, nil); _ -> case (Month - 1) < 0 of true -> mochi_nth(erlang:length(Days_per_month) + (Month - 1) + 1, Days_per_month); _ -> mochi_nth((Month - 1) + 1, Days_per_month) end end)) of
        true -> Month_6 = (Month + 1),
            Day_7 = (Day_2 - (case erlang:is_map(Days_per_month) of true -> maps:get((Month_6 - 2), Days_per_month, nil); _ -> case (Month_6 - 2) < 0 of true -> mochi_nth(erlang:length(Days_per_month) + (Month_6 - 2) + 1, Days_per_month); _ -> mochi_nth((Month_6 - 2) + 1, Days_per_month) end end)),
            Day_8 = Day_7,
            Month_7 = Month_6;
        _ -> Day_8 = Day_2,
            Month_7 = Month
    end,
            Day_9 = Day_8,
            Month_8 = Month_7
    end,
            case (Month_8 > 12) of
        true -> Year_3 = (Year_2 + 1),
            Month_9 = 1,
            Month_10 = Month_9,
            Year_4 = Year_3;
        _ -> Month_10 = Month_8,
            Year_4 = Year_2
    end,
            case ((Year_4 < 2001) andalso (Day_9 == 1)) of
        true -> Sundays_2 = (Sundays + 1),
            Sundays_3 = Sundays_2;
        _ -> Sundays_3 = Sundays
    end,
            Fun_loop(Day_9, Days_per_month, Month_10, Sundays_3, Year_4);
        _ -> {Day, Days_per_month, Month, Sundays, Year_2}
    end
end,
{Day_9, Days_per_month, Month_10, Sundays_3, Year_4} = Fun(Day, Days_per_month, Month, Sundays, Year_2),
        Sundays_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(count_sundays())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
