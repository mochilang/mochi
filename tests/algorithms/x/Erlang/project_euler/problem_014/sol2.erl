#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, collatz_length/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (3d19777eda) on 2025-08-08 17:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

collatz_length(N) ->
    try
        Num = N,
        Sequence = [],
        Fun = fun Fun_loop(N, Num, Sequence) ->
    case mochi_not(maps:is_key(Num, erlang:get('collatz_cache'))) of
        true ->
            Sequence_2 = lists:append((case Sequence of nil -> []; _ -> Sequence end), [Num]),
            case (mochi_mod(Num, 2) == 0) of
        true -> Num_2 = mochi_to_int((Num div 2)),
            Num_4 = Num_2;
        _ -> Num_3 = ((3 * Num) + 1),
            Num_4 = Num_3
    end,
            Fun_loop(N, Num_4, Sequence_2);
        _ -> {N, Num, Sequence}
    end
end,
{N, Num_4, Sequence_2} = Fun(N, Num, Sequence),
        Length = maps:get(Num_4, erlang:get('collatz_cache'), nil),
        I = (erlang:length(Sequence_2) - 1),
        Fun_2 = fun Fun_2_loop(I, Length, N, Num_4, Sequence_2) ->
    case (I >= 0) of
        true ->
            Length_2 = (Length + 1),
            Collatz_cache_tmp = lists:sublist(erlang:get('collatz_cache'), (case erlang:is_map(Sequence_2) of true -> maps:get(I, Sequence_2, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sequence_2) + I + 1, Sequence_2); _ -> mochi_nth(I + 1, Sequence_2) end end)) ++ [Length_2] ++ lists:nthtail((case erlang:is_map(Sequence_2) of true -> maps:get(I, Sequence_2, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Sequence_2) + I + 1, Sequence_2); _ -> mochi_nth(I + 1, Sequence_2) end end) + 1, erlang:get('collatz_cache')),
            erlang:put('collatz_cache', Collatz_cache_tmp),
            I_2 = (I - 1),
            Fun_2_loop(I_2, Length_2, N, Num_4, Sequence_2);
        _ -> {I, Length, N, Num_4, Sequence_2}
    end
end,
{I_2, Length_2, N, Num_4, Sequence_2} = Fun_2(I, Length, N, Num_4, Sequence_2),
        Length_2
    catch {return, Ret} -> Ret end.

solution(Limit) ->
    try
        Max_len = 0,
        Max_start = 1,
        I_3 = 1,
        Fun_3 = fun Fun_3_loop(I_3, Limit, Max_len, Max_start) ->
    case (I_3 < Limit) of
        true ->
            Length_3 = collatz_length(I_3),
            case (Length_3 > Max_len) of
        true -> Max_len_2 = Length_3,
            Max_start_2 = I_3,
            Max_len_3 = Max_len_2,
            Max_start_3 = Max_start_2;
        _ -> Max_len_3 = Max_len,
            Max_start_3 = Max_start
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Limit, Max_len_3, Max_start_3);
        _ -> {I_3, Limit, Max_len, Max_start}
    end
end,
{I_4, Limit, Max_len_3, Max_start_3} = Fun_3(I_3, Limit, Max_len, Max_start),
        Max_start_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('collatz_cache', #{1 => 1}),
    erlang:put('input_str', ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)())),
    erlang:put('limit', mochi_to_int(erlang:get('input_str'))),
    io:format("~ts~n", [mochi_repr(solution(erlang:get('limit')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
