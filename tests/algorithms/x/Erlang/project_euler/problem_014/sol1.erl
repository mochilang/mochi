#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (3d19777eda) on 2025-08-08 17:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

solution(N) ->
    try
        Counters = nil,
        I = 0,
        Fun = fun Fun_loop(Counters, I, N) ->
    case (I =< N) of
        true ->
            Counters_2 = lists:append((case Counters of nil -> []; _ -> Counters end), [0]),
            I_2 = (I + 1),
            Fun_loop(Counters_2, I_2, N);
        _ -> {Counters, I, N}
    end
end,
{Counters_2, I_2, N} = Fun(Counters, I, N),
        Counters_3 = lists:sublist(Counters_2, 1) ++ [1] ++ lists:nthtail(1 + 1, Counters_2),
        Largest_number = 1,
        Pre_counter = 1,
        Start = 2,
        Fun_3 = fun Fun_3_loop(Counters_3, I_2, Largest_number, N, Pre_counter, Start) ->
    case (Start < N) of
        true ->
            try
                Number = Start,
                Counter = 0,
                Fun_2 = fun Fun_2_loop(Counter, Counters_3, I_2, Largest_number, N, Number, Pre_counter, Start) ->
    case true of
        true ->
            try
                case ((Number < erlang:length(Counters_3)) andalso ((case erlang:is_map(Counters_3) of true -> maps:get(Number, Counters_3, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Counters_3) + Number + 1, Counters_3); _ -> mochi_nth(Number + 1, Counters_3) end end) /= 0)) of
        true -> Counter_2 = (Counter + (case erlang:is_map(Counters_3) of true -> maps:get(Number, Counters_3, nil); _ -> case Number < 0 of true -> mochi_nth(erlang:length(Counters_3) + Number + 1, Counters_3); _ -> mochi_nth(Number + 1, Counters_3) end end)),
            throw({break, Counter_2, Counters_3, I_2, Largest_number, N, Number, Pre_counter, Start}),
            Counter_3 = Counter_2;
        _ -> Counter_3 = Counter
    end,
                case (mochi_mod(Number, 2) == 0) of
        true -> Number_2 = (Number div 2),
            Number_4 = Number_2;
        _ -> Number_3 = ((3 * Number) + 1),
            Number_4 = Number_3
    end,
                Counter_4 = (Counter_3 + 1),
                Fun_2_loop(Counter_4, Counters_3, I_2, Largest_number, N, Number_4, Pre_counter, Start)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7} -> Fun_2_loop(C0, C1, C2, C3, C4, C5, C6, C7);
                {break, B0, B1, B2, B3, B4, B5, B6, B7} -> {B0, B1, B2, B3, B4, B5, B6, B7}
            end;
        _ -> {Counter, Counters_3, I_2, Largest_number, N, Number, Pre_counter, Start}
    end
end,
{Counter_4, Counters_3, I_2, Largest_number, N, Number_4, Pre_counter, Start} = Fun_2(Counter, Counters_3, I_2, Largest_number, N, Number, Pre_counter, Start),
                case ((Start < erlang:length(Counters_3)) andalso ((case erlang:is_map(Counters_3) of true -> maps:get(Start, Counters_3, nil); _ -> case Start < 0 of true -> mochi_nth(erlang:length(Counters_3) + Start + 1, Counters_3); _ -> mochi_nth(Start + 1, Counters_3) end end) == 0)) of
        true -> Counters_4 = lists:sublist(Counters_3, Start) ++ [Counter_4] ++ lists:nthtail(Start + 1, Counters_3),
            Counters_5 = Counters_4;
        _ -> Counters_5 = Counters_3
    end,
                case (Counter_4 > Pre_counter) of
        true -> Largest_number_2 = Start,
            Pre_counter_2 = Counter_4,
            Largest_number_3 = Largest_number_2,
            Pre_counter_3 = Pre_counter_2;
        _ -> Largest_number_3 = Largest_number,
            Pre_counter_3 = Pre_counter
    end,
                Start_2 = (Start + 1),
                Fun_3_loop(Counters_5, I_2, Largest_number_3, N, Pre_counter_3, Start_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_3_loop(C0, C1, C2, C3, C4, C5);
                {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5}
            end;
        _ -> {Counters_3, I_2, Largest_number, N, Pre_counter, Start}
    end
end,
{Counters_5, I_2, Largest_number_3, N, Pre_counter_3, Start_2} = Fun_3(Counters_3, I_2, Largest_number, N, Pre_counter, Start),
        Largest_number_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('input_str', ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)())),
    erlang:put('n', mochi_to_int(erlang:get('input_str'))),
    io:format("~ts~n", [mochi_str(solution(erlang:get('n')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
