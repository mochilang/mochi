#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, contains/2, solution/2, main/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

contains(Lst, Val) ->
    try
        Fun = fun Fun_loop(List, Lst, Val) ->
    case List of
        [] -> {Lst, Val};
        [X|X_rest] ->
            case (X == Val) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_loop(X_rest, Lst, Val);
        _ -> {Lst, Val}
    end
end,
{Lst, Val} = Fun(Lst, Lst, Val),
        false
    catch {return, Ret} -> Ret end.

solution(Numerator, Limit) ->
    try
        The_digit = 1,
        Longest_len = 0,
        Fun_2 = fun Fun_2_loop(List, Limit, Longest_len, Numerator, The_digit) ->
    case List of
        [] -> {Limit, Longest_len, Numerator, The_digit};
        [D|D_rest] ->
            Remainders = [],
            Rem = Numerator,
            Count = 1,
            Fun_3 = fun Fun_3_loop(Count, D, Limit, Longest_len, Numerator, Rem, Remainders, The_digit) ->
    case (Count =< Limit) of
        true ->
            case mochi_member(Rem, Remainders) of
        true -> case (Longest_len < erlang:length(Remainders)) of
        true -> Longest_len_2 = erlang:length(Remainders),
            The_digit_2 = D,
            Longest_len_3 = Longest_len_2,
            The_digit_3 = The_digit_2;
        _ -> Longest_len_3 = Longest_len,
            The_digit_3 = The_digit
    end,
            Longest_len_4 = Longest_len_3,
            Rem_3 = Rem,
            Remainders_3 = Remainders,
            The_digit_4 = The_digit_3;
        _ -> Remainders_2 = lists:append((case Remainders of nil -> []; _ -> Remainders end), [Rem]),
            Rem_2 = mochi_mod((Rem * 10), D),
            Longest_len_4 = Longest_len,
            Rem_3 = Rem_2,
            Remainders_3 = Remainders_2,
            The_digit_4 = The_digit
    end,
            Count_2 = (Count + 1),
            Fun_3_loop(Count_2, D, Limit, Longest_len_4, Numerator, Rem_3, Remainders_3, The_digit_4);
        _ -> {Count, D, Limit, Longest_len, Numerator, Rem, Remainders, The_digit}
    end
end,
{Count_2, D, Limit, Longest_len_4, Numerator, Rem_3, Remainders_3, The_digit_4} = Fun_3(Count, D, Limit, Longest_len, Numerator, Rem, Remainders, The_digit),
            Fun_2_loop(D_rest, Limit, Longest_len_4, Numerator, The_digit_4);
        _ -> {Limit, Longest_len, Numerator, The_digit}
    end
end,
{Limit, Longest_len_4, Numerator, The_digit_4} = Fun_2(lists:seq(Numerator, (Limit) - 1), Limit, Longest_len, Numerator, The_digit),
        The_digit_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_str(solution(1, 10))]),
        io:format("~ts~n", [mochi_str(solution(10, 100))]),
        io:format("~ts~n", [mochi_str(solution(10, 1000))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
