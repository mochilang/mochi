#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, solution/0, test_solution/0, main/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

solution() ->
    try
        Targets = [1, 10, 100, 1000, 10000, 100000, 1000000],
        Idx = 0,
        Product = 1,
        Count = 0,
        I = 1,
        Fun_2 = fun Fun_2_loop(Count, I, Idx, Product, Targets) ->
    case (Idx < erlang:length(Targets)) of
        true ->
            try
                S = mochi_str(I),
                J = 0,
                Fun = fun Fun_loop(Count, I, Idx, J, Product, S, Targets) ->
    case (J < erlang:length(S)) of
        true ->
            try
                Count_2 = (Count + 1),
                case (Count_2 == (case erlang:is_map(Targets) of true -> maps:get(Idx, Targets, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Targets) + Idx + 1, Targets); _ -> mochi_nth(Idx + 1, Targets) end end)) of
        true -> Product_2 = (Product * mochi_to_int(string:substr(S, J + 1, 1))),
            Idx_2 = (Idx + 1),
            case (Idx_2 == erlang:length(Targets)) of
        true -> throw({break, Count_2, I, Idx_2, J, Product_2, S, Targets});
        _ -> ok
    end,
            Idx_3 = Idx_2,
            Product_3 = Product_2;
        _ -> Idx_3 = Idx,
            Product_3 = Product
    end,
                J_2 = (J + 1),
                Fun_loop(Count_2, I, Idx_3, J_2, Product_3, S, Targets)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {Count, I, Idx, J, Product, S, Targets}
    end
end,
{Count_2, I, Idx_3, J_2, Product_3, S, Targets} = Fun(Count, I, Idx, J, Product, S, Targets),
                I_2 = (I + 1),
                Fun_2_loop(Count_2, I_2, Idx_3, Product_3, Targets)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_2_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Count, I, Idx, Product, Targets}
    end
end,
{Count_2, I_2, Idx_3, Product_3, Targets} = Fun_2(Count, I, Idx, Product, Targets),
        Product_3
    catch {return, Ret} -> Ret end.

test_solution() ->
    try
        case (solution() /= 210) of
        true -> erlang:error({panic, "solution failed"});
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_solution(),
        io:format("~ts~n", [mochi_str(solution())]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
