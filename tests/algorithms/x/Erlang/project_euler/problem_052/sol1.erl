#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, digits_count/1, equal_lists/2, solution/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

digits_count(N) ->
    try
        Counts = [],
        I = 0,
        Fun = fun Fun_loop(Counts, I, N) ->
    case (I < 10) of
        true ->
            Counts_2 = lists:append((case Counts of nil -> []; _ -> Counts end), [0]),
            I_2 = (I + 1),
            Fun_loop(Counts_2, I_2, N);
        _ -> {Counts, I, N}
    end
end,
{Counts_2, I_2, N} = Fun(Counts, I, N),
        X = N,
        case (X == 0) of
        true -> Counts_3 = lists:sublist(Counts_2, 0) ++ [((case erlang:is_map(Counts_2) of true -> maps:get(0, Counts_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Counts_2) + 0 + 1, Counts_2); _ -> mochi_nth(0 + 1, Counts_2) end end) + 1)] ++ lists:nthtail(0 + 1, Counts_2),
            Counts_4 = Counts_3;
        _ -> Counts_4 = Counts_2
    end,
        Fun_2 = fun Fun_2_loop(Counts_4, I_2, N, X) ->
    case (X > 0) of
        true ->
            D = mochi_mod(X, 10),
            Counts_5 = lists:sublist(Counts_4, D) ++ [((case erlang:is_map(Counts_4) of true -> maps:get(D, Counts_4, nil); _ -> case D < 0 of true -> mochi_nth(erlang:length(Counts_4) + D + 1, Counts_4); _ -> mochi_nth(D + 1, Counts_4) end end) + 1)] ++ lists:nthtail(D + 1, Counts_4),
            X_2 = (X div 10),
            Fun_2_loop(Counts_5, I_2, N, X_2);
        _ -> {Counts_4, I_2, N, X}
    end
end,
{Counts_5, I_2, N, X_2} = Fun_2(Counts_4, I_2, N, X),
        Counts_5
    catch {return, Ret} -> Ret end.

equal_lists(A, B) ->
    try
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(A, B, I_3) ->
    case (I_3 < erlang:length(A)) of
        true ->
            case ((case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end) /= (case erlang:is_map(B) of true -> maps:get(I_3, B, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(B) + I_3 + 1, B); _ -> mochi_nth(I_3 + 1, B) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(A, B, I_4);
        _ -> {A, B, I_3}
    end
end,
{A, B, I_4} = Fun_3(A, B, I_3),
        true
    catch {return, Ret} -> Ret end.

solution() ->
    try
        I_5 = 1,
        Fun_4 = fun Fun_4_loop(I_5) ->
    case true of
        true ->
            C = digits_count(I_5),
            case ((((equal_lists(C, digits_count((2 * I_5))) andalso equal_lists(C, digits_count((3 * I_5)))) andalso equal_lists(C, digits_count((4 * I_5)))) andalso equal_lists(C, digits_count((5 * I_5)))) andalso equal_lists(C, digits_count((6 * I_5)))) of
        true -> throw({return, I_5});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_4_loop(I_6);
        _ -> {I_5}
    end
end,
{I_6} = Fun_4(I_5),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
