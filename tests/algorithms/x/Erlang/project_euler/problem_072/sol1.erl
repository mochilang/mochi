#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, totients/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

totients(Limit) ->
    try
        Is_prime = [],
        Phi = [],
        Primes = [],
        I = 0,
        Fun = fun Fun_loop(I, Is_prime, Limit, Phi, Primes) ->
    case (I =< Limit) of
        true ->
            Is_prime_2 = lists:append((case Is_prime of nil -> []; _ -> Is_prime end), [true]),
            Phi_2 = lists:append((case Phi of nil -> []; _ -> Phi end), [(I - 1)]),
            I_2 = (I + 1),
            Fun_loop(I_2, Is_prime_2, Limit, Phi_2, Primes);
        _ -> {I, Is_prime, Limit, Phi, Primes}
    end
end,
{I_2, Is_prime_2, Limit, Phi_2, Primes} = Fun(I, Is_prime, Limit, Phi, Primes),
        I_3 = 2,
        Fun_3 = fun Fun_3_loop(I_3, Is_prime_2, Limit, Phi_2, Primes) ->
    case (I_3 =< Limit) of
        true ->
            try
                case (case erlang:is_map(Is_prime_2) of true -> maps:get(I_3, Is_prime_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Is_prime_2) + I_3 + 1, Is_prime_2); _ -> mochi_nth(I_3 + 1, Is_prime_2) end end) of
        true -> Primes_2 = lists:append((case Primes of nil -> []; _ -> Primes end), [I_3]),
            Primes_3 = Primes_2;
        _ -> Primes_3 = Primes
    end,
                J = 0,
                Fun_2 = fun Fun_2_loop(I_3, Is_prime_2, J, Limit, Phi_2, Primes_3) ->
    case (J < erlang:length(Primes_3)) of
        true ->
            try
                P = (case erlang:is_map(Primes_3) of true -> maps:get(J, Primes_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Primes_3) + J + 1, Primes_3); _ -> mochi_nth(J + 1, Primes_3) end end),
                case ((I_3 * P) > Limit) of
        true -> throw({break, I_3, Is_prime_2, J, Limit, Phi_2, Primes_3});
        _ -> ok
    end,
                Is_prime_3 = lists:sublist(Is_prime_2, (I_3 * P)) ++ [false] ++ lists:nthtail((I_3 * P) + 1, Is_prime_2),
                case (mochi_mod(I_3, P) == 0) of
        true -> Phi_3 = lists:sublist(Phi_2, (I_3 * P)) ++ [((case erlang:is_map(Phi_2) of true -> maps:get(I_3, Phi_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Phi_2) + I_3 + 1, Phi_2); _ -> mochi_nth(I_3 + 1, Phi_2) end end) * P)] ++ lists:nthtail((I_3 * P) + 1, Phi_2),
            throw({break, I_3, Is_prime_3, J, Limit, Phi_3, Primes_3}),
            Phi_4 = Phi_3;
        _ -> Phi_4 = Phi_2
    end,
                Phi_5 = lists:sublist(Phi_4, (I_3 * P)) ++ [((case erlang:is_map(Phi_4) of true -> maps:get(I_3, Phi_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Phi_4) + I_3 + 1, Phi_4); _ -> mochi_nth(I_3 + 1, Phi_4) end end) * (P - 1))] ++ lists:nthtail((I_3 * P) + 1, Phi_4),
                J_2 = (J + 1),
                Fun_2_loop(I_3, Is_prime_3, J_2, Limit, Phi_5, Primes_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_2_loop(C0, C1, C2, C3, C4, C5);
                {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5}
            end;
        _ -> {I_3, Is_prime_2, J, Limit, Phi_2, Primes_3}
    end
end,
{I_3, Is_prime_3, J_2, Limit, Phi_5, Primes_3} = Fun_2(I_3, Is_prime_2, J, Limit, Phi_2, Primes_3),
                I_4 = (I_3 + 1),
                Fun_3_loop(I_4, Is_prime_3, Limit, Phi_5, Primes_3)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_3_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {I_3, Is_prime_2, Limit, Phi_2, Primes}
    end
end,
{I_4, Is_prime_3, Limit, Phi_5, Primes_3} = Fun_3(I_3, Is_prime_2, Limit, Phi_2, Primes),
        Phi_5
    catch {return, Ret} -> Ret end.

solution(Limit_2) ->
    try
        Phi_6 = totients(Limit_2),
        Total = 0,
        K = 2,
        Fun_4 = fun Fun_4_loop(K, Limit_2, Phi_6, Total) ->
    case (K =< Limit_2) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Phi_6) of true -> maps:get(K, Phi_6, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Phi_6) + K + 1, Phi_6); _ -> mochi_nth(K + 1, Phi_6) end end)),
            K_2 = (K + 1),
            Fun_4_loop(K_2, Limit_2, Phi_6, Total_2);
        _ -> {K, Limit_2, Phi_6, Total}
    end
end,
{K_2, Limit_2, Phi_6, Total_2} = Fun_4(K, Limit_2, Phi_6, Total),
        Total_2
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution(1000000))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
