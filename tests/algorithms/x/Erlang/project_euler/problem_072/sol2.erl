#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, solution/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

solution(Limit) ->
    try
        Phi = [],
        I = 0,
        Fun = fun Fun_loop(I, Limit, Phi) ->
    case (I =< Limit) of
        true ->
            Phi_2 = lists:append((case Phi of nil -> []; _ -> Phi end), [I]),
            I_2 = (I + 1),
            Fun_loop(I_2, Limit, Phi_2);
        _ -> {I, Limit, Phi}
    end
end,
{I_2, Limit, Phi_2} = Fun(I, Limit, Phi),
        N = 2,
        Fun_4 = fun Fun_4_loop(I_2, Limit, N, Phi_2) ->
    case (N =< Limit) of
        true ->
            case ((case erlang:is_map(Phi_2) of true -> maps:get(N, Phi_2, nil); _ -> case N < 0 of true -> mochi_nth(erlang:length(Phi_2) + N + 1, Phi_2); _ -> mochi_nth(N + 1, Phi_2) end end) == N) of
        true -> K = N,
            Fun_2 = fun Fun_2_loop(I_2, K, Limit, N, Phi_2) ->
    case (K =< Limit) of
        true ->
            Phi_3 = lists:sublist(Phi_2, K) ++ [((case erlang:is_map(Phi_2) of true -> maps:get(K, Phi_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Phi_2) + K + 1, Phi_2); _ -> mochi_nth(K + 1, Phi_2) end end) - mochi_safe_div((case erlang:is_map(Phi_2) of true -> maps:get(K, Phi_2, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Phi_2) + K + 1, Phi_2); _ -> mochi_nth(K + 1, Phi_2) end end), N))] ++ lists:nthtail(K + 1, Phi_2),
            K_2 = (K + N),
            Fun_2_loop(I_2, K_2, Limit, N, Phi_3);
        _ -> {I_2, K, Limit, N, Phi_2}
    end
end,
{I_2, K_2, Limit, N, Phi_3} = Fun_2(I_2, K, Limit, N, Phi_2),
            Fun_3 = Fun_2,
            K_3 = K_2,
            Phi_4 = Phi_3;
        _ -> Fun_3 = Fun,
            K_3 = nil,
            Phi_4 = Phi_2
    end,
            N_2 = (N + 1),
            Fun_4_loop(I_2, Limit, N_2, Phi_4);
        _ -> {I_2, Limit, N, Phi_2}
    end
end,
{I_2, Limit, N_2, Phi_4} = Fun_4(I_2, Limit, N, Phi_2),
        Total = 0,
        M = 2,
        Fun_5 = fun Fun_5_loop(I_2, Limit, M, N_2, Phi_4, Total) ->
    case (M =< Limit) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Phi_4) of true -> maps:get(M, Phi_4, nil); _ -> case M < 0 of true -> mochi_nth(erlang:length(Phi_4) + M + 1, Phi_4); _ -> mochi_nth(M + 1, Phi_4) end end)),
            M_2 = (M + 1),
            Fun_5_loop(I_2, Limit, M_2, N_2, Phi_4, Total_2);
        _ -> {I_2, Limit, M, N_2, Phi_4, Total}
    end
end,
{I_2, Limit, M_2, N_2, Phi_4, Total_2} = Fun_5(I_2, Limit, M, N_2, Phi_4, Total),
        Total_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(solution(8))]),
        io:format("~ts~n", [mochi_repr(solution(1000))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
