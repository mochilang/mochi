#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, digit_factorial_sum/1, chain_len/2, solution/2]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

digit_factorial_sum(Number) ->
    try
        case (Number < 0) of
        true -> erlang:error({panic, "Parameter number must be greater than or equal to 0"});
        _ -> ok
    end,
        case (Number == 0) of
        true -> throw({return, (case erlang:is_map(erlang:get('DIGIT_FACTORIAL')) of true -> maps:get(0, erlang:get('DIGIT_FACTORIAL'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('DIGIT_FACTORIAL')) + 0 + 1, erlang:get('DIGIT_FACTORIAL')); _ -> mochi_nth(0 + 1, erlang:get('DIGIT_FACTORIAL')) end end)});
        _ -> ok
    end,
        N = Number,
        Total = 0,
        Fun = fun Fun_loop(N, Number, Total) ->
    case (N > 0) of
        true ->
            Digit = mochi_mod(N, 10),
            Total_2 = (Total + (case erlang:is_map(erlang:get('DIGIT_FACTORIAL')) of true -> maps:get(Digit, erlang:get('DIGIT_FACTORIAL'), nil); _ -> case Digit < 0 of true -> mochi_nth(erlang:length(erlang:get('DIGIT_FACTORIAL')) + Digit + 1, erlang:get('DIGIT_FACTORIAL')); _ -> mochi_nth(Digit + 1, erlang:get('DIGIT_FACTORIAL')) end end)),
            N_2 = (N div 10),
            Fun_loop(N_2, Number, Total_2);
        _ -> {N, Number, Total}
    end
end,
{N_2, Number, Total_2} = Fun(N, Number, Total),
        Total_2
    catch {return, Ret} -> Ret end.

chain_len(N_3, Limit) ->
    try
        Seen = #{},
        Length = 0,
        Cur = N_3,
        Fun_2 = fun Fun_2_loop(Cur, Length, Limit, N_3, Seen) ->
    case ((maps:is_key(Cur, Seen) == false) andalso (Length =< Limit)) of
        true ->
            Seen_2 = maps:put(Cur, true, Seen),
            Length_2 = (Length + 1),
            Cur_2 = digit_factorial_sum(Cur),
            Fun_2_loop(Cur_2, Length_2, Limit, N_3, Seen_2);
        _ -> {Cur, Length, Limit, N_3, Seen}
    end
end,
{Cur_2, Length_2, Limit, N_3, Seen_2} = Fun_2(Cur, Length, Limit, N_3, Seen),
        Length_2
    catch {return, Ret} -> Ret end.

solution(Chain_length, Number_limit) ->
    try
        case ((Chain_length =< 0) orelse (Number_limit =< 0)) of
        true -> erlang:error({panic, "Parameters chain_length and number_limit must be greater than 0"});
        _ -> ok
    end,
        Count = 0,
        Start = 1,
        Fun_3 = fun Fun_3_loop(Chain_length, Count, Number_limit, Start) ->
    case (Start < Number_limit) of
        true ->
            case (chain_len(Start, Chain_length) == Chain_length) of
        true -> Count_2 = (Count + 1),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            Start_2 = (Start + 1),
            Fun_3_loop(Chain_length, Count_3, Number_limit, Start_2);
        _ -> {Chain_length, Count, Number_limit, Start}
    end
end,
{Chain_length, Count_3, Number_limit, Start_2} = Fun_3(Chain_length, Count, Number_limit, Start),
        Count_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('DIGIT_FACTORIAL', [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]),
    io:format("~ts~n", [mochi_str(solution(60, 1000000))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
