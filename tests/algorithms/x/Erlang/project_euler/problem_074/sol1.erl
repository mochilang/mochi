#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sum_digit_factorials/1, chain_length/1, solution/2]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

sum_digit_factorials(N) ->
    try
        case maps:is_key(N, erlang:get('cache_sum_digit_factorials')) of
        true -> throw({return, maps:get(N, erlang:get('cache_sum_digit_factorials'), nil)});
        _ -> ok
    end,
        M = N,
        Ret = 0,
        case (M == 0) of
        true -> Ret_2 = (case erlang:is_map(erlang:get('DIGIT_FACTORIALS')) of true -> maps:get(0, erlang:get('DIGIT_FACTORIALS'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('DIGIT_FACTORIALS')) + 0 + 1, erlang:get('DIGIT_FACTORIALS')); _ -> mochi_nth(0 + 1, erlang:get('DIGIT_FACTORIALS')) end end),
            Ret_3 = Ret_2;
        _ -> Ret_3 = Ret
    end,
        Fun = fun Fun_loop(M, N, Ret_3) ->
    case (M > 0) of
        true ->
            Digit = mochi_mod(M, 10),
            Ret_4 = (Ret_3 + (case erlang:is_map(erlang:get('DIGIT_FACTORIALS')) of true -> maps:get(Digit, erlang:get('DIGIT_FACTORIALS'), nil); _ -> case Digit < 0 of true -> mochi_nth(erlang:length(erlang:get('DIGIT_FACTORIALS')) + Digit + 1, erlang:get('DIGIT_FACTORIALS')); _ -> mochi_nth(Digit + 1, erlang:get('DIGIT_FACTORIALS')) end end)),
            M_2 = (M div 10),
            Fun_loop(M_2, N, Ret_4);
        _ -> {M, N, Ret_3}
    end
end,
{M_2, N, Ret_4} = Fun(M, N, Ret_3),
        Cache_sum_digit_factorials_tmp = lists:sublist(erlang:get('cache_sum_digit_factorials'), N) ++ [Ret_4] ++ lists:nthtail(N + 1, erlang:get('cache_sum_digit_factorials')),
        erlang:put('cache_sum_digit_factorials', Cache_sum_digit_factorials_tmp),
        Ret_4
    catch {return, RetCatch} -> RetCatch end.

chain_length(N_2) ->
    try
        case maps:is_key(N_2, erlang:get('chain_length_cache')) of
        true -> throw({return, maps:get(N_2, erlang:get('chain_length_cache'), nil)});
        _ -> ok
    end,
        Chain = [],
        Seen = #{},
        Current = N_2,
        Fun_6 = fun Fun_6_loop(Chain, Current, N_2, Seen) ->
    case true of
        true ->
            case maps:is_key(Current, erlang:get('chain_length_cache')) of
        true -> Known = maps:get(Current, erlang:get('chain_length_cache'), nil),
            Total = Known,
            I = (erlang:length(Chain) - 1),
            Fun_2 = fun Fun_2_loop(Chain, Current, I, Known, N_2, Seen, Total) ->
    case (I >= 0) of
        true ->
            Total_2 = (Total + 1),
            Chain_length_cache_tmp = lists:sublist(erlang:get('chain_length_cache'), (case erlang:is_map(Chain) of true -> maps:get(I, Chain, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Chain) + I + 1, Chain); _ -> mochi_nth(I + 1, Chain) end end)) ++ [Total_2] ++ lists:nthtail((case erlang:is_map(Chain) of true -> maps:get(I, Chain, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Chain) + I + 1, Chain); _ -> mochi_nth(I + 1, Chain) end end) + 1, erlang:get('chain_length_cache')),
            erlang:put('chain_length_cache', Chain_length_cache_tmp),
            I_2 = (I - 1),
            Fun_2_loop(Chain, Current, I_2, Known, N_2, Seen, Total_2);
        _ -> {Chain, Current, I, Known, N_2, Seen, Total}
    end
end,
{Chain, Current, I_2, Known, N_2, Seen, Total_2} = Fun_2(Chain, Current, I, Known, N_2, Seen, Total),
            throw({return, maps:get(N_2, erlang:get('chain_length_cache'), nil)}),
            Fun_3 = Fun_2,
            I_3 = I_2,
            Known_2 = Known,
            Total_3 = Total_2;
        _ -> Fun_3 = nil,
            I_3 = nil,
            Known_2 = nil,
            Total_3 = nil
    end,
            case maps:is_key(Current, Seen) of
        true -> Loop_start = maps:get(Current, Seen, nil),
            Loop_len = (erlang:length(Chain) - Loop_start),
            I_4 = (erlang:length(Chain) - 1),
            Ahead = 0,
            Fun_4 = fun Fun_4_loop(Ahead, Chain, Current, I_4, Known_2, Loop_len, Loop_start, N_2, Seen, Total_3) ->
    case (I_4 >= 0) of
        true ->
            case (I_4 >= Loop_start) of
        true -> Chain_length_cache_tmp_2 = lists:sublist(erlang:get('chain_length_cache'), (case erlang:is_map(Chain) of true -> maps:get(I_4, Chain, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Chain) + I_4 + 1, Chain); _ -> mochi_nth(I_4 + 1, Chain) end end)) ++ [Loop_len] ++ lists:nthtail((case erlang:is_map(Chain) of true -> maps:get(I_4, Chain, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Chain) + I_4 + 1, Chain); _ -> mochi_nth(I_4 + 1, Chain) end end) + 1, erlang:get('chain_length_cache')),
            erlang:put('chain_length_cache', Chain_length_cache_tmp_2),
            Chain_length_cache_tmp_4 = Chain_length_cache_tmp_2;
        _ -> Chain_length_cache_tmp_3 = lists:sublist(erlang:get('chain_length_cache'), (case erlang:is_map(Chain) of true -> maps:get(I_4, Chain, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Chain) + I_4 + 1, Chain); _ -> mochi_nth(I_4 + 1, Chain) end end)) ++ [(Loop_len + (Ahead + 1))] ++ lists:nthtail((case erlang:is_map(Chain) of true -> maps:get(I_4, Chain, nil); _ -> case I_4 < 0 of true -> mochi_nth(erlang:length(Chain) + I_4 + 1, Chain); _ -> mochi_nth(I_4 + 1, Chain) end end) + 1, erlang:get('chain_length_cache')),
            erlang:put('chain_length_cache', Chain_length_cache_tmp_3),
            Chain_length_cache_tmp_4 = Chain_length_cache_tmp_3
    end,
            Ahead_2 = (Ahead + 1),
            I_5 = (I_4 - 1),
            Fun_4_loop(Ahead_2, Chain, Current, I_5, Known_2, Loop_len, Loop_start, N_2, Seen, Total_3);
        _ -> {Ahead, Chain, Current, I_4, Known_2, Loop_len, Loop_start, N_2, Seen, Total_3}
    end
end,
{Ahead_2, Chain, Current, I_5, Known_2, Loop_len, Loop_start, N_2, Seen, Total_3} = Fun_4(Ahead, Chain, Current, I_4, Known_2, Loop_len, Loop_start, N_2, Seen, Total_3),
            throw({return, maps:get(N_2, erlang:get('chain_length_cache'), nil)}),
            Ahead_3 = Ahead_2,
            Fun_5 = Fun_4,
            I_6 = I_5,
            Loop_len_2 = Loop_len,
            Loop_start_2 = Loop_start;
        _ -> Ahead_3 = nil,
            Fun_5 = Fun_3,
            I_6 = I_3,
            Loop_len_2 = nil,
            Loop_start_2 = nil
    end,
            Seen_2 = maps:put(Current, erlang:length(Chain), Seen),
            Chain_2 = lists:append((case Chain of nil -> []; _ -> Chain end), [Current]),
            Current_2 = sum_digit_factorials(Current),
            Fun_6_loop(Chain_2, Current_2, N_2, Seen_2);
        _ -> {Chain, Current, N_2, Seen}
    end
end,
{Chain_2, Current_2, N_2, Seen_2} = Fun_6(Chain, Current, N_2, Seen),
        nil
    catch {return, RetCatch} -> RetCatch end.

solution(Num_terms, Max_start) ->
    try
        Count = 0,
        I_7 = 1,
        Fun_7 = fun Fun_7_loop(Count, I_7, Max_start, Num_terms) ->
    case (I_7 < Max_start) of
        true ->
            case (chain_length(I_7) == Num_terms) of
        true -> Count_2 = (Count + 1),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            I_8 = (I_7 + 1),
            Fun_7_loop(Count_3, I_8, Max_start, Num_terms);
        _ -> {Count, I_7, Max_start, Num_terms}
    end
end,
{Count_3, I_8, Max_start, Num_terms} = Fun_7(Count, I_7, Max_start, Num_terms),
        Count_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('DIGIT_FACTORIALS', [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]),
    erlang:put('cache_sum_digit_factorials', #{145 => 145}),
    erlang:put('chain_length_cache', #{145 => 0, 169 => 3, 36301 => 3, 1454 => 3, 871 => 2, 45361 => 2, 872 => 2}),
    io:format("~ts~n", [mochi_repr(("solution() = " ++ mochi_str(solution(60, 1000))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
