#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (3d19777eda) on 2025-08-08 17:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

solution(Power) ->
    try
        Digits = [],
        Digits_2 = lists:append((case Digits of nil -> []; _ -> Digits end), [1]),
        I = 0,
        Fun_2 = fun Fun_2_loop(Digits_2, I, Power) ->
    case (I < Power) of
        true ->
            Carry = 0,
            J = 0,
            Fun = fun Fun_loop(Carry, Digits_2, I, J, Power) ->
    case (J < erlang:length(Digits_2)) of
        true ->
            V = (((case erlang:is_map(Digits_2) of true -> maps:get(J, Digits_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Digits_2) + J + 1, Digits_2); _ -> mochi_nth(J + 1, Digits_2) end end) * 2) + Carry),
            Digits_3 = lists:sublist(Digits_2, J) ++ [mochi_mod(V, 10)] ++ lists:nthtail(J + 1, Digits_2),
            Carry_2 = (V div 10),
            J_2 = (J + 1),
            Fun_loop(Carry_2, Digits_3, I, J_2, Power);
        _ -> {Carry, Digits_2, I, J, Power}
    end
end,
{Carry_2, Digits_3, I, J_2, Power} = Fun(Carry, Digits_2, I, J, Power),
            case (Carry_2 > 0) of
        true -> Digits_4 = lists:append((case Digits_3 of nil -> []; _ -> Digits_3 end), [Carry_2]),
            Digits_5 = Digits_4;
        _ -> Digits_5 = Digits_3
    end,
            I_2 = (I + 1),
            Fun_2_loop(Digits_5, I_2, Power);
        _ -> {Digits_2, I, Power}
    end
end,
{Digits_5, I_2, Power} = Fun_2(Digits_2, I, Power),
        Sum = 0,
        K = 0,
        Fun_3 = fun Fun_3_loop(Digits_5, I_2, K, Power, Sum) ->
    case (K < erlang:length(Digits_5)) of
        true ->
            Sum_2 = (Sum + (case erlang:is_map(Digits_5) of true -> maps:get(K, Digits_5, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Digits_5) + K + 1, Digits_5); _ -> mochi_nth(K + 1, Digits_5) end end)),
            K_2 = (K + 1),
            Fun_3_loop(Digits_5, I_2, K_2, Power, Sum_2);
        _ -> {Digits_5, I_2, K, Power, Sum}
    end
end,
{Digits_5, I_2, K_2, Power, Sum_2} = Fun_3(Digits_5, I_2, K, Power, Sum),
        Sum_2
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution(1000))]),
    io:format("~ts~n", [mochi_str(solution(50))]),
    io:format("~ts~n", [mochi_str(solution(20))]),
    io:format("~ts~n", [mochi_str(solution(15))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
