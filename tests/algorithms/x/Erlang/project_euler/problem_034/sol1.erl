#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sum_of_digit_factorial/1, solution/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

sum_of_digit_factorial(N) ->
    try
        case (N == 0) of
        true -> throw({return, (case erlang:is_map(erlang:get('DIGIT_FACTORIALS')) of true -> maps:get(0, erlang:get('DIGIT_FACTORIALS'), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(erlang:get('DIGIT_FACTORIALS')) + 0 + 1, erlang:get('DIGIT_FACTORIALS')); _ -> mochi_nth(0 + 1, erlang:get('DIGIT_FACTORIALS')) end end)});
        _ -> ok
    end,
        Total = 0,
        Num = N,
        Fun = fun Fun_loop(N, Num, Total) ->
    case (Num > 0) of
        true ->
            Digit = mochi_mod(Num, 10),
            Total_2 = (Total + (case erlang:is_map(erlang:get('DIGIT_FACTORIALS')) of true -> maps:get(Digit, erlang:get('DIGIT_FACTORIALS'), nil); _ -> case Digit < 0 of true -> mochi_nth(erlang:length(erlang:get('DIGIT_FACTORIALS')) + Digit + 1, erlang:get('DIGIT_FACTORIALS')); _ -> mochi_nth(Digit + 1, erlang:get('DIGIT_FACTORIALS')) end end)),
            Num_2 = (Num div 10),
            Fun_loop(N, Num_2, Total_2);
        _ -> {N, Num, Total}
    end
end,
{N, Num_2, Total_2} = Fun(N, Num, Total),
        Total_2
    catch {return, Ret} -> Ret end.

solution() ->
    try
        Limit = ((7 * (case erlang:is_map(erlang:get('DIGIT_FACTORIALS')) of true -> maps:get(9, erlang:get('DIGIT_FACTORIALS'), nil); _ -> case 9 < 0 of true -> mochi_nth(erlang:length(erlang:get('DIGIT_FACTORIALS')) + 9 + 1, erlang:get('DIGIT_FACTORIALS')); _ -> mochi_nth(9 + 1, erlang:get('DIGIT_FACTORIALS')) end end)) + 1),
        Total_3 = 0,
        I = 3,
        Fun_2 = fun Fun_2_loop(I, Limit, Total_3) ->
    case (I < Limit) of
        true ->
            case (sum_of_digit_factorial(I) == I) of
        true -> Total_4 = (Total_3 + I),
            Total_5 = Total_4;
        _ -> Total_5 = Total_3
    end,
            I_2 = (I + 1),
            Fun_2_loop(I_2, Limit, Total_5);
        _ -> {I, Limit, Total_3}
    end
end,
{I_2, Limit, Total_5} = Fun_2(I, Limit, Total_3),
        Total_5
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('DIGIT_FACTORIALS', [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]),
    io:format("~ts~n", [mochi_str(solution())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
