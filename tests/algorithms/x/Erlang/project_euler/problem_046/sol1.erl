#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, int_sqrt/1, is_prime/1, compute_nums/1, solution/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

int_sqrt(N) ->
    try
        R = 0,
        Fun = fun Fun_loop(N, R) ->
    case (((R + 1) * (R + 1)) =< N) of
        true ->
            R_2 = (R + 1),
            Fun_loop(N, R_2);
        _ -> {N, R}
    end
end,
{N, R_2} = Fun(N, R),
        R_2
    catch {return, Ret} -> Ret end.

is_prime(Number) ->
    try
        case ((1 < Number) andalso (Number < 4)) of
        true -> throw({return, true});
        _ -> ok
    end,
        case (((Number < 2) orelse (mochi_mod(Number, 2) == 0)) orelse (mochi_mod(Number, 3) == 0)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I = 5,
        Limit = int_sqrt(Number),
        Fun_2 = fun Fun_2_loop(I, Limit, Number) ->
    case (I =< Limit) of
        true ->
            case ((mochi_mod(Number, I) == 0) orelse (mochi_mod(Number, (I + 2)) == 0)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 6),
            Fun_2_loop(I_2, Limit, Number);
        _ -> {I, Limit, Number}
    end
end,
{I_2, Limit, Number} = Fun_2(I, Limit, Number),
        true
    catch {return, Ret} -> Ret end.

compute_nums(N_2) ->
    try
        case (N_2 =< 0) of
        true -> erlang:error({panic, "n must be >= 0"});
        _ -> ok
    end,
        List_nums = [],
        Num = 3,
        Fun_5 = fun Fun_5_loop(List_nums, N_2, Num) ->
    case (erlang:length(List_nums) < N_2) of
        true ->
            try
                case mochi_not(is_prime(Num)) of
        true -> I_3 = 0,
            Found = false,
            Fun_3 = fun Fun_3_loop(Found, I_3, List_nums, N_2, Num) ->
    case (((2 * I_3) * I_3) =< Num) of
        true ->
            try
                Rem = (Num - ((2 * I_3) * I_3)),
                case is_prime(Rem) of
        true -> Found_2 = true,
            throw({break, Found_2, I_3, List_nums, N_2, Num}),
            Found_3 = Found_2;
        _ -> Found_3 = Found
    end,
                I_4 = (I_3 + 1),
                Fun_3_loop(Found_3, I_4, List_nums, N_2, Num)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_3_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Found, I_3, List_nums, N_2, Num}
    end
end,
{Found_3, I_4, List_nums, N_2, Num} = Fun_3(Found, I_3, List_nums, N_2, Num),
            case mochi_not(Found_3) of
        true -> List_nums_2 = lists:append((case List_nums of nil -> []; _ -> List_nums end), [Num]),
            List_nums_3 = List_nums_2;
        _ -> List_nums_3 = List_nums
    end,
            Found_4 = Found_3,
            Fun_4 = Fun_3,
            I_5 = I_4,
            List_nums_4 = List_nums_3;
        _ -> Found_4 = nil,
            Fun_4 = nil,
            I_5 = nil,
            List_nums_4 = List_nums
    end,
                Num_2 = (Num + 2),
                Fun_5_loop(List_nums_4, N_2, Num_2)
            catch
                {continue, C0, C1, C2} -> Fun_5_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {List_nums, N_2, Num}
    end
end,
{List_nums_4, N_2, Num_2} = Fun_5(List_nums, N_2, Num),
        List_nums_4
    catch {return, Ret} -> Ret end.

solution() ->
    try
        (case erlang:is_map(compute_nums(1)) of true -> maps:get(0, compute_nums(1), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(compute_nums(1)) + 0 + 1, compute_nums(1)); _ -> mochi_nth(0 + 1, compute_nums(1)) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
