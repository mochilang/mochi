#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow_int/2, digital_sum/1, solution/2, test_solution/0, main/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

pow_int(Base, Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = (Result * Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

digital_sum(N) ->
    try
        S = mochi_str(N),
        Sum = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, N, S, Sum) ->
    case (I_3 < erlang:length(S)) of
        true ->
            Sum_2 = (Sum + mochi_to_int(string:substr(S, I_3 + 1, 1))),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, N, S, Sum_2);
        _ -> {I_3, N, S, Sum}
    end
end,
{I_4, N, S, Sum_2} = Fun_2(I_3, N, S, Sum),
        Sum_2
    catch {return, Ret} -> Ret end.

solution(A, B) ->
    try
        Max_sum = 0,
        Base_2 = 0,
        Fun_4 = fun Fun_4_loop(A, B, Base_2, Max_sum) ->
    case (Base_2 < A) of
        true ->
            Power = 0,
            Fun_3 = fun Fun_3_loop(A, B, Base_2, Max_sum, Power) ->
    case (Power < B) of
        true ->
            Value = pow_int(Base_2, Power),
            Ds = digital_sum(Value),
            case (Ds > Max_sum) of
        true -> Max_sum_2 = Ds,
            Max_sum_3 = Max_sum_2;
        _ -> Max_sum_3 = Max_sum
    end,
            Power_2 = (Power + 1),
            Fun_3_loop(A, B, Base_2, Max_sum_3, Power_2);
        _ -> {A, B, Base_2, Max_sum, Power}
    end
end,
{A, B, Base_2, Max_sum_3, Power_2} = Fun_3(A, B, Base_2, Max_sum, Power),
            Base_3 = (Base_2 + 1),
            Fun_4_loop(A, B, Base_3, Max_sum_3);
        _ -> {A, B, Base_2, Max_sum}
    end
end,
{A, B, Base_3, Max_sum_3} = Fun_4(A, B, Base_2, Max_sum),
        Max_sum_3
    catch {return, Ret} -> Ret end.

test_solution() ->
    try
        case (solution(10, 10) /= 45) of
        true -> erlang:error({panic, "solution 10 10 failed"});
        _ -> ok
    end,
        case (solution(100, 100) /= 972) of
        true -> erlang:error({panic, "solution 100 100 failed"});
        _ -> ok
    end,
        case (solution(100, 200) /= 1872) of
        true -> erlang:error({panic, "solution 100 200 failed"});
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main() ->
    try
        test_solution(),
        io:format("~ts~n", [mochi_str(solution(100, 100))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
