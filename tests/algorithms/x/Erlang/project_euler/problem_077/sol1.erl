#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, generate_primes/1, contains/2, partition/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

generate_primes(Limit) ->
    try
        Is_prime = [],
        I = 0,
        Fun = fun Fun_loop(I, Is_prime, Limit) ->
    case (I =< Limit) of
        true ->
            Is_prime_2 = lists:append((case Is_prime of nil -> []; _ -> Is_prime end), [true]),
            I_2 = (I + 1),
            Fun_loop(I_2, Is_prime_2, Limit);
        _ -> {I, Is_prime, Limit}
    end
end,
{I_2, Is_prime_2, Limit} = Fun(I, Is_prime, Limit),
        Is_prime_3 = lists:sublist(Is_prime_2, 0) ++ [false] ++ lists:nthtail(0 + 1, Is_prime_2),
        Is_prime_4 = lists:sublist(Is_prime_3, 1) ++ [false] ++ lists:nthtail(1 + 1, Is_prime_3),
        I_3 = 2,
        Fun_4 = fun Fun_4_loop(I_3, Is_prime_4, Limit) ->
    case ((I_3 * I_3) =< Limit) of
        true ->
            case (case erlang:is_map(Is_prime_4) of true -> maps:get(I_3, Is_prime_4, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Is_prime_4) + I_3 + 1, Is_prime_4); _ -> mochi_nth(I_3 + 1, Is_prime_4) end end) of
        true -> J = (I_3 * I_3),
            Fun_2 = fun Fun_2_loop(I_3, Is_prime_4, J, Limit) ->
    case (J =< Limit) of
        true ->
            Is_prime_5 = lists:sublist(Is_prime_4, J) ++ [false] ++ lists:nthtail(J + 1, Is_prime_4),
            J_2 = (J + I_3),
            Fun_2_loop(I_3, Is_prime_5, J_2, Limit);
        _ -> {I_3, Is_prime_4, J, Limit}
    end
end,
{I_3, Is_prime_5, J_2, Limit} = Fun_2(I_3, Is_prime_4, J, Limit),
            Fun_3 = Fun_2,
            Is_prime_6 = Is_prime_5,
            J_3 = J_2;
        _ -> Fun_3 = Fun,
            Is_prime_6 = Is_prime_4,
            J_3 = nil
    end,
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4, Is_prime_6, Limit);
        _ -> {I_3, Is_prime_4, Limit}
    end
end,
{I_4, Is_prime_6, Limit} = Fun_4(I_3, Is_prime_4, Limit),
        Primes = [],
        I_5 = 2,
        Fun_5 = fun Fun_5_loop(I_5, Is_prime_6, Limit, Primes) ->
    case (I_5 =< Limit) of
        true ->
            case (case erlang:is_map(Is_prime_6) of true -> maps:get(I_5, Is_prime_6, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Is_prime_6) + I_5 + 1, Is_prime_6); _ -> mochi_nth(I_5 + 1, Is_prime_6) end end) of
        true -> Primes_2 = lists:append((case Primes of nil -> []; _ -> Primes end), [I_5]),
            Primes_3 = Primes_2;
        _ -> Primes_3 = Primes
    end,
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, Is_prime_6, Limit, Primes_3);
        _ -> {I_5, Is_prime_6, Limit, Primes}
    end
end,
{I_6, Is_prime_6, Limit, Primes_3} = Fun_5(I_5, Is_prime_6, Limit, Primes),
        Primes_3
    catch {return, RetCatch} -> RetCatch end.

contains(Xs, Value) ->
    try
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(I_7, Value, Xs) ->
    case (I_7 < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I_7, Xs, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Xs) + I_7 + 1, Xs); _ -> mochi_nth(I_7 + 1, Xs) end end) == Value) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_6_loop(I_8, Value, Xs);
        _ -> {I_7, Value, Xs}
    end
end,
{I_8, Value, Xs} = Fun_6(I_7, Value, Xs),
        false
    catch {return, RetCatch} -> RetCatch end.

partition(N) ->
    try
        case (N < 0) of
        true -> throw({return, []});
        _ -> ok
    end,
        case (N == 0) of
        true -> throw({return, [1]});
        _ -> ok
    end,
        case maps:is_key(N, erlang:get('partition_cache')) of
        true -> throw({return, maps:get(N, erlang:get('partition_cache'), nil)});
        _ -> ok
    end,
        Ret = [],
        Fun_7 = fun Fun_7_loop(List, N, Ret) ->
    case List of
        [] -> {N, Ret};
        [Prime|Prime_rest] ->
        try
            case (Prime > N) of
        true -> throw({continue, N, Ret});
        _ -> ok
    end,
            Subs = partition((N - Prime)),
            Fun_8 = fun Fun_8_loop(List, N, Prime, Ret, Subs) ->
    case List of
        [] -> {N, Prime, Ret, Subs};
        [Sub|Sub_rest] ->
            Prod = (Sub * Prime),
            case mochi_not(mochi_member(Prod, Ret)) of
        true -> Ret_2 = lists:append((case Ret of nil -> []; _ -> Ret end), [Prod]),
            Ret_3 = Ret_2;
        _ -> Ret_3 = Ret
    end,
            Fun_8_loop(Sub_rest, N, Prime, Ret_3, Subs);
        _ -> {N, Prime, Ret, Subs}
    end
end,
{N, Prime, Ret_3, Subs} = Fun_8(Subs, N, Prime, Ret, Subs),
            Fun_7_loop(Prime_rest, N, Ret_3)
        catch
            {continue, C0, C1} -> Fun_7_loop(Prime_rest, C0, C1);
            {break, B0, B1} -> {B0, B1};
            break -> {N, Ret}
        end;
        _ -> {N, Ret}
    end
end,
{N, Ret_3} = Fun_7(erlang:get('primes'), N, Ret),
        Partition_cache_tmp = lists:sublist(erlang:get('partition_cache'), N) ++ [Ret_3] ++ lists:nthtail(N + 1, erlang:get('partition_cache')),
        erlang:put('partition_cache', Partition_cache_tmp),
        Ret_3
    catch {return, RetCatch} -> RetCatch end.

solution(Threshold) ->
    try
        Number_to_partition = 1,
        Fun_9 = fun Fun_9_loop(Number_to_partition, Threshold) ->
    case (Number_to_partition < 100) of
        true ->
            Parts = partition(Number_to_partition),
            case (erlang:length(Parts) > Threshold) of
        true -> throw({return, Number_to_partition});
        _ -> ok
    end,
            Number_to_partition_2 = (Number_to_partition + 1),
            Fun_9_loop(Number_to_partition_2, Threshold);
        _ -> {Number_to_partition, Threshold}
    end
end,
{Number_to_partition_2, Threshold} = Fun_9(Number_to_partition, Threshold),
        0
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('NUM_PRIMES', 100),
    erlang:put('primes', generate_primes(100)),
    erlang:put('partition_cache', #{}),
    erlang:put('result', solution(5000)),
    io:format("~ts~n", [mochi_repr(("solution() = " ++ mochi_str(erlang:get('result'))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
