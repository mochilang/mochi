#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, gcd/2, solution/1]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

gcd(A, B) ->
    try
        X = A,
        Y = B,
        Fun = fun Fun_loop(A, B, X, Y) ->
    case (Y /= 0) of
        true ->
            T = mochi_mod(X, Y),
            X_2 = Y,
            Y_2 = T,
            Fun_loop(A, B, X_2, Y_2);
        _ -> {A, B, X, Y}
    end
end,
{A, B, X_2, Y_2} = Fun(A, B, X, Y),
        X_2
    catch {return, Ret} -> Ret end.

solution(Limit) ->
    try
        Frequencies = #{},
        M = 2,
        Fun_4 = fun Fun_4_loop(Frequencies, Limit, M) ->
    case (((2 * M) * (M + 1)) =< Limit) of
        true ->
            try
                N = (mochi_mod(M, 2) + 1),
                Fun_3 = fun Fun_3_loop(Frequencies, Limit, M, N) ->
    case (N < M) of
        true ->
            try
                case (gcd(M, N) > 1) of
        true -> N_2 = (N + 2),
            throw({continue, Frequencies, Limit, M, N_2}),
            N_3 = N_2;
        _ -> N_3 = N
    end,
                Primitive_perimeter = ((2 * M) * (M + N_3)),
                Perimeter = Primitive_perimeter,
                Fun_2 = fun Fun_2_loop(Frequencies, Limit, M, N_3, Perimeter, Primitive_perimeter) ->
    case (Perimeter =< Limit) of
        true ->
            case mochi_not(maps:is_key(Perimeter, Frequencies)) of
        true -> Frequencies_2 = maps:put(Perimeter, 0, Frequencies),
            Frequencies_3 = Frequencies_2;
        _ -> Frequencies_3 = Frequencies
    end,
            Frequencies_4 = maps:put(Perimeter, (maps:get(Perimeter, Frequencies_3, nil) + 1), Frequencies_3),
            Perimeter_2 = (Perimeter + Primitive_perimeter),
            Fun_2_loop(Frequencies_4, Limit, M, N_3, Perimeter_2, Primitive_perimeter);
        _ -> {Frequencies, Limit, M, N_3, Perimeter, Primitive_perimeter}
    end
end,
{Frequencies_4, Limit, M, N_3, Perimeter_2, Primitive_perimeter} = Fun_2(Frequencies, Limit, M, N_3, Perimeter, Primitive_perimeter),
                N_4 = (N_3 + 2),
                Fun_3_loop(Frequencies_4, Limit, M, N_4)
            catch
                {continue, C0, C1, C2, C3} -> Fun_3_loop(C0, C1, C2, C3);
                {break, B0, B1, B2, B3} -> {B0, B1, B2, B3}
            end;
        _ -> {Frequencies, Limit, M, N}
    end
end,
{Frequencies_4, Limit, M, N_4} = Fun_3(Frequencies, Limit, M, N),
                M_2 = (M + 1),
                Fun_4_loop(Frequencies_4, Limit, M_2)
            catch
                {continue, C0, C1, C2} -> Fun_4_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Frequencies, Limit, M}
    end
end,
{Frequencies_4, Limit, M_2} = Fun_4(Frequencies, Limit, M),
        Count = 0,
        Fun_5 = fun Fun_5_loop(List, Count, Frequencies_4, Limit, M_2) ->
    case List of
        [] -> {Count, Frequencies_4, Limit, M_2};
        [P|P_rest] ->
            case ((case erlang:is_map(Frequencies_4) of true -> maps:get(P, Frequencies_4, nil); _ -> case P < 0 of true -> mochi_nth(erlang:length(Frequencies_4) + P + 1, Frequencies_4); _ -> mochi_nth(P + 1, Frequencies_4) end end) == 1) of
        true -> Count_2 = (Count + 1),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            Fun_5_loop(P_rest, Count_3, Frequencies_4, Limit, M_2);
        _ -> {Count, Frequencies_4, Limit, M_2}
    end
end,
{Count_3, Frequencies_4, Limit, M_2} = Fun_5(maps:keys(Frequencies_4), Count, Frequencies_4, Limit, M_2),
        Count_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('result', solution(1500000)),
    io:format("~ts~n", [mochi_repr(("solution() = " ++ mochi_str(erlang:get('result'))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
