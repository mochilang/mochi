#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_prime/1, list_truncated_nums/1, validate/1, compute_truncated_primes/1, solution/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

is_prime(Number) ->
    try
        case ((1 < Number) andalso (Number < 4)) of
        true -> throw({return, true});
        _ -> ok
    end,
        case (((Number < 2) orelse (mochi_mod(Number, 2) == 0)) orelse (mochi_mod(Number, 3) == 0)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I = 5,
        Fun = fun Fun_loop(I, Number) ->
    case ((I * I) =< Number) of
        true ->
            case ((mochi_mod(Number, I) == 0) orelse (mochi_mod(Number, (I + 2)) == 0)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 6),
            Fun_loop(I_2, Number);
        _ -> {I, Number}
    end
end,
{I_2, Number} = Fun(I, Number),
        true
    catch {return, Ret} -> Ret end.

list_truncated_nums(N) ->
    try
        Str_num = mochi_str(N),
        List_nums = [N],
        I_3 = 1,
        Length = erlang:length(Str_num),
        Fun_2 = fun Fun_2_loop(I_3, Length, List_nums, N, Str_num) ->
    case (I_3 < Length) of
        true ->
            Right = mochi_to_int(string:substr(Str_num, I_3 + 1, (Length - I_3))),
            Left = mochi_to_int(string:substr(Str_num, 0 + 1, ((Length - I_3) - 0))),
            List_nums_2 = lists:append((case List_nums of nil -> []; _ -> List_nums end), [Right]),
            List_nums_3 = lists:append((case List_nums_2 of nil -> []; _ -> List_nums_2 end), [Left]),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Length, List_nums_3, N, Str_num);
        _ -> {I_3, Length, List_nums, N, Str_num}
    end
end,
{I_4, Length, List_nums_3, N, Str_num} = Fun_2(I_3, Length, List_nums, N, Str_num),
        List_nums_3
    catch {return, Ret} -> Ret end.

validate(N_2) ->
    try
        S = mochi_str(N_2),
        Length_2 = erlang:length(S),
        case (Length_2 > 3) of
        true -> Last3 = mochi_to_int(string:substr(S, (Length_2 - 3) + 1, (Length_2 - (Length_2 - 3)))),
            First3 = mochi_to_int(string:substr(S, 0 + 1, (3 - 0))),
            case mochi_not((is_prime(Last3) andalso is_prime(First3))) of
        true -> throw({return, false});
        _ -> ok
    end,
            First3_2 = First3,
            Last3_2 = Last3;
        _ -> First3_2 = nil,
            Last3_2 = nil
    end,
        true
    catch {return, Ret} -> Ret end.

compute_truncated_primes(Count) ->
    try
        List_truncated_primes = [],
        Num = 13,
        Fun_5 = fun Fun_5_loop(Count, List_truncated_primes, Num) ->
    case (erlang:length(List_truncated_primes) /= Count) of
        true ->
            try
                case validate(Num) of
        true -> List_nums_4 = list_truncated_nums(Num),
            All_prime = true,
            J = 0,
            Fun_3 = fun Fun_3_loop(All_prime, Count, J, List_nums_4, List_truncated_primes, Num) ->
    case (J < erlang:length(List_nums_4)) of
        true ->
            try
                case mochi_not(is_prime((case erlang:is_map(List_nums_4) of true -> maps:get(J, List_nums_4, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(List_nums_4) + J + 1, List_nums_4); _ -> mochi_nth(J + 1, List_nums_4) end end))) of
        true -> All_prime_2 = false,
            throw({break, All_prime_2, Count, J, List_nums_4, List_truncated_primes, Num}),
            All_prime_3 = All_prime_2;
        _ -> All_prime_3 = All_prime
    end,
                J_2 = (J + 1),
                Fun_3_loop(All_prime_3, Count, J_2, List_nums_4, List_truncated_primes, Num)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_3_loop(C0, C1, C2, C3, C4, C5);
                {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5}
            end;
        _ -> {All_prime, Count, J, List_nums_4, List_truncated_primes, Num}
    end
end,
{All_prime_3, Count, J_2, List_nums_4, List_truncated_primes, Num} = Fun_3(All_prime, Count, J, List_nums_4, List_truncated_primes, Num),
            case (All_prime_3 /= nil) of
        true -> List_truncated_primes_2 = lists:append((case List_truncated_primes of nil -> []; _ -> List_truncated_primes end), [Num]),
            List_truncated_primes_3 = List_truncated_primes_2;
        _ -> List_truncated_primes_3 = List_truncated_primes
    end,
            All_prime_4 = All_prime_3,
            Fun_4 = Fun_3,
            J_3 = J_2,
            List_nums_5 = List_nums_4,
            List_truncated_primes_4 = List_truncated_primes_3;
        _ -> All_prime_4 = nil,
            Fun_4 = nil,
            J_3 = nil,
            List_nums_5 = nil,
            List_truncated_primes_4 = List_truncated_primes
    end,
                Num_2 = (Num + 2),
                Fun_5_loop(Count, List_truncated_primes_4, Num_2)
            catch
                {continue, C0, C1, C2} -> Fun_5_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Count, List_truncated_primes, Num}
    end
end,
{Count, List_truncated_primes_4, Num_2} = Fun_5(Count, List_truncated_primes, Num),
        List_truncated_primes_4
    catch {return, Ret} -> Ret end.

solution() ->
    try
        Primes = compute_truncated_primes(11),
        Total = 0,
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(I_5, Primes, Total) ->
    case (I_5 < erlang:length(Primes)) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Primes) of true -> maps:get(I_5, Primes, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Primes) + I_5 + 1, Primes); _ -> mochi_nth(I_5 + 1, Primes) end end)),
            I_6 = (I_5 + 1),
            Fun_6_loop(I_6, Primes, Total_2);
        _ -> {I_5, Primes, Total}
    end
end,
{I_6, Primes, Total_2} = Fun_6(I_5, Primes, Total),
        Total_2
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(("sum(compute_truncated_primes(11)) = " ++ mochi_str(solution())))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
