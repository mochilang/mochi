#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_prime/1, search/2, sort_int/1, permutations_of_number/1, abs_int/1, contains_int/2, solution/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

is_prime(Number) ->
    try
        case ((1 < Number) andalso (Number < 4)) of
        true -> throw({return, true});
        _ -> ok
    end,
        case (((Number < 2) orelse (mochi_mod(Number, 2) == 0)) orelse (mochi_mod(Number, 3) == 0)) of
        true -> throw({return, false});
        _ -> ok
    end,
        I = 5,
        Fun = fun Fun_loop(I, Number) ->
    case ((I * I) =< Number) of
        true ->
            case ((mochi_mod(Number, I) == 0) orelse (mochi_mod(Number, (I + 2)) == 0)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 6),
            Fun_loop(I_2, Number);
        _ -> {I, Number}
    end
end,
{I_2, Number} = Fun(I, Number),
        true
    catch {return, Ret} -> Ret end.

search(Target, Arr) ->
    try
        Left = 0,
        Right = (erlang:length(Arr) - 1),
        Fun_2 = fun Fun_2_loop(Arr, Left, Right, Target) ->
    case (Left =< Right) of
        true ->
            Middle = ((Left + Right) div 2),
            case ((case erlang:is_map(Arr) of true -> maps:get(Middle, Arr, nil); _ -> case Middle < 0 of true -> mochi_nth(erlang:length(Arr) + Middle + 1, Arr); _ -> mochi_nth(Middle + 1, Arr) end end) == Target) of
        true -> throw({return, true});
        _ -> ok
    end,
            case ((case erlang:is_map(Arr) of true -> maps:get(Middle, Arr, nil); _ -> case Middle < 0 of true -> mochi_nth(erlang:length(Arr) + Middle + 1, Arr); _ -> mochi_nth(Middle + 1, Arr) end end) < Target) of
        true -> Left_2 = (Middle + 1),
            Left_3 = Left_2,
            Right_3 = Right;
        _ -> Right_2 = (Middle - 1),
            Left_3 = Left,
            Right_3 = Right_2
    end,
            Fun_2_loop(Arr, Left_3, Right_3, Target);
        _ -> {Arr, Left, Right, Target}
    end
end,
{Arr, Left_3, Right_3, Target} = Fun_2(Arr, Left, Right, Target),
        false
    catch {return, Ret} -> Ret end.

sort_int(Xs) ->
    try
        Arr_2 = Xs,
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Arr_2, I_3, Xs) ->
    case (I_3 < erlang:length(Arr_2)) of
        true ->
            J = (I_3 + 1),
            Fun_3 = fun Fun_3_loop(Arr_2, I_3, J, Xs) ->
    case (J < erlang:length(Arr_2)) of
        true ->
            case ((case erlang:is_map(Arr_2) of true -> maps:get(J, Arr_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr_2) + J + 1, Arr_2); _ -> mochi_nth(J + 1, Arr_2) end end) < (case erlang:is_map(Arr_2) of true -> maps:get(I_3, Arr_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr_2) + I_3 + 1, Arr_2); _ -> mochi_nth(I_3 + 1, Arr_2) end end)) of
        true -> Tmp = (case erlang:is_map(Arr_2) of true -> maps:get(I_3, Arr_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Arr_2) + I_3 + 1, Arr_2); _ -> mochi_nth(I_3 + 1, Arr_2) end end),
            Arr_3 = lists:sublist(Arr_2, I_3) ++ [(case erlang:is_map(Arr_2) of true -> maps:get(J, Arr_2, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Arr_2) + J + 1, Arr_2); _ -> mochi_nth(J + 1, Arr_2) end end)] ++ lists:nthtail(I_3 + 1, Arr_2),
            Arr_4 = lists:sublist(Arr_3, J) ++ [Tmp] ++ lists:nthtail(J + 1, Arr_3),
            Arr_5 = Arr_4,
            Tmp_2 = Tmp;
        _ -> Arr_5 = Arr_2,
            Tmp_2 = nil
    end,
            J_2 = (J + 1),
            Fun_3_loop(Arr_5, I_3, J_2, Xs);
        _ -> {Arr_2, I_3, J, Xs}
    end
end,
{Arr_5, I_3, J_2, Xs} = Fun_3(Arr_2, I_3, J, Xs),
            I_4 = (I_3 + 1),
            Fun_4_loop(Arr_5, I_4, Xs);
        _ -> {Arr_2, I_3, Xs}
    end
end,
{Arr_5, I_4, Xs} = Fun_4(Arr_2, I_3, Xs),
        Arr_5
    catch {return, Ret} -> Ret end.

permutations_of_number(N) ->
    try
        S = mochi_str(N),
        D = [],
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(D, I_5, N, S) ->
    case (I_5 < erlang:length(S)) of
        true ->
            D_2 = lists:append((case D of nil -> []; _ -> D end), [mochi_to_int(string:substr(S, I_5 + 1, 1))]),
            I_6 = (I_5 + 1),
            Fun_5_loop(D_2, I_6, N, S);
        _ -> {D, I_5, N, S}
    end
end,
{D_2, I_6, N, S} = Fun_5(D, I_5, N, S),
        Res = [],
        A = 0,
        Fun_11 = fun Fun_11_loop(A, D_2, I_6, N, Res, S) ->
    case (A < erlang:length(D_2)) of
        true ->
            B = 0,
            Fun_10 = fun Fun_10_loop(A, B, D_2, I_6, N, Res, S) ->
    case (B < erlang:length(D_2)) of
        true ->
            case (B /= A) of
        true -> C = 0,
            Fun_8 = fun Fun_8_loop(A, B, C, D_2, I_6, N, Res, S) ->
    case (C < erlang:length(D_2)) of
        true ->
            case ((C /= A) andalso (C /= B)) of
        true -> E = 0,
            Fun_6 = fun Fun_6_loop(A, B, C, D_2, E, I_6, N, Res, S) ->
    case (E < erlang:length(D_2)) of
        true ->
            case (((E /= A) andalso (E /= B)) andalso (E /= C)) of
        true -> Val = (((((case erlang:is_map(D_2) of true -> maps:get(A, D_2, nil); _ -> case A < 0 of true -> mochi_nth(erlang:length(D_2) + A + 1, D_2); _ -> mochi_nth(A + 1, D_2) end end) * 1000) + ((case erlang:is_map(D_2) of true -> maps:get(B, D_2, nil); _ -> case B < 0 of true -> mochi_nth(erlang:length(D_2) + B + 1, D_2); _ -> mochi_nth(B + 1, D_2) end end) * 100)) + ((case erlang:is_map(D_2) of true -> maps:get(C, D_2, nil); _ -> case C < 0 of true -> mochi_nth(erlang:length(D_2) + C + 1, D_2); _ -> mochi_nth(C + 1, D_2) end end) * 10)) + (case erlang:is_map(D_2) of true -> maps:get(E, D_2, nil); _ -> case E < 0 of true -> mochi_nth(erlang:length(D_2) + E + 1, D_2); _ -> mochi_nth(E + 1, D_2) end end)),
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Val]),
            Res_3 = Res_2,
            Val_2 = Val;
        _ -> Res_3 = Res,
            Val_2 = nil
    end,
            E_2 = (E + 1),
            Fun_6_loop(A, B, C, D_2, E_2, I_6, N, Res_3, S);
        _ -> {A, B, C, D_2, E, I_6, N, Res, S}
    end
end,
{A, B, C, D_2, E_2, I_6, N, Res_3, S} = Fun_6(A, B, C, D_2, E, I_6, N, Res, S),
            E_3 = E_2,
            Fun_7 = Fun_6,
            Res_4 = Res_3;
        _ -> E_3 = nil,
            Fun_7 = Fun_5,
            Res_4 = Res
    end,
            C_2 = (C + 1),
            Fun_8_loop(A, B, C_2, D_2, I_6, N, Res_4, S);
        _ -> {A, B, C, D_2, I_6, N, Res, S}
    end
end,
{A, B, C_2, D_2, I_6, N, Res_4, S} = Fun_8(A, B, C, D_2, I_6, N, Res, S),
            C_3 = C_2,
            Fun_9 = Fun_8,
            Res_5 = Res_4;
        _ -> C_3 = nil,
            Fun_9 = Fun_5,
            Res_5 = Res
    end,
            B_2 = (B + 1),
            Fun_10_loop(A, B_2, D_2, I_6, N, Res_5, S);
        _ -> {A, B, D_2, I_6, N, Res, S}
    end
end,
{A, B_2, D_2, I_6, N, Res_5, S} = Fun_10(A, B, D_2, I_6, N, Res, S),
            A_2 = (A + 1),
            Fun_11_loop(A_2, D_2, I_6, N, Res_5, S);
        _ -> {A, D_2, I_6, N, Res, S}
    end
end,
{A_2, D_2, I_6, N, Res_5, S} = Fun_11(A, D_2, I_6, N, Res, S),
        Res_5
    catch {return, Ret} -> Ret end.

abs_int(X) ->
    try
        (case (X < 0) of
    true -> -X;
    _ -> X
end)
    catch {return, Ret} -> Ret end.

contains_int(Xs_2, V) ->
    try
        I_7 = 0,
        Fun_12 = fun Fun_12_loop(I_7, V, Xs_2) ->
    case (I_7 < erlang:length(Xs_2)) of
        true ->
            case ((case erlang:is_map(Xs_2) of true -> maps:get(I_7, Xs_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_7 + 1, Xs_2); _ -> mochi_nth(I_7 + 1, Xs_2) end end) == V) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_12_loop(I_8, V, Xs_2);
        _ -> {I_7, V, Xs_2}
    end
end,
{I_8, V, Xs_2} = Fun_12(I_7, V, Xs_2),
        false
    catch {return, Ret} -> Ret end.

solution() ->
    try
        Prime_list = [],
        N_2 = 1001,
        Fun_13 = fun Fun_13_loop(N_2, Prime_list) ->
    case (N_2 < 10000) of
        true ->
            case is_prime(N_2) of
        true -> Prime_list_2 = lists:append((case Prime_list of nil -> []; _ -> Prime_list end), [N_2]),
            Prime_list_3 = Prime_list_2;
        _ -> Prime_list_3 = Prime_list
    end,
            N_3 = (N_2 + 2),
            Fun_13_loop(N_3, Prime_list_3);
        _ -> {N_2, Prime_list}
    end
end,
{N_3, Prime_list_3} = Fun_13(N_2, Prime_list),
        Candidates = [],
        I_9 = 0,
        Fun_15 = fun Fun_15_loop(Candidates, I_9, N_3, Prime_list_3) ->
    case (I_9 < erlang:length(Prime_list_3)) of
        true ->
            Number_2 = (case erlang:is_map(Prime_list_3) of true -> maps:get(I_9, Prime_list_3, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Prime_list_3) + I_9 + 1, Prime_list_3); _ -> mochi_nth(I_9 + 1, Prime_list_3) end end),
            Tmp_3 = [],
            Perms = permutations_of_number(Number_2),
            J_3 = 0,
            Fun_14 = fun Fun_14_loop(Candidates, I_9, J_3, N_3, Number_2, Perms, Prime_list_3, Tmp_3) ->
    case (J_3 < erlang:length(Perms)) of
        true ->
            Prime = (case erlang:is_map(Perms) of true -> maps:get(J_3, Perms, nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length(Perms) + J_3 + 1, Perms); _ -> mochi_nth(J_3 + 1, Perms) end end),
            case ((mochi_mod(Prime, 2) /= 0) andalso search(Prime, Prime_list_3)) of
        true -> Tmp_4 = lists:append((case Tmp_3 of nil -> []; _ -> Tmp_3 end), [Prime]),
            Tmp_5 = Tmp_4;
        _ -> Tmp_5 = Tmp_3
    end,
            J_4 = (J_3 + 1),
            Fun_14_loop(Candidates, I_9, J_4, N_3, Number_2, Perms, Prime_list_3, Tmp_5);
        _ -> {Candidates, I_9, J_3, N_3, Number_2, Perms, Prime_list_3, Tmp_3}
    end
end,
{Candidates, I_9, J_4, N_3, Number_2, Perms, Prime_list_3, Tmp_5} = Fun_14(Candidates, I_9, J_3, N_3, Number_2, Perms, Prime_list_3, Tmp_3),
            Tmp_6 = sort_int(Tmp_5),
            case (erlang:length(Tmp_6) >= 3) of
        true -> Candidates_2 = lists:append((case Candidates of nil -> []; _ -> Candidates end), [Tmp_6]),
            Candidates_3 = Candidates_2;
        _ -> Candidates_3 = Candidates
    end,
            I_10 = (I_9 + 1),
            Fun_15_loop(Candidates_3, I_10, N_3, Prime_list_3);
        _ -> {Candidates, I_9, N_3, Prime_list_3}
    end
end,
{Candidates_3, I_10, N_3, Prime_list_3} = Fun_15(Candidates, I_9, N_3, Prime_list_3),
        Passed = [],
        I_11 = 0,
        Fun_19 = fun Fun_19_loop(Candidates_3, I_11, N_3, Passed, Prime_list_3) ->
    case (I_11 < erlang:length(Candidates_3)) of
        true ->
            try
                Candidate = (case erlang:is_map(Candidates_3) of true -> maps:get(I_11, Candidates_3, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Candidates_3) + I_11 + 1, Candidates_3); _ -> mochi_nth(I_11 + 1, Candidates_3) end end),
                Found = false,
                A_3 = 0,
                Fun_18 = fun Fun_18_loop(A_3, Candidate, Candidates_3, Found, I_11, N_3, Passed, Prime_list_3) ->
    case (A_3 < erlang:length(Candidate)) of
        true ->
            try
                B_3 = (A_3 + 1),
                Fun_17 = fun Fun_17_loop(A_3, B_3, Candidate, Candidates_3, Found, I_11, N_3, Passed, Prime_list_3) ->
    case (B_3 < erlang:length(Candidate)) of
        true ->
            try
                C_4 = (B_3 + 1),
                Fun_16 = fun Fun_16_loop(A_3, B_3, C_4, Candidate, Candidates_3, Found, I_11, N_3, Passed, Prime_list_3) ->
    case (C_4 < erlang:length(Candidate)) of
        true ->
            try
                X_2 = (case erlang:is_map(Candidate) of true -> maps:get(A_3, Candidate, nil); _ -> case A_3 < 0 of true -> mochi_nth(erlang:length(Candidate) + A_3 + 1, Candidate); _ -> mochi_nth(A_3 + 1, Candidate) end end),
                Y = (case erlang:is_map(Candidate) of true -> maps:get(B_3, Candidate, nil); _ -> case B_3 < 0 of true -> mochi_nth(erlang:length(Candidate) + B_3 + 1, Candidate); _ -> mochi_nth(B_3 + 1, Candidate) end end),
                Z = (case erlang:is_map(Candidate) of true -> maps:get(C_4, Candidate, nil); _ -> case C_4 < 0 of true -> mochi_nth(erlang:length(Candidate) + C_4 + 1, Candidate); _ -> mochi_nth(C_4 + 1, Candidate) end end),
                case ((((abs_int((X_2 - Y)) == abs_int((Y - Z))) andalso (X_2 /= Y)) andalso (X_2 /= Z)) andalso (Y /= Z)) of
        true -> Triple = sort_int([X_2, Y, Z]),
            Passed_2 = lists:append((case Passed of nil -> []; _ -> Passed end), [Triple]),
            Found_2 = true,
            throw({break, A_3, B_3, C_4, Candidate, Candidates_3, Found_2, I_11, N_3, Passed_2, Prime_list_3}),
            Found_3 = Found_2,
            Passed_3 = Passed_2,
            Triple_2 = Triple;
        _ -> Found_3 = Found,
            Passed_3 = Passed,
            Triple_2 = nil
    end,
                C_5 = (C_4 + 1),
                Fun_16_loop(A_3, B_3, C_5, Candidate, Candidates_3, Found_3, I_11, N_3, Passed_3, Prime_list_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8, C9} -> Fun_16_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8, B9} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8, B9}
            end;
        _ -> {A_3, B_3, C_4, Candidate, Candidates_3, Found, I_11, N_3, Passed, Prime_list_3}
    end
end,
{A_3, B_3, C_5, Candidate, Candidates_3, Found_3, I_11, N_3, Passed_3, Prime_list_3} = Fun_16(A_3, B_3, C_4, Candidate, Candidates_3, Found, I_11, N_3, Passed, Prime_list_3),
                case (Found_3 /= nil) of
        true -> throw({break, A_3, B_3, Candidate, Candidates_3, Found_3, I_11, N_3, Passed_3, Prime_list_3});
        _ -> ok
    end,
                B_4 = (B_3 + 1),
                Fun_17_loop(A_3, B_4, Candidate, Candidates_3, Found_3, I_11, N_3, Passed_3, Prime_list_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7, C8} -> Fun_17_loop(C0, C1, C2, C3, C4, C5, C6, C7, C8);
                {break, B0, B1, B2, B3, B4, B5, B6, B7, B8} -> {B0, B1, B2, B3, B4, B5, B6, B7, B8}
            end;
        _ -> {A_3, B_3, Candidate, Candidates_3, Found, I_11, N_3, Passed, Prime_list_3}
    end
end,
{A_3, B_4, Candidate, Candidates_3, Found_3, I_11, N_3, Passed_3, Prime_list_3} = Fun_17(A_3, B_3, Candidate, Candidates_3, Found, I_11, N_3, Passed, Prime_list_3),
                case (Found_3 /= nil) of
        true -> throw({break, A_3, Candidate, Candidates_3, Found_3, I_11, N_3, Passed_3, Prime_list_3});
        _ -> ok
    end,
                A_4 = (A_3 + 1),
                Fun_18_loop(A_4, Candidate, Candidates_3, Found_3, I_11, N_3, Passed_3, Prime_list_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7} -> Fun_18_loop(C0, C1, C2, C3, C4, C5, C6, C7);
                {break, B0, B1, B2, B3, B4, B5, B6, B7} -> {B0, B1, B2, B3, B4, B5, B6, B7}
            end;
        _ -> {A_3, Candidate, Candidates_3, Found, I_11, N_3, Passed, Prime_list_3}
    end
end,
{A_4, Candidate, Candidates_3, Found_3, I_11, N_3, Passed_3, Prime_list_3} = Fun_18(A_3, Candidate, Candidates_3, Found, I_11, N_3, Passed, Prime_list_3),
                I_12 = (I_11 + 1),
                Fun_19_loop(Candidates_3, I_12, N_3, Passed_3, Prime_list_3)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_19_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Candidates_3, I_11, N_3, Passed, Prime_list_3}
    end
end,
{Candidates_3, I_12, N_3, Passed_3, Prime_list_3} = Fun_19(Candidates_3, I_11, N_3, Passed, Prime_list_3),
        Answer_nums = [],
        I_13 = 0,
        Fun_20 = fun Fun_20_loop(Answer_nums, Candidates_3, I_13, N_3, Passed_3, Prime_list_3) ->
    case (I_13 < erlang:length(Passed_3)) of
        true ->
            Seq = (case erlang:is_map(Passed_3) of true -> maps:get(I_13, Passed_3, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Passed_3) + I_13 + 1, Passed_3); _ -> mochi_nth(I_13 + 1, Passed_3) end end),
            Val_3 = mochi_to_int(((mochi_str((case erlang:is_map(Seq) of true -> maps:get(0, Seq, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Seq) + 0 + 1, Seq); _ -> mochi_nth(0 + 1, Seq) end end)) ++ mochi_str((case erlang:is_map(Seq) of true -> maps:get(1, Seq, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Seq) + 1 + 1, Seq); _ -> mochi_nth(1 + 1, Seq) end end))) ++ mochi_str((case erlang:is_map(Seq) of true -> maps:get(2, Seq, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Seq) + 2 + 1, Seq); _ -> mochi_nth(2 + 1, Seq) end end)))),
            case mochi_not(contains_int(Answer_nums, Val_3)) of
        true -> Answer_nums_2 = lists:append((case Answer_nums of nil -> []; _ -> Answer_nums end), [Val_3]),
            Answer_nums_3 = Answer_nums_2;
        _ -> Answer_nums_3 = Answer_nums
    end,
            I_14 = (I_13 + 1),
            Fun_20_loop(Answer_nums_3, Candidates_3, I_14, N_3, Passed_3, Prime_list_3);
        _ -> {Answer_nums, Candidates_3, I_13, N_3, Passed_3, Prime_list_3}
    end
end,
{Answer_nums_3, Candidates_3, I_14, N_3, Passed_3, Prime_list_3} = Fun_20(Answer_nums, Candidates_3, I_13, N_3, Passed_3, Prime_list_3),
        Max_val = (case erlang:is_map(Answer_nums_3) of true -> maps:get(0, Answer_nums_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Answer_nums_3) + 0 + 1, Answer_nums_3); _ -> mochi_nth(0 + 1, Answer_nums_3) end end),
        I_15 = 1,
        Fun_21 = fun Fun_21_loop(Answer_nums_3, Candidates_3, I_15, Max_val, N_3, Passed_3, Prime_list_3) ->
    case (I_15 < erlang:length(Answer_nums_3)) of
        true ->
            case ((case erlang:is_map(Answer_nums_3) of true -> maps:get(I_15, Answer_nums_3, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Answer_nums_3) + I_15 + 1, Answer_nums_3); _ -> mochi_nth(I_15 + 1, Answer_nums_3) end end) > Max_val) of
        true -> Max_val_2 = (case erlang:is_map(Answer_nums_3) of true -> maps:get(I_15, Answer_nums_3, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Answer_nums_3) + I_15 + 1, Answer_nums_3); _ -> mochi_nth(I_15 + 1, Answer_nums_3) end end),
            Max_val_3 = Max_val_2;
        _ -> Max_val_3 = Max_val
    end,
            I_16 = (I_15 + 1),
            Fun_21_loop(Answer_nums_3, Candidates_3, I_16, Max_val_3, N_3, Passed_3, Prime_list_3);
        _ -> {Answer_nums_3, Candidates_3, I_15, Max_val, N_3, Passed_3, Prime_list_3}
    end
end,
{Answer_nums_3, Candidates_3, I_16, Max_val_3, N_3, Passed_3, Prime_list_3} = Fun_21(Answer_nums_3, Candidates_3, I_15, Max_val, N_3, Passed_3, Prime_list_3),
        Max_val_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(solution())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
