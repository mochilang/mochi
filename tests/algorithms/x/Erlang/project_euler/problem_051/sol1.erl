#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parse_int/1, digit_replacements/1, is_prime/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

parse_int(S) ->
    try
        Value = 0,
        I = 0,
        Fun = fun Fun_loop(I, S, Value) ->
    case (I < erlang:length(S)) of
        true ->
            Value_2 = ((Value * 10) + mochi_to_int(string:substr(S, I + 1, 1))),
            I_2 = (I + 1),
            Fun_loop(I_2, S, Value_2);
        _ -> {I, S, Value}
    end
end,
{I_2, S, Value_2} = Fun(I, S, Value),
        Value_2
    catch {return, Ret} -> Ret end.

digit_replacements(Number) ->
    try
        Num_str = mochi_str(Number),
        Counts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Counts, I_3, Num_str, Number) ->
    case (I_3 < erlang:length(Num_str)) of
        true ->
            D = mochi_to_int(string:substr(Num_str, I_3 + 1, 1)),
            Counts_2 = lists:sublist(Counts, D) ++ [((case erlang:is_map(Counts) of true -> maps:get(D, Counts, nil); _ -> case D < 0 of true -> mochi_nth(erlang:length(Counts) + D + 1, Counts); _ -> mochi_nth(D + 1, Counts) end end) + 1)] ++ lists:nthtail(D + 1, Counts),
            I_4 = (I_3 + 1),
            Fun_2_loop(Counts_2, I_4, Num_str, Number);
        _ -> {Counts, I_3, Num_str, Number}
    end
end,
{Counts_2, I_4, Num_str, Number} = Fun_2(Counts, I_3, Num_str, Number),
        Result = [],
        Digits = "0123456789",
        Digit = 0,
        Fun_6 = fun Fun_6_loop(Counts_2, Digit, Digits, I_4, Num_str, Number, Result) ->
    case (Digit < 10) of
        true ->
            case ((case erlang:is_map(Counts_2) of true -> maps:get(Digit, Counts_2, nil); _ -> case Digit < 0 of true -> mochi_nth(erlang:length(Counts_2) + Digit + 1, Counts_2); _ -> mochi_nth(Digit + 1, Counts_2) end end) > 1) of
        true -> Family = [],
            Repl = 0,
            Fun_4 = fun Fun_4_loop(Counts_2, Digit, Digits, Family, I_4, Num_str, Number, Repl, Result) ->
    case (Repl < 10) of
        true ->
            New_str = "",
            J = 0,
            Fun_3 = fun Fun_3_loop(Counts_2, Digit, Digits, Family, I_4, J, New_str, Num_str, Number, Repl, Result) ->
    case (J < erlang:length(Num_str)) of
        true ->
            C = string:substr(Num_str, J + 1, 1),
            case (C == string:substr(Digits, Digit + 1, 1)) of
        true -> New_str_2 = (New_str ++ string:substr(Digits, Repl + 1, 1)),
            New_str_4 = New_str_2;
        _ -> New_str_3 = (New_str ++ C),
            New_str_4 = New_str_3
    end,
            J_2 = (J + 1),
            Fun_3_loop(Counts_2, Digit, Digits, Family, I_4, J_2, New_str_4, Num_str, Number, Repl, Result);
        _ -> {Counts_2, Digit, Digits, Family, I_4, J, New_str, Num_str, Number, Repl, Result}
    end
end,
{Counts_2, Digit, Digits, Family, I_4, J_2, New_str_4, Num_str, Number, Repl, Result} = Fun_3(Counts_2, Digit, Digits, Family, I_4, J, New_str, Num_str, Number, Repl, Result),
            Family_2 = lists:append((case Family of nil -> []; _ -> Family end), [parse_int(New_str_4)]),
            Repl_2 = (Repl + 1),
            Fun_4_loop(Counts_2, Digit, Digits, Family_2, I_4, Num_str, Number, Repl_2, Result);
        _ -> {Counts_2, Digit, Digits, Family, I_4, Num_str, Number, Repl, Result}
    end
end,
{Counts_2, Digit, Digits, Family_2, I_4, Num_str, Number, Repl_2, Result} = Fun_4(Counts_2, Digit, Digits, Family, I_4, Num_str, Number, Repl, Result),
            Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Family_2]),
            Family_3 = Family_2,
            Fun_5 = Fun_4,
            Repl_3 = Repl_2,
            Result_3 = Result_2;
        _ -> Family_3 = nil,
            Fun_5 = Fun_2,
            Repl_3 = nil,
            Result_3 = Result
    end,
            Digit_2 = (Digit + 1),
            Fun_6_loop(Counts_2, Digit_2, Digits, I_4, Num_str, Number, Result_3);
        _ -> {Counts_2, Digit, Digits, I_4, Num_str, Number, Result}
    end
end,
{Counts_2, Digit_2, Digits, I_4, Num_str, Number, Result_3} = Fun_6(Counts_2, Digit, Digits, I_4, Num_str, Number, Result),
        Result_3
    catch {return, Ret} -> Ret end.

is_prime(Num) ->
    try
        case (Num < 2) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (mochi_mod(Num, 2) == 0) of
        true -> throw({return, (Num == 2)});
        _ -> ok
    end,
        I_5 = 3,
        Fun_7 = fun Fun_7_loop(I_5, Num) ->
    case ((I_5 * I_5) =< Num) of
        true ->
            case (mochi_mod(Num, I_5) == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_6 = (I_5 + 2),
            Fun_7_loop(I_6, Num);
        _ -> {I_5, Num}
    end
end,
{I_6, Num} = Fun_7(I_5, Num),
        true
    catch {return, Ret} -> Ret end.

solution(Family_length) ->
    try
        Candidate = 121313,
        case mochi_not(is_prime(121313)) of
        true -> throw({return, -1});
        _ -> ok
    end,
        Reps = digit_replacements(121313),
        R = 0,
        Fun_9 = fun Fun_9_loop(Candidate, Family_length, R, Reps) ->
    case (R < erlang:length(Reps)) of
        true ->
            Family_4 = (case erlang:is_map(Reps) of true -> maps:get(R, Reps, nil); _ -> case R < 0 of true -> mochi_nth(erlang:length(Reps) + R + 1, Reps); _ -> mochi_nth(R + 1, Reps) end end),
            Count = 0,
            Min_prime = 0,
            First = true,
            I_7 = 0,
            Fun_8 = fun Fun_8_loop(Candidate, Count, Family_4, Family_length, First, I_7, Min_prime, R, Reps) ->
    case (I_7 < erlang:length(Family_4)) of
        true ->
            Num_2 = (case erlang:is_map(Family_4) of true -> maps:get(I_7, Family_4, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Family_4) + I_7 + 1, Family_4); _ -> mochi_nth(I_7 + 1, Family_4) end end),
            case is_prime(Num_2) of
        true -> case First of
        true -> Min_prime_2 = Num_2,
            First_2 = false,
            First_3 = First_2,
            Min_prime_5 = Min_prime_2;
        _ -> case (Num_2 < Min_prime) of
        true -> Min_prime_3 = Num_2,
            Min_prime_4 = Min_prime_3;
        _ -> Min_prime_4 = Min_prime
    end,
            First_3 = First,
            Min_prime_5 = Min_prime_4
    end,
            Count_2 = (Count + 1),
            Count_3 = Count_2,
            First_4 = First_3,
            Min_prime_6 = Min_prime_5;
        _ -> Count_3 = Count,
            First_4 = First,
            Min_prime_6 = Min_prime
    end,
            I_8 = (I_7 + 1),
            Fun_8_loop(Candidate, Count_3, Family_4, Family_length, First_4, I_8, Min_prime_6, R, Reps);
        _ -> {Candidate, Count, Family_4, Family_length, First, I_7, Min_prime, R, Reps}
    end
end,
{Candidate, Count_3, Family_4, Family_length, First_4, I_8, Min_prime_6, R, Reps} = Fun_8(Candidate, Count, Family_4, Family_length, First, I_7, Min_prime, R, Reps),
            case (Count_3 == Family_length) of
        true -> throw({return, Min_prime_6});
        _ -> ok
    end,
            R_2 = (R + 1),
            Fun_9_loop(Candidate, Family_length, R_2, Reps);
        _ -> {Candidate, Family_length, R, Reps}
    end
end,
{Candidate, Family_length, R_2, Reps} = Fun_9(Candidate, Family_length, R, Reps),
        -1
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution(8))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
