#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

solution(Pence) ->
    try
        Coins = [1, 2, 5, 10, 20, 50, 100, 200],
        Ways = [],
        I = 0,
        Fun = fun Fun_loop(Coins, I, Pence, Ways) ->
    case (I =< Pence) of
        true ->
            Ways_2 = lists:append((case Ways of nil -> []; _ -> Ways end), [0]),
            I_2 = (I + 1),
            Fun_loop(Coins, I_2, Pence, Ways_2);
        _ -> {Coins, I, Pence, Ways}
    end
end,
{Coins, I_2, Pence, Ways_2} = Fun(Coins, I, Pence, Ways),
        Ways_3 = lists:sublist(Ways_2, 0) ++ [1] ++ lists:nthtail(0 + 1, Ways_2),
        Idx = 0,
        Fun_3 = fun Fun_3_loop(Coins, I_2, Idx, Pence, Ways_3) ->
    case (Idx < erlang:length(Coins)) of
        true ->
            Coin = (case erlang:is_map(Coins) of true -> maps:get(Idx, Coins, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Coins) + Idx + 1, Coins); _ -> mochi_nth(Idx + 1, Coins) end end),
            J = Coin,
            Fun_2 = fun Fun_2_loop(Coin, Coins, I_2, Idx, J, Pence, Ways_3) ->
    case (J =< Pence) of
        true ->
            Ways_4 = lists:sublist(Ways_3, J) ++ [((case erlang:is_map(Ways_3) of true -> maps:get(J, Ways_3, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Ways_3) + J + 1, Ways_3); _ -> mochi_nth(J + 1, Ways_3) end end) + (case erlang:is_map(Ways_3) of true -> maps:get((J - Coin), Ways_3, nil); _ -> case (J - Coin) < 0 of true -> mochi_nth(erlang:length(Ways_3) + (J - Coin) + 1, Ways_3); _ -> mochi_nth((J - Coin) + 1, Ways_3) end end))] ++ lists:nthtail(J + 1, Ways_3),
            J_2 = (J + 1),
            Fun_2_loop(Coin, Coins, I_2, Idx, J_2, Pence, Ways_4);
        _ -> {Coin, Coins, I_2, Idx, J, Pence, Ways_3}
    end
end,
{Coin, Coins, I_2, Idx, J_2, Pence, Ways_4} = Fun_2(Coin, Coins, I_2, Idx, J, Pence, Ways_3),
            Idx_2 = (Idx + 1),
            Fun_3_loop(Coins, I_2, Idx_2, Pence, Ways_4);
        _ -> {Coins, I_2, Idx, Pence, Ways_3}
    end
end,
{Coins, I_2, Idx_2, Pence, Ways_4} = Fun_3(Coins, I_2, Idx, Pence, Ways_3),
        (case erlang:is_map(Ways_4) of true -> maps:get(Pence, Ways_4, nil); _ -> case Pence < 0 of true -> mochi_nth(erlang:length(Ways_4) + Pence + 1, Ways_4); _ -> mochi_nth(Pence + 1, Ways_4) end end)
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(solution(500))]),
    io:format("~ts~n", [mochi_repr(solution(200))]),
    io:format("~ts~n", [mochi_repr(solution(50))]),
    io:format("~ts~n", [mochi_repr(solution(10))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
