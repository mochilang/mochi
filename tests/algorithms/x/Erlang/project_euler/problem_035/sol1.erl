#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_prime/1, contains_an_even_digit/1, parse_int/1, find_circular_primes/1, solution/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

is_prime(N) ->
    try
        (case erlang:is_map(erlang:get('sieve')) of true -> maps:get(N, erlang:get('sieve'), nil); _ -> case N < 0 of true -> mochi_nth(erlang:length(erlang:get('sieve')) + N + 1, erlang:get('sieve')); _ -> mochi_nth(N + 1, erlang:get('sieve')) end end)
    catch {return, Ret} -> Ret end.

contains_an_even_digit(N_2) ->
    try
        S = mochi_str(N_2),
        Idx = 0,
        Fun_5 = fun Fun_5_loop(Idx, N_2, S) ->
    case (Idx < erlang:length(S)) of
        true ->
            C = string:substr(S, Idx + 1, 1),
            case (((((C == "0") orelse (C == "2")) orelse (C == "4")) orelse (C == "6")) orelse (C == "8")) of
        true -> throw({return, true});
        _ -> ok
    end,
            Idx_2 = (Idx + 1),
            Fun_5_loop(Idx_2, N_2, S);
        _ -> {Idx, N_2, S}
    end
end,
{Idx_2, N_2, S} = Fun_5(Idx, N_2, S),
        false
    catch {return, Ret} -> Ret end.

parse_int(S_2) ->
    try
        Value = 0,
        K = 0,
        Fun_6 = fun Fun_6_loop(K, S_2, Value) ->
    case (K < erlang:length(S_2)) of
        true ->
            Ch = string:substr(S_2, K + 1, 1),
            Value_2 = ((Value * 10) + mochi_to_int(Ch)),
            K_2 = (K + 1),
            Fun_6_loop(K_2, S_2, Value_2);
        _ -> {K, S_2, Value}
    end
end,
{K_2, S_2, Value_2} = Fun_6(K, S_2, Value),
        Value_2
    catch {return, Ret} -> Ret end.

find_circular_primes(Limit) ->
    try
        Result = [2],
        Num = 3,
        Fun_9 = fun Fun_9_loop(Limit, Num, Result) ->
    case (Num =< Limit) of
        true ->
            try
                case (is_prime(Num) andalso (contains_an_even_digit(Num) == false)) of
        true -> S_3 = mochi_str(Num),
            All_prime = true,
            J_4 = 0,
            Fun_7 = fun Fun_7_loop(All_prime, J_4, Limit, Num, Result, S_3) ->
    case (J_4 < erlang:length(S_3)) of
        true ->
            try
                Rotated_str = (string:substr(S_3, J_4 + 1, (erlang:length(S_3) - J_4)) ++ string:substr(S_3, 0 + 1, (J_4 - 0))),
                Rotated = parse_int(Rotated_str),
                case mochi_not(is_prime(Rotated)) of
        true -> All_prime_2 = false,
            throw({break, All_prime_2, J_4, Limit, Num, Result, S_3}),
            All_prime_3 = All_prime_2;
        _ -> All_prime_3 = All_prime
    end,
                J_5 = (J_4 + 1),
                Fun_7_loop(All_prime_3, J_5, Limit, Num, Result, S_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_7_loop(C0, C1, C2, C3, C4, C5);
                {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5}
            end;
        _ -> {All_prime, J_4, Limit, Num, Result, S_3}
    end
end,
{All_prime_3, J_5, Limit, Num, Result, S_3} = Fun_7(All_prime, J_4, Limit, Num, Result, S_3),
            case (All_prime_3 /= nil) of
        true -> Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [Num]),
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
            All_prime_4 = All_prime_3,
            Fun_8 = Fun_7,
            J_6 = J_5,
            Result_4 = Result_3,
            S_4 = S_3;
        _ -> All_prime_4 = nil,
            Fun_8 = nil,
            J_6 = nil,
            Result_4 = Result,
            S_4 = nil
    end,
                Num_2 = (Num + 2),
                Fun_9_loop(Limit, Num_2, Result_4)
            catch
                {continue, C0, C1, C2} -> Fun_9_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Limit, Num, Result}
    end
end,
{Limit, Num_2, Result_4} = Fun_9(Limit, Num, Result),
        Result_4
    catch {return, Ret} -> Ret end.

solution() ->
    try
        erlang:length(find_circular_primes(10000))
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('LIMIT', 10000),
    erlang:put('sieve', []),
    erlang:put('i', 0),
    Fun = fun Fun_loop() ->
    case (erlang:get('i') =< 10000) of
        true ->
            erlang:put('sieve', lists:append((case erlang:get('sieve') of nil -> []; _ -> erlang:get('sieve') end), [true])),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_loop();
        _ -> {}
    end
end,
{} = Fun(),
    erlang:put('p', 2),
    Fun_4 = fun Fun_4_loop() ->
    case ((erlang:get('p') * erlang:get('p')) =< 10000) of
        true ->
            case (case erlang:is_map(erlang:get('sieve')) of true -> maps:get(erlang:get('p'), erlang:get('sieve'), nil); _ -> case erlang:get('p') < 0 of true -> mochi_nth(erlang:length(erlang:get('sieve')) + erlang:get('p') + 1, erlang:get('sieve')); _ -> mochi_nth(erlang:get('p') + 1, erlang:get('sieve')) end end) of
        true -> J = (erlang:get('p') * erlang:get('p')),
            Fun_2 = fun Fun_2_loop(J) ->
    case (J =< 10000) of
        true ->
            Sieve_tmp = lists:sublist(erlang:get('sieve'), J) ++ [false] ++ lists:nthtail(J + 1, erlang:get('sieve')),
            erlang:put('sieve', Sieve_tmp),
            J_2 = (J + erlang:get('p')),
            Fun_2_loop(J_2);
        _ -> {J}
    end
end,
{J_2} = Fun_2(J),
            Fun_3 = Fun_2,
            J_3 = J_2;
        _ -> Fun_3 = Fun,
            J_3 = nil
    end,
            erlang:put('p', (erlang:get('p') + 1)),
            Fun_4_loop();
        _ -> {}
    end
end,
{} = Fun_4(),
    io:format("~ts~n", [mochi_repr(("len(find_circular_primes()) = " ++ mochi_str(solution())))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
