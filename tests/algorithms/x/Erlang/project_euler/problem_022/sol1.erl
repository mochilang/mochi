#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parse_names/1, insertion_sort/1, letter_value/1, name_score/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (3d19777eda) on 2025-08-08 17:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

parse_names(Line) ->
    try
        Names = [],
        Current = "",
        I = 0,
        Fun = fun Fun_loop(Current, I, Line, Names) ->
    case (I < erlang:length(Line)) of
        true ->
            Ch = string:substr(Line, I + 1, ((I + 1) - I)),
            case (Ch == ",") of
        true -> Names_2 = lists:append((case Names of nil -> []; _ -> Names end), [Current]),
            Current_2 = "",
            Current_5 = Current_2,
            Names_3 = Names_2;
        _ -> case (Ch /= "\"") of
        true -> Current_3 = (Current ++ Ch),
            Current_4 = Current_3;
        _ -> Current_4 = Current
    end,
            Current_5 = Current_4,
            Names_3 = Names
    end,
            I_2 = (I + 1),
            Fun_loop(Current_5, I_2, Line, Names_3);
        _ -> {Current, I, Line, Names}
    end
end,
{Current_5, I_2, Line, Names_3} = Fun(Current, I, Line, Names),
        Names_4 = lists:append((case Names_3 of nil -> []; _ -> Names_3 end), [Current_5]),
        Names_4
    catch {return, Ret} -> Ret end.

insertion_sort(Arr) ->
    try
        A = Arr,
        I_3 = 1,
        Fun_3 = fun Fun_3_loop(A, Arr, I_3) ->
    case (I_3 < erlang:length(A)) of
        true ->
            Key = (case erlang:is_map(A) of true -> maps:get(I_3, A, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(A) + I_3 + 1, A); _ -> mochi_nth(I_3 + 1, A) end end),
            J = (I_3 - 1),
            Fun_2 = fun Fun_2_loop(A, Arr, I_3, J, Key) ->
    case ((J >= 0) andalso ((case erlang:is_map(A) of true -> maps:get(J, A, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(A) + J + 1, A); _ -> mochi_nth(J + 1, A) end end) > Key)) of
        true ->
            A_2 = lists:sublist(A, (J + 1)) ++ [(case erlang:is_map(A) of true -> maps:get(J, A, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(A) + J + 1, A); _ -> mochi_nth(J + 1, A) end end)] ++ lists:nthtail((J + 1) + 1, A),
            J_2 = (J - 1),
            Fun_2_loop(A_2, Arr, I_3, J_2, Key);
        _ -> {A, Arr, I_3, J, Key}
    end
end,
{A_2, Arr, I_3, J_2, Key} = Fun_2(A, Arr, I_3, J, Key),
            A_3 = lists:sublist(A_2, (J_2 + 1)) ++ [Key] ++ lists:nthtail((J_2 + 1) + 1, A_2),
            I_4 = (I_3 + 1),
            Fun_3_loop(A_3, Arr, I_4);
        _ -> {A, Arr, I_3}
    end
end,
{A_3, Arr, I_4} = Fun_3(A, Arr, I_3),
        A_3
    catch {return, Ret} -> Ret end.

letter_value(Ch_2) ->
    try
        Alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        Idx = 0,
        Fun_4 = fun Fun_4_loop(Alphabet, Ch_2, Idx) ->
    case (Idx < erlang:length(Alphabet)) of
        true ->
            case (string:substr(Alphabet, Idx + 1, ((Idx + 1) - Idx)) == Ch_2) of
        true -> throw({return, (Idx + 1)});
        _ -> ok
    end,
            Idx_2 = (Idx + 1),
            Fun_4_loop(Alphabet, Ch_2, Idx_2);
        _ -> {Alphabet, Ch_2, Idx}
    end
end,
{Alphabet, Ch_2, Idx_2} = Fun_4(Alphabet, Ch_2, Idx),
        0
    catch {return, Ret} -> Ret end.

name_score(Name) ->
    try
        Score = 0,
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(I_5, Name, Score) ->
    case (I_5 < erlang:length(Name)) of
        true ->
            Score_2 = (Score + letter_value(string:substr(Name, I_5 + 1, ((I_5 + 1) - I_5)))),
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, Name, Score_2);
        _ -> {I_5, Name, Score}
    end
end,
{I_6, Name, Score_2} = Fun_5(I_5, Name, Score),
        Score_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        Line_2 = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
        Names_5 = insertion_sort(parse_names(Line_2)),
        Total = 0,
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(I_7, Line_2, Names_5, Total) ->
    case (I_7 < erlang:length(Names_5)) of
        true ->
            Total_2 = (Total + ((I_7 + 1) * name_score((case erlang:is_map(Names_5) of true -> maps:get(I_7, Names_5, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Names_5) + I_7 + 1, Names_5); _ -> mochi_nth(I_7 + 1, Names_5) end end)))),
            I_8 = (I_7 + 1),
            Fun_6_loop(I_8, Line_2, Names_5, Total_2);
        _ -> {I_7, Line_2, Names_5, Total}
    end
end,
{I_8, Line_2, Names_5, Total_2} = Fun_6(I_7, Line_2, Names_5, Total),
        io:format("~ts~n", [mochi_str(Total_2)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
