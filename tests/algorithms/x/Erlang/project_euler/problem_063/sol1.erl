#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow/2, num_digits/1, solution/2]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

pow(Base, Exponent) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Base, Exponent, I, Result) ->
    case (I < Exponent) of
        true ->
            Result_2 = (Result * Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exponent, I_2, Result_2);
        _ -> {Base, Exponent, I, Result}
    end
end,
{Base, Exponent, I_2, Result_2} = Fun(Base, Exponent, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

num_digits(N) ->
    try
        case (N == 0) of
        true -> throw({return, 1});
        _ -> ok
    end,
        Count = 0,
        X = N,
        Fun_2 = fun Fun_2_loop(Count, N, X) ->
    case (X > 0) of
        true ->
            X_2 = (X div 10),
            Count_2 = (Count + 1),
            Fun_2_loop(Count_2, N, X_2);
        _ -> {Count, N, X}
    end
end,
{Count_2, N, X_2} = Fun_2(Count, N, X),
        Count_2
    catch {return, Ret} -> Ret end.

solution(Max_base, Max_power) ->
    try
        Total = 0,
        Base_2 = 1,
        Fun_4 = fun Fun_4_loop(Base_2, Max_base, Max_power, Total) ->
    case (Base_2 < Max_base) of
        true ->
            Power = 1,
            Fun_3 = fun Fun_3_loop(Base_2, Max_base, Max_power, Power, Total) ->
    case (Power < Max_power) of
        true ->
            Digits = num_digits(math:pow(Base_2, Power)),
            case (Digits == Power) of
        true -> Total_2 = (Total + 1),
            Total_3 = Total_2;
        _ -> Total_3 = Total
    end,
            Power_2 = (Power + 1),
            Fun_3_loop(Base_2, Max_base, Max_power, Power_2, Total_3);
        _ -> {Base_2, Max_base, Max_power, Power, Total}
    end
end,
{Base_2, Max_base, Max_power, Power_2, Total_3} = Fun_3(Base_2, Max_base, Max_power, Power, Total),
            Base_3 = (Base_2 + 1),
            Fun_4_loop(Base_3, Max_base, Max_power, Total_3);
        _ -> {Base_2, Max_base, Max_power, Total}
    end
end,
{Base_3, Max_base, Max_power, Total_3} = Fun_4(Base_2, Max_base, Max_power, Total),
        Total_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(("solution(10, 22) = " ++ mochi_str(solution(10, 22))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
