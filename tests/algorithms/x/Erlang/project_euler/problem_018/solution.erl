#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, solution/0]).

% Generated by Mochi transpiler v0.10.61 (3d19777eda) on 2025-08-08 17:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

solution() ->
    try
        Triangle = [[75], [95, 64], [17, 47, 82], [18, 35, 87, 10], [20, 4, 82, 47, 65], [19, 1, 23, 75, 3, 34], [88, 2, 77, 73, 7, 63, 67], [99, 65, 4, 28, 6, 16, 70, 92], [41, 41, 26, 56, 83, 40, 80, 70, 33], [41, 48, 72, 33, 47, 32, 37, 16, 94, 29], [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14], [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57], [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48], [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31], [4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]],
        I = 1,
        Fun_2 = fun Fun_2_loop(I, Triangle) ->
    case (I < erlang:length(Triangle)) of
        true ->
            J = 0,
            Fun = fun Fun_loop(I, J, Triangle) ->
    case (J < erlang:length((case erlang:is_map(Triangle) of true -> maps:get(I, Triangle, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Triangle) + I + 1, Triangle); _ -> mochi_nth(I + 1, Triangle) end end))) of
        true ->
            Prev_row = (case erlang:is_map(Triangle) of true -> maps:get((I - 1), Triangle, nil); _ -> case (I - 1) < 0 of true -> mochi_nth(erlang:length(Triangle) + (I - 1) + 1, Triangle); _ -> mochi_nth((I - 1) + 1, Triangle) end end),
            Number1 = (case (J /= erlang:length(Prev_row)) of
    true -> (case erlang:is_map(Prev_row) of true -> maps:get(J, Prev_row, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Prev_row) + J + 1, Prev_row); _ -> mochi_nth(J + 1, Prev_row) end end);
    _ -> 0
end),
            Number2 = (case (J > 0) of
    true -> (case erlang:is_map(Prev_row) of true -> maps:get((J - 1), Prev_row, nil); _ -> case (J - 1) < 0 of true -> mochi_nth(erlang:length(Prev_row) + (J - 1) + 1, Prev_row); _ -> mochi_nth((J - 1) + 1, Prev_row) end end);
    _ -> 0
end),
            Max_val = (case (Number1 > Number2) of
    true -> Number1;
    _ -> Number2
end),
            Triangle_2 = lists:sublist(Triangle, I) ++ [lists:sublist(lists:nth(I + 1, Triangle), J) ++ [((case erlang:is_map((case erlang:is_map(Triangle) of true -> maps:get(I, Triangle, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Triangle) + I + 1, Triangle); _ -> mochi_nth(I + 1, Triangle) end end)) of true -> maps:get(J, (case erlang:is_map(Triangle) of true -> maps:get(I, Triangle, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Triangle) + I + 1, Triangle); _ -> mochi_nth(I + 1, Triangle) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Triangle) of true -> maps:get(I, Triangle, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Triangle) + I + 1, Triangle); _ -> mochi_nth(I + 1, Triangle) end end)) + J + 1, (case erlang:is_map(Triangle) of true -> maps:get(I, Triangle, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Triangle) + I + 1, Triangle); _ -> mochi_nth(I + 1, Triangle) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Triangle) of true -> maps:get(I, Triangle, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Triangle) + I + 1, Triangle); _ -> mochi_nth(I + 1, Triangle) end end)) end end) + Max_val)] ++ lists:nthtail(J + 1, lists:nth(I + 1, Triangle))] ++ lists:nthtail(I + 1, Triangle),
            J_2 = (J + 1),
            Fun_loop(I, J_2, Triangle_2);
        _ -> {I, J, Triangle}
    end
end,
{I, J_2, Triangle_2} = Fun(I, J, Triangle),
            I_2 = (I + 1),
            Fun_2_loop(I_2, Triangle_2);
        _ -> {I, Triangle}
    end
end,
{I_2, Triangle_2} = Fun_2(I, Triangle),
        Last = (case erlang:is_map(Triangle_2) of true -> maps:get((erlang:length(Triangle_2) - 1), Triangle_2, nil); _ -> case (erlang:length(Triangle_2) - 1) < 0 of true -> mochi_nth(erlang:length(Triangle_2) + (erlang:length(Triangle_2) - 1) + 1, Triangle_2); _ -> mochi_nth((erlang:length(Triangle_2) - 1) + 1, Triangle_2) end end),
        K = 0,
        Best = 0,
        Fun_3 = fun Fun_3_loop(Best, I_2, K, Last, Triangle_2) ->
    case (K < erlang:length(Last)) of
        true ->
            case ((case erlang:is_map(Last) of true -> maps:get(K, Last, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Last) + K + 1, Last); _ -> mochi_nth(K + 1, Last) end end) > Best) of
        true -> Best_2 = (case erlang:is_map(Last) of true -> maps:get(K, Last, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Last) + K + 1, Last); _ -> mochi_nth(K + 1, Last) end end),
            Best_3 = Best_2;
        _ -> Best_3 = Best
    end,
            K_2 = (K + 1),
            Fun_3_loop(Best_3, I_2, K_2, Last, Triangle_2);
        _ -> {Best, I_2, K, Last, Triangle_2}
    end
end,
{Best_3, I_2, K_2, Last, Triangle_2} = Fun_3(Best, I_2, K, Last, Triangle_2),
        Best_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
