#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_prime/1, remove_at/2, collect_primes/3, max_list/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

is_prime(Number) ->
    try
        case ((1 < Number) andalso (Number < 4)) of
        true -> throw({return, true});
        _ -> case (((Number < 2) orelse (mochi_mod(Number, 2) == 0)) orelse (mochi_mod(Number, 3) == 0)) of
        true -> throw({return, false});
        _ -> ok
    end
    end,
        I = 5,
        Fun = fun Fun_loop(I, Number) ->
    case ((I * I) =< Number) of
        true ->
            case ((mochi_mod(Number, I) == 0) orelse (mochi_mod(Number, (I + 2)) == 0)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 6),
            Fun_loop(I_2, Number);
        _ -> {I, Number}
    end
end,
{I_2, Number} = Fun(I, Number),
        true
    catch {return, Ret} -> Ret end.

remove_at(Xs, Index) ->
    try
        Res = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Index, Res, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            case (I_3 /= Index) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Index, Res_3, Xs);
        _ -> {I_3, Index, Res, Xs}
    end
end,
{I_4, Index, Res_3, Xs} = Fun_2(I_3, Index, Res, Xs),
        Res_3
    catch {return, Ret} -> Ret end.

collect_primes(Nums, Current, Primes) ->
    try
        case (erlang:length(Nums) == 0) of
        true -> case is_prime(Current) of
        true -> Primes_2 = lists:append((case Primes of nil -> []; _ -> Primes end), [Current]),
            Primes_3 = Primes_2;
        _ -> Primes_3 = Primes
    end,
            throw({return, Primes_3}),
            Primes_4 = Primes_3;
        _ -> Primes_4 = Primes
    end,
        I_5 = 0,
        Res_4 = Primes_4,
        Fun_3 = fun Fun_3_loop(Current, I_5, Nums, Primes_4, Res_4) ->
    case (I_5 < erlang:length(Nums)) of
        true ->
            Digit = (case erlang:is_map(Nums) of true -> maps:get(I_5, Nums, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Nums) + I_5 + 1, Nums); _ -> mochi_nth(I_5 + 1, Nums) end end),
            Remaining = remove_at(Nums, I_5),
            Res_5 = collect_primes(Remaining, ((Current * 10) + Digit), Res_4),
            I_6 = (I_5 + 1),
            Fun_3_loop(Current, I_6, Nums, Primes_4, Res_5);
        _ -> {Current, I_5, Nums, Primes_4, Res_4}
    end
end,
{Current, I_6, Nums, Primes_4, Res_5} = Fun_3(Current, I_5, Nums, Primes_4, Res_4),
        Res_5
    catch {return, Ret} -> Ret end.

max_list(Nums_2) ->
    try
        M = 0,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(I_7, M, Nums_2) ->
    case (I_7 < erlang:length(Nums_2)) of
        true ->
            case ((case erlang:is_map(Nums_2) of true -> maps:get(I_7, Nums_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Nums_2) + I_7 + 1, Nums_2); _ -> mochi_nth(I_7 + 1, Nums_2) end end) > M) of
        true -> M_2 = (case erlang:is_map(Nums_2) of true -> maps:get(I_7, Nums_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Nums_2) + I_7 + 1, Nums_2); _ -> mochi_nth(I_7 + 1, Nums_2) end end),
            M_3 = M_2;
        _ -> M_3 = M
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(I_8, M_3, Nums_2);
        _ -> {I_7, M, Nums_2}
    end
end,
{I_8, M_3, Nums_2} = Fun_4(I_7, M, Nums_2),
        M_3
    catch {return, Ret} -> Ret end.

solution(N) ->
    try
        Digits = [],
        I_9 = 1,
        Fun_5 = fun Fun_5_loop(Digits, I_9, N) ->
    case (I_9 =< N) of
        true ->
            Digits_2 = lists:append((case Digits of nil -> []; _ -> Digits end), [I_9]),
            I_10 = (I_9 + 1),
            Fun_5_loop(Digits_2, I_10, N);
        _ -> {Digits, I_9, N}
    end
end,
{Digits_2, I_10, N} = Fun_5(Digits, I_9, N),
        Primes_5 = collect_primes(Digits_2, 0, []),
        case (erlang:length(Primes_5) == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        max_list(Primes_5)
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(("solution() = " ++ mochi_str(solution(7))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
