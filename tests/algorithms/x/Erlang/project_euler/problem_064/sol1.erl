#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, intsqrt/1, continuousfractionperiod/1, solution/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

intsqrt(N) ->
    try
        case (N == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        X = N,
        Y = ((X + 1) div 2),
        Fun = fun Fun_loop(N, X, Y) ->
    case (Y < X) of
        true ->
            X_2 = Y,
            Y_2 = ((X_2 + (N div X_2)) div 2),
            Fun_loop(N, X_2, Y_2);
        _ -> {N, X, Y}
    end
end,
{N, X_2, Y_2} = Fun(N, X, Y),
        X_2
    catch {return, Ret} -> Ret end.

continuousfractionperiod(N_2) ->
    try
        M = 0,
        D = 1,
        A0 = intsqrt(N_2),
        A = A0,
        Period = 0,
        Fun_2 = fun Fun_2_loop(A, A0, D, M, N_2, Period) ->
    case (A /= (2 * A0)) of
        true ->
            M_2 = ((D * A) - M),
            D_2 = ((N_2 - (M_2 * M_2)) div D),
            A_2 = ((A0 + M_2) div D_2),
            Period_2 = (Period + 1),
            Fun_2_loop(A_2, A0, D_2, M_2, N_2, Period_2);
        _ -> {A, A0, D, M, N_2, Period}
    end
end,
{A_2, A0, D_2, M_2, N_2, Period_2} = Fun_2(A, A0, D, M, N_2, Period),
        Period_2
    catch {return, Ret} -> Ret end.

solution(N_3) ->
    try
        Count = 0,
        Fun_3 = fun Fun_3_loop(List, Count, N_3) ->
    case List of
        [] -> {Count, N_3};
        [I|I_rest] ->
            R = intsqrt(I),
            case ((R * R) /= I) of
        true -> P = continuousfractionperiod(I),
            case (mochi_mod(P, 2) == 1) of
        true -> Count_2 = (Count + 1),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            Count_4 = Count_3,
            P_2 = P;
        _ -> Count_4 = Count,
            P_2 = nil
    end,
            Fun_3_loop(I_rest, Count_4, N_3);
        _ -> {Count, N_3}
    end
end,
{Count_4, N_3} = Fun_3(lists:seq(2, ((N_3 + 1)) - 1), Count, N_3),
        Count_4
    catch {return, Ret} -> Ret end.

main() ->
    try
        NStr = ((fun() -> case io:get_line("") of eof -> "q"; L -> string:trim(L) end end)()),
        N_4 = mochi_to_int(NStr),
        io:format("~ts~n", [mochi_repr(solution(N_4))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
