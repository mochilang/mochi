#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_9_pandigital/1, solution/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

is_9_pandigital(N) ->
    try
        Digits = [],
        I = 0,
        Fun = fun Fun_loop(Digits, I, N) ->
    case (I < 10) of
        true ->
            Digits_2 = lists:append((case Digits of nil -> []; _ -> Digits end), [0]),
            I_2 = (I + 1),
            Fun_loop(Digits_2, I_2, N);
        _ -> {Digits, I, N}
    end
end,
{Digits_2, I_2, N} = Fun(Digits, I, N),
        Count = 0,
        X = N,
        Fun_2 = fun Fun_2_loop(Count, Digits_2, I_2, N, X) ->
    case (X > 0) of
        true ->
            Digit = mochi_mod(X, 10),
            case (Digit == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            case ((case erlang:is_map(Digits_2) of true -> maps:get(Digit, Digits_2, nil); _ -> case Digit < 0 of true -> mochi_nth(erlang:length(Digits_2) + Digit + 1, Digits_2); _ -> mochi_nth(Digit + 1, Digits_2) end end) == 1) of
        true -> throw({return, false});
        _ -> ok
    end,
            Digits_3 = lists:sublist(Digits_2, Digit) ++ [1] ++ lists:nthtail(Digit + 1, Digits_2),
            X_2 = (X div 10),
            Count_2 = (Count + 1),
            Fun_2_loop(Count_2, Digits_3, I_2, N, X_2);
        _ -> {Count, Digits_2, I_2, N, X}
    end
end,
{Count_2, Digits_3, I_2, N, X_2} = Fun_2(Count, Digits_2, I_2, N, X),
        ((((((((((Count_2 == 9) andalso ((case erlang:is_map(Digits_3) of true -> maps:get(1, Digits_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Digits_3) + 1 + 1, Digits_3); _ -> mochi_nth(1 + 1, Digits_3) end end) == 1)) andalso ((case erlang:is_map(Digits_3) of true -> maps:get(2, Digits_3, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Digits_3) + 2 + 1, Digits_3); _ -> mochi_nth(2 + 1, Digits_3) end end) == 1)) andalso ((case erlang:is_map(Digits_3) of true -> maps:get(3, Digits_3, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(Digits_3) + 3 + 1, Digits_3); _ -> mochi_nth(3 + 1, Digits_3) end end) == 1)) andalso ((case erlang:is_map(Digits_3) of true -> maps:get(4, Digits_3, nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(Digits_3) + 4 + 1, Digits_3); _ -> mochi_nth(4 + 1, Digits_3) end end) == 1)) andalso ((case erlang:is_map(Digits_3) of true -> maps:get(5, Digits_3, nil); _ -> case 5 < 0 of true -> mochi_nth(erlang:length(Digits_3) + 5 + 1, Digits_3); _ -> mochi_nth(5 + 1, Digits_3) end end) == 1)) andalso ((case erlang:is_map(Digits_3) of true -> maps:get(6, Digits_3, nil); _ -> case 6 < 0 of true -> mochi_nth(erlang:length(Digits_3) + 6 + 1, Digits_3); _ -> mochi_nth(6 + 1, Digits_3) end end) == 1)) andalso ((case erlang:is_map(Digits_3) of true -> maps:get(7, Digits_3, nil); _ -> case 7 < 0 of true -> mochi_nth(erlang:length(Digits_3) + 7 + 1, Digits_3); _ -> mochi_nth(7 + 1, Digits_3) end end) == 1)) andalso ((case erlang:is_map(Digits_3) of true -> maps:get(8, Digits_3, nil); _ -> case 8 < 0 of true -> mochi_nth(erlang:length(Digits_3) + 8 + 1, Digits_3); _ -> mochi_nth(8 + 1, Digits_3) end end) == 1)) andalso ((case erlang:is_map(Digits_3) of true -> maps:get(9, Digits_3, nil); _ -> case 9 < 0 of true -> mochi_nth(erlang:length(Digits_3) + 9 + 1, Digits_3); _ -> mochi_nth(9 + 1, Digits_3) end end) == 1))
    catch {return, Ret} -> Ret end.

solution() ->
    try
        Base_num = 9999,
        Fun_3 = fun Fun_3_loop(Base_num) ->
    case (Base_num >= 5000) of
        true ->
            Candidate = (100002 * Base_num),
            case is_9_pandigital(Candidate) of
        true -> throw({return, Candidate});
        _ -> ok
    end,
            Base_num_2 = (Base_num - 1),
            Fun_3_loop(Base_num_2);
        _ -> {Base_num}
    end
end,
{Base_num_2} = Fun_3(Base_num),
        Base_num_3 = 333,
        Fun_4 = fun Fun_4_loop(Base_num_3) ->
    case (Base_num_3 >= 100) of
        true ->
            Candidate_2 = (1002003 * Base_num_3),
            case is_9_pandigital(Candidate_2) of
        true -> throw({return, Candidate_2});
        _ -> ok
    end,
            Base_num_4 = (Base_num_3 - 1),
            Fun_4_loop(Base_num_4);
        _ -> {Base_num_3}
    end
end,
{Base_num_4} = Fun_4(Base_num_3),
        0
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(("solution() = " ++ mochi_str(solution())))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
