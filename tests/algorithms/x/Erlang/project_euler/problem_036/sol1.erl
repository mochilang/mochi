#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_palindrome_str/1, to_binary/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

is_palindrome_str(S) ->
    try
        I = 0,
        J = (erlang:length(S) - 1),
        Fun = fun Fun_loop(I, J, S) ->
    case (I < J) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) /= string:substr(S, J + 1, ((J + 1) - J))) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            J_2 = (J - 1),
            Fun_loop(I_2, J_2, S);
        _ -> {I, J, S}
    end
end,
{I_2, J_2, S} = Fun(I, J, S),
        true
    catch {return, Ret} -> Ret end.

to_binary(N) ->
    try
        case (N == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Res = "",
        X = N,
        Fun_2 = fun Fun_2_loop(N, Res, X) ->
    case (X > 0) of
        true ->
            Res_2 = (mochi_str(mochi_mod(X, 2)) ++ Res),
            X_2 = (X div 2),
            Fun_2_loop(N, Res_2, X_2);
        _ -> {N, Res, X}
    end
end,
{N, Res_2, X_2} = Fun_2(N, Res, X),
        Res_2
    catch {return, Ret} -> Ret end.

solution(N_2) ->
    try
        Total = 0,
        I_3 = 1,
        Fun_3 = fun Fun_3_loop(I_3, N_2, Total) ->
    case (I_3 < N_2) of
        true ->
            Dec = mochi_str(I_3),
            Bin = to_binary(I_3),
            case (is_palindrome_str(Dec) andalso is_palindrome_str(Bin)) of
        true -> Total_2 = (Total + I_3),
            Total_3 = Total_2;
        _ -> Total_3 = Total
    end,
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, N_2, Total_3);
        _ -> {I_3, N_2, Total}
    end
end,
{I_4, N_2, Total_3} = Fun_3(I_3, N_2, Total),
        Total_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(solution(1000000))]),
    io:format("~ts~n", [mochi_repr(solution(500000))]),
    io:format("~ts~n", [mochi_repr(solution(100000))]),
    io:format("~ts~n", [mochi_repr(solution(1000))]),
    io:format("~ts~n", [mochi_repr(solution(100))]),
    io:format("~ts~n", [mochi_repr(solution(10))]),
    io:format("~ts~n", [mochi_repr(solution(2))]),
    io:format("~ts~n", [mochi_repr(solution(1))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
