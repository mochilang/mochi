#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, solution/3]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

solution(Numerator, Denominator, Limit) ->
    try
        MaxNumerator = 0,
        MaxDenominator = 1,
        CurrentDenominator = 1,
        Fun = fun Fun_loop(CurrentDenominator, Denominator, Limit, MaxDenominator, MaxNumerator, Numerator) ->
    case (CurrentDenominator =< Limit) of
        true ->
            CurrentNumerator = ((CurrentDenominator * Numerator) div Denominator),
            case (mochi_mod(CurrentDenominator, Denominator) == 0) of
        true -> CurrentNumerator_2 = (CurrentNumerator - 1),
            CurrentNumerator_3 = CurrentNumerator_2;
        _ -> CurrentNumerator_3 = CurrentNumerator
    end,
            case ((CurrentNumerator_3 * MaxDenominator) > (CurrentDenominator * MaxNumerator)) of
        true -> MaxNumerator_2 = CurrentNumerator_3,
            MaxDenominator_2 = CurrentDenominator,
            MaxDenominator_3 = MaxDenominator_2,
            MaxNumerator_3 = MaxNumerator_2;
        _ -> MaxDenominator_3 = MaxDenominator,
            MaxNumerator_3 = MaxNumerator
    end,
            CurrentDenominator_2 = (CurrentDenominator + 1),
            Fun_loop(CurrentDenominator_2, Denominator, Limit, MaxDenominator_3, MaxNumerator_3, Numerator);
        _ -> {CurrentDenominator, Denominator, Limit, MaxDenominator, MaxNumerator, Numerator}
    end
end,
{CurrentDenominator_2, Denominator, Limit, MaxDenominator_3, MaxNumerator_3, Numerator} = Fun(CurrentDenominator, Denominator, Limit, MaxDenominator, MaxNumerator, Numerator),
        MaxNumerator_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution(3, 7, 1000000))]),
    io:format("~ts~n", [mochi_str(solution(3, 7, 8))]),
    io:format("~ts~n", [mochi_str(solution(6, 7, 60))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
