#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, combination_exceeds/3, count_exceeding/1]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

combination_exceeds(N, R, Limit) ->
    try
        R2 = R,
        case (R2 > (N - R2)) of
        true -> R2_2 = (N - R2),
            R2_3 = R2_2;
        _ -> R2_3 = R2
    end,
        Result = 1,
        K = 1,
        Fun = fun Fun_loop(K, Limit, N, R, R2_3, Result) ->
    case (K =< R2_3) of
        true ->
            Result_2 = ((Result * ((N - R2_3) + K)) div K),
            case (Result_2 > Limit) of
        true -> throw({return, true});
        _ -> ok
    end,
            K_2 = (K + 1),
            Fun_loop(K_2, Limit, N, R, R2_3, Result_2);
        _ -> {K, Limit, N, R, R2_3, Result}
    end
end,
{K_2, Limit, N, R, R2_3, Result_2} = Fun(K, Limit, N, R, R2_3, Result),
        (Result_2 > Limit)
    catch {return, Ret} -> Ret end.

count_exceeding(Limit_2) ->
    try
        Total = 0,
        N_2 = 1,
        Fun_3 = fun Fun_3_loop(Limit_2, N_2, Total) ->
    case (N_2 =< 100) of
        true ->
            R_2 = 1,
            Fun_2 = fun Fun_2_loop(Limit_2, N_2, R_2, Total) ->
    case (R_2 =< N_2) of
        true ->
            case combination_exceeds(N_2, R_2, Limit_2) of
        true -> Total_2 = (Total + 1),
            Total_3 = Total_2;
        _ -> Total_3 = Total
    end,
            R_3 = (R_2 + 1),
            Fun_2_loop(Limit_2, N_2, R_3, Total_3);
        _ -> {Limit_2, N_2, R_2, Total}
    end
end,
{Limit_2, N_2, R_3, Total_3} = Fun_2(Limit_2, N_2, R_2, Total),
            N_3 = (N_2 + 1),
            Fun_3_loop(Limit_2, N_3, Total_3);
        _ -> {Limit_2, N_2, Total}
    end
end,
{Limit_2, N_3, Total_3} = Fun_3(Limit_2, N_2, Total),
        Total_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(count_exceeding(1000000))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
