#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, gcd/2, solution/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

gcd(A, B) ->
    try
        X = A,
        Y = B,
        Fun = fun Fun_loop(A, B, X, Y) ->
    case (Y /= 0) of
        true ->
            Temp = mochi_mod(X, Y),
            X_2 = Y,
            Y_2 = Temp,
            Fun_loop(A, B, X_2, Y_2);
        _ -> {A, B, X, Y}
    end
end,
{A, B, X_2, Y_2} = Fun(A, B, X, Y),
        X_2
    catch {return, Ret} -> Ret end.

solution(Max_d) ->
    try
        Fractions_number = 0,
        D = 0,
        Fun_3 = fun Fun_3_loop(D, Fractions_number, Max_d) ->
    case (D =< Max_d) of
        true ->
            N = ((D div 3) + 1),
            Half = ((D + 1) div 2),
            Fun_2 = fun Fun_2_loop(D, Fractions_number, Half, Max_d, N) ->
    case (N < Half) of
        true ->
            case (gcd(N, D) == 1) of
        true -> Fractions_number_2 = (Fractions_number + 1),
            Fractions_number_3 = Fractions_number_2;
        _ -> Fractions_number_3 = Fractions_number
    end,
            N_2 = (N + 1),
            Fun_2_loop(D, Fractions_number_3, Half, Max_d, N_2);
        _ -> {D, Fractions_number, Half, Max_d, N}
    end
end,
{D, Fractions_number_3, Half, Max_d, N_2} = Fun_2(D, Fractions_number, Half, Max_d, N),
            D_2 = (D + 1),
            Fun_3_loop(D_2, Fractions_number_3, Max_d);
        _ -> {D, Fractions_number, Max_d}
    end
end,
{D_2, Fractions_number_3, Max_d} = Fun_3(D, Fractions_number, Max_d),
        Fractions_number_3
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(solution(12000))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
