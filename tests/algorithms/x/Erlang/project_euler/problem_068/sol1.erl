#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, range_desc/2, range_asc/2, concat_lists/2, swap/3, generate_gon_ring/2, min_outer/1, is_magic_gon/1, permute_search/4, solution/1]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

range_desc(Start, End) ->
    try
        Res = [],
        I = Start,
        Fun = fun Fun_loop(End, I, Res, Start) ->
    case (I >= End) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [I]),
            I_2 = (I - 1),
            Fun_loop(End, I_2, Res_2, Start);
        _ -> {End, I, Res, Start}
    end
end,
{End, I_2, Res_2, Start} = Fun(End, I, Res, Start),
        Res_2
    catch {return, Ret} -> Ret end.

range_asc(Start_2, End_2) ->
    try
        Res_3 = [],
        I_3 = Start_2,
        Fun_2 = fun Fun_2_loop(End_2, I_3, Res_3, Start_2) ->
    case (I_3 =< End_2) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [I_3]),
            I_4 = (I_3 + 1),
            Fun_2_loop(End_2, I_4, Res_4, Start_2);
        _ -> {End_2, I_3, Res_3, Start_2}
    end
end,
{End_2, I_4, Res_4, Start_2} = Fun_2(End_2, I_3, Res_3, Start_2),
        Res_4
    catch {return, Ret} -> Ret end.

concat_lists(A, B) ->
    try
        Res_5 = A,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(A, B, I_5, Res_5) ->
    case (I_5 < erlang:length(B)) of
        true ->
            Res_6 = lists:append((case Res_5 of nil -> []; _ -> Res_5 end), [(case erlang:is_map(B) of true -> maps:get(I_5, B, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(B) + I_5 + 1, B); _ -> mochi_nth(I_5 + 1, B) end end)]),
            I_6 = (I_5 + 1),
            Fun_3_loop(A, B, I_6, Res_6);
        _ -> {A, B, I_5, Res_5}
    end
end,
{A, B, I_6, Res_6} = Fun_3(A, B, I_5, Res_5),
        Res_6
    catch {return, Ret} -> Ret end.

swap(Xs, I_7, J) ->
    try
        Res_7 = [],
        K = 0,
        Fun_4 = fun Fun_4_loop(I_7, J, K, Res_7, Xs) ->
    case (K < erlang:length(Xs)) of
        true ->
            case (K == I_7) of
        true -> Res_8 = lists:append((case Res_7 of nil -> []; _ -> Res_7 end), [(case erlang:is_map(Xs) of true -> maps:get(J, Xs, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Xs) + J + 1, Xs); _ -> mochi_nth(J + 1, Xs) end end)]),
            Res_12 = Res_8;
        _ -> case (K == J) of
        true -> Res_9 = lists:append((case Res_7 of nil -> []; _ -> Res_7 end), [(case erlang:is_map(Xs) of true -> maps:get(I_7, Xs, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Xs) + I_7 + 1, Xs); _ -> mochi_nth(I_7 + 1, Xs) end end)]),
            Res_11 = Res_9;
        _ -> Res_10 = lists:append((case Res_7 of nil -> []; _ -> Res_7 end), [(case erlang:is_map(Xs) of true -> maps:get(K, Xs, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Xs) + K + 1, Xs); _ -> mochi_nth(K + 1, Xs) end end)]),
            Res_11 = Res_10
    end,
            Res_12 = Res_11
    end,
            K_2 = (K + 1),
            Fun_4_loop(I_7, J, K_2, Res_12, Xs);
        _ -> {I_7, J, K, Res_7, Xs}
    end
end,
{I_7, J, K_2, Res_12, Xs} = Fun_4(I_7, J, K, Res_7, Xs),
        Res_12
    catch {return, Ret} -> Ret end.

generate_gon_ring(Gon_side, Perm) ->
    try
        Result = [],
        Result_2 = lists:append((case Result of nil -> []; _ -> Result end), [(case erlang:is_map(Perm) of true -> maps:get(0, Perm, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Perm) + 0 + 1, Perm); _ -> mochi_nth(0 + 1, Perm) end end)]),
        Result_3 = lists:append((case Result_2 of nil -> []; _ -> Result_2 end), [(case erlang:is_map(Perm) of true -> maps:get(1, Perm, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Perm) + 1 + 1, Perm); _ -> mochi_nth(1 + 1, Perm) end end)]),
        Result_4 = lists:append((case Result_3 of nil -> []; _ -> Result_3 end), [(case erlang:is_map(Perm) of true -> maps:get(2, Perm, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Perm) + 2 + 1, Perm); _ -> mochi_nth(2 + 1, Perm) end end)]),
        Extended = lists:append((case Perm of nil -> []; _ -> Perm end), [(case erlang:is_map(Perm) of true -> maps:get(1, Perm, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Perm) + 1 + 1, Perm); _ -> mochi_nth(1 + 1, Perm) end end)]),
        Magic_number = (case (Gon_side < 5) of
    true -> 1;
    _ -> 2
end),
        I_8 = 1,
        Fun_5 = fun Fun_5_loop(Extended, Gon_side, I_8, Magic_number, Perm, Result_4) ->
    case (I_8 < (mochi_safe_div(erlang:length(Extended), 3) + Magic_number)) of
        true ->
            Result_5 = lists:append((case Result_4 of nil -> []; _ -> Result_4 end), [(case erlang:is_map(Extended) of true -> maps:get(((2 * I_8) + 1), Extended, nil); _ -> case ((2 * I_8) + 1) < 0 of true -> mochi_nth(erlang:length(Extended) + ((2 * I_8) + 1) + 1, Extended); _ -> mochi_nth(((2 * I_8) + 1) + 1, Extended) end end)]),
            Result_6 = lists:append((case Result_5 of nil -> []; _ -> Result_5 end), [(case erlang:is_map(Result_5) of true -> maps:get(((3 * I_8) - 1), Result_5, nil); _ -> case ((3 * I_8) - 1) < 0 of true -> mochi_nth(erlang:length(Result_5) + ((3 * I_8) - 1) + 1, Result_5); _ -> mochi_nth(((3 * I_8) - 1) + 1, Result_5) end end)]),
            Result_7 = lists:append((case Result_6 of nil -> []; _ -> Result_6 end), [(case erlang:is_map(Extended) of true -> maps:get(((2 * I_8) + 2), Extended, nil); _ -> case ((2 * I_8) + 2) < 0 of true -> mochi_nth(erlang:length(Extended) + ((2 * I_8) + 2) + 1, Extended); _ -> mochi_nth(((2 * I_8) + 2) + 1, Extended) end end)]),
            I_9 = (I_8 + 1),
            Fun_5_loop(Extended, Gon_side, I_9, Magic_number, Perm, Result_7);
        _ -> {Extended, Gon_side, I_8, Magic_number, Perm, Result_4}
    end
end,
{Extended, Gon_side, I_9, Magic_number, Perm, Result_7} = Fun_5(Extended, Gon_side, I_8, Magic_number, Perm, Result_4),
        Result_7
    catch {return, Ret} -> Ret end.

min_outer(Numbers) ->
    try
        Min_val = (case erlang:is_map(Numbers) of true -> maps:get(0, Numbers, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Numbers) + 0 + 1, Numbers); _ -> mochi_nth(0 + 1, Numbers) end end),
        I_10 = 3,
        Fun_6 = fun Fun_6_loop(I_10, Min_val, Numbers) ->
    case (I_10 < erlang:length(Numbers)) of
        true ->
            case ((case erlang:is_map(Numbers) of true -> maps:get(I_10, Numbers, nil); _ -> case I_10 < 0 of true -> mochi_nth(erlang:length(Numbers) + I_10 + 1, Numbers); _ -> mochi_nth(I_10 + 1, Numbers) end end) < Min_val) of
        true -> Min_val_2 = (case erlang:is_map(Numbers) of true -> maps:get(I_10, Numbers, nil); _ -> case I_10 < 0 of true -> mochi_nth(erlang:length(Numbers) + I_10 + 1, Numbers); _ -> mochi_nth(I_10 + 1, Numbers) end end),
            Min_val_3 = Min_val_2;
        _ -> Min_val_3 = Min_val
    end,
            I_11 = (I_10 + 3),
            Fun_6_loop(I_11, Min_val_3, Numbers);
        _ -> {I_10, Min_val, Numbers}
    end
end,
{I_11, Min_val_3, Numbers} = Fun_6(I_10, Min_val, Numbers),
        Min_val_3
    catch {return, Ret} -> Ret end.

is_magic_gon(Numbers_2) ->
    try
        case (mochi_mod(erlang:length(Numbers_2), 3) /= 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (min_outer(Numbers_2) /= (case erlang:is_map(Numbers_2) of true -> maps:get(0, Numbers_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Numbers_2) + 0 + 1, Numbers_2); _ -> mochi_nth(0 + 1, Numbers_2) end end)) of
        true -> throw({return, false});
        _ -> ok
    end,
        Total = (((case erlang:is_map(Numbers_2) of true -> maps:get(0, Numbers_2, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Numbers_2) + 0 + 1, Numbers_2); _ -> mochi_nth(0 + 1, Numbers_2) end end) + (case erlang:is_map(Numbers_2) of true -> maps:get(1, Numbers_2, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Numbers_2) + 1 + 1, Numbers_2); _ -> mochi_nth(1 + 1, Numbers_2) end end)) + (case erlang:is_map(Numbers_2) of true -> maps:get(2, Numbers_2, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Numbers_2) + 2 + 1, Numbers_2); _ -> mochi_nth(2 + 1, Numbers_2) end end)),
        I_12 = 3,
        Fun_7 = fun Fun_7_loop(I_12, Numbers_2, Total) ->
    case (I_12 < erlang:length(Numbers_2)) of
        true ->
            case ((((case erlang:is_map(Numbers_2) of true -> maps:get(I_12, Numbers_2, nil); _ -> case I_12 < 0 of true -> mochi_nth(erlang:length(Numbers_2) + I_12 + 1, Numbers_2); _ -> mochi_nth(I_12 + 1, Numbers_2) end end) + (case erlang:is_map(Numbers_2) of true -> maps:get((I_12 + 1), Numbers_2, nil); _ -> case (I_12 + 1) < 0 of true -> mochi_nth(erlang:length(Numbers_2) + (I_12 + 1) + 1, Numbers_2); _ -> mochi_nth((I_12 + 1) + 1, Numbers_2) end end)) + (case erlang:is_map(Numbers_2) of true -> maps:get((I_12 + 2), Numbers_2, nil); _ -> case (I_12 + 2) < 0 of true -> mochi_nth(erlang:length(Numbers_2) + (I_12 + 2) + 1, Numbers_2); _ -> mochi_nth((I_12 + 2) + 1, Numbers_2) end end)) /= Total) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_13 = (I_12 + 3),
            Fun_7_loop(I_13, Numbers_2, Total);
        _ -> {I_12, Numbers_2, Total}
    end
end,
{I_13, Numbers_2, Total} = Fun_7(I_12, Numbers_2, Total),
        true
    catch {return, Ret} -> Ret end.

permute_search(Nums, Start_3, Gon_side_2, Current_max) ->
    try
        case (Start_3 == erlang:length(Nums)) of
        true -> Ring = generate_gon_ring(Gon_side_2, Nums),
            case is_magic_gon(Ring) of
        true -> S = "",
            K_3 = 0,
            Fun_8 = fun Fun_8_loop(Current_max, Gon_side_2, K_3, Nums, Ring, S, Start_3) ->
    case (K_3 < erlang:length(Ring)) of
        true ->
            S_2 = (S ++ mochi_str((case erlang:is_map(Ring) of true -> maps:get(K_3, Ring, nil); _ -> case K_3 < 0 of true -> mochi_nth(erlang:length(Ring) + K_3 + 1, Ring); _ -> mochi_nth(K_3 + 1, Ring) end end))),
            K_4 = (K_3 + 1),
            Fun_8_loop(Current_max, Gon_side_2, K_4, Nums, Ring, S_2, Start_3);
        _ -> {Current_max, Gon_side_2, K_3, Nums, Ring, S, Start_3}
    end
end,
{Current_max, Gon_side_2, K_4, Nums, Ring, S_2, Start_3} = Fun_8(Current_max, Gon_side_2, K_3, Nums, Ring, S, Start_3),
            case (S_2 > Current_max) of
        true -> throw({return, S_2});
        _ -> ok
    end,
            Fun_9 = Fun_8,
            K_5 = K_4,
            S_3 = S_2;
        _ -> Fun_9 = nil,
            K_5 = nil,
            S_3 = nil
    end,
            throw({return, Current_max}),
            Fun_10 = Fun_9,
            K_6 = K_5,
            Ring_2 = Ring,
            S_4 = S_3;
        _ -> Fun_10 = nil,
            K_6 = nil,
            Ring_2 = nil,
            S_4 = nil
    end,
        Res_13 = Current_max,
        I_14 = Start_3,
        Fun_11 = fun Fun_11_loop(Current_max, Gon_side_2, I_14, K_6, Nums, Res_13, Ring_2, S_4, Start_3) ->
    case (I_14 < erlang:length(Nums)) of
        true ->
            Swapped = swap(Nums, Start_3, I_14),
            Candidate = permute_search(Swapped, (Start_3 + 1), Gon_side_2, Res_13),
            case (Candidate > Res_13) of
        true -> Res_14 = Candidate,
            Res_15 = Res_14;
        _ -> Res_15 = Res_13
    end,
            I_15 = (I_14 + 1),
            Fun_11_loop(Current_max, Gon_side_2, I_15, K_6, Nums, Res_15, Ring_2, S_4, Start_3);
        _ -> {Current_max, Gon_side_2, I_14, K_6, Nums, Res_13, Ring_2, S_4, Start_3}
    end
end,
{Current_max, Gon_side_2, I_15, K_6, Nums, Res_15, Ring_2, S_4, Start_3} = Fun_11(Current_max, Gon_side_2, I_14, K_6, Nums, Res_13, Ring_2, S_4, Start_3),
        Res_15
    catch {return, Ret} -> Ret end.

solution(Gon_side_3) ->
    try
        case ((Gon_side_3 < 3) orelse (Gon_side_3 > 5)) of
        true -> throw({return, ""});
        _ -> ok
    end,
        Small = range_desc((Gon_side_3 + 1), 1),
        Big = range_asc((Gon_side_3 + 2), (Gon_side_3 * 2)),
        Numbers_3 = concat_lists(Small, Big),
        Max_str = permute_search(Numbers_3, 0, Gon_side_3, ""),
        Max_str
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(solution(5))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
