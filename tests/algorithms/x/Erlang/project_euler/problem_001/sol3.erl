#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (c04b4c8319) on 2025-08-08 17:05 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

solution(N) ->
    try
        Total = 0,
        Num = 0,
        Fun = fun Fun_loop(N, Num, Total) ->
    case true of
        true ->
            try
                Num_2 = (Num + 3),
                case (Num_2 >= N) of
        true -> throw({break, N, Num_2, Total});
        _ -> ok
    end,
                Total_2 = (Total + Num_2),
                Num_3 = (Num_2 + 2),
                case (Num_3 >= N) of
        true -> throw({break, N, Num_3, Total_2});
        _ -> ok
    end,
                Total_3 = (Total_2 + Num_3),
                Num_4 = (Num_3 + 1),
                case (Num_4 >= N) of
        true -> throw({break, N, Num_4, Total_3});
        _ -> ok
    end,
                Total_4 = (Total_3 + Num_4),
                Num_5 = (Num_4 + 3),
                case (Num_5 >= N) of
        true -> throw({break, N, Num_5, Total_4});
        _ -> ok
    end,
                Total_5 = (Total_4 + Num_5),
                Num_6 = (Num_5 + 1),
                case (Num_6 >= N) of
        true -> throw({break, N, Num_6, Total_5});
        _ -> ok
    end,
                Total_6 = (Total_5 + Num_6),
                Num_7 = (Num_6 + 2),
                case (Num_7 >= N) of
        true -> throw({break, N, Num_7, Total_6});
        _ -> ok
    end,
                Total_7 = (Total_6 + Num_7),
                Num_8 = (Num_7 + 3),
                case (Num_8 >= N) of
        true -> throw({break, N, Num_8, Total_7});
        _ -> ok
    end,
                Total_8 = (Total_7 + Num_8),
                Fun_loop(N, Num_8, Total_8)
            catch
                {continue, C0, C1, C2} -> Fun_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {N, Num, Total}
    end
end,
{N, Num_8, Total_8} = Fun(N, Num, Total),
        Total_8
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution(1000))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
