#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, contains/2, solution/1, test_solution/0, main/0]).

% Generated by Mochi transpiler v0.10.69 (582ddaf78e)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) ->
                K = case Key of
                    <<_/binary>> -> Key;
                    _ when is_integer(Key) -> <<Key>>;
                    _ -> list_to_binary(Key)
                end,
                binary:match(Coll, K) /= nomatch;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

contains(Xs, Value) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, Value, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) == Value) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Value, Xs);
        _ -> {I, Value, Xs}
    end
end,
{I_2, Value, Xs} = Fun(I, Value, Xs),
        false
    catch {return, RetCatch} -> RetCatch end.

solution(N) ->
    try
        Zmulti = [],
        Xmulti = [],
        Temp = 1,
        Fun_2 = fun Fun_2_loop(N, Temp, Xmulti, Zmulti) ->
    case true of
        true ->
            try
                Result = (3 * Temp),
                Zmulti_3 = (case (Result < N) of
        true -> Zmulti_2 = lists:append((case Zmulti of nil -> []; _ -> Zmulti end), [Result]),
            Temp_2 = (Temp + 1),
            Temp_3 = Temp_2,
            Zmulti_2;
        _ -> throw({break, {N, Temp, Xmulti, Zmulti}}),
            Temp_3 = Temp,
            Zmulti
    end),
                Fun_2_loop(N, Temp_3, Xmulti, Zmulti_3)
            catch
                {continue, C0, C1, C2, C3} -> Fun_2_loop(C0, C1, C2, C3);
                {break, Bs} -> Bs
            end;
        _ -> {N, Temp, Xmulti, Zmulti}
    end
end,
{N, Temp_3, Xmulti, Zmulti_3} = Fun_2(N, Temp, Xmulti, Zmulti),
        Temp_4 = 1,
        Fun_3 = fun Fun_3_loop(N, Temp_4, Xmulti, Zmulti_3) ->
    case true of
        true ->
            try
                Result_2 = (5 * Temp_4),
                Xmulti_3 = (case (Result_2 < N) of
        true -> Xmulti_2 = lists:append((case Xmulti of nil -> []; _ -> Xmulti end), [Result_2]),
            Temp_5 = (Temp_4 + 1),
            Temp_6 = Temp_5,
            Xmulti_2;
        _ -> throw({break, {N, Temp_4, Xmulti, Zmulti_3}}),
            Temp_6 = Temp_4,
            Xmulti
    end),
                Fun_3_loop(N, Temp_6, Xmulti_3, Zmulti_3)
            catch
                {continue, C0, C1, C2, C3} -> Fun_3_loop(C0, C1, C2, C3);
                {break, Bs} -> Bs
            end;
        _ -> {N, Temp_4, Xmulti, Zmulti_3}
    end
end,
{N, Temp_6, Xmulti_3, Zmulti_3} = Fun_3(N, Temp_4, Xmulti, Zmulti_3),
        Collection = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Collection, I_3, N, Temp_6, Xmulti_3, Zmulti_3) ->
    case (I_3 < erlang:length(Zmulti_3)) of
        true ->
            V = (case erlang:is_map(Zmulti_3) of true -> maps:get(I_3, Zmulti_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Zmulti_3) + I_3 + 1, Zmulti_3); _ -> mochi_nth(I_3 + 1, Zmulti_3) end end),
            Collection_3 = (case mochi_not(mochi_member(V, Collection)) of
        true -> Collection_2 = lists:append((case Collection of nil -> []; _ -> Collection end), [V]),
            Collection_2;
        _ -> Collection
    end),
            I_4 = (I_3 + 1),
            Fun_4_loop(Collection_3, I_4, N, Temp_6, Xmulti_3, Zmulti_3);
        _ -> {Collection, I_3, N, Temp_6, Xmulti_3, Zmulti_3}
    end
end,
{Collection_3, I_4, N, Temp_6, Xmulti_3, Zmulti_3} = Fun_4(Collection, I_3, N, Temp_6, Xmulti_3, Zmulti_3),
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Collection_3, I_5, N, Temp_6, Xmulti_3, Zmulti_3) ->
    case (I_5 < erlang:length(Xmulti_3)) of
        true ->
            V_2 = (case erlang:is_map(Xmulti_3) of true -> maps:get(I_5, Xmulti_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Xmulti_3) + I_5 + 1, Xmulti_3); _ -> mochi_nth(I_5 + 1, Xmulti_3) end end),
            Collection_5 = (case mochi_not(mochi_member(V_2, Collection_3)) of
        true -> Collection_4 = lists:append((case Collection_3 of nil -> []; _ -> Collection_3 end), [V_2]),
            Collection_4;
        _ -> Collection_3
    end),
            I_6 = (I_5 + 1),
            Fun_5_loop(Collection_5, I_6, N, Temp_6, Xmulti_3, Zmulti_3);
        _ -> {Collection_3, I_5, N, Temp_6, Xmulti_3, Zmulti_3}
    end
end,
{Collection_5, I_6, N, Temp_6, Xmulti_3, Zmulti_3} = Fun_5(Collection_3, I_5, N, Temp_6, Xmulti_3, Zmulti_3),
        Total = 0,
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(Collection_5, I_7, N, Temp_6, Total, Xmulti_3, Zmulti_3) ->
    case (I_7 < erlang:length(Collection_5)) of
        true ->
            Total_2 = (Total + (case erlang:is_map(Collection_5) of true -> maps:get(I_7, Collection_5, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Collection_5) + I_7 + 1, Collection_5); _ -> mochi_nth(I_7 + 1, Collection_5) end end)),
            I_8 = (I_7 + 1),
            Fun_6_loop(Collection_5, I_8, N, Temp_6, Total_2, Xmulti_3, Zmulti_3);
        _ -> {Collection_5, I_7, N, Temp_6, Total, Xmulti_3, Zmulti_3}
    end
end,
{Collection_5, I_8, N, Temp_6, Total_2, Xmulti_3, Zmulti_3} = Fun_6(Collection_5, I_7, N, Temp_6, Total, Xmulti_3, Zmulti_3),
        Total_2
    catch {return, RetCatch} -> RetCatch end.

test_solution() ->
    try
        case (solution(3) /= 0) of
        true -> erlang:error({panic, "solution(3) failed"});
        _ -> ok
    end,
        case (solution(4) /= 3) of
        true -> erlang:error({panic, "solution(4) failed"});
        _ -> ok
    end,
        case (solution(10) /= 23) of
        true -> erlang:error({panic, "solution(10) failed"});
        _ -> ok
    end,
        case (solution(600) /= 83700) of
        true -> erlang:error({panic, "solution(600) failed"});
        _ -> ok
    end,
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_solution(),
        io:format("~ts~n", [mochi_repr(("solution() = " ++ mochi_str(solution(1000))))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
