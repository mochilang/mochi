#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parse_int/1, join/1, contains/2, index_of/2, remove_at/2, unique_chars/1, satisfies/2, search/3, find_secret_passcode/1]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

parse_int(S) ->
    try
        Value = 0,
        I = 0,
        Fun = fun Fun_loop(I, S, Value) ->
    case (I < erlang:length(S)) of
        true ->
            C = string:substr(S, I + 1, 1),
            Value_2 = ((Value * 10) + mochi_to_int(C)),
            I_2 = (I + 1),
            Fun_loop(I_2, S, Value_2);
        _ -> {I, S, Value}
    end
end,
{I_2, S, Value_2} = Fun(I, S, Value),
        Value_2
    catch {return, RetCatch} -> RetCatch end.

join(Xs) ->
    try
        S_2 = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, S_2, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            S_3 = (S_2 ++ (case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, S_3, Xs);
        _ -> {I_3, S_2, Xs}
    end
end,
{I_4, S_3, Xs} = Fun_2(I_3, S_2, Xs),
        S_3
    catch {return, RetCatch} -> RetCatch end.

contains(Xs_2, C_2) ->
    try
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(C_2, I_5, Xs_2) ->
    case (I_5 < erlang:length(Xs_2)) of
        true ->
            case ((case erlang:is_map(Xs_2) of true -> maps:get(I_5, Xs_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_5 + 1, Xs_2); _ -> mochi_nth(I_5 + 1, Xs_2) end end) == C_2) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(C_2, I_6, Xs_2);
        _ -> {C_2, I_5, Xs_2}
    end
end,
{C_2, I_6, Xs_2} = Fun_3(C_2, I_5, Xs_2),
        false
    catch {return, RetCatch} -> RetCatch end.

index_of(Xs_3, C_3) ->
    try
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(C_3, I_7, Xs_3) ->
    case (I_7 < erlang:length(Xs_3)) of
        true ->
            case ((case erlang:is_map(Xs_3) of true -> maps:get(I_7, Xs_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Xs_3) + I_7 + 1, Xs_3); _ -> mochi_nth(I_7 + 1, Xs_3) end end) == C_3) of
        true -> throw({return, I_7});
        _ -> ok
    end,
            I_8 = (I_7 + 1),
            Fun_4_loop(C_3, I_8, Xs_3);
        _ -> {C_3, I_7, Xs_3}
    end
end,
{C_3, I_8, Xs_3} = Fun_4(C_3, I_7, Xs_3),
        -1
    catch {return, RetCatch} -> RetCatch end.

remove_at(Xs_4, Idx) ->
    try
        Res = [],
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(I_9, Idx, Res, Xs_4) ->
    case (I_9 < erlang:length(Xs_4)) of
        true ->
            case (I_9 /= Idx) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs_4) of true -> maps:get(I_9, Xs_4, nil); _ -> case I_9 < 0 of true -> mochi_nth(erlang:length(Xs_4) + I_9 + 1, Xs_4); _ -> mochi_nth(I_9 + 1, Xs_4) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_10 = (I_9 + 1),
            Fun_5_loop(I_10, Idx, Res_3, Xs_4);
        _ -> {I_9, Idx, Res, Xs_4}
    end
end,
{I_10, Idx, Res_3, Xs_4} = Fun_5(I_9, Idx, Res, Xs_4),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

unique_chars(Logins) ->
    try
        Chars = [],
        I_11 = 0,
        Fun_7 = fun Fun_7_loop(Chars, I_11, Logins) ->
    case (I_11 < erlang:length(Logins)) of
        true ->
            Login = (case erlang:is_map(Logins) of true -> maps:get(I_11, Logins, nil); _ -> case I_11 < 0 of true -> mochi_nth(erlang:length(Logins) + I_11 + 1, Logins); _ -> mochi_nth(I_11 + 1, Logins) end end),
            J = 0,
            Fun_6 = fun Fun_6_loop(Chars, I_11, J, Login, Logins) ->
    case (J < erlang:length(Login)) of
        true ->
            C_4 = string:substr(Login, J + 1, 1),
            case mochi_not(mochi_member(C_4, Chars)) of
        true -> Chars_2 = lists:append((case Chars of nil -> []; _ -> Chars end), [C_4]),
            Chars_3 = Chars_2;
        _ -> Chars_3 = Chars
    end,
            J_2 = (J + 1),
            Fun_6_loop(Chars_3, I_11, J_2, Login, Logins);
        _ -> {Chars, I_11, J, Login, Logins}
    end
end,
{Chars_3, I_11, J_2, Login, Logins} = Fun_6(Chars, I_11, J, Login, Logins),
            I_12 = (I_11 + 1),
            Fun_7_loop(Chars_3, I_12, Logins);
        _ -> {Chars, I_11, Logins}
    end
end,
{Chars_3, I_12, Logins} = Fun_7(Chars, I_11, Logins),
        Chars_3
    catch {return, RetCatch} -> RetCatch end.

satisfies(Permutation, Logins_2) ->
    try
        I_13 = 0,
        Fun_8 = fun Fun_8_loop(I_13, Logins_2, Permutation) ->
    case (I_13 < erlang:length(Logins_2)) of
        true ->
            Login_2 = (case erlang:is_map(Logins_2) of true -> maps:get(I_13, Logins_2, nil); _ -> case I_13 < 0 of true -> mochi_nth(erlang:length(Logins_2) + I_13 + 1, Logins_2); _ -> mochi_nth(I_13 + 1, Logins_2) end end),
            I0 = index_of(Permutation, string:substr(Login_2, 0 + 1, 1)),
            I1 = index_of(Permutation, string:substr(Login_2, 1 + 1, 1)),
            I2 = index_of(Permutation, string:substr(Login_2, 2 + 1, 1)),
            case mochi_not(((I0 < I1) andalso (I1 < I2))) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_14 = (I_13 + 1),
            Fun_8_loop(I_14, Logins_2, Permutation);
        _ -> {I_13, Logins_2, Permutation}
    end
end,
{I_14, Logins_2, Permutation} = Fun_8(I_13, Logins_2, Permutation),
        true
    catch {return, RetCatch} -> RetCatch end.

search(Chars_4, Current, Logins_3) ->
    try
        case (erlang:length(Chars_4) == 0) of
        true -> case satisfies(Current, Logins_3) of
        true -> throw({return, join(Current)});
        _ -> ok
    end,
            throw({return, ""});
        _ -> ok
    end,
        I_15 = 0,
        Fun_9 = fun Fun_9_loop(Chars_4, Current, I_15, Logins_3) ->
    case (I_15 < erlang:length(Chars_4)) of
        true ->
            C_5 = (case erlang:is_map(Chars_4) of true -> maps:get(I_15, Chars_4, nil); _ -> case I_15 < 0 of true -> mochi_nth(erlang:length(Chars_4) + I_15 + 1, Chars_4); _ -> mochi_nth(I_15 + 1, Chars_4) end end),
            Rest = remove_at(Chars_4, I_15),
            Next = lists:append((case Current of nil -> []; _ -> Current end), [C_5]),
            Res_4 = search(Rest, Next, Logins_3),
            case (Res_4 /= "") of
        true -> throw({return, Res_4});
        _ -> ok
    end,
            I_16 = (I_15 + 1),
            Fun_9_loop(Chars_4, Current, I_16, Logins_3);
        _ -> {Chars_4, Current, I_15, Logins_3}
    end
end,
{Chars_4, Current, I_16, Logins_3} = Fun_9(Chars_4, Current, I_15, Logins_3),
        ""
    catch {return, RetCatch} -> RetCatch end.

find_secret_passcode(Logins_4) ->
    try
        Chars_5 = unique_chars(Logins_4),
        S_4 = search(Chars_5, [], Logins_4),
        case (S_4 == "") of
        true -> throw({return, -1});
        _ -> ok
    end,
        parse_int(S_4)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('logins1', ["135", "259", "235", "189", "690", "168", "120", "136", "289", "589", "160", "165", "580", "369", "250", "280"]),
    io:format("~ts~n", [mochi_str(find_secret_passcode(erlang:get('logins1')))]),
    erlang:put('logins2', ["426", "281", "061", "819", "268", "406", "420", "428", "209", "689", "019", "421", "469", "261", "681", "201"]),
    io:format("~ts~n", [mochi_str(find_secret_passcode(erlang:get('logins2')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
