#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, to_float/1, sqrt/1, floor/1, hexagonal_num/1, is_pentagonal/1, solution/1, test_hexagonal_num/0, test_is_pentagonal/0, test_solution/0]).

-compile({no_auto_import,[floor/1]}).
% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

to_float(X) ->
    try
        mochi_safe_mul(X, 1.0)
    catch {return, Ret} -> Ret end.

sqrt(X_2) ->
    try
        case (X_2 =< 0.0) of
        true -> throw({return, 0.0});
        _ -> ok
    end,
        Guess = X_2,
        I = 0,
        Fun = fun Fun_loop(Guess, I, X_2) ->
    case (I < 10) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X_2, Guess)), 2.0),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X_2);
        _ -> {Guess, I, X_2}
    end
end,
{Guess_2, I_2, X_2} = Fun(Guess, I, X_2),
        Guess_2
    catch {return, Ret} -> Ret end.

floor(X_3) ->
    try
        N = 0,
        Y = X_3,
        Fun_2 = fun Fun_2_loop(N, X_3, Y) ->
    case (Y >= 1.0) of
        true ->
            Y_2 = (Y - 1.0),
            N_2 = (N + 1),
            Fun_2_loop(N_2, X_3, Y_2);
        _ -> {N, X_3, Y}
    end
end,
{N_2, X_3, Y_2} = Fun_2(N, X_3, Y),
        N_2
    catch {return, Ret} -> Ret end.

hexagonal_num(N_3) ->
    try
        (N_3 * ((2 * N_3) - 1))
    catch {return, Ret} -> Ret end.

is_pentagonal(N_4) ->
    try
        Root = sqrt((1.0 + mochi_safe_mul(24.0, to_float(N_4)))),
        Val = mochi_safe_div((1.0 + Root), 6.0),
        (Val == to_float(floor(Val)))
    catch {return, Ret} -> Ret end.

solution(Start) ->
    try
        Idx = Start,
        Num = hexagonal_num(Idx),
        Fun_3 = fun Fun_3_loop(Idx, Num, Start) ->
    case mochi_not(is_pentagonal(Num)) of
        true ->
            Idx_2 = (Idx + 1),
            Num_2 = hexagonal_num(Idx_2),
            Fun_3_loop(Idx_2, Num_2, Start);
        _ -> {Idx, Num, Start}
    end
end,
{Idx_2, Num_2, Start} = Fun_3(Idx, Num, Start),
        Num_2
    catch {return, Ret} -> Ret end.

test_hexagonal_num() ->
    try
        case (hexagonal_num(143) /= 40755) of
        true -> erlang:error({panic, "hexagonal_num(143) failed"});
        _ -> ok
    end,
        case (hexagonal_num(21) /= 861) of
        true -> erlang:error({panic, "hexagonal_num(21) failed"});
        _ -> ok
    end,
        case (hexagonal_num(10) /= 190) of
        true -> erlang:error({panic, "hexagonal_num(10) failed"});
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

test_is_pentagonal() ->
    try
        case mochi_not(is_pentagonal(330)) of
        true -> erlang:error({panic, "330 should be pentagonal"});
        _ -> ok
    end,
        case is_pentagonal(7683) of
        true -> erlang:error({panic, "7683 should not be pentagonal"});
        _ -> ok
    end,
        case mochi_not(is_pentagonal(2380)) of
        true -> erlang:error({panic, "2380 should be pentagonal"});
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

test_solution() ->
    try
        case (solution(144) /= 1533776805) of
        true -> erlang:error({panic, "solution failed"});
        _ -> ok
    end,
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    test_hexagonal_num(),
    test_is_pentagonal(),
    test_solution(),
    io:format("~ts~n", [mochi_repr((mochi_str(solution(144)) ++ " = "))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
