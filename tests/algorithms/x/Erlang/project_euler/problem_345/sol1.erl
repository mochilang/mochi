#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parse_row/1, parse_matrix/1, bitcount/1, build_powers/1, solution/1]).

% Generated by Mochi transpiler v0.10.63 (d654e04ebb) on 2025-08-11 16:20 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_nth/2}).
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_safe_fmod(A, B) ->
    try math:fmod(A, B) catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

parse_row(Row_str) ->
    try
        Nums = [],
        Current = 0,
        Has_digit = false,
        I = 0,
        Fun = fun Fun_loop(Current, Has_digit, I, Nums, Row_str) ->
    case (I < erlang:length(Row_str)) of
        true ->
            Ch = string:substr(Row_str, I + 1, ((I + 1) - I)),
            case (Ch == " ") of
        true -> case Has_digit of
        true -> Nums_2 = lists:append((case Nums of nil -> []; _ -> Nums end), [Current]),
            Current_2 = 0,
            Has_digit_2 = false,
            Current_3 = Current_2,
            Has_digit_3 = Has_digit_2,
            Nums_3 = Nums_2;
        _ -> Current_3 = Current,
            Has_digit_3 = Has_digit,
            Nums_3 = Nums
    end,
            Current_5 = Current_3,
            Has_digit_5 = Has_digit_3,
            Nums_4 = Nums_3;
        _ -> Current_4 = ((Current * 10) + mochi_to_int(Ch)),
            Has_digit_4 = true,
            Current_5 = Current_4,
            Has_digit_5 = Has_digit_4,
            Nums_4 = Nums
    end,
            I_2 = (I + 1),
            Fun_loop(Current_5, Has_digit_5, I_2, Nums_4, Row_str);
        _ -> {Current, Has_digit, I, Nums, Row_str}
    end
end,
{Current_5, Has_digit_5, I_2, Nums_4, Row_str} = Fun(Current, Has_digit, I, Nums, Row_str),
        case (Has_digit_5 /= nil) of
        true -> Nums_5 = lists:append((case Nums_4 of nil -> []; _ -> Nums_4 end), [Current_5]),
            Nums_6 = Nums_5;
        _ -> Nums_6 = Nums_4
    end,
        Nums_6
    catch {return, RetCatch} -> RetCatch end.

parse_matrix(Matrix_str) ->
    try
        Matrix = [],
        Fun_2 = fun Fun_2_loop(List, Matrix, Matrix_str) ->
    case List of
        [] -> {Matrix, Matrix_str};
        [Row_str_2|Row_str_2_rest] ->
            Row = parse_row(Row_str_2),
            Matrix_2 = lists:append((case Matrix of nil -> []; _ -> Matrix end), [Row]),
            Fun_2_loop(Row_str_2_rest, Matrix_2, Matrix_str);
        _ -> {Matrix, Matrix_str}
    end
end,
{Matrix_2, Matrix_str} = Fun_2(Matrix_str, Matrix, Matrix_str),
        Matrix_2
    catch {return, RetCatch} -> RetCatch end.

bitcount(X) ->
    try
        Count = 0,
        Y = X,
        Fun_3 = fun Fun_3_loop(Count, X, Y) ->
    case (Y > 0) of
        true ->
            case (mochi_mod(Y, 2) == 1) of
        true -> Count_2 = (Count + 1),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            Y_2 = (Y div 2),
            Fun_3_loop(Count_3, X, Y_2);
        _ -> {Count, X, Y}
    end
end,
{Count_3, X, Y_2} = Fun_3(Count, X, Y),
        Count_3
    catch {return, RetCatch} -> RetCatch end.

build_powers(N) ->
    try
        Powers = [],
        I_3 = 0,
        Current_6 = 1,
        Fun_4 = fun Fun_4_loop(Current_6, I_3, N, Powers) ->
    case (I_3 =< N) of
        true ->
            Powers_2 = lists:append((case Powers of nil -> []; _ -> Powers end), [Current_6]),
            Current_7 = (Current_6 * 2),
            I_4 = (I_3 + 1),
            Fun_4_loop(Current_7, I_4, N, Powers_2);
        _ -> {Current_6, I_3, N, Powers}
    end
end,
{Current_7, I_4, N, Powers_2} = Fun_4(Current_6, I_3, N, Powers),
        Powers_2
    catch {return, RetCatch} -> RetCatch end.

solution(Matrix_str_2) ->
    try
        Arr = parse_matrix(Matrix_str_2),
        N_2 = erlang:length(Arr),
        Powers_3 = build_powers(N_2),
        Size = (case erlang:is_map(Powers_3) of true -> maps:get(N_2, Powers_3, nil); _ -> case N_2 < 0 of true -> mochi_nth(erlang:length(Powers_3) + N_2 + 1, Powers_3); _ -> mochi_nth(N_2 + 1, Powers_3) end end),
        Dp = [],
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(Arr, Dp, I_5, Matrix_str_2, N_2, Powers_3, Size) ->
    case (I_5 < Size) of
        true ->
            Dp_2 = lists:append((case Dp of nil -> []; _ -> Dp end), [0]),
            I_6 = (I_5 + 1),
            Fun_5_loop(Arr, Dp_2, I_6, Matrix_str_2, N_2, Powers_3, Size);
        _ -> {Arr, Dp, I_5, Matrix_str_2, N_2, Powers_3, Size}
    end
end,
{Arr, Dp_2, I_6, Matrix_str_2, N_2, Powers_3, Size} = Fun_5(Arr, Dp, I_5, Matrix_str_2, N_2, Powers_3, Size),
        Mask = 0,
        Fun_8 = fun Fun_8_loop(Arr, Dp_2, I_6, Mask, Matrix_str_2, N_2, Powers_3, Size) ->
    case (Mask < Size) of
        true ->
            Row_2 = bitcount(Mask),
            case (Row_2 < N_2) of
        true -> Col = 0,
            Fun_6 = fun Fun_6_loop(Arr, Col, Dp_2, I_6, Mask, Matrix_str_2, N_2, Powers_3, Row_2, Size) ->
    case (Col < N_2) of
        true ->
            case (mochi_safe_fmod(mochi_safe_div(Mask, (case erlang:is_map(Powers_3) of true -> maps:get(Col, Powers_3, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Powers_3) + Col + 1, Powers_3); _ -> mochi_nth(Col + 1, Powers_3) end end)), 2) == 0) of
        true -> New_mask = (Mask + (case erlang:is_map(Powers_3) of true -> maps:get(Col, Powers_3, nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length(Powers_3) + Col + 1, Powers_3); _ -> mochi_nth(Col + 1, Powers_3) end end)),
            Value = ((case erlang:is_map(Dp_2) of true -> maps:get(Mask, Dp_2, nil); _ -> case Mask < 0 of true -> mochi_nth(erlang:length(Dp_2) + Mask + 1, Dp_2); _ -> mochi_nth(Mask + 1, Dp_2) end end) + (case erlang:is_map((case erlang:is_map(Arr) of true -> maps:get(Row_2, Arr, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Arr) + Row_2 + 1, Arr); _ -> mochi_nth(Row_2 + 1, Arr) end end)) of true -> maps:get(Col, (case erlang:is_map(Arr) of true -> maps:get(Row_2, Arr, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Arr) + Row_2 + 1, Arr); _ -> mochi_nth(Row_2 + 1, Arr) end end), nil); _ -> case Col < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Arr) of true -> maps:get(Row_2, Arr, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Arr) + Row_2 + 1, Arr); _ -> mochi_nth(Row_2 + 1, Arr) end end)) + Col + 1, (case erlang:is_map(Arr) of true -> maps:get(Row_2, Arr, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Arr) + Row_2 + 1, Arr); _ -> mochi_nth(Row_2 + 1, Arr) end end)); _ -> mochi_nth(Col + 1, (case erlang:is_map(Arr) of true -> maps:get(Row_2, Arr, nil); _ -> case Row_2 < 0 of true -> mochi_nth(erlang:length(Arr) + Row_2 + 1, Arr); _ -> mochi_nth(Row_2 + 1, Arr) end end)) end end)),
            case (Value > (case erlang:is_map(Dp_2) of true -> maps:get(New_mask, Dp_2, nil); _ -> case New_mask < 0 of true -> mochi_nth(erlang:length(Dp_2) + New_mask + 1, Dp_2); _ -> mochi_nth(New_mask + 1, Dp_2) end end)) of
        true -> Dp_3 = lists:sublist(Dp_2, New_mask) ++ [Value] ++ lists:nthtail(New_mask + 1, Dp_2),
            Dp_4 = Dp_3;
        _ -> Dp_4 = Dp_2
    end,
            Dp_5 = Dp_4,
            New_mask_2 = New_mask,
            Value_2 = Value;
        _ -> Dp_5 = Dp_2,
            New_mask_2 = nil,
            Value_2 = nil
    end,
            Col_2 = (Col + 1),
            Fun_6_loop(Arr, Col_2, Dp_5, I_6, Mask, Matrix_str_2, N_2, Powers_3, Row_2, Size);
        _ -> {Arr, Col, Dp_2, I_6, Mask, Matrix_str_2, N_2, Powers_3, Row_2, Size}
    end
end,
{Arr, Col_2, Dp_5, I_6, Mask, Matrix_str_2, N_2, Powers_3, Row_2, Size} = Fun_6(Arr, Col, Dp_2, I_6, Mask, Matrix_str_2, N_2, Powers_3, Row_2, Size),
            Col_3 = Col_2,
            Dp_6 = Dp_5,
            Fun_7 = Fun_6;
        _ -> Col_3 = nil,
            Dp_6 = Dp_2,
            Fun_7 = Fun_5
    end,
            Mask_2 = (Mask + 1),
            Fun_8_loop(Arr, Dp_6, I_6, Mask_2, Matrix_str_2, N_2, Powers_3, Size);
        _ -> {Arr, Dp_2, I_6, Mask, Matrix_str_2, N_2, Powers_3, Size}
    end
end,
{Arr, Dp_6, I_6, Mask_2, Matrix_str_2, N_2, Powers_3, Size} = Fun_8(Arr, Dp_2, I_6, Mask, Matrix_str_2, N_2, Powers_3, Size),
        (case erlang:is_map(Dp_6) of true -> maps:get((Size - 1), Dp_6, nil); _ -> case (Size - 1) < 0 of true -> mochi_nth(erlang:length(Dp_6) + (Size - 1) + 1, Dp_6); _ -> mochi_nth((Size - 1) + 1, Dp_6) end end)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('MATRIX_2', ["7 53 183 439 863 497 383 563 79 973 287 63 343 169 583", "627 343 773 959 943 767 473 103 699 303 957 703 583 639 913", "447 283 463 29 23 487 463 993 119 883 327 493 423 159 743", "217 623 3 399 853 407 103 983 89 463 290 516 212 462 350", "960 376 682 962 300 780 486 502 912 800 250 346 172 812 350", "870 456 192 162 593 473 915 45 989 873 823 965 425 329 803", "973 965 905 919 133 673 665 235 509 613 673 815 165 992 326", "322 148 972 962 286 255 941 541 265 323 925 281 601 95 973", "445 721 11 525 473 65 511 164 138 672 18 428 154 448 848", "414 456 310 312 798 104 566 520 302 248 694 976 430 392 198", "184 829 373 181 631 101 969 613 840 740 778 458 284 760 390", "821 461 843 513 17 901 711 993 293 157 274 94 192 156 574", "34 124 4 878 450 476 712 914 838 669 875 299 823 329 699", "815 559 813 459 522 788 168 586 966 232 308 833 251 631 107", "813 883 451 509 615 77 281 613 459 205 380 274 302 35 805"]),
    erlang:put('result', solution(erlang:get('MATRIX_2'))),
    io:format("~ts~n", [mochi_repr(("solution() = " ++ mochi_str(erlang:get('result'))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
