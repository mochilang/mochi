#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (c04b4c8319) on 2025-08-08 17:05 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

solution(N) ->
    try
        Max_product = 0,
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Max_product, N) ->
    case (I =< (erlang:length(N) - 13)) of
        true ->
            Product = 1,
            J = 0,
            Fun = fun Fun_loop(I, J, Max_product, N, Product) ->
    case (J < 13) of
        true ->
            Product_2 = (Product * mochi_to_int(string:substr(N, (I + J) + 1, 1))),
            J_2 = (J + 1),
            Fun_loop(I, J_2, Max_product, N, Product_2);
        _ -> {I, J, Max_product, N, Product}
    end
end,
{I, J_2, Max_product, N, Product_2} = Fun(I, J, Max_product, N, Product),
            case (Product_2 > Max_product) of
        true -> Max_product_2 = Product_2,
            Max_product_3 = Max_product_2;
        _ -> Max_product_3 = Max_product
    end,
            I_2 = (I + 1),
            Fun_2_loop(I_2, Max_product_3, N);
        _ -> {I, Max_product, N}
    end
end,
{I_2, Max_product_3, N} = Fun_2(I, Max_product, N),
        Max_product_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('N', ((((((((((((((((((("73167176531330624919225119674426574742355349194934" ++ "96983520312774506326239578318016984801869478851843") ++ "85861560789112949495459501737958331952853208805511") ++ "12540698747158523863050715693290963295227443043557") ++ "66896648950445244523161731856403098711121722383113") ++ "62229893423380308135336276614282806444486645238749") ++ "30358907296290491560440772390713810515859307960866") ++ "70172427121883998797908792274921901699720888093776") ++ "65727333001053367881220235421809751254540594752243") ++ "52584907711670556013604839586446706324415722155397") ++ "53697817977846174064955149290862569321978468622482") ++ "83972241375657056057490261407972968652414535100474") ++ "82166370484403199890008895243450658541227588666881") ++ "16427171479924442928230863465674813919123162824586") ++ "17866458359124566529476545682848912883142607690042") ++ "24219022671055626321111109370544217506941658960408") ++ "07198403850962455444362981230987879927244284909188") ++ "84580156166097919133875499200524063689912560717606") ++ "05886116467109405077541002256983155200055935729725") ++ "71636269561882670428252483600823257530420752963450")),
    io:format("~ts~n", [mochi_repr(solution("13978431290823798458352374"))]),
    io:format("~ts~n", [mochi_repr(solution("13978431295823798458352374"))]),
    io:format("~ts~n", [mochi_repr(solution("1397843129582379841238352374"))]),
    io:format("~ts~n", [mochi_repr(solution(erlang:get('N')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
