#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, triangular_numbers/1, parse_words/1, word_value/1, contains/2, solution/0]).

% Generated by Mochi transpiler v0.10.70 (1a8b1502ae)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) ->
                K = case Key of
                    <<_/binary>> -> Key;
                    _ when is_integer(Key) -> <<Key>>;
                    _ -> list_to_binary(Key)
                end,
                binary:match(Coll, K) /= nomatch;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_read_file(Path) ->
    case file:read_file(Path) of
        {ok, Bin} -> binary_to_list(Bin);
        _ -> ""
    end.


mochi_ord(S) when is_list(S) ->
    case S of
        [C|_] -> C;
        _ -> 0
    end;
mochi_ord(S) when is_binary(S) ->
    case S of
        <<C,_/binary>> -> C;
        _ -> 0
    end;
mochi_ord(C) when is_integer(C) -> C;
mochi_ord(_) -> 0.


mochi_idiv(A, B) ->
    Q = A div B,
    R = A rem B,
    case ((R /= 0) andalso ((B < 0 andalso R > 0) orelse (B > 0 andalso R < 0))) of
        true -> Q - 1;
        false -> Q
    end.

triangular_numbers(Limit) ->
    try
        Res = [],
        N = 1,
        Fun = fun Fun_loop(Limit, N, Res) ->
    case (N =< Limit) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [mochi_idiv((N * (N + 1)), 2)]),
            N_2 = (N + 1),
            Fun_loop(Limit, N_2, Res_2);
        _ -> {Limit, N, Res}
    end
end,
{Limit, N_2, Res_2} = Fun(Limit, N, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

parse_words(Text) ->
    try
        Words = [],
        Current = "",
        I = 0,
        Fun_2 = fun Fun_2_loop(Current, I, Text, Words) ->
    case (I < erlang:length(Text)) of
        true ->
            C = string:substr(Text, I + 1, ((I + 1) - I)),
            Words_3 = (case (C == ",") of
        true -> Words_2 = lists:append((case Words of nil -> []; _ -> Words end), [Current]),
            Current_2 = "",
            Current_6 = Current_2,
            Words_2;
        _ -> Current_5 = (case (C == "\"") of
        true -> Current;
        _ -> Current_4 = (case ((C == "\r") orelse (C == "\n")) of
        true -> Current;
        _ -> Current_3 = (Current ++ C),
            Current_3
    end),
            Current_4
    end),
            Current_6 = Current_5,
            Words
    end),
            I_2 = (I + 1),
            Fun_2_loop(Current_6, I_2, Text, Words_3);
        _ -> {Current, I, Text, Words}
    end
end,
{Current_6, I_2, Text, Words_3} = Fun_2(Current, I, Text, Words),
        Words_5 = (case (erlang:length(Current_6) > 0) of
        true -> Words_4 = lists:append((case Words_3 of nil -> []; _ -> Words_3 end), [Current_6]),
            Words_4;
        _ -> Words_3
    end),
        Words_5
    catch {return, RetCatch} -> RetCatch end.

word_value(Word) ->
    try
        Total = 0,
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(I_3, Total, Word) ->
    case (I_3 < erlang:length(Word)) of
        true ->
            Total_2 = ((Total + mochi_ord(string:substr(Word, I_3 + 1, ((I_3 + 1) - I_3)))) - 64),
            I_4 = (I_3 + 1),
            Fun_3_loop(I_4, Total_2, Word);
        _ -> {I_3, Total, Word}
    end
end,
{I_4, Total_2, Word} = Fun_3(I_3, Total, Word),
        Total_2
    catch {return, RetCatch} -> RetCatch end.

contains(Xs, Target) ->
    try
        Fun_4 = fun Fun_4_loop(List, Target, Xs) ->
    case List of
        [] -> {Target, Xs};
        [X|X_rest] ->
            case (X == Target) of
        true -> throw({return, true});
        _ -> ok
    end,
            Fun_4_loop(X_rest, Target, Xs);
        _ -> {Target, Xs}
    end
end,
{Target, Xs} = Fun_4(Xs, Target, Xs),
        false
    catch {return, RetCatch} -> RetCatch end.

solution() ->
    try
        Text_2 = mochi_read_file("words.txt"),
        Words_6 = parse_words(Text_2),
        Tri = triangular_numbers(100),
        Count = 0,
        Fun_5 = fun Fun_5_loop(List, Count, Text_2, Tri, Words_6) ->
    case List of
        [] -> {Count, Text_2, Tri, Words_6};
        [W|W_rest] ->
            V = word_value(W),
            Count_3 = (case mochi_member(V, Tri) of
        true -> Count_2 = (Count + 1),
            Count_2;
        _ -> Count
    end),
            Fun_5_loop(W_rest, Count_3, Text_2, Tri, Words_6);
        _ -> {Count, Text_2, Tri, Words_6}
    end
end,
{Count_3, Text_2, Tri, Words_6} = Fun_5(Words_6, Count, Text_2, Tri, Words_6),
        Count_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~p~n", [Err])
    end.
