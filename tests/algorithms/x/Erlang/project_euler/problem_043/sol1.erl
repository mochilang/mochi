#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_substring_divisible/1, remove_at/2, digits_to_number/1, search/2, solution/1]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

is_substring_divisible(Num) ->
    try
        case (mochi_mod((case erlang:is_map(Num) of true -> maps:get(3, Num, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(Num) + 3 + 1, Num); _ -> mochi_nth(3 + 1, Num) end end), 2) /= 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (mochi_mod((((case erlang:is_map(Num) of true -> maps:get(2, Num, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Num) + 2 + 1, Num); _ -> mochi_nth(2 + 1, Num) end end) + (case erlang:is_map(Num) of true -> maps:get(3, Num, nil); _ -> case 3 < 0 of true -> mochi_nth(erlang:length(Num) + 3 + 1, Num); _ -> mochi_nth(3 + 1, Num) end end)) + (case erlang:is_map(Num) of true -> maps:get(4, Num, nil); _ -> case 4 < 0 of true -> mochi_nth(erlang:length(Num) + 4 + 1, Num); _ -> mochi_nth(4 + 1, Num) end end)), 3) /= 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (mochi_mod((case erlang:is_map(Num) of true -> maps:get(5, Num, nil); _ -> case 5 < 0 of true -> mochi_nth(erlang:length(Num) + 5 + 1, Num); _ -> mochi_nth(5 + 1, Num) end end), 5) /= 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        Primes = [7, 11, 13, 17],
        I = 0,
        Fun = fun Fun_loop(I, Num, Primes) ->
    case (I < erlang:length(Primes)) of
        true ->
            P = (case erlang:is_map(Primes) of true -> maps:get(I, Primes, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Primes) + I + 1, Primes); _ -> mochi_nth(I + 1, Primes) end end),
            Idx = (I + 4),
            Val = ((((case erlang:is_map(Num) of true -> maps:get(Idx, Num, nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(Num) + Idx + 1, Num); _ -> mochi_nth(Idx + 1, Num) end end) * 100) + ((case erlang:is_map(Num) of true -> maps:get((Idx + 1), Num, nil); _ -> case (Idx + 1) < 0 of true -> mochi_nth(erlang:length(Num) + (Idx + 1) + 1, Num); _ -> mochi_nth((Idx + 1) + 1, Num) end end) * 10)) + (case erlang:is_map(Num) of true -> maps:get((Idx + 2), Num, nil); _ -> case (Idx + 2) < 0 of true -> mochi_nth(erlang:length(Num) + (Idx + 2) + 1, Num); _ -> mochi_nth((Idx + 2) + 1, Num) end end)),
            case (mochi_mod(Val, P) /= 0) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Num, Primes);
        _ -> {I, Num, Primes}
    end
end,
{I_2, Num, Primes} = Fun(I, Num, Primes),
        true
    catch {return, Ret} -> Ret end.

remove_at(Xs, Idx_2) ->
    try
        Res = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Idx_2, Res, Xs) ->
    case (I_3 < erlang:length(Xs)) of
        true ->
            case (I_3 /= Idx_2) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs) of true -> maps:get(I_3, Xs, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs) + I_3 + 1, Xs); _ -> mochi_nth(I_3 + 1, Xs) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Idx_2, Res_3, Xs);
        _ -> {I_3, Idx_2, Res, Xs}
    end
end,
{I_4, Idx_2, Res_3, Xs} = Fun_2(I_3, Idx_2, Res, Xs),
        Res_3
    catch {return, Ret} -> Ret end.

digits_to_number(Xs_2) ->
    try
        Value = 0,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Value, Xs_2) ->
    case (I_5 < erlang:length(Xs_2)) of
        true ->
            Value_2 = ((Value * 10) + (case erlang:is_map(Xs_2) of true -> maps:get(I_5, Xs_2, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_5 + 1, Xs_2); _ -> mochi_nth(I_5 + 1, Xs_2) end end)),
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Value_2, Xs_2);
        _ -> {I_5, Value, Xs_2}
    end
end,
{I_6, Value_2, Xs_2} = Fun_3(I_5, Value, Xs_2),
        Value_2
    catch {return, Ret} -> Ret end.

search(Prefix, Remaining) ->
    try
        case (erlang:length(Remaining) == 0) of
        true -> case is_substring_divisible(Prefix) of
        true -> throw({return, digits_to_number(Prefix)});
        _ -> ok
    end,
            throw({return, 0});
        _ -> ok
    end,
        Total = 0,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(I_7, Prefix, Remaining, Total) ->
    case (I_7 < erlang:length(Remaining)) of
        true ->
            D = (case erlang:is_map(Remaining) of true -> maps:get(I_7, Remaining, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Remaining) + I_7 + 1, Remaining); _ -> mochi_nth(I_7 + 1, Remaining) end end),
            Next_prefix = lists:append((case Prefix of nil -> []; _ -> Prefix end), [D]),
            Next_remaining = remove_at(Remaining, I_7),
            Total_2 = (Total + search(Next_prefix, Next_remaining)),
            I_8 = (I_7 + 1),
            Fun_4_loop(I_8, Prefix, Remaining, Total_2);
        _ -> {I_7, Prefix, Remaining, Total}
    end
end,
{I_8, Prefix, Remaining, Total_2} = Fun_4(I_7, Prefix, Remaining, Total),
        Total_2
    catch {return, Ret} -> Ret end.

solution(N) ->
    try
        Digits = [],
        I_9 = 0,
        Fun_5 = fun Fun_5_loop(Digits, I_9, N) ->
    case (I_9 < N) of
        true ->
            Digits_2 = lists:append((case Digits of nil -> []; _ -> Digits end), [I_9]),
            I_10 = (I_9 + 1),
            Fun_5_loop(Digits_2, I_10, N);
        _ -> {Digits, I_9, N}
    end
end,
{Digits_2, I_10, N} = Fun_5(Digits, I_9, N),
        search([], Digits_2)
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts ~ts~n", [mochi_repr("solution() ="), mochi_repr(solution(10))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
