#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

solution(Length) ->
    try
        Ways = [],
        I = 0,
        Fun = fun Fun_loop(I, Length, Ways) ->
    case (I =< Length) of
        true ->
            Row = [],
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [0]),
            Row_3 = lists:append((case Row_2 of nil -> []; _ -> Row_2 end), [0]),
            Row_4 = lists:append((case Row_3 of nil -> []; _ -> Row_3 end), [0]),
            Ways_2 = lists:append((case Ways of nil -> []; _ -> Ways end), [Row_4]),
            I_2 = (I + 1),
            Fun_loop(I_2, Length, Ways_2);
        _ -> {I, Length, Ways}
    end
end,
{I_2, Length, Ways_2} = Fun(I, Length, Ways),
        Row_length = 0,
        Fun_4 = fun Fun_4_loop(I_2, Length, Row_length, Ways_2) ->
    case (Row_length =< Length) of
        true ->
            Tile_length = 2,
            Fun_3 = fun Fun_3_loop(I_2, Length, Row_length, Tile_length, Ways_2) ->
    case (Tile_length =< 4) of
        true ->
            Tile_start = 0,
            Fun_2 = fun Fun_2_loop(I_2, Length, Row_length, Tile_length, Tile_start, Ways_2) ->
    case (Tile_start =< (Row_length - Tile_length)) of
        true ->
            Remaining = ((Row_length - Tile_start) - Tile_length),
            Ways_3 = lists:sublist(Ways_2, Row_length) ++ [lists:sublist(lists:nth(Row_length + 1, Ways_2), (Tile_length - 2)) ++ [(((case erlang:is_map((case erlang:is_map(Ways_2) of true -> maps:get(Row_length, Ways_2, nil); _ -> case Row_length < 0 of true -> mochi_nth(erlang:length(Ways_2) + Row_length + 1, Ways_2); _ -> mochi_nth(Row_length + 1, Ways_2) end end)) of true -> maps:get((Tile_length - 2), (case erlang:is_map(Ways_2) of true -> maps:get(Row_length, Ways_2, nil); _ -> case Row_length < 0 of true -> mochi_nth(erlang:length(Ways_2) + Row_length + 1, Ways_2); _ -> mochi_nth(Row_length + 1, Ways_2) end end), nil); _ -> case (Tile_length - 2) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ways_2) of true -> maps:get(Row_length, Ways_2, nil); _ -> case Row_length < 0 of true -> mochi_nth(erlang:length(Ways_2) + Row_length + 1, Ways_2); _ -> mochi_nth(Row_length + 1, Ways_2) end end)) + (Tile_length - 2) + 1, (case erlang:is_map(Ways_2) of true -> maps:get(Row_length, Ways_2, nil); _ -> case Row_length < 0 of true -> mochi_nth(erlang:length(Ways_2) + Row_length + 1, Ways_2); _ -> mochi_nth(Row_length + 1, Ways_2) end end)); _ -> mochi_nth((Tile_length - 2) + 1, (case erlang:is_map(Ways_2) of true -> maps:get(Row_length, Ways_2, nil); _ -> case Row_length < 0 of true -> mochi_nth(erlang:length(Ways_2) + Row_length + 1, Ways_2); _ -> mochi_nth(Row_length + 1, Ways_2) end end)) end end) + (case erlang:is_map((case erlang:is_map(Ways_2) of true -> maps:get(Remaining, Ways_2, nil); _ -> case Remaining < 0 of true -> mochi_nth(erlang:length(Ways_2) + Remaining + 1, Ways_2); _ -> mochi_nth(Remaining + 1, Ways_2) end end)) of true -> maps:get((Tile_length - 2), (case erlang:is_map(Ways_2) of true -> maps:get(Remaining, Ways_2, nil); _ -> case Remaining < 0 of true -> mochi_nth(erlang:length(Ways_2) + Remaining + 1, Ways_2); _ -> mochi_nth(Remaining + 1, Ways_2) end end), nil); _ -> case (Tile_length - 2) < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ways_2) of true -> maps:get(Remaining, Ways_2, nil); _ -> case Remaining < 0 of true -> mochi_nth(erlang:length(Ways_2) + Remaining + 1, Ways_2); _ -> mochi_nth(Remaining + 1, Ways_2) end end)) + (Tile_length - 2) + 1, (case erlang:is_map(Ways_2) of true -> maps:get(Remaining, Ways_2, nil); _ -> case Remaining < 0 of true -> mochi_nth(erlang:length(Ways_2) + Remaining + 1, Ways_2); _ -> mochi_nth(Remaining + 1, Ways_2) end end)); _ -> mochi_nth((Tile_length - 2) + 1, (case erlang:is_map(Ways_2) of true -> maps:get(Remaining, Ways_2, nil); _ -> case Remaining < 0 of true -> mochi_nth(erlang:length(Ways_2) + Remaining + 1, Ways_2); _ -> mochi_nth(Remaining + 1, Ways_2) end end)) end end)) + 1)] ++ lists:nthtail((Tile_length - 2) + 1, lists:nth(Row_length + 1, Ways_2))] ++ lists:nthtail(Row_length + 1, Ways_2),
            Tile_start_2 = (Tile_start + 1),
            Fun_2_loop(I_2, Length, Row_length, Tile_length, Tile_start_2, Ways_3);
        _ -> {I_2, Length, Row_length, Tile_length, Tile_start, Ways_2}
    end
end,
{I_2, Length, Row_length, Tile_length, Tile_start_2, Ways_3} = Fun_2(I_2, Length, Row_length, Tile_length, Tile_start, Ways_2),
            Tile_length_2 = (Tile_length + 1),
            Fun_3_loop(I_2, Length, Row_length, Tile_length_2, Ways_3);
        _ -> {I_2, Length, Row_length, Tile_length, Ways_2}
    end
end,
{I_2, Length, Row_length, Tile_length_2, Ways_3} = Fun_3(I_2, Length, Row_length, Tile_length, Ways_2),
            Row_length_2 = (Row_length + 1),
            Fun_4_loop(I_2, Length, Row_length_2, Ways_3);
        _ -> {I_2, Length, Row_length, Ways_2}
    end
end,
{I_2, Length, Row_length_2, Ways_3} = Fun_4(I_2, Length, Row_length, Ways_2),
        Total = 0,
        J = 0,
        Fun_5 = fun Fun_5_loop(I_2, J, Length, Row_length_2, Total, Ways_3) ->
    case (J < 3) of
        true ->
            Total_2 = (Total + (case erlang:is_map((case erlang:is_map(Ways_3) of true -> maps:get(Length, Ways_3, nil); _ -> case Length < 0 of true -> mochi_nth(erlang:length(Ways_3) + Length + 1, Ways_3); _ -> mochi_nth(Length + 1, Ways_3) end end)) of true -> maps:get(J, (case erlang:is_map(Ways_3) of true -> maps:get(Length, Ways_3, nil); _ -> case Length < 0 of true -> mochi_nth(erlang:length(Ways_3) + Length + 1, Ways_3); _ -> mochi_nth(Length + 1, Ways_3) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Ways_3) of true -> maps:get(Length, Ways_3, nil); _ -> case Length < 0 of true -> mochi_nth(erlang:length(Ways_3) + Length + 1, Ways_3); _ -> mochi_nth(Length + 1, Ways_3) end end)) + J + 1, (case erlang:is_map(Ways_3) of true -> maps:get(Length, Ways_3, nil); _ -> case Length < 0 of true -> mochi_nth(erlang:length(Ways_3) + Length + 1, Ways_3); _ -> mochi_nth(Length + 1, Ways_3) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(Ways_3) of true -> maps:get(Length, Ways_3, nil); _ -> case Length < 0 of true -> mochi_nth(erlang:length(Ways_3) + Length + 1, Ways_3); _ -> mochi_nth(Length + 1, Ways_3) end end)) end end)),
            J_2 = (J + 1),
            Fun_5_loop(I_2, J_2, Length, Row_length_2, Total_2, Ways_3);
        _ -> {I_2, J, Length, Row_length_2, Total, Ways_3}
    end
end,
{I_2, J_2, Length, Row_length_2, Total_2, Ways_3} = Fun_5(I_2, J, Length, Row_length_2, Total, Ways_3),
        Total_2
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(solution(5))]),
    io:format("~ts~n", [mochi_repr(solution(50))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
