#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, get_digits/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

get_digits(Num) ->
    try
        Cube = ((Num * Num) * Num),
        S = mochi_str(Cube),
        Counts = [],
        J = 0,
        Fun = fun Fun_loop(Counts, Cube, J, Num, S) ->
    case (J < 10) of
        true ->
            Counts_2 = lists:append((case Counts of nil -> []; _ -> Counts end), [0]),
            J_2 = (J + 1),
            Fun_loop(Counts_2, Cube, J_2, Num, S);
        _ -> {Counts, Cube, J, Num, S}
    end
end,
{Counts_2, Cube, J_2, Num, S} = Fun(Counts, Cube, J, Num, S),
        I = 0,
        Fun_2 = fun Fun_2_loop(Counts_2, Cube, I, J_2, Num, S) ->
    case (I < erlang:length(S)) of
        true ->
            D = mochi_to_int(string:substr(S, I + 1, 1)),
            Counts_3 = lists:sublist(Counts_2, D) ++ [((case erlang:is_map(Counts_2) of true -> maps:get(D, Counts_2, nil); _ -> case D < 0 of true -> mochi_nth(erlang:length(Counts_2) + D + 1, Counts_2); _ -> mochi_nth(D + 1, Counts_2) end end) + 1)] ++ lists:nthtail(D + 1, Counts_2),
            I_2 = (I + 1),
            Fun_2_loop(Counts_3, Cube, I_2, J_2, Num, S);
        _ -> {Counts_2, Cube, I, J_2, Num, S}
    end
end,
{Counts_3, Cube, I_2, J_2, Num, S} = Fun_2(Counts_2, Cube, I, J_2, Num, S),
        Result = "",
        D_2 = 0,
        Fun_4 = fun Fun_4_loop(Counts_3, Cube, D_2, I_2, J_2, Num, Result, S) ->
    case (D_2 < 10) of
        true ->
            C = (case erlang:is_map(Counts_3) of true -> maps:get(D_2, Counts_3, nil); _ -> case D_2 < 0 of true -> mochi_nth(erlang:length(Counts_3) + D_2 + 1, Counts_3); _ -> mochi_nth(D_2 + 1, Counts_3) end end),
            Fun_3 = fun Fun_3_loop(C, Counts_3, Cube, D_2, I_2, J_2, Num, Result, S) ->
    case (C > 0) of
        true ->
            Result_2 = (Result ++ mochi_str(D_2)),
            C_2 = (C - 1),
            Fun_3_loop(C_2, Counts_3, Cube, D_2, I_2, J_2, Num, Result_2, S);
        _ -> {C, Counts_3, Cube, D_2, I_2, J_2, Num, Result, S}
    end
end,
{C_2, Counts_3, Cube, D_2, I_2, J_2, Num, Result_2, S} = Fun_3(C, Counts_3, Cube, D_2, I_2, J_2, Num, Result, S),
            D_3 = (D_2 + 1),
            Fun_4_loop(Counts_3, Cube, D_3, I_2, J_2, Num, Result_2, S);
        _ -> {Counts_3, Cube, D_2, I_2, J_2, Num, Result, S}
    end
end,
{Counts_3, Cube, D_3, I_2, J_2, Num, Result_2, S} = Fun_4(Counts_3, Cube, D_2, I_2, J_2, Num, Result, S),
        Result_2
    catch {return, Ret} -> Ret end.

solution(Max_base) ->
    try
        Freqs = #{},
        Num_2 = 0,
        Fun_5 = fun Fun_5_loop(Freqs, Max_base, Num_2) ->
    case true of
        true ->
            Digits = get_digits(Num_2),
            Arr = [],
            case maps:is_key(Digits, Freqs) of
        true -> Arr_2 = maps:get(Digits, Freqs, nil),
            Arr_3 = Arr_2;
        _ -> Arr_3 = Arr
    end,
            Arr_4 = lists:append((case Arr_3 of nil -> []; _ -> Arr_3 end), [Num_2]),
            Freqs_2 = maps:put(Digits, Arr_4, Freqs),
            case (erlang:length(Arr_4) == Max_base) of
        true -> Base = (case erlang:is_map(Arr_4) of true -> maps:get(0, Arr_4, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Arr_4) + 0 + 1, Arr_4); _ -> mochi_nth(0 + 1, Arr_4) end end),
            throw({return, ((Base * Base) * Base)}),
            Base_2 = Base;
        _ -> Base_2 = nil
    end,
            Num_3 = (Num_2 + 1),
            Fun_5_loop(Freqs_2, Max_base, Num_3);
        _ -> {Freqs, Max_base, Num_2}
    end
end,
{Freqs_2, Max_base, Num_3} = Fun_5(Freqs, Max_base, Num_2),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(("solution() = " ++ mochi_str(solution(5))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
