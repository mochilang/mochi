#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, countdivisors/1, solution/0]).

% Generated by Mochi transpiler v0.10.61 (3d19777eda) on 2025-08-08 17:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

countdivisors(N) ->
    try
        Num = N,
        Total = 1,
        I = 2,
        Fun_2 = fun Fun_2_loop(I, N, Num, Total) ->
    case ((I * I) =< Num) of
        true ->
            Multiplicity = 0,
            Fun = fun Fun_loop(I, Multiplicity, N, Num, Total) ->
    case (mochi_mod(Num, I) == 0) of
        true ->
            Num_2 = (Num div I),
            Multiplicity_2 = (Multiplicity + 1),
            Fun_loop(I, Multiplicity_2, N, Num_2, Total);
        _ -> {I, Multiplicity, N, Num, Total}
    end
end,
{I, Multiplicity_2, N, Num_2, Total} = Fun(I, Multiplicity, N, Num, Total),
            Total_2 = (Total * (Multiplicity_2 + 1)),
            I_2 = (I + 1),
            Fun_2_loop(I_2, N, Num_2, Total_2);
        _ -> {I, N, Num, Total}
    end
end,
{I_2, N, Num_2, Total_2} = Fun_2(I, N, Num, Total),
        case (Num_2 > 1) of
        true -> Total_3 = (Total_2 * 2),
            Total_4 = Total_3;
        _ -> Total_4 = Total_2
    end,
        Total_4
    catch {return, Ret} -> Ret end.

solution() ->
    try
        N_2 = 1,
        Tri = 1,
        Fun_3 = fun Fun_3_loop(N_2, Tri) ->
    case (countdivisors(Tri) =< 500) of
        true ->
            N_3 = (N_2 + 1),
            Tri_2 = (Tri + N_3),
            Fun_3_loop(N_3, Tri_2);
        _ -> {N_2, Tri}
    end
end,
{N_3, Tri_2} = Fun_3(N_2, Tri),
        Tri_2
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(solution())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
