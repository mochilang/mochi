#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, count_divisors/1, solution/0]).

% Generated by Mochi transpiler v0.10.61 (3d19777eda) on 2025-08-08 17:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

count_divisors(N) ->
    try
        M = N,
        N_divisors = 1,
        I = 2,
        Fun_2 = fun Fun_2_loop(I, M, N, N_divisors) ->
    case ((I * I) =< M) of
        true ->
            Multiplicity = 0,
            Fun = fun Fun_loop(I, M, Multiplicity, N, N_divisors) ->
    case (mochi_mod(M, I) == 0) of
        true ->
            M_2 = (M div I),
            Multiplicity_2 = (Multiplicity + 1),
            Fun_loop(I, M_2, Multiplicity_2, N, N_divisors);
        _ -> {I, M, Multiplicity, N, N_divisors}
    end
end,
{I, M_2, Multiplicity_2, N, N_divisors} = Fun(I, M, Multiplicity, N, N_divisors),
            N_divisors_2 = (N_divisors * (Multiplicity_2 + 1)),
            I_2 = (I + 1),
            Fun_2_loop(I_2, M_2, N, N_divisors_2);
        _ -> {I, M, N, N_divisors}
    end
end,
{I_2, M_2, N, N_divisors_2} = Fun_2(I, M, N, N_divisors),
        case (M_2 > 1) of
        true -> N_divisors_3 = (N_divisors_2 * 2),
            N_divisors_4 = N_divisors_3;
        _ -> N_divisors_4 = N_divisors_2
    end,
        N_divisors_4
    catch {return, Ret} -> Ret end.

solution() ->
    try
        T_num = 1,
        I_3 = 1,
        Fun_3 = fun Fun_3_loop(I_3, T_num) ->
    case true of
        true ->
            try
                I_4 = (I_3 + 1),
                T_num_2 = (T_num + I_4),
                case (count_divisors(T_num_2) > 500) of
        true -> throw({break, I_4, T_num_2});
        _ -> ok
    end,
                Fun_3_loop(I_4, T_num_2)
            catch
                {continue, C0, C1} -> Fun_3_loop(C0, C1);
                {break, B0, B1} -> {B0, B1}
            end;
        _ -> {I_3, T_num}
    end
end,
{I_4, T_num_2} = Fun_3(I_3, T_num),
        T_num_2
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution())]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
