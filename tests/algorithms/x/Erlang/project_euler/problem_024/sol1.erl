#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, factorial/1, nth_permutation/2, solution/0, main/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

factorial(N) ->
    try
        Result = 1,
        I = 2,
        Fun = fun Fun_loop(I, N, Result) ->
    case (I =< N) of
        true ->
            Result_2 = (Result * I),
            I_2 = (I + 1),
            Fun_loop(I_2, N, Result_2);
        _ -> {I, N, Result}
    end
end,
{I_2, N, Result_2} = Fun(I, N, Result),
        Result_2
    catch {return, Ret} -> Ret end.

nth_permutation(Digits, Index) ->
    try
        Chars = Digits,
        N_2 = Index,
        Res = "",
        K = erlang:length(Chars),
        Fun_2 = fun Fun_2_loop(Chars, Digits, Index, K, N_2, Res) ->
    case (K > 0) of
        true ->
            F = factorial((K - 1)),
            Pos = (N_2 div F),
            N_3 = mochi_mod(N_2, F),
            Res_2 = (Res ++ string:substr(Chars, Pos + 1, ((Pos + 1) - Pos))),
            Chars_2 = (string:substr(Chars, 0 + 1, (Pos - 0)) ++ string:substr(Chars, (Pos + 1) + 1, (erlang:length(Chars) - (Pos + 1)))),
            K_2 = (K - 1),
            Fun_2_loop(Chars_2, Digits, Index, K_2, N_3, Res_2);
        _ -> {Chars, Digits, Index, K, N_2, Res}
    end
end,
{Chars_2, Digits, Index, K_2, N_3, Res_2} = Fun_2(Chars, Digits, Index, K, N_2, Res),
        Res_2
    catch {return, Ret} -> Ret end.

solution() ->
    try
        nth_permutation("0123456789", 999999)
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(solution())]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
