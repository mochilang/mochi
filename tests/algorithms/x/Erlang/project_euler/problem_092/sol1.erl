#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, next_number/1, chain/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (8a444192ed) on 2025-08-08 18:58 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

next_number(Number) ->
    try
        N = Number,
        Total = 0,
        Fun = fun Fun_loop(N, Number, Total) ->
    case (N > 0) of
        true ->
            D = mochi_mod(N, 10),
            Total_2 = (Total + (D * D)),
            N_2 = (N div 10),
            Fun_loop(N_2, Number, Total_2);
        _ -> {N, Number, Total}
    end
end,
{N_2, Number, Total_2} = Fun(N, Number, Total),
        Total_2
    catch {return, Ret} -> Ret end.

chain(Number_2) ->
    try
        N_3 = Number_2,
        Fun_2 = fun Fun_2_loop(N_3, Number_2) ->
    case ((N_3 /= 1) andalso (N_3 /= 89)) of
        true ->
            N_4 = next_number(N_3),
            Fun_2_loop(N_4, Number_2);
        _ -> {N_3, Number_2}
    end
end,
{N_4, Number_2} = Fun_2(N_3, Number_2),
        (N_4 == 1)
    catch {return, Ret} -> Ret end.

solution(Limit) ->
    try
        Count = 0,
        I = 1,
        Fun_3 = fun Fun_3_loop(Count, I, Limit) ->
    case (I < Limit) of
        true ->
            case mochi_not(chain(I)) of
        true -> Count_2 = (Count + 1),
            Count_3 = Count_2;
        _ -> Count_3 = Count
    end,
            I_2 = (I + 1),
            Fun_3_loop(Count_3, I_2, Limit);
        _ -> {Count, I, Limit}
    end
end,
{Count_3, I_2, Limit} = Fun_3(Count, I, Limit),
        Count_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(next_number(44))]),
    io:format("~ts~n", [mochi_str(next_number(10))]),
    io:format("~ts~n", [mochi_str(next_number(32))]),
    io:format("~ts~n", [mochi_str(chain(10))]),
    io:format("~ts~n", [mochi_str(chain(58))]),
    io:format("~ts~n", [mochi_str(chain(1))]),
    io:format("~ts~n", [mochi_str(solution(100))]),
    io:format("~ts~n", [mochi_str(solution(1000))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
