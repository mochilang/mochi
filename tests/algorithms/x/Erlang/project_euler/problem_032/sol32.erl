#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, join_digits/1, digits_to_int/1, contains_int/2, remove_at/2, is_combination_valid/1, search/3]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

join_digits(Xs) ->
    try
        S = "",
        I = 0,
        Fun = fun Fun_loop(I, S, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            S_2 = (S ++ (case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)),
            I_2 = (I + 1),
            Fun_loop(I_2, S_2, Xs);
        _ -> {I, S, Xs}
    end
end,
{I_2, S_2, Xs} = Fun(I, S, Xs),
        S_2
    catch {return, Ret} -> Ret end.

digits_to_int(Xs_2) ->
    try
        mochi_to_int(join_digits(Xs_2))
    catch {return, Ret} -> Ret end.

contains_int(Xs_3, Value) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Value, Xs_3) ->
    case (I_3 < erlang:length(Xs_3)) of
        true ->
            case ((case erlang:is_map(Xs_3) of true -> maps:get(I_3, Xs_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs_3) + I_3 + 1, Xs_3); _ -> mochi_nth(I_3 + 1, Xs_3) end end) == Value) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Value, Xs_3);
        _ -> {I_3, Value, Xs_3}
    end
end,
{I_4, Value, Xs_3} = Fun_2(I_3, Value, Xs_3),
        false
    catch {return, Ret} -> Ret end.

remove_at(Xs_4, Idx) ->
    try
        Res = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Idx, Res, Xs_4) ->
    case (I_5 < erlang:length(Xs_4)) of
        true ->
            case (I_5 /= Idx) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [(case erlang:is_map(Xs_4) of true -> maps:get(I_5, Xs_4, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Xs_4) + I_5 + 1, Xs_4); _ -> mochi_nth(I_5 + 1, Xs_4) end end)]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, Idx, Res_3, Xs_4);
        _ -> {I_5, Idx, Res, Xs_4}
    end
end,
{I_6, Idx, Res_3, Xs_4} = Fun_3(I_5, Idx, Res, Xs_4),
        Res_3
    catch {return, Ret} -> Ret end.

is_combination_valid(Comb) ->
    try
        Prod = digits_to_int(lists:sublist(Comb, 5 + 1, (9 - 5))),
        Mul2 = digits_to_int(lists:sublist(Comb, 0 + 1, (2 - 0))),
        Mul3 = digits_to_int(lists:sublist(Comb, 2 + 1, (5 - 2))),
        case ((Mul2 * Mul3) == Prod) of
        true -> throw({return, true});
        _ -> ok
    end,
        Mul1 = digits_to_int(lists:sublist(Comb, 0 + 1, (1 - 0))),
        Mul4 = digits_to_int(lists:sublist(Comb, 1 + 1, (5 - 1))),
        ((Mul1 * Mul4) == Prod)
    catch {return, Ret} -> Ret end.

search(Prefix, Remaining, Products) ->
    try
        case (erlang:length(Remaining) == 0) of
        true -> case is_combination_valid(Prefix) of
        true -> P = digits_to_int(lists:sublist(Prefix, 5 + 1, (9 - 5))),
            case mochi_not(contains_int(Products, P)) of
        true -> Products_2 = lists:append((case Products of nil -> []; _ -> Products end), [P]),
            Products_3 = Products_2;
        _ -> Products_3 = Products
    end,
            P_2 = P,
            Products_4 = Products_3;
        _ -> P_2 = nil,
            Products_4 = Products
    end,
            throw({return, Products_4}),
            P_3 = P_2,
            Products_5 = Products_4;
        _ -> P_3 = nil,
            Products_5 = Products
    end,
        I_7 = 0,
        Fun_4 = fun Fun_4_loop(I_7, P_3, Prefix, Products_5, Remaining) ->
    case (I_7 < erlang:length(Remaining)) of
        true ->
            Next_prefix = lists:append((case Prefix of nil -> []; _ -> Prefix end), [(case erlang:is_map(Remaining) of true -> maps:get(I_7, Remaining, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Remaining) + I_7 + 1, Remaining); _ -> mochi_nth(I_7 + 1, Remaining) end end)]),
            Next_remaining = remove_at(Remaining, I_7),
            Products_6 = search(Next_prefix, Next_remaining, Products_5),
            I_8 = (I_7 + 1),
            Fun_4_loop(I_8, P_3, Prefix, Products_6, Remaining);
        _ -> {I_7, P_3, Prefix, Products_5, Remaining}
    end
end,
{I_8, P_3, Prefix, Products_6, Remaining} = Fun_4(I_7, P_3, Prefix, Products_5, Remaining),
        Products_6
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('digits', ["1", "2", "3", "4", "5", "6", "7", "8", "9"]),
    erlang:put('products', []),
    erlang:put('products', search([], erlang:get('digits'), erlang:get('products'))),
    erlang:put('total', 0),
    erlang:put('i', 0),
    Fun_5 = fun Fun_5_loop() ->
    case (erlang:get('i') < erlang:length(erlang:get('products'))) of
        true ->
            erlang:put('total', (erlang:get('total') + (case erlang:is_map(erlang:get('products')) of true -> maps:get(erlang:get('i'), erlang:get('products'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('products')) + erlang:get('i') + 1, erlang:get('products')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('products')) end end))),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_5_loop();
        _ -> {}
    end
end,
{} = Fun_5(),
    io:format("~ts~n", [mochi_str(erlang:get('total'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
