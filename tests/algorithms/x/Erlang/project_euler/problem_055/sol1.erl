#!/usr/bin/env escript
-module(main).
-compile([export_vars, nowarn_export_vars, nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, reverse_string/1, is_palindrome/1, sum_reverse/1, solution/1]).

% Generated by Mochi transpiler v0.10.67 (c7612b9c83)


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


toi(V) ->
    mochi_to_int(V).


mochi_to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    erlang:float_to_list(V, [short]);
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

reverse_string(S) ->
    try
        Result = "",
        I = (erlang:length(S) - 1),
        Fun = fun Fun_loop(I, Result, S) ->
    case (I >= 0) of
        true ->
            Result_2 = (Result ++ string:substr(S, I + 1, 1)),
            I_2 = (I - 1),
            Fun_loop(I_2, Result_2, S);
        _ -> {I, Result, S}
    end
end,
{I_2, Result_2, S} = Fun(I, Result, S),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

is_palindrome(N) ->
    try
        S_2 = mochi_str(N),
        (S_2 == reverse_string(S_2))
    catch {return, RetCatch} -> RetCatch end.

sum_reverse(N_2) ->
    try
        S_3 = mochi_str(N_2),
        R = reverse_string(S_3),
        (N_2 + mochi_to_int(R))
    catch {return, RetCatch} -> RetCatch end.

solution(Limit) ->
    try
        Count = 0,
        Num = 1,
        Fun_3 = fun Fun_3_loop(Count, Limit, Num) ->
    case (Num < Limit) of
        true ->
            try
                Iterations = 0,
                Current = Num,
                Fun_2 = fun Fun_2_loop(Count, Current, Iterations, Limit, Num) ->
    case (Iterations < 50) of
        true ->
            try
                Current_2 = sum_reverse(Current),
                Iterations_2 = (Iterations + 1),
                case is_palindrome(Current_2) of
        true -> throw({break, {Count, Current_2, Iterations_2, Limit, Num}});
        _ -> ok
    end,
                Fun_2_loop(Count, Current_2, Iterations_2, Limit, Num)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_2_loop(C0, C1, C2, C3, C4);
                {break, Bs} -> Bs
            end;
        _ -> {Count, Current, Iterations, Limit, Num}
    end
end,
{Count, Current_2, Iterations_2, Limit, Num} = Fun_2(Count, Current, Iterations, Limit, Num),
                Count_3 = (case ((Iterations_2 == 50) andalso (is_palindrome(Current_2) == false)) of
        true -> Count_2 = (Count + 1),
            Count_2;
        _ -> Count
    end),
                Num_2 = (Num + 1),
                Fun_3_loop(Count_3, Limit, Num_2)
            catch
                {continue, C0, C1, C2} -> Fun_3_loop(C0, C1, C2);
                {break, Bs} -> Bs
            end;
        _ -> {Count, Limit, Num}
    end
end,
{Count_3, Limit, Num_2} = Fun_3(Count, Limit, Num),
        Count_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(("solution() = " ++ mochi_str(solution(10000))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
