#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, num_digits/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

num_digits(X) ->
    try
        Count = 0,
        N = X,
        Fun = fun Fun_loop(Count, N, X) ->
    case (N > 0) of
        true ->
            Count_2 = (Count + 1),
            N_2 = (N div 10),
            Fun_loop(Count_2, N_2, X);
        _ -> {Count, N, X}
    end
end,
{Count_2, N_2, X} = Fun(Count, N, X),
        Count_2
    catch {return, Ret} -> Ret end.

solution(N_3) ->
    try
        F1 = 1,
        F2 = 1,
        Index = 2,
        Fun_2 = fun Fun_2_loop(F1, F2, Index, N_3) ->
    case true of
        true ->
            try
                F = (F1 + F2),
                F1_2 = F2,
                F2_2 = F,
                Index_2 = (Index + 1),
                case (num_digits(F) == N_3) of
        true -> throw({break, F1_2, F2_2, Index_2, N_3});
        _ -> ok
    end,
                Fun_2_loop(F1_2, F2_2, Index_2, N_3)
            catch
                {continue, C0, C1, C2, C3} -> Fun_2_loop(C0, C1, C2, C3);
                {break, B0, B1, B2, B3} -> {B0, B1, B2, B3}
            end;
        _ -> {F1, F2, Index, N_3}
    end
end,
{F1_2, F2_2, Index_2, N_3} = Fun_2(F1, F2, Index, N_3),
        Index_2
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(("solution(1000) = " ++ mochi_str(solution(1000))))]),
    io:format("~ts~n", [mochi_repr(("solution(100) = " ++ mochi_str(solution(100))))]),
    io:format("~ts~n", [mochi_repr(("solution(50) = " ++ mochi_str(solution(50))))]),
    io:format("~ts~n", [mochi_repr(("solution(3) = " ++ mochi_str(solution(3))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
