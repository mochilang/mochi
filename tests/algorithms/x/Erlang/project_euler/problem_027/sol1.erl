#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_prime/1, solution/2]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

is_prime(Number) ->
    try
        case ((1 < Number) andalso (Number < 4)) of
        true -> throw({return, true});
        _ -> case (((Number < 2) orelse (mochi_mod(Number, 2) == 0)) orelse (mochi_mod(Number, 3) == 0)) of
        true -> throw({return, false});
        _ -> ok
    end
    end,
        I = 5,
        Fun = fun Fun_loop(I, Number) ->
    case ((I * I) =< Number) of
        true ->
            case ((mochi_mod(Number, I) == 0) orelse (mochi_mod(Number, (I + 2)) == 0)) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 6),
            Fun_loop(I_2, Number);
        _ -> {I, Number}
    end
end,
{I_2, Number} = Fun(I, Number),
        true
    catch {return, Ret} -> Ret end.

solution(A_limit, B_limit) ->
    try
        Longest_len = 0,
        Longest_a = 0,
        Longest_b = 0,
        A = ((-1 * A_limit) + 1),
        Fun_5 = fun Fun_5_loop(A, A_limit, B_limit, Longest_a, Longest_b, Longest_len) ->
    case (A < A_limit) of
        true ->
            B = 2,
            Fun_4 = fun Fun_4_loop(A, A_limit, B, B_limit, Longest_a, Longest_b, Longest_len) ->
    case (B < B_limit) of
        true ->
            case is_prime(B) of
        true -> Count = 0,
            N = 0,
            Fun_2 = fun Fun_2_loop(A, A_limit, B, B_limit, Count, Longest_a, Longest_b, Longest_len, N) ->
    case is_prime((((N * N) + (A * N)) + B)) of
        true ->
            Count_2 = (Count + 1),
            N_2 = (N + 1),
            Fun_2_loop(A, A_limit, B, B_limit, Count_2, Longest_a, Longest_b, Longest_len, N_2);
        _ -> {A, A_limit, B, B_limit, Count, Longest_a, Longest_b, Longest_len, N}
    end
end,
{A, A_limit, B, B_limit, Count_2, Longest_a, Longest_b, Longest_len, N_2} = Fun_2(A, A_limit, B, B_limit, Count, Longest_a, Longest_b, Longest_len, N),
            case (Count_2 > Longest_len) of
        true -> Longest_len_2 = Count_2,
            Longest_a_2 = A,
            Longest_b_2 = B,
            Longest_a_3 = Longest_a_2,
            Longest_b_3 = Longest_b_2,
            Longest_len_3 = Longest_len_2;
        _ -> Longest_a_3 = Longest_a,
            Longest_b_3 = Longest_b,
            Longest_len_3 = Longest_len
    end,
            Count_3 = Count_2,
            Fun_3 = Fun_2,
            Longest_a_4 = Longest_a_3,
            Longest_b_4 = Longest_b_3,
            Longest_len_4 = Longest_len_3,
            N_3 = N_2;
        _ -> Count_3 = nil,
            Fun_3 = nil,
            Longest_a_4 = Longest_a,
            Longest_b_4 = Longest_b,
            Longest_len_4 = Longest_len,
            N_3 = nil
    end,
            B_2 = (B + 1),
            Fun_4_loop(A, A_limit, B_2, B_limit, Longest_a_4, Longest_b_4, Longest_len_4);
        _ -> {A, A_limit, B, B_limit, Longest_a, Longest_b, Longest_len}
    end
end,
{A, A_limit, B_2, B_limit, Longest_a_4, Longest_b_4, Longest_len_4} = Fun_4(A, A_limit, B, B_limit, Longest_a, Longest_b, Longest_len),
            A_2 = (A + 1),
            Fun_5_loop(A_2, A_limit, B_limit, Longest_a_4, Longest_b_4, Longest_len_4);
        _ -> {A, A_limit, B_limit, Longest_a, Longest_b, Longest_len}
    end
end,
{A_2, A_limit, B_limit, Longest_a_4, Longest_b_4, Longest_len_4} = Fun_5(A, A_limit, B_limit, Longest_a, Longest_b, Longest_len),
        (Longest_a_4 * Longest_b_4)
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution(1000, 1000))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
