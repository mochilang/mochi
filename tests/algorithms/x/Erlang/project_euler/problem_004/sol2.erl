#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_palindrome/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (c04b4c8319) on 2025-08-08 17:05 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

is_palindrome(Num) ->
    try
        case (Num < 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        N = Num,
        Rev = 0,
        Fun = fun Fun_loop(N, Num, Rev) ->
    case (N > 0) of
        true ->
            Rev_2 = ((Rev * 10) + mochi_mod(N, 10)),
            N_2 = (N div 10),
            Fun_loop(N_2, Num, Rev_2);
        _ -> {N, Num, Rev}
    end
end,
{N_2, Num, Rev_2} = Fun(N, Num, Rev),
        (Rev_2 == Num)
    catch {return, Ret} -> Ret end.

solution(Limit) ->
    try
        Answer = 0,
        I = 999,
        Fun_3 = fun Fun_3_loop(Answer, I, Limit) ->
    case (I >= 100) of
        true ->
            J = 999,
            Fun_2 = fun Fun_2_loop(Answer, I, J, Limit) ->
    case (J >= 100) of
        true ->
            Product = (I * J),
            case (((Product < Limit) andalso is_palindrome(Product)) andalso (Product > Answer)) of
        true -> Answer_2 = Product,
            Answer_3 = Answer_2;
        _ -> Answer_3 = Answer
    end,
            J_2 = (J - 1),
            Fun_2_loop(Answer_3, I, J_2, Limit);
        _ -> {Answer, I, J, Limit}
    end
end,
{Answer_3, I, J_2, Limit} = Fun_2(Answer, I, J, Limit),
            I_2 = (I - 1),
            Fun_3_loop(Answer_3, I_2, Limit);
        _ -> {Answer, I, Limit}
    end
end,
{Answer_3, I_2, Limit} = Fun_3(Answer, I, Limit),
        Answer_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution(998001))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
