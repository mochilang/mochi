#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_palindrome/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (c04b4c8319) on 2025-08-08 17:05 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

is_palindrome(Num) ->
    try
        S = mochi_str(Num),
        I = 0,
        J = (erlang:length(S) - 1),
        Fun = fun Fun_loop(I, J, Num, S) ->
    case (I < J) of
        true ->
            case (string:substr(S, I + 1, ((I + 1) - I)) /= string:substr(S, J + 1, ((J + 1) - J))) of
        true -> throw({return, false});
        _ -> ok
    end,
            I_2 = (I + 1),
            J_2 = (J - 1),
            Fun_loop(I_2, J_2, Num, S);
        _ -> {I, J, Num, S}
    end
end,
{I_2, J_2, Num, S} = Fun(I, J, Num, S),
        true
    catch {return, Ret} -> Ret end.

solution(N) ->
    try
        Number = (N - 1),
        Fun_4 = fun Fun_4_loop(N, Number) ->
    case (Number > 9999) of
        true ->
            case is_palindrome(Number) of
        true -> Divisor = 999,
            Fun_2 = fun Fun_2_loop(Divisor, N, Number) ->
    case (Divisor > 99) of
        true ->
            case (mochi_mod(Number, Divisor) == 0) of
        true -> Other = (Number div Divisor),
            case (erlang:length(mochi_str(Other)) == 3) of
        true -> throw({return, Number});
        _ -> ok
    end,
            Other_2 = Other;
        _ -> Other_2 = nil
    end,
            Divisor_2 = (Divisor - 1),
            Fun_2_loop(Divisor_2, N, Number);
        _ -> {Divisor, N, Number}
    end
end,
{Divisor_2, N, Number} = Fun_2(Divisor, N, Number),
            Divisor_3 = Divisor_2,
            Fun_3 = Fun_2;
        _ -> Divisor_3 = nil,
            Fun_3 = nil
    end,
            Number_2 = (Number - 1),
            Fun_4_loop(N, Number_2);
        _ -> {N, Number}
    end
end,
{N, Number_2} = Fun_4(N, Number),
        io:format("~ts~n", [mochi_repr("That number is larger than our acceptable range.")]),
        0
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(("solution() = " ++ mochi_str(solution(998001))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
