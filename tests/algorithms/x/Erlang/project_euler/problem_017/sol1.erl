#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (3d19777eda) on 2025-08-08 17:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

solution(N) ->
    try
        Ones_counts = [0, 3, 3, 5, 4, 4, 3, 5, 5, 4, 3, 6, 6, 8, 8, 7, 7, 9, 8, 8],
        Tens_counts = [0, 0, 6, 6, 5, 5, 5, 7, 6, 6],
        Count = 0,
        I = 1,
        Fun = fun Fun_loop(Count, I, N, Ones_counts, Tens_counts) ->
    case (I =< N) of
        true ->
            case (I < 1000) of
        true -> case (I >= 100) of
        true -> Count_2 = ((Count + (case erlang:is_map(Ones_counts) of true -> maps:get((I div 100), Ones_counts, nil); _ -> case (I div 100) < 0 of true -> mochi_nth(erlang:length(Ones_counts) + (I div 100) + 1, Ones_counts); _ -> mochi_nth((I div 100) + 1, Ones_counts) end end)) + 7),
            case (mochi_mod(I, 100) /= 0) of
        true -> Count_3 = (Count_2 + 3),
            Count_4 = Count_3;
        _ -> Count_4 = Count_2
    end,
            Count_5 = Count_4;
        _ -> Count_5 = Count
    end,
            Remainder = mochi_mod(I, 100),
            case ((Remainder > 0) andalso (Remainder < 20)) of
        true -> Count_6 = (Count_5 + (case erlang:is_map(Ones_counts) of true -> maps:get(Remainder, Ones_counts, nil); _ -> case Remainder < 0 of true -> mochi_nth(erlang:length(Ones_counts) + Remainder + 1, Ones_counts); _ -> mochi_nth(Remainder + 1, Ones_counts) end end)),
            Count_9 = Count_6;
        _ -> Count_7 = (Count_5 + (case erlang:is_map(Ones_counts) of true -> maps:get(mochi_mod(I, 10), Ones_counts, nil); _ -> case mochi_mod(I, 10) < 0 of true -> mochi_nth(erlang:length(Ones_counts) + mochi_mod(I, 10) + 1, Ones_counts); _ -> mochi_nth(mochi_mod(I, 10) + 1, Ones_counts) end end)),
            Count_8 = (Count_7 + (case erlang:is_map(Tens_counts) of true -> maps:get(mochi_safe_div((Remainder - mochi_mod(I, 10)), 10), Tens_counts, nil); _ -> case mochi_safe_div((Remainder - mochi_mod(I, 10)), 10) < 0 of true -> mochi_nth(erlang:length(Tens_counts) + mochi_safe_div((Remainder - mochi_mod(I, 10)), 10) + 1, Tens_counts); _ -> mochi_nth(mochi_safe_div((Remainder - mochi_mod(I, 10)), 10) + 1, Tens_counts) end end)),
            Count_9 = Count_8
    end,
            Count_11 = Count_9,
            Remainder_2 = Remainder;
        _ -> Count_10 = ((Count + (case erlang:is_map(Ones_counts) of true -> maps:get((I div 1000), Ones_counts, nil); _ -> case (I div 1000) < 0 of true -> mochi_nth(erlang:length(Ones_counts) + (I div 1000) + 1, Ones_counts); _ -> mochi_nth((I div 1000) + 1, Ones_counts) end end)) + 8),
            Count_11 = Count_10,
            Remainder_2 = nil
    end,
            I_2 = (I + 1),
            Fun_loop(Count_11, I_2, N, Ones_counts, Tens_counts);
        _ -> {Count, I, N, Ones_counts, Tens_counts}
    end
end,
{Count_11, I_2, N, Ones_counts, Tens_counts} = Fun(Count, I, N, Ones_counts, Tens_counts),
        Count_11
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution(1000))]),
    io:format("~ts~n", [mochi_str(solution(5))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
