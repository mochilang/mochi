#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (3d19777eda) on 2025-08-08 17:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

solution(N) ->
    try
        Composite = #{},
        Total = 0,
        Num = 2,
        Fun_3 = fun Fun_3_loop(Composite, N, Num, Total) ->
    case (Num < N) of
        true ->
            case mochi_not(maps:get(Num, Composite, nil)) of
        true -> Total_2 = (Total + Num),
            Multiple = (Num * Num),
            Fun = fun Fun_loop(Composite, Multiple, N, Num, Total_2) ->
    case (Multiple < N) of
        true ->
            Composite_2 = maps:put(Multiple, true, Composite),
            Multiple_2 = (Multiple + Num),
            Fun_loop(Composite_2, Multiple_2, N, Num, Total_2);
        _ -> {Composite, Multiple, N, Num, Total_2}
    end
end,
{Composite_2, Multiple_2, N, Num, Total_2} = Fun(Composite, Multiple, N, Num, Total_2),
            Composite_3 = Composite_2,
            Fun_2 = Fun,
            Multiple_3 = Multiple_2,
            Total_3 = Total_2;
        _ -> Composite_3 = Composite,
            Fun_2 = nil,
            Multiple_3 = nil,
            Total_3 = Total
    end,
            Num_2 = (Num + 1),
            Fun_3_loop(Composite_3, N, Num_2, Total_3);
        _ -> {Composite, N, Num, Total}
    end
end,
{Composite_3, N, Num_2, Total_3} = Fun_3(Composite, N, Num, Total),
        Total_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution(2000000))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
