#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, isqrt/1, solution/1]).

% Generated by Mochi transpiler v0.10.61 (3d19777eda) on 2025-08-08 17:33 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

isqrt(N) ->
    try
        R = 0,
        Fun = fun Fun_loop(N, R) ->
    case (((R + 1) * (R + 1)) =< N) of
        true ->
            R_2 = (R + 1),
            Fun_loop(N, R_2);
        _ -> {N, R}
    end
end,
{N, R_2} = Fun(N, R),
        R_2
    catch {return, Ret} -> Ret end.

solution(N_2) ->
    try
        Sieve = [],
        I = 0,
        Fun_2 = fun Fun_2_loop(I, N_2, Sieve) ->
    case (I =< N_2) of
        true ->
            Sieve_2 = lists:append((case Sieve of nil -> []; _ -> Sieve end), [false]),
            I_2 = (I + 1),
            Fun_2_loop(I_2, N_2, Sieve_2);
        _ -> {I, N_2, Sieve}
    end
end,
{I_2, N_2, Sieve_2} = Fun_2(I, N_2, Sieve),
        Sieve_3 = lists:sublist(Sieve_2, 0) ++ [true] ++ lists:nthtail(0 + 1, Sieve_2),
        Sieve_4 = lists:sublist(Sieve_3, 1) ++ [true] ++ lists:nthtail(1 + 1, Sieve_3),
        Limit = isqrt(N_2),
        P = 2,
        Fun_5 = fun Fun_5_loop(I_2, Limit, N_2, P, Sieve_4) ->
    case (P =< Limit) of
        true ->
            case mochi_not((case erlang:is_map(Sieve_4) of true -> maps:get(P, Sieve_4, nil); _ -> case P < 0 of true -> mochi_nth(erlang:length(Sieve_4) + P + 1, Sieve_4); _ -> mochi_nth(P + 1, Sieve_4) end end)) of
        true -> J = (P * P),
            Fun_3 = fun Fun_3_loop(I_2, J, Limit, N_2, P, Sieve_4) ->
    case (J =< N_2) of
        true ->
            Sieve_5 = lists:sublist(Sieve_4, J) ++ [true] ++ lists:nthtail(J + 1, Sieve_4),
            J_2 = (J + P),
            Fun_3_loop(I_2, J_2, Limit, N_2, P, Sieve_5);
        _ -> {I_2, J, Limit, N_2, P, Sieve_4}
    end
end,
{I_2, J_2, Limit, N_2, P, Sieve_5} = Fun_3(I_2, J, Limit, N_2, P, Sieve_4),
            Fun_4 = Fun_3,
            J_3 = J_2,
            Sieve_6 = Sieve_5;
        _ -> Fun_4 = Fun_2,
            J_3 = nil,
            Sieve_6 = Sieve_4
    end,
            P_2 = (P + 1),
            Fun_5_loop(I_2, Limit, N_2, P_2, Sieve_6);
        _ -> {I_2, Limit, N_2, P, Sieve_4}
    end
end,
{I_2, Limit, N_2, P_2, Sieve_6} = Fun_5(I_2, Limit, N_2, P, Sieve_4),
        Sum = 0,
        K = 2,
        Fun_6 = fun Fun_6_loop(I_2, K, Limit, N_2, P_2, Sieve_6, Sum) ->
    case (K < N_2) of
        true ->
            case mochi_not((case erlang:is_map(Sieve_6) of true -> maps:get(K, Sieve_6, nil); _ -> case K < 0 of true -> mochi_nth(erlang:length(Sieve_6) + K + 1, Sieve_6); _ -> mochi_nth(K + 1, Sieve_6) end end)) of
        true -> Sum_2 = (Sum + K),
            Sum_3 = Sum_2;
        _ -> Sum_3 = Sum
    end,
            K_2 = (K + 1),
            Fun_6_loop(I_2, K_2, Limit, N_2, P_2, Sieve_6, Sum_3);
        _ -> {I_2, K, Limit, N_2, P_2, Sieve_6, Sum}
    end
end,
{I_2, K_2, Limit, N_2, P_2, Sieve_6, Sum_3} = Fun_6(I_2, K, Limit, N_2, P_2, Sieve_6, Sum),
        Sum_3
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(solution(20000))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
