#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, gcd/2, is_digit_cancelling/2, find_fractions/0, solution/0, main/0]).

% Generated by Mochi transpiler v0.10.61 (336645299d) on 2025-08-08 18:06 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

gcd(A, B) ->
    try
        X = (case (A < 0) of
    true -> -A;
    _ -> A
end),
        Y = (case (B < 0) of
    true -> -B;
    _ -> B
end),
        Fun = fun Fun_loop(A, B, X, Y) ->
    case (Y /= 0) of
        true ->
            T = mochi_mod(X, Y),
            X_2 = Y,
            Y_2 = T,
            Fun_loop(A, B, X_2, Y_2);
        _ -> {A, B, X, Y}
    end
end,
{A, B, X_2, Y_2} = Fun(A, B, X, Y),
        X_2
    catch {return, Ret} -> Ret end.

is_digit_cancelling(Num, Den) ->
    try
        case (Num >= Den) of
        true -> throw({return, false});
        _ -> ok
    end,
        Num_unit = mochi_mod(Num, 10),
        Num_tens = (Num div 10),
        Den_unit = mochi_mod(Den, 10),
        Den_tens = (Den div 10),
        case (Num_unit /= Den_tens) of
        true -> throw({return, false});
        _ -> ok
    end,
        case (Den_unit == 0) of
        true -> throw({return, false});
        _ -> ok
    end,
        ((Num * Den_unit) == (Num_tens * Den))
    catch {return, Ret} -> Ret end.

find_fractions() ->
    try
        Sols = [],
        Num_2 = 10,
        Fun_3 = fun Fun_3_loop(Num_2, Sols) ->
    case (Num_2 < 100) of
        true ->
            Den_2 = (Num_2 + 1),
            Fun_2 = fun Fun_2_loop(Den_2, Num_2, Sols) ->
    case (Den_2 < 100) of
        true ->
            case is_digit_cancelling(Num_2, Den_2) of
        true -> Sols_2 = lists:append((case Sols of nil -> []; _ -> Sols end), [#{"num" => Num_2, "den" => Den_2}]),
            Sols_3 = Sols_2;
        _ -> Sols_3 = Sols
    end,
            Den_3 = (Den_2 + 1),
            Fun_2_loop(Den_3, Num_2, Sols_3);
        _ -> {Den_2, Num_2, Sols}
    end
end,
{Den_3, Num_2, Sols_3} = Fun_2(Den_2, Num_2, Sols),
            Num_3 = (Num_2 + 1),
            Fun_3_loop(Num_3, Sols_3);
        _ -> {Num_2, Sols}
    end
end,
{Num_3, Sols_3} = Fun_3(Num_2, Sols),
        Sols_3
    catch {return, Ret} -> Ret end.

solution() ->
    try
        Fracs = find_fractions(),
        Num_prod = 1,
        Den_prod = 1,
        I = 0,
        Fun_4 = fun Fun_4_loop(Den_prod, Fracs, I, Num_prod) ->
    case (I < erlang:length(Fracs)) of
        true ->
            F = (case erlang:is_map(Fracs) of true -> maps:get(I, Fracs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Fracs) + I + 1, Fracs); _ -> mochi_nth(I + 1, Fracs) end end),
            Num_prod_2 = (Num_prod * maps:get("num", F, nil)),
            Den_prod_2 = (Den_prod * maps:get("den", F, nil)),
            I_2 = (I + 1),
            Fun_4_loop(Den_prod_2, Fracs, I_2, Num_prod_2);
        _ -> {Den_prod, Fracs, I, Num_prod}
    end
end,
{Den_prod_2, Fracs, I_2, Num_prod_2} = Fun_4(Den_prod, Fracs, I, Num_prod),
        G = gcd(Num_prod_2, Den_prod_2),
        mochi_safe_div(Den_prod_2, G)
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_str(solution())]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
