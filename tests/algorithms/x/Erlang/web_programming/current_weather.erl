#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, http_get/2, current_weather/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

http_get(Url, Params) ->
    try
        (case maps:is_key("q", Params) of
    true -> #{"location" => maps:get("q", Params, nil), "temperature" => "20"};
    _ -> #{"location" => maps:get("query", Params, nil), "temperature" => "20"}
end)
    catch {return, RetCatch} -> RetCatch end.

current_weather(Location) ->
    try
        Weather_data = [],
        case ("demo" /= "") of
        true -> Params_openweathermap = #{"q" => Location, "appid" => "demo"},
            Response_openweathermap = http_get("https://api.openweathermap.org/data/2.5/weather", Params_openweathermap),
            Weather_data_2 = lists:append((case Weather_data of nil -> []; _ -> Weather_data end), [#{"OpenWeatherMap" => Response_openweathermap}]),
            Params_openweathermap_2 = Params_openweathermap,
            Response_openweathermap_2 = Response_openweathermap,
            Weather_data_3 = Weather_data_2;
        _ -> Params_openweathermap_2 = nil,
            Response_openweathermap_2 = nil,
            Weather_data_3 = Weather_data
    end,
        case ("" /= "") of
        true -> Params_weatherstack = #{"query" => Location, "access_key" => ""},
            Response_weatherstack = http_get("http://api.weatherstack.com/current", Params_weatherstack),
            Weather_data_4 = lists:append((case Weather_data_3 of nil -> []; _ -> Weather_data_3 end), [#{"Weatherstack" => Response_weatherstack}]),
            Params_weatherstack_2 = Params_weatherstack,
            Response_weatherstack_2 = Response_weatherstack,
            Weather_data_5 = Weather_data_4;
        _ -> Params_weatherstack_2 = nil,
            Response_weatherstack_2 = nil,
            Weather_data_5 = Weather_data_3
    end,
        case (erlang:length(Weather_data_5) == 0) of
        true -> erlang:error({panic, "No API keys provided or no valid data returned."});
        _ -> ok
    end,
        Weather_data_5
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Data = current_weather("New York"),
        io:format("~ts~n", [mochi_str(Data)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('OPENWEATHERMAP_API_KEY', "demo"),
    erlang:put('WEATHERSTACK_API_KEY', ""),
    erlang:put('OPENWEATHERMAP_URL_BASE', "https://api.openweathermap.org/data/2.5/weather"),
    erlang:put('WEATHERSTACK_URL_BASE', "http://api.weatherstack.com/current"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
