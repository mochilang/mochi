#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/2, parse_int/1, extract_string/2, extract_int/2, extract_bool/2, extract_user_profile/1]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

index_of(S, Sub) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, S, Sub) ->
    case (I =< (erlang:length(S) - erlang:length(Sub))) of
        true ->
            case (string:substr(S, I + 1, ((I + erlang:length(Sub)) - I)) == Sub) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, S, Sub);
        _ -> {I, S, Sub}
    end
end,
{I_2, S, Sub} = Fun(I, S, Sub),
        -1
    catch {return, RetCatch} -> RetCatch end.

parse_int(S_2) ->
    try
        Value = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, S_2, Value) ->
    case (I_3 < erlang:length(S_2)) of
        true ->
            Value_2 = ((Value * 10) + mochi_to_int(string:substr(S_2, I_3 + 1, 1))),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, S_2, Value_2);
        _ -> {I_3, S_2, Value}
    end
end,
{I_4, S_2, Value_2} = Fun_2(I_3, S_2, Value),
        Value_2
    catch {return, RetCatch} -> RetCatch end.

extract_string(Text, Key) ->
    try
        Pattern = (("\"" ++ Key) ++ "\":\""),
        Start = (index_of(Text, Pattern) + erlang:length(Pattern)),
        End = Start,
        Fun_3 = fun Fun_3_loop(End, Key, Pattern, Start, Text) ->
    case ((End < erlang:length(Text)) andalso (string:substr(Text, End + 1, ((End + 1) - End)) /= "\"")) of
        true ->
            End_2 = (End + 1),
            Fun_3_loop(End_2, Key, Pattern, Start, Text);
        _ -> {End, Key, Pattern, Start, Text}
    end
end,
{End_2, Key, Pattern, Start, Text} = Fun_3(End, Key, Pattern, Start, Text),
        string:substr(Text, Start + 1, (End_2 - Start))
    catch {return, RetCatch} -> RetCatch end.

extract_int(Text_2, Key_2) ->
    try
        Pattern_2 = (("\"" ++ Key_2) ++ "\":{\"count\":"),
        Start_2 = (index_of(Text_2, Pattern_2) + erlang:length(Pattern_2)),
        End_3 = Start_2,
        Fun_4 = fun Fun_4_loop(End_3, Key_2, Pattern_2, Start_2, Text_2) ->
    case (End_3 < erlang:length(Text_2)) of
        true ->
            try
                Ch = string:substr(Text_2, End_3 + 1, 1),
                case ((Ch < "0") orelse (Ch > "9")) of
        true -> throw({break, End_3, Key_2, Pattern_2, Start_2, Text_2});
        _ -> ok
    end,
                End_4 = (End_3 + 1),
                Fun_4_loop(End_4, Key_2, Pattern_2, Start_2, Text_2)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_4_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {End_3, Key_2, Pattern_2, Start_2, Text_2}
    end
end,
{End_4, Key_2, Pattern_2, Start_2, Text_2} = Fun_4(End_3, Key_2, Pattern_2, Start_2, Text_2),
        Digits = string:substr(Text_2, Start_2 + 1, (End_4 - Start_2)),
        Num = parse_int(Digits),
        Num
    catch {return, RetCatch} -> RetCatch end.

extract_bool(Text_3, Key_3) ->
    try
        Pattern_3 = (("\"" ++ Key_3) ++ "\":"),
        Start_3 = (index_of(Text_3, Pattern_3) + erlang:length(Pattern_3)),
        Val = string:substr(Text_3, Start_3 + 1, ((Start_3 + 5) - Start_3)),
        First = string:substr(Val, 0 + 1, 1),
        case (First == "t") of
        true -> throw({return, true});
        _ -> ok
    end,
        false
    catch {return, RetCatch} -> RetCatch end.

extract_user_profile(Script) ->
    try
        #{"username" => extract_string(Script, "username"), "full_name" => extract_string(Script, "full_name"), "biography" => extract_string(Script, "biography"), "business_email" => extract_string(Script, "business_email"), "external_url" => extract_string(Script, "external_url"), "edge_followed_by" => #{"count" => extract_int(Script, "edge_followed_by")}, "edge_follow" => #{"count" => extract_int(Script, "edge_follow")}, "edge_owner_to_timeline_media" => #{"count" => extract_int(Script, "edge_owner_to_timeline_media")}, "profile_pic_url_hd" => extract_string(Script, "profile_pic_url_hd"), "is_verified" => extract_bool(Script, "is_verified"), "is_private" => extract_bool(Script, "is_private")}
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('sample_script', "{\"entry_data\":{\"ProfilePage\":[{\"graphql\":{\"user\":{\"username\":\"github\",\"full_name\":\"GitHub\",\"biography\":\"Built for developers.\",\"business_email\":\"support@github.com\",\"external_url\":\"https://github.com/readme\",\"edge_followed_by\":{\"count\":120000},\"edge_follow\":{\"count\":16},\"edge_owner_to_timeline_media\":{\"count\":150},\"profile_pic_url_hd\":\"https://instagram.com/pic.jpg\",\"is_verified\":true,\"is_private\":false}}}]}}"),
    erlang:put('user', extract_user_profile("{\"entry_data\":{\"ProfilePage\":[{\"graphql\":{\"user\":{\"username\":\"github\",\"full_name\":\"GitHub\",\"biography\":\"Built for developers.\",\"business_email\":\"support@github.com\",\"external_url\":\"https://github.com/readme\",\"edge_followed_by\":{\"count\":120000},\"edge_follow\":{\"count\":16},\"edge_owner_to_timeline_media\":{\"count\":150},\"profile_pic_url_hd\":\"https://instagram.com/pic.jpg\",\"is_verified\":true,\"is_private\":false}}}]}}")),
    io:format("~ts~n", [mochi_repr(((((maps:get("full_name", erlang:get('user'), nil) ++ " (") ++ maps:get("username", erlang:get('user'), nil)) ++ ") is ") ++ maps:get("biography", erlang:get('user'), nil)))]),
    io:format("~ts~n", [mochi_repr(("number_of_posts = " ++ mochi_str(maps:get("count", maps:get("edge_owner_to_timeline_media", erlang:get('user'), nil), nil))))]),
    io:format("~ts~n", [mochi_repr(("number_of_followers = " ++ mochi_str(maps:get("count", maps:get("edge_followed_by", erlang:get('user'), nil), nil))))]),
    io:format("~ts~n", [mochi_repr(("number_of_followings = " ++ mochi_str(maps:get("count", maps:get("edge_follow", erlang:get('user'), nil), nil))))]),
    io:format("~ts~n", [mochi_repr(("email = " ++ maps:get("business_email", erlang:get('user'), nil)))]),
    io:format("~ts~n", [mochi_repr(("website = " ++ maps:get("external_url", erlang:get('user'), nil)))]),
    io:format("~ts~n", [mochi_repr(("profile_picture_url = " ++ maps:get("profile_pic_url_hd", erlang:get('user'), nil)))]),
    io:format("~ts~n", [mochi_repr(("is_verified = " ++ mochi_str(maps:get("is_verified", erlang:get('user'), nil))))]),
    io:format("~ts~n", [mochi_repr(("is_private = " ++ mochi_str(maps:get("is_private", erlang:get('user'), nil))))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
