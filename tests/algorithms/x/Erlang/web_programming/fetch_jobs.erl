#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, indexof/3, splitby/2, between/3, inttostring/1, fetch_jobs/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

indexof(S, Sub, Start) ->
    try
        N = erlang:length(S),
        M = erlang:length(Sub),
        I = Start,
        Fun_2 = fun Fun_2_loop(I, M, N, S, Start, Sub) ->
    case (I =< (N - M)) of
        true ->
            try
                J = 0,
                Ok = true,
                Fun = fun Fun_loop(I, J, M, N, Ok, S, Start, Sub) ->
    case (J < M) of
        true ->
            try
                case (string:substr(S, (I + J) + 1, (((I + J) + 1) - (I + J))) /= string:substr(Sub, J + 1, ((J + 1) - J))) of
        true -> Ok_2 = false,
            throw({break, I, J, M, N, Ok_2, S, Start, Sub}),
            Ok_3 = Ok_2;
        _ -> Ok_3 = Ok
    end,
                J_2 = (J + 1),
                Fun_loop(I, J_2, M, N, Ok_3, S, Start, Sub)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6, C7} -> Fun_loop(C0, C1, C2, C3, C4, C5, C6, C7);
                {break, B0, B1, B2, B3, B4, B5, B6, B7} -> {B0, B1, B2, B3, B4, B5, B6, B7}
            end;
        _ -> {I, J, M, N, Ok, S, Start, Sub}
    end
end,
{I, J_2, M, N, Ok_3, S, Start, Sub} = Fun(I, J, M, N, Ok, S, Start, Sub),
                case (Ok_3 /= nil) of
        true -> throw({return, I});
        _ -> ok
    end,
                I_2 = (I + 1),
                Fun_2_loop(I_2, M, N, S, Start, Sub)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_2_loop(C0, C1, C2, C3, C4, C5);
                {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5}
            end;
        _ -> {I, M, N, S, Start, Sub}
    end
end,
{I_2, M, N, S, Start, Sub} = Fun_2(I, M, N, S, Start, Sub),
        (0 - 1)
    catch {return, RetCatch} -> RetCatch end.

splitby(S_2, Sep) ->
    try
        Res = [],
        Start_2 = 0,
        SepLen = erlang:length(Sep),
        Idx = indexof(S_2, Sep, 0),
        Fun_3 = fun Fun_3_loop(Idx, Res, S_2, Sep, SepLen, Start_2) ->
    case (Idx /= (0 - 1)) of
        true ->
            Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [string:substr(S_2, Start_2 + 1, (Idx - Start_2))]),
            Start_3 = (Idx + SepLen),
            Idx_2 = indexof(S_2, Sep, Start_3),
            Fun_3_loop(Idx_2, Res_2, S_2, Sep, SepLen, Start_3);
        _ -> {Idx, Res, S_2, Sep, SepLen, Start_2}
    end
end,
{Idx_2, Res_2, S_2, Sep, SepLen, Start_3} = Fun_3(Idx, Res, S_2, Sep, SepLen, Start_2),
        Res_3 = lists:append((case Res_2 of nil -> []; _ -> Res_2 end), [string:substr(S_2, Start_3 + 1, (erlang:length(S_2) - Start_3))]),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

between(S_3, StartTag, EndTag) ->
    try
        StartIdx = indexof(S_3, StartTag, 0),
        case (StartIdx == (0 - 1)) of
        true -> throw({return, ""});
        _ -> ok
    end,
        StartIdx_2 = (StartIdx + erlang:length(StartTag)),
        EndIdx = indexof(S_3, EndTag, StartIdx_2),
        case (EndIdx == (0 - 1)) of
        true -> throw({return, ""});
        _ -> ok
    end,
        string:substr(S_3, StartIdx_2 + 1, (EndIdx - StartIdx_2))
    catch {return, RetCatch} -> RetCatch end.

inttostring(N_2) ->
    try
        case (N_2 == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Num = N_2,
        Digits = "",
        Fun_4 = fun Fun_4_loop(Digits, N_2, Num) ->
    case (Num > 0) of
        true ->
            D = mochi_mod(Num, 10),
            Digits_2 = (string:substr("0123456789", D + 1, ((D + 1) - D)) ++ Digits),
            Num_2 = (Num div 10),
            Fun_4_loop(Digits_2, N_2, Num_2);
        _ -> {Digits, N_2, Num}
    end
end,
{Digits_2, N_2, Num_2} = Fun_4(Digits, N_2, Num),
        Digits_2
    catch {return, RetCatch} -> RetCatch end.

fetch_jobs(Location) ->
    try
        Blocks = splitby("<div data-tn-component=\"organicJob\"><a data-tn-element=\"jobTitle\">Android Developer</a><span class=\"company\">ABC Corp</span></div><div data-tn-component=\"organicJob\"><a data-tn-element=\"jobTitle\">iOS Engineer</a><span class=\"company\">XYZ Ltd</span></div>", "data-tn-component=\"organicJob\""),
        Jobs = [],
        I_3 = 1,
        Fun_5 = fun Fun_5_loop(Blocks, I_3, Jobs, Location) ->
    case (I_3 < erlang:length(Blocks)) of
        true ->
            Block = (case erlang:is_map(Blocks) of true -> maps:get(I_3, Blocks, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Blocks) + I_3 + 1, Blocks); _ -> mochi_nth(I_3 + 1, Blocks) end end),
            Title = between(Block, "data-tn-element=\"jobTitle\">", "</a>"),
            Company = between(Block, "class=\"company\">", "</span>"),
            Jobs_2 = lists:append((case Jobs of nil -> []; _ -> Jobs end), [#{"title" => Title, "company" => Company}]),
            I_4 = (I_3 + 1),
            Fun_5_loop(Blocks, I_4, Jobs_2, Location);
        _ -> {Blocks, I_3, Jobs, Location}
    end
end,
{Blocks, I_4, Jobs_2, Location} = Fun_5(Blocks, I_3, Jobs, Location),
        Jobs_2
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Jobs_3 = fetch_jobs("Bangalore"),
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(I_5, Jobs_3) ->
    case (I_5 < erlang:length(Jobs_3)) of
        true ->
            J_3 = (case erlang:is_map(Jobs_3) of true -> maps:get(I_5, Jobs_3, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Jobs_3) + I_5 + 1, Jobs_3); _ -> mochi_nth(I_5 + 1, Jobs_3) end end),
            Idx_3 = (I_5 + 1),
            io:format("~ts~n", [mochi_repr(((((("Job " ++ inttostring(Idx_3)) ++ " is ") ++ maps:get("title", J_3, nil)) ++ " at ") ++ maps:get("company", J_3, nil)))]),
            I_6 = (I_5 + 1),
            Fun_6_loop(I_6, Jobs_3);
        _ -> {I_5, Jobs_3}
    end
end,
{I_6, Jobs_3} = Fun_6(I_5, Jobs_3),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('SAMPLE_HTML', "<div data-tn-component=\"organicJob\"><a data-tn-element=\"jobTitle\">Android Developer</a><span class=\"company\">ABC Corp</span></div><div data-tn-component=\"organicJob\"><a data-tn-element=\"jobTitle\">iOS Engineer</a><span class=\"company\">XYZ Ltd</span></div>"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
