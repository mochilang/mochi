#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, get_header/2, mock_response/2, fetch_github_info/1, test_fetch_github_info/0, main/0]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

get_header(Hs, Key) ->
    try
        I = 0,
        Fun = fun Fun_loop(Hs, I, Key) ->
    case (I < erlang:length(Hs)) of
        true ->
            Pair = (case erlang:is_map(Hs) of true -> maps:get(I, Hs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Hs) + I + 1, Hs); _ -> mochi_nth(I + 1, Hs) end end),
            case ((case erlang:is_map(Pair) of true -> maps:get(0, Pair, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Pair) + 0 + 1, Pair); _ -> mochi_nth(0 + 1, Pair) end end) == Key) of
        true -> throw({return, (case erlang:is_map(Pair) of true -> maps:get(1, Pair, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Pair) + 1 + 1, Pair); _ -> mochi_nth(1 + 1, Pair) end end)});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Hs, I_2, Key);
        _ -> {Hs, I, Key}
    end
end,
{Hs, I_2, Key} = Fun(Hs, I, Key),
        ""
    catch {return, RetCatch} -> RetCatch end.

mock_response(Url, Headers) ->
    try
        case (Url /= "https://api.github.com/user") of
        true -> erlang:error({panic, "wrong url"});
        _ -> ok
    end,
        Auth = get_header(Headers, "Authorization"),
        case (erlang:length(Auth) == 0) of
        true -> erlang:error({panic, "missing Authorization"});
        _ -> ok
    end,
        case (string:substr(Auth, 0 + 1, (6 - 0)) /= "token ") of
        true -> erlang:error({panic, "bad token prefix"});
        _ -> ok
    end,
        Accept = get_header(Headers, "Accept"),
        case (erlang:length(Accept) == 0) of
        true -> erlang:error({panic, "missing Accept"});
        _ -> ok
    end,
        #{"login" => "test", "id" => 1}
    catch {return, RetCatch} -> RetCatch end.

fetch_github_info(Auth_token) ->
    try
        Headers_2 = [["Authorization", ("token " ++ Auth_token)], ["Accept", "application/vnd.github.v3+json"]],
        mock_response("https://api.github.com/user", Headers_2)
    catch {return, RetCatch} -> RetCatch end.

test_fetch_github_info() ->
    try
        Result = fetch_github_info("token"),
        case (maps:get("login", Result, nil) /= "test") of
        true -> erlang:error({panic, "login mismatch"});
        _ -> ok
    end,
        case (maps:get("id", Result, nil) /= 1) of
        true -> erlang:error({panic, "id mismatch"});
        _ -> ok
    end,
        io:format("~ts~n", [mochi_repr(maps:get("login", Result, nil))]),
        io:format("~ts~n", [mochi_str(maps:get("id", Result, nil))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        test_fetch_github_info(),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('AUTHENTICATED_USER_ENDPOINT', "https://api.github.com/user"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
