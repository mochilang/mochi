#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, join/2, count_char/2, strip/1, trim_slashes/1, normalize_olid/1, get_book_data/1, get_author_data/1, summarize_book/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_fetch(Url) ->
    mochi_fetch(Url, nil).

mochi_fetch(Url, _Opts) ->
    Cmd = "curl -fsSL " ++ Url,
    Out = os:cmd(Cmd),
    case re:run(Out, "\"title\"\\s*:\\s*\"([^\"]+)\"", [{capture, [1], list}]) of
        {match, [Title]} -> #{"title" => Title};
        _ -> Out
    end.

join(Xs, Sep) ->
    try
        Res = "",
        I = 0,
        Fun = fun Fun_loop(I, Res, Sep, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case (I > 0) of
        true -> Res_2 = (Res ++ Sep),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            Res_4 = (Res_3 ++ (case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end)),
            I_2 = (I + 1),
            Fun_loop(I_2, Res_4, Sep, Xs);
        _ -> {I, Res, Sep, Xs}
    end
end,
{I_2, Res_4, Sep, Xs} = Fun(I, Res, Sep, Xs),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

count_char(S, Ch) ->
    try
        Cnt = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Ch, Cnt, I_3, S) ->
    case (I_3 < erlang:length(S)) of
        true ->
            case (string:substr(S, I_3 + 1, ((I_3 + 1) - I_3)) == Ch) of
        true -> Cnt_2 = (Cnt + 1),
            Cnt_3 = Cnt_2;
        _ -> Cnt_3 = Cnt
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Ch, Cnt_3, I_4, S);
        _ -> {Ch, Cnt, I_3, S}
    end
end,
{Ch, Cnt_3, I_4, S} = Fun_2(Ch, Cnt, I_3, S),
        Cnt_3
    catch {return, RetCatch} -> RetCatch end.

strip(S_2) ->
    try
        Start = 0,
        End = erlang:length(S_2),
        Fun_3 = fun Fun_3_loop(End, S_2, Start) ->
    case ((Start < End) andalso (string:substr(S_2, Start + 1, ((Start + 1) - Start)) == " ")) of
        true ->
            Start_2 = (Start + 1),
            Fun_3_loop(End, S_2, Start_2);
        _ -> {End, S_2, Start}
    end
end,
{End, S_2, Start_2} = Fun_3(End, S_2, Start),
        Fun_4 = fun Fun_4_loop(End, S_2, Start_2) ->
    case ((End > Start_2) andalso (string:substr(S_2, (End - 1) + 1, (End - (End - 1))) == " ")) of
        true ->
            End_2 = (End - 1),
            Fun_4_loop(End_2, S_2, Start_2);
        _ -> {End, S_2, Start_2}
    end
end,
{End_2, S_2, Start_2} = Fun_4(End, S_2, Start_2),
        string:substr(S_2, Start_2 + 1, (End_2 - Start_2))
    catch {return, RetCatch} -> RetCatch end.

trim_slashes(S_3) ->
    try
        Start_3 = 0,
        End_3 = erlang:length(S_3),
        Fun_5 = fun Fun_5_loop(End_3, S_3, Start_3) ->
    case ((Start_3 < End_3) andalso (string:substr(S_3, Start_3 + 1, ((Start_3 + 1) - Start_3)) == "/")) of
        true ->
            Start_4 = (Start_3 + 1),
            Fun_5_loop(End_3, S_3, Start_4);
        _ -> {End_3, S_3, Start_3}
    end
end,
{End_3, S_3, Start_4} = Fun_5(End_3, S_3, Start_3),
        Fun_6 = fun Fun_6_loop(End_3, S_3, Start_4) ->
    case ((End_3 > Start_4) andalso (string:substr(S_3, (End_3 - 1) + 1, (End_3 - (End_3 - 1))) == "/")) of
        true ->
            End_4 = (End_3 - 1),
            Fun_6_loop(End_4, S_3, Start_4);
        _ -> {End_3, S_3, Start_4}
    end
end,
{End_4, S_3, Start_4} = Fun_6(End_3, S_3, Start_4),
        string:substr(S_3, Start_4 + 1, (End_4 - Start_4))
    catch {return, RetCatch} -> RetCatch end.

normalize_olid(Olid) ->
    try
        Stripped = strip(Olid),
        Cleaned = trim_slashes(Stripped),
        case (count_char(Cleaned, "/") /= 1) of
        true -> erlang:error({panic, (Olid ++ " is not a valid Open Library olid")});
        _ -> ok
    end,
        Cleaned
    catch {return, RetCatch} -> RetCatch end.

get_book_data(Olid_2) ->
    try
        Norm = normalize_olid(Olid_2),
        Url = (("https://openlibrary.org/" ++ Norm) ++ ".json"),
        Data = mochi_fetch(Url),
        Data
    catch {return, RetCatch} -> RetCatch end.

get_author_data(Olid_3) ->
    try
        Norm_2 = normalize_olid(Olid_3),
        Url_2 = (("https://openlibrary.org/" ++ Norm_2) ++ ".json"),
        Data_2 = mochi_fetch(Url_2),
        Data_2
    catch {return, RetCatch} -> RetCatch end.

summarize_book(Book) ->
    try
        Names = [],
        I_5 = 0,
        Fun_7 = fun Fun_7_loop(Book, I_5, Names) ->
    case (I_5 < erlang:length(maps:get("authors", Book, nil))) of
        true ->
            Ref = (case erlang:is_map(maps:get("authors", Book, nil)) of true -> maps:get(I_5, maps:get("authors", Book, nil), nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(maps:get("authors", Book, nil)) + I_5 + 1, maps:get("authors", Book, nil)); _ -> mochi_nth(I_5 + 1, maps:get("authors", Book, nil)) end end),
            Auth = get_author_data(maps:get("key", Ref, nil)),
            Names_2 = lists:append((case Names of nil -> []; _ -> Names end), [maps:get("name", Auth, nil)]),
            I_6 = (I_5 + 1),
            Fun_7_loop(Book, I_6, Names_2);
        _ -> {Book, I_5, Names}
    end
end,
{Book, I_6, Names_2} = Fun_7(Book, I_5, Names),
        #{"title" => maps:get("title", Book, nil), "publish_date" => maps:get("publish_date", Book, nil), "authors" => join(Names_2, ", "), "number_of_pages" => maps:get("number_of_pages", Book, nil), "isbn_10" => join(maps:get("isbn_10", Book, nil), ", "), "isbn_13" => join(maps:get("isbn_13", Book, nil), ", ")}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Book_2 = get_book_data("isbn/0140328726"),
        Summary = summarize_book(Book_2),
        io:format("~ts~n", [mochi_repr(("Title: " ++ maps:get("title", Summary, nil)))]),
        io:format("~ts~n", [mochi_repr(("Publish date: " ++ maps:get("publish_date", Summary, nil)))]),
        io:format("~ts~n", [mochi_repr(("Authors: " ++ maps:get("authors", Summary, nil)))]),
        io:format("~ts~n", [mochi_repr(("Number of pages: " ++ mochi_str(maps:get("number_of_pages", Summary, nil))))]),
        io:format("~ts~n", [mochi_repr(("ISBN (10): " ++ maps:get("isbn_10", Summary, nil)))]),
        io:format("~ts~n", [mochi_repr(("ISBN (13): " ++ maps:get("isbn_13", Summary, nil)))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
