#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, horoscope/2, main/0]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

horoscope(Zodiac_sign, Day) ->
    try
        Day_index = (0 - 1),
        I = 0,
        Fun = fun Fun_loop(Day, Day_index, I, Zodiac_sign) ->
    case (I < erlang:length(erlang:get('days'))) of
        true ->
            try
                case (Day == (case erlang:is_map(erlang:get('days')) of true -> maps:get(I, erlang:get('days'), nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(erlang:get('days')) + I + 1, erlang:get('days')); _ -> mochi_nth(I + 1, erlang:get('days')) end end)) of
        true -> Day_index_2 = I,
            throw({break, Day, Day_index_2, I, Zodiac_sign}),
            Day_index_3 = Day_index_2;
        _ -> Day_index_3 = Day_index
    end,
                I_2 = (I + 1),
                Fun_loop(Day, Day_index_3, I_2, Zodiac_sign)
            catch
                {continue, C0, C1, C2, C3} -> Fun_loop(C0, C1, C2, C3);
                {break, B0, B1, B2, B3} -> {B0, B1, B2, B3}
            end;
        _ -> {Day, Day_index, I, Zodiac_sign}
    end
end,
{Day, Day_index_3, I_2, Zodiac_sign} = Fun(Day, Day_index, I, Zodiac_sign),
        Sign_index = (Zodiac_sign - 1),
        case (Day_index_3 == (0 - 1)) of
        true -> throw({return, "Invalid zodiac sign or day"});
        _ -> ok
    end,
        case ((Sign_index < 0) orelse (Sign_index >= erlang:length(erlang:get('zodiac_names')))) of
        true -> throw({return, "Invalid zodiac sign or day"});
        _ -> ok
    end,
        (((case erlang:is_map(erlang:get('zodiac_names')) of true -> maps:get(Sign_index, erlang:get('zodiac_names'), nil); _ -> case Sign_index < 0 of true -> mochi_nth(erlang:length(erlang:get('zodiac_names')) + Sign_index + 1, erlang:get('zodiac_names')); _ -> mochi_nth(Sign_index + 1, erlang:get('zodiac_names')) end end) ++ ": ") ++ (case erlang:is_map(erlang:get('day_messages')) of true -> maps:get(Day_index_3, erlang:get('day_messages'), nil); _ -> case Day_index_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('day_messages')) + Day_index_3 + 1, erlang:get('day_messages')); _ -> mochi_nth(Day_index_3 + 1, erlang:get('day_messages')) end end))
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Result = horoscope(1, "today"),
        io:format("~ts~n", [mochi_repr(Result)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('days', ["yesterday", "today", "tomorrow"]),
    erlang:put('zodiac_names', ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"]),
    erlang:put('day_messages', ["Reflect on what has passed and learn from it.", "Focus on the present and take decisive action.", "Prepare for future opportunities with optimism."]),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
