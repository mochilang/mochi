#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, contains/2, join_with_comma/1, get_subreddit_data/4]).

% Generated by Mochi transpiler v0.10.62 (3bf190a312) on 2025-08-09 10:39 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_fetch(Url) ->
    mochi_fetch(Url, nil).

mochi_fetch(Url, _Opts) ->
    case re:run(Url, "zenquotes\\.io/api/") of
        {match, _} ->
            "[ {\"q\":\"It takes half your life before you discover life is a do-it-yourself project.\", \"a\":\"Napoleon Hill\", \"h\":\"<blockquote>&ldquo;It takes half your life before you discover life is a do-it-yourself project.&rdquo; &mdash; <footer>Napoleon Hill</footer></blockquote>\"} ]";
        nomatch ->
            Cmd = "curl -fsSL " ++ Url,
            Out = os:cmd(Cmd),
            case re:run(Out, "\"title\"\\s*:\\s*\"([^\"]+)\"", [{capture, [1], list}]) of
                {match, [Title]} -> #{"title" => Title};
                _ -> Out
            end
    end.


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

contains(Xs, X) ->
    try
        I = 0,
        Fun = fun Fun_loop(I, X, Xs) ->
    case (I < erlang:length(Xs)) of
        true ->
            case ((case erlang:is_map(Xs) of true -> maps:get(I, Xs, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Xs) + I + 1, Xs); _ -> mochi_nth(I + 1, Xs) end end) == X) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, X, Xs);
        _ -> {I, X, Xs}
    end
end,
{I_2, X, Xs} = Fun(I, X, Xs),
        false
    catch {return, RetCatch} -> RetCatch end.

join_with_comma(Xs_2) ->
    try
        S = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, S, Xs_2) ->
    case (I_3 < erlang:length(Xs_2)) of
        true ->
            case (I_3 > 0) of
        true -> S_2 = (S ++ ", "),
            S_3 = S_2;
        _ -> S_3 = S
    end,
            S_4 = (S_3 ++ (case erlang:is_map(Xs_2) of true -> maps:get(I_3, Xs_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Xs_2) + I_3 + 1, Xs_2); _ -> mochi_nth(I_3 + 1, Xs_2) end end)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, S_4, Xs_2);
        _ -> {I_3, S, Xs_2}
    end
end,
{I_4, S_4, Xs_2} = Fun_2(I_3, S, Xs_2),
        S_4
    catch {return, RetCatch} -> RetCatch end.

get_subreddit_data(Subreddit, Limit, Age, Wanted_data) ->
    try
        Invalid = [],
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Age, I_5, Invalid, Limit, Subreddit, Wanted_data) ->
    case (I_5 < erlang:length(Wanted_data)) of
        true ->
            Term = (case erlang:is_map(Wanted_data) of true -> maps:get(I_5, Wanted_data, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Wanted_data) + I_5 + 1, Wanted_data); _ -> mochi_nth(I_5 + 1, Wanted_data) end end),
            case mochi_not(mochi_member(Term, erlang:get('valid_terms'))) of
        true -> Invalid_2 = lists:append((case Invalid of nil -> []; _ -> Invalid end), [Term]),
            Invalid_3 = Invalid_2;
        _ -> Invalid_3 = Invalid
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Age, I_6, Invalid_3, Limit, Subreddit, Wanted_data);
        _ -> {Age, I_5, Invalid, Limit, Subreddit, Wanted_data}
    end
end,
{Age, I_6, Invalid_3, Limit, Subreddit, Wanted_data} = Fun_3(Age, I_5, Invalid, Limit, Subreddit, Wanted_data),
        case (erlang:length(Invalid_3) > 0) of
        true -> Msg = ("Invalid search term: " ++ join_with_comma(Invalid_3)),
            erlang:error({panic, Msg}),
            Msg_2 = Msg;
        _ -> Msg_2 = nil
    end,
        Resp = mochi_fetch("tests/github/TheAlgorithms/Mochi/web_programming/reddit_sample.json"),
        Result = #{},
        Idx = 0,
        Fun_6 = fun Fun_6_loop(Age, I_6, Idx, Invalid_3, Limit, Msg_2, Resp, Result, Subreddit, Wanted_data) ->
    case (Idx < Limit) of
        true ->
            Post = maps:get("data", (case erlang:is_map(maps:get("children", maps:get("data", Resp, nil), nil)) of true -> maps:get(Idx, maps:get("children", maps:get("data", Resp, nil), nil), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(maps:get("children", maps:get("data", Resp, nil), nil)) + Idx + 1, maps:get("children", maps:get("data", Resp, nil), nil)); _ -> mochi_nth(Idx + 1, maps:get("children", maps:get("data", Resp, nil), nil)) end end), nil),
            Post_map = #{},
            case (erlang:length(Wanted_data) == 0) of
        true -> Post_map_2 = maps:put("title", maps:get("title", Post, nil), Post_map),
            Post_map_3 = maps:put("url", maps:get("url", Post, nil), Post_map_2),
            Post_map_4 = maps:put("selftext", maps:get("selftext", Post, nil), Post_map_3),
            Fun_5 = Fun_3,
            J_3 = nil,
            Post_map_11 = Post_map_4;
        _ -> J = 0,
            Fun_4 = fun Fun_4_loop(Age, I_6, Idx, Invalid_3, J, Limit, Msg_2, Post, Post_map, Resp, Result, Subreddit, Wanted_data) ->
    case (J < erlang:length(Wanted_data)) of
        true ->
            Field = (case erlang:is_map(Wanted_data) of true -> maps:get(J, Wanted_data, nil); _ -> case J < 0 of true -> mochi_nth(erlang:length(Wanted_data) + J + 1, Wanted_data); _ -> mochi_nth(J + 1, Wanted_data) end end),
            case (Field == "title") of
        true -> Post_map_5 = maps:put("title", maps:get("title", Post, nil), Post_map),
            Post_map_10 = Post_map_5;
        _ -> case (Field == "url") of
        true -> Post_map_6 = maps:put("url", maps:get("url", Post, nil), Post_map),
            Post_map_9 = Post_map_6;
        _ -> case (Field == "selftext") of
        true -> Post_map_7 = maps:put("selftext", maps:get("selftext", Post, nil), Post_map),
            Post_map_8 = Post_map_7;
        _ -> Post_map_8 = Post_map
    end,
            Post_map_9 = Post_map_8
    end,
            Post_map_10 = Post_map_9
    end,
            J_2 = (J + 1),
            Fun_4_loop(Age, I_6, Idx, Invalid_3, J_2, Limit, Msg_2, Post, Post_map_10, Resp, Result, Subreddit, Wanted_data);
        _ -> {Age, I_6, Idx, Invalid_3, J, Limit, Msg_2, Post, Post_map, Resp, Result, Subreddit, Wanted_data}
    end
end,
{Age, I_6, Idx, Invalid_3, J_2, Limit, Msg_2, Post, Post_map_10, Resp, Result, Subreddit, Wanted_data} = Fun_4(Age, I_6, Idx, Invalid_3, J, Limit, Msg_2, Post, Post_map, Resp, Result, Subreddit, Wanted_data),
            Fun_5 = Fun_4,
            J_3 = J_2,
            Post_map_11 = Post_map_10
    end,
            Result_2 = maps:put(Idx, Post_map_11, Result),
            Idx_2 = (Idx + 1),
            Fun_6_loop(Age, I_6, Idx_2, Invalid_3, Limit, Msg_2, Resp, Result_2, Subreddit, Wanted_data);
        _ -> {Age, I_6, Idx, Invalid_3, Limit, Msg_2, Resp, Result, Subreddit, Wanted_data}
    end
end,
{Age, I_6, Idx_2, Invalid_3, Limit, Msg_2, Resp, Result_2, Subreddit, Wanted_data} = Fun_6(Age, I_6, Idx, Invalid_3, Limit, Msg_2, Resp, Result, Subreddit, Wanted_data),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('valid_terms', ["approved_at_utc", "approved_by", "author_flair_background_color", "author_flair_css_class", "author_flair_richtext", "author_flair_template_id", "author_fullname", "author_premium", "can_mod_post", "category", "clicked", "content_categories", "created_utc", "downs", "edited", "gilded", "gildings", "hidden", "hide_score", "is_created_from_ads_ui", "is_meta", "is_original_content", "is_reddit_media_domain", "is_video", "link_flair_css_class", "link_flair_richtext", "link_flair_text", "link_flair_text_color", "media_embed", "mod_reason_title", "name", "permalink", "pwls", "quarantine", "saved", "score", "secure_media", "secure_media_embed", "selftext", "subreddit", "subreddit_name_prefixed", "subreddit_type", "thumbnail", "title", "top_awarded_type", "total_awards_received", "ups", "upvote_ratio", "url", "user_reports"]),
    io:format("~ts~n", [mochi_repr(get_subreddit_data("learnpython", 1, "new", ["title", "url", "selftext"]))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
