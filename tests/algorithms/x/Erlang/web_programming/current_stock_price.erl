#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, find/3, stock_price/1]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

find(Text, Pattern, Start) ->
    try
        I = Start,
        Limit = (erlang:length(Text) - erlang:length(Pattern)),
        Fun = fun Fun_loop(I, Limit, Pattern, Start, Text) ->
    case (I =< Limit) of
        true ->
            case (string:substr(Text, I + 1, ((I + erlang:length(Pattern)) - I)) == Pattern) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Limit, Pattern, Start, Text);
        _ -> {I, Limit, Pattern, Start, Text}
    end
end,
{I_2, Limit, Pattern, Start, Text} = Fun(I, Limit, Pattern, Start, Text),
        -1
    catch {return, RetCatch} -> RetCatch end.

stock_price(Symbol) ->
    try
        Pages = #{"AAPL" => "<span data-testid=\"qsp-price\">228.43</span>", "AMZN" => "<span data-testid=\"qsp-price\">201.85</span>", "IBM" => "<span data-testid=\"qsp-price\">210.30</span>", "GOOG" => "<span data-testid=\"qsp-price\">177.86</span>", "MSFT" => "<span data-testid=\"qsp-price\">414.82</span>", "ORCL" => "<span data-testid=\"qsp-price\">188.87</span>"},
        case maps:is_key(Symbol, Pages) of
        true -> Html = maps:get(Symbol, Pages, nil),
            Marker = "<span data-testid=\"qsp-price\">",
            Start_idx = find(Html, "<span data-testid=\"qsp-price\">", 0),
            case (Start_idx /= -1) of
        true -> Price_start = (Start_idx + erlang:length("<span data-testid=\"qsp-price\">")),
            End_idx = find(Html, "</span>", Price_start),
            case (End_idx /= -1) of
        true -> throw({return, string:substr(Html, Price_start + 1, (End_idx - Price_start))});
        _ -> ok
    end,
            End_idx_2 = End_idx,
            Price_start_2 = Price_start;
        _ -> End_idx_2 = nil,
            Price_start_2 = nil
    end,
            End_idx_3 = End_idx_2,
            Html_2 = Html,
            Marker_2 = Marker,
            Price_start_3 = Price_start_2,
            Start_idx_2 = Start_idx;
        _ -> End_idx_3 = nil,
            Html_2 = nil,
            Marker_2 = nil,
            Price_start_3 = nil,
            Start_idx_2 = nil
    end,
        "No <fin-streamer> tag with the specified data-testid attribute found."
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    Fun_2 = fun Fun_2_loop(List) ->
    case List of
        [] -> {};
        [Symbol_2|Symbol_2_rest] ->
            io:format("~ts~n", [mochi_repr(((("Current " ++ Symbol_2) ++ " stock price is ") ++ stock_price(Symbol_2)))]),
            Fun_2_loop(Symbol_2_rest);
        _ -> {}
    end
end,
{} = Fun_2(["AAPL", "AMZN", "IBM", "GOOG", "MSFT", "ORCL"]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
