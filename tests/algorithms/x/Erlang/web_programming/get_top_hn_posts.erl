#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, get_hackernews_story/1, hackernews_top_stories/1, hackernews_top_stories_as_markdown/1]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_fetch(Url) ->
    mochi_fetch(Url, nil).

mochi_fetch(Url, _Opts) ->
    Cmd = "curl -fsSL " ++ Url,
    Out = os:cmd(Cmd),
    case re:run(Out, "\"title\"\\s*:\\s*\"([^\"]+)\"", [{capture, [1], list}]) of
        {match, [Title]} -> #{"title" => Title};
        _ -> Out
    end.

get_hackernews_story(Story_id) ->
    try
        Url = (("https://hacker-news.firebaseio.com/v0/item/" ++ mochi_str(Story_id)) ++ ".json?print=pretty"),
        Story = mochi_fetch(Url),
        case (maps:get("url", Story, nil) == "") of
        true -> Story_2 = maps:put("url", ("https://news.ycombinator.com/item?id=" ++ mochi_str(Story_id)), Story),
            Story_3 = Story_2;
        _ -> Story_3 = Story
    end,
        Story_3
    catch {return, RetCatch} -> RetCatch end.

hackernews_top_stories(Max_stories) ->
    try
        Url_2 = "https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty",
        Ids = mochi_fetch("https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty"),
        Ids_2 = lists:sublist(Ids, 0 + 1, (Max_stories - 0)),
        Stories = [],
        I = 0,
        Fun = fun Fun_loop(I, Ids_2, Max_stories, Stories, Url_2) ->
    case (I < erlang:length(Ids_2)) of
        true ->
            Stories_2 = lists:append((case Stories of nil -> []; _ -> Stories end), [get_hackernews_story((case erlang:is_map(Ids_2) of true -> maps:get(I, Ids_2, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Ids_2) + I + 1, Ids_2); _ -> mochi_nth(I + 1, Ids_2) end end))]),
            I_2 = (I + 1),
            Fun_loop(I_2, Ids_2, Max_stories, Stories_2, Url_2);
        _ -> {I, Ids_2, Max_stories, Stories, Url_2}
    end
end,
{I_2, Ids_2, Max_stories, Stories_2, Url_2} = Fun(I, Ids_2, Max_stories, Stories, Url_2),
        Stories_2
    catch {return, RetCatch} -> RetCatch end.

hackernews_top_stories_as_markdown(Max_stories_2) ->
    try
        Stories_3 = hackernews_top_stories(Max_stories_2),
        Output = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Max_stories_2, Output, Stories_3) ->
    case (I_3 < erlang:length(Stories_3)) of
        true ->
            S = (case erlang:is_map(Stories_3) of true -> maps:get(I_3, Stories_3, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Stories_3) + I_3 + 1, Stories_3); _ -> mochi_nth(I_3 + 1, Stories_3) end end),
            Line = (((("* [" ++ maps:get("title", S, nil)) ++ "](") ++ maps:get("url", S, nil)) ++ ")"),
            case (I_3 == 0) of
        true -> Output_2 = Line,
            Output_4 = Output_2;
        _ -> Output_3 = ((Output ++ "\n") ++ Line),
            Output_4 = Output_3
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Max_stories_2, Output_4, Stories_3);
        _ -> {I_3, Max_stories_2, Output, Stories_3}
    end
end,
{I_4, Max_stories_2, Output_4, Stories_3} = Fun_2(I_3, Max_stories_2, Output, Stories_3),
        Output_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(hackernews_top_stories_as_markdown(5))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
