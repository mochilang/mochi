#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, fetch_last_half_hour/0, fetch_from_to/2, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_fetch(Url) ->
    mochi_fetch(Url, nil).

mochi_fetch(Url, _Opts) ->
    Cmd = "curl -fsSL " ++ Url,
    Out = os:cmd(Cmd),
    case re:run(Out, "\"title\"\\s*:\\s*\"([^\"]+)\"", [{capture, [1], list}]) of
        {match, [Title]} -> #{"title" => Title};
        _ -> Out
    end.

fetch_last_half_hour() ->
    try
        Resp = mochi_fetch("https://api.carbonintensity.org.uk/intensity", #{"timeout" => 10.0}),
        Entry = (case erlang:is_map(maps:get("data", Resp, nil)) of true -> maps:get(0, maps:get("data", Resp, nil), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(maps:get("data", Resp, nil)) + 0 + 1, maps:get("data", Resp, nil)); _ -> mochi_nth(0 + 1, maps:get("data", Resp, nil)) end end),
        maps:get("actual", maps:get("intensity", Entry, nil), nil)
    catch {return, RetCatch} -> RetCatch end.

fetch_from_to(Start, End) ->
    try
        Url = (((("https://api.carbonintensity.org.uk/intensity" ++ "/") ++ Start) ++ "/") ++ End),
        Resp_2 = mochi_fetch(Url, #{"timeout" => 10.0}),
        maps:get("data", Resp_2, nil)
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Entries = fetch_from_to("2020-10-01", "2020-10-03"),
        I = 0,
        Fun = fun Fun_loop(Entries, I) ->
    case (I < erlang:length(Entries)) of
        true ->
            E = (case erlang:is_map(Entries) of true -> maps:get(I, Entries, nil); _ -> case I < 0 of true -> mochi_nth(erlang:length(Entries) + I + 1, Entries); _ -> mochi_nth(I + 1, Entries) end end),
            io:format("~ts ~ts ~ts ~ts ~ts ~ts~n", [mochi_repr("from"), mochi_repr(maps:get("from", E, nil)), mochi_repr("to"), mochi_repr(maps:get("to", E, nil)), mochi_repr(":"), mochi_repr(maps:get("actual", maps:get("intensity", E, nil), nil))]),
            I_2 = (I + 1),
            Fun_loop(Entries, I_2);
        _ -> {Entries, I}
    end
end,
{Entries, I_2} = Fun(Entries, I),
        Last = fetch_last_half_hour(),
        io:format("~ts ~ts~n", [mochi_repr("fetch_last_half_hour() ="), mochi_repr(Last)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('BASE_URL', "https://api.carbonintensity.org.uk/intensity"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
