#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, is_digit/1, find_substring/2, extract_citation/1, get_citation/2]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

is_digit(Ch) ->
    try
        I = 0,
        Fun = fun Fun_loop(Ch, I) ->
    case (I < erlang:length("0123456789")) of
        true ->
            case (string:substr("0123456789", I + 1, 1) == Ch) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Ch, I_2);
        _ -> {Ch, I}
    end
end,
{Ch, I_2} = Fun(Ch, I),
        false
    catch {return, RetCatch} -> RetCatch end.

find_substring(Haystack, Needle) ->
    try
        I_3 = 0,
        Fun_3 = fun Fun_3_loop(Haystack, I_3, Needle) ->
    case (I_3 =< (erlang:length(Haystack) - erlang:length(Needle))) of
        true ->
            try
                J = 0,
                Fun_2 = fun Fun_2_loop(Haystack, I_3, J, Needle) ->
    case (J < erlang:length(Needle)) of
        true ->
            try
                case (string:substr(Haystack, (I_3 + J) + 1, 1) /= string:substr(Needle, J + 1, 1)) of
        true -> throw({break, Haystack, I_3, J, Needle});
        _ -> ok
    end,
                J_2 = (J + 1),
                Fun_2_loop(Haystack, I_3, J_2, Needle)
            catch
                {continue, C0, C1, C2, C3} -> Fun_2_loop(C0, C1, C2, C3);
                {break, B0, B1, B2, B3} -> {B0, B1, B2, B3}
            end;
        _ -> {Haystack, I_3, J, Needle}
    end
end,
{Haystack, I_3, J_2, Needle} = Fun_2(Haystack, I_3, J, Needle),
                case (J_2 == erlang:length(Needle)) of
        true -> throw({return, I_3});
        _ -> ok
    end,
                I_4 = (I_3 + 1),
                Fun_3_loop(Haystack, I_4, Needle)
            catch
                {continue, C0, C1, C2} -> Fun_3_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Haystack, I_3, Needle}
    end
end,
{Haystack, I_4, Needle} = Fun_3(Haystack, I_3, Needle),
        -1
    catch {return, RetCatch} -> RetCatch end.

extract_citation(Html) ->
    try
        Marker = "Cited by ",
        Idx = find_substring(Html, "Cited by "),
        case (Idx < 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        Pos = (Idx + erlang:length("Cited by ")),
        Result = "",
        Fun_4 = fun Fun_4_loop(Html, Idx, Marker, Pos, Result) ->
    case (Pos < erlang:length(Html)) of
        true ->
            try
                Ch_2 = string:substr(Html, Pos + 1, 1),
                case mochi_not(is_digit(Ch_2)) of
        true -> throw({break, Html, Idx, Marker, Pos, Result});
        _ -> ok
    end,
                Result_2 = (Result ++ Ch_2),
                Pos_2 = (Pos + 1),
                Fun_4_loop(Html, Idx, Marker, Pos_2, Result_2)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_4_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Html, Idx, Marker, Pos, Result}
    end
end,
{Html, Idx, Marker, Pos_2, Result_2} = Fun_4(Html, Idx, Marker, Pos, Result),
        Result_2
    catch {return, RetCatch} -> RetCatch end.

get_citation(Base_url, Params) ->
    try
        Html_2 = "<div class=\"gs_ri\"><div class=\"gs_fl\"><a>Cited by 123</a></div></div>",
        extract_citation("<div class=\"gs_ri\"><div class=\"gs_fl\"><a>Cited by 123</a></div></div>")
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('DIGITS', "0123456789"),
    case ("__main__" == "__main__") of
        true -> Params_2 = #{"title" => "Precisely geometry controlled microsupercapacitors for ultrahigh areal capacitance, volumetric capacitance, and energy density", "journal" => "Chem. Mater.", "volume" => "30", "pages" => "3979-3990", "year" => "2018", "hl" => "en"},
            io:format("~ts~n", [mochi_repr(get_citation("https://scholar.google.com/scholar_lookup", Params_2))]),
            Params_3 = Params_2;
        _ -> Params_3 = nil
    end,
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
