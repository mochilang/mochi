#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, http_post/2, authenticate/2, login/1, render/1, redirect/1, login_using_recaptcha/1]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

http_post(Secret, Client) ->
    try
        Success = ((Secret == "secretKey") andalso (Client == "clientKey")),
        #{"success" => Success}
    catch {return, RetCatch} -> RetCatch end.

authenticate(Username, Password) ->
    try
        ((Username == "user") andalso (Password == "pass"))
    catch {return, RetCatch} -> RetCatch end.

login(_user) ->
    try
        nil
    catch {return, RetCatch} -> RetCatch end.

render(Page) ->
    try
        ("render:" ++ Page)
    catch {return, RetCatch} -> RetCatch end.

redirect(Url) ->
    try
        ("redirect:" ++ Url)
    catch {return, RetCatch} -> RetCatch end.

login_using_recaptcha(Request) ->
    try
        Secret_key = "secretKey",
        case (maps:get("method", Request, nil) /= "POST") of
        true -> throw({return, render("login.html")});
        _ -> ok
    end,
        Username_2 = maps:get("username", maps:get("post", Request, nil), nil),
        Password_2 = maps:get("password", maps:get("post", Request, nil), nil),
        Client_key = maps:get("g-recaptcha-response", maps:get("post", Request, nil), nil),
        Response = http_post("secretKey", Client_key),
        case maps:get("success", Response, nil) of
        true -> case authenticate(Username_2, Password_2) of
        true -> login(Username_2),
            throw({return, redirect("/your-webpage")});
        _ -> ok
    end;
        _ -> ok
    end,
        render("login.html")
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('get_request', #{"method" => "GET", "post" => #{}}),
    io:format("~ts~n", [mochi_repr(login_using_recaptcha(erlang:get('get_request')))]),
    erlang:put('ok_request', #{"method" => "POST", "post" => #{"username" => "user", "password" => "pass", "g-recaptcha-response" => "clientKey"}}),
    io:format("~ts~n", [mochi_repr(login_using_recaptcha(erlang:get('ok_request')))]),
    erlang:put('bad_request', #{"method" => "POST", "post" => #{"username" => "user", "password" => "wrong", "g-recaptcha-response" => "clientKey"}}),
    io:format("~ts~n", [mochi_repr(login_using_recaptcha(erlang:get('bad_request')))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
