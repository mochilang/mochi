#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, contains_str/2, search_scraper/1, search_anime_episode_list/1, to_playlist/1, get_anime_episode/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

contains_str(S, Sub) ->
    try
        case (erlang:length(Sub) == 0) of
        true -> throw({return, true});
        _ -> ok
    end,
        I = 0,
        Fun = fun Fun_loop(I, S, Sub) ->
    case ((I + erlang:length(Sub)) =< erlang:length(S)) of
        true ->
            case (string:substr(S, I + 1, ((I + erlang:length(Sub)) - I)) == Sub) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, S, Sub);
        _ -> {I, S, Sub}
    end
end,
{I_2, S, Sub} = Fun(I, S, Sub),
        false
    catch {return, RetCatch} -> RetCatch end.

search_scraper(Anime_name) ->
    try
        Term = string:to_lower(Anime_name),
        Res = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Anime_name, I_3, Res, Term) ->
    case (I_3 < erlang:length(erlang:get('ANIME_DB'))) of
        true ->
            Item = (case erlang:is_map(erlang:get('ANIME_DB')) of true -> maps:get(I_3, erlang:get('ANIME_DB'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('ANIME_DB')) + I_3 + 1, erlang:get('ANIME_DB')); _ -> mochi_nth(I_3 + 1, erlang:get('ANIME_DB')) end end),
            case contains_str(string:to_lower(maps:get("title", Item, nil)), Term) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Item]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(Anime_name, I_4, Res_3, Term);
        _ -> {Anime_name, I_3, Res, Term}
    end
end,
{Anime_name, I_4, Res_3, Term} = Fun_2(Anime_name, I_3, Res, Term),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

search_anime_episode_list(Endpoint) ->
    try
        case maps:is_key(Endpoint, erlang:get('EPISODE_DB')) of
        true -> throw({return, maps:get(Endpoint, erlang:get('EPISODE_DB'), nil)});
        _ -> ok
    end,
        Empty = [],
        Empty
    catch {return, RetCatch} -> RetCatch end.

to_playlist(Embed) ->
    try
        (("/playlist/" ++ string:substr(Embed, 7 + 1, length(Embed) - 7)) ++ ".m3u8")
    catch {return, RetCatch} -> RetCatch end.

get_anime_episode(Endpoint_2) ->
    try
        case maps:is_key(Endpoint_2, erlang:get('EPISODE_EMBED')) of
        true -> Embed_2 = maps:get(Endpoint_2, erlang:get('EPISODE_EMBED'), nil),
            Play = ("https://ww7.gogoanime2.org" ++ Embed_2),
            Download = ("https://ww7.gogoanime2.org" ++ to_playlist(Embed_2)),
            throw({return, [Play, Download]}),
            Download_2 = Download,
            Embed_3 = Embed_2,
            Play_2 = Play;
        _ -> Download_2 = nil,
            Embed_3 = nil,
            Play_2 = nil
    end,
        Empty_2 = [],
        Empty_2
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Animes = search_scraper("demon"),
        io:format("~ts~n", [mochi_repr(Animes)]),
        Episodes = search_anime_episode_list("/anime/kimetsu-no-yaiba"),
        io:format("~ts~n", [mochi_repr(Episodes)]),
        Links = get_anime_episode("/watch/kimetsu-no-yaiba/1"),
        io:format("~ts~n", [mochi_repr(Links)]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('BASE_URL', "https://ww7.gogoanime2.org"),
    erlang:put('ANIME_DB', [#{"title" => "Demon Slayer", "url" => "/anime/kimetsu-no-yaiba"}, #{"title" => "Naruto", "url" => "/anime/naruto"}]),
    erlang:put('EPISODE_DB', #{"/anime/kimetsu-no-yaiba" => [#{"title" => "Episode 1", "url" => "/watch/kimetsu-no-yaiba/1"}, #{"title" => "Episode 2", "url" => "/watch/kimetsu-no-yaiba/2"}], "/anime/naruto" => [#{"title" => "Episode 1", "url" => "/watch/naruto/1"}]}),
    erlang:put('EPISODE_EMBED', #{"/watch/kimetsu-no-yaiba/1" => "/embed/kimetsu-no-yaiba/1", "/watch/kimetsu-no-yaiba/2" => "/embed/kimetsu-no-yaiba/2", "/watch/naruto/1" => "/embed/naruto/1"}),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
