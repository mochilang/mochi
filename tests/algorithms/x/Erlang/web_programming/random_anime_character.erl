#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rand/0, random_int/2, save_image/1, random_anime_character/0]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) ->
    A1 = case erlang:is_float(A) of
        true -> trunc(A);
        _ -> A
    end,
    B1 = case erlang:is_float(B) of
        true -> trunc(B);
        _ -> B
    end,
    case B1 of
        0 -> 0;
        _ -> ((A1 rem B1) + B1) rem B1
    end.

rand() ->
    try
        erlang:put('seed', mochi_mod(((erlang:get('seed') * 1103515245) + 12345), 2147483648)),
        erlang:get('seed')
    catch {return, RetCatch} -> RetCatch end.

random_int(A, B) ->
    try
        (A + mochi_mod(rand(), (B - A)))
    catch {return, RetCatch} -> RetCatch end.

save_image(_name) ->
    try
        nil
    catch {return, RetCatch} -> RetCatch end.

random_anime_character() ->
    try
        Idx = random_int(0, erlang:length(erlang:get('characters'))),
        Ch = (case erlang:is_map(erlang:get('characters')) of true -> maps:get(Idx, erlang:get('characters'), nil); _ -> case Idx < 0 of true -> mochi_nth(erlang:length(erlang:get('characters')) + Idx + 1, erlang:get('characters')); _ -> mochi_nth(Idx + 1, erlang:get('characters')) end end),
        save_image(maps:get("image_file", Ch, nil)),
        Ch
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('seed', 123456789),
    erlang:put('characters', [#{"title" => "Naruto Uzumaki", "description" => "A spirited ninja of the Hidden Leaf Village.", "image_file" => "naruto.png"}, #{"title" => "Sailor Moon", "description" => "A magical girl who fights for love and justice.", "image_file" => "sailor_moon.png"}, #{"title" => "Spike Spiegel", "description" => "A bounty hunter with a laid-back attitude.", "image_file" => "spike_spiegel.png"}]),
    erlang:put('c', random_anime_character()),
    io:format("~ts~n", [mochi_repr(maps:get("title", erlang:get('c'), nil))]),
    io:format("~ts~n", [mochi_repr("")]),
    io:format("~ts~n", [mochi_repr(maps:get("description", erlang:get('c'), nil))]),
    io:format("~ts~n", [mochi_repr("")]),
    io:format("~ts~n", [mochi_repr(("Image saved : " ++ maps:get("image_file", erlang:get('c'), nil)))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
