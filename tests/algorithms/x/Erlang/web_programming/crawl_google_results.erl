#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of_from/3, extract_links/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

index_of_from(S, Sub, Start) ->
    try
        I = Start,
        Max = (erlang:length(S) - erlang:length(Sub)),
        Fun = fun Fun_loop(I, Max, S, Start, Sub) ->
    case (I =< Max) of
        true ->
            case (string:substr(S, I + 1, ((I + erlang:length(Sub)) - I)) == Sub) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, Max, S, Start, Sub);
        _ -> {I, Max, S, Start, Sub}
    end
end,
{I_2, Max, S, Start, Sub} = Fun(I, Max, S, Start, Sub),
        -1
    catch {return, RetCatch} -> RetCatch end.

extract_links(Html) ->
    try
        Res = [],
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Html, I_3, Res) ->
    case true of
        true ->
            try
                Tag_start = index_of_from(Html, "<a class=\"eZt8xd\"", I_3),
                case (Tag_start == -1) of
        true -> throw({break, Html, I_3, Res});
        _ -> ok
    end,
                Href_start = index_of_from(Html, "href=\"", Tag_start),
                case (Href_start == -1) of
        true -> throw({break, Html, I_3, Res});
        _ -> ok
    end,
                Href_start_2 = (Href_start + erlang:length("href=\"")),
                Href_end = index_of_from(Html, "\"", Href_start_2),
                case (Href_end == -1) of
        true -> throw({break, Html, I_3, Res});
        _ -> ok
    end,
                Href = string:substr(Html, Href_start_2 + 1, (Href_end - Href_start_2)),
                Text_start = (index_of_from(Html, ">", Href_end) + 1),
                Text_end = index_of_from(Html, "</a>", Text_start),
                case (Text_end == -1) of
        true -> throw({break, Html, I_3, Res});
        _ -> ok
    end,
                Text = string:substr(Html, Text_start + 1, (Text_end - Text_start)),
                Link = #{"href" => Href, "text" => Text},
                Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Link]),
                I_4 = (Text_end + erlang:length("</a>")),
                Fun_2_loop(Html, I_4, Res_2)
            catch
                {continue, C0, C1, C2} -> Fun_2_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {Html, I_3, Res}
    end
end,
{Html, I_4, Res_2} = Fun_2(Html, I_3, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Html_2 = (("<div><a class=\"eZt8xd\" href=\"/url?q=http://example1.com\">Example1</a>" ++ "<a class=\"eZt8xd\" href=\"/maps\">Maps</a>") ++ "<a class=\"eZt8xd\" href=\"/url?q=http://example2.com\">Example2</a></div>"),
        Links = extract_links(Html_2),
        io:format("~ts~n", [mochi_str(erlang:length(Links))]),
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(Html_2, I_5, Links) ->
    case ((I_5 < erlang:length(Links)) andalso (I_5 < 5)) of
        true ->
            Link_2 = (case erlang:is_map(Links) of true -> maps:get(I_5, Links, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(Links) + I_5 + 1, Links); _ -> mochi_nth(I_5 + 1, Links) end end),
            Href_2 = maps:get("href", Link_2, nil),
            Text_2 = maps:get("text", Link_2, nil),
            case (Text_2 == "Maps") of
        true -> io:format("~ts~n", [mochi_repr(Href_2)]);
        _ -> io:format("~ts~n", [mochi_repr(("https://google.com" ++ Href_2))])
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(Html_2, I_6, Links);
        _ -> {Html_2, I_5, Links}
    end
end,
{Html_2, I_6, Links} = Fun_3(Html_2, I_5, Links),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
