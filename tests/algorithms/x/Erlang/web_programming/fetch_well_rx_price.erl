#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, find_substring/3, fetch_pharmacy_and_price_list/2]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

find_substring(S, Sub, From) ->
    try
        I = From,
        Fun_2 = fun Fun_2_loop(From, I, S, Sub) ->
    case (I =< (erlang:length(S) - erlang:length(Sub))) of
        true ->
            J = 0,
            Fun = fun Fun_loop(From, I, J, S, Sub) ->
    case ((J < erlang:length(Sub)) andalso (string:substr(S, (I + J) + 1, (((I + J) + 1) - (I + J))) == string:substr(Sub, J + 1, ((J + 1) - J)))) of
        true ->
            J_2 = (J + 1),
            Fun_loop(From, I, J_2, S, Sub);
        _ -> {From, I, J, S, Sub}
    end
end,
{From, I, J_2, S, Sub} = Fun(From, I, J, S, Sub),
            case (J_2 == erlang:length(Sub)) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_2_loop(From, I_2, S, Sub);
        _ -> {From, I, S, Sub}
    end
end,
{From, I_2, S, Sub} = Fun_2(From, I, S, Sub),
        -1
    catch {return, RetCatch} -> RetCatch end.

fetch_pharmacy_and_price_list(Drug_name, Zip_code) ->
    try
        case ((Drug_name == "") orelse (Zip_code == "")) of
        true -> throw({return, nil});
        _ -> ok
    end,
        Results = [],
        Pos = 0,
        Block_tag = "<div class=\"grid-x pharmCard\">",
        Name_tag = "<p class=\"list-title\">",
        Price_tag = "<span class=\"price price-large\">",
        Fun_3 = fun Fun_3_loop(Block_tag, Drug_name, Name_tag, Pos, Price_tag, Results, Zip_code) ->
    case true of
        true ->
            try
                Div_idx = find_substring("<div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy A</p><span class=\"price price-large\">$10.00</span></div><div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy B</p><span class=\"price price-large\">$12.50</span></div>", Block_tag, Pos),
                case (Div_idx < 0) of
        true -> throw({break, Block_tag, Drug_name, Name_tag, Pos, Price_tag, Results, Zip_code});
        _ -> ok
    end,
                Name_start = find_substring("<div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy A</p><span class=\"price price-large\">$10.00</span></div><div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy B</p><span class=\"price price-large\">$12.50</span></div>", Name_tag, Div_idx),
                case (Name_start < 0) of
        true -> throw({break, Block_tag, Drug_name, Name_tag, Pos, Price_tag, Results, Zip_code});
        _ -> ok
    end,
                Name_start_2 = (Name_start + erlang:length(Name_tag)),
                Name_end = find_substring("<div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy A</p><span class=\"price price-large\">$10.00</span></div><div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy B</p><span class=\"price price-large\">$12.50</span></div>", "</p>", Name_start_2),
                case (Name_end < 0) of
        true -> throw({break, Block_tag, Drug_name, Name_tag, Pos, Price_tag, Results, Zip_code});
        _ -> ok
    end,
                Name = string:substr("<div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy A</p><span class=\"price price-large\">$10.00</span></div><div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy B</p><span class=\"price price-large\">$12.50</span></div>", Name_start_2 + 1, (Name_end - Name_start_2)),
                Price_start = find_substring("<div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy A</p><span class=\"price price-large\">$10.00</span></div><div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy B</p><span class=\"price price-large\">$12.50</span></div>", Price_tag, Name_end),
                case (Price_start < 0) of
        true -> throw({break, Block_tag, Drug_name, Name_tag, Pos, Price_tag, Results, Zip_code});
        _ -> ok
    end,
                Price_start_2 = (Price_start + erlang:length(Price_tag)),
                Price_end = find_substring("<div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy A</p><span class=\"price price-large\">$10.00</span></div><div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy B</p><span class=\"price price-large\">$12.50</span></div>", "</span>", Price_start_2),
                case (Price_end < 0) of
        true -> throw({break, Block_tag, Drug_name, Name_tag, Pos, Price_tag, Results, Zip_code});
        _ -> ok
    end,
                Price = string:substr("<div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy A</p><span class=\"price price-large\">$10.00</span></div><div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy B</p><span class=\"price price-large\">$12.50</span></div>", Price_start_2 + 1, (Price_end - Price_start_2)),
                Results_2 = lists:append((case Results of nil -> []; _ -> Results end), [#{"pharmacy_name" => Name, "price" => Price}]),
                Pos_2 = Price_end,
                Fun_3_loop(Block_tag, Drug_name, Name_tag, Pos_2, Price_tag, Results_2, Zip_code)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {Block_tag, Drug_name, Name_tag, Pos, Price_tag, Results, Zip_code}
    end
end,
{Block_tag, Drug_name, Name_tag, Pos_2, Price_tag, Results_2, Zip_code} = Fun_3(Block_tag, Drug_name, Name_tag, Pos, Price_tag, Results, Zip_code),
        Results_2
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('SAMPLE_HTML', "<div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy A</p><span class=\"price price-large\">$10.00</span></div><div class=\"grid-x pharmCard\"><p class=\"list-title\">Pharmacy B</p><span class=\"price price-large\">$12.50</span></div>"),
    erlang:put('pharmacy_price_list', fetch_pharmacy_and_price_list("aspirin", "30303")),
    case (erlang:get('pharmacy_price_list') /= nil) of
        true -> I_3 = 0,
            Fun_4 = fun Fun_4_loop(I_3) ->
    case (I_3 < erlang:length(erlang:get('pharmacy_price_list'))) of
        true ->
            Entry = (case erlang:is_map(erlang:get('pharmacy_price_list')) of true -> maps:get(I_3, erlang:get('pharmacy_price_list'), nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(erlang:get('pharmacy_price_list')) + I_3 + 1, erlang:get('pharmacy_price_list')); _ -> mochi_nth(I_3 + 1, erlang:get('pharmacy_price_list')) end end),
            io:format("~ts~n", [mochi_repr(((("Pharmacy: " ++ maps:get("pharmacy_name", Entry, nil)) ++ " Price: ") ++ maps:get("price", Entry, nil)))]),
            I_4 = (I_3 + 1),
            Fun_4_loop(I_4);
        _ -> {I_3}
    end
end,
{I_4} = Fun_4(I_3),
            Fun_5 = Fun_4,
            I_5 = I_4;
        _ -> io:format("~ts~n", [mochi_repr("No results found")]),
            Fun_5 = nil,
            I_5 = nil
    end,
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
