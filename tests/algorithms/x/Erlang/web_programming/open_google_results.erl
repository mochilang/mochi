#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of_substr/2, first_link/1]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

index_of_substr(S, Pat) ->
    try
        case (erlang:length(Pat) == 0) of
        true -> throw({return, 0});
        _ -> ok
    end,
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Pat, S) ->
    case (I =< (erlang:length(S) - erlang:length(Pat))) of
        true ->
            try
                J = 0,
                Fun = fun Fun_loop(I, J, Pat, S) ->
    case (J < erlang:length(Pat)) of
        true ->
            try
                case (string:substr(S, (I + J) + 1, 1) /= string:substr(Pat, J + 1, 1)) of
        true -> throw({break, I, J, Pat, S});
        _ -> ok
    end,
                J_2 = (J + 1),
                Fun_loop(I, J_2, Pat, S)
            catch
                {continue, C0, C1, C2, C3} -> Fun_loop(C0, C1, C2, C3);
                {break, B0, B1, B2, B3} -> {B0, B1, B2, B3}
            end;
        _ -> {I, J, Pat, S}
    end
end,
{I, J_2, Pat, S} = Fun(I, J, Pat, S),
                case (J_2 == erlang:length(Pat)) of
        true -> throw({return, I});
        _ -> ok
    end,
                I_2 = (I + 1),
                Fun_2_loop(I_2, Pat, S)
            catch
                {continue, C0, C1, C2} -> Fun_2_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {I, Pat, S}
    end
end,
{I_2, Pat, S} = Fun_2(I, Pat, S),
        -1
    catch {return, RetCatch} -> RetCatch end.

first_link(Html) ->
    try
        A_idx = index_of_substr(Html, "<a"),
        case (A_idx < 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        Href_pat = "href=\"",
        Href_idx_rel = index_of_substr(string:substr(Html, A_idx + 1, length(Html) - A_idx), "href=\""),
        case (Href_idx_rel < 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        Start = ((A_idx + Href_idx_rel) + erlang:length("href=\"")),
        End = Start,
        Fun_3 = fun Fun_3_loop(A_idx, End, Href_idx_rel, Href_pat, Html, Start) ->
    case (End < erlang:length(Html)) of
        true ->
            try
                case (string:substr(Html, End + 1, 1) == "\"") of
        true -> throw({break, A_idx, End, Href_idx_rel, Href_pat, Html, Start});
        _ -> ok
    end,
                End_2 = (End + 1),
                Fun_3_loop(A_idx, End_2, Href_idx_rel, Href_pat, Html, Start)
            catch
                {continue, C0, C1, C2, C3, C4, C5} -> Fun_3_loop(C0, C1, C2, C3, C4, C5);
                {break, B0, B1, B2, B3, B4, B5} -> {B0, B1, B2, B3, B4, B5}
            end;
        _ -> {A_idx, End, Href_idx_rel, Href_pat, Html, Start}
    end
end,
{A_idx, End_2, Href_idx_rel, Href_pat, Html, Start} = Fun_3(A_idx, End, Href_idx_rel, Href_pat, Html, Start),
        string:substr(Html, Start + 1, (End_2 - Start))
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('query_words', ["mochi", "language"]),
    erlang:put('query', ""),
    erlang:put('i', 0),
    Fun_4 = fun Fun_4_loop() ->
    case (erlang:get('i') < erlang:length(erlang:get('query_words'))) of
        true ->
            case (erlang:get('i') > 0) of
        true -> erlang:put('query', (erlang:get('query') ++ "%20"));
        _ -> ok
    end,
            erlang:put('query', (erlang:get('query') ++ (case erlang:is_map(erlang:get('query_words')) of true -> maps:get(erlang:get('i'), erlang:get('query_words'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('query_words')) + erlang:get('i') + 1, erlang:get('query_words')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('query_words')) end end))),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_4_loop();
        _ -> {}
    end
end,
{} = Fun_4(),
    erlang:put('url', (("https://www.google.com/search?q=" ++ erlang:get('query')) ++ "&num=100")),
    io:format("~ts~n", [mochi_repr("Googling.....")]),
    erlang:put('sample_html', ("<div><a href=\"https://example.com\">Example</a></div>" ++ "<div><a href=\"https://another.com\">Another</a></div>")),
    erlang:put('link', first_link(erlang:get('sample_html'))),
    case (erlang:length(erlang:get('link')) > 0) of
        true -> io:format("~ts~n", [mochi_repr(erlang:get('link'))]);
        _ -> ok
    end,
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
