#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, find_from/3, download_image/1]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

find_from(S, Pattern, Start) ->
    try
        N = erlang:length(S),
        M = erlang:length(Pattern),
        I = Start,
        Fun = fun Fun_loop(I, M, N, Pattern, S, Start) ->
    case (I =< (N - M)) of
        true ->
            case (string:substr(S, I + 1, ((I + M) - I)) == Pattern) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(I_2, M, N, Pattern, S, Start);
        _ -> {I, M, N, Pattern, S, Start}
    end
end,
{I_2, M, N, Pattern, S, Start} = Fun(I, M, N, Pattern, S, Start),
        -1
    catch {return, RetCatch} -> RetCatch end.

download_image(Html) ->
    try
        Tag = "<meta property=\"og:image\"",
        Idx_tag = find_from(Html, "<meta property=\"og:image\"", 0),
        case (Idx_tag == -1) of
        true -> throw({return, "No meta tag with property 'og:image' was found."});
        _ -> ok
    end,
        Key = "content=\"",
        Idx_content = find_from(Html, "content=\"", Idx_tag),
        case (Idx_content == -1) of
        true -> throw({return, "Image URL not found in meta tag."});
        _ -> ok
    end,
        Start_2 = (Idx_content + erlang:length("content=\"")),
        End = Start_2,
        Fun_2 = fun Fun_2_loop(End, Html, Idx_content, Idx_tag, Key, Start_2, Tag) ->
    case ((End < erlang:length(Html)) andalso (string:substr(Html, End + 1, ((End + 1) - End)) /= "\"")) of
        true ->
            End_2 = (End + 1),
            Fun_2_loop(End_2, Html, Idx_content, Idx_tag, Key, Start_2, Tag);
        _ -> {End, Html, Idx_content, Idx_tag, Key, Start_2, Tag}
    end
end,
{End_2, Html, Idx_content, Idx_tag, Key, Start_2, Tag} = Fun_2(End, Html, Idx_content, Idx_tag, Key, Start_2, Tag),
        case (End_2 >= erlang:length(Html)) of
        true -> throw({return, "Image URL not found in meta tag."});
        _ -> ok
    end,
        Image_url = string:substr(Html, Start_2 + 1, (End_2 - Start_2)),
        ("Image URL: " ++ Image_url)
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('sample_html', "<html><head><meta property=\"og:image\" content=\"https://example.com/pic.jpg\"/></head></html>"),
    io:format("~ts~n", [mochi_repr(download_image("<html><head><meta property=\"og:image\" content=\"https://example.com/pic.jpg\"/></head></html>"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
