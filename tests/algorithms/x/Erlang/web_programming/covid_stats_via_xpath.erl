#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, parse_int/1, find/3, extract_numbers/1, covid_stats/1, main/0]).

% Generated by Mochi transpiler v0.10.61 (0609bdaff6) on 2025-08-08 20:45 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

parse_int(S) ->
    try
        Value = 0,
        I = 0,
        Fun = fun Fun_loop(I, S, Value) ->
    case (I < erlang:length(S)) of
        true ->
            try
                Ch = string:substr(S, I + 1, ((I + 1) - I)),
                case (Ch == ",") of
        true -> I_2 = (I + 1),
            throw({continue, I_2, S, Value}),
            I_3 = I_2;
        _ -> I_3 = I
    end,
                Value_2 = ((Value * 10) + mochi_to_int(Ch)),
                I_4 = (I_3 + 1),
                Fun_loop(I_4, S, Value_2)
            catch
                {continue, C0, C1, C2} -> Fun_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {I, S, Value}
    end
end,
{I_4, S, Value_2} = Fun(I, S, Value),
        Value_2
    catch {return, RetCatch} -> RetCatch end.

find(Haystack, Needle, Start) ->
    try
        Nlen = erlang:length(Needle),
        I_5 = Start,
        Fun_3 = fun Fun_3_loop(Haystack, I_5, Needle, Nlen, Start) ->
    case (I_5 =< (erlang:length(Haystack) - Nlen)) of
        true ->
            try
                J = 0,
                Matched = true,
                Fun_2 = fun Fun_2_loop(Haystack, I_5, J, Matched, Needle, Nlen, Start) ->
    case (J < Nlen) of
        true ->
            try
                case (string:substr(Haystack, (I_5 + J) + 1, (((I_5 + J) + 1) - (I_5 + J))) /= string:substr(Needle, J + 1, ((J + 1) - J))) of
        true -> Matched_2 = false,
            throw({break, Haystack, I_5, J, Matched_2, Needle, Nlen, Start}),
            Matched_3 = Matched_2;
        _ -> Matched_3 = Matched
    end,
                J_2 = (J + 1),
                Fun_2_loop(Haystack, I_5, J_2, Matched_3, Needle, Nlen, Start)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_2_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {Haystack, I_5, J, Matched, Needle, Nlen, Start}
    end
end,
{Haystack, I_5, J_2, Matched_3, Needle, Nlen, Start} = Fun_2(Haystack, I_5, J, Matched, Needle, Nlen, Start),
                case (Matched_3 /= nil) of
        true -> throw({return, I_5});
        _ -> ok
    end,
                I_6 = (I_5 + 1),
                Fun_3_loop(Haystack, I_6, Needle, Nlen, Start)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_3_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {Haystack, I_5, Needle, Nlen, Start}
    end
end,
{Haystack, I_6, Needle, Nlen, Start} = Fun_3(Haystack, I_5, Needle, Nlen, Start),
        (0 - 1)
    catch {return, RetCatch} -> RetCatch end.

extract_numbers(Html) ->
    try
        Nums = [],
        Pos = 0,
        Start_tag = "<span>",
        End_tag = "</span>",
        Fun_4 = fun Fun_4_loop(End_tag, Html, Nums, Pos, Start_tag) ->
    case true of
        true ->
            try
                S_2 = find(Html, Start_tag, Pos),
                case (S_2 == (0 - 1)) of
        true -> throw({break, End_tag, Html, Nums, Pos, Start_tag});
        _ -> ok
    end,
                Content_start = (S_2 + erlang:length(Start_tag)),
                E = find(Html, End_tag, Content_start),
                case (E == (0 - 1)) of
        true -> throw({break, End_tag, Html, Nums, Pos, Start_tag});
        _ -> ok
    end,
                Num_str = string:substr(Html, Content_start + 1, (E - Content_start)),
                Nums_2 = lists:append((case Nums of nil -> []; _ -> Nums end), [parse_int(Num_str)]),
                Pos_2 = (E + erlang:length(End_tag)),
                Fun_4_loop(End_tag, Html, Nums_2, Pos_2, Start_tag)
            catch
                {continue, C0, C1, C2, C3, C4} -> Fun_4_loop(C0, C1, C2, C3, C4);
                {break, B0, B1, B2, B3, B4} -> {B0, B1, B2, B3, B4}
            end;
        _ -> {End_tag, Html, Nums, Pos, Start_tag}
    end
end,
{End_tag, Html, Nums_2, Pos_2, Start_tag} = Fun_4(End_tag, Html, Nums, Pos, Start_tag),
        Nums_2
    catch {return, RetCatch} -> RetCatch end.

covid_stats(Html_2) ->
    try
        Nums_3 = extract_numbers(Html_2),
        #{"cases" => (case erlang:is_map(Nums_3) of true -> maps:get(0, Nums_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(Nums_3) + 0 + 1, Nums_3); _ -> mochi_nth(0 + 1, Nums_3) end end), "deaths" => (case erlang:is_map(Nums_3) of true -> maps:get(1, Nums_3, nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length(Nums_3) + 1 + 1, Nums_3); _ -> mochi_nth(1 + 1, Nums_3) end end), "recovered" => (case erlang:is_map(Nums_3) of true -> maps:get(2, Nums_3, nil); _ -> case 2 < 0 of true -> mochi_nth(erlang:length(Nums_3) + 2 + 1, Nums_3); _ -> mochi_nth(2 + 1, Nums_3) end end)}
    catch {return, RetCatch} -> RetCatch end.

main() ->
    try
        Sample_html = (("<div class=\"maincounter-number\"><span>123456</span></div>" ++ "<div class=\"maincounter-number\"><span>7890</span></div>") ++ "<div class=\"maincounter-number\"><span>101112</span></div>"),
        Stats = covid_stats(Sample_html),
        io:format("~ts~n", [mochi_repr(("Total COVID-19 cases in the world: " ++ mochi_str(maps:get("cases", Stats, nil))))]),
        io:format("~ts~n", [mochi_repr(("Total deaths due to COVID-19 in the world: " ++ mochi_str(maps:get("deaths", Stats, nil))))]),
        io:format("~ts~n", [mochi_repr(("Total COVID-19 patients recovered in the world: " ++ mochi_str(maps:get("recovered", Stats, nil))))]),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
