#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, round1/1, years_old/2, get_forbes_real_time_billionaires/0, display_billionaires/1]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_fetch(Url) ->
    mochi_fetch(Url, nil).

mochi_fetch(Url, _Opts) ->
    Cmd = "curl -fsSL " ++ Url,
    Out = os:cmd(Cmd),
    case re:run(Out, "\"title\"\\s*:\\s*\"([^\"]+)\"", [{capture, [1], list}]) of
        {match, [Title]} -> #{"title" => Title};
        _ -> Out
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try
        case erlang:is_integer(A) andalso erlang:is_integer(B) of
            true ->
                case B of
                    0 -> 0;
                    _ -> A div B
                end;
            false -> A / B
        end
    catch _:_ -> 0.0 end.

round1(Value) ->
    try
        case (Value >= 0.0) of
        true -> Scaled = mochi_to_int((mochi_safe_mul(Value, 10.0) + 0.5)),
            throw({return, mochi_safe_div(float(Scaled), 10.0)}),
            Scaled_2 = Scaled;
        _ -> Scaled_2 = nil
    end,
        Scaled_3 = mochi_to_int((mochi_safe_mul(Value, 10.0) - 0.5)),
        mochi_safe_div(float(Scaled_3), 10.0)
    catch {return, RetCatch} -> RetCatch end.

years_old(Birth_ms, Today_ms) ->
    try
        Ms_per_year = 31557600000.0,
        mochi_to_int(mochi_safe_div((Today_ms - Birth_ms), 31557600000.0))
    catch {return, RetCatch} -> RetCatch end.

get_forbes_real_time_billionaires() ->
    try
        Response = mochi_fetch(erlang:get('API_URL')),
        Out = [],
        Fun = fun Fun_loop(List, Out, Response) ->
    case List of
        [] -> {Out, Response};
        [Person|Person_rest] ->
            Worth_billion = round1(mochi_safe_div(maps:get("finalWorth", Person, nil), 1000.0)),
            Age_years = years_old(maps:get("birthDate", Person, nil), 1705017600000.0),
            Entry = #{"Name" => maps:get("personName", Person, nil), "Source" => maps:get("source", Person, nil), "Country" => maps:get("countryOfCitizenship", Person, nil), "Gender" => maps:get("gender", Person, nil), "Worth ($)" => (mochi_str(Worth_billion) ++ " Billion"), "Age" => mochi_str(Age_years)},
            Out_2 = lists:append((case Out of nil -> []; _ -> Out end), [Entry]),
            Fun_loop(Person_rest, Out_2, Response);
        _ -> {Out, Response}
    end
end,
{Out_2, Response} = Fun(maps:get("personsLists", maps:get("personList", Response, nil), nil), Out, Response),
        Out_2
    catch {return, RetCatch} -> RetCatch end.

display_billionaires(List) ->
    try
        Fun_2 = fun Fun_2_loop(List_, List) ->
    case List_ of
        [] -> {List};
        [B|B_rest] ->
            io:format("~ts~n", [mochi_repr(((((((((((maps:get("Name", B, nil) ++ " | ") ++ maps:get("Source", B, nil)) ++ " | ") ++ maps:get("Country", B, nil)) ++ " | ") ++ maps:get("Gender", B, nil)) ++ " | ") ++ maps:get("Worth ($)", B, nil)) ++ " | ") ++ maps:get("Age", B, nil)))]),
            Fun_2_loop(B_rest, List);
        _ -> {List}
    end
end,
{List} = Fun_2(List, List),
        nil
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('LIMIT', 10),
    erlang:put('TODAY_MS', 1705017600000.0),
    erlang:put('API_URL', ("https://www.forbes.com/forbesapi/person/rtb/0/position/true.json?fields=personName,gender,source,countryOfCitizenship,birthDate,finalWorth&limit=" ++ mochi_str(10))),
    display_billionaires(get_forbes_real_time_billionaires()),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
