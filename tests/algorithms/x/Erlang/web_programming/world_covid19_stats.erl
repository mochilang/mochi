#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/3, find_all/3, world_covid19_stats/1]).

% Generated by Mochi transpiler v0.10.61 (281b2bcbfe) on 2025-08-09 10:02 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

index_of(S, Sub, Start) ->
    try
        N = erlang:length(S),
        M = erlang:length(Sub),
        I = Start,
        Fun_2 = fun Fun_2_loop(I, M, N, S, Start, Sub) ->
    case (I =< (N - M)) of
        true ->
            J = 0,
            Fun = fun Fun_loop(I, J, M, N, S, Start, Sub) ->
    case ((J < M) andalso (string:substr(S, (I + J) + 1, (((I + J) + 1) - (I + J))) == string:substr(Sub, J + 1, ((J + 1) - J)))) of
        true ->
            J_2 = (J + 1),
            Fun_loop(I, J_2, M, N, S, Start, Sub);
        _ -> {I, J, M, N, S, Start, Sub}
    end
end,
{I, J_2, M, N, S, Start, Sub} = Fun(I, J, M, N, S, Start, Sub),
            case (J_2 == M) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_2_loop(I_2, M, N, S, Start, Sub);
        _ -> {I, M, N, S, Start, Sub}
    end
end,
{I_2, M, N, S, Start, Sub} = Fun_2(I, M, N, S, Start, Sub),
        -1
    catch {return, RetCatch} -> RetCatch end.

find_all(Html, Open, Close) ->
    try
        Res = [],
        Pos = 0,
        Ol = erlang:length(Open),
        Cl = erlang:length(Close),
        Fun_3 = fun Fun_3_loop(Cl, Close, Html, Ol, Open, Pos, Res) ->
    case true of
        true ->
            try
                Start_2 = index_of(Html, Open, Pos),
                case (Start_2 < 0) of
        true -> throw({break, Cl, Close, Html, Ol, Open, Pos, Res});
        _ -> ok
    end,
                Begin = (Start_2 + Ol),
                End = index_of(Html, Close, Begin),
                case (End < 0) of
        true -> throw({break, Cl, Close, Html, Ol, Open, Pos, Res});
        _ -> ok
    end,
                Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [string:substr(Html, Begin + 1, (End - Begin))]),
                Pos_2 = (End + Cl),
                Fun_3_loop(Cl, Close, Html, Ol, Open, Pos_2, Res_2)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_3_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {Cl, Close, Html, Ol, Open, Pos, Res}
    end
end,
{Cl, Close, Html, Ol, Open, Pos_2, Res_2} = Fun_3(Cl, Close, Html, Ol, Open, Pos, Res),
        Res_2
    catch {return, RetCatch} -> RetCatch end.

world_covid19_stats(Html_2) ->
    try
        Keys = find_all(Html_2, "<h1>", "</h1>"),
        Values = find_all(Html_2, "<div class=\"maincounter-number\"><span>", "</span></div>"),
        Extra_keys = find_all(Html_2, "<span class=\"panel-title\">", "</span>"),
        Fun_4 = fun Fun_4_loop(List, Extra_keys, Html_2, Keys, Values) ->
    case List of
        [] -> {Extra_keys, Html_2, Keys, Values};
        [K|K_rest] ->
            Keys_2 = lists:append((case Keys of nil -> []; _ -> Keys end), [K]),
            Fun_4_loop(K_rest, Extra_keys, Html_2, Keys_2, Values);
        _ -> {Extra_keys, Html_2, Keys, Values}
    end
end,
{Extra_keys, Html_2, Keys_2, Values} = Fun_4(Extra_keys, Extra_keys, Html_2, Keys, Values),
        Extra_vals = find_all(Html_2, "<div class=\"number-table-main\">", "</div>"),
        Fun_5 = fun Fun_5_loop(List, Extra_keys, Extra_vals, Html_2, Keys_2, Values) ->
    case List of
        [] -> {Extra_keys, Extra_vals, Html_2, Keys_2, Values};
        [V|V_rest] ->
            Values_2 = lists:append((case Values of nil -> []; _ -> Values end), [V]),
            Fun_5_loop(V_rest, Extra_keys, Extra_vals, Html_2, Keys_2, Values_2);
        _ -> {Extra_keys, Extra_vals, Html_2, Keys_2, Values}
    end
end,
{Extra_keys, Extra_vals, Html_2, Keys_2, Values_2} = Fun_5(Extra_vals, Extra_keys, Extra_vals, Html_2, Keys_2, Values),
        Res_3 = [],
        I_3 = 0,
        Fun_6 = fun Fun_6_loop(Extra_keys, Extra_vals, Html_2, I_3, Keys_2, Res_3, Values_2) ->
    case ((I_3 < erlang:length(Keys_2)) andalso (I_3 < erlang:length(Values_2))) of
        true ->
            Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [[(case erlang:is_map(Keys_2) of true -> maps:get(I_3, Keys_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Keys_2) + I_3 + 1, Keys_2); _ -> mochi_nth(I_3 + 1, Keys_2) end end), (case erlang:is_map(Values_2) of true -> maps:get(I_3, Values_2, nil); _ -> case I_3 < 0 of true -> mochi_nth(erlang:length(Values_2) + I_3 + 1, Values_2); _ -> mochi_nth(I_3 + 1, Values_2) end end)]]),
            I_4 = (I_3 + 1),
            Fun_6_loop(Extra_keys, Extra_vals, Html_2, I_4, Keys_2, Res_4, Values_2);
        _ -> {Extra_keys, Extra_vals, Html_2, I_3, Keys_2, Res_3, Values_2}
    end
end,
{Extra_keys, Extra_vals, Html_2, I_4, Keys_2, Res_4, Values_2} = Fun_6(Extra_keys, Extra_vals, Html_2, I_3, Keys_2, Res_3, Values_2),
        Res_4
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('sample_html', "<h1>Coronavirus Cases:</h1><div class=\"maincounter-number\"><span>100</span></div><h1>Deaths:</h1><div class=\"maincounter-number\"><span>10</span></div><h1>Recovered:</h1><div class=\"maincounter-number\"><span>50</span></div><span class=\"panel-title\">Active Cases</span><div class=\"number-table-main\">20</div><span class=\"panel-title\">Closed Cases</span><div class=\"number-table-main\">80</div>"),
    erlang:put('stats', world_covid19_stats("<h1>Coronavirus Cases:</h1><div class=\"maincounter-number\"><span>100</span></div><h1>Deaths:</h1><div class=\"maincounter-number\"><span>10</span></div><h1>Recovered:</h1><div class=\"maincounter-number\"><span>50</span></div><span class=\"panel-title\">Active Cases</span><div class=\"number-table-main\">20</div><span class=\"panel-title\">Closed Cases</span><div class=\"number-table-main\">80</div>")),
    io:format("~ts~n", [mochi_repr("COVID-19 Status of the World\n")]),
    erlang:put('i', 0),
    Fun_7 = fun Fun_7_loop() ->
    case (erlang:get('i') < erlang:length(erlang:get('stats'))) of
        true ->
            io:format("~ts~n", [mochi_repr((case erlang:is_map((case erlang:is_map(erlang:get('stats')) of true -> maps:get(erlang:get('i'), erlang:get('stats'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('stats')) + erlang:get('i') + 1, erlang:get('stats')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('stats')) end end)) of true -> maps:get(0, (case erlang:is_map(erlang:get('stats')) of true -> maps:get(erlang:get('i'), erlang:get('stats'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('stats')) + erlang:get('i') + 1, erlang:get('stats')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('stats')) end end), nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('stats')) of true -> maps:get(erlang:get('i'), erlang:get('stats'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('stats')) + erlang:get('i') + 1, erlang:get('stats')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('stats')) end end)) + 0 + 1, (case erlang:is_map(erlang:get('stats')) of true -> maps:get(erlang:get('i'), erlang:get('stats'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('stats')) + erlang:get('i') + 1, erlang:get('stats')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('stats')) end end)); _ -> mochi_nth(0 + 1, (case erlang:is_map(erlang:get('stats')) of true -> maps:get(erlang:get('i'), erlang:get('stats'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('stats')) + erlang:get('i') + 1, erlang:get('stats')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('stats')) end end)) end end))]),
            io:format("~ts~n", [mochi_repr((case erlang:is_map((case erlang:is_map(erlang:get('stats')) of true -> maps:get(erlang:get('i'), erlang:get('stats'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('stats')) + erlang:get('i') + 1, erlang:get('stats')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('stats')) end end)) of true -> maps:get(1, (case erlang:is_map(erlang:get('stats')) of true -> maps:get(erlang:get('i'), erlang:get('stats'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('stats')) + erlang:get('i') + 1, erlang:get('stats')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('stats')) end end), nil); _ -> case 1 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(erlang:get('stats')) of true -> maps:get(erlang:get('i'), erlang:get('stats'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('stats')) + erlang:get('i') + 1, erlang:get('stats')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('stats')) end end)) + 1 + 1, (case erlang:is_map(erlang:get('stats')) of true -> maps:get(erlang:get('i'), erlang:get('stats'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('stats')) + erlang:get('i') + 1, erlang:get('stats')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('stats')) end end)); _ -> mochi_nth(1 + 1, (case erlang:is_map(erlang:get('stats')) of true -> maps:get(erlang:get('i'), erlang:get('stats'), nil); _ -> case erlang:get('i') < 0 of true -> mochi_nth(erlang:length(erlang:get('stats')) + erlang:get('i') + 1, erlang:get('stats')); _ -> mochi_nth(erlang:get('i') + 1, erlang:get('stats')) end end)) end end))]),
            erlang:put('i', (erlang:get('i') + 1)),
            Fun_7_loop();
        _ -> {}
    end
end,
{} = Fun_7(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
