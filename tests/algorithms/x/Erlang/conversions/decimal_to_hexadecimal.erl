#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, decimal_to_hexadecimal/1]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

decimal_to_hexadecimal(Decimal) ->
    try
        Num = Decimal,
        Negative = false,
        case (Num < 0) of
        true -> Negative_2 = true,
            Num_2 = -Num,
            Negative_3 = Negative_2,
            Num_3 = Num_2;
        _ -> Negative_3 = Negative,
            Num_3 = Num
    end,
        case (Num_3 == 0) of
        true -> case Negative_3 of
        true -> throw({return, "-0x0"});
        _ -> ok
    end,
            throw({return, "0x0"});
        _ -> ok
    end,
        Hex = "",
        Fun = fun Fun_loop(Decimal, Hex, Negative_3, Num_3) ->
    case (Num_3 > 0) of
        true ->
            Remainder = mochi_mod(Num_3, 16),
            Hex_2 = ((case erlang:is_map(erlang:get('values')) of true -> maps:get(Remainder, erlang:get('values'), nil); _ -> lists:nth(Remainder + 1, erlang:get('values')) end) ++ Hex),
            Num_4 = (Num_3 div 16),
            Fun_loop(Decimal, Hex_2, Negative_3, Num_4);
        _ -> {Decimal, Hex, Negative_3, Num_3}
    end
end,
{Decimal, Hex_2, Negative_3, Num_4} = Fun(Decimal, Hex, Negative_3, Num_3),
        case Negative_3 of
        true -> throw({return, ("-0x" ++ Hex_2)});
        _ -> ok
    end,
        ("0x" ++ Hex_2)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('values', ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]),
    io:format("~ts~n", [mochi_repr(decimal_to_hexadecimal(5))]),
    io:format("~ts~n", [mochi_repr(decimal_to_hexadecimal(15))]),
    io:format("~ts~n", [mochi_repr(decimal_to_hexadecimal(37))]),
    io:format("~ts~n", [mochi_repr(decimal_to_hexadecimal(255))]),
    io:format("~ts~n", [mochi_repr(decimal_to_hexadecimal(4096))]),
    io:format("~ts~n", [mochi_repr(decimal_to_hexadecimal(999098))]),
    io:format("~ts~n", [mochi_repr(decimal_to_hexadecimal(-256))]),
    io:format("~ts~n", [mochi_repr(decimal_to_hexadecimal(0))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
