#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sqrtapprox/1, atanapprox/1, atan2approx/2, deg/1, floor/1, pow10/1, round/2, rectangular_to_polar/2, show/2]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

sqrtapprox(X) ->
    try
        Guess = mochi_safe_div(X, 2),
        I = 0,
        Fun = fun Fun_loop(Guess, I, X) ->
    case (I < 20) of
        true ->
            Guess_2 = mochi_safe_div((Guess + mochi_safe_div(X, Guess)), 2),
            I_2 = (I + 1),
            Fun_loop(Guess_2, I_2, X);
        _ -> {Guess, I, X}
    end
end,
{Guess_2, I_2, X} = Fun(Guess, I, X),
        Guess_2
    catch {return, Ret} -> Ret end.

atanapprox(X_2) ->
    try
        case (X_2 > 1) of
        true -> throw({return, (mochi_safe_div(3.141592653589793, 2) - mochi_safe_div(X_2, (mochi_safe_mul(X_2, X_2) + 0.28)))});
        _ -> ok
    end,
        case (X_2 < -1) of
        true -> throw({return, (mochi_safe_div(-3.141592653589793, 2) - mochi_safe_div(X_2, (mochi_safe_mul(X_2, X_2) + 0.28)))});
        _ -> ok
    end,
        mochi_safe_div(X_2, (1 + mochi_safe_mul(mochi_safe_mul(0.28, X_2), X_2)))
    catch {return, Ret} -> Ret end.

atan2approx(Y, X_3) ->
    try
        case (X_3 > 0) of
        true -> R = atanapprox(mochi_safe_div(Y, X_3)),
            throw({return, R}),
            R_2 = R;
        _ -> R_2 = nil
    end,
        case (X_3 < 0) of
        true -> case (Y >= 0) of
        true -> throw({return, (atanapprox(mochi_safe_div(Y, X_3)) + 3.141592653589793)});
        _ -> ok
    end,
            throw({return, (atanapprox(mochi_safe_div(Y, X_3)) - 3.141592653589793)});
        _ -> ok
    end,
        case (Y > 0) of
        true -> throw({return, mochi_safe_div(3.141592653589793, 2)});
        _ -> ok
    end,
        case (Y < 0) of
        true -> throw({return, mochi_safe_div(-3.141592653589793, 2)});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

deg(Rad) ->
    try
        mochi_safe_div(mochi_safe_mul(Rad, 180), 3.141592653589793)
    catch {return, Ret} -> Ret end.

floor(X_4) ->
    try
        I_3 = mochi_to_int(X_4),
        case (float(I_3) > X_4) of
        true -> I_4 = (I_3 - 1),
            I_5 = I_4;
        _ -> I_5 = I_3
    end,
        float(I_5)
    catch {return, Ret} -> Ret end.

pow10(N) ->
    try
        P = 1,
        I_6 = 0,
        Fun_2 = fun Fun_2_loop(I_6, N, P) ->
    case (I_6 < N) of
        true ->
            P_2 = mochi_safe_mul(P, 10),
            I_7 = (I_6 + 1),
            Fun_2_loop(I_7, N, P_2);
        _ -> {I_6, N, P}
    end
end,
{I_7, N, P_2} = Fun_2(I_6, N, P),
        P_2
    catch {return, Ret} -> Ret end.

round(X_5, N_2) ->
    try
        M = pow10(N_2),
        mochi_safe_div(floor((mochi_safe_mul(X_5, M) + 0.5)), M)
    catch {return, Ret} -> Ret end.

rectangular_to_polar(Real, Img) ->
    try
        Mod = round(sqrtapprox((mochi_safe_mul(Real, Real) + mochi_safe_mul(Img, Img))), 2),
        Ang = round(deg(atan2approx(Img, Real)), 2),
        [Mod, Ang]
    catch {return, Ret} -> Ret end.

show(Real_2, Img_2) ->
    try
        R_3 = rectangular_to_polar(Real_2, Img_2),
        io:format("~ts~n", [mochi_str(R_3)]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PI', 3.141592653589793),
    show(5, -5),
    show(-1, 1),
    show(-1, -1),
    show(1.0e-10, 1.0e-10),
    show(-1.0e-10, 1.0e-10),
    show(9.75, 5.93),
    show(10000, 99999),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
