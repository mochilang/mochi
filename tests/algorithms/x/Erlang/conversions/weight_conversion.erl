#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow10/1, weight_conversion/3]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

pow10(Exp) ->
    try
        Result = 1,
        case (Exp >= 0) of
        true -> I = 0,
            Fun = fun Fun_loop(Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = mochi_safe_mul(Result, 10),
            I_2 = (I + 1),
            Fun_loop(Exp, I_2, Result_2);
        _ -> {Exp, I, Result}
    end
end,
{Exp, I_2, Result_2} = Fun(Exp, I, Result),
            Fun_3 = Fun,
            I_5 = I_2,
            Result_4 = Result_2;
        _ -> I_3 = 0,
            Fun_2 = fun Fun_2_loop(Exp, I_3, Result) ->
    case (I_3 < (0 - Exp)) of
        true ->
            Result_3 = mochi_safe_div(Result, 10),
            I_4 = (I_3 + 1),
            Fun_2_loop(Exp, I_4, Result_3);
        _ -> {Exp, I_3, Result}
    end
end,
{Exp, I_4, Result_3} = Fun_2(Exp, I_3, Result),
            Fun_3 = Fun_2,
            I_5 = I_4,
            Result_4 = Result_3
    end,
        Result_4
    catch {return, Ret} -> Ret end.

weight_conversion(From_type, To_type, Value) ->
    try
        Has_to = maps:is_key(To_type, erlang:get('KILOGRAM_CHART')),
        Has_from = maps:is_key(From_type, erlang:get('WEIGHT_TYPE_CHART')),
        case (Has_to andalso Has_from) of
        true -> throw({return, mochi_safe_mul(mochi_safe_mul(Value, maps:get(To_type, erlang:get('KILOGRAM_CHART'), nil)), maps:get(From_type, erlang:get('WEIGHT_TYPE_CHART'), nil))});
        _ -> ok
    end,
        io:format("~ts~n", [mochi_repr("Invalid 'from_type' or 'to_type'")]),
        0
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('KILOGRAM_CHART', #{"kilogram" => 1, "gram" => 1000, "milligram" => 1.0e+06, "metric-ton" => 0.001, "long-ton" => 0.0009842073, "short-ton" => 0.0011023122, "pound" => 2.2046244202, "stone" => 0.1574731728, "ounce" => 35.273990723, "carrat" => 5000, "atomic-mass-unit" => mochi_safe_mul(6.022136652, pow10(26))}),
    erlang:put('WEIGHT_TYPE_CHART', #{"kilogram" => 1, "gram" => 0.001, "milligram" => 1.0e-06, "metric-ton" => 1000, "long-ton" => 1016.04608, "short-ton" => 907.184, "pound" => 0.453592, "stone" => 6.35029, "ounce" => 0.0283495, "carrat" => 0.0002, "atomic-mass-unit" => mochi_safe_mul(1.660540199, pow10(-27))}),
    io:format("~ts~n", [mochi_repr(weight_conversion("kilogram", "gram", 1))]),
    io:format("~ts~n", [mochi_repr(weight_conversion("gram", "pound", 3))]),
    io:format("~ts~n", [mochi_repr(weight_conversion("ounce", "kilogram", 3))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
