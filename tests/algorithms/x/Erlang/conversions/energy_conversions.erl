#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, energy_conversion/3]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

energy_conversion(From_type, To_type, Value) ->
    try
        case ((maps:is_key(From_type, erlang:get('ENERGY_CONVERSION')) == false) orelse (maps:is_key(To_type, erlang:get('ENERGY_CONVERSION')) == false)) of
        true -> erlang:error("Incorrect 'from_type' or 'to_type'");
        _ -> ok
    end,
        mochi_safe_div(mochi_safe_mul(Value, maps:get(From_type, erlang:get('ENERGY_CONVERSION'), nil)), maps:get(To_type, erlang:get('ENERGY_CONVERSION'), nil))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ENERGY_CONVERSION', #{"joule" => 1, "kilojoule" => 1000, "megajoule" => 1.0e+06, "gigajoule" => 1.0e+09, "wattsecond" => 1, "watthour" => 3600, "kilowatthour" => 3.6e+06, "newtonmeter" => 1, "calorie_nutr" => 4186.8, "kilocalorie_nutr" => 4.1868e+06, "electronvolt" => 1.602176634e-19, "britishthermalunit_it" => 1055.05585, "footpound" => 1.355818}),
    io:format("~ts~n", [mochi_str(energy_conversion("joule", "kilojoule", 1))]),
    io:format("~ts~n", [mochi_str(energy_conversion("kilowatthour", "joule", 10))]),
    io:format("~ts~n", [mochi_str(energy_conversion("britishthermalunit_it", "footpound", 1))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
