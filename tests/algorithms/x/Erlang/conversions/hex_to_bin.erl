#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, panic/1, trim_spaces/1, hex_digit_value/1, hex_to_bin/1]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

panic(Msg) ->
    try
        io:format("~ts~n", [mochi_repr(Msg)]),
        nil
    catch {return, Ret} -> Ret end.

trim_spaces(S) ->
    try
        Start = 0,
        End = length(S),
        Fun = fun Fun_loop(End, S, Start) ->
    case ((Start < End) andalso (string:substr(S, Start + 1, ((Start + 1) - Start)) == " ")) of
        true ->
            Start_2 = (Start + 1),
            Fun_loop(End, S, Start_2);
        _ -> {End, S, Start}
    end
end,
{End, S, Start_2} = Fun(End, S, Start),
        Fun_2 = fun Fun_2_loop(End, S, Start_2) ->
    case ((End > Start_2) andalso (string:substr(S, (End - 1) + 1, (End - (End - 1))) == " ")) of
        true ->
            End_2 = (End - 1),
            Fun_2_loop(End_2, S, Start_2);
        _ -> {End, S, Start_2}
    end
end,
{End_2, S, Start_2} = Fun_2(End, S, Start_2),
        string:substr(S, Start_2 + 1, (End_2 - Start_2))
    catch {return, Ret} -> Ret end.

hex_digit_value(Ch) ->
    try
        case (Ch == "0") of
        true -> throw({return, 0});
        _ -> ok
    end,
        case (Ch == "1") of
        true -> throw({return, 1});
        _ -> ok
    end,
        case (Ch == "2") of
        true -> throw({return, 2});
        _ -> ok
    end,
        case (Ch == "3") of
        true -> throw({return, 3});
        _ -> ok
    end,
        case (Ch == "4") of
        true -> throw({return, 4});
        _ -> ok
    end,
        case (Ch == "5") of
        true -> throw({return, 5});
        _ -> ok
    end,
        case (Ch == "6") of
        true -> throw({return, 6});
        _ -> ok
    end,
        case (Ch == "7") of
        true -> throw({return, 7});
        _ -> ok
    end,
        case (Ch == "8") of
        true -> throw({return, 8});
        _ -> ok
    end,
        case (Ch == "9") of
        true -> throw({return, 9});
        _ -> ok
    end,
        case ((Ch == "a") orelse (Ch == "A")) of
        true -> throw({return, 10});
        _ -> ok
    end,
        case ((Ch == "b") orelse (Ch == "B")) of
        true -> throw({return, 11});
        _ -> ok
    end,
        case ((Ch == "c") orelse (Ch == "C")) of
        true -> throw({return, 12});
        _ -> ok
    end,
        case ((Ch == "d") orelse (Ch == "D")) of
        true -> throw({return, 13});
        _ -> ok
    end,
        case ((Ch == "e") orelse (Ch == "E")) of
        true -> throw({return, 14});
        _ -> ok
    end,
        case ((Ch == "f") orelse (Ch == "F")) of
        true -> throw({return, 15});
        _ -> ok
    end,
        erlang:error("Invalid value was passed to the function"),
        nil
    catch {return, Ret} -> Ret end.

hex_to_bin(Hex_num) ->
    try
        Trimmed = trim_spaces(Hex_num),
        case (length(Trimmed) == 0) of
        true -> erlang:error("No value was passed to the function");
        _ -> ok
    end,
        S_2 = Trimmed,
        Is_negative = false,
        case (string:substr(S_2, 0 + 1, (1 - 0)) == "-") of
        true -> Is_negative_2 = true,
            S_3 = string:substr(S_2, 1 + 1, (length(S_2) - 1)),
            Is_negative_3 = Is_negative_2,
            S_4 = S_3;
        _ -> Is_negative_3 = Is_negative,
            S_4 = S_2
    end,
        Int_num = 0,
        I = 0,
        Fun_3 = fun Fun_3_loop(Hex_num, I, Int_num, Is_negative_3, S_4, Trimmed) ->
    case (I < length(S_4)) of
        true ->
            Ch_2 = string:substr(S_4, I + 1, ((I + 1) - I)),
            Val = hex_digit_value(Ch_2),
            Int_num_2 = ((Int_num * 16) + Val),
            I_2 = (I + 1),
            Fun_3_loop(Hex_num, I_2, Int_num_2, Is_negative_3, S_4, Trimmed);
        _ -> {Hex_num, I, Int_num, Is_negative_3, S_4, Trimmed}
    end
end,
{Hex_num, I_2, Int_num_2, Is_negative_3, S_4, Trimmed} = Fun_3(Hex_num, I, Int_num, Is_negative_3, S_4, Trimmed),
        Bin_str = "",
        N = Int_num_2,
        case (N == 0) of
        true -> Bin_str_2 = "0",
            Bin_str_3 = Bin_str_2;
        _ -> Bin_str_3 = Bin_str
    end,
        Fun_4 = fun Fun_4_loop(Bin_str_3, Hex_num, I_2, Int_num_2, Is_negative_3, N, S_4, Trimmed) ->
    case (N > 0) of
        true ->
            Bin_str_4 = (mochi_str(mochi_mod(N, 2)) ++ Bin_str_3),
            N_2 = (N div 2),
            Fun_4_loop(Bin_str_4, Hex_num, I_2, Int_num_2, Is_negative_3, N_2, S_4, Trimmed);
        _ -> {Bin_str_3, Hex_num, I_2, Int_num_2, Is_negative_3, N, S_4, Trimmed}
    end
end,
{Bin_str_4, Hex_num, I_2, Int_num_2, Is_negative_3, N_2, S_4, Trimmed} = Fun_4(Bin_str_3, Hex_num, I_2, Int_num_2, Is_negative_3, N, S_4, Trimmed),
        Result = mochi_to_int(Bin_str_4),
        case Is_negative_3 of
        true -> Result_2 = -Result,
            Result_3 = Result_2;
        _ -> Result_3 = Result
    end,
        Result_3
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(hex_to_bin("AC"))]),
    io:format("~ts~n", [mochi_str(hex_to_bin("9A4"))]),
    io:format("~ts~n", [mochi_str(hex_to_bin("   12f   "))]),
    io:format("~ts~n", [mochi_str(hex_to_bin("FfFf"))]),
    io:format("~ts~n", [mochi_str(hex_to_bin("-fFfF"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
