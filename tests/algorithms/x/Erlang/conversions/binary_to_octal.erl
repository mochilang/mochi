#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, bin_to_octal/1]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

bin_to_octal(Bin_string) ->
    try
        I = 0,
        Fun = fun Fun_loop(Bin_string, I) ->
    case (I < length(Bin_string)) of
        true ->
            C = string:substr(Bin_string, I + 1, 1),
            case mochi_not(((C == "0") orelse (C == "1"))) of
        true -> erlang:error("Non-binary value was passed to the function");
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Bin_string, I_2);
        _ -> {Bin_string, I}
    end
end,
{Bin_string, I_2} = Fun(Bin_string, I),
        case (length(Bin_string) == 0) of
        true -> erlang:error("Empty string was passed to the function");
        _ -> ok
    end,
        Padded = Bin_string,
        Fun_2 = fun Fun_2_loop(Bin_string, I_2, Padded) ->
    case (mochi_mod(length(Padded), 3) /= 0) of
        true ->
            Padded_2 = ("0" ++ Padded),
            Fun_2_loop(Bin_string, I_2, Padded_2);
        _ -> {Bin_string, I_2, Padded}
    end
end,
{Bin_string, I_2, Padded_2} = Fun_2(Bin_string, I_2, Padded),
        Oct_string = "",
        Index = 0,
        Fun_3 = fun Fun_3_loop(Bin_string, I_2, Index, Oct_string, Padded_2) ->
    case (Index < length(Padded_2)) of
        true ->
            Group = string:substr(Padded_2, Index + 1, ((Index + 3) - Index)),
            B0 = (case (string:substr(Group, 0 + 1, 1) == "1") of
    true -> 1;
    _ -> 0
end),
            B1 = (case (string:substr(Group, 1 + 1, 1) == "1") of
    true -> 1;
    _ -> 0
end),
            B2 = (case (string:substr(Group, 2 + 1, 1) == "1") of
    true -> 1;
    _ -> 0
end),
            Oct_val = (((B0 * 4) + (B1 * 2)) + B2),
            Oct_string_2 = (Oct_string ++ mochi_str(Oct_val)),
            Index_2 = (Index + 3),
            Fun_3_loop(Bin_string, I_2, Index_2, Oct_string_2, Padded_2);
        _ -> {Bin_string, I_2, Index, Oct_string, Padded_2}
    end
end,
{Bin_string, I_2, Index_2, Oct_string_2, Padded_2} = Fun_3(Bin_string, I_2, Index, Oct_string, Padded_2),
        Oct_string_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(bin_to_octal("1111"))]),
    io:format("~ts~n", [mochi_repr(bin_to_octal("101010101010011"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
