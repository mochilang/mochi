#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow/2, convert_si_prefix/3, convert_binary_prefix/3]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

pow(Base, Exp) ->
    try
        case (Exp == 0) of
        true -> throw({return, 1});
        _ -> ok
    end,
        E = Exp,
        case (E < 0) of
        true -> E_2 = -E,
            E_3 = E_2;
        _ -> E_3 = E
    end,
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Base, E_3, Exp, I, Result) ->
    case (I < E_3) of
        true ->
            Result_2 = mochi_safe_mul(Result, Base),
            I_2 = (I + 1),
            Fun_loop(Base, E_3, Exp, I_2, Result_2);
        _ -> {Base, E_3, Exp, I, Result}
    end
end,
{Base, E_3, Exp, I_2, Result_2} = Fun(Base, E_3, Exp, I, Result),
        case (Exp < 0) of
        true -> throw({return, mochi_safe_div(1, Result_2)});
        _ -> ok
    end,
        Result_2
    catch {return, Ret} -> Ret end.

convert_si_prefix(Known_amount, Known_prefix, Unknown_prefix) ->
    try
        Kp = string:to_lower(Known_prefix),
        Up = string:to_lower(Unknown_prefix),
        case mochi_not(maps:is_key(Kp, erlang:get('SI_UNITS'))) of
        true -> erlang:error(("unknown prefix: " ++ Known_prefix));
        _ -> ok
    end,
        case mochi_not(maps:is_key(Up, erlang:get('SI_UNITS'))) of
        true -> erlang:error(("unknown prefix: " ++ Unknown_prefix));
        _ -> ok
    end,
        Diff = (maps:get(Kp, erlang:get('SI_UNITS'), nil) - maps:get(Up, erlang:get('SI_UNITS'), nil)),
        mochi_safe_mul(Known_amount, trunc(math:pow(10, Diff)))
    catch {return, Ret} -> Ret end.

convert_binary_prefix(Known_amount_2, Known_prefix_2, Unknown_prefix_2) ->
    try
        Kp_2 = string:to_lower(Known_prefix_2),
        Up_2 = string:to_lower(Unknown_prefix_2),
        case mochi_not(maps:is_key(Kp_2, erlang:get('BINARY_UNITS'))) of
        true -> erlang:error(("unknown prefix: " ++ Known_prefix_2));
        _ -> ok
    end,
        case mochi_not(maps:is_key(Up_2, erlang:get('BINARY_UNITS'))) of
        true -> erlang:error(("unknown prefix: " ++ Unknown_prefix_2));
        _ -> ok
    end,
        Diff_2 = ((maps:get(Kp_2, erlang:get('BINARY_UNITS'), nil) - maps:get(Up_2, erlang:get('BINARY_UNITS'), nil)) * 10),
        mochi_safe_mul(Known_amount_2, trunc(math:pow(2, Diff_2)))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('SI_UNITS', #{"yotta" => 24, "zetta" => 21, "exa" => 18, "peta" => 15, "tera" => 12, "giga" => 9, "mega" => 6, "kilo" => 3, "hecto" => 2, "deca" => 1, "deci" => -1, "centi" => -2, "milli" => -3, "micro" => -6, "nano" => -9, "pico" => -12, "femto" => -15, "atto" => -18, "zepto" => -21, "yocto" => -24}),
    erlang:put('BINARY_UNITS', #{"yotta" => 8, "zetta" => 7, "exa" => 6, "peta" => 5, "tera" => 4, "giga" => 3, "mega" => 2, "kilo" => 1}),
    io:format("~ts~n", [mochi_str(convert_si_prefix(1, "giga", "mega"))]),
    io:format("~ts~n", [mochi_str(convert_si_prefix(1, "mega", "giga"))]),
    io:format("~ts~n", [mochi_str(convert_si_prefix(1, "kilo", "kilo"))]),
    io:format("~ts~n", [mochi_str(convert_binary_prefix(1, "giga", "mega"))]),
    io:format("~ts~n", [mochi_str(convert_binary_prefix(1, "mega", "giga"))]),
    io:format("~ts~n", [mochi_str(convert_binary_prefix(1, "kilo", "kilo"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
