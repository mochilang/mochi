#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pressure_conversion/3]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

pressure_conversion(Value, From_type, To_type) ->
    try
        case mochi_not(maps:is_key(From_type, erlang:get('PRESSURE_CONVERSION'))) of
        true -> Keys = string:join(maps:keys(erlang:get('PRESSURE_CONVERSION')), ", "),
            erlang:error(((("Invalid 'from_type' value: '" ++ From_type) ++ "'  Supported values are:\n") ++ Keys)),
            Keys_2 = Keys;
        _ -> Keys_2 = nil
    end,
        case mochi_not(maps:is_key(To_type, erlang:get('PRESSURE_CONVERSION'))) of
        true -> Keys_3 = string:join(maps:keys(erlang:get('PRESSURE_CONVERSION')), ", "),
            erlang:error(((("Invalid 'to_type' value: '" ++ To_type) ++ ".  Supported values are:\n") ++ Keys_3)),
            Keys_4 = Keys_3;
        _ -> Keys_4 = Keys_2
    end,
        From = maps:get(From_type, erlang:get('PRESSURE_CONVERSION'), nil),
        To = maps:get(To_type, erlang:get('PRESSURE_CONVERSION'), nil),
        mochi_safe_mul(mochi_safe_mul(Value, maps:get("from_factor", From, nil)), maps:get("to_factor", To, nil))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('PRESSURE_CONVERSION', #{"atm" => #{"from_factor" => 1, "to_factor" => 1}, "pascal" => #{"from_factor" => 9.8e-06, "to_factor" => 101325}, "bar" => #{"from_factor" => 0.986923, "to_factor" => 1.01325}, "kilopascal" => #{"from_factor" => 0.00986923, "to_factor" => 101.325}, "megapascal" => #{"from_factor" => 9.86923, "to_factor" => 0.101325}, "psi" => #{"from_factor" => 0.068046, "to_factor" => 14.6959}, "inHg" => #{"from_factor" => 0.0334211, "to_factor" => 29.9213}, "torr" => #{"from_factor" => 0.00131579, "to_factor" => 760}}),
    io:format("~ts~n", [mochi_repr(pressure_conversion(4, "atm", "pascal"))]),
    io:format("~ts~n", [mochi_repr(pressure_conversion(1, "pascal", "psi"))]),
    io:format("~ts~n", [mochi_repr(pressure_conversion(1, "bar", "atm"))]),
    io:format("~ts~n", [mochi_repr(pressure_conversion(3, "kilopascal", "bar"))]),
    io:format("~ts~n", [mochi_repr(pressure_conversion(2, "megapascal", "psi"))]),
    io:format("~ts~n", [mochi_repr(pressure_conversion(4, "psi", "torr"))]),
    io:format("~ts~n", [mochi_repr(pressure_conversion(1, "inHg", "atm"))]),
    io:format("~ts~n", [mochi_repr(pressure_conversion(1, "torr", "psi"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
