#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow/2, add_si_prefix/1, add_binary_prefix/1]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

pow(Base, Exp) ->
    try
        Result = 1,
        E = Exp,
        case (E < 0) of
        true -> E_2 = -E,
            I = 0,
            Fun = fun Fun_loop(Base, E_2, Exp, I, Result) ->
    case (I < E_2) of
        true ->
            Result_2 = mochi_safe_mul(Result, Base),
            I_2 = (I + 1),
            Fun_loop(Base, E_2, Exp, I_2, Result_2);
        _ -> {Base, E_2, Exp, I, Result}
    end
end,
{Base, E_2, Exp, I_2, Result_2} = Fun(Base, E_2, Exp, I, Result),
            throw({return, mochi_safe_div(1, Result_2)}),
            E_3 = E_2,
            Fun_2 = Fun,
            I_3 = I_2,
            Result_3 = Result_2;
        _ -> E_3 = E,
            Fun_2 = nil,
            I_3 = nil,
            Result_3 = Result
    end,
        I_4 = 0,
        Fun_3 = fun Fun_3_loop(Base, E_3, Exp, I_4, Result_3) ->
    case (I_4 < E_3) of
        true ->
            Result_4 = mochi_safe_mul(Result_3, Base),
            I_5 = (I_4 + 1),
            Fun_3_loop(Base, E_3, Exp, I_5, Result_4);
        _ -> {Base, E_3, Exp, I_4, Result_3}
    end
end,
{Base, E_3, Exp, I_5, Result_4} = Fun_3(Base, E_3, Exp, I_4, Result_3),
        Result_4
    catch {return, Ret} -> Ret end.

add_si_prefix(Value) ->
    try
        Prefixes = nil,
        case (Value > 0) of
        true -> Prefixes_2 = erlang:get('si_positive'),
            Prefixes_4 = Prefixes_2;
        _ -> Prefixes_3 = erlang:get('si_negative'),
            Prefixes_4 = Prefixes_3
    end,
        I_6 = 0,
        Fun_4 = fun Fun_4_loop(I_6, Prefixes_4, Value) ->
    case (I_6 < length(Prefixes_4)) of
        true ->
            P = (case erlang:is_map(Prefixes_4) of true -> maps:get(I_6, Prefixes_4, nil); _ -> lists:nth(I_6 + 1, Prefixes_4) end),
            Num = mochi_safe_div(Value, trunc(math:pow(10, maps:get("exp", P, nil)))),
            case (Num > 1) of
        true -> throw({return, ((mochi_str(Num) ++ " ") ++ maps:get("name", P, nil))});
        _ -> ok
    end,
            I_7 = (I_6 + 1),
            Fun_4_loop(I_7, Prefixes_4, Value);
        _ -> {I_6, Prefixes_4, Value}
    end
end,
{I_7, Prefixes_4, Value} = Fun_4(I_6, Prefixes_4, Value),
        mochi_str(Value)
    catch {return, Ret} -> Ret end.

add_binary_prefix(Value_2) ->
    try
        I_8 = 0,
        Fun_5 = fun Fun_5_loop(I_8, Value_2) ->
    case (I_8 < length(erlang:get('binary_prefixes'))) of
        true ->
            P_2 = (case erlang:is_map(erlang:get('binary_prefixes')) of true -> maps:get(I_8, erlang:get('binary_prefixes'), nil); _ -> lists:nth(I_8 + 1, erlang:get('binary_prefixes')) end),
            Num_2 = mochi_safe_div(Value_2, trunc(math:pow(2, maps:get("exp", P_2, nil)))),
            case (Num_2 > 1) of
        true -> throw({return, ((mochi_str(Num_2) ++ " ") ++ maps:get("name", P_2, nil))});
        _ -> ok
    end,
            I_9 = (I_8 + 1),
            Fun_5_loop(I_9, Value_2);
        _ -> {I_8, Value_2}
    end
end,
{I_9, Value_2} = Fun_5(I_8, Value_2),
        mochi_str(Value_2)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('si_positive', [#{"name" => "yotta", "exp" => 24}, #{"name" => "zetta", "exp" => 21}, #{"name" => "exa", "exp" => 18}, #{"name" => "peta", "exp" => 15}, #{"name" => "tera", "exp" => 12}, #{"name" => "giga", "exp" => 9}, #{"name" => "mega", "exp" => 6}, #{"name" => "kilo", "exp" => 3}, #{"name" => "hecto", "exp" => 2}, #{"name" => "deca", "exp" => 1}]),
    erlang:put('si_negative', [#{"name" => "deci", "exp" => -1}, #{"name" => "centi", "exp" => -2}, #{"name" => "milli", "exp" => -3}, #{"name" => "micro", "exp" => -6}, #{"name" => "nano", "exp" => -9}, #{"name" => "pico", "exp" => -12}, #{"name" => "femto", "exp" => -15}, #{"name" => "atto", "exp" => -18}, #{"name" => "zepto", "exp" => -21}, #{"name" => "yocto", "exp" => -24}]),
    erlang:put('binary_prefixes', [#{"name" => "yotta", "exp" => 80}, #{"name" => "zetta", "exp" => 70}, #{"name" => "exa", "exp" => 60}, #{"name" => "peta", "exp" => 50}, #{"name" => "tera", "exp" => 40}, #{"name" => "giga", "exp" => 30}, #{"name" => "mega", "exp" => 20}, #{"name" => "kilo", "exp" => 10}]),
    io:format("~ts~n", [mochi_repr(add_si_prefix(10000))]),
    io:format("~ts~n", [mochi_repr(add_si_prefix(0.005))]),
    io:format("~ts~n", [mochi_repr(add_binary_prefix(65536))]),
    io:format("~ts~n", [mochi_repr(add_binary_prefix(512))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
