#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, round_int/1, rgb_to_cmyk/3]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

round_int(X) ->
    try
        mochi_to_int((X + 0.5))
    catch {return, Ret} -> Ret end.

rgb_to_cmyk(R_input, G_input, B_input) ->
    try
        case ((((((R_input < 0) orelse (R_input >= 256)) orelse (G_input < 0)) orelse (G_input >= 256)) orelse (B_input < 0)) orelse (B_input >= 256)) of
        true -> erlang:error("Expected int of the range 0..255");
        _ -> ok
    end,
        R = mochi_safe_div(float(R_input), 255),
        G = mochi_safe_div(float(G_input), 255),
        B = mochi_safe_div(float(B_input), 255),
        Max_val = R,
        case (G > Max_val) of
        true -> Max_val_2 = G,
            Max_val_3 = Max_val_2;
        _ -> Max_val_3 = Max_val
    end,
        case (B > Max_val_3) of
        true -> Max_val_4 = B,
            Max_val_5 = Max_val_4;
        _ -> Max_val_5 = Max_val_3
    end,
        K_float = (1 - Max_val_5),
        case (K_float == 1) of
        true -> throw({return, [0, 0, 0, 100]});
        _ -> ok
    end,
        C_float = mochi_safe_div(mochi_safe_mul(100, ((1 - R) - K_float)), (1 - K_float)),
        M_float = mochi_safe_div(mochi_safe_mul(100, ((1 - G) - K_float)), (1 - K_float)),
        Y_float = mochi_safe_div(mochi_safe_mul(100, ((1 - B) - K_float)), (1 - K_float)),
        K_percent = mochi_safe_mul(100, K_float),
        C = round_int(C_float),
        M = round_int(M_float),
        Y = round_int(Y_float),
        K = round_int(K_percent),
        [C, M, Y, K]
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(rgb_to_cmyk(255, 255, 255))]),
    io:format("~ts~n", [mochi_repr(rgb_to_cmyk(128, 128, 128))]),
    io:format("~ts~n", [mochi_repr(rgb_to_cmyk(0, 0, 0))]),
    io:format("~ts~n", [mochi_repr(rgb_to_cmyk(255, 0, 0))]),
    io:format("~ts~n", [mochi_repr(rgb_to_cmyk(0, 255, 0))]),
    io:format("~ts~n", [mochi_repr(rgb_to_cmyk(0, 0, 255))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
