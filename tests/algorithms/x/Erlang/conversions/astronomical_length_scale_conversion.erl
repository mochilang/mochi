#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, sanitize/1, pow10/1, length_conversion/3]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

sanitize(Unit) ->
    try
        Res = string:to_lower(Unit),
        case (length(Res) > 0) of
        true -> Last = string:substr(Res, (length(Res) - 1) + 1, (length(Res) - (length(Res) - 1))),
            case (Last == "s") of
        true -> Res_2 = string:substr(Res, 0 + 1, ((length(Res) - 1) - 0)),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            Last_2 = Last,
            Res_4 = Res_3;
        _ -> Last_2 = nil,
            Res_4 = Res
    end,
        case maps:is_key(Res_4, erlang:get('UNIT_SYMBOL')) of
        true -> throw({return, maps:get(Res_4, erlang:get('UNIT_SYMBOL'), nil)});
        _ -> ok
    end,
        Res_4
    catch {return, Ret} -> Ret end.

pow10(Exp) ->
    try
        case (Exp == 0) of
        true -> throw({return, 1});
        _ -> ok
    end,
        E = Exp,
        Res_5 = 1,
        case (E < 0) of
        true -> E_2 = -E,
            E_3 = E_2;
        _ -> E_3 = E
    end,
        I = 0,
        Fun = fun Fun_loop(E_3, Exp, I, Res_5) ->
    case (I < E_3) of
        true ->
            Res_6 = mochi_safe_mul(Res_5, 10),
            I_2 = (I + 1),
            Fun_loop(E_3, Exp, I_2, Res_6);
        _ -> {E_3, Exp, I, Res_5}
    end
end,
{E_3, Exp, I_2, Res_6} = Fun(E_3, Exp, I, Res_5),
        case (Exp < 0) of
        true -> throw({return, mochi_safe_div(1, Res_6)});
        _ -> ok
    end,
        Res_6
    catch {return, Ret} -> Ret end.

length_conversion(Value, From_type, To_type) ->
    try
        From_sanitized = sanitize(From_type),
        To_sanitized = sanitize(To_type),
        case mochi_not(maps:is_key(From_sanitized, erlang:get('METRIC_CONVERSION'))) of
        true -> erlang:error(((("Invalid 'from_type' value: '" ++ From_type) ++ "'.\nConversion abbreviations are: ") ++ "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym"));
        _ -> ok
    end,
        case mochi_not(maps:is_key(To_sanitized, erlang:get('METRIC_CONVERSION'))) of
        true -> erlang:error(((("Invalid 'to_type' value: '" ++ To_type) ++ "'.\nConversion abbreviations are: ") ++ "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym"));
        _ -> ok
    end,
        From_exp = maps:get(From_sanitized, erlang:get('METRIC_CONVERSION'), nil),
        To_exp = maps:get(To_sanitized, erlang:get('METRIC_CONVERSION'), nil),
        Exponent = 0,
        case (From_exp > To_exp) of
        true -> Exponent_2 = (From_exp - To_exp),
            Exponent_4 = Exponent_2;
        _ -> Exponent_3 = -(To_exp - From_exp),
            Exponent_4 = Exponent_3
    end,
        mochi_safe_mul(Value, pow10(Exponent_4))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('UNIT_SYMBOL', #{"meter" => "m", "kilometer" => "km", "megametre" => "Mm", "gigametre" => "Gm", "terametre" => "Tm", "petametre" => "Pm", "exametre" => "Em", "zettametre" => "Zm", "yottametre" => "Ym"}),
    erlang:put('METRIC_CONVERSION', #{"m" => 0, "km" => 3, "Mm" => 6, "Gm" => 9, "Tm" => 12, "Pm" => 15, "Em" => 18, "Zm" => 21, "Ym" => 24}),
    erlang:put('ABBREVIATIONS', "m, km, Mm, Gm, Tm, Pm, Em, Zm, Ym"),
    io:format("~ts~n", [mochi_str(length_conversion(1, "meter", "kilometer"))]),
    io:format("~ts~n", [mochi_str(length_conversion(1, "meter", "megametre"))]),
    io:format("~ts~n", [mochi_str(length_conversion(1, "gigametre", "meter"))]),
    io:format("~ts~n", [mochi_str(length_conversion(1, "terametre", "zettametre"))]),
    io:format("~ts~n", [mochi_str(length_conversion(1, "yottametre", "zettametre"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
