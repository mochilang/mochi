#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, excel_title_to_column/1, main/0]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.

excel_title_to_column(Title) ->
    try
        Result = 0,
        I = 0,
        Fun_2 = fun Fun_2_loop(I, Result, Title) ->
    case (I < length(Title)) of
        true ->
            try
                Ch = string:substr(Title, I + 1, ((I + 1) - I)),
                Value = 0,
                Idx = 0,
                Found = false,
                Fun = fun Fun_loop(Ch, Found, I, Idx, Result, Title, Value) ->
    case (Idx < length("ABCDEFGHIJKLMNOPQRSTUVWXYZ")) of
        true ->
            try
                case (string:substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ", Idx + 1, ((Idx + 1) - Idx)) == Ch) of
        true -> Value_2 = (Idx + 1),
            Found_2 = true,
            throw({break, Ch, Found_2, I, Idx, Result, Title, Value_2}),
            Found_3 = Found_2,
            Value_3 = Value_2;
        _ -> Found_3 = Found,
            Value_3 = Value
    end,
                Idx_2 = (Idx + 1),
                Fun_loop(Ch, Found_3, I, Idx_2, Result, Title, Value_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {Ch, Found, I, Idx, Result, Title, Value}
    end
end,
{Ch, Found_3, I, Idx_2, Result, Title, Value_3} = Fun(Ch, Found, I, Idx, Result, Title, Value),
                case mochi_not(Found_3) of
        true -> erlang:error("title must contain only uppercase A-Z");
        _ -> ok
    end,
                Result_2 = ((Result * 26) + Value_3),
                I_2 = (I + 1),
                Fun_2_loop(I_2, Result_2, Title)
            catch
                {continue, C0, C1, C2} -> Fun_2_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {I, Result, Title}
    end
end,
{I_2, Result_2, Title} = Fun_2(I, Result, Title),
        Result_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(excel_title_to_column("A"))]),
        io:format("~ts~n", [mochi_repr(excel_title_to_column("B"))]),
        io:format("~ts~n", [mochi_repr(excel_title_to_column("AB"))]),
        io:format("~ts~n", [mochi_repr(excel_title_to_column("Z"))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('letters', "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
