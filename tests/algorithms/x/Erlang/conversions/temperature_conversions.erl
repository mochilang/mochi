#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, floor/1, pow10/1, round_to/2, celsius_to_fahrenheit/2, celsius_to_kelvin/2, celsius_to_rankine/2, fahrenheit_to_celsius/2, fahrenheit_to_kelvin/2, fahrenheit_to_rankine/2, kelvin_to_celsius/2, kelvin_to_fahrenheit/2, kelvin_to_rankine/2, rankine_to_celsius/2, rankine_to_fahrenheit/2, rankine_to_kelvin/2, reaumur_to_kelvin/2, reaumur_to_fahrenheit/2, reaumur_to_celsius/2, reaumur_to_rankine/2]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

floor(X) ->
    try
        I = mochi_to_int(X),
        case (float(I) > X) of
        true -> I_2 = (I - 1),
            I_3 = I_2;
        _ -> I_3 = I
    end,
        float(I_3)
    catch {return, Ret} -> Ret end.

pow10(N) ->
    try
        P = 1,
        I_4 = 0,
        Fun = fun Fun_loop(I_4, N, P) ->
    case (I_4 < N) of
        true ->
            P_2 = mochi_safe_mul(P, 10),
            I_5 = (I_4 + 1),
            Fun_loop(I_5, N, P_2);
        _ -> {I_4, N, P}
    end
end,
{I_5, N, P_2} = Fun(I_4, N, P),
        P_2
    catch {return, Ret} -> Ret end.

round_to(X_2, Ndigits) ->
    try
        M = pow10(Ndigits),
        mochi_safe_div(floor((mochi_safe_mul(X_2, M) + 0.5)), M)
    catch {return, Ret} -> Ret end.

celsius_to_fahrenheit(C, Ndigits_2) ->
    try
        round_to((mochi_safe_div(mochi_safe_mul(C, 9), 5) + 32), Ndigits_2)
    catch {return, Ret} -> Ret end.

celsius_to_kelvin(C_2, Ndigits_3) ->
    try
        round_to((C_2 + 273.15), Ndigits_3)
    catch {return, Ret} -> Ret end.

celsius_to_rankine(C_3, Ndigits_4) ->
    try
        round_to((mochi_safe_div(mochi_safe_mul(C_3, 9), 5) + 491.67), Ndigits_4)
    catch {return, Ret} -> Ret end.

fahrenheit_to_celsius(F, Ndigits_5) ->
    try
        round_to(mochi_safe_div(mochi_safe_mul((F - 32), 5), 9), Ndigits_5)
    catch {return, Ret} -> Ret end.

fahrenheit_to_kelvin(F_2, Ndigits_6) ->
    try
        round_to((mochi_safe_div(mochi_safe_mul((F_2 - 32), 5), 9) + 273.15), Ndigits_6)
    catch {return, Ret} -> Ret end.

fahrenheit_to_rankine(F_3, Ndigits_7) ->
    try
        round_to((F_3 + 459.67), Ndigits_7)
    catch {return, Ret} -> Ret end.

kelvin_to_celsius(K, Ndigits_8) ->
    try
        round_to((K - 273.15), Ndigits_8)
    catch {return, Ret} -> Ret end.

kelvin_to_fahrenheit(K_2, Ndigits_9) ->
    try
        round_to((mochi_safe_div(mochi_safe_mul((K_2 - 273.15), 9), 5) + 32), Ndigits_9)
    catch {return, Ret} -> Ret end.

kelvin_to_rankine(K_3, Ndigits_10) ->
    try
        round_to(mochi_safe_div(mochi_safe_mul(K_3, 9), 5), Ndigits_10)
    catch {return, Ret} -> Ret end.

rankine_to_celsius(R, Ndigits_11) ->
    try
        round_to(mochi_safe_div(mochi_safe_mul((R - 491.67), 5), 9), Ndigits_11)
    catch {return, Ret} -> Ret end.

rankine_to_fahrenheit(R_2, Ndigits_12) ->
    try
        round_to((R_2 - 459.67), Ndigits_12)
    catch {return, Ret} -> Ret end.

rankine_to_kelvin(R_3, Ndigits_13) ->
    try
        round_to(mochi_safe_div(mochi_safe_mul(R_3, 5), 9), Ndigits_13)
    catch {return, Ret} -> Ret end.

reaumur_to_kelvin(R_4, Ndigits_14) ->
    try
        round_to((mochi_safe_mul(R_4, 1.25) + 273.15), Ndigits_14)
    catch {return, Ret} -> Ret end.

reaumur_to_fahrenheit(R_5, Ndigits_15) ->
    try
        round_to((mochi_safe_mul(R_5, 2.25) + 32), Ndigits_15)
    catch {return, Ret} -> Ret end.

reaumur_to_celsius(R_6, Ndigits_16) ->
    try
        round_to(mochi_safe_mul(R_6, 1.25), Ndigits_16)
    catch {return, Ret} -> Ret end.

reaumur_to_rankine(R_7, Ndigits_17) ->
    try
        round_to(((mochi_safe_mul(R_7, 2.25) + 32) + 459.67), Ndigits_17)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(celsius_to_fahrenheit(0, 2))]),
    io:format("~ts~n", [mochi_repr(celsius_to_kelvin(0, 2))]),
    io:format("~ts~n", [mochi_repr(celsius_to_rankine(0, 2))]),
    io:format("~ts~n", [mochi_repr(fahrenheit_to_celsius(32, 2))]),
    io:format("~ts~n", [mochi_repr(fahrenheit_to_kelvin(32, 2))]),
    io:format("~ts~n", [mochi_repr(fahrenheit_to_rankine(32, 2))]),
    io:format("~ts~n", [mochi_repr(kelvin_to_celsius(273.15, 2))]),
    io:format("~ts~n", [mochi_repr(kelvin_to_fahrenheit(273.15, 2))]),
    io:format("~ts~n", [mochi_repr(kelvin_to_rankine(273.15, 2))]),
    io:format("~ts~n", [mochi_repr(rankine_to_celsius(491.67, 2))]),
    io:format("~ts~n", [mochi_repr(rankine_to_fahrenheit(491.67, 2))]),
    io:format("~ts~n", [mochi_repr(rankine_to_kelvin(491.67, 2))]),
    io:format("~ts~n", [mochi_repr(reaumur_to_kelvin(80, 2))]),
    io:format("~ts~n", [mochi_repr(reaumur_to_fahrenheit(80, 2))]),
    io:format("~ts~n", [mochi_repr(reaumur_to_celsius(80, 2))]),
    io:format("~ts~n", [mochi_repr(reaumur_to_rankine(80, 2))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
