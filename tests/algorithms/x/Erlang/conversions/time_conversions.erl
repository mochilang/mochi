#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, contains/2, convert_time/3]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


mochi_member(Key, Coll) ->
    case erlang:is_map(Coll) of
        true -> maps:is_key(Key, Coll);
        _ -> case erlang:is_list(Coll) of
            true -> lists:member(Key, Coll);
            _ when is_binary(Coll) -> string:str(Coll, Key) /= 0;
            _ -> false
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

contains(Arr, T) ->
    try
        I = 0,
        Fun = fun Fun_loop(Arr, I, T) ->
    case (I < length(Arr)) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> lists:nth(I + 1, Arr) end) == T) of
        true -> throw({return, true});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Arr, I_2, T);
        _ -> {Arr, I, T}
    end
end,
{Arr, I_2, T} = Fun(Arr, I, T),
        false
    catch {return, Ret} -> Ret end.

convert_time(Time_value, Unit_from, Unit_to) ->
    try
        case (Time_value < 0) of
        true -> erlang:error("'time_value' must be a non-negative number.");
        _ -> ok
    end,
        From = string:to_lower(Unit_from),
        To = string:to_lower(Unit_to),
        case (mochi_not(mochi_member(From, erlang:get('units'))) orelse mochi_not(mochi_member(To, erlang:get('units')))) of
        true -> Invalid_unit = From,
            case mochi_member(From, erlang:get('units')) of
        true -> Invalid_unit_2 = To,
            Invalid_unit_3 = Invalid_unit_2;
        _ -> Invalid_unit_3 = Invalid_unit
    end,
            erlang:error((((("Invalid unit " ++ Invalid_unit_3) ++ " is not in ") ++ "seconds, minutes, hours, days, weeks, months, years") ++ ".")),
            Invalid_unit_4 = Invalid_unit_3;
        _ -> Invalid_unit_4 = nil
    end,
        Seconds = mochi_safe_mul(Time_value, maps:get(From, erlang:get('time_chart'), nil)),
        Converted = mochi_safe_mul(Seconds, maps:get(To, erlang:get('time_chart_inverse'), nil)),
        Scaled = mochi_safe_mul(Converted, 1000),
        Int_part = mochi_to_int((Scaled + 0.5)),
        mochi_safe_div((Int_part + 0), 1000)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('time_chart', #{"seconds" => 1, "minutes" => 60, "hours" => 3600, "days" => 86400, "weeks" => 604800, "months" => 2.6298e+06, "years" => 3.15576e+07}),
    erlang:put('time_chart_inverse', #{"seconds" => 1, "minutes" => mochi_safe_div(1, 60), "hours" => mochi_safe_div(1, 3600), "days" => mochi_safe_div(1, 86400), "weeks" => mochi_safe_div(1, 604800), "months" => mochi_safe_div(1, 2.6298e+06), "years" => mochi_safe_div(1, 3.15576e+07)}),
    erlang:put('units', ["seconds", "minutes", "hours", "days", "weeks", "months", "years"]),
    erlang:put('units_str', "seconds, minutes, hours, days, weeks, months, years"),
    io:format("~ts~n", [mochi_repr(convert_time(3600, "seconds", "hours"))]),
    io:format("~ts~n", [mochi_repr(convert_time(360, "days", "months"))]),
    io:format("~ts~n", [mochi_repr(convert_time(360, "months", "years"))]),
    io:format("~ts~n", [mochi_repr(convert_time(1, "years", "seconds"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
