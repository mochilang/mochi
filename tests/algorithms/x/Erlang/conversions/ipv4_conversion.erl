#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, split_by_dot/1, parse_decimal/1, to_hex2/1, ipv4_to_decimal/1, alt_ipv4_to_decimal/1, decimal_to_ipv4/1]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

split_by_dot(S) ->
    try
        Res = [],
        Current = "",
        I = 0,
        Fun = fun Fun_loop(Current, I, Res, S) ->
    case (I < length(S)) of
        true ->
            C = string:substr(S, I + 1, 1),
            case (C == ".") of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [Current]),
            Current_2 = "",
            Current_4 = Current_2,
            Res_3 = Res_2;
        _ -> Current_3 = (Current ++ C),
            Current_4 = Current_3,
            Res_3 = Res
    end,
            I_2 = (I + 1),
            Fun_loop(Current_4, I_2, Res_3, S);
        _ -> {Current, I, Res, S}
    end
end,
{Current_4, I_2, Res_3, S} = Fun(Current, I, Res, S),
        Res_4 = lists:append((case Res_3 of nil -> []; _ -> Res_3 end), [Current_4]),
        Res_4
    catch {return, Ret} -> Ret end.

parse_decimal(S_2) ->
    try
        case (length(S_2) == 0) of
        true -> erlang:error("Invalid IPv4 address format");
        _ -> ok
    end,
        Value = 0,
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, S_2, Value) ->
    case (I_3 < length(S_2)) of
        true ->
            C_2 = string:substr(S_2, I_3 + 1, 1),
            case ((C_2 < "0") orelse (C_2 > "9")) of
        true -> erlang:error("Invalid IPv4 address format");
        _ -> ok
    end,
            Value_2 = ((Value * 10) + mochi_to_int(C_2)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, S_2, Value_2);
        _ -> {I_3, S_2, Value}
    end
end,
{I_4, S_2, Value_2} = Fun_2(I_3, S_2, Value),
        Value_2
    catch {return, Ret} -> Ret end.

to_hex2(N) ->
    try
        X = N,
        Res_5 = "",
        Fun_3 = fun Fun_3_loop(N, Res_5, X) ->
    case (X > 0) of
        true ->
            D = mochi_mod(X, 16),
            Res_6 = (string:substr("0123456789abcdef", D + 1, 1) ++ Res_5),
            X_2 = (X div 16),
            Fun_3_loop(N, Res_6, X_2);
        _ -> {N, Res_5, X}
    end
end,
{N, Res_6, X_2} = Fun_3(N, Res_5, X),
        Fun_4 = fun Fun_4_loop(N, Res_6, X_2) ->
    case (length(Res_6) < 2) of
        true ->
            Res_7 = ("0" ++ Res_6),
            Fun_4_loop(N, Res_7, X_2);
        _ -> {N, Res_6, X_2}
    end
end,
{N, Res_7, X_2} = Fun_4(N, Res_6, X_2),
        Res_7
    catch {return, Ret} -> Ret end.

ipv4_to_decimal(Ipv4_address) ->
    try
        Parts = split_by_dot(Ipv4_address),
        case (length(Parts) /= 4) of
        true -> erlang:error("Invalid IPv4 address format");
        _ -> ok
    end,
        Result = 0,
        I_5 = 0,
        Fun_5 = fun Fun_5_loop(I_5, Ipv4_address, Parts, Result) ->
    case (I_5 < 4) of
        true ->
            Oct = parse_decimal((case erlang:is_map(Parts) of true -> maps:get(I_5, Parts, nil); _ -> lists:nth(I_5 + 1, Parts) end)),
            case ((Oct < 0) orelse (Oct > 255)) of
        true -> erlang:error(("Invalid IPv4 octet " ++ mochi_str(Oct)));
        _ -> ok
    end,
            Result_2 = ((Result * 256) + Oct),
            I_6 = (I_5 + 1),
            Fun_5_loop(I_6, Ipv4_address, Parts, Result_2);
        _ -> {I_5, Ipv4_address, Parts, Result}
    end
end,
{I_6, Ipv4_address, Parts, Result_2} = Fun_5(I_5, Ipv4_address, Parts, Result),
        Result_2
    catch {return, Ret} -> Ret end.

alt_ipv4_to_decimal(Ipv4_address_2) ->
    try
        Parts_2 = split_by_dot(Ipv4_address_2),
        case (length(Parts_2) /= 4) of
        true -> erlang:error("Invalid IPv4 address format");
        _ -> ok
    end,
        Hex_str = "",
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(Hex_str, I_7, Ipv4_address_2, Parts_2) ->
    case (I_7 < 4) of
        true ->
            Oct_2 = parse_decimal((case erlang:is_map(Parts_2) of true -> maps:get(I_7, Parts_2, nil); _ -> lists:nth(I_7 + 1, Parts_2) end)),
            case ((Oct_2 < 0) orelse (Oct_2 > 255)) of
        true -> erlang:error(("Invalid IPv4 octet " ++ mochi_str(Oct_2)));
        _ -> ok
    end,
            Hex_str_2 = (Hex_str ++ to_hex2(Oct_2)),
            I_8 = (I_7 + 1),
            Fun_6_loop(Hex_str_2, I_8, Ipv4_address_2, Parts_2);
        _ -> {Hex_str, I_7, Ipv4_address_2, Parts_2}
    end
end,
{Hex_str_2, I_8, Ipv4_address_2, Parts_2} = Fun_6(Hex_str, I_7, Ipv4_address_2, Parts_2),
        Value_3 = 0,
        K = 0,
        Fun_8 = fun Fun_8_loop(Hex_str_2, I_8, Ipv4_address_2, K, Parts_2, Value_3) ->
    case (K < length(Hex_str_2)) of
        true ->
            C_3 = string:substr(Hex_str_2, K + 1, 1),
            Digit = (0 - 1),
            J = 0,
            Fun_7 = fun Fun_7_loop(C_3, Digit, Hex_str_2, I_8, Ipv4_address_2, J, K, Parts_2, Value_3) ->
    case (J < length("0123456789abcdef")) of
        true ->
            case (string:substr("0123456789abcdef", J + 1, 1) == C_3) of
        true -> Digit_2 = J,
            Digit_3 = Digit_2;
        _ -> Digit_3 = Digit
    end,
            J_2 = (J + 1),
            Fun_7_loop(C_3, Digit_3, Hex_str_2, I_8, Ipv4_address_2, J_2, K, Parts_2, Value_3);
        _ -> {C_3, Digit, Hex_str_2, I_8, Ipv4_address_2, J, K, Parts_2, Value_3}
    end
end,
{C_3, Digit_3, Hex_str_2, I_8, Ipv4_address_2, J_2, K, Parts_2, Value_3} = Fun_7(C_3, Digit, Hex_str_2, I_8, Ipv4_address_2, J, K, Parts_2, Value_3),
            case (Digit_3 < 0) of
        true -> erlang:error("Invalid hex digit");
        _ -> ok
    end,
            Value_4 = ((Value_3 * 16) + Digit_3),
            K_2 = (K + 1),
            Fun_8_loop(Hex_str_2, I_8, Ipv4_address_2, K_2, Parts_2, Value_4);
        _ -> {Hex_str_2, I_8, Ipv4_address_2, K, Parts_2, Value_3}
    end
end,
{Hex_str_2, I_8, Ipv4_address_2, K_2, Parts_2, Value_4} = Fun_8(Hex_str_2, I_8, Ipv4_address_2, K, Parts_2, Value_3),
        Value_4
    catch {return, Ret} -> Ret end.

decimal_to_ipv4(Decimal_ipv4) ->
    try
        case ((Decimal_ipv4 < 0) orelse (Decimal_ipv4 > 4294967295)) of
        true -> erlang:error("Invalid decimal IPv4 address");
        _ -> ok
    end,
        N_2 = Decimal_ipv4,
        Parts_3 = [],
        I_9 = 0,
        Fun_9 = fun Fun_9_loop(Decimal_ipv4, I_9, N_2, Parts_3) ->
    case (I_9 < 4) of
        true ->
            Octet = mochi_mod(N_2, 256),
            Parts_4 = lists:append((case Parts_3 of nil -> []; _ -> Parts_3 end), [mochi_str(Octet)]),
            N_3 = (N_2 div 256),
            I_10 = (I_9 + 1),
            Fun_9_loop(Decimal_ipv4, I_10, N_3, Parts_4);
        _ -> {Decimal_ipv4, I_9, N_2, Parts_3}
    end
end,
{Decimal_ipv4, I_10, N_3, Parts_4} = Fun_9(Decimal_ipv4, I_9, N_2, Parts_3),
        Res_8 = "",
        J_3 = (length(Parts_4) - 1),
        Fun_10 = fun Fun_10_loop(Decimal_ipv4, I_10, J_3, N_3, Parts_4, Res_8) ->
    case (J_3 >= 0) of
        true ->
            Res_9 = (Res_8 ++ (case erlang:is_map(Parts_4) of true -> maps:get(J_3, Parts_4, nil); _ -> lists:nth(J_3 + 1, Parts_4) end)),
            case (J_3 > 0) of
        true -> Res_10 = (Res_9 ++ "."),
            Res_11 = Res_10;
        _ -> Res_11 = Res_9
    end,
            J_4 = (J_3 - 1),
            Fun_10_loop(Decimal_ipv4, I_10, J_4, N_3, Parts_4, Res_11);
        _ -> {Decimal_ipv4, I_10, J_3, N_3, Parts_4, Res_8}
    end
end,
{Decimal_ipv4, I_10, J_4, N_3, Parts_4, Res_11} = Fun_10(Decimal_ipv4, I_10, J_3, N_3, Parts_4, Res_8),
        Res_11
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('hex_digits', "0123456789abcdef"),
    io:format("~ts~n", [mochi_repr(ipv4_to_decimal("192.168.0.1"))]),
    io:format("~ts~n", [mochi_repr(ipv4_to_decimal("10.0.0.255"))]),
    io:format("~ts~n", [mochi_repr(alt_ipv4_to_decimal("192.168.0.1"))]),
    io:format("~ts~n", [mochi_repr(alt_ipv4_to_decimal("10.0.0.255"))]),
    io:format("~ts~n", [mochi_repr(decimal_to_ipv4(3232235521))]),
    io:format("~ts~n", [mochi_repr(decimal_to_ipv4(167772415))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
