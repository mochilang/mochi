#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, index_of/2, units_string/1, round3/1, convert_speed/3]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

index_of(Arr, Value) ->
    try
        I = 0,
        Fun = fun Fun_loop(Arr, I, Value) ->
    case (I < length(Arr)) of
        true ->
            case ((case erlang:is_map(Arr) of true -> maps:get(I, Arr, nil); _ -> lists:nth(I + 1, Arr) end) == Value) of
        true -> throw({return, I});
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_loop(Arr, I_2, Value);
        _ -> {Arr, I, Value}
    end
end,
{Arr, I_2, Value} = Fun(Arr, I, Value),
        -1
    catch {return, Ret} -> Ret end.

units_string(Arr_2) ->
    try
        S = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(Arr_2, I_3, S) ->
    case (I_3 < length(Arr_2)) of
        true ->
            case (I_3 > 0) of
        true -> S_2 = (S ++ ", "),
            S_3 = S_2;
        _ -> S_3 = S
    end,
            S_4 = (S_3 ++ (case erlang:is_map(Arr_2) of true -> maps:get(I_3, Arr_2, nil); _ -> lists:nth(I_3 + 1, Arr_2) end)),
            I_4 = (I_3 + 1),
            Fun_2_loop(Arr_2, I_4, S_4);
        _ -> {Arr_2, I_3, S}
    end
end,
{Arr_2, I_4, S_4} = Fun_2(Arr_2, I_3, S),
        S_4
    catch {return, Ret} -> Ret end.

round3(X) ->
    try
        Y = (mochi_safe_mul(X, 1000) + 0.5),
        Z = mochi_to_int(Y),
        Zf = float(Z),
        mochi_safe_div(Zf, 1000)
    catch {return, Ret} -> Ret end.

convert_speed(Speed, Unit_from, Unit_to) ->
    try
        From_index = index_of(erlang:get('units'), Unit_from),
        To_index = index_of(erlang:get('units'), Unit_to),
        case ((From_index < 0) orelse (To_index < 0)) of
        true -> Msg = ((((("Incorrect 'from_type' or 'to_type' value: " ++ Unit_from) ++ ", ") ++ Unit_to) ++ "\nValid values are: ") ++ units_string(erlang:get('units'))),
            erlang:error(Msg),
            Msg_2 = Msg;
        _ -> Msg_2 = nil
    end,
        Result = mochi_safe_mul(mochi_safe_mul(Speed, (case erlang:is_map(erlang:get('speed_chart')) of true -> maps:get(From_index, erlang:get('speed_chart'), nil); _ -> lists:nth(From_index + 1, erlang:get('speed_chart')) end)), (case erlang:is_map(erlang:get('speed_chart_inverse')) of true -> maps:get(To_index, erlang:get('speed_chart_inverse'), nil); _ -> lists:nth(To_index + 1, erlang:get('speed_chart_inverse')) end)),
        R = round3(Result),
        R
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('units', ["km/h", "m/s", "mph", "knot"]),
    erlang:put('speed_chart', [1, 3.6, 1.609344, 1.852]),
    erlang:put('speed_chart_inverse', [1, 0.277777778, 0.621371192, 0.539956803]),
    io:format("~ts~n", [mochi_str(convert_speed(100, "km/h", "m/s"))]),
    io:format("~ts~n", [mochi_str(convert_speed(100, "km/h", "mph"))]),
    io:format("~ts~n", [mochi_str(convert_speed(100, "km/h", "knot"))]),
    io:format("~ts~n", [mochi_str(convert_speed(100, "m/s", "km/h"))]),
    io:format("~ts~n", [mochi_str(convert_speed(100, "m/s", "mph"))]),
    io:format("~ts~n", [mochi_str(convert_speed(100, "m/s", "knot"))]),
    io:format("~ts~n", [mochi_str(convert_speed(100, "mph", "km/h"))]),
    io:format("~ts~n", [mochi_str(convert_speed(100, "mph", "m/s"))]),
    io:format("~ts~n", [mochi_str(convert_speed(100, "mph", "knot"))]),
    io:format("~ts~n", [mochi_str(convert_speed(100, "knot", "km/h"))]),
    io:format("~ts~n", [mochi_str(convert_speed(100, "knot", "m/s"))]),
    io:format("~ts~n", [mochi_str(convert_speed(100, "knot", "mph"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
