#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, decimal_to_any/2, main/0]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

decimal_to_any(Num, Base) ->
    try
        case (Num < 0) of
        true -> erlang:error("parameter must be positive int");
        _ -> ok
    end,
        case (Base < 2) of
        true -> erlang:error("base must be >= 2");
        _ -> ok
    end,
        case (Base > 36) of
        true -> erlang:error("base must be <= 36");
        _ -> ok
    end,
        case (Num == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        Symbols = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        N = Num,
        Result = "",
        Fun = fun Fun_loop(Base, N, Num, Result, Symbols) ->
    case (N > 0) of
        true ->
            Mod = mochi_mod(N, Base),
            Digit = string:substr(Symbols, Mod + 1, ((Mod + 1) - Mod)),
            Result_2 = (Digit ++ Result),
            N_2 = (N div Base),
            Fun_loop(Base, N_2, Num, Result_2, Symbols);
        _ -> {Base, N, Num, Result, Symbols}
    end
end,
{Base, N_2, Num, Result_2, Symbols} = Fun(Base, N, Num, Result, Symbols),
        Result_2
    catch {return, Ret} -> Ret end.

main() ->
    try
        io:format("~ts~n", [mochi_repr(decimal_to_any(0, 2))]),
        io:format("~ts~n", [mochi_repr(decimal_to_any(5, 4))]),
        io:format("~ts~n", [mochi_repr(decimal_to_any(20, 3))]),
        io:format("~ts~n", [mochi_repr(decimal_to_any(58, 16))]),
        io:format("~ts~n", [mochi_repr(decimal_to_any(243, 17))]),
        nil
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    main(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
