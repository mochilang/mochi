#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, octal_to_binary/1]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

octal_to_binary(Octal_number) ->
    try
        case (length(Octal_number) == 0) of
        true -> erlang:error("Empty string was passed to the function");
        _ -> ok
    end,
        Octal_digits = "01234567",
        Binary_number = "",
        I = 0,
        Fun_3 = fun Fun_3_loop(Binary_number, I, Octal_digits, Octal_number) ->
    case (I < length(Octal_number)) of
        true ->
            try
                Digit = string:substr(Octal_number, I + 1, 1),
                Valid = false,
                J = 0,
                Fun = fun Fun_loop(Binary_number, Digit, I, J, Octal_digits, Octal_number, Valid) ->
    case (J < length(Octal_digits)) of
        true ->
            try
                case (Digit == string:substr(Octal_digits, J + 1, 1)) of
        true -> Valid_2 = true,
            throw({break, Binary_number, Digit, I, J, Octal_digits, Octal_number, Valid_2}),
            Valid_3 = Valid_2;
        _ -> Valid_3 = Valid
    end,
                J_2 = (J + 1),
                Fun_loop(Binary_number, Digit, I, J_2, Octal_digits, Octal_number, Valid_3)
            catch
                {continue, C0, C1, C2, C3, C4, C5, C6} -> Fun_loop(C0, C1, C2, C3, C4, C5, C6);
                {break, B0, B1, B2, B3, B4, B5, B6} -> {B0, B1, B2, B3, B4, B5, B6}
            end;
        _ -> {Binary_number, Digit, I, J, Octal_digits, Octal_number, Valid}
    end
end,
{Binary_number, Digit, I, J_2, Octal_digits, Octal_number, Valid_3} = Fun(Binary_number, Digit, I, J, Octal_digits, Octal_number, Valid),
                case mochi_not(Valid_3) of
        true -> erlang:error("Non-octal value was passed to the function");
        _ -> ok
    end,
                Value = mochi_to_int(Digit),
                K = 0,
                Binary_digit = "",
                Fun_2 = fun Fun_2_loop(Binary_digit, Binary_number, Digit, I, J_2, K, Octal_digits, Octal_number, Valid_3, Value) ->
    case (K < 3) of
        true ->
            Binary_digit_2 = (mochi_str(mochi_mod(Value, 2)) ++ Binary_digit),
            Value_2 = (Value div 2),
            K_2 = (K + 1),
            Fun_2_loop(Binary_digit_2, Binary_number, Digit, I, J_2, K_2, Octal_digits, Octal_number, Valid_3, Value_2);
        _ -> {Binary_digit, Binary_number, Digit, I, J_2, K, Octal_digits, Octal_number, Valid_3, Value}
    end
end,
{Binary_digit_2, Binary_number, Digit, I, J_2, K_2, Octal_digits, Octal_number, Valid_3, Value_2} = Fun_2(Binary_digit, Binary_number, Digit, I, J_2, K, Octal_digits, Octal_number, Valid_3, Value),
                Binary_number_2 = (Binary_number ++ Binary_digit_2),
                I_2 = (I + 1),
                Fun_3_loop(Binary_number_2, I_2, Octal_digits, Octal_number)
            catch
                {continue, C0, C1, C2, C3} -> Fun_3_loop(C0, C1, C2, C3);
                {break, B0, B1, B2, B3} -> {B0, B1, B2, B3}
            end;
        _ -> {Binary_number, I, Octal_digits, Octal_number}
    end
end,
{Binary_number_2, I_2, Octal_digits, Octal_number} = Fun_3(Binary_number, I, Octal_digits, Octal_number),
        Binary_number_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(octal_to_binary("17"))]),
    io:format("~ts~n", [mochi_repr(octal_to_binary("7"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
