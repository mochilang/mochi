#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, supported_values/0, find_index/1, get_from_factor/1, get_to_factor/1, volume_conversion/3]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

supported_values() ->
    try
        Result = (case erlang:is_map(erlang:get('units')) of true -> maps:get(0, erlang:get('units'), nil); _ -> lists:nth(0 + 1, erlang:get('units')) end),
        I = 1,
        Fun = fun Fun_loop(I, Result) ->
    case (I < length(erlang:get('units'))) of
        true ->
            Result_2 = ((Result ++ ", ") ++ (case erlang:is_map(erlang:get('units')) of true -> maps:get(I, erlang:get('units'), nil); _ -> lists:nth(I + 1, erlang:get('units')) end)),
            I_2 = (I + 1),
            Fun_loop(I_2, Result_2);
        _ -> {I, Result}
    end
end,
{I_2, Result_2} = Fun(I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

find_index(Name) ->
    try
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Name) ->
    case (I_3 < length(erlang:get('units'))) of
        true ->
            case ((case erlang:is_map(erlang:get('units')) of true -> maps:get(I_3, erlang:get('units'), nil); _ -> lists:nth(I_3 + 1, erlang:get('units')) end) == Name) of
        true -> throw({return, I_3});
        _ -> ok
    end,
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Name);
        _ -> {I_3, Name}
    end
end,
{I_4, Name} = Fun_2(I_3, Name),
        -1
    catch {return, Ret} -> Ret end.

get_from_factor(Name_2) ->
    try
        Idx = find_index(Name_2),
        case (Idx < 0) of
        true -> erlang:error(((("Invalid 'from_type' value: '" ++ Name_2) ++ "' Supported values are: ") ++ supported_values()));
        _ -> ok
    end,
        (case erlang:is_map(erlang:get('from_factors')) of true -> maps:get(Idx, erlang:get('from_factors'), nil); _ -> lists:nth(Idx + 1, erlang:get('from_factors')) end)
    catch {return, Ret} -> Ret end.

get_to_factor(Name_3) ->
    try
        Idx_2 = find_index(Name_3),
        case (Idx_2 < 0) of
        true -> erlang:error(((("Invalid 'to_type' value: '" ++ Name_3) ++ "' Supported values are: ") ++ supported_values()));
        _ -> ok
    end,
        (case erlang:is_map(erlang:get('to_factors')) of true -> maps:get(Idx_2, erlang:get('to_factors'), nil); _ -> lists:nth(Idx_2 + 1, erlang:get('to_factors')) end)
    catch {return, Ret} -> Ret end.

volume_conversion(Value, From_type, To_type) ->
    try
        From_factor = get_from_factor(From_type),
        To_factor = get_to_factor(To_type),
        mochi_safe_mul(mochi_safe_mul(Value, From_factor), To_factor)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('units', ["cubic meter", "litre", "kilolitre", "gallon", "cubic yard", "cubic foot", "cup"]),
    erlang:put('from_factors', [1, 0.001, 1, 0.00454, 0.76455, 0.028, 0.000236588]),
    erlang:put('to_factors', [1, 1000, 1, 264.172, 1.30795, 35.3147, 4226.75]),
    io:format("~ts~n", [mochi_str(volume_conversion(4, "cubic meter", "litre"))]),
    io:format("~ts~n", [mochi_str(volume_conversion(1, "litre", "gallon"))]),
    io:format("~ts~n", [mochi_str(volume_conversion(1, "kilolitre", "cubic meter"))]),
    io:format("~ts~n", [mochi_str(volume_conversion(3, "gallon", "cubic yard"))]),
    io:format("~ts~n", [mochi_str(volume_conversion(2, "cubic yard", "litre"))]),
    io:format("~ts~n", [mochi_str(volume_conversion(4, "cubic foot", "cup"))]),
    io:format("~ts~n", [mochi_str(volume_conversion(1, "cup", "kilolitre"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
