#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, trim/1, bin_to_decimal/1]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

trim(S) ->
    try
        Start = 0,
        Fun = fun Fun_loop(S, Start) ->
    case (Start < length(S)) of
        true ->
            try
                Ch = string:substr(S, Start + 1, ((Start + 1) - Start)),
                case ((((Ch /= " ") andalso (Ch /= "\n")) andalso (Ch /= "\t")) andalso (Ch /= "\r")) of
        true -> throw({break, S, Start});
        _ -> ok
    end,
                Start_2 = (Start + 1),
                Fun_loop(S, Start_2)
            catch
                {continue, C0, C1} -> Fun_loop(C0, C1);
                {break, B0, B1} -> {B0, B1}
            end;
        _ -> {S, Start}
    end
end,
{S, Start_2} = Fun(S, Start),
        End = length(S),
        Fun_2 = fun Fun_2_loop(End, S, Start_2) ->
    case (End > Start_2) of
        true ->
            try
                Ch_2 = string:substr(S, (End - 1) + 1, (End - (End - 1))),
                case ((((Ch_2 /= " ") andalso (Ch_2 /= "\n")) andalso (Ch_2 /= "\t")) andalso (Ch_2 /= "\r")) of
        true -> throw({break, End, S, Start_2});
        _ -> ok
    end,
                End_2 = (End - 1),
                Fun_2_loop(End_2, S, Start_2)
            catch
                {continue, C0, C1, C2} -> Fun_2_loop(C0, C1, C2);
                {break, B0, B1, B2} -> {B0, B1, B2}
            end;
        _ -> {End, S, Start_2}
    end
end,
{End_2, S, Start_2} = Fun_2(End, S, Start_2),
        string:substr(S, Start_2 + 1, (End_2 - Start_2))
    catch {return, Ret} -> Ret end.

bin_to_decimal(Bin_string) ->
    try
        Trimmed = trim(Bin_string),
        case (Trimmed == "") of
        true -> erlang:error("Empty string was passed to the function");
        _ -> ok
    end,
        Is_negative = false,
        S_2 = Trimmed,
        case (string:substr(S_2, 0 + 1, (1 - 0)) == "-") of
        true -> Is_negative_2 = true,
            S_3 = string:substr(S_2, 1 + 1, (length(S_2) - 1)),
            Is_negative_3 = Is_negative_2,
            S_4 = S_3;
        _ -> Is_negative_3 = Is_negative,
            S_4 = S_2
    end,
        I = 0,
        Fun_3 = fun Fun_3_loop(Bin_string, I, Is_negative_3, S_4, Trimmed) ->
    case (I < length(S_4)) of
        true ->
            C = string:substr(S_4, I + 1, ((I + 1) - I)),
            case ((C /= "0") andalso (C /= "1")) of
        true -> erlang:error("Non-binary value was passed to the function");
        _ -> ok
    end,
            I_2 = (I + 1),
            Fun_3_loop(Bin_string, I_2, Is_negative_3, S_4, Trimmed);
        _ -> {Bin_string, I, Is_negative_3, S_4, Trimmed}
    end
end,
{Bin_string, I_2, Is_negative_3, S_4, Trimmed} = Fun_3(Bin_string, I, Is_negative_3, S_4, Trimmed),
        Decimal_number = 0,
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Bin_string, Decimal_number, I_3, Is_negative_3, S_4, Trimmed) ->
    case (I_3 < length(S_4)) of
        true ->
            C_2 = string:substr(S_4, I_3 + 1, ((I_3 + 1) - I_3)),
            Digit = mochi_to_int(C_2),
            Decimal_number_2 = ((2 * Decimal_number) + Digit),
            I_4 = (I_3 + 1),
            Fun_4_loop(Bin_string, Decimal_number_2, I_4, Is_negative_3, S_4, Trimmed);
        _ -> {Bin_string, Decimal_number, I_3, Is_negative_3, S_4, Trimmed}
    end
end,
{Bin_string, Decimal_number_2, I_4, Is_negative_3, S_4, Trimmed} = Fun_4(Bin_string, Decimal_number, I_3, Is_negative_3, S_4, Trimmed),
        case Is_negative_3 of
        true -> throw({return, -Decimal_number_2});
        _ -> ok
    end,
        Decimal_number_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(bin_to_decimal("101"))]),
    io:format("~ts~n", [mochi_str(bin_to_decimal(" 1010   "))]),
    io:format("~ts~n", [mochi_str(bin_to_decimal("-11101"))]),
    io:format("~ts~n", [mochi_str(bin_to_decimal("0"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
