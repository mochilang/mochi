#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, char_value/1, roman_to_int/1, int_to_roman/1]).

% Generated by Mochi transpiler v0.10.59 (52a2f6fb79) on 2025-08-07 00:21 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

char_value(C) ->
    try
        case (C == "I") of
        true -> throw({return, 1});
        _ -> ok
    end,
        case (C == "V") of
        true -> throw({return, 5});
        _ -> ok
    end,
        case (C == "X") of
        true -> throw({return, 10});
        _ -> ok
    end,
        case (C == "L") of
        true -> throw({return, 50});
        _ -> ok
    end,
        case (C == "C") of
        true -> throw({return, 100});
        _ -> ok
    end,
        case (C == "D") of
        true -> throw({return, 500});
        _ -> ok
    end,
        case (C == "M") of
        true -> throw({return, 1000});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

roman_to_int(Roman) ->
    try
        Total = 0,
        I = 0,
        Fun = fun Fun_loop(I, Roman, Total) ->
    case (I < length(Roman)) of
        true ->
            case (((I + 1) < length(Roman)) andalso (char_value(string:substr(Roman, I + 1, 1)) < char_value(string:substr(Roman, (I + 1) + 1, 1)))) of
        true -> Total_2 = ((Total + char_value(string:substr(Roman, (I + 1) + 1, 1))) - char_value(string:substr(Roman, I + 1, 1))),
            I_2 = (I + 2),
            I_4 = I_2,
            Total_4 = Total_2;
        _ -> Total_3 = (Total + char_value(string:substr(Roman, I + 1, 1))),
            I_3 = (I + 1),
            I_4 = I_3,
            Total_4 = Total_3
    end,
            Fun_loop(I_4, Roman, Total_4);
        _ -> {I, Roman, Total}
    end
end,
{I_4, Roman, Total_4} = Fun(I, Roman, Total),
        Total_4
    catch {return, Ret} -> Ret end.

int_to_roman(Number) ->
    try
        Num = Number,
        Res = "",
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, Num, Number, Res) ->
    case (I_5 < length(erlang:get('roman_values'))) of
        true ->
            try
                Value = (case erlang:is_map(erlang:get('roman_values')) of true -> maps:get(I_5, erlang:get('roman_values'), nil); _ -> lists:nth(I_5 + 1, erlang:get('roman_values')) end),
                Symbol = (case erlang:is_map(erlang:get('roman_symbols')) of true -> maps:get(I_5, erlang:get('roman_symbols'), nil); _ -> lists:nth(I_5 + 1, erlang:get('roman_symbols')) end),
                Factor = (Num div Value),
                Num_2 = mochi_mod(Num, Value),
                J = 0,
                Fun_2 = fun Fun_2_loop(Factor, I_5, J, Num_2, Number, Res, Symbol, Value) ->
    case (J < Factor) of
        true ->
            Res_2 = (Res ++ Symbol),
            J_2 = (J + 1),
            Fun_2_loop(Factor, I_5, J_2, Num_2, Number, Res_2, Symbol, Value);
        _ -> {Factor, I_5, J, Num_2, Number, Res, Symbol, Value}
    end
end,
{Factor, I_5, J_2, Num_2, Number, Res_2, Symbol, Value} = Fun_2(Factor, I_5, J, Num_2, Number, Res, Symbol, Value),
                case (Num_2 == 0) of
        true -> throw({break, I_5, Num_2, Number, Res_2});
        _ -> ok
    end,
                I_6 = (I_5 + 1),
                Fun_3_loop(I_6, Num_2, Number, Res_2)
            catch
                {continue, C0, C1, C2, C3} -> Fun_3_loop(C0, C1, C2, C3);
                {break, B0, B1, B2, B3} -> {B0, B1, B2, B3}
            end;
        _ -> {I_5, Num, Number, Res}
    end
end,
{I_6, Num_2, Number, Res_2} = Fun_3(I_5, Num, Number, Res),
        Res_2
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('roman_values', [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]),
    erlang:put('roman_symbols', ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
