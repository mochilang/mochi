#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, round_to_int/1, molarity_to_normality/3, moles_to_pressure/3, moles_to_volume/3, pressure_and_volume_to_temperature/3]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

round_to_int(X) ->
    try
        (case (X >= 0) of
    true -> mochi_to_int((X + 0.5));
    _ -> mochi_to_int((X - 0.5))
end)
    catch {return, Ret} -> Ret end.

molarity_to_normality(Nfactor, Moles, Volume) ->
    try
        round_to_int(mochi_safe_mul(mochi_safe_div(Moles, Volume), Nfactor))
    catch {return, Ret} -> Ret end.

moles_to_pressure(Volume_2, Moles_2, Temperature) ->
    try
        round_to_int(mochi_safe_div(mochi_safe_mul(mochi_safe_mul(Moles_2, 0.0821), Temperature), Volume_2))
    catch {return, Ret} -> Ret end.

moles_to_volume(Pressure, Moles_3, Temperature_2) ->
    try
        round_to_int(mochi_safe_div(mochi_safe_mul(mochi_safe_mul(Moles_3, 0.0821), Temperature_2), Pressure))
    catch {return, Ret} -> Ret end.

pressure_and_volume_to_temperature(Pressure_2, Moles_4, Volume_3) ->
    try
        round_to_int(mochi_safe_div(mochi_safe_mul(Pressure_2, Volume_3), mochi_safe_mul(0.0821, Moles_4)))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_str(molarity_to_normality(2, 3.1, 0.31))]),
    io:format("~ts~n", [mochi_str(molarity_to_normality(4, 11.4, 5.7))]),
    io:format("~ts~n", [mochi_str(moles_to_pressure(0.82, 3, 300))]),
    io:format("~ts~n", [mochi_str(moles_to_pressure(8.2, 5, 200))]),
    io:format("~ts~n", [mochi_str(moles_to_volume(0.82, 3, 300))]),
    io:format("~ts~n", [mochi_str(moles_to_volume(8.2, 5, 200))]),
    io:format("~ts~n", [mochi_str(pressure_and_volume_to_temperature(0.82, 1, 2))]),
    io:format("~ts~n", [mochi_str(pressure_and_volume_to_temperature(8.2, 5, 3))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
