#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, strip_spaces/1, repeat_char/2, slice/3, bits_to_int/1, bin_to_hexadecimal/1]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

strip_spaces(S) ->
    try
        Start = 0,
        End = (length(S) - 1),
        Fun = fun Fun_loop(End, S, Start) ->
    case ((Start < length(S)) andalso (string:substr(S, Start + 1, 1) == " ")) of
        true ->
            Start_2 = (Start + 1),
            Fun_loop(End, S, Start_2);
        _ -> {End, S, Start}
    end
end,
{End, S, Start_2} = Fun(End, S, Start),
        Fun_2 = fun Fun_2_loop(End, S, Start_2) ->
    case ((End >= Start_2) andalso (string:substr(S, End + 1, 1) == " ")) of
        true ->
            End_2 = (End - 1),
            Fun_2_loop(End_2, S, Start_2);
        _ -> {End, S, Start_2}
    end
end,
{End_2, S, Start_2} = Fun_2(End, S, Start_2),
        Res = "",
        I = Start_2,
        Fun_3 = fun Fun_3_loop(End_2, I, Res, S, Start_2) ->
    case (I =< End_2) of
        true ->
            Res_2 = (Res ++ string:substr(S, I + 1, 1)),
            I_2 = (I + 1),
            Fun_3_loop(End_2, I_2, Res_2, S, Start_2);
        _ -> {End_2, I, Res, S, Start_2}
    end
end,
{End_2, I_2, Res_2, S, Start_2} = Fun_3(End_2, I, Res, S, Start_2),
        Res_2
    catch {return, Ret} -> Ret end.

repeat_char(Ch, Count) ->
    try
        Res_3 = "",
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Ch, Count, I_3, Res_3) ->
    case (I_3 < Count) of
        true ->
            Res_4 = (Res_3 ++ Ch),
            I_4 = (I_3 + 1),
            Fun_4_loop(Ch, Count, I_4, Res_4);
        _ -> {Ch, Count, I_3, Res_3}
    end
end,
{Ch, Count, I_4, Res_4} = Fun_4(Ch, Count, I_3, Res_3),
        Res_4
    catch {return, Ret} -> Ret end.

slice(S_2, Start_3, End_3) ->
    try
        Res_5 = "",
        I_5 = Start_3,
        Fun_5 = fun Fun_5_loop(End_3, I_5, Res_5, S_2, Start_3) ->
    case (I_5 < End_3) of
        true ->
            Res_6 = (Res_5 ++ string:substr(S_2, I_5 + 1, 1)),
            I_6 = (I_5 + 1),
            Fun_5_loop(End_3, I_6, Res_6, S_2, Start_3);
        _ -> {End_3, I_5, Res_5, S_2, Start_3}
    end
end,
{End_3, I_6, Res_6, S_2, Start_3} = Fun_5(End_3, I_5, Res_5, S_2, Start_3),
        Res_6
    catch {return, Ret} -> Ret end.

bits_to_int(Bits) ->
    try
        Value = 0,
        I_7 = 0,
        Fun_6 = fun Fun_6_loop(Bits, I_7, Value) ->
    case (I_7 < length(Bits)) of
        true ->
            Value_2 = (Value * 2),
            case (string:substr(Bits, I_7 + 1, 1) == "1") of
        true -> Value_3 = (Value_2 + 1),
            Value_4 = Value_3;
        _ -> Value_4 = Value_2
    end,
            I_8 = (I_7 + 1),
            Fun_6_loop(Bits, I_8, Value_4);
        _ -> {Bits, I_7, Value}
    end
end,
{Bits, I_8, Value_4} = Fun_6(Bits, I_7, Value),
        Value_4
    catch {return, Ret} -> Ret end.

bin_to_hexadecimal(Binary_str) ->
    try
        S_3 = strip_spaces(Binary_str),
        case (length(S_3) == 0) of
        true -> erlang:error("Empty string was passed to the function");
        _ -> ok
    end,
        Is_negative = false,
        case (string:substr(S_3, 0 + 1, 1) == "-") of
        true -> Is_negative_2 = true,
            S_4 = slice(S_3, 1, length(S_3)),
            Is_negative_3 = Is_negative_2,
            S_5 = S_4;
        _ -> Is_negative_3 = Is_negative,
            S_5 = S_3
    end,
        I_9 = 0,
        Fun_7 = fun Fun_7_loop(Binary_str, I_9, Is_negative_3, S_5) ->
    case (I_9 < length(S_5)) of
        true ->
            C = string:substr(S_5, I_9 + 1, 1),
            case ((C /= "0") andalso (C /= "1")) of
        true -> erlang:error("Non-binary value was passed to the function");
        _ -> ok
    end,
            I_10 = (I_9 + 1),
            Fun_7_loop(Binary_str, I_10, Is_negative_3, S_5);
        _ -> {Binary_str, I_9, Is_negative_3, S_5}
    end
end,
{Binary_str, I_10, Is_negative_3, S_5} = Fun_7(Binary_str, I_9, Is_negative_3, S_5),
        Groups = ((length(S_5) div 4) + 1),
        Pad_len = ((Groups * 4) - length(S_5)),
        S_6 = (repeat_char("0", Pad_len) ++ S_5),
        Digits = "0123456789abcdef",
        Res_7 = "0x",
        J = 0,
        Fun_8 = fun Fun_8_loop(Binary_str, Digits, Groups, I_10, Is_negative_3, J, Pad_len, Res_7, S_6) ->
    case (J < length(S_6)) of
        true ->
            Chunk = slice(S_6, J, (J + 4)),
            Val = bits_to_int(Chunk),
            Res_8 = (Res_7 ++ string:substr(Digits, Val + 1, 1)),
            J_2 = (J + 4),
            Fun_8_loop(Binary_str, Digits, Groups, I_10, Is_negative_3, J_2, Pad_len, Res_8, S_6);
        _ -> {Binary_str, Digits, Groups, I_10, Is_negative_3, J, Pad_len, Res_7, S_6}
    end
end,
{Binary_str, Digits, Groups, I_10, Is_negative_3, J_2, Pad_len, Res_8, S_6} = Fun_8(Binary_str, Digits, Groups, I_10, Is_negative_3, J, Pad_len, Res_7, S_6),
        case Is_negative_3 of
        true -> throw({return, ("-" ++ Res_8)});
        _ -> ok
    end,
        Res_8
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(bin_to_hexadecimal("101011111"))]),
    io:format("~ts~n", [mochi_repr(bin_to_hexadecimal(" 1010   "))]),
    io:format("~ts~n", [mochi_repr(bin_to_hexadecimal("-11101"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
