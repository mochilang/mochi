#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, int_pow/2, decimal_to_octal/1]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

int_pow(Base, Exp) ->
    try
        Result = 1,
        I = 0,
        Fun = fun Fun_loop(Base, Exp, I, Result) ->
    case (I < Exp) of
        true ->
            Result_2 = (Result * Base),
            I_2 = (I + 1),
            Fun_loop(Base, Exp, I_2, Result_2);
        _ -> {Base, Exp, I, Result}
    end
end,
{Base, Exp, I_2, Result_2} = Fun(Base, Exp, I, Result),
        Result_2
    catch {return, Ret} -> Ret end.

decimal_to_octal(Num) ->
    try
        case (Num == 0) of
        true -> throw({return, "0o0"});
        _ -> ok
    end,
        Octal = 0,
        Counter = 0,
        Value = Num,
        Fun_2 = fun Fun_2_loop(Counter, Num, Octal, Value) ->
    case (Value > 0) of
        true ->
            Remainder = mochi_mod(Value, 8),
            Octal_2 = (Octal + (Remainder * int_pow(10, Counter))),
            Counter_2 = (Counter + 1),
            Value_2 = (Value div 8),
            Fun_2_loop(Counter_2, Num, Octal_2, Value_2);
        _ -> {Counter, Num, Octal, Value}
    end
end,
{Counter_2, Num, Octal_2, Value_2} = Fun_2(Counter, Num, Octal, Value),
        ("0o" ++ mochi_str(Octal_2))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(decimal_to_octal(2))]),
    io:format("~ts~n", [mochi_repr(decimal_to_octal(8))]),
    io:format("~ts~n", [mochi_repr(decimal_to_octal(65))]),
    io:format("~ts~n", [mochi_repr(decimal_to_octal(216))]),
    io:format("~ts~n", [mochi_repr(decimal_to_octal(512))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
