#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, octal_to_hex/1]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_to_int(V) ->
    case erlang:is_integer(V) of
        true -> V;
        _ -> case erlang:is_float(V) of
            true -> trunc(V);
            _ -> list_to_integer(V)
        end
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

octal_to_hex(Octal) ->
    try
        S = Octal,
        case (((length(S) >= 2) andalso (string:substr(S, 0 + 1, 1) == "0")) andalso (string:substr(S, 1 + 1, 1) == "o")) of
        true -> S_2 = string:substr(S, 2 + 1, (length(S) - 2)),
            S_3 = S_2;
        _ -> S_3 = S
    end,
        case (length(S_3) == 0) of
        true -> erlang:error("Empty string was passed to the function");
        _ -> ok
    end,
        J = 0,
        Fun = fun Fun_loop(J, Octal, S_3) ->
    case (J < length(S_3)) of
        true ->
            C = string:substr(S_3, J + 1, 1),
            case ((((((((C /= "0") andalso (C /= "1")) andalso (C /= "2")) andalso (C /= "3")) andalso (C /= "4")) andalso (C /= "5")) andalso (C /= "6")) andalso (C /= "7")) of
        true -> erlang:error("Not a Valid Octal Number");
        _ -> ok
    end,
            J_2 = (J + 1),
            Fun_loop(J_2, Octal, S_3);
        _ -> {J, Octal, S_3}
    end
end,
{J_2, Octal, S_3} = Fun(J, Octal, S_3),
        Decimal = 0,
        K = 0,
        Fun_2 = fun Fun_2_loop(Decimal, J_2, K, Octal, S_3) ->
    case (K < length(S_3)) of
        true ->
            D = mochi_to_int(string:substr(S_3, K + 1, 1)),
            Decimal_2 = ((Decimal * 8) + D),
            K_2 = (K + 1),
            Fun_2_loop(Decimal_2, J_2, K_2, Octal, S_3);
        _ -> {Decimal, J_2, K, Octal, S_3}
    end
end,
{Decimal_2, J_2, K_2, Octal, S_3} = Fun_2(Decimal, J_2, K, Octal, S_3),
        Hex_chars = "0123456789ABCDEF",
        case (Decimal_2 == 0) of
        true -> throw({return, "0x"});
        _ -> ok
    end,
        Hex = "",
        Fun_3 = fun Fun_3_loop(Decimal_2, Hex, Hex_chars, J_2, K_2, Octal, S_3) ->
    case (Decimal_2 > 0) of
        true ->
            Idx = mochi_mod(Decimal_2, 16),
            Hex_2 = (string:substr(Hex_chars, Idx + 1, 1) ++ Hex),
            Decimal_3 = (Decimal_2 div 16),
            Fun_3_loop(Decimal_3, Hex_2, Hex_chars, J_2, K_2, Octal, S_3);
        _ -> {Decimal_2, Hex, Hex_chars, J_2, K_2, Octal, S_3}
    end
end,
{Decimal_3, Hex_2, Hex_chars, J_2, K_2, Octal, S_3} = Fun_3(Decimal_2, Hex, Hex_chars, J_2, K_2, Octal, S_3),
        ("0x" ++ Hex_2)
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('nums', ["030", "100", "247", "235", "007"]),
    erlang:put('t', 0),
    Fun_4 = fun Fun_4_loop() ->
    case (erlang:get('t') < length(erlang:get('nums'))) of
        true ->
            Num = (case erlang:is_map(erlang:get('nums')) of true -> maps:get(erlang:get('t'), erlang:get('nums'), nil); _ -> lists:nth(erlang:get('t') + 1, erlang:get('nums')) end),
            io:format("~ts~n", [mochi_repr(octal_to_hex(Num))]),
            erlang:put('t', (erlang:get('t') + 1)),
            Fun_4_loop();
        _ -> {}
    end
end,
{} = Fun_4(),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
