#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, pow10/1, max_value/1, join_words/1, convert_small_number/1, convert_number/2]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

pow10(Exp) ->
    try
        Res = 1,
        I = 0,
        Fun = fun Fun_loop(Exp, I, Res) ->
    case (I < Exp) of
        true ->
            Res_2 = (Res * 10),
            I_2 = (I + 1),
            Fun_loop(Exp, I_2, Res_2);
        _ -> {Exp, I, Res}
    end
end,
{Exp, I_2, Res_2} = Fun(Exp, I, Res),
        Res_2
    catch {return, Ret} -> Ret end.

max_value(System) ->
    try
        case (System == "short") of
        true -> throw({return, (pow10(18) - 1)});
        _ -> ok
    end,
        case (System == "long") of
        true -> throw({return, (pow10(21) - 1)});
        _ -> ok
    end,
        case (System == "indian") of
        true -> throw({return, (pow10(19) - 1)});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

join_words(Words) ->
    try
        Res_3 = "",
        I_3 = 0,
        Fun_2 = fun Fun_2_loop(I_3, Res_3, Words) ->
    case (I_3 < length(Words)) of
        true ->
            case (I_3 > 0) of
        true -> Res_4 = (Res_3 ++ " "),
            Res_5 = Res_4;
        _ -> Res_5 = Res_3
    end,
            Res_6 = (Res_5 ++ (case erlang:is_map(Words) of true -> maps:get(I_3, Words, nil); _ -> lists:nth(I_3 + 1, Words) end)),
            I_4 = (I_3 + 1),
            Fun_2_loop(I_4, Res_6, Words);
        _ -> {I_3, Res_3, Words}
    end
end,
{I_4, Res_6, Words} = Fun_2(I_3, Res_3, Words),
        Res_6
    catch {return, Ret} -> Ret end.

convert_small_number(Num) ->
    try
        case (Num < 0) of
        true -> throw({return, ""});
        _ -> ok
    end,
        case (Num >= 100) of
        true -> throw({return, ""});
        _ -> ok
    end,
        Tens_digit = (Num div 10),
        Ones_digit = mochi_mod(Num, 10),
        case (Tens_digit == 0) of
        true -> throw({return, (case erlang:is_map(erlang:get('ones')) of true -> maps:get(Ones_digit, erlang:get('ones'), nil); _ -> lists:nth(Ones_digit + 1, erlang:get('ones')) end)});
        _ -> ok
    end,
        case (Tens_digit == 1) of
        true -> throw({return, (case erlang:is_map(erlang:get('teens')) of true -> maps:get(Ones_digit, erlang:get('teens'), nil); _ -> lists:nth(Ones_digit + 1, erlang:get('teens')) end)});
        _ -> ok
    end,
        Hyphen = (case (Ones_digit > 0) of
    true -> "-";
    _ -> ""
end),
        Tail = (case (Ones_digit > 0) of
    true -> (case erlang:is_map(erlang:get('ones')) of true -> maps:get(Ones_digit, erlang:get('ones'), nil); _ -> lists:nth(Ones_digit + 1, erlang:get('ones')) end);
    _ -> ""
end),
        (((case erlang:is_map(erlang:get('tens')) of true -> maps:get(Tens_digit, erlang:get('tens'), nil); _ -> lists:nth(Tens_digit + 1, erlang:get('tens')) end) ++ Hyphen) ++ Tail)
    catch {return, Ret} -> Ret end.

convert_number(Num_2, System_2) ->
    try
        Word_groups = [],
        N = Num_2,
        case (N < 0) of
        true -> Word_groups_2 = lists:append((case Word_groups of nil -> []; _ -> Word_groups end), ["negative"]),
            N_2 = -N,
            N_3 = N_2,
            Word_groups_3 = Word_groups_2;
        _ -> N_3 = N,
            Word_groups_3 = Word_groups
    end,
        case (N_3 > max_value(System_2)) of
        true -> throw({return, ""});
        _ -> ok
    end,
        Powers = [],
        Units = [],
        case (System_2 == "short") of
        true -> Powers_2 = erlang:get('short_powers'),
            Units_2 = erlang:get('short_units'),
            Powers_7 = Powers_2,
            Units_7 = Units_2;
        _ -> case (System_2 == "long") of
        true -> Powers_3 = erlang:get('long_powers'),
            Units_3 = erlang:get('long_units'),
            Powers_6 = Powers_3,
            Units_6 = Units_3;
        _ -> case (System_2 == "indian") of
        true -> Powers_4 = erlang:get('indian_powers'),
            Units_4 = erlang:get('indian_units'),
            Powers_5 = Powers_4,
            Units_5 = Units_4;
        _ -> throw({return, ""}),
            Powers_5 = Powers,
            Units_5 = Units
    end,
            Powers_6 = Powers_5,
            Units_6 = Units_5
    end,
            Powers_7 = Powers_6,
            Units_7 = Units_6
    end,
        I_5 = 0,
        Fun_3 = fun Fun_3_loop(I_5, N_3, Num_2, Powers_7, System_2, Units_7, Word_groups_3) ->
    case (I_5 < length(Powers_7)) of
        true ->
            Power = (case erlang:is_map(Powers_7) of true -> maps:get(I_5, Powers_7, nil); _ -> lists:nth(I_5 + 1, Powers_7) end),
            Unit = (case erlang:is_map(Units_7) of true -> maps:get(I_5, Units_7, nil); _ -> lists:nth(I_5 + 1, Units_7) end),
            Divisor = pow10(Power),
            Digit_group = (N_3 div Divisor),
            N_4 = mochi_mod(N_3, Divisor),
            case (Digit_group > 0) of
        true -> Word_group = (case (Digit_group >= 100) of
    true -> convert_number(Digit_group, System_2);
    _ -> convert_small_number(Digit_group)
end),
            Word_groups_4 = lists:append((case Word_groups_3 of nil -> []; _ -> Word_groups_3 end), [((Word_group ++ " ") ++ Unit)]),
            Word_group_2 = Word_group,
            Word_groups_5 = Word_groups_4;
        _ -> Word_group_2 = nil,
            Word_groups_5 = Word_groups_3
    end,
            I_6 = (I_5 + 1),
            Fun_3_loop(I_6, N_4, Num_2, Powers_7, System_2, Units_7, Word_groups_5);
        _ -> {I_5, N_3, Num_2, Powers_7, System_2, Units_7, Word_groups_3}
    end
end,
{I_6, N_4, Num_2, Powers_7, System_2, Units_7, Word_groups_5} = Fun_3(I_5, N_3, Num_2, Powers_7, System_2, Units_7, Word_groups_3),
        case ((N_4 > 0) orelse (length(Word_groups_5) == 0)) of
        true -> Word_groups_6 = lists:append((case Word_groups_5 of nil -> []; _ -> Word_groups_5 end), [convert_small_number(N_4)]),
            Word_groups_7 = Word_groups_6;
        _ -> Word_groups_7 = Word_groups_5
    end,
        Joined = join_words(Word_groups_7),
        Joined
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('ones', ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"]),
    erlang:put('teens', ["ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"]),
    erlang:put('tens', ["", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]),
    erlang:put('short_powers', [15, 12, 9, 6, 3, 2]),
    erlang:put('short_units', ["quadrillion", "trillion", "billion", "million", "thousand", "hundred"]),
    erlang:put('long_powers', [15, 9, 6, 3, 2]),
    erlang:put('long_units', ["billiard", "milliard", "million", "thousand", "hundred"]),
    erlang:put('indian_powers', [14, 12, 7, 5, 3, 2]),
    erlang:put('indian_units', ["crore crore", "lakh crore", "crore", "lakh", "thousand", "hundred"]),
    io:format("~ts~n", [mochi_repr(convert_number(123456789012345, "short"))]),
    io:format("~ts~n", [mochi_repr(convert_number(123456789012345, "long"))]),
    io:format("~ts~n", [mochi_repr(convert_number(123456789012345, "indian"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
