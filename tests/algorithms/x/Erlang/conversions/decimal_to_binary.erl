#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, decimal_to_binary_iterative/1, decimal_to_binary_recursive_helper/1, decimal_to_binary_recursive/1]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_mod(A, B) when B =/= 0 ->
    ((A rem B) + B) rem B;
mochi_mod(_, _) -> 0.

decimal_to_binary_iterative(Num) ->
    try
        case (Num == 0) of
        true -> throw({return, "0b0"});
        _ -> ok
    end,
        Negative = false,
        N = Num,
        case (N < 0) of
        true -> Negative_2 = true,
            N_2 = -N,
            N_3 = N_2,
            Negative_3 = Negative_2;
        _ -> N_3 = N,
            Negative_3 = Negative
    end,
        Result = "",
        Fun = fun Fun_loop(N_3, Negative_3, Num, Result) ->
    case (N_3 > 0) of
        true ->
            Result_2 = (mochi_str(mochi_mod(N_3, 2)) ++ Result),
            N_4 = (N_3 div 2),
            Fun_loop(N_4, Negative_3, Num, Result_2);
        _ -> {N_3, Negative_3, Num, Result}
    end
end,
{N_4, Negative_3, Num, Result_2} = Fun(N_3, Negative_3, Num, Result),
        case Negative_3 of
        true -> throw({return, ("-0b" ++ Result_2)});
        _ -> ok
    end,
        ("0b" ++ Result_2)
    catch {return, Ret} -> Ret end.

decimal_to_binary_recursive_helper(N_5) ->
    try
        case (N_5 == 0) of
        true -> throw({return, "0"});
        _ -> ok
    end,
        case (N_5 == 1) of
        true -> throw({return, "1"});
        _ -> ok
    end,
        Div = (N_5 div 2),
        Mod = mochi_mod(N_5, 2),
        (decimal_to_binary_recursive_helper(Div) ++ mochi_str(Mod))
    catch {return, Ret} -> Ret end.

decimal_to_binary_recursive(Num_2) ->
    try
        case (Num_2 == 0) of
        true -> throw({return, "0b0"});
        _ -> ok
    end,
        case (Num_2 < 0) of
        true -> throw({return, ("-0b" ++ decimal_to_binary_recursive_helper(-Num_2))});
        _ -> ok
    end,
        ("0b" ++ decimal_to_binary_recursive_helper(Num_2))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(decimal_to_binary_iterative(0))]),
    io:format("~ts~n", [mochi_repr(decimal_to_binary_iterative(2))]),
    io:format("~ts~n", [mochi_repr(decimal_to_binary_iterative(7))]),
    io:format("~ts~n", [mochi_repr(decimal_to_binary_iterative(35))]),
    io:format("~ts~n", [mochi_repr(decimal_to_binary_iterative(-2))]),
    io:format("~ts~n", [mochi_repr(decimal_to_binary_recursive(0))]),
    io:format("~ts~n", [mochi_repr(decimal_to_binary_recursive(40))]),
    io:format("~ts~n", [mochi_repr(decimal_to_binary_recursive(-40))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
