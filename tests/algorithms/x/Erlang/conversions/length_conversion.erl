#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, rstrip_s/1, normalize_alias/1, has_unit/1, from_factor/1, to_factor/1, length_conversion/3]).

% Generated by Mochi transpiler v0.10.59 (98c5e0dd92) on 2025-08-06 22:52 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).


mochi_not(X) ->
    case X of
        true -> false;
        false -> true;
        nil -> true;
        _ -> false
    end.


mochi_safe_mul(A, B) ->
    try A * B catch _:_ -> 1.0e308 end.

mochi_safe_div(A, B) ->
    try A / B catch _:_ -> 0.0 end.

rstrip_s(S) ->
    try
        (case ((length(S) > 0) andalso (string:substr(S, (length(S) - 1) + 1, 1) == "s")) of
    true -> string:substr(S, 0 + 1, ((length(S) - 1) - 0));
    _ -> S
end)
    catch {return, Ret} -> Ret end.

normalize_alias(U) ->
    try
        case (U == "millimeter") of
        true -> throw({return, "mm"});
        _ -> ok
    end,
        case (U == "centimeter") of
        true -> throw({return, "cm"});
        _ -> ok
    end,
        case (U == "meter") of
        true -> throw({return, "m"});
        _ -> ok
    end,
        case (U == "kilometer") of
        true -> throw({return, "km"});
        _ -> ok
    end,
        case (U == "inch") of
        true -> throw({return, "in"});
        _ -> ok
    end,
        case (U == "inche") of
        true -> throw({return, "in"});
        _ -> ok
    end,
        case (U == "feet") of
        true -> throw({return, "ft"});
        _ -> ok
    end,
        case (U == "foot") of
        true -> throw({return, "ft"});
        _ -> ok
    end,
        case (U == "yard") of
        true -> throw({return, "yd"});
        _ -> ok
    end,
        case (U == "mile") of
        true -> throw({return, "mi"});
        _ -> ok
    end,
        U
    catch {return, Ret} -> Ret end.

has_unit(U_2) ->
    try
        ((((((((U_2 == "mm") orelse (U_2 == "cm")) orelse (U_2 == "m")) orelse (U_2 == "km")) orelse (U_2 == "in")) orelse (U_2 == "ft")) orelse (U_2 == "yd")) orelse (U_2 == "mi"))
    catch {return, Ret} -> Ret end.

from_factor(U_3) ->
    try
        case (U_3 == "mm") of
        true -> throw({return, 0.001});
        _ -> ok
    end,
        case (U_3 == "cm") of
        true -> throw({return, 0.01});
        _ -> ok
    end,
        case (U_3 == "m") of
        true -> throw({return, 1});
        _ -> ok
    end,
        case (U_3 == "km") of
        true -> throw({return, 1000});
        _ -> ok
    end,
        case (U_3 == "in") of
        true -> throw({return, 0.0254});
        _ -> ok
    end,
        case (U_3 == "ft") of
        true -> throw({return, 0.3048});
        _ -> ok
    end,
        case (U_3 == "yd") of
        true -> throw({return, 0.9144});
        _ -> ok
    end,
        case (U_3 == "mi") of
        true -> throw({return, 1609.34});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

to_factor(U_4) ->
    try
        case (U_4 == "mm") of
        true -> throw({return, 1000});
        _ -> ok
    end,
        case (U_4 == "cm") of
        true -> throw({return, 100});
        _ -> ok
    end,
        case (U_4 == "m") of
        true -> throw({return, 1});
        _ -> ok
    end,
        case (U_4 == "km") of
        true -> throw({return, 0.001});
        _ -> ok
    end,
        case (U_4 == "in") of
        true -> throw({return, 39.3701});
        _ -> ok
    end,
        case (U_4 == "ft") of
        true -> throw({return, 3.28084});
        _ -> ok
    end,
        case (U_4 == "yd") of
        true -> throw({return, 1.09361});
        _ -> ok
    end,
        case (U_4 == "mi") of
        true -> throw({return, 0.000621371});
        _ -> ok
    end,
        0
    catch {return, Ret} -> Ret end.

length_conversion(Value, From_type, To_type) ->
    try
        New_from = normalize_alias(rstrip_s(string:to_lower(From_type))),
        New_to = normalize_alias(rstrip_s(string:to_lower(To_type))),
        case mochi_not(has_unit(New_from)) of
        true -> erlang:error((("Invalid 'from_type' value: '" ++ From_type) ++ "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"));
        _ -> ok
    end,
        case mochi_not(has_unit(New_to)) of
        true -> erlang:error((("Invalid 'to_type' value: '" ++ To_type) ++ "'.\nConversion abbreviations are: mm, cm, m, km, in, ft, yd, mi"));
        _ -> ok
    end,
        mochi_safe_mul(mochi_safe_mul(Value, from_factor(New_from)), to_factor(New_to))
    catch {return, Ret} -> Ret end.

main(_) ->
    __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    io:format("~ts~n", [mochi_repr(length_conversion(4, "METER", "FEET"))]),
    io:format("~ts~n", [mochi_repr(length_conversion(1, "kilometer", "inch"))]),
    io:format("~ts~n", [mochi_repr(length_conversion(2, "feet", "meter"))]),
    io:format("~ts~n", [mochi_repr(length_conversion(2, "centimeter", "millimeter"))]),
    io:format("~ts~n", [mochi_repr(length_conversion(4, "yard", "kilometer"))]),
    io:format("~ts~n", [mochi_repr(length_conversion(3, "foot", "inch"))]),
    io:format("~ts~n", [mochi_repr(length_conversion(3, "mm", "in"))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes]).
