#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars]).
-export([main/1, breadth_first_search/4, ford_fulkerson/3]).

% Generated by Mochi transpiler v0.10.61 (c45765bf43) on 2025-08-08 15:36 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false -> erlang:system_time(nanosecond);
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, mochi_str/1}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, mochi_repr/1}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

breadth_first_search(Graph, Source, Sink, Parent) ->
    try
        Visited = [],
        I = 0,
        Fun = fun Fun_loop(Graph, I, Parent, Sink, Source, Visited) ->
    case (I < erlang:length(Graph)) of
        true ->
            Visited_2 = lists:append((case Visited of nil -> []; _ -> Visited end), [false]),
            I_2 = (I + 1),
            Fun_loop(Graph, I_2, Parent, Sink, Source, Visited_2);
        _ -> {Graph, I, Parent, Sink, Source, Visited}
    end
end,
{Graph, I_2, Parent, Sink, Source, Visited_2} = Fun(Graph, I, Parent, Sink, Source, Visited),
        Queue = [],
        Queue_2 = lists:append((case Queue of nil -> []; _ -> Queue end), [Source]),
        Visited_3 = lists:sublist(Visited_2, Source) ++ [true] ++ lists:nthtail(Source + 1, Visited_2),
        Head = 0,
        Fun_3 = fun Fun_3_loop(Graph, Head, I_2, Parent, Queue_2, Sink, Source, Visited_3) ->
    case (Head < erlang:length(Queue_2)) of
        true ->
            U = (case erlang:is_map(Queue_2) of true -> maps:get(Head, Queue_2, nil); _ -> case Head < 0 of true -> mochi_nth(erlang:length(Queue_2) + Head + 1, Queue_2); _ -> mochi_nth(Head + 1, Queue_2) end end),
            Head_2 = (Head + 1),
            Row = (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end),
            Ind = 0,
            Fun_2 = fun Fun_2_loop(Graph, Head_2, I_2, Ind, Parent, Queue_2, Row, Sink, Source, U, Visited_3) ->
    case (Ind < erlang:length(Row)) of
        true ->
            Capacity = (case erlang:is_map(Row) of true -> maps:get(Ind, Row, nil); _ -> case Ind < 0 of true -> mochi_nth(erlang:length(Row) + Ind + 1, Row); _ -> mochi_nth(Ind + 1, Row) end end),
            case (((case erlang:is_map(Visited_3) of true -> maps:get(Ind, Visited_3, nil); _ -> case Ind < 0 of true -> mochi_nth(erlang:length(Visited_3) + Ind + 1, Visited_3); _ -> mochi_nth(Ind + 1, Visited_3) end end) == false) andalso (Capacity > 0)) of
        true -> Queue_3 = lists:append((case Queue_2 of nil -> []; _ -> Queue_2 end), [Ind]),
            Visited_4 = lists:sublist(Visited_3, Ind) ++ [true] ++ lists:nthtail(Ind + 1, Visited_3),
            Parent_2 = lists:sublist(Parent, Ind) ++ [U] ++ lists:nthtail(Ind + 1, Parent),
            Parent_3 = Parent_2,
            Queue_4 = Queue_3,
            Visited_5 = Visited_4;
        _ -> Parent_3 = Parent,
            Queue_4 = Queue_2,
            Visited_5 = Visited_3
    end,
            Ind_2 = (Ind + 1),
            Fun_2_loop(Graph, Head_2, I_2, Ind_2, Parent_3, Queue_4, Row, Sink, Source, U, Visited_5);
        _ -> {Graph, Head_2, I_2, Ind, Parent, Queue_2, Row, Sink, Source, U, Visited_3}
    end
end,
{Graph, Head_2, I_2, Ind_2, Parent_3, Queue_4, Row, Sink, Source, U, Visited_5} = Fun_2(Graph, Head_2, I_2, Ind, Parent, Queue_2, Row, Sink, Source, U, Visited_3),
            Fun_3_loop(Graph, Head_2, I_2, Parent_3, Queue_4, Sink, Source, Visited_5);
        _ -> {Graph, Head, I_2, Parent, Queue_2, Sink, Source, Visited_3}
    end
end,
{Graph, Head_2, I_2, Parent_3, Queue_4, Sink, Source, Visited_5} = Fun_3(Graph, Head, I_2, Parent, Queue_2, Sink, Source, Visited_3),
        (case erlang:is_map(Visited_5) of true -> maps:get(Sink, Visited_5, nil); _ -> case Sink < 0 of true -> mochi_nth(erlang:length(Visited_5) + Sink + 1, Visited_5); _ -> mochi_nth(Sink + 1, Visited_5) end end)
    catch {return, Ret} -> Ret end.

ford_fulkerson(Graph_2, Source_2, Sink_2) ->
    try
        Parent_4 = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(Graph_2, I_3, Parent_4, Sink_2, Source_2) ->
    case (I_3 < erlang:length(Graph_2)) of
        true ->
            Parent_5 = lists:append((case Parent_4 of nil -> []; _ -> Parent_4 end), [-1]),
            I_4 = (I_3 + 1),
            Fun_4_loop(Graph_2, I_4, Parent_5, Sink_2, Source_2);
        _ -> {Graph_2, I_3, Parent_4, Sink_2, Source_2}
    end
end,
{Graph_2, I_4, Parent_5, Sink_2, Source_2} = Fun_4(Graph_2, I_3, Parent_4, Sink_2, Source_2),
        Max_flow = 0,
        Fun_8 = fun Fun_8_loop(Graph_2, I_4, Max_flow, Parent_5, Sink_2, Source_2) ->
    case breadth_first_search(Graph_2, Source_2, Sink_2, Parent_5) of
        true ->
            Path_flow = 1000000000,
            S = Sink_2,
            Fun_5 = fun Fun_5_loop(Graph_2, I_4, Max_flow, Parent_5, Path_flow, S, Sink_2, Source_2) ->
    case (S /= Source_2) of
        true ->
            Prev = (case erlang:is_map(Parent_5) of true -> maps:get(S, Parent_5, nil); _ -> case S < 0 of true -> mochi_nth(erlang:length(Parent_5) + S + 1, Parent_5); _ -> mochi_nth(S + 1, Parent_5) end end),
            Cap = (case erlang:is_map((case erlang:is_map(Graph_2) of true -> maps:get(Prev, Graph_2, nil); _ -> case Prev < 0 of true -> mochi_nth(erlang:length(Graph_2) + Prev + 1, Graph_2); _ -> mochi_nth(Prev + 1, Graph_2) end end)) of true -> maps:get(S, (case erlang:is_map(Graph_2) of true -> maps:get(Prev, Graph_2, nil); _ -> case Prev < 0 of true -> mochi_nth(erlang:length(Graph_2) + Prev + 1, Graph_2); _ -> mochi_nth(Prev + 1, Graph_2) end end), nil); _ -> case S < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Graph_2) of true -> maps:get(Prev, Graph_2, nil); _ -> case Prev < 0 of true -> mochi_nth(erlang:length(Graph_2) + Prev + 1, Graph_2); _ -> mochi_nth(Prev + 1, Graph_2) end end)) + S + 1, (case erlang:is_map(Graph_2) of true -> maps:get(Prev, Graph_2, nil); _ -> case Prev < 0 of true -> mochi_nth(erlang:length(Graph_2) + Prev + 1, Graph_2); _ -> mochi_nth(Prev + 1, Graph_2) end end)); _ -> mochi_nth(S + 1, (case erlang:is_map(Graph_2) of true -> maps:get(Prev, Graph_2, nil); _ -> case Prev < 0 of true -> mochi_nth(erlang:length(Graph_2) + Prev + 1, Graph_2); _ -> mochi_nth(Prev + 1, Graph_2) end end)) end end),
            case (Cap < Path_flow) of
        true -> Path_flow_2 = Cap,
            Path_flow_3 = Path_flow_2;
        _ -> Path_flow_3 = Path_flow
    end,
            S_2 = Prev,
            Fun_5_loop(Graph_2, I_4, Max_flow, Parent_5, Path_flow_3, S_2, Sink_2, Source_2);
        _ -> {Graph_2, I_4, Max_flow, Parent_5, Path_flow, S, Sink_2, Source_2}
    end
end,
{Graph_2, I_4, Max_flow, Parent_5, Path_flow_3, S_2, Sink_2, Source_2} = Fun_5(Graph_2, I_4, Max_flow, Parent_5, Path_flow, S, Sink_2, Source_2),
            Max_flow_2 = (Max_flow + Path_flow_3),
            V = Sink_2,
            Fun_6 = fun Fun_6_loop(Graph_2, I_4, Max_flow_2, Parent_5, Path_flow_3, S_2, Sink_2, Source_2, V) ->
    case (V /= Source_2) of
        true ->
            U_2 = (case erlang:is_map(Parent_5) of true -> maps:get(V, Parent_5, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Parent_5) + V + 1, Parent_5); _ -> mochi_nth(V + 1, Parent_5) end end),
            Graph_3 = lists:sublist(Graph_2, U_2) ++ [lists:sublist(lists:nth(U_2 + 1, Graph_2), V) ++ [((case erlang:is_map((case erlang:is_map(Graph_2) of true -> maps:get(U_2, Graph_2, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(Graph_2) + U_2 + 1, Graph_2); _ -> mochi_nth(U_2 + 1, Graph_2) end end)) of true -> maps:get(V, (case erlang:is_map(Graph_2) of true -> maps:get(U_2, Graph_2, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(Graph_2) + U_2 + 1, Graph_2); _ -> mochi_nth(U_2 + 1, Graph_2) end end), nil); _ -> case V < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Graph_2) of true -> maps:get(U_2, Graph_2, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(Graph_2) + U_2 + 1, Graph_2); _ -> mochi_nth(U_2 + 1, Graph_2) end end)) + V + 1, (case erlang:is_map(Graph_2) of true -> maps:get(U_2, Graph_2, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(Graph_2) + U_2 + 1, Graph_2); _ -> mochi_nth(U_2 + 1, Graph_2) end end)); _ -> mochi_nth(V + 1, (case erlang:is_map(Graph_2) of true -> maps:get(U_2, Graph_2, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(Graph_2) + U_2 + 1, Graph_2); _ -> mochi_nth(U_2 + 1, Graph_2) end end)) end end) - Path_flow_3)] ++ lists:nthtail(V + 1, lists:nth(U_2 + 1, Graph_2))] ++ lists:nthtail(U_2 + 1, Graph_2),
            Graph_4 = lists:sublist(Graph_3, V) ++ [lists:sublist(lists:nth(V + 1, Graph_3), U_2) ++ [((case erlang:is_map((case erlang:is_map(Graph_3) of true -> maps:get(V, Graph_3, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Graph_3) + V + 1, Graph_3); _ -> mochi_nth(V + 1, Graph_3) end end)) of true -> maps:get(U_2, (case erlang:is_map(Graph_3) of true -> maps:get(V, Graph_3, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Graph_3) + V + 1, Graph_3); _ -> mochi_nth(V + 1, Graph_3) end end), nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Graph_3) of true -> maps:get(V, Graph_3, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Graph_3) + V + 1, Graph_3); _ -> mochi_nth(V + 1, Graph_3) end end)) + U_2 + 1, (case erlang:is_map(Graph_3) of true -> maps:get(V, Graph_3, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Graph_3) + V + 1, Graph_3); _ -> mochi_nth(V + 1, Graph_3) end end)); _ -> mochi_nth(U_2 + 1, (case erlang:is_map(Graph_3) of true -> maps:get(V, Graph_3, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Graph_3) + V + 1, Graph_3); _ -> mochi_nth(V + 1, Graph_3) end end)) end end) + Path_flow_3)] ++ lists:nthtail(U_2 + 1, lists:nth(V + 1, Graph_3))] ++ lists:nthtail(V + 1, Graph_3),
            V_2 = U_2,
            Fun_6_loop(Graph_4, I_4, Max_flow_2, Parent_5, Path_flow_3, S_2, Sink_2, Source_2, V_2);
        _ -> {Graph_2, I_4, Max_flow_2, Parent_5, Path_flow_3, S_2, Sink_2, Source_2, V}
    end
end,
{Graph_4, I_4, Max_flow_2, Parent_5, Path_flow_3, S_2, Sink_2, Source_2, V_2} = Fun_6(Graph_2, I_4, Max_flow_2, Parent_5, Path_flow_3, S_2, Sink_2, Source_2, V),
            J = 0,
            Fun_7 = fun Fun_7_loop(Graph_4, I_4, J, Max_flow_2, Parent_5, Path_flow_3, S_2, Sink_2, Source_2, V_2) ->
    case (J < erlang:length(Parent_5)) of
        true ->
            Parent_6 = lists:sublist(Parent_5, J) ++ [-1] ++ lists:nthtail(J + 1, Parent_5),
            J_2 = (J + 1),
            Fun_7_loop(Graph_4, I_4, J_2, Max_flow_2, Parent_6, Path_flow_3, S_2, Sink_2, Source_2, V_2);
        _ -> {Graph_4, I_4, J, Max_flow_2, Parent_5, Path_flow_3, S_2, Sink_2, Source_2, V_2}
    end
end,
{Graph_4, I_4, J_2, Max_flow_2, Parent_6, Path_flow_3, S_2, Sink_2, Source_2, V_2} = Fun_7(Graph_4, I_4, J, Max_flow_2, Parent_5, Path_flow_3, S_2, Sink_2, Source_2, V_2),
            Fun_8_loop(Graph_4, I_4, Max_flow_2, Parent_6, Sink_2, Source_2);
        _ -> {Graph_2, I_4, Max_flow, Parent_5, Sink_2, Source_2}
    end
end,
{Graph_4, I_4, Max_flow_2, Parent_6, Sink_2, Source_2} = Fun_8(Graph_2, I_4, Max_flow, Parent_5, Sink_2, Source_2),
        Max_flow_2
    catch {return, Ret} -> Ret end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('INF', 1000000000),
    erlang:put('graph', [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]]),
    io:format("~ts~n", [mochi_str(ford_fulkerson(erlang:get('graph'), 0, 5))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
