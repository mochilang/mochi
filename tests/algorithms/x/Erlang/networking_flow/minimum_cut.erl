#!/usr/bin/env escript
-module(main).
-compile([nowarn_shadow_vars, nowarn_unused_vars, nowarn_export_vars, nowarn_export_all, nowarn_unused_expr, nowarn_unused_function]).
-export([main/1, bfs/4, mincut/3]).

% Generated by Mochi transpiler v0.10.64 (1dced96c32) on 2025-08-12 13:41 +0700


mochi_now() ->
    case erlang:get(now_seed) of
        undefined ->
            case os:getenv("MOCHI_NOW_SEED") of
                false ->
                    case os:getenv("MOCHI_BENCHMARK") of
                        false -> erlang:system_time(nanosecond);
                        _ ->
                            erlang:put(now_seed, 1),
                            mochi_now()
                    end;
                S ->
                    case catch list_to_integer(S) of
                        {'EXIT', _} -> erlang:system_time(nanosecond);
                        Seed ->
                            erlang:put(now_seed, Seed),
                            mochi_now()
                    end
            end;
        Seed ->
            Seed2 = (Seed * 1664525 + 1013904223) rem 2147483647,
            erlang:put(now_seed, Seed2),
            Seed2
    end.


to_float(V) ->
    case erlang:is_float(V) of
        true -> V;
        _ -> float(V)
    end.


-compile({nowarn_unused_function, [mochi_nth/2]}).
-spec mochi_nth(integer(), list()) -> any().
mochi_nth(I, L) ->
    try lists:nth(I, L) catch _:_ -> nil end.


-compile({nowarn_unused_function, [mochi_str/1]}).
mochi_str(V) when is_float(V) ->
    S0 = erlang:float_to_list(V, [short]),
    S1 = re:replace(S0, "\.?0+$", "", [{return, list}]),
    case S1 of
        "" -> "0";
        _ -> S1
    end;
mochi_str(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    S1 = lists:flatten(string:replace(S, ",", " ", all)),
    lists:flatten(string:replace(S1, "\"", "", all)).


-compile({nowarn_unused_function, [mochi_repr/1]}).
mochi_repr(V) ->
    S = lists:flatten(io_lib:format("~p", [V])),
    lists:flatten(string:replace(S, ",", ", ", all)).

bfs(Graph, S, T, Parent) ->
    try
        Visited = [],
        I = 0,
        Fun = fun Fun_loop(Graph, I, Parent, S, T, Visited) ->
    case (I < erlang:length(Graph)) of
        true ->
            Visited_2 = lists:append((case Visited of nil -> []; _ -> Visited end), [false]),
            I_2 = (I + 1),
            Fun_loop(Graph, I_2, Parent, S, T, Visited_2);
        _ -> {Graph, I, Parent, S, T, Visited}
    end
end,
{Graph, I_2, Parent, S, T, Visited_2} = Fun(Graph, I, Parent, S, T, Visited),
        Queue = [S],
        Head = 0,
        Visited_3 = lists:sublist(Visited_2, S) ++ [true] ++ lists:nthtail(S + 1, Visited_2),
        Fun_3 = fun Fun_3_loop(Graph, Head, I_2, Parent, Queue, S, T, Visited_3) ->
    case (Head < erlang:length(Queue)) of
        true ->
            U = (case erlang:is_map(Queue) of true -> maps:get(Head, Queue, nil); _ -> case Head < 0 of true -> mochi_nth(erlang:length(Queue) + Head + 1, Queue); _ -> mochi_nth(Head + 1, Queue) end end),
            Head_2 = (Head + 1),
            Ind = 0,
            Fun_2 = fun Fun_2_loop(Graph, Head_2, I_2, Ind, Parent, Queue, S, T, U, Visited_3) ->
    case (Ind < erlang:length((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end))) of
        true ->
            case (((case erlang:is_map(Visited_3) of true -> maps:get(Ind, Visited_3, nil); _ -> case Ind < 0 of true -> mochi_nth(erlang:length(Visited_3) + Ind + 1, Visited_3); _ -> mochi_nth(Ind + 1, Visited_3) end end) == false) andalso ((case erlang:is_map((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) of true -> maps:get(Ind, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end), nil); _ -> case Ind < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) + Ind + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)); _ -> mochi_nth(Ind + 1, (case erlang:is_map(Graph) of true -> maps:get(U, Graph, nil); _ -> case U < 0 of true -> mochi_nth(erlang:length(Graph) + U + 1, Graph); _ -> mochi_nth(U + 1, Graph) end end)) end end) > 0)) of
        true -> Queue_2 = lists:append((case Queue of nil -> []; _ -> Queue end), [Ind]),
            Visited_4 = lists:sublist(Visited_3, Ind) ++ [true] ++ lists:nthtail(Ind + 1, Visited_3),
            Parent_2 = lists:sublist(Parent, Ind) ++ [U] ++ lists:nthtail(Ind + 1, Parent),
            Parent_3 = Parent_2,
            Queue_3 = Queue_2,
            Visited_5 = Visited_4;
        _ -> Parent_3 = Parent,
            Queue_3 = Queue,
            Visited_5 = Visited_3
    end,
            Ind_2 = (Ind + 1),
            Fun_2_loop(Graph, Head_2, I_2, Ind_2, Parent_3, Queue_3, S, T, U, Visited_5);
        _ -> {Graph, Head_2, I_2, Ind, Parent, Queue, S, T, U, Visited_3}
    end
end,
{Graph, Head_2, I_2, Ind_2, Parent_3, Queue_3, S, T, U, Visited_5} = Fun_2(Graph, Head_2, I_2, Ind, Parent, Queue, S, T, U, Visited_3),
            Fun_3_loop(Graph, Head_2, I_2, Parent_3, Queue_3, S, T, Visited_5);
        _ -> {Graph, Head, I_2, Parent, Queue, S, T, Visited_3}
    end
end,
{Graph, Head_2, I_2, Parent_3, Queue_3, S, T, Visited_5} = Fun_3(Graph, Head, I_2, Parent, Queue, S, T, Visited_3),
        (case erlang:is_map(Visited_5) of true -> maps:get(T, Visited_5, nil); _ -> case T < 0 of true -> mochi_nth(erlang:length(Visited_5) + T + 1, Visited_5); _ -> mochi_nth(T + 1, Visited_5) end end)
    catch {return, RetCatch} -> RetCatch end.

mincut(Graph_2, Source, Sink) ->
    try
        G = Graph_2,
        Parent_4 = [],
        I_3 = 0,
        Fun_4 = fun Fun_4_loop(G, Graph_2, I_3, Parent_4, Sink, Source) ->
    case (I_3 < erlang:length(G)) of
        true ->
            Parent_5 = lists:append((case Parent_4 of nil -> []; _ -> Parent_4 end), [-1]),
            I_4 = (I_3 + 1),
            Fun_4_loop(G, Graph_2, I_4, Parent_5, Sink, Source);
        _ -> {G, Graph_2, I_3, Parent_4, Sink, Source}
    end
end,
{G, Graph_2, I_4, Parent_5, Sink, Source} = Fun_4(G, Graph_2, I_3, Parent_4, Sink, Source),
        Temp = [],
        I_5 = 0,
        Fun_6 = fun Fun_6_loop(G, Graph_2, I_5, Parent_5, Sink, Source, Temp) ->
    case (I_5 < erlang:length(G)) of
        true ->
            Row = [],
            J = 0,
            Fun_5 = fun Fun_5_loop(G, Graph_2, I_5, J, Parent_5, Row, Sink, Source, Temp) ->
    case (J < erlang:length((case erlang:is_map(G) of true -> maps:get(I_5, G, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(G) + I_5 + 1, G); _ -> mochi_nth(I_5 + 1, G) end end))) of
        true ->
            Row_2 = lists:append((case Row of nil -> []; _ -> Row end), [(case erlang:is_map((case erlang:is_map(G) of true -> maps:get(I_5, G, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(G) + I_5 + 1, G); _ -> mochi_nth(I_5 + 1, G) end end)) of true -> maps:get(J, (case erlang:is_map(G) of true -> maps:get(I_5, G, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(G) + I_5 + 1, G); _ -> mochi_nth(I_5 + 1, G) end end), nil); _ -> case J < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(G) of true -> maps:get(I_5, G, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(G) + I_5 + 1, G); _ -> mochi_nth(I_5 + 1, G) end end)) + J + 1, (case erlang:is_map(G) of true -> maps:get(I_5, G, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(G) + I_5 + 1, G); _ -> mochi_nth(I_5 + 1, G) end end)); _ -> mochi_nth(J + 1, (case erlang:is_map(G) of true -> maps:get(I_5, G, nil); _ -> case I_5 < 0 of true -> mochi_nth(erlang:length(G) + I_5 + 1, G); _ -> mochi_nth(I_5 + 1, G) end end)) end end)]),
            J_2 = (J + 1),
            Fun_5_loop(G, Graph_2, I_5, J_2, Parent_5, Row_2, Sink, Source, Temp);
        _ -> {G, Graph_2, I_5, J, Parent_5, Row, Sink, Source, Temp}
    end
end,
{G, Graph_2, I_5, J_2, Parent_5, Row_2, Sink, Source, Temp} = Fun_5(G, Graph_2, I_5, J, Parent_5, Row, Sink, Source, Temp),
            Temp_2 = lists:append((case Temp of nil -> []; _ -> Temp end), [Row_2]),
            I_6 = (I_5 + 1),
            Fun_6_loop(G, Graph_2, I_6, Parent_5, Sink, Source, Temp_2);
        _ -> {G, Graph_2, I_5, Parent_5, Sink, Source, Temp}
    end
end,
{G, Graph_2, I_6, Parent_5, Sink, Source, Temp_2} = Fun_6(G, Graph_2, I_5, Parent_5, Sink, Source, Temp),
        Fun_9 = fun Fun_9_loop(G, Graph_2, I_6, Parent_5, Sink, Source, Temp_2) ->
    case bfs(G, Source, Sink, Parent_5) of
        true ->
            Path_flow = 1000000000,
            S_2 = Sink,
            Fun_7 = fun Fun_7_loop(G, Graph_2, I_6, Parent_5, Path_flow, S_2, Sink, Source, Temp_2) ->
    case (S_2 /= Source) of
        true ->
            P = (case erlang:is_map(Parent_5) of true -> maps:get(S_2, Parent_5, nil); _ -> case S_2 < 0 of true -> mochi_nth(erlang:length(Parent_5) + S_2 + 1, Parent_5); _ -> mochi_nth(S_2 + 1, Parent_5) end end),
            Cap = (case erlang:is_map((case erlang:is_map(G) of true -> maps:get(P, G, nil); _ -> case P < 0 of true -> mochi_nth(erlang:length(G) + P + 1, G); _ -> mochi_nth(P + 1, G) end end)) of true -> maps:get(S_2, (case erlang:is_map(G) of true -> maps:get(P, G, nil); _ -> case P < 0 of true -> mochi_nth(erlang:length(G) + P + 1, G); _ -> mochi_nth(P + 1, G) end end), nil); _ -> case S_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(G) of true -> maps:get(P, G, nil); _ -> case P < 0 of true -> mochi_nth(erlang:length(G) + P + 1, G); _ -> mochi_nth(P + 1, G) end end)) + S_2 + 1, (case erlang:is_map(G) of true -> maps:get(P, G, nil); _ -> case P < 0 of true -> mochi_nth(erlang:length(G) + P + 1, G); _ -> mochi_nth(P + 1, G) end end)); _ -> mochi_nth(S_2 + 1, (case erlang:is_map(G) of true -> maps:get(P, G, nil); _ -> case P < 0 of true -> mochi_nth(erlang:length(G) + P + 1, G); _ -> mochi_nth(P + 1, G) end end)) end end),
            case (Cap < Path_flow) of
        true -> Path_flow_2 = Cap,
            Path_flow_3 = Path_flow_2;
        _ -> Path_flow_3 = Path_flow
    end,
            S_3 = P,
            Fun_7_loop(G, Graph_2, I_6, Parent_5, Path_flow_3, S_3, Sink, Source, Temp_2);
        _ -> {G, Graph_2, I_6, Parent_5, Path_flow, S_2, Sink, Source, Temp_2}
    end
end,
{G, Graph_2, I_6, Parent_5, Path_flow_3, S_3, Sink, Source, Temp_2} = Fun_7(G, Graph_2, I_6, Parent_5, Path_flow, S_2, Sink, Source, Temp_2),
            V = Sink,
            Fun_8 = fun Fun_8_loop(G, Graph_2, I_6, Parent_5, Path_flow_3, S_3, Sink, Source, Temp_2, V) ->
    case (V /= Source) of
        true ->
            U_2 = (case erlang:is_map(Parent_5) of true -> maps:get(V, Parent_5, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(Parent_5) + V + 1, Parent_5); _ -> mochi_nth(V + 1, Parent_5) end end),
            G_2 = lists:sublist(G, U_2) ++ [lists:sublist(lists:nth(U_2 + 1, G), V) ++ [((case erlang:is_map((case erlang:is_map(G) of true -> maps:get(U_2, G, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(G) + U_2 + 1, G); _ -> mochi_nth(U_2 + 1, G) end end)) of true -> maps:get(V, (case erlang:is_map(G) of true -> maps:get(U_2, G, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(G) + U_2 + 1, G); _ -> mochi_nth(U_2 + 1, G) end end), nil); _ -> case V < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(G) of true -> maps:get(U_2, G, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(G) + U_2 + 1, G); _ -> mochi_nth(U_2 + 1, G) end end)) + V + 1, (case erlang:is_map(G) of true -> maps:get(U_2, G, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(G) + U_2 + 1, G); _ -> mochi_nth(U_2 + 1, G) end end)); _ -> mochi_nth(V + 1, (case erlang:is_map(G) of true -> maps:get(U_2, G, nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length(G) + U_2 + 1, G); _ -> mochi_nth(U_2 + 1, G) end end)) end end) - Path_flow_3)] ++ lists:nthtail(V + 1, lists:nth(U_2 + 1, G))] ++ lists:nthtail(U_2 + 1, G),
            G_3 = lists:sublist(G_2, V) ++ [lists:sublist(lists:nth(V + 1, G_2), U_2) ++ [((case erlang:is_map((case erlang:is_map(G_2) of true -> maps:get(V, G_2, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_2) + V + 1, G_2); _ -> mochi_nth(V + 1, G_2) end end)) of true -> maps:get(U_2, (case erlang:is_map(G_2) of true -> maps:get(V, G_2, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_2) + V + 1, G_2); _ -> mochi_nth(V + 1, G_2) end end), nil); _ -> case U_2 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(G_2) of true -> maps:get(V, G_2, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_2) + V + 1, G_2); _ -> mochi_nth(V + 1, G_2) end end)) + U_2 + 1, (case erlang:is_map(G_2) of true -> maps:get(V, G_2, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_2) + V + 1, G_2); _ -> mochi_nth(V + 1, G_2) end end)); _ -> mochi_nth(U_2 + 1, (case erlang:is_map(G_2) of true -> maps:get(V, G_2, nil); _ -> case V < 0 of true -> mochi_nth(erlang:length(G_2) + V + 1, G_2); _ -> mochi_nth(V + 1, G_2) end end)) end end) + Path_flow_3)] ++ lists:nthtail(U_2 + 1, lists:nth(V + 1, G_2))] ++ lists:nthtail(V + 1, G_2),
            V_2 = U_2,
            Fun_8_loop(G_3, Graph_2, I_6, Parent_5, Path_flow_3, S_3, Sink, Source, Temp_2, V_2);
        _ -> {G, Graph_2, I_6, Parent_5, Path_flow_3, S_3, Sink, Source, Temp_2, V}
    end
end,
{G_3, Graph_2, I_6, Parent_5, Path_flow_3, S_3, Sink, Source, Temp_2, V_2} = Fun_8(G, Graph_2, I_6, Parent_5, Path_flow_3, S_3, Sink, Source, Temp_2, V),
            Fun_9_loop(G_3, Graph_2, I_6, Parent_5, Sink, Source, Temp_2);
        _ -> {G, Graph_2, I_6, Parent_5, Sink, Source, Temp_2}
    end
end,
{G_3, Graph_2, I_6, Parent_5, Sink, Source, Temp_2} = Fun_9(G, Graph_2, I_6, Parent_5, Sink, Source, Temp_2),
        Res = [],
        I_7 = 0,
        Fun_11 = fun Fun_11_loop(G_3, Graph_2, I_7, Parent_5, Res, Sink, Source, Temp_2) ->
    case (I_7 < erlang:length(G_3)) of
        true ->
            J_3 = 0,
            Fun_10 = fun Fun_10_loop(G_3, Graph_2, I_7, J_3, Parent_5, Res, Sink, Source, Temp_2) ->
    case (J_3 < erlang:length((case erlang:is_map(G_3) of true -> maps:get(0, G_3, nil); _ -> case 0 < 0 of true -> mochi_nth(erlang:length(G_3) + 0 + 1, G_3); _ -> mochi_nth(0 + 1, G_3) end end))) of
        true ->
            case (((case erlang:is_map((case erlang:is_map(G_3) of true -> maps:get(I_7, G_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(G_3) + I_7 + 1, G_3); _ -> mochi_nth(I_7 + 1, G_3) end end)) of true -> maps:get(J_3, (case erlang:is_map(G_3) of true -> maps:get(I_7, G_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(G_3) + I_7 + 1, G_3); _ -> mochi_nth(I_7 + 1, G_3) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(G_3) of true -> maps:get(I_7, G_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(G_3) + I_7 + 1, G_3); _ -> mochi_nth(I_7 + 1, G_3) end end)) + J_3 + 1, (case erlang:is_map(G_3) of true -> maps:get(I_7, G_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(G_3) + I_7 + 1, G_3); _ -> mochi_nth(I_7 + 1, G_3) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(G_3) of true -> maps:get(I_7, G_3, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(G_3) + I_7 + 1, G_3); _ -> mochi_nth(I_7 + 1, G_3) end end)) end end) == 0) andalso ((case erlang:is_map((case erlang:is_map(Temp_2) of true -> maps:get(I_7, Temp_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Temp_2) + I_7 + 1, Temp_2); _ -> mochi_nth(I_7 + 1, Temp_2) end end)) of true -> maps:get(J_3, (case erlang:is_map(Temp_2) of true -> maps:get(I_7, Temp_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Temp_2) + I_7 + 1, Temp_2); _ -> mochi_nth(I_7 + 1, Temp_2) end end), nil); _ -> case J_3 < 0 of true -> mochi_nth(erlang:length((case erlang:is_map(Temp_2) of true -> maps:get(I_7, Temp_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Temp_2) + I_7 + 1, Temp_2); _ -> mochi_nth(I_7 + 1, Temp_2) end end)) + J_3 + 1, (case erlang:is_map(Temp_2) of true -> maps:get(I_7, Temp_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Temp_2) + I_7 + 1, Temp_2); _ -> mochi_nth(I_7 + 1, Temp_2) end end)); _ -> mochi_nth(J_3 + 1, (case erlang:is_map(Temp_2) of true -> maps:get(I_7, Temp_2, nil); _ -> case I_7 < 0 of true -> mochi_nth(erlang:length(Temp_2) + I_7 + 1, Temp_2); _ -> mochi_nth(I_7 + 1, Temp_2) end end)) end end) > 0)) of
        true -> Res_2 = lists:append((case Res of nil -> []; _ -> Res end), [[I_7, J_3]]),
            Res_3 = Res_2;
        _ -> Res_3 = Res
    end,
            J_4 = (J_3 + 1),
            Fun_10_loop(G_3, Graph_2, I_7, J_4, Parent_5, Res_3, Sink, Source, Temp_2);
        _ -> {G_3, Graph_2, I_7, J_3, Parent_5, Res, Sink, Source, Temp_2}
    end
end,
{G_3, Graph_2, I_7, J_4, Parent_5, Res_3, Sink, Source, Temp_2} = Fun_10(G_3, Graph_2, I_7, J_3, Parent_5, Res, Sink, Source, Temp_2),
            I_8 = (I_7 + 1),
            Fun_11_loop(G_3, Graph_2, I_8, Parent_5, Res_3, Sink, Source, Temp_2);
        _ -> {G_3, Graph_2, I_7, Parent_5, Res, Sink, Source, Temp_2}
    end
end,
{G_3, Graph_2, I_8, Parent_5, Res_3, Sink, Source, Temp_2} = Fun_11(G_3, Graph_2, I_7, Parent_5, Res, Sink, Source, Temp_2),
        Res_3
    catch {return, RetCatch} -> RetCatch end.

main(_) ->
    try
        __mochi_bench_start = mochi_now(),
    __mochi_bench_start_mem = erlang:memory(total),
    erlang:put('test_graph', [[0, 16, 13, 0, 0, 0], [0, 0, 10, 12, 0, 0], [0, 4, 0, 0, 14, 0], [0, 0, 9, 0, 0, 20], [0, 0, 0, 7, 0, 4], [0, 0, 0, 0, 0, 0]]),
    erlang:put('result', mincut(erlang:get('test_graph'), 0, 5)),
    io:format("~ts~n", [mochi_str(erlang:get('result'))]),
    __mochi_bench_end = mochi_now(),
    __mochi_bench_end_mem = erlang:memory(total),
    __mochi_bench_duration_us = (__mochi_bench_end - __mochi_bench_start) div 1000,
    __mochi_bench_mem_bytes = erlang:abs(__mochi_bench_end_mem - __mochi_bench_start_mem),
    io:format("{~n  \"duration_us\": ~p,~n  \"memory_bytes\": ~p,~n  \"name\": \"main\"~n}
", [__mochi_bench_duration_us, __mochi_bench_mem_bytes])
    catch
        _:Err -> io:format("~s~n", [mochi_str(Err)])
    end.
