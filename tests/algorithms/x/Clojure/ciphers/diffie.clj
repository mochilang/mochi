(ns main (:refer-clojure :exclude [mod_pow contains find_primitive]))

(require 'clojure.set)

(defn in [x coll]
  (cond (string? coll) (clojure.string/includes? coll x) (map? coll) (contains? coll x) (sequential? coll) (some (fn [e] (= e x)) coll) :else false))

(defn padStart [s w p]
  (loop [out (str s)] (if (< (count out) w) (recur (str p out)) out)))

(defn indexOf [s sub]
  (let [idx (clojure.string/index-of s sub)] (if (nil? idx) -1 idx)))

(defn split [s sep]
  (clojure.string/split s (re-pattern sep)))

(def nowSeed (atom (let [s (System/getenv "MOCHI_NOW_SEED")] (if (and s (not (= s ""))) (Integer/parseInt s) 0))))

(declare mod_pow contains find_primitive)

(def ^:dynamic contains_i nil)

(def ^:dynamic find_primitive_li nil)

(def ^:dynamic find_primitive_r nil)

(def ^:dynamic find_primitive_valid nil)

(def ^:dynamic find_primitive_value nil)

(def ^:dynamic find_primitive_x nil)

(def ^:dynamic mod_pow_b nil)

(def ^:dynamic mod_pow_e nil)

(def ^:dynamic mod_pow_result nil)

(defn mod_pow [mod_pow_base mod_pow_exp mod_pow_mod]
  (binding [mod_pow_b nil mod_pow_e nil mod_pow_result nil] (try (do (set! mod_pow_result 1) (set! mod_pow_b (mod mod_pow_base mod_pow_mod)) (set! mod_pow_e mod_pow_exp) (while (> mod_pow_e 0) (do (when (= (mod mod_pow_e 2) 1) (set! mod_pow_result (mod (* mod_pow_result mod_pow_b) mod_pow_mod))) (set! mod_pow_e (quot mod_pow_e 2)) (set! mod_pow_b (mod (* mod_pow_b mod_pow_b) mod_pow_mod)))) (throw (ex-info "return" {:v mod_pow_result}))) (catch clojure.lang.ExceptionInfo e (if (= (ex-message e) "return") (get (ex-data e) :v) (throw e))))))

(defn contains [contains_xs contains_val]
  (binding [contains_i nil] (try (do (set! contains_i 0) (while (< contains_i (count contains_xs)) (do (when (= (nth contains_xs contains_i) contains_val) (throw (ex-info "return" {:v true}))) (set! contains_i (+ contains_i 1)))) (throw (ex-info "return" {:v false}))) (catch clojure.lang.ExceptionInfo e (if (= (ex-message e) "return") (get (ex-data e) :v) (throw e))))))

(defn find_primitive [find_primitive_modulus]
  (binding [find_primitive_li nil find_primitive_r nil find_primitive_valid nil find_primitive_value nil find_primitive_x nil] (try (do (set! find_primitive_r 1) (while (< find_primitive_r find_primitive_modulus) (do (set! find_primitive_li []) (set! find_primitive_x 0) (set! find_primitive_valid true) (while (and (< find_primitive_x (- find_primitive_modulus 1)) find_primitive_valid) (do (set! find_primitive_value (mod_pow find_primitive_r find_primitive_x find_primitive_modulus)) (if (contains find_primitive_li find_primitive_value) (set! find_primitive_valid false) (do (set! find_primitive_li (conj find_primitive_li find_primitive_value)) (set! find_primitive_x (+ find_primitive_x 1)))))) (when find_primitive_valid (throw (ex-info "return" {:v find_primitive_r}))) (set! find_primitive_r (+ find_primitive_r 1)))) (throw (ex-info "return" {:v (- 1)}))) (catch clojure.lang.ExceptionInfo e (if (= (ex-message e) "return") (get (ex-data e) :v) (throw e))))))

(def ^:dynamic main_prime 23)

(def ^:dynamic main_primitive_root (find_primitive main_prime))

(defn -main []
  (let [rt (Runtime/getRuntime)
    start-mem (- (.totalMemory rt) (.freeMemory rt))
    start (System/nanoTime)]
      (println (find_primitive 7))
      (println (find_primitive 11))
      (println (find_primitive 8))
      (if (= main_primitive_root (- 0 1)) (println "Cannot find the primitive for the value: -1") (do (def ^:dynamic main_a_private 6) (def ^:dynamic main_b_private 15) (def ^:dynamic main_a_public (mod_pow main_primitive_root main_a_private main_prime)) (def ^:dynamic main_b_public (mod_pow main_primitive_root main_b_private main_prime)) (def ^:dynamic main_a_secret (mod_pow main_b_public main_a_private main_prime)) (def ^:dynamic main_b_secret (mod_pow main_a_public main_b_private main_prime)) (println (str "The key value generated by A is: " (str main_a_secret))) (println (str "The key value generated by B is: " (str main_b_secret)))))
      (System/gc)
      (let [end (System/nanoTime)
        end-mem (- (.totalMemory rt) (.freeMemory rt))
        duration-us (quot (- end start) 1000)
        memory-bytes (Math/abs ^long (- end-mem start-mem))]
        (println (str "{\n  \"duration_us\": " duration-us ",\n  \"memory_bytes\": " memory-bytes ",\n  \"name\": \"main\"\n}"))
      )
    ))

(-main)
