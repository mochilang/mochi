// Generated by Mochi v0.10.59 on 2025-08-06 18:38:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def run_maze(maze: ArrayBuffer[ArrayBuffer[BigInt]], i: BigInt, j: BigInt, dr: BigInt, dc: BigInt, sol: ArrayBuffer[ArrayBuffer[BigInt]]): Boolean = {
  val size: BigInt = BigInt((maze).size)
  if (((i == dr && j == dc).asInstanceOf[Boolean] && maze((i.toInt).toInt)((j.toInt).toInt) == 0).asInstanceOf[Boolean]) {
    sol((i).toInt)((j).toInt) = 0
    return true
  }
  val lower_flag = i >= 0 && j >= 0
  val upper_flag = i < size && j < size
  if ((lower_flag && upper_flag).asInstanceOf[Boolean]) {
    val block_flag = sol((i.toInt).toInt)((j.toInt).toInt) == 1 && maze((i.toInt).toInt)((j.toInt).toInt) == 0
    if (block_flag) {
      sol((i).toInt)((j).toInt) = 0
      if ((((run_maze(maze, i + 1, j, dr, dc, sol) || run_maze(maze, i, j + 1, dr, dc, sol)).asInstanceOf[Boolean] || run_maze(maze, i - 1, j, dr, dc, sol)).asInstanceOf[Boolean] || run_maze(maze, i, j - 1, dr, dc, sol)).asInstanceOf[Boolean]) {
        return true
      }
      sol((i).toInt)((j).toInt) = 1
      return false
    }
  }
  return false
}

def solve_maze(maze: ArrayBuffer[ArrayBuffer[BigInt]], sr: BigInt, sc: BigInt, dr: BigInt, dc: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val size: BigInt = BigInt((maze).size)
  if ((!(((((((0 <= sr && sr < size).asInstanceOf[Boolean] && 0 <= sc).asInstanceOf[Boolean] && sc < size).asInstanceOf[Boolean] && 0 <= dr).asInstanceOf[Boolean] && dr < size).asInstanceOf[Boolean] && 0 <= dc).asInstanceOf[Boolean] && dc < size).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Invalid source or destination coordinates"))
  }
  var sol: ArrayBuffer[ArrayBuffer[BigInt]] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]]
  var i: BigInt = 0
  while (i < size) {
    var row: ArrayBuffer[BigInt] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
    var j: BigInt = 0
    while (j < size) {
      row = row :+ BigInt(1)
      j = j + 1
    }
    sol = sol :+ row
    i = i + 1
  }
  val solved: Boolean = run_maze(maze, sr, sc, dr, dc, sol)
  if (solved) {
    return sol
  } else {
    throw new RuntimeException(String.valueOf("No solution exists!"))
  }
  return ArrayBuffer()
}

val maze: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(0, 1, 0, 1, 1), ArrayBuffer(0, 0, 0, 0, 0), ArrayBuffer(1, 0, 1, 0, 1), ArrayBuffer(0, 0, 1, 0, 0), ArrayBuffer(1, 0, 0, 1, 0))

val n: BigInt = BigInt((maze).size) - 1

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(solve_maze(maze, 0, 0, n, n)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
