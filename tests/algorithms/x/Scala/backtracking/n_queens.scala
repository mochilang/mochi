// Generated by Mochi v0.10.59 on 2025-08-06 18:35:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def create_board(n: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var board: ArrayBuffer[ArrayBuffer[BigInt]] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]]
  var i: BigInt = 0
  while (i < n) {
    var row: ArrayBuffer[BigInt] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
    var j: BigInt = 0
    while (j < n) {
      row = row :+ BigInt(0)
      j = j + 1
    }
    board = board :+ row
    i = i + 1
  }
  return board
}

def is_safe(board: ArrayBuffer[ArrayBuffer[BigInt]], row: BigInt, column: BigInt): Boolean = {
  val n: BigInt = BigInt((board).size)
  var i: BigInt = 0
  while (i < row) {
    if (board((i.toInt).toInt)((column.toInt).toInt) == 1) {
      return false
    }
    i = i + 1
  }
  i = row - 1
  var j: BigInt = column - 1
  while (i >= 0 && j >= 0) {
    if (board((i.toInt).toInt)((j.toInt).toInt) == 1) {
      return false
    }
    i = i - 1
    j = j - 1
  }
  i = row - 1
  j = column + 1
  while (i >= 0 && j < n) {
    if (board((i.toInt).toInt)((j.toInt).toInt) == 1) {
      return false
    }
    i = i - 1
    j = j + 1
  }
  return true
}

def row_string(row: ArrayBuffer[BigInt]): String = {
  var s: String = ""
  var j: BigInt = 0
  while (j < BigInt((row).size)) {
    if (row((j.toInt).toInt) == 1) {
      s = s + "Q "
    } else {
      s = s + ". "
    }
    j = j + 1
  }
  return s
}

def printboard(board: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = 0
  while (i < BigInt((board).size)) {
    println(row_string(board((i.toInt).toInt)))
    i = i + 1
  }
}

def solve(board: ArrayBuffer[ArrayBuffer[BigInt]], row: BigInt): BigInt = {
  if (row >= BigInt((board).size)) {
    printboard(board)
    println("")
    return 1
  }
  var count: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((board).size)) {
    if (is_safe(board, row, i)) {
      board((row).toInt)((i).toInt) = 1
      count = count + solve(board, row + 1)
      board((row).toInt)((i).toInt) = 0
    }
    i = i + 1
  }
  return count
}

def n_queens(n: BigInt): BigInt = {
  val board: ArrayBuffer[ArrayBuffer[BigInt]] = create_board(n)
  val total: BigInt = solve(board, 0)
  println("The total number of solutions are: " + String.valueOf(total))
  return total
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    n_queens(4)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
