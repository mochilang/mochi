// Generated by Mochi v0.10.59 on 2025-08-06 18:33:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_valid(puzzle: ArrayBuffer[ArrayBuffer[String]], word: String, row: BigInt, col: BigInt, vertical: Boolean): Boolean = {
  for (i <- (0).toInt until (BigInt((word).size)).toInt) {
    if (vertical) {
      if ((row + i >= BigInt((puzzle).size) || puzzle(((row + i).toInt).toInt)((col.toInt).toInt) != "").asInstanceOf[Boolean]) {
        return false
      }
    } else {
      if ((col + i >= BigInt((puzzle((0.toInt).toInt)).size) || puzzle((row.toInt).toInt)(((col + i).toInt).toInt) != "").asInstanceOf[Boolean]) {
        return false
      }
    }
  }
  return true
}

def place_word(puzzle: ArrayBuffer[ArrayBuffer[String]], word: String, row: BigInt, col: BigInt, vertical: Boolean): Any = {
  for (i <- (0).toInt until (BigInt((word).size)).toInt) {
    val ch: String = word.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (vertical) {
      puzzle((row + i).toInt)((col).toInt) = ch
    } else {
      puzzle((row).toInt)((col + i).toInt) = ch
    }
  }
}

def remove_word(puzzle: ArrayBuffer[ArrayBuffer[String]], word: String, row: BigInt, col: BigInt, vertical: Boolean): Any = {
  for (i <- (0).toInt until (BigInt((word).size)).toInt) {
    if (vertical) {
      puzzle((row + i).toInt)((col).toInt) = ""
    } else {
      puzzle((row).toInt)((col + i).toInt) = ""
    }
  }
}

def solve_crossword(puzzle: ArrayBuffer[ArrayBuffer[String]], words: ArrayBuffer[String], used: ArrayBuffer[Boolean]): Boolean = {
  for (row <- (0).toInt until (BigInt((puzzle).size)).toInt) {
    for (col <- (0).toInt until (BigInt((puzzle((0.toInt).toInt)).size)).toInt) {
      if (puzzle((row.toInt).toInt)((col.toInt).toInt) == "") {
        for (i <- (0).toInt until (BigInt((words).size)).toInt) {
          if ((!used((i.toInt).toInt)).asInstanceOf[Boolean]) {
            val word: String = words((i.toInt).toInt)
            for (vertical <- ArrayBuffer(true, false)) {
              if (is_valid(puzzle, word, BigInt(row.toString.toDouble.toInt), BigInt(col.toString.toDouble.toInt), vertical)) {
                place_word(puzzle, word, BigInt(row.toString.toDouble.toInt), BigInt(col.toString.toDouble.toInt), vertical)
                used((i).toInt) = true
                if (solve_crossword(puzzle, words, used)) {
                  return true
                }
                used((i).toInt) = false
                remove_word(puzzle, word, BigInt(row.toString.toDouble.toInt), BigInt(col.toString.toDouble.toInt), vertical)
              }
            }
          }
        }
        return false
      }
    }
  }
  return true
}

var puzzle: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("", "", ""), ArrayBuffer("", "", ""), ArrayBuffer("", "", ""))

var words: ArrayBuffer[String] = ArrayBuffer("cat", "dog", "car")

var used: ArrayBuffer[Boolean] = ArrayBuffer(false, false, false)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    if (solve_crossword(puzzle, words, used)) {
      println("Solution found:")
      for (row <- puzzle) {
        println(row)
      }
    } else {
      println("No solution found:")
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
