// Generated by Mochi v0.10.59 on 2025-08-06 18:39:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sum_list(nums: ArrayBuffer[BigInt]): BigInt = {
  var s: BigInt = 0
  for (n <- nums) {
    s = s + n
  }
  return s
}

def create_state_space_tree(nums: ArrayBuffer[BigInt], max_sum: BigInt, num_index: BigInt, path: ArrayBuffer[BigInt], curr_sum: BigInt, remaining_sum: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  if ((curr_sum > max_sum || curr_sum + remaining_sum < max_sum).asInstanceOf[Boolean]) {
    return result
  }
  if (curr_sum == max_sum) {
    result = result :+ path
    return result
  }
  var index: BigInt = num_index
  while (index < BigInt((nums).size)) {
    val value: BigInt = nums((index.toInt).toInt)
    val subres: ArrayBuffer[ArrayBuffer[BigInt]] = create_state_space_tree(nums, max_sum, index + 1, path :+ value, curr_sum + value, remaining_sum - value)
    var j: BigInt = 0
    while (j < BigInt((subres).size)) {
      result = result :+ subres((j.toInt).toInt)
      j = j + 1
    }
    index = index + 1
  }
  return result
}

def generate_sum_of_subsets_solutions(nums: ArrayBuffer[BigInt], max_sum: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val total: BigInt = sum_list(nums)
  return create_state_space_tree(nums, max_sum, 0, ArrayBuffer(), 0, total)
}

def main(): Any = {
  println(toJson(generate_sum_of_subsets_solutions(ArrayBuffer(3, 34, 4, 12, 5, 2), 9)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
