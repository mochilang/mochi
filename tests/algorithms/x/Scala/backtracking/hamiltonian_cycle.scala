// Generated by Mochi v0.10.59 on 2025-08-06 18:33:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def valid_connection(graph: ArrayBuffer[ArrayBuffer[BigInt]], next_ver: BigInt, curr_ind: BigInt, path: ArrayBuffer[BigInt]): Boolean = {
  if (graph((path(((curr_ind - 1).toInt).toInt).toInt).toInt)((next_ver.toInt).toInt) == 0) {
    return false
  }
  for (v <- path) {
    if (v == next_ver) {
      return false
    }
  }
  return true
}

def util_hamilton_cycle(graph: ArrayBuffer[ArrayBuffer[BigInt]], path: ArrayBuffer[BigInt], curr_ind: BigInt): Boolean = {
  if (curr_ind == BigInt((graph).size)) {
    return graph((path(((curr_ind - 1).toInt).toInt).toInt).toInt)((path((0.toInt).toInt).toInt).toInt) == 1
  }
  var next_ver: BigInt = 0
  while (next_ver < BigInt((graph).size)) {
    if (valid_connection(graph, next_ver, curr_ind, path)) {
      path((curr_ind).toInt) = next_ver
      if (util_hamilton_cycle(graph, path, curr_ind + 1)) {
        return true
      }
      path((curr_ind).toInt) = BigInt((-1).toString.toDouble.toInt)
    }
    next_ver = next_ver + 1
  }
  return false
}

def hamilton_cycle(graph: ArrayBuffer[ArrayBuffer[BigInt]], start_index: BigInt): ArrayBuffer[BigInt] = {
  var path: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((graph).size) + 1) {
    path((i).toInt) = BigInt((-1).toString.toDouble.toInt)
    i = i + 1
  }
  path((0).toInt) = start_index
  var last: BigInt = BigInt((path).size) - 1
  path((last).toInt) = start_index
  if (util_hamilton_cycle(graph, path, 1)) {
    return path
  }
  return (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
