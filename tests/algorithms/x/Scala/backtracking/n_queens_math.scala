// Generated by Mochi v0.10.59 on 2025-08-06 18:38:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _repeat(s: String, n: BigInt): String = s * n.toInt

def contains(xs: ArrayBuffer[BigInt], x: BigInt): Boolean = {
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) == x) {
      return true
    }
    i = i + 1
  }
  return false
}

def repeat(s: String, times: BigInt): String = {
  var result: String = ""
  var i: BigInt = 0
  while (i < times) {
    result = result + s
    i = i + 1
  }
  return result
}

def build_board(pos: ArrayBuffer[BigInt], n: BigInt): ArrayBuffer[String] = {
  var board: ArrayBuffer[String] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[String]]
  var i: BigInt = 0
  while (i < BigInt((pos).size)) {
    val col: BigInt = pos((i.toInt).toInt)
    val line: String = _repeat(". ", col) + "Q " + _repeat(". ", n - 1 - col)
    board = board :+ line
    i = i + 1
  }
  return board
}

def depth_first_search(pos: ArrayBuffer[BigInt], dr: ArrayBuffer[BigInt], dl: ArrayBuffer[BigInt], n: BigInt): ArrayBuffer[ArrayBuffer[String]] = {
  val row: BigInt = BigInt((pos).size)
  if (row == n) {
    var single: ArrayBuffer[ArrayBuffer[String]] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[ArrayBuffer[String]]]
    single = single :+ build_board(pos, n)
    return single
  }
  var boards: ArrayBuffer[ArrayBuffer[String]] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[ArrayBuffer[String]]]
  var col: BigInt = 0
  val _ct3 = new Breaks
  while (col < n) {
    _ct3.breakable {
      if ((((pos.contains(col)).asInstanceOf[Boolean] || (dr.contains(row - col)).asInstanceOf[Boolean]).asInstanceOf[Boolean] || (dl.contains(row + col)).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        col = col + 1
        _ct3.break()
      }
      val result: ArrayBuffer[ArrayBuffer[String]] = depth_first_search(pos :+ col, dr :+ row - col, dl :+ row + col, n)
      boards = boards ++ result
      col = col + 1
    }
  }
  return boards.asInstanceOf[ArrayBuffer[ArrayBuffer[String]]]
}

def n_queens_solution(n: BigInt): BigInt = {
  val boards: ArrayBuffer[ArrayBuffer[String]] = depth_first_search(((ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]).asInstanceOf[ArrayBuffer[BigInt]], ((ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]).asInstanceOf[ArrayBuffer[BigInt]], ((ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]).asInstanceOf[ArrayBuffer[BigInt]], n)
  var i: BigInt = 0
  while (i < BigInt((boards).size)) {
    var j: BigInt = 0
    while (j < BigInt((boards((i.toInt).toInt)).size)) {
      println(boards((i.toInt).toInt)((j.toInt).toInt))
      j = j + 1
    }
    println("")
    i = i + 1
  }
  println((List(BigInt((boards).size), "solutions were found.")).mkString(" "))
  return BigInt((boards).size)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    n_queens_solution(4)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
