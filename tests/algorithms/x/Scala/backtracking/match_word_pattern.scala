// Generated by Mochi v0.10.59 on 2025-08-06 18:35:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def get_value(keys: ArrayBuffer[String], values: ArrayBuffer[String], key: String): String = {
  var i: BigInt = 0
  while (i < BigInt((keys).size)) {
    if (keys((i.toInt).toInt) == key) {
      return values((i.toInt).toInt)
    }
    i = i + 1
  }
  return null
}

def contains_value(values: ArrayBuffer[String], value: String): Boolean = {
  var i: BigInt = 0
  while (i < BigInt((values).size)) {
    if (values((i.toInt).toInt) == value) {
      return true
    }
    i = i + 1
  }
  return false
}

def backtrack(pattern: String, input_string: String, pi: BigInt, si: BigInt, keys: ArrayBuffer[String], values: ArrayBuffer[String]): Boolean = {
  if ((pi == BigInt((pattern).size) && si == BigInt((input_string).size)).asInstanceOf[Boolean]) {
    return true
  }
  if ((pi == BigInt((pattern).size) || si == BigInt((input_string).size)).asInstanceOf[Boolean]) {
    return false
  }
  val ch: String = pattern.slice((pi).toInt, (pi + 1).toInt)
  val mapped: String = get_value(keys, values, ch)
  if (mapped != null) {
    if (input_string.slice((si).toInt, (si + BigInt((mapped).size)).toInt) == mapped) {
      return backtrack(pattern, input_string, pi + 1, si + BigInt((mapped).size), keys, values)
    }
    return false
  }
  var end: BigInt = si + 1
  val _ct2 = new Breaks
  while (end <= BigInt((input_string).size)) {
    _ct2.breakable {
      val substr: String = input_string.slice((si).toInt, (end).toInt)
      if (contains_value(values, substr)) {
        end = end + 1
        _ct2.break()
      }
      val new_keys: ArrayBuffer[String] = keys :+ ch
      val new_values: ArrayBuffer[String] = values :+ substr
      if (backtrack(pattern, input_string, pi + 1, end, new_keys, new_values)) {
        return true
      }
      end = end + 1
    }
  }
  return false
}

def match_word_pattern(pattern: String, input_string: String): Boolean = {
  val keys: ArrayBuffer[String] = ArrayBuffer()
  val values: ArrayBuffer[String] = ArrayBuffer()
  return backtrack(pattern, input_string, 0, 0, keys, values)
}

def main(): Any = {
  println(match_word_pattern("aba", "GraphTreesGraph"))
  println(match_word_pattern("xyx", "PythonRubyPython"))
  println(match_word_pattern("GG", "PythonJavaPython"))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
