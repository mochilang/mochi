// Generated by Mochi v0.10.59 on 2025-08-06 18:35:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def minimax(depth: BigInt, node_index: BigInt, is_max: Boolean, scores: ArrayBuffer[BigInt], height: BigInt): BigInt = {
  if (depth < 0) {
    throw new RuntimeException(String.valueOf("Depth cannot be less than 0"))
  }
  if (BigInt((scores).size) == 0) {
    throw new RuntimeException(String.valueOf("Scores cannot be empty"))
  }
  if (depth == height) {
    return scores((node_index.toInt).toInt)
  }
  if (is_max) {
    val left: BigInt = minimax(depth + 1, node_index * 2, false, scores, height)
    val right: BigInt = minimax(depth + 1, node_index * 2 + 1, false, scores, height)
    if (left > right) {
      return left
    } else {
      return right
    }
  }
  val left: BigInt = minimax(depth + 1, node_index * 2, true, scores, height)
  val right: BigInt = minimax(depth + 1, node_index * 2 + 1, true, scores, height)
  if (left < right) {
    return left
  } else {
    return right
  }
  return null
}

def tree_height(n: BigInt): BigInt = {
  var h: BigInt = 0
  var v: BigInt = n
  while (v > 1) {
    v = v / 2
    h = h + 1
  }
  return h
}

def main(): Any = {
  val scores: ArrayBuffer[BigInt] = ArrayBuffer(90, 23, 6, 33, 21, 65, 123, 34423)
  val height: BigInt = tree_height(BigInt((scores).size))
  println("Optimal value : " + String.valueOf(minimax(0, 0, true, scores, height)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
