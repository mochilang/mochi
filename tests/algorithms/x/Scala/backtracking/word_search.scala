// Generated by Mochi v0.10.59 on 2025-08-06 18:40:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def contains(xs: ArrayBuffer[BigInt], x: BigInt): Boolean = {
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) == x) {
      return true
    }
    i = i + 1
  }
  return false
}

def get_point_key(len_board: BigInt, len_board_column: BigInt, row: BigInt, column: BigInt): BigInt = {
  return len_board * len_board_column * row + column
}

def search_from(board: ArrayBuffer[ArrayBuffer[String]], word: String, row: BigInt, column: BigInt, word_index: BigInt, visited: ArrayBuffer[BigInt]): Boolean = {
  if (board((row.toInt).toInt)((column.toInt).toInt) != word.slice((word_index).toInt, (word_index + 1).toInt)) {
    return false
  }
  if (word_index == BigInt((word).size) - 1) {
    return true
  }
  val len_board: BigInt = BigInt((board).size)
  val len_board_column: BigInt = BigInt((board((0.toInt).toInt)).size)
  val dir_i: ArrayBuffer[Any] = ArrayBuffer(0, 0, -1, 1)
  val dir_j: ArrayBuffer[Any] = ArrayBuffer(1, -1, 0, 0)
  var k: BigInt = 0
  val _ct1 = new Breaks
  while (k < 4) {
    _ct1.breakable {
      val next_i: BigInt = row + BigInt((dir_i((k.toInt).toInt)).toString.toDouble.toInt)
      val next_j: BigInt = column + BigInt((dir_j((k.toInt).toInt)).toString.toDouble.toInt)
      if ((!(((0 <= next_i && next_i < len_board).asInstanceOf[Boolean] && 0 <= next_j).asInstanceOf[Boolean] && next_j < len_board_column).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        k = k + 1
        _ct1.break()
      }
      val key: BigInt = get_point_key(len_board, len_board_column, next_i, next_j)
      if ((visited.contains(key)).asInstanceOf[Boolean]) {
        k = k + 1
        _ct1.break()
      }
      val new_visited: ArrayBuffer[BigInt] = visited :+ key
      if (search_from(board, word, next_i, next_j, word_index + 1, new_visited)) {
        return true
      }
      k = k + 1
    }
  }
  return false
}

def word_exists(board: ArrayBuffer[ArrayBuffer[String]], word: String): Boolean = {
  val len_board: BigInt = BigInt((board).size)
  val len_board_column: BigInt = BigInt((board((0.toInt).toInt)).size)
  var i: BigInt = 0
  while (i < len_board) {
    var j: BigInt = 0
    while (j < len_board_column) {
      val key: BigInt = get_point_key(len_board, len_board_column, i, j)
      val visited: ArrayBuffer[BigInt] = ArrayBuffer() :+ key
      if (search_from(board, word, i, j, 0, visited)) {
        return true
      }
      j = j + 1
    }
    i = i + 1
  }
  return false
}

def main(): Any = {
  val board: ArrayBuffer[ArrayBuffer[String]] = ArrayBuffer(ArrayBuffer("A", "B", "C", "E"), ArrayBuffer("S", "F", "C", "S"), ArrayBuffer("A", "D", "E", "E"))
  println(word_exists(board, "ABCCED"))
  println(word_exists(board, "SEE"))
  println(word_exists(board, "ABCB"))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
