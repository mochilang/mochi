// Generated by Mochi v0.10.59 on 2025-08-06 18:39:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def contains(xs: ArrayBuffer[String], x: String): Boolean = {
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) == x) {
      return true
    }
    i = i + 1
  }
  return false
}

def remove_item(xs: ArrayBuffer[String], x: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer()
  var removed: Boolean = false
  var i: BigInt = 0
  while (i < BigInt((xs).size)) {
    if (((!removed).asInstanceOf[Boolean] && xs((i.toInt).toInt) == x).asInstanceOf[Boolean]) {
      removed = true
    } else {
      res = res :+ xs((i.toInt).toInt)
    }
    i = i + 1
  }
  return res
}

def word_ladder(current: String, path: ArrayBuffer[String], target: String, words: ArrayBuffer[String]): ArrayBuffer[String] = {
  if (current == target) {
    return path
  }
  var i: BigInt = 0
  while (i < BigInt((current).size)) {
    var j: BigInt = 0
    while (j < BigInt((alphabet).length)) {
      val c: String = alphabet.slice((j).toInt, (j + 1).toInt)
      val transformed: String = current.slice((0).toInt, (i).toInt) + c + current.slice((i + 1).toInt, (BigInt((current).size)).toInt)
      if ((words.contains(transformed)).asInstanceOf[Boolean]) {
        val new_words: ArrayBuffer[String] = remove_item(words, transformed)
        val new_path: ArrayBuffer[String] = path :+ transformed
        val result: ArrayBuffer[String] = word_ladder(transformed, new_path, target, new_words)
        if (BigInt((result).size) > 0) {
          return result
        }
      }
      j = j + 1
    }
    i = i + 1
  }
  return (ArrayBuffer()).asInstanceOf[ArrayBuffer[String]]
}

def main(): Any = {
  val w1: ArrayBuffer[String] = ArrayBuffer("hot", "dot", "dog", "lot", "log", "cog")
  println(String.valueOf(word_ladder("hit", ArrayBuffer("hit"), "cog", w1)))
  val w2: ArrayBuffer[String] = ArrayBuffer("hot", "dot", "dog", "lot", "log")
  println(String.valueOf(word_ladder("hit", ArrayBuffer("hit"), "cog", w2)))
  val w3: ArrayBuffer[String] = ArrayBuffer("load", "goad", "gold", "lead", "lord")
  println(String.valueOf(word_ladder("lead", ArrayBuffer("lead"), "gold", w3)))
  val w4: ArrayBuffer[String] = ArrayBuffer("came", "cage", "code", "cade", "gave")
  println(String.valueOf(word_ladder("game", ArrayBuffer("game"), "code", w4)))
}

val alphabet: String = "abcdefghijklmnopqrstuvwxyz"

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
