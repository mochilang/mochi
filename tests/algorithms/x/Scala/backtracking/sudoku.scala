// Generated by Mochi v0.10.59 on 2025-08-06 18:39:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_safe(grid: ArrayBuffer[ArrayBuffer[BigInt]], row: BigInt, column: BigInt, n: BigInt): Boolean = {
  for (i <- (0).toInt until (9).toInt) {
    if ((grid((row.toInt).toInt)((i.toInt).toInt) == n || grid((i.toInt).toInt)((column.toInt).toInt) == n).asInstanceOf[Boolean]) {
      return false
    }
  }
  for (i <- (0).toInt until (3).toInt) {
    for (j <- (0).toInt until (3).toInt) {
      if (grid(((row - row % 3 + i).toInt).toInt)(((column - column % 3 + j).toInt).toInt) == n) {
        return false
      }
    }
  }
  return true
}

def find_empty_location(grid: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  for (i <- (0).toInt until (9).toInt) {
    for (j <- (0).toInt until (9).toInt) {
      if (grid((i.toInt).toInt)((j.toInt).toInt) == 0) {
        return ArrayBuffer(BigInt(i.toString.toDouble.toInt), BigInt(j.toString.toDouble.toInt))
      }
    }
  }
  return ArrayBuffer()
}

def sudoku(grid: ArrayBuffer[ArrayBuffer[BigInt]]): Boolean = {
  val loc: ArrayBuffer[BigInt] = find_empty_location(grid)
  if (BigInt((loc).size) == 0) {
    return true
  }
  val row: BigInt = loc((0.toInt).toInt)
  val column: BigInt = loc((1.toInt).toInt)
  for (digit <- (1).toInt until (10).toInt) {
    if (is_safe(grid, row, column, BigInt(digit.toString.toDouble.toInt))) {
      grid((row).toInt)((column).toInt) = BigInt(digit.toString.toDouble.toInt)
      if (sudoku(grid)) {
        return true
      }
      grid((row).toInt)((column).toInt) = 0
    }
  }
  return false
}

def print_solution(grid: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  for (r <- (0).toInt until (BigInt((grid).size)).toInt) {
    var line: String = ""
    for (c <- (0).toInt until (BigInt((grid((r.toInt).toInt)).size)).toInt) {
      line = line + String.valueOf(grid((r.toInt).toInt)((c.toInt).toInt))
      if (BigInt(c.toString.toDouble.toInt) < BigInt((grid((r.toInt).toInt)).size) - 1) {
        line = line + " "
      }
    }
    println(line)
  }
}

val initial_grid: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(3, 0, 6, 5, 0, 8, 4, 0, 0), ArrayBuffer(5, 2, 0, 0, 0, 0, 0, 0, 0), ArrayBuffer(0, 8, 7, 0, 0, 0, 0, 3, 1), ArrayBuffer(0, 0, 3, 0, 1, 0, 0, 8, 0), ArrayBuffer(9, 0, 0, 8, 6, 3, 0, 0, 5), ArrayBuffer(0, 5, 0, 0, 9, 0, 6, 0, 0), ArrayBuffer(1, 3, 0, 0, 0, 0, 2, 5, 0), ArrayBuffer(0, 0, 0, 0, 0, 0, 0, 7, 4), ArrayBuffer(0, 0, 5, 2, 0, 6, 3, 0, 0))

val no_solution: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(5, 0, 6, 5, 0, 8, 4, 0, 3), ArrayBuffer(5, 2, 0, 0, 0, 0, 0, 0, 2), ArrayBuffer(1, 8, 7, 0, 0, 0, 0, 3, 1), ArrayBuffer(0, 0, 3, 0, 1, 0, 0, 8, 0), ArrayBuffer(9, 0, 0, 8, 6, 3, 0, 0, 5), ArrayBuffer(0, 5, 0, 0, 9, 0, 6, 0, 0), ArrayBuffer(1, 3, 0, 0, 0, 0, 2, 5, 0), ArrayBuffer(0, 0, 0, 0, 0, 0, 0, 7, 4), ArrayBuffer(0, 0, 5, 2, 0, 6, 3, 0, 0))

val examples: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer(initial_grid, no_solution)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var idx: BigInt = 0
    while (idx < BigInt((examples).size)) {
      println("\nExample grid:\n====================")
      print_solution(examples((idx.toInt).toInt))
      println("\nExample grid solution:")
      if (sudoku(examples((idx.toInt).toInt))) {
        print_solution(examples((idx.toInt).toInt))
      } else {
        println("Cannot find a solution.")
      }
      idx = idx + 1
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
