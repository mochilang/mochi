// Generated by Mochi v0.10.59 on 2025-08-06 18:32:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def valid_coloring(neighbours: ArrayBuffer[BigInt], colored_vertices: ArrayBuffer[BigInt], color: BigInt): Boolean = {
  var i: BigInt = 0
  while (i < BigInt((neighbours).size)) {
    if ((neighbours((i.toInt).toInt) == 1 && colored_vertices((i.toInt).toInt) == color).asInstanceOf[Boolean]) {
      return false
    }
    i = i + 1
  }
  return true
}

def util_color(graph: ArrayBuffer[ArrayBuffer[BigInt]], max_colors: BigInt, colored_vertices: ArrayBuffer[BigInt], index: BigInt): Boolean = {
  if (index == BigInt((graph).size)) {
    return true
  }
  var c: BigInt = 0
  while (c < max_colors) {
    if (valid_coloring(graph((index.toInt).toInt), colored_vertices, c)) {
      colored_vertices((index).toInt) = c
      if (util_color(graph, max_colors, colored_vertices, index + 1)) {
        return true
      }
      colored_vertices((index).toInt) = BigInt((-1).toString.toDouble.toInt)
    }
    c = c + 1
  }
  return false
}

def color(graph: ArrayBuffer[ArrayBuffer[BigInt]], max_colors: BigInt): ArrayBuffer[BigInt] = {
  var colored_vertices: ArrayBuffer[BigInt] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
  var i: BigInt = 0
  while (i < BigInt((graph).size)) {
    colored_vertices = colored_vertices :+ BigInt((-1).toString.toDouble.toInt)
    i = i + 1
  }
  if (util_color(graph, max_colors, colored_vertices, 0)) {
    return colored_vertices
  }
  return (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
}

val graph: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(0, 1, 0, 0, 0), ArrayBuffer(1, 0, 1, 0, 1), ArrayBuffer(0, 1, 0, 1, 0), ArrayBuffer(0, 1, 1, 0, 0), ArrayBuffer(0, 1, 0, 0, 0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(color(graph, 3))
    println("\n")
    println(BigInt((color(graph, 2)).size))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
