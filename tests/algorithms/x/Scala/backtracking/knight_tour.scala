// Generated by Mochi v0.10.59 on 2025-08-06 18:34:02 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def get_valid_pos(position: ArrayBuffer[BigInt], n: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val y: BigInt = position((0.toInt).toInt)
  val x: BigInt = position((1.toInt).toInt)
  val positions: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(y + 1, x + 2), ArrayBuffer(y - 1, x + 2), ArrayBuffer(y + 1, x - 2), ArrayBuffer(y - 1, x - 2), ArrayBuffer(y + 2, x + 1), ArrayBuffer(y + 2, x - 1), ArrayBuffer(y - 2, x + 1), ArrayBuffer(y - 2, x - 1))
  var permissible: ArrayBuffer[ArrayBuffer[BigInt]] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]]
  for (idx <- (0).toInt until (BigInt((positions).size)).toInt) {
    val inner: ArrayBuffer[BigInt] = positions((idx.toInt).toInt)
    val y_test: BigInt = inner((0.toInt).toInt)
    val x_test: BigInt = inner((1.toInt).toInt)
    if ((((y_test >= 0 && y_test < n).asInstanceOf[Boolean] && x_test >= 0).asInstanceOf[Boolean] && x_test < n).asInstanceOf[Boolean]) {
      permissible = permissible :+ inner
    }
  }
  return permissible
}

def is_complete(board: ArrayBuffer[ArrayBuffer[BigInt]]): Boolean = {
  for (i <- (0).toInt until (BigInt((board).size)).toInt) {
    val row: ArrayBuffer[BigInt] = board((i.toInt).toInt)
    for (j <- (0).toInt until (BigInt((row).size)).toInt) {
      if (row((j.toInt).toInt) == 0) {
        return false
      }
    }
  }
  return true
}

def open_knight_tour_helper(board: ArrayBuffer[ArrayBuffer[BigInt]], pos: ArrayBuffer[BigInt], curr: BigInt): Boolean = {
  if (is_complete(board)) {
    return true
  }
  val moves: ArrayBuffer[ArrayBuffer[BigInt]] = get_valid_pos(pos, BigInt((board).size))
  for (i <- (0).toInt until (BigInt((moves).size)).toInt) {
    val position: ArrayBuffer[BigInt] = moves((i.toInt).toInt)
    val y: BigInt = position((0.toInt).toInt)
    val x: BigInt = position((1.toInt).toInt)
    if (board((y.toInt).toInt)((x.toInt).toInt) == 0) {
      board((y).toInt)((x).toInt) = curr + 1
      if (open_knight_tour_helper(board, position, curr + 1)) {
        return true
      }
      board((y).toInt)((x).toInt) = 0
    }
  }
  return false
}

def open_knight_tour(n: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var board: ArrayBuffer[ArrayBuffer[BigInt]] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]]
  for (i <- (0).toInt until (n).toInt) {
    var row: ArrayBuffer[BigInt] = (ArrayBuffer()).asInstanceOf[ArrayBuffer[BigInt]]
    for (j <- (0).toInt until (n).toInt) {
      row = row :+ BigInt(0)
    }
    board = board :+ row
  }
  for (i <- (0).toInt until (n).toInt) {
    for (j <- (0).toInt until (n).toInt) {
      board((i).toInt)((j).toInt) = 1
      if (open_knight_tour_helper(board, (ArrayBuffer(i, j)).asInstanceOf[ArrayBuffer[BigInt]], 1)) {
        return board
      }
      board((i).toInt)((j).toInt) = 0
    }
  }
  println("Open Knight Tour cannot be performed on a board of size " + String.valueOf(n))
  return board
}

val board: ArrayBuffer[ArrayBuffer[BigInt]] = open_knight_tour(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(board((0.toInt).toInt)((0.toInt).toInt))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
