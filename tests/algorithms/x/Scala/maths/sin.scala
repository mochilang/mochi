// Generated by Mochi v0.10.61 on 2025-08-08 16:12:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def abs(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def floor(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((i.toString.toDouble) > x) {
    i = i - BigInt(1)
  }
  return i.toString.toDouble
}

def pow(x: Double, n: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < n) {
    result = result * x
    i = i + BigInt(1)
  }
  return result
}

def factorial(n: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(2)
  while (i <= n) {
    result = result * i.toString.toDouble
    i = i + BigInt(1)
  }
  return result
}

def radians(deg: Double): Double = {
  return deg * PI / 180.0
}

def taylor_sin(angle_in_degrees: Double, accuracy: BigInt, rounded_values_count: BigInt): Double = {
  val k = Math.floor(angle_in_degrees / 360.0)
  var angle: Double = angle_in_degrees - k * 360.0
  val angle_in_radians: Double = radians(angle)
  var result: Double = angle_in_radians
  var a: BigInt = BigInt(3)
  var sign: Double = -1.0
  var i: BigInt = BigInt(0)
  while (i < accuracy) {
    result = result + sign * pow(angle_in_radians, a) / factorial(a)
    sign = -sign
    a = a + BigInt(2)
    i = i + BigInt(1)
  }
  return result
}

def test_sin(): Any = {
  val eps: Double = 0.0000001
  if (Math.abs(taylor_sin(0.0, BigInt(18), BigInt(10)) - 0.0) > eps) {
    throw new RuntimeException(String.valueOf("sin(0) failed"))
  }
  if (Math.abs(taylor_sin(90.0, BigInt(18), BigInt(10)) - 1.0) > eps) {
    throw new RuntimeException(String.valueOf("sin(90) failed"))
  }
  if (Math.abs(taylor_sin(180.0, BigInt(18), BigInt(10)) - 0.0) > eps) {
    throw new RuntimeException(String.valueOf("sin(180) failed"))
  }
  if (Math.abs(taylor_sin(270.0, BigInt(18), BigInt(10)) - -1.0) > eps) {
    throw new RuntimeException(String.valueOf("sin(270) failed"))
  }
}

def main(): Any = {
  test_sin()
  val res: Double = taylor_sin(64.0, BigInt(18), BigInt(10))
  println(res)
}

val PI: Double = 3.141592653589793

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
