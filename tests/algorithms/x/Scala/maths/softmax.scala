// Generated by Mochi v0.10.61 on 2025-08-08 16:12:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def exp_approx(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: BigInt = BigInt(1)
  while (i < BigInt(20)) {
    term = term * x / i.toString.toDouble
    sum = sum + term
    i = i + BigInt(1)
  }
  return sum
}

def softmax(vec: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var exps: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((vec).size)) {
    exps = exps :+ exp_approx(vec((i.toInt).toInt))
    i = i + BigInt(1)
  }
  var total: Double = 0.0
  i = BigInt(0)
  while (i < BigInt((exps).size)) {
    total = total + exps((i.toInt).toInt)
    i = i + BigInt(1)
  }
  var result: ArrayBuffer[Double] = ArrayBuffer[Double]()
  i = BigInt(0)
  while (i < BigInt((exps).size)) {
    result = result :+ exps((i.toInt).toInt) / total
    i = i + BigInt(1)
  }
  return result
}

def abs_val(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def approx_equal(a: Double, b: Double): Boolean = {
  return abs_val(a - b) < 0.0001
}

def test_softmax(): Any = {
  val s1: ArrayBuffer[Double] = softmax(ArrayBuffer(1.0, 2.0, 3.0, 4.0))
  var sum1: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((s1).size)) {
    sum1 = sum1 + s1((i.toInt).toInt)
    i = i + BigInt(1)
  }
  if (!approx_equal(sum1, 1.0)) {
    throw new RuntimeException(String.valueOf("sum test failed"))
  }
  val s2: ArrayBuffer[Double] = softmax(ArrayBuffer(5.0, 5.0))
  if (!(approx_equal(s2((BigInt(0).toInt).toInt), 0.5) && approx_equal(s2((BigInt(1).toInt).toInt), 0.5)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("equal elements test failed"))
  }
  val s3: ArrayBuffer[Double] = softmax(ArrayBuffer(0.0))
  if (!approx_equal(s3((BigInt(0).toInt).toInt), 1.0)) {
    throw new RuntimeException(String.valueOf("zero vector test failed"))
  }
}

def main(): Any = {
  test_softmax()
  println(_str(softmax(ArrayBuffer(1.0, 2.0, 3.0, 4.0))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
