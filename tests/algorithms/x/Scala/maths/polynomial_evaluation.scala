// Generated by Mochi v0.10.61 on 2025-08-08 16:02:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pow_float(base: Double, exponent: BigInt): Double = {
  var exp: BigInt = exponent
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = result * base
    i = i + BigInt(1)
  }
  return result
}

def evaluate_poly(poly: ArrayBuffer[Double], x: Double): Double = {
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((poly).size)) {
    total = total + poly((i.toInt).toInt) * pow_float(x, i)
    i = i + BigInt(1)
  }
  return total
}

def horner(poly: ArrayBuffer[Double], x: Double): Double = {
  var result: Double = 0.0
  var i: BigInt = BigInt((poly).size) - BigInt(1)
  while (i >= BigInt(0)) {
    result = result * x + poly((i.toInt).toInt)
    i = i - BigInt(1)
  }
  return result
}

def test_polynomial_evaluation(): Any = {
  val poly: ArrayBuffer[Double] = ArrayBuffer(0.0, 0.0, 5.0, 9.3, 7.0)
  val x: Double = 10.0
  if (evaluate_poly(poly, x) != 79800.0) {
    throw new RuntimeException(String.valueOf("evaluate_poly failed"))
  }
  if (horner(poly, x) != 79800.0) {
    throw new RuntimeException(String.valueOf("horner failed"))
  }
}

def main(): Any = {
  test_polynomial_evaluation()
  val poly: ArrayBuffer[Double] = ArrayBuffer(0.0, 0.0, 5.0, 9.3, 7.0)
  val x: Double = 10.0
  println(evaluate_poly(poly, x))
  println(horner(poly, x))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
