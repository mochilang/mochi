// Generated by Mochi v0.10.66 on 2025-08-16 14:59:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def gcd(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  while (y != BigInt(0)) {
    var r: BigInt = x % y
    x = y
    y = r
  }
  if (x < BigInt(0)) {
    return -x
  }
  return x
}

def get_greatest_common_divisor(nums: ArrayBuffer[BigInt]): BigInt = {
  if (BigInt((nums).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("at least one number is required"))
  }
  var g: BigInt = nums.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  if (g <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("numbers must be integer and greater than zero"))
  }
  var i: BigInt = BigInt(1)
  while (i < BigInt((nums).size)) {
    var n: BigInt = nums.lift((i.toInt).toInt).getOrElse(BigInt(0))
    if (n <= BigInt(0)) {
      throw new RuntimeException(String.valueOf("numbers must be integer and greater than zero"))
    }
    g = gcd(g, n)
    i = i + BigInt(1)
  }
  return g
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(_str(get_greatest_common_divisor(ArrayBuffer(BigInt(18), BigInt(45))))))
    println(_str(_str(get_greatest_common_divisor(ArrayBuffer(BigInt(23), BigInt(37))))))
    println(_str(_str(get_greatest_common_divisor(ArrayBuffer(BigInt(2520), BigInt(8350))))))
    println(_str(_str(get_greatest_common_divisor(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4), BigInt(5), BigInt(6), BigInt(7), BigInt(8), BigInt(9), BigInt(10))))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
