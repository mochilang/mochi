// Generated by Mochi v0.10.67 on 2025-08-16 21:33:48 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def bubble_sort(nums: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = nums
  var n: BigInt = BigInt((arr).size)
  var i: BigInt = BigInt(0)
  while (i < n) {
    var j: BigInt = BigInt(0)
    while (j < n - BigInt(1)) {
      var a: BigInt = arr.lift((j.toInt).toInt).getOrElse(BigInt(0))
      var b: BigInt = arr.lift(((j + BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
      if (a > b) {
        arr((j).toInt) = b
        arr((j + BigInt(1)).toInt) = a
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return arr
}

def median(nums: ArrayBuffer[BigInt]): Double = {
  var sorted_list: ArrayBuffer[BigInt] = bubble_sort(nums)
  var length: BigInt = BigInt((sorted_list).size)
  var mid_index: BigInt = length / BigInt(2)
  if (length % BigInt(2) == BigInt(0)) {
    return (sorted_list.lift((mid_index.toInt).toInt).getOrElse(BigInt(0)) + sorted_list.lift(((mid_index - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))).toDouble / 2.0
  } else {
    return (sorted_list.lift((mid_index.toInt).toInt).getOrElse(BigInt(0))).toDouble
  }
  return 0.0
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(_str(median(ArrayBuffer(BigInt(0))))))
    println(_str(_str(median(ArrayBuffer(BigInt(4), BigInt(1), BigInt(3), BigInt(2))))))
    println(_str(_str(median(ArrayBuffer(BigInt(2), BigInt(70), BigInt(6), BigInt(50), BigInt(20), BigInt(8), BigInt(4))))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
