// Generated by Mochi v0.10.60 on 2025-08-08 11:21:20 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def integer_square_root(num: BigInt): BigInt = {
  if (num < BigInt(0)) {
    throw new RuntimeException(String.valueOf("num must be non-negative integer"))
  }
  if (num < BigInt(2)) {
    return num
  }
  var left_bound: BigInt = BigInt(0)
  var right_bound: BigInt = num / BigInt(2)
  while (left_bound <= right_bound) {
    val mid: BigInt = left_bound + (right_bound - left_bound) / BigInt(2)
    val mid_squared: BigInt = mid * mid
    if (mid_squared == num) {
      return mid
    }
    if (mid_squared < num) {
      left_bound = mid + BigInt(1)
    } else {
      right_bound = mid - BigInt(1)
    }
  }
  return right_bound
}

def test_integer_square_root(): Any = {
  val expected: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(1), BigInt(1), BigInt(1), BigInt(2), BigInt(2), BigInt(2), BigInt(2), BigInt(2), BigInt(3), BigInt(3), BigInt(3), BigInt(3), BigInt(3), BigInt(3), BigInt(3), BigInt(4), BigInt(4))
  var i: BigInt = BigInt(0)
  while (i < BigInt((expected).size)) {
    val result: BigInt = integer_square_root(i)
    if (result != expected((i.toInt).toInt)) {
      throw new RuntimeException(String.valueOf("test failed at index " + String.valueOf(i)))
    }
    i = i + BigInt(1)
  }
  if (integer_square_root(BigInt(625)) != BigInt(25)) {
    throw new RuntimeException(String.valueOf("sqrt of 625 incorrect"))
  }
  if (integer_square_root(BigInt(2147483647)) != BigInt(46340)) {
    throw new RuntimeException(String.valueOf("sqrt of max int incorrect"))
  }
}

def main(): Any = {
  test_integer_square_root()
  println(String.valueOf(integer_square_root(BigInt(625))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
