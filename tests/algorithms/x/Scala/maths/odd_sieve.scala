// Generated by Mochi v0.10.60 on 2025-08-08 11:33:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def odd_sieve(num: BigInt): ArrayBuffer[BigInt] = {
  if (num <= BigInt(2)) {
    return ArrayBuffer[BigInt]()
  }
  if (num == BigInt(3)) {
    return ArrayBuffer(BigInt(2))
  }
  val size: BigInt = num / BigInt(2) - BigInt(1)
  var sieve: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var idx: BigInt = BigInt(0)
  while (idx < size) {
    sieve = sieve :+ true
    idx = idx + BigInt(1)
  }
  var i: BigInt = BigInt(3)
  while (i * i <= num) {
    val s_idx: BigInt = i / BigInt(2) - BigInt(1)
    if (sieve((s_idx.toInt).toInt)) {
      var j: BigInt = i * i
      while (j < num) {
        val j_idx: BigInt = j / BigInt(2) - BigInt(1)
        sieve((j_idx).toInt) = false
        j = j + BigInt(2) * i
      }
    }
    i = i + BigInt(2)
  }
  var primes: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(2))
  var n: BigInt = BigInt(3)
  var k: BigInt = BigInt(0)
  while (n < num) {
    if (sieve((k.toInt).toInt)) {
      primes = primes :+ n
    }
    n = n + BigInt(2)
    k = k + BigInt(1)
  }
  return primes
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(odd_sieve(BigInt(2)))
    println(odd_sieve(BigInt(3)))
    println(odd_sieve(BigInt(10)))
    println(odd_sieve(BigInt(20)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
