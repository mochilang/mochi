// Generated by Mochi v0.10.67 on 2025-08-16 21:33:56 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def contains_int(xs: ArrayBuffer[BigInt], x: BigInt): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse(BigInt(0)) == x) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def contains_string(xs: ArrayBuffer[String], x: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse("") == x) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def count_int(xs: ArrayBuffer[BigInt], x: BigInt): BigInt = {
  var cnt: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse(BigInt(0)) == x) {
      cnt = cnt + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return cnt
}

def count_string(xs: ArrayBuffer[String], x: String): BigInt = {
  var cnt: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs.lift((i.toInt).toInt).getOrElse("") == x) {
      cnt = cnt + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return cnt
}

def sort_int(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = xs
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    var j: BigInt = i + BigInt(1)
    while (j < BigInt((arr).size)) {
      if (arr.lift((j.toInt).toInt).getOrElse(BigInt(0)) < arr.lift((i.toInt).toInt).getOrElse(BigInt(0))) {
        var tmp: BigInt = arr.lift((i.toInt).toInt).getOrElse(BigInt(0))
        arr((i).toInt) = arr.lift((j.toInt).toInt).getOrElse(BigInt(0))
        arr((j).toInt) = tmp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return arr
}

def sort_string(xs: ArrayBuffer[String]): ArrayBuffer[String] = {
  var arr: ArrayBuffer[String] = xs
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size)) {
    var j: BigInt = i + BigInt(1)
    while (j < BigInt((arr).size)) {
      if (arr.lift((j.toInt).toInt).getOrElse("") < arr.lift((i.toInt).toInt).getOrElse("")) {
        var tmp: String = arr.lift((i.toInt).toInt).getOrElse("")
        arr((i).toInt) = arr.lift((j.toInt).toInt).getOrElse("")
        arr((j).toInt) = tmp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return arr
}

def mode_int(lst: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  if (BigInt((lst).size) == BigInt(0)) {
    return ArrayBuffer[BigInt]()
  }
  var counts: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((lst).size)) {
    counts = (counts :+ count_int(lst, lst.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    i = i + BigInt(1)
  }
  var max_count: BigInt = BigInt(0)
  i = BigInt(0)
  while (i < BigInt((counts).size)) {
    if (counts.lift((i.toInt).toInt).getOrElse(BigInt(0)) > max_count) {
      max_count = counts.lift((i.toInt).toInt).getOrElse(BigInt(0))
    }
    i = i + BigInt(1)
  }
  var modes: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < BigInt((lst).size)) {
    if (counts.lift((i.toInt).toInt).getOrElse(BigInt(0)) == max_count) {
      var v: BigInt = lst.lift((i.toInt).toInt).getOrElse(BigInt(0))
      if (!contains_int(modes, v)) {
        modes = (modes :+ v)
      }
    }
    i = i + BigInt(1)
  }
  return sort_int(modes)
}

def mode_string(lst: ArrayBuffer[String]): ArrayBuffer[String] = {
  if (BigInt((lst).size) == BigInt(0)) {
    return ArrayBuffer[String]()
  }
  var counts: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((lst).size)) {
    counts = (counts :+ count_string(lst, lst.lift((i.toInt).toInt).getOrElse("")))
    i = i + BigInt(1)
  }
  var max_count: BigInt = BigInt(0)
  i = BigInt(0)
  while (i < BigInt((counts).size)) {
    if (counts.lift((i.toInt).toInt).getOrElse(BigInt(0)) > max_count) {
      max_count = counts.lift((i.toInt).toInt).getOrElse(BigInt(0))
    }
    i = i + BigInt(1)
  }
  var modes: ArrayBuffer[String] = ArrayBuffer[String]()
  i = BigInt(0)
  while (i < BigInt((lst).size)) {
    if (counts.lift((i.toInt).toInt).getOrElse(BigInt(0)) == max_count) {
      var v: String = lst.lift((i.toInt).toInt).getOrElse("")
      if (!contains_string(modes, v)) {
        modes = (modes :+ v)
      }
    }
    i = i + BigInt(1)
  }
  return sort_string(modes)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(mode_int(ArrayBuffer(BigInt(2), BigInt(3), BigInt(4), BigInt(5), BigInt(3), BigInt(4), BigInt(2), BigInt(5), BigInt(2), BigInt(2), BigInt(4), BigInt(2), BigInt(2), BigInt(2)))))
    println(_str(mode_int(ArrayBuffer(BigInt(3), BigInt(4), BigInt(5), BigInt(3), BigInt(4), BigInt(2), BigInt(5), BigInt(2), BigInt(2), BigInt(4), BigInt(4), BigInt(2), BigInt(2), BigInt(2)))))
    println(_str(mode_int(ArrayBuffer(BigInt(3), BigInt(4), BigInt(5), BigInt(3), BigInt(4), BigInt(2), BigInt(5), BigInt(2), BigInt(2), BigInt(4), BigInt(4), BigInt(4), BigInt(2), BigInt(2), BigInt(4), BigInt(2)))))
    println(_str(mode_string(ArrayBuffer("x", "y", "y", "z"))))
    println(_str(mode_string(ArrayBuffer("x", "x", "y", "y", "z"))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
