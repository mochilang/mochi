// Generated by Mochi v0.10.59 on 2025-08-07 12:51:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def find_min_iterative(nums: ArrayBuffer[Double]): Double = {
  if (BigInt((nums).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("find_min_iterative() arg is an empty sequence"))
  }
  var min_num: Double = nums((BigInt(0).toInt).toInt)
  var i: BigInt = BigInt(0)
  while (i < BigInt((nums).size)) {
    val num: Double = nums((i.toInt).toInt)
    if (num < min_num) {
      min_num = num
    }
    i = i + BigInt(1)
  }
  return min_num
}

def find_min_recursive(nums: ArrayBuffer[Double], left: BigInt, right: BigInt): Double = {
  val n: BigInt = BigInt((nums).size)
  if (n == BigInt(0)) {
    throw new RuntimeException(String.valueOf("find_min_recursive() arg is an empty sequence"))
  }
  if ((((left >= n || left < BigInt(0) - n).asInstanceOf[Boolean] || right >= n).asInstanceOf[Boolean] || right < BigInt(0) - n).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("list index out of range"))
  }
  var l: BigInt = left
  var r: BigInt = right
  if (l < BigInt(0)) {
    l = n + l
  }
  if (r < BigInt(0)) {
    r = n + r
  }
  if (l == r) {
    return nums((l.toInt).toInt)
  }
  val mid: BigInt = (l + r) / BigInt(2)
  val left_min: Double = find_min_recursive(nums, l, mid)
  val right_min: Double = find_min_recursive(nums, mid + BigInt(1), r)
  if (left_min <= right_min) {
    return left_min
  }
  return right_min
}

def test_find_min(): Any = {
  val a: ArrayBuffer[Double] = ArrayBuffer(3.0, 2.0, 1.0)
  if (find_min_iterative(a) != 1.0) {
    throw new RuntimeException(String.valueOf("iterative test1 failed"))
  }
  if (find_min_recursive(a, BigInt(0), BigInt((a).size) - BigInt(1)) != 1.0) {
    throw new RuntimeException(String.valueOf("recursive test1 failed"))
  }
  val b: ArrayBuffer[Double] = ArrayBuffer(-3.0, -2.0, -1.0)
  if (find_min_iterative(b) != -3.0) {
    throw new RuntimeException(String.valueOf("iterative test2 failed"))
  }
  if (find_min_recursive(b, BigInt(0), BigInt((b).size) - BigInt(1)) != -3.0) {
    throw new RuntimeException(String.valueOf("recursive test2 failed"))
  }
  val c: ArrayBuffer[Double] = ArrayBuffer(3.0, -3.0, 0.0)
  if (find_min_iterative(c) != -3.0) {
    throw new RuntimeException(String.valueOf("iterative test3 failed"))
  }
  if (find_min_recursive(c, BigInt(0), BigInt((c).size) - BigInt(1)) != -3.0) {
    throw new RuntimeException(String.valueOf("recursive test3 failed"))
  }
  val d: ArrayBuffer[Double] = ArrayBuffer(1.0, 3.0, 5.0, 7.0, 9.0, 2.0, 4.0, 6.0, 8.0, 10.0)
  if (find_min_recursive(d, BigInt(0) - BigInt((d).size), BigInt(0) - BigInt(1)) != 1.0) {
    throw new RuntimeException(String.valueOf("negative index test failed"))
  }
}

def main(): Any = {
  test_find_min()
  val sample: ArrayBuffer[Double] = ArrayBuffer(0.0, 1.0, 2.0, 3.0, 4.0, 5.0, -3.0, 24.0, -56.0)
  println(String.valueOf(find_min_iterative(sample)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
