// Generated by Mochi v0.10.60 on 2025-08-08 11:21:05 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_prime(n: BigInt): Boolean = {
  if (n <= BigInt(1)) {
    return false
  }
  if (n <= BigInt(3)) {
    return true
  }
  if (n % BigInt(2) == BigInt(0)) {
    return false
  }
  var i: BigInt = BigInt(3)
  while (i * i <= n) {
    if (n % i == BigInt(0)) {
      return false
    }
    i = i + BigInt(2)
  }
  return true
}

def is_germain_prime(number: BigInt): Boolean = {
  if (number < BigInt(1)) {
    throw new RuntimeException(String.valueOf("Input value must be a positive integer"))
  }
  return (is_prime(number) && is_prime(BigInt(2) * number + BigInt(1))).asInstanceOf[Boolean]
}

def is_safe_prime(number: BigInt): Boolean = {
  if (number < BigInt(1)) {
    throw new RuntimeException(String.valueOf("Input value must be a positive integer"))
  }
  if ((number - BigInt(1)) % BigInt(2) != BigInt(0)) {
    return false
  }
  return (is_prime(number) && is_prime((number - BigInt(1)) / BigInt(2))).asInstanceOf[Boolean]
}

def test_is_germain_prime(): Any = {
  if (!is_germain_prime(BigInt(3))) {
    throw new RuntimeException(String.valueOf("is_germain_prime(3) failed"))
  }
  if (!is_germain_prime(BigInt(11))) {
    throw new RuntimeException(String.valueOf("is_germain_prime(11) failed"))
  }
  if (is_germain_prime(BigInt(4))) {
    throw new RuntimeException(String.valueOf("is_germain_prime(4) failed"))
  }
  if (!is_germain_prime(BigInt(23))) {
    throw new RuntimeException(String.valueOf("is_germain_prime(23) failed"))
  }
  if (is_germain_prime(BigInt(13))) {
    throw new RuntimeException(String.valueOf("is_germain_prime(13) failed"))
  }
  if (is_germain_prime(BigInt(20))) {
    throw new RuntimeException(String.valueOf("is_germain_prime(20) failed"))
  }
}

def test_is_safe_prime(): Any = {
  if (!is_safe_prime(BigInt(5))) {
    throw new RuntimeException(String.valueOf("is_safe_prime(5) failed"))
  }
  if (!is_safe_prime(BigInt(11))) {
    throw new RuntimeException(String.valueOf("is_safe_prime(11) failed"))
  }
  if (is_safe_prime(BigInt(1))) {
    throw new RuntimeException(String.valueOf("is_safe_prime(1) failed"))
  }
  if (is_safe_prime(BigInt(2))) {
    throw new RuntimeException(String.valueOf("is_safe_prime(2) failed"))
  }
  if (is_safe_prime(BigInt(3))) {
    throw new RuntimeException(String.valueOf("is_safe_prime(3) failed"))
  }
  if (!is_safe_prime(BigInt(47))) {
    throw new RuntimeException(String.valueOf("is_safe_prime(47) failed"))
  }
}

def main(): Any = {
  test_is_germain_prime()
  test_is_safe_prime()
  println(is_germain_prime(BigInt(23)))
  println(is_safe_prime(BigInt(47)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
