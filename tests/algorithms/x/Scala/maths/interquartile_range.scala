// Generated by Mochi v0.10.60 on 2025-08-08 11:21:26 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def bubble_sort(nums: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var arr: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((nums).size)) {
    arr = arr :+ nums((i.toInt).toInt)
    i = i + BigInt(1)
  }
  var n: BigInt = BigInt((arr).size)
  var a: BigInt = BigInt(0)
  while (a < n) {
    var b: BigInt = BigInt(0)
    while (b < n - a - BigInt(1)) {
      if (arr((b.toInt).toInt) > arr(((b + BigInt(1)).toInt).toInt)) {
        val temp: Double = arr((b.toInt).toInt)
        arr((b).toInt) = arr(((b + BigInt(1)).toInt).toInt)
        arr((b + BigInt(1)).toInt) = temp
      }
      b = b + BigInt(1)
    }
    a = a + BigInt(1)
  }
  return arr
}

def find_median(nums: ArrayBuffer[Double]): Double = {
  val length: BigInt = BigInt((nums).size)
  val div: BigInt = length / BigInt(2)
  val mod: BigInt = length % BigInt(2)
  if (mod != BigInt(0)) {
    return nums((div.toInt).toInt)
  }
  return (nums((div.toInt).toInt) + nums(((div - BigInt(1)).toInt).toInt)) / 2.0
}

def interquartile_range(nums: ArrayBuffer[Double]): Double = {
  if (BigInt((nums).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("The list is empty. Provide a non-empty list."))
  }
  val sorted: ArrayBuffer[Double] = bubble_sort(nums)
  val length: BigInt = BigInt((sorted).size)
  val div: BigInt = length / BigInt(2)
  val mod: BigInt = length % BigInt(2)
  var lower: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < div) {
    lower = lower :+ sorted((i.toInt).toInt)
    i = i + BigInt(1)
  }
  var upper: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var j: BigInt = div + mod
  while (j < length) {
    upper = upper :+ sorted((j.toInt).toInt)
    j = j + BigInt(1)
  }
  val q1: Double = find_median(lower)
  val q3: Double = find_median(upper)
  return q3 - q1
}

def absf(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def float_equal(a: Double, b: Double): Boolean = {
  val diff: Double = absf(a - b)
  return diff < 0.0000001
}

def test_interquartile_range(): Any = {
  if (!float_equal(interquartile_range(ArrayBuffer(4.0, 1.0, 2.0, 3.0, 2.0)), 2.0)) {
    throw new RuntimeException(String.valueOf("interquartile_range case1 failed"))
  }
  if (!float_equal(interquartile_range(ArrayBuffer(-2.0, -7.0, -10.0, 9.0, 8.0, 4.0, -67.0, 45.0)), 17.0)) {
    throw new RuntimeException(String.valueOf("interquartile_range case2 failed"))
  }
  if (!float_equal(interquartile_range(ArrayBuffer(-2.1, -7.1, -10.1, 9.1, 8.1, 4.1, -67.1, 45.1)), 17.2)) {
    throw new RuntimeException(String.valueOf("interquartile_range case3 failed"))
  }
  if (!float_equal(interquartile_range(ArrayBuffer(0.0, 0.0, 0.0, 0.0, 0.0)), 0.0)) {
    throw new RuntimeException(String.valueOf("interquartile_range case4 failed"))
  }
}

def main(): Any = {
  test_interquartile_range()
  println(String.valueOf(interquartile_range(ArrayBuffer(4.0, 1.0, 2.0, 3.0, 2.0))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
