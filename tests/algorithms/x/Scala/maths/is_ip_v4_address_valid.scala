// Generated by Mochi v0.10.60 on 2025-08-08 11:23:32 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def split_by_dot(s: String): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var current: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if (c == ".") {
      res = res :+ current
      current = ""
    } else {
      current = current + c
    }
    i = i + BigInt(1)
  }
  res = res :+ current
  return res
}

def is_digit_str(s: String): Boolean = {
  if (BigInt((s).size) == BigInt(0)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if ((c.charAt(BigInt(0).toInt) < '0' || c.charAt(BigInt(0).toInt) > '9').asInstanceOf[Boolean]) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def parse_decimal(s: String): BigInt = {
  var value: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    value = value * BigInt(10) + BigInt(c.toString.toDouble.toInt)
    i = i + BigInt(1)
  }
  return value
}

def is_ip_v4_address_valid(ip: String): Boolean = {
  val octets: ArrayBuffer[String] = split_by_dot(ip)
  if (BigInt((octets).size) != BigInt(4)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt(4)) {
    val oct: String = octets((i.toInt).toInt)
    if (!is_digit_str(oct)) {
      return false
    }
    val number: BigInt = parse_decimal(oct)
    if (BigInt((String.valueOf(number)).length) != BigInt((oct).size)) {
      return false
    }
    if ((number < BigInt(0) || number > BigInt(255)).asInstanceOf[Boolean]) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(is_ip_v4_address_valid("192.168.0.23")))
    println(String.valueOf(is_ip_v4_address_valid("192.256.15.8")))
    println(String.valueOf(is_ip_v4_address_valid("172.100.0.8")))
    println(String.valueOf(is_ip_v4_address_valid("255.256.0.256")))
    println(String.valueOf(is_ip_v4_address_valid("1.2.33333333.4")))
    println(String.valueOf(is_ip_v4_address_valid("1.2.-3.4")))
    println(String.valueOf(is_ip_v4_address_valid("1.2.3")))
    println(String.valueOf(is_ip_v4_address_valid("1.2.3.4.5")))
    println(String.valueOf(is_ip_v4_address_valid("1.2.A.4")))
    println(String.valueOf(is_ip_v4_address_valid("0.0.0.0")))
    println(String.valueOf(is_ip_v4_address_valid("1.2.3.")))
    println(String.valueOf(is_ip_v4_address_valid("1.2.3.05")))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
