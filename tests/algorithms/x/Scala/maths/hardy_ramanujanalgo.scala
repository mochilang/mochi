// Generated by Mochi v0.10.67 on 2025-08-17 09:32:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def exact_prime_factor_count(n: BigInt): BigInt = {
  var count: BigInt = BigInt(0)
  var num: BigInt = n
  if (num % BigInt(2) == BigInt(0)) {
    count = count + BigInt(1)
    while (num % BigInt(2) == BigInt(0)) {
      num = num / BigInt(2)
    }
  }
  var i: BigInt = BigInt(3)
  while (i * i <= num) {
    if (num % i == BigInt(0)) {
      count = count + BigInt(1)
      while (num % i == BigInt(0)) {
        num = num / i
      }
    }
    i = i + BigInt(2)
  }
  if (num > BigInt(2)) {
    count = count + BigInt(1)
  }
  return count
}

def ln(x: Double): Double = {
  var ln2: Double = 0.6931471805599453
  var y: Double = x
  var k: Double = 0.0
  while (y > 2.0) {
    y = y / 2.0
    k = k + ln2
  }
  while (y < 1.0) {
    y = y * 2.0
    k = k - ln2
  }
  var t: Double = (y - 1.0) / (y + 1.0)
  var term: Double = t
  var sum: Double = 0.0
  var n: BigInt = BigInt(1)
  while (n <= BigInt(19)) {
    sum = sum + term / n.toString.toDouble
    term = term * t * t
    n = n + BigInt(2)
  }
  return k + 2.0 * sum
}

def floor(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((i.toString.toDouble) > x) {
    i = i - BigInt(1)
  }
  return i.toString.toDouble
}

def round4(x: Double): Double = {
  var m: Double = 10000.0
  return Math.floor(x * m + 0.5) / m
}

def main(): Any = {
  var n: BigInt = BigInt(51242183)
  var count: BigInt = exact_prime_factor_count(n)
  println(_str("The number of distinct prime factors is/are " + _str(count)))
  var loglog: Double = math.log(math.log(n.toString.toDouble))
  println(_str("The value of log(log(n)) is " + _str(round4(loglog))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
