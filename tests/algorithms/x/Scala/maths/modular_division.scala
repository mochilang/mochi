// Generated by Mochi v0.10.60 on 2025-08-08 11:25:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def mod(a: BigInt, n: BigInt): BigInt = {
  val r: BigInt = a % n
  if (r < BigInt(0)) {
    return r + n
  }
  return r
}

def greatest_common_divisor(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = (if (a < BigInt(0)) -a else a)
  var y: BigInt = (if (b < BigInt(0)) -b else b)
  while (y != BigInt(0)) {
    val t: BigInt = x % y
    x = y
    y = t
  }
  return x
}

def extended_gcd(a: BigInt, b: BigInt): ArrayBuffer[BigInt] = {
  if (b == BigInt(0)) {
    return ArrayBuffer(a, BigInt(1), BigInt(0))
  }
  val res: ArrayBuffer[BigInt] = extended_gcd(b, a % b)
  val d: BigInt = res((BigInt(0).toInt).toInt)
  val p: BigInt = res((BigInt(1).toInt).toInt)
  val q: BigInt = res((BigInt(2).toInt).toInt)
  val x: BigInt = q
  val y: BigInt = p - q * (a / b)
  return ArrayBuffer(d, x, y)
}

def extended_euclid(a: BigInt, b: BigInt): ArrayBuffer[BigInt] = {
  if (b == BigInt(0)) {
    return ArrayBuffer(BigInt(1), BigInt(0))
  }
  val res: ArrayBuffer[BigInt] = extended_euclid(b, a % b)
  val x: BigInt = res((BigInt(1).toInt).toInt)
  val y: BigInt = res((BigInt(0).toInt).toInt) - a / b * res((BigInt(1).toInt).toInt)
  return ArrayBuffer(x, y)
}

def invert_modulo(a: BigInt, n: BigInt): BigInt = {
  val res: ArrayBuffer[BigInt] = extended_euclid(a, n)
  val inv: BigInt = res((BigInt(0).toInt).toInt)
  return mod(inv, n)
}

def modular_division(a: BigInt, b: BigInt, n: BigInt): BigInt = {
  if (n <= BigInt(1)) {
    throw new RuntimeException(String.valueOf("n must be > 1"))
  }
  if (a <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("a must be > 0"))
  }
  if (greatest_common_divisor(a, n) != BigInt(1)) {
    throw new RuntimeException(String.valueOf("gcd(a,n) != 1"))
  }
  val eg: ArrayBuffer[BigInt] = extended_gcd(n, a)
  val s: BigInt = eg((BigInt(2).toInt).toInt)
  return mod(b * s, n)
}

def modular_division2(a: BigInt, b: BigInt, n: BigInt): BigInt = {
  val s: BigInt = invert_modulo(a, n)
  return mod(b * s, n)
}

def tests(): Any = {
  if (modular_division(BigInt(4), BigInt(8), BigInt(5)) != BigInt(2)) {
    throw new RuntimeException(String.valueOf("md1"))
  }
  if (modular_division(BigInt(3), BigInt(8), BigInt(5)) != BigInt(1)) {
    throw new RuntimeException(String.valueOf("md2"))
  }
  if (modular_division(BigInt(4), BigInt(11), BigInt(5)) != BigInt(4)) {
    throw new RuntimeException(String.valueOf("md3"))
  }
  if (modular_division2(BigInt(4), BigInt(8), BigInt(5)) != BigInt(2)) {
    throw new RuntimeException(String.valueOf("md21"))
  }
  if (modular_division2(BigInt(3), BigInt(8), BigInt(5)) != BigInt(1)) {
    throw new RuntimeException(String.valueOf("md22"))
  }
  if (modular_division2(BigInt(4), BigInt(11), BigInt(5)) != BigInt(4)) {
    throw new RuntimeException(String.valueOf("md23"))
  }
  if (invert_modulo(BigInt(2), BigInt(5)) != BigInt(3)) {
    throw new RuntimeException(String.valueOf("inv"))
  }
  val eg: ArrayBuffer[BigInt] = extended_gcd(BigInt(10), BigInt(6))
  if (((eg((BigInt(0).toInt).toInt) != BigInt(2) || eg((BigInt(1).toInt).toInt) != -BigInt(1)).asInstanceOf[Boolean] || eg((BigInt(2).toInt).toInt) != BigInt(2)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("eg"))
  }
  val eu: ArrayBuffer[BigInt] = extended_euclid(BigInt(10), BigInt(6))
  if ((eu((BigInt(0).toInt).toInt) != -BigInt(1) || eu((BigInt(1).toInt).toInt) != BigInt(2)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("eu"))
  }
  if (greatest_common_divisor(BigInt(121), BigInt(11)) != BigInt(11)) {
    throw new RuntimeException(String.valueOf("gcd"))
  }
}

def main(): Any = {
  tests()
  println(String.valueOf(modular_division(BigInt(4), BigInt(8), BigInt(5))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
