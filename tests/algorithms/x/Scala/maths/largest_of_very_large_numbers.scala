// Generated by Mochi v0.10.60 on 2025-08-08 11:24:19 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def ln(x: Double): Double = {
  val t: Double = (x - 1.0) / (x + 1.0)
  var term: Double = t
  var sum: Double = 0.0
  var k: BigInt = BigInt(1)
  while (k <= BigInt(99)) {
    sum = sum + term / k.toString.toDouble
    term = term * t * t
    k = k + BigInt(2)
  }
  return 2.0 * sum
}

def log10(x: Double): Double = {
  return ln(x) / ln(10.0)
}

def absf(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def res(x: BigInt, y: BigInt): Double = {
  if (x == BigInt(0)) {
    return 0.0
  }
  if (y == BigInt(0)) {
    return 1.0
  }
  if (x < BigInt(0)) {
    throw new RuntimeException(String.valueOf("math domain error"))
  }
  return y.toString.toDouble * log10(x.toString.toDouble)
}

def test_res(): Any = {
  if (absf(res(BigInt(5), BigInt(7)) - 4.892790030352132) > 0.0000001) {
    throw new RuntimeException(String.valueOf("res(5,7) failed"))
  }
  if (res(BigInt(0), BigInt(5)) != 0.0) {
    throw new RuntimeException(String.valueOf("res(0,5) failed"))
  }
  if (res(BigInt(3), BigInt(0)) != 1.0) {
    throw new RuntimeException(String.valueOf("res(3,0) failed"))
  }
}

def compare(x1: BigInt, y1: BigInt, x2: BigInt, y2: BigInt): String = {
  val r1: Double = res(x1, y1)
  val r2: Double = res(x2, y2)
  if (r1 > r2) {
    return "Largest number is " + String.valueOf(x1) + " ^ " + String.valueOf(y1)
  }
  if (r2 > r1) {
    return "Largest number is " + String.valueOf(x2) + " ^ " + String.valueOf(y2)
  }
  return "Both are equal"
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    test_res()
    println(compare(BigInt(5), BigInt(7), BigInt(4), BigInt(8)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
