// Generated by Mochi v0.10.67 on 2025-08-16 21:36:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def sqrtApprox(x: Double): Double = {
  var guess: Double = x / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def abs_val(num: Double): Double = {
  if (num < 0.0) {
    return -num
  }
  return num
}

def approx_equal(a: Double, b: Double, eps: Double): Boolean = {
  return abs_val(a - b) < eps
}

def dodecahedron_surface_area(edge: BigInt): Double = {
  if (edge <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("Length must be a positive."))
  }
  var term: Double = sqrtApprox(25.0 + 10.0 * sqrtApprox(5.0))
  var e: Double = edge.toString.toDouble
  return 3.0 * term * e * e
}

def dodecahedron_volume(edge: BigInt): Double = {
  if (edge <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("Length must be a positive."))
  }
  var term: Double = (15.0 + 7.0 * sqrtApprox(5.0)) / 4.0
  var e: Double = edge.toString.toDouble
  return term * e * e * e
}

def test_dodecahedron(): Any = {
  if (!approx_equal(dodecahedron_surface_area(BigInt(5)), 516.1432201766901, 0.0001)) {
    throw new RuntimeException(String.valueOf("surface area 5 failed"))
  }
  if (!approx_equal(dodecahedron_surface_area(BigInt(10)), 2064.5728807067603, 0.0001)) {
    throw new RuntimeException(String.valueOf("surface area 10 failed"))
  }
  if (!approx_equal(dodecahedron_volume(BigInt(5)), 957.8898700780791, 0.0001)) {
    throw new RuntimeException(String.valueOf("volume 5 failed"))
  }
  if (!approx_equal(dodecahedron_volume(BigInt(10)), 7663.118960624633, 0.0001)) {
    throw new RuntimeException(String.valueOf("volume 10 failed"))
  }
}

def main(): Any = {
  test_dodecahedron()
  println(_str(dodecahedron_surface_area(BigInt(5))))
  println(_str(dodecahedron_volume(BigInt(5))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
