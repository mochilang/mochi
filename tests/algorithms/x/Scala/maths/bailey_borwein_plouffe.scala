// Generated by Mochi v0.10.67 on 2025-08-16 21:34:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def mod_pow(base: BigInt, exponent: BigInt, modulus: BigInt): BigInt = {
  var result: BigInt = BigInt(1)
  var b: BigInt = base % modulus
  var e: BigInt = exponent
  while (e > BigInt(0)) {
    if (e % BigInt(2) == BigInt(1)) {
      result = result * b % modulus
    }
    b = b * b % modulus
    e = e / BigInt(2)
  }
  return result
}

def pow_float(base: Double, exponent: BigInt): Double = {
  var exp: BigInt = exponent
  var result: Double = 1.0
  if (exp < BigInt(0)) {
    exp = -exp
  }
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = result * base
    i = i + BigInt(1)
  }
  if (exponent < BigInt(0)) {
    result = 1.0 / result
  }
  return result
}

def hex_digit(n: BigInt): String = {
  if (n < BigInt(10)) {
    return (_str(n)).toString
  }
  var letters: ArrayBuffer[String] = ArrayBuffer("a", "b", "c", "d", "e", "f")
  return letters.lift(((n - BigInt(10)).toInt).toInt).getOrElse("")
}

def floor_float(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((i.toDouble) > x) {
    i = i - BigInt(1)
  }
  return i.toDouble
}

def subsum(digit_pos_to_extract: BigInt, denominator_addend: BigInt, precision: BigInt): Double = {
  var total: Double = 0.0
  var sum_index: BigInt = BigInt(0)
  while (sum_index < digit_pos_to_extract + precision) {
    var denominator: BigInt = BigInt(8) * sum_index + denominator_addend
    if (sum_index < digit_pos_to_extract) {
      var exponent: BigInt = digit_pos_to_extract - BigInt(1) - sum_index
      var exponential_term: BigInt = mod_pow(BigInt(16), exponent, denominator)
      total = total + exponential_term.toString.toDouble / denominator.toString.toDouble
    } else {
      var exponent: BigInt = digit_pos_to_extract - BigInt(1) - sum_index
      var exponential_term: Double = pow_float(16.0, exponent)
      total = total + exponential_term / denominator.toString.toDouble
    }
    sum_index = sum_index + BigInt(1)
  }
  return total
}

def bailey_borwein_plouffe(digit_position: BigInt, precision: BigInt): String = {
  if (digit_position <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("Digit position must be a positive integer"))
  }
  if (precision < BigInt(0)) {
    throw new RuntimeException(String.valueOf("Precision must be a nonnegative integer"))
  }
  var sum_result: Double = 4.0 * subsum(digit_position, BigInt(1), precision) - 2.0 * subsum(digit_position, BigInt(4), precision) - 1.0 * subsum(digit_position, BigInt(5), precision) - 1.0 * subsum(digit_position, BigInt(6), precision)
  var fraction: Double = sum_result - floor_float(sum_result)
  var digit: BigInt = BigInt((fraction * 16.0).toInt)
  var hd: String = hex_digit(digit)
  return hd
}

var digits: String = ""

var i: BigInt = BigInt(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    while (i <= BigInt(10)) {
      digits = digits + bailey_borwein_plouffe(i, BigInt(1000))
      i = i + BigInt(1)
    }
    println(_str(digits))
    println(_str(bailey_borwein_plouffe(BigInt(5), BigInt(10000))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
