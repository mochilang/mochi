// Generated by Mochi v0.10.60 on 2025-08-08 11:31:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def rand_float(): Double = {
  rand_seed = (BigInt(1103515245) * rand_seed + BigInt(12345)) % BigInt("2147483648")
  return rand_seed.toDouble / 2147483648.0
}

def rand_range(min_val: Double, max_val: Double): Double = {
  return rand_float() * (max_val - min_val) + min_val
}

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def sqrtApprox(x: Double): Double = {
  if (x == 0.0) {
    return 0.0
  }
  var guess: Double = x / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def pi_estimator(iterations: BigInt): Any = {
  var inside: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < iterations) {
    val x: Double = rand_range(-1.0, 1.0)
    val y: Double = rand_range(-1.0, 1.0)
    if (x * x + y * y <= 1.0) {
      inside = inside + 1.0
    }
    i = i + BigInt(1)
  }
  val proportion: Double = inside / iterations.toString.toDouble
  val pi_estimate: Double = proportion * 4.0
  println((List("The estimated value of pi is", pi_estimate)).mkString(" "))
  println((List("The numpy value of pi is", PI)).mkString(" "))
  println((List("The total error is", abs_float(PI - pi_estimate))).mkString(" "))
}

def area_under_curve_estimator(iterations: BigInt, f: (Double) => Double, min_value: Double, max_value: Double): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < iterations) {
    val x: Double = rand_range(min_value, max_value)
    sum = sum + f(x)
    i = i + BigInt(1)
  }
  val expected: Double = sum / iterations.toString.toDouble
  return expected * (max_value - min_value)
}

def area_under_line_estimator_check(iterations: BigInt, min_value: Double, max_value: Double): Any = {
  def identity_function(x: Double): Double = {
    return x
  }
  val estimated_value: Double = area_under_curve_estimator(iterations, (identity_function _).asInstanceOf[(Double) => Double], min_value, max_value)
  val expected_value: Double = (max_value * max_value - min_value * min_value) / 2.0
  println("******************")
  println((List("Estimating area under y=x where x varies from", min_value)).mkString(" "))
  println((List("Estimated value is", estimated_value)).mkString(" "))
  println((List("Expected value is", expected_value)).mkString(" "))
  println((List("Total error is", abs_float(estimated_value - expected_value))).mkString(" "))
  println("******************")
  return null
}

def pi_estimator_using_area_under_curve(iterations: BigInt): Any = {
  def semi_circle(x: Double): Double = {
    val y: Double = 4.0 - x * x
    val s: Double = sqrtApprox(y)
    return s
  }
  val estimated_value: Double = area_under_curve_estimator(iterations, (semi_circle _).asInstanceOf[(Double) => Double], 0.0, 2.0)
  println("******************")
  println("Estimating pi using area_under_curve_estimator")
  println((List("Estimated value is", estimated_value)).mkString(" "))
  println((List("Expected value is", PI)).mkString(" "))
  println((List("Total error is", abs_float(estimated_value - PI))).mkString(" "))
  println("******************")
  return null
}

def main(): Any = {
  pi_estimator(BigInt(1000))
  area_under_line_estimator_check(BigInt(1000), 0.0, 1.0)
  pi_estimator_using_area_under_curve(BigInt(1000))
}

val PI: Double = 3.141592653589793

var rand_seed: BigInt = BigInt(123456789)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
