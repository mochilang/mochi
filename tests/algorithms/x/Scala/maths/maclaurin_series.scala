// Generated by Mochi v0.10.60 on 2025-08-08 11:24:50 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def floor(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((i.toString.toDouble) > x) {
    i = i - BigInt(1)
  }
  return i.toString.toDouble
}

def pow(x: Double, n: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < n) {
    result = result * x
    i = i + BigInt(1)
  }
  return result
}

def factorial(n: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(2)
  while (i <= n) {
    result = result * i.toString.toDouble
    i = i + BigInt(1)
  }
  return result
}

def maclaurin_sin(theta: Double, accuracy: BigInt): Double = {
  var t: Double = theta
  val div = Math.floor(t / (2.0 * PI))
  t = t - 2.0 * div * PI
  var sum: Double = 0.0
  var r: BigInt = BigInt(0)
  while (r < accuracy) {
    val power: BigInt = BigInt(2) * r + BigInt(1)
    val sign: Double = (if (r % BigInt(2) == BigInt(0)) 1.0 else -1.0)
    sum = sum + sign * pow(t, power) / factorial(power)
    r = r + BigInt(1)
  }
  return sum
}

def maclaurin_cos(theta: Double, accuracy: BigInt): Double = {
  var t: Double = theta
  val div = Math.floor(t / (2.0 * PI))
  t = t - 2.0 * div * PI
  var sum: Double = 0.0
  var r: BigInt = BigInt(0)
  while (r < accuracy) {
    val power: BigInt = BigInt(2) * r
    val sign: Double = (if (r % BigInt(2) == BigInt(0)) 1.0 else -1.0)
    sum = sum + sign * pow(t, power) / factorial(power)
    r = r + BigInt(1)
  }
  return sum
}

val PI: Double = 3.141592653589793

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(maclaurin_sin(10.0, BigInt(30))))
    println(String.valueOf(maclaurin_sin(-10.0, BigInt(30))))
    println(String.valueOf(maclaurin_sin(10.0, BigInt(15))))
    println(String.valueOf(maclaurin_sin(-10.0, BigInt(15))))
    println(String.valueOf(maclaurin_cos(5.0, BigInt(30))))
    println(String.valueOf(maclaurin_cos(-5.0, BigInt(30))))
    println(String.valueOf(maclaurin_cos(10.0, BigInt(15))))
    println(String.valueOf(maclaurin_cos(-10.0, BigInt(15))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
