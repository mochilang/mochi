// Generated by Mochi v0.10.61 on 2025-08-08 16:09:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def radians(degree: Double): Double = {
  return degree / (180.0 / PI)
}

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def almost_equal(a: Double, b: Double): Boolean = {
  return abs_float(a - b) <= 0.00000001
}

def test_radians(): Any = {
  if (!almost_equal(radians(180.0), PI)) {
    throw new RuntimeException(String.valueOf("radians 180 failed"))
  }
  if (!almost_equal(radians(92.0), 1.6057029118347832)) {
    throw new RuntimeException(String.valueOf("radians 92 failed"))
  }
  if (!almost_equal(radians(274.0), 4.782202150464463)) {
    throw new RuntimeException(String.valueOf("radians 274 failed"))
  }
  if (!almost_equal(radians(109.82), 1.9167205845401725)) {
    throw new RuntimeException(String.valueOf("radians 109.82 failed"))
  }
}

def main(): Any = {
  test_radians()
  println(_str(radians(180.0)))
  println(_str(radians(92.0)))
  println(_str(radians(274.0)))
  println(_str(radians(109.82)))
}

val PI: Double = 3.141592653589793

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
