// Generated by Mochi v0.10.61 on 2025-08-08 17:35:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sum_of_harmonic_progression(first_term: Double, common_difference: Double, number_of_terms: BigInt): Double = {
  var arithmetic_progression: ArrayBuffer[Double] = ArrayBuffer(1.0 / first_term)
  var term: Double = 1.0 / first_term
  var i: BigInt = BigInt(0)
  while (i < number_of_terms - BigInt(1)) {
    term = term + common_difference
    arithmetic_progression = arithmetic_progression :+ (term)
    i = i + BigInt(1)
  }
  var total: Double = 0.0
  var j: BigInt = BigInt(0)
  while (j < BigInt((arithmetic_progression).size)) {
    total = total + 1.0 / arithmetic_progression((j.toInt).toInt)
    j = j + BigInt(1)
  }
  return total
}

def abs_val(num: Double): Double = {
  if (num < 0.0) {
    return -num
  }
  return num
}

def test_sum_of_harmonic_progression(): Any = {
  val result1: Double = sum_of_harmonic_progression(0.5, 2.0, BigInt(2))
  if (abs_val(result1 - 0.75) > 0.0000001) {
    throw new RuntimeException(String.valueOf("test1 failed"))
  }
  val result2: Double = sum_of_harmonic_progression(0.2, 5.0, BigInt(5))
  if (abs_val(result2 - 0.45666666666666667) > 0.0000001) {
    throw new RuntimeException(String.valueOf("test2 failed"))
  }
}

def main(): Any = {
  test_sum_of_harmonic_progression()
  println(sum_of_harmonic_progression(0.5, 2.0, BigInt(2)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
