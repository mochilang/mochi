// Generated by Mochi v0.10.61 on 2025-08-08 16:07:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def prime_sieve_eratosthenes(num: BigInt): ArrayBuffer[BigInt] = {
  if (num <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("Input must be a positive integer"))
  }
  var primes: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i <= num) {
    primes = primes :+ true
    i = i + BigInt(1)
  }
  var p: BigInt = BigInt(2)
  while (p * p <= num) {
    if (primes((p.toInt).toInt)) {
      var j: BigInt = p * p
      while (j <= num) {
        primes((j).toInt) = false
        j = j + p
      }
    }
    p = p + BigInt(1)
  }
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var k: BigInt = BigInt(2)
  while (k <= num) {
    if (primes((k.toInt).toInt)) {
      result = result :+ k
    }
    k = k + BigInt(1)
  }
  return result
}

def list_eq(a: ArrayBuffer[BigInt], b: ArrayBuffer[BigInt]): Boolean = {
  if (BigInt((a).size) != BigInt((b).size)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    if (a((i.toInt).toInt) != b((i.toInt).toInt)) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def test_prime_sieve_eratosthenes(): Any = {
  if (!list_eq(prime_sieve_eratosthenes(BigInt(10)), ArrayBuffer(BigInt(2), BigInt(3), BigInt(5), BigInt(7)))) {
    throw new RuntimeException(String.valueOf("test 10 failed"))
  }
  if (!list_eq(prime_sieve_eratosthenes(BigInt(20)), ArrayBuffer(BigInt(2), BigInt(3), BigInt(5), BigInt(7), BigInt(11), BigInt(13), BigInt(17), BigInt(19)))) {
    throw new RuntimeException(String.valueOf("test 20 failed"))
  }
  if (!list_eq(prime_sieve_eratosthenes(BigInt(2)), ArrayBuffer(BigInt(2)))) {
    throw new RuntimeException(String.valueOf("test 2 failed"))
  }
  if (BigInt((prime_sieve_eratosthenes(BigInt(1))).size) != BigInt(0)) {
    throw new RuntimeException(String.valueOf("test 1 failed"))
  }
}

def main(): Any = {
  test_prime_sieve_eratosthenes()
  println(_str(prime_sieve_eratosthenes(BigInt(20))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
