// Generated by Mochi v0.10.61 on 2025-08-08 18:00:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pow_float(base: Double, exp: BigInt): Double = {
  var result: Double = 1.0
  var exponent: BigInt = exp
  if (exponent < BigInt(0)) {
    exponent = -exponent
    var i: BigInt = BigInt(0)
    while (i < exponent) {
      result = result * base
      i = i + BigInt(1)
    }
    return 1.0 / result
  }
  var i: BigInt = BigInt(0)
  while (i < exponent) {
    result = result * base
    i = i + BigInt(1)
  }
  return result
}

def sum_of_geometric_progression(first_term: BigInt, common_ratio: BigInt, num_of_terms: BigInt): Double = {
  if (common_ratio == BigInt(1)) {
    return (num_of_terms * first_term).toString.toDouble
  }
  val a: Double = first_term.toString.toDouble
  val r: Double = common_ratio.toString.toDouble
  return a / (1.0 - r) * (1.0 - pow_float(r, num_of_terms))
}

def test_sum(): Any = {
  if (sum_of_geometric_progression(BigInt(1), BigInt(2), BigInt(10)) != 1023.0) {
    throw new RuntimeException(String.valueOf("example1 failed"))
  }
  if (sum_of_geometric_progression(BigInt(1), BigInt(10), BigInt(5)) != 11111.0) {
    throw new RuntimeException(String.valueOf("example2 failed"))
  }
  if (sum_of_geometric_progression(-BigInt(1), BigInt(2), BigInt(10)) != -1023.0) {
    throw new RuntimeException(String.valueOf("example3 failed"))
  }
}

def main(): Any = {
  test_sum()
  println(sum_of_geometric_progression(BigInt(1), BigInt(2), BigInt(10)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
