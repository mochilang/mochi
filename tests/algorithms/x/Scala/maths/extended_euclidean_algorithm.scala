// Generated by Mochi v0.10.63 on 2025-08-12 08:06:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Coeffs(var x: BigInt, var y: BigInt)

def abs_val(n: BigInt): BigInt = {
  if (n < BigInt(0)) {
    return -n
  }
  return n
}

def extended_euclidean_algorithm(a: BigInt, b: BigInt): Coeffs = {
  if (abs_val(a) == BigInt(1)) {
    return Coeffs(a, BigInt(0))
  }
  if (abs_val(b) == BigInt(1)) {
    return Coeffs(BigInt(0), b)
  }
  var old_remainder: BigInt = a
  var remainder: BigInt = b
  var old_coeff_a: BigInt = BigInt(1)
  var coeff_a: BigInt = BigInt(0)
  var old_coeff_b: BigInt = BigInt(0)
  var coeff_b: BigInt = BigInt(1)
  while (remainder != BigInt(0)) {
    val quotient: BigInt = old_remainder / remainder
    val temp_remainder: BigInt = old_remainder - quotient * remainder
    old_remainder = remainder
    remainder = temp_remainder
    val temp_a: BigInt = old_coeff_a - quotient * coeff_a
    old_coeff_a = coeff_a
    coeff_a = temp_a
    val temp_b: BigInt = old_coeff_b - quotient * coeff_b
    old_coeff_b = coeff_b
    coeff_b = temp_b
  }
  if (a < BigInt(0)) {
    old_coeff_a = -old_coeff_a
  }
  if (b < BigInt(0)) {
    old_coeff_b = -old_coeff_b
  }
  return Coeffs(old_coeff_a, old_coeff_b)
}

def test_extended_euclidean_algorithm(): Any = {
  val r1: Coeffs = extended_euclidean_algorithm(BigInt(1), BigInt(24))
  if ((r1.asInstanceOf[Coeffs].x != BigInt(1) || r1.asInstanceOf[Coeffs].y != BigInt(0)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("test1 failed"))
  }
  val r2: Coeffs = extended_euclidean_algorithm(BigInt(8), BigInt(14))
  if ((r2.asInstanceOf[Coeffs].x != BigInt(2) || r2.asInstanceOf[Coeffs].y != -BigInt(1)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("test2 failed"))
  }
  val r3: Coeffs = extended_euclidean_algorithm(BigInt(240), BigInt(46))
  if ((r3.asInstanceOf[Coeffs].x != -BigInt(9) || r3.asInstanceOf[Coeffs].y != BigInt(47)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("test3 failed"))
  }
  val r4: Coeffs = extended_euclidean_algorithm(BigInt(1), -BigInt(4))
  if ((r4.asInstanceOf[Coeffs].x != BigInt(1) || r4.asInstanceOf[Coeffs].y != BigInt(0)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("test4 failed"))
  }
  val r5: Coeffs = extended_euclidean_algorithm(-BigInt(2), -BigInt(4))
  if ((r5.asInstanceOf[Coeffs].x != -BigInt(1) || r5.asInstanceOf[Coeffs].y != BigInt(0)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("test5 failed"))
  }
  val r6: Coeffs = extended_euclidean_algorithm(BigInt(0), -BigInt(4))
  if ((r6.asInstanceOf[Coeffs].x != BigInt(0) || r6.asInstanceOf[Coeffs].y != -BigInt(1)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("test6 failed"))
  }
  val r7: Coeffs = extended_euclidean_algorithm(BigInt(2), BigInt(0))
  if ((r7.asInstanceOf[Coeffs].x != BigInt(1) || r7.asInstanceOf[Coeffs].y != BigInt(0)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("test7 failed"))
  }
}

def main(): Any = {
  test_extended_euclidean_algorithm()
  val res: Coeffs = extended_euclidean_algorithm(BigInt(240), BigInt(46))
  println("(" + _str(res.asInstanceOf[Coeffs].x) + ", " + _str(res.asInstanceOf[Coeffs].y) + ")")
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
