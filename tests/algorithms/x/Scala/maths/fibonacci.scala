// Generated by Mochi v0.10.59 on 2025-08-07 12:51:02 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sqrt(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(10)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def powf(x: Double, n: BigInt): Double = {
  var res: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < n) {
    res = res * x
    i = i + BigInt(1)
  }
  return res
}

def roundf(x: Double): BigInt = {
  if (x >= 0.0) {
    return BigInt((x + 0.5).toInt)
  }
  return BigInt((x - 0.5).toInt)
}

def fib_iterative(n: BigInt): ArrayBuffer[BigInt] = {
  if (n < BigInt(0)) {
    throw new RuntimeException(String.valueOf("n is negative"))
  }
  if (n == BigInt(0)) {
    return ArrayBuffer(BigInt(0))
  }
  var fib: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(1))
  var i: BigInt = BigInt(2)
  while (i <= n) {
    fib = fib :+ fib(((i - BigInt(1)).toInt).toInt) + fib(((i - BigInt(2)).toInt).toInt)
    i = i + BigInt(1)
  }
  return fib
}

def fib_recursive_term(i: BigInt): BigInt = {
  if (i < BigInt(0)) {
    throw new RuntimeException(String.valueOf("n is negative"))
  }
  if (i < BigInt(2)) {
    return i
  }
  return fib_recursive_term(i - BigInt(1)) + fib_recursive_term(i - BigInt(2))
}

def fib_recursive(n: BigInt): ArrayBuffer[BigInt] = {
  if (n < BigInt(0)) {
    throw new RuntimeException(String.valueOf("n is negative"))
  }
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i <= n) {
    res = res :+ fib_recursive_term(i)
    i = i + BigInt(1)
  }
  return res
}

def fib_recursive_cached_term(i: BigInt): BigInt = {
  if (i < BigInt(0)) {
    throw new RuntimeException(String.valueOf("n is negative"))
  }
  if (i < BigInt(2)) {
    return i
  }
  if ((fib_cache_global.contains(i)).asInstanceOf[Boolean]) {
    return fib_cache_global.getOrElse(i, null).asInstanceOf[BigInt]
  }
  val `val`: BigInt = fib_recursive_cached_term(i - BigInt(1)) + fib_recursive_cached_term(i - BigInt(2))
  fib_cache_global.update(i, `val`)
  return `val`
}

def fib_recursive_cached(n: BigInt): ArrayBuffer[BigInt] = {
  if (n < BigInt(0)) {
    throw new RuntimeException(String.valueOf("n is negative"))
  }
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var j: BigInt = BigInt(0)
  while (j <= n) {
    res = res :+ fib_recursive_cached_term(j)
    j = j + BigInt(1)
  }
  return res
}

def fib_memoization_term(num: BigInt): BigInt = {
  if ((fib_memo_cache.contains(num)).asInstanceOf[Boolean]) {
    return fib_memo_cache.getOrElse(num, null).asInstanceOf[BigInt]
  }
  val value: BigInt = fib_memoization_term(num - BigInt(1)) + fib_memoization_term(num - BigInt(2))
  fib_memo_cache.update(num, value)
  return value
}

def fib_memoization(n: BigInt): ArrayBuffer[BigInt] = {
  if (n < BigInt(0)) {
    throw new RuntimeException(String.valueOf("n is negative"))
  }
  var out: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i <= n) {
    out = out :+ fib_memoization_term(i)
    i = i + BigInt(1)
  }
  return out
}

def fib_binet(n: BigInt): ArrayBuffer[BigInt] = {
  if (n < BigInt(0)) {
    throw new RuntimeException(String.valueOf("n is negative"))
  }
  if (n >= BigInt(1475)) {
    throw new RuntimeException(String.valueOf("n is too large"))
  }
  val sqrt5: Double = sqrt(5.0)
  val phi: Double = (1.0 + sqrt5) / 2.0
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i <= n) {
    val `val`: BigInt = roundf(powf(phi, i) / sqrt5)
    res = res :+ `val`
    i = i + BigInt(1)
  }
  return res
}

def matrix_mul(a: ArrayBuffer[ArrayBuffer[BigInt]], b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val a00: BigInt = a((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt) * b((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt) + a((BigInt(0).toInt).toInt)((BigInt(1).toInt).toInt) * b((BigInt(1).toInt).toInt)((BigInt(0).toInt).toInt)
  val a01: BigInt = a((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt) * b((BigInt(0).toInt).toInt)((BigInt(1).toInt).toInt) + a((BigInt(0).toInt).toInt)((BigInt(1).toInt).toInt) * b((BigInt(1).toInt).toInt)((BigInt(1).toInt).toInt)
  val a10: BigInt = a((BigInt(1).toInt).toInt)((BigInt(0).toInt).toInt) * b((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt) + a((BigInt(1).toInt).toInt)((BigInt(1).toInt).toInt) * b((BigInt(1).toInt).toInt)((BigInt(0).toInt).toInt)
  val a11: BigInt = a((BigInt(1).toInt).toInt)((BigInt(0).toInt).toInt) * b((BigInt(0).toInt).toInt)((BigInt(1).toInt).toInt) + a((BigInt(1).toInt).toInt)((BigInt(1).toInt).toInt) * b((BigInt(1).toInt).toInt)((BigInt(1).toInt).toInt)
  return ArrayBuffer(ArrayBuffer(a00, a01), ArrayBuffer(a10, a11))
}

def matrix_pow(m: ArrayBuffer[ArrayBuffer[BigInt]], power: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  if (power < BigInt(0)) {
    throw new RuntimeException(String.valueOf("power is negative"))
  }
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1)))
  var base: ArrayBuffer[ArrayBuffer[BigInt]] = m
  var p: BigInt = power
  while (p > BigInt(0)) {
    if (p % BigInt(2) == BigInt(1)) {
      result = matrix_mul(result, base)
    }
    base = matrix_mul(base, base)
    p = p / BigInt(2)
  }
  return result
}

def fib_matrix(n: BigInt): BigInt = {
  if (n < BigInt(0)) {
    throw new RuntimeException(String.valueOf("n is negative"))
  }
  if (n == BigInt(0)) {
    return BigInt(0)
  }
  val m: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(1)), ArrayBuffer(BigInt(1), BigInt(0)))
  val res: ArrayBuffer[ArrayBuffer[BigInt]] = matrix_pow(m, n - BigInt(1))
  return res((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt)
}

def run_tests(): BigInt = {
  val expected: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(1), BigInt(1), BigInt(2), BigInt(3), BigInt(5), BigInt(8), BigInt(13), BigInt(21), BigInt(34), BigInt(55))
  val it: ArrayBuffer[BigInt] = fib_iterative(BigInt(10))
  val rec: ArrayBuffer[BigInt] = fib_recursive(BigInt(10))
  val cache: ArrayBuffer[BigInt] = fib_recursive_cached(BigInt(10))
  val memo: ArrayBuffer[BigInt] = fib_memoization(BigInt(10))
  val bin: ArrayBuffer[BigInt] = fib_binet(BigInt(10))
  val m: BigInt = fib_matrix(BigInt(10))
  if (it != expected) {
    throw new RuntimeException(String.valueOf("iterative failed"))
  }
  if (rec != expected) {
    throw new RuntimeException(String.valueOf("recursive failed"))
  }
  if (cache != expected) {
    throw new RuntimeException(String.valueOf("cached failed"))
  }
  if (memo != expected) {
    throw new RuntimeException(String.valueOf("memoization failed"))
  }
  if (bin != expected) {
    throw new RuntimeException(String.valueOf("binet failed"))
  }
  if (m != BigInt(55)) {
    throw new RuntimeException(String.valueOf("matrix failed"))
  }
  return m
}

var fib_cache_global: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]

var fib_memo_cache: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map(BigInt(0) -> (BigInt(0)), BigInt(1) -> (BigInt(1)), BigInt(2) -> (BigInt(1)))).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(run_tests()))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
