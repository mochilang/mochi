// Generated by Mochi v0.10.59 on 2025-08-07 12:48:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class EuclidResult(var x: BigInt, var y: BigInt)

def extended_euclid(a: BigInt, b: BigInt): EuclidResult = {
  if (b == BigInt(0)) {
    return EuclidResult(BigInt(1), BigInt(0))
  }
  val res: EuclidResult = extended_euclid(b, a % b)
  val k: BigInt = a / b
  return EuclidResult(res.asInstanceOf[EuclidResult].y, res.asInstanceOf[EuclidResult].x - k * res.asInstanceOf[EuclidResult].y)
}

def chinese_remainder_theorem(n1: BigInt, r1: BigInt, n2: BigInt, r2: BigInt): BigInt = {
  val res: EuclidResult = extended_euclid(n1, n2)
  val x: BigInt = res.asInstanceOf[EuclidResult].x
  val y: BigInt = res.asInstanceOf[EuclidResult].y
  val m: BigInt = n1 * n2
  val n: BigInt = r2 * x * n1 + r1 * y * n2
  return (n % m + m) % m
}

def invert_modulo(a: BigInt, n: BigInt): BigInt = {
  val res: EuclidResult = extended_euclid(a, n)
  var b: BigInt = res.asInstanceOf[EuclidResult].x
  if (b < BigInt(0)) {
    b = (b % n + n) % n
  }
  return b
}

def chinese_remainder_theorem2(n1: BigInt, r1: BigInt, n2: BigInt, r2: BigInt): BigInt = {
  val x: BigInt = invert_modulo(n1, n2)
  val y: BigInt = invert_modulo(n2, n1)
  val m: BigInt = n1 * n2
  val n: BigInt = r2 * x * n1 + r1 * y * n2
  return (n % m + m) % m
}

val e1: EuclidResult = extended_euclid(BigInt(10), BigInt(6))

val e2: EuclidResult = extended_euclid(BigInt(7), BigInt(5))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(e1.x) + "," + String.valueOf(e1.y))
    println(String.valueOf(e2.x) + "," + String.valueOf(e2.y))
    println(String.valueOf(chinese_remainder_theorem(BigInt(5), BigInt(1), BigInt(7), BigInt(3))))
    println(String.valueOf(chinese_remainder_theorem(BigInt(6), BigInt(1), BigInt(4), BigInt(3))))
    println(String.valueOf(invert_modulo(BigInt(2), BigInt(5))))
    println(String.valueOf(invert_modulo(BigInt(8), BigInt(7))))
    println(String.valueOf(chinese_remainder_theorem2(BigInt(5), BigInt(1), BigInt(7), BigInt(3))))
    println(String.valueOf(chinese_remainder_theorem2(BigInt(6), BigInt(1), BigInt(4), BigInt(3))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
