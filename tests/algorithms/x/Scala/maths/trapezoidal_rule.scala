// Generated by Mochi v0.10.61 on 2025-08-08 17:35:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def f(x: Double): Double = {
  return x * x
}

def make_points(a: Double, b: Double, h: Double): ArrayBuffer[Double] = {
  var xs: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var x: Double = a + h
  while (x <= b - h) {
    xs = xs :+ (x)
    x = x + h
  }
  return xs
}

def trapezoidal_rule(boundary: ArrayBuffer[Double], steps: Double): Double = {
  val h: Double = (boundary((BigInt(1).toInt).toInt) - boundary((BigInt(0).toInt).toInt)) / steps
  val a: Double = boundary((BigInt(0).toInt).toInt)
  val b: Double = boundary((BigInt(1).toInt).toInt)
  val xs: ArrayBuffer[Double] = make_points(a, b, h)
  var y: Double = h / 2.0 * f(a)
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    y = y + h * f(xs((i.toInt).toInt))
    i = i + BigInt(1)
  }
  y = y + h / 2.0 * f(b)
  return y
}

val a: Double = 0.0

val b: Double = 1.0

val steps: Double = 10.0

val boundary: ArrayBuffer[Double] = ArrayBuffer(a, b)

val y: Double = trapezoidal_rule(boundary, steps)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("y = " + _str(y))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
