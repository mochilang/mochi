// Generated by Mochi v0.10.61 on 2025-08-08 16:08:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Point(var x: Double, var y: Double, var z: Double)

def absf(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def sqrt_approx(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def distance(a: Point, b: Point): Double = {
  val dx: Double = b.asInstanceOf[Point].x - a.asInstanceOf[Point].x
  val dy: Double = b.asInstanceOf[Point].y - a.asInstanceOf[Point].y
  val dz: Double = b.asInstanceOf[Point].z - a.asInstanceOf[Point].z
  return sqrt_approx(absf(dx * dx + dy * dy + dz * dz))
}

def point_to_string(p: Point): String = {
  return "Point(" + _str(p.asInstanceOf[Point].x) + ", " + _str(p.asInstanceOf[Point].y) + ", " + _str(p.asInstanceOf[Point].z) + ")"
}

def test_distance(): Any = {
  val p1: Point = Point(2.0, -1.0, 7.0)
  val p2: Point = Point(1.0, -3.0, 5.0)
  val d: Double = distance(p1, p2)
  if (absf(d - 3.0) > 0.0001) {
    throw new RuntimeException(String.valueOf("distance test failed"))
  }
  println("Distance from " + point_to_string(p1) + " to " + point_to_string(p2) + " is " + _str(d))
}

def main(): Any = {
  test_distance()
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
