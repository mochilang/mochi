// Generated by Mochi v0.10.61 on 2025-08-08 16:12:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def assign_ranks(data: ArrayBuffer[Double]): ArrayBuffer[BigInt] = {
  var ranks: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  val n: BigInt = BigInt((data).size)
  var i: BigInt = BigInt(0)
  while (i < n) {
    var rank: BigInt = BigInt(1)
    var j: BigInt = BigInt(0)
    while (j < n) {
      if ((data((j.toInt).toInt) < data((i.toInt).toInt) || (data((j.toInt).toInt) == data((i.toInt).toInt) && j < i).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
        rank = rank + BigInt(1)
      }
      j = j + BigInt(1)
    }
    ranks = ranks :+ rank
    i = i + BigInt(1)
  }
  return ranks
}

def calculate_spearman_rank_correlation(var1: ArrayBuffer[Double], var2: ArrayBuffer[Double]): Double = {
  if (BigInt((var1).size) != BigInt((var2).size)) {
    throw new RuntimeException(String.valueOf("Lists must have equal length"))
  }
  val n: BigInt = BigInt((var1).size)
  val rank1: ArrayBuffer[BigInt] = assign_ranks(var1)
  val rank2: ArrayBuffer[BigInt] = assign_ranks(var2)
  var i: BigInt = BigInt(0)
  var d_sq: Double = 0.0
  while (i < n) {
    val diff: Double = (rank1((i.toInt).toInt) - rank2((i.toInt).toInt)).toDouble
    d_sq = d_sq + diff * diff
    i = i + BigInt(1)
  }
  val n_f: Double = n.toString.toDouble
  return 1.0 - 6.0 * d_sq / (n_f * (n_f * n_f - 1.0))
}

def test_spearman(): Any = {
  val x: ArrayBuffer[Double] = ArrayBuffer(1.0, 2.0, 3.0, 4.0, 5.0)
  val y_inc: ArrayBuffer[Double] = ArrayBuffer(2.0, 4.0, 6.0, 8.0, 10.0)
  if (calculate_spearman_rank_correlation(x, y_inc) != 1.0) {
    throw new RuntimeException(String.valueOf("case1"))
  }
  val y_dec: ArrayBuffer[Double] = ArrayBuffer(5.0, 4.0, 3.0, 2.0, 1.0)
  if (calculate_spearman_rank_correlation(x, y_dec) != -1.0) {
    throw new RuntimeException(String.valueOf("case2"))
  }
  val y_mix: ArrayBuffer[Double] = ArrayBuffer(5.0, 1.0, 2.0, 9.0, 5.0)
  if (calculate_spearman_rank_correlation(x, y_mix) != 0.6) {
    throw new RuntimeException(String.valueOf("case3"))
  }
}

def main(): Any = {
  test_spearman()
  println(_str(calculate_spearman_rank_correlation(ArrayBuffer(1.0, 2.0, 3.0, 4.0, 5.0), ArrayBuffer(2.0, 4.0, 6.0, 8.0, 10.0))))
  println(_str(calculate_spearman_rank_correlation(ArrayBuffer(1.0, 2.0, 3.0, 4.0, 5.0), ArrayBuffer(5.0, 4.0, 3.0, 2.0, 1.0))))
  println(_str(calculate_spearman_rank_correlation(ArrayBuffer(1.0, 2.0, 3.0, 4.0, 5.0), ArrayBuffer(5.0, 1.0, 2.0, 9.0, 5.0))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
