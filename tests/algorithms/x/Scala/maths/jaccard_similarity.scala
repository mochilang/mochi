// Generated by Mochi v0.10.60 on 2025-08-08 11:23:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def contains(xs: ArrayBuffer[String], value: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) == value) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def jaccard_similarity(set_a: ArrayBuffer[String], set_b: ArrayBuffer[String], alternative_union: Boolean): Double = {
  var intersection_len: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((set_a).size)) {
    if ((set_b.contains(set_a((i.toInt).toInt))).asInstanceOf[Boolean]) {
      intersection_len = intersection_len + BigInt(1)
    }
    i = i + BigInt(1)
  }
  var union_len: BigInt = BigInt(0)
  if (alternative_union) {
    union_len = BigInt((set_a).size) + BigInt((set_b).size)
  } else {
    var union_list: ArrayBuffer[String] = ArrayBuffer[String]()
    i = BigInt(0)
    while (i < BigInt((set_a).size)) {
      val val_a: String = set_a((i.toInt).toInt)
      if (!(union_list.contains(val_a)).asInstanceOf[Boolean]) {
        union_list = union_list :+ val_a
      }
      i = i + BigInt(1)
    }
    i = BigInt(0)
    while (i < BigInt((set_b).size)) {
      val val_b: String = set_b((i.toInt).toInt)
      if (!(union_list.contains(val_b)).asInstanceOf[Boolean]) {
        union_list = union_list :+ val_b
      }
      i = i + BigInt(1)
    }
    union_len = BigInt((union_list).size)
  }
  return 1.0 * intersection_len.toString.toDouble / union_len.toString.toDouble
}

def main(): Any = {
  val set_a: ArrayBuffer[String] = ArrayBuffer("a", "b", "c", "d", "e")
  val set_b: ArrayBuffer[String] = ArrayBuffer("c", "d", "e", "f", "h", "i")
  println(jaccard_similarity(set_a, set_b, false))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
