// Generated by Mochi v0.10.60 on 2025-08-08 11:24:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def to_float(x: BigInt): Double = {
  return x.toString.toDouble * 1.0
}

def sqrt(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(10)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def floor(x: Double): BigInt = {
  var n: BigInt = BigInt(0)
  var y: Double = x
  while (y >= 1.0) {
    y = y - 1.0
    n = n + BigInt(1)
  }
  return n
}

def juggler_sequence(n: BigInt): ArrayBuffer[BigInt] = {
  if (n < BigInt(1)) {
    throw new RuntimeException(String.valueOf("number must be a positive integer"))
  }
  var seq: ArrayBuffer[BigInt] = ArrayBuffer(n)
  var current: BigInt = n
  while (current != BigInt(1)) {
    if (current % BigInt(2) == BigInt(0)) {
      current = BigInt((Math.floor(sqrt(to_float(current)))).toString.toDouble.toInt)
    } else {
      val r: Double = sqrt(to_float(current))
      current = BigInt((Math.floor(r * r * r)).toString.toDouble.toInt)
    }
    seq = seq :+ current
  }
  return seq
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(juggler_sequence(BigInt(3))))
    println(String.valueOf(juggler_sequence(BigInt(10))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
