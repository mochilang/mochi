// Generated by Mochi v0.10.59 on 2025-08-07 12:48:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def check_polygon(nums: ArrayBuffer[Double]): Boolean = {
  if (BigInt((nums).size) < BigInt(2)) {
    throw new RuntimeException(String.valueOf("Monogons and Digons are not polygons in the Euclidean space"))
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((nums).size)) {
    if (nums((i.toInt).toInt) <= 0.0) {
      throw new RuntimeException(String.valueOf("All values must be greater than 0"))
    }
    i = i + BigInt(1)
  }
  var total: Double = 0.0
  var max_side: Double = 0.0
  i = BigInt(0)
  while (i < BigInt((nums).size)) {
    val v: Double = nums((i.toInt).toInt)
    total = total + v
    if (v > max_side) {
      max_side = v
    }
    i = i + BigInt(1)
  }
  return max_side < total - max_side
}

var nums: ArrayBuffer[Double] = ArrayBuffer(3.0, 7.0, 13.0, 2.0)

val _: Boolean = check_polygon(nums)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(check_polygon(ArrayBuffer(6.0, 10.0, 5.0))))
    println(String.valueOf(check_polygon(ArrayBuffer(3.0, 7.0, 13.0, 2.0))))
    println(String.valueOf(check_polygon(ArrayBuffer(1.0, 4.3, 5.2, 12.2))))
    println(String.valueOf(nums))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
