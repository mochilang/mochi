// Generated by Mochi v0.10.61 on 2025-08-08 16:01:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Point(var x: Double, var y: Double)

def next_seed(x: BigInt): BigInt = {
  return (x * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
}

def rand_unit(): Double = {
  seed = next_seed(seed)
  return seed.toDouble / 2147483648.0
}

def is_in_unit_circle(p: Point): Boolean = {
  return p.asInstanceOf[Point].x * p.asInstanceOf[Point].x + p.asInstanceOf[Point].y * p.asInstanceOf[Point].y <= 1.0
}

def random_unit_square(): Point = {
  return Point(rand_unit(), rand_unit())
}

def estimate_pi(simulations: BigInt): Double = {
  if (simulations < BigInt(1)) {
    throw new RuntimeException(String.valueOf("At least one simulation is necessary to estimate PI."))
  }
  var inside: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < simulations) {
    val p: Point = random_unit_square()
    if (is_in_unit_circle(p)) {
      inside = inside + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return 4.0 * inside.toString.toDouble / simulations.toString.toDouble
}

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def main(): Any = {
  val n: BigInt = BigInt(10000)
  val my_pi: Double = estimate_pi(n)
  val error: Double = abs_float(my_pi - PI)
  println("An estimate of PI is " + String.valueOf(my_pi) + " with an error of " + String.valueOf(error))
}

val PI: Double = 3.141592653589793

var seed: BigInt = BigInt(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
