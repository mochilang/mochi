// Generated by Mochi v0.10.67 on 2025-08-17 12:19:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

case class PollardResult(var factor: BigInt, var ok: Boolean)

def gcd(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = (if (a < BigInt(0)) -a else a)
  var y: BigInt = (if (b < BigInt(0)) -b else b)
  while (y != BigInt(0)) {
    var t: BigInt = x % y
    x = y
    y = t
  }
  return x
}

def rand_fn(value: BigInt, step: BigInt, modulus: BigInt): BigInt = {
  return (value * value + step) % modulus
}

def pollard_rho(num: BigInt, seed: BigInt, step: BigInt, attempts: BigInt): PollardResult = {
  if (num < BigInt(2)) {
    throw new RuntimeException(String.valueOf("The input value cannot be less than 2"))
  }
  if ((num > BigInt(2) && num % BigInt(2) == BigInt(0))) {
    return PollardResult(BigInt(2), true)
  }
  var s: BigInt = seed
  var st: BigInt = step
  var i: BigInt = BigInt(0)
  val _br1 = new Breaks
  val _ct1 = new Breaks
  _br1.breakable {
    while (i < attempts) {
      _ct1.breakable {
        var tortoise: BigInt = s
        var hare: BigInt = s
        val _br2 = new Breaks
        val _ct2 = new Breaks
        _br2.breakable {
          while (true) {
            _ct2.breakable {
              tortoise = rand_fn(tortoise, st, num)
              hare = rand_fn(hare, st, num)
              hare = rand_fn(hare, st, num)
              var divisor: BigInt = gcd(hare - tortoise, num)
              if (divisor == BigInt(1)) {
                _ct2.break()
              } else {
                if (divisor == num) {
                  _br2.break()
                } else {
                  return PollardResult(divisor, true)
                }
              }
            }
          }
        }
        s = hare
        st = st + BigInt(1)
        i = i + BigInt(1)
      }
    }
  }
  return PollardResult(BigInt(0), false)
}

def test_pollard_rho(): Any = {
  var r1: PollardResult = pollard_rho(BigInt(8051), BigInt(2), BigInt(1), BigInt(5))
  if ((!r1.asInstanceOf[PollardResult].ok || (r1.asInstanceOf[PollardResult].factor != BigInt(83) && r1.asInstanceOf[PollardResult].factor != BigInt(97)).asInstanceOf[Boolean])) {
    throw new RuntimeException(String.valueOf("test1 failed"))
  }
  var r2: PollardResult = pollard_rho(BigInt(10403), BigInt(2), BigInt(1), BigInt(5))
  if ((!r2.asInstanceOf[PollardResult].ok || (r2.asInstanceOf[PollardResult].factor != BigInt(101) && r2.asInstanceOf[PollardResult].factor != BigInt(103)).asInstanceOf[Boolean])) {
    throw new RuntimeException(String.valueOf("test2 failed"))
  }
  var r3: PollardResult = pollard_rho(BigInt(100), BigInt(2), BigInt(1), BigInt(3))
  if ((!r3.asInstanceOf[PollardResult].ok || r3.asInstanceOf[PollardResult].factor != BigInt(2))) {
    throw new RuntimeException(String.valueOf("test3 failed"))
  }
  var r4: PollardResult = pollard_rho(BigInt(17), BigInt(2), BigInt(1), BigInt(3))
  if (r4.asInstanceOf[PollardResult].ok) {
    throw new RuntimeException(String.valueOf("test4 failed"))
  }
  var r5: PollardResult = pollard_rho(BigInt(4913), BigInt(2), BigInt(1), BigInt(3))
  if ((!r5.asInstanceOf[PollardResult].ok || r5.asInstanceOf[PollardResult].factor != BigInt(17))) {
    throw new RuntimeException(String.valueOf("test5 failed"))
  }
  var r6: PollardResult = pollard_rho(BigInt(4913), BigInt(2), BigInt(1), BigInt(1))
  if (r6.asInstanceOf[PollardResult].ok) {
    throw new RuntimeException(String.valueOf("test6 failed"))
  }
  var r7: PollardResult = pollard_rho(BigInt(105), BigInt(2), BigInt(1), BigInt(3))
  if ((!r7.asInstanceOf[PollardResult].ok || r7.asInstanceOf[PollardResult].factor != BigInt(21))) {
    throw new RuntimeException(String.valueOf("test7 failed"))
  }
}

def main(): Any = {
  test_pollard_rho()
  var a: PollardResult = pollard_rho(BigInt(100), BigInt(2), BigInt(1), BigInt(3))
  if (a.asInstanceOf[PollardResult].ok) {
    println(_str(_str(a.asInstanceOf[PollardResult].factor)))
  } else {
    println(_str("None"))
  }
  var b: PollardResult = pollard_rho(BigInt(17), BigInt(2), BigInt(1), BigInt(3))
  if (b.asInstanceOf[PollardResult].ok) {
    println(_str(_str(b.asInstanceOf[PollardResult].factor)))
  } else {
    println(_str("None"))
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
