// Generated by Mochi v0.10.60 on 2025-08-08 11:25:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def abs_val(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def pow_float(base: Double, exp: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = result * base
    i = i + BigInt(1)
  }
  return result
}

def nth_root(value: Double, n: BigInt): Double = {
  if (value == 0.0) {
    return 0.0
  }
  var x: Double = value / n.toString.toDouble
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    val num: Double = (n - BigInt(1)).toDouble * x + value / pow_float(x, n - BigInt(1))
    x = num / n.toString.toDouble
    i = i + BigInt(1)
  }
  return x
}

def minkowski_distance(point_a: ArrayBuffer[Double], point_b: ArrayBuffer[Double], order: BigInt): Double = {
  if (order < BigInt(1)) {
    throw new RuntimeException(String.valueOf("The order must be greater than or equal to 1."))
  }
  if (BigInt((point_a).size) != BigInt((point_b).size)) {
    throw new RuntimeException(String.valueOf("Both points must have the same dimension."))
  }
  var total: Double = 0.0
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((point_a).size)) {
    val diff: Double = abs_val(point_a((idx.toInt).toInt) - point_b((idx.toInt).toInt))
    total = total + pow_float(diff, order)
    idx = idx + BigInt(1)
  }
  return nth_root(total, order)
}

def test_minkowski(): Any = {
  if (abs_val(minkowski_distance(ArrayBuffer(1.0, 1.0), ArrayBuffer(2.0, 2.0), BigInt(1)) - 2.0) > 0.0001) {
    throw new RuntimeException(String.valueOf("minkowski_distance test1 failed"))
  }
  if (abs_val(minkowski_distance(ArrayBuffer(1.0, 2.0, 3.0, 4.0), ArrayBuffer(5.0, 6.0, 7.0, 8.0), BigInt(2)) - 8.0) > 0.0001) {
    throw new RuntimeException(String.valueOf("minkowski_distance test2 failed"))
  }
}

def main(): Any = {
  test_minkowski()
  println(minkowski_distance(ArrayBuffer(5.0), ArrayBuffer(0.0), BigInt(3)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
