// Generated by Mochi v0.10.67 on 2025-08-17 12:26:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def set_seed(s: BigInt): Any = {
  seed = s
}

def randint(a: BigInt, b: BigInt): BigInt = {
  seed = (seed * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
  return seed % (b - a + BigInt(1)) + a
}

def jacobi_symbol(_random_a: BigInt, _number: BigInt): BigInt = {
  var random_a: BigInt = _random_a
  var number: BigInt = _number
  if ((random_a == BigInt(0) || random_a == BigInt(1))) {
    return random_a
  }
  random_a = random_a % number
  var t: BigInt = BigInt(1)
  while (random_a != BigInt(0)) {
    while (random_a % BigInt(2) == BigInt(0)) {
      random_a = random_a / BigInt(2)
      var r: BigInt = number % BigInt(8)
      if ((r == BigInt(3) || r == BigInt(5))) {
        t = -t
      }
    }
    var temp: BigInt = random_a
    random_a = number
    number = temp
    if ((random_a % BigInt(4) == BigInt(3) && number % BigInt(4) == BigInt(3))) {
      t = -t
    }
    random_a = random_a % number
  }
  if (number == BigInt(1)) {
    return t
  }
  return BigInt(0)
}

def pow_mod(base: BigInt, exp: BigInt, mod: BigInt): BigInt = {
  var result: BigInt = BigInt(1)
  var b: BigInt = base % mod
  var e: BigInt = exp
  while (e > BigInt(0)) {
    if (e % BigInt(2) == BigInt(1)) {
      result = result * b % mod
    }
    b = b * b % mod
    e = e / BigInt(2)
  }
  return result
}

def solovay_strassen(number: BigInt, iterations: BigInt): Boolean = {
  if (number <= BigInt(1)) {
    return false
  }
  if (number <= BigInt(3)) {
    return true
  }
  var i: BigInt = BigInt(0)
  while (i < iterations) {
    var a: BigInt = randint(BigInt(2), number - BigInt(2))
    var x: BigInt = jacobi_symbol(a, number)
    var y: BigInt = pow_mod(a, (number - BigInt(1)) / BigInt(2), number)
    var mod_x: BigInt = x % number
    if (mod_x < BigInt(0)) {
      mod_x = mod_x + number
    }
    if ((x == BigInt(0) || y != mod_x)) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def main(): Any = {
  set_seed(BigInt(10))
  println(_str(_str(solovay_strassen(BigInt(13), BigInt(5)))))
  println(_str(_str(solovay_strassen(BigInt(9), BigInt(10)))))
  println(_str(_str(solovay_strassen(BigInt(17), BigInt(15)))))
}

var seed: BigInt = BigInt(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
