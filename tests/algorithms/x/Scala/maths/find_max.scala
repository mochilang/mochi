// Generated by Mochi v0.10.66 on 2025-08-16 14:58:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def normalize_index(index: BigInt, n: BigInt): BigInt = {
  if (index < BigInt(0)) {
    return n + index
  }
  return index
}

def find_max_iterative(nums: ArrayBuffer[Double]): Double = {
  if (BigInt((nums).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("find_max_iterative() arg is an empty sequence"))
  }
  var max_num: Double = nums.lift((BigInt(0).toInt).toInt).getOrElse(0.0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((nums).size)) {
    var x: Double = nums.lift((i.toInt).toInt).getOrElse(0.0)
    if (x > max_num) {
      max_num = x
    }
    i = i + BigInt(1)
  }
  return max_num
}

def find_max_recursive(nums: ArrayBuffer[Double], left: BigInt, right: BigInt): Double = {
  var n: BigInt = BigInt((nums).size)
  if (n == BigInt(0)) {
    throw new RuntimeException(String.valueOf("find_max_recursive() arg is an empty sequence"))
  }
  if ((((left >= n || left < BigInt(0) - n).asInstanceOf[Boolean] || right >= n).asInstanceOf[Boolean] || right < BigInt(0) - n)) {
    throw new RuntimeException(String.valueOf("list index out of range"))
  }
  var l: BigInt = normalize_index(left, n)
  var r: BigInt = normalize_index(right, n)
  if (l == r) {
    return nums.lift((l.toInt).toInt).getOrElse(0.0)
  }
  var mid: BigInt = (l + r) / BigInt(2)
  var left_max: Double = find_max_recursive(nums, l, mid)
  var right_max: Double = find_max_recursive(nums, mid + BigInt(1), r)
  if (left_max >= right_max) {
    return left_max
  }
  return right_max
}

def test_find_max(): Any = {
  var arr: ArrayBuffer[Double] = ArrayBuffer(2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0)
  if (find_max_iterative(arr) != 94.0) {
    throw new RuntimeException(String.valueOf("find_max_iterative failed"))
  }
  if (find_max_recursive(arr, BigInt(0), BigInt((arr).size) - BigInt(1)) != 94.0) {
    throw new RuntimeException(String.valueOf("find_max_recursive failed"))
  }
  if (find_max_recursive(arr, -BigInt((arr).size), -BigInt(1)) != 94.0) {
    throw new RuntimeException(String.valueOf("negative index handling failed"))
  }
}

def main(): Any = {
  test_find_max()
  var nums: ArrayBuffer[Double] = ArrayBuffer(2.0, 4.0, 9.0, 7.0, 19.0, 94.0, 5.0)
  println(_str(find_max_iterative(nums)))
  println(_str(find_max_recursive(nums, BigInt(0), BigInt((nums).size) - BigInt(1))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
