// Generated by Mochi v0.10.66 on 2025-08-16 14:57:33 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def pow2_int(n: BigInt): BigInt = {
  var result: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < n) {
    result = result * BigInt(2)
    i = i + BigInt(1)
  }
  return result
}

def pow2_float(n: BigInt): Double = {
  var result: Double = 1.0
  if (n >= BigInt(0)) {
    var i: BigInt = BigInt(0)
    while (i < n) {
      result = result * 2.0
      i = i + BigInt(1)
    }
  } else {
    var i: BigInt = BigInt(0)
    var m: BigInt = BigInt(0) - n
    while (i < m) {
      result = result / 2.0
      i = i + BigInt(1)
    }
  }
  return result
}

def lshift(num: BigInt, k: BigInt): BigInt = {
  var result: BigInt = num
  var i: BigInt = BigInt(0)
  while (i < k) {
    result = result * BigInt(2)
    i = i + BigInt(1)
  }
  return result
}

def rshift(num: BigInt, k: BigInt): BigInt = {
  var result: BigInt = num
  var i: BigInt = BigInt(0)
  while (i < k) {
    result = (result - result % BigInt(2)) / BigInt(2)
    i = i + BigInt(1)
  }
  return result
}

def log2_floor(x: Double): BigInt = {
  var n: Double = x
  var e: BigInt = BigInt(0)
  while (n >= 2.0) {
    n = n / 2.0
    e = e + BigInt(1)
  }
  while (n < 1.0) {
    n = n * 2.0
    e = e - BigInt(1)
  }
  return e
}

def float_to_bits(x: Double): BigInt = {
  var num: Double = x
  var sign: BigInt = BigInt(0)
  if (num < 0.0) {
    sign = BigInt(1)
    num = -num
  }
  var exp: BigInt = log2_floor(num)
  var pow: Double = pow2_float(exp)
  var normalized: Double = num / pow
  var frac: Double = normalized - 1.0
  var mantissa: BigInt = BigInt((frac * pow2_float(BigInt(23))).toString.toDouble.toInt)
  var exp_bits: BigInt = exp + BigInt(127)
  return lshift(sign, BigInt(31)) + lshift(exp_bits, BigInt(23)) + mantissa
}

def bits_to_float(bits: BigInt): Double = {
  var sign_bit: BigInt = rshift(bits, BigInt(31)) % BigInt(2)
  var sign: Double = 1.0
  if (sign_bit == BigInt(1)) {
    sign = -1.0
  }
  var exp_bits: BigInt = rshift(bits, BigInt(23)) % BigInt(256)
  var exp: BigInt = exp_bits - BigInt(127)
  var mantissa_bits: BigInt = bits % pow2_int(BigInt(23))
  var mantissa: Double = 1.0 + mantissa_bits.toString.toDouble / pow2_float(BigInt(23))
  return sign * mantissa * pow2_float(exp)
}

def absf(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def is_close(a: Double, b: Double, rel_tol: Double): Boolean = {
  return absf(a - b) <= rel_tol * absf(b)
}

def fast_inverse_sqrt(number: Double): Double = {
  if (number <= 0.0) {
    throw new RuntimeException(String.valueOf("Input must be a positive number."))
  }
  var i: BigInt = float_to_bits(number)
  var magic: BigInt = BigInt(1597463007)
  var y_bits: BigInt = magic - rshift(i, BigInt(1))
  var y: Double = bits_to_float(y_bits)
  y = y * (1.5 - 0.5 * number * y * y)
  return y
}

def test_fast_inverse_sqrt(): Any = {
  if (absf(fast_inverse_sqrt(10.0) - 0.3156857923527257) > 0.0001) {
    throw new RuntimeException(String.valueOf("fast_inverse_sqrt(10) failed"))
  }
  if (absf(fast_inverse_sqrt(4.0) - 0.49915357479239103) > 0.0001) {
    throw new RuntimeException(String.valueOf("fast_inverse_sqrt(4) failed"))
  }
  if (absf(fast_inverse_sqrt(4.1) - 0.4932849504615651) > 0.0001) {
    throw new RuntimeException(String.valueOf("fast_inverse_sqrt(4.1) failed"))
  }
  var i: BigInt = BigInt(50)
  while (i < BigInt(60)) {
    var y: Double = fast_inverse_sqrt(i.toString.toDouble)
    var actual: Double = 1.0 / sqrtApprox(i.toString.toDouble)
    if (!is_close(y, actual, 0.00132)) {
      throw new RuntimeException(String.valueOf("relative error too high"))
    }
    i = i + BigInt(1)
  }
}

def main(): Any = {
  test_fast_inverse_sqrt()
  var i: BigInt = BigInt(5)
  while (i <= BigInt(100)) {
    var diff: Double = 1.0 / sqrtApprox(i.toString.toDouble) - fast_inverse_sqrt(i.toString.toDouble)
    println(_str(_str(i) + ": " + _str(diff)))
    i = i + BigInt(5)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
