// Generated by Mochi v0.10.60 on 2025-08-08 11:23:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def key(x: BigInt, y: BigInt): String = {
  return String.valueOf(x) + "," + String.valueOf(y)
}

def joint_probability_distribution(x_values: ArrayBuffer[BigInt], y_values: ArrayBuffer[BigInt], x_probabilities: ArrayBuffer[Double], y_probabilities: ArrayBuffer[Double]): scala.collection.mutable.Map[String,Double] = {
  var result: scala.collection.mutable.Map[String,Double] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Double]]
  var i: BigInt = BigInt(0)
  while (i < BigInt((x_values).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((y_values).size)) {
      val k: String = key(x_values((i.toInt).toInt), y_values((j.toInt).toInt))
      result.update(k, x_probabilities((i.toInt).toInt) * y_probabilities((j.toInt).toInt))
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return result
}

def expectation(values: ArrayBuffer[BigInt], probabilities: ArrayBuffer[Double]): Double = {
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((values).size)) {
    total = total + (values((i.toInt).toInt)).toDouble * probabilities((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return total
}

def variance(values: ArrayBuffer[BigInt], probabilities: ArrayBuffer[Double]): Double = {
  val mean: Double = expectation(values, probabilities)
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((values).size)) {
    val diff: Double = (values((i.toInt).toInt)).toDouble - mean
    total = total + diff * diff * probabilities((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return total
}

def covariance(x_values: ArrayBuffer[BigInt], y_values: ArrayBuffer[BigInt], x_probabilities: ArrayBuffer[Double], y_probabilities: ArrayBuffer[Double]): Double = {
  val mean_x: Double = expectation(x_values, x_probabilities)
  val mean_y: Double = expectation(y_values, y_probabilities)
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((x_values).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((y_values).size)) {
      val diff_x: Double = (x_values((i.toInt).toInt)).toDouble - mean_x
      val diff_y: Double = (y_values((j.toInt).toInt)).toDouble - mean_y
      total = total + diff_x * diff_y * x_probabilities((i.toInt).toInt) * y_probabilities((j.toInt).toInt)
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return total
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def standard_deviation(v: Double): Double = {
  return sqrtApprox(v)
}

def main(): Any = {
  val x_values: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(2))
  val y_values: ArrayBuffer[BigInt] = ArrayBuffer(-BigInt(2), BigInt(5), BigInt(8))
  val x_probabilities: ArrayBuffer[Double] = ArrayBuffer(0.7, 0.3)
  val y_probabilities: ArrayBuffer[Double] = ArrayBuffer(0.3, 0.5, 0.2)
  val jpd: scala.collection.mutable.Map[String,Double] = joint_probability_distribution(x_values, y_values, x_probabilities, y_probabilities)
  var i: BigInt = BigInt(0)
  while (i < BigInt((x_values).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((y_values).size)) {
      val k: String = key(x_values((i.toInt).toInt), y_values((j.toInt).toInt))
      val prob: Double = jpd.getOrElse(k.toString, 0.0).asInstanceOf[Double]
      println(k + "=" + String.valueOf(prob))
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  val ex: Double = expectation(x_values, x_probabilities)
  val ey: Double = expectation(y_values, y_probabilities)
  val vx: Double = variance(x_values, x_probabilities)
  val vy: Double = variance(y_values, y_probabilities)
  val cov: Double = covariance(x_values, y_values, x_probabilities, y_probabilities)
  println("Ex=" + String.valueOf(ex))
  println("Ey=" + String.valueOf(ey))
  println("Vx=" + String.valueOf(vx))
  println("Vy=" + String.valueOf(vy))
  println("Cov=" + String.valueOf(cov))
  println("Sx=" + String.valueOf(standard_deviation(vx)))
  println("Sy=" + String.valueOf(standard_deviation(vy)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
