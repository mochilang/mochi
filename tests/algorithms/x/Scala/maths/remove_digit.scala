// Generated by Mochi v0.10.61 on 2025-08-08 16:09:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def remove_digit(num: BigInt): BigInt = {
  var n: BigInt = num
  if (n < BigInt(0)) {
    n = -n
  }
  var max_val: BigInt = BigInt(0)
  var divisor: BigInt = BigInt(1)
  while (divisor <= n) {
    val higher: BigInt = n / (divisor * BigInt(10))
    val lower: BigInt = n % divisor
    val candidate: BigInt = higher * divisor + lower
    if (candidate > max_val) {
      max_val = candidate
    }
    divisor = divisor * BigInt(10)
  }
  return max_val
}

def test_remove_digit(): Any = {
  if (remove_digit(BigInt(152)) != BigInt(52)) {
    throw new RuntimeException(String.valueOf("remove_digit(152) failed"))
  }
  if (remove_digit(BigInt(6385)) != BigInt(685)) {
    throw new RuntimeException(String.valueOf("remove_digit(6385) failed"))
  }
  if (remove_digit(-BigInt(11)) != BigInt(1)) {
    throw new RuntimeException(String.valueOf("remove_digit(-11) failed"))
  }
  if (remove_digit(BigInt(2222222)) != BigInt(222222)) {
    throw new RuntimeException(String.valueOf("remove_digit(2222222) failed"))
  }
}

def main(): Any = {
  test_remove_digit()
  println(remove_digit(BigInt(152)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
