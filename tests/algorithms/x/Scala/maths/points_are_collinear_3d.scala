// Generated by Mochi v0.10.61 on 2025-08-08 16:01:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Point3d(var x: Double, var y: Double, var z: Double)

case class Vector3d(var x: Double, var y: Double, var z: Double)

def create_vector(p1: Point3d, p2: Point3d): Vector3d = {
  val vx: Double = p2.x - p1.x
  val vy: Double = p2.y - p1.y
  val vz: Double = p2.z - p1.z
  return Vector3d(vx, vy, vz)
}

def get_3d_vectors_cross(ab: Vector3d, ac: Vector3d): Vector3d = {
  val cx: Double = ab.y * ac.z - ab.z * ac.y
  val cy: Double = ab.z * ac.x - ab.x * ac.z
  val cz: Double = ab.x * ac.y - ab.y * ac.x
  return Vector3d(cx, cy, cz)
}

def pow10(exp: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = result * 10.0
    i = i + BigInt(1)
  }
  return result
}

def round_float(x: Double, digits: BigInt): Double = {
  val factor: Double = pow10(digits)
  var v: Double = x * factor
  if (v >= 0.0) {
    v = v + 0.5
  } else {
    v = v - 0.5
  }
  val t: BigInt = BigInt(v.toString.toDouble.toInt)
  return t.toString.toDouble / factor
}

def is_zero_vector(v: Vector3d, accuracy: BigInt): Boolean = {
  return ((round_float(v.x, accuracy) == 0.0 && round_float(v.y, accuracy) == 0.0).asInstanceOf[Boolean] && round_float(v.z, accuracy) == 0.0).asInstanceOf[Boolean]
}

def are_collinear(a: Point3d, b: Point3d, c: Point3d, accuracy: BigInt): Boolean = {
  val ab: Vector3d = create_vector(a, b)
  val ac: Vector3d = create_vector(a, c)
  val cross: Vector3d = get_3d_vectors_cross(ab, ac)
  return is_zero_vector(cross, accuracy)
}

def test_are_collinear(): Any = {
  val p1: Point3d = Point3d(0.0, 0.0, 0.0)
  val p2: Point3d = Point3d(1.0, 1.0, 1.0)
  val p3: Point3d = Point3d(2.0, 2.0, 2.0)
  if (!are_collinear(p1, p2, p3, BigInt(10))) {
    throw new RuntimeException(String.valueOf("collinear test failed"))
  }
  val q3: Point3d = Point3d(1.0, 2.0, 3.0)
  if (are_collinear(p1, p2, q3, BigInt(10))) {
    throw new RuntimeException(String.valueOf("non-collinear test failed"))
  }
}

def main(): Any = {
  test_are_collinear()
  val a: Point3d = Point3d(4.802293498137402, 3.536233125455244, 0.0)
  val b: Point3d = Point3d(-2.186788107953106, -9.24561398001649, 7.141509524846482)
  val c: Point3d = Point3d(1.530169574640268, -2.447927606600034, 3.343487096469054)
  println(String.valueOf(are_collinear(a, b, c, BigInt(10))))
  val d: Point3d = Point3d(2.399001826862445, -2.452009976680793, 4.464656666157666)
  val e: Point3d = Point3d(-3.682816335934376, 5.753788986533145, 9.490993909044244)
  val f: Point3d = Point3d(1.962903518985307, 3.741415730125627, 7.0)
  println(String.valueOf(are_collinear(d, e, f, BigInt(10))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
