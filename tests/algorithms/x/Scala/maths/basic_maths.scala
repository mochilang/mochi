// Generated by Mochi v0.10.67 on 2025-08-16 21:34:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def pow_int(base: BigInt, exp: BigInt): BigInt = {
  var result: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = result * base
    i = i + BigInt(1)
  }
  return result
}

def prime_factors(n: BigInt): ArrayBuffer[BigInt] = {
  if (n <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("Only positive integers have prime factors"))
  }
  var num: BigInt = n
  var pf: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  while (num % BigInt(2) == BigInt(0)) {
    pf = (pf :+ BigInt(2))
    num = num / BigInt(2)
  }
  var i: BigInt = BigInt(3)
  while (i * i <= num) {
    while (num % i == BigInt(0)) {
      pf = (pf :+ i)
      num = num / i
    }
    i = i + BigInt(2)
  }
  if (num > BigInt(2)) {
    pf = (pf :+ num)
  }
  return pf
}

def number_of_divisors(n: BigInt): BigInt = {
  if (n <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("Only positive numbers are accepted"))
  }
  var num: BigInt = n
  var div: BigInt = BigInt(1)
  var temp: BigInt = BigInt(1)
  while (num % BigInt(2) == BigInt(0)) {
    temp = temp + BigInt(1)
    num = num / BigInt(2)
  }
  div = div * temp
  var i: BigInt = BigInt(3)
  while (i * i <= num) {
    temp = BigInt(1)
    while (num % i == BigInt(0)) {
      temp = temp + BigInt(1)
      num = num / i
    }
    div = div * temp
    i = i + BigInt(2)
  }
  if (num > BigInt(1)) {
    div = div * BigInt(2)
  }
  return div
}

def sum_of_divisors(n: BigInt): BigInt = {
  if (n <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("Only positive numbers are accepted"))
  }
  var num: BigInt = n
  var s: BigInt = BigInt(1)
  var temp: BigInt = BigInt(1)
  while (num % BigInt(2) == BigInt(0)) {
    temp = temp + BigInt(1)
    num = num / BigInt(2)
  }
  if (temp > BigInt(1)) {
    s = s * ((pow_int(BigInt(2), temp) - BigInt(1)) / BigInt(1))
  }
  var i: BigInt = BigInt(3)
  while (i * i <= num) {
    temp = BigInt(1)
    while (num % i == BigInt(0)) {
      temp = temp + BigInt(1)
      num = num / i
    }
    if (temp > BigInt(1)) {
      s = s * ((pow_int(i, temp) - BigInt(1)) / (i - BigInt(1)))
    }
    i = i + BigInt(2)
  }
  return s
}

def contains(arr: ArrayBuffer[BigInt], x: BigInt): Boolean = {
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((arr).size)) {
    if (arr.lift((idx.toInt).toInt).getOrElse(BigInt(0)) == x) {
      return true
    }
    idx = idx + BigInt(1)
  }
  return false
}

def unique(arr: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((arr).size)) {
    var v: BigInt = arr.lift((idx.toInt).toInt).getOrElse(BigInt(0))
    if (!(result.contains(v))) {
      result = (result :+ v)
    }
    idx = idx + BigInt(1)
  }
  return result
}

def euler_phi(n: BigInt): BigInt = {
  if (n <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("Only positive numbers are accepted"))
  }
  var s: BigInt = n
  var factors: ArrayBuffer[BigInt] = unique(prime_factors(n))
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((factors).size)) {
    var x: BigInt = factors.lift((idx.toInt).toInt).getOrElse(BigInt(0))
    s = s / x * (x - BigInt(1))
    idx = idx + BigInt(1)
  }
  return s
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(_str(prime_factors(BigInt(100)))))
    println(_str(_str(number_of_divisors(BigInt(100)))))
    println(_str(_str(sum_of_divisors(BigInt(100)))))
    println(_str(_str(euler_phi(BigInt(100)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
