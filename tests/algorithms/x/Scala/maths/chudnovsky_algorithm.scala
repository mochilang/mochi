// Generated by Mochi v0.10.59 on 2025-08-07 12:48:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def factorial_float(n: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(2)
  while (i <= n) {
    result = result * i.toString.toDouble
    i = i + BigInt(1)
  }
  return result
}

def pi(n: BigInt): Double = {
  if (n < BigInt(1)) {
    throw new RuntimeException(String.valueOf("Undefined for non-natural numbers"))
  }
  val iterations: BigInt = (n + BigInt(13)) / BigInt(14)
  val constant_term: Double = 426880.0 * sqrtApprox(10005.0)
  var exponential_term: Double = 1.0
  var linear_term: Double = 13591409.0
  var partial_sum: Double = linear_term
  var k: BigInt = BigInt(1)
  while (k < iterations) {
    val k6: BigInt = BigInt(6) * k
    val k3: BigInt = BigInt(3) * k
    val fact6k: Double = factorial_float(k6)
    val fact3k: Double = factorial_float(k3)
    val factk: Double = factorial_float(k)
    val multinomial: Double = fact6k / (fact3k * factk * factk * factk)
    linear_term = linear_term + 545140134.0
    exponential_term = exponential_term * -262537412640768000.0
    partial_sum = partial_sum + multinomial * linear_term / exponential_term
    k = k + BigInt(1)
  }
  return constant_term / partial_sum
}

val n: BigInt = BigInt(50)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("The first " + String.valueOf(n) + " digits of pi is: " + String.valueOf(pi(n)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
