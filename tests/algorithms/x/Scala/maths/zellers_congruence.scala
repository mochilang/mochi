// Generated by Mochi v0.10.61 on 2025-08-08 18:03:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def parse_decimal(s: String): BigInt = {
  var value: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    if ((c.charAt(BigInt(0).toInt) < '0' || c.charAt(BigInt(0).toInt) > '9').asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("invalid literal"))
    }
    value = value * BigInt(10) + BigInt(c.toString.toDouble.toInt)
    i = i + BigInt(1)
  }
  return value
}

def zeller_day(date_input: String): String = {
  val days: scala.collection.mutable.Map[BigInt,String] = scala.collection.mutable.Map(BigInt(0) -> ("Sunday"), BigInt(1) -> ("Monday"), BigInt(2) -> ("Tuesday"), BigInt(3) -> ("Wednesday"), BigInt(4) -> ("Thursday"), BigInt(5) -> ("Friday"), BigInt(6) -> ("Saturday"))
  if (BigInt((date_input).size) != BigInt(10)) {
    throw new RuntimeException(String.valueOf("Must be 10 characters long"))
  }
  val m: BigInt = parse_decimal(date_input.slice((BigInt(0)).toInt, (BigInt(2)).toInt))
  if ((m <= BigInt(0) || m >= BigInt(13)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Month must be between 1 - 12"))
  }
  val sep1: String = date_input.slice((BigInt(2).toInt).toInt, (BigInt(2).toInt).toInt + 1)
  if ((sep1 != "-" && sep1 != "/").asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Date separator must be '-' or '/'"))
  }
  val d: BigInt = parse_decimal(date_input.slice((BigInt(3)).toInt, (BigInt(5)).toInt))
  if ((d <= BigInt(0) || d >= BigInt(32)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Date must be between 1 - 31"))
  }
  val sep2: String = date_input.slice((BigInt(5).toInt).toInt, (BigInt(5).toInt).toInt + 1)
  if ((sep2 != "-" && sep2 != "/").asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Date separator must be '-' or '/'"))
  }
  val y: BigInt = parse_decimal(date_input.slice((BigInt(6)).toInt, (BigInt(10)).toInt))
  if ((y <= BigInt(45) || y >= BigInt(8500)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Year out of range. There has to be some sort of limit...right?"))
  }
  var year: BigInt = y
  var month: BigInt = m
  if (month <= BigInt(2)) {
    year = year - BigInt(1)
    month = month + BigInt(12)
  }
  val c: BigInt = year / BigInt(100)
  val k: BigInt = year % BigInt(100)
  val t: BigInt = BigInt((2.6 * month.toString.toDouble - 5.39).toInt)
  val u: BigInt = c / BigInt(4)
  val v: BigInt = k / BigInt(4)
  val x: BigInt = d + k
  val z: BigInt = t + u + v + x
  val w: BigInt = z - BigInt(2) * c
  var f: BigInt = w % BigInt(7)
  if (f < BigInt(0)) {
    f = f + BigInt(7)
  }
  return days.getOrElse(f, "").asInstanceOf[String]
}

def zeller(date_input: String): String = {
  val day: String = zeller_day(date_input)
  return "Your date " + date_input + ", is a " + day + "!"
}

def test_zeller(): Any = {
  val inputs: ArrayBuffer[String] = ArrayBuffer("01-31-2010", "02-01-2010", "11-26-2024", "07-04-1776")
  val expected: ArrayBuffer[String] = ArrayBuffer("Sunday", "Monday", "Tuesday", "Thursday")
  var i: BigInt = BigInt(0)
  while (i < BigInt((inputs).size)) {
    val res: String = zeller_day(inputs.lift((i.toInt).toInt).getOrElse(""))
    if (res != expected.lift((i.toInt).toInt).getOrElse("")) {
      throw new RuntimeException(String.valueOf("zeller test failed"))
    }
    i = i + BigInt(1)
  }
}

def main(): Any = {
  test_zeller()
  println(zeller("01-31-2010"))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
