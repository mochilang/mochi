// Generated by Mochi v0.10.61 on 2025-08-08 16:10:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def hexagonal_numbers(length: BigInt): ArrayBuffer[BigInt] = {
  if (length <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("Length must be a positive integer."))
  }
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var n: BigInt = BigInt(0)
  while (n < length) {
    res = res :+ n * (BigInt(2) * n - BigInt(1))
    n = n + BigInt(1)
  }
  return res
}

def test_hexagonal_numbers(): Any = {
  val expected5: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(1), BigInt(6), BigInt(15), BigInt(28))
  val result5: ArrayBuffer[BigInt] = hexagonal_numbers(BigInt(5))
  if (result5 != expected5) {
    throw new RuntimeException(String.valueOf("hexagonal_numbers(5) failed"))
  }
  val expected10: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(1), BigInt(6), BigInt(15), BigInt(28), BigInt(45), BigInt(66), BigInt(91), BigInt(120), BigInt(153))
  val result10: ArrayBuffer[BigInt] = hexagonal_numbers(BigInt(10))
  if (result10 != expected10) {
    throw new RuntimeException(String.valueOf("hexagonal_numbers(10) failed"))
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    test_hexagonal_numbers()
    println(_str(hexagonal_numbers(BigInt(5))))
    println(_str(hexagonal_numbers(BigInt(10))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
