// Generated by Mochi v0.10.61 on 2025-08-08 16:10:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_harmonic_series(series: ArrayBuffer[Double]): Boolean = {
  if (BigInt((series).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("Input list must be a non empty list"))
  }
  if (BigInt((series).size) == BigInt(1)) {
    if (series((BigInt(0).toInt).toInt) == 0.0) {
      throw new RuntimeException(String.valueOf("Input series cannot have 0 as an element"))
    }
    return true
  }
  var rec_series: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((series).size)) {
    val `val`: Double = series((i.toInt).toInt)
    if (`val` == 0.0) {
      throw new RuntimeException(String.valueOf("Input series cannot have 0 as an element"))
    }
    rec_series = rec_series :+ 1.0 / `val`
    i = i + BigInt(1)
  }
  val common_diff: Double = rec_series((BigInt(1).toInt).toInt) - rec_series((BigInt(0).toInt).toInt)
  var idx: BigInt = BigInt(2)
  while (idx < BigInt((rec_series).size)) {
    if (rec_series((idx.toInt).toInt) - rec_series(((idx - BigInt(1)).toInt).toInt) != common_diff) {
      return false
    }
    idx = idx + BigInt(1)
  }
  return true
}

def harmonic_mean(series: ArrayBuffer[Double]): Double = {
  if (BigInt((series).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("Input list must be a non empty list"))
  }
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((series).size)) {
    total = total + 1.0 / series((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return (BigInt((series).size)).toDouble / total
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(is_harmonic_series(ArrayBuffer(1.0, 2.0 / 3.0, 1.0 / 2.0, 2.0 / 5.0, 1.0 / 3.0)))
    println(is_harmonic_series(ArrayBuffer(1.0, 2.0 / 3.0, 2.0 / 5.0, 1.0 / 3.0)))
    println(harmonic_mean(ArrayBuffer(1.0, 4.0, 4.0)))
    println(harmonic_mean(ArrayBuffer(3.0, 6.0, 9.0, 12.0)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
