// Generated by Mochi v0.10.61 on 2025-08-08 16:10:14 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_geometric_series(series: ArrayBuffer[Double]): Boolean = {
  if (BigInt((series).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("Input list must be a non empty list"))
  }
  if (BigInt((series).size) == BigInt(1)) {
    return true
  }
  if (series((BigInt(0).toInt).toInt) == 0.0) {
    return false
  }
  val ratio: Double = series((BigInt(1).toInt).toInt) / series((BigInt(0).toInt).toInt)
  var i: BigInt = BigInt(0)
  while (i < BigInt((series).size) - BigInt(1)) {
    if (series((i.toInt).toInt) == 0.0) {
      return false
    }
    if (series(((i + BigInt(1)).toInt).toInt) / series((i.toInt).toInt) != ratio) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def geometric_mean(series: ArrayBuffer[Double]): Double = {
  if (BigInt((series).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("Input list must be a non empty list"))
  }
  var product: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((series).size)) {
    product = product * series((i.toInt).toInt)
    i = i + BigInt(1)
  }
  val n: BigInt = BigInt((series).size)
  return nth_root(product, n)
}

def pow_float(base: Double, exp: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = result * base
    i = i + BigInt(1)
  }
  return result
}

def nth_root(value: Double, n: BigInt): Double = {
  if (value == 0.0) {
    return 0.0
  }
  var low: Double = 0.0
  var high: Double = value
  if (value < 1.0) {
    high = 1.0
  }
  var mid: Double = (low + high) / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(40)) {
    val mp: Double = pow_float(mid, n)
    if (mp > value) {
      high = mid
    } else {
      low = mid
    }
    mid = (low + high) / 2.0
    i = i + BigInt(1)
  }
  return mid
}

def test_geometric(): Any = {
  val a: ArrayBuffer[Double] = ArrayBuffer(2.0, 4.0, 8.0)
  if (!is_geometric_series(a)) {
    throw new RuntimeException(String.valueOf("expected geometric series"))
  }
  val b: ArrayBuffer[Double] = ArrayBuffer(1.0, 2.0, 3.0)
  if (is_geometric_series(b)) {
    throw new RuntimeException(String.valueOf("expected non geometric series"))
  }
}

def main(): Any = {
  test_geometric()
  println(geometric_mean(ArrayBuffer(2.0, 4.0, 8.0)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
