// Generated by Mochi v0.10.61 on 2025-08-08 16:11:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def pow_string(base: BigInt, exp: BigInt): String = {
  if (exp >= BigInt(0)) {
    var res: BigInt = BigInt(1)
    var i: BigInt = BigInt(0)
    while (i < exp) {
      res = res * base
      i = i + BigInt(1)
    }
    return (_str(res)).toString
  }
  var e: BigInt = -exp
  var res: Double = 1.0
  var b: Double = base.toString.toDouble * 1.0
  var i: BigInt = BigInt(0)
  while (i < e) {
    res = res * b
    i = i + BigInt(1)
  }
  val value: Double = 1.0 / res
  return (_str(value)).toString
}

def p_series(nth_term: BigInt, power: BigInt): ArrayBuffer[String] = {
  var series: ArrayBuffer[String] = ArrayBuffer[String]()
  if (nth_term <= BigInt(0)) {
    return series
  }
  var i: BigInt = BigInt(1)
  while (i <= nth_term) {
    if (i == BigInt(1)) {
      series = series :+ "1"
    } else {
      series = series :+ "1 / " + pow_string(i, power)
    }
    i = i + BigInt(1)
  }
  return series
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(p_series(BigInt(5), BigInt(2)))
    println(p_series(-BigInt(5), BigInt(2)))
    println(p_series(BigInt(5), -BigInt(2)))
    println(p_series(BigInt(0), BigInt(0)))
    println(p_series(BigInt(1), BigInt(1)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
