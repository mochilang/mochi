// Generated by Mochi v0.10.67 on 2025-08-17 12:25:33 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def floor(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((i.toString.toDouble) > x) {
    i = i - BigInt(1)
  }
  return i.toString.toDouble
}

def pow10(n: BigInt): Double = {
  var p: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < n) {
    p = p * 10.0
    i = i + BigInt(1)
  }
  return p
}

def round(x: Double, n: BigInt): Double = {
  var m: Double = pow10(n)
  return Math.floor(x * m + 0.5) / m
}

def clone_matrix(mat: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var new_mat: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((mat).size)) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      row = (row :+ mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))
      j = j + BigInt(1)
    }
    new_mat = (new_mat :+ row)
    i = i + BigInt(1)
  }
  return new_mat
}

def solve_simultaneous(equations: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[Double] = {
  var n: BigInt = BigInt((equations).size)
  if (n == BigInt(0)) {
    throw new RuntimeException(String.valueOf("solve_simultaneous() requires n lists of length n+1"))
  }
  var m: BigInt = n + BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < n) {
    if (BigInt((equations.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) != m) {
      throw new RuntimeException(String.valueOf("solve_simultaneous() requires n lists of length n+1"))
    }
    i = i + BigInt(1)
  }
  var a: ArrayBuffer[ArrayBuffer[Double]] = clone_matrix(equations)
  var row: BigInt = BigInt(0)
  while (row < n) {
    var pivot: BigInt = row
    while (pivot < n && a.lift((pivot.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((row.toInt).toInt).getOrElse(0.0) == 0.0) {
      pivot = pivot + BigInt(1)
    }
    if (pivot == n) {
      throw new RuntimeException(String.valueOf("solve_simultaneous() requires at least 1 full equation"))
    }
    if (pivot != row) {
      var temp: ArrayBuffer[Double] = a.lift((row.toInt).toInt).getOrElse(ArrayBuffer[Double]())
      a((row).toInt) = a.lift((pivot.toInt).toInt).getOrElse(ArrayBuffer[Double]())
      a((pivot).toInt) = temp
    }
    var pivot_val: Double = a.lift((row.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((row.toInt).toInt).getOrElse(0.0)
    var col: BigInt = BigInt(0)
    while (col < m) {
      a((row).toInt)((col).toInt) = a.lift((row.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((col.toInt).toInt).getOrElse(0.0) / pivot_val
      col = col + BigInt(1)
    }
    var r: BigInt = BigInt(0)
    while (r < n) {
      if (r != row) {
        var factor: Double = a.lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((row.toInt).toInt).getOrElse(0.0)
        var c: BigInt = BigInt(0)
        while (c < m) {
          a((r).toInt)((c).toInt) = a.lift((r.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((c.toInt).toInt).getOrElse(0.0) - factor * a.lift((row.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((c.toInt).toInt).getOrElse(0.0)
          c = c + BigInt(1)
        }
      }
      r = r + BigInt(1)
    }
    row = row + BigInt(1)
  }
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var k: BigInt = BigInt(0)
  while (k < n) {
    res = (res :+ round(a.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift(((m - BigInt(1)).toInt).toInt).getOrElse(0.0), BigInt(5)))
    k = k + BigInt(1)
  }
  return res
}

def test_solver(): Any = {
  var a: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(1.0, 2.0, 3.0), ArrayBuffer(4.0, 5.0, 6.0))
  var r1: ArrayBuffer[Double] = solve_simultaneous(a)
  if (!((BigInt((r1).size) == BigInt(2) && r1.lift((BigInt(0).toInt).toInt).getOrElse(0.0) == 0.0 - 1.0).asInstanceOf[Boolean] && r1.lift((BigInt(1).toInt).toInt).getOrElse(0.0) == 2.0)) {
    throw new RuntimeException(String.valueOf("test1 failed"))
  }
  var b: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0 - 3.0, 1.0, 7.0), ArrayBuffer(3.0, 2.0, 0.0 - 1.0, 11.0), ArrayBuffer(5.0, 1.0, 0.0 - 2.0, 12.0))
  var r2: ArrayBuffer[Double] = solve_simultaneous(b)
  if (!(((BigInt((r2).size) == BigInt(3) && r2.lift((BigInt(0).toInt).toInt).getOrElse(0.0) == 6.4).asInstanceOf[Boolean] && r2.lift((BigInt(1).toInt).toInt).getOrElse(0.0) == 1.2).asInstanceOf[Boolean] && r2.lift((BigInt(2).toInt).toInt).getOrElse(0.0) == 10.6)) {
    throw new RuntimeException(String.valueOf("test2 failed"))
  }
}

def main(): Any = {
  test_solver()
  var eq: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(2.0, 1.0, 1.0, 1.0, 1.0, 4.0), ArrayBuffer(1.0, 2.0, 1.0, 1.0, 1.0, 5.0), ArrayBuffer(1.0, 1.0, 2.0, 1.0, 1.0, 6.0), ArrayBuffer(1.0, 1.0, 1.0, 2.0, 1.0, 7.0), ArrayBuffer(1.0, 1.0, 1.0, 1.0, 2.0, 8.0))
  println(_str(_str(solve_simultaneous(eq))))
  println(_str(_str(solve_simultaneous(ArrayBuffer(ArrayBuffer(4.0, 2.0))))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
