// Generated by Mochi v0.10.66 on 2025-08-16 14:59:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def absf(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def sqrt(x: Double): Double = {
  if (x < 0.0) {
    throw new RuntimeException(String.valueOf("sqrt domain error"))
  }
  var guess: Double = x / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def ln(x: Double): Double = {
  if (x <= 0.0) {
    throw new RuntimeException(String.valueOf("ln domain error"))
  }
  var y: Double = (x - 1.0) / (x + 1.0)
  var y2: Double = y * y
  var term: Double = y
  var sum: Double = 0.0
  var k: BigInt = BigInt(0)
  while (k < BigInt(10)) {
    var denom: Double = (BigInt(2) * k + BigInt(1)).toDouble
    sum = sum + term / denom
    term = term * y2
    k = k + BigInt(1)
  }
  return 2.0 * sum
}

def exp_series(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var n: BigInt = BigInt(1)
  while (n < BigInt(20)) {
    term = term * x / n.toString.toDouble
    sum = sum + term
    n = n + BigInt(1)
  }
  return sum
}

def powf(base: Double, exponent: Double): Double = {
  if (base <= 0.0) {
    return 0.0
  }
  return exp_series(exponent * math.log(base))
}

def integrand(x: Double, z: Double): Double = {
  return powf(x, z - 1.0) * exp_series(-x)
}

def gamma_iterative(num: Double): Double = {
  if (num <= 0.0) {
    throw new RuntimeException(String.valueOf("math domain error"))
  }
  var step: Double = 0.001
  var limit: Double = 100.0
  var x: Double = step
  var total: Double = 0.0
  while (x < limit) {
    total = total + integrand(x, num) * step
    x = x + step
  }
  return total
}

def gamma_recursive(num: Double): Double = {
  if (num <= 0.0) {
    throw new RuntimeException(String.valueOf("math domain error"))
  }
  if (num > 171.5) {
    throw new RuntimeException(String.valueOf("math range error"))
  }
  var int_part: BigInt = BigInt(num.toString.toDouble.toInt)
  var frac: Double = num - int_part.toString.toDouble
  if (!(absf(frac) < 0.000001 || absf(frac - 0.5) < 0.000001)) {
    throw new RuntimeException(String.valueOf("num must be an integer or a half-integer"))
  }
  if (absf(num - 0.5) < 0.000001) {
    return sqrt(PI)
  }
  if (absf(num - 1.0) < 0.000001) {
    return 1.0
  }
  return (num - 1.0) * gamma_recursive(num - 1.0)
}

def main(): Any = {
  println(_str(gamma_iterative(5.0)))
  println(_str(gamma_recursive(5.0)))
  println(_str(gamma_recursive(0.5)))
}

var PI: Double = 3.141592653589793

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
