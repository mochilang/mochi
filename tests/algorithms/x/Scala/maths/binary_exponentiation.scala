// Generated by Mochi v0.10.66 on 2025-08-16 14:53:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.math.BigDecimal.valueOf(d).stripTrailingZeros.toPlainString; if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def binary_exp_recursive(base: Double, exponent: BigInt): Double = {
  if (exponent < BigInt(0)) {
    throw new RuntimeException(String.valueOf("exponent must be non-negative"))
  }
  if (exponent == BigInt(0)) {
    return 1.0
  }
  if (exponent % BigInt(2) == BigInt(1)) {
    return binary_exp_recursive(base, exponent - BigInt(1)) * base
  }
  var half: Double = binary_exp_recursive(base, exponent / BigInt(2))
  return half * half
}

def binary_exp_iterative(base: Double, exponent: BigInt): Double = {
  if (exponent < BigInt(0)) {
    throw new RuntimeException(String.valueOf("exponent must be non-negative"))
  }
  var result: Double = 1.0
  var b: Double = base
  var e: BigInt = exponent
  while (e > BigInt(0)) {
    if (e % BigInt(2) == BigInt(1)) {
      result = result * b
    }
    b = b * b
    e = e / BigInt(2)
  }
  return result
}

def binary_exp_mod_recursive(base: BigInt, exponent: BigInt, modulus: BigInt): BigInt = {
  if (exponent < BigInt(0)) {
    throw new RuntimeException(String.valueOf("exponent must be non-negative"))
  }
  if (modulus <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("modulus must be positive"))
  }
  if (exponent == BigInt(0)) {
    return BigInt(1) % modulus
  }
  if (exponent % BigInt(2) == BigInt(1)) {
    return binary_exp_mod_recursive(base, exponent - BigInt(1), modulus) * (base % modulus) % modulus
  }
  var r: BigInt = binary_exp_mod_recursive(base, exponent / BigInt(2), modulus)
  return r * r % modulus
}

def binary_exp_mod_iterative(base: BigInt, exponent: BigInt, modulus: BigInt): BigInt = {
  if (exponent < BigInt(0)) {
    throw new RuntimeException(String.valueOf("exponent must be non-negative"))
  }
  if (modulus <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("modulus must be positive"))
  }
  var result: BigInt = BigInt(1) % modulus
  var b: BigInt = base % modulus
  var e: BigInt = exponent
  while (e > BigInt(0)) {
    if (e % BigInt(2) == BigInt(1)) {
      result = result * b % modulus
    }
    b = b * b % modulus
    e = e / BigInt(2)
  }
  return result
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(binary_exp_recursive(3.0, BigInt(5))))
    println(_str(binary_exp_iterative(1.5, BigInt(4))))
    println(_str(binary_exp_mod_recursive(BigInt(3), BigInt(4), BigInt(5))))
    println(_str(binary_exp_mod_iterative(BigInt(11), BigInt(13), BigInt(7))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
