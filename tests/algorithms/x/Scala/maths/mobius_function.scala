// Generated by Mochi v0.10.60 on 2025-08-08 11:25:17 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def primeFactors(_n: BigInt): ArrayBuffer[BigInt] = {
  var n: BigInt = _n
  var i: BigInt = BigInt(2)
  var factors: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  while (i * i <= n) {
    if (n % i == BigInt(0)) {
      factors = factors :+ i
      n = n / i
    } else {
      i = i + BigInt(1)
    }
  }
  if (n > BigInt(1)) {
    factors = factors :+ n
  }
  return factors
}

def isSquareFree(factors: ArrayBuffer[BigInt]): Boolean = {
  var seen: scala.collection.mutable.Map[BigInt,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,Boolean]]
  for (f <- factors) {
    if ((seen.contains(f)).asInstanceOf[Boolean]) {
      return false
    }
    seen.update(f, true)
  }
  return true
}

def mobius(n: BigInt): BigInt = {
  val factors: ArrayBuffer[BigInt] = primeFactors(n)
  if (isSquareFree(factors)) {
    return (if (BigInt((factors).size) % BigInt(2) == BigInt(0)) BigInt(1) else -BigInt(1))
  }
  return BigInt(0)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(mobius(BigInt(24)))
    println(mobius(-BigInt(1)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
