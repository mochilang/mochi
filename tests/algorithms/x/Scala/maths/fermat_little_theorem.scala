// Generated by Mochi v0.10.59 on 2025-08-07 12:50:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def binary_exponentiation(a: BigInt, n: BigInt, mod: BigInt): BigInt = {
  if (n == BigInt(0)) {
    return BigInt(1)
  }
  if (n % BigInt(2) == BigInt(1)) {
    return binary_exponentiation(a, n - BigInt(1), mod) * a % mod
  }
  val b: BigInt = binary_exponentiation(a, n / BigInt(2), mod)
  return b * b % mod
}

def naive_exponent_mod(a: BigInt, n: BigInt, mod: BigInt): BigInt = {
  var result: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < n) {
    result = result * a % mod
    i = i + BigInt(1)
  }
  return result
}

def print_bool(b: Boolean): Any = {
  if (b) {
    println(true)
  } else {
    println(false)
  }
}

val p: BigInt = BigInt(701)

val a: BigInt = BigInt(1000000000)

val b: BigInt = BigInt(10)

val left: BigInt = a / b % p

val right_fast: BigInt = a * binary_exponentiation(b, p - BigInt(2), p) % p

val right_naive: BigInt = a * naive_exponent_mod(b, p - BigInt(2), p) % p

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_bool(left == right_fast)
    print_bool(left == right_naive)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
