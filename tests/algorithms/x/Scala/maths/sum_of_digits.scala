// Generated by Mochi v0.10.61 on 2025-08-08 18:01:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def abs_int(n: BigInt): BigInt = {
  if (n < BigInt(0)) {
    return -n
  }
  return n
}

def sum_of_digits(n: BigInt): BigInt = {
  var m: BigInt = abs_int(n)
  var res: BigInt = BigInt(0)
  while (m > BigInt(0)) {
    res = res + m % BigInt(10)
    m = m / BigInt(10)
  }
  return res
}

def sum_of_digits_recursion(n: BigInt): BigInt = {
  val m: BigInt = abs_int(n)
  if (m < BigInt(10)) {
    return m
  }
  return m % BigInt(10) + sum_of_digits_recursion(m / BigInt(10))
}

def sum_of_digits_compact(n: BigInt): BigInt = {
  val s = _str(abs_int(n))
  var res: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    res = res + BigInt((s.slice((i.toInt).toInt, (i.toInt).toInt + 1)).toString.toDouble.toInt)
    i = i + BigInt(1)
  }
  return res
}

def test_sum_of_digits(): Any = {
  if (sum_of_digits(BigInt(12345)) != BigInt(15)) {
    throw new RuntimeException(String.valueOf("sum_of_digits 12345 failed"))
  }
  if (sum_of_digits(BigInt(123)) != BigInt(6)) {
    throw new RuntimeException(String.valueOf("sum_of_digits 123 failed"))
  }
  if (sum_of_digits(-BigInt(123)) != BigInt(6)) {
    throw new RuntimeException(String.valueOf("sum_of_digits -123 failed"))
  }
  if (sum_of_digits(BigInt(0)) != BigInt(0)) {
    throw new RuntimeException(String.valueOf("sum_of_digits 0 failed"))
  }
  if (sum_of_digits_recursion(BigInt(12345)) != BigInt(15)) {
    throw new RuntimeException(String.valueOf("recursion 12345 failed"))
  }
  if (sum_of_digits_recursion(BigInt(123)) != BigInt(6)) {
    throw new RuntimeException(String.valueOf("recursion 123 failed"))
  }
  if (sum_of_digits_recursion(-BigInt(123)) != BigInt(6)) {
    throw new RuntimeException(String.valueOf("recursion -123 failed"))
  }
  if (sum_of_digits_recursion(BigInt(0)) != BigInt(0)) {
    throw new RuntimeException(String.valueOf("recursion 0 failed"))
  }
  if (sum_of_digits_compact(BigInt(12345)) != BigInt(15)) {
    throw new RuntimeException(String.valueOf("compact 12345 failed"))
  }
  if (sum_of_digits_compact(BigInt(123)) != BigInt(6)) {
    throw new RuntimeException(String.valueOf("compact 123 failed"))
  }
  if (sum_of_digits_compact(-BigInt(123)) != BigInt(6)) {
    throw new RuntimeException(String.valueOf("compact -123 failed"))
  }
  if (sum_of_digits_compact(BigInt(0)) != BigInt(0)) {
    throw new RuntimeException(String.valueOf("compact 0 failed"))
  }
}

def main(): Any = {
  test_sum_of_digits()
  println(_str(sum_of_digits(BigInt(12345))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
