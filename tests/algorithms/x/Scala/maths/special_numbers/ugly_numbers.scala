// Generated by Mochi v0.10.61 on 2025-08-08 17:34:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def ugly_numbers(n: BigInt): BigInt = {
  if (n <= BigInt(0)) {
    return BigInt(1)
  }
  var ugly_nums: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  ugly_nums = ugly_nums :+ (BigInt(1))
  var i2: BigInt = BigInt(0)
  var i3: BigInt = BigInt(0)
  var i5: BigInt = BigInt(0)
  var next_2: BigInt = BigInt(2)
  var next_3: BigInt = BigInt(3)
  var next_5: BigInt = BigInt(5)
  var count: BigInt = BigInt(1)
  while (count < n) {
    val next_num: BigInt = (if (next_2 < next_3) (if (next_2 < next_5) next_2 else next_5) else (if (next_3 < next_5) next_3 else next_5))
    ugly_nums = ugly_nums :+ (next_num)
    if (next_num == next_2) {
      i2 = i2 + BigInt(1)
      next_2 = ugly_nums((i2.toInt).toInt) * BigInt(2)
    }
    if (next_num == next_3) {
      i3 = i3 + BigInt(1)
      next_3 = ugly_nums((i3.toInt).toInt) * BigInt(3)
    }
    if (next_num == next_5) {
      i5 = i5 + BigInt(1)
      next_5 = ugly_nums((i5.toInt).toInt) * BigInt(5)
    }
    count = count + BigInt(1)
  }
  return ugly_nums(((BigInt((ugly_nums).size) - BigInt(1)).toInt).toInt)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(ugly_numbers(BigInt(100))))
    println(_str(ugly_numbers(BigInt(0))))
    println(_str(ugly_numbers(BigInt(20))))
    println(_str(ugly_numbers(-BigInt(5))))
    println(_str(ugly_numbers(BigInt(200))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
