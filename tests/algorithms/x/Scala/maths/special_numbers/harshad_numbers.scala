// Generated by Mochi v0.10.67 on 2025-08-17 12:27:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def panic(msg: String): Any = {
}

def char_to_value(c: String): BigInt = {
  var digits: String = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  var i: BigInt = BigInt(0)
  while (i < BigInt((digits).size)) {
    if (digits.slice((i.toInt).toInt, (i.toInt).toInt + 1) == c) {
      return i
    }
    i = i + BigInt(1)
  }
  throw new RuntimeException(String.valueOf("invalid digit"))
  return BigInt(0)
}

def int_to_base(number: BigInt, base: BigInt): String = {
  if ((base < BigInt(2) || base > BigInt(36))) {
    throw new RuntimeException(String.valueOf("'base' must be between 2 and 36 inclusive"))
  }
  if (number < BigInt(0)) {
    throw new RuntimeException(String.valueOf("number must be a positive integer"))
  }
  var digits: String = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  var n: BigInt = number
  var result: String = ""
  while (n > BigInt(0)) {
    var remainder: BigInt = n % base
    result = digits.slice((remainder.toInt).toInt, (remainder.toInt).toInt + 1) + result
    n = n / base
  }
  if (result == "") {
    result = "0"
  }
  return result
}

def base_to_int(num_str: String, base: BigInt): BigInt = {
  var value: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((num_str).size)) {
    var c: String = num_str.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    value = value * base + char_to_value(c)
    i = i + BigInt(1)
  }
  return value
}

def sum_of_digits(num: BigInt, base: BigInt): String = {
  if ((base < BigInt(2) || base > BigInt(36))) {
    throw new RuntimeException(String.valueOf("'base' must be between 2 and 36 inclusive"))
  }
  var num_str: String = int_to_base(num, base)
  var total: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((num_str).size)) {
    var c: String = num_str.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    total = total + char_to_value(c)
    i = i + BigInt(1)
  }
  return int_to_base(total, base)
}

def harshad_numbers_in_base(limit: BigInt, base: BigInt): ArrayBuffer[String] = {
  if ((base < BigInt(2) || base > BigInt(36))) {
    throw new RuntimeException(String.valueOf("'base' must be between 2 and 36 inclusive"))
  }
  if (limit < BigInt(0)) {
    return ArrayBuffer[String]()
  }
  var numbers: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(1)
  while (i < limit) {
    var s: String = sum_of_digits(i, base)
    var divisor: BigInt = base_to_int(s, base)
    if (i % divisor == BigInt(0)) {
      numbers = (numbers :+ int_to_base(i, base))
    }
    i = i + BigInt(1)
  }
  return numbers
}

def is_harshad_number_in_base(num: BigInt, base: BigInt): Boolean = {
  if ((base < BigInt(2) || base > BigInt(36))) {
    throw new RuntimeException(String.valueOf("'base' must be between 2 and 36 inclusive"))
  }
  if (num < BigInt(0)) {
    return false
  }
  var n: String = int_to_base(num, base)
  var d: String = sum_of_digits(num, base)
  var n_val: BigInt = base_to_int(n, base)
  var d_val: BigInt = base_to_int(d, base)
  return n_val % d_val == BigInt(0)
}

def main(): Any = {
  println(_str(int_to_base(BigInt(0), BigInt(21))))
  println(_str(int_to_base(BigInt(23), BigInt(2))))
  println(_str(int_to_base(BigInt(58), BigInt(5))))
  println(_str(int_to_base(BigInt(167), BigInt(16))))
  println(_str(sum_of_digits(BigInt(103), BigInt(12))))
  println(_str(sum_of_digits(BigInt(1275), BigInt(4))))
  println(_str(sum_of_digits(BigInt(6645), BigInt(2))))
  println(_str(harshad_numbers_in_base(BigInt(15), BigInt(2))))
  println(_str(harshad_numbers_in_base(BigInt(12), BigInt(34))))
  println(_str(harshad_numbers_in_base(BigInt(12), BigInt(4))))
  println(_str(is_harshad_number_in_base(BigInt(18), BigInt(10))))
  println(_str(is_harshad_number_in_base(BigInt(21), BigInt(10))))
  println(_str(is_harshad_number_in_base(BigInt(-21), BigInt(5))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
