// Generated by Mochi v0.10.61 on 2025-08-08 16:14:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def hamming(n: BigInt): ArrayBuffer[BigInt] = {
  if (n < BigInt(1)) {
    throw new RuntimeException(String.valueOf("n_element should be a positive number"))
  }
  var hamming_list: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1))
  var i: BigInt = BigInt(0)
  var j: BigInt = BigInt(0)
  var k: BigInt = BigInt(0)
  var index: BigInt = BigInt(1)
  while (index < n) {
    while (hamming_list((i.toInt).toInt) * BigInt(2) <= hamming_list(((BigInt((hamming_list).size) - BigInt(1)).toInt).toInt)) {
      i = i + BigInt(1)
    }
    while (hamming_list((j.toInt).toInt) * BigInt(3) <= hamming_list(((BigInt((hamming_list).size) - BigInt(1)).toInt).toInt)) {
      j = j + BigInt(1)
    }
    while (hamming_list((k.toInt).toInt) * BigInt(5) <= hamming_list(((BigInt((hamming_list).size) - BigInt(1)).toInt).toInt)) {
      k = k + BigInt(1)
    }
    val m1: BigInt = hamming_list((i.toInt).toInt) * BigInt(2)
    val m2: BigInt = hamming_list((j.toInt).toInt) * BigInt(3)
    val m3: BigInt = hamming_list((k.toInt).toInt) * BigInt(5)
    var next: BigInt = m1
    if (m2 < next) {
      next = m2
    }
    if (m3 < next) {
      next = m3
    }
    hamming_list = hamming_list :+ next
    index = index + BigInt(1)
  }
  return hamming_list
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(hamming(BigInt(5)))
    println(hamming(BigInt(10)))
    println(hamming(BigInt(15)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
