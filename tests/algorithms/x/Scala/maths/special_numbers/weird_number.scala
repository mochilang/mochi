// Generated by Mochi v0.10.67 on 2025-08-17 13:34:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def bubble_sort(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = xs
  var n: BigInt = BigInt((arr).size)
  var i: BigInt = BigInt(0)
  while (i < n) {
    var j: BigInt = BigInt(0)
    while (j < n - i - BigInt(1)) {
      if (arr.lift((j.toInt).toInt).getOrElse(BigInt(0)) > arr.lift(((j + BigInt(1)).toInt).toInt).getOrElse(BigInt(0))) {
        var tmp: BigInt = arr.lift((j.toInt).toInt).getOrElse(BigInt(0))
        arr((j).toInt) = arr.lift(((j + BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
        arr((j + BigInt(1)).toInt) = tmp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return arr
}

def factors(num: BigInt): ArrayBuffer[BigInt] = {
  var values: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1))
  var i: BigInt = BigInt(2)
  while (i * i <= num) {
    if (num % i == BigInt(0)) {
      values = (values :+ (i))
      var d: BigInt = num / i
      if (d != i) {
        values = (values :+ (d))
      }
    }
    i = i + BigInt(1)
  }
  return bubble_sort(values)
}

def sum_list(xs: ArrayBuffer[BigInt]): BigInt = {
  var total: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    total = total + xs.lift((i.toInt).toInt).getOrElse(BigInt(0))
    i = i + BigInt(1)
  }
  return total
}

def abundant(n: BigInt): Boolean = {
  return sum_list(factors(n)) > n
}

def semi_perfect(number: BigInt): Boolean = {
  if (number <= BigInt(0)) {
    return true
  }
  var values: ArrayBuffer[BigInt] = factors(number)
  var possible: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var j: BigInt = BigInt(0)
  while (j <= number) {
    possible = (possible :+ (j == BigInt(0)))
    j = j + BigInt(1)
  }
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((values).size)) {
    var v: BigInt = values.lift((idx.toInt).toInt).getOrElse(BigInt(0))
    var s: BigInt = number
    while (s >= v) {
      if (possible.lift(((s - v).toInt).toInt).getOrElse(false)) {
        possible((s).toInt) = true
      }
      s = s - BigInt(1)
    }
    idx = idx + BigInt(1)
  }
  return possible.lift((number.toInt).toInt).getOrElse(false)
}

def weird(number: BigInt): Boolean = {
  return (abundant(number) && semi_perfect(number) == false).asInstanceOf[Boolean]
}

def run_tests(): Any = {
  if (factors(BigInt(12)) != ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4), BigInt(6))) {
    throw new RuntimeException(String.valueOf("factors 12 failed"))
  }
  if (factors(BigInt(1)) != ArrayBuffer(BigInt(1))) {
    throw new RuntimeException(String.valueOf("factors 1 failed"))
  }
  if (factors(BigInt(100)) != ArrayBuffer(BigInt(1), BigInt(2), BigInt(4), BigInt(5), BigInt(10), BigInt(20), BigInt(25), BigInt(50))) {
    throw new RuntimeException(String.valueOf("factors 100 failed"))
  }
  if (abundant(BigInt(0)) != true) {
    throw new RuntimeException(String.valueOf("abundant 0 failed"))
  }
  if (abundant(BigInt(1)) != false) {
    throw new RuntimeException(String.valueOf("abundant 1 failed"))
  }
  if (abundant(BigInt(12)) != true) {
    throw new RuntimeException(String.valueOf("abundant 12 failed"))
  }
  if (abundant(BigInt(13)) != false) {
    throw new RuntimeException(String.valueOf("abundant 13 failed"))
  }
  if (abundant(BigInt(20)) != true) {
    throw new RuntimeException(String.valueOf("abundant 20 failed"))
  }
  if (semi_perfect(BigInt(0)) != true) {
    throw new RuntimeException(String.valueOf("semi_perfect 0 failed"))
  }
  if (semi_perfect(BigInt(1)) != true) {
    throw new RuntimeException(String.valueOf("semi_perfect 1 failed"))
  }
  if (semi_perfect(BigInt(12)) != true) {
    throw new RuntimeException(String.valueOf("semi_perfect 12 failed"))
  }
  if (semi_perfect(BigInt(13)) != false) {
    throw new RuntimeException(String.valueOf("semi_perfect 13 failed"))
  }
  if (weird(BigInt(0)) != false) {
    throw new RuntimeException(String.valueOf("weird 0 failed"))
  }
  if (weird(BigInt(70)) != true) {
    throw new RuntimeException(String.valueOf("weird 70 failed"))
  }
  if (weird(BigInt(77)) != false) {
    throw new RuntimeException(String.valueOf("weird 77 failed"))
  }
}

def main(): Any = {
  run_tests()
  var nums: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(69), BigInt(70), BigInt(71))
  var i: BigInt = BigInt(0)
  while (i < BigInt((nums).size)) {
    var n: BigInt = nums.lift((i.toInt).toInt).getOrElse(BigInt(0))
    if (weird(n)) {
      println(_str(_str(n) + " is weird."))
    } else {
      println(_str(_str(n) + " is not weird."))
    }
    i = i + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
