// Generated by Mochi v0.10.67 on 2025-08-17 12:27:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def pow2(exp: BigInt): BigInt = {
  var result: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = result * BigInt(2)
    i = i + BigInt(1)
  }
  return result
}

def proth(number: BigInt): BigInt = {
  if (number < BigInt(1)) {
    throw new RuntimeException(String.valueOf("Input value must be > 0"))
  }
  if (number == BigInt(1)) {
    return BigInt(3)
  }
  if (number == BigInt(2)) {
    return BigInt(5)
  }
  var temp: BigInt = number / BigInt(3)
  var pow: BigInt = BigInt(1)
  var block_index: BigInt = BigInt(1)
  while (pow <= temp) {
    pow = pow * BigInt(2)
    block_index = block_index + BigInt(1)
  }
  var proth_list: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(3), BigInt(5))
  var proth_index: BigInt = BigInt(2)
  var increment: BigInt = BigInt(3)
  var block: BigInt = BigInt(1)
  while (block < block_index) {
    var i: BigInt = BigInt(0)
    while (i < increment) {
      var next_val: BigInt = pow2(block + BigInt(1)) + proth_list.lift(((proth_index - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
      proth_list = (proth_list :+ next_val)
      proth_index = proth_index + BigInt(1)
      i = i + BigInt(1)
    }
    increment = increment * BigInt(2)
    block = block + BigInt(1)
  }
  return proth_list.lift(((number - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
}

def main(): Any = {
  var n: BigInt = BigInt(1)
  while (n <= BigInt(10)) {
    var value: BigInt = proth(n)
    println(_str("The " + _str(n) + "th Proth number: " + _str(value)))
    n = n + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
