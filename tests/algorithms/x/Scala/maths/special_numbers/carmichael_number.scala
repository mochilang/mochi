// Generated by Mochi v0.10.61 on 2025-08-08 16:13:38 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def abs_int(x: BigInt): BigInt = {
  if (x < BigInt(0)) {
    return -x
  }
  return x
}

def gcd(a: BigInt, b: BigInt): BigInt = {
  if (a == BigInt(0)) {
    return abs_int(b)
  }
  return gcd(b % a, a)
}

def power(x: BigInt, y: BigInt, m: BigInt): BigInt = {
  if (y == BigInt(0)) {
    return BigInt(1) % m
  }
  var temp: BigInt = power(x, y / BigInt(2), m) % m
  temp = temp * temp % m
  if (y % BigInt(2) == BigInt(1)) {
    temp = temp * x % m
  }
  return temp
}

def is_carmichael_number(n: BigInt): Boolean = {
  if (n <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("Number must be positive"))
  }
  var b: BigInt = BigInt(2)
  while (b < n) {
    if (gcd(b, n) == BigInt(1)) {
      if (power(b, n - BigInt(1), n) != BigInt(1)) {
        return false
      }
    }
    b = b + BigInt(1)
  }
  return true
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(power(BigInt(2), BigInt(15), BigInt(3))))
    println(_str(power(BigInt(5), BigInt(1), BigInt(30))))
    println(_str(is_carmichael_number(BigInt(4))))
    println(_str(is_carmichael_number(BigInt(561))))
    println(_str(is_carmichael_number(BigInt(562))))
    println(_str(is_carmichael_number(BigInt(1105))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
