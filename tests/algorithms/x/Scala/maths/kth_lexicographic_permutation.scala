// Generated by Mochi v0.10.60 on 2025-08-08 11:24:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def remove_at(xs: ArrayBuffer[BigInt], idx: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (i != idx) {
      res = res :+ xs((i.toInt).toInt)
    }
    i = i + BigInt(1)
  }
  return res
}

def kth_permutation(_k: BigInt, n: BigInt): ArrayBuffer[BigInt] = {
  var k: BigInt = _k
  if (n <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("n must be positive"))
  }
  var factorials: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1))
  var i: BigInt = BigInt(2)
  while (i < n) {
    factorials = factorials :+ factorials(((BigInt((factorials).size) - BigInt(1)).toInt).toInt) * i
    i = i + BigInt(1)
  }
  val total: BigInt = factorials(((BigInt((factorials).size) - BigInt(1)).toInt).toInt) * n
  if ((k < BigInt(0) || k >= total).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("k out of bounds"))
  }
  var elements: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var e: BigInt = BigInt(0)
  while (e < n) {
    elements = elements :+ e
    e = e + BigInt(1)
  }
  var permutation: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var idx: BigInt = BigInt((factorials).size) - BigInt(1)
  while (idx >= BigInt(0)) {
    val factorial: BigInt = factorials((idx.toInt).toInt)
    val number: BigInt = k / factorial
    k = k % factorial
    permutation = permutation :+ elements((number.toInt).toInt)
    elements = remove_at(elements, number)
    idx = idx - BigInt(1)
  }
  permutation = permutation :+ elements((BigInt(0).toInt).toInt)
  return permutation
}

def list_equal(a: ArrayBuffer[BigInt], b: ArrayBuffer[BigInt]): Boolean = {
  if (BigInt((a).size) != BigInt((b).size)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    if (a((i.toInt).toInt) != b((i.toInt).toInt)) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def list_to_string(xs: ArrayBuffer[BigInt]): String = {
  if (BigInt((xs).size) == BigInt(0)) {
    return "[]"
  }
  var s: String = "[" + String.valueOf(xs((BigInt(0).toInt).toInt))
  var i: BigInt = BigInt(1)
  while (i < BigInt((xs).size)) {
    s = s + ", " + String.valueOf(xs((i.toInt).toInt))
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

def test_kth_permutation(): Any = {
  val expected1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(1), BigInt(2), BigInt(3), BigInt(4))
  val res1: ArrayBuffer[BigInt] = kth_permutation(BigInt(0), BigInt(5))
  if (!list_equal(res1, expected1)) {
    throw new RuntimeException(String.valueOf("test case 1 failed"))
  }
  val expected2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(3), BigInt(0), BigInt(2))
  val res2: ArrayBuffer[BigInt] = kth_permutation(BigInt(10), BigInt(4))
  if (!list_equal(res2, expected2)) {
    throw new RuntimeException(String.valueOf("test case 2 failed"))
  }
}

def main(): Any = {
  test_kth_permutation()
  val res: ArrayBuffer[BigInt] = kth_permutation(BigInt(10), BigInt(4))
  println(list_to_string(res))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
