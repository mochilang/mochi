// Generated by Mochi v0.10.67 on 2025-08-16 21:35:59 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def floor_div(a: BigInt, b: BigInt): BigInt = {
  var q: BigInt = a / b
  var r: BigInt = a % b
  if ((r != BigInt(0) && ((a < BigInt(0) && b > BigInt(0)).asInstanceOf[Boolean] || (a > BigInt(0) && b < BigInt(0)).asInstanceOf[Boolean]).asInstanceOf[Boolean])) {
    q = q - BigInt(1)
  }
  return q
}

def continued_fraction(numerator: BigInt, denominator: BigInt): ArrayBuffer[BigInt] = {
  var num: BigInt = numerator
  var den: BigInt = denominator
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  val _br0 = new Breaks
  _br0.breakable {
    while (true) {
      var integer_part: BigInt = floor_div(num, den)
      result = (result :+ integer_part)
      num = num - integer_part * den
      if (num == BigInt(0)) {
        _br0.break()
      }
      var tmp: BigInt = num
      num = den
      den = tmp
    }
  }
  return result
}

def list_to_string(lst: ArrayBuffer[BigInt]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((lst).size)) {
    s = s + _str(lst.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    if (i < BigInt((lst).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  return s + "]"
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str("Continued Fraction of 0.84375 is: " + list_to_string(continued_fraction(BigInt(27), BigInt(32)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
