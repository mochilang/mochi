// Generated by Mochi v0.10.61 on 2025-08-08 16:09:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Complex(var re: Double, var im: Double)

def add(a: Complex, b: Complex): Complex = {
  return Complex(a.asInstanceOf[Complex].re + b.asInstanceOf[Complex].re, a.asInstanceOf[Complex].im + b.asInstanceOf[Complex].im)
}

def sub(a: Complex, b: Complex): Complex = {
  return Complex(a.asInstanceOf[Complex].re - b.asInstanceOf[Complex].re, a.asInstanceOf[Complex].im - b.asInstanceOf[Complex].im)
}

def div_real(a: Complex, r: Double): Complex = {
  return Complex(a.asInstanceOf[Complex].re / r, a.asInstanceOf[Complex].im / r)
}

def sqrt_newton(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def sqrt_to_complex(d: Double): Complex = {
  if (d >= 0.0) {
    return Complex(sqrt_newton(d), 0.0)
  }
  return Complex(0.0, sqrt_newton(-d))
}

def quadratic_roots(a: Double, b: Double, c: Double): ArrayBuffer[Complex] = {
  if (a == 0.0) {
    println("ValueError: coefficient 'a' must not be zero")
    return ArrayBuffer[Complex]()
  }
  val delta: Double = b * b - 4.0 * a * c
  val sqrt_d: Complex = sqrt_to_complex(delta)
  val minus_b: Complex = Complex(-b, 0.0)
  val two_a: Double = 2.0 * a
  val root1: Complex = div_real(add(minus_b, sqrt_d), two_a)
  val root2: Complex = div_real(sub(minus_b, sqrt_d), two_a)
  return ArrayBuffer(root1, root2)
}

def root_str(r: Complex): String = {
  if (r.asInstanceOf[Complex].im == 0.0) {
    return (_str(r.asInstanceOf[Complex].re)).toString
  }
  var s: String = _str(r.asInstanceOf[Complex].re)
  if (r.asInstanceOf[Complex].im >= 0.0) {
    s = s + "+" + _str(r.asInstanceOf[Complex].im) + "i"
  } else {
    s = s + _str(r.asInstanceOf[Complex].im) + "i"
  }
  return s
}

def main(): Any = {
  val roots: ArrayBuffer[Complex] = quadratic_roots(5.0, 6.0, 1.0)
  if (BigInt((roots).size) == BigInt(2)) {
    println("The solutions are: " + root_str(roots((BigInt(0).toInt).toInt)) + " and " + root_str(roots((BigInt(1).toInt).toInt)))
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
