// Generated by Mochi v0.10.61 on 2025-08-08 17:35:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def contains(xs: ArrayBuffer[BigInt], value: BigInt): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (xs((i.toInt).toInt) == value) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def sumset(set_a: ArrayBuffer[BigInt], set_b: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var result: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((set_a).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((set_b).size)) {
      val s: BigInt = set_a((i.toInt).toInt) + set_b((j.toInt).toInt)
      if (!(result.contains(s)).asInstanceOf[Boolean]) {
        result = result :+ (s)
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return result
}

def main(): Any = {
  val set_a: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(2), BigInt(3))
  val set_b: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(4), BigInt(5), BigInt(6))
  println(_str(sumset(set_a, set_b)))
  val set_c: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(4), BigInt(5), BigInt(6), BigInt(7))
  println(_str(sumset(set_a, set_c)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
