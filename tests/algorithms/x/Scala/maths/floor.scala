// Generated by Mochi v0.10.66 on 2025-08-16 14:59:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def floor(x: Double): BigInt = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if (x - (i.toString()).toDouble >= 0.0) {
    return i
  }
  return i - BigInt(1)
}

def test_floor(): Any = {
  var nums: ArrayBuffer[Double] = ArrayBuffer(1.0, -1.0, 0.0, 0.0, 1.1, -1.1, 1.0, -1.0, 1000000000.0)
  var expected: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), -BigInt(1), BigInt(0), BigInt(0), BigInt(1), -BigInt(2), BigInt(1), -BigInt(1), BigInt(1000000000))
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((nums).size)) {
    if (Math.floor(nums.lift((idx.toInt).toInt).getOrElse(0.0)) != expected.lift((idx.toInt).toInt).getOrElse(BigInt(0))) {
      throw new RuntimeException(String.valueOf("floor test failed"))
    }
    idx = idx + BigInt(1)
  }
}

def main(): Any = {
  test_floor()
  println(_str(_str(Math.floor(-1.1))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
