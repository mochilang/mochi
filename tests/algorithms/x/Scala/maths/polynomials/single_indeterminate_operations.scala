// Generated by Mochi v0.10.61 on 2025-08-08 16:06:23 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Polynomial(var degree: BigInt, var coefficients: ArrayBuffer[Double])

def copy_list(xs: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    res = res :+ xs((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return res
}

def polynomial_new(degree: BigInt, coeffs: ArrayBuffer[Double]): Polynomial = {
  if (BigInt((coeffs).size) != degree + BigInt(1)) {
    throw new RuntimeException(String.valueOf("The number of coefficients should be equal to the degree + 1."))
  }
  return Polynomial(degree, copy_list(coeffs))
}

def add(p: Polynomial, q: Polynomial): Polynomial = {
  if (p.asInstanceOf[Polynomial].degree > q.asInstanceOf[Polynomial].degree) {
    var coeffs: ArrayBuffer[Double] = copy_list(p.asInstanceOf[Polynomial].coefficients)
    var i: BigInt = BigInt(0)
    while (i <= q.asInstanceOf[Polynomial].degree) {
      coeffs((i).toInt) = coeffs((i.toInt).toInt) + q.asInstanceOf[Polynomial].coefficients((i.toInt).toInt)
      i = i + BigInt(1)
    }
    return Polynomial(p.asInstanceOf[Polynomial].degree, coeffs)
  } else {
    var coeffs: ArrayBuffer[Double] = copy_list(q.asInstanceOf[Polynomial].coefficients)
    var i: BigInt = BigInt(0)
    while (i <= p.asInstanceOf[Polynomial].degree) {
      coeffs((i).toInt) = coeffs((i.toInt).toInt) + p.asInstanceOf[Polynomial].coefficients((i.toInt).toInt)
      i = i + BigInt(1)
    }
    return Polynomial(q.asInstanceOf[Polynomial].degree, coeffs)
  }
  return null
}

def neg(p: Polynomial): Polynomial = {
  var coeffs: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i <= p.asInstanceOf[Polynomial].degree) {
    coeffs = coeffs :+ -p.asInstanceOf[Polynomial].coefficients((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return Polynomial(p.asInstanceOf[Polynomial].degree, coeffs)
}

def sub(p: Polynomial, q: Polynomial): Polynomial = {
  return add(p, neg(q))
}

def mul(p: Polynomial, q: Polynomial): Polynomial = {
  var size: BigInt = p.asInstanceOf[Polynomial].degree + q.asInstanceOf[Polynomial].degree + BigInt(1)
  var coeffs: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < size) {
    coeffs = coeffs :+ 0.0
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i <= p.asInstanceOf[Polynomial].degree) {
    var j: BigInt = BigInt(0)
    while (j <= q.asInstanceOf[Polynomial].degree) {
      coeffs((i + j).toInt) = coeffs(((i + j).toInt).toInt) + p.asInstanceOf[Polynomial].coefficients((i.toInt).toInt) * q.asInstanceOf[Polynomial].coefficients((j.toInt).toInt)
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return Polynomial(p.asInstanceOf[Polynomial].degree + q.asInstanceOf[Polynomial].degree, coeffs)
}

def power(base: Double, exp: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = result * base
    i = i + BigInt(1)
  }
  return result
}

def evaluate(p: Polynomial, x: Double): Double = {
  var result: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i <= p.asInstanceOf[Polynomial].degree) {
    result = result + p.asInstanceOf[Polynomial].coefficients((i.toInt).toInt) * power(x, i)
    i = i + BigInt(1)
  }
  return result
}

def poly_to_string(p: Polynomial): String = {
  var s: String = ""
  var i: BigInt = p.asInstanceOf[Polynomial].degree
  while (i >= BigInt(0)) {
    val coeff: Double = p.asInstanceOf[Polynomial].coefficients((i.toInt).toInt)
    if (coeff != 0.0) {
      if (BigInt((s).size) > BigInt(0)) {
        if (coeff > 0.0) {
          s = s + " + "
        } else {
          s = s + " - "
        }
      } else {
        if (coeff < 0.0) {
          s = s + "-"
        }
      }
      val abs_coeff: Double = (if (coeff < 0.0) -coeff else coeff)
      if (i == BigInt(0)) {
        s = s + _str(abs_coeff)
      } else {
        if (i == BigInt(1)) {
          s = s + _str(abs_coeff) + "x"
        } else {
          s = s + _str(abs_coeff) + "x^" + _str(i)
        }
      }
    }
    i = i - BigInt(1)
  }
  if (s == "") {
    s = "0"
  }
  return s
}

def derivative(p: Polynomial): Polynomial = {
  if (p.asInstanceOf[Polynomial].degree == BigInt(0)) {
    return Polynomial(BigInt(0), ArrayBuffer(0.0))
  }
  var coeffs: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < p.asInstanceOf[Polynomial].degree) {
    coeffs = coeffs :+ p.asInstanceOf[Polynomial].coefficients(((i + BigInt(1)).toInt).toInt) * ((i + BigInt(1)).toString()).toDouble
    i = i + BigInt(1)
  }
  return Polynomial(p.asInstanceOf[Polynomial].degree - BigInt(1), coeffs)
}

def integral(p: Polynomial, constant: Double): Polynomial = {
  var coeffs: ArrayBuffer[Double] = ArrayBuffer(constant)
  var i: BigInt = BigInt(0)
  while (i <= p.asInstanceOf[Polynomial].degree) {
    coeffs = coeffs :+ p.asInstanceOf[Polynomial].coefficients((i.toInt).toInt) / ((i + BigInt(1)).toString()).toDouble
    i = i + BigInt(1)
  }
  return Polynomial(p.asInstanceOf[Polynomial].degree + BigInt(1), coeffs)
}

def equals(p: Polynomial, q: Polynomial): Boolean = {
  if (p.asInstanceOf[Polynomial].degree != q.asInstanceOf[Polynomial].degree) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i <= p.asInstanceOf[Polynomial].degree) {
    if (p.asInstanceOf[Polynomial].coefficients((i.toInt).toInt) != q.asInstanceOf[Polynomial].coefficients((i.toInt).toInt)) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def not_equals(p: Polynomial, q: Polynomial): Boolean = {
  return !equals(p, q)
}

def test_polynomial(): Any = {
  val p: Polynomial = polynomial_new(BigInt(2), ArrayBuffer(1.0, 2.0, 3.0))
  val q: Polynomial = polynomial_new(BigInt(2), ArrayBuffer(1.0, 2.0, 3.0))
  if (poly_to_string(add(p, q)) != "6x^2 + 4x + 2") {
    throw new RuntimeException(String.valueOf("add failed"))
  }
  if (poly_to_string(sub(p, q)) != "0") {
    throw new RuntimeException(String.valueOf("sub failed"))
  }
  if (evaluate(p, 2.0) != 17.0) {
    throw new RuntimeException(String.valueOf("evaluate failed"))
  }
  if (poly_to_string(derivative(p)) != "6x + 2") {
    throw new RuntimeException(String.valueOf("derivative failed"))
  }
  val integ: String = poly_to_string(integral(p, 0.0))
  if (integ != "1x^3 + 1x^2 + 1x") {
    throw new RuntimeException(String.valueOf("integral failed"))
  }
  if (!equals(p, q)) {
    throw new RuntimeException(String.valueOf("equals failed"))
  }
  if (not_equals(p, q)) {
    throw new RuntimeException(String.valueOf("not_equals failed"))
  }
}

def main(): Any = {
  test_polynomial()
  val p: Polynomial = polynomial_new(BigInt(2), ArrayBuffer(1.0, 2.0, 3.0))
  val d: Polynomial = derivative(p)
  println(poly_to_string(d))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
