// Generated by Mochi v0.10.66 on 2025-08-16 14:55:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.math.BigDecimal.valueOf(d).stripTrailingZeros.toPlainString; if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def ceil_float(x: Double): BigInt = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if (x > (i.toString.toDouble)) {
    return i + BigInt(1)
  }
  return i
}

def exp_approx(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var n: BigInt = BigInt(1)
  while (n < BigInt(20)) {
    term = term * x / n.toString.toDouble
    sum = sum + term
    n = n + BigInt(1)
  }
  return sum
}

def euler_modified(ode_func: (Double, Double) => Double, y0: Double, x0: Double, step: Double, x_end: Double): ArrayBuffer[Double] = {
  var n: BigInt = ceil_float((x_end - x0) / step)
  var y: ArrayBuffer[Double] = ArrayBuffer(y0)
  var x: Double = x0
  var k: BigInt = BigInt(0)
  while (k < n) {
    var y_predict: Double = y.lift((k.toInt).toInt).getOrElse(0.0) + step * ode_func(x, y.lift((k.toInt).toInt).getOrElse(0.0))
    var slope1: Double = ode_func(x, y.lift((k.toInt).toInt).getOrElse(0.0))
    var slope2: Double = ode_func(x + step, y_predict)
    var y_next: Double = y.lift((k.toInt).toInt).getOrElse(0.0) + step / 2.0 * (slope1 + slope2)
    y = (y :+ y_next)
    x = x + step
    k = k + BigInt(1)
  }
  return y
}

def f1(x: Double, y: Double): Double = {
  return -2.0 * x * y * y
}

def f2(x: Double, y: Double): Double = {
  return -2.0 * y + x * x * x * exp_approx(-2.0 * x)
}

def main(): Any = {
  var y1: ArrayBuffer[Double] = euler_modified((f1 _).asInstanceOf[(Double, Double) => Double], 1.0, 0.0, 0.2, 1.0)
  println(_str(y1.lift(((BigInt((y1).size) - BigInt(1)).toInt).toInt).getOrElse(0.0)))
  var y2: ArrayBuffer[Double] = euler_modified((f2 _).asInstanceOf[(Double, Double) => Double], 1.0, 0.0, 0.1, 0.3)
  println(_str(y2.lift(((BigInt((y2).size) - BigInt(1)).toInt).toInt).getOrElse(0.0)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
