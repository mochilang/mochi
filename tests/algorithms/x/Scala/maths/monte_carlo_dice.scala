// Generated by Mochi v0.10.60 on 2025-08-08 11:28:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def lcg_rand(): BigInt = {
  lcg_seed = (lcg_seed * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
  return lcg_seed
}

def roll(): BigInt = {
  val rv: Double = (lcg_rand()).toString.toDouble
  val r: Double = rv * 6.0 / 2147483648.0
  return BigInt(1) + BigInt(r.toString.toDouble.toInt)
}

def round2(x: Double): Double = {
  val y: Double = x * 100.0 + 0.5
  val z: BigInt = BigInt(y.toString.toDouble.toInt)
  return z.toString.toDouble / 100.0
}

def throw_dice(num_throws: BigInt, num_dice: BigInt): ArrayBuffer[Double] = {
  var count_of_sum: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  val max_sum: BigInt = num_dice * BigInt(6) + BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < max_sum) {
    count_of_sum = count_of_sum :+ BigInt(0)
    i = i + BigInt(1)
  }
  var t: BigInt = BigInt(0)
  while (t < num_throws) {
    var s: BigInt = BigInt(0)
    var d: BigInt = BigInt(0)
    while (d < num_dice) {
      s = s + roll()
      d = d + BigInt(1)
    }
    count_of_sum((s).toInt) = count_of_sum((s.toInt).toInt) + BigInt(1)
    t = t + BigInt(1)
  }
  var probability: ArrayBuffer[Double] = ArrayBuffer[Double]()
  i = num_dice
  while (i < max_sum) {
    val p: Double = (count_of_sum((i.toInt).toInt)).toDouble * 100.0 / num_throws.toString.toDouble
    probability = probability :+ round2(p)
    i = i + BigInt(1)
  }
  return probability
}

def main(): Any = {
  lcg_seed = BigInt(1)
  val result: ArrayBuffer[Double] = throw_dice(BigInt(10000), BigInt(2))
  println(String.valueOf(result))
}

var lcg_seed: BigInt = BigInt(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
