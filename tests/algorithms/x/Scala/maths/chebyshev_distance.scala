// Generated by Mochi v0.10.59 on 2025-08-07 12:48:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def abs(x: Double): Double = {
  if (x >= 0.0) {
    return x
  } else {
    return -x
  }
  return 0.0
}

def chebyshev_distance(point_a: ArrayBuffer[Double], point_b: ArrayBuffer[Double]): Double = {
  if (BigInt((point_a).size) != BigInt((point_b).size)) {
    throw new RuntimeException(String.valueOf("Both points must have the same dimension."))
  }
  var max_diff: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((point_a).size)) {
    val diff = Math.abs(point_a((i.toInt).toInt) - point_b((i.toInt).toInt))
    if (diff > max_diff) {
      max_diff = diff
    }
    i = i + BigInt(1)
  }
  return max_diff
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(chebyshev_distance(ArrayBuffer(1.0, 1.0), ArrayBuffer(2.0, 2.0)))
    println(chebyshev_distance(ArrayBuffer(1.0, 1.0, 9.0), ArrayBuffer(2.0, 2.0, -5.2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
