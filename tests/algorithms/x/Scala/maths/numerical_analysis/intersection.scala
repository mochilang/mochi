// Generated by Mochi v0.10.60 on 2025-08-08 11:32:20 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def intersection(function: (Double) => Double, x0: Double, x1: Double): Double = {
  var x_n: Double = x0
  var x_n1: Double = x1
  while (true) {
    if ((x_n == x_n1 || function(x_n1) == function(x_n)).asInstanceOf[Boolean]) {
      throw new RuntimeException(String.valueOf("float division by zero, could not find root"))
    }
    val numerator: Double = function(x_n1)
    val denominator: Double = (function(x_n1) - function(x_n)) / (x_n1 - x_n)
    val x_n2: Double = x_n1 - numerator / denominator
    if (abs_float(x_n2 - x_n1) < 0.00001) {
      return x_n2
    }
    x_n = x_n1
    x_n1 = x_n2
  }
  return 0.0
}

def f(x: Double): Double = {
  return x * x * x - 2.0 * x - 5.0
}

def main(): Any = {
  println(String.valueOf(intersection((f _).asInstanceOf[(Double) => Double], 3.0, 3.5)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
