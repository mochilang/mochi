// Generated by Mochi v0.10.60 on 2025-08-08 11:32:25 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class NevilleResult(var value: Double, var table: ArrayBuffer[ArrayBuffer[Double]])

def neville_interpolate(x_points: ArrayBuffer[Double], y_points: ArrayBuffer[Double], x0: Double): NevilleResult = {
  val n: BigInt = BigInt((x_points).size)
  var q: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      row = row :+ 0.0
      j = j + BigInt(1)
    }
    q = q :+ row
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < n) {
    q((i).toInt)((BigInt(1)).toInt) = y_points((i.toInt).toInt)
    i = i + BigInt(1)
  }
  var col: BigInt = BigInt(2)
  while (col < n) {
    var row_idx: BigInt = col
    while (row_idx < n) {
      q((row_idx).toInt)((col).toInt) = ((x0 - x_points(((row_idx - col + BigInt(1)).toInt).toInt)) * q((row_idx.toInt).toInt)(((col - BigInt(1)).toInt).toInt) - (x0 - x_points((row_idx.toInt).toInt)) * q(((row_idx - BigInt(1)).toInt).toInt)(((col - BigInt(1)).toInt).toInt)) / (x_points((row_idx.toInt).toInt) - x_points(((row_idx - col + BigInt(1)).toInt).toInt))
      row_idx = row_idx + BigInt(1)
    }
    col = col + BigInt(1)
  }
  return NevilleResult(q(((n - BigInt(1)).toInt).toInt)(((n - BigInt(1)).toInt).toInt), q)
}

def test_neville(): Any = {
  val xs: ArrayBuffer[Double] = ArrayBuffer(1.0, 2.0, 3.0, 4.0, 6.0)
  val ys: ArrayBuffer[Double] = ArrayBuffer(6.0, 7.0, 8.0, 9.0, 11.0)
  val r1: NevilleResult = neville_interpolate(xs, ys, 5.0)
  if (r1.asInstanceOf[NevilleResult].value != 10.0) {
    throw new RuntimeException(String.valueOf("neville_interpolate at 5 failed"))
  }
  val r2: NevilleResult = neville_interpolate(xs, ys, 99.0)
  if (r2.asInstanceOf[NevilleResult].value != 104.0) {
    throw new RuntimeException(String.valueOf("neville_interpolate at 99 failed"))
  }
}

def main(): Any = {
  test_neville()
  val xs: ArrayBuffer[Double] = ArrayBuffer(1.0, 2.0, 3.0, 4.0, 6.0)
  val ys: ArrayBuffer[Double] = ArrayBuffer(6.0, 7.0, 8.0, 9.0, 11.0)
  val r: NevilleResult = neville_interpolate(xs, ys, 5.0)
  println(r.asInstanceOf[NevilleResult].value)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
