// Generated by Mochi v0.10.60 on 2025-08-08 11:32:30 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def ucal(u: Double, p: BigInt): Double = {
  var temp: Double = u
  var i: BigInt = BigInt(1)
  while (i < p) {
    temp = temp * (u - i.toString.toDouble)
    i = i + BigInt(1)
  }
  return temp
}

def factorial(n: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(2)
  while (i <= n) {
    result = result * i.toString.toDouble
    i = i + BigInt(1)
  }
  return result
}

def newton_forward_interpolation(x: ArrayBuffer[Double], y0: ArrayBuffer[Double], value: Double): Double = {
  val n: BigInt = BigInt((x).size)
  var y: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      row = row :+ 0.0
      j = j + BigInt(1)
    }
    y = y :+ row
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < n) {
    y((i).toInt)((BigInt(0)).toInt) = y0((i.toInt).toInt)
    i = i + BigInt(1)
  }
  var i1: BigInt = BigInt(1)
  while (i1 < n) {
    var j1: BigInt = BigInt(0)
    while (j1 < n - i1) {
      y((j1).toInt)((i1).toInt) = y(((j1 + BigInt(1)).toInt).toInt)(((i1 - BigInt(1)).toInt).toInt) - y((j1.toInt).toInt)(((i1 - BigInt(1)).toInt).toInt)
      j1 = j1 + BigInt(1)
    }
    i1 = i1 + BigInt(1)
  }
  val u: Double = (value - x((BigInt(0).toInt).toInt)) / (x((BigInt(1).toInt).toInt) - x((BigInt(0).toInt).toInt))
  var sum: Double = y((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt)
  var k: BigInt = BigInt(1)
  while (k < n) {
    sum = sum + ucal(u, k) * y((BigInt(0).toInt).toInt)((k.toInt).toInt) / factorial(k)
    k = k + BigInt(1)
  }
  return sum
}

val x_points: ArrayBuffer[Double] = ArrayBuffer(0.0, 1.0, 2.0, 3.0)

val y_points: ArrayBuffer[Double] = ArrayBuffer(0.0, 1.0, 8.0, 27.0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(newton_forward_interpolation(x_points, y_points, 1.5)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
