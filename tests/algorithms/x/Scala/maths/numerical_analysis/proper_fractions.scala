// Generated by Mochi v0.10.60 on 2025-08-08 11:32:46 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def gcd(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  while (y != BigInt(0)) {
    val t: BigInt = x % y
    x = y
    y = t
  }
  if (x < BigInt(0)) {
    return -x
  }
  return x
}

def proper_fractions(den: BigInt): ArrayBuffer[String] = {
  if (den < BigInt(0)) {
    throw new RuntimeException(String.valueOf("The Denominator Cannot be less than 0"))
  }
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var n: BigInt = BigInt(1)
  while (n < den) {
    if (gcd(n, den) == BigInt(1)) {
      res = res :+ String.valueOf(n) + "/" + String.valueOf(den)
    }
    n = n + BigInt(1)
  }
  return res
}

def test_proper_fractions(): Any = {
  val a: ArrayBuffer[String] = proper_fractions(BigInt(10))
  if (a != ArrayBuffer("1/10", "3/10", "7/10", "9/10")) {
    throw new RuntimeException(String.valueOf("test 10 failed"))
  }
  val b: ArrayBuffer[String] = proper_fractions(BigInt(5))
  if (b != ArrayBuffer("1/5", "2/5", "3/5", "4/5")) {
    throw new RuntimeException(String.valueOf("test 5 failed"))
  }
  val c: ArrayBuffer[String] = proper_fractions(BigInt(0))
  if (c != ArrayBuffer()) {
    throw new RuntimeException(String.valueOf("test 0 failed"))
  }
}

def main(): Any = {
  test_proper_fractions()
  println(String.valueOf(proper_fractions(BigInt(10))))
  println(String.valueOf(proper_fractions(BigInt(5))))
  println(String.valueOf(proper_fractions(BigInt(0))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
