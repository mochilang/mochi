// Generated by Mochi v0.10.60 on 2025-08-08 11:32:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def floor(x: Double): Double = {
  var i: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((i.toString.toDouble) > x) {
    i = i - BigInt(1)
  }
  return i.toString.toDouble
}

def pow10(n: BigInt): Double = {
  var p: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < n) {
    p = p * 10.0
    i = i + BigInt(1)
  }
  return p
}

def round(x: Double, n: BigInt): Double = {
  val m: Double = pow10(n)
  return Math.floor(x * m + 0.5) / m
}

def simpson_integration(f: (Double) => Double, a: Double, b: Double, precision: BigInt): Double = {
  if (precision <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("precision should be positive"))
  }
  val h: Double = (b - a) / N_STEPS.toDouble
  var result: Double = f(a) + f(b)
  var i: BigInt = BigInt(1)
  while (i < N_STEPS) {
    val x: Double = a + h * i.toString.toDouble
    if (i % BigInt(2) == BigInt(1)) {
      result = result + 4.0 * f(x)
    } else {
      result = result + 2.0 * f(x)
    }
    i = i + BigInt(1)
  }
  result = result * (h / 3.0)
  val r: Double = round(result, precision)
  return r
}

def square(x: Double): Double = {
  return x * x
}

val N_STEPS: BigInt = BigInt(1000)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(simpson_integration((square _).asInstanceOf[(Double) => Double], 1.0, 2.0, BigInt(3))))
    println(String.valueOf(simpson_integration((square _).asInstanceOf[(Double) => Double], 3.45, 3.2, BigInt(1))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
