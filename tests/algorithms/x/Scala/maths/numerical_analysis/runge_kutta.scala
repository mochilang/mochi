// Generated by Mochi v0.10.60 on 2025-08-08 11:32:51 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def runge_kutta(f: (Double, Double) => Double, y0: Double, x0: Double, h: Double, x_end: Double): ArrayBuffer[Double] = {
  val span: Double = (x_end - x0) / h
  var n: BigInt = BigInt(span.toString.toDouble.toInt)
  if ((n.toString()).toDouble < span) {
    n = n + BigInt(1)
  }
  var y: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < n + BigInt(1)) {
    y = y :+ 0.0
    i = i + BigInt(1)
  }
  y((BigInt(0)).toInt) = y0
  var x: Double = x0
  var k: BigInt = BigInt(0)
  while (k < n) {
    val k1: Double = f(x, y((k.toInt).toInt))
    val k2: Double = f(x + 0.5 * h, y((k.toInt).toInt) + 0.5 * h * k1)
    val k3: Double = f(x + 0.5 * h, y((k.toInt).toInt) + 0.5 * h * k2)
    val k4: Double = f(x + h, y((k.toInt).toInt) + h * k3)
    y((k + BigInt(1)).toInt) = y((k.toInt).toInt) + 1.0 / 6.0 * h * (k1 + 2.0 * k2 + 2.0 * k3 + k4)
    x = x + h
    k = k + BigInt(1)
  }
  return y
}

def test_runge_kutta(): Any = {
  def f(x: Double, y: Double): Double = {
    return y
  }
  val result: ArrayBuffer[Double] = runge_kutta((f _).asInstanceOf[(Double, Double) => Double], 1.0, 0.0, 0.01, 5.0)
  val last: Double = result(((BigInt((result).size) - BigInt(1)).toInt).toInt)
  val expected: Double = 148.41315904125113
  var diff: Double = last - expected
  if (diff < 0.0) {
    diff = -diff
  }
  if (diff > 0.000001) {
    throw new RuntimeException(String.valueOf("runge_kutta failed"))
  }
  return null
}

def main(): Any = {
  test_runge_kutta()
  def f(x: Double, y: Double): Double = {
    return y
  }
  val r: ArrayBuffer[Double] = runge_kutta((f _).asInstanceOf[(Double, Double) => Double], 1.0, 0.0, 0.1, 1.0)
  println(String.valueOf(r(((BigInt((r).size) - BigInt(1)).toInt).toInt)))
  return null
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
