// Generated by Mochi v0.10.60 on 2025-08-08 11:32:05 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return -x
  } else {
    return x
  }
  return 0.0
}

def bisection(f: (Double) => Double, a: Double, b: Double): Double = {
  var start: Double = a
  var end: Double = b
  if (f(a) == 0.0) {
    return a
  }
  if (f(b) == 0.0) {
    return b
  }
  if (f(a) * f(b) > 0.0) {
    throw new RuntimeException(String.valueOf("could not find root in given interval."))
  }
  var mid: Double = start + (end - start) / 2.0
  while (abs_float(start - mid) > 0.0000001) {
    val fmid: Double = f(mid)
    if (fmid == 0.0) {
      return mid
    }
    if (fmid * f(start) < 0.0) {
      end = mid
    } else {
      start = mid
    }
    mid = start + (end - start) / 2.0
  }
  return mid
}

def f(x: Double): Double = {
  return x * x * x - 2.0 * x - 5.0
}

def main(): Any = {
  println(String.valueOf(bisection((f _).asInstanceOf[(Double) => Double], 1.0, 1000.0)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
