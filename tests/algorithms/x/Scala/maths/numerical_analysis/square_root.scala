// Generated by Mochi v0.10.60 on 2025-08-08 11:33:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def fx(x: Double, a: Double): Double = {
  return x * x - a
}

def fx_derivative(x: Double): Double = {
  return 2.0 * x
}

def get_initial_point(a: Double): Double = {
  var start: Double = 2.0
  while (start <= a) {
    start = start * start
  }
  return start
}

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def square_root_iterative(a: Double, max_iter: BigInt, tolerance: Double): Double = {
  if (a < 0.0) {
    throw new RuntimeException(String.valueOf("math domain error"))
  }
  var value: Double = get_initial_point(a)
  var i: BigInt = BigInt(0)
  while (i < max_iter) {
    val prev_value: Double = value
    value = value - fx(value, a) / fx_derivative(value)
    if (abs_float(prev_value - value) < tolerance) {
      return value
    }
    i = i + BigInt(1)
  }
  return value
}

val r1: Double = square_root_iterative(4.0, BigInt(9999), 0.00000000000001)

val r2: Double = square_root_iterative(3.2, BigInt(9999), 0.00000000000001)

val r3: Double = square_root_iterative(140.0, BigInt(9999), 0.00000000000001)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(r1))
    println(String.valueOf(r2))
    println(String.valueOf(r3))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
