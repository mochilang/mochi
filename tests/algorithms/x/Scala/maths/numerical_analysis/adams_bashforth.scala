// Generated by Mochi v0.10.60 on 2025-08-08 11:31:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return -x
  } else {
    return x
  }
  return 0.0
}

def validate_inputs(x_initials: ArrayBuffer[Double], step_size: Double, x_final: Double): Any = {
  if (x_initials(((BigInt((x_initials).size) - BigInt(1)).toInt).toInt) >= x_final) {
    throw new RuntimeException(String.valueOf("The final value of x must be greater than the initial values of x."))
  }
  if (step_size <= 0.0) {
    throw new RuntimeException(String.valueOf("Step size must be positive."))
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((x_initials).size) - BigInt(1)) {
    val diff: Double = x_initials(((i + BigInt(1)).toInt).toInt) - x_initials((i.toInt).toInt)
    if (abs_float(diff - step_size) > 0.0000000001) {
      throw new RuntimeException(String.valueOf("x-values must be equally spaced according to step size."))
    }
    i = i + BigInt(1)
  }
}

def list_to_string(xs: ArrayBuffer[Double]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    s = s + String.valueOf(xs((i.toInt).toInt))
    if (i + BigInt(1) < BigInt((xs).size)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

def adams_bashforth_step2(f: (Double, Double) => Double, x_initials: ArrayBuffer[Double], y_initials: ArrayBuffer[Double], step_size: Double, x_final: Double): ArrayBuffer[Double] = {
  validate_inputs(x_initials, step_size, x_final)
  if ((BigInt((x_initials).size) != BigInt(2) || BigInt((y_initials).size) != BigInt(2)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Insufficient initial points information."))
  }
  var x0: Double = x_initials((BigInt(0).toInt).toInt)
  var x1: Double = x_initials((BigInt(1).toInt).toInt)
  var y: ArrayBuffer[Double] = ArrayBuffer[Double]()
  y = y :+ y_initials((BigInt(0).toInt).toInt)
  y = y :+ y_initials((BigInt(1).toInt).toInt)
  val n: BigInt = BigInt(((x_final - x1) / step_size).toString.toDouble.toInt)
  var i: BigInt = BigInt(0)
  while (i < n) {
    val term: Double = 3.0 * f(x1, y(((i + BigInt(1)).toInt).toInt)) - f(x0, y((i.toInt).toInt))
    val y_next: Double = y(((i + BigInt(1)).toInt).toInt) + step_size / 2.0 * term
    y = y :+ y_next
    x0 = x1
    x1 = x1 + step_size
    i = i + BigInt(1)
  }
  return y
}

def adams_bashforth_step3(f: (Double, Double) => Double, x_initials: ArrayBuffer[Double], y_initials: ArrayBuffer[Double], step_size: Double, x_final: Double): ArrayBuffer[Double] = {
  validate_inputs(x_initials, step_size, x_final)
  if ((BigInt((x_initials).size) != BigInt(3) || BigInt((y_initials).size) != BigInt(3)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Insufficient initial points information."))
  }
  var x0: Double = x_initials((BigInt(0).toInt).toInt)
  var x1: Double = x_initials((BigInt(1).toInt).toInt)
  var x2: Double = x_initials((BigInt(2).toInt).toInt)
  var y: ArrayBuffer[Double] = ArrayBuffer[Double]()
  y = y :+ y_initials((BigInt(0).toInt).toInt)
  y = y :+ y_initials((BigInt(1).toInt).toInt)
  y = y :+ y_initials((BigInt(2).toInt).toInt)
  val n: BigInt = BigInt(((x_final - x2) / step_size).toString.toDouble.toInt)
  var i: BigInt = BigInt(0)
  while (i <= n) {
    val term: Double = 23.0 * f(x2, y(((i + BigInt(2)).toInt).toInt)) - 16.0 * f(x1, y(((i + BigInt(1)).toInt).toInt)) + 5.0 * f(x0, y((i.toInt).toInt))
    val y_next: Double = y(((i + BigInt(2)).toInt).toInt) + step_size / 12.0 * term
    y = y :+ y_next
    x0 = x1
    x1 = x2
    x2 = x2 + step_size
    i = i + BigInt(1)
  }
  return y
}

def adams_bashforth_step4(f: (Double, Double) => Double, x_initials: ArrayBuffer[Double], y_initials: ArrayBuffer[Double], step_size: Double, x_final: Double): ArrayBuffer[Double] = {
  validate_inputs(x_initials, step_size, x_final)
  if ((BigInt((x_initials).size) != BigInt(4) || BigInt((y_initials).size) != BigInt(4)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Insufficient initial points information."))
  }
  var x0: Double = x_initials((BigInt(0).toInt).toInt)
  var x1: Double = x_initials((BigInt(1).toInt).toInt)
  var x2: Double = x_initials((BigInt(2).toInt).toInt)
  var x3: Double = x_initials((BigInt(3).toInt).toInt)
  var y: ArrayBuffer[Double] = ArrayBuffer[Double]()
  y = y :+ y_initials((BigInt(0).toInt).toInt)
  y = y :+ y_initials((BigInt(1).toInt).toInt)
  y = y :+ y_initials((BigInt(2).toInt).toInt)
  y = y :+ y_initials((BigInt(3).toInt).toInt)
  val n: BigInt = BigInt(((x_final - x3) / step_size).toString.toDouble.toInt)
  var i: BigInt = BigInt(0)
  while (i < n) {
    val term: Double = 55.0 * f(x3, y(((i + BigInt(3)).toInt).toInt)) - 59.0 * f(x2, y(((i + BigInt(2)).toInt).toInt)) + 37.0 * f(x1, y(((i + BigInt(1)).toInt).toInt)) - 9.0 * f(x0, y((i.toInt).toInt))
    val y_next: Double = y(((i + BigInt(3)).toInt).toInt) + step_size / 24.0 * term
    y = y :+ y_next
    x0 = x1
    x1 = x2
    x2 = x3
    x3 = x3 + step_size
    i = i + BigInt(1)
  }
  return y
}

def adams_bashforth_step5(f: (Double, Double) => Double, x_initials: ArrayBuffer[Double], y_initials: ArrayBuffer[Double], step_size: Double, x_final: Double): ArrayBuffer[Double] = {
  validate_inputs(x_initials, step_size, x_final)
  if ((BigInt((x_initials).size) != BigInt(5) || BigInt((y_initials).size) != BigInt(5)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Insufficient initial points information."))
  }
  var x0: Double = x_initials((BigInt(0).toInt).toInt)
  var x1: Double = x_initials((BigInt(1).toInt).toInt)
  var x2: Double = x_initials((BigInt(2).toInt).toInt)
  var x3: Double = x_initials((BigInt(3).toInt).toInt)
  var x4: Double = x_initials((BigInt(4).toInt).toInt)
  var y: ArrayBuffer[Double] = ArrayBuffer[Double]()
  y = y :+ y_initials((BigInt(0).toInt).toInt)
  y = y :+ y_initials((BigInt(1).toInt).toInt)
  y = y :+ y_initials((BigInt(2).toInt).toInt)
  y = y :+ y_initials((BigInt(3).toInt).toInt)
  y = y :+ y_initials((BigInt(4).toInt).toInt)
  val n: BigInt = BigInt(((x_final - x4) / step_size).toString.toDouble.toInt)
  var i: BigInt = BigInt(0)
  while (i <= n) {
    val term: Double = 1901.0 * f(x4, y(((i + BigInt(4)).toInt).toInt)) - 2774.0 * f(x3, y(((i + BigInt(3)).toInt).toInt)) - 2616.0 * f(x2, y(((i + BigInt(2)).toInt).toInt)) - 1274.0 * f(x1, y(((i + BigInt(1)).toInt).toInt)) + 251.0 * f(x0, y((i.toInt).toInt))
    val y_next: Double = y(((i + BigInt(4)).toInt).toInt) + step_size / 720.0 * term
    y = y :+ y_next
    x0 = x1
    x1 = x2
    x2 = x3
    x3 = x4
    x4 = x4 + step_size
    i = i + BigInt(1)
  }
  return y
}

def f_x(x: Double, y: Double): Double = {
  return x
}

def f_xy(x: Double, y: Double): Double = {
  return x + y
}

val y2: ArrayBuffer[Double] = adams_bashforth_step2((f_x _).asInstanceOf[(Double, Double) => Double], ArrayBuffer(0.0, 0.2), ArrayBuffer(0.0, 0.0), 0.2, 1.0)

val y3: ArrayBuffer[Double] = adams_bashforth_step3((f_xy _).asInstanceOf[(Double, Double) => Double], ArrayBuffer(0.0, 0.2, 0.4), ArrayBuffer(0.0, 0.0, 0.04), 0.2, 1.0)

val y4: ArrayBuffer[Double] = adams_bashforth_step4((f_xy _).asInstanceOf[(Double, Double) => Double], ArrayBuffer(0.0, 0.2, 0.4, 0.6), ArrayBuffer(0.0, 0.0, 0.04, 0.128), 0.2, 1.0)

val y5: ArrayBuffer[Double] = adams_bashforth_step5((f_xy _).asInstanceOf[(Double, Double) => Double], ArrayBuffer(0.0, 0.2, 0.4, 0.6, 0.8), ArrayBuffer(0.0, 0.0214, 0.0214, 0.22211, 0.42536), 0.2, 1.0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(list_to_string(y2))
    println(String.valueOf(y3((BigInt(3).toInt).toInt)))
    println(String.valueOf(y4((BigInt(4).toInt).toInt)))
    println(String.valueOf(y4((BigInt(5).toInt).toInt)))
    println(String.valueOf(y5(((BigInt((y5).size) - BigInt(1)).toInt).toInt)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
