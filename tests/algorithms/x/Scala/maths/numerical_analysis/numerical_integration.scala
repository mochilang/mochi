// Generated by Mochi v0.10.60 on 2025-08-08 11:32:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return -x
  } else {
    return x
  }
  return 0.0
}

def trapezoidal_area(f: (Double) => Double, x_start: Double, x_end: Double, steps: BigInt): Double = {
  val step: Double = (x_end - x_start) / steps.toString.toDouble
  var x1: Double = x_start
  var fx1: Double = f(x_start)
  var area: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < steps) {
    val x2: Double = x1 + step
    val fx2: Double = f(x2)
    area = area + abs_float(fx2 + fx1) * step / 2.0
    x1 = x2
    fx1 = fx2
    i = i + BigInt(1)
  }
  return area
}

def f(x: Double): Double = {
  return x * x * x
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("f(x) = x^3")
    println("The area between the curve, x = -10, x = 10 and the x axis is:")
    var i: BigInt = BigInt(10)
    while (i <= BigInt(100000)) {
      val area: Double = trapezoidal_area((f _).asInstanceOf[(Double) => Double], -5.0, 5.0, i)
      println("with " + String.valueOf(i) + " steps: " + String.valueOf(area))
      i = i * BigInt(10)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
