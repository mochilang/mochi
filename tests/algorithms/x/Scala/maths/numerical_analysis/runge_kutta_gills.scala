// Generated by Mochi v0.10.60 on 2025-08-08 11:33:02 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sqrt(x: Double): Double = {
  var guess: Double = (if (x > 1.0) x / 2.0 else 1.0)
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = 0.5 * (guess + x / guess)
    i = i + BigInt(1)
  }
  return guess
}

def runge_kutta_gills(func: (Double, Double) => Double, x_initial: Double, y_initial: Double, step_size: Double, x_final: Double): ArrayBuffer[Double] = {
  if (x_initial >= x_final) {
    throw new RuntimeException(String.valueOf("The final value of x must be greater than initial value of x."))
  }
  if (step_size <= 0.0) {
    throw new RuntimeException(String.valueOf("Step size must be positive."))
  }
  val n: BigInt = BigInt(((x_final - x_initial) / step_size).toString.toDouble.toInt)
  var y: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i <= n) {
    y = y :+ 0.0
    i = i + BigInt(1)
  }
  y((BigInt(0)).toInt) = y_initial
  var xi: Double = x_initial
  var idx: BigInt = BigInt(0)
  val root2: Double = sqrt(2.0)
  while (idx < n) {
    val k1: Double = step_size * func(xi, y((idx.toInt).toInt))
    val k2: Double = step_size * func(xi + step_size / 2.0, y((idx.toInt).toInt) + k1 / 2.0)
    val k3: Double = step_size * func(xi + step_size / 2.0, y((idx.toInt).toInt) + (-0.5 + 1.0 / root2) * k1 + (1.0 - 1.0 / root2) * k2)
    val k4: Double = step_size * func(xi + step_size, y((idx.toInt).toInt) - 1.0 / root2 * k2 + (1.0 + 1.0 / root2) * k3)
    y((idx + BigInt(1)).toInt) = y((idx.toInt).toInt) + (k1 + (2.0 - root2) * k2 + (2.0 + root2) * k3 + k4) / 6.0
    xi = xi + step_size
    idx = idx + BigInt(1)
  }
  return y
}

def f1(x: Double, y: Double): Double = {
  return (x - y) / 2.0
}

def f2(x: Double, y: Double): Double = {
  return x
}

val y1: ArrayBuffer[Double] = runge_kutta_gills((f1 _).asInstanceOf[(Double, Double) => Double], 0.0, 3.0, 0.2, 5.0)

val y2: ArrayBuffer[Double] = runge_kutta_gills((f2 _).asInstanceOf[(Double, Double) => Double], -1.0, 0.0, 0.2, 0.0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(y1(((BigInt((y1).size) - BigInt(1)).toInt).toInt)))
    println(String.valueOf(y2))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
