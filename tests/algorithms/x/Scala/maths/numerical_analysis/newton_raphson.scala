// Generated by Mochi v0.10.60 on 2025-08-08 11:32:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class NRResult(var root: Double, var error: Double, var steps: ArrayBuffer[Double])

def abs_float(x: Double): Double = {
  if (x < 0.0) {
    return -x
  } else {
    return x
  }
  return 0.0
}

def fail(msg: String): Any = {
  println("error: " + msg)
}

def calc_derivative(f: (Double) => Double, x: Double, delta_x: Double): Double = {
  return (f(x + delta_x / 2.0) - f(x - delta_x / 2.0)) / delta_x
}

def newton_raphson(f: (Double) => Double, x0: Double, max_iter: BigInt, step: Double, max_error: Double, log_steps: Boolean): NRResult = {
  var a: Double = x0
  var steps: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < max_iter) {
    if (log_steps) {
      steps = steps :+ a
    }
    val err: Double = abs_float(f(a))
    if (err < max_error) {
      return NRResult(a, err, steps)
    }
    val der: Double = calc_derivative(f, a, step)
    if (der == 0.0) {
      fail("No converging solution found, zero derivative")
      return NRResult(a, err, steps)
    }
    a = a - f(a) / der
    i = i + BigInt(1)
  }
  fail("No converging solution found, iteration limit reached")
  return NRResult(a, abs_float(f(a)), steps)
}

def poly(x: Double): Double = {
  return x * x - 5.0 * x + 2.0
}

val result: NRResult = newton_raphson((poly _).asInstanceOf[(Double) => Double], 0.4, BigInt(20), 0.000001, 0.000001, false)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("root = " + String.valueOf(result.root) + ", error = " + String.valueOf(result.error))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
