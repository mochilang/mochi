// Generated by Mochi v0.10.60 on 2025-08-08 11:32:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def runge_kutta_fehlberg_45(func: (Double, Double) => Double, x_initial: Double, y_initial: Double, step_size: Double, x_final: Double): ArrayBuffer[Double] = {
  if (x_initial >= x_final) {
    throw new RuntimeException(String.valueOf("The final value of x must be greater than initial value of x."))
  }
  if (step_size <= 0.0) {
    throw new RuntimeException(String.valueOf("Step size must be positive."))
  }
  val n: BigInt = BigInt(((x_final - x_initial) / step_size).toString.toDouble.toInt)
  var ys: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var x: Double = x_initial
  var y: Double = y_initial
  ys = ys :+ y
  var i: BigInt = BigInt(0)
  while (i < n) {
    val k1: Double = step_size * func(x, y)
    val k2: Double = step_size * func(x + step_size / 4.0, y + k1 / 4.0)
    val k3: Double = step_size * func(x + 3.0 / 8.0 * step_size, y + 3.0 / 32.0 * k1 + 9.0 / 32.0 * k2)
    val k4: Double = step_size * func(x + 12.0 / 13.0 * step_size, y + 1932.0 / 2197.0 * k1 - 7200.0 / 2197.0 * k2 + 7296.0 / 2197.0 * k3)
    val k5: Double = step_size * func(x + step_size, y + 439.0 / 216.0 * k1 - 8.0 * k2 + 3680.0 / 513.0 * k3 - 845.0 / 4104.0 * k4)
    val k6: Double = step_size * func(x + step_size / 2.0, y - 8.0 / 27.0 * k1 + 2.0 * k2 - 3544.0 / 2565.0 * k3 + 1859.0 / 4104.0 * k4 - 11.0 / 40.0 * k5)
    y = y + 16.0 / 135.0 * k1 + 6656.0 / 12825.0 * k3 + 28561.0 / 56430.0 * k4 - 9.0 / 50.0 * k5 + 2.0 / 55.0 * k6
    x = x + step_size
    ys = ys :+ y
    i = i + BigInt(1)
  }
  return ys
}

def main(): Any = {
  def f1(x: Double, y: Double): Double = {
    return 1.0 + y * y
  }
  val y1: ArrayBuffer[Double] = runge_kutta_fehlberg_45((f1 _).asInstanceOf[(Double, Double) => Double], 0.0, 0.0, 0.2, 1.0)
  println(y1((BigInt(1).toInt).toInt))
  def f2(x: Double, y: Double): Double = {
    return x
  }
  val y2: ArrayBuffer[Double] = runge_kutta_fehlberg_45((f2 _).asInstanceOf[(Double, Double) => Double], -1.0, 0.0, 0.2, 0.0)
  println(y2((BigInt(1).toInt).toInt))
  return null
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
