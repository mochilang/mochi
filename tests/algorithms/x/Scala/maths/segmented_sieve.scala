// Generated by Mochi v0.10.67 on 2025-08-17 12:23:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def min_int(a: BigInt, b: BigInt): BigInt = {
  if (a < b) {
    return a
  }
  return b
}

def int_sqrt(n: BigInt): BigInt = {
  var r: BigInt = BigInt(0)
  while ((r + BigInt(1)) * (r + BigInt(1)) <= n) {
    r = r + BigInt(1)
  }
  return r
}

def sieve(n: BigInt): ArrayBuffer[BigInt] = {
  if (n <= BigInt(0)) {
    throw new RuntimeException(String.valueOf("Number must instead be a positive integer"))
  }
  var in_prime: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var start: BigInt = BigInt(2)
  var end: BigInt = int_sqrt(n)
  var temp: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < end + BigInt(1)) {
    temp = (temp :+ BigInt(1))
    i = i + BigInt(1)
  }
  var prime: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  while (start <= end) {
    if (temp.lift((start.toInt).toInt).getOrElse(BigInt(0)) == BigInt(1)) {
      in_prime = (in_prime :+ start)
      var j: BigInt = start * start
      while (j <= end) {
        temp((j).toInt) = BigInt(0)
        j = j + start
      }
    }
    start = start + BigInt(1)
  }
  i = BigInt(0)
  while (i < BigInt((in_prime).size)) {
    prime = (prime :+ in_prime.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    i = i + BigInt(1)
  }
  var low: BigInt = end + BigInt(1)
  var high: BigInt = min_int(BigInt(2) * end, n)
  while (low <= n) {
    var tempSeg: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var size: BigInt = high - low + BigInt(1)
    var k: BigInt = BigInt(0)
    while (k < size) {
      tempSeg = (tempSeg :+ BigInt(1))
      k = k + BigInt(1)
    }
    var idx: BigInt = BigInt(0)
    while (idx < BigInt((in_prime).size)) {
      var each: BigInt = in_prime.lift((idx.toInt).toInt).getOrElse(BigInt(0))
      var t: BigInt = low / each * each
      if (t < low) {
        t = t + each
      }
      var j2: BigInt = t
      while (j2 <= high) {
        tempSeg((j2 - low).toInt) = BigInt(0)
        j2 = j2 + each
      }
      idx = idx + BigInt(1)
    }
    var j3: BigInt = BigInt(0)
    while (j3 < BigInt((tempSeg).size)) {
      if (tempSeg.lift((j3.toInt).toInt).getOrElse(BigInt(0)) == BigInt(1)) {
        prime = (prime :+ j3 + low)
      }
      j3 = j3 + BigInt(1)
    }
    low = high + BigInt(1)
    high = min_int(high + end, n)
  }
  return prime
}

def lists_equal(a: ArrayBuffer[BigInt], b: ArrayBuffer[BigInt]): Boolean = {
  if (BigInt((a).size) != BigInt((b).size)) {
    return false
  }
  var m: BigInt = BigInt(0)
  while (m < BigInt((a).size)) {
    if (a.lift((m.toInt).toInt).getOrElse(BigInt(0)) != b.lift((m.toInt).toInt).getOrElse(BigInt(0))) {
      return false
    }
    m = m + BigInt(1)
  }
  return true
}

def test_sieve(): Any = {
  var e1: ArrayBuffer[BigInt] = sieve(BigInt(8))
  if (!lists_equal(e1, ArrayBuffer(BigInt(2), BigInt(3), BigInt(5), BigInt(7)))) {
    throw new RuntimeException(String.valueOf("sieve(8) failed"))
  }
  var e2: ArrayBuffer[BigInt] = sieve(BigInt(27))
  if (!lists_equal(e2, ArrayBuffer(BigInt(2), BigInt(3), BigInt(5), BigInt(7), BigInt(11), BigInt(13), BigInt(17), BigInt(19), BigInt(23)))) {
    throw new RuntimeException(String.valueOf("sieve(27) failed"))
  }
}

def main(): Any = {
  test_sieve()
  println(_str(_str(sieve(BigInt(30)))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
