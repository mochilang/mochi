// Generated by Mochi v0.10.67 on 2025-08-16 21:32:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val s = java.lang.Double.toString(d); if (s.indexOf('.') < 0 && !s.contains("e") && !s.contains("E")) s + ".0" else s }
  case other => String.valueOf(other)
}

def to_unsigned(n: BigInt): BigInt = {
  if (n < BigInt(0)) {
    return MAX + n
  }
  return n
}

def from_unsigned(n: BigInt): BigInt = {
  if (n >= HALF) {
    return n - MAX
  }
  return n
}

def bit_and(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < BigInt(32)) {
    if ((x % BigInt(2) == BigInt(1) && y % BigInt(2) == BigInt(1))) {
      res = res + bit
    }
    x = x / BigInt(2)
    y = y / BigInt(2)
    bit = bit * BigInt(2)
    i = i + BigInt(1)
  }
  return res
}

def bit_xor(a: BigInt, b: BigInt): BigInt = {
  var x: BigInt = a
  var y: BigInt = b
  var res: BigInt = BigInt(0)
  var bit: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < BigInt(32)) {
    var abit: BigInt = x % BigInt(2)
    var bbit: BigInt = y % BigInt(2)
    if ((abit + bbit) % BigInt(2) == BigInt(1)) {
      res = res + bit
    }
    x = x / BigInt(2)
    y = y / BigInt(2)
    bit = bit * BigInt(2)
    i = i + BigInt(1)
  }
  return res
}

def lshift1(num: BigInt): BigInt = {
  return num * BigInt(2) % MAX
}

def add(a: BigInt, b: BigInt): BigInt = {
  var first: BigInt = to_unsigned(a)
  var second: BigInt = to_unsigned(b)
  while (second != BigInt(0)) {
    var carry: BigInt = bit_and(first, second)
    first = bit_xor(first, second)
    second = lshift1(carry)
  }
  var result: BigInt = from_unsigned(first)
  return result
}

var MAX: BigInt = BigInt("4294967296")

var HALF: BigInt = BigInt("2147483648")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(_str(add(BigInt(3), BigInt(5)))))
    println(_str(_str(add(BigInt(13), BigInt(5)))))
    println(_str(_str(add(-BigInt(7), BigInt(2)))))
    println(_str(_str(add(BigInt(0), -BigInt(7)))))
    println(_str(_str(add(-BigInt(321), BigInt(0)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
