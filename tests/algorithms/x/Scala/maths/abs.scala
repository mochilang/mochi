// Generated by Mochi v0.10.59 on 2025-08-07 12:46:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def abs_val(num: Double): Double = {
  if (num < 0.0) {
    return -num
  }
  return num
}

def abs_min(x: ArrayBuffer[BigInt]): BigInt = {
  if (BigInt((x).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("abs_min() arg is an empty sequence"))
  }
  var j: BigInt = x((BigInt(0).toInt).toInt)
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((x).size)) {
    val i: BigInt = x((idx.toInt).toInt)
    if (abs_val(((i.toString()).toDouble).toString.toDouble) < abs_val(((j.toString()).toDouble).toString.toDouble)) {
      j = i
    }
    idx = idx + BigInt(1)
  }
  return j
}

def abs_max(x: ArrayBuffer[BigInt]): BigInt = {
  if (BigInt((x).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("abs_max() arg is an empty sequence"))
  }
  var j: BigInt = x((BigInt(0).toInt).toInt)
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((x).size)) {
    val i: BigInt = x((idx.toInt).toInt)
    if (abs_val(((i.toString()).toDouble).toString.toDouble) > abs_val(((j.toString()).toDouble).toString.toDouble)) {
      j = i
    }
    idx = idx + BigInt(1)
  }
  return j
}

def abs_max_sort(x: ArrayBuffer[BigInt]): BigInt = {
  if (BigInt((x).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("abs_max_sort() arg is an empty sequence"))
  }
  var arr: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((x).size)) {
    arr = arr :+ x((i.toInt).toInt)
    i = i + BigInt(1)
  }
  var n: BigInt = BigInt((arr).size)
  var a: BigInt = BigInt(0)
  while (a < n) {
    var b: BigInt = BigInt(0)
    while (b < n - a - BigInt(1)) {
      if (abs_val(((arr((b.toInt).toInt).toString()).toDouble).toString.toDouble) > abs_val(((arr(((b + BigInt(1)).toInt).toInt).toString()).toDouble).toString.toDouble)) {
        val temp: BigInt = arr((b.toInt).toInt)
        arr((b).toInt) = arr(((b + BigInt(1)).toInt).toInt)
        arr((b + BigInt(1)).toInt) = temp
      }
      b = b + BigInt(1)
    }
    a = a + BigInt(1)
  }
  return arr(((n - BigInt(1)).toInt).toInt)
}

def test_abs_val(): Any = {
  if (abs_val(0.0) != 0.0) {
    throw new RuntimeException(String.valueOf("abs_val(0) failed"))
  }
  if (abs_val(34.0) != 34.0) {
    throw new RuntimeException(String.valueOf("abs_val(34) failed"))
  }
  if (abs_val(-100000000000.0) != 100000000000.0) {
    throw new RuntimeException(String.valueOf("abs_val large failed"))
  }
  val a: ArrayBuffer[BigInt] = ArrayBuffer(-BigInt(3), -BigInt(1), BigInt(2), -BigInt(11))
  if (abs_max(a) != -BigInt(11)) {
    throw new RuntimeException(String.valueOf("abs_max failed"))
  }
  if (abs_max_sort(a) != -BigInt(11)) {
    throw new RuntimeException(String.valueOf("abs_max_sort failed"))
  }
  if (abs_min(a) != -BigInt(1)) {
    throw new RuntimeException(String.valueOf("abs_min failed"))
  }
}

def main(): Any = {
  test_abs_val()
  println(abs_val(-34.0))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
