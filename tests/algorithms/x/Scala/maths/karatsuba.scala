// Generated by Mochi v0.10.60 on 2025-08-08 11:24:08 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def int_pow(base: BigInt, exp: BigInt): BigInt = {
  var result: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = result * base
    i = i + BigInt(1)
  }
  return result
}

def karatsuba(a: BigInt, b: BigInt): BigInt = {
  if ((BigInt((String.valueOf(a)).length) == BigInt(1) || BigInt((String.valueOf(b)).length) == BigInt(1)).asInstanceOf[Boolean]) {
    return a * b
  }
  var m1: BigInt = BigInt((String.valueOf(a)).length)
  val lb: BigInt = BigInt((String.valueOf(b)).length)
  if (lb > m1) {
    m1 = lb
  }
  val m2: BigInt = m1 / BigInt(2)
  val power: BigInt = int_pow(BigInt(10), m2)
  val a1: BigInt = a / power
  val a2: BigInt = a % power
  val b1: BigInt = b / power
  val b2: BigInt = b % power
  val x: BigInt = karatsuba(a2, b2)
  val y: BigInt = karatsuba(a1 + a2, b1 + b2)
  val z: BigInt = karatsuba(a1, b1)
  val result: BigInt = z * int_pow(BigInt(10), BigInt(2) * m2) + (y - z - x) * power + x
  return result
}

def main(): Any = {
  println(String.valueOf(karatsuba(BigInt(15463), BigInt(23489))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
