// Generated by Mochi v0.10.61 on 2025-08-08 18:01:11 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def bubble_sort(nums: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = nums
  var n: BigInt = BigInt((arr).size)
  var i: BigInt = BigInt(0)
  while (i < n) {
    var j: BigInt = BigInt(0)
    while (j < n - BigInt(1)) {
      if (arr.lift((j.toInt).toInt).getOrElse(null) > arr.lift(((j + BigInt(1)).toInt).toInt).getOrElse(null)) {
        val temp: BigInt = arr.lift((j.toInt).toInt).getOrElse(null)
        arr((j).toInt) = arr.lift(((j + BigInt(1)).toInt).toInt).getOrElse(null)
        arr((j + BigInt(1)).toInt) = temp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return arr
}

def three_sum(nums: ArrayBuffer[BigInt]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val sorted: ArrayBuffer[BigInt] = bubble_sort(nums)
  var res: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  val n: BigInt = BigInt((sorted).size)
  var i: BigInt = BigInt(0)
  while (i < n - BigInt(2)) {
    if ((i == BigInt(0) || sorted.lift((i.toInt).toInt).getOrElse(null) != sorted.lift(((i - BigInt(1)).toInt).toInt).getOrElse(null)).asInstanceOf[Boolean]) {
      var low: BigInt = i + BigInt(1)
      var high: BigInt = n - BigInt(1)
      val c: BigInt = BigInt(0) - sorted.lift((i.toInt).toInt).getOrElse(null)
      while (low < high) {
        val s: BigInt = sorted.lift((low.toInt).toInt).getOrElse(null) + sorted.lift((high.toInt).toInt).getOrElse(null)
        if (s == c) {
          val triple: ArrayBuffer[BigInt] = ArrayBuffer(sorted.lift((i.toInt).toInt).getOrElse(null), sorted.lift((low.toInt).toInt).getOrElse(null), sorted.lift((high.toInt).toInt).getOrElse(null))
          res = res :+ (triple)
          while (low < high && sorted.lift((low.toInt).toInt).getOrElse(null) == sorted.lift(((low + BigInt(1)).toInt).toInt).getOrElse(null)) {
            low = low + BigInt(1)
          }
          while (low < high && sorted.lift((high.toInt).toInt).getOrElse(null) == sorted.lift(((high - BigInt(1)).toInt).toInt).getOrElse(null)) {
            high = high - BigInt(1)
          }
          low = low + BigInt(1)
          high = high - BigInt(1)
        } else {
          if (s < c) {
            low = low + BigInt(1)
          } else {
            high = high - BigInt(1)
          }
        }
      }
    }
    i = i + BigInt(1)
  }
  return res
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(three_sum(ArrayBuffer(-BigInt(1), BigInt(0), BigInt(1), BigInt(2), -BigInt(1), -BigInt(4)))))
    println(_str(three_sum(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4)))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
