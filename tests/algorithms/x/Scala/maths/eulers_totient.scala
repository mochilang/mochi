// Generated by Mochi v0.10.63 on 2025-08-12 08:06:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def totient(n: BigInt): ArrayBuffer[BigInt] = {
  var is_prime: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var totients: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var primes: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i <= n) {
    is_prime = is_prime :+ (true)
    totients = totients :+ (i - BigInt(1))
    i = i + BigInt(1)
  }
  i = BigInt(2)
  val _br1 = new Breaks
  _br1.breakable {
    while (i <= n) {
      if (is_prime.lift((i.toInt).toInt).getOrElse(false)) {
        primes = primes :+ (i)
      }
      var j: BigInt = BigInt(0)
      val _br2 = new Breaks
      _br2.breakable {
        while (j < BigInt((primes).size)) {
          val p: BigInt = primes.lift((j.toInt).toInt).getOrElse(BigInt(0))
          if (i * p >= n) {
            _br2.break()
          }
          is_prime((i * p).toInt) = false
          if (i % p == BigInt(0)) {
            totients((i * p).toInt) = totients.lift((i.toInt).toInt).getOrElse(BigInt(0)) * p
            _br2.break()
          }
          totients((i * p).toInt) = totients.lift((i.toInt).toInt).getOrElse(BigInt(0)) * (p - BigInt(1))
          j = j + BigInt(1)
        }
      }
      i = i + BigInt(1)
    }
  }
  return totients
}

def test_totient(): Any = {
  val expected: ArrayBuffer[BigInt] = ArrayBuffer(-BigInt(1), BigInt(0), BigInt(1), BigInt(2), BigInt(2), BigInt(4), BigInt(2), BigInt(6), BigInt(4), BigInt(6), BigInt(9))
  val res: ArrayBuffer[BigInt] = totient(BigInt(10))
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((expected).size)) {
    if (res.lift((idx.toInt).toInt).getOrElse(BigInt(0)) != expected.lift((idx.toInt).toInt).getOrElse(BigInt(0))) {
      throw new RuntimeException(String.valueOf("totient mismatch at " + _str(idx)))
    }
    idx = idx + BigInt(1)
  }
}

def main(): Any = {
  test_totient()
  val n: BigInt = BigInt(10)
  val res: ArrayBuffer[BigInt] = totient(n)
  var i: BigInt = BigInt(1)
  while (i < n) {
    println(_str(i) + " has " + _str(res.lift((i.toInt).toInt).getOrElse(BigInt(0))) + " relative primes.")
    i = i + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
