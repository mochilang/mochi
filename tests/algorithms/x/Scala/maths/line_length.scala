// Generated by Mochi v0.10.60 on 2025-08-08 11:24:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sqrt_newton(n: Double): Double = {
  if (n == 0.0) {
    return 0.0
  }
  var x: Double = n
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    x = (x + n / x) / 2.0
    i = i + BigInt(1)
  }
  return x
}

def hypot(a: Double, b: Double): Double = {
  return sqrt_newton(a * a + b * b)
}

def line_length(fnc: (Double) => Double, x_start: Double, x_end: Double, steps: BigInt): Double = {
  var x1: Double = x_start
  var fx1: Double = fnc(x_start)
  var length: Double = 0.0
  var i: BigInt = BigInt(0)
  val step: Double = (x_end - x_start) / (1.0 * steps.toString.toDouble)
  while (i < steps) {
    val x2: Double = step + x1
    val fx2: Double = fnc(x2)
    length = length + hypot(x2 - x1, fx2 - fx1)
    x1 = x2
    fx1 = fx2
    i = i + BigInt(1)
  }
  return length
}

def f1(x: Double): Double = {
  return x
}

def f2(x: Double): Double = {
  return 1.0
}

def f3(x: Double): Double = {
  return x * x / 10.0
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(line_length((f1 _).asInstanceOf[(Double) => Double], 0.0, 1.0, BigInt(10)))
    println(line_length((f2 _).asInstanceOf[(Double) => Double], -5.5, 4.5, BigInt(100)))
    println(line_length((f3 _).asInstanceOf[(Double) => Double], 0.0, 10.0, BigInt(1000)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
