// Generated by Mochi v0.10.59 on 2025-08-07 12:49:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Dual(var real: Double, var duals: ArrayBuffer[Double])

def make_dual(real: Double, rank: BigInt): Dual = {
  var ds: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < rank) {
    ds = ds :+ 1.0
    i = i + BigInt(1)
  }
  return Dual(real, ds)
}

def dual_from_list(real: Double, ds: ArrayBuffer[Double]): Dual = {
  return Dual(real, ds)
}

def dual_add(a: Dual, b: Dual): Dual = {
  var s_dual: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((a.asInstanceOf[Dual].duals).size)) {
    s_dual = s_dual :+ a.asInstanceOf[Dual].duals((i.toInt).toInt)
    i = i + BigInt(1)
  }
  var o_dual: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var j: BigInt = BigInt(0)
  while (j < BigInt((b.asInstanceOf[Dual].duals).size)) {
    o_dual = o_dual :+ b.asInstanceOf[Dual].duals((j.toInt).toInt)
    j = j + BigInt(1)
  }
  if (BigInt((s_dual).size) > BigInt((o_dual).size)) {
    var diff: BigInt = BigInt((s_dual).size) - BigInt((o_dual).size)
    var k: BigInt = BigInt(0)
    while (k < diff) {
      o_dual = o_dual :+ 1.0
      k = k + BigInt(1)
    }
  } else {
    if (BigInt((s_dual).size) < BigInt((o_dual).size)) {
      var diff2: BigInt = BigInt((o_dual).size) - BigInt((s_dual).size)
      var k2: BigInt = BigInt(0)
      while (k2 < diff2) {
        s_dual = s_dual :+ 1.0
        k2 = k2 + BigInt(1)
      }
    }
  }
  var new_duals: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((s_dual).size)) {
    new_duals = new_duals :+ s_dual((idx.toInt).toInt) + o_dual((idx.toInt).toInt)
    idx = idx + BigInt(1)
  }
  return Dual(a.asInstanceOf[Dual].real + b.asInstanceOf[Dual].real, new_duals)
}

def dual_add_real(a: Dual, b: Double): Dual = {
  var ds: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((a.asInstanceOf[Dual].duals).size)) {
    ds = ds :+ a.asInstanceOf[Dual].duals((i.toInt).toInt)
    i = i + BigInt(1)
  }
  return Dual(a.asInstanceOf[Dual].real + b, ds)
}

def dual_mul(a: Dual, b: Dual): Dual = {
  val new_len: BigInt = BigInt((a.asInstanceOf[Dual].duals).size) + BigInt((b.asInstanceOf[Dual].duals).size) + BigInt(1)
  var new_duals: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var idx: BigInt = BigInt(0)
  while (idx < new_len) {
    new_duals = new_duals :+ 0.0
    idx = idx + BigInt(1)
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((a.asInstanceOf[Dual].duals).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((b.asInstanceOf[Dual].duals).size)) {
      val pos: BigInt = i + j + BigInt(1)
      val `val`: Double = new_duals((pos.toInt).toInt) + a.asInstanceOf[Dual].duals((i.toInt).toInt) * b.asInstanceOf[Dual].duals((j.toInt).toInt)
      new_duals((pos).toInt) = `val`
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  var k: BigInt = BigInt(0)
  while (k < BigInt((a.asInstanceOf[Dual].duals).size)) {
    val `val`: Double = new_duals((k.toInt).toInt) + a.asInstanceOf[Dual].duals((k.toInt).toInt) * b.asInstanceOf[Dual].real
    new_duals((k).toInt) = `val`
    k = k + BigInt(1)
  }
  var l: BigInt = BigInt(0)
  while (l < BigInt((b.asInstanceOf[Dual].duals).size)) {
    val `val`: Double = new_duals((l.toInt).toInt) + b.asInstanceOf[Dual].duals((l.toInt).toInt) * a.asInstanceOf[Dual].real
    new_duals((l).toInt) = `val`
    l = l + BigInt(1)
  }
  return Dual(a.asInstanceOf[Dual].real * b.asInstanceOf[Dual].real, new_duals)
}

def dual_mul_real(a: Dual, b: Double): Dual = {
  var ds: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((a.asInstanceOf[Dual].duals).size)) {
    ds = ds :+ a.asInstanceOf[Dual].duals((i.toInt).toInt) * b
    i = i + BigInt(1)
  }
  return Dual(a.asInstanceOf[Dual].real * b, ds)
}

def dual_pow(x: Dual, n: BigInt): Dual = {
  if (n < BigInt(0)) {
    throw new RuntimeException(String.valueOf("power must be a positive integer"))
  }
  if (n == BigInt(0)) {
    return Dual(1.0, ArrayBuffer())
  }
  var res: Dual = x
  var i: BigInt = BigInt(1)
  while (i < n) {
    res = dual_mul(res, x)
    i = i + BigInt(1)
  }
  return res
}

def factorial(n: BigInt): Double = {
  var res: Double = 1.0
  var i: BigInt = BigInt(2)
  while (i <= n) {
    res = res * i.toString.toDouble
    i = i + BigInt(1)
  }
  return res
}

def differentiate(func: (Dual) => Dual, position: Double, order: BigInt): Double = {
  val d: Dual = make_dual(position, BigInt(1))
  val result: Dual = func(d)
  if (order == BigInt(0)) {
    return result.asInstanceOf[Dual].real
  }
  return result.asInstanceOf[Dual].duals(((order - BigInt(1)).toInt).toInt) * factorial(order)
}

def test_differentiate(): Any = {
  def f1(x: Dual): Dual = {
    return dual_pow(x, BigInt(2))
  }
  if (differentiate(f1.asInstanceOf[(Dual) => Dual], 2.0, BigInt(2)) != 2.0) {
    throw new RuntimeException(String.valueOf("f1 failed"))
  }
  def f2(x: Dual): Dual = {
    return dual_mul(dual_pow(x, BigInt(2)), dual_pow(x, BigInt(4)))
  }
  if (differentiate(f2.asInstanceOf[(Dual) => Dual], 9.0, BigInt(2)) != 196830.0) {
    throw new RuntimeException(String.valueOf("f2 failed"))
  }
  def f3(y: Dual): Dual = {
    return dual_mul_real(dual_pow(dual_add_real(y, 3.0), BigInt(6)), 0.5)
  }
  if (differentiate(f3.asInstanceOf[(Dual) => Dual], 3.5, BigInt(4)) != 7605.0) {
    throw new RuntimeException(String.valueOf("f3 failed"))
  }
  def f4(y: Dual): Dual = {
    return dual_pow(y, BigInt(2))
  }
  if (differentiate(f4.asInstanceOf[(Dual) => Dual], 4.0, BigInt(3)) != 0.0) {
    throw new RuntimeException(String.valueOf("f4 failed"))
  }
  return null
}

def main(): Any = {
  test_differentiate()
  def f(y: Dual): Dual = {
    return dual_mul(dual_pow(y, BigInt(2)), dual_pow(y, BigInt(4)))
  }
  val res: Double = differentiate(f.asInstanceOf[(Dual) => Dual], 9.0, BigInt(2))
  println(res)
  return null
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
