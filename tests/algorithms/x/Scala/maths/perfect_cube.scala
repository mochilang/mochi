// Generated by Mochi v0.10.60 on 2025-08-08 11:33:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def perfect_cube(n: BigInt): Boolean = {
  var m: BigInt = n
  if (m < BigInt(0)) {
    m = -m
  }
  var i: BigInt = BigInt(0)
  while (i * i * i < m) {
    i = i + BigInt(1)
  }
  return i * i * i == m
}

def perfect_cube_binary_search(n: BigInt): Boolean = {
  var m: BigInt = n
  if (m < BigInt(0)) {
    m = -m
  }
  var left: BigInt = BigInt(0)
  var right: BigInt = m
  while (left <= right) {
    val mid: BigInt = left + (right - left) / BigInt(2)
    val cube: BigInt = mid * mid * mid
    if (cube == m) {
      return true
    }
    if (cube < m) {
      left = mid + BigInt(1)
    } else {
      right = mid - BigInt(1)
    }
  }
  return false
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(perfect_cube(BigInt(27))))
    println(String.valueOf(perfect_cube(BigInt(4))))
    println(String.valueOf(perfect_cube_binary_search(BigInt(27))))
    println(String.valueOf(perfect_cube_binary_search(BigInt(64))))
    println(String.valueOf(perfect_cube_binary_search(BigInt(4))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
