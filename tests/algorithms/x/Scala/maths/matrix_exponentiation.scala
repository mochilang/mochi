// Generated by Mochi v0.10.60 on 2025-08-08 11:25:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def identity(n: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var i: BigInt = BigInt(0)
  var mat: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  while (i < n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      if (i == j) {
        row = row :+ BigInt(1)
      } else {
        row = row :+ BigInt(0)
      }
      j = j + BigInt(1)
    }
    mat = mat :+ row
    i = i + BigInt(1)
  }
  return mat
}

def matrix_mul(a: ArrayBuffer[ArrayBuffer[BigInt]], b: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val n: BigInt = BigInt((a).size)
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      var cell: BigInt = BigInt(0)
      var k: BigInt = BigInt(0)
      while (k < n) {
        cell = cell + a((i.toInt).toInt)((k.toInt).toInt) * b((k.toInt).toInt)((j.toInt).toInt)
        k = k + BigInt(1)
      }
      row = row :+ cell
      j = j + BigInt(1)
    }
    result = result :+ row
    i = i + BigInt(1)
  }
  return result
}

def matrix_pow(base: ArrayBuffer[ArrayBuffer[BigInt]], exp: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = identity(BigInt((base).size))
  var b: ArrayBuffer[ArrayBuffer[BigInt]] = base
  var e: BigInt = exp
  while (e > BigInt(0)) {
    if (e % BigInt(2) == BigInt(1)) {
      result = matrix_mul(result, b)
    }
    b = matrix_mul(b, b)
    e = e / BigInt(2)
  }
  return result
}

def fibonacci_with_matrix_exponentiation(n: BigInt, f1: BigInt, f2: BigInt): BigInt = {
  if (n == BigInt(1)) {
    return f1
  }
  if (n == BigInt(2)) {
    return f2
  }
  val base: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(1)), ArrayBuffer(BigInt(1), BigInt(0)))
  val m: ArrayBuffer[ArrayBuffer[BigInt]] = matrix_pow(base, n - BigInt(2))
  return f2 * m((BigInt(0).toInt).toInt)((BigInt(0).toInt).toInt) + f1 * m((BigInt(0).toInt).toInt)((BigInt(1).toInt).toInt)
}

def simple_fibonacci(n: BigInt, f1: BigInt, f2: BigInt): BigInt = {
  if (n == BigInt(1)) {
    return f1
  }
  if (n == BigInt(2)) {
    return f2
  }
  var a: BigInt = f1
  var b: BigInt = f2
  var count: BigInt = n - BigInt(2)
  while (count > BigInt(0)) {
    val tmp: BigInt = a + b
    a = b
    b = tmp
    count = count - BigInt(1)
  }
  return b
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(fibonacci_with_matrix_exponentiation(BigInt(1), BigInt(5), BigInt(6))))
    println(String.valueOf(fibonacci_with_matrix_exponentiation(BigInt(2), BigInt(10), BigInt(11))))
    println(String.valueOf(fibonacci_with_matrix_exponentiation(BigInt(13), BigInt(0), BigInt(1))))
    println(String.valueOf(fibonacci_with_matrix_exponentiation(BigInt(10), BigInt(5), BigInt(9))))
    println(String.valueOf(fibonacci_with_matrix_exponentiation(BigInt(9), BigInt(2), BigInt(3))))
    println(String.valueOf(simple_fibonacci(BigInt(1), BigInt(5), BigInt(6))))
    println(String.valueOf(simple_fibonacci(BigInt(2), BigInt(10), BigInt(11))))
    println(String.valueOf(simple_fibonacci(BigInt(13), BigInt(0), BigInt(1))))
    println(String.valueOf(simple_fibonacci(BigInt(10), BigInt(5), BigInt(9))))
    println(String.valueOf(simple_fibonacci(BigInt(9), BigInt(2), BigInt(3))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
