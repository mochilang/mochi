// Generated by Mochi v0.10.63 on 2025-08-12 08:08:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def abs(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def pow_int(base: Double, exp: BigInt): Double = {
  var result: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < exp) {
    result = result * base
    i = i + BigInt(1)
  }
  return result
}

def nth_root(x: Double, n: BigInt): Double = {
  if (x == 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(10)) {
    var denom: Double = pow_int(guess, n - BigInt(1))
    guess = ((n - BigInt(1)).toDouble * guess + x / denom) / n.toString.toDouble
    i = i + BigInt(1)
  }
  return guess
}

def round_nearest(x: Double): Double = {
  if (x >= 0.0) {
    val n: BigInt = BigInt((x + 0.5).toInt)
    return n.toString.toDouble
  }
  val n: BigInt = BigInt((x - 0.5).toInt)
  return n.toString.toDouble
}

def compute_geometric_mean(nums: ArrayBuffer[Double]): Double = {
  if (BigInt((nums).size) == BigInt(0)) {
    throw new RuntimeException(String.valueOf("no numbers"))
  }
  var product: Double = 1.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((nums).size)) {
    product = product * nums.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  if ((product < 0.0 && BigInt((nums).size) % BigInt(2) == BigInt(0)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Cannot Compute Geometric Mean for these numbers."))
  }
  var mean: Double = nth_root((Math.abs(product)).toString.toDouble, BigInt((nums).size))
  if (product < 0.0) {
    mean = -mean
  }
  val possible: Double = round_nearest(mean)
  if (pow_int(possible, BigInt((nums).size)) == product) {
    mean = possible
  }
  return mean
}

def test_compute_geometric_mean(): Any = {
  val eps: Double = 0.0001
  val m1: Double = compute_geometric_mean(ArrayBuffer(2.0, 8.0))
  if (Math.abs(m1 - 4.0) > eps) {
    throw new RuntimeException(String.valueOf("test1 failed"))
  }
  val m2: Double = compute_geometric_mean(ArrayBuffer(5.0, 125.0))
  if (Math.abs(m2 - 25.0) > eps) {
    throw new RuntimeException(String.valueOf("test2 failed"))
  }
  val m3: Double = compute_geometric_mean(ArrayBuffer(1.0, 0.0))
  if (Math.abs(m3 - 0.0) > eps) {
    throw new RuntimeException(String.valueOf("test3 failed"))
  }
  val m4: Double = compute_geometric_mean(ArrayBuffer(1.0, 5.0, 25.0, 5.0))
  if (Math.abs(m4 - 5.0) > eps) {
    throw new RuntimeException(String.valueOf("test4 failed"))
  }
  val m5: Double = compute_geometric_mean(ArrayBuffer(-5.0, 25.0, 1.0))
  if (Math.abs(m5 + 5.0) > eps) {
    throw new RuntimeException(String.valueOf("test5 failed"))
  }
}

def main(): Any = {
  test_compute_geometric_mean()
  println(compute_geometric_mean(ArrayBuffer((-3.0).toString.toDouble, (-27.0).toString.toDouble)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
