// Generated by Mochi v0.10.61 on 2025-08-08 18:01:29 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole()) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def bubble_sort(nums: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((nums).size)) {
    arr = arr :+ (nums.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  var n: BigInt = BigInt((arr).size)
  var a: BigInt = BigInt(0)
  while (a < n) {
    var b: BigInt = BigInt(0)
    while (b < n - a - BigInt(1)) {
      if (arr.lift((b.toInt).toInt).getOrElse(null) > arr.lift(((b + BigInt(1)).toInt).toInt).getOrElse(null)) {
        val tmp: BigInt = arr.lift((b.toInt).toInt).getOrElse(null)
        arr((b).toInt) = arr.lift(((b + BigInt(1)).toInt).toInt).getOrElse(null)
        arr((b + BigInt(1)).toInt) = tmp
      }
      b = b + BigInt(1)
    }
    a = a + BigInt(1)
  }
  return arr
}

def sort3(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var arr: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    arr = arr :+ (xs.lift((i.toInt).toInt).getOrElse(null))
    i = i + BigInt(1)
  }
  var n: BigInt = BigInt((arr).size)
  var a: BigInt = BigInt(0)
  while (a < n) {
    var b: BigInt = BigInt(0)
    while (b < n - a - BigInt(1)) {
      if (arr.lift((b.toInt).toInt).getOrElse(null) > arr.lift(((b + BigInt(1)).toInt).toInt).getOrElse(null)) {
        val tmp: BigInt = arr.lift((b.toInt).toInt).getOrElse(null)
        arr((b).toInt) = arr.lift(((b + BigInt(1)).toInt).toInt).getOrElse(null)
        arr((b + BigInt(1)).toInt) = tmp
      }
      b = b + BigInt(1)
    }
    a = a + BigInt(1)
  }
  return arr
}

def triplet_sum1(arr: ArrayBuffer[BigInt], target: BigInt): ArrayBuffer[BigInt] = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size) - BigInt(2)) {
    var j: BigInt = i + BigInt(1)
    while (j < BigInt((arr).size) - BigInt(1)) {
      var k: BigInt = j + BigInt(1)
      while (k < BigInt((arr).size)) {
        if (arr.lift((i.toInt).toInt).getOrElse(null) + arr.lift((j.toInt).toInt).getOrElse(null) + arr.lift((k.toInt).toInt).getOrElse(null) == target) {
          return sort3(ArrayBuffer(arr.lift((i.toInt).toInt).getOrElse(null), arr.lift((j.toInt).toInt).getOrElse(null), arr.lift((k.toInt).toInt).getOrElse(null)))
        }
        k = k + BigInt(1)
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return ArrayBuffer(BigInt(0), BigInt(0), BigInt(0))
}

def triplet_sum2(arr: ArrayBuffer[BigInt], target: BigInt): ArrayBuffer[BigInt] = {
  val sorted: ArrayBuffer[BigInt] = bubble_sort(arr)
  val n: BigInt = BigInt((sorted).size)
  var i: BigInt = BigInt(0)
  while (i < n - BigInt(2)) {
    var left: BigInt = i + BigInt(1)
    var right: BigInt = n - BigInt(1)
    while (left < right) {
      val s: BigInt = sorted.lift((i.toInt).toInt).getOrElse(null) + sorted.lift((left.toInt).toInt).getOrElse(null) + sorted.lift((right.toInt).toInt).getOrElse(null)
      if (s == target) {
        return ArrayBuffer(sorted.lift((i.toInt).toInt).getOrElse(null), sorted.lift((left.toInt).toInt).getOrElse(null), sorted.lift((right.toInt).toInt).getOrElse(null))
      }
      if (s < target) {
        left = left + BigInt(1)
      } else {
        right = right - BigInt(1)
      }
    }
    i = i + BigInt(1)
  }
  return ArrayBuffer(BigInt(0), BigInt(0), BigInt(0))
}

def list_equal(a: ArrayBuffer[BigInt], b: ArrayBuffer[BigInt]): Boolean = {
  if (BigInt((a).size) != BigInt((b).size)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    if (a.lift((i.toInt).toInt).getOrElse(null) != b.lift((i.toInt).toInt).getOrElse(null)) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def test_triplet_sum(): Any = {
  val arr1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(13), BigInt(29), BigInt(7), BigInt(23), BigInt(5))
  if (!list_equal(triplet_sum1(arr1, BigInt(35)), ArrayBuffer(BigInt(5), BigInt(7), BigInt(23)))) {
    throw new RuntimeException(String.valueOf("ts1 case1 failed"))
  }
  if (!list_equal(triplet_sum2(arr1, BigInt(35)), ArrayBuffer(BigInt(5), BigInt(7), BigInt(23)))) {
    throw new RuntimeException(String.valueOf("ts2 case1 failed"))
  }
  val arr2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(37), BigInt(9), BigInt(19), BigInt(50), BigInt(44))
  if (!list_equal(triplet_sum1(arr2, BigInt(65)), ArrayBuffer(BigInt(9), BigInt(19), BigInt(37)))) {
    throw new RuntimeException(String.valueOf("ts1 case2 failed"))
  }
  if (!list_equal(triplet_sum2(arr2, BigInt(65)), ArrayBuffer(BigInt(9), BigInt(19), BigInt(37)))) {
    throw new RuntimeException(String.valueOf("ts2 case2 failed"))
  }
  val arr3: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(6), BigInt(47), BigInt(27), BigInt(1), BigInt(15))
  if (!list_equal(triplet_sum1(arr3, BigInt(11)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0)))) {
    throw new RuntimeException(String.valueOf("ts1 case3 failed"))
  }
  if (!list_equal(triplet_sum2(arr3, BigInt(11)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0)))) {
    throw new RuntimeException(String.valueOf("ts2 case3 failed"))
  }
}

def main(): Any = {
  test_triplet_sum()
  val sample: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(13), BigInt(29), BigInt(7), BigInt(23), BigInt(5))
  val res: ArrayBuffer[BigInt] = triplet_sum2(sample, BigInt(35))
  println(_str(res.lift((BigInt(0).toInt).toInt).getOrElse(null)) + " " + _str(res.lift((BigInt(1).toInt).toInt).getOrElse(null)) + " " + _str(res.lift((BigInt(2).toInt).toInt).getOrElse(null)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
