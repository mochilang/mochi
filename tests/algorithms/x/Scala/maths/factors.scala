// Generated by Mochi v0.10.59 on 2025-08-07 12:50:42 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def reverse(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt((xs).size) - BigInt(1)
  while (i >= BigInt(0)) {
    res = res :+ xs((i.toInt).toInt)
    i = i - BigInt(1)
  }
  return res
}

def factors_of_a_number(num: BigInt): ArrayBuffer[BigInt] = {
  var facs: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  if (num < BigInt(1)) {
    return facs
  }
  var small: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var large: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(1)
  while (i * i <= num) {
    if (num % i == BigInt(0)) {
      small = small :+ i
      val d: BigInt = num / i
      if (d != i) {
        large = large :+ d
      }
    }
    i = i + BigInt(1)
  }
  facs = (small ++ reverse(large)).asInstanceOf[ArrayBuffer[BigInt]]
  return facs
}

def run_tests(): Any = {
  if (factors_of_a_number(BigInt(1)) != ArrayBuffer(BigInt(1))) {
    throw new RuntimeException(String.valueOf("case1 failed"))
  }
  if (factors_of_a_number(BigInt(5)) != ArrayBuffer(BigInt(1), BigInt(5))) {
    throw new RuntimeException(String.valueOf("case2 failed"))
  }
  if (factors_of_a_number(BigInt(24)) != ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(4), BigInt(6), BigInt(8), BigInt(12), BigInt(24))) {
    throw new RuntimeException(String.valueOf("case3 failed"))
  }
  if (factors_of_a_number(-BigInt(24)) != ArrayBuffer()) {
    throw new RuntimeException(String.valueOf("case4 failed"))
  }
}

def main(): Any = {
  run_tests()
  println(String.valueOf(factors_of_a_number(BigInt(24))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
