// Generated by Mochi v0.10.67 on 2025-08-17 12:25:48 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def sock_merchant(colors: ArrayBuffer[BigInt]): BigInt = {
  var arr: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((colors).size)) {
    arr = (arr :+ colors.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    i = i + BigInt(1)
  }
  var n: BigInt = BigInt((arr).size)
  var a: BigInt = BigInt(0)
  while (a < n) {
    var min_idx: BigInt = a
    var b: BigInt = a + BigInt(1)
    while (b < n) {
      if (arr.lift((b.toInt).toInt).getOrElse(BigInt(0)) < arr.lift((min_idx.toInt).toInt).getOrElse(BigInt(0))) {
        min_idx = b
      }
      b = b + BigInt(1)
    }
    var temp: BigInt = arr.lift((a.toInt).toInt).getOrElse(BigInt(0))
    arr((a).toInt) = arr.lift((min_idx.toInt).toInt).getOrElse(BigInt(0))
    arr((min_idx).toInt) = temp
    a = a + BigInt(1)
  }
  var pairs: BigInt = BigInt(0)
  i = BigInt(0)
  while (i < n) {
    var count: BigInt = BigInt(1)
    while (i + BigInt(1) < n && arr.lift((i.toInt).toInt).getOrElse(BigInt(0)) == arr.lift(((i + BigInt(1)).toInt).toInt).getOrElse(BigInt(0))) {
      count = count + BigInt(1)
      i = i + BigInt(1)
    }
    pairs = pairs + count / BigInt(2)
    i = i + BigInt(1)
  }
  return pairs
}

def test_sock_merchant(): Any = {
  var example1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(10), BigInt(20), BigInt(20), BigInt(10), BigInt(10), BigInt(30), BigInt(50), BigInt(10), BigInt(20))
  if (sock_merchant(example1) != BigInt(3)) {
    throw new RuntimeException(String.valueOf("example1 failed"))
  }
  var example2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(1), BigInt(3), BigInt(3))
  if (sock_merchant(example2) != BigInt(2)) {
    throw new RuntimeException(String.valueOf("example2 failed"))
  }
}

def main(): Any = {
  test_sock_merchant()
  var example1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(10), BigInt(20), BigInt(20), BigInt(10), BigInt(10), BigInt(30), BigInt(50), BigInt(10), BigInt(20))
  println(_str(_str(sock_merchant(example1))))
  var example2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(1), BigInt(3), BigInt(3))
  println(_str(_str(sock_merchant(example2))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
