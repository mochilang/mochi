// Generated by Mochi v0.10.60 on 2025-08-08 11:23:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def josephus_recursive(num_people: BigInt, step_size: BigInt): BigInt = {
  if ((num_people <= BigInt(0) || step_size <= BigInt(0)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("num_people or step_size is not a positive integer."))
  }
  if (num_people == BigInt(1)) {
    return BigInt(0)
  }
  return (josephus_recursive(num_people - BigInt(1), step_size) + step_size) % num_people
}

def find_winner(num_people: BigInt, step_size: BigInt): BigInt = {
  return josephus_recursive(num_people, step_size) + BigInt(1)
}

def remove_at(xs: ArrayBuffer[BigInt], idx: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    if (i != idx) {
      res = res :+ xs((i.toInt).toInt)
    }
    i = i + BigInt(1)
  }
  return res
}

def josephus_iterative(num_people: BigInt, step_size: BigInt): BigInt = {
  if ((num_people <= BigInt(0) || step_size <= BigInt(0)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("num_people or step_size is not a positive integer."))
  }
  var circle: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(1)
  while (i <= num_people) {
    circle = circle :+ i
    i = i + BigInt(1)
  }
  var current: BigInt = BigInt(0)
  while (BigInt((circle).size) > BigInt(1)) {
    current = (current + step_size - BigInt(1)) % BigInt((circle).size)
    circle = remove_at(circle, current)
  }
  return circle((BigInt(0).toInt).toInt)
}

val r: BigInt = josephus_recursive(BigInt(7), BigInt(3))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(r))
    println(String.valueOf(find_winner(BigInt(7), BigInt(3))))
    println(String.valueOf(josephus_iterative(BigInt(7), BigInt(3))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
