// Generated by Mochi v0.10.59 on 2025-08-07 12:50:03 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def ceil_int(x: Double): BigInt = {
  var n: BigInt = BigInt(x.toString.toDouble.toInt)
  if ((n.toString()).toDouble < x) {
    n = n + BigInt(1)
  }
  return n
}

def explicit_euler(ode_func: (Double, Double) => Double, y0: Double, x0: Double, step_size: Double, x_end: Double): ArrayBuffer[Double] = {
  val n: BigInt = ceil_int((x_end - x0) / step_size)
  var y: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i <= n) {
    y = y :+ 0.0
    i = i + BigInt(1)
  }
  y((BigInt(0)).toInt) = y0
  var x: Double = x0
  var k: BigInt = BigInt(0)
  while (k < n) {
    y((k + BigInt(1)).toInt) = y((k.toInt).toInt) + step_size * ode_func(x, y((k.toInt).toInt))
    x = x + step_size
    k = k + BigInt(1)
  }
  return y
}

def abs_float(a: Double): Double = {
  if (a < 0.0) {
    return -a
  }
  return a
}

def test_explicit_euler(): Any = {
  val f: (Double, Double) => Any = ((x: Double, y: Double) => y)
  val ys: ArrayBuffer[Double] = explicit_euler(f.asInstanceOf[(Double, Double) => Double], 1.0, 0.0, 0.01, 5.0)
  val last: Double = ys(((BigInt((ys).size) - BigInt(1)).toInt).toInt)
  if (abs_float(last - 144.77277243257308) > 0.001) {
    throw new RuntimeException(String.valueOf("explicit_euler failed"))
  }
}

def main(): Any = {
  test_explicit_euler()
  val f: (Double, Double) => Any = ((x: Double, y: Double) => y)
  val ys: ArrayBuffer[Double] = explicit_euler(f.asInstanceOf[(Double, Double) => Double], 1.0, 0.0, 0.01, 5.0)
  println(ys(((BigInt((ys).size) - BigInt(1)).toInt).toInt))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
