// Generated by Mochi v0.10.61 on 2025-08-08 17:36:20 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def two_pointer(nums: ArrayBuffer[BigInt], target: BigInt): ArrayBuffer[BigInt] = {
  var i: BigInt = BigInt(0)
  var j: BigInt = BigInt((nums).size) - BigInt(1)
  while (i < j) {
    val s: BigInt = nums((i.toInt).toInt) + nums((j.toInt).toInt)
    if (s == target) {
      return ArrayBuffer(i, j)
    }
    if (s < target) {
      i = i + BigInt(1)
    } else {
      j = j - BigInt(1)
    }
  }
  return (ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
}

def test_two_pointer(): Any = {
  if (two_pointer(ArrayBuffer(BigInt(2), BigInt(7), BigInt(11), BigInt(15)), BigInt(9)) != ArrayBuffer(BigInt(0), BigInt(1))) {
    throw new RuntimeException(String.valueOf("case1"))
  }
  if (two_pointer(ArrayBuffer(BigInt(2), BigInt(7), BigInt(11), BigInt(15)), BigInt(17)) != ArrayBuffer(BigInt(0), BigInt(3))) {
    throw new RuntimeException(String.valueOf("case2"))
  }
  if (two_pointer(ArrayBuffer(BigInt(2), BigInt(7), BigInt(11), BigInt(15)), BigInt(18)) != ArrayBuffer(BigInt(1), BigInt(2))) {
    throw new RuntimeException(String.valueOf("case3"))
  }
  if (two_pointer(ArrayBuffer(BigInt(2), BigInt(7), BigInt(11), BigInt(15)), BigInt(26)) != ArrayBuffer(BigInt(2), BigInt(3))) {
    throw new RuntimeException(String.valueOf("case4"))
  }
  if (two_pointer(ArrayBuffer(BigInt(1), BigInt(3), BigInt(3)), BigInt(6)) != ArrayBuffer(BigInt(1), BigInt(2))) {
    throw new RuntimeException(String.valueOf("case5"))
  }
  if (BigInt((two_pointer(ArrayBuffer(BigInt(2), BigInt(7), BigInt(11), BigInt(15)), BigInt(8))).size) != BigInt(0)) {
    throw new RuntimeException(String.valueOf("case6"))
  }
  if (BigInt((two_pointer(ArrayBuffer(BigInt(0), BigInt(3), BigInt(6), BigInt(9), BigInt(12), BigInt(15), BigInt(18), BigInt(21), BigInt(24), BigInt(27)), BigInt(19))).size) != BigInt(0)) {
    throw new RuntimeException(String.valueOf("case7"))
  }
  if (BigInt((two_pointer(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3)), BigInt(6))).size) != BigInt(0)) {
    throw new RuntimeException(String.valueOf("case8"))
  }
}

def main(): Any = {
  test_two_pointer()
  println(two_pointer(ArrayBuffer(BigInt(2), BigInt(7), BigInt(11), BigInt(15)), BigInt(9)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
