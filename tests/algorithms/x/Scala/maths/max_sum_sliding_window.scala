// Generated by Mochi v0.10.60 on 2025-08-08 11:25:06 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def max_sum_sliding_window(arr: ArrayBuffer[BigInt], k: BigInt): BigInt = {
  if ((k < BigInt(0) || BigInt((arr).size) < k).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("Invalid Input"))
  }
  var idx: BigInt = BigInt(0)
  var current_sum: BigInt = BigInt(0)
  while (idx < k) {
    current_sum = current_sum + arr((idx.toInt).toInt)
    idx = idx + BigInt(1)
  }
  var max_sum: BigInt = current_sum
  var i: BigInt = BigInt(0)
  while (i < BigInt((arr).size) - k) {
    current_sum = current_sum - arr((i.toInt).toInt) + arr(((i + k).toInt).toInt)
    if (current_sum > max_sum) {
      max_sum = current_sum
    }
    i = i + BigInt(1)
  }
  return max_sum
}

def test_max_sum_sliding_window(): Any = {
  val arr1: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(4), BigInt(2), BigInt(10), BigInt(2), BigInt(3), BigInt(1), BigInt(0), BigInt(20))
  if (max_sum_sliding_window(arr1, BigInt(4)) != BigInt(24)) {
    throw new RuntimeException(String.valueOf("test1 failed"))
  }
  val arr2: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(4), BigInt(2), BigInt(10), BigInt(2), BigInt(13), BigInt(1), BigInt(0), BigInt(2))
  if (max_sum_sliding_window(arr2, BigInt(4)) != BigInt(27)) {
    throw new RuntimeException(String.valueOf("test2 failed"))
  }
}

def main(): Any = {
  test_max_sum_sliding_window()
  val sample: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(4), BigInt(2), BigInt(10), BigInt(2), BigInt(3), BigInt(1), BigInt(0), BigInt(20))
  println(String.valueOf(max_sum_sliding_window(sample, BigInt(4))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
