// Generated by Mochi v0.10.67 on 2025-08-17 12:22:26 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

case class QR(var q: ArrayBuffer[ArrayBuffer[Double]], var r: ArrayBuffer[ArrayBuffer[Double]])

def sqrt_approx(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def sign(x: Double): Double = {
  if (x >= 0.0) {
    return 1.0
  } else {
    return -1.0
  }
  return 0.0
}

def vector_norm(v: ArrayBuffer[Double]): Double = {
  var sum: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((v).size)) {
    sum = sum + v.lift((i.toInt).toInt).getOrElse(0.0) * v.lift((i.toInt).toInt).getOrElse(0.0)
    i = i + BigInt(1)
  }
  var n: Double = sqrt_approx(sum)
  return n
}

def identity_matrix(n: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var mat: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < n) {
      if (i == j) {
        row = (row :+ 1.0)
      } else {
        row = (row :+ 0.0)
      }
      j = j + BigInt(1)
    }
    mat = (mat :+ row)
    i = i + BigInt(1)
  }
  return mat
}

def copy_matrix(a: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var mat: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      row = (row :+ a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))
      j = j + BigInt(1)
    }
    mat = (mat :+ row)
    i = i + BigInt(1)
  }
  return mat
}

def matmul(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var m: BigInt = BigInt((a).size)
  var n: BigInt = BigInt((a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var p: BigInt = BigInt((b.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < m) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < p) {
      var sum: Double = 0.0
      var k: BigInt = BigInt(0)
      while (k < n) {
        sum = sum + a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((k.toInt).toInt).getOrElse(0.0) * b.lift((k.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
        k = k + BigInt(1)
      }
      row = (row :+ sum)
      j = j + BigInt(1)
    }
    res = (res :+ row)
    i = i + BigInt(1)
  }
  return res
}

def qr_decomposition(a: ArrayBuffer[ArrayBuffer[Double]]): QR = {
  var m: BigInt = BigInt((a).size)
  var n: BigInt = BigInt((a.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var t: BigInt = (if (m < n) m else n)
  var q: ArrayBuffer[ArrayBuffer[Double]] = identity_matrix(m)
  var r: ArrayBuffer[ArrayBuffer[Double]] = copy_matrix(a)
  var k: BigInt = BigInt(0)
  while (k < t - BigInt(1)) {
    var x: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var i: BigInt = k
    while (i < m) {
      x = (x :+ r.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((k.toInt).toInt).getOrElse(0.0))
      i = i + BigInt(1)
    }
    var e1: ArrayBuffer[Double] = ArrayBuffer[Double]()
    i = BigInt(0)
    while (i < BigInt((x).size)) {
      if (i == BigInt(0)) {
        e1 = (e1 :+ 1.0)
      } else {
        e1 = (e1 :+ 0.0)
      }
      i = i + BigInt(1)
    }
    var alpha: Double = vector_norm(x)
    var s: Double = sign(x.lift((BigInt(0).toInt).toInt).getOrElse(0.0)) * alpha
    var v: ArrayBuffer[Double] = ArrayBuffer[Double]()
    i = BigInt(0)
    while (i < BigInt((x).size)) {
      v = (v :+ x.lift((i.toInt).toInt).getOrElse(0.0) + s * e1.lift((i.toInt).toInt).getOrElse(0.0))
      i = i + BigInt(1)
    }
    var vnorm: Double = vector_norm(v)
    i = BigInt(0)
    while (i < BigInt((v).size)) {
      v((i).toInt) = v.lift((i.toInt).toInt).getOrElse(0.0) / vnorm
      i = i + BigInt(1)
    }
    var size: BigInt = BigInt((v).size)
    var qk_small: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
    i = BigInt(0)
    while (i < size) {
      var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
      var j: BigInt = BigInt(0)
      while (j < size) {
        var delta: Double = (if (i == j) 1.0 else 0.0)
        row = (row :+ delta - 2.0 * v.lift((i.toInt).toInt).getOrElse(0.0) * v.lift((j.toInt).toInt).getOrElse(0.0))
        j = j + BigInt(1)
      }
      qk_small = (qk_small :+ row)
      i = i + BigInt(1)
    }
    var qk: ArrayBuffer[ArrayBuffer[Double]] = identity_matrix(m)
    i = BigInt(0)
    while (i < size) {
      var j: BigInt = BigInt(0)
      while (j < size) {
        qk((k + i).toInt)((k + j).toInt) = qk_small.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
        j = j + BigInt(1)
      }
      i = i + BigInt(1)
    }
    q = matmul(q, qk)
    r = matmul(qk, r)
    k = k + BigInt(1)
  }
  return QR(q, r)
}

def print_matrix(mat: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((mat).size)) {
    var line: String = ""
    var j: BigInt = BigInt(0)
    while (j < BigInt((mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      line = line + _str(mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))
      if (j + BigInt(1) < BigInt((mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
        line = line + " "
      }
      j = j + BigInt(1)
    }
    println(_str(line))
    i = i + BigInt(1)
  }
}

var A: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(12.0, -51.0, 4.0), ArrayBuffer(6.0, 167.0, -68.0), ArrayBuffer(-4.0, 24.0, -41.0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var result: QR = qr_decomposition(A)
    print_matrix(result.q)
    print_matrix(result.r)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
