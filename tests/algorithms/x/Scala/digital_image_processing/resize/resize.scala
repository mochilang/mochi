// Generated by Mochi v0.10.71 on 2025-08-24 09:39:28 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def zeros3d(h: BigInt, w: BigInt, c: BigInt): ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = {
  var arr: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]]()
  var y: BigInt = BigInt(0)
  while (y < h) {
    var row: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
    var x: BigInt = BigInt(0)
    while (x < w) {
      var pixel: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
      var k: BigInt = BigInt(0)
      while (k < c) {
        pixel = ({pixel += (BigInt(0)); pixel})
        k = k + BigInt(1)
      }
      row = ({row += (pixel); row})
      x = x + BigInt(1)
    }
    arr = ({arr += (row); arr})
    y = y + BigInt(1)
  }
  return arr
}

def resize_nn(img: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]], dst_w: BigInt, dst_h: BigInt): ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = {
  var src_h: BigInt = BigInt((img).size)
  var src_w: BigInt = BigInt((img.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())).size)
  var channels: BigInt = BigInt((img.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]()).lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var ratio_x: Double = src_w.toString.toDouble / dst_w.toString.toDouble
  var ratio_y: Double = src_h.toString.toDouble / dst_h.toString.toDouble
  var out: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = zeros3d(dst_h, dst_w, channels)
  var i: BigInt = BigInt(0)
  while (i < dst_h) {
    var j: BigInt = BigInt(0)
    while (j < dst_w) {
      var src_x: BigInt = BigInt((ratio_x * j.toString.toDouble).toInt)
      var src_y: BigInt = BigInt((ratio_y * i.toString.toDouble).toInt)
      out((i).toInt)((j).toInt) = img.lift((src_y.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]()).lift((src_x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return out
}

def main(): Any = {
  var img: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer(ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(255), BigInt(255), BigInt(255))), ArrayBuffer(ArrayBuffer(BigInt(255), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(255), BigInt(0))))
  var resized: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = resize_nn(img, BigInt(4), BigInt(4))
  println(_str(resized))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
