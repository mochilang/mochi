// Generated by Mochi v0.10.59 on 2025-08-07 00:55:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def zeros3d(h: BigInt, w: BigInt, c: BigInt): ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = {
  var arr: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer()
  var y: BigInt = 0
  while (y < h) {
    var row: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
    var x: BigInt = 0
    while (x < w) {
      var pixel: ArrayBuffer[BigInt] = ArrayBuffer()
      var k: BigInt = 0
      while (k < c) {
        pixel = pixel :+ BigInt(0)
        k = k + 1
      }
      row = row :+ pixel
      x = x + 1
    }
    arr = arr :+ row
    y = y + 1
  }
  return arr
}

def resize_nn(img: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]], dst_w: BigInt, dst_h: BigInt): ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = {
  val src_h: BigInt = BigInt((img).size)
  val src_w: BigInt = BigInt((img((0.toInt).toInt)).size)
  val channels: BigInt = BigInt((img((0.toInt).toInt)((0.toInt).toInt)).size)
  val ratio_x: Double = src_w.toString.toDouble / dst_w.toString.toDouble
  val ratio_y: Double = src_h.toString.toDouble / dst_h.toString.toDouble
  var out: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = zeros3d(dst_h, dst_w, channels)
  var i: BigInt = 0
  while (i < dst_h) {
    var j: BigInt = 0
    while (j < dst_w) {
      val src_x: BigInt = BigInt((ratio_x * j.toString.toDouble).toInt)
      val src_y: BigInt = BigInt((ratio_y * i.toString.toDouble).toInt)
      out((i).toInt)((j).toInt) = img((src_y.toInt).toInt)((src_x.toInt).toInt)
      j = j + 1
    }
    i = i + 1
  }
  return out
}

def main(): Any = {
  val img: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer(ArrayBuffer(ArrayBuffer(0, 0, 0), ArrayBuffer(255, 255, 255)), ArrayBuffer(ArrayBuffer(255, 0, 0), ArrayBuffer(0, 255, 0)))
  val resized: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = resize_nn(img, 4, 4)
  println(resized)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
