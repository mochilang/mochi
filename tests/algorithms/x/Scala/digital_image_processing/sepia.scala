// Generated by Mochi v0.10.71 on 2025-08-24 09:39:44 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def normalize(value: BigInt): BigInt = {
  if (value > BigInt(255)) {
    return BigInt(255)
  }
  return value
}

def to_grayscale(blue: BigInt, green: BigInt, red: BigInt): BigInt = {
  var gs: Double = 0.2126 * red.toString.toDouble + 0.587 * green.toString.toDouble + 0.114 * blue.toString.toDouble
  return BigInt(gs.toString.toDouble.toInt)
}

def make_sepia(img: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]], factor: BigInt): ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = {
  var pixel_h: BigInt = BigInt((img).size)
  var pixel_v: BigInt = BigInt((img.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())).size)
  var i: BigInt = BigInt(0)
  while (i < pixel_h) {
    var j: BigInt = BigInt(0)
    while (j < pixel_v) {
      var pixel: ArrayBuffer[BigInt] = img.lift((i.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]()).lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
      var grey: BigInt = to_grayscale(pixel.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)), pixel.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)), pixel.lift((BigInt(2).toInt).toInt).getOrElse(BigInt(0)))
      img((i).toInt)((j).toInt) = ArrayBuffer(normalize(grey), normalize(grey + factor), normalize(grey + BigInt(2) * factor))
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return img
}

var image: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer(ArrayBuffer(ArrayBuffer(BigInt(10), BigInt(20), BigInt(30)), ArrayBuffer(BigInt(40), BigInt(50), BigInt(60))), ArrayBuffer(ArrayBuffer(BigInt(70), BigInt(80), BigInt(90)), ArrayBuffer(BigInt(200), BigInt(150), BigInt(100))))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var sepia: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = make_sepia(image, BigInt(20))
    println(_str(_str(sepia)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
