// Generated by Mochi v0.10.59 on 2025-08-07 00:55:33 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def normalize(value: BigInt): BigInt = {
  if (value > 255) {
    return 255
  }
  return value
}

def to_grayscale(blue: BigInt, green: BigInt, red: BigInt): BigInt = {
  val gs: Double = 0.2126 * red.toString.toDouble + 0.587 * green.toString.toDouble + 0.114 * blue.toString.toDouble
  return BigInt(gs.toString.toDouble.toInt)
}

def make_sepia(img: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]], factor: BigInt): ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = {
  val pixel_h: BigInt = BigInt((img).size)
  val pixel_v: BigInt = BigInt((img((0.toInt).toInt)).size)
  var i: BigInt = 0
  while (i < pixel_h) {
    var j: BigInt = 0
    while (j < pixel_v) {
      val pixel: ArrayBuffer[BigInt] = img((i.toInt).toInt)((j.toInt).toInt)
      val grey: BigInt = to_grayscale(pixel((0.toInt).toInt), pixel((1.toInt).toInt), pixel((2.toInt).toInt))
      img((i).toInt)((j).toInt) = ArrayBuffer(normalize(grey), normalize(grey + factor), normalize(grey + 2 * factor))
      j = j + 1
    }
    i = i + 1
  }
  return img
}

var image: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer(ArrayBuffer(ArrayBuffer(10, 20, 30), ArrayBuffer(40, 50, 60)), ArrayBuffer(ArrayBuffer(70, 80, 90), ArrayBuffer(200, 150, 100)))

val sepia: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = make_sepia(image, 20)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(sepia))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
