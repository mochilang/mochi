// Generated by Mochi v0.10.59 on 2025-08-07 00:53:19 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def change_contrast(img: ArrayBuffer[ArrayBuffer[BigInt]], level: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val factor: Double = 259.0 * (level.toString.toDouble + 255.0) / (255.0 * (259.0 - level.toString.toDouble))
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((img).size)) {
    var row: ArrayBuffer[BigInt] = img((i.toInt).toInt)
    var new_row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < BigInt((row).size)) {
      val c: BigInt = row((j.toInt).toInt)
      val contrasted: BigInt = BigInt((128.0 + factor * (c.toString.toDouble - 128.0)).toInt)
      val clamped: BigInt = (if (contrasted < 0) 0 else (if (contrasted > 255) 255 else contrasted))
      new_row = new_row :+ clamped
      j = j + 1
    }
    result = result :+ new_row
    i = i + 1
  }
  return result
}

def print_image(img: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = 0
  while (i < BigInt((img).size)) {
    var row: ArrayBuffer[BigInt] = img((i.toInt).toInt)
    var j: BigInt = 0
    var line: String = ""
    while (j < BigInt((row).size)) {
      line = line + String.valueOf(row((j.toInt).toInt)) + " "
      j = j + 1
    }
    println(line)
    i = i + 1
  }
}

val image: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(100, 125, 150), ArrayBuffer(175, 200, 225), ArrayBuffer(50, 75, 100))

val contrasted: ArrayBuffer[ArrayBuffer[BigInt]] = change_contrast(image, 170)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println("Original image:")
    print_image(image)
    println("After contrast:")
    print_image(contrasted)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
