// Generated by Mochi v0.10.72 on 2025-08-24 22:29:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def change_contrast(img: ArrayBuffer[ArrayBuffer[BigInt]], level: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var factor: Double = 259.0 * (level.toString.toDouble + 255.0) / (255.0 * (259.0 - level.toString.toDouble))
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((img).size)) {
    var row: ArrayBuffer[BigInt] = img.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    var new_row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((row).size)) {
      var c: BigInt = row.lift((j.toInt).toInt).getOrElse(BigInt(0))
      var contrasted: BigInt = BigInt((128.0 + factor * (c.toString.toDouble - 128.0)).toInt)
      var clamped: BigInt = (if (contrasted < BigInt(0)) BigInt(0) else (if (contrasted > BigInt(255)) BigInt(255) else contrasted))
      new_row = (new_row :+ (clamped))
      j = j + BigInt(1)
    }
    result = (result :+ (new_row))
    i = i + BigInt(1)
  }
  return result
}

def print_image(img: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((img).size)) {
    var row: ArrayBuffer[BigInt] = img.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    var j: BigInt = BigInt(0)
    var line: String = ""
    while (j < BigInt((row).size)) {
      line = line + _str(row.lift((j.toInt).toInt).getOrElse(BigInt(0))) + " "
      j = j + BigInt(1)
    }
    println(_str(line))
    i = i + BigInt(1)
  }
}

var image: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(100), BigInt(125), BigInt(150)), ArrayBuffer(BigInt(175), BigInt(200), BigInt(225)), ArrayBuffer(BigInt(50), BigInt(75), BigInt(100)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str("Original image:"))
    print_image(image)
    var contrasted: ArrayBuffer[ArrayBuffer[BigInt]] = change_contrast(image, BigInt(170))
    println(_str("After contrast:"))
    print_image(contrasted)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
