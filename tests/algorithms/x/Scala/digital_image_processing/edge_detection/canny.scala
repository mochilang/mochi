// Generated by Mochi v0.10.59 on 2025-08-07 00:53:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sqrtApprox(x: Double): Double = {
  var guess: Double = x / 2.0
  var i: BigInt = 0
  while (i < 20) {
    guess = (guess + x / guess) / 2.0
    i = i + 1
  }
  return guess
}

def atanApprox(x: Double): Double = {
  if (x > 1.0) {
    return PI / 2.0 - x / (x * x + 0.28)
  }
  if (x < -1.0) {
    return -PI / 2.0 - x / (x * x + 0.28)
  }
  return x / (1.0 + 0.28 * x * x)
}

def atan2Approx(y: Double, x: Double): Double = {
  if (x > 0.0) {
    val r: Double = atanApprox(y / x)
    return r
  }
  if (x < 0.0) {
    if (y >= 0.0) {
      return atanApprox(y / x) + PI
    }
    return atanApprox(y / x) - PI
  }
  if (y > 0.0) {
    return PI / 2.0
  }
  if (y < 0.0) {
    return -PI / 2.0
  }
  return 0.0
}

def deg(rad: Double): Double = {
  return rad * 180.0 / PI
}

def zero_matrix(h: BigInt, w: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var out: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < h) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var j: BigInt = 0
    while (j < w) {
      row = row :+ 0.0
      j = j + 1
    }
    out = out :+ row
    i = i + 1
  }
  return out
}

def convolve(img: ArrayBuffer[ArrayBuffer[Double]], kernel: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val h: BigInt = BigInt((img).size)
  val w: BigInt = BigInt((img((0.toInt).toInt)).size)
  val k: BigInt = BigInt((kernel).size)
  val pad: BigInt = k / 2
  var out: ArrayBuffer[ArrayBuffer[Double]] = zero_matrix(h, w)
  var y: BigInt = pad
  while (y < h - pad) {
    var x: BigInt = pad
    while (x < w - pad) {
      var sum: Double = 0.0
      var ky: BigInt = 0
      while (ky < k) {
        var kx: BigInt = 0
        while (kx < k) {
          val pixel: Double = img(((y - pad + ky).toInt).toInt)(((x - pad + kx).toInt).toInt)
          val weight: Double = kernel((ky.toInt).toInt)((kx.toInt).toInt)
          sum = sum + pixel * weight
          kx = kx + 1
        }
        ky = ky + 1
      }
      out((y).toInt)((x).toInt) = sum
      x = x + 1
    }
    y = y + 1
  }
  return out
}

def gaussian_blur(img: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  return convolve(img, GAUSSIAN_KERNEL)
}

def sobel_filter(img: ArrayBuffer[ArrayBuffer[Double]]): scala.collection.mutable.Map[String,ArrayBuffer[ArrayBuffer[Double]]] = {
  val gx: ArrayBuffer[ArrayBuffer[Double]] = convolve(img, SOBEL_GX)
  val gy: ArrayBuffer[ArrayBuffer[Double]] = convolve(img, SOBEL_GY)
  val h: BigInt = BigInt((img).size)
  val w: BigInt = BigInt((img((0.toInt).toInt)).size)
  var grad: ArrayBuffer[ArrayBuffer[Double]] = zero_matrix(h, w)
  var dir: ArrayBuffer[ArrayBuffer[Double]] = zero_matrix(h, w)
  var i: BigInt = 0
  while (i < h) {
    var j: BigInt = 0
    while (j < w) {
      val gxx: Double = gx((i.toInt).toInt)((j.toInt).toInt)
      val gyy: Double = gy((i.toInt).toInt)((j.toInt).toInt)
      grad((i).toInt)((j).toInt) = sqrtApprox(gxx * gxx + gyy * gyy)
      dir((i).toInt)((j).toInt) = deg(atan2Approx(gyy, gxx)) + 180.0
      j = j + 1
    }
    i = i + 1
  }
  return (scala.collection.mutable.Map("grad" -> (grad), "dir" -> (dir))).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[ArrayBuffer[Double]]]]
}

def suppress_non_maximum(h: BigInt, w: BigInt, direction: ArrayBuffer[ArrayBuffer[Double]], grad: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var dest: ArrayBuffer[ArrayBuffer[Double]] = zero_matrix(h, w)
  var r: BigInt = 1
  while (r < h - 1) {
    var c: BigInt = 1
    while (c < w - 1) {
      val angle: Double = direction((r.toInt).toInt)((c.toInt).toInt)
      var q: Double = 0.0
      var p: Double = 0.0
      if ((((angle >= 0.0 && angle < 22.5).asInstanceOf[Boolean] || (angle >= 157.5 && angle <= 180.0).asInstanceOf[Boolean]).asInstanceOf[Boolean] || angle >= 337.5).asInstanceOf[Boolean]) {
        q = grad((r.toInt).toInt)(((c + 1).toInt).toInt)
        p = grad((r.toInt).toInt)(((c - 1).toInt).toInt)
      } else {
        if (((angle >= 22.5 && angle < 67.5).asInstanceOf[Boolean] || (angle >= 202.5 && angle < 247.5).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
          q = grad(((r + 1).toInt).toInt)(((c - 1).toInt).toInt)
          p = grad(((r - 1).toInt).toInt)(((c + 1).toInt).toInt)
        } else {
          if (((angle >= 67.5 && angle < 112.5).asInstanceOf[Boolean] || (angle >= 247.5 && angle < 292.5).asInstanceOf[Boolean]).asInstanceOf[Boolean]) {
            q = grad(((r + 1).toInt).toInt)((c.toInt).toInt)
            p = grad(((r - 1).toInt).toInt)((c.toInt).toInt)
          } else {
            q = grad(((r - 1).toInt).toInt)(((c - 1).toInt).toInt)
            p = grad(((r + 1).toInt).toInt)(((c + 1).toInt).toInt)
          }
        }
      }
      if ((grad((r.toInt).toInt)((c.toInt).toInt) >= q && grad((r.toInt).toInt)((c.toInt).toInt) >= p).asInstanceOf[Boolean]) {
        dest((r).toInt)((c).toInt) = grad((r.toInt).toInt)((c.toInt).toInt)
      }
      c = c + 1
    }
    r = r + 1
  }
  return dest
}

def double_threshold(h: BigInt, w: BigInt, img: ArrayBuffer[ArrayBuffer[Double]], low: Double, high: Double, weak: Double, strong: Double): Any = {
  var r: BigInt = 0
  while (r < h) {
    var c: BigInt = 0
    while (c < w) {
      val v: Double = img((r.toInt).toInt)((c.toInt).toInt)
      if (v >= high) {
        img((r).toInt)((c).toInt) = strong
      } else {
        if (v < low) {
          img((r).toInt)((c).toInt) = 0.0
        } else {
          img((r).toInt)((c).toInt) = weak
        }
      }
      c = c + 1
    }
    r = r + 1
  }
}

def track_edge(h: BigInt, w: BigInt, img: ArrayBuffer[ArrayBuffer[Double]], weak: Double, strong: Double): Any = {
  var r: BigInt = 1
  while (r < h - 1) {
    var c: BigInt = 1
    while (c < w - 1) {
      if (img((r.toInt).toInt)((c.toInt).toInt) == weak) {
        if ((((((((img(((r + 1).toInt).toInt)((c.toInt).toInt) == strong || img(((r - 1).toInt).toInt)((c.toInt).toInt) == strong).asInstanceOf[Boolean] || img((r.toInt).toInt)(((c + 1).toInt).toInt) == strong).asInstanceOf[Boolean] || img((r.toInt).toInt)(((c - 1).toInt).toInt) == strong).asInstanceOf[Boolean] || img(((r - 1).toInt).toInt)(((c - 1).toInt).toInt) == strong).asInstanceOf[Boolean] || img(((r - 1).toInt).toInt)(((c + 1).toInt).toInt) == strong).asInstanceOf[Boolean] || img(((r + 1).toInt).toInt)(((c - 1).toInt).toInt) == strong).asInstanceOf[Boolean] || img(((r + 1).toInt).toInt)(((c + 1).toInt).toInt) == strong).asInstanceOf[Boolean]) {
          img((r).toInt)((c).toInt) = strong
        } else {
          img((r).toInt)((c).toInt) = 0.0
        }
      }
      c = c + 1
    }
    r = r + 1
  }
}

def canny(image: ArrayBuffer[ArrayBuffer[Double]], low: Double, high: Double, weak: Double, strong: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  val blurred: ArrayBuffer[ArrayBuffer[Double]] = gaussian_blur(image)
  val sob: scala.collection.mutable.Map[String,ArrayBuffer[ArrayBuffer[Double]]] = sobel_filter(blurred)
  val grad: ArrayBuffer[ArrayBuffer[Double]] = sob.getOrElse("grad", ArrayBuffer[ArrayBuffer[Double]]()).asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]]
  val direction: ArrayBuffer[ArrayBuffer[Double]] = sob.getOrElse("dir", ArrayBuffer[ArrayBuffer[Double]]()).asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]]
  val h: BigInt = BigInt((image).size)
  val w: BigInt = BigInt((image((0.toInt).toInt)).size)
  val suppressed: ArrayBuffer[ArrayBuffer[Double]] = suppress_non_maximum(h, w, direction, grad)
  double_threshold(h, w, suppressed, low, high, weak, strong)
  track_edge(h, w, suppressed, weak, strong)
  return suppressed
}

def print_image(img: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  var r: BigInt = 0
  while (r < BigInt((img).size)) {
    var c: BigInt = 0
    var line: String = ""
    while (c < BigInt((img((r.toInt).toInt)).size)) {
      line = line + String.valueOf(BigInt((img((r.toInt).toInt)((c.toInt).toInt)).toString.toDouble.toInt)) + " "
      c = c + 1
    }
    println(line)
    r = r + 1
  }
}

val PI: Double = 3.141592653589793

val GAUSSIAN_KERNEL: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0625, 0.125, 0.0625), ArrayBuffer(0.125, 0.25, 0.125), ArrayBuffer(0.0625, 0.125, 0.0625))

val SOBEL_GX: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(-1.0, 0.0, 1.0), ArrayBuffer(-2.0, 0.0, 2.0), ArrayBuffer(-1.0, 0.0, 1.0))

val SOBEL_GY: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(1.0, 2.0, 1.0), ArrayBuffer(0.0, 0.0, 0.0), ArrayBuffer(-1.0, -2.0, -1.0))

val image: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0, 0.0, 0.0, 0.0), ArrayBuffer(0.0, 255.0, 255.0, 255.0, 0.0), ArrayBuffer(0.0, 255.0, 255.0, 255.0, 0.0), ArrayBuffer(0.0, 255.0, 255.0, 255.0, 0.0), ArrayBuffer(0.0, 0.0, 0.0, 0.0, 0.0))

val edges: ArrayBuffer[ArrayBuffer[Double]] = canny(image, 20.0, 40.0, 128.0, 255.0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_image(edges)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
