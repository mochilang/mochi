// Generated by Mochi v0.10.59 on 2025-08-07 00:54:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def ndvi(red: Double, nir: Double): Double = {
  return (nir - red) / (nir + red)
}

def bndvi(blue: Double, nir: Double): Double = {
  return (nir - blue) / (nir + blue)
}

def gndvi(green: Double, nir: Double): Double = {
  return (nir - green) / (nir + green)
}

def ndre(redEdge: Double, nir: Double): Double = {
  return (nir - redEdge) / (nir + redEdge)
}

def ccci(red: Double, redEdge: Double, nir: Double): Double = {
  return ndre(redEdge, nir) / ndvi(red, nir)
}

def cvi(red: Double, green: Double, nir: Double): Double = {
  return nir * red / (green * green)
}

def gli(red: Double, green: Double, blue: Double): Double = {
  return (2.0 * green - red - blue) / (2.0 * green + red + blue)
}

def dvi(red: Double, nir: Double): Double = {
  return nir / red
}

def calc(index: String, red: Double, green: Double, blue: Double, redEdge: Double, nir: Double): Double = {
  if (index == "NDVI") {
    return ndvi(red, nir)
  }
  if (index == "BNDVI") {
    return bndvi(blue, nir)
  }
  if (index == "GNDVI") {
    return gndvi(green, nir)
  }
  if (index == "NDRE") {
    return ndre(redEdge, nir)
  }
  if (index == "CCCI") {
    return ccci(red, redEdge, nir)
  }
  if (index == "CVI") {
    return cvi(red, green, nir)
  }
  if (index == "GLI") {
    return gli(red, green, blue)
  }
  if (index == "DVI") {
    return dvi(red, nir)
  }
  return 0.0
}

def main(): Any = {
  val red: Double = 50.0
  val green: Double = 30.0
  val blue: Double = 10.0
  val redEdge: Double = 40.0
  val nir: Double = 100.0
  println("NDVI=" + String.valueOf(ndvi(red, nir)))
  println("CCCI=" + String.valueOf(ccci(red, redEdge, nir)))
  println("CVI=" + String.valueOf(cvi(red, green, nir)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
