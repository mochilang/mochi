// Generated by Mochi v0.10.71 on 2025-08-24 09:37:45 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def make_matrix(rows: BigInt, cols: BigInt, value: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < cols) {
      row = ({row += (value); row})
      j = j + BigInt(1)
    }
    result = ({result += (row); result})
    i = i + BigInt(1)
  }
  return result
}

def my_laplacian(src: ArrayBuffer[ArrayBuffer[BigInt]], ksize: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var kernel: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  if (ksize == BigInt(1)) {
    kernel = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(-1), BigInt(0)), ArrayBuffer(BigInt(-1), BigInt(4), BigInt(-1)), ArrayBuffer(BigInt(0), BigInt(-1), BigInt(0)))
  } else {
    if (ksize == BigInt(3)) {
      kernel = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(0)), ArrayBuffer(BigInt(1), BigInt(-4), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0)))
    } else {
      if (ksize == BigInt(5)) {
        kernel = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(0), BigInt(-1), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(-1), BigInt(-2), BigInt(-1), BigInt(0)), ArrayBuffer(BigInt(-1), BigInt(-2), BigInt(16), BigInt(-2), BigInt(-1)), ArrayBuffer(BigInt(0), BigInt(-1), BigInt(-2), BigInt(-1), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(-1), BigInt(0), BigInt(0)))
      } else {
        if (ksize == BigInt(7)) {
          kernel = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(-1), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(-2), BigInt(-3), BigInt(-2), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(-2), BigInt(-7), BigInt(-10), BigInt(-7), BigInt(-2), BigInt(0)), ArrayBuffer(BigInt(-1), BigInt(-3), BigInt(-10), BigInt(68), BigInt(-10), BigInt(-3), BigInt(-1)), ArrayBuffer(BigInt(0), BigInt(-2), BigInt(-7), BigInt(-10), BigInt(-7), BigInt(-2), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(-2), BigInt(-3), BigInt(-2), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(-1), BigInt(0), BigInt(0), BigInt(0)))
        } else {
          throw new RuntimeException(String.valueOf("ksize must be in (1, 3, 5, 7)"))
        }
      }
    }
  }
  var rows: BigInt = BigInt((src).size)
  var cols: BigInt = BigInt((src.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var k: BigInt = BigInt((kernel).size)
  var pad: BigInt = k / BigInt(2)
  var output: ArrayBuffer[ArrayBuffer[BigInt]] = make_matrix(rows, cols, BigInt(0))
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var j: BigInt = BigInt(0)
    while (j < cols) {
      var sum: BigInt = BigInt(0)
      var ki: BigInt = BigInt(0)
      while (ki < k) {
        var kj: BigInt = BigInt(0)
        while (kj < k) {
          var ii: BigInt = i + ki - pad
          var jj: BigInt = j + kj - pad
          var `val`: BigInt = BigInt(0)
          if ((((ii >= BigInt(0) && ii < rows).asInstanceOf[Boolean] && jj >= BigInt(0)).asInstanceOf[Boolean] && jj < cols)) {
            `val` = src.lift((ii.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((jj.toInt).toInt).getOrElse(BigInt(0))
          }
          sum = sum + `val` * kernel.lift((ki.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((kj.toInt).toInt).getOrElse(BigInt(0))
          kj = kj + BigInt(1)
        }
        ki = ki + BigInt(1)
      }
      output((i).toInt)((j).toInt) = sum
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return output
}

var image: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(10), BigInt(10), BigInt(10), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(10), BigInt(10), BigInt(10), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(10), BigInt(10), BigInt(10), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)))

var r: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var result: ArrayBuffer[ArrayBuffer[BigInt]] = my_laplacian(image, BigInt(3))
    while (r < BigInt((result).size)) {
      var row_str: String = "["
      var c: BigInt = BigInt(0)
      while (c < BigInt((result.lift((r.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
        row_str = row_str + _str(result.lift((r.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((c.toInt).toInt).getOrElse(BigInt(0)))
        if (c + BigInt(1) < BigInt((result.lift((r.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
          row_str = row_str + ", "
        }
        c = c + BigInt(1)
      }
      row_str = row_str + "]"
      println(_str(row_str))
      r = r + BigInt(1)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
