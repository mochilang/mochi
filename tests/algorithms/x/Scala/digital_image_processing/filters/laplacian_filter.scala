// Generated by Mochi v0.10.59 on 2025-08-07 00:54:20 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def make_matrix(rows: BigInt, cols: BigInt, value: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < rows) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < cols) {
      row = row :+ value
      j = j + 1
    }
    result = result :+ row
    i = i + 1
  }
  return result
}

def my_laplacian(src: ArrayBuffer[ArrayBuffer[BigInt]], ksize: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var kernel: ArrayBuffer[ArrayBuffer[Any]] = ArrayBuffer()
  if (ksize == 1) {
    kernel = ArrayBuffer(ArrayBuffer(0, -1, 0), ArrayBuffer(-1, 4, -1), ArrayBuffer(0, -1, 0))
  } else {
    if (ksize == 3) {
      kernel = ArrayBuffer(ArrayBuffer(0, 1, 0), ArrayBuffer(1, -4, 1), ArrayBuffer(0, 1, 0))
    } else {
      if (ksize == 5) {
        kernel = ArrayBuffer(ArrayBuffer(0, 0, -1, 0, 0), ArrayBuffer(0, -1, -2, -1, 0), ArrayBuffer(-1, -2, 16, -2, -1), ArrayBuffer(0, -1, -2, -1, 0), ArrayBuffer(0, 0, -1, 0, 0))
      } else {
        if (ksize == 7) {
          kernel = ArrayBuffer(ArrayBuffer(0, 0, 0, -1, 0, 0, 0), ArrayBuffer(0, 0, -2, -3, -2, 0, 0), ArrayBuffer(0, -2, -7, -10, -7, -2, 0), ArrayBuffer(-1, -3, -10, 68, -10, -3, -1), ArrayBuffer(0, -2, -7, -10, -7, -2, 0), ArrayBuffer(0, 0, -2, -3, -2, 0, 0), ArrayBuffer(0, 0, 0, -1, 0, 0, 0))
        } else {
          throw new RuntimeException(String.valueOf("ksize must be in (1, 3, 5, 7)"))
        }
      }
    }
  }
  val rows: BigInt = BigInt((src).size)
  val cols: BigInt = BigInt((src((0.toInt).toInt)).size)
  val k: BigInt = BigInt((kernel).size)
  val pad: BigInt = k / 2
  var output: ArrayBuffer[ArrayBuffer[BigInt]] = make_matrix(rows, cols, 0)
  var i: BigInt = 0
  while (i < rows) {
    var j: BigInt = 0
    while (j < cols) {
      var sum: BigInt = 0
      var ki: BigInt = 0
      while (ki < k) {
        var kj: BigInt = 0
        while (kj < k) {
          val ii: BigInt = i + ki - pad
          val jj: BigInt = j + kj - pad
          var `val`: BigInt = 0
          if ((((ii >= 0 && ii < rows).asInstanceOf[Boolean] && jj >= 0).asInstanceOf[Boolean] && jj < cols).asInstanceOf[Boolean]) {
            `val` = src((ii.toInt).toInt)((jj.toInt).toInt)
          }
          sum = sum + `val` * BigInt((kernel((ki.toInt).toInt)((kj.toInt).toInt)).toString.toDouble.toInt)
          kj = kj + 1
        }
        ki = ki + 1
      }
      output((i).toInt)((j).toInt) = sum
      j = j + 1
    }
    i = i + 1
  }
  return output
}

val image: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(0, 0, 0, 0, 0), ArrayBuffer(0, 10, 10, 10, 0), ArrayBuffer(0, 10, 10, 10, 0), ArrayBuffer(0, 10, 10, 10, 0), ArrayBuffer(0, 0, 0, 0, 0))

val result: ArrayBuffer[ArrayBuffer[BigInt]] = my_laplacian(image, 3)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var r: BigInt = 0
    while (r < BigInt((result).size)) {
      var row_str: String = "["
      var c: BigInt = 0
      while (c < BigInt((result((r.toInt).toInt)).size)) {
        row_str = row_str + String.valueOf(result((r.toInt).toInt)((c.toInt).toInt))
        if (c + 1 < BigInt((result((r.toInt).toInt)).size)) {
          row_str = row_str + ", "
        }
        c = c + 1
      }
      row_str = row_str + "]"
      println(row_str)
      r = r + 1
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
