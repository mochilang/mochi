// Generated by Mochi v0.10.72 on 2025-08-24 22:30:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def pad_edge(image: ArrayBuffer[ArrayBuffer[BigInt]], pad_size: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var height: BigInt = BigInt((image).size)
  var width: BigInt = BigInt((image.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var new_height: BigInt = height + pad_size * BigInt(2)
  var new_width: BigInt = width + pad_size * BigInt(2)
  var padded: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < new_height) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var src_i: BigInt = i
    if (src_i < pad_size) {
      src_i = BigInt(0)
    }
    if (src_i >= height + pad_size) {
      src_i = height - BigInt(1)
    } else {
      src_i = src_i - pad_size
    }
    var j: BigInt = BigInt(0)
    while (j < new_width) {
      var src_j: BigInt = j
      if (src_j < pad_size) {
        src_j = BigInt(0)
      }
      if (src_j >= width + pad_size) {
        src_j = width - BigInt(1)
      } else {
        src_j = src_j - pad_size
      }
      row = (row :+ (image.lift((src_i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((src_j.toInt).toInt).getOrElse(BigInt(0))))
      j = j + BigInt(1)
    }
    padded = (padded :+ (row))
    i = i + BigInt(1)
  }
  return padded
}

def im2col(image: ArrayBuffer[ArrayBuffer[BigInt]], block_h: BigInt, block_w: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var rows: BigInt = BigInt((image).size)
  var cols: BigInt = BigInt((image.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var dst_height: BigInt = rows - block_h + BigInt(1)
  var dst_width: BigInt = cols - block_w + BigInt(1)
  var image_array: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < dst_height) {
    var j: BigInt = BigInt(0)
    while (j < dst_width) {
      var window: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
      var bi: BigInt = BigInt(0)
      while (bi < block_h) {
        var bj: BigInt = BigInt(0)
        while (bj < block_w) {
          window = (window :+ (image.lift(((i + bi).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j + bj).toInt).toInt).getOrElse(BigInt(0))))
          bj = bj + BigInt(1)
        }
        bi = bi + BigInt(1)
      }
      image_array = (image_array :+ (window))
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return image_array
}

def flatten(matrix: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  var out: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((matrix).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((matrix.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      out = (out :+ (matrix.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))))
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return out
}

def dot(a: ArrayBuffer[BigInt], b: ArrayBuffer[BigInt]): BigInt = {
  var sum: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    sum = sum + a.lift((i.toInt).toInt).getOrElse(BigInt(0)) * b.lift((i.toInt).toInt).getOrElse(BigInt(0))
    i = i + BigInt(1)
  }
  return sum
}

def img_convolve(image: ArrayBuffer[ArrayBuffer[BigInt]], kernel: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var height: BigInt = BigInt((image).size)
  var width: BigInt = BigInt((image.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var k_size: BigInt = BigInt((kernel).size)
  var pad_size: BigInt = k_size / BigInt(2)
  var padded: ArrayBuffer[ArrayBuffer[BigInt]] = pad_edge(image, pad_size)
  var image_array: ArrayBuffer[ArrayBuffer[BigInt]] = im2col(padded, k_size, k_size)
  var kernel_flat: ArrayBuffer[BigInt] = flatten(kernel)
  var dst: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var idx: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < height) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < width) {
      var `val`: BigInt = dot(image_array.lift((idx.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()), kernel_flat)
      row = (row :+ (`val`))
      idx = idx + BigInt(1)
      j = j + BigInt(1)
    }
    dst = (dst :+ (row))
    i = i + BigInt(1)
  }
  return dst
}

def print_matrix(m: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((m).size)) {
    var line: String = ""
    var j: BigInt = BigInt(0)
    while (j < BigInt((m.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      if (j > BigInt(0)) {
        line = line + " "
      }
      line = line + _str(m.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0)))
      j = j + BigInt(1)
    }
    println(_str(line))
    i = i + BigInt(1)
  }
}

var image: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(4), BigInt(5), BigInt(6), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(7), BigInt(8), BigInt(9), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)))

var laplace_kernel: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(0)), ArrayBuffer(BigInt(1), BigInt(-4), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var result: ArrayBuffer[ArrayBuffer[BigInt]] = img_convolve(image, laplace_kernel)
    print_matrix(result)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
