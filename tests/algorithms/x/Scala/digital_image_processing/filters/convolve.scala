// Generated by Mochi v0.10.59 on 2025-08-07 00:53:57 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def pad_edge(image: ArrayBuffer[ArrayBuffer[BigInt]], pad_size: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val height: BigInt = BigInt((image).size)
  val width: BigInt = BigInt((image((0.toInt).toInt)).size)
  val new_height: BigInt = height + pad_size * 2
  val new_width: BigInt = width + pad_size * 2
  var padded: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < new_height) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var src_i: BigInt = i
    if (src_i < pad_size) {
      src_i = 0
    }
    if (src_i >= height + pad_size) {
      src_i = height - 1
    } else {
      src_i = src_i - pad_size
    }
    var j: BigInt = 0
    while (j < new_width) {
      var src_j: BigInt = j
      if (src_j < pad_size) {
        src_j = 0
      }
      if (src_j >= width + pad_size) {
        src_j = width - 1
      } else {
        src_j = src_j - pad_size
      }
      row = row :+ image((src_i.toInt).toInt)((src_j.toInt).toInt)
      j = j + 1
    }
    padded = padded :+ row
    i = i + 1
  }
  return padded
}

def im2col(image: ArrayBuffer[ArrayBuffer[BigInt]], block_h: BigInt, block_w: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val rows: BigInt = BigInt((image).size)
  val cols: BigInt = BigInt((image((0.toInt).toInt)).size)
  val dst_height: BigInt = rows - block_h + 1
  val dst_width: BigInt = cols - block_w + 1
  var image_array: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < dst_height) {
    var j: BigInt = 0
    while (j < dst_width) {
      var window: ArrayBuffer[BigInt] = ArrayBuffer()
      var bi: BigInt = 0
      while (bi < block_h) {
        var bj: BigInt = 0
        while (bj < block_w) {
          window = window :+ image(((i + bi).toInt).toInt)(((j + bj).toInt).toInt)
          bj = bj + 1
        }
        bi = bi + 1
      }
      image_array = image_array :+ window
      j = j + 1
    }
    i = i + 1
  }
  return image_array
}

def flatten(matrix: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  var out: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((matrix).size)) {
    var j: BigInt = 0
    while (j < BigInt((matrix((i.toInt).toInt)).size)) {
      out = out :+ matrix((i.toInt).toInt)((j.toInt).toInt)
      j = j + 1
    }
    i = i + 1
  }
  return out
}

def dot(a: ArrayBuffer[BigInt], b: ArrayBuffer[BigInt]): BigInt = {
  var sum: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((a).size)) {
    sum = sum + a((i.toInt).toInt) * b((i.toInt).toInt)
    i = i + 1
  }
  return sum
}

def img_convolve(image: ArrayBuffer[ArrayBuffer[BigInt]], kernel: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val height: BigInt = BigInt((image).size)
  val width: BigInt = BigInt((image((0.toInt).toInt)).size)
  val k_size: BigInt = BigInt((kernel).size)
  val pad_size: BigInt = k_size / 2
  val padded: ArrayBuffer[ArrayBuffer[BigInt]] = pad_edge(image, pad_size)
  val image_array: ArrayBuffer[ArrayBuffer[BigInt]] = im2col(padded, k_size, k_size)
  val kernel_flat: ArrayBuffer[BigInt] = flatten(kernel)
  var dst: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var idx: BigInt = 0
  var i: BigInt = 0
  while (i < height) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < width) {
      val `val`: BigInt = dot(image_array((idx.toInt).toInt), kernel_flat)
      row = row :+ `val`
      idx = idx + 1
      j = j + 1
    }
    dst = dst :+ row
    i = i + 1
  }
  return dst
}

def print_matrix(m: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = 0
  while (i < BigInt((m).size)) {
    var line: String = ""
    var j: BigInt = 0
    while (j < BigInt((m((i.toInt).toInt)).size)) {
      if (j > 0) {
        line = line + " "
      }
      line = line + String.valueOf(m((i.toInt).toInt)((j.toInt).toInt))
      j = j + 1
    }
    println(line)
    i = i + 1
  }
}

val image: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(1, 2, 3, 0, 0), ArrayBuffer(4, 5, 6, 0, 0), ArrayBuffer(7, 8, 9, 0, 0), ArrayBuffer(0, 0, 0, 0, 0), ArrayBuffer(0, 0, 0, 0, 0))

val laplace_kernel: ArrayBuffer[Any] = ArrayBuffer(ArrayBuffer(0, 1, 0), ArrayBuffer(1, -4, 1), ArrayBuffer(0, 1, 0))

val result: ArrayBuffer[ArrayBuffer[BigInt]] = img_convolve(image, laplace_kernel.asInstanceOf[ArrayBuffer[ArrayBuffer[BigInt]]])

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_matrix(result)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
