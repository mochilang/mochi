// Generated by Mochi v0.10.72 on 2025-08-24 22:30:31 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def to_radians(deg: Double): Double = {
  return deg * PI / 180.0
}

def sin_taylor(x: Double): Double = {
  var term: Double = x
  var sum: Double = x
  var i: BigInt = BigInt(1)
  while (i < BigInt(10)) {
    var k1: Double = 2.0 * i.toString.toDouble
    var k2: Double = k1 + 1.0
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + BigInt(1)
  }
  return sum
}

def cos_taylor(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: BigInt = BigInt(1)
  while (i < BigInt(10)) {
    var k1: Double = 2.0 * i.toString.toDouble - 1.0
    var k2: Double = 2.0 * i.toString.toDouble
    term = -term * x * x / (k1 * k2)
    sum = sum + term
    i = i + BigInt(1)
  }
  return sum
}

def exp_taylor(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var i: Double = 1.0
  while (i < 20.0) {
    term = term * x / i
    sum = sum + term
    i = i + 1.0
  }
  return sum
}

def gabor_filter_kernel(ksize: BigInt, sigma: Double, theta: Double, lambd: Double, gamma: Double, psi: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  var size: BigInt = ksize
  if (size % BigInt(2) == BigInt(0)) {
    size = size + BigInt(1)
  }
  var gabor: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var y: BigInt = BigInt(0)
  while (y < size) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var x: BigInt = BigInt(0)
    while (x < size) {
      var px: Double = (x - size / BigInt(2)).toDouble
      var py: Double = (y - size / BigInt(2)).toDouble
      var rad: Double = to_radians(theta)
      var cos_theta: Double = cos_taylor(rad)
      var sin_theta: Double = sin_taylor(rad)
      var x_rot: Double = cos_theta * px + sin_theta * py
      var y_rot: Double = -sin_theta * px + cos_theta * py
      var exponent: Double = -(x_rot * x_rot + gamma * gamma * y_rot * y_rot) / (2.0 * sigma * sigma)
      var value: Double = exp_taylor(exponent) * cos_taylor(2.0 * PI * x_rot / lambd + psi)
      row = (row :+ (value))
      x = x + BigInt(1)
    }
    gabor = (gabor :+ (row))
    y = y + BigInt(1)
  }
  return gabor
}

var PI: Double = 3.141592653589793

var kernel: ArrayBuffer[ArrayBuffer[Double]] = gabor_filter_kernel(BigInt(3), 8.0, 0.0, 10.0, 0.0, 0.0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(kernel))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
