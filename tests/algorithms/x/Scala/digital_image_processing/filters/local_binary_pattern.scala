// Generated by Mochi v0.10.59 on 2025-08-07 00:54:27 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def get_neighbors_pixel(image: ArrayBuffer[ArrayBuffer[BigInt]], x: BigInt, y: BigInt, center: BigInt): BigInt = {
  if ((x < 0 || y < 0).asInstanceOf[Boolean]) {
    return 0
  }
  if ((x >= BigInt((image).size) || y >= BigInt((image((0.toInt).toInt)).size)).asInstanceOf[Boolean]) {
    return 0
  }
  if (image((x.toInt).toInt)((y.toInt).toInt) >= center) {
    return 1
  }
  return 0
}

def local_binary_value(image: ArrayBuffer[ArrayBuffer[BigInt]], x: BigInt, y: BigInt): BigInt = {
  val center: BigInt = image((x.toInt).toInt)((y.toInt).toInt)
  val powers: ArrayBuffer[BigInt] = ArrayBuffer(1, 2, 4, 8, 16, 32, 64, 128)
  val neighbors: ArrayBuffer[BigInt] = ArrayBuffer(get_neighbors_pixel(image, x - 1, y + 1, center), get_neighbors_pixel(image, x, y + 1, center), get_neighbors_pixel(image, x - 1, y, center), get_neighbors_pixel(image, x + 1, y + 1, center), get_neighbors_pixel(image, x + 1, y, center), get_neighbors_pixel(image, x + 1, y - 1, center), get_neighbors_pixel(image, x, y - 1, center), get_neighbors_pixel(image, x - 1, y - 1, center))
  var sum: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((neighbors).size)) {
    sum = sum + neighbors((i.toInt).toInt) * powers((i.toInt).toInt)
    i = i + 1
  }
  return sum
}

val image: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(10, 10, 10, 10, 10), ArrayBuffer(10, 20, 30, 20, 10), ArrayBuffer(10, 30, 40, 30, 10), ArrayBuffer(10, 20, 30, 20, 10), ArrayBuffer(10, 10, 10, 10, 10))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var i: BigInt = 0
    while (i < BigInt((image).size)) {
      var j: BigInt = 0
      var line: String = ""
      while (j < BigInt((image((0.toInt).toInt)).size)) {
        val value: BigInt = local_binary_value(image, i, j)
        line = line + String.valueOf(value)
        if (j < BigInt((image((0.toInt).toInt)).size) - 1) {
          line = line + " "
        }
        j = j + 1
      }
      println(line)
      i = i + 1
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
