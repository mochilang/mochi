// Generated by Mochi v0.10.71 on 2025-08-24 09:37:53 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def get_neighbors_pixel(image: ArrayBuffer[ArrayBuffer[BigInt]], x: BigInt, y: BigInt, center: BigInt): BigInt = {
  if ((x < BigInt(0) || y < BigInt(0))) {
    return BigInt(0)
  }
  if ((x >= BigInt((image).size) || y >= BigInt((image.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size))) {
    return BigInt(0)
  }
  if (image.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((y.toInt).toInt).getOrElse(BigInt(0)) >= center) {
    return BigInt(1)
  }
  return BigInt(0)
}

def local_binary_value(image: ArrayBuffer[ArrayBuffer[BigInt]], x: BigInt, y: BigInt): BigInt = {
  var center: BigInt = image.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((y.toInt).toInt).getOrElse(BigInt(0))
  var powers: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(2), BigInt(4), BigInt(8), BigInt(16), BigInt(32), BigInt(64), BigInt(128))
  var neighbors: ArrayBuffer[BigInt] = ArrayBuffer(get_neighbors_pixel(image, x - BigInt(1), y + BigInt(1), center), get_neighbors_pixel(image, x, y + BigInt(1), center), get_neighbors_pixel(image, x - BigInt(1), y, center), get_neighbors_pixel(image, x + BigInt(1), y + BigInt(1), center), get_neighbors_pixel(image, x + BigInt(1), y, center), get_neighbors_pixel(image, x + BigInt(1), y - BigInt(1), center), get_neighbors_pixel(image, x, y - BigInt(1), center), get_neighbors_pixel(image, x - BigInt(1), y - BigInt(1), center))
  var sum: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((neighbors).size)) {
    sum = sum + neighbors.lift((i.toInt).toInt).getOrElse(BigInt(0)) * powers.lift((i.toInt).toInt).getOrElse(BigInt(0))
    i = i + BigInt(1)
  }
  return sum
}

var image: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(10), BigInt(10), BigInt(10), BigInt(10), BigInt(10)), ArrayBuffer(BigInt(10), BigInt(20), BigInt(30), BigInt(20), BigInt(10)), ArrayBuffer(BigInt(10), BigInt(30), BigInt(40), BigInt(30), BigInt(10)), ArrayBuffer(BigInt(10), BigInt(20), BigInt(30), BigInt(20), BigInt(10)), ArrayBuffer(BigInt(10), BigInt(10), BigInt(10), BigInt(10), BigInt(10)))

var i: BigInt = BigInt(0)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    while (i < BigInt((image).size)) {
      var j: BigInt = BigInt(0)
      var line: String = ""
      while (j < BigInt((image.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
        var value: BigInt = local_binary_value(image, i, j)
        line = line + _str(value)
        if (j < BigInt((image.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size) - BigInt(1)) {
          line = line + " "
        }
        j = j + BigInt(1)
      }
      println(_str(line))
      i = i + BigInt(1)
    }
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
