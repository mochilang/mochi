// Generated by Mochi v0.10.71 on 2025-08-24 09:38:01 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def insertion_sort(a: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var i: BigInt = BigInt(1)
  while (i < BigInt((a).size)) {
    var key: BigInt = a.lift((i.toInt).toInt).getOrElse(BigInt(0))
    var j: BigInt = i - BigInt(1)
    while (j >= BigInt(0) && a.lift((j.toInt).toInt).getOrElse(BigInt(0)) > key) {
      a((j + BigInt(1)).toInt) = a.lift((j.toInt).toInt).getOrElse(BigInt(0))
      j = j - BigInt(1)
    }
    a((j + BigInt(1)).toInt) = key
    i = i + BigInt(1)
  }
  return a
}

def median_filter(gray_img: ArrayBuffer[ArrayBuffer[BigInt]], mask: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var rows: BigInt = BigInt((gray_img).size)
  var cols: BigInt = BigInt((gray_img.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var bd: BigInt = mask / BigInt(2)
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < rows) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < cols) {
      row = ({row += (BigInt(0)); row})
      j = j + BigInt(1)
    }
    result = ({result += (row); result})
    i = i + BigInt(1)
  }
  i = bd
  while (i < rows - bd) {
    var j: BigInt = bd
    while (j < cols - bd) {
      var kernel: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
      var x: BigInt = i - bd
      while (x <= i + bd) {
        var y: BigInt = j - bd
        while (y <= j + bd) {
          kernel = ({kernel += (gray_img.lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((y.toInt).toInt).getOrElse(BigInt(0))); kernel})
          y = y + BigInt(1)
        }
        x = x + BigInt(1)
      }
      kernel = insertion_sort(kernel)
      var idx: BigInt = mask * mask / BigInt(2)
      result((i).toInt)((j).toInt) = kernel.lift((idx.toInt).toInt).getOrElse(BigInt(0))
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return result
}

def main(): Any = {
  var img: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(10), BigInt(10), BigInt(10), BigInt(10), BigInt(10)), ArrayBuffer(BigInt(10), BigInt(255), BigInt(10), BigInt(255), BigInt(10)), ArrayBuffer(BigInt(10), BigInt(10), BigInt(10), BigInt(10), BigInt(10)), ArrayBuffer(BigInt(10), BigInt(255), BigInt(10), BigInt(255), BigInt(10)), ArrayBuffer(BigInt(10), BigInt(10), BigInt(10), BigInt(10), BigInt(10)))
  var filtered: ArrayBuffer[ArrayBuffer[BigInt]] = median_filter(img, BigInt(3))
  println(_str(filtered))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
