// Generated by Mochi v0.10.59 on 2025-08-07 00:54:35 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def insertion_sort(a: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var i: BigInt = 1
  while (i < BigInt((a).size)) {
    val key: BigInt = a((i.toInt).toInt)
    var j: BigInt = i - 1
    while (j >= 0 && a((j.toInt).toInt) > key) {
      a((j + 1).toInt) = a((j.toInt).toInt)
      j = j - 1
    }
    a((j + 1).toInt) = key
    i = i + 1
  }
  return a
}

def median_filter(gray_img: ArrayBuffer[ArrayBuffer[BigInt]], mask: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val rows: BigInt = BigInt((gray_img).size)
  val cols: BigInt = BigInt((gray_img((0.toInt).toInt)).size)
  val bd: BigInt = mask / 2
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < rows) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < cols) {
      row = row :+ BigInt(0)
      j = j + 1
    }
    result = result :+ row
    i = i + 1
  }
  i = bd
  while (i < rows - bd) {
    var j: BigInt = bd
    while (j < cols - bd) {
      var kernel: ArrayBuffer[BigInt] = ArrayBuffer()
      var x: BigInt = i - bd
      while (x <= i + bd) {
        var y: BigInt = j - bd
        while (y <= j + bd) {
          kernel = kernel :+ gray_img((x.toInt).toInt)((y.toInt).toInt)
          y = y + 1
        }
        x = x + 1
      }
      kernel = insertion_sort(kernel)
      val idx: BigInt = mask * mask / 2
      result((i).toInt)((j).toInt) = kernel((idx.toInt).toInt)
      j = j + 1
    }
    i = i + 1
  }
  return result
}

def main(): Any = {
  val img: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(10, 10, 10, 10, 10), ArrayBuffer(10, 255, 10, 255, 10), ArrayBuffer(10, 10, 10, 10, 10), ArrayBuffer(10, 255, 10, 255, 10), ArrayBuffer(10, 10, 10, 10, 10))
  val filtered: ArrayBuffer[ArrayBuffer[BigInt]] = median_filter(img, 3)
  println(filtered)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
