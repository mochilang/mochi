// Generated by Mochi v0.10.71 on 2025-08-24 09:38:43 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def absf(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x / 2.0
  var i: BigInt = BigInt(0)
  while (i < BigInt(20)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def atanApprox(x: Double): Double = {
  if (x > 1.0) {
    return PI / 2.0 - x / (x * x + 0.28)
  }
  if (x < -1.0) {
    return -PI / 2.0 - x / (x * x + 0.28)
  }
  return x / (1.0 + 0.28 * x * x)
}

def atan2Approx(y: Double, x: Double): Double = {
  if (x == 0.0) {
    if (y > 0.0) {
      return PI / 2.0
    }
    if (y < 0.0) {
      return -PI / 2.0
    }
    return 0.0
  }
  var a: Double = atanApprox(y / x)
  if (x > 0.0) {
    return a
  }
  if (y >= 0.0) {
    return a + PI
  }
  return a - PI
}

def zeros(h: BigInt, w: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var m: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var y: BigInt = BigInt(0)
  while (y < h) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var x: BigInt = BigInt(0)
    while (x < w) {
      row = ({row += (0.0); row})
      x = x + BigInt(1)
    }
    m = ({m += (row); m})
    y = y + BigInt(1)
  }
  return m
}

def pad_edge(img: ArrayBuffer[ArrayBuffer[Double]], pad: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var h: BigInt = BigInt((img).size)
  var w: BigInt = BigInt((img.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var out: ArrayBuffer[ArrayBuffer[Double]] = zeros(h + pad * BigInt(2), w + pad * BigInt(2))
  var y: BigInt = BigInt(0)
  while (y < h + pad * BigInt(2)) {
    var x: BigInt = BigInt(0)
    while (x < w + pad * BigInt(2)) {
      var sy: BigInt = y - pad
      if (sy < BigInt(0)) {
        sy = BigInt(0)
      }
      if (sy >= h) {
        sy = h - BigInt(1)
      }
      var sx: BigInt = x - pad
      if (sx < BigInt(0)) {
        sx = BigInt(0)
      }
      if (sx >= w) {
        sx = w - BigInt(1)
      }
      out((y).toInt)((x).toInt) = img.lift((sy.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((sx.toInt).toInt).getOrElse(0.0)
      x = x + BigInt(1)
    }
    y = y + BigInt(1)
  }
  return out
}

def img_convolve(img: ArrayBuffer[ArrayBuffer[Double]], kernel: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var h: BigInt = BigInt((img).size)
  var w: BigInt = BigInt((img.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var k: BigInt = BigInt((kernel).size)
  var pad: BigInt = k / BigInt(2)
  var padded: ArrayBuffer[ArrayBuffer[Double]] = pad_edge(img, pad)
  var out: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var y: BigInt = BigInt(0)
  while (y < h) {
    var x: BigInt = BigInt(0)
    while (x < w) {
      var sum: Double = 0.0
      var i: BigInt = BigInt(0)
      while (i < k) {
        var j: BigInt = BigInt(0)
        while (j < k) {
          sum = sum + padded.lift(((y + i).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift(((x + j).toInt).toInt).getOrElse(0.0) * (kernel.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))).toDouble
          j = j + BigInt(1)
        }
        i = i + BigInt(1)
      }
      out((y).toInt)((x).toInt) = sum
      x = x + BigInt(1)
    }
    y = y + BigInt(1)
  }
  return out
}

def abs_matrix(mat: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var h: BigInt = BigInt((mat).size)
  var w: BigInt = BigInt((mat.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var out: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var y: BigInt = BigInt(0)
  while (y < h) {
    var x: BigInt = BigInt(0)
    while (x < w) {
      var v: Double = mat.lift((y.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((x.toInt).toInt).getOrElse(0.0)
      if (v < 0.0) {
        out((y).toInt)((x).toInt) = -v
      } else {
        out((y).toInt)((x).toInt) = v
      }
      x = x + BigInt(1)
    }
    y = y + BigInt(1)
  }
  return out
}

def max_matrix(mat: ArrayBuffer[ArrayBuffer[Double]]): Double = {
  var max_val: Double = mat.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((BigInt(0).toInt).toInt).getOrElse(0.0)
  var y: BigInt = BigInt(0)
  while (y < BigInt((mat).size)) {
    var x: BigInt = BigInt(0)
    while (x < BigInt((mat.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      if (mat.lift((y.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((x.toInt).toInt).getOrElse(0.0) > max_val) {
        max_val = mat.lift((y.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((x.toInt).toInt).getOrElse(0.0)
      }
      x = x + BigInt(1)
    }
    y = y + BigInt(1)
  }
  return max_val
}

def scale_matrix(mat: ArrayBuffer[ArrayBuffer[Double]], factor: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  var h: BigInt = BigInt((mat).size)
  var w: BigInt = BigInt((mat.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)
  var out: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var y: BigInt = BigInt(0)
  while (y < h) {
    var x: BigInt = BigInt(0)
    while (x < w) {
      out((y).toInt)((x).toInt) = mat.lift((y.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((x.toInt).toInt).getOrElse(0.0) * factor
      x = x + BigInt(1)
    }
    y = y + BigInt(1)
  }
  return out
}

def sobel_filter(image: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[ArrayBuffer[Double]]] = {
  var h: BigInt = BigInt((image).size)
  var w: BigInt = BigInt((image.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var img: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var y0: BigInt = BigInt(0)
  while (y0 < h) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var x0: BigInt = BigInt(0)
    while (x0 < w) {
      row = ({row += ((image.lift((y0.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((x0.toInt).toInt).getOrElse(BigInt(0))).toDouble); row})
      x0 = x0 + BigInt(1)
    }
    img = ({img += (row); img})
    y0 = y0 + BigInt(1)
  }
  var kernel_x: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(-1), BigInt(0), BigInt(1)), ArrayBuffer(BigInt(-2), BigInt(0), BigInt(2)), ArrayBuffer(BigInt(-1), BigInt(0), BigInt(1)))
  var kernel_y: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(-1), BigInt(-2), BigInt(-1)))
  var dst_x: ArrayBuffer[ArrayBuffer[Double]] = abs_matrix(img_convolve(img, kernel_x))
  var dst_y: ArrayBuffer[ArrayBuffer[Double]] = abs_matrix(img_convolve(img, kernel_y))
  var max_x: Double = max_matrix(dst_x)
  var max_y: Double = max_matrix(dst_y)
  dst_x = scale_matrix(dst_x, 255.0 / max_x)
  dst_y = scale_matrix(dst_y, 255.0 / max_y)
  var mag: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var theta: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var y: BigInt = BigInt(0)
  while (y < h) {
    var x: BigInt = BigInt(0)
    while (x < w) {
      var gx: Double = dst_x.lift((y.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((x.toInt).toInt).getOrElse(0.0)
      var gy: Double = dst_y.lift((y.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((x.toInt).toInt).getOrElse(0.0)
      mag((y).toInt)((x).toInt) = sqrtApprox(gx * gx + gy * gy)
      theta((y).toInt)((x).toInt) = atan2Approx(gy, gx)
      x = x + BigInt(1)
    }
    y = y + BigInt(1)
  }
  var max_m: Double = max_matrix(mag)
  mag = scale_matrix(mag, 255.0 / max_m)
  return ArrayBuffer(mag, theta)
}

def print_matrix_int(mat: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  var y: BigInt = BigInt(0)
  while (y < BigInt((mat).size)) {
    var line: String = ""
    var x: BigInt = BigInt(0)
    while (x < BigInt((mat.lift((y.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      line = line + _str(BigInt((mat.lift((y.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((x.toInt).toInt).getOrElse(0.0)).toString.toDouble.toInt))
      if (x < BigInt((mat.lift((y.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) - BigInt(1)) {
        line = line + " "
      }
      x = x + BigInt(1)
    }
    println(_str(line))
    y = y + BigInt(1)
  }
}

def print_matrix_float(mat: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  var y: BigInt = BigInt(0)
  while (y < BigInt((mat).size)) {
    var line: String = ""
    var x: BigInt = BigInt(0)
    while (x < BigInt((mat.lift((y.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      line = line + _str(mat.lift((y.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((x.toInt).toInt).getOrElse(0.0))
      if (x < BigInt((mat.lift((y.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) - BigInt(1)) {
        line = line + " "
      }
      x = x + BigInt(1)
    }
    println(_str(line))
    y = y + BigInt(1)
  }
}

def main(): Any = {
  var img: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(10), BigInt(10), BigInt(10), BigInt(10), BigInt(10)), ArrayBuffer(BigInt(10), BigInt(50), BigInt(50), BigInt(50), BigInt(10)), ArrayBuffer(BigInt(10), BigInt(50), BigInt(80), BigInt(50), BigInt(10)), ArrayBuffer(BigInt(10), BigInt(50), BigInt(50), BigInt(50), BigInt(10)), ArrayBuffer(BigInt(10), BigInt(10), BigInt(10), BigInt(10), BigInt(10)))
  var res: ArrayBuffer[ArrayBuffer[ArrayBuffer[Double]]] = sobel_filter(img)
  var mag: ArrayBuffer[ArrayBuffer[Double]] = res.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[Double]]())
  var theta: ArrayBuffer[ArrayBuffer[Double]] = res.lift((BigInt(1).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[Double]]())
  print_matrix_int(mag)
  print_matrix_float(theta)
}

var PI: Double = 3.141592653589793

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
