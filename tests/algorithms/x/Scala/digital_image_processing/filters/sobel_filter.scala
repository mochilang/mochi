// Generated by Mochi v0.10.59 on 2025-08-07 00:54:43 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def absf(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x / 2.0
  var i: BigInt = 0
  while (i < 20) {
    guess = (guess + x / guess) / 2.0
    i = i + 1
  }
  return guess
}

def atanApprox(x: Double): Double = {
  if (x > 1.0) {
    return PI / 2.0 - x / (x * x + 0.28)
  }
  if (x < -1.0) {
    return -PI / 2.0 - x / (x * x + 0.28)
  }
  return x / (1.0 + 0.28 * x * x)
}

def atan2Approx(y: Double, x: Double): Double = {
  if (x == 0.0) {
    if (y > 0.0) {
      return PI / 2.0
    }
    if (y < 0.0) {
      return -PI / 2.0
    }
    return 0.0
  }
  val a: Double = atanApprox(y / x)
  if (x > 0.0) {
    return a
  }
  if (y >= 0.0) {
    return a + PI
  }
  return a - PI
}

def zeros(h: BigInt, w: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var m: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var y: BigInt = 0
  while (y < h) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var x: BigInt = 0
    while (x < w) {
      row = row :+ 0.0
      x = x + 1
    }
    m = m :+ row
    y = y + 1
  }
  return m
}

def pad_edge(img: ArrayBuffer[ArrayBuffer[Double]], pad: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  val h: BigInt = BigInt((img).size)
  val w: BigInt = BigInt((img((0.toInt).toInt)).size)
  var out: ArrayBuffer[ArrayBuffer[Double]] = zeros(h + pad * 2, w + pad * 2)
  var y: BigInt = 0
  while (y < h + pad * 2) {
    var x: BigInt = 0
    while (x < w + pad * 2) {
      var sy: BigInt = y - pad
      if (sy < 0) {
        sy = 0
      }
      if (sy >= h) {
        sy = h - 1
      }
      var sx: BigInt = x - pad
      if (sx < 0) {
        sx = 0
      }
      if (sx >= w) {
        sx = w - 1
      }
      out((y).toInt)((x).toInt) = img((sy.toInt).toInt)((sx.toInt).toInt)
      x = x + 1
    }
    y = y + 1
  }
  return out
}

def img_convolve(img: ArrayBuffer[ArrayBuffer[Double]], kernel: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val h: BigInt = BigInt((img).size)
  val w: BigInt = BigInt((img((0.toInt).toInt)).size)
  val k: BigInt = BigInt((kernel).size)
  val pad: BigInt = k / 2
  val padded: ArrayBuffer[ArrayBuffer[Double]] = pad_edge(img, pad)
  var out: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var y: BigInt = 0
  while (y < h) {
    var x: BigInt = 0
    while (x < w) {
      var sum: Double = 0.0
      var i: BigInt = 0
      while (i < k) {
        var j: BigInt = 0
        while (j < k) {
          sum = sum + padded(((y + i).toInt).toInt)(((x + j).toInt).toInt) * (kernel((i.toInt).toInt)((j.toInt).toInt)).toString.toDouble
          j = j + 1
        }
        i = i + 1
      }
      out((y).toInt)((x).toInt) = sum
      x = x + 1
    }
    y = y + 1
  }
  return out
}

def abs_matrix(mat: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val h: BigInt = BigInt((mat).size)
  val w: BigInt = BigInt((mat((0.toInt).toInt)).size)
  var out: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var y: BigInt = 0
  while (y < h) {
    var x: BigInt = 0
    while (x < w) {
      val v: Double = mat((y.toInt).toInt)((x.toInt).toInt)
      if (v < 0.0) {
        out((y).toInt)((x).toInt) = -v
      } else {
        out((y).toInt)((x).toInt) = v
      }
      x = x + 1
    }
    y = y + 1
  }
  return out
}

def max_matrix(mat: ArrayBuffer[ArrayBuffer[Double]]): Double = {
  var max_val: Double = mat((0.toInt).toInt)((0.toInt).toInt)
  var y: BigInt = 0
  while (y < BigInt((mat).size)) {
    var x: BigInt = 0
    while (x < BigInt((mat((0.toInt).toInt)).size)) {
      if (mat((y.toInt).toInt)((x.toInt).toInt) > max_val) {
        max_val = mat((y.toInt).toInt)((x.toInt).toInt)
      }
      x = x + 1
    }
    y = y + 1
  }
  return max_val
}

def scale_matrix(mat: ArrayBuffer[ArrayBuffer[Double]], factor: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  val h: BigInt = BigInt((mat).size)
  val w: BigInt = BigInt((mat((0.toInt).toInt)).size)
  var out: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var y: BigInt = 0
  while (y < h) {
    var x: BigInt = 0
    while (x < w) {
      out((y).toInt)((x).toInt) = mat((y.toInt).toInt)((x.toInt).toInt) * factor
      x = x + 1
    }
    y = y + 1
  }
  return out
}

def sobel_filter(image: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[ArrayBuffer[Double]]] = {
  val h: BigInt = BigInt((image).size)
  val w: BigInt = BigInt((image((0.toInt).toInt)).size)
  var img: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var y0: BigInt = 0
  while (y0 < h) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var x0: BigInt = 0
    while (x0 < w) {
      row = row :+ (image((y0.toInt).toInt)((x0.toInt).toInt)).toString.toDouble
      x0 = x0 + 1
    }
    img = img :+ row
    y0 = y0 + 1
  }
  val kernel_x: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(-1, 0, 1), ArrayBuffer(-2, 0, 2), ArrayBuffer(-1, 0, 1))
  val kernel_y: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(1, 2, 1), ArrayBuffer(0, 0, 0), ArrayBuffer(-1, -2, -1))
  var dst_x: ArrayBuffer[ArrayBuffer[Double]] = abs_matrix(img_convolve(img, kernel_x))
  var dst_y: ArrayBuffer[ArrayBuffer[Double]] = abs_matrix(img_convolve(img, kernel_y))
  val max_x: Double = max_matrix(dst_x)
  val max_y: Double = max_matrix(dst_y)
  dst_x = scale_matrix(dst_x, 255.0 / max_x)
  dst_y = scale_matrix(dst_y, 255.0 / max_y)
  var mag: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var theta: ArrayBuffer[ArrayBuffer[Double]] = zeros(h, w)
  var y: BigInt = 0
  while (y < h) {
    var x: BigInt = 0
    while (x < w) {
      val gx: Double = dst_x((y.toInt).toInt)((x.toInt).toInt)
      val gy: Double = dst_y((y.toInt).toInt)((x.toInt).toInt)
      mag((y).toInt)((x).toInt) = sqrtApprox(gx * gx + gy * gy)
      theta((y).toInt)((x).toInt) = atan2Approx(gy, gx)
      x = x + 1
    }
    y = y + 1
  }
  val max_m: Double = max_matrix(mag)
  mag = scale_matrix(mag, 255.0 / max_m)
  return ArrayBuffer(mag, theta)
}

def print_matrix_int(mat: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  var y: BigInt = 0
  while (y < BigInt((mat).size)) {
    var line: String = ""
    var x: BigInt = 0
    while (x < BigInt((mat((y.toInt).toInt)).size)) {
      line = line + String.valueOf(BigInt((mat((y.toInt).toInt)((x.toInt).toInt)).toString.toDouble.toInt))
      if (x < BigInt((mat((y.toInt).toInt)).size) - 1) {
        line = line + " "
      }
      x = x + 1
    }
    println(line)
    y = y + 1
  }
}

def print_matrix_float(mat: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  var y: BigInt = 0
  while (y < BigInt((mat).size)) {
    var line: String = ""
    var x: BigInt = 0
    while (x < BigInt((mat((y.toInt).toInt)).size)) {
      line = line + String.valueOf(mat((y.toInt).toInt)((x.toInt).toInt))
      if (x < BigInt((mat((y.toInt).toInt)).size) - 1) {
        line = line + " "
      }
      x = x + 1
    }
    println(line)
    y = y + 1
  }
}

def main(): Any = {
  val img: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(10, 10, 10, 10, 10), ArrayBuffer(10, 50, 50, 50, 10), ArrayBuffer(10, 50, 80, 50, 10), ArrayBuffer(10, 50, 50, 50, 10), ArrayBuffer(10, 10, 10, 10, 10))
  val res: ArrayBuffer[ArrayBuffer[ArrayBuffer[Double]]] = sobel_filter(img)
  val mag: ArrayBuffer[ArrayBuffer[Double]] = res((0.toInt).toInt)
  val theta: ArrayBuffer[ArrayBuffer[Double]] = res((1.toInt).toInt)
  print_matrix_int(mag)
  print_matrix_float(theta)
}

val PI: Double = 3.141592653589793

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
