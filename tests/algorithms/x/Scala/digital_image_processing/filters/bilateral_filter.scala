// Generated by Mochi v0.10.72 on 2025-08-24 22:30:16 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def abs(x: Double): Double = {
  if (x < 0.0) {
    return -x
  }
  return x
}

def sqrtApprox(x: Double): Double = {
  if (x <= 0.0) {
    return 0.0
  }
  var guess: Double = x
  var i: BigInt = BigInt(0)
  while (i < BigInt(10)) {
    guess = (guess + x / guess) / 2.0
    i = i + BigInt(1)
  }
  return guess
}

def expApprox(x: Double): Double = {
  var term: Double = 1.0
  var sum: Double = 1.0
  var n: BigInt = BigInt(1)
  while (n < BigInt(10)) {
    term = term * x / n.toString.toDouble
    sum = sum + term
    n = n + BigInt(1)
  }
  return sum
}

def vec_gaussian(mat: ArrayBuffer[ArrayBuffer[Double]], variance: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  var i: BigInt = BigInt(0)
  var out: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  while (i < BigInt((mat).size)) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      var v: Double = mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
      var e: Double = -(v * v) / (2.0 * variance)
      row = (row ++ ArrayBuffer(expApprox(e))).asInstanceOf[ArrayBuffer[Double]]
      j = j + BigInt(1)
    }
    out = (out ++ ArrayBuffer(row)).asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]]
    i = i + BigInt(1)
  }
  return out
}

def get_slice(img: ArrayBuffer[ArrayBuffer[Double]], x: BigInt, y: BigInt, kernel_size: BigInt): ArrayBuffer[ArrayBuffer[Double]] = {
  var half: BigInt = kernel_size / BigInt(2)
  var i: BigInt = x - half
  var slice: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  while (i <= x + half) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = y - half
    while (j <= y + half) {
      row = (row ++ ArrayBuffer(img.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))).asInstanceOf[ArrayBuffer[Double]]
      j = j + BigInt(1)
    }
    slice = (slice ++ ArrayBuffer(row)).asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]]
    i = i + BigInt(1)
  }
  return slice
}

def get_gauss_kernel(kernel_size: BigInt, spatial_variance: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  var arr: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < kernel_size) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < kernel_size) {
      var di: Double = (i - kernel_size / BigInt(2)).toDouble
      var dj: Double = (j - kernel_size / BigInt(2)).toDouble
      var dist: Double = sqrtApprox(di * di + dj * dj)
      row = (row ++ ArrayBuffer(dist)).asInstanceOf[ArrayBuffer[Double]]
      j = j + BigInt(1)
    }
    arr = (arr ++ ArrayBuffer(row)).asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]]
    i = i + BigInt(1)
  }
  return vec_gaussian(arr, spatial_variance)
}

def elementwise_sub(mat: ArrayBuffer[ArrayBuffer[Double]], value: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((mat).size)) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      row = (row ++ ArrayBuffer(mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) - value)).asInstanceOf[ArrayBuffer[Double]]
      j = j + BigInt(1)
    }
    res = (res ++ ArrayBuffer(row)).asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]]
    i = i + BigInt(1)
  }
  return res
}

def elementwise_mul(a: ArrayBuffer[ArrayBuffer[Double]], b: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var res: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      row = (row ++ ArrayBuffer(a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) * b.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))).asInstanceOf[ArrayBuffer[Double]]
      j = j + BigInt(1)
    }
    res = (res ++ ArrayBuffer(row)).asInstanceOf[ArrayBuffer[ArrayBuffer[Double]]]
    i = i + BigInt(1)
  }
  return res
}

def matrix_sum(mat: ArrayBuffer[ArrayBuffer[Double]]): Double = {
  var total: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < BigInt((mat).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      total = total + mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return total
}

def bilateral_filter(img: ArrayBuffer[ArrayBuffer[Double]], spatial_variance: Double, intensity_variance: Double, kernel_size: BigInt): Double = {
  var gauss_ker: ArrayBuffer[ArrayBuffer[Double]] = get_gauss_kernel(kernel_size, spatial_variance)
  var img_s: ArrayBuffer[ArrayBuffer[Double]] = img
  var center: Double = img_s.lift(((kernel_size / BigInt(2)).toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift(((kernel_size / BigInt(2)).toInt).toInt).getOrElse(0.0)
  var img_i: ArrayBuffer[ArrayBuffer[Double]] = elementwise_sub(img_s, center)
  var img_ig: ArrayBuffer[ArrayBuffer[Double]] = vec_gaussian(img_i, intensity_variance)
  var weights: ArrayBuffer[ArrayBuffer[Double]] = elementwise_mul(gauss_ker, img_ig)
  var vals: ArrayBuffer[ArrayBuffer[Double]] = elementwise_mul(img_s, weights)
  var sum_weights: Double = matrix_sum(weights)
  var `val`: Double = 0.0
  if (sum_weights != 0.0) {
    `val` = matrix_sum(vals) / sum_weights
  }
  return `val`
}

var PI: Double = 3.141592653589793

var img: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.2, 0.3, 0.4), ArrayBuffer(0.3, 0.4, 0.5), ArrayBuffer(0.4, 0.5, 0.6))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var result: Double = bilateral_filter(img, 1.0, 1.0, BigInt(3))
    println(_str(result))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
