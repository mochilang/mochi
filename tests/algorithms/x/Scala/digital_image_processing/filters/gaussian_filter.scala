// Generated by Mochi v0.10.59 on 2025-08-07 00:54:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def expApprox(x: Double): Double = {
  var sum: Double = 1.0
  var term: Double = 1.0
  var n: BigInt = 1
  while (n < 10) {
    term = term * x / n.toString.toDouble
    sum = sum + term
    n = n + 1
  }
  return sum
}

def gen_gaussian_kernel(k_size: BigInt, sigma: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  val center: BigInt = k_size / 2
  var kernel: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < k_size) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var j: BigInt = 0
    while (j < k_size) {
      val x: Double = (i - center).toString.toDouble
      val y: Double = (j - center).toString.toDouble
      val exponent: Double = -((x * x + y * y) / (2.0 * sigma * sigma))
      val value: Double = 1.0 / (2.0 * PI * sigma) * expApprox(exponent)
      row = row :+ value
      j = j + 1
    }
    kernel = kernel :+ row
    i = i + 1
  }
  return kernel
}

def gaussian_filter(image: ArrayBuffer[ArrayBuffer[BigInt]], k_size: BigInt, sigma: Double): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val height: BigInt = BigInt((image).size)
  val width: BigInt = BigInt((image((0.toInt).toInt)).size)
  val dst_height: BigInt = height - k_size + 1
  val dst_width: BigInt = width - k_size + 1
  val kernel: ArrayBuffer[ArrayBuffer[Double]] = gen_gaussian_kernel(k_size, sigma)
  var dst: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < dst_height) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < dst_width) {
      var sum: Double = 0.0
      var ki: BigInt = 0
      while (ki < k_size) {
        var kj: BigInt = 0
        while (kj < k_size) {
          sum = sum + (image(((i + ki).toInt).toInt)(((j + kj).toInt).toInt)).toString.toDouble * kernel((ki.toInt).toInt)((kj.toInt).toInt)
          kj = kj + 1
        }
        ki = ki + 1
      }
      row = row :+ BigInt(sum.toString.toDouble.toInt)
      j = j + 1
    }
    dst = dst :+ row
    i = i + 1
  }
  return dst
}

def print_image(image: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = 0
  while (i < BigInt((image).size)) {
    println(image((i.toInt).toInt))
    i = i + 1
  }
}

val PI: Double = 3.141592653589793

val img: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(52, 55, 61, 59, 79), ArrayBuffer(62, 59, 55, 104, 94), ArrayBuffer(63, 65, 66, 113, 144), ArrayBuffer(68, 70, 70, 126, 154), ArrayBuffer(70, 72, 69, 128, 155))

val gaussian3: ArrayBuffer[ArrayBuffer[BigInt]] = gaussian_filter(img, 3, 1.0)

val gaussian5: ArrayBuffer[ArrayBuffer[BigInt]] = gaussian_filter(img, 5, 0.8)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_image(gaussian3)
    print_image(gaussian5)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
