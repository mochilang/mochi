// Generated by Mochi v0.10.71 on 2025-08-24 09:37:37 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def expApprox(x: Double): Double = {
  var sum: Double = 1.0
  var term: Double = 1.0
  var n: BigInt = BigInt(1)
  while (n < BigInt(10)) {
    term = term * x / n.toString.toDouble
    sum = sum + term
    n = n + BigInt(1)
  }
  return sum
}

def gen_gaussian_kernel(k_size: BigInt, sigma: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  var center: BigInt = k_size / BigInt(2)
  var kernel: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < k_size) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < k_size) {
      var x: Double = (i - center).toString.toDouble
      var y: Double = (j - center).toString.toDouble
      var exponent: Double = -((x * x + y * y) / (2.0 * sigma * sigma))
      var value: Double = 1.0 / (2.0 * PI * sigma) * expApprox(exponent)
      row = ({row += (value); row})
      j = j + BigInt(1)
    }
    kernel = ({kernel += (row); kernel})
    i = i + BigInt(1)
  }
  return kernel
}

def gaussian_filter(image: ArrayBuffer[ArrayBuffer[BigInt]], k_size: BigInt, sigma: Double): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var height: BigInt = BigInt((image).size)
  var width: BigInt = BigInt((image.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var dst_height: BigInt = height - k_size + BigInt(1)
  var dst_width: BigInt = width - k_size + BigInt(1)
  var kernel: ArrayBuffer[ArrayBuffer[Double]] = gen_gaussian_kernel(k_size, sigma)
  var dst: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < dst_height) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < dst_width) {
      var sum: Double = 0.0
      var ki: BigInt = BigInt(0)
      while (ki < k_size) {
        var kj: BigInt = BigInt(0)
        while (kj < k_size) {
          sum = sum + (image.lift(((i + ki).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j + kj).toInt).toInt).getOrElse(BigInt(0))).toDouble * kernel.lift((ki.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((kj.toInt).toInt).getOrElse(0.0)
          kj = kj + BigInt(1)
        }
        ki = ki + BigInt(1)
      }
      row = ({row += (BigInt(sum.toString.toDouble.toInt)); row})
      j = j + BigInt(1)
    }
    dst = ({dst += (row); dst})
    i = i + BigInt(1)
  }
  return dst
}

def print_image(image: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((image).size)) {
    println(_str(image.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())))
    i = i + BigInt(1)
  }
}

var PI: Double = 3.141592653589793

var img: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(52), BigInt(55), BigInt(61), BigInt(59), BigInt(79)), ArrayBuffer(BigInt(62), BigInt(59), BigInt(55), BigInt(104), BigInt(94)), ArrayBuffer(BigInt(63), BigInt(65), BigInt(66), BigInt(113), BigInt(144)), ArrayBuffer(BigInt(68), BigInt(70), BigInt(70), BigInt(126), BigInt(154)), ArrayBuffer(BigInt(70), BigInt(72), BigInt(69), BigInt(128), BigInt(155)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var gaussian3: ArrayBuffer[ArrayBuffer[BigInt]] = gaussian_filter(img, BigInt(3), 1.0)
    var gaussian5: ArrayBuffer[ArrayBuffer[BigInt]] = gaussian_filter(img, BigInt(5), 0.8)
    print_image(gaussian3)
    print_image(gaussian5)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
