// Generated by Mochi v0.10.71 on 2025-08-24 09:39:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def rgb_to_gray(rgb: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((rgb).size)) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((rgb.lift((i.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())).size)) {
      var r: BigInt = rgb.lift((i.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]()).lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
      var g: BigInt = rgb.lift((i.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]()).lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
      var b: BigInt = rgb.lift((i.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]()).lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(2).toInt).toInt).getOrElse(BigInt(0))
      var gray: Double = 0.2989 * (1.0 * r.toString.toDouble) + 0.587 * (1.0 * g.toString.toDouble) + 0.114 * (1.0 * b.toString.toDouble)
      row = ({row += (gray); row})
      j = j + BigInt(1)
    }
    result = ({result += (row); result})
    i = i + BigInt(1)
  }
  return result
}

def gray_to_binary(gray: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((gray).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((gray.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      var v: Double = gray.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0)
      if ((v > 127.0 && v <= 255.0)) {
        row = ({row += (BigInt(1)); row})
      } else {
        row = ({row += (BigInt(0)); row})
      }
      j = j + BigInt(1)
    }
    result = ({result += (row); result})
    i = i + BigInt(1)
  }
  return result
}

def dilation(image: ArrayBuffer[ArrayBuffer[BigInt]], kernel: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var img_h: BigInt = BigInt((image).size)
  var img_w: BigInt = BigInt((image.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var k_h: BigInt = BigInt((kernel).size)
  var k_w: BigInt = BigInt((kernel.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var pad_h: BigInt = k_h / BigInt(2)
  var pad_w: BigInt = k_w / BigInt(2)
  var p_h: BigInt = img_h + BigInt(2) * pad_h
  var p_w: BigInt = img_w + BigInt(2) * pad_w
  var padded: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < p_h) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < p_w) {
      row = ({row += (BigInt(0)); row})
      j = j + BigInt(1)
    }
    padded = ({padded += (row); padded})
    i = i + BigInt(1)
  }
  i = BigInt(0)
  while (i < img_h) {
    var j: BigInt = BigInt(0)
    while (j < img_w) {
      padded((pad_h + i).toInt)((pad_w + j).toInt) = image.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  var output: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  i = BigInt(0)
  while (i < img_h) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < img_w) {
      var sum: BigInt = BigInt(0)
      var ky: BigInt = BigInt(0)
      while (ky < k_h) {
        var kx: BigInt = BigInt(0)
        while (kx < k_w) {
          if (kernel.lift((ky.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((kx.toInt).toInt).getOrElse(BigInt(0)) == BigInt(1)) {
            sum = sum + padded.lift(((i + ky).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((j + kx).toInt).toInt).getOrElse(BigInt(0))
          }
          kx = kx + BigInt(1)
        }
        ky = ky + BigInt(1)
      }
      if (sum > BigInt(0)) {
        row = ({row += (BigInt(1)); row})
      } else {
        row = ({row += (BigInt(0)); row})
      }
      j = j + BigInt(1)
    }
    output = ({output += (row); output})
    i = i + BigInt(1)
  }
  return output
}

def print_float_matrix(mat: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((mat).size)) {
    var line: String = ""
    var j: BigInt = BigInt(0)
    while (j < BigInt((mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      line = line + _str(mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0))
      if (j < BigInt((mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size) - BigInt(1)) {
        line = line + " "
      }
      j = j + BigInt(1)
    }
    println(_str(line))
    i = i + BigInt(1)
  }
}

def print_int_matrix(mat: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((mat).size)) {
    var line: String = ""
    var j: BigInt = BigInt(0)
    while (j < BigInt((mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      line = line + _str(mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0)))
      if (j < BigInt((mat.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size) - BigInt(1)) {
        line = line + " "
      }
      j = j + BigInt(1)
    }
    println(_str(line))
    i = i + BigInt(1)
  }
}

def main(): Any = {
  var rgb_example: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer(ArrayBuffer(ArrayBuffer(BigInt(127), BigInt(255), BigInt(0))))
  print_float_matrix(rgb_to_gray(rgb_example))
  var gray_example: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(26.0, 255.0, 14.0), ArrayBuffer(5.0, 147.0, 20.0), ArrayBuffer(1.0, 200.0, 0.0))
  print_int_matrix(gray_to_binary(gray_example))
  var binary_image: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0)))
  var kernel: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(0)), ArrayBuffer(BigInt(1), BigInt(1), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0)))
  print_int_matrix(dilation(binary_image, kernel))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
