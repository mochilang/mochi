// Generated by Mochi v0.10.59 on 2025-08-07 00:55:05 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def rgb_to_gray(rgb: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var result: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((rgb).size)) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var j: BigInt = 0
    while (j < BigInt((rgb((i.toInt).toInt)).size)) {
      val r: BigInt = rgb((i.toInt).toInt)((j.toInt).toInt)((0.toInt).toInt)
      val g: BigInt = rgb((i.toInt).toInt)((j.toInt).toInt)((1.toInt).toInt)
      val b: BigInt = rgb((i.toInt).toInt)((j.toInt).toInt)((2.toInt).toInt)
      val gray: Double = 0.2989 * (1.0 * r.toString.toDouble) + 0.587 * (1.0 * g.toString.toDouble) + 0.114 * (1.0 * b.toString.toDouble)
      row = row :+ gray
      j = j + 1
    }
    result = result :+ row
    i = i + 1
  }
  return result
}

def gray_to_binary(gray: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((gray).size)) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < BigInt((gray((i.toInt).toInt)).size)) {
      val v: Double = gray((i.toInt).toInt)((j.toInt).toInt)
      if ((v > 127.0 && v <= 255.0).asInstanceOf[Boolean]) {
        row = row :+ BigInt(1)
      } else {
        row = row :+ BigInt(0)
      }
      j = j + 1
    }
    result = result :+ row
    i = i + 1
  }
  return result
}

def dilation(image: ArrayBuffer[ArrayBuffer[BigInt]], kernel: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val img_h: BigInt = BigInt((image).size)
  val img_w: BigInt = BigInt((image((0.toInt).toInt)).size)
  val k_h: BigInt = BigInt((kernel).size)
  val k_w: BigInt = BigInt((kernel((0.toInt).toInt)).size)
  val pad_h: BigInt = k_h / 2
  val pad_w: BigInt = k_w / 2
  val p_h: BigInt = img_h + 2 * pad_h
  val p_w: BigInt = img_w + 2 * pad_w
  var padded: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < p_h) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < p_w) {
      row = row :+ BigInt(0)
      j = j + 1
    }
    padded = padded :+ row
    i = i + 1
  }
  i = 0
  while (i < img_h) {
    var j: BigInt = 0
    while (j < img_w) {
      padded((pad_h + i).toInt)((pad_w + j).toInt) = image((i.toInt).toInt)((j.toInt).toInt)
      j = j + 1
    }
    i = i + 1
  }
  var output: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  i = 0
  while (i < img_h) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < img_w) {
      var sum: BigInt = 0
      var ky: BigInt = 0
      while (ky < k_h) {
        var kx: BigInt = 0
        while (kx < k_w) {
          if (kernel((ky.toInt).toInt)((kx.toInt).toInt) == 1) {
            sum = sum + padded(((i + ky).toInt).toInt)(((j + kx).toInt).toInt)
          }
          kx = kx + 1
        }
        ky = ky + 1
      }
      if (sum > 0) {
        row = row :+ BigInt(1)
      } else {
        row = row :+ BigInt(0)
      }
      j = j + 1
    }
    output = output :+ row
    i = i + 1
  }
  return output
}

def print_float_matrix(mat: ArrayBuffer[ArrayBuffer[Double]]): Any = {
  var i: BigInt = 0
  while (i < BigInt((mat).size)) {
    var line: String = ""
    var j: BigInt = 0
    while (j < BigInt((mat((i.toInt).toInt)).size)) {
      line = line + String.valueOf(mat((i.toInt).toInt)((j.toInt).toInt))
      if (j < BigInt((mat((i.toInt).toInt)).size) - 1) {
        line = line + " "
      }
      j = j + 1
    }
    println(line)
    i = i + 1
  }
}

def print_int_matrix(mat: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = 0
  while (i < BigInt((mat).size)) {
    var line: String = ""
    var j: BigInt = 0
    while (j < BigInt((mat((i.toInt).toInt)).size)) {
      line = line + String.valueOf(mat((i.toInt).toInt)((j.toInt).toInt))
      if (j < BigInt((mat((i.toInt).toInt)).size) - 1) {
        line = line + " "
      }
      j = j + 1
    }
    println(line)
    i = i + 1
  }
}

def main(): Any = {
  val rgb_example: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer(ArrayBuffer(ArrayBuffer(127, 255, 0)))
  print_float_matrix(rgb_to_gray(rgb_example))
  val gray_example: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(26.0, 255.0, 14.0), ArrayBuffer(5.0, 147.0, 20.0), ArrayBuffer(1.0, 200.0, 0.0))
  print_int_matrix(gray_to_binary(gray_example))
  val binary_image: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(0, 1, 0), ArrayBuffer(0, 1, 0), ArrayBuffer(0, 1, 0))
  val kernel: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(0, 1, 0), ArrayBuffer(1, 1, 1), ArrayBuffer(0, 1, 0))
  print_int_matrix(dilation(binary_image, kernel))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
