// Generated by Mochi v0.10.59 on 2025-08-07 00:55:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def rgb_to_gray(rgb: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var gray: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((rgb).size)) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var j: BigInt = 0
    while (j < BigInt((rgb((i.toInt).toInt)).size)) {
      val r: Double = (rgb((i.toInt).toInt)((j.toInt).toInt)((0.toInt).toInt)).toString.toDouble
      val g: Double = (rgb((i.toInt).toInt)((j.toInt).toInt)((1.toInt).toInt)).toString.toDouble
      val b: Double = (rgb((i.toInt).toInt)((j.toInt).toInt)((2.toInt).toInt)).toString.toDouble
      val value: Double = 0.2989 * r + 0.587 * g + 0.114 * b
      row = row :+ value
      j = j + 1
    }
    gray = gray :+ row
    i = i + 1
  }
  return gray
}

def gray_to_binary(gray: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Boolean]] = {
  var binary: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((gray).size)) {
    var row: ArrayBuffer[Boolean] = ArrayBuffer()
    var j: BigInt = 0
    while (j < BigInt((gray((i.toInt).toInt)).size)) {
      row = row :+ (gray((i.toInt).toInt)((j.toInt).toInt) > 127.0 && gray((i.toInt).toInt)((j.toInt).toInt) <= 255.0).asInstanceOf[Boolean]
      j = j + 1
    }
    binary = binary :+ row
    i = i + 1
  }
  return binary
}

def erosion(image: ArrayBuffer[ArrayBuffer[Boolean]], kernel: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[Boolean]] = {
  val h: BigInt = BigInt((image).size)
  val w: BigInt = BigInt((image((0.toInt).toInt)).size)
  val k_h: BigInt = BigInt((kernel).size)
  val k_w: BigInt = BigInt((kernel((0.toInt).toInt)).size)
  val pad_y: BigInt = k_h / 2
  val pad_x: BigInt = k_w / 2
  var padded: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer()
  var y: BigInt = 0
  while (y < h + 2 * pad_y) {
    var row: ArrayBuffer[Boolean] = ArrayBuffer()
    var x: BigInt = 0
    while (x < w + 2 * pad_x) {
      row = row :+ false
      x = x + 1
    }
    padded = padded :+ row
    y = y + 1
  }
  y = 0
  while (y < h) {
    var x: BigInt = 0
    while (x < w) {
      padded((pad_y + y).toInt)((pad_x + x).toInt) = image((y.toInt).toInt)((x.toInt).toInt)
      x = x + 1
    }
    y = y + 1
  }
  var output: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer()
  y = 0
  while (y < h) {
    var row_out: ArrayBuffer[Boolean] = ArrayBuffer()
    var x: BigInt = 0
    while (x < w) {
      var sum: BigInt = 0
      var ky: BigInt = 0
      while (ky < k_h) {
        var kx: BigInt = 0
        while (kx < k_w) {
          if ((kernel((ky.toInt).toInt)((kx.toInt).toInt) == 1 && padded(((y + ky).toInt).toInt)(((x + kx).toInt).toInt)).asInstanceOf[Boolean]) {
            sum = sum + 1
          }
          kx = kx + 1
        }
        ky = ky + 1
      }
      row_out = row_out :+ sum == 5
      x = x + 1
    }
    output = output :+ row_out
    y = y + 1
  }
  return output
}

val rgb_img: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer(ArrayBuffer(ArrayBuffer(127, 255, 0)))

val gray_img: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(127.0, 255.0, 0.0))

val img1: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer(ArrayBuffer(true, true, false))

val kernel1: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(0, 1, 0))

val img2: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer(ArrayBuffer(true, false, false))

val kernel2: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(1, 1, 0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(rgb_to_gray(rgb_img)))
    println(String.valueOf(gray_to_binary(gray_img)))
    println(String.valueOf(erosion(img1, kernel1)))
    println(String.valueOf(erosion(img2, kernel2)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
