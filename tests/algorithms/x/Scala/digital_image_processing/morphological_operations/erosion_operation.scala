// Generated by Mochi v0.10.71 on 2025-08-24 09:39:21 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def rgb_to_gray(rgb: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]]): ArrayBuffer[ArrayBuffer[Double]] = {
  var gray: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer[ArrayBuffer[Double]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((rgb).size)) {
    var row: ArrayBuffer[Double] = ArrayBuffer[Double]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((rgb.lift((i.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())).size)) {
      var r: Double = (rgb.lift((i.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]()).lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))).toDouble
      var g: Double = (rgb.lift((i.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]()).lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))).toDouble
      var b: Double = (rgb.lift((i.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]()).lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(2).toInt).toInt).getOrElse(BigInt(0))).toDouble
      var value: Double = 0.2989 * r + 0.587 * g + 0.114 * b
      row = ({row += (value); row})
      j = j + BigInt(1)
    }
    gray = ({gray += (row); gray})
    i = i + BigInt(1)
  }
  return gray
}

def gray_to_binary(gray: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Boolean]] = {
  var binary: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer[ArrayBuffer[Boolean]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((gray).size)) {
    var row: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
    var j: BigInt = BigInt(0)
    while (j < BigInt((gray.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]())).size)) {
      row = ({row += ((gray.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) > 127.0 && gray.lift((i.toInt).toInt).getOrElse(ArrayBuffer[Double]()).lift((j.toInt).toInt).getOrElse(0.0) <= 255.0).asInstanceOf[Boolean]); row})
      j = j + BigInt(1)
    }
    binary = ({binary += (row); binary})
    i = i + BigInt(1)
  }
  return binary
}

def erosion(image: ArrayBuffer[ArrayBuffer[Boolean]], kernel: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[Boolean]] = {
  var h: BigInt = BigInt((image).size)
  var w: BigInt = BigInt((image.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[Boolean]())).size)
  var k_h: BigInt = BigInt((kernel).size)
  var k_w: BigInt = BigInt((kernel.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var pad_y: BigInt = k_h / BigInt(2)
  var pad_x: BigInt = k_w / BigInt(2)
  var padded: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer[ArrayBuffer[Boolean]]()
  var y: BigInt = BigInt(0)
  while (y < h + BigInt(2) * pad_y) {
    var row: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
    var x: BigInt = BigInt(0)
    while (x < w + BigInt(2) * pad_x) {
      row = ({row += (false); row})
      x = x + BigInt(1)
    }
    padded = ({padded += (row); padded})
    y = y + BigInt(1)
  }
  y = BigInt(0)
  while (y < h) {
    var x: BigInt = BigInt(0)
    while (x < w) {
      padded((pad_y + y).toInt)((pad_x + x).toInt) = image.lift((y.toInt).toInt).getOrElse(ArrayBuffer[Boolean]()).lift((x.toInt).toInt).getOrElse(false)
      x = x + BigInt(1)
    }
    y = y + BigInt(1)
  }
  var output: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer[ArrayBuffer[Boolean]]()
  y = BigInt(0)
  while (y < h) {
    var row_out: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
    var x: BigInt = BigInt(0)
    while (x < w) {
      var sum: BigInt = BigInt(0)
      var ky: BigInt = BigInt(0)
      while (ky < k_h) {
        var kx: BigInt = BigInt(0)
        while (kx < k_w) {
          if ((kernel.lift((ky.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((kx.toInt).toInt).getOrElse(BigInt(0)) == BigInt(1) && padded.lift(((y + ky).toInt).toInt).getOrElse(ArrayBuffer[Boolean]()).lift(((x + kx).toInt).toInt).getOrElse(false))) {
            sum = sum + BigInt(1)
          }
          kx = kx + BigInt(1)
        }
        ky = ky + BigInt(1)
      }
      row_out = ({row_out += (sum == BigInt(5)); row_out})
      x = x + BigInt(1)
    }
    output = ({output += (row_out); output})
    y = y + BigInt(1)
  }
  return output
}

var rgb_img: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer(ArrayBuffer(ArrayBuffer(BigInt(127), BigInt(255), BigInt(0))))

var gray_img: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(127.0, 255.0, 0.0))

var img1: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer(ArrayBuffer(true, true, false))

var kernel1: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(0)))

var img2: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer(ArrayBuffer(true, false, false))

var kernel2: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(1), BigInt(0)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(_str(_str(rgb_to_gray(rgb_img))))
    println(_str(_str(gray_to_binary(gray_img))))
    println(_str(_str(erosion(img1, kernel1))))
    println(_str(_str(erosion(img2, kernel2))))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
