// Generated by Mochi v0.10.71 on 2025-08-24 09:38:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def make_list(n: BigInt, value: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    res = ({res += (value); res})
    i = i + BigInt(1)
  }
  return res
}

def histogram_stretch(image: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var height: BigInt = BigInt((image).size)
  var width: BigInt = BigInt((image.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)
  var hist: ArrayBuffer[BigInt] = make_list(BigInt(256), BigInt(0))
  var i: BigInt = BigInt(0)
  while (i < height) {
    var j: BigInt = BigInt(0)
    while (j < width) {
      var `val`: BigInt = image.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))
      hist((`val`).toInt) = hist.lift((`val`.toInt).toInt).getOrElse(BigInt(0)) + BigInt(1)
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  var mapping: ArrayBuffer[BigInt] = make_list(BigInt(256), BigInt(0))
  var cumulative: BigInt = BigInt(0)
  var total: BigInt = height * width
  var h: BigInt = BigInt(0)
  while (h < BigInt(256)) {
    cumulative = cumulative + hist.lift((h.toInt).toInt).getOrElse(BigInt(0))
    mapping((h).toInt) = BigInt(255) * cumulative / total
    h = h + BigInt(1)
  }
  i = BigInt(0)
  while (i < height) {
    var j: BigInt = BigInt(0)
    while (j < width) {
      var `val`: BigInt = image.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((j.toInt).toInt).getOrElse(BigInt(0))
      image((i).toInt)((j).toInt) = mapping.lift((`val`.toInt).toInt).getOrElse(BigInt(0))
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return image
}

def print_image(image: ArrayBuffer[ArrayBuffer[BigInt]]): Any = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((image).size)) {
    println(_str(image.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())))
    i = i + BigInt(1)
  }
}

var img: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(52), BigInt(55), BigInt(61)), ArrayBuffer(BigInt(59), BigInt(79), BigInt(61)), ArrayBuffer(BigInt(85), BigInt(76), BigInt(62)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var result: ArrayBuffer[ArrayBuffer[BigInt]] = histogram_stretch(img)
    print_image(result)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
