// Generated by Mochi v0.10.59 on 2025-08-07 00:55:26 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def mat_inverse3(m: ArrayBuffer[ArrayBuffer[Double]]): ArrayBuffer[ArrayBuffer[Double]] = {
  val a: Double = m((0.toInt).toInt)((0.toInt).toInt)
  val b: Double = m((0.toInt).toInt)((1.toInt).toInt)
  val c: Double = m((0.toInt).toInt)((2.toInt).toInt)
  val d: Double = m((1.toInt).toInt)((0.toInt).toInt)
  val e: Double = m((1.toInt).toInt)((1.toInt).toInt)
  val f: Double = m((1.toInt).toInt)((2.toInt).toInt)
  val g: Double = m((2.toInt).toInt)((0.toInt).toInt)
  val h: Double = m((2.toInt).toInt)((1.toInt).toInt)
  val i: Double = m((2.toInt).toInt)((2.toInt).toInt)
  val det: Double = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)
  if (det == 0.0) {
    throw new RuntimeException(String.valueOf("singular matrix"))
  }
  val adj00: Double = e * i - f * h
  val adj01: Double = c * h - b * i
  val adj02: Double = b * f - c * e
  val adj10: Double = f * g - d * i
  val adj11: Double = a * i - c * g
  val adj12: Double = c * d - a * f
  val adj20: Double = d * h - e * g
  val adj21: Double = b * g - a * h
  val adj22: Double = a * e - b * d
  var inv: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  inv = inv :+ ArrayBuffer((adj00 / det).toString.toDouble, (adj01 / det).toString.toDouble, (adj02 / det).toString.toDouble)
  inv = inv :+ ArrayBuffer((adj10 / det).toString.toDouble, (adj11 / det).toString.toDouble, (adj12 / det).toString.toDouble)
  inv = inv :+ ArrayBuffer((adj20 / det).toString.toDouble, (adj21 / det).toString.toDouble, (adj22 / det).toString.toDouble)
  return inv
}

def mat_vec_mul(m: ArrayBuffer[ArrayBuffer[Double]], v: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var res: ArrayBuffer[Double] = ArrayBuffer()
  var i: BigInt = 0
  while (i < 3) {
    val `val`: Double = m((i.toInt).toInt)((0.toInt).toInt) * v((0.toInt).toInt) + m((i.toInt).toInt)((1.toInt).toInt) * v((1.toInt).toInt) + m((i.toInt).toInt)((2.toInt).toInt) * v((2.toInt).toInt)
    res = res :+ `val`
    i = i + 1
  }
  return res
}

def create_matrix(rows: BigInt, cols: BigInt, value: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var r: BigInt = 0
  while (r < rows) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var c: BigInt = 0
    while (c < cols) {
      row = row :+ value
      c = c + 1
    }
    result = result :+ row
    r = r + 1
  }
  return result
}

def round_to_int(x: Double): BigInt = {
  if (x >= 0.0) {
    return BigInt((x + 0.5).toInt)
  }
  return BigInt((x - 0.5).toInt)
}

def get_rotation(img: ArrayBuffer[ArrayBuffer[BigInt]], pt1: ArrayBuffer[ArrayBuffer[Double]], pt2: ArrayBuffer[ArrayBuffer[Double]], rows: BigInt, cols: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val src: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(pt1((0.toInt).toInt)((0.toInt).toInt), pt1((0.toInt).toInt)((1.toInt).toInt), 1.0), ArrayBuffer(pt1((1.toInt).toInt)((0.toInt).toInt), pt1((1.toInt).toInt)((1.toInt).toInt), 1.0), ArrayBuffer(pt1((2.toInt).toInt)((0.toInt).toInt), pt1((2.toInt).toInt)((1.toInt).toInt), 1.0))
  val inv: ArrayBuffer[ArrayBuffer[Double]] = mat_inverse3(src)
  val vecx: ArrayBuffer[Double] = ArrayBuffer(pt2((0.toInt).toInt)((0.toInt).toInt), pt2((1.toInt).toInt)((0.toInt).toInt), pt2((2.toInt).toInt)((0.toInt).toInt))
  val vecy: ArrayBuffer[Double] = ArrayBuffer(pt2((0.toInt).toInt)((1.toInt).toInt), pt2((1.toInt).toInt)((1.toInt).toInt), pt2((2.toInt).toInt)((1.toInt).toInt))
  val avec: ArrayBuffer[Double] = mat_vec_mul(inv, vecx)
  val bvec: ArrayBuffer[Double] = mat_vec_mul(inv, vecy)
  val a0: Double = avec((0.toInt).toInt)
  val a1: Double = avec((1.toInt).toInt)
  val a2: Double = avec((2.toInt).toInt)
  val b0: Double = bvec((0.toInt).toInt)
  val b1: Double = bvec((1.toInt).toInt)
  val b2: Double = bvec((2.toInt).toInt)
  var out: ArrayBuffer[ArrayBuffer[BigInt]] = create_matrix(rows, cols, 0)
  var y: BigInt = 0
  while (y < rows) {
    var x: BigInt = 0
    while (x < cols) {
      val xf: Double = a0 * (1.0 * x.toString.toDouble) + a1 * (1.0 * y.toString.toDouble) + a2
      val yf: Double = b0 * (1.0 * x.toString.toDouble) + b1 * (1.0 * y.toString.toDouble) + b2
      val sx: BigInt = round_to_int(xf)
      val sy: BigInt = round_to_int(yf)
      if ((((sx >= 0 && sx < cols).asInstanceOf[Boolean] && sy >= 0).asInstanceOf[Boolean] && sy < rows).asInstanceOf[Boolean]) {
        out((sy).toInt)((sx).toInt) = img((y.toInt).toInt)((x.toInt).toInt)
      }
      x = x + 1
    }
    y = y + 1
  }
  return out
}

val img: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(1, 2, 3), ArrayBuffer(4, 5, 6), ArrayBuffer(7, 8, 9))

val pts1: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 0.0), ArrayBuffer(2.0, 0.0), ArrayBuffer(0.0, 2.0))

val pts2: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer(ArrayBuffer(0.0, 2.0), ArrayBuffer(0.0, 0.0), ArrayBuffer(2.0, 2.0))

val rotated: ArrayBuffer[ArrayBuffer[BigInt]] = get_rotation(img, pts1, pts2, 3, 3)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(rotated))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
