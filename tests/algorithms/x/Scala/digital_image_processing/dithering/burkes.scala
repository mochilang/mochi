// Generated by Mochi v0.10.59 on 2025-08-07 00:53:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def get_greyscale(blue: BigInt, green: BigInt, red: BigInt): BigInt = {
  val b: Double = blue.toString.toDouble
  val g: Double = green.toString.toDouble
  val r: Double = red.toString.toDouble
  return BigInt((0.114 * b + 0.587 * g + 0.299 * r).toInt)
}

def zeros(h: BigInt, w: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var table: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < h) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var j: BigInt = 0
    while (j < w) {
      row = row :+ BigInt(0)
      j = j + 1
    }
    table = table :+ row
    i = i + 1
  }
  return table
}

def burkes_dither(img: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]], threshold: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val height: BigInt = BigInt((img).size)
  val width: BigInt = BigInt((img((0.toInt).toInt)).size)
  var error_table: ArrayBuffer[ArrayBuffer[BigInt]] = zeros(height + 1, width + 4)
  var output: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
  var y: BigInt = 0
  while (y < height) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer()
    var x: BigInt = 0
    while (x < width) {
      val px: ArrayBuffer[BigInt] = img((y.toInt).toInt)((x.toInt).toInt)
      val grey: BigInt = get_greyscale(px((0.toInt).toInt), px((1.toInt).toInt), px((2.toInt).toInt))
      val total: BigInt = grey + error_table((y.toInt).toInt)(((x + 2).toInt).toInt)
      var new_val: BigInt = 0
      var current_error: BigInt = 0
      if (threshold > total) {
        new_val = 0
        current_error = total
      } else {
        new_val = 255
        current_error = total - 255
      }
      row = row :+ new_val
      error_table((y).toInt)((x + 3).toInt) = error_table((y.toInt).toInt)(((x + 3).toInt).toInt) + 8 * current_error / 32
      error_table((y).toInt)((x + 4).toInt) = error_table((y.toInt).toInt)(((x + 4).toInt).toInt) + 4 * current_error / 32
      error_table((y + 1).toInt)((x + 2).toInt) = error_table(((y + 1).toInt).toInt)(((x + 2).toInt).toInt) + 8 * current_error / 32
      error_table((y + 1).toInt)((x + 3).toInt) = error_table(((y + 1).toInt).toInt)(((x + 3).toInt).toInt) + 4 * current_error / 32
      error_table((y + 1).toInt)((x + 4).toInt) = error_table(((y + 1).toInt).toInt)(((x + 4).toInt).toInt) + 2 * current_error / 32
      error_table((y + 1).toInt)((x + 1).toInt) = error_table(((y + 1).toInt).toInt)(((x + 1).toInt).toInt) + 4 * current_error / 32
      error_table((y + 1).toInt)((x).toInt) = error_table(((y + 1).toInt).toInt)((x.toInt).toInt) + 2 * current_error / 32
      x = x + 1
    }
    output = output :+ row
    y = y + 1
  }
  return output
}

def main(): Any = {
  val img: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer(ArrayBuffer(ArrayBuffer(0, 0, 0), ArrayBuffer(64, 64, 64), ArrayBuffer(128, 128, 128), ArrayBuffer(192, 192, 192)), ArrayBuffer(ArrayBuffer(255, 255, 255), ArrayBuffer(200, 200, 200), ArrayBuffer(150, 150, 150), ArrayBuffer(100, 100, 100)), ArrayBuffer(ArrayBuffer(30, 144, 255), ArrayBuffer(255, 0, 0), ArrayBuffer(0, 255, 0), ArrayBuffer(0, 0, 255)), ArrayBuffer(ArrayBuffer(50, 100, 150), ArrayBuffer(80, 160, 240), ArrayBuffer(70, 140, 210), ArrayBuffer(60, 120, 180)))
  val result: ArrayBuffer[ArrayBuffer[BigInt]] = burkes_dither(img, 128)
  var y: BigInt = 0
  while (y < BigInt((result).size)) {
    var line: String = ""
    var x: BigInt = 0
    while (x < BigInt((result((y.toInt).toInt)).size)) {
      line = line + String.valueOf(result((y.toInt).toInt)((x.toInt).toInt))
      if (x < BigInt((result((y.toInt).toInt)).size) - 1) {
        line = line + " "
      }
      x = x + 1
    }
    println(line)
    y = y + 1
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
