// Generated by Mochi v0.10.71 on 2025-08-24 09:36:58 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => { val i = d.toLong; if (d == i.toDouble) java.lang.Long.toString(i) else java.lang.Double.toString(d) }
  case other => String.valueOf(other)
}

def get_greyscale(blue: BigInt, green: BigInt, red: BigInt): BigInt = {
  var b: Double = blue.toString.toDouble
  var g: Double = green.toString.toDouble
  var r: Double = red.toString.toDouble
  return BigInt((0.114 * b + 0.587 * g + 0.299 * r).toInt)
}

def zeros(h: BigInt, w: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var table: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < h) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var j: BigInt = BigInt(0)
    while (j < w) {
      row = ({row += (BigInt(0)); row})
      j = j + BigInt(1)
    }
    table = ({table += (row); table})
    i = i + BigInt(1)
  }
  return table
}

def burkes_dither(img: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]], threshold: BigInt): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var height: BigInt = BigInt((img).size)
  var width: BigInt = BigInt((img.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]())).size)
  var error_table: ArrayBuffer[ArrayBuffer[BigInt]] = zeros(height + BigInt(1), width + BigInt(4))
  var output: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var y: BigInt = BigInt(0)
  while (y < height) {
    var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    var x: BigInt = BigInt(0)
    while (x < width) {
      var px: ArrayBuffer[BigInt] = img.lift((y.toInt).toInt).getOrElse(ArrayBuffer[ArrayBuffer[BigInt]]()).lift((x.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
      var grey: BigInt = get_greyscale(px.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)), px.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)), px.lift((BigInt(2).toInt).toInt).getOrElse(BigInt(0)))
      var total: BigInt = grey + error_table.lift((y.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((x + BigInt(2)).toInt).toInt).getOrElse(BigInt(0))
      var new_val: BigInt = BigInt(0)
      var current_error: BigInt = BigInt(0)
      if (threshold > total) {
        new_val = BigInt(0)
        current_error = total
      } else {
        new_val = BigInt(255)
        current_error = total - BigInt(255)
      }
      row = ({row += (new_val); row})
      error_table((y).toInt)((x + BigInt(3)).toInt) = error_table.lift((y.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((x + BigInt(3)).toInt).toInt).getOrElse(BigInt(0)) + BigInt(8) * current_error / BigInt(32)
      error_table((y).toInt)((x + BigInt(4)).toInt) = error_table.lift((y.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((x + BigInt(4)).toInt).toInt).getOrElse(BigInt(0)) + BigInt(4) * current_error / BigInt(32)
      error_table((y + BigInt(1)).toInt)((x + BigInt(2)).toInt) = error_table.lift(((y + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((x + BigInt(2)).toInt).toInt).getOrElse(BigInt(0)) + BigInt(8) * current_error / BigInt(32)
      error_table((y + BigInt(1)).toInt)((x + BigInt(3)).toInt) = error_table.lift(((y + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((x + BigInt(3)).toInt).toInt).getOrElse(BigInt(0)) + BigInt(4) * current_error / BigInt(32)
      error_table((y + BigInt(1)).toInt)((x + BigInt(4)).toInt) = error_table.lift(((y + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((x + BigInt(4)).toInt).toInt).getOrElse(BigInt(0)) + BigInt(2) * current_error / BigInt(32)
      error_table((y + BigInt(1)).toInt)((x + BigInt(1)).toInt) = error_table.lift(((y + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift(((x + BigInt(1)).toInt).toInt).getOrElse(BigInt(0)) + BigInt(4) * current_error / BigInt(32)
      error_table((y + BigInt(1)).toInt)((x).toInt) = error_table.lift(((y + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((x.toInt).toInt).getOrElse(BigInt(0)) + BigInt(2) * current_error / BigInt(32)
      x = x + BigInt(1)
    }
    output = ({output += (row); output})
    y = y + BigInt(1)
  }
  return output
}

def main(): Any = {
  var img: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer(ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(64), BigInt(64), BigInt(64)), ArrayBuffer(BigInt(128), BigInt(128), BigInt(128)), ArrayBuffer(BigInt(192), BigInt(192), BigInt(192))), ArrayBuffer(ArrayBuffer(BigInt(255), BigInt(255), BigInt(255)), ArrayBuffer(BigInt(200), BigInt(200), BigInt(200)), ArrayBuffer(BigInt(150), BigInt(150), BigInt(150)), ArrayBuffer(BigInt(100), BigInt(100), BigInt(100))), ArrayBuffer(ArrayBuffer(BigInt(30), BigInt(144), BigInt(255)), ArrayBuffer(BigInt(255), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(255), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(255))), ArrayBuffer(ArrayBuffer(BigInt(50), BigInt(100), BigInt(150)), ArrayBuffer(BigInt(80), BigInt(160), BigInt(240)), ArrayBuffer(BigInt(70), BigInt(140), BigInt(210)), ArrayBuffer(BigInt(60), BigInt(120), BigInt(180))))
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = burkes_dither(img, BigInt(128))
  var y: BigInt = BigInt(0)
  while (y < BigInt((result).size)) {
    var line: String = ""
    var x: BigInt = BigInt(0)
    while (x < BigInt((result.lift((y.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
      line = line + _str(result.lift((y.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((x.toInt).toInt).getOrElse(BigInt(0)))
      if (x < BigInt((result.lift((y.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size) - BigInt(1)) {
        line = line + " "
      }
      x = x + BigInt(1)
    }
    println(_str(line))
    y = y + BigInt(1)
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
