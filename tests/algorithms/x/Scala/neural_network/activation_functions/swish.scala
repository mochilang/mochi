// Generated by Mochi v0.10.64 on 2025-08-12 13:53:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def exp_approx(x: Double): Double = {
  var sum: Double = 1.0
  var term: Double = 1.0
  var i: BigInt = BigInt(1)
  while (i <= BigInt(20)) {
    term = term * x / i.toString.toDouble
    sum = sum + term
    i = i + BigInt(1)
  }
  return sum
}

def sigmoid(vector: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var result: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((vector).size)) {
    val v: Double = vector.lift((i.toInt).toInt).getOrElse(0.0)
    val s: Double = 1.0 / (1.0 + exp_approx(-v))
    result = result :+ (s)
    i = i + BigInt(1)
  }
  return result
}

def swish(vector: ArrayBuffer[Double], beta: Double): ArrayBuffer[Double] = {
  var result: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((vector).size)) {
    val v: Double = vector.lift((i.toInt).toInt).getOrElse(0.0)
    val s: Double = 1.0 / (1.0 + exp_approx(-beta * v))
    result = result :+ (v * s)
    i = i + BigInt(1)
  }
  return result
}

def sigmoid_linear_unit(vector: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  return swish(vector, 1.0)
}

def approx_equal(a: Double, b: Double, eps: Double): Boolean = {
  val diff: Double = (if (a > b) a - b else b - a)
  return diff < eps
}

def approx_equal_list(a: ArrayBuffer[Double], b: ArrayBuffer[Double], eps: Double): Boolean = {
  if (BigInt((a).size) != BigInt((b).size)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    if (!approx_equal(a.lift((i.toInt).toInt).getOrElse(0.0), b.lift((i.toInt).toInt).getOrElse(0.0), eps)) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def test_swish(): Any = {
  val v: ArrayBuffer[Double] = ArrayBuffer(-1.0, 1.0, 2.0)
  val eps: Double = 0.001
  if (!approx_equal_list(sigmoid(v), ArrayBuffer(0.26894142, 0.73105858, 0.88079708), eps)) {
    throw new RuntimeException(String.valueOf("sigmoid incorrect"))
  }
  if (!approx_equal_list(sigmoid_linear_unit(v), ArrayBuffer(-0.26894142, 0.73105858, 1.76159416), eps)) {
    throw new RuntimeException(String.valueOf("sigmoid_linear_unit incorrect"))
  }
  if (!approx_equal_list(swish(v, 2.0), ArrayBuffer(-0.11920292, 0.88079708, 1.96402758), eps)) {
    throw new RuntimeException(String.valueOf("swish incorrect"))
  }
  if (!approx_equal_list(swish(ArrayBuffer((-2.0).toString.toDouble), 1.0), ArrayBuffer((-0.23840584).toString.toDouble), eps)) {
    throw new RuntimeException(String.valueOf("swish with parameter 1 incorrect"))
  }
}

def main(): Any = {
  test_swish()
  println(_str(sigmoid(ArrayBuffer(-1.0, 1.0, 2.0))))
  println(_str(sigmoid_linear_unit(ArrayBuffer(-1.0, 1.0, 2.0))))
  println(_str(swish(ArrayBuffer(-1.0, 1.0, 2.0), 2.0)))
  println(_str(swish(ArrayBuffer((-2.0).toString.toDouble), 1.0)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
