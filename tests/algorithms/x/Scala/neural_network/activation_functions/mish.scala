// Generated by Mochi v0.10.64 on 2025-08-12 09:33:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def exp_approx(x: Double): Double = {
  var neg: Boolean = false
  var y: Double = x
  if (x < 0.0) {
    neg = true
    y = -x
  }
  var term: Double = 1.0
  var sum: Double = 1.0
  var n: BigInt = BigInt(1)
  while (n < BigInt(30)) {
    term = term * y / n.toString.toDouble
    sum = sum + term
    n = n + BigInt(1)
  }
  if (neg) {
    return 1.0 / sum
  }
  return sum
}

def ln_series(x: Double): Double = {
  val t: Double = (x - 1.0) / (x + 1.0)
  var term: Double = t
  var acc: Double = 0.0
  var n: BigInt = BigInt(1)
  while (n <= BigInt(19)) {
    acc = acc + term / n.toString.toDouble
    term = term * t * t
    n = n + BigInt(2)
  }
  return 2.0 * acc
}

def ln(x: Double): Double = {
  var y: Double = x
  var k: BigInt = BigInt(0)
  while (y >= 10.0) {
    y = y / 10.0
    k = k + BigInt(1)
  }
  while (y < 1.0) {
    y = y * 10.0
    k = k - BigInt(1)
  }
  return ln_series(y) + k.toString.toDouble * ln_series(10.0)
}

def softplus(x: Double): Double = {
  return ln(1.0 + exp_approx(x))
}

def tanh_approx(x: Double): Double = {
  return 2.0 / (1.0 + exp_approx(-2.0 * x)) - 1.0
}

def mish(vector: ArrayBuffer[Double]): ArrayBuffer[Double] = {
  var result: ArrayBuffer[Double] = ArrayBuffer[Double]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((vector).size)) {
    val x: Double = vector.lift((i.toInt).toInt).getOrElse(0.0)
    val sp: Double = softplus(x)
    val y: Double = x * tanh_approx(sp)
    result = result :+ (y)
    i = i + BigInt(1)
  }
  return result
}

def main(): Any = {
  val v1: ArrayBuffer[Double] = ArrayBuffer(2.3, 0.6, -2.0, -3.8)
  val v2: ArrayBuffer[Double] = ArrayBuffer(-9.2, -0.3, 0.45, -4.56)
  println(_str(mish(v1)))
  println(_str(mish(v2)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
