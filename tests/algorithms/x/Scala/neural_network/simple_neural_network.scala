// Generated by Mochi v0.10.61 on 2025-08-08 17:14:10 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def rand(): BigInt = {
  seed = (seed * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
  return seed
}

def randint(low: BigInt, high: BigInt): BigInt = {
  return rand() % (high - low + BigInt(1)) + low
}

def expApprox(x: Double): Double = {
  var y: Double = x
  var is_neg: Boolean = false
  if (x < 0.0) {
    is_neg = true
    y = -x
  }
  var term: Double = 1.0
  var sum: Double = 1.0
  var n: BigInt = BigInt(1)
  while (n < BigInt(30)) {
    term = term * y / n.toString.toDouble
    sum = sum + term
    n = n + BigInt(1)
  }
  if (is_neg) {
    return 1.0 / sum
  }
  return sum
}

def sigmoid(x: Double): Double = {
  return 1.0 / (1.0 + expApprox(-x))
}

def sigmoid_derivative(sig_val: Double): Double = {
  return sig_val * (1.0 - sig_val)
}

def forward_propagation(expected: BigInt, number_propagations: BigInt): Double = {
  var weight: Double = 2.0 * (randint(BigInt(1), BigInt(100))).toString.toDouble - 1.0
  var layer_1: Double = 0.0
  var i: BigInt = BigInt(0)
  while (i < number_propagations) {
    layer_1 = sigmoid(INITIAL_VALUE * weight)
    val layer_1_error: Double = expected.toString.toDouble / 100.0 - layer_1
    val layer_1_delta: Double = layer_1_error * sigmoid_derivative(layer_1)
    weight = weight + INITIAL_VALUE * layer_1_delta
    i = i + BigInt(1)
  }
  return layer_1 * 100.0
}

var seed: BigInt = BigInt(1)

val INITIAL_VALUE: Double = 0.02

val result: Double = forward_propagation(BigInt(32), BigInt(450000))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    seed = BigInt(1)
    println(result)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
