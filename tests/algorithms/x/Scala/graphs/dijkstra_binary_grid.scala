// Generated by Mochi v0.10.59 on 2025-08-07 11:22:15 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Point(var x: BigInt, var y: BigInt)

case class Result(var distance: Double, var path: ArrayBuffer[Point])

def key(p: Point): String = {
  return String.valueOf(p.asInstanceOf[Point].x) + "," + String.valueOf(p.asInstanceOf[Point].y)
}

def path_to_string(path: ArrayBuffer[Point]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((path).size)) {
    val pt: Point = path((i.toInt).toInt)
    s = s + "(" + String.valueOf(pt.asInstanceOf[Point].x) + ", " + String.valueOf(pt.asInstanceOf[Point].y) + ")"
    if (i < BigInt((path).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

def dijkstra(grid: ArrayBuffer[ArrayBuffer[BigInt]], source: Point, destination: Point, allow_diagonal: Boolean): Result = {
  val rows: BigInt = BigInt((grid).size)
  val cols: BigInt = BigInt((grid((BigInt(0).toInt).toInt)).size)
  var dx: ArrayBuffer[BigInt] = ArrayBuffer(-BigInt(1), BigInt(1), BigInt(0), BigInt(0))
  var dy: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0), -BigInt(1), BigInt(1))
  if (allow_diagonal) {
    dx = (dx ++ ArrayBuffer(-BigInt(1), -BigInt(1), BigInt(1), BigInt(1))).asInstanceOf[ArrayBuffer[BigInt]]
    dy = (dy ++ ArrayBuffer(-BigInt(1), BigInt(1), -BigInt(1), BigInt(1))).asInstanceOf[ArrayBuffer[BigInt]]
  }
  val INF: Double = 1000000000000.0
  var queue: ArrayBuffer[Point] = ArrayBuffer(source)
  var front: BigInt = BigInt(0)
  var dist_map: scala.collection.mutable.Map[String,Double] = (scala.collection.mutable.Map(key(source) -> (0.0))).asInstanceOf[scala.collection.mutable.Map[String,Double]]
  var prev: scala.collection.mutable.Map[String,Point] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Point]]
  val _br1 = new Breaks
  _br1.breakable {
    while (front < BigInt((queue).size)) {
      val current: Point = queue((front.toInt).toInt)
      front = front + BigInt(1)
      val cur_key: String = key(current)
      if ((current.asInstanceOf[Point].x == destination.asInstanceOf[Point].x && current.asInstanceOf[Point].y == destination.asInstanceOf[Point].y).asInstanceOf[Boolean]) {
        _br1.break()
      }
      var i: BigInt = BigInt(0)
      while (i < BigInt((dx).size)) {
        val nx: BigInt = current.asInstanceOf[Point].x + dx((i.toInt).toInt)
        val ny: BigInt = current.asInstanceOf[Point].y + dy((i.toInt).toInt)
        if ((((nx >= BigInt(0) && nx < rows).asInstanceOf[Boolean] && ny >= BigInt(0)).asInstanceOf[Boolean] && ny < cols).asInstanceOf[Boolean]) {
          if (grid((nx.toInt).toInt)((ny.toInt).toInt) == BigInt(1)) {
            val n_key: String = String.valueOf(nx) + "," + String.valueOf(ny)
            if (!(dist_map.contains(n_key)).asInstanceOf[Boolean]) {
              dist_map.update(n_key, dist_map.getOrElse(cur_key.toString, 0.0).asInstanceOf[Double] + 1.0)
              prev.update(n_key, current)
              queue = queue :+ Point(nx, ny)
            }
          }
        }
        i = i + BigInt(1)
      }
    }
  }
  val dest_key: String = key(destination)
  if ((dist_map.contains(dest_key)).asInstanceOf[Boolean]) {
    var path_rev: ArrayBuffer[Point] = ArrayBuffer(destination)
    var step_key: String = dest_key
    var step_pt: Point = destination
    while (step_key != key(source)) {
      step_pt = prev.getOrElse(step_key.toString, null).asInstanceOf[Point]
      step_key = key(step_pt)
      path_rev = path_rev :+ step_pt
    }
    var path: ArrayBuffer[Point] = ArrayBuffer[Point]()
    var k: BigInt = BigInt((path_rev).size) - BigInt(1)
    while (k >= BigInt(0)) {
      path = path :+ path_rev((k.toInt).toInt)
      k = k - BigInt(1)
    }
    return Result(dist_map.getOrElse(dest_key.toString, 0.0).asInstanceOf[Double], path)
  }
  return Result(INF, ArrayBuffer())
}

def print_result(res: Result): Any = {
  println(String.valueOf(res.asInstanceOf[Result].distance) + ", " + path_to_string(res.asInstanceOf[Result].path))
}

var grid1: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(1), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(1)))

var grid2: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(1), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(1)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(1)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    print_result(dijkstra(grid1, Point(BigInt(0), BigInt(0)), Point(BigInt(2), BigInt(2)), false))
    print_result(dijkstra(grid1, Point(BigInt(0), BigInt(0)), Point(BigInt(2), BigInt(2)), true))
    print_result(dijkstra(grid2, Point(BigInt(0), BigInt(0)), Point(BigInt(2), BigInt(2)), false))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
