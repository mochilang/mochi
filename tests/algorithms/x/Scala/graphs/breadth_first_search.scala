// Generated by Mochi v0.10.59 on 2025-08-07 11:15:50 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def add_edge(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], from: BigInt, to: BigInt): Any = {
  if ((graph.contains(from)).asInstanceOf[Boolean]) {
    graph.update(from, graph.getOrElse(from, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]] :+ to)
  } else {
    graph.update(from, ArrayBuffer(to))
  }
}

def print_graph(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]): Any = {
  for (v <- graph.keys.toSeq.sorted) {
    val adj: ArrayBuffer[BigInt] = graph.getOrElse(v, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
    var line: String = String.valueOf(v) + "  :  "
    var i: BigInt = 0
    while (i < BigInt((adj).size)) {
      line = line + String.valueOf(adj((i.toInt).toInt))
      if (i < BigInt((adj).size) - 1) {
        line = line + " -> "
      }
      i = i + 1
    }
    println(line)
  }
}

def bfs(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], start: BigInt): ArrayBuffer[BigInt] = {
  var visited: scala.collection.mutable.Map[BigInt,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,Boolean]]
  var queue: ArrayBuffer[BigInt] = ArrayBuffer()
  var order: ArrayBuffer[BigInt] = ArrayBuffer()
  queue = queue :+ start
  visited.update(start, true)
  var head: BigInt = 0
  while (head < BigInt((queue).size)) {
    val vertex: BigInt = queue((head.toInt).toInt)
    head = head + 1
    order = order :+ vertex
    val neighbors: ArrayBuffer[BigInt] = graph.getOrElse(vertex, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
    var i: BigInt = 0
    while (i < BigInt((neighbors).size)) {
      val neighbor: BigInt = neighbors((i.toInt).toInt)
      if (!(visited.contains(neighbor)).asInstanceOf[Boolean]) {
        visited.update(neighbor, true)
        queue = queue :+ neighbor
      }
      i = i + 1
    }
  }
  return order
}

var g: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]]

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    add_edge(g, 0, 1)
    add_edge(g, 0, 2)
    add_edge(g, 1, 2)
    add_edge(g, 2, 0)
    add_edge(g, 2, 3)
    add_edge(g, 3, 3)
    print_graph(g)
    println(bfs(g, 2))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
