// Generated by Mochi v0.10.66 on 2025-08-15 10:41:24 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def topology_sort(graph: ArrayBuffer[ArrayBuffer[BigInt]], vert: BigInt, visited: ArrayBuffer[Boolean]): ArrayBuffer[BigInt] = {
  visited((vert).toInt) = true
  var order: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  for (neighbour <- graph.lift((vert.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())) {
    if (!visited.lift((neighbour.toInt).toInt).getOrElse(false)) {
      order = ((order ++ topology_sort(graph, neighbour, visited)).asInstanceOf[ArrayBuffer[BigInt]]).asInstanceOf[ArrayBuffer[BigInt]]
    }
  }
  order = (order :+ vert)
  return order
}

def find_component(graph: ArrayBuffer[ArrayBuffer[BigInt]], vert: BigInt, visited: ArrayBuffer[Boolean]): ArrayBuffer[BigInt] = {
  visited((vert).toInt) = true
  var comp: ArrayBuffer[BigInt] = ArrayBuffer(vert)
  for (neighbour <- graph.lift((vert.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())) {
    if (!visited.lift((neighbour.toInt).toInt).getOrElse(false)) {
      comp = ((comp ++ find_component(graph, neighbour, visited)).asInstanceOf[ArrayBuffer[BigInt]]).asInstanceOf[ArrayBuffer[BigInt]]
    }
  }
  return comp
}

def strongly_connected_components(graph: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var n: BigInt = BigInt((graph).size)
  var visited: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  for (_ <- (BigInt(0)).toInt until (n).toInt) {
    visited = (visited :+ false)
  }
  var reversed: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  for (_ <- (BigInt(0)).toInt until (n).toInt) {
    reversed = (reversed :+ ArrayBuffer[BigInt]())
  }
  for (i <- (BigInt(0)).toInt until (n).toInt) {
    for (neighbour <- graph.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())) {
      reversed((neighbour).toInt) = (reversed.lift((neighbour.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()) :+ BigInt(i.toString.toDouble.toInt))
    }
  }
  var order: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  for (i <- (BigInt(0)).toInt until (n).toInt) {
    if (!visited.lift((i.toInt).toInt).getOrElse(false)) {
      order = ((order ++ topology_sort(graph, BigInt(i.toString.toDouble.toInt), visited)).asInstanceOf[ArrayBuffer[BigInt]]).asInstanceOf[ArrayBuffer[BigInt]]
    }
  }
  visited = ArrayBuffer()
  for (_ <- (BigInt(0)).toInt until (n).toInt) {
    visited = (visited :+ false)
  }
  var components: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    var v: BigInt = order.lift(((n - i - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
    if (!visited.lift((v.toInt).toInt).getOrElse(false)) {
      var comp: ArrayBuffer[BigInt] = find_component(reversed, v, visited)
      components = (components :+ comp)
    }
    i = i + BigInt(1)
  }
  return components
}

def main(): Any = {
  var test_graph_1: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(2), BigInt(3)), ArrayBuffer(BigInt(0)), ArrayBuffer(BigInt(1)), ArrayBuffer(BigInt(4)), ArrayBuffer[BigInt]())
  var test_graph_2: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3)), ArrayBuffer(BigInt(2)), ArrayBuffer(BigInt(0)), ArrayBuffer(BigInt(4)), ArrayBuffer(BigInt(5)), ArrayBuffer(BigInt(3)))
  println(_str(_str(strongly_connected_components(test_graph_1))))
  println(_str(_str(strongly_connected_components(test_graph_2))))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
