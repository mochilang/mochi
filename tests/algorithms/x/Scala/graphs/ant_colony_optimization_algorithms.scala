// Generated by Mochi v0.10.59 on 2025-08-07 11:14:07 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def sqrtApprox(x: Double): Double = {
  var guess: Double = x / 2.0
  var i: BigInt = 0
  while (i < 20) {
    guess = (guess + x / guess) / 2.0
    i = i + 1
  }
  return guess
}

def rand_float(): Double = {
  return (_now() % 1000000).toString.toDouble / 1000000.0
}

def pow_float(base: Double, exp: Double): Double = {
  var result: Double = 1.0
  var i: BigInt = 0
  val e: BigInt = BigInt(exp.toString.toDouble.toInt)
  while (i < e) {
    result = result * base
    i = i + 1
  }
  return result
}

def distance(city1: ArrayBuffer[BigInt], city2: ArrayBuffer[BigInt]): Double = {
  val dx: Double = (city1((0.toInt).toInt) - city2((0.toInt).toInt)).toString.toDouble
  val dy: Double = (city1((1.toInt).toInt) - city2((1.toInt).toInt)).toString.toDouble
  return sqrtApprox(dx * dx + dy * dy)
}

def choose_weighted(options: ArrayBuffer[BigInt], weights: ArrayBuffer[Double]): BigInt = {
  var total: Double = 0.0
  var i: BigInt = 0
  while (i < BigInt((weights).size)) {
    total = total + weights((i.toInt).toInt)
    i = i + 1
  }
  val r: Double = rand_float() * total
  var accum: Double = 0.0
  i = 0
  while (i < BigInt((weights).size)) {
    accum = accum + weights((i.toInt).toInt)
    if (r <= accum) {
      return options((i.toInt).toInt)
    }
    i = i + 1
  }
  return options(((BigInt((options).size) - 1).toInt).toInt)
}

def city_select(pheromone: ArrayBuffer[ArrayBuffer[Double]], current: BigInt, unvisited: ArrayBuffer[BigInt], alpha: Double, beta: Double, cities: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]): BigInt = {
  var probs: ArrayBuffer[Double] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((unvisited).size)) {
    val city: BigInt = unvisited((i.toInt).toInt)
    val dist: Double = distance(cities.getOrElse(city, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]], cities.getOrElse(current, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]])
    val trail: Double = pheromone((city.toInt).toInt)((current.toInt).toInt)
    val prob: Double = pow_float(trail, alpha) * pow_float(1.0 / dist, beta)
    probs = probs :+ prob
    i = i + 1
  }
  return choose_weighted(unvisited, probs)
}

def pheromone_update(pheromone: ArrayBuffer[ArrayBuffer[Double]], cities: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], evaporation: Double, ants_route: ArrayBuffer[ArrayBuffer[BigInt]], q: Double): ArrayBuffer[ArrayBuffer[Double]] = {
  val n: BigInt = BigInt((pheromone).size)
  var i: BigInt = 0
  while (i < n) {
    var j: BigInt = 0
    while (j < n) {
      pheromone((i).toInt)((j).toInt) = pheromone((i.toInt).toInt)((j.toInt).toInt) * evaporation
      j = j + 1
    }
    i = i + 1
  }
  var a: BigInt = 0
  while (a < BigInt((ants_route).size)) {
    val route: ArrayBuffer[BigInt] = ants_route((a.toInt).toInt)
    var total: Double = 0.0
    var r: BigInt = 0
    while (r < BigInt((route).size) - 1) {
      total = total + distance(cities.getOrElse(route((r.toInt).toInt), ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]], cities.getOrElse(route(((r + 1).toInt).toInt), ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]])
      r = r + 1
    }
    val delta: Double = q / total
    r = 0
    while (r < BigInt((route).size) - 1) {
      val u: BigInt = route((r.toInt).toInt)
      val v: BigInt = route(((r + 1).toInt).toInt)
      pheromone((u).toInt)((v).toInt) = pheromone((u.toInt).toInt)((v.toInt).toInt) + delta
      pheromone((v).toInt)((u).toInt) = pheromone((u.toInt).toInt)((v.toInt).toInt)
      r = r + 1
    }
    a = a + 1
  }
  return pheromone
}

def remove_value(lst: ArrayBuffer[BigInt], `val`: BigInt): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((lst).size)) {
    if (lst((i.toInt).toInt) != `val`) {
      res = res :+ lst((i.toInt).toInt)
    }
    i = i + 1
  }
  return res
}

def ant_colony(cities: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], ants_num: BigInt, iterations: BigInt, evaporation: Double, alpha: Double, beta: Double, q: Double): Any = {
  val n: BigInt = BigInt((cities).size)
  var pheromone: ArrayBuffer[ArrayBuffer[Double]] = ArrayBuffer()
  var i: BigInt = 0
  while (i < n) {
    var row: ArrayBuffer[Double] = ArrayBuffer()
    var j: BigInt = 0
    while (j < n) {
      row = row :+ 1.0
      j = j + 1
    }
    pheromone = pheromone :+ row
    i = i + 1
  }
  var best_path: ArrayBuffer[BigInt] = ArrayBuffer()
  var best_distance: Double = 1000000000.0
  var iter: BigInt = 0
  while (iter < iterations) {
    var ants_route: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer()
    var k: BigInt = 0
    while (k < ants_num) {
      var route: ArrayBuffer[BigInt] = ArrayBuffer(0)
      var unvisited: ArrayBuffer[BigInt] = ArrayBuffer()
      for (key <- cities.keys) {
        if (key != 0) {
          unvisited = unvisited :+ key
        }
      }
      var current: BigInt = 0
      while (BigInt((unvisited).size) > 0) {
        val next_city: BigInt = city_select(pheromone, current, unvisited, alpha, beta, cities)
        route = route :+ next_city
        unvisited = remove_value(unvisited, next_city)
        current = next_city
      }
      route = route :+ BigInt(0)
      ants_route = ants_route :+ route
      k = k + 1
    }
    pheromone = pheromone_update(pheromone, cities, evaporation, ants_route, q)
    var a: BigInt = 0
    while (a < BigInt((ants_route).size)) {
      var route: ArrayBuffer[BigInt] = ants_route((a.toInt).toInt)
      var dist: Double = 0.0
      var r: BigInt = 0
      while (r < BigInt((route).size) - 1) {
        dist = dist + distance(cities.getOrElse(route((r.toInt).toInt), ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]], cities.getOrElse(route(((r + 1).toInt).toInt), ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]])
        r = r + 1
      }
      if (dist < best_distance) {
        best_distance = dist
        best_path = route
      }
      a = a + 1
    }
    iter = iter + 1
  }
  println("best_path = " + String.valueOf(best_path))
  println("best_distance = " + String.valueOf(best_distance))
}

val cities: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(0, 0)), BigInt(1) -> (ArrayBuffer(0, 5)), BigInt(2) -> (ArrayBuffer(3, 8)), BigInt(3) -> (ArrayBuffer(8, 10)), BigInt(4) -> (ArrayBuffer(12, 8)), BigInt(5) -> (ArrayBuffer(12, 4)), BigInt(6) -> (ArrayBuffer(8, 0)), BigInt(7) -> (ArrayBuffer(6, 2)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    ant_colony(cities, 10, 20, 0.7, 1.0, 5.0, 10.0)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
