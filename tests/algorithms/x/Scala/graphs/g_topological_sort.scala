// Generated by Mochi v0.10.66 on 2025-08-15 10:33:13 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def depth_first_search(u: BigInt, visited: ArrayBuffer[Boolean], graph: ArrayBuffer[ArrayBuffer[BigInt]], _stack: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var stack: ArrayBuffer[BigInt] = _stack
  visited((u).toInt) = true
  var i: BigInt = BigInt(0)
  while (i < BigInt((graph.lift((u.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size)) {
    var v: BigInt = graph.lift((u.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((i.toInt).toInt).getOrElse(BigInt(0))
    if (!visited.lift((v.toInt).toInt).getOrElse(false)) {
      stack = depth_first_search(v, visited, graph, stack)
    }
    i = i + BigInt(1)
  }
  stack = (stack :+ u)
  return stack
}

def topological_sort(graph: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[BigInt] = {
  var visited: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((graph).size)) {
    visited = (visited :+ false)
    i = i + BigInt(1)
  }
  var stack: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < BigInt((graph).size)) {
    if (!visited.lift((i.toInt).toInt).getOrElse(false)) {
      stack = depth_first_search(i, visited, graph, stack)
    }
    i = i + BigInt(1)
  }
  return stack
}

def print_stack(stack: ArrayBuffer[BigInt], clothes: scala.collection.mutable.Map[BigInt,String]): Any = {
  var order: BigInt = BigInt(1)
  var s: ArrayBuffer[BigInt] = stack
  while (BigInt((s).size) > BigInt(0)) {
    var idx: BigInt = s.lift(((BigInt((s).size) - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
    s = s.slice((BigInt(0)).toInt, (BigInt((s).size) - BigInt(1)).toInt)
    println(_str(order) + " " + clothes.getOrElse(idx, "").asInstanceOf[String])
    order = order + BigInt(1)
  }
}

def format_list(xs: ArrayBuffer[BigInt]): String = {
  var res: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((xs).size)) {
    res = res + _str(xs.lift((i.toInt).toInt).getOrElse(BigInt(0)))
    if (i < BigInt((xs).size) - BigInt(1)) {
      res = res + ", "
    }
    i = i + BigInt(1)
  }
  res = res + "]"
  return res
}

def main(): Any = {
  var clothes: scala.collection.mutable.Map[BigInt,String] = scala.collection.mutable.Map(BigInt(0) -> ("underwear"), BigInt(1) -> ("pants"), BigInt(2) -> ("belt"), BigInt(3) -> ("suit"), BigInt(4) -> ("shoe"), BigInt(5) -> ("socks"), BigInt(6) -> ("shirt"), BigInt(7) -> ("tie"), BigInt(8) -> ("watch"))
  var graph: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(4)), ArrayBuffer(BigInt(2), BigInt(4)), ArrayBuffer(BigInt(3)), ArrayBuffer[BigInt](), ArrayBuffer[BigInt](), ArrayBuffer(BigInt(4)), ArrayBuffer(BigInt(2), BigInt(7)), ArrayBuffer(BigInt(3)), ArrayBuffer[BigInt]())
  var stack: ArrayBuffer[BigInt] = topological_sort(graph)
  println(format_list(stack))
  print_stack(stack, clothes)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
