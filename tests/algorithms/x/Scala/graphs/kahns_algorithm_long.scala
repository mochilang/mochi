// Generated by Mochi v0.10.59 on 2025-08-07 11:23:55 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def longest_distance(graph: ArrayBuffer[ArrayBuffer[BigInt]]): BigInt = {
  val n: BigInt = BigInt((graph).size)
  var indegree: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    indegree = indegree :+ BigInt(0)
    i = i + BigInt(1)
  }
  var long_dist: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var j: BigInt = BigInt(0)
  while (j < n) {
    long_dist = long_dist :+ BigInt(1)
    j = j + BigInt(1)
  }
  var u: BigInt = BigInt(0)
  while (u < n) {
    for (v <- graph((u.toInt).toInt)) {
      indegree((v).toInt) = indegree((v.toInt).toInt) + BigInt(1)
    }
    u = u + BigInt(1)
  }
  var queue: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var head: BigInt = BigInt(0)
  var k: BigInt = BigInt(0)
  while (k < n) {
    if (indegree((k.toInt).toInt) == BigInt(0)) {
      queue = queue :+ k
    }
    k = k + BigInt(1)
  }
  while (head < BigInt((queue).size)) {
    val vertex: BigInt = queue((head.toInt).toInt)
    head = head + BigInt(1)
    for (x <- graph((vertex.toInt).toInt)) {
      indegree((x).toInt) = indegree((x.toInt).toInt) - BigInt(1)
      val new_dist: BigInt = long_dist((vertex.toInt).toInt) + BigInt(1)
      if (new_dist > long_dist((x.toInt).toInt)) {
        long_dist((x).toInt) = new_dist
      }
      if (indegree((x.toInt).toInt) == BigInt(0)) {
        queue = queue :+ x
      }
    }
  }
  var max_len: BigInt = long_dist((BigInt(0).toInt).toInt)
  var m: BigInt = BigInt(1)
  while (m < n) {
    if (long_dist((m.toInt).toInt) > max_len) {
      max_len = long_dist((m.toInt).toInt)
    }
    m = m + BigInt(1)
  }
  return max_len
}

val graph: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(2), BigInt(3), BigInt(4)), ArrayBuffer(BigInt(2), BigInt(7)), ArrayBuffer(BigInt(5)), ArrayBuffer(BigInt(5), BigInt(7)), ArrayBuffer(BigInt(7)), ArrayBuffer(BigInt(6)), ArrayBuffer(BigInt(7)), ArrayBuffer[BigInt]())

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(longest_distance(graph))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
