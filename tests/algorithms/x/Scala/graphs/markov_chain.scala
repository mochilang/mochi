// Generated by Mochi v0.10.66 on 2025-08-15 15:25:12 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

case class Transition(var src: String, var dst: String, var prob: Double)

def rand(): BigInt = {
  seed = (seed * BigInt(1103515245) + BigInt(12345)) % BigInt("2147483648")
  return seed
}

def random(): Double = {
  return 1.0 * (rand()).toString.toDouble / 2147483648.0
}

def get_nodes(trans: ArrayBuffer[Transition]): ArrayBuffer[String] = {
  var seen: scala.collection.mutable.Map[String,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Boolean]]
  for (t <- trans) {
    seen.update(t.asInstanceOf[Transition].src, true)
    seen.update(t.asInstanceOf[Transition].dst, true)
  }
  var nodes: ArrayBuffer[String] = ArrayBuffer[String]()
  for (k <- ArrayBuffer(seen.keys.toSeq.sorted: _*)) {
    nodes = (nodes :+ k.toString)
  }
  return nodes
}

def transition(current: String, trans: ArrayBuffer[Transition]): String = {
  var current_probability: Double = 0.0
  var random_value: Double = random()
  for (t <- trans) {
    if (t.asInstanceOf[Transition].src == current) {
      current_probability = current_probability + t.asInstanceOf[Transition].prob
      if (current_probability > random_value) {
        return t.asInstanceOf[Transition].dst
      }
    }
  }
  return ""
}

def get_transitions(start: String, trans: ArrayBuffer[Transition], steps: BigInt): scala.collection.mutable.Map[String,BigInt] = {
  var visited: scala.collection.mutable.Map[String,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,BigInt]]
  for (node <- get_nodes(trans)) {
    var one: BigInt = BigInt(1)
    visited.update(node, one)
  }
  var node: String = start
  var i: BigInt = BigInt(0)
  while (i < steps) {
    node = transition(node, trans)
    var count: BigInt = visited.getOrElse(node.toString, BigInt(0)).asInstanceOf[BigInt]
    count = count + BigInt(1)
    visited.update(node, count)
    i = i + BigInt(1)
  }
  return visited
}

def main(): Any = {
  var transitions: ArrayBuffer[Transition] = ArrayBuffer(Transition("a", "a", 0.9), Transition("a", "b", 0.075), Transition("a", "c", 0.025), Transition("b", "a", 0.15), Transition("b", "b", 0.8), Transition("b", "c", 0.05), Transition("c", "a", 0.25), Transition("c", "b", 0.25), Transition("c", "c", 0.5))
  var result: scala.collection.mutable.Map[String,BigInt] = get_transitions("a", transitions, BigInt(5000))
  println(_str(_str(result.getOrElse("a", BigInt(0)).asInstanceOf[BigInt]) + " " + _str(result.getOrElse("b", BigInt(0)).asInstanceOf[BigInt]) + " " + _str(result.getOrElse("c", BigInt(0)).asInstanceOf[BigInt])))
}

var seed: BigInt = BigInt(1)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
