// Generated by Mochi v0.10.59 on 2025-08-07 11:23:00 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def dfs(start: BigInt, visited: scala.collection.mutable.Map[BigInt,Boolean]): ArrayBuffer[BigInt] = {
  var size: BigInt = BigInt(1)
  var cuts: BigInt = BigInt(0)
  visited.update(start, true)
  for (v <- tree.getOrElse(start, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]) {
    if (!(visited.contains(v)).asInstanceOf[Boolean]) {
      val res: ArrayBuffer[BigInt] = dfs(v, visited)
      size = size + res((BigInt(0).toInt).toInt)
      cuts = cuts + res((BigInt(1).toInt).toInt)
    }
  }
  if (size % BigInt(2) == BigInt(0)) {
    cuts = cuts + BigInt(1)
  }
  return ArrayBuffer(size, cuts)
}

def even_tree(): BigInt = {
  val visited: scala.collection.mutable.Map[BigInt,Boolean] = scala.collection.mutable.Map()
  val res: ArrayBuffer[BigInt] = dfs(BigInt(1), visited)
  return res((BigInt(1).toInt).toInt) - BigInt(1)
}

def main(): Any = {
  val edges: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(2), BigInt(1)), ArrayBuffer(BigInt(3), BigInt(1)), ArrayBuffer(BigInt(4), BigInt(3)), ArrayBuffer(BigInt(5), BigInt(2)), ArrayBuffer(BigInt(6), BigInt(1)), ArrayBuffer(BigInt(7), BigInt(2)), ArrayBuffer(BigInt(8), BigInt(6)), ArrayBuffer(BigInt(9), BigInt(8)), ArrayBuffer(BigInt(10), BigInt(8)))
  var i: BigInt = BigInt(0)
  while (i < BigInt((edges).size)) {
    val u: BigInt = edges((i.toInt).toInt)((BigInt(0).toInt).toInt)
    val v: BigInt = edges((i.toInt).toInt)((BigInt(1).toInt).toInt)
    if (!(tree.contains(u)).asInstanceOf[Boolean]) {
      tree.update(u, ArrayBuffer())
    }
    if (!(tree.contains(v)).asInstanceOf[Boolean]) {
      tree.update(v, ArrayBuffer())
    }
    tree.update(u, tree.getOrElse(u, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]] :+ BigInt(v))
    tree.update(v, tree.getOrElse(v, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]] :+ BigInt(u))
    i = i + BigInt(1)
  }
  println(String.valueOf(even_tree()))
}

var tree: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]]

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
