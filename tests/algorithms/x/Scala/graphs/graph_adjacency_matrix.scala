// Generated by Mochi v0.10.59 on 2025-08-07 11:23:26 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Graph(var directed: Boolean, var vertex_to_index: scala.collection.mutable.Map[BigInt,BigInt], var adj_matrix: ArrayBuffer[ArrayBuffer[BigInt]])

def make_graph(vertices: ArrayBuffer[BigInt], edges: ArrayBuffer[ArrayBuffer[BigInt]], directed: Boolean): Graph = {
  var g: Graph = Graph(directed, scala.collection.mutable.Map(), ArrayBuffer())
  var i: BigInt = BigInt(0)
  while (i < BigInt((vertices).size)) {
    add_vertex(g, vertices((i.toInt).toInt))
    i = i + BigInt(1)
  }
  var j: BigInt = BigInt(0)
  while (j < BigInt((edges).size)) {
    val e: ArrayBuffer[BigInt] = edges((j.toInt).toInt)
    add_edge(g, e((BigInt(0).toInt).toInt), e((BigInt(1).toInt).toInt))
    j = j + BigInt(1)
  }
  return g
}

def contains_vertex(g: Graph, v: BigInt): Boolean = {
  return (g.vertex_to_index.contains(v)).asInstanceOf[Boolean]
}

def add_vertex(g: Graph, v: BigInt): Any = {
  if (contains_vertex(g, v)) {
    throw new RuntimeException(String.valueOf("vertex already exists"))
  }
  var matrix: ArrayBuffer[ArrayBuffer[BigInt]] = g.adj_matrix
  var i: BigInt = BigInt(0)
  while (i < BigInt((matrix).size)) {
    matrix((i).toInt) = matrix((i.toInt).toInt) :+ BigInt(0)
    i = i + BigInt(1)
  }
  var row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var j: BigInt = BigInt(0)
  while (j < BigInt((matrix).size) + BigInt(1)) {
    row = row :+ BigInt(0)
    j = j + BigInt(1)
  }
  matrix = matrix :+ row
  g.adj_matrix = matrix
  var idx_map: scala.collection.mutable.Map[BigInt,BigInt] = g.vertex_to_index
  idx_map.update(v, BigInt((matrix).size) - BigInt(1))
  g.vertex_to_index = idx_map
}

def remove_key(m: scala.collection.mutable.Map[BigInt,BigInt], k: BigInt): scala.collection.mutable.Map[BigInt,BigInt] = {
  var out: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]
  for (key <- m.keys) {
    if (key != k) {
      out.update(key, m.getOrElse(key, null).asInstanceOf[BigInt])
    }
  }
  return out
}

def decrement_indices(m: scala.collection.mutable.Map[BigInt,BigInt], start: BigInt): scala.collection.mutable.Map[BigInt,BigInt] = {
  var out: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]
  for (key <- m.keys) {
    val idx: BigInt = m.getOrElse(key, null).asInstanceOf[BigInt]
    if (idx > start) {
      out.update(key, idx - BigInt(1))
    } else {
      out.update(key, idx)
    }
  }
  return out
}

def remove_vertex(g: Graph, v: BigInt): Any = {
  if (!contains_vertex(g, v)) {
    throw new RuntimeException(String.valueOf("vertex does not exist"))
  }
  val idx: BigInt = g.vertex_to_index.getOrElse(v, null).asInstanceOf[BigInt]
  var new_matrix: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((g.adj_matrix).size)) {
    if (i != idx) {
      val row: ArrayBuffer[BigInt] = g.adj_matrix((i.toInt).toInt)
      var new_row: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
      var j: BigInt = BigInt(0)
      while (j < BigInt((row).size)) {
        if (j != idx) {
          new_row = new_row :+ row((j.toInt).toInt)
        }
        j = j + BigInt(1)
      }
      new_matrix = new_matrix :+ new_row
    }
    i = i + BigInt(1)
  }
  g.adj_matrix = new_matrix
  var m: scala.collection.mutable.Map[BigInt,BigInt] = remove_key(g.vertex_to_index, v)
  g.vertex_to_index = decrement_indices(m, idx)
}

def add_edge(g: Graph, u: BigInt, v: BigInt): Any = {
  if (!(contains_vertex(g, u) && contains_vertex(g, v)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("missing vertex"))
  }
  val i: BigInt = g.vertex_to_index.getOrElse(u, null).asInstanceOf[BigInt]
  val j: BigInt = g.vertex_to_index.getOrElse(v, null).asInstanceOf[BigInt]
  var matrix: ArrayBuffer[ArrayBuffer[BigInt]] = g.adj_matrix
  matrix((i).toInt)((j).toInt) = BigInt(1)
  if (!g.directed) {
    matrix((j).toInt)((i).toInt) = BigInt(1)
  }
  g.adj_matrix = matrix
}

def remove_edge(g: Graph, u: BigInt, v: BigInt): Any = {
  if (!(contains_vertex(g, u) && contains_vertex(g, v)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("missing vertex"))
  }
  val i: BigInt = g.vertex_to_index.getOrElse(u, null).asInstanceOf[BigInt]
  val j: BigInt = g.vertex_to_index.getOrElse(v, null).asInstanceOf[BigInt]
  var matrix: ArrayBuffer[ArrayBuffer[BigInt]] = g.adj_matrix
  matrix((i).toInt)((j).toInt) = BigInt(0)
  if (!g.directed) {
    matrix((j).toInt)((i).toInt) = BigInt(0)
  }
  g.adj_matrix = matrix
}

def contains_edge(g: Graph, u: BigInt, v: BigInt): Boolean = {
  if (!(contains_vertex(g, u) && contains_vertex(g, v)).asInstanceOf[Boolean]) {
    throw new RuntimeException(String.valueOf("missing vertex"))
  }
  val i: BigInt = g.vertex_to_index.getOrElse(u, null).asInstanceOf[BigInt]
  val j: BigInt = g.vertex_to_index.getOrElse(v, null).asInstanceOf[BigInt]
  val matrix: ArrayBuffer[ArrayBuffer[BigInt]] = g.adj_matrix
  return matrix((i.toInt).toInt)((j.toInt).toInt) == BigInt(1)
}

def clear_graph(g: Graph): Any = {
  g.vertex_to_index = scala.collection.mutable.Map()
  g.adj_matrix = ArrayBuffer()
}

var g: Graph = make_graph(ArrayBuffer(BigInt(1), BigInt(2), BigInt(3)), ArrayBuffer(ArrayBuffer(BigInt(1), BigInt(2)), ArrayBuffer(BigInt(2), BigInt(3))), false)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(g.adj_matrix))
    println(String.valueOf(contains_edge(g, BigInt(1), BigInt(2))))
    println(String.valueOf(contains_edge(g, BigInt(2), BigInt(1))))
    remove_edge(g, BigInt(1), BigInt(2))
    println(String.valueOf(contains_edge(g, BigInt(1), BigInt(2))))
    remove_vertex(g, BigInt(2))
    println(String.valueOf(g.adj_matrix))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
