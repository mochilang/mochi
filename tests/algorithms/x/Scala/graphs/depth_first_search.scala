// Generated by Mochi v0.10.59 on 2025-08-07 11:21:41 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def contains(lst: ArrayBuffer[String], v: String): Boolean = {
  var i: BigInt = BigInt(0)
  while (i < BigInt((lst).size)) {
    if (lst((i.toInt).toInt) == v) {
      return true
    }
    i = i + BigInt(1)
  }
  return false
}

def depth_first_search(graph: scala.collection.mutable.Map[String,ArrayBuffer[String]], start: String): ArrayBuffer[String] = {
  var explored: ArrayBuffer[String] = ArrayBuffer[String]()
  var stack: ArrayBuffer[String] = ArrayBuffer[String]()
  stack = stack :+ start
  explored = explored :+ start
  while (BigInt((stack).size) > BigInt(0)) {
    val idx: BigInt = BigInt((stack).size) - BigInt(1)
    val v: String = stack((idx.toInt).toInt)
    stack = stack.slice((BigInt(0)).toInt, (idx).toInt)
    val neighbors: ArrayBuffer[String] = graph.getOrElse(v.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
    var i: BigInt = BigInt((neighbors).size) - BigInt(1)
    while (i >= BigInt(0)) {
      val adj: String = neighbors((i.toInt).toInt)
      if (!(explored.contains(adj)).asInstanceOf[Boolean]) {
        explored = explored :+ adj
        stack = stack :+ adj
      }
      i = i - BigInt(1)
    }
  }
  return explored
}

val G: scala.collection.mutable.Map[String,ArrayBuffer[String]] = scala.collection.mutable.Map("A" -> (ArrayBuffer("B", "C", "D")), "B" -> (ArrayBuffer("A", "D", "E")), "C" -> (ArrayBuffer("A", "F")), "D" -> (ArrayBuffer("B", "D")), "E" -> (ArrayBuffer("B", "F")), "F" -> (ArrayBuffer("C", "E", "G")), "G" -> (ArrayBuffer("F")))

val result: ArrayBuffer[String] = depth_first_search(G, "A")

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(result)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
