// Generated by Mochi v0.10.65 on 2025-08-14 17:21:22 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => d.toString
  case other => String.valueOf(other)
}

case class Node(var pos: String, var path: ArrayBuffer[String])

def key(y: BigInt, x: BigInt): String = {
  return _str(y) + "," + _str(x)
}

def parse_int(s: String): BigInt = {
  var value: BigInt = BigInt(0)
  var i: BigInt = BigInt(0)
  while (i < BigInt((s).size)) {
    val c: String = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    value = value * BigInt(10) + BigInt(c.toString.toDouble.toInt)
    i = i + BigInt(1)
  }
  return value
}

def parse_key(k: String): ArrayBuffer[BigInt] = {
  var idx: BigInt = BigInt(0)
  while (idx < BigInt((k).size) && k.slice((idx).toInt, (idx + BigInt(1)).toInt) != ",") {
    idx = idx + BigInt(1)
  }
  val y: BigInt = parse_int(k.slice((BigInt(0)).toInt, (idx).toInt))
  val x: BigInt = parse_int(k.slice((idx + BigInt(1)).toInt, (BigInt((k).size)).toInt))
  return ArrayBuffer(y, x)
}

def neighbors(pos: String): ArrayBuffer[String] = {
  val coords: ArrayBuffer[BigInt] = parse_key(pos)
  val y: BigInt = coords.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
  val x: BigInt = coords.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((delta).size)) {
    val ny: BigInt = y + delta.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
    val nx: BigInt = x + delta.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
    if ((((ny >= BigInt(0) && ny < BigInt((grid).size)).asInstanceOf[Boolean] && nx >= BigInt(0)).asInstanceOf[Boolean] && nx < BigInt((grid.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size))) {
      if (grid.lift((ny.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((nx.toInt).toInt).getOrElse(BigInt(0)) == BigInt(0)) {
        res = (res :+ key(ny, nx))
      }
    }
    i = i + BigInt(1)
  }
  return res
}

def reverse_list(lst: ArrayBuffer[String]): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer[String]()
  var i: BigInt = BigInt((lst).size) - BigInt(1)
  while (i >= BigInt(0)) {
    res = (res :+ lst.lift((i.toInt).toInt).getOrElse(""))
    i = i - BigInt(1)
  }
  return res
}

def bfs(start: String, goal: String): ArrayBuffer[String] = {
  var queue: ArrayBuffer[Node] = ArrayBuffer[Node]()
  queue = (queue :+ Node(start, ArrayBuffer(start)))
  var head: BigInt = BigInt(0)
  var visited: scala.collection.mutable.Map[String,Boolean] = (scala.collection.mutable.Map(start -> (true))).asInstanceOf[scala.collection.mutable.Map[String,Boolean]]
  while (head < BigInt((queue).size)) {
    val node: Node = queue.lift((head.toInt).toInt).getOrElse(null)
    head = head + BigInt(1)
    if (node.asInstanceOf[Node].pos == goal) {
      return node.asInstanceOf[Node].path
    }
    val neigh: ArrayBuffer[String] = neighbors(node.asInstanceOf[Node].pos)
    var i: BigInt = BigInt(0)
    while (i < BigInt((neigh).size)) {
      val npos: String = neigh.lift((i.toInt).toInt).getOrElse("")
      if (!(visited.contains(npos))) {
        visited.update(npos, true)
        val new_path: ArrayBuffer[String] = (node.asInstanceOf[Node].path :+ npos)
        queue = (queue :+ Node(npos, new_path))
      }
      i = i + BigInt(1)
    }
  }
  return ArrayBuffer[String]()
}

def bidirectional_bfs(start: String, goal: String): ArrayBuffer[String] = {
  var queue_f: ArrayBuffer[Node] = ArrayBuffer[Node]()
  var queue_b: ArrayBuffer[Node] = ArrayBuffer[Node]()
  queue_f = (queue_f :+ Node(start, ArrayBuffer(start)))
  queue_b = (queue_b :+ Node(goal, ArrayBuffer(goal)))
  var head_f: BigInt = BigInt(0)
  var head_b: BigInt = BigInt(0)
  var visited_f: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map(start -> (ArrayBuffer(start)))).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]
  var visited_b: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map(goal -> (ArrayBuffer(goal)))).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]
  while (head_f < BigInt((queue_f).size) && head_b < BigInt((queue_b).size)) {
    val node_f: Node = queue_f.lift((head_f.toInt).toInt).getOrElse(null)
    head_f = head_f + BigInt(1)
    val neigh_f: ArrayBuffer[String] = neighbors(node_f.asInstanceOf[Node].pos)
    var i: BigInt = BigInt(0)
    while (i < BigInt((neigh_f).size)) {
      val npos: String = neigh_f.lift((i.toInt).toInt).getOrElse("")
      if (!(visited_f.contains(npos))) {
        var new_path: ArrayBuffer[String] = (node_f.asInstanceOf[Node].path :+ npos)
        visited_f.update(npos, new_path)
        if ((visited_b.contains(npos))) {
          var rev: ArrayBuffer[String] = reverse_list(visited_b.getOrElse(npos.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]])
          var j: BigInt = BigInt(1)
          while (j < BigInt((rev).size)) {
            new_path = (new_path :+ rev.lift((j.toInt).toInt).getOrElse(""))
            j = j + BigInt(1)
          }
          return new_path
        }
        queue_f = (queue_f :+ Node(npos, new_path))
      }
      i = i + BigInt(1)
    }
    val node_b: Node = queue_b.lift((head_b.toInt).toInt).getOrElse(null)
    head_b = head_b + BigInt(1)
    val neigh_b: ArrayBuffer[String] = neighbors(node_b.asInstanceOf[Node].pos)
    var j: BigInt = BigInt(0)
    while (j < BigInt((neigh_b).size)) {
      val nposb: String = neigh_b.lift((j.toInt).toInt).getOrElse("")
      if (!(visited_b.contains(nposb))) {
        var new_path_b: ArrayBuffer[String] = (node_b.asInstanceOf[Node].path :+ nposb)
        visited_b.update(nposb, new_path_b)
        if ((visited_f.contains(nposb))) {
          var path_f: ArrayBuffer[String] = visited_f.getOrElse(nposb.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
          new_path_b = reverse_list(new_path_b)
          var t: BigInt = BigInt(1)
          while (t < BigInt((new_path_b).size)) {
            path_f = (path_f :+ new_path_b.lift((t.toInt).toInt).getOrElse(""))
            t = t + BigInt(1)
          }
          return path_f
        }
        queue_b = (queue_b :+ Node(nposb, new_path_b))
      }
      j = j + BigInt(1)
    }
  }
  return ArrayBuffer(start)
}

def path_to_string(path: ArrayBuffer[String]): String = {
  if (BigInt((path).size) == BigInt(0)) {
    return "[]"
  }
  var first: ArrayBuffer[BigInt] = parse_key(path.lift((BigInt(0).toInt).toInt).getOrElse(""))
  var s: String = "[(" + _str(first.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))) + ", " + _str(first.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))) + ")"
  var i: BigInt = BigInt(1)
  while (i < BigInt((path).size)) {
    val c: ArrayBuffer[BigInt] = parse_key(path.lift((i.toInt).toInt).getOrElse(""))
    s = s + ", (" + _str(c.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))) + ", " + _str(c.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))) + ")"
    i = i + BigInt(1)
  }
  s = s + "]"
  return s
}

val grid: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(1), BigInt(0), BigInt(1), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(0), BigInt(0), BigInt(0), BigInt(1), BigInt(0), BigInt(0)))

val delta: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(-BigInt(1), BigInt(0)), ArrayBuffer(BigInt(0), -BigInt(1)), ArrayBuffer(BigInt(1), BigInt(0)), ArrayBuffer(BigInt(0), BigInt(1)))

val start: String = key(BigInt(0), BigInt(0))

val goal: String = key(BigInt((grid).size) - BigInt(1), BigInt((grid.lift((BigInt(0).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())).size) - BigInt(1))

val path1: ArrayBuffer[String] = bfs(start, goal)

val path2: ArrayBuffer[String] = bidirectional_bfs(start, goal)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(path_to_string(path1))
    println(path_to_string(path2))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
