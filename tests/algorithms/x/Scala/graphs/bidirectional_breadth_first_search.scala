// Generated by Mochi v0.10.59 on 2025-08-07 09:54:34 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Node(var pos: String, var path: ArrayBuffer[String])

def key(y: BigInt, x: BigInt): String = {
  return String.valueOf(y) + "," + String.valueOf(x)
}

def parse_int(s: String): BigInt = {
  var value: BigInt = 0
  var i: BigInt = 0
  while (i < BigInt((s).size)) {
    val c = s.slice((i.toInt).toInt, (i.toInt).toInt + 1)
    value = value * 10 + BigInt(c.toString.toDouble.toInt)
    i = i + 1
  }
  return value
}

def parse_key(k: String): ArrayBuffer[BigInt] = {
  var idx: BigInt = 0
  while (idx < BigInt((k).size) && k.slice((idx).toInt, (idx + 1).toInt) != ",") {
    idx = idx + 1
  }
  val y: BigInt = parse_int(k.slice((0).toInt, (idx).toInt))
  val x: BigInt = parse_int(k.slice((idx + 1).toInt, (BigInt((k).size)).toInt))
  return ArrayBuffer(y, x)
}

def neighbors(pos: String): ArrayBuffer[String] = {
  val coords: ArrayBuffer[BigInt] = parse_key(pos)
  val y: BigInt = coords((0.toInt).toInt)
  val x: BigInt = coords((1.toInt).toInt)
  var res: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = 0
  while (i < BigInt((delta).size)) {
    val ny: BigInt = y + delta((i.toInt).toInt)((0.toInt).toInt)
    val nx: BigInt = x + delta((i.toInt).toInt)((1.toInt).toInt)
    if ((((ny >= 0 && ny < BigInt((grid).size)).asInstanceOf[Boolean] && nx >= 0).asInstanceOf[Boolean] && nx < BigInt((grid((0.toInt).toInt)).size)).asInstanceOf[Boolean]) {
      if (grid((ny.toInt).toInt)((nx.toInt).toInt) == 0) {
        res = res :+ key(ny, nx)
      }
    }
    i = i + 1
  }
  return res
}

def reverse_list(lst: ArrayBuffer[String]): ArrayBuffer[String] = {
  var res: ArrayBuffer[String] = ArrayBuffer()
  var i: BigInt = BigInt((lst).size) - 1
  while (i >= 0) {
    res = res :+ lst((i.toInt).toInt)
    i = i - 1
  }
  return res
}

def bfs(start: String, goal: String): ArrayBuffer[String] = {
  var queue: ArrayBuffer[Node] = ArrayBuffer()
  queue = queue :+ Node(start, ArrayBuffer(start))
  var head: BigInt = 0
  var visited: scala.collection.mutable.Map[String,Boolean] = (scala.collection.mutable.Map("start" -> (true))).asInstanceOf[scala.collection.mutable.Map[String,Boolean]]
  while (head < BigInt((queue).size)) {
    val node: Node = queue((head.toInt).toInt)
    head = head + 1
    if (node.asInstanceOf[Node].pos == goal) {
      return node.asInstanceOf[Node].path
    }
    val neigh: ArrayBuffer[String] = neighbors(node.asInstanceOf[Node].pos)
    var i: BigInt = 0
    while (i < BigInt((neigh).size)) {
      val npos: String = neigh((i.toInt).toInt)
      if (!(visited.contains(npos)).asInstanceOf[Boolean]) {
        visited.update(npos, true)
        val new_path: ArrayBuffer[String] = node.asInstanceOf[Node].path :+ npos
        queue = queue :+ Node(npos, new_path)
      }
      i = i + 1
    }
  }
  return ArrayBuffer()
}

def bidirectional_bfs(start: String, goal: String): ArrayBuffer[String] = {
  var queue_f: ArrayBuffer[Node] = ArrayBuffer()
  var queue_b: ArrayBuffer[Node] = ArrayBuffer()
  queue_f = queue_f :+ Node(start, ArrayBuffer(start))
  queue_b = queue_b :+ Node(goal, ArrayBuffer(goal))
  var head_f: BigInt = 0
  var head_b: BigInt = 0
  var visited_f: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map("start" -> (ArrayBuffer(start)))).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]
  var visited_b: scala.collection.mutable.Map[String,ArrayBuffer[String]] = (scala.collection.mutable.Map("goal" -> (ArrayBuffer(goal)))).asInstanceOf[scala.collection.mutable.Map[String,ArrayBuffer[String]]]
  while (head_f < BigInt((queue_f).size) && head_b < BigInt((queue_b).size)) {
    val node_f: Node = queue_f((head_f.toInt).toInt)
    head_f = head_f + 1
    val neigh_f: ArrayBuffer[String] = neighbors(node_f.asInstanceOf[Node].pos)
    var i: BigInt = 0
    while (i < BigInt((neigh_f).size)) {
      val npos: String = neigh_f((i.toInt).toInt)
      if (!(visited_f.contains(npos)).asInstanceOf[Boolean]) {
        var new_path: ArrayBuffer[String] = node_f.asInstanceOf[Node].path :+ npos
        visited_f.update(npos, new_path)
        if ((visited_b.contains(npos)).asInstanceOf[Boolean]) {
          var rev: ArrayBuffer[String] = reverse_list(visited_b.getOrElse(npos.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]])
          var j: BigInt = 1
          while (j < BigInt((rev).size)) {
            new_path = new_path :+ rev((j.toInt).toInt)
            j = j + 1
          }
          return new_path
        }
        queue_f = queue_f :+ Node(npos, new_path)
      }
      i = i + 1
    }
    val node_b: Node = queue_b((head_b.toInt).toInt)
    head_b = head_b + 1
    val neigh_b: ArrayBuffer[String] = neighbors(node_b.asInstanceOf[Node].pos)
    var j: BigInt = 0
    while (j < BigInt((neigh_b).size)) {
      val nposb: String = neigh_b((j.toInt).toInt)
      if (!(visited_b.contains(nposb)).asInstanceOf[Boolean]) {
        var new_path_b: ArrayBuffer[String] = node_b.asInstanceOf[Node].path :+ nposb
        visited_b.update(nposb, new_path_b)
        if ((visited_f.contains(nposb)).asInstanceOf[Boolean]) {
          var path_f: ArrayBuffer[String] = visited_f.getOrElse(nposb.toString, ArrayBuffer[String]()).asInstanceOf[ArrayBuffer[String]]
          new_path_b = reverse_list(new_path_b)
          var t: BigInt = 1
          while (t < BigInt((new_path_b).size)) {
            path_f = path_f :+ new_path_b((t.toInt).toInt)
            t = t + 1
          }
          return path_f
        }
        queue_b = queue_b :+ Node(nposb, new_path_b)
      }
      j = j + 1
    }
  }
  return ArrayBuffer(start)
}

def path_to_string(path: ArrayBuffer[String]): String = {
  if (BigInt((path).size) == 0) {
    return "[]"
  }
  var first: ArrayBuffer[BigInt] = parse_key(path((0.toInt).toInt))
  var s: String = "[(" + String.valueOf(first((0.toInt).toInt)) + ", " + String.valueOf(first((1.toInt).toInt)) + ")"
  var i: BigInt = 1
  while (i < BigInt((path).size)) {
    val c: ArrayBuffer[BigInt] = parse_key(path((i.toInt).toInt))
    s = s + ", (" + String.valueOf(c((0.toInt).toInt)) + ", " + String.valueOf(c((1.toInt).toInt)) + ")"
    i = i + 1
  }
  s = s + "]"
  return s
}

val grid: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(0, 0, 0, 0, 0, 0, 0), ArrayBuffer(0, 1, 0, 0, 0, 0, 0), ArrayBuffer(0, 0, 0, 0, 0, 0, 0), ArrayBuffer(0, 0, 1, 0, 0, 0, 0), ArrayBuffer(1, 0, 1, 0, 0, 0, 0), ArrayBuffer(0, 0, 0, 0, 0, 0, 0), ArrayBuffer(0, 0, 0, 0, 1, 0, 0))

val delta: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(-1, 0), ArrayBuffer(0, -1), ArrayBuffer(1, 0), ArrayBuffer(0, 1))

val start: String = key(0, 0)

val goal: String = key(BigInt((grid).size) - 1, BigInt((grid((0.toInt).toInt)).size) - 1)

val path1: ArrayBuffer[String] = bfs(start, goal)

val path2: ArrayBuffer[String] = bidirectional_bfs(start, goal)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(path_to_string(path1))
    println(path_to_string(path2))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
