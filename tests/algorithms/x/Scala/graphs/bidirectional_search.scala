// Generated by Mochi v0.10.59 on 2025-08-07 11:14:49 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class ExpandResult(var queue: ArrayBuffer[BigInt], var head: BigInt, var parents: scala.collection.mutable.Map[BigInt,BigInt], var visited: scala.collection.mutable.Map[BigInt,Boolean], var intersection: BigInt, var found: Boolean)

case class SearchResult(var path: ArrayBuffer[BigInt], var ok: Boolean)

def expand_search(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], queue: ArrayBuffer[BigInt], _head: BigInt, parents: scala.collection.mutable.Map[BigInt,BigInt], visited: scala.collection.mutable.Map[BigInt,Boolean], opposite_visited: scala.collection.mutable.Map[BigInt,Boolean]): ExpandResult = {
  var head: BigInt = _head
  if (head >= BigInt((queue).size)) {
    return ExpandResult(queue, head, parents, visited, 0 - 1, false)
  }
  val current: BigInt = queue((head.toInt).toInt)
  head = head + 1
  val neighbors: ArrayBuffer[BigInt] = graph.getOrElse(current, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
  var q: ArrayBuffer[BigInt] = queue
  var p: scala.collection.mutable.Map[BigInt,BigInt] = parents
  var v: scala.collection.mutable.Map[BigInt,Boolean] = visited
  var i: BigInt = 0
  val _ct0 = new Breaks
  while (i < BigInt((neighbors).size)) {
    _ct0.breakable {
      val neighbor: BigInt = neighbors((i.toInt).toInt)
      if (v.getOrElse(neighbor, false).asInstanceOf[Boolean]) {
        i = i + 1
        _ct0.break()
      }
      v.update(neighbor, true)
      p.update(neighbor, current)
      q = q :+ neighbor
      if (opposite_visited.getOrElse(neighbor, false).asInstanceOf[Boolean]) {
        return ExpandResult(q, head, p, v, neighbor, true)
      }
      i = i + 1
    }
  }
  return ExpandResult(q, head, p, v, 0 - 1, false)
}

def construct_path(current: BigInt, parents: scala.collection.mutable.Map[BigInt,BigInt]): ArrayBuffer[BigInt] = {
  var path: ArrayBuffer[BigInt] = ArrayBuffer()
  var node: BigInt = current
  while (node != 0 - 1) {
    path = path :+ node
    node = parents.getOrElse(node, null).asInstanceOf[BigInt]
  }
  return path
}

def reverse_list(xs: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var res: ArrayBuffer[BigInt] = ArrayBuffer()
  var i: BigInt = BigInt((xs).size)
  while (i > 0) {
    i = i - 1
    res = res :+ xs((i.toInt).toInt)
  }
  return res
}

def bidirectional_search(g: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], start: BigInt, goal: BigInt): SearchResult = {
  if (start == goal) {
    return SearchResult(ArrayBuffer(start), true)
  }
  var forward_parents: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]
  forward_parents.update(start, 0 - 1)
  var backward_parents: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]
  backward_parents.update(goal, 0 - 1)
  var forward_visited: scala.collection.mutable.Map[BigInt,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,Boolean]]
  forward_visited.update(start, true)
  var backward_visited: scala.collection.mutable.Map[BigInt,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,Boolean]]
  backward_visited.update(goal, true)
  var forward_queue: ArrayBuffer[BigInt] = ArrayBuffer(start)
  var backward_queue: ArrayBuffer[BigInt] = ArrayBuffer(goal)
  var forward_head: BigInt = 0
  var backward_head: BigInt = 0
  var intersection: BigInt = 0 - 1
  val _br3 = new Breaks
  _br3.breakable {
    while ((forward_head < BigInt((forward_queue).size) && backward_head < BigInt((backward_queue).size)).asInstanceOf[Boolean] && intersection == 0 - 1) {
      var res: ExpandResult = expand_search(g, forward_queue, forward_head, forward_parents, forward_visited, backward_visited)
      forward_queue = res.asInstanceOf[ExpandResult].queue
      forward_head = res.asInstanceOf[ExpandResult].head
      forward_parents = res.asInstanceOf[ExpandResult].parents
      forward_visited = res.asInstanceOf[ExpandResult].visited
      if (res.asInstanceOf[ExpandResult].found) {
        intersection = res.asInstanceOf[ExpandResult].intersection
        _br3.break()
      }
      res = expand_search(g, backward_queue, backward_head, backward_parents, backward_visited, forward_visited)
      backward_queue = res.asInstanceOf[ExpandResult].queue
      backward_head = res.asInstanceOf[ExpandResult].head
      backward_parents = res.asInstanceOf[ExpandResult].parents
      backward_visited = res.asInstanceOf[ExpandResult].visited
      if (res.asInstanceOf[ExpandResult].found) {
        intersection = res.asInstanceOf[ExpandResult].intersection
        _br3.break()
      }
    }
  }
  if (intersection == 0 - 1) {
    return SearchResult(ArrayBuffer(), false)
  }
  var forward_path: ArrayBuffer[BigInt] = construct_path(intersection, forward_parents)
  forward_path = reverse_list(forward_path)
  var back_start: BigInt = backward_parents.getOrElse(intersection, null).asInstanceOf[BigInt]
  var backward_path: ArrayBuffer[BigInt] = construct_path(back_start, backward_parents)
  var result: ArrayBuffer[BigInt] = forward_path
  var j: BigInt = 0
  while (j < BigInt((backward_path).size)) {
    result = result :+ backward_path((j.toInt).toInt)
    j = j + 1
  }
  return SearchResult(result, true)
}

def is_edge(g: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], u: BigInt, v: BigInt): Boolean = {
  val neighbors: ArrayBuffer[BigInt] = g.getOrElse(u, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
  var i: BigInt = 0
  while (i < BigInt((neighbors).size)) {
    if (neighbors((i.toInt).toInt) == v) {
      return true
    }
    i = i + 1
  }
  return false
}

def path_exists(g: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], path: ArrayBuffer[BigInt]): Boolean = {
  if (BigInt((path).size) == 0) {
    return false
  }
  var i: BigInt = 0
  while (i + 1 < BigInt((path).size)) {
    if (!is_edge(g, path((i.toInt).toInt), path(((i + 1).toInt).toInt))) {
      return false
    }
    i = i + 1
  }
  return true
}

def print_path(g: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], s: BigInt, t: BigInt): Any = {
  val res: SearchResult = bidirectional_search(g, s, t)
  if ((res.asInstanceOf[SearchResult].ok && path_exists(g, res.asInstanceOf[SearchResult].path)).asInstanceOf[Boolean]) {
    println("Path from " + String.valueOf(s) + " to " + String.valueOf(t) + ": " + String.valueOf(res.asInstanceOf[SearchResult].path))
  } else {
    println("Path from " + String.valueOf(s) + " to " + String.valueOf(t) + ": None")
  }
}

def main(): Any = {
  val graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(1, 2)), BigInt(1) -> (ArrayBuffer(0, 3, 4)), BigInt(2) -> (ArrayBuffer(0, 5, 6)), BigInt(3) -> (ArrayBuffer(1, 7)), BigInt(4) -> (ArrayBuffer(1, 8)), BigInt(5) -> (ArrayBuffer(2, 9)), BigInt(6) -> (ArrayBuffer(2, 10)), BigInt(7) -> (ArrayBuffer(3, 11)), BigInt(8) -> (ArrayBuffer(4, 11)), BigInt(9) -> (ArrayBuffer(5, 11)), BigInt(10) -> (ArrayBuffer(6, 11)), BigInt(11) -> (ArrayBuffer(7, 8, 9, 10)))
  print_path(graph, 0, 11)
  print_path(graph, 5, 5)
  val disconnected: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(1, 2)), BigInt(1) -> (ArrayBuffer(0)), BigInt(2) -> (ArrayBuffer(0)), BigInt(3) -> (ArrayBuffer(4)), BigInt(4) -> (ArrayBuffer(3)))
  print_path(disconnected, 0, 3)
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
