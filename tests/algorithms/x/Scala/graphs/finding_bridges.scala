// Generated by Mochi v0.10.66 on 2025-08-15 10:33:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class DfsResult(var id: BigInt, var bridges: ArrayBuffer[ArrayBuffer[BigInt]])

def dfs(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], at: BigInt, parent: BigInt, visited: ArrayBuffer[Boolean], ids: ArrayBuffer[BigInt], low: ArrayBuffer[BigInt], id: BigInt, bridges: ArrayBuffer[ArrayBuffer[BigInt]]): DfsResult = {
  visited((at).toInt) = true
  ids((at).toInt) = id
  low((at).toInt) = id
  var current_id: BigInt = id + BigInt(1)
  var res_bridges: ArrayBuffer[ArrayBuffer[BigInt]] = bridges
  val _ct0 = new Breaks
  for (to <- graph.getOrElse(at, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]) {
    _ct0.breakable {
      if (to == parent) {
        _ct0.break()
      } else {
        if (!visited.lift((to.toInt).toInt).getOrElse(false)) {
          var result: DfsResult = dfs(graph, to, at, visited, ids, low, current_id, res_bridges)
          current_id = result.asInstanceOf[DfsResult].id
          res_bridges = result.asInstanceOf[DfsResult].bridges
          if (low.lift((at.toInt).toInt).getOrElse(BigInt(0)) > low.lift((to.toInt).toInt).getOrElse(BigInt(0))) {
            low((at).toInt) = low.lift((to.toInt).toInt).getOrElse(BigInt(0))
          }
          if (ids.lift((at.toInt).toInt).getOrElse(BigInt(0)) < low.lift((to.toInt).toInt).getOrElse(BigInt(0))) {
            var edge: ArrayBuffer[BigInt] = (if (at < to) ArrayBuffer(at, to) else ArrayBuffer(to, at))
            res_bridges = (res_bridges :+ edge)
          }
        } else {
          if (low.lift((at.toInt).toInt).getOrElse(BigInt(0)) > ids.lift((to.toInt).toInt).getOrElse(BigInt(0))) {
            low((at).toInt) = ids.lift((to.toInt).toInt).getOrElse(BigInt(0))
          }
        }
      }
    }
  }
  return DfsResult(current_id, res_bridges)
}

def compute_bridges(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var n: BigInt = BigInt((graph).size)
  var visited: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var ids: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var low: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    visited = (visited :+ false)
    ids = (ids :+ BigInt(0))
    low = (low :+ BigInt(0))
    i = i + BigInt(1)
  }
  var bridges: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var id: BigInt = BigInt(0)
  i = BigInt(0)
  while (i < n) {
    if (!visited.lift((i.toInt).toInt).getOrElse(false)) {
      var result: DfsResult = dfs(graph, i, -BigInt(1), visited, ids, low, id, bridges)
      id = result.asInstanceOf[DfsResult].id
      bridges = result.asInstanceOf[DfsResult].bridges
    }
    i = i + BigInt(1)
  }
  return bridges
}

def get_demo_graph(index: BigInt): scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = {
  if (index == BigInt(0)) {
    return (scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(BigInt(1), BigInt(2))), BigInt(1) -> (ArrayBuffer(BigInt(0), BigInt(2))), BigInt(2) -> (ArrayBuffer(BigInt(0), BigInt(1), BigInt(3), BigInt(5))), BigInt(3) -> (ArrayBuffer(BigInt(2), BigInt(4))), BigInt(4) -> (ArrayBuffer(BigInt(3))), BigInt(5) -> (ArrayBuffer(BigInt(2), BigInt(6), BigInt(8))), BigInt(6) -> (ArrayBuffer(BigInt(5), BigInt(7))), BigInt(7) -> (ArrayBuffer(BigInt(6), BigInt(8))), BigInt(8) -> (ArrayBuffer(BigInt(5), BigInt(7))))).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]]
  }
  if (index == BigInt(1)) {
    return (scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(BigInt(6))), BigInt(1) -> (ArrayBuffer(BigInt(9))), BigInt(2) -> (ArrayBuffer(BigInt(4), BigInt(5))), BigInt(3) -> (ArrayBuffer(BigInt(4))), BigInt(4) -> (ArrayBuffer(BigInt(2), BigInt(3))), BigInt(5) -> (ArrayBuffer(BigInt(2))), BigInt(6) -> (ArrayBuffer(BigInt(0), BigInt(7))), BigInt(7) -> (ArrayBuffer(BigInt(6))), BigInt(8) -> (ArrayBuffer()), BigInt(9) -> (ArrayBuffer(BigInt(1))))).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]]
  }
  if (index == BigInt(2)) {
    return (scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(BigInt(4))), BigInt(1) -> (ArrayBuffer(BigInt(6))), BigInt(2) -> (ArrayBuffer()), BigInt(3) -> (ArrayBuffer(BigInt(5), BigInt(6), BigInt(7))), BigInt(4) -> (ArrayBuffer(BigInt(0), BigInt(6))), BigInt(5) -> (ArrayBuffer(BigInt(3), BigInt(8), BigInt(9))), BigInt(6) -> (ArrayBuffer(BigInt(1), BigInt(3), BigInt(4), BigInt(7))), BigInt(7) -> (ArrayBuffer(BigInt(3), BigInt(6), BigInt(8), BigInt(9))), BigInt(8) -> (ArrayBuffer(BigInt(5), BigInt(7))), BigInt(9) -> (ArrayBuffer(BigInt(5), BigInt(7))))).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]]
  }
  return (scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(BigInt(1), BigInt(3))), BigInt(1) -> (ArrayBuffer(BigInt(0), BigInt(2), BigInt(4))), BigInt(2) -> (ArrayBuffer(BigInt(1), BigInt(3), BigInt(4))), BigInt(3) -> (ArrayBuffer(BigInt(0), BigInt(2), BigInt(4))), BigInt(4) -> (ArrayBuffer(BigInt(1), BigInt(2), BigInt(3))))).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]]
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(compute_bridges(get_demo_graph(BigInt(0))))
    println(compute_bridges(get_demo_graph(BigInt(1))))
    println(compute_bridges(get_demo_graph(BigInt(2))))
    println(compute_bridges(get_demo_graph(BigInt(3))))
    println(compute_bridges((scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]]))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
