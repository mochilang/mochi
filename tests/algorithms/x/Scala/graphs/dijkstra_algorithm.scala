// Generated by Mochi v0.10.59 on 2025-08-07 11:22:04 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Edge(var node: BigInt, var weight: BigInt)

def make_int_list(n: BigInt, value: BigInt): ArrayBuffer[BigInt] = {
  var lst: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    lst = lst :+ value
    i = i + BigInt(1)
  }
  return lst
}

def make_bool_list(n: BigInt): ArrayBuffer[Boolean] = {
  var lst: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    lst = lst :+ false
    i = i + BigInt(1)
  }
  return lst
}

def dijkstra(graph: ArrayBuffer[ArrayBuffer[Edge]], src: BigInt): ArrayBuffer[BigInt] = {
  val n: BigInt = BigInt((graph).size)
  var dist: ArrayBuffer[BigInt] = make_int_list(n, BigInt(1000000000))
  var visited: ArrayBuffer[Boolean] = make_bool_list(n)
  dist((src).toInt) = BigInt(0)
  var count: BigInt = BigInt(0)
  val _br2 = new Breaks
  _br2.breakable {
    while (count < n) {
      var u: BigInt = -BigInt(1)
      var min_dist: BigInt = BigInt(1000000000)
      var i: BigInt = BigInt(0)
      while (i < n) {
        if ((!visited((i.toInt).toInt) && dist((i.toInt).toInt) < min_dist).asInstanceOf[Boolean]) {
          min_dist = dist((i.toInt).toInt)
          u = i
        }
        i = i + BigInt(1)
      }
      if (u < BigInt(0)) {
        _br2.break()
      }
      visited((u).toInt) = true
      var j: BigInt = BigInt(0)
      while (j < BigInt((graph((u.toInt).toInt)).size)) {
        val e: Edge = graph((u.toInt).toInt)((j.toInt).toInt)
        val v: BigInt = e.asInstanceOf[Edge].node
        val w: BigInt = e.asInstanceOf[Edge].weight
        if (!visited((v.toInt).toInt)) {
          val new_dist: BigInt = dist((u.toInt).toInt) + w
          if (new_dist < dist((v.toInt).toInt)) {
            dist((v).toInt) = new_dist
          }
        }
        j = j + BigInt(1)
      }
      count = count + BigInt(1)
    }
  }
  return dist
}

val graph: ArrayBuffer[ArrayBuffer[Edge]] = ArrayBuffer(ArrayBuffer(Edge(BigInt(1), BigInt(10)), Edge(BigInt(3), BigInt(5))), ArrayBuffer(Edge(BigInt(2), BigInt(1)), Edge(BigInt(3), BigInt(2))), ArrayBuffer(Edge(BigInt(4), BigInt(4))), ArrayBuffer(Edge(BigInt(1), BigInt(3)), Edge(BigInt(2), BigInt(9)), Edge(BigInt(4), BigInt(2))), ArrayBuffer(Edge(BigInt(0), BigInt(7)), Edge(BigInt(2), BigInt(6))))

val dist: ArrayBuffer[BigInt] = dijkstra(graph, BigInt(0))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(dist((BigInt(0).toInt).toInt)))
    println(String.valueOf(dist((BigInt(1).toInt).toInt)))
    println(String.valueOf(dist((BigInt(2).toInt).toInt)))
    println(String.valueOf(dist((BigInt(3).toInt).toInt)))
    println(String.valueOf(dist((BigInt(4).toInt).toInt)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
