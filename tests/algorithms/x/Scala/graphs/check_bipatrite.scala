// Generated by Mochi v0.10.59 on 2025-08-07 11:16:18 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

def is_bipartite_bfs(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]]): Boolean = {
  var visited: scala.collection.mutable.Map[BigInt,BigInt] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,BigInt]]
  for (node <- graph.keys) {
    if (!(visited.contains(node)).asInstanceOf[Boolean]) {
      var queue: ArrayBuffer[BigInt] = ArrayBuffer()
      queue = queue :+ node
      visited.update(node, 0)
      while (BigInt((queue).size) > 0) {
        val curr: BigInt = queue((0.toInt).toInt)
        queue = queue.slice((1).toInt, (BigInt((queue).size)).toInt)
        for (neighbor <- graph.getOrElse(curr, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]) {
          if (!(visited.contains(neighbor)).asInstanceOf[Boolean]) {
            visited.update(neighbor, 1 - visited.getOrElse(curr, null).asInstanceOf[BigInt])
            queue = queue :+ neighbor
          } else {
            if (visited.getOrElse(neighbor, null).asInstanceOf[BigInt] == visited.getOrElse(curr, null).asInstanceOf[BigInt]) {
              return false
            }
          }
        }
      }
    }
  }
  return true
}

val graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(0) -> (ArrayBuffer(1, 3)), BigInt(1) -> (ArrayBuffer(0, 2)), BigInt(2) -> (ArrayBuffer(1, 3)), BigInt(3) -> (ArrayBuffer(0, 2)))

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(String.valueOf(is_bipartite_bfs(graph)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
