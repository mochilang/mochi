// Generated by Mochi v0.10.59 on 2025-08-07 11:22:54 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class CheckResult(var status: BigInt, var odd_node: BigInt)

def make_matrix(n: BigInt): ArrayBuffer[ArrayBuffer[Boolean]] = {
  var matrix: ArrayBuffer[ArrayBuffer[Boolean]] = ArrayBuffer[ArrayBuffer[Boolean]]()
  var i: BigInt = BigInt(0)
  while (i <= n) {
    var row: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
    var j: BigInt = BigInt(0)
    while (j <= n) {
      row = row :+ false
      j = j + BigInt(1)
    }
    matrix = matrix :+ row
    i = i + BigInt(1)
  }
  return matrix
}

def dfs(u: BigInt, graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], visited_edge: ArrayBuffer[ArrayBuffer[Boolean]], _path: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var path: ArrayBuffer[BigInt] = _path
  path = path :+ u
  if ((graph.contains(u)).asInstanceOf[Boolean]) {
    val neighbors: ArrayBuffer[BigInt] = graph.getOrElse(u, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
    var i: BigInt = BigInt(0)
    while (i < BigInt((neighbors).size)) {
      val v: BigInt = neighbors((i.toInt).toInt)
      if (visited_edge((u.toInt).toInt)((v.toInt).toInt) == false) {
        visited_edge((u).toInt)((v).toInt) = true
        visited_edge((v).toInt)((u).toInt) = true
        path = dfs(v, graph, visited_edge, path)
      }
      i = i + BigInt(1)
    }
  }
  return path
}

def check_circuit_or_path(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], max_node: BigInt): CheckResult = {
  var odd_degree_nodes: BigInt = BigInt(0)
  var odd_node: BigInt = -BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < max_node) {
    if ((graph.contains(i)).asInstanceOf[Boolean]) {
      if (BigInt((graph.getOrElse(i, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]).size) % BigInt(2) == BigInt(1)) {
        odd_degree_nodes = odd_degree_nodes + BigInt(1)
        odd_node = i
      }
    }
    i = i + BigInt(1)
  }
  if (odd_degree_nodes == BigInt(0)) {
    return CheckResult(BigInt(1), odd_node)
  }
  if (odd_degree_nodes == BigInt(2)) {
    return CheckResult(BigInt(2), odd_node)
  }
  return CheckResult(BigInt(3), odd_node)
}

def check_euler(graph: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], max_node: BigInt): Any = {
  var visited_edge: ArrayBuffer[ArrayBuffer[Boolean]] = make_matrix(max_node)
  val res: CheckResult = check_circuit_or_path(graph, max_node)
  if (res.asInstanceOf[CheckResult].status == BigInt(3)) {
    println("graph is not Eulerian")
    println("no path")
    return
  }
  var start_node: BigInt = BigInt(1)
  if (res.asInstanceOf[CheckResult].status == BigInt(2)) {
    start_node = res.asInstanceOf[CheckResult].odd_node
    println("graph has a Euler path")
  }
  if (res.asInstanceOf[CheckResult].status == BigInt(1)) {
    println("graph has a Euler cycle")
  }
  val path: ArrayBuffer[BigInt] = dfs(start_node, graph, visited_edge, ArrayBuffer[BigInt]())
  println(String.valueOf(path))
  return null
}

val g1: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(1) -> (ArrayBuffer(BigInt(2), BigInt(3), BigInt(4))), BigInt(2) -> (ArrayBuffer(BigInt(1), BigInt(3))), BigInt(3) -> (ArrayBuffer(BigInt(1), BigInt(2))), BigInt(4) -> (ArrayBuffer(BigInt(1), BigInt(5))), BigInt(5) -> (ArrayBuffer(BigInt(4))))

val g2: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(1) -> (ArrayBuffer(BigInt(2), BigInt(3), BigInt(4), BigInt(5))), BigInt(2) -> (ArrayBuffer(BigInt(1), BigInt(3))), BigInt(3) -> (ArrayBuffer(BigInt(1), BigInt(2))), BigInt(4) -> (ArrayBuffer(BigInt(1), BigInt(5))), BigInt(5) -> (ArrayBuffer(BigInt(1), BigInt(4))))

val g3: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(1) -> (ArrayBuffer(BigInt(2), BigInt(3), BigInt(4))), BigInt(2) -> (ArrayBuffer(BigInt(1), BigInt(3), BigInt(4))), BigInt(3) -> (ArrayBuffer(BigInt(1), BigInt(2))), BigInt(4) -> (ArrayBuffer(BigInt(1), BigInt(2), BigInt(5))), BigInt(5) -> (ArrayBuffer(BigInt(4))))

val g4: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(1) -> (ArrayBuffer(BigInt(2), BigInt(3))), BigInt(2) -> (ArrayBuffer(BigInt(1), BigInt(3))), BigInt(3) -> (ArrayBuffer(BigInt(1), BigInt(2))))

val g5: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = scala.collection.mutable.Map(BigInt(1) -> (ArrayBuffer()), BigInt(2) -> (ArrayBuffer()))

val max_node: BigInt = BigInt(10)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    check_euler(g1, max_node)
    check_euler(g2, max_node)
    check_euler(g3, max_node)
    check_euler(g4, max_node)
    check_euler(g5, max_node)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
