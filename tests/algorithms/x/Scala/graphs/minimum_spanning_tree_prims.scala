// Generated by Mochi v0.10.59 on 2025-08-07 11:24:51 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Edge(var to: BigInt, var weight: BigInt)

case class Pair(var u: BigInt, var v: BigInt)

def pairs_to_string(edges: ArrayBuffer[Pair]): String = {
  var s: String = "["
  var i: BigInt = BigInt(0)
  while (i < BigInt((edges).size)) {
    val e: Pair = edges((i.toInt).toInt)
    s = s + "(" + String.valueOf(e.asInstanceOf[Pair].u) + ", " + String.valueOf(e.asInstanceOf[Pair].v) + ")"
    if (i < BigInt((edges).size) - BigInt(1)) {
      s = s + ", "
    }
    i = i + BigInt(1)
  }
  return s + "]"
}

def prim_mst(graph: ArrayBuffer[ArrayBuffer[Edge]]): ArrayBuffer[Pair] = {
  val n: BigInt = BigInt((graph).size)
  var visited: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var dist: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var parent: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    visited = visited :+ false
    dist = dist :+ INF
    parent = parent :+ BigInt((-BigInt(1)).toString.toDouble.toInt)
    i = i + BigInt(1)
  }
  dist((BigInt(0)).toInt) = BigInt(0)
  var result: ArrayBuffer[Pair] = ArrayBuffer[Pair]()
  var count: BigInt = BigInt(0)
  val _br2 = new Breaks
  _br2.breakable {
    while (count < n) {
      var min_val: BigInt = INF
      var u: BigInt = BigInt(0)
      var v: BigInt = BigInt(0)
      while (v < n) {
        if ((visited((v.toInt).toInt) == false && dist((v.toInt).toInt) < min_val).asInstanceOf[Boolean]) {
          min_val = dist((v.toInt).toInt)
          u = v
        }
        v = v + BigInt(1)
      }
      if (min_val == INF) {
        _br2.break()
      }
      visited((u).toInt) = true
      if (u != BigInt(0)) {
        result = result :+ Pair(parent((u.toInt).toInt), u)
      }
      for (e <- graph((u.toInt).toInt)) {
        if ((visited((e.asInstanceOf[Edge].to.toInt).toInt) == false && e.asInstanceOf[Edge].weight < dist((e.asInstanceOf[Edge].to.toInt).toInt)).asInstanceOf[Boolean]) {
          dist((e.asInstanceOf[Edge].to).toInt) = e.asInstanceOf[Edge].weight
          parent((e.asInstanceOf[Edge].to).toInt) = u
        }
      }
      count = count + BigInt(1)
    }
  }
  return result
}

val INF: BigInt = BigInt(1000000000)

val adjacency_list: ArrayBuffer[ArrayBuffer[Edge]] = ArrayBuffer(ArrayBuffer(Edge(BigInt(1), BigInt(1)), Edge(BigInt(3), BigInt(3))), ArrayBuffer(Edge(BigInt(0), BigInt(1)), Edge(BigInt(2), BigInt(6)), Edge(BigInt(3), BigInt(5)), Edge(BigInt(4), BigInt(1))), ArrayBuffer(Edge(BigInt(1), BigInt(6)), Edge(BigInt(4), BigInt(5)), Edge(BigInt(5), BigInt(2))), ArrayBuffer(Edge(BigInt(0), BigInt(3)), Edge(BigInt(1), BigInt(5)), Edge(BigInt(4), BigInt(1))), ArrayBuffer(Edge(BigInt(1), BigInt(1)), Edge(BigInt(2), BigInt(5)), Edge(BigInt(3), BigInt(1)), Edge(BigInt(5), BigInt(4))), ArrayBuffer(Edge(BigInt(2), BigInt(2)), Edge(BigInt(4), BigInt(4))))

val mst_edges: ArrayBuffer[Pair] = prim_mst(adjacency_list)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(pairs_to_string(mst_edges))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
