// Generated by Mochi v0.10.63 on 2025-08-12 08:47:52 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def tarjan(g: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  val n: BigInt = BigInt((g).size)
  var stack: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var on_stack: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var index_of: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var lowlink_of: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    on_stack = on_stack :+ (false)
    index_of = index_of :+ (BigInt(-1))
    lowlink_of = lowlink_of :+ (BigInt(-1))
    i = i + BigInt(1)
  }
  var components: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  def strong_connect(v: BigInt, index: BigInt): BigInt = {
    index_of((v).toInt) = index
    lowlink_of((v).toInt) = index
    var current_index: BigInt = index + BigInt(1)
    stack = stack :+ (v)
    on_stack((v).toInt) = true
    for (w <- g.lift((v.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())) {
      if (index_of.lift((w.toInt).toInt).getOrElse(BigInt(0)) == BigInt(-1)) {
        current_index = strong_connect(w, current_index)
        if (lowlink_of.lift((w.toInt).toInt).getOrElse(BigInt(0)) < lowlink_of.lift((v.toInt).toInt).getOrElse(BigInt(0))) {
          lowlink_of((v).toInt) = lowlink_of.lift((w.toInt).toInt).getOrElse(BigInt(0))
        }
      } else {
        if (on_stack.lift((w.toInt).toInt).getOrElse(false)) {
          if (lowlink_of.lift((w.toInt).toInt).getOrElse(BigInt(0)) < lowlink_of.lift((v.toInt).toInt).getOrElse(BigInt(0))) {
            lowlink_of((v).toInt) = lowlink_of.lift((w.toInt).toInt).getOrElse(BigInt(0))
          }
        }
      }
    }
    if (lowlink_of.lift((v.toInt).toInt).getOrElse(BigInt(0)) == index_of.lift((v.toInt).toInt).getOrElse(BigInt(0))) {
      var component: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
      var w: BigInt = stack.lift(((BigInt((stack).size) - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
      stack = stack.slice((BigInt(0)).toInt, (BigInt((stack).size) - BigInt(1)).toInt)
      on_stack((w).toInt) = false
      component = component :+ (w)
      while (w != v) {
        w = stack.lift(((BigInt((stack).size) - BigInt(1)).toInt).toInt).getOrElse(BigInt(0))
        stack = stack.slice((BigInt(0)).toInt, (BigInt((stack).size) - BigInt(1)).toInt)
        on_stack((w).toInt) = false
        component = component :+ (w)
      }
      components = components :+ (component)
    }
    return current_index
  }
  var v: BigInt = BigInt(0)
  while (v < n) {
    if (index_of.lift((v.toInt).toInt).getOrElse(BigInt(0)) == BigInt(-1)) {
      strong_connect(v, BigInt(0))
    }
    v = v + BigInt(1)
  }
  return components
}

def create_graph(n: BigInt, edges: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var g: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    g = g :+ (ArrayBuffer[BigInt]())
    i = i + BigInt(1)
  }
  for (e <- edges) {
    val u: BigInt = e.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
    val v: BigInt = e.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
    g((u).toInt) = g.lift((u.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()) :+ (v)
  }
  return g
}

def main(): Any = {
  val n_vertices: BigInt = BigInt(7)
  val source: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(0), BigInt(0), BigInt(1), BigInt(2), BigInt(3), BigInt(3), BigInt(4), BigInt(4), BigInt(6))
  val target: ArrayBuffer[BigInt] = ArrayBuffer(BigInt(1), BigInt(3), BigInt(2), BigInt(0), BigInt(1), BigInt(4), BigInt(5), BigInt(6), BigInt(5))
  var edges: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var i: BigInt = BigInt(0)
  while (i < BigInt((source).size)) {
    edges = edges :+ (ArrayBuffer(source.lift((i.toInt).toInt).getOrElse(BigInt(0)), target.lift((i.toInt).toInt).getOrElse(BigInt(0))))
    i = i + BigInt(1)
  }
  val g: ArrayBuffer[ArrayBuffer[BigInt]] = create_graph(n_vertices, edges)
  println(_str(tarjan(g)))
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
