// Generated by Mochi v0.10.59 on 2025-08-07 11:21:47 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Graph(var vertex: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]], var size: BigInt)

def add_edge(g: Graph, from_vertex: BigInt, to_vertex: BigInt): Graph = {
  var v: scala.collection.mutable.Map[BigInt,ArrayBuffer[BigInt]] = g.vertex
  if ((v.contains(from_vertex)).asInstanceOf[Boolean]) {
    var lst: ArrayBuffer[BigInt] = v.getOrElse(from_vertex, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
    lst = lst :+ to_vertex
    v.update(from_vertex, lst)
  } else {
    v.update(from_vertex, ArrayBuffer(to_vertex))
  }
  g.vertex = v
  if (from_vertex + BigInt(1) > g.size) {
    g.size = from_vertex + BigInt(1)
  }
  if (to_vertex + BigInt(1) > g.size) {
    g.size = to_vertex + BigInt(1)
  }
  return g
}

def list_to_string(lst: ArrayBuffer[BigInt]): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((lst).size)) {
    res = res + String.valueOf(lst((i.toInt).toInt))
    if (i < BigInt((lst).size) - BigInt(1)) {
      res = res + " "
    }
    i = i + BigInt(1)
  }
  return res
}

def list_to_arrow(lst: ArrayBuffer[BigInt]): String = {
  var res: String = ""
  var i: BigInt = BigInt(0)
  while (i < BigInt((lst).size)) {
    res = res + String.valueOf(lst((i.toInt).toInt))
    if (i < BigInt((lst).size) - BigInt(1)) {
      res = res + " -> "
    }
    i = i + BigInt(1)
  }
  return res
}

def print_graph(g: Graph): Any = {
  println(String.valueOf(g.vertex))
  var i: BigInt = BigInt(0)
  while (i < g.size) {
    var edges: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
    if ((g.vertex.contains(i)).asInstanceOf[Boolean]) {
      edges = g.vertex.getOrElse(i, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
    }
    val line: String = String.valueOf(i) + "  ->  " + list_to_arrow(edges)
    println(line)
    i = i + BigInt(1)
  }
}

def dfs_recursive(g: Graph, start_vertex: BigInt, visited: ArrayBuffer[Boolean], _order: ArrayBuffer[BigInt]): ArrayBuffer[BigInt] = {
  var order: ArrayBuffer[BigInt] = _order
  visited((start_vertex).toInt) = true
  order = order :+ start_vertex
  if ((g.vertex.contains(start_vertex)).asInstanceOf[Boolean]) {
    var neighbors: ArrayBuffer[BigInt] = g.vertex.getOrElse(start_vertex, ArrayBuffer[BigInt]()).asInstanceOf[ArrayBuffer[BigInt]]
    var i: BigInt = BigInt(0)
    while (i < BigInt((neighbors).size)) {
      val nb: BigInt = neighbors((i.toInt).toInt)
      if (!visited((nb.toInt).toInt)) {
        order = dfs_recursive(g, nb, visited, order)
      }
      i = i + BigInt(1)
    }
  }
  return order
}

def dfs(g: Graph): ArrayBuffer[BigInt] = {
  val n: BigInt = g.size
  var visited: ArrayBuffer[Boolean] = ArrayBuffer[Boolean]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    visited = visited :+ false
    i = i + BigInt(1)
  }
  var order: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  i = BigInt(0)
  while (i < n) {
    if (!visited((i.toInt).toInt)) {
      order = dfs_recursive(g, i, visited, order)
    }
    i = i + BigInt(1)
  }
  return order
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var g: Graph = Graph(scala.collection.mutable.Map(), BigInt(0))
    g = add_edge(g, BigInt(0), BigInt(1))
    g = add_edge(g, BigInt(0), BigInt(2))
    g = add_edge(g, BigInt(1), BigInt(2))
    g = add_edge(g, BigInt(2), BigInt(0))
    g = add_edge(g, BigInt(2), BigInt(3))
    g = add_edge(g, BigInt(3), BigInt(3))
    print_graph(g)
    println("DFS:")
    println(list_to_string(dfs(g)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
