// Generated by Mochi v0.10.66 on 2025-08-15 10:41:36 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
    if (!_nowSeeded) { _nowSeed = 0L; _nowSeeded = true }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

private def _str(x: Any): String = x match {
  case m: scala.collection.Map[_, _] => scala.collection.immutable.ListMap(m.toSeq.sortBy(_._1.toString): _*).toString.replace("ListMap", "Map")
  case d: Double => if (d.isWhole) d.toLong.toString else d.toString
  case other => String.valueOf(other)
}

def sort_edges(edges: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var es: ArrayBuffer[ArrayBuffer[BigInt]] = edges
  var i: BigInt = BigInt(0)
  while (i < BigInt((es).size)) {
    var j: BigInt = BigInt(0)
    while (j < BigInt((es).size) - i - BigInt(1)) {
      if (es.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(2).toInt).toInt).getOrElse(BigInt(0)) > es.lift(((j + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]()).lift((BigInt(2).toInt).toInt).getOrElse(BigInt(0))) {
        var tmp: ArrayBuffer[BigInt] = es.lift((j.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
        es((j).toInt) = es.lift(((j + BigInt(1)).toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
        es((j + BigInt(1)).toInt) = tmp
      }
      j = j + BigInt(1)
    }
    i = i + BigInt(1)
  }
  return es
}

def find(parent: ArrayBuffer[BigInt], x: BigInt): BigInt = {
  var r: BigInt = x
  while (parent.lift((r.toInt).toInt).getOrElse(BigInt(0)) != r) {
    r = parent.lift((r.toInt).toInt).getOrElse(BigInt(0))
  }
  return r
}

def kruskal(n: BigInt, edges: ArrayBuffer[ArrayBuffer[BigInt]]): ArrayBuffer[ArrayBuffer[BigInt]] = {
  var parent: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    parent = (parent :+ i)
    i = i + BigInt(1)
  }
  var sorted: ArrayBuffer[ArrayBuffer[BigInt]] = sort_edges(edges)
  var mst: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
  var e: BigInt = BigInt(0)
  val _br4 = new Breaks
  _br4.breakable {
    while (e < BigInt((sorted).size)) {
      if (BigInt((mst).size) == n - BigInt(1)) {
        _br4.break()
      }
      var edge: ArrayBuffer[BigInt] = sorted.lift((e.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
      e = e + BigInt(1)
      var u: BigInt = edge.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0))
      var v: BigInt = edge.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))
      var w: BigInt = edge.lift((BigInt(2).toInt).toInt).getOrElse(BigInt(0))
      var ru: BigInt = find(parent, u)
      var rv: BigInt = find(parent, v)
      if (ru != rv) {
        parent((ru).toInt) = rv
        mst = (mst :+ ArrayBuffer(BigInt(u.toString.toDouble.toInt), BigInt(v.toString.toDouble.toInt), BigInt(w.toString.toDouble.toInt)))
      }
    }
  }
  return mst
}

def edges_equal(a: ArrayBuffer[ArrayBuffer[BigInt]], b: ArrayBuffer[ArrayBuffer[BigInt]]): Boolean = {
  if (BigInt((a).size) != BigInt((b).size)) {
    return false
  }
  var i: BigInt = BigInt(0)
  while (i < BigInt((a).size)) {
    var e1: ArrayBuffer[BigInt] = a.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    var e2: ArrayBuffer[BigInt] = b.lift((i.toInt).toInt).getOrElse(ArrayBuffer[BigInt]())
    if (((e1.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) != e2.lift((BigInt(0).toInt).toInt).getOrElse(BigInt(0)) || e1.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0)) != e2.lift((BigInt(1).toInt).toInt).getOrElse(BigInt(0))).asInstanceOf[Boolean] || e1.lift((BigInt(2).toInt).toInt).getOrElse(BigInt(0)) != e2.lift((BigInt(2).toInt).toInt).getOrElse(BigInt(0)))) {
      return false
    }
    i = i + BigInt(1)
  }
  return true
}

def main(): Any = {
  var num_nodes: BigInt = BigInt(9)
  var edges: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(4)), ArrayBuffer(BigInt(0), BigInt(7), BigInt(8)), ArrayBuffer(BigInt(1), BigInt(2), BigInt(8)), ArrayBuffer(BigInt(7), BigInt(8), BigInt(7)), ArrayBuffer(BigInt(7), BigInt(6), BigInt(1)), ArrayBuffer(BigInt(2), BigInt(8), BigInt(2)), ArrayBuffer(BigInt(8), BigInt(6), BigInt(6)), ArrayBuffer(BigInt(2), BigInt(3), BigInt(7)), ArrayBuffer(BigInt(2), BigInt(5), BigInt(4)), ArrayBuffer(BigInt(6), BigInt(5), BigInt(2)), ArrayBuffer(BigInt(3), BigInt(5), BigInt(14)), ArrayBuffer(BigInt(3), BigInt(4), BigInt(9)), ArrayBuffer(BigInt(5), BigInt(4), BigInt(10)), ArrayBuffer(BigInt(1), BigInt(7), BigInt(11)))
  var expected: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(7), BigInt(6), BigInt(1)), ArrayBuffer(BigInt(2), BigInt(8), BigInt(2)), ArrayBuffer(BigInt(6), BigInt(5), BigInt(2)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(4)), ArrayBuffer(BigInt(2), BigInt(5), BigInt(4)), ArrayBuffer(BigInt(2), BigInt(3), BigInt(7)), ArrayBuffer(BigInt(0), BigInt(7), BigInt(8)), ArrayBuffer(BigInt(3), BigInt(4), BigInt(9)))
  var result: ArrayBuffer[ArrayBuffer[BigInt]] = kruskal(num_nodes, edges)
  var sorted_result: ArrayBuffer[ArrayBuffer[BigInt]] = sort_edges(result)
  var sorted_expected: ArrayBuffer[ArrayBuffer[BigInt]] = sort_edges(expected)
  println(_str(_str(sorted_result)))
  if (edges_equal(sorted_expected, sorted_result)) {
    println(_str(true))
  } else {
    println(_str(false))
  }
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    main()
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start).abs / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
