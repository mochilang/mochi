// Generated by Mochi v0.10.59 on 2025-08-07 11:25:39 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Neighbor(var node: BigInt, var cost: BigInt)

case class EdgePair(var u: BigInt, var v: BigInt)

def prims_algorithm(adjacency: scala.collection.mutable.Map[BigInt,ArrayBuffer[Neighbor]]): ArrayBuffer[EdgePair] = {
  var visited: scala.collection.mutable.Map[BigInt,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,Boolean]]
  visited.update(BigInt(0), true)
  var mst: ArrayBuffer[EdgePair] = ArrayBuffer[EdgePair]()
  var count: BigInt = BigInt(1)
  var total: BigInt = BigInt(0)
  for (k <- adjacency.keys) {
    total = total + BigInt(1)
  }
  while (count < total) {
    var best_u: BigInt = BigInt(0)
    var best_v: BigInt = BigInt(0)
    var best_cost: BigInt = BigInt(2147483647)
    for (u_str <- adjacency.keys) {
      val u: BigInt = BigInt(u_str.toString.toDouble.toInt)
      if (visited.getOrElse(u, false).asInstanceOf[Boolean]) {
        for (n <- adjacency.getOrElse(u, ArrayBuffer[Neighbor]()).asInstanceOf[ArrayBuffer[Neighbor]]) {
          if ((!visited.getOrElse(n.asInstanceOf[Neighbor].node, false).asInstanceOf[Boolean] && n.asInstanceOf[Neighbor].cost < best_cost).asInstanceOf[Boolean]) {
            best_cost = n.asInstanceOf[Neighbor].cost
            best_u = u
            best_v = n.asInstanceOf[Neighbor].node
          }
        }
      }
    }
    visited.update(best_v, true)
    mst = mst :+ EdgePair(best_u, best_v)
    count = count + BigInt(1)
  }
  return mst
}

def test_prim_successful_result(): Boolean = {
  val edges: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(0), BigInt(1), BigInt(4)), ArrayBuffer(BigInt(0), BigInt(7), BigInt(8)), ArrayBuffer(BigInt(1), BigInt(2), BigInt(8)), ArrayBuffer(BigInt(7), BigInt(8), BigInt(7)), ArrayBuffer(BigInt(7), BigInt(6), BigInt(1)), ArrayBuffer(BigInt(2), BigInt(8), BigInt(2)), ArrayBuffer(BigInt(8), BigInt(6), BigInt(6)), ArrayBuffer(BigInt(2), BigInt(3), BigInt(7)), ArrayBuffer(BigInt(2), BigInt(5), BigInt(4)), ArrayBuffer(BigInt(6), BigInt(5), BigInt(2)), ArrayBuffer(BigInt(3), BigInt(5), BigInt(14)), ArrayBuffer(BigInt(3), BigInt(4), BigInt(9)), ArrayBuffer(BigInt(5), BigInt(4), BigInt(10)), ArrayBuffer(BigInt(1), BigInt(7), BigInt(11)))
  var adjacency: scala.collection.mutable.Map[BigInt,ArrayBuffer[Neighbor]] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[BigInt,ArrayBuffer[Neighbor]]]
  for (e <- edges) {
    val u: BigInt = e((BigInt(0).toInt).toInt)
    val v: BigInt = e((BigInt(1).toInt).toInt)
    val w: BigInt = e((BigInt(2).toInt).toInt)
    if (!(adjacency.contains(u)).asInstanceOf[Boolean]) {
      adjacency.update(u, ArrayBuffer())
    }
    if (!(adjacency.contains(v)).asInstanceOf[Boolean]) {
      adjacency.update(v, ArrayBuffer())
    }
    adjacency.update(u, adjacency.getOrElse(u, ArrayBuffer[Neighbor]()).asInstanceOf[ArrayBuffer[Neighbor]] :+ Neighbor(v, w))
    adjacency.update(v, adjacency.getOrElse(v, ArrayBuffer[Neighbor]()).asInstanceOf[ArrayBuffer[Neighbor]] :+ Neighbor(u, w))
  }
  val result: ArrayBuffer[EdgePair] = prims_algorithm(adjacency)
  var seen: scala.collection.mutable.Map[String,Boolean] = (scala.collection.mutable.Map()).asInstanceOf[scala.collection.mutable.Map[String,Boolean]]
  for (e <- result) {
    val key1: String = String.valueOf(e.asInstanceOf[EdgePair].u) + "," + String.valueOf(e.asInstanceOf[EdgePair].v)
    val key2: String = String.valueOf(e.asInstanceOf[EdgePair].v) + "," + String.valueOf(e.asInstanceOf[EdgePair].u)
    seen.update(key1, true)
    seen.update(key2, true)
  }
  val expected: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer(ArrayBuffer(BigInt(7), BigInt(6), BigInt(1)), ArrayBuffer(BigInt(2), BigInt(8), BigInt(2)), ArrayBuffer(BigInt(6), BigInt(5), BigInt(2)), ArrayBuffer(BigInt(0), BigInt(1), BigInt(4)), ArrayBuffer(BigInt(2), BigInt(5), BigInt(4)), ArrayBuffer(BigInt(2), BigInt(3), BigInt(7)), ArrayBuffer(BigInt(0), BigInt(7), BigInt(8)), ArrayBuffer(BigInt(3), BigInt(4), BigInt(9)))
  for (ans <- expected) {
    val key: String = String.valueOf(ans((BigInt(0).toInt).toInt)) + "," + String.valueOf(ans((BigInt(1).toInt).toInt))
    if (!seen.getOrElse(key.toString, false).asInstanceOf[Boolean]) {
      return false
    }
  }
  return true
}

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    println(test_prim_successful_result())
    println(true)
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
