// Generated by Mochi v0.10.59 on 2025-08-07 11:22:21 GMT+7
import scala.collection.mutable.{ArrayBuffer, Map}
import scala.math.BigInt
import scala.collection.immutable.ListMap
import scala.util.control.Breaks
import scala.util.control.Breaks._
object Main {
  private var _nowSeed: Long = 0L
  private var _nowSeeded: Boolean = false
  private def _now(): Int = {
    if (!_nowSeeded) {
      sys.env.get("MOCHI_NOW_SEED").foreach { s =>
      try { _nowSeed = s.toInt; _nowSeeded = true } catch { case _ : NumberFormatException => () }
    }
  }
  if (_nowSeeded) {
    _nowSeed = (_nowSeed * 1664525 + 1013904223) % 2147483647
    _nowSeed.toInt
  } else {
    Math.abs((System.nanoTime() / 1000).toInt)
  }
}

def toJson(value: Any, indent: Int = 0): String = value match {
  case m: scala.collection.Map[_, _] =>
  val items = ListMap(m.toSeq.sortBy(_._1.toString): _*).toSeq.map{ case (k,v) => "  "*(indent+1)+"\""+k.toString+"\": "+toJson(v, indent+1) }
  "{\n"+items.mkString(",\n")+"\n"+"  "*indent+"}"
  case s: Seq[_] =>
  val items = s.map(x => "  "*(indent+1)+toJson(x, indent+1))
  "[\n"+items.mkString(",\n")+"\n"+"  "*indent+"]"
  case s: String => "\""+s+"\""
  case other => other.toString
}

case class Dinic(var n: BigInt, var lvl: ArrayBuffer[BigInt], var ptr: ArrayBuffer[BigInt], var q: ArrayBuffer[BigInt], var adj: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]])

def pow2(k: BigInt): BigInt = {
  var res: BigInt = BigInt(1)
  var i: BigInt = BigInt(0)
  while (i < k) {
    res = res * BigInt(2)
    i = i + BigInt(1)
  }
  return res
}

def min2(a: BigInt, b: BigInt): BigInt = {
  if (a < b) {
    return a
  }
  return b
}

def new_dinic(n: BigInt): Dinic = {
  var lvl: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var ptr: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var q: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
  var adj: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]]()
  var i: BigInt = BigInt(0)
  while (i < n) {
    lvl = lvl :+ BigInt(0)
    ptr = ptr :+ BigInt(0)
    q = q :+ BigInt(0)
    var edges: ArrayBuffer[ArrayBuffer[BigInt]] = ArrayBuffer[ArrayBuffer[BigInt]]()
    adj = adj :+ edges
    i = i + BigInt(1)
  }
  return Dinic(n, lvl, ptr, q, adj)
}

def add_edge(g: Dinic, a: BigInt, b: BigInt, c: BigInt, rcap: BigInt): Any = {
  var adj: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = g.asInstanceOf[Dinic].adj
  var list_a: ArrayBuffer[ArrayBuffer[BigInt]] = adj((a.toInt).toInt)
  var list_b: ArrayBuffer[ArrayBuffer[BigInt]] = adj((b.toInt).toInt)
  val e1: ArrayBuffer[BigInt] = ArrayBuffer(b, BigInt((list_b).size), c, BigInt(0))
  val e2: ArrayBuffer[BigInt] = ArrayBuffer(a, BigInt((list_a).size), rcap, BigInt(0))
  list_a = list_a :+ e1
  list_b = list_b :+ e2
  adj((a).toInt) = list_a
  adj((b).toInt) = list_b
  g.asInstanceOf[Dinic].adj = adj
}

def dfs(g: Dinic, v: BigInt, sink: BigInt, flow: BigInt): BigInt = {
  if ((v == sink || flow == BigInt(0)).asInstanceOf[Boolean]) {
    return flow
  }
  var ptr: ArrayBuffer[BigInt] = g.asInstanceOf[Dinic].ptr
  var i: BigInt = ptr((v.toInt).toInt)
  var adj_all: ArrayBuffer[ArrayBuffer[ArrayBuffer[BigInt]]] = g.asInstanceOf[Dinic].adj
  var adj_v: ArrayBuffer[ArrayBuffer[BigInt]] = adj_all((v.toInt).toInt)
  while (i < BigInt((adj_v).size)) {
    var e: ArrayBuffer[BigInt] = adj_v((i.toInt).toInt)
    val to: BigInt = e((BigInt(0).toInt).toInt)
    if (g.asInstanceOf[Dinic].lvl((to.toInt).toInt) == g.asInstanceOf[Dinic].lvl((v.toInt).toInt) + BigInt(1)) {
      val avail: BigInt = e((BigInt(2).toInt).toInt) - e((BigInt(3).toInt).toInt)
      val pushed: BigInt = dfs(g, to, sink, min2(flow, avail))
      if (pushed > BigInt(0)) {
        e((BigInt(3)).toInt) = e((BigInt(3).toInt).toInt) + pushed
        adj_v((i).toInt) = e
        var adj_to: ArrayBuffer[ArrayBuffer[BigInt]] = adj_all((to.toInt).toInt)
        var back: ArrayBuffer[BigInt] = adj_to((e((BigInt(1).toInt).toInt).toInt).toInt)
        back((BigInt(3)).toInt) = back((BigInt(3).toInt).toInt) - pushed
        adj_to((e((BigInt(1).toInt).toInt)).toInt) = back
        adj_all((to).toInt) = adj_to
        adj_all((v).toInt) = adj_v
        g.asInstanceOf[Dinic].adj = adj_all
        return pushed
      }
    }
    i = i + BigInt(1)
    ptr((v).toInt) = i
  }
  g.asInstanceOf[Dinic].ptr = ptr
  adj_all((v).toInt) = adj_v
  g.asInstanceOf[Dinic].adj = adj_all
  return BigInt(0)
}

def max_flow(g: Dinic, source: BigInt, sink: BigInt): BigInt = {
  var flow: BigInt = BigInt(0)
  var l: BigInt = BigInt(0)
  val _br3 = new Breaks
  _br3.breakable {
    while (l < BigInt(31)) {
      val threshold: BigInt = pow2(BigInt(30) - l)
      val _br4 = new Breaks
      _br4.breakable {
        while (true) {
          var lvl: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
          var ptr: ArrayBuffer[BigInt] = ArrayBuffer[BigInt]()
          var i: BigInt = BigInt(0)
          while (i < g.asInstanceOf[Dinic].n) {
            lvl = lvl :+ BigInt(0)
            ptr = ptr :+ BigInt(0)
            i = i + BigInt(1)
          }
          g.asInstanceOf[Dinic].lvl = lvl
          g.asInstanceOf[Dinic].ptr = ptr
          var qi: BigInt = BigInt(0)
          var qe: BigInt = BigInt(1)
          lvl((source).toInt) = BigInt(1)
          g.asInstanceOf[Dinic].lvl = lvl
          var q: ArrayBuffer[BigInt] = g.asInstanceOf[Dinic].q
          q((BigInt(0)).toInt) = source
          while (qi < qe && g.asInstanceOf[Dinic].lvl((sink.toInt).toInt) == BigInt(0)) {
            val v: BigInt = q((qi.toInt).toInt)
            qi = qi + BigInt(1)
            var edges: ArrayBuffer[ArrayBuffer[BigInt]] = g.asInstanceOf[Dinic].adj((v.toInt).toInt)
            var j: BigInt = BigInt(0)
            while (j < BigInt((edges).size)) {
              val e: ArrayBuffer[BigInt] = edges((j.toInt).toInt)
              val to: BigInt = e((BigInt(0).toInt).toInt)
              val residual: BigInt = e((BigInt(2).toInt).toInt) - e((BigInt(3).toInt).toInt)
              var lvl_inner: ArrayBuffer[BigInt] = g.asInstanceOf[Dinic].lvl
              if ((lvl_inner((to.toInt).toInt) == BigInt(0) && residual >= threshold).asInstanceOf[Boolean]) {
                q((qe).toInt) = to
                qe = qe + BigInt(1)
                lvl_inner((to).toInt) = lvl_inner((v.toInt).toInt) + BigInt(1)
                g.asInstanceOf[Dinic].lvl = lvl_inner
              }
              j = j + BigInt(1)
            }
          }
          var p: BigInt = dfs(g, source, sink, INF)
          while (p > BigInt(0)) {
            flow = flow + p
            p = dfs(g, source, sink, INF)
          }
          if (g.asInstanceOf[Dinic].lvl((sink.toInt).toInt) == BigInt(0)) {
            _br4.break()
          }
        }
      }
      l = l + BigInt(1)
    }
  }
  return flow
}

val INF: BigInt = BigInt(1000000000)

var graph: Dinic = new_dinic(BigInt(10))

val source: BigInt = BigInt(0)

val sink: BigInt = BigInt(9)

def main(args: Array[String]): Unit = {
  {
    System.gc()
    val _startMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _start = _now()
    var v: BigInt = BigInt(1)
    while (v < BigInt(5)) {
      add_edge(graph, source, v, BigInt(1), BigInt(0))
      v = v + BigInt(1)
    }
    v = BigInt(5)
    while (v < BigInt(9)) {
      add_edge(graph, v, sink, BigInt(1), BigInt(0))
      v = v + BigInt(1)
    }
    v = BigInt(1)
    while (v < BigInt(5)) {
      add_edge(graph, v, v + BigInt(4), BigInt(1), BigInt(0))
      v = v + BigInt(1)
    }
    println(String.valueOf(max_flow(graph, source, sink)))
    val _end = _now()
    System.gc()
    val _endMem = Runtime.getRuntime.totalMemory() - Runtime.getRuntime.freeMemory()
    val _durUs = (_end - _start) / 1000
    var _memDiff = _endMem - _startMem
    if (_memDiff <= 0) _memDiff = _endMem
    println(toJson(scala.collection.immutable.Map("duration_us" -> _durUs, "memory_bytes" -> _memDiff, "name" -> "main")))
  }
}
}
